void sub_10054ABA4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  _QWORD v44[4];
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v53 = 0;
  v54 = 0;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v13 = *(_DWORD *)(a1 + 80);
  if (v13 == 2 || v13 == 1 && sub_10001CB50(a1))
  {
    v20 = sub_100023B7C(value, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
    if (v20)
    {
      sub_1004B1368(a1, 128, xdict, v20);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702DF8();
    }
    v27 = sub_100023B7C(v50, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBLeSetPhyAllPhys");
    if (v27)
    {
      sub_1004B1368(a1, 128, xdict, v27);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702D98();
    }
    v34 = sub_100023B7C(v50, 0, v21, v22, v23, v24, v25, v26, (uint64_t)"kCBLeSetPhyTxPhys");
    if (v34)
    {
      sub_1004B1368(a1, 128, xdict, v34);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702D38();
    }
    v41 = sub_100023B7C(v50, 0, v28, v29, v30, v31, v32, v33, (uint64_t)"kCBLeSetPhyRxPhys");
    if (v41)
    {
      sub_1004B1368(a1, 128, xdict, v41);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702CD8();
    }
    v42 = sub_100023B7C(v50, 0, v35, v36, v37, v38, v39, v40, (uint64_t)"kCBLeSetPhyRxPhyOptions");
    if (v42)
    {
      sub_1004B1368(a1, 128, xdict, v42);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702C78();
    }
    v43 = sub_1000419F4();
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v44[2] = sub_10055A7D4;
    v44[3] = &unk_100937300;
    v45 = v12;
    v46 = v54;
    v47 = v53;
    v48 = v52;
    v49 = v51;
    sub_100023D84(v43, v44);

  }
}

void sub_10054AEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_10054AEC0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  char v23;
  NSObject *v24;
  id v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  char v38;
  int v39;
  int v40;
  int v41;
  char v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  _QWORD v52[4];
  id v53;
  uint64_t *v54;
  uint64_t v55;
  BOOL v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  __int16 v64;
  __int16 v65;
  __int16 v66;
  char v67;
  char v68;
  int v69;
  int v70;
  int v71;
  char v72;
  char v73;
  char v74;
  char v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  int v100;
  uint8_t buf[4];
  id v102;
  __int16 v103;
  _BOOL4 v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  int v124;
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;

  v97 = 0;
  v98 = &v97;
  v99 = 0x2020000000;
  v100 = 3;
  v96 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v95 = 0;
  v94 = 0;
  v93 = -120;
  v92 = -120;
  v91 = -120;
  v90 = 0;
  v89 = 0;
  v88 = 0;
  v87 = 0;
  v86 = 0;
  v85 = 0;
  v84 = 0;
  v83 = 0;
  v82 = 0;
  v81 = 0;
  v80 = 0;
  v79 = 0;
  v78 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    v13 = sub_100023B7C(value, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
    *((_DWORD *)v98 + 6) = v13;
    v20 = sub_100023B7C(v96, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBRSSIStatisticAndDetectionEnable");
    *((_DWORD *)v98 + 6) = v20;
    v37 = v95 != 0;
    v21 = v94;
    v49 = v93;
    v48 = v92;
    v22 = v91;
    v23 = v90;
    v47 = v89;
    v46 = v88;
    v44 = v86;
    v45 = v87;
    v42 = v84;
    v43 = v85;
    v41 = v83;
    v40 = v82;
    v39 = v81;
    v51 = v80;
    v38 = v78;
    v50 = v79;
    v24 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v25 = objc_msgSend(*(id *)(a1 + 96), "UTF8String");
      *(_DWORD *)buf = 136384259;
      v102 = v25;
      v103 = 1024;
      v104 = v95 != 0;
      v105 = 1024;
      v106 = v94;
      v107 = 1024;
      v108 = (unsigned __int16)v85;
      v109 = 1024;
      v110 = v84;
      v111 = 1024;
      v112 = (char)v93;
      v113 = 1024;
      v114 = (char)v92;
      v115 = 1024;
      v116 = (char)v91;
      v117 = 1024;
      v118 = (char)v90;
      v119 = 1024;
      v120 = (char)v89;
      v121 = 1024;
      v122 = (char)v88;
      v123 = 1024;
      v124 = (unsigned __int16)v87;
      v125 = 1024;
      v126 = (unsigned __int16)v86;
      v127 = 1024;
      v128 = v79;
      v129 = 1024;
      v130 = v80;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Initiate CBMsgIdConfigureRSSIDetectionAndStatistics by %{private}s enable=%d  window=%d mask=%d:%d Further=%d:%d:%d closer=%d:%d:%d var=%d:%d aopPath=%d Debug=%d", buf, 0x60u);
      v20 = *((_DWORD *)v98 + 6);
    }
    if (v20)
    {
      sub_1004B1368(a1, 214, xdict, v20);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702F24();
    }
    if (v12)
    {
      v77 = 0;
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_100937820);
      v26 = off_1009778A0;
      sub_100030BCC(buf, v12);
      if (sub_100623C54((uint64_t)v26, buf, &v77))
      {
        v27 = sub_1000419F4();
        v52[0] = _NSConcreteStackBlock;
        v52[1] = 3221225472;
        v52[2] = sub_10055A87C;
        v52[3] = &unk_100937328;
        v55 = a1;
        v54 = &v97;
        v53 = v12;
        v56 = v37;
        v57 = v21;
        v58 = v49;
        v59 = v48;
        v60 = v22;
        v61 = v23;
        v62 = v47;
        v63 = v46;
        v64 = v45;
        v65 = v44;
        v66 = v43;
        v67 = v42;
        v68 = 0;
        v69 = v41;
        v70 = v40;
        v71 = v39;
        v72 = v51;
        v73 = v38;
        v74 = v50;
        v75 = 0;
        v76 = 0;
        sub_100023D84(v27, v52);

      }
      else
      {
        *((_DWORD *)v98 + 6) = 312;
        v28 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_100702EB8(v28, v29, v30, v31, v32, v33, v34, v35);
      }
    }
    v36 = *((_DWORD *)v98 + 6);
    if (v36)
    {
      sub_1004B1368(a1, 214, xdict, v36);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702E58();
    }
  }

  _Block_object_dispose(&v97, 8);
}

void sub_10054B528(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_10054B574(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  __int16 v22;
  __int16 v23;
  NSObject *v24;
  id v25;
  NSObject *v26;
  _BOOL4 v27;
  int v28;
  uint64_t v29;
  int v30;
  _QWORD v31[4];
  id v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  id v53;

  v44 = 0;
  v45 = &v44;
  v46 = 0x2020000000;
  v47 = 3;
  v43 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v41 = 0;
  v42 = 0;
  v39 = 0;
  v40 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    v13 = sub_100023B7C(value, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
    *((_DWORD *)v45 + 6) = v13;
    v20 = sub_100023B7C(v43, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBBluetoothUsageEnable");
    v21 = v45;
    *((_DWORD *)v45 + 6) = v20;
    v22 = v41;
    v23 = v40;
    v24 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v25 = objc_msgSend(*(id *)(a1 + 96), "UTF8String");
      *(_DWORD *)buf = 67109635;
      v49 = v41;
      v50 = 1024;
      v51 = v40;
      v52 = 2081;
      v53 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Initiate CBMsgIdConfigureUsageDetection max=%d min=%d for app %{private}s\t", buf, 0x18u);
      v21 = v45;
      v20 = *((_DWORD *)v45 + 6);
    }
    if (v20)
    {
      sub_1004B1368(a1, 215, xdict, v20);
      v26 = qword_100999860;
      v27 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR);
      v21 = v45;
      if (v27)
      {
        v30 = *((_DWORD *)v45 + 6);
        *(_DWORD *)buf = 67109120;
        v49 = v30;
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Failed to convertXPC options  for handleConfigureUsageNotification: %d", buf, 8u);
        v21 = v45;
      }
    }
    v28 = *((_DWORD *)v21 + 6);
    if (!v28 && v12)
    {
      v29 = sub_1000419F4();
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      v31[2] = sub_10055A908;
      v31[3] = &unk_100937350;
      v33 = &v44;
      v34 = a1;
      v35 = v42;
      v37 = v22;
      v38 = v23;
      v32 = v12;
      v36 = v39;
      sub_100023D84(v29, v31);

      v28 = *((_DWORD *)v45 + 6);
    }
    if (v28)
    {
      sub_1004B1368(a1, 215, xdict, v28);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702F84();
    }
  }

  _Block_object_dispose(&v44, 8);
}

void sub_10054B8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  uint64_t v27;

  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10054B8E4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  NSObject *v22;
  id v23;
  NSObject *v24;
  _BOOL4 v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD v29[4];
  id v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint8_t buf[4];
  int v46;
  __int16 v47;
  id v48;

  v41 = 0;
  v42 = &v41;
  v43 = 0x2020000000;
  v44 = 3;
  v40 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v39 = 0;
  v38 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    v13 = sub_100023B7C(value, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
    *((_DWORD *)v42 + 6) = v13;
    v20 = sub_100023B7C(v40, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBPhyStatsConfigEnable");
    v21 = v42;
    *((_DWORD *)v42 + 6) = v20;
    v22 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v23 = objc_msgSend(*(id *)(a1 + 96), "UTF8String");
      *(_DWORD *)buf = 67109379;
      v46 = v38;
      v47 = 2081;
      v48 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Initiate CBMsgIdConfigureUsageStatistics Subrate=%d for App %{private}s", buf, 0x12u);
      v21 = v42;
      v20 = *((_DWORD *)v42 + 6);
    }
    if (v20)
    {
      sub_1004B1368(a1, 216, xdict, v20);
      v24 = qword_100999860;
      v25 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR);
      v21 = v42;
      if (v25)
      {
        v28 = *((_DWORD *)v42 + 6);
        *(_DWORD *)buf = 67109120;
        v46 = v28;
        _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Failed to convertXPC options  for handleConfigureUsageNotification: %d", buf, 8u);
        v21 = v42;
      }
    }
    v26 = *((_DWORD *)v21 + 6);
    if (!v26 && v12)
    {
      v27 = sub_1000419F4();
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_10055A984;
      v29[3] = &unk_100937378;
      v31 = &v41;
      v32 = a1;
      v33 = v39;
      v30 = v12;
      v34 = v38;
      v35 = 0u;
      v36 = 0u;
      v37 = 0;
      sub_100023D84(v27, v29);

      v26 = *((_DWORD *)v42 + 6);
    }
    if (v26)
    {
      sub_1004B1368(a1, 216, xdict, v26);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702FE4();
    }
  }

  _Block_object_dispose(&v41, 8);
}

void sub_10054BBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10054BC20(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  NSObject *v28;
  char *v29;
  void *v30;
  void *v31;
  NSObject *v32;
  const char *v33;
  void *v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[4];
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  void *v51;

  v45 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions"))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100700E88();
  }
  else
  {
    if (!v5)
      goto LABEL_39;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if (sub_100656AA4((uint64_t)off_1009778C0, v5))
    {
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_100937800);
      if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v5) & 1) != 0)
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_1009377A0);
        if ((sub_10000AEE4((uint64_t)off_1009778C0, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
        {
          v43 = 0;
          v44 = 0;
          v18 = sub_100023B7C(v45, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"@kCBConnectOptionOpportunistic");
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[ConnectOptions alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:](ConnectOptions, "alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:", 0, 0, 0, 0, 0));
          v20 = v19;
          if (*(int *)(a1 + 80) >= 1
            && (objc_msgSend(v19, "setOpportunistic:", v44 != 0),
                v21 = sub_10000FC60(v45, "kCBOptionUseCaseList"),
                v22 = (void *)objc_claimAutoreleasedReturnValue(v21),
                (v23 = v22) != 0))
          {
            if (objc_msgSend(v22, "count"))
            {
              v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v23));
              v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "allObjects"));

              v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "sortedArrayUsingSelector:", "compare:"));
              objc_msgSend(v20, "setUseCaseList:", v23);
              v26 = sub_100558F38(v23);
              v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
              v28 = qword_100999860;
              if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
              {
                v29 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "componentsJoinedByString:", CFSTR(",")));
                *(_DWORD *)buf = 138412290;
                v47 = v29;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "connUseCaseList: %@", buf, 0xCu);

              }
              if (!objc_msgSend(v20, "connectionUseCase"))
              {
                v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "firstObject"));
                v31 = v30;
                if (v30)
                {
                  objc_msgSend(v20, "setConnectionUseCase:", objc_msgSend(v30, "longLongValue"));
                  v32 = qword_100999860;
                  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
                  {
                    v33 = sub_100035930((int)objc_msgSend(v31, "longLongValue"));
                    *(_DWORD *)buf = 136315138;
                    v47 = v33;
                    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "default useCase derived from useCaseList: %s", buf, 0xCu);
                  }
                }

              }
            }
            v34 = v23;
          }
          else
          {
            v34 = 0;
          }
          if (!v18)
          {
            v38 = sub_1000419F4();
            v39[0] = _NSConcreteStackBlock;
            v39[1] = 3221225472;
            v39[2] = sub_100559038;
            v39[3] = &unk_100919500;
            v42 = a1;
            v40 = v5;
            v41 = v20;
            sub_100023D84(v38, v39);

          }
        }
        else
        {
          v35 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            v36 = *(const char **)(a1 + 96);
            v37 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)buf = 138412802;
            v47 = v36;
            v48 = 2112;
            v49 = v37;
            v50 = 2112;
            v51 = v5;
            _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_100700E28();
      }
    }
    else
    {
LABEL_39:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700CF8();
    }
  }

}

void sub_10054C150(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10054C1D4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  xpc_object_t reply;
  void *v13;
  uint64_t v14;
  uint8_t buf[4];
  void *v16;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)v6;
  if (*(int *)(a1 + 80) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007031A0();
    v10 = 11;
    goto LABEL_21;
  }
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007030A4();
    goto LABEL_20;
  }
  v14 = 0;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100937820);
  v8 = off_1009778A0;
  sub_100030BCC(buf, v7);
  if (!sub_100623C54((uint64_t)v8, buf, &v14))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703140();
    goto LABEL_20;
  }
  buf[0] = 0;
  sub_100043758(buf);
  if (!sub_10019AC00(v14))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007030D0();
    sub_100043728(buf);
LABEL_20:
    v10 = 8;
    goto LABEL_21;
  }
  sub_10004339C(buf);
  v9 = sub_1000438A4();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 2936))(v9, v14, 0xFFFFLL, 1, 1, 1);
  sub_100043728(buf);
  if (!v10)
  {
    v11 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Counter events for %@ started", buf, 0xCu);
      v10 = 0;
    }
    goto LABEL_23;
  }
LABEL_21:
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_100703044();
LABEL_23:
  reply = xpc_dictionary_create_reply(xdict);
  v13 = reply;
  if (reply)
  {
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v13);
    xpc_release(v13);
  }

}

void sub_10054C460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10054C490(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  xpc_object_t reply;
  void *v13;
  uint64_t v14;
  uint8_t buf[4];
  void *v16;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)v6;
  if (*(int *)(a1 + 80) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007031CC();
    v10 = 11;
    goto LABEL_21;
  }
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007030A4();
    goto LABEL_20;
  }
  v14 = 0;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100937820);
  v8 = off_1009778A0;
  sub_100030BCC(buf, v7);
  if (!sub_100623C54((uint64_t)v8, buf, &v14))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703140();
    goto LABEL_20;
  }
  buf[0] = 0;
  sub_100043758(buf);
  if (!sub_10019AC00(v14))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007030D0();
    sub_100043728(buf);
LABEL_20:
    v10 = 8;
    goto LABEL_21;
  }
  sub_10004339C(buf);
  v9 = sub_1000438A4();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 2936))(v9, v14, 0xFFFFLL, 1, 0, 1);
  sub_100043728(buf);
  if (!v10)
  {
    v11 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Counter events for %@ stopped", buf, 0xCu);
      v10 = 0;
    }
    goto LABEL_23;
  }
LABEL_21:
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_100703044();
LABEL_23:
  reply = xpc_dictionary_create_reply(xdict);
  v13 = reply;
  if (reply)
  {
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v13);
    xpc_release(v13);
  }

}

void sub_10054C71C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10054C74C(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v3;
  unsigned __int16 i;
  uint64_t v5;
  id v6;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v3 = sub_1002C3AD4(value, "kCBMsgArgDevices");
  v6 = (id)objc_claimAutoreleasedReturnValue(v3);
  for (i = 0; (uint64_t)objc_msgSend(v6, "longValue") > i; ++i)
  {
    v5 = sub_1000419F4();
    sub_100041A34(v5, &stru_1009374E0);
    usleep(0x64u);
  }

}

void sub_10054C7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10054C7E0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  char v13;
  int v14;
  __int16 v15;

  if (*(int *)(a1 + 80) > 1)
  {
    value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v3 = sub_1000239F0(value, "kCBSetIRKForAddressPublicAddress");
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = sub_100649C7C(v4);
    v6 = sub_100225368(v5);
    v7 = sub_1002C3A5C(value, "kCBSetIRKForAddressIRK");
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if (objc_msgSend(v8, "length") == (id)16)
    {
      v9 = sub_1000419F4();
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100560230;
      v10[3] = &unk_10092D890;
      v11 = v8;
      v12 = 16;
      v13 = 0;
      v15 = WORD2(v6);
      v14 = v6;
      sub_100023D84(v9, v10);

    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_100700D9C();
    }

  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_1007031F8();
  }
}

void sub_10054C930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_10054C964(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  char v9;
  int v10;
  __int16 v11;

  if (*(int *)(a1 + 80) > 1)
  {
    value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v3 = sub_1000239F0(value, "kCBSetIRKForAddressPublicAddress");
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = sub_100649C7C(v4);
    v6 = sub_100225368(v5);
    v7 = sub_1000419F4();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1005602DC;
    v8[3] = &unk_100931C98;
    v9 = 0;
    v10 = v6;
    v11 = WORD2(v6);
    sub_100023D84(v7, v8);

  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100703224();
  }
}

void sub_10054CA38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10054CA4C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;

  if (*(int *)(a1 + 80) > 1)
  {
    value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v3 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = sub_1000419F4();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10056032C;
    v7[3] = &unk_1009172A0;
    v6 = v4;
    v8 = v6;
    sub_100023D84(v5, v7);

  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100703250();
  }
}

void sub_10054CB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_10054CB48(uint64_t a1, xpc_object_t original)
{
  xpc_object_t reply;
  void *v5;
  xpc_object_t value;
  xpc_object_t array;
  void *v8;
  size_t v9;
  const char *string;
  const char *v11;
  void *v12;
  char v13;

  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070327C();
  }
  else
  {
    reply = xpc_dictionary_create_reply(original);
    if (reply)
    {
      v5 = reply;
      value = xpc_dictionary_get_value(original, "kCBMsgArgs");
      array = xpc_dictionary_get_array(value, "kCBMsgArgAnyConnectedPeripheralsPerApp");
      if (array)
      {
        v8 = array;
        if (xpc_get_type(array) == (xpc_type_t)&_xpc_type_array)
        {
          if (xpc_array_get_count(v8))
          {
            v9 = 0;
            do
            {
              string = xpc_array_get_string(v8, v9);
              if (string)
              {
                v11 = string;
                v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", string));
                if (qword_100978170 != -1)
                  dispatch_once(&qword_100978170, &stru_100937800);
                v13 = sub_1002E1314((uint64_t)off_100978168, v12);
                xpc_dictionary_set_BOOL(v5, v11, v13);

              }
              ++v9;
            }
            while (v9 < xpc_array_get_count(v8));
          }
        }
      }
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v5);
      xpc_release(v5);
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_1007032A8();
    }
  }
}

void sub_10054CCFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10054CD0C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  xpc_object_t reply;
  void *v9;
  _DWORD v10[2];
  __int16 v11;
  _OWORD *v12;
  _OWORD bytes[2];

  if (*(int *)(a1 + 80) >= 1
    && (v4 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 344))(v4) & 1) != 0))
  {
    memset(bytes, 0, sizeof(bytes));
    v5 = sub_1000438A4();
    v6 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v5 + 3464))(v5, bytes, 32);
    v7 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
    {
      v10[0] = 68157954;
      v10[1] = 32;
      v11 = 2096;
      v12 = bytes;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "LPEM data: %.32P", (uint8_t *)v10, 0x12u);
    }
    reply = xpc_dictionary_create_reply(a2);
    if (reply)
    {
      v9 = reply;
      xpc_dictionary_set_data(reply, "kCBMsgArgLPEMData", bytes, 0x20uLL);
      xpc_dictionary_set_int64(v9, "kCBMsgArgResult", v6);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v9);
      xpc_release(v9);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_1007032D4();
  }
}

void sub_10054CE90(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  _QWORD v7[6];

  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703300();
  }
  else
  {
    value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v5 = sub_1000239F0(value, "kCBMsgArgWhbStableIdentifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if (v6)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10056037C;
      v7[3] = &unk_1009376A0;
      v7[4] = a1;
      v7[5] = xpc_dictionary_create_reply(xdict);
      objc_msgSend(gCBDaemonServer, "optimalWhbDeviceForStableIdentifier:completion:", v6, v7);
    }

  }
}

void sub_10054CF78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10054CF88(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  void *v7;
  xpc_object_t reply;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  unsigned __int8 uuid[8];
  uint64_t v15;

  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070332C();
  }
  else
  {
    value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v5 = sub_1000239F0(value, "kCBMsgArgWhbStableIdentifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(gCBDaemonServer, "localWhbDeviceForStableId:", v6));
      reply = xpc_dictionary_create_reply(xdict);
      if (reply)
      {
        if (v7)
        {
          v9 = objc_alloc((Class)NSUUID);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
          v11 = objc_msgSend(v9, "initWithUUIDString:", v10);

          v12 = v11;
          v13 = v12;
          if (v12)
          {
            *(_QWORD *)uuid = 0;
            v15 = 0;
            objc_msgSend(v12, "getUUIDBytes:", uuid);
            xpc_dictionary_set_uuid(reply, "kCBMsgArgDeviceUUID", uuid);
          }

        }
        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
        xpc_release(reply);
      }

    }
  }
}

void sub_10054D100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10054D144(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  xpc_object_t reply;
  void *v13;

  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703358();
  }
  else
  {
    value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgUseCase");
    if (qword_10097AC58 != -1)
      dispatch_once(&qword_10097AC58, &stru_100937900);
    v11 = sub_1006C00E8(qword_10097AC50, 0);
    reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      v13 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgUsecaseCount", v11);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v13);
      xpc_release(v13);
    }
  }
}

void sub_10054D254(uint64_t a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;

  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703384();
  }
  else
  {
    v2 = objc_msgSend(&off_100961290, "containsObject:", *(_QWORD *)(a1 + 96));
    v3 = qword_100999860;
    if ((v2 & 1) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
      {
        v4 = (_QWORD *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0)
          v4 = (_QWORD *)*v4;
        v6 = 136446210;
        v7 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Refreshing NonConnectable Identity for session \"%{public}s\" ", (uint8_t *)&v6, 0xCu);
      }
      v5 = sub_1000419F4();
      sub_100023D84(v5, &stru_1009376C0);
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_1007033B0();
    }
  }
}

void sub_10054D38C(uint64_t a1, void *a2)
{
  unsigned __int8 v4;
  NSObject *v5;
  _QWORD *v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  _QWORD v20[5];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint8_t buf[4];
  _QWORD *v28;

  v21 = 0;
  v22 = &v21;
  v23 = 0x3032000000;
  v24 = sub_1000626B8;
  v25 = sub_1000623F4;
  v26 = 0;
  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703384();
  }
  else
  {
    v4 = objc_msgSend(&off_1009612A8, "containsObject:", *(_QWORD *)(a1 + 96));
    v5 = qword_100999860;
    if ((v4 & 1) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
      {
        v6 = (_QWORD *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0)
          v6 = (_QWORD *)*v6;
        *(_DWORD *)buf = 136446210;
        v28 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Retrieving NonConnectable Identity for session \"%{public}s\" ", buf, 0xCu);
      }
      v7 = sub_1000419F4();
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1005604D8;
      v20[3] = &unk_1009193E8;
      v20[4] = &v21;
      sub_100023D84(v7, v20);
      reply = xpc_dictionary_create_reply(a2);
      if (reply)
      {
        v9 = (void *)v22[5];
        if (v9)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("instance")));
          v11 = v10;
          if (v10 && objc_msgSend(v10, "unsignedShortValue") == 1)
          {
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v22[5], "objectForKeyedSubscript:", CFSTR("identity")));
            v13 = v12;
            if (v12)
            {
              v14 = objc_retainAutorelease(v12);
              xpc_dictionary_set_data(reply, "kCBMsgArgIdentityIRK", objc_msgSend(v14, "bytes"), (size_t)objc_msgSend(v14, "length"));
            }
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v22[5], "objectForKeyedSubscript:", CFSTR("address")));
            v16 = v15;
            if (v15)
            {
              v17 = objc_msgSend(v15, "unsignedLongLongValue");
              if (v17)
              {
                v18 = sub_100649FD0((unint64_t)v17);
                v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v18));
                xpc_dictionary_set_data(reply, "kCBMsgArgIdentityAddress", objc_msgSend(v19, "bytes"), (size_t)objc_msgSend(v19, "length"));

              }
            }

          }
        }
        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
        xpc_release(reply);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_100703410();
    }
  }
  _Block_object_dispose(&v21, 8);

}

void sub_10054D664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_10054D6D0(uint64_t a1, xpc_object_t original)
{
  _QWORD v3[6];
  _QWORD v4[3];
  xpc_object_t reply;

  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x2020000000;
  reply = 0;
  reply = xpc_dictionary_create_reply(original);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100937820);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100560540;
  v3[3] = &unk_100936F48;
  v3[4] = v4;
  v3[5] = a1;
  sub_1006435F4((uint64_t)off_1009778A0, v3);
  _Block_object_dispose(v4, 8);
}

void sub_10054D790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10054D7A8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL4 v17;
  int v18;
  xpc_object_t reply;
  _QWORD v20[4];
  id v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t buf[4];
  uint64_t v32;

  v30 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v29 = 0;
  v25 = 0;
  v26 = &v25;
  v27 = 0x2020000000;
  v28 = 0;
  v28 = sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgConnectionLatency");
  v13 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v32 = v29;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "handlePeerSetConnectionLatencyMsg hasCompletionBlock=%lld", buf, 0xCu);
  }
  if (!*((_DWORD *)v26 + 6) && v6)
  {
    v14 = sub_1000419F4();
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10055B2E4;
    v20[3] = &unk_100937498;
    v22 = &v25;
    v23 = a1;
    v21 = v6;
    v24 = v30;
    sub_100023D84(v14, v20);

  }
  v15 = v29;
  v16 = qword_100999860;
  v17 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v17)
    {
      v18 = *((_DWORD *)v26 + 6);
      *(_DWORD *)buf = 67109120;
      LODWORD(v32) = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Sending error back %d", buf, 8u);
    }
    reply = xpc_dictionary_create_reply(xdict);
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", *((int *)v26 + 6));
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
  }
  else if (v17)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Not sending response !", buf, 2u);
  }
  _Block_object_dispose(&v25, 8);

}

void sub_10054DA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  va_list va;

  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10054DA6C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void *v19;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1000239F0(value, "kCBMsgArgName");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v7)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if ((sub_10000AEE4((uint64_t)off_1009778C0, v7, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 183) && v5)
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_1009377A0);
        v8 = off_1009778C0;
        sub_100091AE8(__p, (char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
        sub_1006576F0((uint64_t)v8, v7, (unsigned __int8 *)__p);
        if (v13 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      v9 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v10 = *(_QWORD *)(a1 + 96);
        v11 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412802;
        v15 = v10;
        v16 = 2112;
        v17 = v11;
        v18 = 2112;
        v19 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100703470();
  }

}

void sub_10054DC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10054DCA4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  void *v16;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1000239F0(value, "kCBMsgArgName");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v7)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if ((sub_10000AEE4((uint64_t)off_1009778C0, v7, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 183) && v5)
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_1009377A0);
        sub_100653B18((uint64_t)off_1009778C0, v7, v5);
      }
    }
    else
    {
      v8 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v9 = *(_QWORD *)(a1 + 96);
        v10 = *(_QWORD *)(a1 + 48);
        v11 = 138412802;
        v12 = v9;
        v13 = 2112;
        v14 = v10;
        v15 = 2112;
        v16 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", (uint8_t *)&v11, 0x20u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100703470();
  }

}

void sub_10054DE74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10054DE98(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  char v13;
  xpc_object_t reply;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18[2];
  char v19;
  void *__p[2];
  char v21;
  char v22;
  _BYTE buf[12];
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  void *v27;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1000239F0(value, "kCBMsgArgName");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703470();
    goto LABEL_20;
  }
  v22 = 0;
  v9 = sub_100027F68();
  sub_100091AE8(buf, "Tags");
  sub_100091AE8(__p, "AllowEveryone");
  v10 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v9 + 72))(v9, buf, __p, &v22);
  if (v21 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v26) < 0)
  {
    operator delete(*(void **)buf);
    if (!v10)
      goto LABEL_12;
  }
  else if (!v10)
  {
    goto LABEL_12;
  }
  v11 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Tags are for everyone !!!!!!", buf, 2u);
  }
LABEL_12:
  v22 = 1;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  if ((sub_10000AEE4((uint64_t)off_1009778C0, v8, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
  {
    v12 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(a1 + 96);
      v17 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v16;
      v24 = 2112;
      v25 = v17;
      v26 = 2112;
      v27 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
    }
    goto LABEL_20;
  }
  if (*(_BYTE *)(a1 + 183))
  {
    if (!v6)
    {
LABEL_20:
      v13 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    v13 = 0;
    if (!v22 || !v6)
      goto LABEL_21;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  v15 = off_1009778C0;
  sub_100091AE8(v18, (char *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String"));
  v13 = sub_10000628C((uint64_t)v15, v8, (uint64_t)v18);
  if (v19 < 0)
    operator delete(v18[0]);
LABEL_21:
  reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_BOOL(reply, "kCBMsgArgData", v13);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
  xpc_release(reply);

}

void sub_10054E1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10054E21C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  NSMutableArray *v5;
  id v6;
  void *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  uint8_t *v11;
  _QWORD *v12;
  void *v13;
  uint8_t *v14;
  uint8_t *v15;
  BOOL v16;
  NSObject *v17;
  xpc_object_t reply;
  xpc_object_t v19;
  NSMutableArray *v20;
  id v21;
  uint64_t v22;
  void *i;
  id v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *__p[2];
  char v32;
  unsigned __int8 v33;
  _BYTE v34[128];
  uint8_t buf[24];
  void *v36;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = objc_opt_new(NSMutableArray);
  v6 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v7)
  {
    v33 = 0;
    v8 = sub_100027F68();
    sub_100091AE8(buf, "Tags");
    sub_100091AE8(__p, "AllowEveryone");
    v9 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(_QWORD *)v8 + 72))(v8, buf, __p, &v33);
    if (v32 < 0)
      operator delete(__p[0]);
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (!v9)
      {
LABEL_12:
        v33 = 1;
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_1009377A0);
        if ((sub_10000AEE4((uint64_t)off_1009778C0, v7, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
        {
          if (*(unsigned __int8 *)(a1 + 183) | v33)
          {
            memset(buf, 0, sizeof(buf));
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_1009377A0);
            sub_100658D7C((uint64_t)off_1009778C0, v7, (uint64_t *)buf);
            v11 = *(uint8_t **)buf;
            if (*(uint8_t **)buf != &buf[8])
            {
              do
              {
                v12 = v11 + 32;
                if ((char)v11[55] < 0)
                  v12 = (_QWORD *)*v12;
                v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v12, 4));
                -[NSMutableArray addObject:](v5, "addObject:", v13);

                v14 = (uint8_t *)*((_QWORD *)v11 + 1);
                if (v14)
                {
                  do
                  {
                    v15 = v14;
                    v14 = *(uint8_t **)v14;
                  }
                  while (v14);
                }
                else
                {
                  do
                  {
                    v15 = (uint8_t *)*((_QWORD *)v11 + 2);
                    v16 = *(_QWORD *)v15 == (_QWORD)v11;
                    v11 = v15;
                  }
                  while (!v16);
                }
                v11 = v15;
              }
              while (v15 != &buf[8]);
            }
            sub_100056BAC((uint64_t)buf, *(char **)&buf[8]);
          }
        }
        else
        {
          v17 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            v25 = *(_QWORD *)(a1 + 96);
            v26 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)buf = 138412802;
            *(_QWORD *)&buf[4] = v25;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v26;
            *(_WORD *)&buf[22] = 2112;
            v36 = v7;
            _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
          }
        }
        goto LABEL_30;
      }
    }
    else if (!v9)
    {
      goto LABEL_12;
    }
    v10 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Tags are for everyone !!!!!!", buf, 2u);
    }
    goto LABEL_12;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_100703470();
LABEL_30:
  reply = xpc_dictionary_create_reply(xdict);
  v19 = xpc_array_create(0, 0);
  if (v19)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v20 = v5;
    v21 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v20, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
    if (v21)
    {
      v22 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v21; i = (char *)i + 1)
        {
          if (*(_QWORD *)v28 != v22)
            objc_enumerationMutation(v20);
          v24 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i));
          xpc_array_set_string(v19, 0xFFFFFFFFFFFFFFFFLL, (const char *)objc_msgSend(v24, "UTF8String", (_QWORD)v27));
        }
        v21 = -[NSMutableArray countByEnumeratingWithState:objects:count:](v20, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
      }
      while (v21);
    }

    xpc_dictionary_set_value(reply, "kCBMsgArgData", v19);
    xpc_release(v19);
  }
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
  xpc_release(reply);

}

void sub_10054E648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_10054E6E0(uint64_t a1, void *a2)
{
  xpc_object_t value;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  uint64_t v19;
  int v20;
  _BYTE v21[34];

  if (*(int *)(a1 + 80) >= 1)
  {
    if (sub_10001CB50(a1))
    {
      value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
      v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      if (!v6)
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_100703470();
        goto LABEL_25;
      }
      v7 = sub_1000239F0(value, "kCBMsgArgName");
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = sub_1000239F0(value, "kCBMsgArgValue");
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
      {
        v11 = *(unsigned __int8 *)(a1 + 183);
        if (*(_BYTE *)(a1 + 183) && v8)
        {
          if ((unint64_t)objc_msgSend(v10, "length") < 0x401)
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_1009377A0);
            sub_1006592E8((uint64_t)off_1009778C0, v6, v8, v10);
          }
          else
          {
            v12 = qword_100999860;
            if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
              sub_10070349C((uint64_t)v8, (uint64_t)&v20, (uint64_t)objc_msgSend(v10, "length"), v12);
          }
          goto LABEL_24;
        }
        v19 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          v20 = 67109890;
          *(_DWORD *)v21 = v11;
          *(_WORD *)&v21[4] = 2112;
          *(_QWORD *)&v21[6] = v6;
          *(_WORD *)&v21[14] = 2112;
          *(_QWORD *)&v21[16] = v8;
          *(_WORD *)&v21[24] = 2112;
          *(_QWORD *)&v21[26] = v10;
          v16 = "handlePeerSetCustomPropertyMsg not calling LeDeviceManager::setCustomProperty. allowInternalRestrictedSe"
                "rvices:%d id:%@ prop:%@ value:%@";
          v17 = v19;
          v18 = 38;
          goto LABEL_20;
        }
      }
      else
      {
        v13 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          v14 = *(_QWORD *)(a1 + 96);
          v15 = *(_QWORD *)(a1 + 48);
          v20 = 138412802;
          *(_QWORD *)v21 = v14;
          *(_WORD *)&v21[8] = 2112;
          *(_QWORD *)&v21[10] = v15;
          *(_WORD *)&v21[18] = 2112;
          *(_QWORD *)&v21[20] = v6;
          v16 = "App %@ for user %@ is not allowed to access %@";
          v17 = v13;
          v18 = 32;
LABEL_20:
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v20, v18);
        }
      }
LABEL_24:

LABEL_25:
      return;
    }
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007034F0();
  }
}

void sub_10054E9D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10054EA04(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    v7 = sub_1000419F4();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10055BC9C;
    v8[3] = &unk_100920878;
    v10 = a1;
    v11 = value;
    v9 = v6;
    v12 = xdict;
    sub_100023D84(v7, v8);

  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100703470();
  }

}

void sub_10054EAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_10054EB10(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  xpc_object_t v11;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    v7 = sub_1000419F4();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10055BECC;
    v8[3] = &unk_1009183A0;
    v10 = a1;
    v9 = v6;
    v11 = xdict;
    sub_100023D84(v7, v8);

  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100703470();
  }

}

void sub_10054EBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_10054EC10(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  _QWORD v9[4];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 3;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    v7 = sub_1000419F4();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10055E99C;
    v9[3] = &unk_100929178;
    v11 = &v13;
    v12 = a1;
    v10 = v6;
    sub_100023D84(v7, v9);

  }
  v8 = *((_DWORD *)v14 + 6);
  if (v8)
    sub_1004B1368(a1, 180, xdict, v8);

  _Block_object_dispose(&v13, 8);
}

void sub_10054ED08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10054ED40(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  void *__p;
  void *v19;
  uint64_t v20;
  xpc_object_t v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    v7 = sub_100065478();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 632))(v7, *(_QWORD *)(a1 + 96), 4);
    if (!sub_100023B7C(value, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgUUIDs"))
    {
      v14 = sub_1000419F4();
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3321888768;
      v15[2] = sub_10055EA08;
      v15[3] = &unk_100937420;
      v17 = a1;
      v16 = v6;
      __p = 0;
      v19 = 0;
      v20 = 0;
      sub_1000B61B8((char *)&__p, v22, v23, 0xCCCCCCCCCCCCCCCDLL * (((char *)v23 - (char *)v22) >> 2));
      v21 = xdict;
      sub_100023D84(v14, v15);
      if (__p)
      {
        v19 = __p;
        operator delete(__p);
      }

    }
  }

  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
}

void sub_10054EE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;
  uint64_t v22;
  void *v24;

  if (__p)
    operator delete(__p);

  v24 = *(void **)(v22 - 56);
  if (v24)
  {
    *(_QWORD *)(v22 - 48) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

void sub_10054EEDC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 3;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    v7 = sub_1000419F4();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10055C188;
    v10[3] = &unk_100929178;
    v12 = &v14;
    v13 = a1;
    v11 = v6;
    sub_100023D84(v7, v10);

  }
  v8 = *((_DWORD *)v15 + 6);
  if (v8)
    v9 = v8 == 10;
  else
    v9 = 1;
  if (!v9)
    sub_1004B1368(a1, 182, xdict, v8);

  _Block_object_dispose(&v14, 8);
}

void sub_10054EFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10054F014(uint64_t a1, void *a2)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uuid_t uu;

  v36 = 0;
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  v35 = 0;
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_100065478();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 632))(v7, *(_QWORD *)(a1 + 96), 6);
  if (!sub_100023B7C(value, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgPSM"))
  {
    if (v6)
    {
      v33 = 0;
      v34 = 0;
      v31 = 0;
      v32 = 0;
      v30 = 0;
      if (!sub_100023B7C(v35, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBL2CAPChannelInMTU"))
      {
        v20 = sub_1000419F4();
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        v21[2] = sub_100557368;
        v21[3] = &unk_100937160;
        v23 = a1;
        v24 = v36;
        v25 = v34;
        v26 = v33;
        v27 = v32;
        v28 = v31;
        v22 = v6;
        v29 = v30;
        sub_100023D84(v20, v21);

      }
    }
  }

}

void sub_10054F214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  void *v29;

  _Unwind_Resume(a1);
}

void sub_10054F240(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (!sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgPSM") && v5)
  {
    v12 = sub_1000419F4();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100557478;
    v13[3] = &unk_1009183A0;
    v15 = a1;
    v16 = v17;
    v14 = v5;
    sub_100023D84(v12, v13);

  }
}

void sub_10054F338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_10054F358(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  void *v21;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = sub_1000239F0(value, "kCBMsgArgName");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v5)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if ((sub_10000AEE4((uint64_t)off_1009778C0, v5, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_100937800);
      if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v5) & 1) != 0)
      {
        v8 = sub_1000419F4();
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_10055FCF0;
        v12[3] = &unk_100919500;
        v15 = a1;
        v13 = v5;
        v14 = v7;
        sub_100023D84(v8, v12);

      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_10070351C();
      }
    }
    else
    {
      v9 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v10 = *(_QWORD *)(a1 + 96);
        v11 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412802;
        v17 = v10;
        v18 = 2112;
        v19 = v11;
        v20 = 2112;
        v21 = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
  }

}

void sub_10054F584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_10054F5C0(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int8 v11[16];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v3 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = sub_1002C3B60(value, "kCBMsgArgSetHighPriorityStream");
  v6 = sub_1002C3AD4(value, "kCBMsgArgHighPriorityStreamDuration");
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)v7;
  if (v4)
  {
    if (!v7 && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007035A8();
    if (qword_10097AC28 != -1)
      dispatch_once(&qword_10097AC28, &stru_100937960);
    v9 = qword_10097AC20;
    v10 = (unsigned __int16)objc_msgSend(v8, "intValue", sub_100030BCC(v11, v4).n128_f64[0]);
    sub_100484744(v9, v11, v5, v10);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070357C();
  }

}

void sub_10054F71C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10054F744(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  _QWORD v18[3];
  xpc_object_t reply;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_1002C3A5C(value, "kCBFastLeConnectionInfoData");
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  LOBYTE(value) = sub_1002C3B60(value, "kCBMsgArgEnable");
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2020000000;
  reply = 0;
  reply = xpc_dictionary_create_reply(xdict);
  v9 = sub_1000419F4();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10055FE78;
  v12[3] = &unk_100937658;
  v16 = a1;
  v10 = v6;
  v13 = v10;
  v17 = (char)value;
  v11 = v8;
  v14 = v11;
  v15 = v18;
  sub_100041A34(v9, v12);

  _Block_object_dispose(v18, 8);
}

void sub_10054F87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10054F8C8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *__p;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  xpc_object_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v12 && !sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgServiceStartHandle"))
  {
    v13 = sub_1000419F4();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3321888768;
    v14[2] = sub_10055ECC4;
    v14[3] = &unk_1009375B0;
    v16 = a1;
    v15 = v12;
    v17 = v27;
    __p = 0;
    v19 = 0;
    v20 = 0;
    sub_1000B61B8((char *)&__p, v23, v24, 0xCCCCCCCCCCCCCCCDLL * (((char *)v24 - (char *)v23) >> 2));
    v21 = v26;
    v22 = xdict;
    sub_100023D84(v13, v14);
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }

  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

void sub_10054FA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  void *v28;
  uint64_t v29;
  void *v31;

  if (__p)
    operator delete(__p);

  v31 = *(void **)(v29 - 88);
  if (v31)
  {
    *(_QWORD *)(v29 - 80) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void sub_10054FA88(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *__p;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  xpc_object_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v12 && !sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgServiceStartHandle"))
  {
    v13 = sub_1000419F4();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3321888768;
    v14[2] = sub_10055EED4;
    v14[3] = &unk_1009375B0;
    v16 = a1;
    v15 = v12;
    v17 = v27;
    __p = 0;
    v19 = 0;
    v20 = 0;
    sub_1000B61B8((char *)&__p, v23, v24, 0xCCCCCCCCCCCCCCCDLL * (((char *)v24 - (char *)v23) >> 2));
    v21 = v26;
    v22 = xdict;
    sub_100023D84(v13, v14);
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }

  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

void sub_10054FC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  void *v28;
  uint64_t v29;
  void *v31;

  if (__p)
    operator delete(__p);

  v31 = *(void **)(v29 - 88);
  if (v31)
  {
    *(_QWORD *)(v29 - 80) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void sub_10054FC48(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  xpc_object_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v12 && !sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgCharacteristicHandle"))
  {
    v13 = sub_1000419F4();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10055F0B4;
    v14[3] = &unk_100937300;
    v16 = a1;
    v15 = v12;
    v17 = v21;
    v18 = v20;
    v19 = xdict;
    sub_100023D84(v13, v14);

  }
}

void sub_10054FD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_10054FD70(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v20)();
  unsigned int *v21;
  xpc_object_t v22;
  uint64_t v23;
  uint64_t (**v24)();
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  v24 = &off_100918258;
  v25 = 0;
  v23 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v12 && !sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgCharacteristicHandle"))
  {
    v13 = sub_1000419F4();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3321888768;
    v14[2] = sub_10055F2A8;
    v14[3] = &unk_1009375E8;
    v16 = a1;
    v15 = v12;
    v17 = v27;
    v18 = v23;
    v19 = v26;
    v20 = &off_100918258;
    v21 = v25;
    v22 = xdict;
    sub_100023D84(v13, v14);
    v20 = &off_100918258;
    if (v21)
      sub_100056AAC(v21);

  }
  v24 = &off_100918258;
  if (v25)
    sub_100056AAC(v25);
}

void sub_10054FEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v30;

  v30 = *(unsigned int **)(v28 - 72);
  *(_QWORD *)(v28 - 80) = v27;
  if (v30)
    sub_100056AAC(v30);
  _Unwind_Resume(a1);
}

void sub_10054FF44(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  xpc_object_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  v20 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v12 && !sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgCharacteristicHandle"))
  {
    v13 = sub_1000419F4();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10055F50C;
    v14[3] = &unk_100937300;
    v16 = a1;
    v15 = v12;
    v17 = v22;
    v18 = v20;
    v19 = xdict;
    sub_100023D84(v13, v14);

  }
}

void sub_100550060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;

  _Unwind_Resume(a1);
}

void sub_100550080(uint64_t a1, void *a2)
{
  xpc_object_t value;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uuid_t uu;

  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  v19 = 0;
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v12 && !sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgCharacteristicHandle"))
  {
    v13 = sub_1000419F4();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10055F720;
    v14[3] = &unk_100920878;
    v16 = a1;
    v15 = v12;
    v17 = v19;
    v18 = a2;
    sub_100023D84(v13, v14);

  }
}

void sub_1005501A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1005501CC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  uint64_t v20;
  xpc_object_t v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  void *v28;

  v22 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      if (!sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgDescriptorHandle"))
      {
        v13 = sub_1000419F4();
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        v17[2] = sub_10055F910;
        v17[3] = &unk_100920878;
        v19 = a1;
        v18 = v6;
        v20 = v22;
        v21 = xdict;
        sub_100023D84(v13, v17);

      }
    }
    else
    {
      v14 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v15 = *(_QWORD *)(a1 + 96);
        v16 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412802;
        v24 = v15;
        v25 = 2112;
        v26 = v16;
        v27 = 2112;
        v28 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
  }

}

void sub_10055039C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1005503C4(uint64_t a1, void *a2)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21)();
  unsigned int *v22;
  void *v23;
  uint64_t (**v24)();
  unsigned int *v25;
  uint64_t v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  void *v32;
  uuid_t uu;

  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  v26 = 0;
  v24 = &off_100918258;
  v25 = 0;
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      if (!sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgDescriptorHandle"))
      {
        v13 = sub_1000419F4();
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3321888768;
        v17[2] = sub_10055FB00;
        v17[3] = &unk_100937620;
        v19 = a1;
        v18 = v6;
        v20 = v26;
        v21 = &off_100918258;
        v22 = v25;
        v23 = a2;
        sub_100023D84(v13, v17);
        v21 = &off_100918258;
        if (v22)
          sub_100056AAC(v22);

      }
    }
    else
    {
      v14 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v15 = *(_QWORD *)(a1 + 96);
        v16 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412802;
        v28 = v15;
        v29 = 2112;
        v30 = v16;
        v31 = 2112;
        v32 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
  }

  v24 = &off_100918258;
  if (v25)
    sub_100056AAC(v25);
}

void sub_100550604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned int *a27)
{
  void *v27;

  if (a27)
    sub_100056AAC(a27);
  _Unwind_Resume(a1);
}

void sub_100550654(uint64_t a1, void *a2)
{
  NSObject *v4;
  xpc_object_t value;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  _QWORD v25[4];
  id v26;
  __int128 *p_buf;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint8_t v62[4];
  int v63;
  __int128 buf;
  uint64_t v65;
  int v66;

  v4 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "handleTrackPeripheralMsg";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&buf, 0xCu);
  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v65 = 0x2020000000;
  v66 = 1;
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  v6 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v13 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v60 = 0;
  v61 = 0;
  v58 = 1;
  v59 = 0;
  v56 = 0;
  v57 = 0;
  v54 = 0;
  v55 = 0;
  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = 0;
  v48 = 0;
  v49 = 0;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  if (v13)
  {
    v14 = sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
    *(_DWORD *)(*((_QWORD *)&buf + 1) + 24) = v14;
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100703600();
    }
    else
    {
      sub_100023B7C(v61, 0, v15, v16, v17, v18, v19, v20, (uint64_t)"kCBTrackingOptionType");
      v21 = v60;
      v22 = *((_QWORD *)&buf + 1);
      if (v60 >= 101)
      {
        *(_DWORD *)(*((_QWORD *)&buf + 1) + 24) = 3;
        v23 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v62 = 67109120;
          v63 = v21;
          _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Unsupported apply type: %d", v62, 8u);
          v22 = *((_QWORD *)&buf + 1);
        }
      }
      if (!*(_DWORD *)(v22 + 24))
      {
        v24 = sub_1000419F4();
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        v25[2] = sub_10055B3E0;
        v25[3] = &unk_1009374C0;
        p_buf = &buf;
        v28 = a1;
        v26 = v13;
        v29 = v60;
        v30 = v59;
        v31 = v58;
        v32 = v57;
        v33 = v56;
        v34 = v55;
        v35 = v54;
        v36 = v53;
        v37 = v52;
        v38 = v51;
        v39 = v50;
        v40 = v49;
        v41 = v48;
        v42 = v47;
        v43 = v46;
        v44 = v45;
        sub_100023D84(v24, v25);

      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_1007035D4();
  }

  _Block_object_dispose(&buf, 8);
}

void sub_100550A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *v63;
  uint64_t v64;

  _Block_object_dispose((const void *)(v64 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100550AAC(uint64_t a1, void *a2)
{
  NSObject *v4;
  xpc_object_t value;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *buf[3];

  v4 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315138;
    *(void **)((char *)buf + 4) = "handleStopTrackingPeripheralMsg";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)buf, 0xCu);
  }
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  v6 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v13 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v25 = 0;
  buf[0] = 0;
  if (v13)
  {
    if (sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions"))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100703600();
    }
    else
    {
      sub_100023B7C(buf[0], 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBTrackingOptionType");
      v20 = sub_1000419F4();
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_10055B4A8;
      v21[3] = &unk_1009183A0;
      v23 = a1;
      v22 = v13;
      v24 = v25;
      sub_100023D84(v20, v21);

    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_1007035D4();
  }

}

void sub_100550CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_100550CE4(uint64_t a1, xpc_object_t original)
{
  xpc_object_t reply;
  void *v4;
  int bytes;
  __int16 v6;

  reply = xpc_dictionary_create_reply(original);
  if (reply)
  {
    v4 = reply;
    v6 = 0;
    bytes = 0;
    xpc_dictionary_set_data(reply, "kCBMsgArgAddressString", &bytes, 6uLL);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v4);
    xpc_release(v4);
  }
}

void sub_100550D48(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  id v14;
  void *v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  xpc_object_t reply;
  void *v53;
  int64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE v87[2];
  __int16 v88;
  int64_t value;
  uint64_t v90;
  void *v91;
  pthread_mutex_t *v92[2];
  _OWORD v93[4];

  v91 = 0;
  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(v4, "kCBMsgArgDeviceUUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  value = 0;
  v90 = 0;
  if (*(int *)(a1 + 80) <= 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_1000340DC(*(_QWORD *)(a1 + 128), (uint64_t)v93);
      sub_1007036C4();
    }
    goto LABEL_41;
  }
  v13 = sub_100023B7C(v4, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
  if (!v13)
  {
    v14 = sub_1000239F0(v91, "kCBLePowerControlCmd");
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = sub_1002C3B60(v91, "kCBlePowerControlWait4Result");
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100937820);
    v17 = off_1009778A0;
    sub_100030BCC(v93, v12);
    sub_100623C54((uint64_t)v17, (unsigned __int8 *)v93, &v90);
    if (objc_msgSend(v15, "isEqualToString:", CFSTR("setLeTxReportEnable")))
    {
      LOBYTE(v93[0]) = 0;
      LOBYTE(v92[0]) = 0;
      v24 = sub_100023B7C(v91, 0, v18, v19, v20, v21, v22, v23, (uint64_t)"kCBLePowerControlLocalEnable");
      if (!v24)
      {
        HIBYTE(v88) = 0;
        sub_100043758((_BYTE *)&v88 + 1);
        v31 = sub_10004C9BC(249, (uint64_t (*)())sub_100559B18, v25, v26, v27, v28, v29, v30, v90);
        sub_10004339C((_BYTE *)&v88 + 1);
        sub_100043728((_BYTE *)&v88 + 1);
        v32 = 249;
LABEL_18:
        v51 = 0xFFFFFFFFLL;
LABEL_19:
        if ((v16 & 1) == 0)
          goto LABEL_35;
        if (!v31)
        {
          memset(v93, 0, sizeof(v93));
          sub_1000160D0(v93);
          v92[0] = 0;
          v92[1] = 0;
          sub_10003415C((uint64_t)v92, (uint64_t)v93);
          if (sub_100043714(&stru_100999760, v92, 0xBB8uLL))
            v31 = 0;
          else
            v31 = 112;
          sub_100034234((uint64_t)v92);
          sub_100069BDC(v93);
        }
LABEL_25:
        reply = xpc_dictionary_create_reply(xdict);
        v53 = reply;
        if (reply)
        {
          xpc_dictionary_set_int64(reply, "kCBLePowerControlCmd", v32);
          xpc_dictionary_set_int64(v53, "kCBMsgArgResult", v31);
          if (v32 == 246)
          {
            xpc_dictionary_set_int64(v53, "kCBMsgArgConnHandle", (unsigned __int16)value);
            xpc_dictionary_set_int64(v53, "kCBMsgArgReason", BYTE3(value));
            xpc_dictionary_set_int64(v53, "kCBMsgArgPHY", BYTE4(value));
            xpc_dictionary_set_int64(v53, "kCBMsgArgTransmitPowerLevel", SBYTE5(value));
            xpc_dictionary_set_int64(v53, "kCBMsgArgTransmitPowerFlag", BYTE6(value));
            v54 = SHIBYTE(value);
            v55 = "kCBMsgArgDelta";
          }
          else
          {
            if (v32 != 245)
            {
LABEL_34:
              xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v53);
              xpc_release(v53);
              goto LABEL_35;
            }
            xpc_dictionary_set_int64(v53, "kCBMsgArgConnHandle", word_100999790);
            xpc_dictionary_set_int64(v53, "kCBMsgArgCurrentTxPowerLevel", byte_100999793);
            v54 = byte_100999794;
            v55 = "kCBMsgArgMaxTxPowerLevel";
          }
          xpc_dictionary_set_int64(v53, v55, v54);
          goto LABEL_34;
        }
LABEL_35:
        if ((v51 & 0x80000000) == 0)
          sub_1002188B8(v51);
        if (v24)
        {
          sub_1004B1368(a1, 219, xdict, v24);
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            sub_100703710();
        }
        goto LABEL_40;
      }
    }
    else if (objc_msgSend(v15, "isEqualToString:", CFSTR("setLePathLossEnable")))
    {
      LOBYTE(v93[0]) = 0;
      v24 = sub_100023B7C(v91, 0, v33, v34, v35, v36, v37, v38, (uint64_t)"kCBLePathLossReportingEnable");
      if (!v24)
      {
        LOBYTE(v92[0]) = 0;
        sub_100043758(v92);
        v31 = sub_10004C9BC(248, (uint64_t (*)())sub_100559B18, v39, v40, v41, v42, v43, v44, v90);
        sub_10004339C(v92);
        sub_100043728(v92);
        v32 = 248;
        goto LABEL_18;
      }
    }
    else if (objc_msgSend(v15, "isEqualToString:", CFSTR("setLePathLossParam")))
    {
      LOBYTE(v92[0]) = 0;
      v88 = 0;
      v87[1] = 0;
      LOWORD(v93[0]) = 0;
      v24 = sub_100023B7C(v91, 0, v45, v46, v47, v48, v49, v50, (uint64_t)"kCBLeHighThreshold");
      if (!v24)
      {
        v87[0] = 0;
        sub_100043758(v87);
        v31 = sub_10004C9BC(247, (uint64_t (*)())sub_100559B18, v74, v75, v76, v77, v78, v79, v90);
        sub_10004339C(v87);
        sub_100043728(v87);
        v32 = 247;
        goto LABEL_18;
      }
    }
    else
    {
      if (objc_msgSend(v15, "isEqualToString:", CFSTR("readLeRemoteTxPower")))
      {
        LOBYTE(v93[0]) = 0;
        v24 = sub_100023B7C(v91, 0, v56, v57, v58, v59, v60, v61, (uint64_t)"kCBLePHYType");
        if (v24)
        {
          v32 = 0;
          v51 = 0xFFFFFFFFLL;
          v31 = 114;
        }
        else
        {
          LOBYTE(v92[0]) = 0;
          sub_100043758(v92);
          if (v16)
            v51 = sub_100218854(1, (uint64_t)sub_100559B18, (uint64_t)&value, 8);
          else
            v51 = 0xFFFFFFFFLL;
          v31 = sub_100196768(0xF6u, v80, v81, v82, v83, v84, v85, v86, v90);
          sub_10004339C(v92);
          sub_100043728(v92);
          v32 = 246;
        }
        goto LABEL_19;
      }
      if (!objc_msgSend(v15, "isEqualToString:", CFSTR("readLeLocalTxPower")))
      {
        if ((v16 & 1) == 0)
        {
LABEL_40:

          goto LABEL_41;
        }
        v24 = 0;
        v32 = 0;
        v31 = 114;
        v51 = 0xFFFFFFFFLL;
        goto LABEL_25;
      }
      LOBYTE(v93[0]) = 0;
      v24 = sub_100023B7C(v91, 0, v62, v63, v64, v65, v66, v67, (uint64_t)"kCBLePHYType");
      if (!v24 && LOBYTE(v93[0]) - 1 <= 3)
      {
        LOBYTE(v92[0]) = 0;
        sub_100043758(v92);
        v31 = sub_10004C9BC(245, (uint64_t (*)())sub_100559B24, v68, v69, v70, v71, v72, v73, v90);
        sub_10004339C(v92);
        sub_100043728(v92);
        v32 = 245;
        goto LABEL_18;
      }
    }
    v32 = 0;
    v31 = 114;
    goto LABEL_18;
  }
  sub_1004B1368(a1, 219, xdict, v13);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_100703788();
LABEL_41:

}

void sub_1005514B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100551560()
{
  void *v0;
  NSObject *v1;
  __int128 __p;
  uint8_t buf[16];

  if (MGCopyAnswer(CFSTR("ReleaseType"), 0))
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100937880);
    v0 = off_100977A50;
    sub_100091AE8(&__p, "BT_CONTROLLER_CORE_DUMP");
    sub_1004A37B0((uint64_t)v0, 3703, &__p);
  }
  v1 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "CBUtil controller core dump not supported on customer / production / user builds", buf, 2u);
  }
}

void sub_10055163C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100551658(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  _BOOL4 v4;

  result = 1;
  if (a2 > 0x26 || ((1 << a2) & 0x7300004400) == 0)
  {
    v4 = a2 == 75 || a2 == 43;
    return a2 == 170 || v4;
  }
  return result;
}

void sub_1005516A0(uint64_t a1, uint64_t **a2, void *a3)
{
  id v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  __n128 v12;
  __n128 v13;
  int v14;

  v5 = a3;
  v6 = *a2;
  if (*a2 != a2[1])
  {
    do
    {
      if (qword_1009778F8 != -1)
        dispatch_once(&qword_1009778F8, &stru_1009377E0);
      v7 = qword_1009778F0;
      v8 = *v6;
      v13 = *(__n128 *)(*v6 + 72);
      v14 = *(_DWORD *)(v8 + 88);
      sub_100042F44(&v12, &v13);
      if (sub_1005E084C(v7, (unsigned __int8 *)&v12, *(unsigned __int8 *)(a1 + 183), *(unsigned int *)(a1 + 196), v5))
      {
        ++v6;
        v9 = a2[1];
      }
      else
      {
        v10 = a2[1];
        v11 = (char *)v10 - (char *)(v6 + 1);
        if (v10 != v6 + 1)
          memmove(v6, v6 + 1, (char *)v10 - (char *)(v6 + 1));
        v9 = (uint64_t *)((char *)v6 + v11);
        a2[1] = (uint64_t *)((char *)v6 + v11);
      }
    }
    while (v6 != v9);
  }

}

void sub_1005517DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1005517F4(uint64_t a1, void *a2, unsigned int a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  int v9;
  _BOOL8 v10;
  NSObject *v11;
  __int128 v13;
  int v14;
  uint8_t buf[4];
  _QWORD v16[3];
  __int128 v17;
  int v18;
  __n128 v19;
  int v20;

  v5 = a2;
  if (*(int *)(a1 + 80) > 0)
    goto LABEL_14;
  v19 = 0uLL;
  v20 = 0;
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_1009377E0);
  sub_1005E098C(qword_1009778F0, v5, a3, &v19);
  v17 = xmmword_10073B580;
  v18 = 0;
  if (!sub_100072DF0((unsigned __int8 *)&v19, (unsigned __int8 *)&v17))
    goto LABEL_14;
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_1009377E0);
  v6 = qword_1009778F0;
  v13 = xmmword_10073B580;
  v14 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v13);
  if (sub_1005E0400(v6, v5, buf, a3))
  {
    v7 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v16[0] = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "External Characteristic Restricted for device \"%@\"", buf, 0xCu);
    }
    if (!*(_BYTE *)(a1 + 180))
    {
      v8 = objc_alloc_init((Class)MTSAuthorization);
      *(_BYTE *)(a1 + 179) = objc_msgSend(v8, "isRestrictedCharacteristicsAccessAllowed");

      *(_BYTE *)(a1 + 180) = 1;
    }
    v9 = *(unsigned __int8 *)(a1 + 179);
    v10 = *(_BYTE *)(a1 + 179) == 0;
    v11 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      LODWORD(v16[0]) = v9 == 0;
      WORD2(v16[0]) = 2112;
      *(_QWORD *)((char *)v16 + 6) = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "External Restricted Characteristic restricted:%d for device \"%@\"", buf, 0x12u);
    }
  }
  else
  {
LABEL_14:
    v10 = 0;
  }

  return v10;
}

void sub_100551A2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100551A54(uint64_t a1, void *a2, unsigned int a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  id v15;
  __int128 v16;
  int v17;
  __n128 v18;
  int v19;

  v5 = a2;
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_1009377E0);
  v18 = 0uLL;
  v19 = 0;
  sub_1005E098C(qword_1009778F0, v5, a3, &v18);
  if (!v18.n128_u8[0])
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007037E8();
    goto LABEL_13;
  }
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_1009377E0);
  if (!sub_1005E084C(qword_1009778F0, (unsigned __int8 *)&v18, *(unsigned __int8 *)(a1 + 183), *(unsigned int *)(a1 + 196), v5))
  {
    v7 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        v9 = (_QWORD *)*v9;
      v10 = 136446722;
      v11 = v9;
      v12 = 1024;
      v13 = a3;
      v14 = 2112;
      v15 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Session \"%{public}s\" isn't entitled to access restricted handle 0x%04x on device \"%@\"! ಠ_ಠ", (uint8_t *)&v10, 0x1Cu);
    }
    goto LABEL_13;
  }
  v16 = xmmword_10073B580;
  v17 = 0;
  if (sub_100072DF0((unsigned __int8 *)&v18, (unsigned __int8 *)&v16) && sub_1005517F4(a1, v5, a3))
  {
LABEL_13:
    v6 = 902;
    goto LABEL_14;
  }
  v6 = 0;
LABEL_14:

  return v6;
}

void sub_100551C4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100551C64(uint64_t a1)
{
  uint64_t audit_token;
  unsigned __int8 v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[5];
  _OWORD v10[2];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;

  v15 = 0u;
  v16 = 0u;
  audit_token = xpc_connection_get_audit_token(*(_QWORD *)(a1 + 16), &v15);
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 2;
  v2 = atomic_load((unsigned __int8 *)&qword_100993328);
  if ((v2 & 1) == 0)
  {
    audit_token = __cxa_guard_acquire(&qword_100993328);
    if ((_DWORD)audit_token)
    {
      qword_100993320 = tcc_server_create(0);
      __cxa_guard_release(&qword_100993328);
    }
  }
  v3 = (const void *)tcc_message_options_create(audit_token);
  tcc_message_options_set_reply_handler_policy(v3, 1);
  tcc_message_options_set_request_prompt_policy(v3, 2);
  v10[0] = v15;
  v10[1] = v16;
  v4 = (const void *)tcc_credential_create_for_process_with_audit_token(v10);
  v5 = tcc_service_singleton_for_CF_name(kTCCServiceBluetoothAlways);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100551E0C;
  v9[3] = &unk_100936EF8;
  v9[4] = &v11;
  v6 = objc_retainBlock(v9);
  tcc_server_message_request_authorization(qword_100993320, v3, v4, v5, 0, v6);
  CFRelease(v4);
  CFRelease(v3);
  v7 = *((unsigned int *)v12 + 6);

  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_100551DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  __cxa_guard_abort(&qword_100993328);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100551E0C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  if (!a3)
  {
    v3 = result;
    result = tcc_authorization_record_get_authorization_right(a2);
    v4 = 2 * (result != 2);
    if (!result)
      v4 = 1;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24) = v4;
  }
  return result;
}

uint64_t sub_100551E58(_QWORD *a1)
{
  uint64_t audit_token;
  unsigned __int8 v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  NSMutableDictionary *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[5];
  _OWORD v12[2];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;

  v17 = 0u;
  v18 = 0u;
  audit_token = xpc_connection_get_audit_token(a1[2], &v17);
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v3 = atomic_load((unsigned __int8 *)&qword_100993338);
  if ((v3 & 1) == 0)
  {
    audit_token = __cxa_guard_acquire(&qword_100993338);
    if ((_DWORD)audit_token)
    {
      qword_100993330 = tcc_server_create(0);
      __cxa_guard_release(&qword_100993338);
    }
  }
  v4 = (const void *)tcc_message_options_create(audit_token);
  tcc_message_options_set_reply_handler_policy(v4, 1);
  tcc_message_options_set_request_prompt_policy(v4, 0);
  v12[0] = v17;
  v12[1] = v18;
  v5 = (const void *)tcc_credential_create_for_process_with_audit_token(v12);
  v6 = tcc_service_singleton_for_CF_name(kTCCServiceBluetoothAlways);
  v7 = objc_opt_new(NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", a1[14], CFSTR("mapCentralLabelStringKey"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", a1[15], CFSTR("mapLabelArrayForCalloutsKey"));
  tcc_message_options_set_client_dict(v4, v7);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10055205C;
  v11[3] = &unk_100936EF8;
  v11[4] = &v13;
  v8 = objc_retainBlock(v11);
  tcc_server_message_request_authorization(qword_100993330, v4, v5, v6, 0, v8);
  CFRelease(v5);
  CFRelease(v4);
  v9 = *((unsigned __int8 *)v14 + 24);

  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_10055200C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  __cxa_guard_abort(&qword_100993338);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10055205C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (!a3)
  {
    v3 = result;
    result = tcc_authorization_record_get_authorization_right(a2);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24) = result == 2;
  }
  return result;
}

void sub_10055209C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E5B64((uint64_t)off_100978168, *(_QWORD *)(v1 + 128));
}

void sub_1005520EC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002F1878((uint64_t)off_100978168, *(_QWORD *)(v1 + 128));
}

void sub_10055213C(void *a1@<X1>, void *a2@<X2>, void **a3@<X8>)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *i;
  uint64_t v12;
  void *v13;
  id v14;
  int8x16_t *v15;
  void *v16;
  void *v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  id obj;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  _BYTE v45[128];

  v5 = a1;
  v36 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v34 = v5;
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[LSBundleRecord bundleRecordWithBundleIdentifier:allowPlaceholder:error:](LSBundleRecord, "bundleRecordWithBundleIdentifier:allowPlaceholder:error:", v5, 1, 0));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "infoDictionary"));
  v7 = objc_msgSend(v6, "objectForKey:ofClass:", v36, objc_opt_class(NSArray));
  v37 = (void *)objc_claimAutoreleasedReturnValue(v7);

  v8 = objc_opt_class(NSArray);
  if ((objc_opt_isKindOfClass(v37, v8) & 1) != 0)
  {
    v33 = v37;
    if (objc_msgSend(v33, "count"))
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      obj = v33;
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
      if (v9)
      {
        v10 = *(_QWORD *)v40;
        do
        {
          for (i = 0; i != v9; i = (char *)i + 1)
          {
            if (*(_QWORD *)v40 != v10)
              objc_enumerationMutation(obj);
            v12 = *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)i);
            v13 = (void *)objc_claimAutoreleasedReturnValue(+[CBUUID UUIDWithString:](CBUUID, "UUIDWithString:", v12));
            v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "data")));
            v15 = (int8x16_t *)objc_msgSend(v14, "bytes");
            v16 = (void *)objc_claimAutoreleasedReturnValue(+[CBUUID UUIDWithString:](CBUUID, "UUIDWithString:", v12));
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "data"));
            sub_100069B04((uint64_t)&v43, v15, objc_msgSend(v17, "length"));
            v19 = (char *)a3[1];
            v18 = (char *)a3[2];
            if (v19 >= v18)
            {
              v22 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - (_BYTE *)*a3) >> 2);
              v23 = v22 + 1;
              if (v22 + 1 > 0xCCCCCCCCCCCCCCCLL)
                abort();
              v24 = 0xCCCCCCCCCCCCCCCDLL * ((v18 - (_BYTE *)*a3) >> 2);
              if (2 * v24 > v23)
                v23 = 2 * v24;
              if (v24 >= 0x666666666666666)
                v25 = 0xCCCCCCCCCCCCCCCLL;
              else
                v25 = v23;
              if (v25)
                v26 = (char *)sub_1000B58EC((uint64_t)(a3 + 2), v25);
              else
                v26 = 0;
              v27 = &v26[20 * v22];
              v28 = v43;
              *((_DWORD *)v27 + 4) = v44;
              *(_OWORD *)v27 = v28;
              v30 = (char *)*a3;
              v29 = (char *)a3[1];
              v31 = v27;
              if (v29 != *a3)
              {
                do
                {
                  v32 = *(_OWORD *)(v29 - 20);
                  *((_DWORD *)v31 - 1) = *((_DWORD *)v29 - 1);
                  *(_OWORD *)(v31 - 20) = v32;
                  v31 -= 20;
                  v29 -= 20;
                }
                while (v29 != v30);
                v29 = (char *)*a3;
              }
              v21 = v27 + 20;
              *a3 = v31;
              a3[1] = v27 + 20;
              a3[2] = &v26[20 * v25];
              if (v29)
                operator delete(v29);
            }
            else
            {
              v20 = v43;
              *((_DWORD *)v19 + 4) = v44;
              *(_OWORD *)v19 = v20;
              v21 = v19 + 20;
            }
            a3[1] = v21;

          }
          v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v45, 16);
        }
        while (v9);
      }

    }
  }

}

void sub_100552484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  uint64_t v16;
  void *v18;

  v18 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v18;
    operator delete(v18);
  }

  _Unwind_Resume(a1);
}

void sub_100552544(void *a1@<X1>, void *a2@<X2>, char **a3@<X8>)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  uint64_t v16;
  void *v17;
  __int16 v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int16 v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];

  v5 = a1;
  v6 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v32 = v5;
  v33 = v6;
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[LSBundleRecord bundleRecordWithBundleIdentifier:allowPlaceholder:error:](LSBundleRecord, "bundleRecordWithBundleIdentifier:allowPlaceholder:error:", v5, 1, 0));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "infoDictionary"));
  v8 = objc_msgSend(v7, "objectForKey:ofClass:", v6, objc_opt_class(NSArray));
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  v10 = objc_opt_class(NSArray);
  if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
  {
    v31 = v9;
    v11 = v9;
    if (objc_msgSend(v11, "count"))
    {
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v12 = v11;
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
      if (v13)
      {
        v14 = *(_QWORD *)v37;
        do
        {
          for (i = 0; i != v13; i = (char *)i + 1)
          {
            if (*(_QWORD *)v37 != v14)
              objc_enumerationMutation(v12);
            v16 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
            v35 = 0;
            v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSScanner scannerWithString:](NSScanner, "scannerWithString:", v16));
            objc_msgSend(v17, "scanHexInt:", &v35);
            v18 = v35;
            v20 = a3[1];
            v19 = (unint64_t)a3[2];
            if ((unint64_t)v20 >= v19)
            {
              v22 = *a3;
              v23 = v20 - *a3;
              if (v23 <= -3)
                abort();
              v24 = v23 >> 1;
              v25 = v19 - (_QWORD)v22;
              if (v25 <= (v23 >> 1) + 1)
                v26 = v24 + 1;
              else
                v26 = v25;
              if (v25 >= 0x7FFFFFFFFFFFFFFELL)
                v27 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v27 = v26;
              if (v27)
              {
                v28 = (char *)sub_1002B54AC((uint64_t)(a3 + 2), v27);
                v22 = *a3;
                v20 = a3[1];
              }
              else
              {
                v28 = 0;
              }
              v29 = &v28[2 * v24];
              *(_WORD *)v29 = v18;
              v21 = v29 + 2;
              while (v20 != v22)
              {
                v30 = *((_WORD *)v20 - 1);
                v20 -= 2;
                *((_WORD *)v29 - 1) = v30;
                v29 -= 2;
              }
              *a3 = v29;
              a3[1] = v21;
              a3[2] = &v28[2 * v27];
              if (v22)
                operator delete(v22);
            }
            else
            {
              *(_WORD *)v20 = v35;
              v21 = v20 + 2;
            }
            a3[1] = v21;

          }
          v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
        }
        while (v13);
      }

    }
    v9 = v31;
  }

}

void sub_1005527DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  uint64_t v13;
  void *v14;
  void *v16;

  v16 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v16;
    operator delete(v16);
  }

  _Unwind_Resume(a1);
}

void sub_100552880(void *a1@<X1>, void *a2@<X2>, int64x2_t *a3@<X8>)
{
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *i;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  id obj;
  void *__p[2];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  int64x2_t v42;
  uint64_t v43;
  int64x2_t *v44;
  _BYTE v45[128];

  v31 = a1;
  v32 = a2;
  a3->i64[1] = 0;
  a3[1].i64[0] = 0;
  a3->i64[0] = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[LSBundleRecord bundleRecordWithBundleIdentifier:allowPlaceholder:error:](LSBundleRecord, "bundleRecordWithBundleIdentifier:allowPlaceholder:error:", v31, 1, 0));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "infoDictionary"));
  v7 = objc_msgSend(v6, "objectForKey:ofClass:", v32, objc_opt_class(NSArray));
  v33 = (void *)objc_claimAutoreleasedReturnValue(v7);

  v8 = objc_opt_class(NSArray);
  if ((objc_opt_isKindOfClass(v33, v8) & 1) != 0)
  {
    v30 = v33;
    if (objc_msgSend(v30, "count"))
    {
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      obj = v30;
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
      if (v9)
      {
        v10 = *(_QWORD *)v38;
        do
        {
          for (i = 0; i != v9; i = (char *)i + 1)
          {
            if (*(_QWORD *)v38 != v10)
              objc_enumerationMutation(obj);
            sub_100091AE8(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)i)), "UTF8String"));
            v13 = a3->u64[1];
            v12 = a3[1].u64[0];
            if (v13 >= v12)
            {
              v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - a3->i64[0]) >> 3);
              v16 = v15 + 1;
              if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
                abort();
              v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a3->i64[0]) >> 3);
              if (2 * v17 > v16)
                v16 = 2 * v17;
              if (v17 >= 0x555555555555555)
                v18 = 0xAAAAAAAAAAAAAAALL;
              else
                v18 = v16;
              v44 = a3 + 1;
              if (v18)
                v19 = (char *)sub_1002A479C((uint64_t)a3[1].i64, v18);
              else
                v19 = 0;
              v20 = &v19[24 * v15];
              v21 = *(_OWORD *)__p;
              *((_QWORD *)v20 + 2) = v36;
              *(_OWORD *)v20 = v21;
              __p[1] = 0;
              v36 = 0;
              __p[0] = 0;
              v23 = a3->i64[0];
              v22 = a3->u64[1];
              if (v22 == a3->i64[0])
              {
                v26 = vdupq_n_s64(v22);
                v24 = &v19[24 * v15];
              }
              else
              {
                v24 = &v19[24 * v15];
                do
                {
                  v25 = *(_OWORD *)(v22 - 24);
                  *((_QWORD *)v24 - 1) = *(_QWORD *)(v22 - 8);
                  *(_OWORD *)(v24 - 24) = v25;
                  v24 -= 24;
                  *(_QWORD *)(v22 - 16) = 0;
                  *(_QWORD *)(v22 - 8) = 0;
                  *(_QWORD *)(v22 - 24) = 0;
                  v22 -= 24;
                }
                while (v22 != v23);
                v26 = *a3;
              }
              v27 = v20 + 24;
              a3->i64[0] = (uint64_t)v24;
              a3->i64[1] = (uint64_t)(v20 + 24);
              v42 = v26;
              v28 = a3[1].i64[0];
              a3[1].i64[0] = (uint64_t)&v19[24 * v18];
              v43 = v28;
              v41 = v26.i64[0];
              sub_1002A56A4((uint64_t)&v41);
              v29 = SHIBYTE(v36);
              a3->i64[1] = (uint64_t)v27;
              if (v29 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v14 = *(_OWORD *)__p;
              *(_QWORD *)(v13 + 16) = v36;
              *(_OWORD *)v13 = v14;
              a3->i64[1] = v13 + 24;
            }
          }
          v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
        }
        while (v9);
      }

    }
  }

}

void sub_100552B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  sub_100091BF8((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_100552C38(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  void *v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  _BOOL8 result;
  uint64_t *v9[3];
  void *v10[3];
  void *v11;
  void *v12;
  uint64_t v13;
  int64x2_t v14;
  uint64_t v15;
  void *__p;
  char *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  int64x2_t *v22;

  if (!_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
    return 1;
  if ((objc_msgSend(*(id *)(a1 + 96), "containsString:", CFSTR("com.apple.deviceaccessd")) & 1) != 0)
  {
    if (!*(_BYTE *)(a1 + 176))
      goto LABEL_11;
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 176))
  {
LABEL_6:
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_10055213C(*(void **)(a1 + 224), CFSTR("NSBluetoothServices"), (void **)&v19);
    sub_100564EC0((void **)(a1 + 232), *(_QWORD *)(a1 + 240), v19, v20, 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (char *)v19) >> 2));
    __p = 0;
    v17 = 0;
    v18 = 0;
    sub_100552544(*(void **)(a1 + 224), CFSTR("NSBluetoothCompanyIdentifiers"), (char **)&__p);
    sub_100565188(a1 + 256, *(_QWORD *)(a1 + 264), (char *)__p, v17, (v17 - (_BYTE *)__p) >> 1);
    if (__p)
    {
      v17 = (char *)__p;
      operator delete(__p);
    }
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
    goto LABEL_11;
  }
  if (!*(_BYTE *)(a1 + 178))
    return 1;
LABEL_11:
  if (*(_BYTE *)(a1 + 177)
    || *(_BYTE *)(a1 + 178)
    || objc_msgSend(*(id *)(a1 + 96), "containsString:", CFSTR("com.apple.deviceaccessd")))
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_10055213C(*(void **)(a1 + 224), CFSTR("NSAccessorySetupBluetoothServices"), (void **)&v19);
    sub_100564EC0((void **)(a1 + 232), *(_QWORD *)(a1 + 240), v19, v20, 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (char *)v19) >> 2));
    __p = 0;
    v17 = 0;
    v18 = 0;
    sub_100552544(*(void **)(a1 + 224), CFSTR("NSAccessorySetupBluetoothCompanyIdentifiers"), (char **)&__p);
    sub_100565188(a1 + 256, *(_QWORD *)(a1 + 264), (char *)__p, v17, (v17 - (_BYTE *)__p) >> 1);
    v14 = 0uLL;
    v15 = 0;
    sub_100552880(*(void **)(a1 + 224), CFSTR("NSAccessorySetupBluetoothNames"), &v14);
    sub_10056544C(a1 + 280, *(__int128 **)(a1 + 288), (std::string *)v14.i64[0], (__int128 *)v14.i64[1], 0xAAAAAAAAAAAAAAABLL * ((v14.i64[1] - v14.i64[0]) >> 3));
    v22 = &v14;
    sub_100091BF8((void ***)&v22);
    if (__p)
    {
      v17 = (char *)__p;
      operator delete(__p);
    }
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
  }
  if (*(_QWORD *)(a1 + 240) != *(_QWORD *)(a1 + 232) || *(_QWORD *)(a1 + 264) != *(_QWORD *)(a1 + 256))
  {
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    v2 = off_100978168;
    v3 = *(_QWORD *)(a1 + 128);
    v12 = 0;
    v13 = 0;
    v11 = 0;
    sub_1000B61B8((char *)&v11, *(__int128 **)(a1 + 232), *(__int128 **)(a1 + 240), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 2));
    sub_1002F25E4((uint64_t)v2, v3, (uint64_t *)&v11);
    if (v11)
    {
      v12 = v11;
      operator delete(v11);
    }
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    v4 = off_100978168;
    v5 = *(_QWORD *)(a1 + 128);
    sub_1002F64C0(v10, a1 + 256);
    sub_1002F2848((uint64_t)v4, v5, (unsigned __int16 **)v10);
    if (v10[0])
    {
      v10[1] = v10[0];
      operator delete(v10[0]);
    }
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    v6 = off_100978168;
    v7 = *(_QWORD *)(a1 + 128);
    memset(v9, 0, sizeof(v9));
    sub_1002A46F4((char *)v9, *(__int128 **)(a1 + 280), *(__int128 **)(a1 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 3));
    sub_1002F2A50((uint64_t)v6, v7, v9);
    v19 = (__int128 *)v9;
    sub_100091BF8((void ***)&v19);
    return 1;
  }
  if (!*(_BYTE *)(a1 + 176)
    && !*(_BYTE *)(a1 + 178)
    && (objc_msgSend(*(id *)(a1 + 96), "isEqualToString:", *(_QWORD *)(a1 + 224)) & 1) != 0)
  {
    return 1;
  }
  result = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_100703860();
    return 0;
  }
  return result;
}

void sub_10055300C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  void *v25;

  if (__p)
    operator delete(__p);
  v25 = *(void **)(v23 - 80);
  if (v25)
  {
    *(_QWORD *)(v23 - 72) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005530A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  NSObject *v13;
  unsigned int v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  _BYTE v22[10];
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  v3 = sub_100009D7C((uint64_t)off_100978168, *(void **)(v2 + 96));
  v4 = v3;
  v5 = sub_10000AFB0(v3, *(void **)(v2 + 96));
  if (*(_BYTE *)(a1 + 40) && *(_QWORD *)(v2 + 128))
  {
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    v6 = sub_1002EEFF8((uint64_t)off_100978168, *(_QWORD *)(v2 + 128));
  }
  else
  {
    v6 = 0;
  }
  v7 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(v2 + 96);
    v9 = *(unsigned __int8 *)(v2 + 194);
    v10 = *(unsigned __int8 *)(a1 + 40);
    v11 = *(_DWORD *)(v2 + 196);
    v19 = 138413826;
    v20 = v8;
    v21 = 1024;
    *(_DWORD *)v22 = v9;
    *(_WORD *)&v22[4] = 1024;
    *(_DWORD *)&v22[6] = v4;
    v23 = 1024;
    v24 = v5;
    v25 = 1024;
    v26 = v10;
    v27 = 1024;
    v28 = v6;
    v29 = 1024;
    v30 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Application: %@ privacySupported: %d tccAuthKnown %d uses medical devices %d or state restoration %d numberOfPairedDevices %d, allowedExternalRestrictedServices 0x%08x", (uint8_t *)&v19, 0x30u);
  }
  if ((v4 & 1) == 0)
  {
    if (v5)
    {
      v12 = 0;
      *(_BYTE *)(v2 + 195) = 1;
      goto LABEL_14;
    }
    if (!*(_BYTE *)(a1 + 40) || !v6)
      return;
    *(_BYTE *)(v2 + 195) = 1;
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    v14 = sub_1002E0A30((uint64_t)off_100978168, *(void **)(v2 + 96));
    if (v14 < 0xB)
    {
      v12 = v14;
      if (*(_BYTE *)(v2 + 195))
      {
LABEL_14:
        v13 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          v19 = 67109120;
          LODWORD(v20) = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Allowing device temporarily - checkInWithoutAuth %d", (uint8_t *)&v19, 8u);
        }
      }
    }
    else
    {
      *(_BYTE *)(v2 + 195) = 0;
    }
    v15 = qword_1009998F0;
    if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_QWORD *)(v2 + 96);
      v17 = (_QWORD *)(v2 + 56);
      if (*(char *)(v2 + 79) < 0)
        v17 = (_QWORD *)*v17;
      v19 = 138412546;
      v20 = v16;
      v21 = 2080;
      *(_QWORD *)v22 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "handleCheckInMsg:{isAlive: true, bundleId: \"%@\", session: \"%s\"}", (uint8_t *)&v19, 0x16u);
    }
    v18 = sub_100069D20();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v18 + 72))(v18, *(_QWORD *)(v2 + 96), 1);
    sub_100070458((unint64_t *)v2);
  }
}

void sub_1005533A8(uint64_t a1, uint64_t a2, int a3)
{
  sub_1000700E0(a1 - 144, a2, a3);
}

void sub_1005533B0(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3;

  if (a3)
    v3 = 10;
  else
    v3 = 5;
  sub_10007069C(a1, v3);
}

void sub_1005533C4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = a1 - 144;
  if (a3)
    v4 = 10;
  else
    v4 = 5;
  sub_10007069C(v3, v4);
}

void sub_1005533DC(uint64_t a1, uint64_t a2, int a3)
{
  sub_1004B1604(a1, a3);
}

void sub_1005533E4(uint64_t a1, uint64_t a2, int a3)
{
  sub_1004B1604(a1 - 144, a3);
}

void sub_1005533F0(uint64_t a1, int a2, void *a3, unsigned int a4)
{
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;

  v11 = a3;
  v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 40);
    xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a2);
    if (!a2)
    {
      xpc_dictionary_set_int64(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), "kCBFastLeConnectionInfoVersion", a4);
      xpc_dictionary_set_int64(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), "kCBFastLeConnectionInfoLength", (int64_t)objc_msgSend(v11, "length"));
      v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v10 = objc_retainAutorelease(v11);
      xpc_dictionary_set_data(v9, "kCBFastLeConnectionInfoData", objc_msgSend(v10, "bytes"), (size_t)objc_msgSend(v10, "length"));
    }
    xpc_connection_send_message(*(xpc_connection_t *)(v8 + 16), *(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    xpc_release(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  }

}

void sub_100553508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10055351C(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  xpc_object_t reply;
  void *v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v3 = (int)sub_100661FF0((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 64), *(void **)(a1 + 40), 1);
  }
  else
  {
    v3 = 8;
  }
  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 56));
  if (reply)
  {
    v5 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v3);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v5);
    xpc_release(v5);
  }
}

void sub_1005535D8(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  xpc_object_t reply;
  void *v5;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v3 = (int)sub_1006620B4((uint64_t)off_1009778C0, *(void **)(a1 + 32));
  }
  else
  {
    v3 = 8;
  }
  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    v5 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v3);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v5);
    xpc_release(v5);
  }
}

void sub_100553688(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  xpc_object_t reply;
  void *v5;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v3 = (int)sub_1006622D0((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56) == 1);
  }
  else
  {
    v3 = 8;
  }
  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    v5 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v3);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v5);
    xpc_release(v5);
  }
}

void sub_100553744(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  int64_t v6;
  xpc_object_t reply;
  void *v8;

  v2 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v3 = sub_1000589DC((uint64_t)off_1009778C0, *(void **)(a1 + 32), 0);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v4 = sub_100656AC0((uint64_t)off_1009778C0, *(void **)(a1 + 32));
    v5 = sub_1000438A4();
    v6 = (*(int (**)(uint64_t, uint64_t, _BOOL8, _QWORD, id))(*(_QWORD *)v5 + 1848))(v5, v3, v4, objc_msgSend(*(id *)(a1 + 40), "length"), objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "bytes"));
  }
  else
  {
    v6 = 8;
  }
  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 56));
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v8);
    xpc_release(v8);
  }
}

void sub_100553880(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  int64_t v6;
  xpc_object_t reply;
  void *v8;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v3 = sub_1000589DC((uint64_t)off_1009778C0, *(void **)(a1 + 32), 0);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v4 = sub_100656AC0((uint64_t)off_1009778C0, *(void **)(a1 + 32));
    v5 = sub_1000438A4();
    v6 = (*(int (**)(uint64_t, uint64_t, _BOOL8))(*(_QWORD *)v5 + 1856))(v5, v3, v4);
  }
  else
  {
    v6 = 8;
  }
  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v8);
    xpc_release(v8);
  }
}

void sub_100553990(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t (*v4)(void);
  unsigned int v5;
  int v6;
  int v7;
  _BOOL8 v8;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;

  v2 = *(_QWORD *)(a1 + 48);
  if (!objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("config")))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("enable")))
    {
      v5 = *(unsigned __int8 *)(a1 + 64);
      if (v5 <= 1)
      {
        v8 = v5 == 1;
        v9 = sub_1000438A4();
        v7 = (*(uint64_t (**)(uint64_t, _QWORD, _BOOL8, _BOOL8))(*(_QWORD *)v9 + 1904))(v9, *(_QWORD *)(a1 + 40), v8, v8);
        goto LABEL_11;
      }
    }
    goto LABEL_7;
  }
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 == 2)
  {
    v4 = *(uint64_t (**)(void))(*(_QWORD *)sub_1000438A4() + 1920);
    goto LABEL_9;
  }
  if (v3 != 1)
  {
LABEL_7:
    v6 = 3;
    goto LABEL_12;
  }
  v4 = *(uint64_t (**)(void))(*(_QWORD *)sub_1000438A4() + 1912);
LABEL_9:
  v7 = v4();
LABEL_11:
  v6 = v7;
LABEL_12:
  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 56));
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v11);
    xpc_release(v11);
  }
}

uint64_t sub_100553A98(uint64_t a1)
{
  void *v2;
  unsigned __int8 v4[16];

  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100937820);
  v2 = off_1009778A0;
  sub_100030BCC(v4, *(_QWORD *)(a1 + 32));
  return sub_10063AA04((uint64_t)v2, v4, *(unsigned __int16 *)(a1 + 52), *(unsigned __int16 *)(a1 + 54), *(unsigned __int16 *)(a1 + 56), *(_WORD *)(a1 + 58), *(unsigned __int16 *)(a1 + 60), *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48));
}

void sub_100553B50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  xpc_object_t reply;
  void *v6;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = sub_1000438A4();
    v4 = (*(int (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v3 + 1592))(v3, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(char *)(a1 + 57), *(char *)(a1 + 58));
  }
  else
  {
    v4 = 8;
  }
  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    v6 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v6);
    xpc_release(v6);
  }
}

void sub_100553BE8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int64_t v5;
  xpc_object_t reply;
  void *v7;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 == 3)
  {
    v4 = sub_1000438A4();
    v5 = (*(int (**)(uint64_t))(*(_QWORD *)v4 + 3656))(v4);
    goto LABEL_15;
  }
  if (v3 == 2)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_100937820);
      sub_100641BF8((uint64_t)off_1009778A0, *(void **)(a1 + 32));
      goto LABEL_13;
    }
  }
  else if (v3 == 1 && *(_QWORD *)(a1 + 32))
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100937820);
    sub_100641B34((uint64_t)off_1009778A0, *(void **)(a1 + 32));
LABEL_13:
    v5 = 0;
    goto LABEL_15;
  }
  v5 = 3;
LABEL_15:
  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    v7 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v5);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v7);
    xpc_release(v7);
  }
}

void sub_100553D14(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int64_t v4;
  xpc_object_t reply;
  void *v6;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 == 2)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007039AC();
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_100937820);
      sub_100641D7C((uint64_t)off_1009778A0, *(void **)(a1 + 32));
      goto LABEL_15;
    }
  }
  else if (v3 == 1 && *(_QWORD *)(a1 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070394C();
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100937820);
    sub_100641CB8((uint64_t)off_1009778A0, *(void **)(a1 + 32));
LABEL_15:
    v4 = 0;
    goto LABEL_17;
  }
  v4 = 3;
LABEL_17:
  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  if (reply)
  {
    v6 = reply;
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v6);
    xpc_release(v6);
  }
}

void sub_100553E6C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E28B0((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(unsigned __int8 *)(a1 + 40));
}

void sub_100553EC4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_10006ED08((uint64_t)off_100978168, *(_QWORD *)(v1 + 128));
}

void sub_100553F14(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *i;
  xpc_object_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v2 = *(_QWORD *)(a1 + 32);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100937780);
  v3 = sub_10006A768(qword_1009778B0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v4);
        v8 = sub_100013ABC(*(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i), *(unsigned __int8 *)(v2 + 168), *(_DWORD *)(v2 + 80));
        xpc_array_append_value(*(xpc_object_t *)(a1 + 40), v8);
        xpc_release(v8);
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

}

void sub_10055405C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100554080(uint64_t a1)
{
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100937780);
  sub_100696160(qword_1009778B0, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40) == 1, *(_QWORD *)(a1 + 48) == 1, *(_QWORD *)(a1 + 56) == 1);
}

void sub_1005540EC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E2DAC((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(_QWORD *)(a1 + 48) != 0, a1 + 56);
}

void sub_100554154(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E2D04((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(_QWORD *)(a1 + 48) != 0, *(_DWORD *)(a1 + 56));
}

void sub_1005541BC(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3[16];

  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100937780);
  sub_100699674(qword_1009778B0, *(void **)(a1 + 32));
  if (*(_BYTE *)(a1 + 40))
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100937820);
    v2 = off_1009778A0;
    sub_100030BCC(v3, *(_QWORD *)(a1 + 32));
    sub_100622358((uint64_t)v2, v3, 2u);
  }
}

void sub_100554298(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E2AF4((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(_QWORD *)(a1 + 48) != 0);
}

uint64_t sub_1005542FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E2C64((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_100554364(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[3];
  _QWORD v13[3];

  v8 = a3;
  v13[0] = v8;
  v12[0] = CFSTR("kCBMsgArgDeviceUUID");
  v12[1] = CFSTR("kCBMsgArgPairingType");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a4));
  v13[1] = v9;
  v12[2] = CFSTR("kCBMsgArgPairingPasskey");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a5));
  v13[2] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 3));

  sub_10005DF3C(a1, 16, v11);
}

void sub_10055446C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1005544A8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  sub_100554364(a1 - 144, a2, a3, a4, a5);
}

void sub_1005544B0(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v6;
  xpc_object_t v7;
  id v8;
  void *v9;
  unsigned int v10;
  id v11;
  id v12;
  void *v13;
  unsigned __int8 uuid[8];
  uint64_t v15;

  v6 = a3;
  v7 = xpc_dictionary_create(0, 0, 0);
  v8 = v6;
  v9 = v8;
  if (v8)
  {
    *(_QWORD *)uuid = 0;
    v15 = 0;
    objc_msgSend(v8, "getUUIDBytes:", uuid);
    xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", uuid);
  }

  xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a4);
  if (a4 == 168)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v11 = sub_10065A630((uint64_t)off_1009778C0, v9);
    v12 = (id)objc_claimAutoreleasedReturnValue(v11);
    v13 = v12;
    if (v12)
    {
      *(_QWORD *)uuid = 0;
      v15 = 0;
      objc_msgSend(v12, "getUUIDBytes:", uuid);
      xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceOriginalUUID", uuid);
    }

  }
  else if (!a4)
  {
    v10 = sub_100004D44(v9);
    xpc_dictionary_set_int64(v7, "kCBMsgArgPairingState", v10);
  }
  sub_10005E138(a1, 17, v7, 1);

}

void sub_100554630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100554668(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  sub_1005544B0(a1 - 144, a2, a3, a4);
}

void sub_100554670(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  const __CFString *v6;
  id v7;

  v4 = a3;
  v6 = CFSTR("kCBMsgArgDeviceUUID");
  v7 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
  sub_10005DF3C(a1, 18, v5);

}

void sub_100554714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100554738(uint64_t a1, uint64_t a2, void *a3)
{
  sub_100554670(a1 - 144, a2, a3);
}

void sub_100554740(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v6 = a3;
  v7 = v6;
  if (*(_BYTE *)(a1 + 168))
  {
    v10[0] = CFSTR("kCBMsgArgDeviceUUID");
    v10[1] = CFSTR("kCBMsgArgState");
    v11[0] = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a4));
    v11[1] = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 2));
    sub_10005DF3C(a1, 166, v9);

  }
}

void sub_10055481C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10055484C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  sub_100554740(a1 - 144, a2, a3, a4);
}

void sub_100554854(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  if (*(int *)(v2 + 80) >= 1 && objc_msgSend(*(id *)(a1 + 32), "length"))
  {
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    v3 = sub_1002F1518((uint64_t)off_100978168, *(void **)(a1 + 32));
  }
  else
  {
    v3 = 0;
  }
  xpc_dictionary_set_int64(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), "kCBMsgArgCount", v3);
  xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), *(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  xpc_release(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
}

uint64_t sub_100554908(uint64_t a1, xpc_object_t object, uint64_t a3)
{
  NSObject *v6;
  xpc_type_t type;
  uint64_t v8;
  xpc_object_t value;
  NSObject *v11;
  _QWORD *v12;
  xpc_object_t v13;
  unsigned __int16 v14;
  xpc_object_t v15;
  BOOL v16;
  unsigned int v17;
  xpc_object_t v18;
  xpc_object_t v19;
  int v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  void *v27;
  void *v28;
  int v29;
  xpc_object_t v30;
  uint64_t v31;
  xpc_object_t v32;
  uint64_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  uint64_t v36;
  int v37;
  xpc_object_t v38;
  xpc_object_t v39;
  uint64_t v40;
  xpc_object_t v41;
  uint64_t v42;
  xpc_object_t v43;
  id v44;
  uint64_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  __int128 *i;
  uint64_t v49;
  NSObject *v50;
  xpc_object_t v51;
  __int128 *j;
  xpc_object_t v53;
  xpc_object_t v54;
  xpc_object_t v55;
  xpc_object_t v56;
  uint64_t v57;
  xpc_object_t v58;
  NSObject *v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unsigned __int8 v65;
  NSObject *v66;
  size_t v67;
  size_t v68;
  _BYTE *v69;
  uint64_t v70;
  xpc_object_t v71;
  NSObject *v72;
  NSObject *v73;
  xpc_object_t v74;
  NSObject *v75;
  NSObject *v76;
  xpc_object_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  xpc_object_t v81;
  __int16 v82;
  id v83;
  NSObject *v84;
  unsigned __int16 v85;
  __int128 v86;
  unsigned __int16 v87;
  id v88;
  int8x16_t *v89;
  void *v90;
  uint64_t v91;
  id v92;
  id v93;
  void *v94;
  unint64_t v95;
  NSObject *v96;
  int v97;
  int v98;
  _BYTE *v99;
  _BYTE *v100;
  _BYTE *v101;
  unsigned __int16 v102;
  void *v103;
  BOOL v104;
  id v105;
  unint64_t v106;
  uint64_t v107;
  NSObject *v108;
  id v109;
  void *v110;
  xpc_object_t v111;
  NSObject *v112;
  id v113;
  id v114;
  xpc_object_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  int v122;
  _BYTE *v123;
  id v124;
  void *v125;
  id v126;
  int v127;
  _BYTE *v128;
  id v129;
  void *v130;
  id v131;
  void *v132;
  NSObject *v133;
  id v134;
  id v135;
  uint64_t v136;
  void *k;
  uint64_t v138;
  xpc_object_t v139;
  __int128 v140;
  int *v141;
  _BYTE *v142;
  uint64_t v143;
  void *v144;
  id v145;
  _QWORD *v146;
  char *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  char v152;
  _BYTE v153[7];
  uint64_t (**v154)();
  unsigned int *v155;
  int64_t v156;
  __int128 *v157;
  __int128 *v158;
  uint64_t v159;
  __int128 *v160;
  __int128 *v161;
  uint64_t v162;
  std::string v163;
  int64_t v164;
  int64_t v165;
  int64_t v166;
  int64_t v167;
  int64_t v168;
  int64_t v169;
  uint64_t (**v170)();
  unsigned int *v171;
  unsigned __int8 v172;
  __int16 v173;
  int64_t v174;
  int64_t v175;
  uint64_t (**v176)();
  unsigned int *v177;
  uint64_t (**v178)();
  unsigned int *v179;
  _BYTE v180[128];
  _BYTE v181[22];
  char v182;
  uint8_t v183[4];
  _BYTE *v184;
  __int16 v185;
  _BYTE *v186;
  uint8_t v187[4];
  int v188;
  __int128 v189;
  int v190;
  _BYTE buf[32];

  v178 = &off_100918258;
  v179 = 0;
  v176 = &off_100918258;
  v177 = 0;
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary)
  {
    v6 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      type = xpc_get_type(object);
      sub_100703BBC((uint64_t)type, (uint64_t)buf, v6);
    }
    goto LABEL_4;
  }
  if (*(int *)(a1 + 80) >= 2)
  {
    v160 = 0;
    value = xpc_dictionary_get_value(object, "kCBAdvOptionHoldPowerAssertion");
    if (value)
    {
      v8 = sub_100023CBC(value, (int64_t *)&v160);
      if ((_DWORD)v8)
        goto LABEL_5;
      if (v160)
      {
        *(_BYTE *)(*(_QWORD *)(a3 + 8) + 360) = 1;
        v11 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          v12 = (_QWORD *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0)
            v12 = (_QWORD *)*v12;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "session \"%s\" asking to hold a power assertion for advertising", buf, 0xCu);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 184))
  {
    *(_QWORD *)buf = 0;
    v13 = xpc_dictionary_get_value(object, "kCBAdvOptionUseFGInterval");
    if (v13)
    {
      v8 = sub_100023CBC(v13, (int64_t *)buf);
      if ((_DWORD)v8)
        goto LABEL_5;
      v14 = 48;
    }
    else
    {
      v14 = 290;
    }
    v15 = xpc_dictionary_get_value(object, "kCBAdvOptionAdvertisingInterval");
    if (v15)
    {
      v8 = sub_100023CBC(v15, (int64_t *)buf);
      if ((_DWORD)v8)
        goto LABEL_5;
      v14 = *(_WORD *)buf;
      if ((unint64_t)(*(_QWORD *)buf - 16385) < 0xFFFFFFFFFFFFC01FLL)
      {
LABEL_4:
        v8 = 3;
        goto LABEL_5;
      }
    }
  }
  else
  {
    v14 = 290;
  }
  v16 = (unsigned __int16)(((unsigned __int16)(v14 - 37) >> 1) | ((v14 - 37) << 15)) > 0xBu
     || ((1 << ((unsigned __int16)(v14 - 37) >> 1)) & 0x92D) == 0;
  if (v16
    && (v49 = sub_10003BE44(), v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 728))(v49), v17 > v14))
  {
    v50 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = (double)v14 * 0.625;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = (double)v17 * 0.625;
      *(_WORD *)&buf[22] = 2048;
      *(double *)&buf[24] = *(double *)&buf[14];
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Limit advertising interval from %.2f msec to %.2f msec (hw limit %.2f)", buf, 0x20u);
    }
  }
  else
  {
    LOWORD(v17) = v14;
  }
  *(_WORD *)(*(_QWORD *)(a3 + 8) + 222) = v17;
  v175 = 0;
  if (*(int *)(a1 + 80) <= 0)
  {
    v174 = 0;
  }
  else
  {
    v18 = xpc_dictionary_get_value(object, "kCBAdvOptionForcePrimaryPHY");
    if (v18)
    {
      v8 = sub_100023CBC(v18, &v175);
      if ((_DWORD)v8)
        goto LABEL_5;
      if (v175 - 1 <= 2)
        *(_BYTE *)(*(_QWORD *)(a3 + 8) + 339) = v175;
    }
    v175 = 0;
    v19 = xpc_dictionary_get_value(object, "kCBAdvOptionForceSecondaryPHY");
    if (v19)
    {
      v8 = sub_100023CBC(v19, &v175);
      if ((_DWORD)v8)
        goto LABEL_5;
      if (v175 - 1 <= 2)
        *(_BYTE *)(*(_QWORD *)(a3 + 8) + 340) = v175;
    }
    v20 = *(_DWORD *)(a1 + 80);
    v174 = 0;
    if (v20 >= 1)
    {
      v21 = xpc_dictionary_get_value(object, "kCBAdvOptionForcePrimaryPhyOptions");
      if (v21)
      {
        v8 = sub_100023CBC(v21, &v174);
        if ((_DWORD)v8)
          goto LABEL_5;
        if (v174 - 1 <= 1)
          *(_BYTE *)(*(_QWORD *)(a3 + 8) + 343) = v174;
      }
      v174 = 0;
      v22 = xpc_dictionary_get_value(object, "kCBAdvOptionForceSecondaryPhyOptions");
      if (v22)
      {
        v8 = sub_100023CBC(v22, &v174);
        if ((_DWORD)v8)
          goto LABEL_5;
        if (v174 - 1 <= 1)
          *(_BYTE *)(*(_QWORD *)(a3 + 8) + 344) = v174;
      }
    }
  }
  v173 = 0;
  v172 = 0;
  v170 = &off_100918258;
  v171 = 0;
  if (*(int *)(a1 + 80) <= 0)
  {
    v27 = 0;
    v169 = 0;
  }
  else
  {
    sub_1000438A4();
    if (sub_100049F50()
      && _os_feature_enabled_impl("BluetoothFeatures", "LeDecisionBasedAdvFiltering"))
    {
      v23 = xpc_dictionary_get_value(object, "kCBAdvOptionUseDecisionBasedAdvPayload");
      v24 = xpc_dictionary_get_value(object, "kCBAdvOptionDBAFDecisionTypeFlags");
      v25 = xpc_dictionary_get_value(object, "kCBAdvOptionDBAFDecisionDataLength");
      v26 = xpc_dictionary_get_value(object, "kCBAdvOptionDBAFDecisionData");
      v27 = 0;
      if (v23)
      {
        if (v24)
        {
          if (v25)
          {
            v28 = v26;
            if (v26)
            {
              if (sub_1002C3628(v23, (_BYTE *)&v173 + 1)
                || sub_1002C3628(v24, &v173)
                || sub_1002C3628(v25, &v172)
                || sub_100023A7C(v28, (uint64_t)&v170))
              {
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
                  sub_100703B90();
                v8 = 3;
                goto LABEL_271;
              }
              v62 = sub_10003EB18((uint64_t)&v170);
              v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v62, v172));
              v63 = *(_QWORD *)(a3 + 8);
              v64 = v173;
              v65 = v172;
              *(_BYTE *)(v63 + 345) = HIBYTE(v173);
              *(_BYTE *)(v63 + 346) = v64;
              *(_BYTE *)(v63 + 347) = v65;
              objc_storeStrong((id *)(v63 + 352), v27);
            }
          }
        }
      }
    }
    else
    {
      v27 = 0;
    }
    v29 = *(_DWORD *)(a1 + 80);
    v169 = 0;
    if (v29 >= 1)
    {
      v30 = xpc_dictionary_get_value(object, "kCBAdvOptionStopOnAdvertisingAddressChange");
      if (v30)
      {
        v8 = sub_100023CBC(v30, &v169);
        if ((_DWORD)v8)
          goto LABEL_270;
      }
    }
  }
  *(_BYTE *)(*(_QWORD *)(a3 + 8) + 307) = v169 != 0;
  if (*(int *)(a1 + 80) > 1)
  {
    v31 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 2568))(v31))
    {
      *(_QWORD *)buf = 0;
      v32 = xpc_dictionary_get_value(object, "kCBAdvertisementEnableEPA");
      if (v32)
      {
        v8 = sub_100023CBC(v32, (int64_t *)buf);
        if ((_DWORD)v8)
          goto LABEL_270;
        *(_BYTE *)(*(_QWORD *)(a3 + 8) + 409) = *(_QWORD *)buf != 0;
      }
    }
    if (*(int *)(a1 + 80) >= 2)
    {
      v33 = sub_1000438A4();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 2352))(v33))
      {
        *(_QWORD *)buf = 0;
        v34 = xpc_dictionary_get_value(object, "kCBAdvDataObjectLocatorInstance");
        if (v34)
        {
          v8 = sub_100023CBC(v34, (int64_t *)buf);
          if ((_DWORD)v8)
            goto LABEL_270;
          *(_BYTE *)(*(_QWORD *)(a3 + 8) + 308) = *(_QWORD *)buf != 0;
        }
      }
    }
  }
  v168 = 1;
  v35 = xpc_dictionary_get_value(object, "kCBAdvDataIsConnectable");
  if (v35)
  {
    v8 = sub_100023CBC(v35, &v168);
    if ((_DWORD)v8)
      goto LABEL_270;
  }
  v36 = *(_QWORD *)(a3 + 8);
  v16 = v168 == 0;
  *(_BYTE *)(v36 + 12) = v168 != 0;
  v37 = v16;
  *(_DWORD *)(v36 + 264) = v37;
  v167 = 0;
  v38 = xpc_dictionary_get_value(object, "kCBAdvDataIsObjectDiscovery");
  if (v38)
  {
    v8 = sub_100023CBC(v38, &v167);
    if ((_DWORD)v8)
      goto LABEL_270;
    *(_DWORD *)(*(_QWORD *)(a3 + 8) + 264) = 3;
  }
  v166 = 0;
  v39 = xpc_dictionary_get_value(object, "kCBAdvDataIsExtended");
  if (v39)
  {
    v8 = sub_100023CBC(v39, &v166);
    if ((_DWORD)v8)
      goto LABEL_270;
    v40 = *(_QWORD *)(a3 + 8);
    *(_DWORD *)(v40 + 264) = 4;
    *(_BYTE *)(v40 + 12) = 0;
  }
  v165 = 0;
  v41 = xpc_dictionary_get_value(object, "kCBAdvDataIsExtendedConnectable");
  if (v41)
  {
    v8 = sub_100023CBC(v41, &v165);
    if ((_DWORD)v8)
      goto LABEL_270;
    v42 = *(_QWORD *)(a3 + 8);
    *(_DWORD *)(v42 + 264) = 4;
    *(_BYTE *)(v42 + 12) = 1;
  }
  v164 = 0;
  v43 = xpc_dictionary_get_value(object, "kCBAdvDataIsTDS");
  if (!v43)
  {
LABEL_98:
    v44 = sub_1000239F0(object, "kCBAdvDataLocalName");
    v145 = (id)objc_claimAutoreleasedReturnValue(v44);
    if (v145)
    {
      v45 = *(_QWORD *)(a3 + 8);
      sub_100091AE8(&v163, (char *)objc_msgSend(objc_retainAutorelease(v145), "UTF8String"));
      std::string::operator=((std::string *)(v45 + 16), &v163);
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v163.__r_.__value_.__l.__data_);
    }
    v46 = xpc_dictionary_get_value(object, "kCBAdvDataAppearance");
    if (v46)
    {
      *(_QWORD *)buf = 0;
      v8 = sub_100023CBC(v46, (int64_t *)buf);
      if ((_DWORD)v8)
      {
LABEL_269:

        goto LABEL_270;
      }
      *(_WORD *)(*(_QWORD *)(a3 + 8) + 40) = *(_WORD *)buf;
    }
    v160 = 0;
    v161 = 0;
    v162 = 0;
    v47 = xpc_dictionary_get_value(object, "kCBAdvDataServiceUUIDs");
    if (v47)
    {
      v8 = sub_10000598C(v47, (uint64_t)&v160);
      if ((_DWORD)v8)
      {
LABEL_267:
        if (v160)
        {
          v161 = v160;
          operator delete(v160);
        }
        goto LABEL_269;
      }
      for (i = v160; i != v161; i = (__int128 *)((char *)i + 20))
        sub_100562650(*(_QWORD **)(a3 + 8), i);
    }
    v157 = 0;
    v158 = 0;
    v159 = 0;
    v51 = xpc_dictionary_get_value(object, "kCBAdvDataSolicitedServiceUUIDs");
    if (v51)
    {
      v8 = sub_10000598C(v51, (uint64_t)&v157);
      if ((_DWORD)v8)
        goto LABEL_265;
      for (j = v157; j != v158; j = (__int128 *)((char *)j + 20))
        sub_100562770(*(_QWORD **)(a3 + 8), j);
    }
    if (*(_BYTE *)(a1 + 184))
    {
      v53 = xpc_dictionary_get_value(object, "kCBAdvDataAppleMfgData");
      if (v53)
      {
        v8 = sub_100023A7C(v53, (uint64_t)&v178);
        if ((_DWORD)v8)
          goto LABEL_265;
        sub_100041698(*(_QWORD *)(a3 + 8) + 48, (uint64_t)&v178);
      }
    }
    v54 = xpc_dictionary_get_value(object, "kCBAdvDataLeBluetoothDeviceAddress");
    if (v54)
    {
      v8 = sub_100023A7C(v54, (uint64_t)&v176);
      if ((_DWORD)v8)
        goto LABEL_265;
      sub_100041698(*(_QWORD *)(a3 + 8) + 136, (uint64_t)&v176);
    }
    v55 = xpc_dictionary_get_value(object, "kCBAdvDataNonAppleMfgData");
    if (v55)
    {
      v8 = sub_100023A7C(v55, (uint64_t)&v178);
      if ((_DWORD)v8)
        goto LABEL_265;
      sub_100041698(*(_QWORD *)(a3 + 8) + 152, (uint64_t)&v178);
    }
    if (sub_1000452EC((uint64_t)&v178))
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      *(_DWORD *)&buf[23] = 0;
      *(_QWORD *)&buf[16] = 0;
      v56 = xpc_dictionary_get_value(object, "kCBAdvDataAppleBeaconKey");
      if (v56)
      {
        v8 = sub_100023A7C(v56, (uint64_t)&v178);
        if ((_DWORD)v8)
          goto LABEL_265;
        if (sub_10003F8C4((uint64_t)&v178) != 21)
          goto LABEL_141;
        *(_DWORD *)buf = 5046042;
        *(_WORD *)&buf[4] = 5378;
        sub_1000455DC((uint64_t)&v178, &buf[6], 0x15uLL);
        v57 = *(_QWORD *)(a3 + 8);
        sub_10003994C(v181, buf, 0x1BuLL);
        sub_100041698(v57 + 48, (uint64_t)v181);
        *(_QWORD *)v181 = &off_100918258;
        if (*(_QWORD *)&v181[8])
          sub_100056AAC(*(unsigned int **)&v181[8]);
      }
    }
    v58 = xpc_dictionary_get_value(object, "kCBAdvDataTDSData");
    if (v58)
    {
      v59 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "TDS advertising data found", buf, 2u);
      }
      if (*(_BYTE *)(a1 + 187))
      {
        v8 = sub_100023A7C(v58, (uint64_t)&v178);
        if ((_DWORD)v8)
          goto LABEL_265;
        if ((unint64_t)sub_10003F8C4((uint64_t)&v178) <= 2)
        {
          v60 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            v61 = sub_10003F8C4((uint64_t)&v178);
            sub_100703B54((uint64_t)buf, v61, v60);
          }
LABEL_141:
          v8 = 1;
          goto LABEL_265;
        }
        v67 = sub_10003F8C4((uint64_t)&v178);
        v68 = v67 + 2;
        v69 = (char *)&v140 - ((__chkstk_darwin() + 17) & 0xFFFFFFFFFFFFFFF0);
        bzero(v69, v67 + 2);
        *v69 = v67 + 1;
        v69[1] = 38;
        sub_1000455DC((uint64_t)&v178, v69 + 2, v67);
        v70 = *(_QWORD *)(a3 + 8);
        sub_10003994C(buf, v69, v68);
        sub_100041698(v70 + 224, (uint64_t)buf);
        *(_QWORD *)buf = &off_100918258;
        if (*(_QWORD *)&buf[8])
          sub_100056AAC(*(unsigned int **)&buf[8]);
      }
      else
      {
        v66 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_INFO, "TDS advertising not allowed", buf, 2u);
        }
      }
    }
    v71 = xpc_dictionary_get_value(object, "kCBAdvDataRawBytesDataAdvInd");
    if (v71 || (v71 = xpc_dictionary_get_value(object, "kCBAdvDataRawBytesData")) != 0)
    {
      v72 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_INFO, "Raw bytes advertising data found for ADV_IND", buf, 2u);
      }
      if (*(_BYTE *)(a1 + 189))
      {
        v8 = sub_100023A7C(v71, (uint64_t)&v178);
        if ((_DWORD)v8)
          goto LABEL_265;
        sub_100041698(*(_QWORD *)(a3 + 8) + 272, (uint64_t)&v178);
      }
      else
      {
        v73 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_INFO, "Raw bytes advertising not allowed", buf, 2u);
        }
      }
    }
    v74 = xpc_dictionary_get_value(object, "kCBAdvDataRawBytesDataScanRsp");
    if (v74)
    {
      v75 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "Raw bytes advertising data found for SCAN_RSP", buf, 2u);
      }
      if (*(_BYTE *)(a1 + 189))
      {
        v8 = sub_100023A7C(v74, (uint64_t)&v178);
        if ((_DWORD)v8)
          goto LABEL_265;
        sub_100041698(*(_QWORD *)(a3 + 8) + 288, (uint64_t)&v178);
      }
      else
      {
        v76 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "Raw bytes advertising not allowed", buf, 2u);
        }
      }
    }
    v156 = 0;
    if (*(int *)(a1 + 80) < 1)
    {
      v78 = 0;
    }
    else
    {
      v77 = xpc_dictionary_get_value(object, "kCBAdvDataIsContact");
      if (v77)
      {
        v8 = sub_100023CBC(v77, &v156);
        if ((_DWORD)v8)
        {
LABEL_265:
          if (v157)
          {
            v158 = v157;
            operator delete(v157);
          }
          goto LABEL_267;
        }
      }
      v78 = v156;
      if (v156)
      {
        v79 = sub_10003BE44();
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 352))(v79) & 1) == 0)
        {
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            sub_100703B28();
          v8 = 11;
          goto LABEL_265;
        }
        v80 = *(_QWORD *)(a3 + 8);
        *(_DWORD *)(v80 + 264) = 2;
        *(_BYTE *)(v80 + 307) = 1;
        *(_QWORD *)buf = 0;
        v81 = xpc_dictionary_get_value(object, "kCBAdvOptionUseFGInterval");
        if (v81)
        {
          v8 = sub_100023CBC(v81, (int64_t *)buf);
          if ((_DWORD)v8)
            goto LABEL_265;
          v82 = 48;
        }
        else
        {
          v82 = 432;
        }
        v111 = xpc_dictionary_get_value(object, "kCBAdvOptionAdvertisingInterval");
        if (v111)
        {
          v8 = sub_100023CBC(v111, (int64_t *)buf);
          if ((_DWORD)v8)
            goto LABEL_265;
          v82 = *(_WORD *)buf;
          if ((unint64_t)(*(_QWORD *)buf - 16385) < 0xFFFFFFFFFFFFC01FLL)
            goto LABEL_174;
        }
        *(_WORD *)(*(_QWORD *)(a3 + 8) + 222) = v82;
        v78 = v156;
      }
    }
    if (sub_100562890(a1, v78 != 0, a3))
    {
LABEL_174:
      v8 = 3;
      goto LABEL_265;
    }
    if (*(_DWORD *)(a1 + 80) == 2)
    {
      v83 = sub_1002C3C04(object, "kCBAdvDataServiceData");
      v144 = (void *)objc_claimAutoreleasedReturnValue(v83);
      if (v144)
      {
        v84 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
        {
          v85 = (unsigned __int16)objc_msgSend(v144, "count");
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v85;
          _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_INFO, "Service data %d elements", buf, 8u);
        }
        if ((objc_msgSend(v144, "count") & 1) != 0)
        {
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            sub_100703AFC();
LABEL_220:

          goto LABEL_174;
        }
        v87 = 0;
        v141 = &v188;
        v142 = v153;
        *(_QWORD *)&v86 = 136446466;
        v140 = v86;
        while (1)
        {
          v189 = 0uLL;
          v190 = 0;
          v143 = v87;
          v88 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v144, "objectAtIndexedSubscript:", v140)));
          v89 = (int8x16_t *)objc_msgSend(v88, "bytes");
          v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v144, "objectAtIndexedSubscript:", v143));
          sub_100069B04((uint64_t)&v189, v89, objc_msgSend(v90, "length"));

          v154 = 0;
          v155 = 0;
          v91 = v143 | 1;
          v92 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v144, "objectAtIndexedSubscript:", v91)));
          v93 = objc_msgSend(v92, "bytes");
          v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v144, "objectAtIndexedSubscript:", v91));
          sub_10003994C(&v154, v93, (size_t)objc_msgSend(v94, "length"));

          if (v189 >= 3u)
            break;
          v95 = sub_10003F8C4((uint64_t)&v154);
          v96 = qword_100999860;
          if (v95 >= 0x15)
          {
            if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
              sub_100703AB4(v187, v141, v96);
            goto LABEL_187;
          }
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
          {
            sub_10006887C((uint64_t)&v189, buf);
            v98 = buf[23];
            v99 = *(_BYTE **)buf;
            sub_1000453F0((uint64_t)&v154, v181);
            v100 = buf;
            if (v98 < 0)
              v100 = v99;
            v101 = v181;
            if (v182 < 0)
              v101 = *(_BYTE **)v181;
            *(_DWORD *)v183 = v140;
            v184 = v100;
            v185 = 2080;
            v186 = v101;
            _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "Adding service Data UUID:%{public}s data:%s", v183, 0x16u);
            if (v182 < 0)
              operator delete(*(void **)v181);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          sub_100562B18(*(_QWORD *)(a3 + 8), &v189, (uint64_t)&v154);
          v97 = 1;
LABEL_198:
          v154 = &off_100918258;
          if (v155)
            sub_100056AAC(v155);
          if (!v97)
            goto LABEL_220;
          v102 = v143 + 2;
          v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v144, "objectAtIndexedSubscript:", (unsigned __int16)(v143 + 2)));
          v104 = v103 == 0;

          v87 = v102;
          if (v104)
            goto LABEL_202;
        }
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_100703A88(&v152, v142);
LABEL_187:
        v97 = 0;
        goto LABEL_198;
      }
LABEL_202:

    }
    v105 = sub_1000239F0(object, "kCBAdvOptionInstanceAddress");
    v144 = (void *)objc_claimAutoreleasedReturnValue(v105);
    if (v144)
    {
      v106 = sub_100649C7C(v144);
      v107 = v106;
      if (v106 && (!BYTE6(v106) || BYTE6(v106) == 1 && (v106 & 0xC00000000000) != 0x800000000000))
      {
        v112 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          v113 = sub_100021770(v107);
          v114 = (id)objc_claimAutoreleasedReturnValue(v113);
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v144;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v114;
          _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "Overriding address with address string %@ (%@)", buf, 0x16u);

        }
      }
      else
      {
        v108 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          v109 = sub_100021770(v107);
          v110 = (void *)objc_claimAutoreleasedReturnValue(v109);
          sub_100703A0C((uint64_t)v144, v110, (uint64_t)v183, v108);
        }
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 8) + 256) = v107;
    }
    v115 = xpc_dictionary_get_value(object, "kCBAdvOptionInstanceRandomAddressBytes");
    if (!v115)
    {
LABEL_242:
      v131 = sub_100023E20(object, "kCBManagerListOfClients");
      v132 = (void *)objc_claimAutoreleasedReturnValue(v131);
      if (!v132)
        v132 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", *(_QWORD *)(a1 + 96), 0));
      v133 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v132;
        _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEFAULT, "Setting client list to %@", buf, 0xCu);
      }
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)buf = &buf[8];
      v148 = 0u;
      v149 = 0u;
      v150 = 0u;
      v151 = 0u;
      v134 = v132;
      v135 = objc_msgSend(v134, "countByEnumeratingWithState:objects:count:", &v148, v180, 16);
      if (v135)
      {
        v136 = *(_QWORD *)v149;
        do
        {
          for (k = 0; k != v135; k = (char *)k + 1)
          {
            if (*(_QWORD *)v149 != v136)
              objc_enumerationMutation(v134);
            sub_100091AE8(v181, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v148 + 1) + 8 * (_QWORD)k)), "UTF8String"));
            sub_100565F28((uint64_t **)buf, (const void **)v181, (uint64_t)v181);
            if (v182 < 0)
              operator delete(*(void **)v181);
          }
          v135 = objc_msgSend(v134, "countByEnumeratingWithState:objects:count:", &v148, v180, 16);
        }
        while (v135);
      }

      v138 = *(_QWORD *)(a3 + 8);
      sub_1002F6144((uint64_t *)&v146, (const void ***)buf);
      if ((_QWORD **)(v138 + 416) != &v146)
        sub_10041D170((uint64_t **)(v138 + 416), v146, &v147);
      sub_100056BAC((uint64_t)&v146, v147);
      if (*(int *)(a1 + 80) >= 1)
      {
        *(_QWORD *)v181 = 0;
        v139 = xpc_dictionary_get_value(object, "kCBOptionUseCase");
        if (v139)
        {
          v8 = sub_100023CBC(v139, (int64_t *)v181);
          if ((_DWORD)v8)
          {
LABEL_263:
            sub_100056BAC((uint64_t)buf, *(char **)&buf[8]);

            goto LABEL_264;
          }
          if (*(_QWORD *)v181)
            *(_DWORD *)(*(_QWORD *)(a3 + 8) + 440) = *(_DWORD *)v181;
        }
      }
      v8 = 0;
      goto LABEL_263;
    }
    v8 = sub_100023A7C(v115, (uint64_t)&v178);
    if ((_DWORD)v8)
    {
LABEL_264:

      goto LABEL_265;
    }
    if ((unint64_t)sub_10003F8C4((uint64_t)&v178) < 6)
    {
      v8 = 8;
      goto LABEL_264;
    }
    v116 = *(unsigned __int8 *)sub_10003EB18((uint64_t)&v178);
    v143 = *(unsigned __int8 *)(sub_10003EB18((uint64_t)&v178) + 1);
    v117 = *(unsigned __int8 *)(sub_10003EB18((uint64_t)&v178) + 2);
    v118 = *(unsigned __int8 *)(sub_10003EB18((uint64_t)&v178) + 3);
    v119 = *(unsigned __int8 *)(sub_10003EB18((uint64_t)&v178) + 4);
    v120 = sub_10003EB18((uint64_t)&v178);
    v143 = (v143 << 32) | (v116 << 40) | (v117 << 24) | (v118 << 16) | (v119 << 8) | *(unsigned __int8 *)(v120 + 5) | 0x1000000000000;
    v121 = qword_100999860;
    if ((v116 & 0xC0) == 0x80)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_1000453F0((uint64_t)&v178, buf);
        v122 = buf[23];
        v123 = *(_BYTE **)buf;
        v124 = sub_100021770(v143);
        v125 = (void *)objc_claimAutoreleasedReturnValue(v124);
        if (v122 >= 0)
          v123 = buf;
        v126 = v125;
        *(_DWORD *)v181 = 136315394;
        *(_QWORD *)&v181[4] = v123;
        *(_WORD *)&v181[12] = 2112;
        *(_QWORD *)&v181[14] = v126;
        _os_log_error_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_ERROR, "Overriding address with Invalid address data %s (%@)", v181, 0x16u);

        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
LABEL_240:

      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000453F0((uint64_t)&v178, buf);
      v127 = buf[23];
      v128 = *(_BYTE **)buf;
      v129 = sub_100021770(v143);
      v130 = (void *)objc_claimAutoreleasedReturnValue(v129);
      if (v127 >= 0)
        v128 = buf;
      v126 = v130;
      *(_DWORD *)v181 = 136315394;
      *(_QWORD *)&v181[4] = v128;
      *(_WORD *)&v181[12] = 2112;
      *(_QWORD *)&v181[14] = v126;
      _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEFAULT, "Overriding address with address data %s (%@)", v181, 0x16u);

      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      goto LABEL_240;
    }
    *(_QWORD *)(*(_QWORD *)(a3 + 8) + 256) = v143;
    goto LABEL_242;
  }
  v8 = sub_100023CBC(v43, &v164);
  if (!(_DWORD)v8)
  {
    *(_DWORD *)(*(_QWORD *)(a3 + 8) + 264) = 2;
    goto LABEL_98;
  }
LABEL_270:

LABEL_271:
  v170 = &off_100918258;
  if (v171)
    sub_100056AAC(v171);
LABEL_5:
  v176 = &off_100918258;
  if (v177)
    sub_100056AAC(v177);
  v178 = &off_100918258;
  if (v179)
    sub_100056AAC(v179);
  return v8;
}

void sub_10055601C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;
  void *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;

  if (*(char *)(v4 - 121) < 0)
    operator delete(*(void **)(v4 - 144));

  v6 = *(void **)(v1 + 176);
  if (v6)
  {
    *(_QWORD *)(v1 + 184) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v1 + 200);
  if (v7)
  {
    *(_QWORD *)(v1 + 208) = v7;
    operator delete(v7);
  }

  *(_QWORD *)(v1 + 296) = v3;
  v8 = *(unsigned int **)(v1 + 304);
  if (v8)
    sub_100056AAC(v8);
  *(_QWORD *)(v1 + 336) = v3;
  v9 = *(unsigned int **)(v1 + 344);
  if (v9)
    sub_100056AAC(v9);
  *(_QWORD *)(v1 + 352) = v3;
  v10 = *(unsigned int **)(v1 + 360);
  if (v10)
    sub_100056AAC(v10);
  _Unwind_Resume(a1);
}

id sub_10055629C(uint64_t a1, uint64_t a2)
{
  __uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  v4 = sub_100564624(v3, a2, v3 / 0xF4240);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v5)
    v7 = v5;

  return v6;
}

void sub_1005562F8(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  _BYTE *v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v4 = objc_alloc((Class)NSNumber);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("kCBMsgArgTimeXpcLeAttConnHandleStartAdvMsg")));
  v6 = objc_msgSend(v5, "longLongValue");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("kCBMsgArgTimeXpcWiProxUpdateAdv")));
  v8 = objc_msgSend(v4, "initWithLongLong:", v6 - (_BYTE *)objc_msgSend(v7, "longLongValue"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v8, CFSTR("heySiriXPCDuration"));

  v9 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("heySiriXPCDuration")));
    v12 = 138412290;
    v13 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Duration of HeySiri BT Advertisement's XPC message from wirpox to controller: %@", (uint8_t *)&v12, 0xCu);

  }
  v11 = sub_100065478();
  (*(void (**)(uint64_t, void *))(*(_QWORD *)v11 + 504))(v11, v3);

}

void sub_100556474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1005564C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E6204((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), a1 + 48);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_100556528(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = &off_100918298;
  *(_QWORD *)(a1 + 56) = v3;
  if (v3)
    sub_10003C37C(v3);
}

void sub_100556548(uint64_t a1)
{
  unsigned int *v1;

  *(_QWORD *)(a1 + 48) = &off_100918298;
  v1 = *(unsigned int **)(a1 + 56);
  if (v1)
    sub_100056AAC(v1);
}

void sub_100556564(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E6278((uint64_t)off_100978168, *(_QWORD *)(v1 + 128));
}

uint64_t sub_1005565B4(uint64_t a1, xpc_object_t xdict, uint64_t a3)
{
  uint64_t v3;
  xpc_object_t value;
  xpc_object_t v8;
  xpc_object_t v9;
  char v10;
  _DWORD *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  xpc_object_t v25;
  NSObject *v26;
  void *__p;
  _DWORD *v29;
  uint64_t v30;
  uint64_t (**v31)();
  unsigned int *v32;

  v31 = &off_100918258;
  v32 = 0;
  if (*(int *)(a1 + 80) < 2)
    return 0;
  __p = 0;
  value = xpc_dictionary_get_value(xdict, "kCBPeriodicAdvDataAdvHandle");
  if (value)
  {
    v3 = sub_100023CBC(value, (int64_t *)&__p);
    if ((_DWORD)v3)
      goto LABEL_47;
    if ((unint64_t)__p > 0xEF)
      goto LABEL_5;
    *(_BYTE *)a3 = (_BYTE)__p;
  }
  if (*(int *)(a1 + 80) < 2)
    goto LABEL_46;
  __p = 0;
  v8 = xpc_dictionary_get_value(xdict, "KCBPeriodicAdvDataInterval");
  if (v8)
  {
    v3 = sub_100023CBC(v8, (int64_t *)&__p);
    if ((_DWORD)v3)
      goto LABEL_47;
    if ((char *)__p - 0x10000 < (char *)0xFFFFFFFFFFFF0006)
    {
LABEL_5:
      v3 = 3;
      goto LABEL_47;
    }
    *(_WORD *)(a3 + 2) = (_WORD)__p;
  }
  if (*(int *)(a1 + 80) < 2)
    goto LABEL_46;
  __p = 0;
  v29 = 0;
  v30 = 0;
  v9 = xpc_dictionary_get_value(xdict, "KCBPeriodicAdvDataServiceUUIDs");
  if (v9)
  {
    v3 = sub_10000598C(v9, (uint64_t)&__p);
    if ((_DWORD)v3)
    {
      v10 = 0;
      goto LABEL_37;
    }
    v11 = __p;
    if (__p == v29)
    {
      v10 = 1;
      if (!__p)
        goto LABEL_39;
      goto LABEL_38;
    }
    v3 = a3 + 40;
    v12 = *(char **)(a3 + 32);
    do
    {
      if ((unint64_t)v12 >= *(_QWORD *)v3)
      {
        v14 = *(_QWORD *)(a3 + 24);
        v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v12[-v14] >> 2);
        v16 = v15 + 1;
        if (v15 + 1 > 0xCCCCCCCCCCCCCCCLL)
          abort();
        if (0x999999999999999ALL * ((*(_QWORD *)v3 - v14) >> 2) > v16)
          v16 = 0x999999999999999ALL * ((*(_QWORD *)v3 - v14) >> 2);
        if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)v3 - v14) >> 2) >= 0x666666666666666)
          v17 = 0xCCCCCCCCCCCCCCCLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_1000B58EC(a3 + 40, v17);
        else
          v18 = 0;
        v19 = &v18[20 * v15];
        v20 = *(_OWORD *)v11;
        *((_DWORD *)v19 + 4) = v11[4];
        *(_OWORD *)v19 = v20;
        v22 = *(char **)(a3 + 24);
        v21 = *(char **)(a3 + 32);
        v23 = v19;
        if (v21 != v22)
        {
          do
          {
            v24 = *(_OWORD *)(v21 - 20);
            *((_DWORD *)v23 - 1) = *((_DWORD *)v21 - 1);
            *(_OWORD *)(v23 - 20) = v24;
            v23 -= 20;
            v21 -= 20;
          }
          while (v21 != v22);
          v21 = *(char **)(a3 + 24);
        }
        v12 = v19 + 20;
        *(_QWORD *)(a3 + 24) = v23;
        *(_QWORD *)(a3 + 32) = v19 + 20;
        *(_QWORD *)(a3 + 40) = &v18[20 * v17];
        if (v21)
          operator delete(v21);
      }
      else
      {
        v13 = *(_OWORD *)v11;
        *((_DWORD *)v12 + 4) = v11[4];
        *(_OWORD *)v12 = v13;
        v12 += 20;
      }
      *(_QWORD *)(a3 + 32) = v12;
      v11 += 5;
    }
    while (v11 != v29);
  }
  v10 = 1;
LABEL_37:
  v11 = __p;
  if (__p)
  {
LABEL_38:
    v29 = v11;
    operator delete(v11);
  }
LABEL_39:
  if ((v10 & 1) == 0)
    goto LABEL_47;
  if (*(int *)(a1 + 80) >= 2)
  {
    v25 = xpc_dictionary_get_value(xdict, "KCBPeriodicAdvDataRandomData");
    if (v25)
    {
      v26 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Raw bytes advertising data found", (uint8_t *)&__p, 2u);
      }
      v3 = sub_100023A7C(v25, (uint64_t)&v31);
      if ((_DWORD)v3)
        goto LABEL_47;
      sub_100041698(a3 + 48, (uint64_t)&v31);
    }
  }
LABEL_46:
  v3 = 0;
LABEL_47:
  v31 = &off_100918258;
  if (v32)
    sub_100056AAC(v32);
  return v3;
}

void sub_1005568D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14)
{
  if (a14)
    sub_100056AAC(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100556914(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_1009378A0);
  result = sub_1005FF96C((uint64_t)off_100977C28, *(_QWORD *)(v2 + 128), a1 + 48);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_10055697C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = &off_100918258;
  *(_QWORD *)(a1 + 64) = v4;
  if (v4)
    sub_10003C37C(v4);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  sub_1000B61B8((char *)(a1 + 72), *(__int128 **)(a2 + 72), *(__int128 **)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2));
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = &off_100918258;
  *(_QWORD *)(a1 + 104) = v5;
  if (v5)
    sub_10003C37C(v5);
}

void sub_100556A00(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;
  void *v5;
  unsigned int *v6;

  v5 = *v2;
  if (*v2)
  {
    v1[10] = v5;
    operator delete(v5);
  }
  v1[7] = v3;
  v6 = (unsigned int *)v1[8];
  if (v6)
    sub_100056AAC(v6);
  _Unwind_Resume(exception_object);
}

void sub_100556A34(_QWORD *a1)
{
  unsigned int *v2;
  void *v3;
  unsigned int *v4;

  a1[12] = &off_100918258;
  v2 = (unsigned int *)a1[13];
  if (v2)
    sub_100056AAC(v2);
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  a1[7] = &off_100918258;
  v4 = (unsigned int *)a1[8];
  if (v4)
    sub_100056AAC(v4);
}

_QWORD *sub_100556A90(_QWORD *a1)
{
  unsigned int *v2;
  void *v3;
  unsigned int *v4;

  a1[6] = &off_100918258;
  v2 = (unsigned int *)a1[7];
  if (v2)
    sub_100056AAC(v2);
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  a1[1] = &off_100918258;
  v4 = (unsigned int *)a1[2];
  if (v4)
    sub_100056AAC(v4);
  return a1;
}

uint64_t sub_100556AE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_1009378A0);
  result = sub_1005FFD80((uint64_t)off_100977C28, *(_QWORD *)(v2 + 128), *(unsigned __int8 *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_100556B50(void *a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD applier[5];

  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_array)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472;
    applier[2] = sub_1005619F0;
    applier[3] = &unk_100923110;
    applier[4] = a2;
    if (xpc_array_apply(a1, applier))
      return 0;
    else
      return 3;
  }
  else
  {
    v4 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703BF8(a1, v4);
    return 3;
  }
}

uint64_t sub_100556C08(void *a1, _QWORD ***a2)
{
  NSObject *v4;
  _QWORD **i;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *__p;
  _QWORD *v12;
  uint64_t v13;
  _QWORD applier[5];

  if (xpc_get_type(a1) != (xpc_type_t)&_xpc_type_array)
  {
    v4 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703BF8(a1, v4);
    return 3;
  }
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 3221225472;
  applier[2] = sub_100562164;
  applier[3] = &unk_100923110;
  applier[4] = a2;
  if (!xpc_array_apply(a1, applier))
  {
    for (i = *a2; i != a2[1]; ++i)
    {
      v7 = *i;
      __p = 0;
      v12 = 0;
      v13 = 0;
      sub_10001FE6C(&__p, (uint64_t)(v7 + 13));
      v9 = __p;
      v8 = v12;
      while (v9 != v8)
      {
        if (*v9)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*v9 + 8))(*v9);
          v8 = v12;
        }
        ++v9;
      }
      v10 = v7[12];
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
    }
    return 3;
  }
  return 0;
}

void sub_100556D54(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSMutableDictionary *v5;
  NSNumber *v6;
  void *v7;
  _BOOL8 v8;
  void *v9;
  NSNumber *v10;
  void *v11;
  uint64_t v12;
  void **v13;
  void *v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  __n128 v18;
  __n128 v19;
  int v20;

  v2 = a1[5];
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = sub_1002E5F0C((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), a1[6]);
  v3 = qword_100999860;
  if (*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703C68();
    v4 = a1[6];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Collecting GATT metrics to send to Biome", (uint8_t *)__p, 2u);
    }
    v5 = objc_opt_new(NSMutableDictionary);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", CFSTR("Peripheral"), CFSTR("SessionType"));
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    v6 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", sub_10006F6A4((uint64_t)off_100978168, *(_QWORD *)(v2 + 128)));
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v7, CFSTR("SessionState"));

    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    if (sub_10006E8AC((uint64_t)off_100978168, *(_QWORD *)(v2 + 128)))
    {
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_100937800);
      v8 = sub_10006F5E4((uint64_t)off_100978168, *(_QWORD *)(v2 + 128));
    }
    else
    {
      v8 = 0;
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v8));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v9, CFSTR("SupportsStateRestoration"));

    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_10006EB5C((uint64_t)off_100978168, *(_QWORD *)(v2 + 128)));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v11, CFSTR("SupportsBackgrounding"));

    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", *(_QWORD *)(v2 + 96), CFSTR("BundleID"));
    v12 = a1[6];
    v19 = *(__n128 *)(v12 + 72);
    v20 = *(_DWORD *)(v12 + 88);
    sub_100042F44(&v18, &v19);
    sub_10006887C((uint64_t)&v18, __p);
    if (v17 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v14, CFSTR("ServiceUUID"));

    if (v17 < 0)
      operator delete(__p[0]);
    v15 = sub_100065478();
    (*(void (**)(uint64_t, NSMutableDictionary *))(*(_QWORD *)v15 + 296))(v15, v5);

  }
}

void sub_1005570BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_100557120(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  return sub_1002E5F7C((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(_DWORD *)(a1 + 40));
}

void sub_100557178(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E1084((uint64_t)off_100978168, *(_QWORD *)(v1 + 128));
}

void sub_1005571C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  v3 = *(_QWORD *)(v2 + 128);
  v4 = *(_DWORD *)(a1 + 40);
  v5 = *(unsigned __int8 *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 72);
  sub_1002E6444((uint64_t)off_100978168, v3, v4, v5, a1 + 56, (unsigned __int16 *)&v6);
}

void sub_100557240(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = &off_100918258;
  *(_QWORD *)(a1 + 64) = v3;
  if (v3)
    sub_10003C37C(v3);
}

void sub_100557260(uint64_t a1)
{
  unsigned int *v1;

  *(_QWORD *)(a1 + 56) = &off_100918258;
  v1 = *(unsigned int **)(a1 + 64);
  if (v1)
    sub_100056AAC(v1);
}

void sub_10055727C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E64DC((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(_DWORD *)(a1 + 48));
}

void sub_1005572DC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  if (sub_1002E0C38((uint64_t)off_100978168, *(_QWORD *)(v1 + 128), 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703CC8();
  }
}

void sub_100557368(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void (***v5)(_QWORD, void *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 uu[16];

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_100937840);
  v3 = qword_10097AA58;
  v4 = *(_QWORD *)(v2 + 128);
  v5 = (void (***)(_QWORD, void *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v2 + 152);
  v6 = *(_DWORD *)(v2 + 40);
  v7 = *(unsigned __int16 *)(a1 + 48);
  v8 = *(unsigned __int16 *)(a1 + 56);
  v9 = *(unsigned __int16 *)(a1 + 64);
  v10 = *(unsigned __int16 *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  sub_100030BCC(uu, *(_QWORD *)(a1 + 32));
  sub_1003D1FB4(v3, v4, v5, v6, v7, v8, v9, v10, v11, uu, 1, *(_QWORD *)(a1 + 88));
}

void sub_100557478(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 uu[16];

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_100937840);
  v3 = qword_10097AA58;
  v4 = *(_QWORD *)(v2 + 128);
  v5 = *(unsigned __int16 *)(a1 + 48);
  sub_100030BCC(uu, *(_QWORD *)(a1 + 32));
  sub_1003D3578(v3, v4, v5, uu);
}

void sub_10055752C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_100937840);
  sub_1003D0ADC(qword_10097AA58, *(_QWORD *)(v2 + 128), v2 + 152, *(_DWORD *)(v2 + 40), *(_WORD *)(a1 + 40), *(_QWORD *)(a1 + 48) != 0, *(unsigned __int16 *)(a1 + 56), *(unsigned __int16 *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 1u, *(_QWORD *)(a1 + 88));
}

void sub_1005575C8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_100937840);
  sub_1003D18EC((_QWORD *)qword_10097AA58, *(_QWORD *)(v2 + 128), *(unsigned __int16 *)(a1 + 40));
}

uint64_t sub_100557620(uint64_t a1)
{
  unint64_t v1;

  v1 = sub_100649C7C(*(void **)(a1 + 32));
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_1009378A0);
  return sub_1006051FC((uint64_t)off_100977C28, v1);
}

BOOL sub_100557678(uint64_t a1, int a2, xpc_object_t object)
{
  NSObject *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v18;
  xpc_type_t type;
  id obj;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[16];
  _BYTE v26[21];
  _BYTE v27[128];

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    v18 = a1;
    v6 = sub_1002C3D94(object, "kCBMsgArgOfflineAdvertisingData");
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue(v6);
    v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v22 != v8)
            objc_enumerationMutation(obj);
          v10 = *(id *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
          *(_OWORD *)buf = 0u;
          memset(v26, 0, sizeof(v26));
          objc_msgSend(v10, "getBytes:range:", buf, 0, 6);
          objc_msgSend(v10, "getBytes:range:", &buf[13], 6, 22);
          *(_DWORD *)&buf[9] = 1643008;
          *(_DWORD *)&buf[6] = 5046046;
          v26[19] = v26[19] & 0xFC | (buf[0] >> 6);
          buf[0] |= 0xC0u;
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", buf, 37));
          objc_msgSend(v10, "setData:", v11);

        }
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
      }
      while (v7);
    }

    v12 = sub_1002C3AD4(object, "kCBMsgArgOfflineAdvertisingRotationInterval");
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if (qword_100978140 != -1)
      dispatch_once(&qword_100978140, &stru_1009378C0);
    v14 = off_100978138;
    v15 = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8);
    v16 = *(unsigned __int8 *)(v15 + 24);
    *(_BYTE *)(v15 + 24) = v16 + 1;
    sub_1002603F4((uint64_t)v14, v16, obj, (int)objc_msgSend(v13, "intValue", v18));

  }
  else
  {
    v5 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "handleSetOfflineAdvertisingParamsAndData not a dictionary!", buf, 2u);
    }
  }
  return type == (xpc_type_t)&_xpc_type_dictionary;
}

void sub_100557934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_100557990(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100937820);
  sub_10062887C((uint64_t)off_1009778A0, *(_QWORD *)(a1 + 32));
}

void sub_1005579E0(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;

  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 40);
    xpc_dictionary_set_int64(v3, "kCBMsgArgResult", a2);
    xpc_connection_send_message(*(xpc_connection_t *)(v4 + 16), *(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    xpc_release(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  }
}

void sub_100557A4C(uint64_t a1, int a2, void *a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;

  v21 = a3;
  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 40);
    xpc_dictionary_set_int64(v5, "kCBMsgArgResult", a2);
    v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("kCBMsgArgTimeoutInMS")));
    xpc_dictionary_set_uint64(v7, "kCBMsgArgTimeoutInMS", (uint64_t)objc_msgSend(v8, "unsignedLongValue"));

    v9 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("kCBMsgArgHoldStableAddressState")));
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgHoldStableAddressState", (BOOL)objc_msgSend(v10, "BOOLValue"));

    v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("kCBMsgArgOverrideLocalAddressState")));
    xpc_dictionary_set_BOOL(v11, "kCBMsgArgOverrideLocalAddressState", (BOOL)objc_msgSend(v12, "BOOLValue"));

    v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("kCBMsgArgPrivateModeState")));
    xpc_dictionary_set_BOOL(v13, "kCBMsgArgPrivateModeState", (BOOL)objc_msgSend(v14, "BOOLValue"));

    v15 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("kCBMsgArgHoldStableAddressCount")));
    xpc_dictionary_set_uint64(v15, "kCBMsgArgHoldStableAddressCount", (uint64_t)objc_msgSend(v16, "unsignedLongValue"));

    v17 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("kCBMsgArgLePrivateAddressTimer")));
    xpc_dictionary_set_uint64(v17, "kCBMsgArgLePrivateAddressTimer", (uint64_t)objc_msgSend(v18, "unsignedLongValue"));

    v19 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("kCBMsgArgLeHoldStablePrivateAddressTimer")));
    xpc_dictionary_set_uint64(v19, "kCBMsgArgLeHoldStablePrivateAddressTimer", (uint64_t)objc_msgSend(v20, "unsignedLongValue"));

    xpc_connection_send_message(*(xpc_connection_t *)(v6 + 16), *(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    xpc_release(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  }

}

void sub_100557C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100557CC8(uint64_t a1)
{
  sub_10005E138(a1, 56, 0, 0);
}

void sub_100557CD8(uint64_t a1)
{
  sub_10005E138(a1 - 144, 56, 0, 0);
}

void sub_100557CEC(uint64_t a1, uint64_t a2, void *a3)
{
  xpc_object_t v4;
  id v5;

  v5 = a3;
  v4 = xpc_dictionary_create(0, 0, 0);
  sub_1004B1614(a1, v4, v5);
  sub_10005E138(a1, 164, v4, 1);

}

void sub_100557D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100557D68(uint64_t a1, uint64_t a2, void *a3)
{
  sub_100557CEC(a1 - 144, a2, a3);
}

void sub_100557D74(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4)
{
  id v6;
  xpc_object_t v7;
  xpc_object_t v8;
  _QWORD **v9;
  _QWORD *v10[2];

  v6 = a3;
  v7 = xpc_dictionary_create(0, 0, 0);
  sub_1004B1614(a1, v7, v6);
  v10[0] = 0;
  v10[1] = 0;
  v9 = v10;
  v8 = sub_1004B16F4(a4, (uint64_t)&v9);
  sub_10001A82C((uint64_t)&v9, v10[0]);
  xpc_dictionary_set_value(v7, "kCBMsgArgUUIDs", v8);
  xpc_release(v8);
  sub_10005E138(a1, 58, v7, 1);

}

void sub_100557E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  void *v11;

  sub_10001A82C((uint64_t)&a10, a11);

  _Unwind_Resume(a1);
}

void sub_100557E58(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4)
{
  sub_100557D74(a1 - 144, a2, a3, a4);
}

void sub_100557E60(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  xpc_object_t v11;
  _QWORD *v12;
  void *v13;
  unsigned __int8 *v14;
  NSData *v15;
  void *v16;
  uint64_t v17;
  NSData *v18;
  void *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  BOOL v22;
  xpc_object_t v23;
  const void *v24;
  size_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  uint64_t i;
  uint64_t v29;
  xpc_object_t v30;
  id v31;
  void *v32;
  xpc_object_t xdict;
  xpc_object_t v34;
  void *v35[3];
  _QWORD **v36;
  _QWORD *v37[2];
  void *__p[2];
  int64_t value;

  v34 = xpc_dictionary_create(0, 0, 0);
  if (!*(_QWORD *)(a3 + 8))
    goto LABEL_39;
  xdict = xpc_dictionary_create(0, 0, 0);
  v6 = *(_QWORD *)(a3 + 8);
  if (*(char *)(v6 + 39) < 0)
  {
    sub_10003430C(__p, *(void **)(v6 + 16), *(_QWORD *)(v6 + 24));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v6 + 16);
    value = *(_QWORD *)(v6 + 32);
  }
  if ((SHIBYTE(value) & 0x80000000) == 0)
  {
    if (!HIBYTE(value))
      goto LABEL_17;
LABEL_9:
    v8 = *(_QWORD *)(a3 + 8);
    if (*(char *)(v8 + 39) < 0)
    {
      sub_10003430C(__p, *(void **)(v8 + 16), *(_QWORD *)(v8 + 24));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v8 + 16);
      value = *(_QWORD *)(v8 + 32);
    }
    if (value >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    xpc_dictionary_set_string(xdict, "kCBAdvDataLocalName", (const char *)v9);
    if (SHIBYTE(value) < 0)
      operator delete(__p[0]);
    goto LABEL_17;
  }
  v7 = __p[1];
  operator delete(__p[0]);
  if (v7)
    goto LABEL_9;
LABEL_17:
  v10 = *(_QWORD *)(a3 + 8);
  if (*(_WORD *)(v10 + 40))
  {
    xpc_dictionary_set_uint64(xdict, "kCBAdvDataAppearance", *(unsigned __int16 *)(v10 + 40));
    v10 = *(_QWORD *)(a3 + 8);
  }
  __p[0] = 0;
  __p[1] = 0;
  value = 0;
  sub_1000B61B8((char *)__p, *(__int128 **)(v10 + 64), *(__int128 **)(v10 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v10 + 72) - *(_QWORD *)(v10 + 64)) >> 2));
  if (__p[1] != __p[0])
  {
    v37[0] = 0;
    v37[1] = 0;
    v36 = v37;
    v11 = sub_1004B16F4((unsigned __int8 **)__p, (uint64_t)&v36);
    sub_10001A82C((uint64_t)&v36, v37[0]);
    xpc_dictionary_set_value(xdict, "kCBAdvDataServiceUUIDs", v11);
    xpc_release(v11);
  }
  v12 = *(_QWORD **)(a3 + 8);
  if (v12[16])
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v14 = (unsigned __int8 *)v12[14];
    if (v14 != (unsigned __int8 *)(v12 + 15))
    {
      do
      {
        if (v14[32] == 2)
        {
          v36 = 0;
          v37[0] = 0;
          v15 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v36, sub_1000689E4(v14 + 32, &v36));
          v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
          objc_msgSend(v13, "addObject:", v16);

          v17 = sub_10003EB18((uint64_t)(v14 + 56));
          v18 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v17, sub_10003F8C4((uint64_t)(v14 + 56)));
          v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
          objc_msgSend(v13, "addObject:", v19);

        }
        v20 = (unsigned __int8 *)*((_QWORD *)v14 + 1);
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = *(unsigned __int8 **)v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (unsigned __int8 *)*((_QWORD *)v14 + 2);
            v22 = *(_QWORD *)v21 == (_QWORD)v14;
            v14 = v21;
          }
          while (!v22);
        }
        v14 = v21;
      }
      while (v21 != (unsigned __int8 *)(v12 + 15));
    }
    if (objc_msgSend(v13, "count", xdict, v34))
    {
      v23 = sub_1004B182C(v13);
      xpc_dictionary_set_value(xdict, "kCBAdvDataServiceData", v23);
      xpc_release(v23);
    }

    v12 = *(_QWORD **)(a3 + 8);
  }
  if (sub_10003F8C4((uint64_t)(v12 + 6)) && *(_BYTE *)(a1 + 184))
  {
    v24 = (const void *)sub_10003EB18(*(_QWORD *)(a3 + 8) + 48);
    v25 = sub_10003F8C4(*(_QWORD *)(a3 + 8) + 48);
    xpc_dictionary_set_data(xdict, "kCBAdvDataAppleMfgData", v24, v25);
  }
  xpc_dictionary_set_value(v34, "kCBMsgArgAdvertisementData", xdict);
  xpc_release(xdict);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_39:
  if (a2[4] != a2[3])
  {
    sub_10001FE6C(v35, (uint64_t)(a2 + 3));
    v26 = sub_100399BF8((uint64_t **)v35);
    if (v35[0])
    {
      v35[1] = v35[0];
      operator delete(v35[0]);
    }
    xpc_dictionary_set_value(v34, "kCBMsgArgServices", v26);
    xpc_release(v26);
  }
  if (a2[7] != a2[6])
  {
    v27 = xpc_array_create(0, 0);
    v29 = a2[6];
    for (i = a2[7]; v29 != i; v29 += 18)
    {
      __p[0] = 0;
      __p[1] = 0;
      LOWORD(value) = 0;
      uuid_copy((unsigned __int8 *)__p, (const unsigned __int8 *)v29);
      LOWORD(value) = *(_WORD *)(v29 + 16);
      v30 = xpc_dictionary_create(0, 0, 0);
      v31 = sub_100030DF4((const unsigned __int8 *)__p);
      v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      sub_1004B1614(a1, v30, v32);

      xpc_dictionary_set_int64(v30, "kCBMsgArgAttributeID", (unsigned __int16)value);
      xpc_array_append_value(v27, v30);
      xpc_release(v30);
    }
    xpc_dictionary_set_value(v34, "kCBMsgArgSubscribedHandles", v27);
    xpc_release(v27);
  }
  sub_10005E138(a1, 57, v34, 1);
}

void sub_100558324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1005583C4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  sub_100557E60(a1 - 144, a2, a3);
}

void sub_1005583CC(uint64_t a1)
{
  sub_10005E138(a1, 56, 0, 0);
}

void sub_1005583DC(uint64_t a1)
{
  sub_10005E138(a1 - 144, 56, 0, 0);
}

void sub_1005583F0(uint64_t a1, void *a2, int a3, unsigned int a4, int a5, int a6, int a7)
{
  id v13;
  NSObject *v14;
  xpc_object_t v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint8_t buf[16];
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v13 = a2;
  v14 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = a4;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a5;
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v26) = a7;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Channel connected callback : sockets : psm %u, cid %u, sock %d", buf, 0x14u);
  }
  v15 = xpc_dictionary_create(0, 0, 0);
  v16 = v13;
  v17 = v16;
  if (v16)
  {
    memset(buf, 0, sizeof(buf));
    objc_msgSend(v16, "getUUIDBytes:", buf);
    xpc_dictionary_set_uuid(v15, "kCBMsgArgDeviceUUID", buf);
  }

  xpc_dictionary_set_int64(v15, "kCBMsgArgResult", a3);
  xpc_dictionary_set_int64(v15, "kCBMsgArgPSM", a4);
  xpc_dictionary_set_fd(v15, "kCBMsgArgSocket", a7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  *(_OWORD *)buf = 0u;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100937820);
  sub_1006167B8((uint64_t)off_1009778A0, v17, (uint64_t)buf);
  if (*(_QWORD *)buf)
  {
    v18 = objc_msgSend(*(id *)&buf[8], "mutableCopy");
    v19 = v18;
    if (a6 && (objc_msgSend(v18, "containsObject:", *(_QWORD *)(a1 + 96)) & 1) == 0)
      objc_msgSend(v19, "addObject:", *(_QWORD *)(a1 + 96));
    objc_storeStrong((id *)&buf[8], v19);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100937820);
    v20 = off_1009778A0;
    v21[0] = *(id *)buf;
    v21[1] = *(id *)&buf[8];
    v22 = v26;
    v23 = v27;
    v24 = v28;
    sub_1006168D8((uint64_t)v20, v17, (uint64_t)v21);

  }
  sub_10005E138(a1, 23, v15, 1);

}

void sub_10055867C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1005586CC(uint64_t a1, void *a2, int a3, unsigned int a4, int a5, int a6, int a7)
{
  sub_1005583F0(a1 - 152, a2, a3, a4, a5, a6, a7);
}

void sub_1005586D4(uint64_t a1, void *a2, int a3, unsigned int a4, int a5)
{
  id v9;
  NSObject *v10;
  xpc_object_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v9 = a2;
  v10 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v14) = 67109632;
    HIDWORD(v14) = a3;
    LOWORD(v15) = 1024;
    *(_DWORD *)((char *)&v15 + 2) = a4;
    HIWORD(v15) = 1024;
    v16 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Channel disconnected callback result : %d, psm : %u, cid = %u", (uint8_t *)&v14, 0x14u);
  }
  v11 = xpc_dictionary_create(0, 0, 0);
  v12 = v9;
  v13 = v12;
  if (v12)
  {
    v14 = 0;
    v15 = 0;
    objc_msgSend(v12, "getUUIDBytes:", &v14);
    xpc_dictionary_set_uuid(v11, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)&v14);
  }

  xpc_dictionary_set_int64(v11, "kCBMsgArgResult", a3);
  xpc_dictionary_set_int64(v11, "kCBMsgArgPSM", a4);
  sub_10005E138(a1, 24, v11, 1);

}

void sub_100558834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100558858(uint64_t a1, void *a2, int a3, unsigned int a4, int a5)
{
  sub_1005586D4(a1 - 152, a2, a3, a4, a5);
}

void sub_100558860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[2];
  _QWORD v11[2];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  v6 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v13 = a2;
    v14 = 1024;
    v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Channel published callback PSM : %u result : %d", buf, 0xEu);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", a2, CFSTR("kCBMsgArgPSM")));
  v10[1] = CFSTR("kCBMsgArgResult");
  v11[0] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
  v11[1] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 2));
  sub_10005DF3C(a1, 21, v9);

}

void sub_1005589A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1005589D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100558860(a1 - 152, a2, a3);
}

void sub_1005589D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[2];
  _QWORD v11[2];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  v6 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v13 = a2;
    v14 = 1024;
    v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Channel unpublished callback PSM : %u, result : %d", buf, 0xEu);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", a2, CFSTR("kCBMsgArgPSM")));
  v10[1] = CFSTR("kCBMsgArgResult");
  v11[0] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
  v11[1] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 2));
  sub_10005DF3C(a1, 22, v9);

}

void sub_100558B18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100558B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1005589D8(a1 - 152, a2, a3);
}

void sub_100558B50(uint64_t a1, _BOOL4 a2)
{
  sub_10000BC44(a1 - 144, a2);
}

void sub_100558B58()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "XpcLeAttConnection::advertisingStarted", v1, 2u);
  }
}

void sub_100558BBC()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "XpcLeAttConnection::advertisingStopped", v1, 2u);
  }
}

void sub_100558C20(uint64_t a1, int a2)
{
  NSObject *v3;
  _DWORD v4[2];

  v3 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XpcLeAttConnection::scanningStarted error:%d", (uint8_t *)v4, 8u);
  }
}

void sub_100558CC0(uint64_t a1, int a2)
{
  NSObject *v3;
  _DWORD v4[2];

  v3 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XpcLeAttConnection::scanningStopped error:%d", (uint8_t *)v4, 8u);
  }
}

void sub_100558D60(double a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  NSObject *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  double v27;
  __int16 v28;
  int v29;

  v15 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 138413826;
    v17 = a3;
    v18 = 2112;
    v19 = a4;
    v20 = 1024;
    v21 = a5;
    v22 = 1024;
    v23 = a6;
    v24 = 1024;
    v25 = a7;
    v26 = 2048;
    v27 = a1;
    v28 = 1024;
    v29 = a8;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "XpcLeAttConnection::deviceFound data:%@ encryptedAEM:%@ avgRSSI:%d count:%d saturated:%d timestamp:%f lastScanDeltaSeconds:%d", (uint8_t *)&v16, 0x38u);
  }
}

uint64_t sub_100558E74(uint64_t a1)
{
  uint64_t result;

  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009378E0);
  result = sub_10067428C(off_100977FA8);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_100558ED0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1[5];
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_10006E8F8((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), a1[6]);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

id sub_100558F38(void *a1)
{
  id v1;
  void *v2;
  unint64_t i;
  void *v4;
  NSString *v5;
  void *v6;
  id v7;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  for (i = 0; i < (unint64_t)objc_msgSend(v1, "count"); ++i)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectAtIndex:", i));
    v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sub_100035930((int)objc_msgSend(v4, "longLongValue")));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    objc_msgSend(v2, "addObject:", v6);

  }
  v7 = objc_msgSend(v2, "copy");

  return v7;
}

void sub_100558FFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100559038(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E4838((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100559090(id a1)
{
  uint64_t v1;
  int v2;
  int v3;
  NSObject *v4;
  _BOOL4 v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  char v12;
  uint64_t v13;
  int v14;
  int v15;
  NSObject *v16;
  _BOOL4 v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  NSObject *v22;
  _BOOL4 v23;
  char v24;
  uint64_t v25;
  int v26;
  int v27;
  NSObject *v28;
  _BOOL4 v29;
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  NSObject *v34;
  uint64_t v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  int v39;
  NSObject *v40;
  uint64_t v41;
  int v42;
  NSObject *v43;
  char v44;
  void *__p[2];
  char v46;
  int v47;
  uint8_t buf[8];
  char v49;

  v47 = 0;
  v1 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "DebugOverrideConnectionMinCELength");
  v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v1 + 88))(v1, buf, __p, &v47);
  if (v47)
    v3 = v2;
  else
    v3 = 0;
  if (v46 < 0)
    operator delete(__p[0]);
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3)
      goto LABEL_13;
  }
  else if (!v3)
  {
    goto LABEL_13;
  }
  v4 = qword_100999860;
  v5 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT);
  v6 = v47;
  if (v5)
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Warning: DebugOverrideConnectionMinCELength:%d", buf, 8u);
    v6 = v47;
  }
  byte_100993340 = v6;
  byte_100993345 = 1;
LABEL_13:
  v7 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "DebugOverrideConnectionMaxCELength");
  v8 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v7 + 88))(v7, buf, __p, &v47);
  if (v47)
    v9 = v8;
  else
    v9 = 0;
  if (v46 < 0)
    operator delete(__p[0]);
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v9)
      goto LABEL_25;
  }
  else if (!v9)
  {
    goto LABEL_25;
  }
  v10 = qword_100999860;
  v11 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT);
  v12 = v47;
  if (v11)
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Warning: DebugOverrideConnectionMaxCELength:%d", buf, 8u);
    v12 = v47;
  }
  byte_100993341 = v12;
  byte_100993345 = 1;
LABEL_25:
  v13 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "DebugOverrideConnectionMinCIFrames");
  v14 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v13 + 88))(v13, buf, __p, &v47);
  if (v47)
    v15 = v14;
  else
    v15 = 0;
  if (v46 < 0)
    operator delete(__p[0]);
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v15)
      goto LABEL_37;
  }
  else if (!v15)
  {
    goto LABEL_37;
  }
  v16 = qword_100999860;
  v17 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT);
  v18 = v47;
  if (v17)
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Warning: DebugOverrideConnectionMinCELength:%d", buf, 8u);
    v18 = v47;
  }
  byte_100993340 = v18;
  byte_100993345 = 1;
LABEL_37:
  v19 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "DebugOverrideConnectionMaxCIFrames");
  v20 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v19 + 88))(v19, buf, __p, &v47);
  if (v47)
    v21 = v20;
  else
    v21 = 0;
  if (v46 < 0)
    operator delete(__p[0]);
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v21)
      goto LABEL_49;
  }
  else if (!v21)
  {
    goto LABEL_49;
  }
  v22 = qword_100999860;
  v23 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT);
  v24 = v47;
  if (v23)
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Warning: DebugOverrideConnectionMaxCELength:%d", buf, 8u);
    v24 = v47;
  }
  byte_100993341 = v24;
  byte_100993345 = 1;
LABEL_49:
  v25 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "DebugOverrideConnectionSupervisionTimeout");
  v26 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v25 + 88))(v25, buf, __p, &v47);
  if (v47)
    v27 = v26;
  else
    v27 = 0;
  if (v46 < 0)
    operator delete(__p[0]);
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v27)
      goto LABEL_61;
  }
  else if (!v27)
  {
    goto LABEL_61;
  }
  v28 = qword_100999860;
  v29 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT);
  v30 = v47;
  if (v29)
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Warning: DebugOverrideConnectionSupervisionTimeout:%d", buf, 8u);
    v30 = v47;
  }
  byte_100993341 = v30;
  byte_100993345 = 1;
LABEL_61:
  v44 = 0;
  v31 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "DebugOverrideAutoReconnectEnabled");
  v32 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v31 + 72))(v31, buf, __p, &v44);
  if (v44)
    v33 = v32;
  else
    v33 = 0;
  if (v46 < 0)
    operator delete(__p[0]);
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v33)
      goto LABEL_73;
  }
  else if (!v33)
  {
    goto LABEL_73;
  }
  v34 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Warning: AutoReconnectEnabled for everyone", buf, 2u);
  }
  byte_100993346 = v44;
LABEL_73:
  v35 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "OverrideTxPowerConnectInd");
  v36 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v35 + 88))(v35, buf, __p, &v47);
  if (v46 < 0)
    operator delete(__p[0]);
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v36)
      goto LABEL_82;
  }
  else if (!v36)
  {
    goto LABEL_82;
  }
  v37 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Warning: OverrideTxPowerConnectInd:%d", buf, 8u);
  }
  byte_100993342 = v47;
  byte_100993345 = 1;
LABEL_82:
  v38 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "OverrideTxPowerAuxConnectReq");
  v39 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v38 + 88))(v38, buf, __p, &v47);
  if (v46 < 0)
    operator delete(__p[0]);
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v39)
      goto LABEL_91;
  }
  else if (!v39)
  {
    goto LABEL_91;
  }
  v40 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Warning: OverrideTxPowerAuxConnectReq:%d", buf, 8u);
  }
  LOBYTE(word_100993343) = v47;
  byte_100993345 = 1;
LABEL_91:
  v41 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "OverrideMrcEnable");
  v42 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v41 + 88))(v41, buf, __p, &v47);
  if (v46 < 0)
    operator delete(__p[0]);
  if (v49 < 0)
  {
    operator delete(*(void **)buf);
    if (!v42)
      return;
  }
  else if (!v42)
  {
    return;
  }
  v43 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Warning: OverrideMrcEnable:%d", buf, 8u);
  }
  HIBYTE(word_100993343) = v47;
  byte_100993345 = 1;
}

void sub_1005598D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_100559954(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E30E4((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(void **)(a1 + 40));
}

uint64_t sub_1005599AC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  int v5;
  char v6;
  unsigned __int8 v7[16];

  v2 = 0;
  v6 = 0;
  v5 = 0;
  do
    *((_BYTE *)&v5 + v2++) = arc4random_uniform(0x20u);
  while (v2 != 5);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100937820);
  v3 = off_1009778A0;
  sub_100030BCC(v7, *(_QWORD *)(a1 + 32));
  return sub_10063FD88((uint64_t)v3, v7, (uint64_t)&v5);
}

void sub_100559A78(int a1)
{
  NSObject *v2;
  _DWORD v3[2];

  v2 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Set LE AFH completed with status=%{bluetooth:OI_STATUS}u", (uint8_t *)v3, 8u);
  }
}

void sub_100559B18()
{
  sub_1000445E0(&stru_100999760);
}

void sub_100559B24(uint64_t a1, __int16 a2, char a3, char a4, char a5)
{
  word_100999790 = a2;
  byte_100999792 = a3;
  byte_100999793 = a4;
  byte_100999794 = a5;
  sub_1000445E0(&stru_100999760);
}

uint64_t sub_100559B48(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009378E0);
  return sub_100678FCC((uint64_t)off_100977FA8, *(_QWORD *)(v2 + 128), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_100559BA0(uint64_t a1)
{
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009378E0);
  return sub_100678CB0((uint64_t)off_100977FA8, *(_BYTE *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t sub_100559BF8(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  __int128 *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = objc_msgSend(*(id *)(a1 + 32), "count");
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  if (v2)
  {
    v3 = 0;
    v4 = &v10;
    do
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      v5 = off_1009778C0;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v3, v10, v11, v12, v13));
      v7 = sub_1000589DC((uint64_t)v5, v6, 0);
      v8 = sub_1000746A4(v7);
      *(_DWORD *)v4 = v8;
      *((_BYTE *)v4 + 6) = BYTE6(v8);
      *((_WORD *)v4 + 2) = WORD2(v8);

      ++v3;
      v4 = (__int128 *)((char *)v4 + 7);
    }
    while (v2 != v3);
  }
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009378E0);
  return sub_100678D30((uint64_t)off_100977FA8, (uint64_t)&v10, v2, *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void sub_100559D60(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100559D78(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E2F00((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_100559DD0(uint64_t a1)
{
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009378E0);
  return sub_100679050((uint64_t)off_100977FA8, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_100559E20(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, BOOL, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 672))(v2, *(_QWORD *)(a1 + 32) != 0, *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 72), *(unsigned __int8 *)(a1 + 80));
}

uint64_t sub_100559E6C(uint64_t a1)
{
  void *v2;
  unsigned __int8 v4[16];

  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100937820);
  v2 = off_1009778A0;
  sub_100030BCC(v4, *(_QWORD *)(a1 + 32));
  return sub_100624470((uint64_t)v2, v4, *(unsigned __int16 *)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
}

void sub_100559F0C(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned int a4)
{
  id v7;
  xpc_object_t v8;
  xpc_object_t reply;
  id v10;
  void *v11;
  unsigned __int8 uuid[8];
  uint64_t v13;

  v7 = a2;
  v8 = xpc_dictionary_create(0, 0, 0);
  reply = xpc_dictionary_create_reply(v8);
  if (reply)
  {
    v10 = v7;
    v11 = v10;
    if (v10)
    {
      *(_QWORD *)uuid = 0;
      v13 = 0;
      objc_msgSend(v10, "getUUIDBytes:", uuid);
      xpc_dictionary_set_uuid(reply, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", a4);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgNumConfigSupported", *a3);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgMaxProceduresSupported", *((unsigned __int16 *)a3 + 1));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgNumAntennasSupported", a3[4]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgRolesSupported", a3[5]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgModes_Supported", a3[6]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgRTTCapability", a3[7]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgRTTCoarseN", a3[8]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgRTTSoundingN", a3[9]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgRTTRandomPayloadN", a3[10]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgCSSyncPHYsSupported", a3[11]);
    xpc_dictionary_set_uint64(reply, "kCBMsgArgSubfeaturesSupported", *((unsigned __int16 *)a3 + 6));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgTIP1TimesSupported", *((unsigned __int16 *)a3 + 7));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgTIP2TimesSupported", *((unsigned __int16 *)a3 + 8));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgTFcsTimesSupported", *((unsigned __int16 *)a3 + 9));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgTPMTimesSupported", *((unsigned __int16 *)a3 + 10));
    xpc_dictionary_set_uint64(reply, "kCBMsgArgTSWTimesSupported", a3[22]);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
  }

}

void sub_10055A138(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10055A160(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned int a4)
{
  sub_100559F0C(a1 - 144, a2, a3, a4);
}

uint64_t sub_10055A168(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E54FC((uint64_t)off_100978168, *(_QWORD *)(v2 + 128));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055A1CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E5538((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055A234(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  __int128 v5;
  uint64_t result;
  __int128 v7;
  _OWORD v8[2];

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  v3 = *(_QWORD *)(v2 + 128);
  v4 = *(void **)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v7 = *(_OWORD *)(a1 + 56);
  v8[0] = v5;
  *(_OWORD *)((char *)v8 + 10) = *(_OWORD *)(a1 + 82);
  result = sub_1002E55AC((uint64_t)off_100978168, v3, v4, &v7);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055A2BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E5640((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055A324(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E56B4((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055A38C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];
  int v8;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  v3 = *(_QWORD *)(v2 + 128);
  v4 = *(void **)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v7[0] = *(_OWORD *)(a1 + 56);
  v7[1] = v5;
  v7[2] = *(_OWORD *)(a1 + 88);
  v8 = *(_DWORD *)(a1 + 104);
  result = sub_1002E5728((uint64_t)off_100978168, v3, v4, (uint64_t)v7);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055A41C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E57C4((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055A488(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 56);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E5840((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), *(unsigned __int8 *)(a1 + 64));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055A500(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  v3 = *(_QWORD *)(v2 + 128);
  v4 = *(void **)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 72);
  result = sub_1002E58CC((uint64_t)off_100978168, v3, v4, &v6);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055A584(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E5960((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), a1 + 48);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_10055A5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = &off_100918258;
  *(_QWORD *)(a1 + 56) = v3;
  if (v3)
    sub_10003C37C(v3);
}

void sub_10055A60C(uint64_t a1)
{
  unsigned int *v1;

  *(_QWORD *)(a1 + 48) = &off_100918258;
  v1 = *(unsigned int **)(a1 + 56);
  if (v1)
    sub_100056AAC(v1);
}

uint64_t sub_10055A628(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E59A4((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055A69C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E5A38((uint64_t)off_100978168, *(_QWORD *)(v2 + 128));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055A700(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E5A74((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055A768(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E5AE8((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), a1 + 56);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055A7D4(uint64_t a1)
{
  void *v2;
  unsigned __int8 v4[16];

  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100937820);
  v2 = off_1009778A0;
  sub_100030BCC(v4, *(_QWORD *)(a1 + 32));
  return sub_1006244E4((uint64_t)v2, v4, *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(unsigned __int16 *)(a1 + 64));
}

uint64_t sub_10055A87C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[2];
  int v8;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  v3 = *(_QWORD *)(v2 + 128);
  v4 = *(void **)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 72);
  v7[0] = *(_OWORD *)(a1 + 56);
  v7[1] = v5;
  v8 = *(_DWORD *)(a1 + 88);
  result = sub_1002E52E8((uint64_t)off_100978168, v3, v4, (uint64_t)v7, *(void **)(v2 + 96));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055A908(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E539C((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(_QWORD *)(a1 + 56) != 0, *(void **)(a1 + 32), *(_DWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 64));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055A984(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _BOOL4 v4;
  void *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t result;
  __int128 v9[2];

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  v3 = *(_QWORD *)(v2 + 128);
  v4 = *(_QWORD *)(a1 + 56) != 0;
  v5 = *(void **)(a1 + 32);
  v6 = *(unsigned __int16 *)(a1 + 64);
  v7 = *(_OWORD *)(a1 + 88);
  v9[0] = *(_OWORD *)(a1 + 72);
  v9[1] = v7;
  result = sub_1002E5430((uint64_t)off_100978168, v3, v4, v5, v6, v9, *(unsigned __int8 *)(a1 + 104), *(void **)(v2 + 96));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10055AA1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char v11;
  _WORD v12[3];
  _WORD v13[3];
  _WORD v14[3];
  _BYTE v15[3];

  v2 = *(_QWORD *)(a1 + 40);
  v15[0] = *(_QWORD *)(a1 + 32);
  v15[1] = v2;
  v3 = *(_QWORD *)(a1 + 56);
  v15[2] = *(_QWORD *)(a1 + 48);
  v14[0] = v3;
  v4 = *(_QWORD *)(a1 + 72);
  v14[1] = *(_QWORD *)(a1 + 64);
  v14[2] = v4;
  v5 = *(_QWORD *)(a1 + 88);
  v13[0] = *(_QWORD *)(a1 + 80);
  v13[1] = v5;
  v6 = *(_QWORD *)(a1 + 104);
  v13[2] = *(_QWORD *)(a1 + 96);
  v12[0] = v6;
  v7 = *(_QWORD *)(a1 + 120);
  v12[1] = *(_QWORD *)(a1 + 112);
  v12[2] = v7;
  v8 = sub_1000438A4();
  v11 = *(_QWORD *)(a1 + 168);
  v10 = *(_QWORD *)(a1 + 160);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, _WORD *, _WORD *, _QWORD, char, _WORD *, char))(*(_QWORD *)v8 + 680))(v8, *(unsigned __int8 *)(a1 + 128), *(unsigned __int8 *)(a1 + 136), *(unsigned __int8 *)(a1 + 144), v15, v14, v13, *(unsigned __int8 *)(a1 + 152), v10, v12, v11);
}

uint64_t sub_10055AAC8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  unsigned __int16 v8;
  __int16 v10;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009378E0);
  v3 = off_100977FA8;
  v4 = *(_QWORD *)(v2 + 128);
  v5 = sub_10003EB18(a1 + 40);
  v6 = sub_10003F8C4(a1 + 40);
  v7 = sub_10003EB18(a1 + 56);
  v8 = sub_10003F8C4(a1 + 56);
  HIBYTE(v10) = *(_QWORD *)(a1 + 112);
  LOBYTE(v10) = *(_QWORD *)(a1 + 104);
  return sub_100678DB8((uint64_t)v3, v4, v5, v6, v7, v8, *(char *)(a1 + 72), *(unsigned __int8 *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), v10, *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
}

void sub_10055ABC0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = &off_100918258;
  a1[6] = v4;
  if (v4)
    sub_10003C37C(v4);
  v5 = *(_QWORD *)(a2 + 64);
  a1[7] = &off_100918258;
  a1[8] = v5;
  if (v5)
    sub_10003C37C(v5);
}

void sub_10055AC10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;

  *(_QWORD *)(v1 + 40) = v2;
  v4 = *(unsigned int **)(v1 + 48);
  if (v4)
    sub_100056AAC(v4);
  _Unwind_Resume(exception_object);
}

void sub_10055AC2C(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;

  a1[7] = &off_100918258;
  v2 = (unsigned int *)a1[8];
  if (v2)
    sub_100056AAC(v2);
  a1[5] = &off_100918258;
  v3 = (unsigned int *)a1[6];
  if (v3)
    sub_100056AAC(v3);
}

uint64_t sub_10055AC78(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  unsigned __int16 v8;
  __int16 v10;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009378E0);
  v3 = off_100977FA8;
  v4 = *(_QWORD *)(v2 + 128);
  v5 = sub_10003EB18(a1 + 40);
  v6 = sub_10003F8C4(a1 + 40);
  v7 = sub_10003EB18(a1 + 56);
  v8 = sub_10003F8C4(a1 + 56);
  HIBYTE(v10) = *(_QWORD *)(a1 + 112);
  LOBYTE(v10) = *(_QWORD *)(a1 + 104);
  return sub_100678ECC((uint64_t)v3, v4, v5, v6, v7, v8, *(char *)(a1 + 72), *(unsigned __int8 *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), v10, *(_QWORD *)(a1 + 120));
}

void sub_10055AD64(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E4E90((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(_QWORD *)(a1 + 48) != 0, *(_QWORD *)(a1 + 56) != 0, 0);
}

void sub_10055ADD4(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  xpc_object_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  void *v8;
  unsigned __int8 uu[8];
  uint64_t v10;

  v2 = a1[6];
  if (*(int *)(v2 + 80) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703F0C();
    goto LABEL_19;
  }
  v3 = (void **)(a1 + 4);
  if (!a1[4])
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703E20();
    goto LABEL_19;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  if (sub_100656AA4((uint64_t)off_1009778C0, *v3))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703E4C();
LABEL_19:
    v4 = 0;
    goto LABEL_20;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  sub_10006B174((uint64_t)off_1009778C0);
  *(_QWORD *)uu = 0;
  v10 = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  sub_10065A8B4((uint64_t)off_1009778C0, *v3, uu);
  if (uuid_is_null(uu))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703EAC();
    goto LABEL_19;
  }
  v7 = sub_100030DF4(uu);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v4 = sub_100013ABC(v8, *(unsigned __int8 *)(v2 + 168), *(_DWORD *)(v2 + 80));

LABEL_20:
  v6 = a1[5];
  v5 = a1 + 5;
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(v6 + 8) + 24), "kCBMsgArgDevices", v4);
  xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), *(xpc_object_t *)(*(_QWORD *)(*v5 + 8) + 24));
  xpc_release(*(xpc_object_t *)(*(_QWORD *)(*v5 + 8) + 24));
  if (v4)
    xpc_release(v4);
}

void sub_10055B018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10055B030(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unint64_t v4;
  void *v5;
  void *__p;
  void *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  v3 = off_100978168;
  v4 = *(_QWORD *)(v2 + 128);
  v5 = *(void **)(a1 + 32);
  v7 = 0;
  v8 = 0;
  __p = 0;
  sub_1000B61B8((char *)&__p, *(__int128 **)(a1 + 48), *(__int128 **)(a1 + 56), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2));
  sub_1002E6584((uint64_t)v3, v4, v5, (unsigned __int8 **)&__p, *(_QWORD *)(a1 + 72) != 0);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_10055B0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_10055B10C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v2 = a1 + 48;
  *(_QWORD *)(v2 + 16) = 0;
  return sub_1000B61B8((char *)v2, *(__int128 **)(a2 + 48), *(__int128 **)(a2 + 56), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2));
}

void sub_10055B134(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_10055B14C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E50CC((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_10055B1A4(id a1)
{
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E6700();
}

void sub_10055B1E4(id a1)
{
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E662C();
}

uint64_t sub_10055B224(uint64_t a1)
{
  uint64_t v1;
  __CFString *v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009378E0);
  if (*(_QWORD *)(v1 + 96))
    v2 = *(__CFString **)(v1 + 96);
  else
    v2 = CFSTR("-");
  return sub_10068115C((uint64_t)off_100977FA8, v2);
}

uint64_t sub_10055B284(uint64_t a1)
{
  uint64_t v1;
  __CFString *v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009378E0);
  if (*(_QWORD *)(v1 + 96))
    v2 = *(__CFString **)(v1 + 96);
  else
    v2 = CFSTR("-");
  return sub_100681414((uint64_t)off_100977FA8, v2);
}

void sub_10055B2E4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  _DWORD v5[2];

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = sub_1002E6304((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(unsigned int *)(a1 + 56));
  v3 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "AppManager::getInstance()->setConnectionLatency returned %d", (uint8_t *)v5, 8u);
  }
}

uint64_t sub_10055B3E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  int v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  HIWORD(v5) = *(_QWORD *)(a1 + 176);
  LOWORD(v5) = *(_QWORD *)(a1 + 168);
  HIWORD(v4) = *(_QWORD *)(a1 + 160);
  LOWORD(v4) = *(_QWORD *)(a1 + 152);
  result = sub_1002E5C7C((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 72), *(char *)(a1 + 80), *(_BYTE *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), v4, v5);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10055B4A8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E5E44((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 48));
}

void sub_10055B504(id a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  __int16 v5;
  int __buf;
  __int16 v7;
  unsigned __int8 uu[8];
  uint64_t v9;

  v7 = 0;
  __buf = 0;
  arc4random_buf(&__buf, 6uLL);
  v5 = 0;
  v4 = 0;
  arc4random_buf(&v4, 6uLL);
  v1 = v4 | 0x3FLL;
  LOBYTE(v4) = v4 | 0x3F;
  v2 = HIBYTE(v5) | 0x3FLL;
  HIBYTE(v5) |= 0x3Fu;
  v3 = (v1 << 40) | ((unint64_t)BYTE1(v4) << 32) | ((unint64_t)BYTE2(v4) << 24) | ((unint64_t)HIBYTE(v4) << 16) | ((unint64_t)v5 << 8) | v2 | 0x1000000000000;
  *(_QWORD *)uu = 0;
  v9 = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  sub_10003F924((uint64_t)off_1009778C0, v3, 1u, 1u, 0, 0, uu);
  if (!uuid_is_null(uu))
    operator new();
}

void sub_10055BB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  void *v28;
  uint64_t v29;
  unsigned int *v31;

  if (a14 < 0)
    operator delete(__p);

  sub_1006CC5C8((uint64_t)&a28);
  v31 = *(unsigned int **)(v29 - 176);
  *(_QWORD *)(v29 - 184) = &off_100934340;
  if (v31)
    sub_100056AAC(v31);
  _Unwind_Resume(a1);
}

void sub_10055BC9C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t reply;
  void *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = sub_1000239F0(*(void **)(a1 + 48), "kCBMsgArgName");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  if ((sub_10000AEE4((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(void **)(v2 + 96), *(void **)(v2 + 48)) & 1) != 0)
  {
    if (*(_BYTE *)(v2 + 183))
    {
      v5 = 0;
      if (*(_QWORD *)(a1 + 32) && v4)
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_1009377A0);
        v6 = sub_1006591DC((uint64_t)off_1009778C0, *(void **)(a1 + 32), v4);
        v5 = (void *)objc_claimAutoreleasedReturnValue(v6);
      }
    }
    else
    {
      v5 = 0;
    }
    reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 56));
    if (reply)
    {
      v12 = (void *)_CFXPCCreateXPCObjectFromCFObject(v5);
      xpc_dictionary_set_string(reply, "kCBMsgArgCustomPropertyName", (const char *)objc_msgSend(objc_retainAutorelease(v4), "UTF8String"));
      xpc_dictionary_set_value(reply, "kCBMsgArgCustomPropertyValue", v12);
      xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), reply);
      if (v12)
        xpc_release(v12);
      xpc_release(reply);
    }

  }
  else
  {
    v7 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(v2 + 96);
      v9 = *(_QWORD *)(v2 + 48);
      v10 = *(_QWORD *)(a1 + 32);
      v13 = 138412802;
      v14 = v8;
      v15 = 2112;
      v16 = v9;
      v17 = 2112;
      v18 = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", (uint8_t *)&v13, 0x20u);
    }
  }

}

void sub_10055BEA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10055BECC(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t reply;
  xpc_object_t v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t v20[128];
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  if ((sub_10000AEE4((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(void **)(v2 + 96), *(void **)(v2 + 48)) & 1) != 0)
  {
    if (*(_BYTE *)(v2 + 183) && *(_QWORD *)(a1 + 32))
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      v3 = sub_100659144((uint64_t)off_1009778C0, *(void **)(a1 + 32));
      v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    }
    else
    {
      v4 = &__NSArray0__struct;
    }
    reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
    if (reply)
    {
      v10 = xpc_array_create(0, 0);
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v11 = v4;
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v12)
      {
        v13 = *(_QWORD *)v17;
        do
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(_QWORD *)v17 != v13)
              objc_enumerationMutation(v11);
            v15 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i));
            xpc_array_set_string(v10, 0xFFFFFFFFFFFFFFFFLL, (const char *)objc_msgSend(v15, "UTF8String", (_QWORD)v16));
          }
          v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        }
        while (v12);
      }

      xpc_dictionary_set_value(reply, "kCBMsgArgCustomPropertyNames", v10);
      xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), reply);
      if (v10)
        xpc_release(v10);
      xpc_release(reply);
    }

  }
  else
  {
    v5 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_QWORD *)(v2 + 96);
      v7 = *(_QWORD *)(v2 + 48);
      v8 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      v22 = v6;
      v23 = 2112;
      v24 = v7;
      v25 = 2112;
      v26 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
    }
  }
}

void sub_10055C144(_Unwind_Exception *a1)
{

  _Unwind_Resume(a1);
}

uint64_t sub_10055C188(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E63C8((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10055C1F0(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  xpc_object_t v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  id v21;
  xpc_object_t reply;
  void *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *__p[2];
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  void *v36;
  _BYTE v37[128];
  _BYTE v38[128];

  v24 = *(_QWORD *)(a1 + 48);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v31, v38, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v32;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v32 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)v5);
        v7 = *(void **)(a1 + 40);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_1009377A0);
        v8 = off_1009778C0;
        sub_100091AE8(__p, (char *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String"));
        v9 = sub_100658B80((uint64_t)v8, (uint64_t)__p);
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        objc_msgSend(v7, "addObjectsFromArray:", v10);

        if (v30 < 0)
          operator delete(__p[0]);
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v31, v38, 16);
    }
    while (v3);
  }

  if (*(_QWORD *)(a1 + 40))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    sub_10006B174((uint64_t)off_1009778C0);
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v11 = *(id *)(a1 + 40);
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v37, 16);
    if (v12)
    {
      v13 = *(_QWORD *)v26;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v26 != v13)
            objc_enumerationMutation(v11);
          v15 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v14);
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_1009377A0);
          if (!sub_100656AA4((uint64_t)off_1009778C0, v15))
          {
            v17 = qword_100999860;
            if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
              goto LABEL_30;
            *(_DWORD *)buf = 138412290;
            v36 = v15;
            v18 = v17;
            v19 = "Device %@ does not exist";
            goto LABEL_33;
          }
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_100937800);
          if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(v24 + 128), v15) & 1) != 0)
          {
            v16 = sub_100013ABC(v15, *(unsigned __int8 *)(v24 + 168), *(_DWORD *)(v24 + 80));
            xpc_array_append_value(*(xpc_object_t *)(a1 + 56), v16);
            xpc_release(v16);
            goto LABEL_30;
          }
          v20 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v36 = v15;
            v18 = v20;
            v19 = "Cannot access device %@";
LABEL_33:
            _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, v19, buf, 0xCu);
          }
LABEL_30:
          v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        v21 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v37, 16);
        v12 = v21;
      }
      while (v21);
    }

  }
  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 64));
  v23 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", *(xpc_object_t *)(a1 + 56));
    xpc_connection_send_message(*(xpc_connection_t *)(v24 + 16), v23);
    xpc_release(v23);
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
}

void sub_10055C5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  _Unwind_Resume(a1);
}

void sub_10055C61C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  xpc_object_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  id v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  void *v23;
  _BYTE v24[128];

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(void **)(a1 + 32);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  v4 = sub_100658F98((uint64_t)off_1009778C0, *(void **)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "addObjectsFromArray:", v5);

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    sub_10006B174((uint64_t)off_1009778C0);
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v6 = *(id *)(a1 + 32);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v19;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v19 != v8)
            objc_enumerationMutation(v6);
          v10 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v9);
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_1009377A0);
          if (!sub_100656AA4((uint64_t)off_1009778C0, v10))
          {
            v12 = qword_100999860;
            if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
              goto LABEL_21;
            *(_DWORD *)buf = 138412290;
            v23 = v10;
            v13 = v12;
            v14 = "Device %@ does not exist";
            goto LABEL_24;
          }
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_100937800);
          if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), v10) & 1) != 0)
          {
            v11 = sub_100013ABC(v10, *(unsigned __int8 *)(v2 + 168), *(_DWORD *)(v2 + 80));
            xpc_array_append_value(*(xpc_object_t *)(a1 + 64), v11);
            xpc_release(v11);
            goto LABEL_21;
          }
          v15 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v23 = v10;
            v13 = v15;
            v14 = "Cannot access device %@";
LABEL_24:
            _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
          }
LABEL_21:
          v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        v16 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
        v7 = v16;
      }
      while (v16);
    }

  }
  v17 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (v17)
  {
    xpc_dictionary_set_value(v17, "kCBMsgArgDevices", *(xpc_object_t *)(a1 + 64));
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), *(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
    xpc_release(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  }
  xpc_release(*(xpc_object_t *)(a1 + 64));
}

void sub_10055C93C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10055C96C(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  xpc_object_t reply;
  void *v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  const void *v12;
  size_t v13;
  const void *v14;
  size_t v15;
  const void *v16;
  size_t v17;
  const void *v18;
  size_t v19;
  const void *v20;
  size_t v21;
  uint64_t (**v22)();
  unsigned int *v23;
  uint64_t (**v24)();
  unsigned int *v25;
  uint64_t (**v26)();
  unsigned int *v27;
  uint64_t (**v28)();
  unsigned int *v29;
  uint64_t (**v30)();
  unsigned int *v31;
  uint64_t (**v32)();
  unsigned int *v33;
  uint64_t (**v34)();
  unsigned int *v35;
  int v36;
  __int16 v37;
  uint64_t (**v38)();
  unsigned int *v39;
  int bytes;
  __int16 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;

  v2 = *(_QWORD *)(a1 + 40);
  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v42 = 0u;
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100937780);
  sub_10069CDD4(qword_1009778B0, *(void **)(a1 + 32), (uint64_t)&v42);
  v41 = 0;
  bytes = 0;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100937880);
  sub_1004A3424((uint64_t)off_100977A50, (uint64_t)&bytes);
  v38 = 0;
  v39 = 0;
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100937780);
  sub_10003994C(&v38, (const void *)(qword_1009778B0 + 184), 0x10uLL);
  v3 = BYTE8(v46);
  v36 = *(_DWORD *)((char *)&v46 + 9);
  v37 = *(_WORD *)((char *)&v46 + 13);
  v34 = 0;
  v35 = 0;
  sub_10003994C(&v34, &v42, 0x10uLL);
  v32 = 0;
  v33 = 0;
  sub_10003994C(&v32, (char *)&v43 + 12, 0x10uLL);
  v30 = 0;
  v31 = 0;
  sub_10003994C(&v30, (char *)&v43 + 4, 8uLL);
  v28 = 0;
  v29 = 0;
  sub_10003994C(&v28, &v45, 8uLL);
  v26 = 0;
  v27 = 0;
  sub_10003994C(&v26, (char *)&v45 + 8, 0x10uLL);
  v24 = 0;
  v25 = 0;
  sub_10003994C(&v24, (char *)&v44 + 14, 2uLL);
  v22 = 0;
  v23 = 0;
  sub_10003994C(&v22, (char *)&v43 + 2, 2uLL);
  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
  v5 = reply;
  if (reply)
  {
    xpc_dictionary_set_data(reply, "kCBMsgArgAddressString", &bytes, 6uLL);
    v6 = (const void *)sub_10003EB18((uint64_t)&v38);
    v7 = sub_10003F8C4((uint64_t)&v38);
    xpc_dictionary_set_data(v5, "kCBMsgArgLocalIRK", v6, v7);
    v8 = (const void *)sub_10003EB18((uint64_t)&v34);
    v9 = sub_10003F8C4((uint64_t)&v34);
    xpc_dictionary_set_data(v5, "kCBMsgArgRemoteLTK", v8, v9);
    v10 = (const void *)sub_10003EB18((uint64_t)&v22);
    v11 = sub_10003F8C4((uint64_t)&v22);
    xpc_dictionary_set_data(v5, "kCBMsgArgRemoteEdiv", v10, v11);
    v12 = (const void *)sub_10003EB18((uint64_t)&v30);
    v13 = sub_10003F8C4((uint64_t)&v30);
    xpc_dictionary_set_data(v5, "kCBMsgArgRemoteRand", v12, v13);
    v14 = (const void *)sub_10003EB18((uint64_t)&v32);
    v15 = sub_10003F8C4((uint64_t)&v32);
    xpc_dictionary_set_data(v5, "kCBMsgArgLocalLTK", v14, v15);
    v16 = (const void *)sub_10003EB18((uint64_t)&v24);
    v17 = sub_10003F8C4((uint64_t)&v24);
    xpc_dictionary_set_data(v5, "kCBMsgArgLocalEdiv", v16, v17);
    v18 = (const void *)sub_10003EB18((uint64_t)&v28);
    v19 = sub_10003F8C4((uint64_t)&v28);
    xpc_dictionary_set_data(v5, "kCBMsgArgLocalRand", v18, v19);
    v20 = (const void *)sub_10003EB18((uint64_t)&v26);
    v21 = sub_10003F8C4((uint64_t)&v26);
    xpc_dictionary_set_data(v5, "kCBMsgArgRemoteIRK", v20, v21);
    xpc_dictionary_set_data(v5, "kCBMsgArgRemoteAddress", &v36, 6uLL);
    xpc_dictionary_set_int64(v5, "kCBMsgArgRemoteAddressType", v3);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v5);
    xpc_release(v5);
  }
  v22 = &off_100918258;
  if (v23)
    sub_100056AAC(v23);
  v24 = &off_100918258;
  if (v25)
    sub_100056AAC(v25);
  v26 = &off_100918258;
  if (v27)
    sub_100056AAC(v27);
  v28 = &off_100918258;
  if (v29)
    sub_100056AAC(v29);
  v30 = &off_100918258;
  if (v31)
    sub_100056AAC(v31);
  v32 = &off_100918258;
  if (v33)
    sub_100056AAC(v33);
  v34 = &off_100918258;
  if (v35)
    sub_100056AAC(v35);
  v38 = &off_100918258;
  if (v39)
    sub_100056AAC(v39);
}

void sub_10055CDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12, uint64_t a13, unsigned int *a14, uint64_t a15, unsigned int *a16, uint64_t a17, unsigned int *a18, uint64_t a19, unsigned int *a20,uint64_t a21,unsigned int *a22,uint64_t a23,uint64_t a24,unsigned int *a25)
{
  if (a12)
    sub_100056AAC(a12);
  if (a14)
    sub_100056AAC(a14);
  if (a16)
    sub_100056AAC(a16);
  if (a18)
    sub_100056AAC(a18);
  if (a20)
    sub_100056AAC(a20);
  if (a22)
    sub_100056AAC(a22);
  if (a25)
    sub_100056AAC(a25);
  _Unwind_Resume(exception_object);
}

void sub_10055CEAC(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  xpc_object_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint32_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  _BYTE v26[128];

  v1 = *(_QWORD *)(a1 + 32);
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_1009377E0);
  v2 = sub_1005E12B4(qword_1009778F0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v19;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v19 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v6);
        if (qword_10097AC28 != -1)
          dispatch_once(&qword_10097AC28, &stru_100937960);
        if (!sub_10000671C(qword_10097AC20, v7))
        {
          v9 = qword_100999860;
          if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            goto LABEL_30;
          *(_DWORD *)buf = 138412290;
          v23 = v7;
          v10 = v9;
          v11 = "Device %@ is not connected";
          goto LABEL_25;
        }
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_1009377A0);
        if ((sub_10000AEE4((uint64_t)off_1009778C0, v7, *(void **)(v1 + 96), *(void **)(v1 + 48)) & 1) == 0)
        {
          v13 = qword_100999860;
          if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            goto LABEL_30;
          v14 = *(void **)(v1 + 96);
          *(_DWORD *)buf = 138412546;
          v23 = v14;
          v24 = 2112;
          v25 = v7;
          v10 = v13;
          v11 = "Bundle %@ is not allowed to access device %@";
          v12 = 22;
          goto LABEL_28;
        }
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_100937800);
        if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(v1 + 128), v7) & 1) != 0)
        {
          if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 56))
            goto LABEL_22;
          if (qword_1009778F8 != -1)
            dispatch_once(&qword_1009778F8, &stru_1009377E0);
          if (sub_1005E0AD8(qword_1009778F0, v7, (__int128 **)(a1 + 48), *(unsigned __int8 *)(v1 + 183), *(unsigned int *)(v1 + 196), 0))
          {
LABEL_22:
            v8 = sub_100013ABC(v7, *(unsigned __int8 *)(v1 + 168), *(_DWORD *)(v1 + 80));
            xpc_array_append_value(*(xpc_object_t *)(a1 + 72), v8);
            xpc_release(v8);
          }
        }
        else
        {
          v15 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v23 = v7;
            v10 = v15;
            v11 = "Session cannot access device %@";
LABEL_25:
            v12 = 12;
LABEL_28:
            _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v11, buf, v12);
          }
        }
LABEL_30:
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v16 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
      v4 = v16;
    }
    while (v16);
  }

}

void sub_10055D23C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10055D260(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  xpc_object_t reply;
  void *v6;
  _BOOL4 v7;
  int64_t value;
  _OWORD v9[13];

  v2 = *(_QWORD *)(a1 + 32);
  memset(v9, 0, 206);
  value = 0;
  v3 = sub_1000438A4();
  v4 = (*(uint64_t (**)(uint64_t, _OWORD *, int64_t *))(*(_QWORD *)v3 + 3560))(v3, v9, &value);
  reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 40));
  if (reply)
  {
    v6 = reply;
    xpc_dictionary_set_int64(reply, "kCBUsageStatsLePercent", WORD4(v9[0]) + (unint64_t)WORD2(v9[0]));
    xpc_dictionary_set_int64(v6, "kCBUsageStatsClPercent", WORD5(v9[0]) + (unint64_t)WORD3(v9[0]));
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_100937980);
    v7 = sub_1004BAA7C(off_100977B38);
    xpc_dictionary_set_int64(v6, "kCBUsageStatsIsAudioStreaming", v7);
    xpc_dictionary_set_int64(v6, "kCBUsageStatsTimeStampNsMonotonic", value);
    xpc_dictionary_set_int64(v6, "kCBMsgArgResult", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v6);
    xpc_release(v6);
  }
}

uint64_t sub_10055D3C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002F36B0((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 64) != 0);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10055D440(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  xpc_object_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v2 = *(_QWORD *)(a1 + 32);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100937820);
  v3 = sub_1006245BC((uint64_t)off_1009778A0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_1009377A0);
        if ((sub_10000AEE4((uint64_t)off_1009778C0, v8, *(void **)(v2 + 96), *(void **)(v2 + 48)) & 1) != 0)
        {
          v9 = sub_100013ABC(v8, *(unsigned __int8 *)(v2 + 168), *(_DWORD *)(v2 + 80));
          xpc_array_append_value(*(xpc_object_t *)(a1 + 40), v9);
          xpc_release(v9);
        }
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

}

void sub_10055D5E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10055D604(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(int *)(v2 + 80) < 1 || *(uint64_t *)(a1 + 48) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703F38();
    v3 = 0;
  }
  else
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v3 = sub_100662AE4((uint64_t)off_1009778C0, *(unsigned __int16 *)(a1 + 48));
  }
  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v4)
  {
    if (*(uint64_t *)(a1 + 48) >= 1)
    {
      xpc_dictionary_set_int64(v4, "kCBMsgArgResultDeviceCount", v3);
      v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), v4);
    xpc_release(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  }
}

void sub_10055D710(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v6;
  xpc_object_t v7;
  NSObject *v8;
  _QWORD *v9;
  id v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  int64_t v15;
  void *v16;
  char v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22[16];
  _BYTE buf[22];
  __int16 v24;
  id v25;

  v6 = a3;
  if (v6)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_100937800);
      if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v6) & 1) != 0)
      {
        v7 = xpc_dictionary_create(0, 0, 0);
        v8 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          v9 = (_QWORD *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0)
            v9 = (_QWORD *)*v9;
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v6;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending 'connection completed' event for device \"%@\" to session \"%{public}s\"", buf, 0x16u);
        }
        v10 = v6;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        objc_msgSend(v10, "getUUIDBytes:", buf);
        xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", buf);

        xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a4);
        if (!a4)
        {
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_100937820);
          v11 = off_1009778A0;
          sub_100030BCC(buf, v10);
          v12 = sub_100069F78((uint64_t)v11, buf);
          xpc_dictionary_set_int64(v7, "kCBMsgArgConnectionRole", v12);
          if (qword_10097AC18 != -1)
            dispatch_once(&qword_10097AC18, &stru_100937920);
          v13 = sub_100006180(qword_10097AC10, v10);
          xpc_dictionary_set_int64(v7, "kCBMsgArgATTMTU", v13);
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_100937820);
          v14 = off_1009778A0;
          sub_100030BCC(buf, v10);
          if (sub_100069F08((uint64_t)v14, buf))
            v15 = 2;
          else
            v15 = 1;
          xpc_dictionary_set_int64(v7, "kCBMsgArgConnectionTransport", v15);
          if (*(_BYTE *)(a1 + 168))
          {
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_100937820);
            v16 = off_1009778A0;
            sub_100030BCC(buf, v10);
            v17 = sub_100069D64((uint64_t)v16, buf);
            xpc_dictionary_set_BOOL(v7, "kCBMsgArgIsLinkEncrypted", v17);
          }
          *(_DWORD *)buf = 0;
          if (qword_10097AC28 != -1)
            dispatch_once(&qword_10097AC28, &stru_100937960);
          v18 = qword_10097AC20;
          sub_100030BCC(v22, v10);
          if (!sub_100484478(v18, v22, buf))
            xpc_dictionary_set_int64(v7, "kCBMsgArgsTransport", *(unsigned int *)buf);
        }
        sub_10005E138(a1, 85, v7, 1);
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_10070351C();
      }
    }
    else
    {
      v19 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v20 = *(_QWORD *)(a1 + 96);
        v21 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v20;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v21;
        v24 = 2112;
        v25 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100703F9C();
  }

}

void sub_10055DB74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10055DBAC(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  sub_10055D710(a1 - 144, a2, a3, a4);
}

void sub_10055DBB4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unsigned __int8 uu2[16];

  v4 = a3;
  sub_100030BCC(uu2, v4);
  v5 = (uint64_t **)(a1 + 200);
  v6 = sub_10000C5B8(a1 + 200, uu2);
  v7 = v6;
  if (a1 + 208 != v6)
  {
    v8 = *(_QWORD **)(v6 + 48);
    v9 = (_QWORD *)(v6 + 56);
    if (v8 != (_QWORD *)(v6 + 56))
    {
      do
      {
        v10 = v8[4];
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v11 = (_QWORD *)v8[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v8[2];
            v13 = *v12 == (_QWORD)v8;
            v8 = v12;
          }
          while (!v13);
        }
        v8 = v12;
      }
      while (v12 != v9);
    }
    sub_100565D70(v5, v7);
  }

}

void sub_10055DCB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10055DCD0(uint64_t a1, uint64_t a2, void *a3)
{
  sub_10055DBB4(a1 - 144, a2, a3);
}

void sub_10055DCD8(uint64_t a1, uint64_t a2, void *a3, BOOL a4)
{
  id v6;
  char v7;
  NSObject *v8;
  _QWORD *v9;
  xpc_object_t v10;
  void *v11;
  _QWORD *v12;
  int v13;
  id v14;
  __int16 v15;
  _QWORD *v16;
  __int16 v17;
  id v18;

  v6 = a3;
  if (*(_BYTE *)(a1 + 168))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v7 = sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48));
    v8 = qword_100999860;
    if ((v7 & 1) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (_QWORD *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0)
          v9 = (_QWORD *)*v9;
        v13 = 138412546;
        v14 = v6;
        v15 = 2082;
        v16 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending 'connection state updated' event for device \"%@\" to session \"%{public}s\"", (uint8_t *)&v13, 0x16u);
      }
      v10 = sub_100013ABC(v6, *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));
      xpc_dictionary_set_BOOL(v10, "kCBMsgArgConnectionState", a4);
      sub_10005E138(a1, 88, v10, 1);
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      v11 = *(void **)(a1 + 96);
      v12 = *(_QWORD **)(a1 + 48);
      v13 = 138412802;
      v14 = v11;
      v15 = 2112;
      v16 = v12;
      v17 = 2112;
      v18 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", (uint8_t *)&v13, 0x20u);
    }
  }

}

void sub_10055DE98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10055DEB4(uint64_t a1, uint64_t a2, void *a3, BOOL a4)
{
  sub_10055DCD8(a1 - 144, a2, a3, a4);
}

void sub_10055DEBC(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  xpc_object_t v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  xpc_object_t v17;
  void *v18;
  id v19;
  void *v20;
  const char *p_string;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  void *v29;
  unsigned int v30;
  xpc_object_t v31;
  uint64_t j;
  id v33;
  void *v34;
  const void *v35;
  int64_t v36;
  char *v37;
  xpc_object_t v38;
  xpc_object_t xdict;
  xpc_object_t xarray;
  void *__p;
  void *__dst;
  uint64_t v43;
  char *string;
  uint64_t v45;
  uint64_t v46;
  uint8_t buf[24];
  void *v48;

  xdict = xpc_dictionary_create(0, 0, 0);
  xarray = xpc_array_create(0, 0);
  if (a3)
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    if (*(_QWORD *)(a3 + 16) != *(_QWORD *)(a3 + 8))
    {
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)buf = &buf[8];
      v7 = sub_1004B16F4((unsigned __int8 **)(a3 + 8), (uint64_t)buf);
      sub_10001A82C((uint64_t)buf, *(_QWORD **)&buf[8]);
      xpc_dictionary_set_value(v6, "kCBMsgArgUUIDs", v7);
      xpc_release(v7);
    }
    if (*(_BYTE *)a3)
      xpc_dictionary_set_BOOL(v6, "kCBScanOptionAllowDuplicates", 1);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = *(_QWORD *)(a3 + 40);
    v10 = (unsigned __int8 **)(a3 + 32);
    if (v9 != v8)
    {
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)buf = &buf[8];
      v11 = sub_1004B16F4(v10, (uint64_t)buf);
      sub_10001A82C((uint64_t)buf, *(_QWORD **)&buf[8]);
      xpc_dictionary_set_value(xdict, "kCBScanOptionSolicitedServiceUUIDs", v11);
      xpc_release(v11);
    }
    xpc_dictionary_set_value(xdict, "kCBMsgArgOptions", v6);
    xpc_release(v6);
  }
  for (i = *a2; i != a2[1]; ++i)
  {
    v13 = *i;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v14 = (uint64_t)off_1009778C0;
    v15 = sub_100030DF4((const unsigned __int8 *)v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    LOBYTE(v14) = sub_10000AEE4(v14, v16, *(void **)(a1 + 96), *(void **)(a1 + 48));

    if ((v14 & 1) == 0)
    {
      v22 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v23 = *(_QWORD *)(a1 + 96);
        v24 = *(_QWORD *)(a1 + 48);
        v25 = sub_100030DF4((const unsigned __int8 *)v13);
        v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v23;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v24;
        *(_WORD *)&buf[22] = 2112;
        v48 = v26;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);

      }
      continue;
    }
    memset(buf, 0, sizeof(buf));
    sub_10001FE6C(buf, v13 + 24);
    v17 = xpc_dictionary_create(0, 0, 0);
    string = 0;
    v45 = 0;
    v46 = 0;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v18 = off_1009778C0;
    v19 = sub_100030DF4((const unsigned __int8 *)v13);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    sub_10000602C((uint64_t)v18, v20, (uint64_t)&string);

    if (SHIBYTE(v46) < 0)
    {
      if (v45)
      {
        p_string = string;
        goto LABEL_22;
      }
    }
    else if (HIBYTE(v46))
    {
      p_string = (const char *)&string;
LABEL_22:
      xpc_dictionary_set_string(v17, "kCBMsgArgName", p_string);
    }
    xpc_dictionary_set_uuid(v17, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)v13);
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_100937920);
    v27 = qword_10097AC10;
    v28 = sub_100030DF4((const unsigned __int8 *)v13);
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    v30 = sub_100006180(v27, v29);
    xpc_dictionary_set_int64(v17, "kCBMsgArgATTMTU", v30);

    xpc_dictionary_set_BOOL(v17, "kCBMsgArgState", *(_BYTE *)(v13 + 16));
    v31 = xpc_array_create(0, 0);
    for (j = *(_QWORD *)(v13 + 48); j != *(_QWORD *)(v13 + 56); j += 18)
      xpc_array_set_int64(v31, 0xFFFFFFFFFFFFFFFFLL, *(unsigned __int16 *)(j + 16));
    xpc_dictionary_set_value(v17, "kCBMsgArgSubscribedHandles", v31);
    xpc_release(v31);
    v33 = sub_100030DF4((const unsigned __int8 *)v13);
    v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    sub_1005516A0(a1, (uint64_t **)buf, v34);

    __p = 0;
    __dst = 0;
    v43 = 0;
    v35 = *(const void **)buf;
    v36 = *(_QWORD *)&buf[8] - *(_QWORD *)buf;
    if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
    {
      sub_1002A3F78(&__p, v36 >> 3);
      v37 = (char *)__dst;
      memmove(__dst, v35, v36);
      __dst = &v37[8 * (v36 >> 3)];
    }
    v38 = sub_100399BF8((uint64_t **)&__p);
    if (__p)
    {
      __dst = __p;
      operator delete(__p);
    }
    xpc_dictionary_set_value(v17, "kCBMsgArgServices", v38);
    xpc_release(v38);
    xpc_array_append_value(xarray, v17);
    xpc_release(v17);
    if (SHIBYTE(v46) < 0)
      operator delete(string);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
  }
  xpc_dictionary_set_value(xdict, "kCBMsgArgDevices", xarray);
  sub_10005E138(a1, 92, xdict, 1);
  xpc_release(xarray);
}

void sub_10055E3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,_QWORD *a23)
{
  sub_10001A82C((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void sub_10055E494(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  sub_10055DEBC(a1 - 144, a2, a3);
}

void sub_10055E49C(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6)
{
  id v10;
  xpc_object_t v11;
  id v12;
  void *v13;
  unsigned __int8 uuid[8];
  uint64_t v15;

  v10 = a3;
  if (*(_BYTE *)(a1 + 168))
  {
    v11 = xpc_dictionary_create(0, 0, 0);
    v12 = v10;
    v13 = v12;
    if (v12)
    {
      *(_QWORD *)uuid = 0;
      v15 = 0;
      objc_msgSend(v12, "getUUIDBytes:", uuid);
      xpc_dictionary_set_uuid(v11, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_double(v11, "kCBMsgArgConnectionInterval", (double)a4 * 1.25);
    xpc_dictionary_set_int64(v11, "kCBMsgArgConnectionLatency", a5);
    xpc_dictionary_set_double(v11, "kCBMsgArgSupervisionTimeout", (double)(10 * a6));
    sub_10005E138(a1, 167, v11, 1);
  }

}

void sub_10055E5CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10055E5F0(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6)
{
  sub_10055E49C(a1 - 144, a2, a3, a4, a5, a6);
}

void sub_10055E5F8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  id v14;
  xpc_object_t v15;
  id v16;
  void *v17;
  unsigned __int8 uuid[8];
  uint64_t v19;

  v14 = a3;
  v15 = xpc_dictionary_create(0, 0, 0);
  v16 = v14;
  v17 = v16;
  if (v16)
  {
    *(_QWORD *)uuid = 0;
    v19 = 0;
    objc_msgSend(v16, "getUUIDBytes:", uuid);
    xpc_dictionary_set_uuid(v15, "kCBMsgArgDeviceUUID", uuid);
  }

  xpc_dictionary_set_uint64(v15, "kCBMsgArgTimeOfDay", a4);
  xpc_dictionary_set_uint64(v15, "kCBMsgArgLocalRefTime", a5);
  xpc_dictionary_set_uint64(v15, "kCBMsgArgRemoteRefTime", a6);
  xpc_dictionary_set_uint64(v15, "kCBMsgArgTimeToSend", a7);
  xpc_dictionary_set_int64(v15, "kCBMsgArgGMTDelta", a8);
  sub_10005E138(a1, 182, v15, 1);

}

void sub_10055E748(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10055E76C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  sub_10055E5F8(a1 - 144, a2, a3, a4, a5, a6, a7, a8);
}

void sub_10055E774(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint8_t buf[4];
  id v15;
  __int16 v16;
  _QWORD *v17;

  v6 = a3;
  if (*(_BYTE *)(a1 + 168))
  {
    v7 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v8 = (_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        v8 = (_QWORD *)*v8;
      *(_DWORD *)buf = 138412546;
      v15 = v6;
      v16 = 2082;
      v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending 'host state updated' event for device \"%@\" to session \"%{public}s\"", buf, 0x16u);
    }
    if (a4)
      v9 = 2;
    else
      v9 = 1;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v9, CFSTR("kCBMsgArgDeviceUUID"), CFSTR("kCBMsgArgState"), v6));
    v13[1] = v10;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, &v12, 2));
    sub_10005DF3C(a1, 165, v11);

  }
}

void sub_10055E8C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10055E8F4(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  sub_10055E774(a1 - 144, a2, a3, a4);
}

void sub_10055E8FC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  xpc_object_t v6;
  void *v7;
  const char *v8;

  if (*(_BYTE *)(a1 + 169))
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    v7 = v6;
    if (*(char *)(a2 + 23) >= 0)
      v8 = (const char *)a2;
    else
      v8 = *(const char **)a2;
    xpc_dictionary_set_string(v6, "kCBMsgArgName", v8);
    xpc_dictionary_set_int64(v7, "kCBMsgArgState", a3);
    sub_10005E138(a1, 91, v7, 1);
  }
}

void sub_10055E994(uint64_t a1, uint64_t a2, unsigned int a3)
{
  sub_10055E8FC(a1 - 144, a2, a3);
}

uint64_t sub_10055E99C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  result = sub_1002E5154((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(_BYTE *)(v2 + 181));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10055EA08()
{
  operator new();
}

void sub_10055EC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10055ECC4()
{
  operator new();
}

void sub_10055EE68()
{
  operator delete();
}

char *sub_10055EE94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v2 = a1 + 56;
  *(_QWORD *)(v2 + 16) = 0;
  return sub_1000B61B8((char *)v2, *(__int128 **)(a2 + 56), *(__int128 **)(a2 + 64), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2));
}

void sub_10055EEBC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void sub_10055EED4()
{
  operator new();
}

void sub_10055F088()
{
  operator delete();
}

void sub_10055F0B4()
{
  operator new();
}

void sub_10055F27C()
{
  operator delete();
}

void sub_10055F2A8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 uu1[16];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = sub_100551A54(v2, *(void **)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    operator new();
  v8 = 0;
  if (!v3)
  {
    if (qword_1009778F8 != -1)
      dispatch_once(&qword_1009778F8, &stru_1009377E0);
    v5 = qword_1009778F0;
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    if (off_100978168)
      v6 = (char *)off_100978168 + 48;
    else
      v6 = 0;
    v7 = *(_QWORD *)(v2 + 128);
    sub_100030BCC(uu1, *(_QWORD *)(a1 + 32));
    sub_1005E26A0(v5, (uint64_t)v6, v7, uu1, v4 == 0, *(unsigned __int16 *)(a1 + 48), *(unsigned __int16 *)(a1 + 64));
  }
}

void sub_10055F4A4()
{
  operator delete();
}

void sub_10055F4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = &off_100918258;
  *(_QWORD *)(a1 + 80) = v3;
  if (v3)
    sub_10003C37C(v3);
}

void sub_10055F4F0(uint64_t a1)
{
  unsigned int *v1;

  *(_QWORD *)(a1 + 72) = &off_100918258;
  v1 = *(unsigned int **)(a1 + 80);
  if (v1)
    sub_100056AAC(v1);
}

void sub_10055F50C()
{
  operator new();
}

void sub_10055F6F4()
{
  operator delete();
}

void sub_10055F720()
{
  operator new();
}

void sub_10055F8E4()
{
  operator delete();
}

void sub_10055F910()
{
  operator new();
}

void sub_10055FAD4()
{
  operator delete();
}

void sub_10055FB00()
{
  operator new();
}

void sub_10055FCC4()
{
  operator delete();
}

void sub_10055FCF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *__p[2];
  unsigned __int8 v7[16];

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_1009377E0);
  v3 = qword_1009778F0;
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  if (off_100978168)
    v4 = (char *)off_100978168 + 48;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v2 + 128);
  sub_100030BCC(v7, *(_QWORD *)(a1 + 32));
  sub_100091AE8(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"));
  sub_1005E2EB4(v3, (uint64_t)v4, v5, v7, (uint64_t *)__p);
}

void sub_10055FE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10055FE78(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(int *)(v2 + 80) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100704060();
    v3 = 12;
  }
  else if (*(_QWORD *)(a1 + 32))
  {
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    v3 = (int)sub_1002F373C((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 64), *(void **)(a1 + 40));
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100704034();
    v3 = 8;
  }
  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (v4)
  {
    xpc_dictionary_set_int64(v4, "kCBMsgArgResult", v3);
    xpc_connection_send_message(*(xpc_connection_t *)(v2 + 16), *(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
    xpc_release(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  }
}

uint64_t sub_10055FF98(uint64_t a1, int a2, xpc_object_t object)
{
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    v6 = objc_alloc_init((Class)NSMutableDictionary);
    v7 = sub_1002C3A5C(object, "kCBMatchActionRulePeerAddress");
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = sub_1002C3A5C(object, "kCBMatchActionRuleLocalToken");
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = v10;
    if (v10 && objc_msgSend(v10, "length") == (id)6)
    {
      if (v8 && objc_msgSend(v8, "length") == (id)6)
      {
        objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("MatchActionRulePeerAddress"));
        objc_msgSend(v6, "setObject:forKeyedSubscript:", v11, CFSTR("MatchActionRuleLocalToken"));
        objc_msgSend(v6, "setObject:forKeyedSubscript:", &off_100960820, CFSTR("MatchActionRuleHopValue"));
        v12 = *(void **)(a1 + 32);
        v13 = objc_msgSend(v6, "copy");
        objc_msgSend(v12, "addObject:", v13);

        v5 = 1;
LABEL_13:

        return v5;
      }
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007040B8();
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_10070408C();
    }
    v5 = 0;
    goto LABEL_13;
  }
  return 0;
}

void sub_10056011C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_100560154(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _DWORD v4[2];

  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009378E0);
  v2 = sub_1006733A8(off_100977FA8, *(_QWORD *)(a1 + 32));
  v3 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "setMatchActionRules returned %d", (uint8_t *)v4, 8u);
  }
}

void sub_100560230(uint64_t a1)
{
  _QWORD __dst[2];

  __dst[0] = 0;
  __dst[1] = 0;
  memcpy(__dst, objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "bytes"), *(_QWORD *)(a1 + 40));
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002E2E58((uint64_t)off_100978168, (unsigned __int8 *)(a1 + 48), (uint64_t)__dst);
}

uint64_t sub_1005602DC(uint64_t a1)
{
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  return sub_1002E2EB0((uint64_t)off_100978168, (unsigned __int8 *)(a1 + 32));
}

void sub_10056032C(uint64_t a1)
{
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_1002EBD84((uint64_t)off_100978168, *(void **)(a1 + 32));
}

void sub_10056037C(uint64_t a1, void *a2, int a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;

  v10 = a2;
  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (v10)
    {
      v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "remoteHostID")));
      xpc_dictionary_set_string(v5, "kCBMsgArgWhbRemoteControllerId", (const char *)objc_msgSend(v7, "UTF8String"));

      v8 = *(void **)(a1 + 40);
      v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier")));
      xpc_dictionary_set_string(v8, "kCBMsgArgWhbRemoteDeviceUUID", (const char *)objc_msgSend(v9, "UTF8String"));

      v5 = *(void **)(a1 + 40);
    }
    xpc_dictionary_set_int64(v5, "kCBMsgArgResult", a3);
    xpc_connection_send_message(*(xpc_connection_t *)(v6 + 16), *(xpc_object_t *)(a1 + 40));
    xpc_release(*(xpc_object_t *)(a1 + 40));
  }

}

void sub_100560460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10056048C(id a1)
{
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_1009378A0);
  sub_100604FF8((uint64_t)off_100977C28, 1, 3, 1);
}

void sub_1005604D8(uint64_t a1)
{
  NSMutableDictionary *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100937780);
  v2 = sub_1006A4DC8(qword_1009778B0, 1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_100560540(uint64_t a1, int a2, void *a3, char a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  NSMutableData *v10;
  void *v11;
  NSMutableData *v12;
  char v13;

  v7 = a3;
  v13 = a4;
  v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 40);
    xpc_dictionary_set_int64(v8, "kCBMsgArgResult", a2);
    if (!a2)
    {
      v10 = objc_opt_new(NSMutableData);
      -[NSMutableData appendBytes:length:](v10, "appendBytes:length:", &v13, 1);
      -[NSMutableData appendData:](v10, "appendData:", v7);
      v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v12 = objc_retainAutorelease(v10);
      xpc_dictionary_set_data(v11, "kCBFastLeConnectionInfoData", -[NSMutableData bytes](v12, "bytes"), -[NSMutableData length](v12, "length"));

    }
    xpc_connection_send_message(*(xpc_connection_t *)(v9 + 16), *(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    xpc_release(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  }

}

void sub_10056064C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10056066C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  _QWORD *v6;
  _BYTE *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  const __CFString *v13;
  const __CFString *v14;
  _QWORD v15[2];
  _BYTE buf[12];
  __int16 v17;
  _QWORD *v18;
  __int16 v19;
  id v20;

  v4 = a3;
  v5 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v4;
    v17 = 2082;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending 'device name updated' event for device \"%@\" to session \"%{public}s\"", buf, 0x16u);
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  if ((sub_10000AEE4((uint64_t)off_1009778C0, v4, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
  {
    v13 = CFSTR("kCBMsgArgDeviceUUID");
    v14 = CFSTR("kCBMsgArgName");
    v15[0] = v4;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    sub_10000602C((uint64_t)off_1009778C0, v4, (uint64_t)buf);
    if (v19 >= 0)
      v7 = buf;
    else
      v7 = *(_BYTE **)buf;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7, v13, v14, v15[0]));
    v15[1] = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, &v13, 2));

    if (SHIBYTE(v19) < 0)
      operator delete(*(void **)buf);
    sub_10005DF3C(a1, 178, v9);

  }
  else
  {
    v10 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(a1 + 96);
      v12 = *(_QWORD **)(a1 + 48);
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v11;
      v17 = 2112;
      v18 = v12;
      v19 = 2112;
      v20 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
    }
  }

}

void sub_1005608B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_100560904(uint64_t a1, uint64_t a2, void *a3)
{
  sub_10056066C(a1 - 144, a2, a3);
}

void sub_10056090C(uint64_t a1, uint64_t a2, void *a3, int a4, int a5)
{
  id v8;
  xpc_object_t v9;
  id v10;
  void *v11;
  unsigned __int8 uuid[8];
  uint64_t v13;

  v8 = a3;
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = v8;
  v11 = v10;
  if (v10)
  {
    *(_QWORD *)uuid = 0;
    v13 = 0;
    objc_msgSend(v10, "getUUIDBytes:", uuid);
    xpc_dictionary_set_uuid(v9, "kCBMsgArgDeviceUUID", uuid);
  }

  xpc_dictionary_set_int64(v9, "kCBMsgArgData", a5);
  xpc_dictionary_set_int64(v9, "kCBMsgArgResult", a4);
  sub_10005E138(a1, 180, v9, 1);

}

void sub_100560A04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100560A28(uint64_t a1, uint64_t a2, void *a3, int a4, int a5)
{
  sub_10056090C(a1 - 144, a2, a3, a4, a5);
}

void sub_100560A30(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  id v6;
  xpc_object_t v7;
  id v8;
  void *v9;
  unsigned __int8 uuid[8];
  uint64_t v11;

  v6 = a3;
  v7 = xpc_dictionary_create(0, 0, 0);
  v8 = v6;
  v9 = v8;
  if (v8)
  {
    *(_QWORD *)uuid = 0;
    v11 = 0;
    objc_msgSend(v8, "getUUIDBytes:", uuid);
    xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", uuid);
  }

  xpc_dictionary_set_int64(v7, "kCBMsgArgVisibleInSettings", a4);
  sub_10005E138(a1, 185, v7, 1);

}

void sub_100560B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100560B34(uint64_t a1, uint64_t a2, void *a3, unsigned int a4)
{
  sub_100560A30(a1 - 144, a2, a3, a4);
}

void sub_100560B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  xpc_object_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;

  v7 = xpc_dictionary_create(0, 0, 0);
  v8 = (const void *)sub_10003EB18(a3);
  v9 = sub_10003F8C4(a3);
  xpc_dictionary_set_data(v7, "kCBMsgArgLeZone", v8, v9);
  v10 = (const void *)sub_10003EB18(a4);
  v11 = sub_10003F8C4(a4);
  xpc_dictionary_set_data(v7, "kCBMsgArgLeZoneMask", v10, v11);
  sub_10005E138(a1, 90, v7, 1);
}

void sub_100560BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100560B3C(a1 - 144, a2, a3, a4);
}

void sub_100560BF4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[3];
  _QWORD v13[3];

  v8 = a3;
  v13[0] = v8;
  v12[0] = CFSTR("kCBMsgArgDeviceUUID");
  v12[1] = CFSTR("kCBTrackingOptionState");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a4));
  v13[1] = v9;
  v12[2] = CFSTR("kCBTrackingOptionType");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a5));
  v13[2] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 3));
  sub_10005DF3C(a1, 89, v11);

}

void sub_100560CFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100560D38(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  sub_100560BF4(a1 - 144, a2, a3, a4, a5);
}

void sub_100560D40(uint64_t a1, int a2, void *a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t value)
{
  id v15;
  xpc_object_t v16;
  id v17;
  void *v18;
  unsigned __int8 uuid[8];
  uint64_t v20;

  v15 = a3;
  if (*(int *)(a1 + 80) >= 1)
  {
    v16 = xpc_dictionary_create(0, 0, 0);
    v17 = v15;
    v18 = v17;
    if (v17)
    {
      *(_QWORD *)uuid = 0;
      v20 = 0;
      objc_msgSend(v17, "getUUIDBytes:", uuid);
      xpc_dictionary_set_uuid(v16, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTClockEventType", a4);
    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTLocalClock", a5);
    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTRemoteClock", a6);
    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTClockSeconds", a8);
    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTClockMicroSeconds", value);
    xpc_dictionary_set_uint64(v16, "kCBGetControllerBTClockEventCounter", a7);
    sub_10005E138(a1, 210, v16, 1);
  }

}

void sub_100560EB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100560ED4(uint64_t a1, int a2, void *a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t value)
{
  sub_100560D40(a1 - 144, a2, a3, a4, a5, a6, a7, a8, value);
}

void sub_100560EE4(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  id v6;
  xpc_object_t v7;
  id v8;
  void *v9;
  unsigned __int8 uuid[8];
  uint64_t v11;

  v6 = a3;
  if (*(int *)(a1 + 80) >= 1)
  {
    v7 = xpc_dictionary_create(0, 0, 0);
    v8 = v6;
    v9 = v8;
    if (v8)
    {
      *(_QWORD *)uuid = 0;
      v11 = 0;
      objc_msgSend(v8, "getUUIDBytes:", uuid);
      xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_uint64(v7, "kCBCSConfigId", *a4);
    xpc_dictionary_set_uint64(v7, "kCBCSStartAclConnEvent", *((unsigned __int16 *)a4 + 1));
    xpc_dictionary_set_uint64(v7, "kCBCSFrequencyCompensation", a4[4]);
    xpc_dictionary_set_uint64(v7, "kCBCSProcedureDoneStatus", a4[5]);
    xpc_dictionary_set_uint64(v7, "kCBCSSubEventDoneStatus", a4[6]);
    xpc_dictionary_set_uint64(v7, "kCBCSReferencePowerLevel", a4[7]);
    xpc_dictionary_set_uint64(v7, "kCBCSNumAntennaPath", a4[8]);
    xpc_dictionary_set_uint64(v7, "kCBCSNumStepsReported", a4[9]);
    xpc_dictionary_set_data(v7, "kCBCSStepMode", a4 + 10, 0xA0uLL);
    xpc_dictionary_set_data(v7, "kCBCSStepChannel", a4 + 170, 0xA0uLL);
    xpc_dictionary_set_data(v7, "kCBCSStepDataLength", a4 + 330, 0xA0uLL);
    xpc_dictionary_set_data(v7, "kCBCSStepData", a4 + 490, 0x6400uLL);
    xpc_dictionary_set_uint64(v7, "kCBCSCurrentStepIndex", a4[26090]);
    sub_10005E138(a1, 221, v7, 1);
  }

}

void sub_1005610D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1005610F8(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  sub_100560EE4(a1 - 144, a2, a3, a4);
}

void sub_100561100(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, const void *a8, char a9, char a10, char a11, char a12, char a13, unsigned __int16 value, int value_2, unsigned __int8 value_6)
{
  id v21;
  xpc_object_t v22;
  id v23;
  void *v24;
  const void *v25;
  size_t v26;
  unsigned __int8 uuid[8];
  unsigned int *v28;

  v21 = a3;
  if (*(int *)(a1 + 80) >= 1)
  {
    v22 = xpc_dictionary_create(0, 0, 0);
    v23 = v21;
    v24 = v23;
    if (v23)
    {
      *(_QWORD *)uuid = 0;
      v28 = 0;
      objc_msgSend(v23, "getUUIDBytes:", uuid);
      xpc_dictionary_set_uuid(v22, "kCBMsgArgDeviceUUID", uuid);
    }

    *(_QWORD *)uuid = 0;
    v28 = 0;
    sub_10003994C(uuid, a8, a9);
    v25 = (const void *)sub_10003EB18((uint64_t)uuid);
    v26 = sub_10003F8C4((uint64_t)uuid);
    xpc_dictionary_set_data(v22, "kCBGetRssiStatisticsRawData", v25, v26);
    xpc_dictionary_set_int64(v22, "kCBGetRssiStatisticsDetectionAverage", a10);
    xpc_dictionary_set_int64(v22, "kCBGetRssiStatisticsDetectionMedian", a12);
    xpc_dictionary_set_int64(v22, "kCBGetRssiStatisticsDetectionMaximum", a11);
    xpc_dictionary_set_int64(v22, "kCBGetRssiStatisticsDetectionMinimum", a13);
    xpc_dictionary_set_uint64(v22, "kCBGetRssiStatisticsDetectionCoreMotionAndMask", a4);
    xpc_dictionary_set_uint64(v22, "kCBGetRssiStatisticsDetectionCoreMotionAndMask2", a5);
    xpc_dictionary_set_uint64(v22, "kCBGetRssiStatisticsDetectionCoreMotionXorMask", a6);
    xpc_dictionary_set_uint64(v22, "kCBGetRssiStatisticsDetectionVariance", value);
    xpc_dictionary_set_uint64(v22, "kCBGetRssiStatisticsDetectionState", value_6);
    xpc_dictionary_set_int64(v22, "kCBMsgArgResult", value_2);
    sub_10005E138(a1, 214, v22, 1);
    *(_QWORD *)uuid = &off_100918258;
    if (v28)
      sub_100056AAC(v28);
  }

}

void sub_100561324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10056136C(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, const void *a8, char a9, char a10, char a11, char a12, char a13, unsigned __int16 a14, int a15, unsigned __int8 a16)
{
  sub_100561100(a1 - 144, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

void sub_1005613B4(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, unsigned int a6, int64_t a7, int a8)
{
  id v14;
  xpc_object_t v15;
  id v16;
  void *v17;
  unsigned __int8 uuid[8];
  uint64_t v19;

  v14 = a3;
  if (*(int *)(a1 + 80) >= 1)
  {
    v15 = xpc_dictionary_create(0, 0, 0);
    v16 = v14;
    v17 = v16;
    if (v16)
    {
      *(_QWORD *)uuid = 0;
      v19 = 0;
      objc_msgSend(v16, "getUUIDBytes:", uuid);
      xpc_dictionary_set_uuid(v15, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_int64(v15, "kCBUsageStatsLePercent", a4);
    xpc_dictionary_set_int64(v15, "kCBUsageStatsClPercent", a5);
    xpc_dictionary_set_int64(v15, "kCBUsageStatsIsAudioStreaming", a6);
    xpc_dictionary_set_int64(v15, "kCBUsageStatsTimeStampNsMonotonic", a7);
    xpc_dictionary_set_int64(v15, "kCBMsgArgResult", a8);
    sub_10005E138(a1, 215, v15, 1);
  }

}

void sub_100561510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100561534(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, unsigned int a6, int64_t a7, int a8)
{
  sub_1005613B4(a1 - 144, a2, a3, a4, a5, a6, a7, a8);
}

void sub_10056153C(uint64_t a1, uint64_t a2, void *a3, unsigned __int16 *a4, int a5)
{
  id v8;
  xpc_object_t v9;
  id v10;
  void *v11;
  unsigned __int8 uuid[8];
  uint64_t v13;

  v8 = a3;
  if (*(int *)(a1 + 80) >= 1)
  {
    v9 = xpc_dictionary_create(0, 0, 0);
    v10 = v8;
    v11 = v10;
    if (v10)
    {
      *(_QWORD *)uuid = 0;
      v13 = 0;
      objc_msgSend(v10, "getUUIDBytes:", uuid);
      xpc_dictionary_set_uuid(v9, "kCBMsgArgDeviceUUID", uuid);
    }

    xpc_dictionary_set_int64(v9, "kCBPhyStatsRSSI", *(char *)a4);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsTransmitPER", a4[1]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsTransmitPERNumberOfPackets", a4[2]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsTransmitClassicPER", a4[3]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsTransmitClassicPERNumberOfPackets", a4[4]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsReceivePER", a4[5]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsReceivePERNumberOfPackets", a4[6]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsReceiveClassicPER", a4[7]);
    xpc_dictionary_set_int64(v9, "kCBPhyStatsReceiveClassicPERNumberOfPackets", a4[8]);
    xpc_dictionary_set_int64(v9, "kCBMsgArgResult", a5);
    sub_10005E138(a1, 216, v9, 1);
  }

}

void sub_1005616E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100561704(uint64_t a1, uint64_t a2, void *a3, unsigned __int16 *a4, int a5)
{
  sub_10056153C(a1 - 144, a2, a3, a4, a5);
}

void sub_10056170C(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6, unsigned int a7)
{
  id v12;
  xpc_object_t v13;
  id v14;
  void *v15;
  unsigned __int8 uuid[8];
  uint64_t v17;

  v12 = a3;
  v13 = xpc_dictionary_create(0, 0, 0);
  v14 = v12;
  v15 = v14;
  if (v14)
  {
    *(_QWORD *)uuid = 0;
    v17 = 0;
    objc_msgSend(v14, "getUUIDBytes:", uuid);
    xpc_dictionary_set_uuid(v13, "kCBMsgArgDeviceUUID", uuid);
  }

  xpc_dictionary_set_int64(v13, "kCBMsgArgPowerAssertionExecutionState", a7);
  xpc_dictionary_set_int64(v13, "kCBMsgArgPowerAssertionDuration", a5);
  xpc_dictionary_set_int64(v13, "kCBMsgArgPowerAssertionBegin", a4);
  xpc_dictionary_set_int64(v13, "kCBMsgArgResult", a6);
  sub_10005E138(a1, 213, v13, 1);

}

void sub_10056183C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100561860(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6, unsigned int a7)
{
  sub_10056170C(a1 - 144, a2, a3, a4, a5, a6, a7);
}

void sub_100561868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100009AF0(a1 - 144, a2, a3, a4);
}

void sub_100561870(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, unint64_t a6)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  int v19;
  xpc_object_t v20;
  unsigned __int8 uu2[16];

  v10 = a3;
  if (a6)
  {
    sub_100030BCC(uu2, v10);
    v11 = sub_10000C5B8(a1 + 200, uu2);
    v12 = v11;
    if (a1 + 208 != v11)
    {
      v13 = *(_QWORD **)(v11 + 56);
      if (v13)
      {
        v14 = (uint64_t **)(v11 + 48);
        v15 = (uint64_t *)(v11 + 56);
        do
        {
          v16 = v13[4];
          v17 = v16 >= a6;
          if (v16 >= a6)
            v18 = v13;
          else
            v18 = v13 + 1;
          if (v17)
            v15 = v13;
          v13 = (_QWORD *)*v18;
        }
        while (*v18);
        if (v15 != (uint64_t *)(v11 + 56) && v15[4] <= a6)
        {
          v19 = *(_DWORD *)(a6 + 8);
          v20 = sub_10039A52C((id *)a6, a4, a5);
          sub_10005E138(a1, (unsigned __int16)v19, v20, 1);
          sub_1000040CC(v14, v15);
          operator delete(v15);
          if (!*(_QWORD *)(v12 + 64))
            sub_100565D70((uint64_t **)(a1 + 200), v12);
          (*(void (**)(unint64_t))(*(_QWORD *)a6 + 8))(a6);
        }
      }
    }
  }

}

void sub_1005619CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005619E8(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, unint64_t a6)
{
  sub_100561870(a1 - 144, a2, a3, a4, a5, a6);
}

BOOL sub_1005619F0(uint64_t a1, uint64_t a2, void *a3)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int64_t v19;

  v19 = 0;
  v4 = sub_100023CBC(a3, &v19);
  if (!v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD **)(v5 + 8);
    v7 = *(_QWORD *)(v5 + 16);
    if ((unint64_t)v6 >= v7)
    {
      v9 = *(_QWORD **)v5;
      v10 = ((uint64_t)v6 - *(_QWORD *)v5) >> 3;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        abort();
      v12 = v7 - (_QWORD)v9;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        v14 = (char *)sub_10007ABA0(v5 + 16, v13);
        v9 = *(_QWORD **)v5;
        v6 = *(_QWORD **)(v5 + 8);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[8 * v10];
      v16 = &v14[8 * v13];
      *(_QWORD *)v15 = v19;
      v8 = v15 + 8;
      while (v6 != v9)
      {
        v17 = *--v6;
        *((_QWORD *)v15 - 1) = v17;
        v15 -= 8;
      }
      *(_QWORD *)v5 = v15;
      *(_QWORD *)(v5 + 8) = v8;
      *(_QWORD *)(v5 + 16) = v16;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v6 = v19;
      v8 = v6 + 1;
    }
    *(_QWORD *)(v5 + 8) = v8;
  }
  return v4 == 0;
}

uint64_t sub_100561AF8(void *a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD applier[5];

  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_array)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472;
    applier[2] = sub_100561BB0;
    applier[3] = &unk_100923110;
    applier[4] = a2;
    if (xpc_array_apply(a1, applier))
      return 0;
    else
      return 3;
  }
  else
  {
    v4 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703BF8(a1, v4);
    return 3;
  }
}

uint64_t sub_100561BB0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  xpc_object_t value;
  xpc_object_t v14;
  uint64_t (**v16)();
  unsigned int *v17;
  __int128 v18;
  int v19;
  __int128 v20;
  int v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  _QWORD v28[2];
  int v29;

  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  sub_100069AFC(v28);
  if (!sub_100023B7C(a3, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgUUID"))
  {
    v26 = xmmword_10073B2C4;
    v27 = 0;
    if (!sub_100072DF0((unsigned __int8 *)v28, (unsigned __int8 *)&v26))
    {
      v24 = xmmword_10073B2D8;
      v25 = 0;
      if (!sub_100072DF0((unsigned __int8 *)v28, (unsigned __int8 *)&v24))
      {
        v22 = xmmword_10073B29C;
        v23 = 0;
        if (!sub_100072DF0((unsigned __int8 *)v28, (unsigned __int8 *)&v22))
        {
          v20 = xmmword_10073B2B0;
          v21 = 0;
          if (sub_100072DF0((unsigned __int8 *)v28, (unsigned __int8 *)&v20))
          {
            v10 = sub_1000239F0(a3, "kCBMsgArgData");
            v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
            v12 = v11;
            if (v11)
            {
              if (strlen((const char *)objc_msgSend(objc_retainAutorelease(v11), "UTF8String")) < 0x10000)
                operator new();
              if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
                sub_1007040E4();
            }

          }
          else
          {
            v18 = xmmword_10073B2EC;
            v19 = 0;
            if (sub_100072DF0((unsigned __int8 *)v28, (unsigned __int8 *)&v18))
            {
              v16 = &off_100918258;
              v17 = 0;
              value = xpc_dictionary_get_value(a3, "kCBMsgArgData");
              if (!sub_100023A7C(value, (uint64_t)&v16) && sub_10003F8C4((uint64_t)&v16) == 7)
              {
                sub_1005F55FC((uint64_t)&v16, 2uLL);
                sub_1005F55FC((uint64_t)&v16, 3uLL);
                sub_1005F55FC((uint64_t)&v16, 5uLL);
                sub_1005F55FC((uint64_t)&v16, 6uLL);
                operator new();
              }
            }
            else
            {
              v16 = &off_100918258;
              v17 = 0;
              v14 = xpc_dictionary_get_value(a3, "kCBMsgArgData");
              if (!sub_100023A7C(v14, (uint64_t)&v16)
                && (unint64_t)sub_10003F8C4((uint64_t)&v16) <= 0x200)
              {
                operator new();
              }
            }
            v16 = &off_100918258;
            if (v17)
              sub_100056AAC(v17);
          }
        }
      }
    }
  }
  return 0;
}

void sub_100562030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int *a16)
{
  if (a16)
    sub_100056AAC(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005620D4(uint64_t a1, __int16 a2, uint64_t a3, int a4)
{
  BOOL v7;
  char v8;

  *(_WORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(_QWORD *)a1 = off_10093B120;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_WORD *)(a1 + 26) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 28) = xmmword_100742554;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  sub_1005BB518(a1, a3, a4);
  if (a3)
    v7 = a4 == 0;
  else
    v7 = 1;
  v8 = !v7;
  *(_BYTE *)(a1 + 20) = v8;
  return a1;
}

uint64_t sub_100562164(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  int v12;

  v11 = 0uLL;
  v12 = 0;
  sub_100069AFC(&v11);
  if (!sub_100023B7C(a3, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgAttributeID"))
    operator new();
  return 0;
}

void sub_1005625D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,unsigned int *a33)
{
  if (__p)
    operator delete(__p);
  if (a33)
    sub_100056AAC(a33);
  _Unwind_Resume(exception_object);
}

void sub_100562650(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;

  v6 = a1[10];
  v4 = (uint64_t)(a1 + 10);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = a1[8];
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v10) >> 2);
    v12 = v11 + 1;
    if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL)
      abort();
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v10) >> 2);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x666666666666666)
      v14 = 0xCCCCCCCCCCCCCCCLL;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)sub_1000B58EC(v4, v14);
    else
      v15 = 0;
    v16 = &v15[20 * v11];
    v17 = &v15[20 * v14];
    v18 = *a2;
    *((_DWORD *)v16 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v16 = v18;
    v9 = v16 + 20;
    v20 = (char *)a1[8];
    v19 = (char *)a1[9];
    if (v19 != v20)
    {
      do
      {
        v21 = *(_OWORD *)(v19 - 20);
        *((_DWORD *)v16 - 1) = *((_DWORD *)v19 - 1);
        *(_OWORD *)(v16 - 20) = v21;
        v16 -= 20;
        v19 -= 20;
      }
      while (v19 != v20);
      v19 = (char *)a1[8];
    }
    a1[8] = v16;
    a1[9] = v9;
    a1[10] = v17;
    if (v19)
      operator delete(v19);
  }
  else
  {
    v8 = *a2;
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v7 = v8;
    v9 = (char *)(v7 + 20);
  }
  a1[9] = v9;
}

void sub_100562770(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;

  v6 = a1[13];
  v4 = (uint64_t)(a1 + 13);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = a1[11];
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v10) >> 2);
    v12 = v11 + 1;
    if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL)
      abort();
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v10) >> 2);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x666666666666666)
      v14 = 0xCCCCCCCCCCCCCCCLL;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)sub_1000B58EC(v4, v14);
    else
      v15 = 0;
    v16 = &v15[20 * v11];
    v17 = &v15[20 * v14];
    v18 = *a2;
    *((_DWORD *)v16 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v16 = v18;
    v9 = v16 + 20;
    v20 = (char *)a1[11];
    v19 = (char *)a1[12];
    if (v19 != v20)
    {
      do
      {
        v21 = *(_OWORD *)(v19 - 20);
        *((_DWORD *)v16 - 1) = *((_DWORD *)v19 - 1);
        *(_OWORD *)(v16 - 20) = v21;
        v16 -= 20;
        v19 -= 20;
      }
      while (v19 != v20);
      v19 = (char *)a1[11];
    }
    a1[11] = v16;
    a1[12] = v9;
    a1[13] = v17;
    if (v19)
      operator delete(v19);
  }
  else
  {
    v8 = *a2;
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v7 = v8;
    v9 = (char *)(v7 + 20);
  }
  a1[12] = v9;
}

uint64_t sub_100562890(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  NSObject *v9;
  NSObject *v11;
  uint64_t v12;
  uint8_t *v13;
  __int128 v14;
  int v15;
  __int128 v16;
  int v17;
  uint8_t buf[16];
  int v19;
  char v20;
  uint8_t v21[4];
  uint64_t v22;
  __int16 v23;
  uint8_t *v24;

  if (*(int *)(a1 + 80) <= 1)
  {
    v4 = *(_QWORD *)(a3 + 8);
    v5 = *(unsigned __int8 **)(v4 + 64);
    if (a2)
    {
      v6 = *(unsigned __int8 **)(v4 + 72);
    }
    else
    {
      v7 = *(unsigned __int8 **)(v4 + 72);
      if (v5 == v7)
      {
        v8 = *(unsigned __int8 **)(v4 + 64);
      }
      else
      {
        while (1)
        {
          *(_OWORD *)buf = xmmword_10073B558;
          v19 = 0;
          if (sub_100072DF0(v5, buf))
            break;
          v5 += 20;
          if (v5 == v7)
          {
            v5 = v7;
            break;
          }
        }
        v8 = v5;
        v5 = *(unsigned __int8 **)(v4 + 72);
      }
      if (v8 != v5)
      {
        v9 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Contact tracing UUID advertising is not allowed.", buf, 2u);
        }
        return 3;
      }
      v6 = v5;
      v5 = *(unsigned __int8 **)(v4 + 64);
    }
    if (v5 != v6)
    {
      while (1)
      {
        if (qword_10097AC18 != -1)
          dispatch_once(&qword_10097AC18, &stru_100937920);
        if ((sub_1003F3C68(qword_10097AC10, v5, *(unsigned __int8 *)(a1 + 183)) & 1) == 0)
        {
          v11 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
          {
            v12 = *(_QWORD *)(a1 + 96);
            sub_10006887C((uint64_t)v5, buf);
            v13 = buf;
            if (v20 < 0)
              v13 = *(uint8_t **)buf;
            *(_DWORD *)v21 = 138412546;
            v22 = v12;
            v23 = 2080;
            v24 = v13;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@ wants to advertise for restricted service (%s)", v21, 0x16u);
            if (v20 < 0)
              operator delete(*(void **)buf);
          }
          v16 = xmmword_10073B530;
          v17 = -1171415960;
          if (sub_100072DF0(v5, (unsigned __int8 *)&v16))
            break;
          v14 = xmmword_10073B688;
          v15 = 0;
          if (sub_100072DF0(v5, (unsigned __int8 *)&v14))
            break;
        }
        v5 += 20;
        if (v5 == v6)
          return 0;
      }
      return 3;
    }
  }
  return 0;
}

uint64_t sub_100562B18(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v6;

  v6 = a2;
  v4 = sub_10009C400((uint64_t **)(a1 + 112), (unsigned __int8 *)a2, (uint64_t)&unk_100740F58, &v6);
  return sub_100041698((uint64_t)v4 + 56, a3);
}

uint64_t sub_100562B64(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  const void *bytes_ptr;
  NSData *v7;
  void *v8;
  NSObject *v9;
  int v11;
  uint64_t v12;
  __int16 v13;
  void *v14;

  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_data)
  {
    bytes_ptr = xpc_data_get_bytes_ptr(object);
    v7 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", bytes_ptr, xpc_data_get_length(object));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
    {
      v11 = 134218242;
      v12 = a2;
      v13 = 2114;
      v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Adding zone %lu = %{public}@", (uint8_t *)&v11, 0x16u);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 88), "addObject:", v8);

  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100704110();
  }
  return 1;
}

void sub_100562CB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100562CD0(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t value;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  id v18;
  void *v19;
  void *v20;
  xpc_object_t v22;
  uint64_t v23;
  xpc_object_t v24;
  id v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  int v30;
  xpc_object_t v31;
  void *v32;
  __CFString *v33;
  id v34;
  __CFString *v35;
  __CFString *v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  id v40;
  id v41;
  int v42;
  int v43;
  NSObject *v44;
  uint64_t v45;
  int v46;
  _BYTE *v47;
  _BYTE *v48;
  void **v49;
  NSObject *v50;
  _BYTE *v51;
  int v52;
  void **v53;
  void **v54;
  void **v55;
  _QWORD *v56;
  void *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t i;
  NSObject *v63;
  _BYTE *v64;
  void *v65;
  void *v66;
  __CFString *v67;
  uint64_t v68;
  void *v69[2];
  char v70;
  void *__p[2];
  char v72;
  unsigned __int16 v73;
  int v74;
  int v75;
  int v76;
  int64_t v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  int64_t v81;
  int64_t v82;
  int64_t v83;
  int64_t v84;
  int64_t v85;
  uint64_t (**v86)();
  unsigned int *v87;
  uint64_t (**v88)();
  unsigned int *v89;
  int64_t v90;
  __int128 v91;
  int v92;
  _BYTE buf[12];
  __int16 v94;
  __CFString *v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  _BYTE v99[78];
  _BYTE v100[12];
  char v101;
  __int128 v102;
  int v103;

  v6 = *(_QWORD *)(a1 + 40);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary)
    return 0;
  v89 = 0;
  v90 = 0;
  v87 = 0;
  v88 = &off_100918258;
  v85 = 0;
  v86 = &off_100918258;
  v83 = 1;
  v84 = 0;
  v81 = 1;
  v82 = 1;
  v79 = 0;
  v80 = 2;
  v77 = 0;
  v78 = 0;
  v75 = 0xFFFF;
  v76 = 0xFFFF;
  v74 = 0xFFFF;
  v102 = 0uLL;
  v103 = 0;
  sub_100069AFC(&v102);
  v73 = 0;
  v8 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 616))(v8))
    v82 = 3;
  value = xpc_dictionary_get_value(object, "kCBScanOptionFilterManufacturerID");
  if (value && sub_1002C36A4(value, &v73))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007044B4();
    goto LABEL_45;
  }
  v10 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterPayload");
  if (v10 && sub_100023A7C(v10, (uint64_t)&v88))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007041F4();
    goto LABEL_45;
  }
  v11 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterPayloadMask");
  if (v11 && sub_100023A7C(v11, (uint64_t)&v86))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007041C8();
    goto LABEL_45;
  }
  v12 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterForceDups");
  if (v12 && sub_100023CBC(v12, &v84))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100704488();
    goto LABEL_45;
  }
  v13 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterBypassFilterDuplicate");
  if (v13 && sub_100023CBC(v13, &v83))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070445C();
    goto LABEL_45;
  }
  v14 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterTargetCore");
  if (v14 && sub_100023CBC(v14, &v82))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100704430();
    goto LABEL_45;
  }
  v15 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterRSSIThresholdOrder");
  if (v15 && sub_100023CBC(v15, &v81))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      goto LABEL_40;
    goto LABEL_45;
  }
  v16 = xpc_dictionary_get_value(object, "kCBScanOption127dBmReport");
  if (v16 && sub_100023CBC(v16, &v78))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      goto LABEL_40;
    goto LABEL_45;
  }
  v17 = xpc_dictionary_get_value(object, "kCBScanOption27dBmReport");
  if (!v17 || !sub_100023CBC(v17, &v77))
  {
    if (xpc_dictionary_get_value(object, "kCBScanOptionPeers"))
    {
      v18 = sub_1000708B8(object, "kCBScanOptionPeers");
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      if (!v19)
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_1007043D8();
        goto LABEL_45;
      }
    }
    else
    {
      v19 = 0;
    }
    v22 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterAddressType");
    if (v22 && sub_100023CBC(v22, &v80))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007043AC();
      goto LABEL_46;
    }
    if (*(_DWORD *)(v6 + 80) == 2)
    {
      v23 = sub_1000438A4();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 2344))(v23))
      {
        v24 = xpc_dictionary_get_value(object, "kCBScanOptionRespondToObjectLocatorWithThisType");
        if (v24)
        {
          if (sub_100023CBC(v24, &v79))
          {
            if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
              sub_100704380();
            goto LABEL_46;
          }
        }
      }
    }
    if (xpc_dictionary_get_value(object, "kCBOptionUseCaseList"))
    {
      v25 = sub_10000FC60(object, "kCBOptionUseCaseList");
      v20 = (void *)objc_claimAutoreleasedReturnValue(v25);
      if (!v20)
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_100704354();
        goto LABEL_46;
      }
    }
    else
    {
      v20 = 0;
    }
    v26 = xpc_dictionary_get_value(object, "kCBScanOptionScanWindow");
    if (v26 && sub_100023F94(v26, &v76))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100704328();
      goto LABEL_47;
    }
    v27 = xpc_dictionary_get_value(object, "kCBScanOptionScanInterval");
    if (v27 && sub_100023F94(v27, &v75))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007042FC();
      goto LABEL_47;
    }
    v28 = xpc_dictionary_get_value(object, "kCBScanOptionScanIntervalBackground");
    if (v28 && sub_100023F94(v28, &v74))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007042D0();
      goto LABEL_47;
    }
    v29 = xpc_dictionary_get_value(object, "kCBScanOptionFilterServiceUUID");
    if (v29)
    {
      sub_100070A48(v29, (uint64_t)&v102);
      if (v30)
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_1007042A4();
        goto LABEL_47;
      }
    }
    v31 = xpc_dictionary_get_value(object, "kCBScanOptionFilterIdentifier");
    if (v31)
    {
      *(_QWORD *)buf = 0;
      if (sub_1002C3720(v31, (int64_t *)buf))
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_100704278();
        v32 = 0;
        v33 = 0;
        v7 = 0;
        goto LABEL_157;
      }
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)buf));
      v67 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "stringValue"));

    }
    else
    {
      v34 = sub_1000239F0(object, "kCBScanOptionFilterIdentifierString");
      v35 = (__CFString *)objc_claimAutoreleasedReturnValue(v34);
      v36 = v35;
      if (v35 && -[__CFString length](v35, "length"))
      {
        v67 = v36;
      }
      else
      {

        v67 = CFSTR("default");
      }
    }
    if (v90 == 18 && _os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100703D58();
LABEL_103:
      v32 = 0;
      v7 = 0;
LABEL_156:
      v33 = v67;
LABEL_157:

      goto LABEL_48;
    }
    v38 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterRssi");
    v39 = xpc_dictionary_get_value(object, "kCBScanOptionAppleFilterPuckType");
    if (v38 && sub_100023CBC(v38, &v85))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070424C();
      goto LABEL_103;
    }
    v40 = sub_1000239F0(object, "kCBScanOptionFilterNameMatchString");
    v65 = (void *)objc_claimAutoreleasedReturnValue(v40);
    v41 = sub_1000239F0(object, "kCBScanOptionFilterNameMatchOption");
    v66 = (void *)objc_claimAutoreleasedReturnValue(v41);
    if ((objc_msgSend(v66, "isEqualToString:", CFSTR("kCBScanOptionFilterNameMatchOptionStartsWith")) & 1) != 0)
    {
      v42 = 1;
    }
    else if ((objc_msgSend(v66, "isEqualToString:", CFSTR("kCBScanOptionFilterNameMatchOptionEndsWith")) & 1) != 0)
    {
      v42 = 2;
    }
    else
    {
      if ((objc_msgSend(v66, "isEqualToString:", CFSTR("kCBScanOptionFilterNameMatchOptionContains")) & 1) == 0
        && objc_msgSend(v66, "length"))
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_100704220();
        goto LABEL_163;
      }
      v42 = 0;
    }
    v43 = v73;
    if (v73)
    {
      v44 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
      {
        v45 = *(_QWORD *)(a1 + 32);
        sub_1000453F0((uint64_t)&v88, v100);
        v46 = v101;
        v47 = *(_BYTE **)v100;
        sub_1000453F0((uint64_t)&v86, __p);
        v48 = v100;
        if (v46 < 0)
          v48 = v47;
        v49 = __p;
        if (v72 < 0)
          v49 = (void **)__p[0];
        *(_DWORD *)buf = 134220546;
        *(_QWORD *)&buf[4] = a2;
        v94 = 2112;
        v95 = v67;
        v96 = 2112;
        v97 = v45;
        v98 = 1024;
        *(_DWORD *)v99 = v43;
        *(_WORD *)&v99[4] = 2080;
        *(_QWORD *)&v99[6] = v48;
        *(_WORD *)&v99[14] = 2080;
        *(_QWORD *)&v99[16] = v49;
        *(_WORD *)&v99[24] = 2048;
        *(_QWORD *)&v99[26] = v85;
        *(_WORD *)&v99[34] = 2048;
        *(_QWORD *)&v99[36] = v84;
        *(_WORD *)&v99[44] = 2048;
        *(_QWORD *)&v99[46] = v83;
        *(_WORD *)&v99[54] = 2048;
        *(_QWORD *)&v99[56] = v82;
        *(_WORD *)&v99[64] = 2048;
        *(_QWORD *)&v99[66] = v81;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "addEnhancedFilter index:%zu filterId:%@ clientName:%@ mfgrID:%d payload:%s payloadFilter:%s rssi:%lld forceDups:%lld bypassFilterDuplicate:%lld,t targetCore:%lld, rssiThreshold:%lld", buf, 0x6Cu);
        if (v72 < 0)
          operator delete(__p[0]);
        if (v101 < 0)
          operator delete(*(void **)v100);
        LOWORD(v43) = v73;
      }
      sub_100563D64(*(uint64_t **)(a1 + 48), v67, *(void **)(a1 + 32), v43, (uint64_t)&v88, (uint64_t)&v86, v85, v84, v83, v82, v81, 0, 0, 1);
      goto LABEL_146;
    }
    if ((_BYTE)v102)
    {
      v50 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
      {
        v68 = *(_QWORD *)(a1 + 32);
        sub_10006887C((uint64_t)&v102, v100);
        if (v101 >= 0)
          v51 = v100;
        else
          v51 = *(_BYTE **)v100;
        sub_1000453F0((uint64_t)&v88, __p);
        v52 = v72;
        v53 = (void **)__p[0];
        sub_1000453F0((uint64_t)&v86, v69);
        v54 = __p;
        if (v52 < 0)
          v54 = v53;
        if (v70 >= 0)
          v55 = v69;
        else
          v55 = (void **)v69[0];
        *(_DWORD *)buf = 134220546;
        *(_QWORD *)&buf[4] = a2;
        v94 = 2112;
        v95 = v67;
        v96 = 2112;
        v97 = v68;
        v98 = 2080;
        *(_QWORD *)v99 = v51;
        *(_WORD *)&v99[8] = 2080;
        *(_QWORD *)&v99[10] = v54;
        *(_WORD *)&v99[18] = 2080;
        *(_QWORD *)&v99[20] = v55;
        *(_WORD *)&v99[28] = 2048;
        *(_QWORD *)&v99[30] = v85;
        *(_WORD *)&v99[38] = 2048;
        *(_QWORD *)&v99[40] = v84;
        *(_WORD *)&v99[48] = 2048;
        *(_QWORD *)&v99[50] = v83;
        *(_WORD *)&v99[58] = 2048;
        *(_QWORD *)&v99[60] = v82;
        *(_WORD *)&v99[68] = 2048;
        *(_QWORD *)&v99[70] = v81;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "addEnhancedFilter index:%zu filterId:%@ clientName:%@ uuid:%s payload:%s payloadFilter:%s rssi:%lld forceDups:%lld bypassFilterDuplicate:%lld,t targetCore:%lld, rssiThreshold:%lld", buf, 0x70u);
        if (v70 < 0)
          operator delete(v69[0]);
        if (v72 < 0)
          operator delete(__p[0]);
        if (v101 < 0)
          operator delete(*(void **)v100);
      }
      v56 = *(_QWORD **)(a1 + 48);
      v57 = *(void **)(a1 + 32);
      v91 = v102;
      v92 = v103;
      sub_1000B3950(v56, v67, v57, &v91, (uint64_t)&v88, (uint64_t)&v86, v85, v84, v83, v82, v81, 0, 0, 1);
      goto LABEL_146;
    }
    if (objc_msgSend(v65, "length"))
    {
      v58 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
      {
        v59 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 134220290;
        *(_QWORD *)&buf[4] = a2;
        v94 = 2112;
        v95 = v67;
        v96 = 2112;
        v97 = v59;
        v98 = 2112;
        *(_QWORD *)v99 = v65;
        *(_WORD *)&v99[8] = 1024;
        *(_DWORD *)&v99[10] = v42;
        *(_WORD *)&v99[14] = 2048;
        *(_QWORD *)&v99[16] = v85;
        *(_WORD *)&v99[24] = 2048;
        *(_QWORD *)&v99[26] = v84;
        *(_WORD *)&v99[34] = 2048;
        *(_QWORD *)&v99[36] = v83;
        *(_WORD *)&v99[44] = 2048;
        *(_QWORD *)&v99[46] = v82;
        *(_WORD *)&v99[54] = 2048;
        *(_QWORD *)&v99[56] = v81;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "addEnhancedFilter index:%zu filterId:%@ clientName:%@ nameMatchStr:%@ nameMatchOpt:%d rssi:%lld forceDups:%lld bypassFilterDuplicate:%lld,t targetCore:%lld, rssiThreshold:%lld", buf, 0x62u);
      }
      sub_100563E94(*(uint64_t **)(a1 + 48), v67, *(void **)(a1 + 32), v65, v42, v85, v84, v83, v82, v81, 0, 0, 1);
      goto LABEL_146;
    }
    if (*(_BYTE *)(v6 + 170))
    {
      if (v39 && !sub_100023CBC(v39, &v90))
      {
        if (v38 && !sub_100023CBC(v38, &v85))
        {
          if (sub_10003F8C4((uint64_t)&v86))
          {
            if (sub_10003F8C4((uint64_t)&v88))
            {
              sub_10003BFE0(*(_QWORD *)(a1 + 48), *(void **)(a1 + 32), v90, v80, (uint64_t)&v88, (uint64_t)&v86, v85, v84, v83, v82, v81, v19, v79 != 0, 1, v78 != 0, v77 != 0, 1, v20, v76,
                v75,
                v74);
LABEL_146:
              v60 = *(_QWORD *)(a1 + 48);
              v61 = *(_QWORD *)(v60 + 96);
              for (i = *(_QWORD *)(v60 + 104); v61 != i; v61 += 104)
              {
                v63 = qword_100999860;
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
                {
                  sub_100563FC4(v61);
                  v64 = v96 >= 0 ? buf : *(_BYTE **)buf;
                  *(_DWORD *)v100 = 136315138;
                  *(_QWORD *)&v100[4] = v64;
                  _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "%s", v100, 0xCu);
                  if (SHIBYTE(v96) < 0)
                    operator delete(*(void **)buf);
                }
              }
              v7 = 1;
              goto LABEL_155;
            }
            if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
              sub_1007041F4();
          }
          else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            sub_1007041C8();
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          sub_10070419C();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_100704170();
      }
    }
LABEL_163:
    v7 = 0;
LABEL_155:

    v32 = v65;
    goto LABEL_156;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
LABEL_40:
    sub_100704404();
LABEL_45:
  v19 = 0;
LABEL_46:
  v20 = 0;
LABEL_47:
  v7 = 0;
LABEL_48:

  v86 = &off_100918258;
  if (v87)
    sub_100056AAC(v87);
  v88 = &off_100918258;
  if (v89)
    sub_100056AAC(v89);
  return v7;
}

void sub_100563BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,unsigned int *a42,uint64_t a43,unsigned int *a44)
{
  void *v44;
  void *v45;
  uint64_t v46;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v46 - 137) < 0)
    operator delete(*(void **)(v46 - 160));

  if (a42)
    sub_100056AAC(a42);
  if (a44)
    sub_100056AAC(a44);
  _Unwind_Resume(a1);
}

void sub_100563D64(uint64_t *a1, void *a2, void *a3, __int16 a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14)
{
  unint64_t v15;
  uint64_t v16;
  __int128 v17[2];
  uint64_t (**v18)();
  unsigned int *v19;
  uint64_t (**v20)();
  unsigned int *v21;
  id v22;

  sub_100564A14((uint64_t)v17, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  v15 = a1[13];
  if (v15 >= a1[14])
  {
    v16 = sub_1000B5C50(a1 + 12, v17);
  }
  else
  {
    sub_1000B5D70((uint64_t)(a1 + 14), a1[13], v17);
    v16 = v15 + 104;
    a1[13] = v15 + 104;
  }
  a1[13] = v16;

  v20 = &off_100918258;
  if (v21)
    sub_100056AAC(v21);
  v18 = &off_100918258;
  if (v19)
    sub_100056AAC(v19);

}

void sub_100563E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1000B5690((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100563E94(uint64_t *a1, void *a2, void *a3, void *a4, int a5, char a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13)
{
  unint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  uint64_t (**v17)();
  unsigned int *v18;
  uint64_t (**v19)();
  unsigned int *v20;
  id v21;

  sub_100564B50((uint64_t)v16, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, 1);
  v14 = a1[13];
  if (v14 >= a1[14])
  {
    v15 = sub_1000B5C50(a1 + 12, v16);
  }
  else
  {
    sub_1000B5D70((uint64_t)(a1 + 14), a1[13], v16);
    v15 = v14 + 104;
    a1[13] = v14 + 104;
  }
  a1[13] = v15;

  v19 = &off_100918258;
  if (v20)
    sub_100056AAC(v20);
  v17 = &off_100918258;
  if (v18)
    sub_100056AAC(v18);

}

void sub_100563F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1000B5690((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100563FC4(uint64_t a1)
{
  _QWORD *v2;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  int v15;
  _QWORD *v16;
  std::string *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *v21;
  uint64_t v22;
  _QWORD *v23;
  std::string *v24;
  uint64_t v25;
  std::string *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  const char *v30;
  size_t v31;
  _QWORD *v32;
  std::string *v33;
  std::string::size_type v34;
  _QWORD *v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type v38;
  _QWORD *v39;
  _QWORD *v40;
  std::string *v41;
  std::string::size_type v42;
  _QWORD *v43;
  _QWORD *v44;
  std::string *v45;
  std::string::size_type v46;
  _QWORD *v47;
  std::string *v48;
  std::string::size_type v49;
  _QWORD *v50;
  _QWORD *v51;
  std::string *v52;
  std::string::size_type v53;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string __p;
  _OWORD v59[4];
  void *v60[2];
  __int128 v61;
  __int128 v62;
  _OWORD v63[9];
  uint64_t v64;

  v64 = 0;
  v62 = 0u;
  memset(v63, 0, sizeof(v63));
  *(_OWORD *)v60 = 0u;
  v61 = 0u;
  memset(v59, 0, sizeof(v59));
  sub_100272ADC((uint64_t)v59);
  v2 = sub_1002614D8(v59, (uint64_t)"EnhancedFilterDefinition Type:", 30);
  sub_100091AE8(&__p, off_1009379A0[*(int *)(a1 + 96)]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v5 = sub_1002614D8(v2, (uint64_t)p_p, size);
  v6 = sub_1002614D8(v5, (uint64_t)" configController:", 18);
  v7 = (_QWORD *)std::ostream::operator<<(v6, *(unsigned __int8 *)(a1 + 79));
  v8 = sub_1002614D8(v7, (uint64_t)" filterId:", 10);
  v9 = (const char *)objc_msgSend(*(id *)a1, "UTF8String");
  v10 = strlen(v9);
  v11 = sub_1002614D8(v8, (uint64_t)v9, v10);
  v12 = sub_1002614D8(v11, (uint64_t)" bundle:", 8);
  v13 = (const char *)objc_msgSend(*(id *)(a1 + 8), "UTF8String");
  v14 = strlen(v13);
  sub_1002614D8(v12, (uint64_t)v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = *(_DWORD *)(a1 + 96);
  if (v15 == 2)
  {
    v19 = sub_1002614D8(v59, (uint64_t)" manufacturerID: ", 17);
    std::ostream::operator<<(v19, *(unsigned __int16 *)(a1 + 16));
  }
  else if (v15 == 1)
  {
    v16 = sub_1002614D8(v59, (uint64_t)" uuid:", 6);
    sub_10006887C(a1 + 20, &__p);
    v17 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v18 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    sub_1002614D8(v16, (uint64_t)v17, v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!sub_1000452EC(a1 + 40))
  {
    v20 = sub_1002614D8(v59, (uint64_t)" blob:", 6);
    sub_1000453F0(a1 + 40, &__p);
    v21 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v22 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    sub_1002614D8(v20, (uint64_t)v21, v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!sub_1000452EC(a1 + 56))
  {
    v23 = sub_1002614D8(v59, (uint64_t)" mask:", 6);
    sub_1000453F0(a1 + 56, &__p);
    v24 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v25 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    sub_1002614D8(v23, (uint64_t)v24, v25);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 96) == 3)
  {
    sub_100091AE8(&__p, off_1009379C0[*(int *)(a1 + 80)]);
    v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v27 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    v28 = sub_1002614D8(v59, (uint64_t)v26, v27);
    v29 = sub_1002614D8(v28, (uint64_t)":", 1);
    v30 = (const char *)objc_msgSend(*(id *)(a1 + 88), "UTF8String");
    v31 = strlen(v30);
    sub_1002614D8(v29, (uint64_t)v30, v31);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v32 = sub_1002614D8(v59, (uint64_t)" rssi:", 6);
  std::to_string(&__p, *(char *)(a1 + 72));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &__p;
  else
    v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v34 = __p.__r_.__value_.__l.__size_;
  v35 = sub_1002614D8(v32, (uint64_t)v33, v34);
  v36 = sub_1002614D8(v35, (uint64_t)" rssiThreshold:", 15);
  std::to_string(&v57, *(unsigned __int8 *)(a1 + 76));
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &v57;
  else
    v37 = (std::string *)v57.__r_.__value_.__r.__words[0];
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  else
    v38 = v57.__r_.__value_.__l.__size_;
  v39 = sub_1002614D8(v36, (uint64_t)v37, v38);
  v40 = sub_1002614D8(v39, (uint64_t)" report127:", 11);
  std::to_string(&v56, *(unsigned __int8 *)(a1 + 77));
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &v56;
  else
    v41 = (std::string *)v56.__r_.__value_.__r.__words[0];
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
  else
    v42 = v56.__r_.__value_.__l.__size_;
  v43 = sub_1002614D8(v40, (uint64_t)v41, v42);
  v44 = sub_1002614D8(v43, (uint64_t)" repor127:", 10);
  std::to_string(&v55, *(unsigned __int8 *)(a1 + 78));
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = &v55;
  else
    v45 = (std::string *)v55.__r_.__value_.__r.__words[0];
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  else
    v46 = v55.__r_.__value_.__l.__size_;
  sub_1002614D8(v44, (uint64_t)v45, v46);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v47 = sub_1002614D8(v59, (uint64_t)" forceDups:", 11);
  std::to_string(&__p, *(unsigned __int8 *)(a1 + 73));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &__p;
  else
    v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v49 = __p.__r_.__value_.__l.__size_;
  v50 = sub_1002614D8(v47, (uint64_t)v48, v49);
  v51 = sub_1002614D8(v50, (uint64_t)" bypassFilterDups:", 18);
  std::to_string(&v57, *(unsigned __int8 *)(a1 + 74));
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v57;
  else
    v52 = (std::string *)v57.__r_.__value_.__r.__words[0];
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  else
    v53 = v57.__r_.__value_.__l.__size_;
  sub_1002614D8(v51, (uint64_t)v52, v53);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::stringbuf::str((char *)v59 + 8);
  if (SHIBYTE(v61) < 0)
    operator delete(v60[1]);
  std::streambuf::~streambuf((char *)v59 + 8);
  return std::ios::~ios(v63);
}

void sub_100564568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a32 < 0)
    operator delete(__p);
  sub_100272CFC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

id sub_100564624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;

  v4 = sub_100070698(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v5));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("kCBMsgArgs")));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v7));

  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCBMsgArgTimeXpcTimestampsTracking")));
    if (v9)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCBMsgArgTimeXpcTimestampsTracking")));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v10));

    }
    else
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    }

    v12 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithLongLong:", a3);
    objc_msgSend(v11, "setObject:forKeyedSubscript:", v12, CFSTR("kCBMsgArgTimeXpcLeAttConnHandleStartAdvMsg"));

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCBAdvDataAppleMfgData")));
    objc_msgSend(v11, "setObject:forKeyedSubscript:", v13, CFSTR("kCBAdvDataAppleMfgData"));

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_100564794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10056480C(uint64_t a1, void *a2, __int128 **a3, char a4, int a5)
{
  uint64_t v9;

  v9 = sub_10039A4C0(a1, 181, a2);
  *(_QWORD *)v9 = off_10092B0E8;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  sub_1000B61B8((char *)(v9 + 24), *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a3[1] - (char *)*a3) >> 2));
  *(_BYTE *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 52) = a5;
  return a1;
}

void sub_100564888(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10039A4FC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10056489C(uint64_t a1, void *a2, uint64_t a3, __int128 **a4, char a5, int a6)
{
  uint64_t v11;

  v11 = sub_10039A4C0(a1, 189, a2);
  *(_QWORD *)(v11 + 24) = a3;
  *(_QWORD *)v11 = off_10092B110;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  sub_1000B61B8((char *)(v11 + 32), *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a4[1] - (char *)*a4) >> 2));
  *(_BYTE *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 60) = a6;
  return a1;
}

void sub_100564928(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10039A4FC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10056493C(uint64_t a1, void *a2, uint64_t a3, __int128 **a4)
{
  uint64_t v7;

  v7 = sub_10039A4C0(a1, 190, a2);
  *(_QWORD *)(v7 + 24) = a3;
  *(_QWORD *)v7 = off_10092B138;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  sub_1000B61B8((char *)(v7 + 32), *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a4[1] - (char *)*a4) >> 2));
  return a1;
}

void sub_1005649B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10039A4FC(v1);
  _Unwind_Resume(a1);
}

void sub_1005649C8(uint64_t a1)
{
  sub_10039A4FC(a1);
  operator delete();
}

void sub_1005649F0(uint64_t a1)
{
  sub_10039A4FC(a1);
  operator delete();
}

uint64_t sub_100564A14(uint64_t a1, void *a2, void *a3, __int16 a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14)
{
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;

  v21 = a2;
  v22 = a3;
  v23 = v21;
  *(_QWORD *)a1 = v23;
  v24 = v22;
  *(_QWORD *)(a1 + 8) = v24;
  *(_WORD *)(a1 + 16) = a4;
  sub_100069AFC((_BYTE *)(a1 + 20));
  v25 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a1 + 40) = &off_100918258;
  *(_QWORD *)(a1 + 48) = v25;
  if (v25)
    sub_10003C37C(v25);
  v26 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(a1 + 56) = &off_100918258;
  *(_QWORD *)(a1 + 64) = v26;
  if (v26)
    sub_10003C37C(v26);
  *(_BYTE *)(a1 + 72) = a7;
  *(_BYTE *)(a1 + 73) = a8;
  *(_BYTE *)(a1 + 74) = a9;
  *(_BYTE *)(a1 + 75) = a10;
  *(_BYTE *)(a1 + 76) = a11;
  *(_BYTE *)(a1 + 77) = a12;
  *(_BYTE *)(a1 + 78) = a13;
  *(_BYTE *)(a1 + 79) = a14;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 2;

  return a1;
}

void sub_100564B14(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  unsigned int *v6;

  *(_QWORD *)(v1 + 40) = v4;
  v6 = *(unsigned int **)(v1 + 48);
  if (v6)
    sub_100056AAC(v6);

  _Unwind_Resume(a1);
}

uint64_t sub_100564B50(uint64_t a1, void *a2, void *a3, void *a4, int a5, char a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14)
{
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;

  v21 = a2;
  v22 = a3;
  v23 = a4;
  v24 = v21;
  *(_QWORD *)a1 = v24;
  v25 = v22;
  *(_QWORD *)(a1 + 8) = v25;
  *(_WORD *)(a1 + 16) = 0;
  sub_100069AFC((_BYTE *)(a1 + 20));
  *(_QWORD *)(a1 + 40) = &off_100918258;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &off_100918258;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = a6;
  *(_BYTE *)(a1 + 73) = a7;
  *(_BYTE *)(a1 + 74) = a8;
  *(_BYTE *)(a1 + 75) = a9;
  *(_BYTE *)(a1 + 76) = a10;
  *(_BYTE *)(a1 + 77) = a12;
  *(_BYTE *)(a1 + 78) = a13;
  *(_BYTE *)(a1 + 79) = a14;
  *(_DWORD *)(a1 + 80) = a5;
  *(_QWORD *)(a1 + 88) = v23;
  *(_DWORD *)(a1 + 96) = 3;

  return a1;
}

void sub_100564C40(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100564C68(id a1)
{
  operator new();
}

void sub_100564CA8()
{
  operator delete();
}

void sub_100564CCC(id a1)
{
  operator new();
}

void sub_100564D0C()
{
  operator delete();
}

void sub_100564D30(id a1)
{
  operator new();
}

void sub_100564D70()
{
  operator delete();
}

void sub_100564D94(id a1)
{
  operator new();
}

void sub_100564DD4()
{
  operator delete();
}

void sub_100564DF8(id a1)
{
  operator new();
}

void sub_100564E38()
{
  operator delete();
}

void sub_100564E5C(id a1)
{
  operator new();
}

void sub_100564E9C()
{
  operator delete();
}

uint64_t sub_100564EC0(void **a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v9;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 *v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  void *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  char *v45;
  void *i;
  __int128 v47;
  void *v48;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 20;
  v7 = (uint64_t)*a1 + 20 * v6;
  if (a5 < 1)
    return v7;
  v9 = a3;
  v13 = a1[2];
  v11 = (uint64_t)(a1 + 2);
  v12 = v13;
  v14 = *(_QWORD *)(v11 - 8);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v13[-v14] >> 2)) >= a5)
  {
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - v7) >> 2)) >= a5)
    {
      v20 = (__int128 *)((char *)a3 + 20 * a5);
      v21 = *(char **)(v11 - 8);
    }
    else
    {
      v20 = (__int128 *)((char *)a3 + 4 * ((uint64_t)(v14 - v7) >> 2));
      v21 = *(char **)(v11 - 8);
      if (v20 != a4)
      {
        v22 = (__int128 *)((char *)a3 + 4 * ((uint64_t)(v14 - v7) >> 2));
        v23 = *(_QWORD *)(v11 - 8);
        do
        {
          v24 = *v22;
          *(_DWORD *)(v23 + 16) = *((_DWORD *)v22 + 4);
          *(_OWORD *)v23 = v24;
          v23 += 20;
          v22 = (__int128 *)((char *)v22 + 20);
          v21 += 20;
        }
        while (v22 != a4);
      }
      a1[1] = v21;
      if ((uint64_t)(v14 - v7) < 1)
        return v7;
    }
    v25 = v7 + 20 * a5;
    v26 = &v21[-20 * a5];
    v27 = v21;
    if ((unint64_t)v26 < v14)
    {
      v27 = v21;
      do
      {
        v28 = *(_OWORD *)v26;
        *((_DWORD *)v27 + 4) = *((_DWORD *)v26 + 4);
        *(_OWORD *)v27 = v28;
        v27 += 20;
        v26 += 20;
      }
      while ((unint64_t)v26 < v14);
    }
    a1[1] = v27;
    if (v21 != (char *)v25)
    {
      v29 = v21 - 20;
      v30 = 4 * ((uint64_t)&v21[-v25] >> 2);
      v31 = (uint64_t)&v5[20 * v6 - 20];
      do
      {
        v32 = *(_OWORD *)(v31 + v30);
        *((_DWORD *)v29 + 4) = *(_DWORD *)(v31 + v30 + 16);
        *(_OWORD *)v29 = v32;
        v29 -= 20;
        v30 -= 20;
      }
      while (v30);
    }
    if (v20 != a3)
    {
      v33 = v7;
      do
      {
        v34 = *v9;
        *(_DWORD *)(v33 + 16) = *((_DWORD *)v9 + 4);
        *(_OWORD *)v33 = v34;
        v33 += 20;
        v9 = (__int128 *)((char *)v9 + 20);
      }
      while (v9 != v20);
    }
    return v7;
  }
  v15 = a5 - 0x3333333333333333 * ((uint64_t)(v14 - (_QWORD)v5) >> 2);
  if (v15 > 0xCCCCCCCCCCCCCCCLL)
    abort();
  v16 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - v5) >> 2);
  v17 = 2 * v16;
  if (2 * v16 <= v15)
    v17 = v15;
  if (v16 >= 0x666666666666666)
    v18 = 0xCCCCCCCCCCCCCCCLL;
  else
    v18 = v17;
  if (v18)
    v19 = (char *)sub_1000B58EC(v11, v18);
  else
    v19 = 0;
  v35 = &v19[20 * v6];
  v36 = &v35[20 * a5];
  v37 = 20 * a5;
  v38 = v35;
  do
  {
    v39 = *v9;
    *((_DWORD *)v38 + 4) = *((_DWORD *)v9 + 4);
    *(_OWORD *)v38 = v39;
    v38 += 20;
    v9 = (__int128 *)((char *)v9 + 20);
    v37 -= 20;
  }
  while (v37);
  v40 = *a1;
  v41 = v35;
  if (*a1 != (void *)v7)
  {
    v42 = v7;
    v43 = v35;
    do
    {
      v41 = v43 - 20;
      v44 = *(_OWORD *)(v42 - 20);
      *((_DWORD *)v43 - 1) = *(_DWORD *)(v42 - 4);
      *(_OWORD *)(v43 - 20) = v44;
      v42 -= 20;
      v43 -= 20;
    }
    while ((void *)v42 != v40);
  }
  v45 = &v19[20 * v18];
  for (i = a1[1]; (void *)v7 != i; v7 += 20)
  {
    v47 = *(_OWORD *)v7;
    *((_DWORD *)v36 + 4) = *(_DWORD *)(v7 + 16);
    *(_OWORD *)v36 = v47;
    v36 += 20;
  }
  v48 = *a1;
  *a1 = v41;
  a1[1] = v36;
  a1[2] = v45;
  if (v48)
    operator delete(v48);
  return (uint64_t)v35;
}

char *sub_100565188(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int16 v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 1)
  {
    v13 = *(void **)a1;
    if (a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1) < 0)
      abort();
    v14 = (__dst - (uint64_t)v13) >> 1;
    v15 = v10 - (_QWORD)v13;
    if (v15 <= a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1))
      v16 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 1);
    else
      v16 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFFELL)
      v17 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_1002B54AC(v9, v17);
    else
      v18 = 0;
    v28 = &v18[2 * v14];
    __p = v18;
    v34 = v28;
    v36 = &v18[2 * v17];
    v29 = 2 * a5;
    v30 = &v28[2 * a5];
    do
    {
      v31 = *(_WORD *)v7;
      v7 += 2;
      *(_WORD *)v28 = v31;
      v28 += 2;
      v29 -= 2;
    }
    while (v29);
    v35 = v30;
    v5 = sub_100565388((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 1) & 0xFFFFFFFFFFFFFFFELL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 1;
  if (v20 >= a5)
  {
    v21 = &__src[2 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_18:
    v24 = &v5[2 * a5];
    v25 = &v23[-2 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_WORD *)v25;
        v25 += 2;
        *(_WORD *)v26 = v27;
        v26 += 2;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-2 * ((v23 - v24) >> 1)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[2 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[2 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_18;
  return v5;
}

void sub_100565350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_100565388(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  __int16 v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v7 - 1) = v9;
      v7 -= 2;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

__int128 *sub_10056544C(uint64_t a1, __int128 *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  __int128 *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = *(_QWORD *)(a1 + 16);
    v9 = a1 + 16;
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = (__int128 *)&a3[a5];
      }
      else
      {
        v21 = (__int128 *)(&a3->__r_.__value_.__l.__data_ + ((uint64_t)(v12 - (_QWORD)a2) >> 3));
        *(_QWORD *)(a1 + 8) = sub_1002A47E0(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_100565608(a1, (uint64_t)v5, v12, (uint64_t)v5 + 24 * a5);
      sub_100455F48(a3, (std::string *)v21, (std::string *)v5);
    }
    else
    {
      v13 = *(__int128 **)a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)sub_1002A479C(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[24 * v15];
      v25 = v24;
      v26 = &v19[24 * v18];
      sub_100565674(&v23, (__int128 *)a3, a5);
      v5 = sub_100565704((__int128 **)a1, &v23, v5);
      sub_1002A56A4((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_1005655E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100565608(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v10 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v8 = v10;
      v8 += 24;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_1005657C8((uint64_t)&v12, a2, v7, v6);
}

_QWORD *sub_100565674(_QWORD *result, __int128 *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v3 = result;
  v4 = result[2];
  if (a3)
  {
    v6 = v4 + 24 * a3;
    v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        result = sub_10003430C((_BYTE *)v4, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v8 = *a2;
        *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v4 = v8;
      }
      v4 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_1005656FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

__int128 *sub_100565704(__int128 **a1, _QWORD *a2, __int128 *a3)
{
  __int128 *result;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;

  result = (__int128 *)a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v8 = a2[1];
    do
    {
      v6 = (__int128 *)(v8 - 24);
      v9 = *(__int128 *)((char *)v7 - 24);
      *(_QWORD *)(v8 - 8) = *((_QWORD *)v7 - 1);
      *(_OWORD *)(v8 - 24) = v9;
      *((_QWORD *)v7 - 2) = 0;
      *((_QWORD *)v7 - 1) = 0;
      *((_QWORD *)v7 - 3) = 0;
      v7 = (__int128 *)((char *)v7 - 24);
      v8 -= 24;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v10 = a1[1];
  v11 = a2[2];
  if (v10 != a3)
  {
    do
    {
      v12 = *a3;
      *(_QWORD *)(v11 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v11 = v12;
      v11 += 24;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      *(_QWORD *)a3 = 0;
      a3 = (__int128 *)((char *)a3 + 24);
    }
    while (a3 != v10);
    v6 = (__int128 *)a2[1];
  }
  a2[2] = v11;
  v13 = *a1;
  *a1 = v6;
  a2[1] = v13;
  v14 = a1[1];
  a1[1] = (__int128 *)a2[2];
  a2[2] = v14;
  v15 = a1[2];
  a1[2] = (__int128 *)a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1005657C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a3;
    do
    {
      v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0)
        operator delete(*(void **)v7);
      v8 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 - 8);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_BYTE *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

void sub_10056584C(id a1)
{
  operator new();
}

void sub_10056588C()
{
  operator delete();
}

void sub_1005658B0(id a1)
{
  operator new();
}

void sub_1005658F0()
{
  operator delete();
}

void sub_100565914(id a1)
{
  operator new();
}

void sub_100565954()
{
  operator delete();
}

void sub_100565978(id a1)
{
  operator new();
}

void sub_1005659B8()
{
  operator delete();
}

void sub_1005659DC(id a1)
{
  operator new();
}

void sub_100565A1C()
{
  operator delete();
}

void sub_100565A40(id a1)
{
  operator new();
}

void sub_100565A80()
{
  operator delete();
}

void sub_100565AA4(id a1)
{
  operator new();
}

void sub_100565AE4()
{
  operator delete();
}

void sub_100565B08(id a1)
{
  operator new();
}

void sub_100565B48()
{
  operator delete();
}

void sub_100565B6C(id a1)
{
  operator new();
}

void sub_100565BAC()
{
  operator delete();
}

void sub_100565BD0(id a1)
{
  operator new();
}

void sub_100565C10()
{
  operator delete();
}

void sub_100565C34(id a1)
{
  operator new();
}

void sub_100565D4C()
{
  operator delete();
}

uint64_t *sub_100565D70(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_1000040CC(a1, (uint64_t *)a2);
  sub_10001A82C(a2 + 48, *(_QWORD **)(a2 + 56));
  operator delete((void *)a2);
  return v3;
}

uint64_t *sub_100565DAC(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10000DC28((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100565E4C((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_100565E4C(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v7 + 32, *a2);
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 6) = v7 + 56;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_100565EC4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD **v3;

  *v1 = 0;
  sub_100565EE0(v2, v3);
  _Unwind_Resume(a1);
}

void sub_100565EE0(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_10001A82C((uint64_t)(a2 + 6), a2[7]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

_OWORD *sub_100565F28(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v9 = 0;
  v5 = (void **)sub_10001F574((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_100004078(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

unsigned __int8 *sub_100565FBC(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  BOOL v8;

  v3 = a1;
  if (a1 != a2)
  {
    while (!sub_100072DF0(v3 + 28, a3))
    {
      v6 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(unsigned __int8 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
      if (v7 == a2)
        return a2;
    }
  }
  return v3;
}

void sub_100566060(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x1Cu);
}

void sub_100566088(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(float *)a3 = a1;
  *(_QWORD *)(a3 + 4) = a4;
}

void sub_1005660A0()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  sub_1002A90C4(&stru_100999760);
  __cxa_atexit((void (*)(void *))sub_1002A912C, &stru_100999760, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1005660F0(uint64_t a1, uint64_t a2, void *a3, __int16 a4, char a5, int a6)
{
  id v11;

  v11 = a3;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v11;
  *(_WORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 18) = a5;
  *(_DWORD *)(a1 + 20) = a6;
  *(_QWORD *)(a1 + 24) = 0x300000000;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 112) = 0;
  return a1;
}

uint64_t sub_100566178(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v11;
  char *v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  char *v16;
  __int16 v17;
  uint64_t v18;

  v4 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = off_1009379D8[*(unsigned int *)(a1 + 32)];
    v6 = a2;
    v7 = off_1009379D8[a2];
    v8 = off_100937A20[*(unsigned int *)(a1 + 48)];
    v9 = *(_QWORD *)(a1 + 8);
    v11 = 136446978;
    v12 = v5;
    v13 = 2082;
    v14 = v7;
    v15 = 2082;
    v16 = v8;
    v17 = 2114;
    v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Protocol state change (P: %{public}s => %{public}s / L: %{public}s) for device \"%{public}@\"", (uint8_t *)&v11, 0x2Au);
  }
  else
  {
    v6 = a2;
  }
  *(_DWORD *)(a1 + 32) = a2;
  return qword_100742608[v6];
}

uint64_t sub_100566288(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  char *v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  char *v16;
  __int16 v17;
  uint64_t v18;

  v4 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = off_1009379D8[*(unsigned int *)(a1 + 32)];
    v6 = off_100937A20[*(unsigned int *)(a1 + 48)];
    v7 = a2;
    v8 = off_100937A20[a2];
    v9 = *(_QWORD *)(a1 + 8);
    v11 = 136446978;
    v12 = v5;
    v13 = 2082;
    v14 = v6;
    v15 = 2082;
    v16 = v8;
    v17 = 2114;
    v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Link state change (P: %{public}s / L: %{public}s => %{public}s) for device \"%{public}@\"", (uint8_t *)&v11, 0x2Au);
  }
  else
  {
    v7 = a2;
  }
  *(_DWORD *)(a1 + 48) = a2;
  return qword_100742650[v7];
}

void sub_100566398(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  __int16 v8;
  char *v9;
  __int16 v10;
  uint64_t v11;

  v2 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = off_1009379D8[*(unsigned int *)(a1 + 32)];
    v4 = off_100937A20[*(unsigned int *)(a1 + 48)];
    v5 = *(_QWORD *)(a1 + 8);
    v6 = 136446722;
    v7 = v3;
    v8 = 2082;
    v9 = v4;
    v10 = 2114;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: State is (P: %{public}s / L: %{public}s) for device \"%{public}@\"", (uint8_t *)&v6, 0x20u);
  }
}

__n128 sub_100566474(uint64_t a1, uint64_t a2, int a3, _OWORD *a4, _OWORD *a5, int a6, __n128 *a7, __n128 *a8)
{
  __n128 result;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_100937A50;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a6;
  *(_BYTE *)(a1 + 92) = a3;
  if (!a3)
  {
    *(_OWORD *)(a1 + 44) = *a4;
    *(_OWORD *)(a1 + 28) = *a5;
    result = *a7;
    *(__n128 *)(a1 + 60) = *a7;
    if (a8)
    {
      result = *a8;
      *(__n128 *)(a1 + 76) = *a8;
    }
  }
  return result;
}

void sub_1005664C4(uint64_t a1)
{
  if (qword_100977A68 != -1)
    dispatch_once(&qword_100977A68, &stru_100937A78);
  sub_10046CC2C((uint64_t)off_100977A60, *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 92), a1 + 44, (_OWORD *)(a1 + 28), *(unsigned int *)(a1 + 24), (_OWORD *)(a1 + 60));
}

void sub_100566530()
{
  operator delete();
}

void sub_100566544(id a1)
{
  operator new();
}

void sub_100566584()
{
  operator delete();
}

uint64_t sub_1005665A8(uint64_t a1, void *a2)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  xpc_object_t value;
  void *v8;
  const char *string_ptr;
  xpc_object_t v10;
  void *v11;
  const char *v12;
  xpc_object_t v13;
  void *v14;
  const char *v15;
  xpc_object_t v16;
  void *v17;
  xpc_object_t v18;
  void *v19;
  xpc_object_t v20;
  void *v21;
  xpc_object_t v22;
  void *v23;
  xpc_object_t v24;
  void *v25;
  xpc_object_t v26;
  void *v27;
  xpc_object_t v28;
  void *v29;
  xpc_object_t v30;
  void *v31;
  const char *v32;
  xpc_object_t v33;
  void *v34;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string *v46;
  uint64_t v47;
  std::string __dst;
  std::string v49;
  void *v50[2];
  uint64_t v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  std::string v55;
  void *v56[2];
  uint64_t v57;
  std::string v58;
  std::string __str;
  std::string v60;
  void *v61[2];
  uint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  _BYTE v66[32];
  void *v67[2];
  uint64_t v68;
  std::string v69;
  void *__p[2];
  uint64_t v71;
  std::string v72;
  __int128 v73;
  _BYTE v74[400];
  uint64_t v75;
  __int128 v76;
  void *__src[2];
  _OWORD v78[24];
  uint64_t v79;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (std::string *)(a1 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = (std::string *)(a1 + 40);
  *(_OWORD *)(a1 + 88) = 0u;
  v6 = (std::string *)(a1 + 88);
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 120) = 1;
  *(_BYTE *)(a1 + 124) = 0;
  v46 = (std::string *)(a1 + 64);
  v47 = a1 + 136;
  sub_10057F7F4(a1 + 136);
  sub_10057F7F4(a1 + 560);
  sub_100091AE8((_QWORD *)(a1 + 984), "UNKNOWN");
  v79 = 0;
  memset(v78, 0, sizeof(v78));
  v76 = 0u;
  *(_OWORD *)__src = 0u;
  sub_10057F7F4((uint64_t)&v76);
  v75 = 0;
  v73 = 0u;
  memset(v74, 0, sizeof(v74));
  sub_10057F7F4((uint64_t)&v73);
  value = xpc_dictionary_get_value(a2, "kMessageGUID");
  v8 = value;
  if (value && xpc_get_type(value) == (xpc_type_t)&_xpc_type_string)
  {
    string_ptr = xpc_string_get_string_ptr(v8);
    std::string::assign(v4, string_ptr);
  }
  v10 = xpc_dictionary_get_value(a2, "kBody");
  v11 = v10;
  if (v10 && xpc_get_type(v10) == (xpc_type_t)&_xpc_type_string)
  {
    v12 = xpc_string_get_string_ptr(v11);
    std::string::assign(v6, v12);
    *(_DWORD *)(a1 + 112) = strlen(v12);
  }
  v13 = xpc_dictionary_get_value(a2, "kSubject");
  v14 = v13;
  if (v13 && xpc_get_type(v13) == (xpc_type_t)&_xpc_type_string)
  {
    v15 = xpc_string_get_string_ptr(v14);
    std::string::assign(v46, v15);
  }
  v16 = xpc_dictionary_get_value(a2, "kSenderFormattedName");
  v17 = v16;
  if (v16)
  {
    if (xpc_get_type(v16) == (xpc_type_t)&_xpc_type_string)
    {
      v36 = (char *)xpc_string_get_string_ptr(v17);
      if (v36)
      {
        sub_100091AE8(&v72, v36);
        std::string::operator=((std::string *)__src, &v72);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
      }
    }
  }
  v18 = xpc_dictionary_get_value(a2, "kSenderEmail");
  v19 = v18;
  if (v18 && xpc_get_type(v18) == (xpc_type_t)&_xpc_type_string)
  {
    v37 = (char *)xpc_string_get_string_ptr(v19);
    if (v37)
    {
      memset(v66, 0, 24);
      std::string::assign((std::string *)v66, v37);
      if ((v66[23] & 0x80000000) != 0)
      {
        sub_10003430C(__p, *(void **)v66, *(unint64_t *)&v66[8]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v66;
        v71 = *(_QWORD *)&v66[16];
      }
      sub_100353DF8((uint64_t)&v76, (__int128 *)__p);
      if (SHIBYTE(v71) < 0)
        operator delete(__p[0]);
      if ((v66[23] & 0x80000000) != 0)
        operator delete(*(void **)v66);
    }
    if (SBYTE7(v78[0]) < 0)
    {
      sub_10003430C(v66, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      *(_OWORD *)v66 = *(_OWORD *)__src;
      *(_QWORD *)&v66[16] = *(_QWORD *)&v78[0];
    }
    if ((v66[23] & 0x80000000) != 0)
    {
      v42 = *(_QWORD *)&v66[8];
      operator delete(*(void **)v66);
      if (!v37 || v42)
        goto LABEL_14;
    }
    else if (!v37 || v66[23])
    {
      goto LABEL_14;
    }
    sub_100091AE8(&v69, v37);
    std::string::operator=((std::string *)__src, &v69);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
  }
LABEL_14:
  v20 = xpc_dictionary_get_value(a2, "kSenderPhoneNumber");
  v21 = v20;
  if (!v20 || xpc_get_type(v20) != (xpc_type_t)&_xpc_type_string)
    goto LABEL_16;
  v38 = (char *)xpc_string_get_string_ptr(v21);
  if (v38)
  {
    v68 = 0;
    *(_OWORD *)v67 = 0u;
    memset(v66, 0, sizeof(v66));
    std::string::assign((std::string *)v66, v38);
    if ((v66[23] & 0x80000000) != 0)
    {
      sub_10003430C(v61, *(void **)v66, *(unint64_t *)&v66[8]);
    }
    else
    {
      *(_OWORD *)v61 = *(_OWORD *)v66;
      v62 = *(_QWORD *)&v66[16];
    }
    v63 = *(_DWORD *)&v66[24];
    if (SHIBYTE(v68) < 0)
    {
      sub_10003430C(&v64, v67[0], (unint64_t)v67[1]);
    }
    else
    {
      v64 = *(_OWORD *)v67;
      v65 = v68;
    }
    sub_100353318((uint64_t *)&v76, (__int128 *)v61);
    if (SHIBYTE(v65) < 0)
      operator delete((void *)v64);
    if (SHIBYTE(v62) < 0)
      operator delete(v61[0]);
    if (SHIBYTE(v68) < 0)
      operator delete(v67[0]);
    if ((v66[23] & 0x80000000) != 0)
      operator delete(*(void **)v66);
  }
  if (SBYTE7(v78[0]) < 0)
  {
    sub_10003430C(v66, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)v66 = *(_OWORD *)__src;
    *(_QWORD *)&v66[16] = *(_QWORD *)&v78[0];
  }
  if ((v66[23] & 0x80000000) != 0)
  {
    v43 = *(_QWORD *)&v66[8];
    operator delete(*(void **)v66);
    if (!v38 || v43)
      goto LABEL_16;
  }
  else if (!v38 || v66[23])
  {
    goto LABEL_16;
  }
  sub_100091AE8(&v60, v38);
  std::string::operator=((std::string *)__src, &v60);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
LABEL_16:
  if (SBYTE7(v78[0]) < 0)
  {
    sub_10003430C(&__str, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)__src;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)&v78[0];
  }
  std::string::operator=((std::string *)((char *)v78 + 8), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v22 = xpc_dictionary_get_value(a2, "kRecipientFormattedName");
  v23 = v22;
  if (v22)
  {
    if (xpc_get_type(v22) == (xpc_type_t)&_xpc_type_string)
    {
      v39 = (char *)xpc_string_get_string_ptr(v23);
      if (v39)
      {
        sub_100091AE8(&v58, v39);
        std::string::operator=((std::string *)v74, &v58);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v58.__r_.__value_.__l.__data_);
      }
    }
  }
  v24 = xpc_dictionary_get_value(a2, "kRecipientEmail");
  v25 = v24;
  if (v24 && xpc_get_type(v24) == (xpc_type_t)&_xpc_type_string)
  {
    v40 = (char *)xpc_string_get_string_ptr(v25);
    if (v40)
    {
      memset(v66, 0, 24);
      std::string::assign((std::string *)v66, v40);
      if ((v66[23] & 0x80000000) != 0)
      {
        sub_10003430C(v56, *(void **)v66, *(unint64_t *)&v66[8]);
      }
      else
      {
        *(_OWORD *)v56 = *(_OWORD *)v66;
        v57 = *(_QWORD *)&v66[16];
      }
      sub_100353DF8((uint64_t)&v73, (__int128 *)v56);
      if (SHIBYTE(v57) < 0)
        operator delete(v56[0]);
      if ((v66[23] & 0x80000000) != 0)
        operator delete(*(void **)v66);
    }
    if ((v74[23] & 0x80000000) != 0)
    {
      sub_10003430C(v66, *(void **)v74, *(unint64_t *)&v74[8]);
    }
    else
    {
      *(_OWORD *)v66 = *(_OWORD *)v74;
      *(_QWORD *)&v66[16] = *(_QWORD *)&v74[16];
    }
    if ((v66[23] & 0x80000000) != 0)
    {
      v44 = *(_QWORD *)&v66[8];
      operator delete(*(void **)v66);
      if (!v40 || v44)
        goto LABEL_25;
    }
    else if (!v40 || v66[23])
    {
      goto LABEL_25;
    }
    sub_100091AE8(&v55, v40);
    std::string::operator=((std::string *)v74, &v55);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
  }
LABEL_25:
  v26 = xpc_dictionary_get_value(a2, "kRecipientPhoneNumber");
  v27 = v26;
  if (!v26 || xpc_get_type(v26) != (xpc_type_t)&_xpc_type_string)
    goto LABEL_27;
  v41 = (char *)xpc_string_get_string_ptr(v27);
  if (v41)
  {
    v68 = 0;
    *(_OWORD *)v67 = 0u;
    memset(v66, 0, sizeof(v66));
    std::string::assign((std::string *)v66, v41);
    if ((v66[23] & 0x80000000) != 0)
    {
      sub_10003430C(v50, *(void **)v66, *(unint64_t *)&v66[8]);
    }
    else
    {
      *(_OWORD *)v50 = *(_OWORD *)v66;
      v51 = *(_QWORD *)&v66[16];
    }
    v52 = *(_DWORD *)&v66[24];
    if (SHIBYTE(v68) < 0)
    {
      sub_10003430C(&v53, v67[0], (unint64_t)v67[1]);
    }
    else
    {
      v53 = *(_OWORD *)v67;
      v54 = v68;
    }
    sub_100353318((uint64_t *)&v73, (__int128 *)v50);
    if (SHIBYTE(v54) < 0)
      operator delete((void *)v53);
    if (SHIBYTE(v51) < 0)
      operator delete(v50[0]);
    if (SHIBYTE(v68) < 0)
      operator delete(v67[0]);
    if ((v66[23] & 0x80000000) != 0)
      operator delete(*(void **)v66);
  }
  if ((v74[23] & 0x80000000) != 0)
  {
    sub_10003430C(v66, *(void **)v74, *(unint64_t *)&v74[8]);
  }
  else
  {
    *(_OWORD *)v66 = *(_OWORD *)v74;
    *(_QWORD *)&v66[16] = *(_QWORD *)&v74[16];
  }
  if ((v66[23] & 0x80000000) != 0)
  {
    v45 = *(_QWORD *)&v66[8];
    operator delete(*(void **)v66);
    if (!v41 || v45)
      goto LABEL_27;
  }
  else if (!v41 || v66[23])
  {
    goto LABEL_27;
  }
  sub_100091AE8(&v49, v41);
  std::string::operator=((std::string *)v74, &v49);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
LABEL_27:
  if ((v74[23] & 0x80000000) != 0)
    sub_10003430C(&__dst, *(void **)v74, *(unint64_t *)&v74[8]);
  else
    __dst = *(std::string *)v74;
  std::string::operator=((std::string *)&v74[24], &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v28 = xpc_dictionary_get_value(a2, "kMessageId");
  v29 = v28;
  if (v28 && xpc_get_type(v28) == (xpc_type_t)&_xpc_type_int64)
    *(_QWORD *)(a1 + 128) = xpc_int64_get_value(v29);
  v30 = xpc_dictionary_get_value(a2, "kAppType");
  v31 = v30;
  if (v30 && xpc_get_type(v30) == (xpc_type_t)&_xpc_type_string)
  {
    v32 = xpc_string_get_string_ptr(v31);
    std::string::assign(v5, v32);
  }
  v33 = xpc_dictionary_get_value(a2, "kIsRead");
  v34 = v33;
  if (v33 && xpc_get_type(v33) == (xpc_type_t)&_xpc_type_BOOL)
    *(_BYTE *)(a1 + 122) = xpc_BOOL_get_value(v34);
  *(_QWORD *)(a1 + 32) = xpc_dictionary_get_date(a2, "kDate") / 0x3B9ACA00uLL;
  sub_1005671C4(v47, (uint64_t)&v76);
  sub_1005671C4(a1 + 560, (uint64_t)&v73);
  *(_BYTE *)(a1 + 123) = 0;
  sub_10057FE54(&v73);
  sub_10057FE54(&v76);
  return a1;
}

void sub_100566F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  char *v68;
  void **v69;
  void **v70;
  void **v71;
  uint64_t v72;

  if (a24 < 0)
    operator delete(__p);
  sub_100353374((uint64_t)&a52);
  sub_10057FE54(&a68);
  sub_10057FE54(&STACK[0x370]);
  if (v68[1007] < 0)
    operator delete(*a10);
  sub_10057FE54(v72);
  sub_10057FE54(a12);
  if (v68[111] < 0)
    operator delete(*v71);
  if (v68[87] < 0)
    operator delete(*a11);
  if (v68[63] < 0)
    operator delete(*v70);
  if (v68[31] < 0)
    operator delete(*v69);
  _Unwind_Resume(a1);
}

uint64_t sub_1005671C4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  std::string::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  std::string::operator=((std::string *)(a1 + 184), (const std::string *)(a2 + 184));
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
    std::string::operator=((std::string *)(a1 + 328), (const std::string *)(a2 + 328));
    std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  }
  else
  {
    sub_1005682E4(a1 + 232, *(std::string **)(a2 + 232), *(std::string **)(a2 + 240), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 240) - *(_QWORD *)(a2 + 232)) >> 3));
    sub_100568680(a1 + 256, *(std::string **)(a2 + 256), *(std::string **)(a2 + 264), (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 7);
    sub_100568978(a1 + 280, *(std::string **)(a2 + 280), *(__int128 **)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 3));
    std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
    std::string::operator=((std::string *)(a1 + 328), (const std::string *)(a2 + 328));
    std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
    sub_100568AE8(a1 + 376, *(std::string **)(a2 + 376), *(__int128 **)(a2 + 384), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 384) - *(_QWORD *)(a2 + 376)) >> 3));
  }
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  return a1;
}

uint64_t sub_10056733C(uint64_t a1, const std::string *a2)
{
  std::string *v4;
  uint64_t v5;
  const std::string *v6;
  uint64_t size;
  char *v8;
  std::string *v9;
  char *v10;
  uint64_t v12;
  const std::string *v13;
  char *v14;
  std::string *v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  const std::string *v20;
  uint64_t v21;
  char *v22;
  std::string *v23;
  char *v24;
  uint64_t v26;
  const std::string *v27;
  char *v28;
  std::string *v29;
  char *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _BYTE *v34;
  char *v35;
  uint64_t v36;
  void *v37;
  char *v38;
  uint64_t v40;
  void *v41;
  char *v42;
  char v44;
  uint64_t v45;
  char v46;
  std::string::size_type v47;
  std::string *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string::size_type v51;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void *v60;
  std::string::size_type v61;
  uint64_t v62;
  _BYTE *v63;
  std::string::size_type v64;
  char *v65;
  uint64_t v66;
  char v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  char *v72;
  uint64_t v73;
  void *v74;
  char *v75;
  uint64_t v76;
  std::string::size_type v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  char *v81;
  uint64_t v82;
  void *v83;
  char *v84;
  uint64_t v86;
  std::string::size_type v87;
  uint64_t v88;
  _BYTE *v89;
  std::string::size_type v90;
  char *v91;
  _BYTE *v92;
  std::string::size_type v93;
  char *v94;
  _BYTE *v95;
  uint64_t v96;
  void *v97[2];
  uint64_t v98;
  void *v99[2];
  uint64_t v100;
  int v101;
  __int128 __p;
  uint64_t v103;
  _BYTE v104[32];
  void *v105[2];
  uint64_t v106;
  std::string __dst;
  _BYTE v108[416];
  uint64_t v109;
  std::string v110;
  std::string v111;
  std::string v112;
  std::string v113;
  std::string __str;
  _BYTE v115[17];

  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  v4 = (std::string *)(a1 + 88);
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 120) = 1;
  *(_BYTE *)(a1 + 124) = 0;
  v96 = a1 + 136;
  sub_10057F7F4(a1 + 136);
  sub_10057F7F4(a1 + 560);
  sub_100091AE8((_QWORD *)(a1 + 984), "UNKNOWN");
  memset(&__str, 0, sizeof(__str));
  memset(&v113, 0, sizeof(v113));
  memset(&v112, 0, sizeof(v112));
  memset(&v111, 0, sizeof(v111));
  v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a2->__r_.__value_.__l.__size_;
    if (size)
    {
      v6 = (const std::string *)a2->__r_.__value_.__r.__words[0];
      goto LABEL_6;
    }
LABEL_94:
    *(_QWORD *)a1 = ++qword_10097B6F8;
    *(_QWORD *)(a1 + 32) = time(0);
    std::string::operator=(v4, &__str);
    if (*(char *)(a1 + 111) < 0)
      v45 = *(_QWORD *)(a1 + 96);
    else
      LODWORD(v45) = *(unsigned __int8 *)(a1 + 111);
    *(_DWORD *)(a1 + 112) = v45;
    v109 = 0;
    memset(v108, 0, sizeof(v108));
    sub_10057F7F4((uint64_t)v108);
    v46 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
    else
      v47 = v113.__r_.__value_.__l.__size_;
    v48 = &v113;
    if (!v47)
    {
      v48 = &v112;
      v46 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
    }
    if (v46 < 0)
    {
      if (v47)
        v49 = v113.__r_.__value_.__l.__size_;
      else
        v49 = v112.__r_.__value_.__l.__size_;
      sub_10003430C(&__dst, v48->__r_.__value_.__l.__data_, v49);
    }
    else
    {
      __dst = *v48;
    }
    std::string::operator=((std::string *)&v108[16], &__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v50 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
    if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v50 = v112.__r_.__value_.__l.__size_;
    if (v50)
    {
      v106 = 0;
      *(_OWORD *)v105 = 0u;
      memset(v104, 0, sizeof(v104));
      std::string::operator=((std::string *)v104, &v112);
      if ((v104[23] & 0x80000000) != 0)
      {
        sub_10003430C(v99, *(void **)v104, *(unint64_t *)&v104[8]);
      }
      else
      {
        *(_OWORD *)v99 = *(_OWORD *)v104;
        v100 = *(_QWORD *)&v104[16];
      }
      v101 = *(_DWORD *)&v104[24];
      if (SHIBYTE(v106) < 0)
      {
        sub_10003430C(&__p, v105[0], (unint64_t)v105[1]);
      }
      else
      {
        __p = *(_OWORD *)v105;
        v103 = v106;
      }
      sub_100353318((uint64_t *)v108, (__int128 *)v99);
      if (SHIBYTE(v103) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v100) < 0)
        operator delete(v99[0]);
      if (SHIBYTE(v106) < 0)
        operator delete(v105[0]);
      if ((v104[23] & 0x80000000) != 0)
        operator delete(*(void **)v104);
    }
    v51 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v51 = v111.__r_.__value_.__l.__size_;
    if (v51)
    {
      memset(v104, 0, 24);
      std::string::operator=((std::string *)v104, &v111);
      if ((v104[23] & 0x80000000) != 0)
      {
        sub_10003430C(v97, *(void **)v104, *(unint64_t *)&v104[8]);
      }
      else
      {
        *(_OWORD *)v97 = *(_OWORD *)v104;
        v98 = *(_QWORD *)&v104[16];
      }
      sub_100353DF8((uint64_t)v108, (__int128 *)v97);
      if (SHIBYTE(v98) < 0)
        operator delete(v97[0]);
      if ((v104[23] & 0x80000000) != 0)
        operator delete(*(void **)v104);
    }
    sub_1005671C4(v96, (uint64_t)v108);
    sub_10057FE54(v108);
    goto LABEL_138;
  }
  if (!*((_BYTE *)&a2->__r_.__value_.__s + 23))
    goto LABEL_94;
  v6 = a2;
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
LABEL_6:
  v8 = (char *)v6 + size;
  if (size >= 9)
  {
    v9 = (std::string *)v6;
    do
    {
      v10 = (char *)memchr(v9, 66, size - 8);
      if (!v10)
        break;
      if (*(_QWORD *)v10 == 0x534D3A4E49474542 && v10[8] == 71)
        goto LABEL_15;
      v9 = (std::string *)(v10 + 1);
      size = v8 - (char *)v9;
    }
    while (v8 - (char *)v9 > 8);
  }
  v10 = v8;
LABEL_15:
  if (v10 == v8)
    v12 = -1;
  else
    v12 = v10 - (char *)v6;
  if ((v5 & 0x80) != 0)
  {
    v13 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    v5 = a2->__r_.__value_.__l.__size_;
  }
  else
  {
    v13 = a2;
  }
  if (v5 >= 9)
  {
    v14 = (char *)v13 + v5;
    v15 = (std::string *)v13;
    do
    {
      v16 = (char *)memchr(v15, 13, v5 - 8);
      if (!v16)
        break;
      if (*(_QWORD *)v16 == 0x534D3A444E450A0DLL && v16[8] == 71)
      {
        v18 = v16 - (char *)v13;
        if (v16 == v14)
          v18 = -1;
        if (v12 != -1 && v18 != -1)
        {
          std::string::basic_string((std::string *)v108, a2, v12 + 11, v18 - (v12 + 11), (std::allocator<char> *)v104);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          __str = *(std::string *)v108;
          v19 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
          {
            v20 = (const std::string *)a2->__r_.__value_.__r.__words[0];
            v21 = a2->__r_.__value_.__l.__size_;
          }
          else
          {
            v20 = a2;
            v21 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          }
          v22 = (char *)v20 + v21;
          if (v21 >= 10)
          {
            v23 = (std::string *)v20;
            do
            {
              v24 = (char *)memchr(v23, 66, v21 - 9);
              if (!v24)
                break;
              if (*(_QWORD *)v24 == 0x45423A4E49474542 && *((_WORD *)v24 + 4) == 22094)
                goto LABEL_48;
              v23 = (std::string *)(v24 + 1);
              v21 = v22 - (char *)v23;
            }
            while (v22 - (char *)v23 > 9);
          }
          v24 = v22;
LABEL_48:
          if (v24 == v22)
            v26 = -1;
          else
            v26 = v24 - (char *)v20;
          if ((v19 & 0x80) != 0)
          {
            v27 = (const std::string *)a2->__r_.__value_.__r.__words[0];
            v19 = a2->__r_.__value_.__l.__size_;
          }
          else
          {
            v27 = a2;
          }
          if (v19 >= 8)
          {
            v28 = (char *)v27 + v19;
            v29 = (std::string *)v27;
            while (1)
            {
              v30 = (char *)memchr(v29, 69, v19 - 7);
              if (!v30)
                break;
              if (*(_QWORD *)v30 == 0x564E45423A444E45)
              {
                v31 = v30 - (char *)v27;
                if (v30 == v28)
                  v31 = -1;
                if (v26 == -1 || v31 == -1)
                  goto LABEL_138;
                memset(v108, 0, 24);
                std::string::basic_string((std::string *)v108, a2, v26 + 12, v31 - (v26 + 12), (std::allocator<char> *)v104);
                v32 = v108[23];
                if (v108[23] >= 0)
                  v33 = v108[23];
                else
                  v33 = *(_QWORD *)&v108[8];
                if (v108[23] >= 0)
                  v34 = v108;
                else
                  v34 = *(_BYTE **)v108;
                v35 = &v34[v33];
                if (v33 >= 11)
                {
                  v36 = v33;
                  v37 = v34;
                  do
                  {
                    v38 = (char *)memchr(v37, 66, v36 - 10);
                    if (!v38)
                      break;
                    if (*(_QWORD *)v38 == 0x43563A4E49474542 && *(_QWORD *)(v38 + 3) == 0x44524143563A4E49)
                      goto LABEL_79;
                    v37 = v38 + 1;
                    v36 = v35 - (_BYTE *)v37;
                  }
                  while (v35 - (_BYTE *)v37 > 10);
                }
                v38 = &v34[v33];
LABEL_79:
                if (v38 == v35)
                  v40 = -1;
                else
                  v40 = v38 - v34;
                if (v33 >= 9)
                {
                  v41 = v34;
                  do
                  {
                    v42 = (char *)memchr(v41, 69, v33 - 8);
                    if (!v42)
                      break;
                    if (*(_QWORD *)v42 == 0x524143563A444E45 && v42[8] == 68)
                    {
                      v53 = v34;
                      v44 = 0;
                      v54 = v42 - v53;
                      if (v42 == v35)
                        v54 = -1;
                      if (v40 != -1 && v54 != -1)
                      {
                        memset(v104, 0, 24);
                        std::string::basic_string((std::string *)v104, (const std::string *)v108, v40 + 13, v54 - (v40 + 13), (std::allocator<char> *)&v110);
                        if (v104[23] >= 0)
                          v55 = v104[23];
                        else
                          v55 = *(_QWORD *)&v104[8];
                        if (v104[23] >= 0)
                          v56 = v104;
                        else
                          v56 = *(_BYTE **)v104;
                        v57 = &v56[v55];
                        v58 = &v56[v55];
                        if (v55 >= 4)
                        {
                          v59 = v55;
                          v60 = v56;
                          do
                          {
                            v58 = (char *)memchr(v60, 13, v59 - 3);
                            if (!v58)
                              break;
                            if (*(_DWORD *)v58 == 978192909)
                              goto LABEL_163;
                            v60 = v58 + 1;
                            v59 = v57 - (_BYTE *)v60;
                          }
                          while (v57 - (_BYTE *)v60 > 3);
                          v58 = &v56[v55];
                        }
LABEL_163:
                        if (v58 == v57)
                          v61 = 3;
                        else
                          v61 = v58 - v56 + 4;
                        if (v55 >= v61)
                        {
                          v63 = &v56[v61];
                          v64 = v55 - v61;
                          if ((uint64_t)(v55 - v61) >= 2)
                          {
                            do
                            {
                              v65 = (char *)memchr(v63, 13, v64 - 1);
                              if (!v65)
                                break;
                              if (*(_WORD *)v65 == 2573)
                                goto LABEL_173;
                              v63 = v65 + 1;
                              v64 = v57 - v63;
                            }
                            while (v57 - v63 > 1);
                          }
                          v65 = &v56[v55];
LABEL_173:
                          v62 = v65 - v56;
                          if (v65 == v57)
                            v62 = -1;
                        }
                        else
                        {
                          v62 = -1;
                        }
                        std::string::basic_string(&v110, (const std::string *)v104, v61, v62 - v61, (std::allocator<char> *)v115);
                        v66 = v104[23];
                        v67 = v104[23];
                        v69 = *(_QWORD *)&v104[8];
                        v68 = *(_BYTE **)v104;
                        v113 = v110;
                        if (v104[23] >= 0)
                          v70 = v104[23];
                        else
                          v70 = *(_QWORD *)&v104[8];
                        if (v104[23] >= 0)
                          v71 = v104;
                        else
                          v71 = *(_BYTE **)v104;
                        if (v70 >= 4)
                        {
                          v95 = *(_BYTE **)v104;
                          v72 = &v71[v70];
                          v73 = v70;
                          v74 = v71;
                          while (1)
                          {
                            v75 = (char *)memchr(v74, 84, v73 - 3);
                            if (!v75)
                              goto LABEL_191;
                            if (*(_DWORD *)v75 == 978077012)
                              break;
                            v74 = v75 + 1;
                            v73 = v72 - (_BYTE *)v74;
                            if (v72 - (_BYTE *)v74 < 4)
                              goto LABEL_191;
                          }
                          if (v75 == v72)
                          {
LABEL_191:
                            v68 = v95;
                            goto LABEL_192;
                          }
                          v76 = v75 - v71;
                          v68 = v95;
                          if (v75 - v71 != -1)
                          {
                            v77 = v76 + 4;
                            if (v70 >= (unint64_t)(v76 + 4))
                            {
                              v89 = &v71[v77];
                              v90 = v70 - v77;
                              if ((uint64_t)(v70 - v77) >= 2)
                              {
                                do
                                {
                                  v91 = (char *)memchr(v89, 13, v90 - 1);
                                  if (!v91)
                                    break;
                                  if (*(_WORD *)v91 == 2573)
                                    goto LABEL_216;
                                  v89 = v91 + 1;
                                  v90 = v72 - v89;
                                }
                                while (v72 - v89 > 1);
                              }
                              v91 = &v71[v70];
LABEL_216:
                              v78 = v91 - v71;
                              if (v91 == v72)
                                v78 = -1;
                            }
                            else
                            {
                              v78 = -1;
                            }
                            std::string::basic_string(&v110, (const std::string *)v104, v77, v78 - v77, (std::allocator<char> *)v115);
                            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v112.__r_.__value_.__l.__data_);
                            v112 = v110;
                            v66 = v104[23];
                            v69 = *(_QWORD *)&v104[8];
                            v68 = *(_BYTE **)v104;
                            v67 = v104[23];
                          }
                        }
LABEL_192:
                        if (v67 >= 0)
                          v79 = v66;
                        else
                          v79 = v69;
                        if (v67 >= 0)
                          v80 = v104;
                        else
                          v80 = v68;
                        if (v79 >= 6)
                        {
                          v81 = &v80[v79];
                          v82 = v79;
                          v83 = v80;
                          do
                          {
                            v84 = (char *)memchr(v83, 69, v82 - 5);
                            if (!v84)
                              break;
                            if (*(_DWORD *)v84 == 1229016389 && *((_WORD *)v84 + 2) == 14924)
                            {
                              if (v84 != v81)
                              {
                                v86 = v84 - v80;
                                if (v84 - v80 != -1)
                                {
                                  v87 = v86 + 8;
                                  if (v79 >= (unint64_t)(v86 + 8))
                                  {
                                    v92 = &v80[v87];
                                    v93 = v79 - v87;
                                    if ((uint64_t)(v79 - v87) >= 2)
                                    {
                                      do
                                      {
                                        v94 = (char *)memchr(v92, 13, v93 - 1);
                                        if (!v94)
                                          break;
                                        if (*(_WORD *)v94 == 2573)
                                          goto LABEL_226;
                                        v92 = v94 + 1;
                                        v93 = v81 - v92;
                                      }
                                      while (v81 - v92 > 1);
                                    }
                                    v94 = &v80[v79];
LABEL_226:
                                    v88 = v94 - v80;
                                    if (v94 == v81)
                                      v88 = -1;
                                  }
                                  else
                                  {
                                    v88 = -1;
                                  }
                                  std::string::basic_string(&v110, (const std::string *)v104, v87, v88 - v87, (std::allocator<char> *)v115);
                                  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v111.__r_.__value_.__l.__data_);
                                  v111 = v110;
                                  v67 = v104[23];
                                }
                              }
                              break;
                            }
                            v83 = v84 + 1;
                            v82 = v81 - (_BYTE *)v83;
                          }
                          while (v81 - (_BYTE *)v83 >= 6);
                        }
                        if (v67 < 0)
                          operator delete(*(void **)v104);
                        v44 = 1;
                        v32 = v108[23];
                      }
                      goto LABEL_91;
                    }
                    v41 = v42 + 1;
                    v33 = v35 - (_BYTE *)v41;
                  }
                  while (v35 - (_BYTE *)v41 >= 9);
                }
                v44 = 0;
LABEL_91:
                if (v32 < 0)
                  operator delete(*(void **)v108);
                if ((v44 & 1) == 0)
                  goto LABEL_138;
                goto LABEL_94;
              }
              v29 = (std::string *)(v30 + 1);
              v19 = v28 - (char *)v29;
              if (v28 - (char *)v29 < 8)
                goto LABEL_138;
            }
          }
        }
        break;
      }
      v15 = (std::string *)(v16 + 1);
      v5 = v14 - (char *)v15;
    }
    while (v14 - (char *)v15 >= 9);
  }
LABEL_138:
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return a1;
}

void sub_100567DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void **a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;
  void **v57;
  void **v58;
  uint64_t v59;

  if (a38 < 0)
    operator delete(__p);
  if (a56 < 0)
    operator delete(a51);
  if (*(char *)(v59 - 201) < 0)
    operator delete(*(void **)(v59 - 224));
  if (*(char *)(v59 - 169) < 0)
    operator delete(*(void **)(v59 - 192));
  if (*(char *)(v59 - 137) < 0)
    operator delete(*(void **)(v59 - 160));
  if (*(char *)(v59 - 105) < 0)
    operator delete(*(void **)(v59 - 128));
  if (*(char *)(v56 + 1007) < 0)
    operator delete(*a11);
  sub_10057FE54(a12);
  sub_10057FE54(a14);
  if (*(char *)(v56 + 111) < 0)
    operator delete(*v57);
  if (*(char *)(v56 + 87) < 0)
    operator delete(*(void **)(v56 + 64));
  if (*(char *)(v56 + 63) < 0)
    operator delete(*a13);
  if (*(char *)(v56 + 31) < 0)
    operator delete(*v58);
  _Unwind_Resume(a1);
}

void sub_100567F7C()
{
  JUMPOUT(0x100567F28);
}

void sub_100567F84()
{
  JUMPOUT(0x100567F30);
}

void sub_100567F90(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  void *v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  std::string v15;
  void *__dst[2];
  __int128 v17;
  void *__p[2];
  uint64_t v19;

  if (*(char *)(a1 + 39) < 0)
  {
    sub_10003430C(__dst, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a1 + 16);
    *(_QWORD *)&v17 = *(_QWORD *)(a1 + 32);
  }
  if (SBYTE7(v17) < 0)
  {
    v4 = __dst[1];
    operator delete(__dst[0]);
    if (v4)
      goto LABEL_6;
  }
  else if (BYTE7(v17))
  {
LABEL_6:
    sub_100582128(a1, 0, 391, 0);
    return;
  }
  v19 = 0;
  v17 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)__dst = 0u;
  sub_1003495B0((_QWORD *)a1, 0, (uint64_t)__dst);
  std::operator+<char>(&v13, "BEGIN:VCARD\r\nVERSION:2.1\r\nN;CHARSET=UTF-8:", __dst);
  v5 = std::string::append(&v13, "\r\nTEL;CHARSET=UTF-8:");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if ((SBYTE7(v17) & 0x80u) == 0)
    v7 = __dst;
  else
    v7 = (void **)__dst[0];
  if ((SBYTE7(v17) & 0x80u) == 0)
    v8 = BYTE7(v17);
  else
    v8 = (std::string::size_type)__dst[1];
  v9 = std::string::append(&v14, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v15, "\r\nEND:VCARD\r\n");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v17) < 0)
    operator delete(__dst[0]);
}

void sub_100568130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  sub_100353374((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_10056818C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[424];

  sub_10057FB5C(v4, a1 + 136);
  sub_100567F90((uint64_t)v4, a2);
  return sub_10057FE54(v4);
}

void sub_1005681D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10057FE54(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005681E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[424];

  sub_10057FB5C(v4, a1 + 560);
  sub_100567F90((uint64_t)v4, a2);
  return sub_10057FE54(v4);
}

void sub_100568228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10057FE54(va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10056823C@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  tm *v5;
  const char *v6;
  size_t v7;
  uint64_t v9;
  _QWORD v10[2];

  v9 = 0;
  v10[0] = 0;
  *(_QWORD *)((char *)v10 + 5) = 0;
  v5 = localtime((const time_t *)(a1 + 32));
  if (a2)
  {
    v6 = "%Y%m%dT%H%M%S%z";
    v7 = 21;
  }
  else
  {
    v6 = "%Y%m%dT%H%M%S";
    v7 = 16;
  }
  strftime((char *)&v9, v7, v6, v5);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return sub_100091AE8(a3, (char *)&v9);
}

void sub_1005682E4(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= a4)
  {
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) >= a4)
    {
      sub_10056860C((int)&v17, __str, a3, v9);
      v14 = v13;
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 != v13)
      {
        do
        {
          v15 -= 56;
          sub_1003554E4(v8, v15);
        }
        while (v15 != v14);
      }
      *(_QWORD *)(a1 + 8) = v14;
    }
    else
    {
      v12 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
      sub_10056860C((int)&v16, __str, v12, v9);
      sub_100568490((_BYTE *)a1, (uint64_t)v12, (uint64_t)a3);
    }
  }
  else
  {
    sub_100568508((void **)a1);
    if (a4 > 0x492492492492492)
      abort();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v10;
    sub_1003A201C((_QWORD *)a1, v11);
    sub_100568490((_BYTE *)a1, (uint64_t)__str, (uint64_t)a3);
  }
}

_BYTE *sub_100568490(_BYTE *result, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = sub_100568574((int)v3 + 16, (_QWORD *)(v4 + v7), (__int128 *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *((_QWORD *)v3 + 1) = v4;
  return result;
}

void sub_100568500(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100568508(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        sub_1003554E4((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_BYTE *sub_100568574(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v5;
  _BYTE *result;
  __int128 v7;

  if (*((char *)a3 + 23) < 0)
  {
    sub_10003430C(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a3 + 6);
  result = __dst + 4;
  if (*((char *)a3 + 55) < 0)
    return sub_10003430C(result, *((void **)a3 + 4), *((_QWORD *)a3 + 5));
  v7 = a3[2];
  __dst[6] = *((_QWORD *)a3 + 6);
  *(_OWORD *)result = v7;
  return result;
}

void sub_1005685F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_10056860C(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    LODWORD(this[1].__r_.__value_.__l.__data_) = v5[1].__r_.__value_.__l.__data_;
    std::string::operator=((std::string *)((char *)this + 32), (std::string *)((char *)v5 + 32));
    this = (std::string *)((char *)this + 56);
    v5 = (std::string *)((char *)v5 + 56);
  }
  while (v5 != v6);
  return v6;
}

void sub_100568680(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (a4 <= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 7)
  {
    v13 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 7;
    if (v13 >= a4)
    {
      sub_1005688E0((int)&v19, __str, a3, v9);
      v16 = v15;
      v17 = *(_QWORD *)(a1 + 8);
      if (v17 != v15)
      {
        do
        {
          v17 -= 128;
          sub_1003557C8(v8, v17);
        }
        while (v17 != v16);
      }
      *(_QWORD *)(a1 + 8) = v16;
    }
    else
    {
      v14 = (std::string *)((char *)__str + 128 * v13);
      sub_1005688E0((int)&v18, __str, v14, v9);
      sub_1005687C8((char *)a1, (uint64_t)v14, (uint64_t)a3);
    }
  }
  else
  {
    sub_100568838((void **)a1);
    if (a4 >> 57)
      abort();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 6;
    if (v10 >> 6 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFF80)
      v12 = 0x1FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_1005688A4((_QWORD *)a1, v12);
    sub_1005687C8((char *)a1, (uint64_t)__str, (uint64_t)a3);
  }
}

char *sub_1005687C8(char *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = sub_10035583C((char *)(v4 + v7), (__int128 *)(a2 + v7));
      v7 += 128;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *((_QWORD *)v3 + 1) = v4;
  return result;
}

void sub_100568830(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100568838(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 128;
        sub_1003557C8((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_1005688A4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 57)
    abort();
  result = (char *)sub_100355720((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

std::string *sub_1005688E0(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    std::string::operator=(this + 2, v5 + 2);
    std::string::operator=(this + 3, v5 + 3);
    std::string::operator=(this + 4, v5 + 4);
    LODWORD(this[5].__r_.__value_.__l.__data_) = v5[5].__r_.__value_.__l.__data_;
    this = (std::string *)((char *)this + 128);
    v5 = (std::string *)((char *)v5 + 128);
  }
  while (v5 != v6);
  return v6;
}

void sub_100568978(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  int v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_10034750C((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_1002A4750((_QWORD *)a1, v11);
    v12 = sub_1002A47E0(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    sub_100455F48(__str, v13, v9);
    v12 = sub_1002A47E0(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_100455F48(__str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0)
        operator delete(*(void **)(v16 - 24));
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_100568AD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100568AE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100568AE8(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  int v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_10034750C((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_1002A4750((_QWORD *)a1, v11);
    v12 = sub_1002A47E0(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    sub_100455F48(__str, v13, v9);
    v12 = sub_1002A47E0(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_100455F48(__str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0)
        operator delete(*(void **)(v16 - 24));
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_100568C48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100568C50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100568C58(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  uint64_t v13;
  _OWORD v14[4];
  void *v15[2];
  __int128 v16;
  __int128 v17;
  _OWORD v18[9];
  uint64_t v19;

  v19 = 0;
  v17 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  memset(v14, 0, sizeof(v14));
  sub_100272ADC((uint64_t)v14);
  if (*(_BYTE *)(a1 + 120))
  {
    v2 = sub_1002614D8(v14, (uint64_t)"LENGTH:", 7);
    v3 = (_OWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
    {
      sub_10003430C(__p, *(void **)(a1 + 88), *(_QWORD *)(a1 + 96));
    }
    else
    {
      *(_OWORD *)__p = *v3;
      v13 = *(_QWORD *)(a1 + 104);
    }
    v4 = (char *)HIBYTE(v13);
    if (v13 < 0)
      v4 = (char *)__p[1];
    v5 = (_QWORD *)std::ostream::operator<<(v2, v4 + 22);
    sub_1002614D8(v5, (uint64_t)"\r\n", 2);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
    v6 = sub_1002614D8(v14, (uint64_t)"BEGIN:MSG", 9);
    sub_1002614D8(v6, (uint64_t)"\r\n", 2);
    if (*(char *)(a1 + 111) < 0)
    {
      sub_10003430C(__p, *(void **)(a1 + 88), *(_QWORD *)(a1 + 96));
    }
    else
    {
      *(_OWORD *)__p = *v3;
      v13 = *(_QWORD *)(a1 + 104);
    }
    if (v13 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if (v13 >= 0)
      v8 = HIBYTE(v13);
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_1002614D8(v14, (uint64_t)v7, v8);
    sub_1002614D8(v9, (uint64_t)"\r\n", 2);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
    v10 = sub_1002614D8(v14, (uint64_t)"END:MSG", 7);
    sub_1002614D8(v10, (uint64_t)"\r\n", 2);
  }
  std::stringbuf::str((char *)v14 + 8);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[1]);
  std::streambuf::~streambuf((char *)v14 + 8);
  return std::ios::~ios(v18);
}

void sub_100568E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  sub_100272CFC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100568EA8(uint64_t a1, char a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void **v21;
  void *v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *__p[2];
  uint64_t v31;
  _OWORD v32[4];
  void *v33[2];
  __int128 v34;
  __int128 v35;
  _OWORD v36[9];
  uint64_t v37;

  v37 = 0;
  v35 = 0u;
  memset(v36, 0, sizeof(v36));
  *(_OWORD *)v33 = 0u;
  v34 = 0u;
  memset(v32, 0, sizeof(v32));
  sub_100272ADC((uint64_t)v32);
  v4 = sub_1002614D8(v32, (uint64_t)"BEGIN:BMSG", 10);
  sub_1002614D8(v4, (uint64_t)"\r\n", 2);
  v5 = sub_1002614D8(v32, (uint64_t)"VERSION:1.0", 11);
  sub_1002614D8(v5, (uint64_t)"\r\n", 2);
  v6 = sub_1002614D8(v32, (uint64_t)"STATUS:", 7);
  if (*(_BYTE *)(a1 + 122))
    v7 = "READ";
  else
    v7 = "UNREAD";
  if (*(_BYTE *)(a1 + 122))
    v8 = 4;
  else
    v8 = 6;
  v9 = sub_1002614D8(v6, (uint64_t)v7, v8);
  sub_1002614D8(v9, (uint64_t)"\r\n", 2);
  v10 = sub_1002614D8(v32, (uint64_t)"TYPE:SMS_GSM", 12);
  sub_1002614D8(v10, (uint64_t)"\r\n", 2);
  v11 = sub_1002614D8(v32, (uint64_t)"FOLDER:telecom/msg/inbox", 24);
  sub_1002614D8(v11, (uint64_t)"\r\n", 2);
  if ((a2 & 1) == 0)
  {
    v12 = sub_1002614D8(v32, (uint64_t)"NOTIFICATION:1", 14);
    sub_1002614D8(v12, (uint64_t)"\r\n", 2);
  }
  sub_10056818C(a1, (uint64_t)__p);
  if (v31 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if (v31 >= 0)
    v14 = HIBYTE(v31);
  else
    v14 = (uint64_t)__p[1];
  sub_1002614D8(v32, (uint64_t)v13, v14);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  v15 = sub_1002614D8(v32, (uint64_t)"BEGIN:BENV", 10);
  sub_1002614D8(v15, (uint64_t)"\r\n", 2);
  sub_1005681E4(a1, (uint64_t)__p);
  if (v31 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if (v31 >= 0)
    v17 = HIBYTE(v31);
  else
    v17 = (uint64_t)__p[1];
  sub_1002614D8(v32, (uint64_t)v16, v17);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  v18 = sub_1002614D8(v32, (uint64_t)"BEGIN:BBODY", 11);
  sub_1002614D8(v18, (uint64_t)"\r\n", 2);
  if (*(_BYTE *)(a1 + 120))
  {
    v19 = sub_1002614D8(v32, (uint64_t)"CHARSET:UTF-8", 13);
    sub_1002614D8(v19, (uint64_t)"\r\n", 2);
    v20 = sub_1002614D8(v32, (uint64_t)"LANGUAGE:", 9);
    if (*(char *)(a1 + 1007) < 0)
    {
      sub_10003430C(__p, *(void **)(a1 + 984), *(_QWORD *)(a1 + 992));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a1 + 984);
      v31 = *(_QWORD *)(a1 + 1000);
    }
    v21 = v31 >= 0 ? __p : (void **)__p[0];
    v22 = v31 >= 0 ? (void *)HIBYTE(v31) : __p[1];
    v23 = sub_1002614D8(v20, (uint64_t)v21, (uint64_t)v22);
    sub_1002614D8(v23, (uint64_t)"\r\n", 2);
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
  }
  sub_100568C58(a1);
  if (v31 >= 0)
    v24 = __p;
  else
    v24 = (void **)__p[0];
  if (v31 >= 0)
    v25 = HIBYTE(v31);
  else
    v25 = (uint64_t)__p[1];
  sub_1002614D8(v32, (uint64_t)v24, v25);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  v26 = sub_1002614D8(v32, (uint64_t)"END:BBODY", 9);
  sub_1002614D8(v26, (uint64_t)"\r\n", 2);
  v27 = sub_1002614D8(v32, (uint64_t)"END:BENV", 8);
  sub_1002614D8(v27, (uint64_t)"\r\n", 2);
  v28 = sub_1002614D8(v32, (uint64_t)"END:BMSG", 8);
  sub_1002614D8(v28, (uint64_t)"\r\n", 2);
  std::stringbuf::str((char *)v32 + 8);
  if (SHIBYTE(v34) < 0)
    operator delete(v33[1]);
  std::streambuf::~streambuf((char *)v32 + 8);
  return std::ios::~ios(v36);
}

void sub_1005692B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  sub_100272CFC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1005692FC(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5)
{
  __int16 v10;
  _QWORD *v11;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v14;
  _QWORD *v15;
  std::string *v16;
  std::string::size_type v17;
  _QWORD *v18;
  _QWORD *v19;
  std::string *v20;
  std::string::size_type v21;
  _QWORD *v22;
  _QWORD *v23;
  std::string *v24;
  std::string::size_type v25;
  _QWORD *v26;
  _QWORD *v27;
  std::string *p_dst;
  std::string::size_type v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  std::string *v36;
  std::string::size_type v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  const char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  const char *v52;
  uint64_t v53;
  _QWORD *v54;
  std::string v56;
  std::string __dst;
  std::string __p;
  _OWORD v59[4];
  void *v60[2];
  __int128 v61;
  __int128 v62;
  _OWORD v63[9];
  uint64_t v64;
  char v65;

  v64 = 0;
  v62 = 0u;
  memset(v63, 0, sizeof(v63));
  *(_OWORD *)v60 = 0u;
  v61 = 0u;
  memset(v59, 0, sizeof(v59));
  sub_100272ADC((uint64_t)v59);
  if (a4)
    v10 = a4;
  else
    v10 = -1;
  sub_1002614D8(v59, (uint64_t)"<msg ", 5);
  v11 = sub_1002614D8(v59, (uint64_t)"handle=\"", 8);
  sub_1003489E8(a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v14 = sub_1002614D8(v11, (uint64_t)p_p, size);
  sub_1002614D8(v14, (uint64_t)"\" ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v10 & 1) == 0)
      goto LABEL_28;
  }
  else if ((v10 & 1) == 0)
  {
    goto LABEL_28;
  }
  v15 = sub_1002614D8(v59, (uint64_t)"subject=\"", 9);
  if (*(char *)(a1 + 87) < 0)
    sub_10003430C(&v56, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
  else
    v56 = *(std::string *)(a1 + 64);
  std::string::basic_string(&__dst, &v56, 0, a3, (std::allocator<char> *)&v65);
  sub_1004176F0((uint64_t)&__dst, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &__p;
  else
    v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v17 = __p.__r_.__value_.__l.__size_;
  v18 = sub_1002614D8(v15, (uint64_t)v16, v17);
  sub_1002614D8(v18, (uint64_t)"\" ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if ((v10 & 2) == 0)
      goto LABEL_38;
    goto LABEL_29;
  }
  operator delete(v56.__r_.__value_.__l.__data_);
  if ((v10 & 2) == 0)
    goto LABEL_38;
LABEL_29:
  v19 = sub_1002614D8(v59, (uint64_t)"datetime=\"", 10);
  sub_10056823C(a1, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &__p;
  else
    v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v21 = __p.__r_.__value_.__l.__size_;
  v22 = sub_1002614D8(v19, (uint64_t)v20, v21);
  sub_1002614D8(v22, (uint64_t)"\" ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v10 & 4) == 0)
    goto LABEL_51;
LABEL_38:
  v23 = sub_1002614D8(v59, (uint64_t)"sender_name=\"", 13);
  if (*(char *)(a1 + 175) < 0)
    sub_10003430C(&__dst, *(void **)(a1 + 152), *(_QWORD *)(a1 + 160));
  else
    __dst = *(std::string *)(a1 + 152);
  sub_1004176F0((uint64_t)&__dst, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &__p;
  else
    v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v25 = __p.__r_.__value_.__l.__size_;
  v26 = sub_1002614D8(v23, (uint64_t)v24, v25);
  sub_1002614D8(v26, (uint64_t)"\" ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v10 & 8) == 0)
      goto LABEL_63;
  }
  else
  {
LABEL_51:
    if ((v10 & 8) == 0)
      goto LABEL_63;
  }
  memset(&__p, 0, sizeof(__p));
  sub_100569F14((_QWORD *)(a1 + 136), &__p);
  memset(&__dst, 0, sizeof(__dst));
  sub_1004176F0((uint64_t)&__p, &__dst);
  v27 = sub_1002614D8(v59, (uint64_t)"sender_addressing=\"", 19);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v29 = __dst.__r_.__value_.__l.__size_;
  v30 = sub_1002614D8(v27, (uint64_t)p_dst, v29);
  sub_1002614D8(v30, (uint64_t)"\" ", 2);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v10 & 0x10) == 0)
    goto LABEL_74;
LABEL_63:
  v31 = sub_1002614D8(v59, (uint64_t)"recipient_name=\"", 16);
  if (*(char *)(a1 + 599) < 0)
    sub_10003430C(&__p, *(void **)(a1 + 576), *(_QWORD *)(a1 + 584));
  else
    __p = *(std::string *)(a1 + 576);
  v32 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &__p
      : (std::string *)__p.__r_.__value_.__r.__words[0];
  v33 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? HIBYTE(__p.__r_.__value_.__r.__words[2])
      : __p.__r_.__value_.__l.__size_;
  v34 = sub_1002614D8(v31, (uint64_t)v32, v33);
  sub_1002614D8(v34, (uint64_t)"\" ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v10 & 0x20) == 0)
      goto LABEL_84;
  }
  else
  {
LABEL_74:
    if ((v10 & 0x20) == 0)
      goto LABEL_84;
  }
  v35 = sub_1002614D8(v59, (uint64_t)"recipient_addressing=\"", 22);
  sub_100569F14((_QWORD *)(a1 + 560), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &__p;
  else
    v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v37 = __p.__r_.__value_.__l.__size_;
  v38 = sub_1002614D8(v35, (uint64_t)v36, v37);
  sub_1002614D8(v38, (uint64_t)"\" ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_84:
  if ((v10 & 0x40) != 0 && a2 <= 3)
    sub_1002614D8(v59, (uint64_t)off_100937A98[a2], qword_100742670[a2]);
  if ((v10 & 0x80) != 0)
  {
    v39 = sub_1002614D8(v59, (uint64_t)"size=\"", 6);
    v40 = (_QWORD *)std::ostream::operator<<(v39, *(unsigned int *)(a1 + 112));
    sub_1002614D8(v40, (uint64_t)"\" ", 2);
  }
  if ((v10 & 0x100) != 0)
  {
    v41 = sub_1002614D8(v59, (uint64_t)"reception_status=\"", 18);
    v42 = sub_1002614D8(v41, (uint64_t)"complete", 8);
    sub_1002614D8(v42, (uint64_t)"\" ", 2);
  }
  if ((v10 & 0x200) != 0)
  {
    v43 = sub_1002614D8(v59, (uint64_t)"text=\"", 6);
    v44 = sub_1002614D8(v43, (uint64_t)"yes", 3);
    sub_1002614D8(v44, (uint64_t)"\" ", 2);
  }
  if ((v10 & 0x400) != 0)
  {
    v45 = sub_1002614D8(v59, (uint64_t)"attachment_size=\"", 17);
    v46 = (_QWORD *)std::ostream::operator<<(v45, *(unsigned int *)(a1 + 116));
    sub_1002614D8(v46, (uint64_t)"\" ", 2);
  }
  if ((v10 & 0x1000) != 0)
  {
    v47 = sub_1002614D8(v59, (uint64_t)"read=\"", 6);
    if (*(_BYTE *)(a1 + 122))
      v48 = "yes";
    else
      v48 = "no";
    if (*(_BYTE *)(a1 + 122))
      v49 = 3;
    else
      v49 = 2;
    v50 = sub_1002614D8(v47, (uint64_t)v48, v49);
    sub_1002614D8(v50, (uint64_t)"\" ", 2);
  }
  if ((v10 & 0x2000) != 0)
  {
    v51 = sub_1002614D8(v59, (uint64_t)"sent=\"", 6);
    if (*(_BYTE *)(a1 + 123))
      v52 = "yes";
    else
      v52 = "no";
    if (*(_BYTE *)(a1 + 123))
      v53 = 3;
    else
      v53 = 2;
    v54 = sub_1002614D8(v51, (uint64_t)v52, v53);
    sub_1002614D8(v54, (uint64_t)"\" ", 2);
  }
  sub_1002614D8(v59, (uint64_t)"/>", 2);
  std::stringbuf::str((char *)v59 + 8);
  if (SHIBYTE(v61) < 0)
    operator delete(v60[1]);
  std::streambuf::~streambuf((char *)v59 + 8);
  return std::ios::~ios(v63);
}

void sub_1005699BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  sub_100272CFC((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_100569A9C(uint64_t result)
{
  *(_BYTE *)result = -1;
  *(_DWORD *)(result + 4) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_100569AB4(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void **v6;

  v4 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = (void **)(a1 + 16);
  while (v2 != v4)
  {
    v2 -= 1008;
    sub_100569FF4(a1 + 32, v2);
  }
  *(_QWORD *)(a1 + 24) = v4;
  v6 = v3;
  sub_10056A078(&v6);
  return a1;
}

uint64_t sub_100569B2C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[3];
  if (v3 >= a1[4])
  {
    result = sub_10056A0FC(a1 + 2, a2);
  }
  else
  {
    sub_100569D24(a1[3], a2);
    result = v3 + 1008;
    a1[3] = v3 + 1008;
  }
  a1[3] = result;
  return result;
}

void sub_100569B74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100569B7C(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t i;
  void **v5;
  uint64_t v6;
  void *__p[2];
  unsigned __int8 v9;
  _OWORD v10[4];
  void *v11[2];
  __int128 v12;
  __int128 v13;
  _BYTE v14[144];
  uint64_t v15;

  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v12 = 0u;
  v13 = 0u;
  *(_OWORD *)v11 = 0u;
  memset(v10, 0, sizeof(v10));
  sub_100272ADC((uint64_t)v10);
  sub_1002614D8(v10, (uint64_t)"<MAP-msg-listing version=\"1.0\">", 31);
  for (i = *((_QWORD *)a1 + 2); i != *((_QWORD *)a1 + 3); i += 1008)
  {
    sub_1005692FC(i, a2, *a1, *((_DWORD *)a1 + 1), a1[8]);
    if ((v9 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v6 = v9;
    else
      v6 = (uint64_t)__p[1];
    sub_1002614D8(v10, (uint64_t)v5, v6);
    if ((char)v9 < 0)
      operator delete(__p[0]);
  }
  sub_1002614D8(v10, (uint64_t)"</MAP-msg-listing>", 18);
  std::stringbuf::str((char *)v10 + 8);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[1]);
  std::streambuf::~streambuf((char *)v10 + 8);
  return std::ios::~ios(v14);
}

void sub_100569CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100272CFC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100569D24(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 64), *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v6;
  }
  if (*(char *)(a2 + 111) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 88), *(void **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
  }
  v8 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v8;
  sub_10057FB5C(a1 + 136, a2 + 136);
  sub_10057FB5C(a1 + 560, a2 + 560);
  v9 = (_BYTE *)(a1 + 984);
  if (*(char *)(a2 + 1007) < 0)
  {
    sub_10003430C(v9, *(void **)(a2 + 984), *(_QWORD *)(a2 + 992));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 984);
    *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1000);
    *(_OWORD *)v9 = v10;
  }
  return a1;
}

void sub_100569E90(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;

  sub_10057FE54(v7);
  sub_10057FE54(v6);
  if (v1[111] < 0)
    operator delete(*v5);
  if (v1[87] < 0)
    operator delete(*v4);
  if (v1[63] < 0)
    operator delete(*v3);
  if (v1[31] < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_100569F14(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  void *v5[2];
  uint64_t v6;
  void *__p;
  char v8;
  void *v9[2];
  unsigned __int8 v10;
  void *v11;
  char v12;

  sub_1003495B0(a1, 0, (uint64_t)v9);
  v4 = v10;
  if ((v10 & 0x80u) != 0)
    v4 = (unint64_t)v9[1];
  if (v4)
  {
    sub_1003495B0(a1, 0, (uint64_t)v5);
    *(_OWORD *)a2 = *(_OWORD *)v5;
    a2[2] = v6;
    v5[1] = 0;
    v6 = 0;
    v5[0] = 0;
    if (v8 < 0)
    {
      operator delete(__p);
      if (SHIBYTE(v6) < 0)
        operator delete(v5[0]);
    }
  }
  else
  {
    sub_1003496AC(a1, 0, a2);
  }
  if (v12 < 0)
    operator delete(v11);
  if ((char)v10 < 0)
    operator delete(v9[0]);
}

void sub_100569FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_100353374((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100569FF4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 1007) < 0)
    operator delete(*(void **)(a2 + 984));
  sub_10057FE54(a2 + 560);
  sub_10057FE54(a2 + 136);
  if (*(char *)(a2 + 111) < 0)
    operator delete(*(void **)(a2 + 88));
  if (*(char *)(a2 + 87) < 0)
    operator delete(*(void **)(a2 + 64));
  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void sub_10056A078(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 1008;
        sub_100569FF4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10056A0FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v2 = *a1;
  v3 = 0xEFBEFBEFBEFBEFBFLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x41041041041041)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0xEFBEFBEFBEFBEFBFLL * ((v8 - v2) >> 4);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x20820820820820)
    v10 = 0x41041041041041;
  else
    v10 = v4;
  v18 = v7;
  if (v10)
    v11 = (char *)sub_10056A294(v7, v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[1008 * v3];
  v17 = &v11[1008 * v10];
  sub_100569D24((uint64_t)v15, a2);
  v16 = v15 + 1008;
  sub_10056A210(a1, &v14);
  v12 = a1[1];
  sub_10056A2DC(&v14);
  return v12;
}

void sub_10056A1FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10056A2DC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10056A210(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 1008;
    result = sub_100569D24(result - 1008, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_10056A294(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x41041041041042)
    sub_10007ABD4();
  return operator new(1008 * a2);
}

void **sub_10056A2DC(void **a1)
{
  sub_10056A30C(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_10056A30C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 1008;
    sub_100569FF4(v4, i - 1008);
  }
}

void **sub_10056A350(void **a1)
{
  sub_10035940C(a1);
  return a1;
}

void sub_10056A374(uint64_t a1, __int16 a2, int a3)
{
  *(_WORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 124) = a3;
  operator new();
}

void sub_10056A64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  void **v35;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v34 + 119) < 0)
    operator delete(*(void **)(v34 + 96));
  if (*(char *)(v34 + 95) < 0)
    operator delete(*(void **)(v34 + 72));
  if (*(char *)(v34 + 71) < 0)
    operator delete(*(void **)(v34 + 48));
  if (*(char *)(v34 + 47) < 0)
    operator delete(*v35);
  _Unwind_Resume(exception_object);
}

std::string *sub_10056A768@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t i;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string v13;
  std::string v14;
  void *__p[2];
  int64_t v16;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "<folder-listing version=\"1.0\">\n");
  for (i = *(_QWORD *)(a1 + 16); i != a1 + 8; i = *(_QWORD *)(i + 8))
  {
    v5 = *(_QWORD *)(i + 16);
    if (*(char *)(v5 + 55) < 0)
      sub_10003430C(&v13, *(void **)(v5 + 32), *(_QWORD *)(v5 + 40));
    else
      v13 = *(std::string *)(v5 + 32);
    v6 = std::string::insert(&v13, 0, "<folder name=\"");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v14, "\"/>\n");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v16 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (v16 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if (v16 >= 0)
      v11 = HIBYTE(v16);
    else
      v11 = (std::string::size_type)__p[1];
    std::string::append(a2, (const std::string::value_type *)v10, v11);
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  return std::string::append(a2, "</folder-listing>\n");
}

void sub_10056A8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10056A928(std::string *a1, _QWORD *a2, int a3)
{
  std::string::size_type v6;
  uint64_t v7;
  char v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  void *v14;
  const char *p_dst;
  const char *v16;
  int v17;
  std::string::size_type *v18;
  std::string *p_p;
  std::string::size_type size;
  NSObject *v21;
  char v23;
  __int128 __dst;
  uint64_t v25;
  std::string __str;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  std::string __p;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  sub_10056DD70(&v27, a1->__r_.__value_.__l.__size_ + 8);
  memset(&__str, 0, sizeof(__str));
  if (byte_100999798[23] < 0)
    sub_10003430C(&__str, *(void **)byte_100999798, *(unint64_t *)&byte_100999798[8]);
  else
    __str = *(std::string *)byte_100999798;
  if (a3 && (v6 = *(_QWORD *)a1->__r_.__value_.__l.__size_) != 0)
  {
    v7 = 0;
    a1->__r_.__value_.__l.__size_ = v6;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    v7 = 1738;
  }
  if (*((char *)a2 + 23) < 0)
  {
    v10 = a2[1];
    if (v10)
    {
      if (v10 != 1)
      {
LABEL_16:
        v11 = v28;
        if (v28 == &v27)
        {
LABEL_29:
          if ((v8 & 1) == 0)
            goto LABEL_44;
          goto LABEL_35;
        }
        while (1)
        {
          v12 = v11[2];
          if (*((char *)a2 + 23) < 0)
          {
            sub_10003430C(&__dst, (void *)*a2, a2[1]);
          }
          else
          {
            __dst = *(_OWORD *)a2;
            v25 = a2[2];
          }
          v13 = SHIBYTE(v25);
          v14 = (void *)__dst;
          if (v25 >= 0)
            p_dst = (const char *)&__dst;
          else
            p_dst = (const char *)__dst;
          v16 = (const char *)(v12 + 32);
          if (*(char *)(v12 + 55) < 0)
            v16 = *(const char **)v16;
          v17 = strcasecmp(p_dst, v16);
          if (v13 < 0)
            operator delete(v14);
          if (!v17)
            break;
          v11 = (uint64_t *)v11[1];
          if (v11 == &v27)
            goto LABEL_29;
        }
        v18 = (std::string::size_type *)(v11 + 2);
        goto LABEL_34;
      }
      v9 = (_BYTE *)*a2;
      goto LABEL_15;
    }
  }
  else if (*((_BYTE *)a2 + 23))
  {
    v9 = a2;
    if (*((_BYTE *)a2 + 23) != 1)
      goto LABEL_16;
LABEL_15:
    if (*v9 != 47)
      goto LABEL_16;
LABEL_32:
    v18 = &a1->__r_.__value_.__r.__words[2];
LABEL_34:
    a1->__r_.__value_.__l.__size_ = *v18;
    goto LABEL_35;
  }
  if ((a3 & 1) == 0)
    goto LABEL_32;
LABEL_35:
  sub_10056A768(a1->__r_.__value_.__l.__size_, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(&__str, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::operator=(a1 + 1, &__str);
  v7 = 0;
LABEL_44:
  v23 = 0;
  sub_100043758(&v23);
  sub_100162968(LOWORD(a1->__r_.__value_.__l.__data_), v7);
  v21 = qword_1009999B8;
  if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) < 0)
      a2 = (_QWORD *)*a2;
    LODWORD(__p.__r_.__value_.__l.__data_) = 67109378;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v7;
    LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)a2;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Setpath returning %{bluetooth:OI_STATUS}u for folder: %s", (uint8_t *)&__p, 0x12u);
  }
  sub_100043728(&v23);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  sub_10002074C(&v27);
  return v7;
}

void sub_10056ABFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_10002074C(&a24);
  _Unwind_Resume(a1);
}

double sub_10056AC64(uint64_t a1, unsigned __int8 *a2)
{
  void **v3;
  double result;
  __int128 v5;
  uint64_t v6;

  sub_100569B7C(a2, *(_DWORD *)(a1 + 4));
  v3 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v3);
  result = *(double *)&v5;
  *(_OWORD *)v3 = v5;
  *(_QWORD *)(a1 + 64) = v6;
  return result;
}

uint64_t sub_10056ACC0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10056DE08(v2);
    operator delete();
  }
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_10056AD40(uint64_t a1)
{
  uint64_t result;

  result = sub_100278350(a1, 21);
  *(_QWORD *)result = off_100937AC8;
  *(_QWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 264) = 0;
  *(_QWORD *)(result + 272) = 0;
  *(_QWORD *)(result + 256) = off_100937B48;
  *(_WORD *)(result + 280) = 0;
  return result;
}

uint64_t sub_10056AD78()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  __int128 v10;

  v10 = off_100937B78;
  v9 = 0;
  sub_100043758(&v9);
  v0 = sub_1001616A8(off_10097B700, (uint64_t)off_10097B710, (uint64_t *)&v10, 393855, 2);
  if ((_DWORD)v0)
  {
    v1 = qword_1009999B8;
    if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_ERROR))
      sub_100704560(v0, v1, v2, v3, v4, v5, v6, v7);
  }
  sub_100043728(&v9);
  return v0;
}

void sub_10056AE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10056AE2C()
{
  char v1;

  v1 = 0;
  sub_100043758(&v1);
  sub_100161A14();
  sub_100043728(&v1);
  return 0;
}

void sub_10056AE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10056AE7C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  char v10;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  void **v14;

  v4 = qword_1009999B8;
  if (*(_QWORD *)(a1 + 288) != a2 && os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "MAP is being asked to disconnect a device that it's not tracking", (uint8_t *)__p, 2u);
    v4 = qword_1009999B8;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10056B034(a1, __p);
    v5 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending disconnect indication to device %{public}s", buf, 0xCu);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  v10 = 0;
  sub_100043758(&v10);
  v6 = sub_100161B98(*(unsigned __int16 *)(a1 + 280));
  if ((_DWORD)v6)
  {
    v7 = qword_1009999B8;
    if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a2, __p);
      sub_1007045C4((char *)__p, (uint64_t)buf, v6, v7);
    }
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  sub_100043728(&v10);
  return v8;
}

void sub_10056B014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_10056B034(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
    sub_10043E5F8(v2, a2);
  else
    sub_100091AE8(a2, "<null>");
}

uint64_t sub_10056B050(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  int v15;
  _BOOL4 v16;
  NSObject *v17;
  void **v18;
  int v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  void *__p[2];
  uint64_t v26;
  char v27;
  uint8_t v28[4];
  int v29;
  _BYTE v30[18];
  uint8_t buf[32];
  uint8_t v32[16];
  __int128 v33;
  void *v34[2];
  __int128 v35;
  void *v36[2];
  __int128 v37;
  void *v38[2];
  _OWORD v39[3];
  __int128 v40;
  uint64_t v41;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100937CB8);
  WORD2(v33) = WORD2(a2);
  LODWORD(v33) = a2;
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v33, 1);
  v41 = 0;
  v40 = 0u;
  memset(v39, 0, sizeof(v39));
  v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v35 = 0u;
  *(_OWORD *)v36 = 0u;
  v33 = 0u;
  *(_OWORD *)v34 = 0u;
  sub_1005BCCCC((uint64_t)&v33 + 1);
  BYTE2(v34[0]) = 0;
  BYTE4(v34[0]) = 0;
  BYTE2(v36[0]) = 0;
  BYTE4(v36[0]) = 0;
  DWORD1(v39[1]) = 0;
  v35 = 0uLL;
  v34[1] = 0;
  LOBYTE(v36[0]) = 0;
  v37 = 0uLL;
  v36[1] = 0;
  LOBYTE(v38[0]) = 0;
  memset(v39, 0, 19);
  v38[1] = 0;
  BYTE8(v39[1]) = 1;
  BYTE2(v41) = 0;
  *(_QWORD *)((char *)&v39[1] + 14) = 0;
  *(_QWORD *)((char *)&v39[1] + 9) = 0;
  v40 = 0uLL;
  *((_QWORD *)&v39[2] + 1) = 0;
  LOBYTE(v41) = 0;
  v7 = sub_1004419F4(v6, (uint64_t)&v33);
  if (BYTE12(v39[2]))
    v8 = v7;
  else
    v8 = 0;
  if (v8)
  {
    LODWORD(__p[0]) = 0;
    *(_DWORD *)v30 = 0;
    *(_DWORD *)v32 = 0;
    *(_DWORD *)v28 = 0;
    v9 = sub_100444BF0(v6, __p, v30, v32, v28);
    if (*(_DWORD *)v30)
      v10 = v9;
    else
      v10 = 0;
    v11 = v10 && *(_DWORD *)v32 != 0;
    v13 = qword_1009999B8;
    if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
    {
      v14 = "BANNED";
      if (v11)
        v14 = "ALLOWED (DId)";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Device has a denylist, current BAN state is %{public}s\n", buf, 0xCu);
    }
  }
  else
  {
    __p[0] = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    sub_10004AD30((uint64_t)__p);
    *(_QWORD *)buf = SLODWORD(__p[0]);
    *(_QWORD *)&buf[8] = SWORD2(__p[0]);
    sub_1004415B0(v6, 0x200u, 4, buf, 0);
    if (sub_100481EC8(a1, v6) && (sub_100448668(v6) & 1) != 0)
    {
      v11 = 1;
    }
    else
    {
      v12 = qword_1009999B8;
      if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v6, buf);
        sub_1007046D0((char *)buf, v32, v12);
      }
      v11 = 0;
    }
  }
  v27 = 0;
  sub_100043758(&v27);
  v15 = sub_100161D88(a3, v11);
  sub_10004339C(&v27);
  if (v15)
    v16 = 0;
  else
    v16 = v11;
  if (v16)
  {
    v17 = qword_1009999B8;
    if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v6, __p);
      v18 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)v30 = 136446466;
      *(_QWORD *)&v30[4] = v18;
      *(_WORD *)&v30[12] = 1024;
      *(_DWORD *)&v30[14] = a3;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Accepting incoming connection attempt from device %{public}s with connection ID %d", v30, 0x12u);
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
    }
    *(_OWORD *)v30 = xmmword_1007426A0;
    __p[0] = 0;
    __p[1] = 0;
    v26 = 0;
    if (sub_1004442A0(v6, (uint64_t)v30, 0x317u, __p))
    {
      v19 = *((_DWORD *)__p[0] + 2);
      v20 = qword_1009999B8;
      if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v28 = 67109120;
        v29 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Supported features bits are: 0x%x", v28, 8u);
      }
    }
    else
    {
      v22 = qword_1009999B8;
      if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "No supported features", v28, 2u);
      }
    }
    *(_QWORD *)(a1 + 288) = v6;
    *(_WORD *)(a1 + 280) = a3;
    operator new();
  }
  if (v15)
  {
    v21 = qword_1009999B8;
    if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_ERROR))
      sub_10070463C(v11, v15, v21);
  }
  sub_100043728(&v27);
  if (SHIBYTE(v39[0]) < 0)
    operator delete(v38[1]);
  if (SHIBYTE(v37) < 0)
    operator delete(v36[1]);
  if (SHIBYTE(v35) < 0)
    operator delete(v34[1]);
  return nullsub_90((char *)&v33 + 1, v23);
}

void sub_10056B590(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_10026B73C((uint64_t)&a28, a2);
  _Unwind_Resume(a1);
}

void sub_10056B624()
{
  JUMPOUT(0x10056B61CLL);
}

void sub_10056B62C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  void **v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;

  v2 = *(_QWORD *)(a1 + 288);
  v3 = qword_1009999B8;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10056B034(a1, __p);
      if (v14 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received disconnect event from device %{public}s", buf, 0xCu);
      if (v14 < 0)
        operator delete(__p[0]);
      v2 = *(_QWORD *)(a1 + 288);
    }
    sub_10048257C(a1, v2, 0);
    (***(void (****)(_QWORD))(a1 + 264))(*(_QWORD *)(a1 + 264));
    *(_QWORD *)(a1 + 264) = 0;
    sub_10056FA84((uint64_t *)(a1 + 272), 0);
    *(_WORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_ERROR))
  {
    sub_100704740(a2, v3, v7, v8, v9, v10, v11, v12);
  }
}

void sub_10056B780(uint64_t a1, uint64_t *a2)
{
  std::string __p;

  sub_1003489E8(*a2, &__p);
  sub_10056B7EC(a1, (uint64_t)&__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_10056B7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10056B7EC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  unsigned int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  void **v17;
  void *v18;
  void *v19;
  unsigned __int16 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24[2];
  char v25;
  uint64_t v26[2];
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t buf[4];
  void **v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  unsigned int v39;

  if (a3 && (v4 = *(_QWORD *)(a1 + 272), *(_DWORD *)(v4 + 120)))
  {
    v6 = *(_DWORD *)(v4 + 124);
    v32 = 0;
    v33 = 0;
    v7 = *(_QWORD *)(a1 + 264);
    if (*(char *)(a2 + 23) < 0)
    {
      sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v31 = *(_QWORD *)(a2 + 16);
    }
    v9 = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v7 + 32))(&v32, v7, __p);
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    v10 = *(_DWORD *)(*(_QWORD *)(a1 + 272) + 124) & 0x40000;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v11 = (std::__shared_weak_count *)v33;
    v26[0] = v32;
    v26[1] = v33;
    if (v33)
    {
      v12 = (unint64_t *)(v33 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    sub_10056BF70((uint64_t)v9, 0, v26, a3, (v6 >> 6) & 1, v10 != 0);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v16 = qword_1009999B8;
    if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10056B034(a1, v24);
      if (v25 >= 0)
        v17 = v24;
      else
        v17 = (void **)v24[0];
      v18 = &v27;
      if (v29 < 0)
        v18 = v27;
      *(_DWORD *)buf = 136315650;
      v35 = v17;
      v36 = 2080;
      v37 = v18;
      v38 = 1024;
      v39 = v10 >> 18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Updating CarKit %s with event: %s and UTCOffsetSupport: %d", buf, 0x1Cu);
      if (v25 < 0)
        operator delete(v24[0]);
    }
    buf[0] = 0;
    sub_100043758(buf);
    if (v29 >= 0)
      v19 = &v27;
    else
      v19 = v27;
    v20 = HIBYTE(v29);
    if (v29 < 0)
      v20 = v28;
    sub_100161F04(*(unsigned __int16 *)(a1 + 280), (uint64_t)v19, v20);
    sub_100043728(buf);
    if (SHIBYTE(v29) < 0)
      operator delete(v27);
    v21 = (std::__shared_weak_count *)v33;
    if (v33)
    {
      v22 = (unint64_t *)(v33 + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  else
  {
    v8 = qword_1009999B8;
    if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Attempting to send event notification which is explicitly filtered out, ignoring.", buf, 2u);
    }
  }
}

void sub_10056BAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _Unwind_Resume(exception_object);
}

void sub_10056BB18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x10056BB10);
}

void sub_10056BB30(uint64_t a1, uint64_t *a2)
{
  sub_10056B780(a1 - 256, a2);
}

_BYTE *sub_10056BB38(uint64_t a1, uint64_t *a2, int a3)
{
  unsigned int v6;
  std::string *p_p;
  std::string __p;
  char v10;

  v10 = 0;
  sub_100043758(&v10);
  v6 = *(unsigned __int16 *)(a1 + 280);
  if (a3)
  {
    sub_1003489E8(*a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    sub_1001622D0(v6, (char *)p_p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_1001622D0(v6, 0, 114);
  }
  sub_10004339C(&v10);
  return sub_100043728(&v10);
}

void sub_10056BBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  sub_100043728(&a18);
  _Unwind_Resume(a1);
}

_BYTE *sub_10056BC10(uint64_t a1, uint64_t *a2, int a3)
{
  return sub_10056BB38(a1 - 256, a2, a3);
}

void sub_10056BC18(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::string v5;
  std::string __p;

  v4 = *a2;
  *(_BYTE *)(v4 + 123) = 1;
  sub_1003489E8(v4, &__p);
  sub_10056B7EC(a1, (uint64_t)&__p, 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_1003489E8(*a2, &v5);
  sub_10056B7EC(a1, (uint64_t)&v5, 8);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_10056BCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_10056BCD4(uint64_t a1, uint64_t *a2)
{
  sub_10056BC18(a1 - 256, a2);
}

void sub_10056BCDC(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *v27[2];
  unsigned __int8 v28;
  void *__p[2];
  unsigned __int8 v30;
  uint8_t buf[16];
  uint64_t v32;

  v5 = *a3;
  if (*(char *)(*a3 + 111) < 0)
  {
    sub_10003430C(buf, *(void **)(v5 + 88), *(_QWORD *)(v5 + 96));
  }
  else
  {
    *(_OWORD *)buf = *(_OWORD *)(v5 + 88);
    v32 = *(_QWORD *)(v5 + 104);
  }
  v6 = HIBYTE(v32);
  if (v32 < 0)
    v6 = *(_QWORD *)&buf[8];
  if (v6)
  {
    sub_100347CAC(*a3, (uint64_t)__p);
    v7 = v30;
    if ((v30 & 0x80u) != 0)
      v7 = (unint64_t)__p[1];
    if (v7)
    {
      v8 = 0;
      if ((v30 & 0x80) == 0)
        goto LABEL_12;
    }
    else
    {
      sub_1003496AC((_QWORD *)(*a3 + 136), 0, v27);
      v22 = (unint64_t)v27[1];
      if ((v28 & 0x80u) == 0)
        v22 = v28;
      v8 = v22 == 0;
      if ((char)v28 < 0)
        operator delete(v27[0]);
      if ((v30 & 0x80) == 0)
      {
LABEL_12:
        if ((v32 & 0x8000000000000000) == 0)
          goto LABEL_14;
        goto LABEL_13;
      }
    }
    operator delete(__p[0]);
    goto LABEL_12;
  }
  v8 = 1;
  if (v32 < 0)
LABEL_13:
    operator delete(*(void **)buf);
LABEL_14:
  v9 = qword_1009999B8;
  v10 = os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Could not send message to BTMap due to missing info", buf, 2u);
    }
    v11 = a3[1];
    v25 = *a3;
    v26 = (std::__shared_weak_count *)v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    (*(void (**)(_QWORD *, uint64_t *, _QWORD))(*a1 + 96))(a1, &v25, 0);
    v14 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
LABEL_32:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending message to BTMap to be sent through IMCore", buf, 2u);
    }
    v17 = a1[33];
    v18 = a3[1];
    v23 = *a3;
    v24 = (std::__shared_weak_count *)v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 16))(v17, &v23);
    v14 = v24;
    if (v24)
    {
      v21 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v21);
      while (__stlxr(v16 - 1, v21));
      goto LABEL_32;
    }
  }
}

void sub_10056BF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 41) < 0)
    operator delete(*(void **)(v21 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t sub_10056BF70(uint64_t a1, unsigned int a2, uint64_t *a3, int a4, int a5, int a6)
{
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  _QWORD *v14;
  const std::string::value_type *v15;
  const std::string::value_type *v16;
  const std::string::value_type *v17;
  _QWORD *v18;
  _QWORD *v19;
  std::string *v20;
  std::string::size_type size;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  std::string *p_p;
  std::string::size_type v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  std::string *v31;
  std::string::size_type v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  const char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  std::string *v41;
  std::string::size_type v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  std::string *v47;
  std::string::size_type v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  std::string *v53;
  std::string::size_type v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  std::string *v58;
  std::string::size_type v59;
  _QWORD *v60;
  uint64_t v61;
  void *v63[2];
  uint64_t v64;
  std::string __p;
  std::string v66;
  std::string v67;
  std::string v68;
  __int128 v69;
  _OWORD v70[4];
  void *v71[2];
  __int128 v72;
  __int128 v73;
  _OWORD v74[9];
  uint64_t v75;

  v75 = 0;
  v73 = 0u;
  memset(v74, 0, sizeof(v74));
  *(_OWORD *)v71 = 0u;
  v72 = 0u;
  memset(v70, 0, sizeof(v70));
  v69 = 0u;
  sub_1002613AC((uint64_t)&v69);
  memset(&v68, 0, sizeof(v68));
  memset(&v67, 0, sizeof(v67));
  memset(&v66, 0, sizeof(v66));
  v11 = sub_1002614D8(v70, (uint64_t)"<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>", 56);
  sub_1002614D8(v11, (uint64_t)"\r\n", 2);
  v12 = sub_1002614D8(v70, (uint64_t)"<MAP-event-report version=\"", 27);
  if (a5)
    v13 = "1.1";
  else
    v13 = "1.0";
  v14 = sub_1002614D8(v12, (uint64_t)v13, 3);
  sub_1002614D8(v14, (uint64_t)"\">", 2);
  if (a2 < 4)
    std::string::assign(&v68, (&off_100937CD8)[a2]);
  if (a4 > 15)
  {
    switch(a4)
    {
      case 16:
        v16 = "SendingFailure";
        break;
      case 32:
        v17 = "DeliverySuccess";
LABEL_19:
        std::string::assign(&v67, v17);
        v15 = "sent";
        goto LABEL_20;
      case 64:
        v16 = "DeliveryFailure";
        break;
      default:
        goto LABEL_21;
    }
    std::string::assign(&v67, v16);
    v15 = "outbox";
LABEL_20:
    std::string::assign(&v66, v15);
    goto LABEL_21;
  }
  switch(a4)
  {
    case 1:
      std::string::assign(&v67, "NewMessage");
      v15 = "inbox";
      goto LABEL_20;
    case 2:
      std::string::assign(&v67, "MessageDeleted");
      v15 = "deleted";
      goto LABEL_20;
    case 4:
      v17 = "MessageShift";
      goto LABEL_19;
    case 8:
      v17 = "SendingSuccess";
      goto LABEL_19;
    default:
      break;
  }
LABEL_21:
  v18 = sub_1002614D8(v70, (uint64_t)"<event type=", 12);
  v19 = sub_1002614D8(v18, (uint64_t)"\"", 1);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v67;
  else
    v20 = (std::string *)v67.__r_.__value_.__r.__words[0];
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  else
    size = v67.__r_.__value_.__l.__size_;
  v22 = sub_1002614D8(v19, (uint64_t)v20, size);
  sub_1002614D8(v22, (uint64_t)"\" ", 2);
  v23 = sub_1002614D8(v70, (uint64_t)"handle=", 7);
  v24 = sub_1002614D8(v23, (uint64_t)"\"", 1);
  sub_1003489E8(*a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v26 = __p.__r_.__value_.__l.__size_;
  v27 = sub_1002614D8(v24, (uint64_t)p_p, v26);
  sub_1002614D8(v27, (uint64_t)"\" ", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v28 = sub_1002614D8(v70, (uint64_t)"folder=", 7);
  v29 = sub_1002614D8(v28, (uint64_t)"\"", 1);
  v30 = sub_1002614D8(v29, (uint64_t)"telecom/msg/", 12);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v66;
  else
    v31 = (std::string *)v66.__r_.__value_.__r.__words[0];
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  else
    v32 = v66.__r_.__value_.__l.__size_;
  v33 = sub_1002614D8(v30, (uint64_t)v31, v32);
  sub_1002614D8(v33, (uint64_t)"\" ", 2);
  if (a4 == 4)
  {
    v34 = sub_1002614D8(v70, (uint64_t)"old_folder=", 11);
    v35 = sub_1002614D8(v34, (uint64_t)"\"", 1);
    v36 = sub_1002614D8(v35, (uint64_t)"telecom/msg/outbox", 18);
    v37 = "\" ";
    v38 = 2;
  }
  else
  {
    if (a4 != 1 || !a5)
      goto LABEL_81;
    v39 = sub_1002614D8(v70, (uint64_t)"datetime=", 9);
    v40 = sub_1002614D8(v39, (uint64_t)"\"", 1);
    sub_10056823C(*a3, a6, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &__p;
    else
      v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v42 = __p.__r_.__value_.__l.__size_;
    v43 = sub_1002614D8(v40, (uint64_t)v41, v42);
    sub_1002614D8(v43, (uint64_t)"\" ", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v44 = sub_1002614D8(v70, (uint64_t)"subject=", 8);
    v45 = sub_1002614D8(v44, (uint64_t)"\"", 1);
    v46 = *a3;
    if (*(char *)(*a3 + 87) < 0)
    {
      sub_10003430C(v63, *(void **)(v46 + 64), *(_QWORD *)(v46 + 72));
    }
    else
    {
      *(_OWORD *)v63 = *(_OWORD *)(v46 + 64);
      v64 = *(_QWORD *)(v46 + 80);
    }
    sub_1004176F0((uint64_t)v63, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &__p;
    else
      v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v48 = __p.__r_.__value_.__l.__size_;
    v49 = sub_1002614D8(v45, (uint64_t)v47, v48);
    sub_1002614D8(v49, (uint64_t)"\" ", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64) < 0)
      operator delete(v63[0]);
    v50 = sub_1002614D8(v70, (uint64_t)"sender_name=", 12);
    v51 = sub_1002614D8(v50, (uint64_t)"\"", 1);
    v52 = *a3;
    if (*(char *)(*a3 + 175) < 0)
    {
      sub_10003430C(v63, *(void **)(v52 + 152), *(_QWORD *)(v52 + 160));
    }
    else
    {
      *(_OWORD *)v63 = *(_OWORD *)(v52 + 152);
      v64 = *(_QWORD *)(v52 + 168);
    }
    sub_1004176F0((uint64_t)v63, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &__p;
    else
      v53 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v54 = __p.__r_.__value_.__l.__size_;
    v55 = sub_1002614D8(v51, (uint64_t)v53, v54);
    sub_1002614D8(v55, (uint64_t)"\" ", 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64) < 0)
      operator delete(v63[0]);
    v37 = "priority=\"no\" ";
    v38 = 14;
    v36 = v70;
  }
  sub_1002614D8(v36, (uint64_t)v37, v38);
LABEL_81:
  v56 = sub_1002614D8(v70, (uint64_t)"msg_type=", 9);
  v57 = sub_1002614D8(v56, (uint64_t)"\"", 1);
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v58 = &v68;
  else
    v58 = (std::string *)v68.__r_.__value_.__r.__words[0];
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
  else
    v59 = v68.__r_.__value_.__l.__size_;
  v60 = sub_1002614D8(v57, (uint64_t)v58, v59);
  sub_1002614D8(v60, (uint64_t)"\"", 1);
  sub_1002614D8(v70, (uint64_t)"/>", 2);
  sub_1002614D8(v70, (uint64_t)"</MAP-event-report>", 19);
  std::stringbuf::str((char *)v70 + 8);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  *(_QWORD *)((char *)&v70[-1]
  *(_QWORD *)&v70[0] = v61;
  if (SHIBYTE(v72) < 0)
    operator delete(v71[1]);
  std::streambuf::~streambuf((char *)v70 + 8);
  return std::ios::~ios(v74);
}

void sub_10056C618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  sub_1006CC5C8((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_10056C6BC(_QWORD *a1, unsigned int a2, uint64_t *a3)
{
  _BYTE *v6;
  _BYTE *v7;
  NSObject *v8;
  std::string *p_p;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21[2];
  uint64_t v22;
  std::string __p;
  _BYTE buf[22];

  if (*((char *)a3 + 23) < 0)
  {
    v7 = (_BYTE *)*a3;
    v6 = (_BYTE *)(*a3 + a3[1]);
  }
  else
  {
    v6 = (char *)a3 + *((unsigned __int8 *)a3 + 23);
    v7 = a3;
  }
  while (v7 != v6)
  {
    *v7 = __toupper(*v7);
    ++v7;
  }
  v8 = qword_1009999B8;
  if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10056B034((uint64_t)a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v10 = a3;
    if (*((char *)a3 + 23) < 0)
      v10 = (uint64_t *)*a3;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = p_p;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'GetMessageEvent' from %{public}s for messageHandle %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v11 = a1[33];
  if (!v11)
    goto LABEL_29;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003430C(v21, (void *)*a3, a3[1]);
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a3;
    v22 = a3[2];
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t, void **))(*(_QWORD *)v11 + 32))(buf, v11, v21);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (*(_QWORD *)buf)
  {
    sub_10043F6EC(a1[36], (uint64_t)&__p);
    v12 = std::string::compare(&__p, "HandsFreeLink");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v13 = a1[34];
    sub_100568EA8(*(uint64_t *)buf, v12 == 0);
    v14 = v13 + 96;
    std::string::operator=((std::string *)(v13 + 96), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v15 = qword_1009999B8;
    if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending BMessage response to 'GetMessageEvent'", (uint8_t *)&__p, 2u);
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_100043758(&__p);
    if (*(char *)(v13 + 119) < 0)
    {
      v14 = *(_QWORD *)(v13 + 96);
      v16 = *(_QWORD *)(v13 + 104);
    }
    else
    {
      LOWORD(v16) = *(unsigned __int8 *)(v13 + 119);
    }
    sub_1001620E0(a2, v14, v16, 1, 0);
  }
  else
  {
LABEL_29:
    v17 = qword_1009999B8;
    if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "No matching message found.", (uint8_t *)&__p, 2u);
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_100043758(&__p);
    sub_1001620E0(a2, 0, 0, 1, 114);
  }
  sub_100043728(&__p);
  v18 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_10056C9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  sub_100043728(&__p);
  sub_10009F88C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_10056CA28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x10056CA20);
}

void sub_10056CA40()
{
  JUMPOUT(0x10056CA20);
}

uint64_t sub_10056CA48(uint64_t a1, unsigned int a2, std::string *p_str, int a4, unsigned int a5, char a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  NSObject *v17;
  void **v18;
  std::string *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  int data_low;
  int v25;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  BOOL v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char v49;
  NSObject *v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  char v56[8];
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  char v68;
  std::string __dst;
  void *v70[2];
  uint64_t v71;
  void *v72[2];
  std::string::size_type v73;
  std::string v74;
  std::string __str;
  void *__p[2];
  __int128 v77;
  uint64_t v78;
  _BYTE v79[22];
  uint8_t buf[48];
  void *v81[2];
  __int128 v82;
  void *v83[2];
  _OWORD v84[3];
  __int128 v85;
  uint64_t v86;
  char __s[8];
  uint64_t v88;

  v17 = qword_1009999B8;
  if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10056B034(a1, __p);
    v18 = (void **)__p[0];
    if ((SBYTE7(v77) & 0x80u) == 0)
      v18 = __p;
    v19 = p_str;
    if (SHIBYTE(p_str->__r_.__value_.__r.__words[2]) < 0)
      v19 = (std::string *)p_str->__r_.__value_.__r.__words[0];
    v20 = (*(_DWORD *)(*(_QWORD *)(a1 + 272) + 124) >> 18) & 1;
    *(_DWORD *)buf = 136448002;
    *(_QWORD *)&buf[4] = v18;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a2;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v19;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = a4;
    *(_WORD *)&buf[34] = 1024;
    *(_DWORD *)&buf[36] = a8;
    *(_WORD *)&buf[40] = 1024;
    *(_DWORD *)&buf[42] = a7;
    *(_WORD *)&buf[46] = 1024;
    LODWORD(v81[0]) = a11;
    WORD2(v81[0]) = 1024;
    *(_DWORD *)((char *)v81 + 6) = v20;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Received 'GetMessageListingEvent' from device %{public}s (connectionId: %u, path: %s, maxListCount: %u, filterMessageType: %u, parameterMask: %u, filterReadStatus: %u, UTCOffsetTimeSupport: %d)", buf, 0x3Au);
    if (SBYTE7(v77) < 0)
      operator delete(__p[0]);
  }
  v78 = 0;
  v77 = 0u;
  *(_OWORD *)__p = 0u;
  sub_100569A9C((uint64_t)__p);
  *(_QWORD *)__s = 0;
  v88 = 0;
  v86 = 0;
  v85 = 0u;
  memset(v84, 0, sizeof(v84));
  *(_OWORD *)v83 = 0u;
  v82 = 0u;
  *(_OWORD *)v81 = 0u;
  memset(buf, 0, sizeof(buf));
  sub_1005BCCCC((uint64_t)&buf[1]);
  buf[18] = 0;
  buf[20] = 0;
  BYTE2(v81[0]) = 0;
  BYTE4(v81[0]) = 0;
  DWORD1(v84[1]) = 0;
  memset(&buf[24], 0, 24);
  LOBYTE(v81[0]) = 0;
  v81[1] = 0;
  v82 = 0uLL;
  LOBYTE(v83[0]) = 0;
  v83[1] = 0;
  memset(v84, 0, 19);
  BYTE8(v84[1]) = 1;
  BYTE2(v86) = 0;
  *(_QWORD *)((char *)&v84[1] + 14) = 0;
  *(_QWORD *)((char *)&v84[1] + 9) = 0;
  *((_QWORD *)&v84[2] + 1) = 0;
  v85 = 0uLL;
  LOBYTE(v86) = 0;
  LOBYTE(__p[0]) = a6;
  HIDWORD(__p[0]) = a7;
  v21 = *(_QWORD *)(a1 + 272);
  LOBYTE(__p[1]) = (*(_DWORD *)(v21 + 124) & 0x40000) != 0;
  memset(&__str, 0, sizeof(__str));
  v22 = *(_QWORD *)(v21 + 8);
  if (*(char *)(v22 + 55) < 0)
    sub_10003430C(&__str, *(void **)(v22 + 32), *(_QWORD *)(v22 + 40));
  else
    __str = *(std::string *)(v22 + 32);
  memset(&v74, 0, sizeof(v74));
  if ((SHIBYTE(p_str->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&p_str->__r_.__value_.__s + 23))
      goto LABEL_13;
LABEL_17:
    p_str = &__str;
LABEL_18:
    std::string::operator=(&v74, p_str);
    goto LABEL_25;
  }
  if (!p_str->__r_.__value_.__l.__size_)
    goto LABEL_17;
LABEL_13:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 3)
      goto LABEL_25;
    v23 = (std::string *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_21;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) == 3)
  {
    v23 = &__str;
LABEL_21:
    data_low = LOWORD(v23->__r_.__value_.__l.__data_);
    v25 = v23->__r_.__value_.__s.__data_[2];
    if (data_low != 29549 || v25 != 103)
      goto LABEL_25;
    v48 = *(_QWORD *)(a1 + 272);
    if ((*((_BYTE *)&p_str->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      sub_10003430C(v72, p_str->__r_.__value_.__l.__data_, p_str->__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)v72 = *(_OWORD *)&p_str->__r_.__value_.__l.__data_;
      v73 = p_str->__r_.__value_.__r.__words[2];
    }
    v49 = sub_10056D2E8(v48, (uint64_t)v72);
    if (SHIBYTE(v73) < 0)
      operator delete(v72[0]);
    if ((v49 & 1) == 0)
    {
      v50 = qword_1009999B8;
      if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
      {
        if (SHIBYTE(p_str->__r_.__value_.__r.__words[2]) < 0)
          p_str = (std::string *)p_str->__r_.__value_.__r.__words[0];
        v51 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8);
        if (*(char *)(v51 + 55) < 0)
        {
          sub_10003430C(v70, *(void **)(v51 + 32), *(_QWORD *)(v51 + 40));
        }
        else
        {
          *(_OWORD *)v70 = *(_OWORD *)(v51 + 32);
          v71 = *(_QWORD *)(v51 + 48);
        }
        v52 = v70;
        if (v71 < 0)
          v52 = (void **)v70[0];
        *(_DWORD *)v79 = 136315394;
        *(_QWORD *)&v79[4] = p_str;
        *(_WORD *)&v79[12] = 2080;
        *(_QWORD *)&v79[14] = v52;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "No such folder %s at path %s", v79, 0x16u);
        if (SHIBYTE(v71) < 0)
          operator delete(v70[0]);
      }
      LOBYTE(v70[0]) = 0;
      sub_100043758(v70);
      v45 = sub_100162514(a2, 0, 0, 0, 0, 0);
      sub_100043728(v70);
      goto LABEL_74;
    }
    goto LABEL_18;
  }
LABEL_25:
  v70[1] = 0;
  v70[0] = 0;
  v71 = 0;
  v27 = *(_QWORD *)(a1 + 264);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    sub_10003430C(&__dst, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  else
    __dst = v74;
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v27 + 40))(v70, v27, &__dst);
  v53 = a1;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v28 = v70[1];
  if (v70[1] != v70[0])
  {
    v29 = 0;
    v30 = 0;
    while (1)
    {
      v32 = *(v28 - 2);
      v28 -= 2;
      v31 = v32;
      *(_QWORD *)v79 = v32;
      v33 = (std::__shared_weak_count *)v28[1];
      *(_QWORD *)&v79[8] = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(p_shared_owners);
        while (__stxr(v35 + 1, p_shared_owners));
      }
      v36 = *(_BYTE *)(v31 + 122) == 0;
      if ((a11 & 1) != 0)
      {
        if ((a11 & 2) != 0 || *(_BYTE *)(v31 + 122))
          goto LABEL_53;
      }
      else if ((a11 & 2) != 0 && !*(_BYTE *)(v31 + 122))
      {
        goto LABEL_53;
      }
      ++v30;
      if (!a4 || v30 <= a5 || v30 > a5 + a4)
        goto LABEL_53;
      sub_1005692F8((uint64_t)v56, v31);
      sub_100569B2C((uint64_t *)__p, (uint64_t)v56);
      if (v68 < 0)
        operator delete(v67);
      sub_10057FE54(&v66);
      sub_10057FE54(&v65);
      if (v64 < 0)
        operator delete(v63);
      if (v62 < 0)
        operator delete(v61);
      if (v60 < 0)
        operator delete(v59);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_53:
        if (v33)
          goto LABEL_54;
        goto LABEL_58;
      }
      operator delete(v57);
      if (v33)
      {
LABEL_54:
        v37 = (unint64_t *)&v33->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
LABEL_58:
      v29 |= v36;
      if (v28 == v70[0])
        goto LABEL_63;
    }
  }
  v30 = 0;
  v29 = 0;
LABEL_63:
  if (a4)
  {
    sub_10056AC64(*(_QWORD *)(v53 + 272), (unsigned __int8 *)__p);
    v39 = *(_QWORD *)(v53 + 272);
    if (*(char *)(v39 + 71) < 0)
    {
      v40 = *(_QWORD *)(v39 + 48);
      v41 = *(_QWORD *)(v39 + 56);
    }
    else
    {
      v40 = v39 + 48;
      LOWORD(v41) = *(unsigned __int8 *)(v39 + 71);
    }
    v44 = qword_1009999B8;
    if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v79 = 67109120;
      *(_DWORD *)&v79[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "getMessageListingEvent count = %u", v79, 8u);
    }
    v43 = v53;
  }
  else
  {
    v42 = qword_1009999B8;
    v43 = v53;
    if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v79 = 67109120;
      *(_DWORD *)&v79[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "getMessageListingEvent only returning the count %d", v79, 8u);
    }
    LOWORD(v41) = 0;
    v40 = 0;
  }
  (*(void (**)(_QWORD, char *))(**(_QWORD **)(v43 + 264) + 8))(*(_QWORD *)(v43 + 264), __s);
  v79[0] = 0;
  sub_100043758(v79);
  v45 = sub_100162514(a2, v29 & 1, v30, v40, (unsigned __int16)v41, __s);
  sub_100043728(v79);
  *(_QWORD *)v79 = v70;
  sub_100349FC0((void ***)v79);
LABEL_74:
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84[0]) < 0)
    operator delete(v83[1]);
  if (SHIBYTE(v82) < 0)
    operator delete(v81[1]);
  if ((char)buf[47] < 0)
    operator delete(*(void **)&buf[24]);
  nullsub_90(&buf[1], v46);
  sub_100569B28((uint64_t)__p);
  return v45;
}

void sub_10056D200(_Unwind_Exception *a1, uint64_t a2)
{
  if (SLOBYTE(STACK[0x47F]) < 0)
    operator delete((void *)STACK[0x468]);
  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  sub_10026B73C((uint64_t)&STACK[0x4F0], a2);
  sub_100569B28((uint64_t)&STACK[0x4A0]);
  _Unwind_Resume(a1);
}

uint64_t sub_10056D2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = sub_10056F8A4(v2, (unsigned __int8 *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_10056D35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10056D378(uint64_t a1)
{
  if (*(char *)(a1 + 1007) < 0)
    operator delete(*(void **)(a1 + 984));
  sub_10057FE54(a1 + 560);
  sub_10057FE54(a1 + 136);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10056D3F8(uint64_t a1, unsigned int a2, int a3, int a4)
{
  NSObject *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void ***v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  void **v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  v8 = qword_1009999B8;
  if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10056B034(a1, __p);
    if (v18 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    v20 = v9;
    v21 = 1024;
    v22 = a3;
    v23 = 1024;
    v24 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'GetFolderListing' event from device %{public}s (maxListCount=%d, startOffset=%d)", buf, 0x18u);
    if (v18 < 0)
      operator delete(__p[0]);
    v8 = qword_1009999B8;
  }
  v10 = *(_QWORD *)(a1 + 272);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 24);
  v12 = (void ***)(v10 + 24);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v13 = (void **)(v10 + 24);
    if (*(char *)(v10 + 47) < 0)
      v13 = *v12;
    *(_DWORD *)buf = 136315138;
    v20 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Folder listing = %s", buf, 0xCu);
  }
  buf[0] = 0;
  sub_100043758(buf);
  if (*(char *)(v10 + 47) < 0)
  {
    v12 = *(void ****)(v10 + 24);
    v14 = *(_QWORD *)(v10 + 32);
  }
  else
  {
    LOWORD(v14) = *(unsigned __int8 *)(v10 + 47);
  }
  v15 = sub_10016278C(a2, v11, (uint64_t)v12, v14);
  sub_100043728(buf);
  return v15;
}

void sub_10056D5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10056D5C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  std::string *v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v11;

  v6 = *(std::string **)(a1 + 272);
  v7 = 1738;
  if (v6 && (a6 & 1) == 0)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_10003430C(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      v11 = *(_QWORD *)(a3 + 16);
    }
    v7 = sub_10056A928(v6, __p, a5);
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_10056D654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10056D670(uint64_t a1, unsigned int a2, int a3, uint64_t *a4)
{
  _BYTE *v8;
  _BYTE *v9;
  NSObject *v10;
  void **v11;
  uint64_t *v12;
  uint64_t v13;
  void *v15[2];
  uint64_t v16;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  void **v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t *v24;

  if (*((char *)a4 + 23) < 0)
  {
    v9 = (_BYTE *)*a4;
    v8 = (_BYTE *)(*a4 + a4[1]);
  }
  else
  {
    v8 = (char *)a4 + *((unsigned __int8 *)a4 + 23);
    v9 = a4;
  }
  while (v9 != v8)
  {
    *v9 = __toupper(*v9);
    ++v9;
  }
  v10 = qword_1009999B8;
  if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10056B034(a1, __p);
    v11 = (void **)__p[0];
    if (v18 >= 0)
      v11 = __p;
    v12 = a4;
    if (*((char *)a4 + 23) < 0)
      v12 = (uint64_t *)*a4;
    *(_DWORD *)buf = 136446722;
    v20 = v11;
    v21 = 1024;
    v22 = a3;
    v23 = 2080;
    v24 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received 'SetReadStatus' event from device %{public}s (readFlag=%d, messageGUID=%s)", buf, 0x1Cu);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  v13 = *(_QWORD *)(a1 + 264);
  if (v13)
  {
    if (*((char *)a4 + 23) < 0)
    {
      sub_10003430C(v15, (void *)*a4, a4[1]);
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)a4;
      v16 = a4[2];
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 24))(v13, v15);
    if (SHIBYTE(v16) < 0)
      operator delete(v15[0]);
  }
  buf[0] = 0;
  sub_100043758(buf);
  sub_1001629D8(a2, 0);
  return sub_100043728(buf);
}

void sub_10056D830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10056D864(uint64_t a1, unsigned int a2, int a3, uint64_t *a4)
{
  _BYTE *v8;
  _BYTE *v9;
  NSObject *v10;
  void **v11;
  uint64_t *v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  void *v17[2];
  uint64_t v18;
  void *__dst[2];
  uint64_t v20;
  void *__p[2];
  char v22;
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t *v28;

  if (*((char *)a4 + 23) < 0)
  {
    v9 = (_BYTE *)*a4;
    v8 = (_BYTE *)(*a4 + a4[1]);
  }
  else
  {
    v8 = (char *)a4 + *((unsigned __int8 *)a4 + 23);
    v9 = a4;
  }
  while (v9 != v8)
  {
    *v9 = __toupper(*v9);
    ++v9;
  }
  v10 = qword_1009999B8;
  if (!os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
    goto LABEL_12;
  sub_10056B034(a1, __p);
  v11 = (void **)__p[0];
  if (v22 >= 0)
    v11 = __p;
  v12 = a4;
  if (*((char *)a4 + 23) < 0)
    v12 = (uint64_t *)*a4;
  *(_DWORD *)buf = 136446722;
  v24 = v11;
  v25 = 1024;
  v26 = a3;
  v27 = 2080;
  v28 = v12;
  _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received 'SetDeleteStatus' from device %{public}s (deleteFlag=%d, messageHandle=%s)", buf, 0x1Cu);
  if (v22 < 0)
  {
    operator delete(__p[0]);
    if (a3)
    {
LABEL_13:
      v13 = *(_QWORD *)(a1 + 264);
      if (v13)
      {
        if (*((char *)a4 + 23) < 0)
        {
          sub_10003430C(__dst, (void *)*a4, a4[1]);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)a4;
          v20 = a4[2];
        }
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 48))(v13, __dst);
        if (SHIBYTE(v20) < 0)
          operator delete(__dst[0]);
      }
      if (*((char *)a4 + 23) < 0)
      {
        sub_10003430C(v17, (void *)*a4, a4[1]);
      }
      else
      {
        *(_OWORD *)v17 = *(_OWORD *)a4;
        v18 = a4[2];
      }
      sub_10056B7EC(a1, (uint64_t)v17, 2);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      v15 = 0;
      goto LABEL_29;
    }
  }
  else
  {
LABEL_12:
    if (a3)
      goto LABEL_13;
  }
  v14 = qword_1009999B8;
  if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_ERROR))
    sub_1007047A8(v14);
  v15 = 1706;
LABEL_29:
  buf[0] = 0;
  sub_100043758(buf);
  sub_1001629D8(a2, v15);
  return sub_100043728(buf);
}

void sub_10056DAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10056DAEC(uint64_t a1, unsigned int a2, int a3)
{
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;

  v6 = qword_1009999B8;
  if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 288), __p);
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received 'SetNotificationFilter' from device %{public}s", buf, 0xCu);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 272) + 120) = a3;
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  sub_100162A50(a2, 0);
  return sub_100043728(__p);
}

void sub_10056DBFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10056DC18(_QWORD *a1)
{
  *a1 = off_100937AC8;
  a1[32] = off_100937B48;
  sub_10056FA84(a1 + 34, 0);
  return sub_100278464((uint64_t)a1);
}

void sub_10056DC58(_QWORD *a1)
{
  *a1 = off_100937AC8;
  a1[32] = off_100937B48;
  sub_10056FA84(a1 + 34, 0);
  sub_100278464((uint64_t)a1);
  operator delete();
}

uint64_t sub_10056DCAC()
{
  return 2;
}

uint64_t sub_10056DCB4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_QWORD *)(a1 + 24) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 32), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v5;
  }
  if (a2)
  {
    v6 = operator new(0x18uLL);
    v8 = *(_QWORD *)(a2 + 8);
    v7 = (_QWORD *)(a2 + 8);
    v6[1] = v7;
    v6[2] = a1;
    *v6 = v8;
    *(_QWORD *)(v8 + 8) = v6;
    *v7 = v6;
    ++v7[2];
  }
  return a1;
}

void sub_10056DD44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10002074C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10056DD70(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_10056DDF4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10002074C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10056DE08(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *i;

  v2 = (_QWORD *)(a1 + 8);
  for (i = *(_QWORD **)(a1 + 16); i != v2; i = (_QWORD *)i[1])
  {
    if (i[2])
    {
      sub_10056DE08();
      operator delete();
    }
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  sub_10002074C(v2);
  return a1;
}

void sub_10056DE80(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  _QWORD v6[4];
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;

  v10 = *a1;
  v11 = *((_WORD *)a1 + 2);
  if (qword_10097AD80 != -1)
    dispatch_once(&qword_10097AD80, &stru_100937B88);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10056DFC0;
  v6[3] = &unk_100917378;
  v8 = v10;
  v9 = v11;
  v7 = a5;
  sub_10048D538(qword_10097AD78, v6);
}

void sub_10056DF2C(__int16 a1, int a2)
{
  _QWORD v4[4];
  int v5;
  __int16 v6;

  if (qword_10097AD80 != -1)
    dispatch_once(&qword_10097AD80, &stru_100937B88);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10056E108;
  v4[3] = &unk_1009186B0;
  v6 = a1;
  v5 = a2;
  sub_10048D538(qword_10097AD78, v4);
}

uint64_t sub_10056DFC0(uint64_t a1)
{
  if (qword_10097B770 != -1)
    dispatch_once(&qword_10097B770, &stru_100937BA8);
  return sub_10056B050(qword_10097B768, *(unsigned int *)(a1 + 34) | ((unint64_t)*(unsigned __int16 *)(a1 + 38) << 32), *(unsigned __int16 *)(a1 + 32));
}

void sub_10056E01C(id a1)
{
  operator new();
}

void sub_10056E05C()
{
  operator delete();
}

void sub_10056E080(id a1)
{
  operator new();
}

void sub_10056E0E4()
{
  operator delete();
}

void sub_10056E108(uint64_t a1)
{
  if (qword_10097B770 != -1)
    dispatch_once(&qword_10097B770, &stru_100937BA8);
  sub_10056B62C(qword_10097B768, *(unsigned __int16 *)(a1 + 36));
}

void sub_10056E15C(__int16 a1, char *a2, char a3, char a4, char a5)
{
  uint64_t v9;
  _QWORD v10[4];
  __int128 __p;
  uint64_t v12;
  __int16 v13;
  char v14;
  char v15;
  char v16;
  void *v17[2];
  uint64_t v18;

  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  sub_100091AE8(v17, a2);
  if (qword_10097AD80 != -1)
    dispatch_once(&qword_10097AD80, &stru_100937B88);
  v9 = qword_10097AD78;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  v10[2] = sub_10056EE14;
  v10[3] = &unk_100937BC8;
  v13 = a1;
  if (SHIBYTE(v18) < 0)
  {
    sub_10003430C(&__p, v17[0], (unint64_t)v17[1]);
  }
  else
  {
    __p = *(_OWORD *)v17;
    v12 = v18;
  }
  v14 = a3;
  v15 = a4;
  v16 = a5;
  sub_10048D538(v9, v10);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
}

void sub_10056E270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10056E2A4(int a1, void *a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD v8[4];
  __int128 __p;
  uint64_t v10;
  __int16 v11;
  uint8_t buf[16];
  uint64_t v13;

  v6 = qword_1009999B8;
  if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a1;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "sendMessage(connectionId=%u, bodyDataLen=%u)", buf, 0xEu);
  }
  memset(buf, 0, sizeof(buf));
  v13 = 0;
  sub_1002D236C(buf, a2, a3);
  if (qword_10097AD80 != -1)
    dispatch_once(&qword_10097AD80, &stru_100937B88);
  v7 = qword_10097AD78;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_10056EEE8;
  v8[3] = &unk_100937BF8;
  if (SHIBYTE(v13) < 0)
  {
    sub_10003430C(&__p, *(void **)buf, *(unint64_t *)&buf[8]);
  }
  else
  {
    __p = *(_OWORD *)buf;
    v10 = v13;
  }
  v11 = a1;
  sub_10048D538(v7, v8);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v13) < 0)
    operator delete(*(void **)buf);
}

void sub_10056E430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10056E46C(__int16 a1, char *a2, __int16 a3, __int16 a4, char a5, int a6, char a7, _OWORD *a8, _OWORD *a9, char a10, _OWORD *a11, _OWORD *a12, char a13)
{
  NSObject *v21;
  char *v22;
  _OWORD *v23;
  __int128 v24;
  _OWORD *v25;
  __int128 v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD *v43;
  __int128 v44;
  _OWORD *v45;
  __int128 v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  _QWORD v64[4];
  __int128 v65;
  uint64_t v66;
  void *v67;
  void *v68;
  _OWORD *v69;
  void *v70;
  void *v71;
  _OWORD *v72;
  void *v73;
  void *v74;
  char *v75;
  void *__p;
  void *v77;
  char *v78;
  int v79;
  __int16 v80;
  __int16 v81;
  __int16 v82;
  char v83;
  char v84;
  char v85;
  char v86;
  uint8_t buf[16];
  uint64_t v88;

  v21 = qword_1009999B8;
  if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Got stack call for getMessageListing", buf, 2u);
  }
  memset(buf, 0, sizeof(buf));
  v88 = 0;
  if (a2)
    v22 = a2;
  else
    v22 = "";
  sub_100091AE8(buf, v22);
  v23 = operator new(0x20uLL);
  v24 = a8[1];
  *v23 = *a8;
  v23[1] = v24;
  v25 = operator new(0x20uLL);
  v26 = a9[1];
  *v25 = *a9;
  v25[1] = v26;
  v27 = operator new(0xFFuLL);
  v28 = a11[13];
  v27[12] = a11[12];
  v27[13] = v28;
  v27[14] = a11[14];
  *(_OWORD *)((char *)v27 + 239) = *(_OWORD *)((char *)a11 + 239);
  v29 = a11[9];
  v27[8] = a11[8];
  v27[9] = v29;
  v30 = a11[11];
  v27[10] = a11[10];
  v27[11] = v30;
  v31 = a11[5];
  v27[4] = a11[4];
  v27[5] = v31;
  v32 = a11[7];
  v27[6] = a11[6];
  v27[7] = v32;
  v33 = a11[1];
  *v27 = *a11;
  v27[1] = v33;
  v34 = a11[3];
  v27[2] = a11[2];
  v27[3] = v34;
  v35 = operator new(0xFFuLL);
  v36 = a12[13];
  v35[12] = a12[12];
  v35[13] = v36;
  v35[14] = a12[14];
  *(_OWORD *)((char *)v35 + 239) = *(_OWORD *)((char *)a12 + 239);
  v37 = a12[9];
  v35[8] = a12[8];
  v35[9] = v37;
  v38 = a12[11];
  v35[10] = a12[10];
  v35[11] = v38;
  v39 = a12[5];
  v35[4] = a12[4];
  v35[5] = v39;
  v40 = a12[7];
  v35[6] = a12[6];
  v35[7] = v40;
  v41 = a12[1];
  *v35 = *a12;
  v35[1] = v41;
  v42 = a12[3];
  v35[2] = a12[2];
  v35[3] = v42;
  if (qword_10097AD80 != -1)
    dispatch_once(&qword_10097AD80, &stru_100937B88);
  v63 = qword_10097AD78;
  v64[0] = _NSConcreteStackBlock;
  v64[1] = 3321888768;
  v64[2] = sub_10056F0B8;
  v64[3] = &unk_100937C28;
  v80 = a1;
  if (SHIBYTE(v88) < 0)
  {
    sub_10003430C(&v65, *(void **)buf, *(unint64_t *)&buf[8]);
  }
  else
  {
    v65 = *(_OWORD *)buf;
    v66 = v88;
  }
  v81 = a3;
  v82 = a4;
  v83 = a5;
  v79 = a6;
  v84 = a7;
  v68 = 0;
  v69 = 0;
  v67 = 0;
  v43 = operator new(0x20uLL);
  v44 = v23[1];
  *v43 = *v23;
  v43[1] = v44;
  v67 = v43;
  v68 = v43 + 2;
  v69 = v43 + 2;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v45 = operator new(0x20uLL);
  v46 = v25[1];
  *v45 = *v25;
  v45[1] = v46;
  v70 = v45;
  v71 = v45 + 2;
  v85 = a10;
  v72 = v45 + 2;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v47 = operator new(0xFFuLL);
  v48 = v27[13];
  v47[12] = v27[12];
  v47[13] = v48;
  v47[14] = v27[14];
  *(_OWORD *)((char *)v47 + 239) = *(_OWORD *)((char *)v27 + 239);
  v49 = v27[9];
  v47[8] = v27[8];
  v47[9] = v49;
  v50 = v27[11];
  v47[10] = v27[10];
  v47[11] = v50;
  v51 = v27[5];
  v47[4] = v27[4];
  v47[5] = v51;
  v52 = v27[7];
  v47[6] = v27[6];
  v47[7] = v52;
  v53 = v27[1];
  *v47 = *v27;
  v47[1] = v53;
  v54 = v27[3];
  v47[2] = v27[2];
  v47[3] = v54;
  v73 = v47;
  v74 = (char *)v47 + 255;
  v75 = (char *)v47 + 255;
  __p = 0;
  v77 = 0;
  v78 = 0;
  v55 = operator new(0xFFuLL);
  v78 = (char *)v55 + 255;
  v56 = v35[13];
  v55[12] = v35[12];
  v55[13] = v56;
  v55[14] = v35[14];
  *(_OWORD *)((char *)v55 + 239) = *(_OWORD *)((char *)v35 + 239);
  v57 = v35[9];
  v55[8] = v35[8];
  v55[9] = v57;
  v58 = v35[11];
  v55[10] = v35[10];
  v55[11] = v58;
  v59 = v35[5];
  v55[4] = v35[4];
  v55[5] = v59;
  v60 = v35[7];
  v55[6] = v35[6];
  v55[7] = v60;
  v61 = v35[1];
  *v55 = *v35;
  v55[1] = v61;
  v62 = v35[3];
  v55[2] = v35[2];
  v55[3] = v62;
  __p = v55;
  v77 = (char *)v55 + 255;
  v86 = a13;
  sub_10048D538(v63, v64);
  if (__p)
  {
    v77 = __p;
    operator delete(__p);
  }
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (SHIBYTE(v66) < 0)
    operator delete((void *)v65);
  operator delete(v35);
  operator delete(v27);
  operator delete(v25);
  operator delete(v23);
  if (SHIBYTE(v88) < 0)
    operator delete(*(void **)buf);
}

void sub_10056E850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  operator delete(v33);
  operator delete(v32);
  operator delete(v31);
  operator delete(v30);
  if (*(char *)(v34 - 89) < 0)
    operator delete(*(void **)(v34 - 112));
  _Unwind_Resume(a1);
}

void sub_10056E904()
{
  JUMPOUT(0x10056E8D4);
}

void sub_10056E90C()
{
  JUMPOUT(0x10056E8DCLL);
}

void sub_10056E914()
{
  JUMPOUT(0x10056E8E4);
}

void sub_10056E91C()
{
  JUMPOUT(0x10056E8ECLL);
}

void sub_10056E924(__int16 a1, __int16 a2, __int16 a3)
{
  _QWORD v6[4];
  __int16 v7;
  __int16 v8;
  __int16 v9;

  if (qword_10097AD80 != -1)
    dispatch_once(&qword_10097AD80, &stru_100937B88);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10056F588;
  v6[3] = &unk_1009186B0;
  v7 = a1;
  v8 = a2;
  v9 = a3;
  sub_10048D538(qword_10097AD78, v6);
}

void sub_10056E9C8(__int16 a1, char *a2, __int16 a3, char a4, char a5)
{
  uint64_t v9;
  _QWORD v10[4];
  __int128 __p;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  char v15;
  char v16;
  void *v17[2];
  uint64_t v18;

  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  sub_100091AE8(v17, a2);
  if (qword_10097AD80 != -1)
    dispatch_once(&qword_10097AD80, &stru_100937B88);
  v9 = qword_10097AD78;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  v10[2] = sub_10056F5E0;
  v10[3] = &unk_100937C58;
  v13 = a1;
  if (SHIBYTE(v18) < 0)
  {
    sub_10003430C(&__p, v17[0], (unint64_t)v17[1]);
  }
  else
  {
    __p = *(_OWORD *)v17;
    v12 = v18;
  }
  v14 = a3;
  v15 = a4;
  v16 = a5;
  sub_10048D538(v9, v10);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
}

void sub_10056EADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10056EB10(__int16 a1, char a2, char *__s)
{
  uint64_t v5;
  _QWORD v6[4];
  __int128 __p;
  uint64_t v8;
  __int16 v9;
  char v10;
  __int128 v11;
  uint64_t v12;

  v11 = 0uLL;
  v12 = 0;
  sub_100091AE8(&v11, __s);
  if (qword_10097AD80 != -1)
    dispatch_once(&qword_10097AD80, &stru_100937B88);
  v5 = qword_10097AD78;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  v6[2] = sub_10056F6A8;
  v6[3] = &unk_100937C88;
  v9 = a1;
  v10 = a2;
  if (SHIBYTE(v12) < 0)
  {
    sub_10003430C(&__p, (void *)v11, *((unint64_t *)&v11 + 1));
  }
  else
  {
    __p = v11;
    v8 = v12;
  }
  sub_10048D538(v5, v6);
  if (SHIBYTE(v8) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)v11);
}

void sub_10056EC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 33) < 0)
    operator delete(*(void **)(v19 - 56));
  _Unwind_Resume(exception_object);
}

void sub_10056EC44(__int16 a1, char a2, char *__s)
{
  uint64_t v5;
  _QWORD v6[4];
  __int128 __p;
  uint64_t v8;
  __int16 v9;
  char v10;
  __int128 v11;
  uint64_t v12;

  v11 = 0uLL;
  v12 = 0;
  sub_100091AE8(&v11, __s);
  if (qword_10097AD80 != -1)
    dispatch_once(&qword_10097AD80, &stru_100937B88);
  v5 = qword_10097AD78;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  v6[2] = sub_10056F77C;
  v6[3] = &unk_100937C88;
  v9 = a1;
  v10 = a2;
  if (SHIBYTE(v12) < 0)
  {
    sub_10003430C(&__p, (void *)v11, *((unint64_t *)&v11 + 1));
  }
  else
  {
    __p = v11;
    v8 = v12;
  }
  sub_10048D538(v5, v6);
  if (SHIBYTE(v8) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)v11);
}

void sub_10056ED44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 33) < 0)
    operator delete(*(void **)(v19 - 56));
  _Unwind_Resume(exception_object);
}

void sub_10056ED80(__int16 a1, int a2)
{
  _QWORD v4[4];
  int v5;
  __int16 v6;

  if (qword_10097AD80 != -1)
    dispatch_once(&qword_10097AD80, &stru_100937B88);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10056F850;
  v4[3] = &unk_1009186B0;
  v6 = a1;
  v5 = a2;
  sub_10048D538(qword_10097AD78, v4);
}

void sub_10056EE14(uint64_t a1)
{
  _QWORD *v2;
  unsigned int v3;
  void *__p[2];
  uint64_t v5;

  if (qword_10097B770 != -1)
    dispatch_once(&qword_10097B770, &stru_100937BA8);
  v2 = (_QWORD *)qword_10097B768;
  v3 = *(unsigned __int16 *)(a1 + 56);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10003430C(__p, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 48);
  }
  sub_10056C6BC(v2, v3, (uint64_t *)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_10056EECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10056EEE8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = 0;
  v1 = 0;
  operator new();
}

void sub_10056F058(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  operator delete();
}

void sub_10056F0B8(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  char v6;
  _BYTE *v7;
  _BYTE *v8;
  size_t v9;
  void *v10;
  _BYTE *v11;
  _BYTE *v12;
  size_t v13;
  char v14;
  unsigned __int8 v15;
  _BYTE *v16;
  _BYTE *v17;
  size_t v18;
  void *v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  void *__p;
  void *v29;
  std::string __dst;

  if (qword_10097B770 != -1)
    dispatch_once(&qword_10097B770, &stru_100937BA8);
  v2 = qword_10097B768;
  v3 = *(unsigned __int16 *)(a1 + 156);
  if (*(char *)(a1 + 55) < 0)
    sub_10003430C(&__dst, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  else
    __dst = *(std::string *)(a1 + 32);
  v4 = *(unsigned __int16 *)(a1 + 158);
  v5 = *(unsigned __int16 *)(a1 + 160);
  v6 = *(_BYTE *)(a1 + 162);
  v26 = *(unsigned __int8 *)(a1 + 163);
  v27 = *(_DWORD *)(a1 + 152);
  v8 = *(_BYTE **)(a1 + 56);
  v7 = *(_BYTE **)(a1 + 64);
  v9 = v7 - v8;
  if (v7 == v8)
  {
    v10 = 0;
  }
  else
  {
    if (v7 - v8 < 0)
      abort();
    v10 = operator new(v7 - v8);
    memmove(v10, v8, v9);
  }
  v12 = *(_BYTE **)(a1 + 80);
  v11 = *(_BYTE **)(a1 + 88);
  v13 = v11 - v12;
  v29 = v10;
  if (v11 == v12)
  {
    v14 = v6;
    __p = 0;
  }
  else
  {
    if (v11 - v12 < 0)
      abort();
    v14 = v6;
    __p = operator new(v11 - v12);
    memmove(__p, v12, v13);
  }
  v15 = *(_BYTE *)(a1 + 164);
  v17 = *(_BYTE **)(a1 + 104);
  v16 = *(_BYTE **)(a1 + 112);
  v18 = v16 - v17;
  if (v16 == v17)
  {
    v19 = 0;
  }
  else
  {
    if (v16 - v17 < 0)
      abort();
    v19 = operator new(v16 - v17);
    memmove(v19, v17, v18);
  }
  v21 = *(_BYTE **)(a1 + 128);
  v20 = *(_BYTE **)(a1 + 136);
  v22 = v20 - v21;
  if (v20 == v21)
  {
    v23 = 0;
  }
  else
  {
    if (v20 - v21 < 0)
      abort();
    v23 = operator new(v20 - v21);
    memmove(v23, v21, v22);
  }
  sub_10056CA48(v2, v3, &__dst, v4, v5, v14, v27, v26, v24, v25, v15);
  if (v23)
    operator delete(v23);
  if (v19)
    operator delete(v19);
  if (__p)
    operator delete(__p);
  if (v29)
    operator delete(v29);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_10056F2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, void *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;

  if (v25)
    operator delete(v25);
  if (v24)
    operator delete(v24);
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10056F344(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  size_t v11;
  char *v12;
  _BYTE *v13;
  _BYTE *v14;
  size_t v15;
  char *v16;
  _QWORD *result;
  _BYTE *v18;
  _BYTE *v19;
  size_t v20;
  char *v21;

  if (*(char *)(a2 + 55) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v6 = *(_BYTE **)(a2 + 56);
  v5 = *(_BYTE **)(a2 + 64);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    sub_1002A367C((_QWORD *)(a1 + 56), v5 - v6);
    v8 = *(char **)(a1 + 64);
    memmove(v8, v6, v7);
    *(_QWORD *)(a1 + 64) = &v8[v7];
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v10 = *(_BYTE **)(a2 + 80);
  v9 = *(_BYTE **)(a2 + 88);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    sub_1002A367C((_QWORD *)(a1 + 80), v9 - v10);
    v12 = *(char **)(a1 + 88);
    memmove(v12, v10, v11);
    *(_QWORD *)(a1 + 88) = &v12[v11];
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v14 = *(_BYTE **)(a2 + 104);
  v13 = *(_BYTE **)(a2 + 112);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    sub_1002A367C((_QWORD *)(a1 + 104), v13 - v14);
    v16 = *(char **)(a1 + 112);
    memmove(v16, v14, v15);
    *(_QWORD *)(a1 + 112) = &v16[v15];
  }
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  result = (_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 144) = 0;
  v19 = *(_BYTE **)(a2 + 128);
  v18 = *(_BYTE **)(a2 + 136);
  v20 = v18 - v19;
  if (v18 != v19)
  {
    sub_1002A367C(result, v18 - v19);
    v21 = *(char **)(a1 + 136);
    result = memmove(v21, v19, v20);
    *(_QWORD *)(a1 + 136) = &v21[v20];
  }
  return result;
}

void sub_10056F4B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;

  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 112) = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 88) = v8;
    operator delete(v8);
  }
  v9 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v9;
    operator delete(v9);
  }
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10056F514(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(_QWORD *)(a1 + 136) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(_QWORD *)(a1 + 112) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(_QWORD *)(a1 + 88) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 56);
  if (v5)
  {
    *(_QWORD *)(a1 + 64) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

uint64_t sub_10056F588(unsigned __int16 *a1)
{
  if (qword_10097B770 != -1)
    dispatch_once(&qword_10097B770, &stru_100937BA8);
  return sub_10056D3F8(qword_10097B768, a1[16], a1[17], a1[18]);
}

void sub_10056F5E0(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  uint64_t v4;

  if (qword_10097B770 != -1)
    dispatch_once(&qword_10097B770, &stru_100937BA8);
  v2 = qword_10097B768;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10003430C(__p, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 48);
  }
  sub_10056D5C8(v2, 0, (uint64_t)__p, 0, *(unsigned __int8 *)(a1 + 60), *(_BYTE *)(a1 + 61));
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_10056F68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10056F6A8(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  void *__p[2];
  uint64_t v6;

  if (qword_10097B770 != -1)
    dispatch_once(&qword_10097B770, &stru_100937BA8);
  v2 = qword_10097B768;
  v3 = *(unsigned __int16 *)(a1 + 56);
  v4 = *(unsigned __int8 *)(a1 + 58);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10003430C(__p, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 48);
  }
  sub_10056D670(v2, v3, v4 != 0, (uint64_t *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_10056F760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10056F77C(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  void *__p[2];
  uint64_t v6;

  if (qword_10097B770 != -1)
    dispatch_once(&qword_10097B770, &stru_100937BA8);
  v2 = qword_10097B768;
  v3 = *(unsigned __int16 *)(a1 + 56);
  v4 = *(unsigned __int8 *)(a1 + 58);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10003430C(__p, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 48);
  }
  sub_10056D864(v2, v3, v4 != 0, (uint64_t *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_10056F834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10056F850(uint64_t a1)
{
  if (qword_10097B770 != -1)
    dispatch_once(&qword_10097B770, &stru_100937BA8);
  return sub_10056DAEC(qword_10097B768, *(unsigned __int16 *)(a1 + 36), *(_DWORD *)(a1 + 32));
}

uint64_t sub_10056F8A4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 == a1 + 8)
    return 0;
  v5 = a2[23];
  v6 = *((_QWORD *)a2 + 1);
  if ((v5 & 0x80u) == 0)
    v7 = a2[23];
  else
    v7 = *((_QWORD *)a2 + 1);
  while (1)
  {
    v8 = *(_QWORD *)(v3 + 16);
    v9 = *(unsigned __int8 *)(v8 + 55);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(v8 + 40);
    if (v7 != v9)
      goto LABEL_18;
    v13 = *(_QWORD *)(v8 + 32);
    v11 = v8 + 32;
    v12 = v13;
    v14 = (unsigned __int8 *)(v10 >= 0 ? v11 : v12);
    if ((v5 & 0x80) != 0)
      break;
    if (!(_DWORD)v5)
      return 1;
    v15 = a2;
    v16 = v5;
    while (*v15 == *v14)
    {
      ++v15;
      ++v14;
      if (!--v16)
        return 1;
    }
LABEL_18:
    v3 = *(_QWORD *)(v3 + 8);
    if (v3 == v2)
      return 0;
  }
  if (memcmp(*(const void **)a2, v14, v6))
    goto LABEL_18;
  return 1;
}

uint64_t *sub_10056F97C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      v6 = sub_10056FA0C((uint64_t)a1, 0, 0, a2);
      v7 = *a1;
      *v6 = *a1;
      v6[1] = a1;
      *(_QWORD *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_10056F9F8(_Unwind_Exception *a1)
{
  void **v1;

  sub_10035940C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10056FA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _BYTE *v8;

  v7 = operator new(0x28uLL);
  *v7 = a2;
  v7[1] = a3;
  v8 = v7 + 2;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10003430C(v8, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a4;
    v7[4] = *(_QWORD *)(a4 + 16);
  }
  return v7;
}

void sub_10056FA70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10056FA84(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10056ACC0(result);
    operator delete();
  }
  return result;
}

void sub_10056FAC0(id a1)
{
  operator new();
}

void sub_10056FB00()
{
  operator delete();
}

void sub_10056FB24()
{
  void *v0;
  uint64_t i;
  _QWORD v2[3];
  _QWORD v3[3];
  _QWORD v4[3];
  _QWORD v5[3];

  v0 = objc_autoreleasePoolPush();
  sub_100091AE8(byte_100999798, "<?xml version=\"1.0\"?>\n<!DOCTYPE folder-listing SYSTEM \"obex-folder-listing.dtd\">\n");
  __cxa_atexit((void (*)(void *))&std::string::~string, byte_100999798, (void *)&_mh_execute_header);
  sub_100091AE8(v2, "inbox");
  sub_100091AE8(v3, "sent");
  sub_100091AE8(v4, "outbox");
  sub_100091AE8(v5, "deleted");
  sub_10056F97C(&qword_1009997B0, (uint64_t)v2, 4);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v5[i + 2]) < 0)
      operator delete((void *)v5[i]);
  }
  __cxa_atexit((void (*)(void *))sub_10056A350, &qword_1009997B0, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10056FC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 95) < 0)
      operator delete(*(void **)(v10 + v12 + 72));
    v12 -= 24;
    if (v12 == -96)
      _Unwind_Resume(exception_object);
  }
}

_QWORD *sub_10056FCC4(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

uint64_t *sub_10056FCCC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

BOOL sub_10056FD14(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;

  v4 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a1;
    v8 = 136315650;
    v9 = "isHciTransportCommand";
    v10 = 2048;
    v11 = v5;
    v12 = 2048;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: fHciTransportCommand %llx, handle %llx", (uint8_t *)&v8, 0x20u);
  }
  return *a1 && *a1 == a2;
}

BOOL sub_10056FDF0(uint64_t *a1, _DWORD *a2, uint64_t *a3)
{
  NSObject *v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  const char *v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;
  const char *v28;

  *a3 = 0;
  if (*a2 == 3)
  {
    if (a1[1])
    {
      v14 = qword_100999980;
      result = os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      sub_100704854(v14, v15, v16, v17, v18, v19, v20, v21);
      return 0;
    }
    if (qword_10097B780 != -1)
    {
      v26 = a2;
      dispatch_once(&qword_10097B780, &stru_100937CF8);
      a2 = v26;
    }
    sub_10034CB38(qword_10097B778, (uint64_t)a2);
    if (qword_10097B780 != -1)
      dispatch_once(&qword_10097B780, &stru_100937CF8);
    *a1 = qword_10097B778;
    *a3 = a1[1];
    v23 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v27 = 136315138;
      v28 = "TransportCreate";
      v24 = "%s: kBTVirtualTransportInterfaceACL, success";
      goto LABEL_22;
    }
  }
  else if (*a2 == 2)
  {
    if (*a1)
    {
      v5 = qword_100999980;
      result = os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      sub_1007047E4(v5, v7, v8, v9, v10, v11, v12, v13);
      return 0;
    }
    if (qword_10097B780 != -1)
    {
      v25 = a2;
      dispatch_once(&qword_10097B780, &stru_100937CF8);
      a2 = v25;
    }
    sub_10034CB38(qword_10097B778, (uint64_t)a2);
    if (qword_10097B780 != -1)
      dispatch_once(&qword_10097B780, &stru_100937CF8);
    v22 = qword_10097B778;
    *a1 = qword_10097B778;
    *a3 = v22;
    sub_1004C6340(*a1);
    v23 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v27 = 136315138;
      v28 = "TransportCreate";
      v24 = "%s: BTVirtualTransportInterfaceHCICommand, success";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&v27, 0xCu);
    }
  }
  return 1;
}

uint64_t sub_100570058(_QWORD *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  int v9;
  const char *v10;

  v4 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 136315138;
    v10 = "TransportFree";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: TransportFree", (uint8_t *)&v9, 0xCu);
  }
  v5 = *a2;
  if (*a2 == *a1)
  {
    sub_1004C6390(v5);
    if (qword_10097B780 != -1)
      dispatch_once(&qword_10097B780, &stru_100937CF8);
    sub_10034CC44((_QWORD *)qword_10097B778);
    *a1 = 0;
    v6 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 136315138;
      v10 = "TransportFree";
      v7 = "%s: BTVirtualTransportInterfaceHCICommand";
      goto LABEL_13;
    }
  }
  else if (v5 == a1[1])
  {
    if (qword_10097B780 != -1)
      dispatch_once(&qword_10097B780, &stru_100937CF8);
    sub_10034CC44((_QWORD *)qword_10097B778);
    a1[1] = 0;
    v6 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 136315138;
      v10 = "TransportFree";
      v7 = "%s: kBTVirtualTransportInterfaceACL";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v9, 0xCu);
    }
  }
  return 1;
}

uint64_t sub_100570230(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*a1 == a2 || a1[1] == a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a3, a4, a5, a6, a7);
  v7 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR))
    sub_1007048C4(v7, v8, v9, v10, v11, v12, v13, v14);
  return 0;
}

BOOL sub_1005702B8(_QWORD *a1, uint64_t a2)
{
  if (!a2)
    return 0;
  if (*a1 == a2)
    return 1;
  return a1[1] == a2;
}

void sub_1005702E8(id a1)
{
  operator new();
}

uint64_t sub_100570338(uint64_t a1)
{
  *(_QWORD *)sub_10048D2F0(a1, "MapService", 512) = &off_100937D28;
  if (qword_10097B770 != -1)
    dispatch_once(&qword_10097B770, &stru_100937E18);
  sub_10048D5B0(a1, qword_10097B768);
  return a1;
}

void sub_1005703AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048D3E0(v1);
  _Unwind_Resume(a1);
}

void sub_1005703C8(uint64_t a1)
{
  sub_10048D3E0(a1);
  operator delete();
}

uint64_t sub_1005703F4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  __int128 v6;
  uint64_t v7;

  result = sub_10043F65C(a2, *(_DWORD *)(a1 + 32));
  if (!(_DWORD)result)
  {
    v5 = *(_DWORD *)(a1 + 32);
    v7 = 0;
    sub_10004AD30((uint64_t)&v7);
    *(_QWORD *)&v6 = (int)v7;
    *((_QWORD *)&v6 + 1) = SWORD2(v7);
    return sub_1004415B0(a2, v5, 0, &v6, 0);
  }
  return result;
}

uint64_t sub_100570464(uint64_t a1, uint64_t a2, const char *a3, const char *a4)
{
  NSObject *v7;
  uint64_t result;
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  int v12;
  const char *v13;
  __int16 v14;
  const char *v15;

  v7 = qword_1009999B8;
  if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
  {
    v12 = 136315394;
    v13 = a3;
    v14 = 2080;
    v15 = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "In MapService::setServiceSetting with key: %s and value: %s", (uint8_t *)&v12, 0x16u);
  }
  result = 3;
  if (a2 && a3 && a4)
  {
    if (!strncmp(a3, "BT_KEY_MAP_ENABLED", 0x13uLL))
    {
      v9 = strncmp(a4, "BT_VALUE_MAP_ENABLED", 0x15uLL);
      v10 = qword_1009999B8;
      v11 = os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (v11)
        {
          LOWORD(v12) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Setting mapEnabled to False", (uint8_t *)&v12, 2u);
        }
        sub_100448710(a2, 0);
        if (qword_10097B770 != -1)
          dispatch_once(&qword_10097B770, &stru_100937E18);
        sub_100481364(qword_10097B768, a2);
      }
      else
      {
        if (v11)
        {
          LOWORD(v12) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Setting mapEnabled to True", (uint8_t *)&v12, 2u);
        }
        sub_100448710(a2, 1);
      }
      return 0;
    }
    else
    {
      return 3;
    }
  }
  return result;
}

uint64_t sub_100570634(uint64_t a1, uint64_t a2, const char *a3, char *a4)
{
  NSObject *v7;
  uint64_t result;
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  int v12;
  const char *v13;

  v7 = qword_1009999B8;
  if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
  {
    v12 = 136315138;
    v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "In MapService::getServiceSetting with key: %s", (uint8_t *)&v12, 0xCu);
  }
  result = 3;
  if (a2 && a3 && a4)
  {
    if (!strncmp(a3, "BT_KEY_MAP_ENABLED", 0x13uLL))
    {
      v9 = sub_100448668(a2);
      v10 = qword_1009999B8;
      v11 = os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (v11)
        {
          LOWORD(v12) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Returning mapEnabled as True", (uint8_t *)&v12, 2u);
        }
        result = 0;
        strcpy(a4, "BT_VALUE_MAP_ENABLED");
      }
      else
      {
        if (v11)
        {
          LOWORD(v12) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Returning mapEnabled as False", (uint8_t *)&v12, 2u);
        }
        result = 0;
        strcpy(a4, "BT_VALUE_MAP_DISABLED");
      }
    }
    else
    {
      return 3;
    }
  }
  return result;
}

void sub_1005707D0(id a1)
{
  operator new();
}

void sub_100570810()
{
  operator delete();
}

uint64_t sub_100570834(uint64_t a1)
{
  *(_QWORD *)a1 = off_100937E48;
  *(_QWORD *)(a1 + 8) = off_100937EF0;
  *(_QWORD *)(a1 + 16) = off_100937F50;
  *(_QWORD *)(a1 + 24) = off_100938000;
  *(_QWORD *)(a1 + 32) = &off_100938020;
  sub_1000160D0(a1 + 40);
  *(_WORD *)(a1 + 174) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 108) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  mach_timebase_info((mach_timebase_info_t)(a1 + 176));
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return a1;
}

void sub_1005708BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100069BDC(v1);
  _Unwind_Resume(a1);
}

void sub_1005708D4(uint64_t a1)
{
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100938098);
  sub_10042381C(qword_100977B48 + 8, a1 + 24);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009380B8);
  sub_1000B5218((uint64_t)off_100977FA8 + 1872, a1 + 8);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_1009380D8);
  sub_10061F358((uint64_t)off_1009778A0, a1 + 16, 0);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_1009380F8);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 32);
  sub_1005709E4(a1);
}

void sub_1005709E4(uint64_t a1)
{
  void *__p[2];
  uint64_t v3;

  __p[0] = 0;
  __p[1] = 0;
  v3 = 0;
  sub_100091AE8(__p, "com.apple.bluetooth.Server.FastconnectACL");
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100938098);
  if (sub_10000A378(qword_100977B48, (uint64_t)__p))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_ERROR))
      sub_100704934();
  }
  else
  {
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100938098);
    *(_QWORD *)(a1 + 120) = sub_1000229D8((_QWORD *)qword_100977B48, *(_QWORD *)(a1 + 112));
  }
  if (SHIBYTE(v3) < 0)
    operator delete(__p[0]);
}

void sub_100570ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100570AF8(uint64_t a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_1009380F8);
  sub_100069060((uint64_t)off_100977A50 + 64, a1 + 32);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009380B8);
  sub_100069060((uint64_t)off_100977FA8 + 1872, a1 + 8);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100938098);
  sub_10000B174(qword_100977B48, *(_QWORD *)(a1 + 112));
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100938098);
  sub_100069060(qword_100977B48 + 8, a1 + 24);
}

uint64_t sub_100570BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD v11[5];
  _QWORD v12[2];
  void *__p[2];
  void (*v14)(uint64_t);
  void *v15;
  uint64_t v16;
  uint8_t buf[4];
  void **v18;

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 40);
  if (*(_QWORD *)(a1 + 120) && *(_QWORD *)(a1 + 128) && *(_BYTE *)(a1 + 104))
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_1009380F8);
    if (*((_BYTE *)off_100977A50 + 60))
    {
      v4 = *(_QWORD *)(a1 + 136);
      if (v4)
      {
        if (v4 == a2)
        {
          v5 = qword_1009999C8;
          if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000340DC(*(_QWORD *)(a1 + 120), (uint64_t)__p);
            v6 = SHIBYTE(v14) >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            v18 = v6;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "LE Scan timeout for session\"%{public}s\" ", buf, 0xCu);
            if (SHIBYTE(v14) < 0)
              operator delete(__p[0]);
          }
        }
        else if (*(_QWORD *)(a1 + 144) != a2)
        {
          return sub_100034234((uint64_t)v12);
        }
        *(_QWORD *)(a1 + 136) = 0;
        sub_100034264((uint64_t)v12);
        *(_QWORD *)(a1 + 192) = mach_absolute_time();
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 8))(a1, *(_QWORD *)(a1 + 128));
        v7 = sub_10006BBEC();
        __p[0] = _NSConcreteStackBlock;
        __p[1] = (void *)3221225472;
        v14 = sub_100571614;
        v15 = &unk_100917378;
        v16 = a1;
        sub_100041A34(v7, __p);
        if (qword_100977C30 != -1)
          dispatch_once(&qword_100977C30, &stru_100938138);
        sub_1006051FC((uint64_t)off_100977C28, 0);
        v8 = qword_1009999C8;
        if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_INFO))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Resume leScan", (uint8_t *)__p, 2u);
        }
        v9 = sub_1000419F4();
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472;
        v11[2] = sub_100570EEC;
        v11[3] = &unk_100917378;
        v11[4] = a1;
        sub_100041A34(v9, v11);
      }
    }
  }
  return sub_100034234((uint64_t)v12);
}

void sub_100570E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100570E8C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_10006BBEC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100571614;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

uint64_t sub_100570EEC(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 108) = 1;
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009380B8);
  return sub_100681414((uint64_t)off_100977FA8, CFSTR("com.apple.bluetooth.fastConnect"));
}

uint64_t sub_100570F40(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  char v27;
  int v28;
  uint8_t v29[16];

  if (*(_QWORD *)(a1 + 120)
    || (v4 = qword_1009999C8, !os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_FAULT)))
  {
    if (a2)
      goto LABEL_4;
LABEL_16:
    v16 = qword_1009999C8;
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_FAULT))
      sub_100704960(v16, v17, v18, v19, v20, v21, v22, v23);
    return 1;
  }
  sub_100704B34(v4, v5, v6, v7, v8, v9, v10, v11);
  if (!a2)
    goto LABEL_16;
LABEL_4:
  if (!*(_QWORD *)(a1 + 120))
    return 1;
  if (*(_QWORD *)(a1 + 128))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_ERROR))
      sub_100704B08();
    return 303;
  }
  v13 = mach_absolute_time();
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = v13;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  v14 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14)
    && *(_BYTE *)(a1 + 175)
    && !*(_BYTE *)(a1 + 174))
  {
    sub_1000477B8();
    v15 = sub_10018241C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10057125C);
    sub_1000478A0();
    if (v15)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_ERROR))
        sub_100704ADC();
    }
    else
    {
      *(_BYTE *)(a1 + 174) = 1;
    }
  }
  if (*(_BYTE *)(a1 + 104)
    || *(_BYTE *)(a1 + 105)
    || *(_BYTE *)(a1 + 107)
    || *(_BYTE *)(a1 + 106)
    || *(_BYTE *)(a1 + 108))
  {
    v24 = qword_1009999C8;
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_ERROR))
      sub_100704A2C(a2, v24);
    return 400;
  }
  *(_QWORD *)(a1 + 128) = a2;
  v25 = qword_1009999C8;
  if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Start BBFC", v29, 2u);
  }
  v26 = mach_absolute_time();
  *(_QWORD *)(a1 + 208) = v26;
  if (*(_BYTE *)(a1 + 109))
  {
    if (!sub_10057138C(v26, (__int128 *)(a1 + 152), (_BYTE *)(a1 + 168)))
      goto LABEL_33;
LABEL_43:
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_ERROR))
      sub_100704A00();
    v27 = 2;
    goto LABEL_46;
  }
  if (qword_100977A68 != -1)
    dispatch_once(&qword_100977A68, &stru_100938158);
  if (sub_1004619F4((uint64_t)off_100977A60, (_OWORD *)(a1 + 152), a1 + 168))
    goto LABEL_43;
  v28 = sub_10057138C(0, (__int128 *)(a1 + 152), (_BYTE *)(a1 + 168));
  *(_BYTE *)(a1 + 109) = 1;
  if (v28)
    goto LABEL_43;
LABEL_33:
  *(_BYTE *)(a1 + 105) = 1;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_1009380D8);
  result = sub_10063E5C8((os_unfair_lock_s *)off_1009778A0);
  if ((_DWORD)result)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_ERROR))
      sub_1007049D4();
    *(_BYTE *)(a1 + 105) = 0;
    v27 = 3;
LABEL_46:
    *(_BYTE *)(a1 + 232) = v27;
    sub_100570E8C(a1);
    return 0;
  }
  return result;
}

void sub_10057125C(int a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  if (qword_10097ADA0 != -1)
    dispatch_once(&qword_10097ADA0, &stru_100938118);
  v7 = 0;
  v8 = 0;
  v5 = 0;
  v6 = 0;
  (*(void (**)(void *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)off_10097AD98 + 24))(off_10097AD98, &v8, &v7, &v6, &v5);
  v2 = sub_100027F68();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (!a1 && v3)
  {
    v4 = qword_1009999C8;
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218752;
      v10 = v8;
      v11 = 2048;
      v12 = v7;
      v13 = 2048;
      v14 = v6;
      v15 = 2048;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BBFC scanprep_time = %llums, scan_time = %llums, page_time = %llums, connection_time = %llums", buf, 0x2Au);
    }
  }
}

uint64_t sub_10057138C(int a1, __int128 *a2, _BYTE *__buf)
{
  do
  {
    do
      arc4random_buf(__buf, 3uLL);
    while (!(*(unsigned __int16 *)__buf | __buf[2]));
  }
  while (!(*(unsigned __int16 *)__buf ^ 0xFF | __buf[2]));
  *__buf = *__buf & 0x3F | 0x40;
  if (*a2 == 0)
    return 103;
  if (*(unsigned __int16 *)__buf | __buf[2])
    return sub_10018489C(a2, (__int16 *)__buf, (uint64_t)(__buf + 3));
  return 101;
}

void sub_10057142C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _BYTE *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v7[5];
  _BYTE __p[12];
  char v9;
  uint8_t buf[4];
  _BYTE *v11;

  v2 = *(_QWORD *)(a1 + 120);
  if (v2
    || (v6 = qword_1009999C8, os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_FAULT))
    && (*(_DWORD *)__p = 136446210,
        *(_QWORD *)&__p[4] = "m_Session",
        _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", __p, 0xCu), (v2 = *(_QWORD *)(a1 + 120)) != 0))
  {
    v3 = qword_1009999C8;
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(v2, (uint64_t)__p);
      v4 = v9 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LE stop scanning for session \"%{public}s\"", buf, 0xCu);
      if (v9 < 0)
        operator delete(*(void **)__p);
    }
    if (*(_BYTE *)(a1 + 104))
    {
      v5 = sub_1000419F4();
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_1005715B8;
      v7[3] = &unk_100917378;
      v7[4] = a1;
      sub_100023D84(v5, v7);
      *(_BYTE *)(a1 + 104) = 0;
    }
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
}

uint64_t sub_1005715B8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009380B8);
  return sub_100012EF4((uint64_t)off_100977FA8, *(_QWORD *)(v1 + 120), 1, 1, 0);
}

void sub_100571614(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  unsigned __int8 *v3;
  int v4;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v1 + 224) = mach_absolute_time();
  if (*(_QWORD *)(v1 + 128))
  {
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_100938178);
    v2 = off_100977A70;
    v3 = *(unsigned __int8 **)(v1 + 128);
    if (sub_10043E93C(v3))
      v4 = sub_100442118(*(_QWORD *)(v1 + 128), 21);
    else
      v4 = 0;
    sub_100498214((uint64_t)v2, (uint64_t)v3, v4);
    *(_QWORD *)(v1 + 128) = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_ERROR))
      sub_100704BA8();
    *(_BYTE *)(v1 + 232) = 4;
  }
}

void sub_1005716E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v12;
  id v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  NSObject *v20;
  const char *v21;
  _BYTE *v22;
  const char *v23;
  uint64_t v24;
  int v25;
  int v26;
  NSObject *v27;
  const char *v28;
  _BYTE *v29;
  uint64_t v30;
  NSObject *v31;
  unint64_t v32;
  _BYTE *v33;
  _BYTE __p[12];
  char v35;
  _BYTE buf[12];
  __int16 v37;
  id v38;
  __int16 v39;
  _BYTE *v40;
  __int16 v41;
  _QWORD v42[2];

  v12 = a3;
  v13 = a8;
  if (!*(_QWORD *)(a1 + 120))
    goto LABEL_7;
  v14 = *(unsigned __int8 **)(a1 + 128);
  if (!v14)
    goto LABEL_7;
  if (!*(_QWORD *)(a1 + 136))
    goto LABEL_7;
  if (*(_QWORD *)(a1 + 144))
    goto LABEL_7;
  v15 = ((unint64_t)v14[128] << 40) | ((unint64_t)v14[129] << 32) | ((unint64_t)v14[130] << 24) | ((unint64_t)v14[131] << 16) | ((unint64_t)v14[132] << 8) | v14[133];
  if (v15 != *(_QWORD *)(*(_QWORD *)(a4 + 8) + 200))
    goto LABEL_7;
  v16 = sub_100022AE4(a2);
  if (v16 != sub_100022AE4(*(_QWORD *)(a1 + 120)))
    goto LABEL_7;
  v17 = sub_10003BE44();
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 552))(v17);
  if (v18 == 1)
  {
    v24 = *(_QWORD *)(a4 + 8);
    v25 = *(unsigned __int8 *)(v24 + 365);
    v26 = *(_DWORD *)(v24 + 444);
    v27 = qword_1009999C8;
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000217F4(v15);
      v28 = "Dropping";
      if (!(v25 | v26))
        v28 = "Using";
      *(_DWORD *)buf = 136316162;
      if (v35 >= 0)
        v29 = __p;
      else
        v29 = *(_BYTE **)__p;
      *(_QWORD *)&buf[4] = v28;
      v37 = 2112;
      v38 = v12;
      v39 = 2080;
      v40 = v29;
      v41 = 1024;
      LODWORD(v42[0]) = v26;
      WORD2(v42[0]) = 1024;
      *(_DWORD *)((char *)v42 + 6) = v25;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Warning: BBFC: %s ADV report for %@ %s antenna:%d scanSourceCore:%d", buf, 0x2Cu);
      if (v35 < 0)
        operator delete(*(void **)__p);
    }
    if (!(v25 | v26))
    {
LABEL_31:
      v30 = mach_absolute_time();
      v31 = qword_1009999C8;
      if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
      {
        v32 = (v30 - *(_QWORD *)(a1 + 184)) * *(unsigned int *)(a1 + 176) / *(unsigned int *)(a1 + 180) / 0xF4240;
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Scan took:%llu ms", buf, 0xCu);
        v31 = qword_1009999C8;
      }
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043F6EC(*(_QWORD *)(a1 + 128), (uint64_t)buf);
        if (v39 >= 0)
          v33 = buf;
        else
          v33 = *(_BYTE **)buf;
        *(_DWORD *)__p = 136446210;
        *(_QWORD *)&__p[4] = v33;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Found device \"%{public}s\" ", __p, 0xCu);
        if (SHIBYTE(v39) < 0)
          operator delete(*(void **)buf);
      }
      *(_BYTE *)(a1 + 232) = 1;
      operator new();
    }
  }
  else
  {
    if (v18 != 2)
      goto LABEL_31;
    v19 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 8) + 369);
    v20 = qword_1009999C8;
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000217F4(v15);
      v21 = "Dropping";
      if (v35 >= 0)
        v22 = __p;
      else
        v22 = *(_BYTE **)__p;
      if (!v19)
        v21 = "Using";
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v21;
      v37 = 2112;
      v38 = v12;
      v23 = "N";
      v39 = 2080;
      if (v19)
        v23 = "Y";
      v40 = v22;
      v41 = 2080;
      v42[0] = v23;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Warning: BBFC: %s ADV report for %@ %s coexDenied:%s", buf, 0x2Au);
      if (v35 < 0)
        operator delete(*(void **)__p);
    }
    if (!v19)
      goto LABEL_31;
  }
LABEL_7:

}

void sub_100571F88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_100572068(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  sub_1005716E8(a1 - 8, a2, a3, a4, a5, 0, a7, a8);
}

void sub_100572074(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint8_t buf[8];
  uint64_t v20;
  void (*v21)(uint64_t);
  void *v22;
  uint64_t v23;

  if (qword_100993358 != -1)
    dispatch_once(&qword_100993358, &stru_100938040);
  if (*(_QWORD *)(a1 + 120)
    || (v7 = qword_1009999C8, os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_FAULT))
    && !sub_100704BD4(v7, (_QWORD *)(a1 + 120), v8, v9, v10, v11, v12, v13))
  {
    if (*(_BYTE *)(a1 + 106))
    {
      v15 = 0;
      v16 = &v15;
      v17 = 0x2020000000;
      v18 = 1;
      v2 = qword_1009999C8;
      if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "leScanPaused", buf, 2u);
        v2 = qword_1009999C8;
      }
      *(_BYTE *)(a1 + 106) = 0;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "add EventListener In Paused", buf, 2u);
      }
      if (qword_100977FB0 != -1)
        dispatch_once(&qword_100977FB0, &stru_1009380B8);
      sub_1000B5218((uint64_t)off_100977FA8 + 1904, a1 + 8);
      if (qword_100977C30 != -1)
        dispatch_once(&qword_100977C30, &stru_100938138);
      v3 = sub_1006051FC((uint64_t)off_100977C28, ((unint64_t)*(unsigned __int8 *)(a1 + 169) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 168) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 170) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 171) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 172) << 8) | *(unsigned __int8 *)(a1 + 173) | 0x1000000000000);
      *((_DWORD *)v16 + 6) = v3;
      if (!v3)
        operator new();
      v4 = qword_1009999C8;
      if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fail to set RPA, skip BBFC", buf, 2u);
      }
      *(_BYTE *)(a1 + 232) = 5;
      v5 = sub_1000419F4();
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_100572510;
      v14[3] = &unk_100917378;
      v14[4] = a1;
      sub_100041A34(v5, v14);
      v6 = sub_10006BBEC();
      *(_QWORD *)buf = _NSConcreteStackBlock;
      v20 = 3221225472;
      v21 = sub_100571614;
      v22 = &unk_100917378;
      v23 = a1;
      sub_100041A34(v6, buf);
      _Block_object_dispose(&v15, 8);
    }
  }
}

void sub_10057237C()
{
  operator delete();
}

void sub_1005723B8(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  void *__p[2];
  char v5;
  uint8_t buf[8];
  char v7;

  v1 = sub_100027F68();
  sub_100091AE8(buf, "BBFC");
  sub_100091AE8(__p, "ScanTimeOut");
  v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v1 + 88))(v1, buf, __p, &dword_100993350);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2)
      return;
  }
  else if (!v2)
  {
    return;
  }
  v3 = qword_1009999C8;
  if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = dword_100993350;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: BBFC: ScanTimeOut overriden %d", buf, 8u);
  }
}

void sub_1005724D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100572510(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 108) = 1;
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009380B8);
  return sub_100681414((uint64_t)off_100977FA8, CFSTR("com.apple.bluetooth.fastConnect"));
}

void sub_100572564(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void **v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  int v16;
  _QWORD v17[5];
  void *__p[2];
  void (*v19)(uint64_t);
  void *v20;
  uint64_t v21;
  uint8_t buf[4];
  void **v23;
  __int16 v24;
  int v25;

  v2 = a1[5];
  *(_QWORD *)(v2 + 216) = mach_absolute_time();
  v3 = a1[6];
  *(_BYTE *)(v3 + 3) = 1;
  v4 = objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", CFSTR("com.apple.bluetoothd.FastConnectManager")));
  v5 = *(void **)(v3 + 152);
  *(_QWORD *)(v3 + 152) = v4;

  *(_DWORD *)(a1[6] + 168) = 265;
  v6 = qword_1009999C8;
  if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000340DC(*(_QWORD *)(v2 + 120), (uint64_t)__p);
    v7 = SHIBYTE(v19) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Start LE scanning for session \"%{public}s\"", buf, 0xCu);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
  }
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009380B8);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = sub_10001ABD0((uint64_t)off_100977FA8, *(_QWORD *)(v2 + 120), a1[6]);
  if (!*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    *(_QWORD *)(v2 + 184) = mach_absolute_time();
    *(_BYTE *)(v2 + 104) = 1;
    if (dword_100993350 < 1)
    {
      v11 = sub_10003BE44();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 328))(v11) & 1) != 0
        || (v12 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 384))(v12) & 1) != 0)
        || (v13 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 936))(v13)))
      {
        v14 = sub_10003BE44();
        (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 824))(v14);
      }
    }
    operator new();
  }
  v8 = qword_1009999C8;
  if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_ERROR))
  {
    sub_1000340DC(*(_QWORD *)(v2 + 120), (uint64_t)__p);
    v15 = SHIBYTE(v19) >= 0 ? __p : (void **)__p[0];
    v16 = *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    *(_DWORD *)buf = 136446466;
    v23 = v15;
    v24 = 1024;
    v25 = v16;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Fail LE scan for session \"%{public}s\" with error %d, skipp BBFC", buf, 0x12u);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
  }
  *(_BYTE *)(v2 + 232) = 6;
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_100938138);
  sub_1006051FC((uint64_t)off_100977C28, 0);
  v9 = sub_1000419F4();
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1005728F4;
  v17[3] = &unk_100917378;
  v17[4] = v2;
  sub_100041A34(v9, v17);
  v10 = sub_10006BBEC();
  __p[0] = _NSConcreteStackBlock;
  __p[1] = (void *)3221225472;
  v19 = sub_100571614;
  v20 = &unk_100917378;
  v21 = v2;
  sub_100041A34(v10, __p);
}

uint64_t sub_1005728F4(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 108) = 1;
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009380B8);
  return sub_100681414((uint64_t)off_100977FA8, CFSTR("com.apple.bluetooth.fastConnect"));
}

void sub_100572948(uint64_t a1)
{
  sub_100572074(a1 - 8);
}

uint64_t sub_100572950(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  if (*(_BYTE *)(result + 108))
  {
    v1 = result;
    v2 = qword_1009999C8;
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "leScanResumed", v3, 2u);
    }
    *(_BYTE *)(v1 + 108) = 0;
    if (qword_100977FB0 != -1)
      dispatch_once(&qword_100977FB0, &stru_1009380B8);
    sub_100069060((uint64_t)off_100977FA8 + 1904, v1 + 8);
    *(_BYTE *)(v1 + 107) = 1;
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_1009380D8);
    return sub_10063C498((uint64_t)off_1009778A0);
  }
  return result;
}

uint64_t sub_100572A3C(uint64_t a1)
{
  return sub_100572950(a1 - 8);
}

void sub_100572A44(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v4[5];
  uint8_t buf[16];

  if (*(_BYTE *)(a1 + 105))
  {
    *(_BYTE *)(a1 + 105) = 0;
    v2 = qword_1009999C8;
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "leConnectionManagerPaused", buf, 2u);
    }
    v3 = sub_1000419F4();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100572AF4;
    v4[3] = &unk_100917378;
    v4[4] = a1;
    sub_100041A34(v3, v4);
  }
}

void sub_100572AF4(uint64_t a1)
{
  _BYTE *v1;
  int v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];
  uint8_t buf[8];
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  _BYTE *v11;

  v1 = *(_BYTE **)(a1 + 32);
  v1[106] = 1;
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009380B8);
  v2 = sub_10068115C((uint64_t)off_100977FA8, CFSTR("com.apple.bluetooth.fastConnect"));
  if (v2)
  {
    if (v2 == 401)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_ERROR))
        sub_100704C8C();
      (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 72))(v1);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_ERROR))
        sub_100704C60();
      v1[232] = 7;
      v1[106] = 0;
      v4 = sub_1000419F4();
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_100572C80;
      v6[3] = &unk_100917378;
      v6[4] = v1;
      sub_100041A34(v4, v6);
      v5 = sub_10006BBEC();
      *(_QWORD *)buf = _NSConcreteStackBlock;
      v8 = 3221225472;
      v9 = sub_100571614;
      v10 = &unk_100917378;
      v11 = v1;
      sub_100041A34(v5, buf);
    }
  }
  else
  {
    v3 = qword_1009999C8;
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Pause LEObserver", buf, 2u);
    }
  }
}

uint64_t sub_100572C80(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 107) = 1;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_1009380D8);
  return sub_10063C498((uint64_t)off_1009778A0);
}

void sub_100572CCC(uint64_t a1)
{
  sub_100572A44(a1 - 16);
}

void sub_100572CD4(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  if (*(_BYTE *)(a1 + 107))
  {
    v2 = qword_1009999C8;
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "leConnectionManagerResumed", v3, 2u);
    }
    *(_BYTE *)(a1 + 107) = 0;
  }
}

void sub_100572D48(uint64_t a1)
{
  sub_100572CD4(a1 - 16);
}

void sub_100572D50(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint8_t v5[16];

  v2 = qword_1009999C8;
  if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "stackDidStart", v5, 2u);
  }
  *(_BYTE *)(a1 + 109) = 0;
  *(_BYTE *)(a1 + 174) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  v3 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3)
    && *(_BYTE *)(a1 + 175)
    && !*(_BYTE *)(a1 + 174))
  {
    sub_1000477B8();
    v4 = sub_10018241C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10057125C);
    sub_1000478A0();
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_ERROR))
        sub_100704CB8();
    }
    else
    {
      *(_BYTE *)(a1 + 174) = 1;
    }
  }
}

void sub_100572E44(uint64_t a1)
{
  sub_100572D50(a1 - 32);
}

uint64_t sub_100572E4C(uint64_t result)
{
  *(_BYTE *)(result + 174) = 0;
  *(_DWORD *)(result + 104) = 0;
  *(_WORD *)(result + 108) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 128) = 0;
  return result;
}

uint64_t sub_100572E64(uint64_t result)
{
  *(_BYTE *)(result + 142) = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_WORD *)(result + 76) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 96) = 0;
  return result;
}

void sub_100572E7C(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  int v7;
  const char *v8;

  v4 = qword_1009999C8;
  if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "disabled";
    if (a2)
      v5 = "enabled";
    v7 = 136315138;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BBFC TimeLogging is %s", (uint8_t *)&v7, 0xCu);
  }
  *(_BYTE *)(a1 + 175) = a2;
  if (*(_BYTE *)(a1 + 174))
  {
    sub_1000477B8();
    v6 = sub_1001824F8((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10057125C);
    sub_1000478A0();
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_ERROR))
        sub_100704CE4();
    }
    else
    {
      *(_BYTE *)(a1 + 174) = 0;
    }
  }
}

void sub_100572F8C(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  NSObject *v17;
  uint8_t v18[16];

  v10 = mach_absolute_time();
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 184);
  if (v12)
  {
    v13 = v12 - *(_QWORD *)(a1 + 200);
    v14 = *(unsigned int *)(a1 + 176);
    v15 = *(unsigned int *)(a1 + 180);
    *a2 = v13 * v14 / v15 / 0xF4240;
    *a3 = (*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) * v14 / v15 / 0xF4240;
    v16 = (v10 - *(_QWORD *)(a1 + 192)) * v14 / v15 / 0xF4240;
  }
  else
  {
    v17 = qword_1009999C8;
    if (os_log_type_enabled((os_log_t)qword_1009999C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "BBFC wasn't started", v18, 2u);
    }
    v16 = 0;
    *a2 = 0;
    *a3 = 0;
    v14 = *(unsigned int *)(a1 + 176);
    v15 = *(unsigned int *)(a1 + 180);
  }
  *a4 = v16;
  *a5 = (v11 - *(_QWORD *)(a1 + 200)) * v14 / v15 / 0xF4240;
}

std::string *sub_1005730AC(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, _BYTE *a5, std::string *this)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const std::string::value_type *v9;

  if (*(_QWORD *)(a1 + 184))
  {
    v6 = *(unsigned int *)(a1 + 176);
    v7 = *(unsigned int *)(a1 + 180);
    *a2 = (*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) * v6 / v7 / 0xF4240;
    *a3 = (*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 216)) * v6 / v7 / 0xF4240;
    *a4 = (*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 208)) * v6 / v7 / 0xF4240;
    *a5 = *(_BYTE *)(a1 + 232);
    v8 = *(char *)(a1 + 232);
    if (v8 > 7)
      v9 = "Invalid BBFC Status";
    else
      v9 = (&off_1009381B0)[v8];
  }
  else
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
    v9 = "Unknown";
    *a5 = 0;
  }
  return std::string::assign(this, v9);
}

void sub_100573174(uint64_t a1, void **a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    v5 = (uint64_t)(a2 + 2);
    v6 = (unint64_t)a2[2];
    v7 = a2[1];
    if ((unint64_t)v7 >= v6)
    {
      v9 = ((char *)v7 - (_BYTE *)*a2) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v10 = v6 - (_QWORD)*a2;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
      {
        v13 = (char *)sub_10007ABA0(v5, v12);
        v2 = *(_QWORD *)(a1 + 128);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      v15 = &v13[8 * v12];
      *(_QWORD *)v14 = v2;
      v8 = v14 + 8;
      v17 = (char *)*a2;
      v16 = (char *)a2[1];
      if (v16 != *a2)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        v16 = (char *)*a2;
      }
      *a2 = v14;
      a2[1] = v8;
      a2[2] = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v7 = v2;
      v8 = v7 + 1;
    }
    a2[1] = v8;
  }
}

_QWORD *sub_100573254(_QWORD *a1)
{
  *a1 = off_100937E48;
  a1[1] = off_100937EF0;
  a1[2] = off_100937F50;
  a1[3] = off_100938000;
  a1[4] = &off_100938020;
  sub_100069BDC(a1 + 5);
  return a1;
}

void sub_1005732A0(_QWORD *a1)
{
  *a1 = off_100937E48;
  a1[1] = off_100937EF0;
  a1[2] = off_100937F50;
  a1[3] = off_100938000;
  a1[4] = &off_100938020;
  sub_100069BDC(a1 + 5);
  operator delete();
}

void sub_100573320()
{
  operator delete();
}

uint64_t sub_100573334(uint64_t a1)
{
  if (qword_10097ADA0 != -1)
    dispatch_once(&qword_10097ADA0, &stru_100938118);
  return sub_100570BFC((uint64_t)off_10097AD98, a1);
}

void sub_100573384(id a1)
{
  operator new();
}

void sub_1005733C4()
{
  operator delete();
}

void sub_1005733E8(id a1)
{
  operator new();
}

void sub_100573428()
{
  operator delete();
}

void sub_10057344C(id a1)
{
  operator new();
}

void sub_10057348C()
{
  operator delete();
}

void sub_1005734B0(id a1)
{
  operator new();
}

void sub_1005734F0()
{
  operator delete();
}

void sub_100573514(id a1)
{
  operator new();
}

void sub_100573554()
{
  operator delete();
}

void sub_100573578(id a1)
{
  operator new();
}

void sub_1005735B8()
{
  operator delete();
}

void sub_1005735DC(id a1)
{
  operator new();
}

void sub_10057361C()
{
  operator delete();
}

void sub_100573640(id a1)
{
  operator new();
}

void sub_100573680()
{
  operator delete();
}

void sub_1005737B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100573850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100573B78(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  id *v6;
  id *v7;
  uint64_t v8;

  objc_destroyWeak(v7);
  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v8 - 104));
  _Unwind_Resume(a1);
}

void sub_100573BE4()
{
  JUMPOUT(0x100573BC4);
}

void sub_100573BEC()
{
  JUMPOUT(0x100573BCCLL);
}

void sub_100573BF4(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  NSObject *v5;
  int v6;
  id v7;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 138412290;
      v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourLink] deviceDidStartScanning with error %@\n", (uint8_t *)&v6, 0xCu);
    }
    if ((objc_opt_respondsToSelector(WeakRetained[5], "btvcBonjourLink:didStartScanningForType:") & 1) != 0)
      objc_msgSend(WeakRetained[3], "enumerateKeysAndObjectsUsingBlock:", &stru_100938210);
  }

}

void sub_100573CE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100573D00(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *WeakRetained;
  NSObject *v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  uint8_t buf[4];
  void *v13;
  __int16 v14;
  id v15;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8 = (id)qword_100999980;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "UUIDString"));
      *(_DWORD *)buf = 138412546;
      v13 = v9;
      v14 = 2112;
      v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourLink] Found device %@ with advertisementData %@\n", buf, 0x16u);

    }
    if ((objc_opt_respondsToSelector(WeakRetained[5], "btvcBonjourLink:didDiscoverType:withData:fromPeer:peerInfo:") & 1) != 0)
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100573EA4;
      v10[3] = &unk_100938260;
      v10[4] = WeakRetained;
      v11 = v5;
      objc_msgSend(v6, "enumerateObjectsUsingBlock:", v10);

    }
  }

}

void sub_100573E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_100573EA4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unsigned int v7;
  void *v8;
  id v9;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 40);
  v9 = v3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("BTVCBonjourLinkType")));
  v7 = objc_msgSend(v6, "unsignedIntValue");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("BTVCBonjourPayloadKey")));
  objc_msgSend(v5, "btvcBonjourLink:didDiscoverType:withData:fromPeer:peerInfo:", v4, v7, v8, *(_QWORD *)(a1 + 40), 0);

}

void sub_100573F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_100573F70(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *WeakRetained;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[5];
  id v13;
  uint8_t buf[4];
  void *v15;

  v5 = a2;
  v6 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v8 = (id)qword_100999980;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "UUIDString"));
    *(_DWORD *)buf = 138412290;
    v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourLink] Lost device %@\n", buf, 0xCu);

  }
  if (WeakRetained)
  {
    if (v6)
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", CFSTR("BTVCBonjourLinkType")));
    else
      v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[3], "allKeys"));
    v11 = (void *)v10;
    if ((objc_opt_respondsToSelector(WeakRetained[5], "btvcBonjourLink:didLosePeer:type:") & 1) != 0)
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_100574144;
      v12[3] = &unk_100938260;
      v12[4] = WeakRetained;
      v13 = v5;
      objc_msgSend(v11, "enumerateObjectsUsingBlock:", v12);

    }
  }

}

void sub_100574104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_100574144(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "btvcBonjourLink:didLosePeer:type:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), objc_msgSend(v3, "unsignedIntValue"));

}

void sub_10057419C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1005741B0(uint64_t a1, int a2, void *a3)
{
  id v5;
  _QWORD *WeakRetained;
  NSObject *v7;
  void *v8;
  _QWORD v9[5];
  id v10;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  id v15;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      v13 = a2;
      v14 = 2112;
      v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourLink] Advertising state update isStarted %d with error %@\n", buf, 0x12u);
    }
    v8 = (void *)WeakRetained[3];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100574304;
    v9[3] = &unk_1009382B0;
    v11 = a2;
    v9[4] = WeakRetained;
    v10 = v5;
    objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v9);

  }
}

void sub_1005742E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_100574304(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  if (*(_BYTE *)(a1 + 48))
  {
    if ((objc_opt_respondsToSelector(v6, "btvcBonjourLink:didStartAdvertisingType:") & 1) != 0)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "btvcBonjourLink:didStartAdvertisingType:", *(_QWORD *)(a1 + 32), objc_msgSend(v7, "unsignedIntValue"));
  }
  else if ((objc_opt_respondsToSelector(v6, "btvcBonjourLink:didStopAdvertisingType:withError:") & 1) != 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "btvcBonjourLink:didStopAdvertisingType:withError:", *(_QWORD *)(a1 + 32), objc_msgSend(v7, "unsignedIntValue"), *(_QWORD *)(a1 + 40));
  }

}

void sub_1005743C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1005743DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *WeakRetained;
  NSObject *v8;
  int v9;
  id v10;
  __int16 v11;
  id v12;

  v5 = a2;
  v6 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 138412546;
      v10 = v5;
      v11 = 2112;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourLink] Device didConnect %@ with error %@\n", (uint8_t *)&v9, 0x16u);
    }
    if ((objc_opt_respondsToSelector(WeakRetained[5], "btvcBonjourLink:didConnectToPeer:transport:error:") & 1) != 0)
      objc_msgSend(WeakRetained[5], "btvcBonjourLink:didConnectToPeer:transport:error:", WeakRetained, v5, 0, v6);
  }

}

void sub_1005744EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10057450C(uint64_t a1, void *a2)
{
  id v3;
  id *WeakRetained;
  NSObject *v5;
  int v6;
  id v7;

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v5 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 138412290;
      v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourLink] Device didDisConnect %@", (uint8_t *)&v6, 0xCu);
    }
    if ((objc_opt_respondsToSelector(WeakRetained[5], "btvcBonjourLink:didDisconnectFromPeer:error:") & 1) != 0)
      objc_msgSend(WeakRetained[5], "btvcBonjourLink:didDisconnectFromPeer:error:", WeakRetained, v3, 0);
  }

}

void sub_1005745FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100574618(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *WeakRetained;
  NSObject *v8;
  int v9;
  id v10;
  __int16 v11;
  id v12;

  v5 = a2;
  v6 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 138412546;
      v10 = v5;
      v11 = 2112;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourLink] Device didReceiveData from %@ with data %@\n", (uint8_t *)&v9, 0x16u);
    }
    if ((objc_opt_respondsToSelector(WeakRetained[5], "btvcBonjourLink:didReceiveData:fromPeer:") & 1) != 0)
      objc_msgSend(WeakRetained[5], "btvcBonjourLink:didReceiveData:fromPeer:", WeakRetained, v6, v5);
  }

}

void sub_100574724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1005749D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  void *v16;
  void *v17;
  void *v18;
  id *v19;

  objc_destroyWeak(v19);

  objc_destroyWeak(&location);
  objc_sync_exit(v17);

  _Unwind_Resume(a1);
}

void sub_100574A30(uint64_t a1, uint64_t a2, void *a3)
{
  id WeakRetained;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;

  v8 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)*((_QWORD *)WeakRetained + 5);
    v7 = *(_QWORD *)(a1 + 40);
    if (v8)
      objc_msgSend(v6, "btvcBonjourLink:didFailToStartAdvertisingOfType:withError:", v5, v7, v8);
    else
      objc_msgSend(v6, "btvcBonjourLink:didStartAdvertisingType:", v5, v7);
  }

}

void sub_100574A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100574D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  void *v19;
  void *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);

  objc_sync_exit(v19);
  _Unwind_Resume(a1);
}

void sub_100574E04(uint64_t a1, uint64_t a2, void *a3)
{
  id *WeakRetained;
  id *v5;
  id v6;

  v6 = a3;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained[5], "btvcBonjourLink:didStopAdvertisingType:withError:", WeakRetained, *(_QWORD *)(a1 + 40), v6);

}

void sub_100574E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1005750F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  objc_sync_exit(v13);
  _Unwind_Resume(a1);
}

void sub_100575274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10057536C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100575444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100575548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, id location)
{
  id *v16;
  void *v17;
  void *v18;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10057557C(uint64_t a1, void *a2)
{
  id *WeakRetained;
  id *v4;
  id v5;

  v5 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  v4 = WeakRetained;
  if (WeakRetained
    && (objc_opt_respondsToSelector(WeakRetained[5], "btvcBonjourLink:didSendData:toPeer:error:") & 1) != 0)
  {
    objc_msgSend(v4[5], "btvcBonjourLink:didSendData:toPeer:error:", v4, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v5);
  }

}

void sub_1005755E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_100575668(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 8);
  *(_QWORD *)(a1 + 72) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_1005756AC(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 8);
  *(_QWORD *)(a1 + 80) = a2;
  return sub_100034234((uint64_t)v5);
}

void sub_1005756F0(uint64_t a1, uint64_t a2, __int128 *a3, int a4)
{
  char *v5;
  NSObject *v8;
  NSObject *global_queue;
  dispatch_time_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  uint8_t buf[8];
  char v17;
  _QWORD block[6];
  int v19;
  __int128 __dst;
  uint64_t v21;

  v5 = (char *)a3;
  __dst = 0uLL;
  v21 = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003430C(&__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    __dst = *a3;
    v21 = *((_QWORD *)a3 + 2);
  }
  v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  global_queue = dispatch_get_global_queue(2, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10057592C;
  block[3] = &unk_1009180B0;
  v19 = a2;
  block[4] = a1;
  block[5] = v8;
  dispatch_async(global_queue, block);
  v10 = dispatch_time(0, 15000000000);
  if (dispatch_group_wait(v8, v10))
  {
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Timed out printing all debug logs during force restart", buf, 2u);
    }
  }
  v12 = sub_100065478();
  (*(void (**)(uint64_t, _QWORD, char *))(*(_QWORD *)v12 + 112))(v12, (unsigned __int16)a2, v5);
  if ((_DWORD)a2 == 132)
  {
    if (qword_10097AA70 != -1)
      dispatch_once(&qword_10097AA70, &stru_1009383E0);
    v13 = qword_10097AA68;
    sub_100091AE8(buf, "Restart");
    sub_100091AE8(__p, "OI_STATUS_INVALID_ROLE");
    sub_10047C59C(0.0, v13, (uint64_t *)buf, (uint64_t *)__p);
    if (v15 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(*(void **)buf);
  }
  if (a4)
  {
    if (v5[23] < 0)
      v5 = *(char **)v5;
    sub_1001131F8(a2, v5);
  }
  sub_100113298(a2);
}

void sub_1005758DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 57) < 0)
    operator delete(*(void **)(v21 - 80));
  _Unwind_Resume(exception_object);
}

void sub_10057592C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (sub_10002825C())
    sub_100575968(v2, *(_DWORD *)(a1 + 48), 0);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100575968(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFArrayRef v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  void *i;
  const __CFString *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  CFArrayRef v17;
  NSObject *v18;
  id v19;
  uint64_t v20;
  void *j;
  const __CFString *v22;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  _BOOL4 v28;
  _BOOL4 v29;
  double v30;
  uint64_t v31;
  void *context;
  const __CFArray *v36;
  const __CFArray *obj;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  void *__p;
  char v47;
  uint8_t v48[128];
  uint8_t buf[4];
  _BYTE v50[10];
  void *v51;
  _BYTE v52[128];

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100938400);
  sub_10047B1BC((uint64_t)off_100977890);
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_100938420);
  sub_10047FA94((uint64_t)off_100978128);
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100938440);
  sub_10049B6CC((uint64_t)off_100977A70);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100938460);
  sub_10050B6A4(qword_100977B48);
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_100938480);
  sub_1005C07A0((uint64_t)off_100978158);
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_1009384A0);
  sub_10043AAB0((uint64_t)off_100978188);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_1009384C0);
  sub_10047346C((uint64_t)off_1009778E0);
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_1009384E0);
  sub_100524E38((uint64_t)off_100977A90);
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100938500);
  sub_100285C28((uint64_t)off_100977A80);
  if (qword_10097AC70 != -1)
    dispatch_once(&qword_10097AC70, &stru_100938520);
  sub_1002F7D6C(qword_10097AC68);
  v3 = sub_100016B48();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 152))(v3);
  v4 = sub_1000438A4();
  nullsub_90(v4, v5);
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_100938540);
  sub_1005BA420((uint64_t)off_100978148, (uint64_t)&__p);
  if (v47 < 0)
    operator delete(__p);
  if (qword_100977A68 != -1)
    dispatch_once(&qword_100977A68, &stru_100938560);
  sub_10046C644((uint64_t)off_100977A60);
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100938580);
  sub_1002B39EC(qword_10097AB60);
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_1009385A0);
  sub_1003D6C10((_QWORD *)qword_10097AA58);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_1009385C0);
  sub_1002F3CB8((uint64_t)off_100978168);
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_1009385E0);
  sub_1003F83AC(qword_10097AC10);
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_100938600);
  sub_1005E6218((_QWORD *)qword_1009778F0);
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_100938620);
  sub_1006066BC((uint64_t)off_100977C28);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100938640);
  sub_1006439A8((uint64_t)off_1009778A0);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_100938660);
  sub_100681880((uint64_t)off_100977FA8);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100938680);
  sub_1006A5A10(qword_1009778B0);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009386A0);
  sub_10066839C((uint64_t)off_1009778C0);
  if (qword_10097AC58 != -1)
    dispatch_once(&qword_10097AC58, &stru_1009386C0);
  sub_1006C14D8((_QWORD *)qword_10097AC50);
  if (qword_100977FC0 != -1)
    dispatch_once(&qword_100977FC0, &stru_1009386E0);
  sub_10058572C(qword_100977FB8);
  if (qword_10097AB88 != -1)
    dispatch_once(&qword_10097AB88, &stru_100938700);
  sub_1005BD1A4(qword_10097AB80);
  if (qword_10097B670 != -1)
    dispatch_once(&qword_10097B670, &stru_100938720);
  sub_1005ADA88((uint64_t)off_10097B668);
  v6 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 352))(v6))
  {
    if (qword_10097B180 != -1)
      dispatch_once(&qword_10097B180, &stru_100938740);
    sub_10041CD08((uint64_t)off_10097B178);
    if (qword_10097B1C0 != -1)
      dispatch_once(&qword_10097B1C0, &stru_100938760);
    sub_100507964((uint64_t)off_10097B1B8);
  }
  sub_100253460();
  context = objc_autoreleasePoolPush();
  v7 = CFPreferencesCopyKeyList(CFSTR("com.apple.BTServer"), kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v50 = "com.apple.BTServer";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ %s -------------------", buf, 0xCu);
  }
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  obj = v7;
  v9 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v42, v52, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v43;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v43 != v10)
          objc_enumerationMutation(obj);
        v12 = *(const __CFString **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)i);
        v13 = (void *)CFPreferencesCopyValue(v12, CFSTR("com.apple.BTServer"), kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "description"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR(" ")));

        v16 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)v50 = v12;
          *(_WORD *)&v50[8] = 2112;
          v51 = v15;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "statedump: \t%@ -> %@", buf, 0x16u);
        }

      }
      v9 = -[__CFArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v42, v52, 16);
    }
    while (v9);
  }

  v17 = CFPreferencesCopyKeyList(CFSTR("com.apple.MobileBluetooth.debug"), kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  v18 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v50 = "com.apple.MobileBluetooth.debug";
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ %s -------------------", buf, 0xCu);
  }
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = v17;
  v19 = -[__CFArray countByEnumeratingWithState:objects:count:](v36, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
  if (v19)
  {
    v20 = *(_QWORD *)v39;
    do
    {
      for (j = 0; j != v19; j = (char *)j + 1)
      {
        if (*(_QWORD *)v39 != v20)
          objc_enumerationMutation(v36);
        v22 = *(const __CFString **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)j);
        v23 = (void *)CFPreferencesCopyValue(v22, CFSTR("com.apple.MobileBluetooth.debug"), kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
        v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "description"));
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR(" ")));

        v26 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)v50 = v22;
          *(_WORD *)&v50[8] = 2112;
          v51 = v25;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "statedump: \t%@ -> %@", buf, 0x16u);
        }

      }
      v19 = -[__CFArray countByEnumeratingWithState:objects:count:](v36, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
    }
    while (v19);
  }

  objc_autoreleasePoolPop(context);
  v27 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v50 = "os_log state";
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ %s -------------------", buf, 0xCu);
    v27 = qword_1009997E8;
  }
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    v28 = os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
    v29 = os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v50 = v28;
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "statedump: os_log settings: info %d, debug %d", buf, 0xEu);
  }
  sub_100253508(a2);
  if (a3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1))
    {
      v30 = sub_100255B10(a2);
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)a1 + 496))(a1, v31, v30);
    }
  }
}

void sub_100576474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_100576500(uint64_t a1, int a2)
{
  sub_100576510(a1, a2);
  abort();
}

uint64_t sub_100576510(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = sub_100575968(a1, 3705, 1);
    nullsub_90(v2, v3);
  }
  return sub_100112D5C();
}

void sub_100576534(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void (*v5)(id, uint64_t, uint64_t);
  uint64_t v6;
  id v7;

  if (qword_100993368 != -1)
    dispatch_once(&qword_100993368, &stru_1009383C0);
  v5 = (void (*)(id, uint64_t, uint64_t))off_100993360;
  if (off_100993360)
  {
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v7 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
    v6 = getpid();
    v5(v7, a3, v6);

  }
}

void sub_1005765E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1005765FC(id a1)
{
  off_100993360 = dlsym((void *)0xFFFFFFFFFFFFFFFFLL, "WriteStackshotReportWithPID");
}

void sub_100576624(id a1)
{
  operator new();
}

void sub_100576664(id a1)
{
  operator new();
}

void sub_1005766A4()
{
  operator delete();
}

void sub_1005766C8(id a1)
{
  operator new();
}

void sub_100576708()
{
  operator delete();
}

void sub_10057672C(id a1)
{
  operator new();
}

void sub_10057676C()
{
  operator delete();
}

void sub_100576790(id a1)
{
  operator new();
}

void sub_1005767D0()
{
  operator delete();
}

void sub_1005767F4(id a1)
{
  operator new();
}

void sub_100576834()
{
  operator delete();
}

void sub_100576858(id a1)
{
  operator new();
}

void sub_100576898()
{
  operator delete();
}

void sub_1005768BC(id a1)
{
  operator new();
}

void sub_1005768FC()
{
  operator delete();
}

void sub_100576920(id a1)
{
  operator new();
}

void sub_100576960()
{
  operator delete();
}

void sub_100576984(id a1)
{
  operator new();
}

void sub_1005769C4()
{
  operator delete();
}

void sub_1005769E8(id a1)
{
  operator new();
}

void sub_100576A68()
{
  uint64_t v0;
  uint64_t v1;
  void **v2;
  void *v3;

  v3 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v0 + 48) = v3;
    operator delete(v3);
  }
  sub_1002F95D8(v1, *(_QWORD **)(v0 + 16));

  operator delete();
}

void sub_100576AB4(id a1)
{
  operator new();
}

void sub_100576AF4()
{
  operator delete();
}

void sub_100576B18(id a1)
{
  operator new();
}

void sub_100576B58()
{
  operator delete();
}

void sub_100576B7C(id a1)
{
  operator new();
}

void sub_100576BBC()
{
  operator delete();
}

void sub_100576BE0(id a1)
{
  operator new();
}

void sub_100576C20()
{
  operator delete();
}

void sub_100576C44(id a1)
{
  operator new();
}

void sub_100576C84()
{
  operator delete();
}

void sub_100576CA8(id a1)
{
  operator new();
}

void sub_100576CE8()
{
  operator delete();
}

void sub_100576D0C(id a1)
{
  operator new();
}

void sub_100576D4C()
{
  operator delete();
}

void sub_100576D70(id a1)
{
  operator new();
}

void sub_100576DB0()
{
  operator delete();
}

void sub_100576DD4(id a1)
{
  operator new();
}

void sub_100576E14()
{
  operator delete();
}

void sub_100576E38(id a1)
{
  operator new();
}

void sub_100576E78()
{
  operator delete();
}

void sub_100576E9C(id a1)
{
  operator new();
}

void sub_100576EDC()
{
  operator delete();
}

void sub_100576F00(id a1)
{
  operator new();
}

void sub_100576F40()
{
  operator delete();
}

void sub_100576F64(id a1)
{
  operator new();
}

void sub_100576FA4()
{
  operator delete();
}

void sub_100576FC8(id a1)
{
  operator new();
}

void sub_100577008()
{
  operator delete();
}

void sub_10057702C(id a1)
{
  operator new();
}

void sub_10057706C()
{
  operator delete();
}

void sub_100577090(id a1)
{
  operator new();
}

void sub_1005770D0()
{
  operator delete();
}

void sub_1005770F4(id a1)
{
  operator new();
}

void sub_100577134()
{
  operator delete();
}

void sub_100577158(id a1)
{
  operator new();
}

void sub_100577198()
{
  operator delete();
}

void sub_1005771BC()
{
  void *v0;
  uint64_t v1;

  v0 = objc_autoreleasePoolPush();
  qword_1009997C8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.A2DP");
  qword_1009997D0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.AACP");
  qword_1009997D8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Accessory");
  qword_1009997E0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Audio");
  qword_1009997E8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Core");
  qword_1009997F0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Coex");
  qword_1009997F8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.CloudPairing");
  qword_100999800 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Discovery");
  qword_100999808 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Handsfree");
  qword_100999810 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE");
  qword_100999818 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE.Security");
  qword_100999820 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.GATT");
  qword_100999828 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE.Scan");
  qword_100999830 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.NVRAM");
  qword_100999838 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.ScalablePipe");
  qword_100999840 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Remote");
  qword_100999848 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.SDP");
  qword_100999850 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Security");
  qword_100999858 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Telephony");
  qword_100999860 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.XPC");
  qword_100999868 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.PipeMgr");
  qword_100999870 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.MagicPairing");
  qword_100999878 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.MobileAsset");
  qword_100999880 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.L2CAPChannel");
  qword_100999888 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Phonebook");
  qword_100999890 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE.Connection");
  qword_100999898 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.App");
  qword_1009998A0 = (uint64_t)os_log_create("com.apple.magnetpacketlog", "bluetooth");
  qword_1009998B0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.ANCSAuthorization");
  qword_1009998B8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE.Advertise");
  qword_1009998C0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LE.AdvertiseEx");
  qword_1009998C8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.TimeLine.App");
  qword_1009998D0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.TimeLine.Device");
  qword_1009998D8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.TimeLine.Power");
  qword_1009998E0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.TimeLine.Error");
  qword_1009998E8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.TimeLine.Local");
  qword_1009998F0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.AppRestoration");
  qword_1009998F8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.USBPairing");
  qword_100999900 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.SonyGamepadPairing");
  qword_100999908 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.BTResourceManager");
  qword_100999910 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LinkQuality");
  qword_100999918 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.RFCOMMChannel");
  qword_100999920 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.MacCoex");
  qword_100999928 = (uint64_t)os_log_create("com.apple.bluetooth", "ExposureNotification");
  qword_100999930 = (uint64_t)os_log_create("com.apple.ExposureNotification", "Crypto");
  qword_100999938 = (uint64_t)os_log_create("com.apple.ExposureNotification", "Manager");
  qword_100999940 = (uint64_t)os_log_create("com.apple.ExposureNotification", "Database");
  qword_100999948 = (uint64_t)os_log_create("com.apple.ExposureNotification", "Scanning");
  qword_100999950 = (uint64_t)os_log_create("com.apple.ExposureNotification", "Advertising");
  qword_100999958 = (uint64_t)os_log_create("com.apple.bluetooth", "SensorTracking");
  qword_100999960 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LEAudio");
  qword_100999968 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.BandSwitchManager");
  qword_100999970 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.EventDispatcher");
  qword_100999978 = (uint64_t)os_log_create("com.apple.bluetooth", "AOPInterfaceManager");
  qword_100999980 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.VirtualController");
  qword_100999988 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.XPCParameters");
  if (sub_100070BDC())
    v1 = ct_green_tea_logger_create("bluetooth");
  else
    v1 = 0;
  qword_100999990 = v1;
  qword_100999998 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.NetSharing");
  qword_1009999A0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LEA");
  qword_1009999A8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Gaming");
  qword_1009999B0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.HID");
  qword_1009999B8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.MAP");
  qword_1009999C0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.Braille");
  qword_1009999C8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.FastconnectACL");
  qword_1009999D0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.FastConnect");
  qword_1009999D8 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.LPM");
  qword_1009999E0 = (uint64_t)os_log_create("com.apple.bluetooth", "Server.BTDaemon");
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_100577850(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)sub_10048D2F0(a1, "NetworkConsumerService", 4096);
  *v2 = &off_100938790;
  v2[41] = &off_100938898;
  if (qword_10097B790 != -1)
    dispatch_once(&qword_10097B790, &stru_1009388A0);
  sub_10048D5B0(a1, (uint64_t)off_10097B788);
  return a1;
}

void sub_1005778CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048D3E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005778E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, 256))
  {
    v3 = sub_100038E50();
    sub_1004AA5E8(v3 + 248, a1 + 328);
  }
  return sub_10048D760(a1);
}

uint64_t sub_10057792C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, 256))
  {
    v3 = sub_100038E50();
    sub_1002B43D4(v3 + 248, a1 + 328);
  }
  return sub_10048DA54(a1);
}

uint64_t sub_100577974(uint64_t a1, uint64_t a2)
{
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  int v8;
  unsigned int v9;
  __int128 v11;
  int v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[15];

  v14 = xmmword_1007426C0;
  v15 = xmmword_1007426B0;
  memset(v17, 0, sizeof(v17));
  v13 = 0;
  v12 = 0;
  if (sub_100444790(a2))
  {
    if (sub_100442444(a2, &v15, 4u))
    {
      v4 = 4;
    }
    else if (sub_100442444(a2, &v14, 4u))
    {
      v4 = 4;
    }
    else
    {
      v4 = 1;
    }
  }
  else
  {
    v5 = sub_100452168(a2, v17, &v13);
    if (v13)
      v6 = v5;
    else
      v6 = 0;
    if (v6)
    {
      v7 = sub_10018F848((unsigned __int8 *)v17, 4374, &v12) == 0;
      if (sub_10018F848((unsigned __int8 *)v17, 4375, &v12))
        v8 = v7;
      else
        v8 = 1;
      if (v8)
        v4 = 4;
      else
        v4 = 0;
    }
    else
    {
      v4 = 0;
    }
  }
  v9 = *(_DWORD *)(a1 + 32);
  v16 = 0;
  sub_10004AD30((uint64_t)&v16);
  *(_QWORD *)&v11 = (int)v16;
  *((_QWORD *)&v11 + 1) = SWORD2(v16);
  return sub_1004415B0(a2, v9, v4, &v11, 0);
}

uint64_t sub_100577B04(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;
  int v6;
  char v7;
  int v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[15];

  v9 = xmmword_1007426C0;
  v10 = xmmword_1007426B0;
  v8 = 0;
  memset(v11, 0, sizeof(v11));
  v7 = 0;
  v6 = 0;
  *a3 = 0;
  if (sub_100444790(a2))
  {
    result = sub_100442444(a2, &v10, 4u);
    if ((result & 1) == 0)
    {
      result = sub_100442444(a2, &v9, 4u);
      if ((result & 1) == 0)
        return result;
    }
    goto LABEL_13;
  }
  if (sub_100452168(a2, v11, &v7) && v7)
  {
    result = sub_10018F848((unsigned __int8 *)v11, 4374, &v6);
    if (!(_DWORD)result)
      goto LABEL_13;
    result = sub_10018F848((unsigned __int8 *)v11, 4375, &v6);
    if (!(_DWORD)result)
      goto LABEL_13;
    if (v6 == 1)
      return result;
  }
  result = sub_10043FA40(a2, &v8);
  if ((_DWORD)result)
  {
    if ((v8 & 0x20000) != 0)
    {
      result = sub_10043F854(a2);
      if ((_DWORD)result != 21)
LABEL_13:
        *a3 = 1;
    }
  }
  return result;
}

BOOL sub_100577C6C(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  _BOOL8 v6;
  void *__p;
  _BYTE *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v12 = xmmword_1007426B0;
  v11 = xmmword_1007426C0;
  __p = 0;
  v9 = 0;
  v10 = 0;
  if ((sub_1004442A0(a2, (uint64_t)&v12, 8u, &__p) & 1) != 0 || sub_1004442A0(a2, (uint64_t)&v11, 8u, &__p))
  {
    v4 = __p;
    v3 = v9;
    v6 = v9 - (_BYTE *)__p != 16 || *(_BYTE *)__p != 1 || *((_DWORD *)__p + 2) != 0;
    while (v4 != v3)
    {
      sub_1002C3FB4(v4);
      v4 += 16;
      v3 = v9;
    }
  }
  else
  {
    v6 = 1;
  }
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_100577D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100577D6C(uint64_t result, int a2, int a3)
{
  uint64_t v3;

  if (a3 == 1 && a2)
  {
    v3 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
    if ((_DWORD)result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
  }
  return result;
}

uint64_t sub_100577DBC(uint64_t result, int a2, int a3)
{
  uint64_t v3;

  if (a3 == 1 && a2)
  {
    v3 = result - 328;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result - 328) + 112))(result - 328);
    if ((_DWORD)result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
  }
  return result;
}

void sub_100577E14(uint64_t a1)
{
  sub_10048D3E0(a1);
  operator delete();
}

void sub_100577E38(id a1)
{
  operator new();
}

void sub_100577E78()
{
  operator delete();
}

uint64_t sub_100577E9C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009388D0;
  *(_QWORD *)(a1 + 8) = &off_100938918;
  sub_1000160D0(a1 + 24);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 91) = 0;
  return a1;
}

uint64_t sub_100577EF0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1009388D0;
  *(_QWORD *)(a1 + 8) = &off_100938918;
  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  sub_10001A82C(a1 + 96, *(_QWORD **)(a1 + 104));
  sub_100069BDC(a1 + 24);
  return a1;
}

void sub_100577F48(uint64_t a1)
{
  sub_100577EF0(a1);
  operator delete();
}

void sub_100577F6C(uint64_t a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100938958);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
}

void sub_100577FC8(uint64_t a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100938958);
  sub_100069060((uint64_t)off_100977A50 + 64, a1 + 8);
}

uint64_t sub_10057801C(uint64_t a1)
{
  int v3;
  __int16 v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 24);
  if (!*(_BYTE *)(a1 + 88))
  {
    *(_BYTE *)(a1 + 88) = 1;
    v4 = 0;
    v3 = 0;
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100938958);
    sub_1004A3424((uint64_t)off_100977A50, (uint64_t)&v3);
    *(_DWORD *)(a1 + 89) = v3;
    *(_WORD *)(a1 + 93) = v4;
    sub_1005780D4((IOHIDManagerRef *)a1);
  }
  return sub_100034234((uint64_t)v5);
}

void sub_1005780C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005780D4(IOHIDManagerRef *a1)
{
  NSObject *v2;
  CFNumberRef v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  CFNumberRef v9;
  IOHIDManagerRef v10;
  __CFArray *v11;
  __IOHIDManager *v12;
  __CFRunLoop *Main;
  NSObject *v14;
  const __CFNumber *v15;
  __CFDictionary *v16;
  __CFDictionary *v17;
  __CFDictionary *v18;
  __CFDictionary *Mutable;
  __CFDictionary *theDict;
  __CFDictionary *v21;
  __CFDictionary *v22;
  CFNumberRef v23;
  CFNumberRef cf;
  uint8_t v25[16];
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 valuePtr;
  uint8_t buf[16];

  v2 = qword_1009998F8;
  if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting up USB Listener for USB Pairing", buf, 2u);
  }
  sub_1005788CC((uint64_t)a1);
  strcpy((char *)buf, "\v");
  cf = CFNumberCreate(0, kCFNumberShortType, buf);
  valuePtr = 1452;
  v3 = CFNumberCreate(0, kCFNumberShortType, &valuePtr);
  v32 = 615;
  v4 = CFNumberCreate(0, kCFNumberShortType, &v32);
  v31 = 620;
  v5 = CFNumberCreate(0, kCFNumberShortType, &v31);
  v30 = 668;
  v6 = CFNumberCreate(0, kCFNumberShortType, &v30);
  v29 = 666;
  v7 = CFNumberCreate(0, kCFNumberShortType, &v29);
  v28 = 671;
  v8 = CFNumberCreate(0, kCFNumberShortType, &v28);
  v27 = 617;
  v9 = CFNumberCreate(0, kCFNumberShortType, &v27);
  v26 = 613;
  v23 = CFNumberCreate(0, kCFNumberShortType, &v26);
  if (!a1[2])
  {
    v10 = IOHIDManagerCreate(kCFAllocatorDefault, 0);
    a1[2] = v10;
    if (v10)
    {
      theDict = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      v21 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      v22 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      v16 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      v17 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      v18 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, 0, 0);
      v11 = CFArrayCreateMutable(kCFAllocatorDefault, 0, 0);
      CFDictionaryAddValue(theDict, CFSTR("Transport"), CFSTR("USB"));
      CFDictionaryAddValue(theDict, CFSTR("VendorID"), v3);
      CFDictionaryAddValue(theDict, CFSTR("ProductID"), v4);
      CFDictionaryAddValue(theDict, CFSTR("PrimaryUsage"), cf);
      CFDictionaryAddValue(Mutable, CFSTR("Transport"), CFSTR("USB"));
      CFDictionaryAddValue(Mutable, CFSTR("VendorID"), v3);
      v15 = v5;
      CFDictionaryAddValue(Mutable, CFSTR("ProductID"), v5);
      CFDictionaryAddValue(Mutable, CFSTR("PrimaryUsage"), cf);
      CFDictionaryAddValue(v21, CFSTR("Transport"), CFSTR("USB"));
      CFDictionaryAddValue(v21, CFSTR("VendorID"), v3);
      CFDictionaryAddValue(v21, CFSTR("ProductID"), v6);
      CFDictionaryAddValue(v21, CFSTR("PrimaryUsage"), cf);
      CFDictionaryAddValue(v22, CFSTR("Transport"), CFSTR("USB"));
      CFDictionaryAddValue(v22, CFSTR("VendorID"), v3);
      CFDictionaryAddValue(v22, CFSTR("ProductID"), v7);
      CFDictionaryAddValue(v22, CFSTR("PrimaryUsage"), cf);
      CFDictionaryAddValue(v16, CFSTR("Transport"), CFSTR("USB"));
      CFDictionaryAddValue(v16, CFSTR("VendorID"), v3);
      CFDictionaryAddValue(v16, CFSTR("ProductID"), v8);
      CFDictionaryAddValue(v16, CFSTR("PrimaryUsage"), cf);
      CFDictionaryAddValue(v17, CFSTR("Transport"), CFSTR("USB"));
      CFDictionaryAddValue(v17, CFSTR("VendorID"), v3);
      CFDictionaryAddValue(v17, CFSTR("ProductID"), v9);
      CFDictionaryAddValue(v17, CFSTR("PrimaryUsage"), cf);
      CFDictionaryAddValue(v18, CFSTR("Transport"), CFSTR("USB"));
      CFDictionaryAddValue(v18, CFSTR("VendorID"), v3);
      CFDictionaryAddValue(v18, CFSTR("ProductID"), v23);
      CFDictionaryAddValue(v18, CFSTR("PrimaryUsage"), cf);
      CFArrayAppendValue(v11, theDict);
      CFArrayAppendValue(v11, Mutable);
      CFArrayAppendValue(v11, v21);
      CFArrayAppendValue(v11, v22);
      CFArrayAppendValue(v11, v16);
      CFArrayAppendValue(v11, v17);
      CFArrayAppendValue(v11, v18);
      IOHIDManagerSetDeviceMatchingMultiple(a1[2], v11);
      if (IOHIDManagerOpen(a1[2], 0))
      {
        if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
          sub_100704D3C();
      }
      else
      {
        IOHIDManagerRegisterDeviceMatchingCallback(a1[2], (IOHIDDeviceCallback)sub_100578934, a1);
        IOHIDManagerRegisterDeviceRemovalCallback(a1[2], (IOHIDDeviceCallback)sub_10057898C, a1);
        v12 = a1[2];
        Main = CFRunLoopGetMain();
        IOHIDManagerScheduleWithRunLoop(v12, Main, kCFRunLoopCommonModes);
        v14 = qword_1009998F8;
        if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v25 = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Created USB HIDManager", v25, 2u);
        }
      }
      if (theDict)
        CFRelease(theDict);
      v5 = v15;
      if (Mutable)
        CFRelease(Mutable);
      if (v21)
        CFRelease(v21);
      if (v22)
        CFRelease(v22);
      if (v16)
        CFRelease(v16);
      if (v17)
        CFRelease(v17);
      if (v18)
        CFRelease(v18);
      if (v11)
        CFRelease(v11);
    }
    else if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
    {
      sub_100704D10();
    }
  }
  if (cf)
    CFRelease(cf);
  if (v3)
    CFRelease(v3);
  if (v4)
    CFRelease(v4);
  if (v5)
    CFRelease(v5);
  if (v6)
    CFRelease(v6);
  if (v7)
    CFRelease(v7);
  if (v8)
    CFRelease(v8);
  if (v9)
    CFRelease(v9);
  if (v23)
    CFRelease(v23);
}

uint64_t sub_1005787E0(uint64_t a1)
{
  return sub_10057801C(a1 - 8);
}

uint64_t sub_1005787E8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v5[16];
  uint8_t buf[8];
  uint64_t v7;

  v2 = qword_1009998F8;
  if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "USBPairingManager::stackWillStop enter", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v7 = 0;
  sub_10003415C((uint64_t)buf, a1 + 24);
  *(_BYTE *)(a1 + 88) = 0;
  sub_1005788CC(a1);
  v3 = qword_1009998F8;
  if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "USBPairingManager::stackWillStop exit", v5, 2u);
  }
  return sub_100034234((uint64_t)buf);
}

void sub_1005788B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005788CC(uint64_t a1)
{
  __IOHIDManager *v1;
  __CFRunLoop *Main;

  v1 = *(__IOHIDManager **)(a1 + 16);
  if (v1)
  {
    Main = CFRunLoopGetMain();
    IOHIDManagerUnscheduleFromRunLoop(v1, Main, kCFRunLoopCommonModes);
    IOHIDManagerClose(*(IOHIDManagerRef *)(a1 + 16), 0);
    CFRelease(*(CFTypeRef *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t sub_100578924(uint64_t a1)
{
  return sub_1005787E8(a1 - 8);
}

void sub_100578934(uint64_t a1, uint64_t a2, uint64_t a3, __IOHIDDevice *a4)
{
  if (qword_10097AC38 != -1)
    dispatch_once(&qword_10097AC38, &stru_100938938);
  sub_10057915C(qword_10097AC30, a1, a4);
}

void sub_10057898C(uint64_t a1, uint64_t a2, uint64_t a3, __IOHIDDevice *a4)
{
  if (qword_10097AC38 != -1)
    dispatch_once(&qword_10097AC38, &stru_100938938);
  sub_1005789DC(qword_10097AC30, a2, a4);
}

void sub_1005789DC(uint64_t a1, uint64_t a2, __IOHIDDevice *a3)
{
  uint64_t v5;
  NSObject *v6;
  _BOOL4 v7;
  _BYTE *v8;
  _QWORD v9[5];
  _BYTE __p[12];
  char v11;
  uint8_t buf[4];
  _BYTE *v13;

  v5 = sub_100578B88(a1, a3);
  v6 = qword_1009998F8;
  v7 = os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      sub_10043F78C(v5, (uint64_t)__p);
      v8 = v11 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136315138;
      v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disconnecting USB device to initiate Bluetooth Connection to device %s", buf, 0xCu);
      if (v11 < 0)
        operator delete(*(void **)__p);
    }
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_100938978);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100578D70;
    v9[3] = &unk_100917378;
    v9[4] = v5;
    sub_1004965EC((uint64_t)off_100977A70, v9);
    *(_BYTE *)(v5 + 1288) = 0;
    sub_100578E0C(a1, v5);
    sub_100578FAC(a1, v5);
  }
  else if (v7)
  {
    *(_DWORD *)__p = 134217984;
    *(_QWORD *)&__p[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Can't find device with ioHIDRef %p", __p, 0xCu);
  }
}

uint64_t sub_100578B88(uint64_t a1, __IOHIDDevice *a2)
{
  CFTypeRef Property;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  void **v15;
  unsigned int v16;
  void **v17;
  void *__p[2];
  char v20;
  _QWORD v21[2];
  uint8_t buf[4];
  void **v23;
  __int16 v24;
  unsigned int v25;

  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 24);
  if (a2)
  {
    Property = IOHIDDeviceGetProperty(a2, CFSTR("LocationID"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(Property);
    v6 = *(_QWORD **)(a1 + 96);
    v7 = (_QWORD *)(a1 + 104);
    if (v6 == v7)
    {
LABEL_10:
      v12 = 0;
    }
    else
    {
      while (1)
      {
        v8 = *((_DWORD *)v6 + 10);
        if (v8 == objc_msgSend(v5, "intValue"))
          break;
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v6[2];
            v11 = *v10 == (_QWORD)v6;
            v6 = v10;
          }
          while (!v11);
        }
        v6 = v10;
        if (v10 == v7)
          goto LABEL_10;
      }
      v13 = qword_1009998F8;
      if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043F78C(v6[4], (uint64_t)__p);
        v14 = v20;
        v15 = (void **)__p[0];
        v16 = objc_msgSend(v5, "intValue");
        v17 = __p;
        if (v14 < 0)
          v17 = v15;
        *(_DWORD *)buf = 136315394;
        v23 = v17;
        v24 = 1024;
        v25 = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Found HID device %s with location ID %d", buf, 0x12u);
        if (v20 < 0)
          operator delete(__p[0]);
      }
      v12 = v6[4];
    }

  }
  else
  {
    v12 = 0;
  }
  sub_100034234((uint64_t)v21);
  return v12;
}

void sub_100578D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_100578D70(uint64_t a1)
{
  uint64_t v2;
  std::string __p;

  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100938978);
  v2 = *(_QWORD *)(a1 + 32);
  memset(&__p, 0, sizeof(__p));
  sub_100495A98((int64x2_t *)off_100977A70, v2, 32, &__p, 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100578DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100578E0C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  int v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  int v18;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 24);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  sub_10001FE6C(&v11, a1 + 120);
  sub_100034264((uint64_t)v14);
  v4 = qword_1009998F8;
  if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a2, __p);
    v5 = v10 >= 0 ? __p : (void **)__p[0];
    v6 = *(unsigned __int8 *)(a2 + 1288);
    *(_DWORD *)buf = 136446466;
    v16 = v5;
    v17 = 1024;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Device %{public}s reported a USB State changed to %d", buf, 0x12u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  v7 = v11;
  if (v11 != v12)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 16))(*v7, a2);
      ++v7;
    }
    while (v7 != v12);
    v7 = v11;
  }
  if (v7)
  {
    v12 = v7;
    operator delete(v7);
  }
  return sub_100034234((uint64_t)v14);
}

void sub_100578F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100578FAC(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  NSObject *v12;
  NSObject *v13;
  void **v14;
  void *__p[2];
  char v17;
  _QWORD v18[2];
  uint8_t buf[4];
  void **v20;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 24);
  if (a2)
  {
    v6 = *(_QWORD **)(a1 + 104);
    v5 = (uint64_t *)(a1 + 104);
    v4 = v6;
    if (!v6)
      goto LABEL_13;
    v7 = (uint64_t **)(v5 - 1);
    v8 = v5;
    do
    {
      v9 = v4[4];
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = v4;
      else
        v11 = v4 + 1;
      if (v10)
        v8 = v4;
      v4 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != v5 && v8[4] <= a2)
    {
      v13 = qword_1009998F8;
      if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043F78C(a2, (uint64_t)__p);
        v14 = v17 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v20 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Removing HID device %s from map", buf, 0xCu);
        if (v17 < 0)
          operator delete(__p[0]);
      }
      sub_1000040CC(v7, v8);
      operator delete(v8);
    }
    else
    {
LABEL_13:
      v12 = qword_1009998F8;
      if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
      {
        sub_10043F78C(a2, (uint64_t)__p);
        sub_100704D68((char *)__p, (uint64_t)buf, v12);
      }
    }
  }
  return sub_100034234((uint64_t)v18);
}

void sub_10057913C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10057915C(uint64_t a1, uint64_t a2, __IOHIDDevice *a3)
{
  NSObject *v6;
  NSObject *v7;
  IOReturn Report;
  NSObject *v9;
  dispatch_time_t v10;
  NSObject *v11;
  _BOOL8 v12;
  _BYTE *v13;
  void **v14;
  unsigned __int8 *v15;
  NSObject *v16;
  CCRNGStatus v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  int v22;
  const __CFNumber *Property;
  const __CFNumber *v24;
  const __CFNumber *v25;
  uint64_t v26;
  NSObject *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD block[5];
  int valuePtr;
  uint64_t v34;
  void *__p[2];
  uint64_t v36;
  int v37;
  __int16 v38;
  CFIndex pReportLength;
  int v40;
  __int16 v41;
  __n128 v42;
  _BYTE v43[12];
  __int16 v44;
  void **v45;
  char v46;
  _BYTE v47[18];
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __n128 v54;
  int v55;
  uint8_t buf[16];
  __int128 v57;
  __int128 v58;
  _BYTE v59[29];
  __n128 bytes;

  v6 = qword_1009998F8;
  if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = os_variant_is_recovery("com.apple.bluetooth");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "handleIncomingUSBDevice called isBaseSystem %d", buf, 8u);
  }
  v7 = qword_1009998F8;
  if (a2 && a3)
  {
    if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Found USB Device", buf, 2u);
    }
    bytes = 0uLL;
    if (IOHIDDeviceOpen(a3, 0))
    {
      if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
        sub_100704F00();
      return;
    }
    v58 = 0u;
    memset(v59, 0, sizeof(v59));
    *(_OWORD *)buf = 0u;
    v57 = 0u;
    pReportLength = 77;
    Report = IOHIDDeviceGetReport(a3, kIOHIDReportTypeFeature, 52, buf, &pReportLength);
    v9 = qword_1009998F8;
    if (Report)
    {
      if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
        sub_100704EA0();
      v10 = dispatch_time(0, 5000000000);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10057A250;
      block[3] = &unk_100917378;
      block[4] = a1;
      dispatch_after(v10, (dispatch_queue_t)&_dispatch_main_q, block);
      return;
    }
    if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Successfully got device report", v47, 2u);
    }
    v40 = *(_DWORD *)&buf[4];
    v41 = *(_WORD *)&buf[8];
    if (*(_DWORD *)&buf[4] | *(unsigned __int16 *)&buf[8])
    {
      v37 = *(_DWORD *)&buf[4];
      v38 = *(_WORD *)&buf[8];
      __p[0] = 0;
      __p[1] = 0;
      v36 = 0;
      sub_100091AE8(__p, (char *)((unint64_t)buf | 0xD));
      v11 = qword_1009998F8;
      v12 = os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT);
      if (v12)
      {
        sub_10046E9BC((unsigned __int8 *)&v37, v47);
        if (v49 >= 0)
          v13 = v47;
        else
          v13 = *(_BYTE **)v47;
        v14 = __p;
        if (v36 < 0)
          v14 = (void **)__p[0];
        *(_DWORD *)v43 = 136315394;
        *(_QWORD *)&v43[4] = v13;
        v44 = 2082;
        v45 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "BT ADDR %s for device name: %{public}s", v43, 0x16u);
        if (SHIBYTE(v49) < 0)
          operator delete(*(void **)v47);
      }
      v15 = (unsigned __int8 *)sub_10057993C(v12, (uint64_t)&v40);
      if (v15)
      {
        sub_100579A78(a1, a3, (unint64_t)v15);
        if (sub_100579D38(a1, a3))
        {
          v15[1288] = 1;
          sub_100578E0C(a1, (uint64_t)v15);
LABEL_66:
          if (SHIBYTE(v36) < 0)
            operator delete(__p[0]);
          return;
        }
        v16 = qword_1009998F8;
        if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v47 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Did not find existing link key. Must generate new one", v47, 2u);
        }
      }
      v17 = CCRandomGenerateBytes(&bytes, 0x10uLL);
      v18 = qword_1009998F8;
      if (v17)
      {
        if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
          sub_100704E74();
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v47 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Successfully generated Link Key preparing it to send to device", v47, 2u);
        }
        if (sub_100579F64(a1, a3, (int8x16_t *)&bytes))
        {
          v19 = qword_1009998F8;
          if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
            sub_100704DFC((uint64_t *)__p, v19, v20);
        }
        else
        {
          v54 = 0uLL;
          v55 = 0;
          sub_1005A974C(&v54, &bytes, 5u);
          if (!v15)
          {
            if (qword_1009778E8 != -1)
              dispatch_once(&qword_1009778E8, &stru_100938998);
            v15 = (unsigned __int8 *)sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v37, 1);
          }
          *(_QWORD *)v43 = 0;
          *(_QWORD *)v47 = 0;
          *(_QWORD *)&v47[8] = 0;
          sub_10004AD30((uint64_t)v43);
          *(_QWORD *)v47 = *(int *)v43;
          *(_QWORD *)&v47[8] = *(__int16 *)&v43[4];
          sub_10044054C((uint64_t)v15, (uint64_t)__p, v47);
          v15[578] = 1;
          sub_10044EF08((uint64_t)v15, 1);
          v21 = buf[10];
          v22 = buf[11];
          v31 = buf[12];
          v34 = 0;
          valuePtr = 0;
          Property = (const __CFNumber *)IOHIDDeviceGetProperty(a3, CFSTR("ProductID"));
          v24 = (const __CFNumber *)IOHIDDeviceGetProperty(a3, CFSTR("VendorID"));
          v25 = (const __CFNumber *)IOHIDDeviceGetProperty(a3, CFSTR("VersionNumber"));
          if (Property)
            CFNumberGetValue(Property, kCFNumberIntType, &valuePtr);
          if (v24)
            CFNumberGetValue(v24, kCFNumberIntType, &v34);
          if (v25)
            CFNumberGetValue(v25, kCFNumberIntType, (char *)&v34 + 4);
          if (qword_1009778E8 != -1)
            dispatch_once(&qword_1009778E8, &stru_100938998);
          sub_100470B08((uint64_t)off_1009778E0, (uint64_t)v15, (v21 << 16) | (v22 << 8) | v31);
          if (qword_1009778E8 != -1)
            dispatch_once(&qword_1009778E8, &stru_100938998);
          v26 = (*(uint64_t (**)(void *, unsigned __int8 *, uint64_t))(*(_QWORD *)off_1009778E0 + 48))(off_1009778E0, v15, 1);
          sub_10057A0D8(v26, v15, &v54);
          v15[1288] = 1;
          v27 = qword_1009998F8;
          if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043F6EC((uint64_t)v15, (uint64_t)v43);
            v28 = v46 >= 0 ? v43 : *(_BYTE **)v43;
            *(_DWORD *)v47 = 136447234;
            *(_QWORD *)&v47[4] = v28;
            *(_WORD *)&v47[12] = 1024;
            *(_DWORD *)&v47[14] = 76;
            v48 = 1024;
            v49 = v34;
            v50 = 1024;
            v51 = valuePtr;
            v52 = 1024;
            v53 = HIDWORD(v34);
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "handleIncomingUSBDevice %{public}s deviceId information: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x", v47, 0x24u);
            if (v46 < 0)
              operator delete(*(void **)v43);
          }
          sub_100445BAC((uint64_t)v15, 1, 76, valuePtr, SHIDWORD(v34));
          sub_100578E0C(a1, (uint64_t)v15);
          sub_100579A78(a1, a3, (unint64_t)v15);
          if (qword_100978150 != -1)
            dispatch_once(&qword_100978150, &stru_1009389B8);
          sub_1005B981C((uint64_t)off_100978148, v15);
          sub_1005A9720(&v42, &v54);
          nullsub_90(&v42, v29);
          nullsub_90(&v54, v30);
        }
      }
      goto LABEL_66;
    }
    if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
      sub_100704DD0();
  }
  else if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
  {
    sub_100704F2C(a2, (uint64_t)a3, v7);
  }
}

void sub_1005798E8(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  nullsub_90(&a39, a2);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10057993C(uint64_t a1, uint64_t a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  char *v7;
  int v8;
  NSObject *v10;
  __int16 v11[8];
  int v12;
  __int16 v13;
  void *__p;
  char *v15;
  uint64_t v16;

  __p = 0;
  v15 = 0;
  v16 = 0;
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_1009389D8);
  v3 = sub_10006AEC0(off_100978158, (char **)&__p);
  v4 = (char *)__p;
  if (v3 || __p == v15)
  {
LABEL_4:
    v5 = 0;
  }
  else
  {
    v7 = (char *)__p;
    while (1)
    {
      v5 = *(_QWORD *)v7;
      v12 = *(_DWORD *)(*(_QWORD *)v7 + 128);
      v8 = *(unsigned __int16 *)(v5 + 132);
      v13 = *(_WORD *)(v5 + 132);
      if (v12 == *(_DWORD *)a2 && v8 == *(unsigned __int16 *)(a2 + 4))
        break;
      v7 += 8;
      if (v7 == v15)
        goto LABEL_4;
    }
    v10 = qword_1009998F8;
    if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device Already paired", (uint8_t *)v11, 2u);
      v4 = (char *)__p;
    }
  }
  if (v4)
  {
    v15 = v4;
    operator delete(v4);
  }
  return v5;
}

void sub_100579A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100579A78(uint64_t a1, __IOHIDDevice *a2, unint64_t a3)
{
  CFTypeRef Property;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  NSObject *v15;
  int v16;
  void **v17;
  unsigned int v18;
  void **v19;
  unsigned int v20;
  NSObject *v21;
  int v23;
  void **v24;
  unsigned int v25;
  void **v26;
  void *__p[2];
  char v28;
  _QWORD v29[2];
  unint64_t v30;
  uint8_t buf[4];
  void **v32;
  __int16 v33;
  unsigned int v34;

  v29[1] = 0;
  v30 = a3;
  v29[0] = 0;
  sub_10003415C((uint64_t)v29, a1 + 24);
  if (a2 && a3)
  {
    Property = IOHIDDeviceGetProperty(a2, CFSTR("LocationID"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(Property);
    if (v7)
    {
      v10 = *(_QWORD **)(a1 + 104);
      v9 = (_QWORD *)(a1 + 104);
      v8 = v10;
      if (!v10)
        goto LABEL_15;
      v11 = v9;
      do
      {
        v12 = v8[4];
        v13 = v12 >= a3;
        if (v12 >= a3)
          v14 = v8;
        else
          v14 = v8 + 1;
        if (v13)
          v11 = v8;
        v8 = (_QWORD *)*v14;
      }
      while (*v14);
      if (v11 != v9 && v11[4] <= a3)
      {
        v21 = qword_1009998F8;
        if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
        {
          sub_10043F78C(a3, (uint64_t)__p);
          v23 = v28;
          v24 = (void **)__p[0];
          v25 = objc_msgSend(v7, "intValue");
          v26 = __p;
          if (v23 < 0)
            v26 = v24;
          *(_DWORD *)buf = 136315394;
          v32 = v26;
          v33 = 1024;
          v34 = v25;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Already have a USB HID device %s with location ID %d", buf, 0x12u);
          if (v28 < 0)
            operator delete(__p[0]);
        }
      }
      else
      {
LABEL_15:
        v15 = qword_1009998F8;
        if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043F78C(a3, (uint64_t)__p);
          v16 = v28;
          v17 = (void **)__p[0];
          v18 = objc_msgSend(v7, "intValue");
          v19 = __p;
          if (v16 < 0)
            v19 = v17;
          *(_DWORD *)buf = 136315394;
          v32 = v19;
          v33 = 1024;
          v34 = v18;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Adding HID device %s with location ID %d", buf, 0x12u);
          if (v28 < 0)
            operator delete(__p[0]);
        }
        v20 = objc_msgSend(v7, "intValue");
        __p[0] = &v30;
        *((_DWORD *)sub_1004BF4C8((uint64_t **)v9 - 1, &v30, (uint64_t)&unk_100740F58, (_QWORD **)__p) + 10) = v20;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
    {
      sub_100704FAC();
    }

  }
  return sub_100034234((uint64_t)v29);
}

void sub_100579CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  if (a14 < 0)
    operator delete(__p);

  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100579D38(uint64_t a1, __IOHIDDevice *a2)
{
  NSObject *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _BYTE *v12;
  int8x16_t *v13;
  uint64_t v14;
  _BYTE __p[12];
  char v16;
  uint8_t buf[4];
  _BYTE *v18;
  __n128 v19;
  int v20;

  v4 = qword_1009998F8;
  if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__p = 134217984;
    *(_QWORD *)&__p[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Seeing if paired device Link Key already exists for iohid ref %p", __p, 0xCu);
  }
  v5 = (unsigned __int8 *)sub_100578B88(a1, a2);
  if (v5)
  {
    v19 = 0uLL;
    v20 = 0;
    sub_1005A9714((uint64_t)&v19);
    if (qword_100978160 != -1)
      dispatch_once(&qword_100978160, &stru_1009389D8);
    if (sub_1005BEB64((uint64_t)off_100978158, v5, &v19))
      goto LABEL_7;
    v10 = qword_1009998F8;
    if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC((uint64_t)v5, (uint64_t)__p);
      if (v16 >= 0)
        v12 = __p;
      else
        v12 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315138;
      v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Preparing to send existing Link Key to %s", buf, 0xCu);
      if (v16 < 0)
        operator delete(*(void **)__p);
    }
    v13 = (int8x16_t *)nullsub_90(&v19, v11);
    if (sub_100579F64(a1, a2, v13))
    {
      if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
        sub_100705040();
LABEL_7:
      nullsub_90(&v19, v6);
      return 0;
    }
    nullsub_90(&v19, v14);
  }
  else
  {
    v8 = qword_1009998F8;
    if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
      sub_100704FD8((uint64_t)a2, v8, v9);
  }
  return 1;
}

void sub_100579F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  nullsub_90(va, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_100579F64(uint64_t a1, IOHIDDeviceRef device, int8x16_t *a3)
{
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t v9[16];
  CFIndex pReportLength;
  uint8_t report[2];
  char v12;
  int v13;
  __int16 v14;
  int8x16_t v15;

  v4 = vrev64q_s8(*a3);
  v12 = 1;
  *(_WORD *)report = 309;
  pReportLength = 25;
  v13 = *(_DWORD *)(a1 + 89);
  v14 = *(_WORD *)(a1 + 93);
  v15 = vextq_s8(v4, v4, 8uLL);
  v5 = IOHIDDeviceSetReport(device, kIOHIDReportTypeFeature, 53, report, 25);
  if ((_DWORD)v5)
  {
    v6 = v5;
    if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
      sub_1007050CC();
  }
  else
  {
    v6 = IOHIDDeviceGetReport(device, kIOHIDReportTypeFeature, 53, report, &pReportLength);
    v7 = qword_1009998F8;
    if ((_DWORD)v6 || pReportLength != 25)
    {
      if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
        sub_10070506C();
    }
    else
    {
      v6 = 0;
      if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully resent Link Key to paired device", v9, 2u);
        return 0;
      }
    }
  }
  return v6;
}

void sub_10057A0D8(uint64_t a1, unsigned __int8 *a2, __n128 *a3)
{
  NSObject *v5;
  int v6;
  NSObject *v7;
  void **v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;

  v5 = qword_1009998F8;
  if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Attempting To Pair device", (uint8_t *)__p, 2u);
  }
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_1009389D8);
  v6 = sub_1005BEC60((uint64_t)off_100978158, a2, a3, 1);
  v7 = qword_1009998F8;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_ERROR))
      sub_10070512C();
  }
  else if (os_log_type_enabled((os_log_t)qword_1009998F8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC(a2 + 128, __p);
    if (v10 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SUCCESSFULLY PAIRED ADDR: %{public}s", buf, 0xCu);
    if (v10 < 0)
      operator delete(__p[0]);
  }
}

uint64_t sub_10057A250(uint64_t a1)
{
  return sub_1005780D4(*(_QWORD *)(a1 + 32));
}

uint64_t sub_10057A258(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, (uint64_t)(a1 + 3));
  v4 = (_QWORD *)a1[15];
  v5 = (_QWORD *)a1[16];
  v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        v6 = (_QWORD *)a1[16];
        break;
      }
    }
  }
  if (v6 == v5)
  {
    v7 = a1[17];
    if ((unint64_t)v5 >= v7)
    {
      v9 = v5 - v4;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v10 = v7 - (_QWORD)v4;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)sub_10007ABA0((uint64_t)(a1 + 17), v12);
      else
        v13 = 0;
      v14 = &v13[8 * v9];
      v15 = &v13[8 * v12];
      *(_QWORD *)v14 = a2;
      v8 = v14 + 8;
      v17 = (char *)a1[15];
      v16 = (char *)a1[16];
      if (v16 != v17)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        v16 = (char *)a1[15];
      }
      a1[15] = v14;
      a1[16] = v8;
      a1[17] = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v5 = a2;
      v8 = v5 + 1;
    }
    a1[16] = v8;
  }
  return sub_100034234((uint64_t)v20);
}

void sub_10057A37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10057A390(id a1)
{
  operator new();
}

void sub_10057A400()
{
  operator delete();
}

void sub_10057A424(id a1)
{
  operator new();
}

void sub_10057A464()
{
  operator delete();
}

void sub_10057A488(id a1)
{
  operator new();
}

void sub_10057A4C8()
{
  operator delete();
}

void sub_10057A4EC(id a1)
{
  operator new();
}

void sub_10057A52C()
{
  operator delete();
}

void sub_10057A550(id a1)
{
  operator new();
}

void sub_10057A590()
{
  operator delete();
}

void sub_10057A5B4(id a1)
{
  operator new();
}

void sub_10057A5F4()
{
  operator delete();
}

_QWORD *sub_10057A618(uint64_t a1, uint64_t a2, _xpc_connection_s *a3, uint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)sub_100070614(a1, a2, a3, a4);
  *result = &off_100938AA0;
  result[18] = off_100938B28;
  return result;
}

void sub_10057A644(uint64_t a1)
{
  sub_100008708(a1);
  operator delete();
}

void *sub_10057A668(uint64_t a1, int a2)
{
  void *result;
  NSObject *v4;

  result = sub_10057A72C;
  switch(a2)
  {
    case 1:
      return result;
    case 2:
      result = sub_10057AB08;
      break;
    case 8:
      result = sub_10057AB44;
      break;
    case 9:
      result = sub_10057AED4;
      break;
    case 10:
      result = sub_10057B010;
      break;
    case 11:
      result = sub_10057B2C0;
      break;
    case 12:
      result = sub_10057B4B8;
      break;
    default:
      v4 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100705158(a2, v4);
      result = 0;
      break;
  }
  return result;
}

void sub_10057A72C(_QWORD *a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  v15 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1000239F0(value, "kCBMsgArgName");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgType") || !v5)
  {
    v13 = a1[16];
    if (v13)
    {
      if (qword_100978130 != -1)
        dispatch_once(&qword_100978130, &stru_100938BD0);
      v14 = sub_10002527C((uint64_t)off_100978128);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 104))(a1, v13, v14);
    }
    else
    {
      sub_10007069C((uint64_t)a1, 2u);
    }
  }
  else
  {
    v12 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100705254((uint64_t)v5, v12);
  }

}

void sub_10057AAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, ...)
{
  void *v17;
  va_list va;

  va_start(va, a17);

  sub_100272CFC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10057AB08(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 1);
  sub_10005E138(a1, 5, 0, 0);
}

void sub_10057AB44(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  xpc_object_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  _QWORD v21[4];
  id v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint8_t buf[4];
  id v43;

  v38 = 0;
  v39 = &v38;
  v40 = 0x2020000000;
  v41 = 0;
  v36 = 0;
  v37 = 0;
  v34 = 0;
  v35 = 0;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1000239F0(value, "kCBMsgArgName");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v14 = sub_100023B7C(v7, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgType");
  *((_DWORD *)v39 + 6) = v14;
  if (v31)
  {
    v15 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "ScalablePipeTrace set. Parse metadata", buf, 2u);
    }
  }
  if ((_DWORD)v35 == 2 && !*(_BYTE *)(a1 + 85))
  {
    *((_DWORD *)v39 + 6) = 13;
    v16 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v43 = v6;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Failing registration of endpoint \"%{public}@\" due to insufficient entitlements", buf, 0xCu);
    }
  }
  if (*(_DWORD *)(a1 + 80) != 2)
  {
    v33 = 0;
    v34 = 1;
  }
  v17 = *((_DWORD *)v39 + 6);
  if (v17 || !v6)
    goto LABEL_17;
  v18 = sub_1000419F4();
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10057B824;
  v21[3] = &unk_100938B68;
  v23 = &v38;
  v24 = a1;
  v19 = v6;
  v22 = v19;
  v25 = v37;
  v26 = v36;
  v27 = v35;
  v28 = v34;
  v29 = v33;
  v30 = v32;
  sub_100023D84(v18, v21);
  if (*((_DWORD *)v39 + 6) != 10)
  {

    v17 = *((_DWORD *)v39 + 6);
LABEL_17:
    sub_1004B1368(a1, 13, xdict, v17);
    goto LABEL_18;
  }
  v20 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v43 = v19;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Delaying registration of endpoint \"%{public}@\" as it is currently being unregistered", buf, 0xCu);
  }

LABEL_18:
  _Block_object_dispose(&v38, 8);
}

void sub_10057AE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  void *v35;
  uint64_t v36;

  _Block_object_dispose((const void *)(v36 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10057AED4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 3;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1000239F0(value, "kCBMsgArgName");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (!v6)
    goto LABEL_3;
  v7 = sub_1000419F4();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10057B918;
  v8[3] = &unk_100929178;
  v10 = &v12;
  v11 = a1;
  v9 = v6;
  sub_100023D84(v7, v8);
  LODWORD(v7) = *((_DWORD *)v13 + 6);

  if ((_DWORD)v7 != 10)
LABEL_3:
    sub_1004B1368(a1, 14, xdict, *((_DWORD *)v13 + 6));

  _Block_object_dispose(&v12, 8);
}

void sub_10057AFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10057B010(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  id v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t buf[4];
  __CFString *v28;

  v25 = 0;
  v26 = 0;
  v24 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = sub_1000239F0(value, "kCBMsgArgClientName");
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue(v6);
  v14 = sub_100023B7C(value, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgPacketsPerSecond");
  if (!-[__CFString length](v7, "length"))
  {

    v7 = CFSTR("default");
  }
  v15 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v28 = v7;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "SetLinkRequirementsForPeer received for %{public}@", buf, 0xCu);
  }
  if (!v14 && v5)
  {
    v16 = sub_1000419F4();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10057B9DC;
    v17[3] = &unk_100938B90;
    v20 = a1;
    v18 = v5;
    v21 = v26;
    v22 = v25;
    v23 = v24;
    v7 = v7;
    v19 = v7;
    sub_100023D84(v16, v17);

  }
}

void sub_10057B284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_10057B2C0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  v19 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (!sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgLatencyInMs") && v5)
  {
    v12 = sub_1000419F4();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10057BA40;
    v13[3] = &unk_100937300;
    v15 = a1;
    v14 = v5;
    v16 = v19;
    v17 = v21;
    v18 = v20;
    sub_100023D84(v12, v13);

  }
}

void sub_10057B490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;

  _Unwind_Resume(a1);
}

_BYTE *sub_10057B4B8(uint64_t a1, void *a2)
{
  NSObject *v4;
  int64_t v5;
  xpc_object_t reply;
  void *v7;
  char v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unint64_t v29;

  v14 = 0;
  v15 = 0;
  v13 = 0;
  v12 = 0;
  v11 = 0;
  v10 = 0;
  v9 = 0;
  sub_100043758(&v9);
  sub_100173BC8((_DWORD *)&v15 + 1, &v15, (_DWORD *)&v14 + 1, &v14, &v13, 0, &v11, &v12, &v10);
  sub_10004339C(&v9);
  v4 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110656;
    v17 = HIDWORD(v15);
    v18 = 1024;
    v19 = v15;
    v20 = 1024;
    v21 = HIDWORD(v14);
    v22 = 1024;
    v23 = v14;
    v24 = 1024;
    v25 = v13;
    v26 = 1024;
    v27 = v11;
    v28 = 2048;
    v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PipeStatistics:connected:%d start:%d stop:%d upCount:%d upDuration:%d tech:%d timSpentInThisTransportMS:%llu", buf, 0x30u);
  }
  v5 = v13;
  if (v11 == 2)
    v5 = v13 + v12 / 0x3E8;
  reply = xpc_dictionary_create_reply(a2);
  v7 = reply;
  if (reply)
  {
    xpc_dictionary_set_int64(reply, "kCBLePipeStatisticsTotalTimeSpentUpgraded", v5);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v7);
    xpc_release(v7);
  }
  return sub_100043728(&v9);
}

void sub_10057B674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_10057B694(uint64_t a1, __int16 a2)
{
  return (a2 & 0xFFFE) == 8;
}

void sub_10057B6A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  char v5;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100938BB0);
  v3 = qword_10097AB60;
  sub_100091AE8(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"));
  *(_QWORD *)(v2 + 128) = sub_1002AB5C8(v3, v2 + 144, (uint64_t)__p, v2 + 56);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_10057B74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10057B768(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  if (*(_QWORD *)(a1 + 128))
  {
    v2 = sub_1000419F4();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10057B7D4;
    v3[3] = &unk_100917378;
    v3[4] = a1;
    sub_100023D84(v2, v3);
    *(_QWORD *)(a1 + 128) = 0;
  }
}

uint64_t sub_10057B7D4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100938BB0);
  return sub_1002AB964(qword_10097AB60, v1 + 144);
}

void sub_10057B824(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *__p[2];
  char v6;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100938BB0);
  v3 = qword_10097AB60;
  v4 = *(_QWORD *)(v2 + 128);
  sub_100091AE8(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = sub_1002AC064(v3, v4, __p, *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 72), *(_QWORD *)(a1 + 80) != 0, *(_QWORD *)(a1 + 88) != 0, *(_QWORD *)(a1 + 96) != 0);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_10057B8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10057B918(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  void *__p[2];
  char v6;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100938BB0);
  v3 = (_QWORD *)qword_10097AB60;
  v4 = *(_QWORD *)(v2 + 128);
  sub_100091AE8(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = sub_1002ACCF0(v3, v4, (char *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_10057B9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10057B9DC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100938BB0);
  sub_1002AD240(qword_10097AB60, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 72), *(void **)(a1 + 40));
}

void sub_10057BA40(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100938BB0);
  sub_1002AD798(qword_10097AB60, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 64));
}

void sub_10057BAA4(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6, int a7, unsigned int a8, int64_t value)
{
  id v16;
  xpc_object_t v17;
  const char *v18;
  unsigned int v19;
  unsigned __int8 v20;

  v16 = a3;
  v17 = xpc_dictionary_create(0, 0, 0);
  sub_1004B1614(a1, v17, v16);
  if (*(char *)(a2 + 23) >= 0)
    v18 = (const char *)a2;
  else
    v18 = *(const char **)a2;
  xpc_dictionary_set_string(v17, "kCBMsgArgName", v18);
  xpc_dictionary_set_int64(v17, "kCBMsgArgType", a4);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPriority", a5);
  xpc_dictionary_set_fd(v17, "kCBLePipeMsgArgSocket", a6);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgReliable", a7 ^ 1u);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerCLVersion", a8);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerCLFeatures", value);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerType", HIDWORD(value));
  v20 = 0;
  v19 = 0;
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100938BB0);
  sub_1002B39D8(qword_10097AB60, &v20, &v19);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArglocalCLVersion", v20);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArglocalCLFeatures", v19);
  sub_10005E138(a1, 15, v17, 1);

}

void sub_10057BC5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10057BC70(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6, int a7, unsigned int a8, int64_t value)
{
  sub_10057BAA4(a1 - 144, a2, a3, a4, a5, a6, a7, a8, value);
}

void sub_10057BC80(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, const unsigned __int8 *a6, int a7, unsigned int a8, int64_t value)
{
  id v16;
  xpc_object_t v17;
  const char *v18;
  unsigned int v19;
  unsigned __int8 v20;

  v16 = a3;
  v17 = xpc_dictionary_create(0, 0, 0);
  sub_1004B1614(a1, v17, v16);
  if (*(char *)(a2 + 23) >= 0)
    v18 = (const char *)a2;
  else
    v18 = *(const char **)a2;
  xpc_dictionary_set_string(v17, "kCBMsgArgName", v18);
  xpc_dictionary_set_int64(v17, "kCBMsgArgType", a4);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPriority", a5);
  xpc_dictionary_set_uuid(v17, "kCBLePipeMsgArgSocket", a6);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgReliable", a7 ^ 1u);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerCLVersion", a8);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerCLFeatures", value);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArgPeerType", HIDWORD(value));
  v20 = 0;
  v19 = 0;
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100938BB0);
  sub_1002B39D8(qword_10097AB60, &v20, &v19);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArglocalCLVersion", v20);
  xpc_dictionary_set_int64(v17, "kCBLePipeMsgArglocalCLFeatures", v19);
  sub_10005E138(a1, 15, v17, 1);

}

void sub_10057BE38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10057BE4C(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, const unsigned __int8 *a6, int a7, unsigned int a8, int64_t value)
{
  sub_10057BC80(a1 - 144, a2, a3, a4, a5, a6, a7, a8, value);
}

void sub_10057BE5C(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  xpc_object_t v7;
  const char *v8;
  id v9;

  v9 = a3;
  v7 = xpc_dictionary_create(0, 0, 0);
  sub_1004B1614(a1, v7, v9);
  if (*(char *)(a2 + 23) >= 0)
    v8 = (const char *)a2;
  else
    v8 = *(const char **)a2;
  xpc_dictionary_set_string(v7, "kCBMsgArgName", v8);
  xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a4);
  sub_10005E138(a1, 16, v7, 1);

}

void sub_10057BF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10057BF1C(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  sub_10057BE5C(a1 - 144, a2, a3, a4);
}

void sub_10057BF24(uint64_t a1, uint64_t a2, int a3)
{
  xpc_object_t v6;
  void *v7;
  const char *v8;

  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (*(char *)(a2 + 23) >= 0)
    v8 = (const char *)a2;
  else
    v8 = *(const char **)a2;
  xpc_dictionary_set_string(v6, "kCBMsgArgName", v8);
  xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a3);
  sub_10005E138(a1, 13, v7, 1);
}

void sub_10057BFA4(uint64_t a1, uint64_t a2, int a3)
{
  sub_10057BF24(a1 - 144, a2, a3);
}

void sub_10057BFAC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const __CFString *v5;
  id v6;

  v3 = a2;
  v5 = CFSTR("kCBMsgArgName");
  v6 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));
  sub_10005DF3C(a1, 14, v4);

}

void sub_10057C050(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10057C074(uint64_t a1, void *a2)
{
  sub_10057BFAC(a1 - 144, a2);
}

void sub_10057C07C(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v3;
  int v4;

  if ((a3 - 2) >= 3)
  {
    if (a3)
      v4 = 0;
    else
      v4 = 4;
    if (a3 == 1)
      v3 = 5;
    else
      v3 = v4;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 136);
  }
  sub_10007069C(a1, v3);
}

void sub_10057C0AC(uint64_t a1, uint64_t a2, int a3)
{
  sub_10057C07C(a1 - 144, a2, a3);
}

void sub_10057C0B4(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v13[3];
  _QWORD v14[3];

  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (a4)
    v10 = 2;
  else
    v10 = 1;
  v13[0] = CFSTR("kCBMsgArgName");
  v13[1] = CFSTR("kCBMsgArgDeviceUUID");
  v14[0] = v7;
  v14[1] = v8;
  v13[2] = CFSTR("kCBMsgArgState");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v10));
  v14[2] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 3));
  sub_10005DF3C(a1, 17, v12);

}

void sub_10057C1B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10057C1E8(uint64_t a1, void *a2, void *a3, int a4)
{
  sub_10057C0B4(a1 - 144, a2, a3, a4);
}

uint64_t sub_10057C1F0()
{
  return 0;
}

char *sub_10057C1F8(uint64_t a1, int a2)
{
  return off_1009389F8[a2];
}

void sub_10057C208(id a1)
{
  operator new();
}

void sub_10057C248()
{
  operator delete();
}

void sub_10057C26C(id a1)
{
  operator new();
}

void sub_10057C2AC()
{
  operator delete();
}

uint64_t sub_10057C2D0(uint64_t a1)
{
  *(_QWORD *)sub_10048D2F0(a1, "NetworkProviderService", 256) = &off_100938C00;
  if (qword_10097B7A0 != -1)
    dispatch_once(&qword_10097B7A0, &stru_100938CF0);
  sub_10048D5B0(a1, (uint64_t)off_10097B798);
  return a1;
}

void sub_10057C344(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048D3E0(v1);
  _Unwind_Resume(a1);
}

void sub_10057C360(uint64_t a1)
{
  sub_10048D3E0(a1);
  operator delete();
}

void sub_10057C388(id a1)
{
  operator new();
}

void sub_10057C3C8()
{
  operator delete();
}

uint64_t sub_10057C3EC(uint64_t a1, __int16 a2, uint64_t a3, int *a4, uint64_t a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)sub_1002D3720(a1, 1953719151);
  *v10 = &off_100938D20;
  sub_10026B5C4((uint64_t)(v10 + 50), a3, a2, a4);
  *(_QWORD *)(a1 + 584) = a5;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 616) = 0;
  return a1;
}

void sub_10057C46C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002D383C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10057C484(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_100938D20;
  v2 = a1[74];
  if (v2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2) & 1) == 0)
    {
      v3 = a1[74];
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    a1[74] = 0;
  }
  sub_10026B5C8((uint64_t)(a1 + 50));
  return sub_1002D383C((uint64_t)a1);
}

void sub_10057C4E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10026B5C8(v1 + 400);
  sub_1002D383C(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10057C504(uint64_t a1)
{
  return *(_QWORD *)(a1 + 592) != 0;
}

uint64_t sub_10057C514(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 592);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    if ((result & 1) == 0)
    {
      result = *(_QWORD *)(a1 + 592);
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  *(_QWORD *)(a1 + 592) = 0;
  return result;
}

void sub_10057C564(_QWORD *a1)
{
  sub_10057C484(a1);
  operator delete();
}

void sub_10057C588(uint64_t a1, char *__s1, const __CFBoolean *a3)
{
  _BOOL8 v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  int v14;
  CFNumberRef v15;
  uint64_t v16;
  CFNumberRef v17;
  CFNumberRef number;
  void *value;
  unsigned int valuePtr;
  int v21;
  __int16 v22;
  _BYTE v23[10];
  int v24;
  __int16 v25;
  int v26;

  if (!strcmp(__s1, "kBTAudioMsgPropertyAllowSCOForTBT"))
  {
    v6 = CFBooleanGetValue(a3) != 0;
    (*(void (**)(_QWORD, uint64_t, _BOOL8))(**(_QWORD **)(a1 + 584) + 64))(*(_QWORD *)(a1 + 584), a1, v6);
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyScoSampleRate"))
  {
    valuePtr = 8000;
    CFNumberGetValue(a3, kCFNumberIntType, &valuePtr);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 584) + 72))(*(_QWORD *)(a1 + 584), a1, valuePtr);
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyScoCodecTypeChanged"))
  {
    number = 0;
    value = 0;
    v17 = 0;
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyScoChannelFormat"), (const void **)&value))
    {
      if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyScoSampleRate"), (const void **)&number))
      {
        if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyTransportType"), (const void **)&v17))
        {
          LODWORD(v15) = 0;
          v16 = 0x1F4000000000;
          CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &v15);
          CFNumberGetValue(number, kCFNumberIntType, (char *)&v16 + 4);
          CFNumberGetValue(v17, kCFNumberIntType, &v16);
          (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 584) + 88))(*(_QWORD *)(a1 + 584), a1, HIDWORD(v16), 1, v15);
          (*(void (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 584) + 96))(*(_QWORD *)(a1 + 584), a1, (_DWORD)v16 != 0);
          v7 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          {
            valuePtr = 67109632;
            v21 = (int)v15;
            v22 = 1024;
            *(_DWORD *)v23 = HIDWORD(v16);
            *(_WORD *)&v23[4] = 1024;
            *(_DWORD *)&v23[6] = v16;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "propertyDidUpdate codecID:%d, sampleRate:%u advancedTransport:%u", (uint8_t *)&valuePtr, 0x14u);
          }
        }
      }
    }
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyExpanseInA2DP"))
  {
    v8 = CFBooleanGetValue(a3);
    v9 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      valuePtr = 67109120;
      v21 = v8 != 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "kBTAudioMsgPropertyExpanseInA2DP: %d", (uint8_t *)&valuePtr, 8u);
    }
    (*(void (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 584) + 112))(*(_QWORD *)(a1 + 584), a1, v8 != 0);
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyCallScreening"))
  {
    v10 = CFBooleanGetValue(a3);
    v11 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      valuePtr = 67109120;
      v21 = v10 != 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "kBTAudioMsgPropertyCallScreening: %d", (uint8_t *)&valuePtr, 8u);
    }
    (*(void (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 584) + 120))(*(_QWORD *)(a1 + 584), a1, v10 != 0);
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyManualVolumeUpdate"))
  {
    number = 0;
    value = 0;
    v16 = 0;
    v17 = 0;
    v15 = 0;
    v14 = 0;
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyManualVolumeUpdateNewVolume"), (const void **)&v17))
      CFNumberGetValue(v17, kCFNumberSInt32Type, (char *)&v16 + 4);
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyManualVolumeUpdateCurrentVolume"), (const void **)&value))
    {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v16);
    }
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyManualVolumeUpdateRampInProgress"), (const void **)&v15))
    {
      CFNumberGetValue(v15, kCFNumberSInt32Type, &v14);
    }
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyManualVolumeUpdateCurrentAudioCategory"), (const void **)&number))
    {
      v12 = -[__CFNumber copy](number, "copy");
    }
    else
    {
      v12 = 0;
    }
    v13 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      valuePtr = 67109890;
      v21 = v16;
      v22 = 2112;
      *(_QWORD *)v23 = v12;
      *(_WORD *)&v23[8] = 1024;
      v24 = BYTE4(v16);
      v25 = 1024;
      v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Manual Volume update received currentVolume: %d audioCategory %@ newVolume %d isRampInProgress %d", (uint8_t *)&valuePtr, 0x1Eu);
    }
    (*(void (**)(_QWORD, uint64_t, _QWORD, id, _QWORD, BOOL))(**(_QWORD **)(a1 + 584) + 104))(*(_QWORD *)(a1 + 584), a1, v16, v12, HIDWORD(v16), v14 != 0);

  }
  else
  {
    sub_1002D5A64((uint64_t *)a1, __s1, a3);
  }
}

void sub_10057CADC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10057CAF4(uint64_t a1, uint64_t a2, CFDictionaryRef theDict)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t valuePtr;
  CFNumberRef v8;
  CFNumberRef number;
  void *value;

  if ((_DWORD)a2 == 11)
  {
    value = 0;
    v8 = 0;
    number = 0;
    valuePtr = 0;
    v6 = 8000;
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("kBTAudioMsgPropertyScoDataSource"), (const void **)&value))
      CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, (char *)&valuePtr + 4);
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("kBTAudioMsgPropertyScoRouteReason"), (const void **)&number))
      CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("kBTAudioMsgPropertyScoSampleRate"), (const void **)&v8))
    {
      CFNumberGetValue(v8, kCFNumberIntType, &v6);
      v5 = v6;
    }
    else
    {
      v5 = 8000;
    }
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 584) + 48))(*(_QWORD *)(a1 + 584), a1, HIDWORD(valuePtr), valuePtr, v5);
  }
  else
  {
    sub_1002D5FD4(a1, a2);
  }
}

uint64_t sub_10057CBF0(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD, uint64_t))(a1 + 584))(*(_QWORD *)(a1 + 584), a1);
}

uint64_t sub_10057CC04(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 584) + 8))(*(_QWORD *)(a1 + 584), a1);
}

uint64_t sub_10057CC18(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 584) + 16))(*(_QWORD *)(a1 + 584), a1);
}

uint64_t sub_10057CC2C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 584) + 32))(*(_QWORD *)(a1 + 584), a1);
}

uint64_t sub_10057CC40(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 584) + 40))(*(_QWORD *)(a1 + 584), a1);
}

uint64_t sub_10057CC54(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 584) + 24))(*(_QWORD *)(a1 + 584), a1);
}

uint64_t sub_10057CC70(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 584) + 80))(*(_QWORD *)(a1 + 584), a1);
}

uint64_t sub_10057CC84(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 584) + 128))(*(_QWORD *)(a1 + 584), a1);
}

__n128 sub_10057CC98(uint64_t a1, __n128 *a2)
{
  __n128 result;

  result = *(__n128 *)(a1 + 600);
  a2[1].n128_u32[0] = *(_DWORD *)(a1 + 616);
  *a2 = result;
  return result;
}

double sub_10057CCB0(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 616) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 600) = 0u;
  return result;
}

uint64_t sub_10057CCC4(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t result;

  v4 = a1 + 400;
  v5 = sub_10026BB1C(a1 + 400);
  ++*(_DWORD *)(a1 + 600);
  if (v5 != a2 && a2 != 0 && v5 != 0)
    ++*(_DWORD *)(a1 + 608);
  result = sub_10026BADC(v4);
  if ((_DWORD)result)
    *(_BYTE *)(a1 + 616) = 1;
  return result;
}

uint64_t sub_10057CD38(uint64_t result)
{
  ++*(_DWORD *)(result + 612);
  return result;
}

uint64_t sub_10057CD48(uint64_t result)
{
  ++*(_DWORD *)(result + 604);
  return result;
}

void sub_10057CD58(uint64_t a1, int a2, int a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  const CFBooleanRef *v7;
  CFDictionaryRef v8;
  int valuePtr;
  void *values[2];
  void *keys[2];

  valuePtr = a3;
  *(_OWORD *)keys = *(_OWORD *)off_100938E30;
  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  v6 = v5;
  v7 = &kCFBooleanTrue;
  if (!a2)
    v7 = &kCFBooleanFalse;
  values[0] = *(void **)v7;
  values[1] = v5;
  v8 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  sub_1002D4F78(a1, "kBTAudioMsgPropertyScoIsEnabled", v8);
  CFRelease(v6);
  CFRelease(v8);
}

void sub_10057CE54(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyNRLevel", a2);
}

void sub_10057CE64(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyCategory", a2);
}

void sub_10057CE74(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyEQSettingID", a2);
}

void sub_10057CE84(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyNBSSupport", a2);
}

void sub_10057CE94(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertySWBSupport", a2);
}

void sub_10057CEA4(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertySWBStereoSupport", a2);
}

void sub_10057CEB4(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyAACELDStereo48KSupport", a2);
}

void sub_10057CEC4(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyAACELDStereo48K10msSupport", a2);
}

void sub_10057CED4(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyLowLatencyGameMode", a2);
}

void sub_10057CEE4(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyAdvancedHandsfreeSupport", a2);
}

void sub_10057CEF4(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyWBSSupport", a2);
}

void sub_10057CF04(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyAllowSCOForTBT", a2);
}

void sub_10057CF14(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyUWBSSupport", a2);
}

void sub_10057CF24(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  v4 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setUWBSStereoSupport: %d", (uint8_t *)v5, 8u);
  }
  sub_1002D4B74(a1, "kBTAudioMsgPropertyUWBSStereoSupport", a2);
}

void sub_10057CFE4(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  v4 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setIncompatibleHidConnected: %d", (uint8_t *)v5, 8u);
  }
  sub_1002D4B74(a1, "kBTAudioMsgPropertyIncompatibleHidConnected", a2);
}

void sub_10057D0A4(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyDSPOffload", a2);
}

void sub_10057D0B4(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyUserSelectedDeviceType", a2);
}

void sub_10057D0C4(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertySiriUseDeviceMic", a2);
}

void sub_10057D0D4(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyExtentedHfpVolumeRange", a2);
}

void sub_10057D0E4(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyInputSWPLCSupport", a2);
}

void sub_10057D0F4(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyFindMyPlayBack", a2);
}

void sub_10057D104(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTHostedDSPOffloadSupport", a2);
}

uint64_t sub_10057D114()
{
  return 0;
}

void sub_10057D11C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  int v5;
  uint64_t v6;

  v4 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 134217984;
    v6 = a3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HFPAudioDevice readHandler called on data of size %lu", (uint8_t *)&v5, 0xCu);
  }
}

uint64_t sub_10057D1BC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 592);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void sub_10057D1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;

  if (a7 > 129)
  {
    if ((a7 - 255) < 2 || a7 == 130)
      goto LABEL_9;
  }
  else
  {
    if ((a7 - 127) < 2)
      goto LABEL_9;
    if (a7 == 129)
    {
      if (_os_feature_enabled_impl("BluetoothFeatures", "LowLatencyEsco"))
      {
        v7 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 328))(v7))
          operator new();
      }
LABEL_9:
      operator new();
    }
  }
  operator new();
}

void sub_10057D338()
{
  operator delete();
}

void sub_10057D374(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;

  v2 = *(_QWORD *)(a1 + 592);
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2)
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 592) + 24))(*(_QWORD *)(a1 + 592)) & 1) == 0)
  {
    sub_1002A9268(*(pthread_t **)(a1 + 592));
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 592) + 32))(*(_QWORD *)(a1 + 592), 1);
  }
  else
  {
    v3 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 592);
      v5 = "Doesn't";
      if (v4)
      {
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4))
          v5 = "Does";
        v7 = *(_QWORD *)(a1 + 592);
        v6 = "Not Running";
        if (v7)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
            v6 = "Running";
        }
      }
      else
      {
        v6 = "Not Running";
      }
      v8 = 136315394;
      v9 = v5;
      v10 = 2080;
      v11 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Sendthread %s have an associated connection handle, Thread already %s: not starting", (uint8_t *)&v8, 0x16u);
    }
  }
}

uint64_t sub_10057D500(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 592);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

_QWORD *sub_10057D518(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)sub_100278350(a1, 17);
  *result = &off_100938E50;
  result[32] = 0;
  result[33] = 0;
  return result;
}

uint64_t sub_10057D540(_QWORD *a1)
{
  *a1 = &off_100938E50;
  sub_10009F88C((uint64_t)(a1 + 32));
  return sub_100278464((uint64_t)a1);
}

void sub_10057D574(_QWORD *a1)
{
  *a1 = &off_100938E50;
  sub_10009F88C((uint64_t)(a1 + 32));
  sub_100278464((uint64_t)a1);
  operator delete();
}

uint64_t sub_10057D5BC()
{
  return 0;
}

uint64_t sub_10057D5C4()
{
  return 0;
}

uint64_t sub_10057D5CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;

  v2 = *(_QWORD *)(a1 + 256);
  if (v2)
  {
    v3 = a1 + 256;
    sub_10034B960(v2);
    v8 = 0uLL;
    sub_100274874(v3, &v8);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
    if (*((_QWORD *)&v8 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return 0;
}

uint64_t sub_10057D64C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v12 = 0;
  sub_100043758(&v12);
  v3 = sub_100168F60(2, 8, a2 + 128, 0xFu, (uint64_t)sub_10057D71C, (uint64_t (*)(uint64_t (*)(int *, unsigned int)))sub_10057D7E0, (void (*)(void))sub_10057D830, (uint64_t)sub_10057D878, (uint64_t)sub_10057D8E8, (uint64_t)sub_10057D938);
  if ((_DWORD)v3)
  {
    v4 = qword_100999998;
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_1007052C8(v3, v4, v5, v6, v7, v8, v9, v10);
    v3 = 305;
  }
  sub_100043728(&v12);
  return v3;
}

void sub_10057D708(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100043728((_BYTE *)(v1 - 17));
  _Unwind_Resume(a1);
}

void sub_10057D71C(__int16 a1, int *a2, uint64_t a3)
{
  unint64_t v6;
  int v7;
  __int16 v8;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100938EA8);
  v7 = *a2;
  v8 = *((_WORD *)a2 + 2);
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v7, 1);
  if (qword_10097B790 != -1)
    dispatch_once(&qword_10097B790, &stru_100938EC8);
  sub_10057DA40((uint64_t)off_10097B788, v6, a1, a3);
}

uint64_t sub_10057D7E0(uint64_t a1)
{
  if (qword_10097B790 != -1)
    dispatch_once(&qword_10097B790, &stru_100938EC8);
  return sub_10057DB48((uint64_t)off_10097B788, a1);
}

uint64_t sub_10057D830()
{
  if (qword_10097B790 != -1)
    dispatch_once(&qword_10097B790, &stru_100938EC8);
  sub_10057DC3C((uint64_t)off_10097B788);
  return 0;
}

uint64_t sub_10057D878(const void *a1, unsigned int a2)
{
  uint64_t v4;

  if (qword_10097B790 != -1)
    dispatch_once(&qword_10097B790, &stru_100938EC8);
  v4 = *((_QWORD *)off_10097B788 + 32);
  if (v4)
    return sub_10034BCCC(v4, a1, a2);
  else
    return 3400;
}

pthread_cond_t *sub_10057D8E8()
{
  pthread_cond_t *result;

  if (qword_10097B790 != -1)
    dispatch_once(&qword_10097B790, &stru_100938EC8);
  result = (pthread_cond_t *)*((_QWORD *)off_10097B788 + 32);
  if (result)
    return (pthread_cond_t *)sub_10034BC5C(result);
  return result;
}

uint64_t sub_10057D938(int a1)
{
  void *v2;
  uint64_t v3;

  if (qword_10097B790 != -1)
    dispatch_once(&qword_10097B790, &stru_100938EC8);
  v2 = off_10097B788;
  v3 = sub_1004822D0(off_10097B788, a1);
  return sub_10048257C((uint64_t)v2, v3, 0);
}

uint64_t sub_10057D9AC(_QWORD *a1, unint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v2 = sub_1004821D4(a1, a2);
  v12 = 0;
  sub_100043758(&v12);
  v3 = sub_10016910C(v2);
  if ((_DWORD)v3)
  {
    v4 = qword_100999998;
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_10070532C(v3, v4, v5, v6, v7, v8, v9, v10);
    v3 = 306;
  }
  sub_100043728(&v12);
  return v3;
}

void sub_10057DA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_10057DA40(uint64_t a1, unint64_t a2, __int16 a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if ((_DWORD)a4)
  {
    v7 = qword_100999998;
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_1007052C8(a4, v7, v8, v9, v10, v11, v12, v13);
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100938EE8);
    v14 = sub_1004A35C0((uint64_t)off_100977A50, a4, 20000);
    sub_10048183C(a1, a2, v14);
  }
  sub_1004820E0(a1, a2, a3);
  sub_10048183C(a1, a2, 0);
}

uint64_t sub_10057DB48(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  __int128 v14;

  v13 = 0;
  sub_1004CC4EC((unsigned int *)&v13 + 1, (unsigned int *)&v13, (_QWORD *)(a1 + 8), &v14);
  v4 = (uint64_t *)(a1 + 256);
  sub_100274874((uint64_t)v4, &v14);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = sub_10034B418(*v4, a2);
  if ((_DWORD)v8)
  {
    v14 = 0uLL;
    sub_100274874((uint64_t)v4, &v14);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return v8;
}

uint64_t sub_10057DC3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;

  v2 = *(_QWORD *)(a1 + 256);
  if (v2)
  {
    v3 = a1 + 256;
    sub_10034B960(v2);
    v8 = 0uLL;
    sub_100274874(v3, &v8);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
    if (*((_QWORD *)&v8 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return 0;
}

void sub_10057DCBC(id a1)
{
  operator new();
}

void sub_10057DCFC()
{
  operator delete();
}

void sub_10057DD20(id a1)
{
  operator new();
}

void sub_10057DD74()
{
  operator delete();
}

void sub_10057DD98(id a1)
{
  operator new();
}

void sub_10057DDD8()
{
  operator delete();
}

uint64_t sub_10057DDFC(uint64_t a1)
{
  uint64_t result;

  result = sub_100278350(a1, 16);
  *(_QWORD *)result = off_100938F18;
  *(_QWORD *)(result + 264) = 0;
  *(_QWORD *)(result + 272) = 0;
  *(_QWORD *)(result + 256) = &off_100938F88;
  *(_DWORD *)(result + 280) = 0;
  return result;
}

uint64_t sub_10057DE30(_QWORD *a1)
{
  *a1 = off_100938F18;
  a1[32] = &off_100938F88;
  sub_10009F88C((uint64_t)(a1 + 33));
  return sub_100278464((uint64_t)a1);
}

void sub_10057DE6C(_QWORD *a1)
{
  *a1 = off_100938F18;
  a1[32] = &off_100938F88;
  sub_10009F88C((uint64_t)(a1 + 33));
  sub_100278464((uint64_t)a1);
  operator delete();
}

uint64_t sub_10057DEBC(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v8;
  unsigned __int8 v9;
  char v10;
  __int128 v11;

  v11 = off_100938FA8;
  v10 = 0;
  sub_100043758(&v10);
  v2 = sub_100169BDC((uint64_t)sub_10057DFF0, (uint64_t)sub_10057E058, (uint64_t)&off_100938FB8, (uint64_t)sub_10057E0AC, (uint64_t)&off_100938FC8, (uint64_t)&v11, 1, 13, 256000, 1);
  sub_10004339C(&v10);
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_1007053CC();
    v3 = 1;
  }
  else
  {
    v9 = 0;
    v8 = 0;
    v4 = sub_100038E50();
    sub_1004AA5E8(v4 + 248, a1 + 256);
    v5 = sub_100038E50();
    v6 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, char *, __int16 *))(*(_QWORD *)v5 + 24))(v5, &v9, (char *)&v8 + 1, &v8);
    sub_10057E100(v6, v9, HIBYTE(v8), v8);
    v3 = 0;
  }
  sub_100043728(&v10);
  return v3;
}

void sub_10057DFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_10057DFF0(unsigned int a1, int *a2, int a3)
{
  if (qword_10097B7A0 != -1)
    dispatch_once(&qword_10097B7A0, &stru_100938FD8);
  sub_10057E4F4(off_10097B798, a2, a1, a3);
}

void sub_10057E058(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_100169190(a1, 0);
  if ((_DWORD)v1)
  {
    v2 = v1;
    v3 = qword_100999998;
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_1007053F8(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void sub_10057E0AC(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_1001691D8(a1, 0);
  if ((_DWORD)v1)
  {
    v2 = v1;
    v3 = qword_100999998;
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_10070545C(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

_BYTE *sub_10057E100(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  int v7;
  char v8;

  if (a2)
  {
    if (a4)
    {
      v4 = a4 - a3;
      if (a4 < a3)
        v4 = 0;
      v5 = 255 * v4 / a4;
    }
    else
    {
      LOBYTE(v5) = -1;
    }
  }
  else
  {
    LOBYTE(v5) = 0;
  }
  v8 = 0;
  sub_100043758(&v8);
  v7 = 0;
  sub_10016A310(&v7);
  sub_100246750(v7, v5);
  return sub_100043728(&v8);
}

void sub_10057E178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10057E18C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = sub_100038E50();
  sub_1002B43D4(v2 + 248, a1 + 256);
  v5 = 0;
  sub_100043758(&v5);
  if (sub_100169110(8))
  {
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_1007054C0();
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  sub_100043728(&v5);
  return v3;
}

void sub_10057E218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10057E22C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v7;

  v2 = *(_QWORD *)(a1 + 264);
  if (v2)
  {
    sub_10034B960(v2);
    v7 = 0uLL;
    sub_100274874(a1 + 264, &v7);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  *(_DWORD *)(a1 + 280) = 0;
  return 0;
}

_BYTE *sub_10057E2B0(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  char v4;
  _BYTE *result;

  v4 = a2;
  result = sub_10057E100(a1, a2, a3, a4);
  if ((v4 & 1) == 0)
    operator new();
  return result;
}

_BYTE *sub_10057E324(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  return sub_10057E2B0(a1 - 256, a2, a3, a4);
}

uint64_t sub_10057E32C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  __int128 v6;
  void *v7[2];
  __int128 v8;
  void *v9[2];
  __int128 v10;
  void *__p[2];
  _OWORD v12[3];
  __int128 v13;
  uint64_t v14;

  v14 = 0;
  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  v10 = 0u;
  *(_OWORD *)__p = 0u;
  v8 = 0u;
  *(_OWORD *)v9 = 0u;
  v6 = 0u;
  *(_OWORD *)v7 = 0u;
  sub_1005BCCCC((uint64_t)&v6 + 1);
  BYTE2(v7[0]) = 0;
  BYTE4(v7[0]) = 0;
  BYTE2(v9[0]) = 0;
  BYTE4(v9[0]) = 0;
  DWORD1(v12[1]) = 0;
  v8 = 0uLL;
  v7[1] = 0;
  LOBYTE(v9[0]) = 0;
  v10 = 0uLL;
  v9[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v12, 0, 19);
  __p[1] = 0;
  BYTE8(v12[1]) = 1;
  BYTE2(v14) = 0;
  *(_QWORD *)((char *)&v12[1] + 14) = 0;
  *(_QWORD *)((char *)&v12[1] + 9) = 0;
  v13 = 0uLL;
  *((_QWORD *)&v12[2] + 1) = 0;
  LOBYTE(v14) = 0;
  LODWORD(a2) = sub_1004419F4(a2, (uint64_t)&v6);
  v4 = v13;
  if (SHIBYTE(v12[0]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[1]);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[1]);
  if (v4)
    a2 = a2;
  else
    a2 = 0;
  nullsub_90((char *)&v6 + 1, v2);
  return a2;
}

void sub_10057E460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026B73C((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_10057E47C()
{
  return 305;
}

BOOL sub_10057E484(_QWORD *a1, unint64_t a2)
{
  unsigned int v4;
  _BOOL8 v5;
  char v7;

  v7 = 0;
  sub_100043758(&v7);
  v4 = sub_1004821D4(a1, a2);
  v5 = sub_10016910C(v4) != 0;
  sub_100043728(&v7);
  return v5;
}

void sub_10057E4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_10057E4F4(_QWORD *a1, int *a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100938FF8);
  v18 = *a2;
  v19 = *((_WORD *)a2 + 2);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v18, 1);
  if (sub_100481EC8((uint64_t)a1, v8))
    sub_1004816DC(a1, v8);
  v9 = sub_100168E98(a3, a4, (uint64_t)sub_10057E634, (uint64_t (*)(uint64_t (*)(int *, unsigned int)))sub_10057E6F8, (uint64_t)sub_10057E748, (uint64_t)sub_10057E790, (uint64_t)sub_10057E800, (uint64_t)sub_10057E850, 0);
  if ((_DWORD)v9)
  {
    v10 = v9;
    v11 = qword_100999998;
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_1007054EC(v10, v11, v12, v13, v14, v15, v16, v17);
  }
}

void sub_10057E634(__int16 a1, int *a2, uint64_t a3)
{
  unint64_t v6;
  int v7;
  __int16 v8;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100938FF8);
  v7 = *a2;
  v8 = *((_WORD *)a2 + 2);
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v7, 1);
  if (qword_10097B7A0 != -1)
    dispatch_once(&qword_10097B7A0, &stru_100938FD8);
  sub_10057E8A8((uint64_t)off_10097B798, v6, a1, a3);
}

uint64_t sub_10057E6F8(uint64_t a1)
{
  if (qword_10097B7A0 != -1)
    dispatch_once(&qword_10097B7A0, &stru_100938FD8);
  return sub_10057EB40((uint64_t)off_10097B798, a1);
}

uint64_t sub_10057E748()
{
  if (qword_10097B7A0 != -1)
    dispatch_once(&qword_10097B7A0, &stru_100938FD8);
  sub_10057ECA4((uint64_t)off_10097B798);
  return 0;
}

uint64_t sub_10057E790(const void *a1, unsigned int a2)
{
  uint64_t v4;

  if (qword_10097B7A0 != -1)
    dispatch_once(&qword_10097B7A0, &stru_100938FD8);
  v4 = *((_QWORD *)off_10097B798 + 33);
  if (v4)
    return sub_10034BCCC(v4, a1, a2);
  else
    return 3402;
}

pthread_cond_t *sub_10057E800()
{
  pthread_cond_t *result;

  if (qword_10097B7A0 != -1)
    dispatch_once(&qword_10097B7A0, &stru_100938FD8);
  result = (pthread_cond_t *)*((_QWORD *)off_10097B798 + 33);
  if (result)
    return (pthread_cond_t *)sub_10034BC5C(result);
  return result;
}

void sub_10057E850(int a1)
{
  if (qword_10097B7A0 != -1)
    dispatch_once(&qword_10097B7A0, &stru_100938FD8);
  sub_10057EA28(off_10097B798, a1);
}

void sub_10057E8A8(uint64_t a1, unint64_t a2, __int16 a3, uint64_t a4)
{
  int v7;
  NSObject *v9;
  uint8_t v10[16];

  if ((_DWORD)a4)
  {
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_10070557C();
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100939018);
    v7 = sub_1004A35C0((uint64_t)off_100977A50, a4, 20000);
    sub_10048183C(a1, a2, v7);
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 264) + 24976) && sub_10057E32C(a1, a2))
  {
    v9 = qword_100999998;
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Activating Parrot hack", v10, 2u);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 264) + 24976) = 1;
  }
  sub_1004820E0(a1, a2, a3);
  sub_10048183C(a1, a2, 0);
}

void sub_10057EA28(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  char v8;
  NSObject *v9;
  __int16 v10;
  void *__p;
  uint64_t *v12;
  uint64_t v13;

  v3 = sub_1004822D0(a1, a2);
  sub_10048257C((uint64_t)a1, v3, 0);
  v4 = a1[33];
  if (v4 && *(_BYTE *)(v4 + 24976))
  {
    __p = 0;
    v12 = 0;
    v13 = 0;
    v5 = sub_100481E1C((uint64_t)a1, &__p);
    v6 = (uint64_t *)__p;
    v7 = v12;
    if (__p == v12)
      goto LABEL_7;
    v8 = 0;
    do
    {
      v5 = sub_10057E32C(v5, *v6);
      v8 |= v5;
      ++v6;
    }
    while (v6 != v7);
    if ((v8 & 1) == 0)
    {
LABEL_7:
      v9 = qword_100999998;
      if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_DEFAULT))
      {
        v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Deactivating Parrot hack", (uint8_t *)&v10, 2u);
      }
      *(_BYTE *)(a1[33] + 24976) = 0;
    }
    if (__p)
    {
      v12 = (uint64_t *)__p;
      operator delete(__p);
    }
  }
}

void sub_10057EB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10057EB40(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v17;
  unsigned int v18;
  __int128 v19;

  v3 = *(_DWORD *)(a1 + 280);
  v4 = *(_QWORD *)(a1 + 264);
  if (v3)
  {
    v5 = sub_10034BB10(v4);
    if (!(_DWORD)v5)
    {
LABEL_19:
      v5 = 0;
      ++*(_DWORD *)(a1 + 280);
    }
  }
  else
  {
    v7 = (uint64_t *)(a1 + 264);
    if (v4)
    {
      v8 = qword_100999998;
      if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_FAULT))
        sub_1007055A8(v8);
    }
    v17 = 2;
    v18 = 1;
    sub_1004CC4EC(&v18, &v17, (_QWORD *)(a1 + 8), &v19);
    sub_100274874(a1 + 264, &v19);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (!*v7)
      return 3401;
    v12 = sub_10034B418(*v7, a2);
    if (!(_DWORD)v12)
      goto LABEL_19;
    v5 = v12;
    v19 = 0uLL;
    sub_100274874(a1 + 264, &v19);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  return v5;
}

uint64_t sub_10057ECA4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  v2 = *(_DWORD *)(a1 + 280);
  v3 = *(_QWORD *)(a1 + 264);
  *(_DWORD *)(a1 + 280) = --v2;
  if (v2)
  {
    sub_10034BBB0(v3);
  }
  else
  {
    v5 = a1 + 264;
    sub_10034B960(v3);
    v9 = 0uLL;
    sub_100274874(v5, &v9);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  return 0;
}

uint64_t sub_10057ED38()
{
  return 3;
}

uint64_t sub_10057ED40()
{
  return 0;
}

void sub_10057ED48(id a1)
{
  operator new();
}

void sub_10057EDA8()
{
  operator delete();
}

void sub_10057EDCC(id a1)
{
  operator new();
}

void sub_10057EE0C()
{
  operator delete();
}

void sub_10057EE30(id a1)
{
  operator new();
}

void sub_10057EE70()
{
  operator delete();
}

_QWORD *sub_10057EE94(uint64_t a1, uint64_t a2, __int16 a3)
{
  _QWORD *result;

  result = (_QWORD *)sub_1004AC92C(a1, a2, a3);
  *result = &off_100939048;
  return result;
}

void sub_10057EEB4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v7;
  char v8;
  uint8_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __IOHIDUserDevice *v17;
  uint64_t v18;
  __IOHIDUserDevice *v19;
  const uint8_t *v20;
  CFIndex v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  int v30;
  NSObject *v31;
  __IOHIDUserDevice *v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t v42;
  uint64_t v43;
  uint8_t buf[8];
  __int16 v45;
  int v46;

  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_100705628();
    return;
  }
  v5 = *a2;
  if (!*(_QWORD *)(a1 + 216))
  {
    v10 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006D4E94(v5, v10, v11, v12, v13, v14, v15, v16);
    return;
  }
  v7 = (_QWORD *)(a1 + 192);
  if (*a2 > 0xBFu)
  {
    if (*a2 > 0xFBu)
    {
      if ((v5 - 252) <= 2)
      {
        sub_1004ACF80((id *)a1, a2, a3);
        return;
      }
      goto LABEL_40;
    }
    if ((_DWORD)v5 == 192)
    {
      v9 = -14;
LABEL_19:
      buf[0] = v9;
      if (sub_100262E78(v7, buf))
      {
        v42 = v9;
        *(_QWORD *)buf = &v42;
        v17 = (__IOHIDUserDevice *)sub_100262F2C((uint64_t)v7, &v42, (uint64_t)&unk_100740F58, (_BYTE **)buf)[3];
        if (v17)
        {
          v18 = mach_absolute_time();
          v19 = v17;
          v20 = a2;
          v21 = a3;
LABEL_22:
          IOHIDUserDeviceHandleReportWithTimeStamp(v19, v18, v20, v21);
          return;
        }
      }
      v22 = qword_1009999B0;
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
        sub_1007056B8(v5, v22, v23, v24, v25, v26, v27, v28);
      return;
    }
    if ((_DWORD)v5 != 198 && (_DWORD)v5 != 224)
      goto LABEL_40;
LABEL_18:
    v9 = -16;
    goto LABEL_19;
  }
  v8 = v5 - 96;
  if ((v5 - 96) <= 0x3B)
  {
    if (((1 << v8) & 0x380001) != 0)
    {
LABEL_9:
      v9 = -15;
      goto LABEL_19;
    }
    if (((1 << v8) & 0xC01000000000000) != 0)
      goto LABEL_18;
  }
  if (v5 > 0x31)
    goto LABEL_40;
  if (((1 << v5) & 0x3000000040004) != 0)
    goto LABEL_9;
  if (*a2 == 19)
  {
    v34 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 19;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Received power-off notice input report (ID %u)", buf, 8u);
    }
    return;
  }
  if (*a2 != 20)
  {
LABEL_40:
    v35 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_100705654(v5, v35, v36, v37, v38, v39, v40, v41);
    return;
  }
  v29 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    v30 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 40));
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 20;
    v45 = 1024;
    v46 = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Received exit suspend input report (ID %u), should undim %d", buf, 0xEu);
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 40)))
  {
    v31 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Waking screen with spoofed click", buf, 2u);
    }
    buf[0] = -15;
    if (sub_100262E78((_QWORD *)(a1 + 192), buf))
    {
      v42 = -15;
      *(_QWORD *)buf = &v42;
      v32 = (__IOHIDUserDevice *)sub_100262F2C(a1 + 192, &v42, (uint64_t)&unk_100740F58, (_BYTE **)buf)[3];
      *(_QWORD *)buf = 274;
      v33 = mach_absolute_time();
      IOHIDUserDeviceHandleReportWithTimeStamp(v32, v33, buf, 8);
      v43 = 18;
      v18 = mach_absolute_time();
      v20 = (const uint8_t *)&v43;
      v19 = v32;
      v21 = 8;
      goto LABEL_22;
    }
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_10070571C();
  }
}

uint64_t sub_10057F2F4(uint64_t a1, void *a2)
{
  sub_1004ACDF8(a1, a2);
  sub_10057F340(a1, a2);
  sub_10057F4A4(a1, a2);
  sub_10057F5A8(a1, a2);
  return 1;
}

uint64_t sub_10057F340(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[24];

  v10 = xmmword_10074270C;
  v11 = unk_10074271C;
  *(_OWORD *)v12 = xmmword_10074272C;
  v8 = xmmword_1007426EC;
  v9 = unk_1007426FC;
  *(_DWORD *)&v12[15] = -1073577627;
  *(_QWORD *)(a1 + 304) = a1;
  *(_BYTE *)(a1 + 312) = -16;
  v3 = objc_msgSend(a2, "mutableCopy", v8, v9, v10, v11, *(_OWORD *)v12, *(_QWORD *)&v12[16]);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("Mouse"), CFSTR("Accessory Category"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", &off_1009612C0, CFSTR("ExtendedData"));
  v4 = sub_1004ACC64(a1, v3, (uint64_t)&v8, 83, *(unsigned __int8 *)(a1 + 312), 0);
  v5 = v4;
  if (v4)
  {
    v6 = a1 + 304;
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback(v4, sub_10057F694, v6);
    IOHIDUserDeviceRegisterSetReportCallback(v5, sub_10057F6AC, v6);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
  {
    sub_100705748();
  }

  return v5;
}

void sub_10057F488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10057F4A4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[6];
  _OWORD v8[2];

  v7[4] = xmmword_10074277F;
  v7[5] = unk_10074278F;
  v8[0] = xmmword_10074279F;
  *(_OWORD *)((char *)v8 + 10) = *(__int128 *)((char *)&xmmword_10074279F + 10);
  v7[0] = xmmword_10074273F;
  v7[1] = unk_10074274F;
  v7[2] = xmmword_10074275F;
  v7[3] = unk_10074276F;
  *(_QWORD *)(a1 + 320) = a1;
  *(_BYTE *)(a1 + 328) = -15;
  v3 = sub_1004ACC64(a1, a2, (uint64_t)v7, 122, 241, 1);
  v4 = v3;
  if (v3)
  {
    v5 = a1 + 320;
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback(v3, sub_10057F694, v5);
    IOHIDUserDeviceRegisterSetReportCallback(v4, sub_10057F6AC, v5);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
  {
    sub_100705774();
  }
  return v4;
}

uint64_t sub_10057F5A8(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[2];

  v7[0] = xmmword_1007427B9;
  *(_OWORD *)((char *)v7 + 11) = *(__int128 *)((char *)&xmmword_1007427B9 + 11);
  *(_QWORD *)(a1 + 336) = a1;
  *(_BYTE *)(a1 + 344) = -14;
  v3 = sub_1004ACC64(a1, a2, (uint64_t)v7, 27, 242, 2);
  v4 = v3;
  if (v3)
  {
    v5 = a1 + 336;
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback(v3, sub_10057F694, v5);
    IOHIDUserDeviceRegisterSetReportCallback(v4, sub_10057F6AC, v5);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
  {
    sub_1007057A0();
  }
  return v4;
}

uint64_t sub_10057F694(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)a1 + 112))(*(_QWORD *)a1, a2, a3, a4, a5, a1[8]);
}

uint64_t sub_10057F6AC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  uint8_t v12[16];

  if ((_DWORD)a3 == 178 && a1[8] == 240)
  {
    v10 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "FW update detected; invalidating SDP cache",
        v12,
        2u);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 24))(*(_QWORD *)(*(_QWORD *)a1 + 8));
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)a1 + 120))(*(_QWORD *)a1, a2, a3, a4, a5, a1[8]);
}

void sub_10057F784(uint64_t a1)
{
  sub_1004AC9E0(a1);
  operator delete();
}

id sub_10057F7A8(uint64_t a1)
{
  id v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 8);
  v2 = *(id *)(a1 + 72);
  sub_100034234((uint64_t)v4);
  return v2;
}

double sub_10057F7F4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1009390D8;
  *(_DWORD *)(a1 + 8) = -1;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  return result;
}

uint64_t sub_10057F848(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;

  *(_QWORD *)a1 = off_1009390D8;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v4 = (std::string *)(a1 + 64);
  *(_OWORD *)(a1 + 112) = 0u;
  v5 = (std::string *)(a1 + 112);
  *(_OWORD *)(a1 + 160) = 0u;
  v6 = (std::string *)(a1 + 160);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v17 = (std::string *)(a1 + 88);
  v18 = (std::string *)(a1 + 40);
  v15 = (std::string *)(a1 + 184);
  v16 = (std::string *)(a1 + 136);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v13 = a1 + 256;
  v14 = a1 + 232;
  v7 = (std::string *)(a1 + 304);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v8 = (std::string *)(a1 + 328);
  v9 = (std::string *)(a1 + 352);
  v12 = a1 + 280;
  v10 = (std::string *)(a1 + 400);
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  std::string::operator=(v18, (const std::string *)(a2 + 40));
  std::string::operator=(v4, (const std::string *)(a2 + 64));
  std::string::operator=(v17, (const std::string *)(a2 + 88));
  std::string::operator=(v5, (const std::string *)(a2 + 112));
  std::string::operator=(v16, (const std::string *)(a2 + 136));
  std::string::operator=(v6, (const std::string *)(a2 + 160));
  std::string::operator=(v15, (const std::string *)(a2 + 184));
  if (a1 != a2)
  {
    sub_1005682E4(v14, *(std::string **)(a2 + 232), *(std::string **)(a2 + 240), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 240) - *(_QWORD *)(a2 + 232)) >> 3));
    sub_100568680(v13, *(std::string **)(a2 + 256), *(std::string **)(a2 + 264), (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 7);
    sub_100568978(v12, *(std::string **)(a2 + 280), *(__int128 **)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 3));
  }
  std::string::operator=(v7, (const std::string *)(a2 + 304));
  std::string::operator=(v8, (const std::string *)(a2 + 328));
  std::string::operator=(v9, (const std::string *)(a2 + 352));
  std::string::operator=(v10, (const std::string *)(a2 + 400));
  return a1;
}

void sub_10057FA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  void **v25;
  void **v26;

  if (*(char *)(v18 + 423) < 0)
    operator delete(*v26);
  a18 = a10;
  sub_100091BF8(&a18);
  if (*(char *)(v18 + 375) < 0)
    operator delete(*v25);
  if (*(char *)(v18 + 351) < 0)
    operator delete(*v21);
  if (*(char *)(v18 + 327) < 0)
    operator delete(*v23);
  a18 = a11;
  sub_100091BF8(&a18);
  a18 = a12;
  sub_100582500(&a18);
  a18 = a13;
  sub_10058247C(&a18);
  if (*(char *)(v18 + 231) < 0)
    operator delete(*(void **)(v18 + 208));
  if (*(char *)(v18 + 207) < 0)
    operator delete(*a14);
  if (*(char *)(v18 + 183) < 0)
    operator delete(*v24);
  if (*(char *)(v18 + 159) < 0)
    operator delete(*a15);
  if (*(char *)(v18 + 135) < 0)
    operator delete(*v22);
  if (*(char *)(v18 + 111) < 0)
    operator delete(*a16);
  if (*(char *)(v18 + 87) < 0)
    operator delete(*v20);
  if (*(char *)(v18 + 63) < 0)
    operator delete(*a17);
  if (*(char *)(v18 + 39) < 0)
    operator delete(*v19);
  _Unwind_Resume(a1);
}

uint64_t sub_10057FB60(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = off_1009390D8;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  sub_1005671C4(a1, a2);
  return a1;
}

void sub_10057FC00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 423) < 0)
    operator delete(*(void **)(v2 + 400));
  sub_100091BF8((void ***)va);
  if (*(char *)(v2 + 375) < 0)
    operator delete(*(void **)(v2 + 352));
  if (*(char *)(v2 + 351) < 0)
    operator delete(*(void **)(v2 + 328));
  if (*(char *)(v2 + 327) < 0)
    operator delete(*(void **)(v2 + 304));
  sub_100091BF8((void ***)va);
  sub_100582500((void ***)va);
  sub_10058247C((void ***)va);
  if (*(char *)(v2 + 231) < 0)
    operator delete(*(void **)(v2 + 208));
  if (*(char *)(v2 + 207) < 0)
    operator delete(*(void **)(v2 + 184));
  if (*(char *)(v2 + 183) < 0)
    operator delete(*(void **)(v2 + 160));
  if (*(char *)(v2 + 159) < 0)
    operator delete(*(void **)(v2 + 136));
  if (*(char *)(v2 + 135) < 0)
    operator delete(*(void **)(v2 + 112));
  if (*(char *)(v2 + 111) < 0)
    operator delete(*(void **)(v2 + 88));
  if (*(char *)(v2 + 87) < 0)
    operator delete(*(void **)(v2 + 64));
  if (*(char *)(v2 + 63) < 0)
    operator delete(*(void **)(v2 + 40));
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

uint64_t sub_10057FD10(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1009390D8;
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  v3 = (void **)(a1 + 376);
  sub_100091BF8(&v3);
  if (*(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(char *)(a1 + 351) < 0)
    operator delete(*(void **)(a1 + 328));
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  v3 = (void **)(a1 + 280);
  sub_100091BF8(&v3);
  v3 = (void **)(a1 + 256);
  sub_100582500(&v3);
  v3 = (void **)(a1 + 232);
  sub_10058247C(&v3);
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_10057FE58(uint64_t a1)
{
  sub_10057FD10(a1);
  operator delete();
}

std::string *sub_10057FE7C@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  std::string *result;
  uint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if ((a1 - 1) < 6)
    result = std::string::append((std::string *)a2, off_100939118[a1 - 1]);
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    return std::string::insert((std::string *)a2, 0, ";TYPE=");
  return result;
}

void sub_10057FEEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_10057FF08(std::string *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  std::string::size_type i;
  std::string::size_type v7;
  std::string::size_type size;
  std::string::size_type v9;
  int v10;
  void *v11;
  std::string *v12;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  std::string v21;

  memset(&v21, 0, sizeof(v21));
  sub_100091AE8(&v21, ";\n\\");
  if (a2 == 1)
    std::string::append(&v21, ",");
  for (i = 0; ; i = v18 + 2)
  {
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
    {
      v7 = a1->__r_.__value_.__r.__words[0];
      size = a1->__r_.__value_.__l.__size_;
    }
    else
    {
      v7 = (std::string::size_type)a1;
      size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    v9 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    v10 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
    v11 = (void *)v21.__r_.__value_.__r.__words[0];
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v21;
    else
      v12 = (std::string *)v21.__r_.__value_.__r.__words[0];
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = v21.__r_.__value_.__l.__size_;
    if (size <= i || v9 == 0)
      break;
    v14 = (unsigned __int8 *)(v7 + i);
    v15 = (unsigned __int8 *)(v7 + size);
LABEL_17:
    v16 = v9;
    v17 = v12;
    while (*v14 != v17->__r_.__value_.__s.__data_[0])
    {
      v17 = (std::string *)((char *)v17 + 1);
      if (!--v16)
      {
        if (++v14 != v15)
          goto LABEL_17;
        goto LABEL_31;
      }
    }
    if (v14 == v15)
      break;
    v18 = (std::string::size_type)&v14[-v7];
    if (&v14[-v7] == (unsigned __int8 *)-1)
      break;
    v19 = a1;
    if ((*((_BYTE *)&a1->__r_.__value_.__s + 23) & 0x80) != 0)
      v19 = (std::string *)a1->__r_.__value_.__r.__words[0];
    if (v19->__r_.__value_.__s.__data_[v18] == 10)
    {
      v20 = a1;
      if ((*((_BYTE *)&a1->__r_.__value_.__s + 23) & 0x80) != 0)
        v20 = (std::string *)a1->__r_.__value_.__r.__words[0];
      v20->__r_.__value_.__s.__data_[v18] = 110;
    }
    std::string::insert(a1, v18, 1uLL, 92);
  }
LABEL_31:
  *(_OWORD *)a3 = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&a1->__r_.__value_.__l + 2);
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  if (v10 < 0)
    operator delete(v11);
}

void sub_100580074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_100580094@<Q0>(std::string *this@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string *v8;
  std::string::size_type size;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned int v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  unsigned __int8 *v17;
  std::string *v18;
  uint64_t i;
  __n128 result;

  v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  while (1)
  {
    v8 = this;
    size = v6;
    if ((v6 & 0x80) != 0)
    {
      v8 = (std::string *)this->__r_.__value_.__r.__words[0];
      size = this->__r_.__value_.__l.__size_;
    }
    if (v7 == (std::string *)((char *)v8 + size))
      break;
    v10 = v7->__r_.__value_.__s.__data_[0];
    if (v7->__r_.__value_.__s.__data_[0] < 0)
    {
      if (!__maskrune(v10, 0x100uLL))
        goto LABEL_13;
    }
    else if ((_DefaultRuneLocale.__runetype[v10] & 0x100) == 0)
    {
      goto LABEL_13;
    }
    v11 = __tolower(v7->__r_.__value_.__s.__data_[0]);
    v12 = 0;
    do
      v13 = byte_1007427D8[v12++];
    while (v13 < v11);
    v7->__r_.__value_.__s.__data_[0] = v12 + 49;
LABEL_13:
    v7 = (std::string *)((char *)v7 + 1);
    v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  v14 = this;
  if ((a2 & 1) != 0)
  {
    v15 = v6;
    if ((char)v6 < 0)
    {
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
      v15 = this->__r_.__value_.__l.__size_;
    }
    if (v15)
    {
      do
      {
        if (v14->__r_.__value_.__s.__data_[0] == 44)
          v14->__r_.__value_.__s.__data_[0] = 112;
        v14 = (std::string *)((char *)v14 + 1);
        --v15;
      }
      while (v15);
      v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    v16 = this;
    if ((v6 & 0x80) != 0)
    {
      v16 = (std::string *)this->__r_.__value_.__r.__words[0];
      v6 = this->__r_.__value_.__l.__size_;
    }
    for (; v6; --v6)
    {
      if (v16->__r_.__value_.__s.__data_[0] == 59)
        v16->__r_.__value_.__s.__data_[0] = 119;
      v16 = (std::string *)((char *)v16 + 1);
    }
  }
  else
  {
    if ((char)v6 < 0)
    {
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
      v6 = this->__r_.__value_.__l.__size_;
    }
    if (v6)
    {
      v17 = (unsigned __int8 *)v14 + v6;
      v18 = v14;
      while (2)
      {
        for (i = 0; i != 2; ++i)
        {
          if (v18->__r_.__value_.__s.__data_[0] == asc_10082DB17[i])
          {
            if (v18 != (std::string *)v17 && (char *)v18 - (char *)v14 != -1)
              std::string::erase(this, (char *)v18 - (char *)v14, 0xFFFFFFFFFFFFFFFFLL);
            goto LABEL_41;
          }
        }
        v18 = (std::string *)((char *)v18 + 1);
        if (v18 != (std::string *)v17)
          continue;
        break;
      }
    }
  }
LABEL_41:
  result = *(__n128 *)&this->__r_.__value_.__l.__data_;
  *(_OWORD *)a3 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&this->__r_.__value_.__l + 2);
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  return result;
}

void sub_10058025C(uint64_t a1, _QWORD *a2, int a3, int a4, char a5)
{
  _QWORD *v8;
  size_t v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  char *v13;
  std::string *v14;
  std::string::size_type size;
  _QWORD *v16;
  std::string *v17;
  std::string::size_type v18;
  size_t v19;
  _QWORD *v20;
  char *v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  _QWORD *v28;
  std::string *v29;
  std::string::size_type v30;
  _QWORD *v31;
  std::string *v32;
  std::string::size_type v33;
  _QWORD *v34;
  std::string *v35;
  std::string::size_type v36;
  _QWORD *v37;
  std::string *v38;
  std::string::size_type v39;
  size_t v40;
  _QWORD *v41;
  std::string *v42;
  std::string::size_type v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string *v46;
  std::string::size_type v47;
  _QWORD *v48;
  size_t v49;
  _QWORD *v50;
  std::string *v51;
  std::string::size_type v52;
  _QWORD *v53;
  _QWORD *v54;
  std::string *v55;
  std::string::size_type v56;
  _QWORD *v57;
  size_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  std::string *v62;
  std::string::size_type v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  __int128 v67;
  std::string *v68;
  std::string::size_type v69;
  _QWORD *v70;
  size_t v71;
  _QWORD *v72;
  size_t v73;
  char *v74;
  _QWORD *v75;
  char *v76;
  std::string *v77;
  std::string::size_type v78;
  _QWORD *v79;
  _QWORD *v80;
  std::string *v81;
  std::string::size_type v82;
  _QWORD *v83;
  std::string::size_type v84;
  std::string::size_type v85;
  std::string *v86;
  std::string::size_type v87;
  _QWORD *v88;
  size_t v89;
  std::string::size_type v90;
  uint64_t v91;
  unint64_t v92;
  const char *v93;
  _QWORD *v94;
  std::string *v95;
  std::string::size_type v96;
  _QWORD *v97;
  std::string *v98;
  std::string::size_type v99;
  _QWORD *v100;
  std::string::size_type v101;
  std::string::size_type v102;
  std::string::size_type v103;
  void *v104;
  char v105;
  _QWORD *v106;
  std::string *v107;
  std::string::size_type v108;
  _QWORD *v109;
  _QWORD *v110;
  void **v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  void **v116;
  __int128 v117;
  void **v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  void **v123;
  __int128 v124;
  void **v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  void **v130;
  __int128 v131;
  void **v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  void **v137;
  __int128 v138;
  void **v139;
  uint64_t v140;
  _QWORD *v141;
  size_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  _QWORD *v146;
  std::string *v147;
  std::string::size_type v148;
  _QWORD *v149;
  _QWORD *v150;
  __int128 *v151;
  __int128 v152;
  std::string *v153;
  std::string::size_type v154;
  _QWORD *v155;
  size_t v156;
  _QWORD *v157;
  char *v158;
  std::string *v159;
  std::string::size_type v160;
  _QWORD *v161;
  _QWORD *v162;
  std::string *v163;
  std::string::size_type v164;
  _QWORD *v165;
  size_t v166;
  _QWORD *v167;
  char *v168;
  std::string *v169;
  std::string::size_type v170;
  _QWORD *v171;
  _QWORD *v172;
  std::string *v173;
  std::string::size_type v174;
  _QWORD *v175;
  std::string *v176;
  std::string::size_type v177;
  size_t v178;
  uint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  __int128 *v182;
  __int128 v183;
  std::string *v184;
  std::string::size_type v185;
  _QWORD *v186;
  size_t v187;
  _QWORD *v188;
  _QWORD *v189;
  size_t v190;
  _QWORD *v191;
  char *v192;
  std::string *v193;
  std::string::size_type v194;
  _QWORD *v195;
  _QWORD *v196;
  std::string *v197;
  std::string::size_type v198;
  _QWORD *v199;
  size_t v200;
  int v201;
  char *__sa;
  int v204;
  std::string v206;
  std::string v207;
  std::string v208;
  std::string v209;
  std::string v210;
  std::string v211;
  std::string v212;
  void *v213[2];
  unsigned __int8 v214;
  std::string v215;
  void *v216[2];
  unsigned __int8 v217;
  std::string v218;
  void *v219[2];
  unsigned __int8 v220;
  std::string v221;
  void *v222[2];
  unsigned __int8 v223;
  std::string v224;
  void *v225[2];
  unsigned __int8 v226;
  std::string v227;
  _DWORD v228[2];
  std::string v229;
  std::string v230;
  std::string v231;
  std::string v232;
  std::string v233;
  std::string __p;
  std::string v235;
  std::string v236;
  std::string v237;
  std::string __dst;
  std::string v239;

  v8 = sub_1002614D8(a2, (uint64_t)"BEGIN:VCARD", 11);
  v9 = strlen(off_10097B7A8);
  sub_1002614D8(v8, (uint64_t)off_10097B7A8, v9);
  if ((a4 & 1) != 0)
  {
    sub_1002614D8(a2, (uint64_t)"VERSION:", 8);
    if (a3)
    {
      if (a3 != 1)
      {
LABEL_7:
        v11 = strlen(off_10097B7A8);
        sub_1002614D8(a2, (uint64_t)off_10097B7A8, v11);
        goto LABEL_8;
      }
      v10 = "3.0";
    }
    else
    {
      v10 = "2.1";
    }
    sub_1002614D8(a2, (uint64_t)v10, 3);
    goto LABEL_7;
  }
LABEL_8:
  if ((a4 & 2) != 0)
  {
    v12 = sub_1002614D8(a2, (uint64_t)"FN", 2);
    if (a3)
      v13 = "";
    else
      v13 = ";CHARSET=UTF-8";
    sub_100091AE8(&v239, v13);
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v239;
    else
      v14 = (std::string *)v239.__r_.__value_.__r.__words[0];
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v239.__r_.__value_.__r.__words[2]);
    else
      size = v239.__r_.__value_.__l.__size_;
    v16 = sub_1002614D8(v12, (uint64_t)v14, size);
    sub_1002614D8(v16, (uint64_t)":", 1);
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v239.__r_.__value_.__l.__data_);
    if (*(char *)(a1 + 39) < 0)
      sub_10003430C(&__dst, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
    else
      __dst = *(std::string *)(a1 + 16);
    sub_10057FF08(&__dst, a3, (uint64_t)&v239);
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v239;
    else
      v17 = (std::string *)v239.__r_.__value_.__r.__words[0];
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
    else
      v18 = v239.__r_.__value_.__l.__size_;
    sub_1002614D8(a2, (uint64_t)v17, v18);
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v239.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v19 = strlen(off_10097B7A8);
    sub_1002614D8(a2, (uint64_t)off_10097B7A8, v19);
  }
  if ((a4 & 4) == 0)
    goto LABEL_201;
  v20 = sub_1002614D8(a2, (uint64_t)"N", 1);
  if (a3)
    v21 = "";
  else
    v21 = ";CHARSET=UTF-8";
  sub_100091AE8(&v239, v21);
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v239;
  else
    v22 = (std::string *)v239.__r_.__value_.__r.__words[0];
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
  else
    v23 = v239.__r_.__value_.__l.__size_;
  v24 = sub_1002614D8(v20, (uint64_t)v22, v23);
  sub_1002614D8(v24, (uint64_t)":", 1);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 63) < 0)
    sub_10003430C(&v237, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    v237 = *(std::string *)(a1 + 40);
  sub_10057FF08(&v237, a3, (uint64_t)&v239);
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v239;
  else
    v25 = (std::string *)v239.__r_.__value_.__r.__words[0];
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
  else
    v26 = v239.__r_.__value_.__l.__size_;
  sub_1002614D8(a2, (uint64_t)v25, v26);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 87) < 0)
  {
    if (*(_QWORD *)(a1 + 72))
      goto LABEL_75;
  }
  else if (*(_BYTE *)(a1 + 87))
  {
    goto LABEL_75;
  }
  if (*(char *)(a1 + 111) < 0)
  {
    if (*(_QWORD *)(a1 + 96))
      goto LABEL_75;
  }
  else if (*(_BYTE *)(a1 + 111))
  {
    goto LABEL_75;
  }
  if (*(char *)(a1 + 135) < 0)
  {
    if (*(_QWORD *)(a1 + 120))
      goto LABEL_75;
  }
  else if (*(_BYTE *)(a1 + 135))
  {
    goto LABEL_75;
  }
  if (*(char *)(a1 + 159) < 0)
    v27 = *(_QWORD *)(a1 + 144);
  else
    v27 = *(unsigned __int8 *)(a1 + 159);
  if (!v27)
    goto LABEL_151;
LABEL_75:
  v28 = sub_1002614D8(a2, (uint64_t)";", 1);
  if (*(char *)(a1 + 87) < 0)
    sub_10003430C(&v236, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
  else
    v236 = *(std::string *)(a1 + 64);
  sub_10057FF08(&v236, a3, (uint64_t)&v239);
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v239;
  else
    v29 = (std::string *)v239.__r_.__value_.__r.__words[0];
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
  else
    v30 = v239.__r_.__value_.__l.__size_;
  sub_1002614D8(v28, (uint64_t)v29, v30);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v236.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 111) < 0)
  {
    if (*(_QWORD *)(a1 + 96))
      goto LABEL_100;
  }
  else if (*(_BYTE *)(a1 + 111))
  {
    goto LABEL_100;
  }
  if (*(char *)(a1 + 135) < 0)
  {
    if (*(_QWORD *)(a1 + 120))
      goto LABEL_100;
  }
  else if (*(_BYTE *)(a1 + 135))
  {
    goto LABEL_100;
  }
  if (*(char *)(a1 + 159) < 0)
  {
    if (!*(_QWORD *)(a1 + 144))
      goto LABEL_151;
  }
  else if (!*(_BYTE *)(a1 + 159))
  {
    goto LABEL_151;
  }
LABEL_100:
  v31 = sub_1002614D8(a2, (uint64_t)";", 1);
  if (*(char *)(a1 + 111) < 0)
    sub_10003430C(&v235, *(void **)(a1 + 88), *(_QWORD *)(a1 + 96));
  else
    v235 = *(std::string *)(a1 + 88);
  sub_10057FF08(&v235, a3, (uint64_t)&v239);
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = &v239;
  else
    v32 = (std::string *)v239.__r_.__value_.__r.__words[0];
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
  else
    v33 = v239.__r_.__value_.__l.__size_;
  sub_1002614D8(v31, (uint64_t)v32, v33);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 135) < 0)
  {
    if (!*(_QWORD *)(a1 + 120))
      goto LABEL_117;
  }
  else if (!*(_BYTE *)(a1 + 135))
  {
LABEL_117:
    if (*(char *)(a1 + 159) < 0)
    {
      if (!*(_QWORD *)(a1 + 144))
        goto LABEL_151;
    }
    else if (!*(_BYTE *)(a1 + 159))
    {
      goto LABEL_151;
    }
  }
  v34 = sub_1002614D8(a2, (uint64_t)";", 1);
  if (*(char *)(a1 + 135) < 0)
    sub_10003430C(&__p, *(void **)(a1 + 112), *(_QWORD *)(a1 + 120));
  else
    __p = *(std::string *)(a1 + 112);
  sub_10057FF08(&__p, a3, (uint64_t)&v239);
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v239;
  else
    v35 = (std::string *)v239.__r_.__value_.__r.__words[0];
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
  else
    v36 = v239.__r_.__value_.__l.__size_;
  sub_1002614D8(v34, (uint64_t)v35, v36);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 159) < 0)
  {
    if (!*(_QWORD *)(a1 + 144))
      goto LABEL_151;
  }
  else if (!*(_BYTE *)(a1 + 159))
  {
    goto LABEL_151;
  }
  v37 = sub_1002614D8(a2, (uint64_t)";", 1);
  if (*(char *)(a1 + 159) < 0)
    sub_10003430C(&v233, *(void **)(a1 + 136), *(_QWORD *)(a1 + 144));
  else
    v233 = *(std::string *)(a1 + 136);
  sub_10057FF08(&v233, a3, (uint64_t)&v239);
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &v239;
  else
    v38 = (std::string *)v239.__r_.__value_.__r.__words[0];
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
  else
    v39 = v239.__r_.__value_.__l.__size_;
  sub_1002614D8(v37, (uint64_t)v38, v39);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v233.__r_.__value_.__l.__data_);
LABEL_151:
  v40 = strlen(off_10097B7A8);
  sub_1002614D8(a2, (uint64_t)off_10097B7A8, v40);
  if (*(char *)(a1 + 183) < 0)
  {
    if (!*(_QWORD *)(a1 + 168))
      goto LABEL_176;
  }
  else if (!*(_BYTE *)(a1 + 183))
  {
    goto LABEL_176;
  }
  v41 = sub_1002614D8(a2, (uint64_t)"X-PHONETIC-LAST-NAME", 20);
  sub_100091AE8(&v239, v21);
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = &v239;
  else
    v42 = (std::string *)v239.__r_.__value_.__r.__words[0];
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
  else
    v43 = v239.__r_.__value_.__l.__size_;
  v44 = sub_1002614D8(v41, (uint64_t)v42, v43);
  v45 = sub_1002614D8(v44, (uint64_t)":", 1);
  if (*(char *)(a1 + 183) < 0)
    sub_10003430C(&v231, *(void **)(a1 + 160), *(_QWORD *)(a1 + 168));
  else
    v231 = *(std::string *)(a1 + 160);
  sub_10057FF08(&v231, a3, (uint64_t)&v232);
  if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = &v232;
  else
    v46 = (std::string *)v232.__r_.__value_.__r.__words[0];
  if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
  else
    v47 = v232.__r_.__value_.__l.__size_;
  v48 = sub_1002614D8(v45, (uint64_t)v46, v47);
  v49 = strlen(off_10097B7A8);
  sub_1002614D8(v48, (uint64_t)off_10097B7A8, v49);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v231.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v239.__r_.__value_.__l.__data_);
LABEL_176:
  if ((*(char *)(a1 + 207) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 207))
      goto LABEL_201;
LABEL_180:
    v50 = sub_1002614D8(a2, (uint64_t)"X-PHONETIC-FIRST-NAME", 21);
    sub_100091AE8(&v239, v21);
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = &v239;
    else
      v51 = (std::string *)v239.__r_.__value_.__r.__words[0];
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
    else
      v52 = v239.__r_.__value_.__l.__size_;
    v53 = sub_1002614D8(v50, (uint64_t)v51, v52);
    v54 = sub_1002614D8(v53, (uint64_t)":", 1);
    if (*(char *)(a1 + 207) < 0)
      sub_10003430C(&v230, *(void **)(a1 + 184), *(_QWORD *)(a1 + 192));
    else
      v230 = *(std::string *)(a1 + 184);
    sub_10057FF08(&v230, a3, (uint64_t)&v232);
    if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = &v232;
    else
      v55 = (std::string *)v232.__r_.__value_.__r.__words[0];
    if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
    else
      v56 = v232.__r_.__value_.__l.__size_;
    v57 = sub_1002614D8(v54, (uint64_t)v55, v56);
    v58 = strlen(off_10097B7A8);
    sub_1002614D8(v57, (uint64_t)off_10097B7A8, v58);
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v232.__r_.__value_.__l.__data_);
    if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v230.__r_.__value_.__l.__data_);
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v239.__r_.__value_.__l.__data_);
    goto LABEL_201;
  }
  if (*(_QWORD *)(a1 + 192))
    goto LABEL_180;
LABEL_201:
  v204 = a3;
  v201 = a4;
  if ((a4 & 0x80) != 0)
  {
    if (*(_QWORD *)(a1 + 240) == *(_QWORD *)(a1 + 232))
    {
      v72 = sub_1002614D8(a2, (uint64_t)"TEL:", 4);
      v73 = strlen(off_10097B7A8);
      sub_1002614D8(v72, (uint64_t)off_10097B7A8, v73);
    }
    else
    {
      v59 = 0;
      v60 = 0;
      do
      {
        v61 = sub_1002614D8(a2, (uint64_t)"TEL", 3);
        sub_10057FE7C(*(_DWORD *)(*(_QWORD *)(a1 + 232) + v59 + 24), (uint64_t)&v239);
        if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = &v239;
        else
          v62 = (std::string *)v239.__r_.__value_.__r.__words[0];
        if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
        else
          v63 = v239.__r_.__value_.__l.__size_;
        v64 = sub_1002614D8(v61, (uint64_t)v62, v63);
        v65 = sub_1002614D8(v64, (uint64_t)":", 1);
        v66 = (__int128 *)(*(_QWORD *)(a1 + 232) + v59);
        if (*((char *)v66 + 23) < 0)
        {
          sub_10003430C(&v229, *(void **)v66, *((_QWORD *)v66 + 1));
        }
        else
        {
          v67 = *v66;
          v229.__r_.__value_.__r.__words[2] = *((_QWORD *)v66 + 2);
          *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v67;
        }
        sub_100580094(&v229, a5, (uint64_t)&v232);
        if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68 = &v232;
        else
          v68 = (std::string *)v232.__r_.__value_.__r.__words[0];
        if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v69 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
        else
          v69 = v232.__r_.__value_.__l.__size_;
        v70 = sub_1002614D8(v65, (uint64_t)v68, v69);
        v71 = strlen(off_10097B7A8);
        sub_1002614D8(v70, (uint64_t)off_10097B7A8, v71);
        if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v232.__r_.__value_.__l.__data_);
        if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v229.__r_.__value_.__l.__data_);
        if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v239.__r_.__value_.__l.__data_);
        ++v60;
        v59 += 56;
      }
      while (v60 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3));
    }
  }
  if ((a4 & 8) == 0)
    goto LABEL_272;
  if (*(char *)(a1 + 231) < 0)
  {
    if (!*(_QWORD *)(a1 + 216))
      goto LABEL_272;
  }
  else if (!*(_BYTE *)(a1 + 231))
  {
    goto LABEL_272;
  }
  memset(&v239, 0, sizeof(v239));
  if (a3)
    v74 = "b";
  else
    v74 = "BASE64";
  sub_100091AE8(&v239, v74);
  v75 = sub_1002614D8(a2, (uint64_t)"PHOTO", 5);
  if (a3)
    v76 = "";
  else
    v76 = ";CHARSET=UTF-8";
  sub_100091AE8(&v232, v76);
  if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v77 = &v232;
  else
    v77 = (std::string *)v232.__r_.__value_.__r.__words[0];
  if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v78 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
  else
    v78 = v232.__r_.__value_.__l.__size_;
  v79 = sub_1002614D8(v75, (uint64_t)v77, v78);
  v80 = sub_1002614D8(v79, (uint64_t)";ENCODING=", 10);
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v81 = &v239;
  else
    v81 = (std::string *)v239.__r_.__value_.__r.__words[0];
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v82 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
  else
    v82 = v239.__r_.__value_.__l.__size_;
  v83 = sub_1002614D8(v80, (uint64_t)v81, v82);
  sub_1002614D8(v83, (uint64_t)";TYPE=JPEG:", 11);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  v84 = 0;
  while (1)
  {
    v85 = *(char *)(a1 + 231) < 0 ? *(_QWORD *)(a1 + 216) : *(unsigned __int8 *)(a1 + 231);
    if (v84 >= v85)
      break;
    std::string::basic_string(&v232, (const std::string *)(a1 + 208), v84, 0x4BuLL, (std::allocator<char> *)v225);
    if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v86 = &v232;
    else
      v86 = (std::string *)v232.__r_.__value_.__r.__words[0];
    if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v87 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
    else
      v87 = v232.__r_.__value_.__l.__size_;
    v88 = sub_1002614D8(a2, (uint64_t)v86, v87);
    v89 = strlen(off_10097B7A8);
    sub_1002614D8(v88, (uint64_t)off_10097B7A8, v89);
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v232.__r_.__value_.__l.__data_);
    if (*(char *)(a1 + 231) < 0)
      v90 = *(_QWORD *)(a1 + 216);
    else
      v90 = *(unsigned __int8 *)(a1 + 231);
    v84 += 75;
    if (v84 < v90)
      sub_1002614D8(a2, (uint64_t)" ", 1);
  }
  if ((SHIBYTE(v239.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_272:
    if ((a4 & 0x20) != 0)
      goto LABEL_273;
    goto LABEL_384;
  }
  operator delete(v239.__r_.__value_.__l.__data_);
  if ((a4 & 0x20) != 0)
  {
LABEL_273:
    if (*(_QWORD *)(a1 + 264) != *(_QWORD *)(a1 + 256))
    {
      v91 = 0;
      v92 = 0;
      if (a3)
        v93 = "";
      else
        v93 = ";CHARSET=UTF-8";
      __sa = (char *)v93;
      do
      {
        v94 = sub_1002614D8(a2, (uint64_t)"ADR", 3);
        sub_100091AE8(&v239, __sa);
        if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v95 = &v239;
        else
          v95 = (std::string *)v239.__r_.__value_.__r.__words[0];
        if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v96 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
        else
          v96 = v239.__r_.__value_.__l.__size_;
        v97 = sub_1002614D8(v94, (uint64_t)v95, v96);
        sub_10057FE7C(*(_DWORD *)(*(_QWORD *)(a1 + 256) + v91 + 120), (uint64_t)&v232);
        if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v98 = &v232;
        else
          v98 = (std::string *)v232.__r_.__value_.__r.__words[0];
        if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v99 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
        else
          v99 = v232.__r_.__value_.__l.__size_;
        v100 = sub_1002614D8(v97, (uint64_t)v98, v99);
        sub_1002614D8(v100, (uint64_t)":", 1);
        if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v232.__r_.__value_.__l.__data_);
        if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v239.__r_.__value_.__l.__data_);
        memset(&v239, 0, sizeof(v239));
        *(_DWORD *)((char *)v228 + 3) = 0;
        v228[0] = 0;
        v101 = std::string::find((const std::string *)(*(_QWORD *)(a1 + 256) + v91), 10, 0);
        if (v101 == -1)
        {
          v104 = 0;
          v105 = 0;
          std::string::operator=(&v239, (const std::string *)(*(_QWORD *)(a1 + 256) + v91));
          v103 = 0;
        }
        else
        {
          v102 = v101;
          std::string::basic_string(&v232, (const std::string *)(*(_QWORD *)(a1 + 256) + v91), 0, v101, (std::allocator<char> *)v225);
          if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v239.__r_.__value_.__l.__data_);
          v239 = v232;
          std::string::basic_string(&v232, (const std::string *)(*(_QWORD *)(a1 + 256) + v91), v102 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v225);
          v103 = v232.__r_.__value_.__l.__size_;
          v104 = (void *)v232.__r_.__value_.__r.__words[0];
          v228[0] = v232.__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)v228 + 3) = *(_DWORD *)((char *)&v232.__r_.__value_.__r.__words[2] + 3);
          v105 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
        }
        v106 = sub_1002614D8(a2, (uint64_t)";", 1);
        if (v105 < 0)
        {
          sub_10003430C(&v227, v104, v103);
        }
        else
        {
          v227.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
          v227.__r_.__value_.__l.__size_ = v103;
          LODWORD(v227.__r_.__value_.__r.__words[2]) = v228[0];
          *(_DWORD *)((char *)&v227.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v228 + 3);
          *((_BYTE *)&v227.__r_.__value_.__s + 23) = v105;
        }
        sub_10057FF08(&v227, a3, (uint64_t)&v232);
        if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v107 = &v232;
        else
          v107 = (std::string *)v232.__r_.__value_.__r.__words[0];
        if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v108 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
        else
          v108 = v232.__r_.__value_.__l.__size_;
        v109 = sub_1002614D8(v106, (uint64_t)v107, v108);
        v110 = sub_1002614D8(v109, (uint64_t)";", 1);
        if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
          sub_10003430C(&v224, v239.__r_.__value_.__l.__data_, v239.__r_.__value_.__l.__size_);
        else
          v224 = v239;
        sub_10057FF08(&v224, a3, (uint64_t)v225);
        if ((v226 & 0x80u) == 0)
          v111 = v225;
        else
          v111 = (void **)v225[0];
        if ((v226 & 0x80u) == 0)
          v112 = v226;
        else
          v112 = (uint64_t)v225[1];
        v113 = sub_1002614D8(v110, (uint64_t)v111, v112);
        v114 = sub_1002614D8(v113, (uint64_t)";", 1);
        v115 = *(_QWORD *)(a1 + 256) + v91;
        v116 = (void **)(v115 + 24);
        if (*(char *)(v115 + 47) < 0)
        {
          sub_10003430C(&v221, *v116, *(_QWORD *)(v115 + 32));
        }
        else
        {
          v117 = *(_OWORD *)v116;
          v221.__r_.__value_.__r.__words[2] = *(_QWORD *)(v115 + 40);
          *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v117;
        }
        sub_10057FF08(&v221, a3, (uint64_t)v222);
        if ((v223 & 0x80u) == 0)
          v118 = v222;
        else
          v118 = (void **)v222[0];
        if ((v223 & 0x80u) == 0)
          v119 = v223;
        else
          v119 = (uint64_t)v222[1];
        v120 = sub_1002614D8(v114, (uint64_t)v118, v119);
        v121 = sub_1002614D8(v120, (uint64_t)";", 1);
        v122 = *(_QWORD *)(a1 + 256) + v91;
        v123 = (void **)(v122 + 48);
        if (*(char *)(v122 + 71) < 0)
        {
          sub_10003430C(&v218, *v123, *(_QWORD *)(v122 + 56));
        }
        else
        {
          v124 = *(_OWORD *)v123;
          v218.__r_.__value_.__r.__words[2] = *(_QWORD *)(v122 + 64);
          *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v124;
        }
        sub_10057FF08(&v218, a3, (uint64_t)v219);
        if ((v220 & 0x80u) == 0)
          v125 = v219;
        else
          v125 = (void **)v219[0];
        if ((v220 & 0x80u) == 0)
          v126 = v220;
        else
          v126 = (uint64_t)v219[1];
        v127 = sub_1002614D8(v121, (uint64_t)v125, v126);
        v128 = sub_1002614D8(v127, (uint64_t)";", 1);
        v129 = *(_QWORD *)(a1 + 256) + v91;
        v130 = (void **)(v129 + 72);
        if (*(char *)(v129 + 95) < 0)
        {
          sub_10003430C(&v215, *v130, *(_QWORD *)(v129 + 80));
        }
        else
        {
          v131 = *(_OWORD *)v130;
          v215.__r_.__value_.__r.__words[2] = *(_QWORD *)(v129 + 88);
          *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v131;
        }
        sub_10057FF08(&v215, a3, (uint64_t)v216);
        if ((v217 & 0x80u) == 0)
          v132 = v216;
        else
          v132 = (void **)v216[0];
        if ((v217 & 0x80u) == 0)
          v133 = v217;
        else
          v133 = (uint64_t)v216[1];
        v134 = sub_1002614D8(v128, (uint64_t)v132, v133);
        v135 = sub_1002614D8(v134, (uint64_t)";", 1);
        v136 = *(_QWORD *)(a1 + 256) + v91;
        v137 = (void **)(v136 + 96);
        if (*(char *)(v136 + 119) < 0)
        {
          sub_10003430C(&v212, *v137, *(_QWORD *)(v136 + 104));
        }
        else
        {
          v138 = *(_OWORD *)v137;
          v212.__r_.__value_.__r.__words[2] = *(_QWORD *)(v136 + 112);
          *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v138;
        }
        sub_10057FF08(&v212, a3, (uint64_t)v213);
        if ((v214 & 0x80u) == 0)
          v139 = v213;
        else
          v139 = (void **)v213[0];
        if ((v214 & 0x80u) == 0)
          v140 = v214;
        else
          v140 = (uint64_t)v213[1];
        v141 = sub_1002614D8(v135, (uint64_t)v139, v140);
        v142 = strlen(off_10097B7A8);
        sub_1002614D8(v141, (uint64_t)off_10097B7A8, v142);
        if ((char)v214 < 0)
          operator delete(v213[0]);
        if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v212.__r_.__value_.__l.__data_);
        if ((char)v217 < 0)
          operator delete(v216[0]);
        if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v215.__r_.__value_.__l.__data_);
        if ((char)v220 < 0)
          operator delete(v219[0]);
        if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v218.__r_.__value_.__l.__data_);
        if ((char)v223 < 0)
          operator delete(v222[0]);
        if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v221.__r_.__value_.__l.__data_);
        if ((char)v226 < 0)
          operator delete(v225[0]);
        if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v224.__r_.__value_.__l.__data_);
        if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v232.__r_.__value_.__l.__data_);
        if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v227.__r_.__value_.__l.__data_);
          if (v105 < 0)
LABEL_382:
            operator delete(v104);
        }
        else if (v105 < 0)
        {
          goto LABEL_382;
        }
        if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v239.__r_.__value_.__l.__data_);
        ++v92;
        v91 += 128;
      }
      while (v92 < (uint64_t)(*(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256)) >> 7);
    }
  }
LABEL_384:
  if ((v201 & 0x100) != 0 && *(_QWORD *)(a1 + 288) != *(_QWORD *)(a1 + 280))
  {
    v143 = 0;
    v144 = 0;
    if (a3)
      v145 = "";
    else
      v145 = ";CHARSET=UTF-8";
    do
    {
      v146 = sub_1002614D8(a2, (uint64_t)"EMAIL", 5);
      sub_100091AE8(&v239, v145);
      if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v147 = &v239;
      else
        v147 = (std::string *)v239.__r_.__value_.__r.__words[0];
      if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v148 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
      else
        v148 = v239.__r_.__value_.__l.__size_;
      v149 = sub_1002614D8(v146, (uint64_t)v147, v148);
      v150 = sub_1002614D8(v149, (uint64_t)";TYPE=INTERNET:", 15);
      v151 = (__int128 *)(*(_QWORD *)(a1 + 280) + v143);
      if (*((char *)v151 + 23) < 0)
      {
        sub_10003430C(&v211, *(void **)v151, *((_QWORD *)v151 + 1));
      }
      else
      {
        v152 = *v151;
        v211.__r_.__value_.__r.__words[2] = *((_QWORD *)v151 + 2);
        *(_OWORD *)&v211.__r_.__value_.__l.__data_ = v152;
      }
      sub_10057FF08(&v211, a3, (uint64_t)&v232);
      if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v153 = &v232;
      else
        v153 = (std::string *)v232.__r_.__value_.__r.__words[0];
      if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v154 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
      else
        v154 = v232.__r_.__value_.__l.__size_;
      v155 = sub_1002614D8(v150, (uint64_t)v153, v154);
      v156 = strlen(off_10097B7A8);
      sub_1002614D8(v155, (uint64_t)off_10097B7A8, v156);
      if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v232.__r_.__value_.__l.__data_);
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v211.__r_.__value_.__l.__data_);
      if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v239.__r_.__value_.__l.__data_);
      ++v144;
      v143 += 24;
    }
    while (v144 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 3));
  }
  if ((v201 & 0x1000) == 0)
    goto LABEL_439;
  if (*(char *)(a1 + 327) < 0)
  {
    if (!*(_QWORD *)(a1 + 312))
      goto LABEL_439;
  }
  else if (!*(_BYTE *)(a1 + 327))
  {
    goto LABEL_439;
  }
  v157 = sub_1002614D8(a2, (uint64_t)"TITLE", 5);
  if (a3)
    v158 = "";
  else
    v158 = ";CHARSET=UTF-8";
  sub_100091AE8(&v239, v158);
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v159 = &v239;
  else
    v159 = (std::string *)v239.__r_.__value_.__r.__words[0];
  if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v160 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
  else
    v160 = v239.__r_.__value_.__l.__size_;
  v161 = sub_1002614D8(v157, (uint64_t)v159, v160);
  v162 = sub_1002614D8(v161, (uint64_t)":", 1);
  if (*(char *)(a1 + 327) < 0)
    sub_10003430C(&v210, *(void **)(a1 + 304), *(_QWORD *)(a1 + 312));
  else
    v210 = *(std::string *)(a1 + 304);
  sub_10057FF08(&v210, a3, (uint64_t)&v232);
  if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v163 = &v232;
  else
    v163 = (std::string *)v232.__r_.__value_.__r.__words[0];
  if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v164 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
  else
    v164 = v232.__r_.__value_.__l.__size_;
  v165 = sub_1002614D8(v162, (uint64_t)v163, v164);
  v166 = strlen(off_10097B7A8);
  sub_1002614D8(v165, (uint64_t)off_10097B7A8, v166);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v239.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_439:
    if ((v201 & 0x10000) == 0)
      goto LABEL_440;
    goto LABEL_443;
  }
  operator delete(v239.__r_.__value_.__l.__data_);
  if ((v201 & 0x10000) == 0)
    goto LABEL_440;
LABEL_443:
  if (*(char *)(a1 + 351) < 0)
  {
    if (!*(_QWORD *)(a1 + 336))
      goto LABEL_440;
LABEL_447:
    v167 = sub_1002614D8(a2, (uint64_t)"ORG", 3);
    if (a3)
      v168 = "";
    else
      v168 = ";CHARSET=UTF-8";
    sub_100091AE8(&v239, v168);
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v169 = &v239;
    else
      v169 = (std::string *)v239.__r_.__value_.__r.__words[0];
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v170 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
    else
      v170 = v239.__r_.__value_.__l.__size_;
    v171 = sub_1002614D8(v167, (uint64_t)v169, v170);
    v172 = sub_1002614D8(v171, (uint64_t)":", 1);
    if (*(char *)(a1 + 351) < 0)
      sub_10003430C(&v209, *(void **)(a1 + 328), *(_QWORD *)(a1 + 336));
    else
      v209 = *(std::string *)(a1 + 328);
    sub_10057FF08(&v209, a3, (uint64_t)&v232);
    if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v173 = &v232;
    else
      v173 = (std::string *)v232.__r_.__value_.__r.__words[0];
    if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v174 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
    else
      v174 = v232.__r_.__value_.__l.__size_;
    sub_1002614D8(v172, (uint64_t)v173, v174);
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v232.__r_.__value_.__l.__data_);
    if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v209.__r_.__value_.__l.__data_);
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v239.__r_.__value_.__l.__data_);
    if (*(char *)(a1 + 375) < 0)
    {
      if (!*(_QWORD *)(a1 + 360))
        goto LABEL_488;
    }
    else if (!*(_BYTE *)(a1 + 375))
    {
      goto LABEL_488;
    }
    v175 = sub_1002614D8(a2, (uint64_t)";", 1);
    if (*(char *)(a1 + 375) < 0)
      sub_10003430C(&v208, *(void **)(a1 + 352), *(_QWORD *)(a1 + 360));
    else
      v208 = *(std::string *)(a1 + 352);
    sub_10057FF08(&v208, a3, (uint64_t)&v239);
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v176 = &v239;
    else
      v176 = (std::string *)v239.__r_.__value_.__r.__words[0];
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v177 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
    else
      v177 = v239.__r_.__value_.__l.__size_;
    sub_1002614D8(v175, (uint64_t)v176, v177);
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v239.__r_.__value_.__l.__data_);
    if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v208.__r_.__value_.__l.__data_);
LABEL_488:
    v178 = strlen(off_10097B7A8);
    sub_1002614D8(a2, (uint64_t)off_10097B7A8, v178);
    if ((v201 & 0x100000) == 0)
      goto LABEL_505;
    goto LABEL_489;
  }
  if (*(_BYTE *)(a1 + 351))
    goto LABEL_447;
LABEL_440:
  if ((v201 & 0x100000) == 0)
    goto LABEL_505;
LABEL_489:
  if (*(_QWORD *)(a1 + 384) != *(_QWORD *)(a1 + 376))
  {
    v179 = 0;
    v180 = 0;
    do
    {
      v181 = sub_1002614D8(a2, (uint64_t)"URL:", 4);
      v182 = (__int128 *)(*(_QWORD *)(a1 + 376) + v179);
      if (*((char *)v182 + 23) < 0)
      {
        sub_10003430C(&v207, *(void **)v182, *((_QWORD *)v182 + 1));
      }
      else
      {
        v183 = *v182;
        v207.__r_.__value_.__r.__words[2] = *((_QWORD *)v182 + 2);
        *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v183;
      }
      sub_10057FF08(&v207, v204, (uint64_t)&v239);
      if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v184 = &v239;
      else
        v184 = (std::string *)v239.__r_.__value_.__r.__words[0];
      if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v185 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
      else
        v185 = v239.__r_.__value_.__l.__size_;
      v186 = sub_1002614D8(v181, (uint64_t)v184, v185);
      v187 = strlen(off_10097B7A8);
      sub_1002614D8(v186, (uint64_t)off_10097B7A8, v187);
      if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v239.__r_.__value_.__l.__data_);
      if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v207.__r_.__value_.__l.__data_);
      ++v180;
      v179 += 24;
    }
    while (v180 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 384) - *(_QWORD *)(a1 + 376)) >> 3));
  }
LABEL_505:
  if ((v201 & 0x200000) != 0 && *(_DWORD *)(a1 + 8) != -1)
  {
    v188 = sub_1002614D8(a2, (uint64_t)"UID:", 4);
    *(_DWORD *)((char *)v188 + *(_QWORD *)(*v188 - 24) + 8) = *(_DWORD *)((_BYTE *)v188 + *(_QWORD *)(*v188 - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 8;
    v189 = (_QWORD *)std::ostream::operator<<(v188, *(unsigned int *)(a1 + 8));
    *(_DWORD *)((char *)v189 + *(_QWORD *)(*v189 - 24) + 8) = *(_DWORD *)((_BYTE *)v189 + *(_QWORD *)(*v189 - 24)
                                                                                          + 8) & 0xFFFFFFB5 | 2;
    v190 = strlen(off_10097B7A8);
    sub_1002614D8(v189, (uint64_t)off_10097B7A8, v190);
  }
  if ((v201 & 0x800000) != 0)
  {
    if (*(char *)(a1 + 423) < 0)
    {
      if (!*(_QWORD *)(a1 + 408))
        return;
    }
    else if (!*(_BYTE *)(a1 + 423))
    {
      return;
    }
    v191 = sub_1002614D8(a2, (uint64_t)"NICKNAME", 8);
    if (v204)
      v192 = "";
    else
      v192 = ";CHARSET=UTF-8";
    sub_100091AE8(&v239, v192);
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v193 = &v239;
    else
      v193 = (std::string *)v239.__r_.__value_.__r.__words[0];
    if ((v239.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v194 = HIBYTE(v239.__r_.__value_.__r.__words[2]);
    else
      v194 = v239.__r_.__value_.__l.__size_;
    v195 = sub_1002614D8(v191, (uint64_t)v193, v194);
    v196 = sub_1002614D8(v195, (uint64_t)":", 1);
    if (*(char *)(a1 + 423) < 0)
      sub_10003430C(&v206, *(void **)(a1 + 400), *(_QWORD *)(a1 + 408));
    else
      v206 = *(std::string *)(a1 + 400);
    sub_10057FF08(&v206, v204, (uint64_t)&v232);
    if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v197 = &v232;
    else
      v197 = (std::string *)v232.__r_.__value_.__r.__words[0];
    if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v198 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
    else
      v198 = v232.__r_.__value_.__l.__size_;
    v199 = sub_1002614D8(v196, (uint64_t)v197, v198);
    v200 = strlen(off_10097B7A8);
    sub_1002614D8(v199, (uint64_t)off_10097B7A8, v200);
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v232.__r_.__value_.__l.__data_);
    if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v206.__r_.__value_.__l.__data_);
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v239.__r_.__value_.__l.__data_);
  }
}

void sub_100581C68(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  _Unwind_Resume(a1);
}

_QWORD *sub_1005820DC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  size_t v3;

  v2 = sub_1002614D8(a2, (uint64_t)"END:VCARD", 9);
  v3 = strlen(off_10097B7A8);
  return sub_1002614D8(v2, (uint64_t)off_10097B7A8, v3);
}

uint64_t sub_100582128(uint64_t a1, int a2, int a3, char a4)
{
  uint64_t v8;
  _OWORD v10[4];
  void *__p[2];
  __int128 v12;
  __int128 v13;
  _OWORD v14[9];
  uint64_t v15;

  v15 = 0;
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  memset(v10, 0, sizeof(v10));
  sub_100272ADC((uint64_t)v10);
  sub_10058025C(a1, v10, a2, a3, a4);
  sub_1005820DC(v8, v10);
  std::stringbuf::str((char *)v10 + 8);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v10 + 8);
  return std::ios::~ios(v14);
}

void sub_10058222C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100272CFC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100582240(uint64_t a1, int a2, int a3, char a4)
{
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  _OWORD v17[4];
  void *__p[2];
  __int128 v19;
  __int128 v20;
  _OWORD v21[9];
  uint64_t v22;

  v22 = 0;
  v20 = 0u;
  memset(v21, 0, sizeof(v21));
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  memset(v17, 0, sizeof(v17));
  sub_100272ADC((uint64_t)v17);
  sub_10058025C(a1, v17, a2, a3, a4);
  sub_1002614D8(v17, (uint64_t)"X-IRMC-CALL-DATETIME;", 21);
  v8 = *(int *)(a1 + 424);
  if (v8 < 3)
    sub_1002614D8(v17, (uint64_t)off_100939148[v8], qword_1007427E0[v8]);
  v9 = sub_1002614D8(v17, (uint64_t)":", 1);
  v10 = *(char *)(a1 + 455);
  if (v10 >= 0)
    v11 = a1 + 432;
  else
    v11 = *(_QWORD *)(a1 + 432);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 455);
  else
    v12 = *(_QWORD *)(a1 + 440);
  v13 = sub_1002614D8(v9, v11, v12);
  v14 = strlen(off_10097B7A8);
  v15 = sub_1002614D8(v13, (uint64_t)off_10097B7A8, v14);
  sub_1005820DC((uint64_t)v15, v17);
  std::stringbuf::str((char *)v17 + 8);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v17 + 8);
  return std::ios::~ios(v21);
}

void sub_1005823DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100272CFC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005823F0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100939100;
  if (*(char *)(a1 + 455) < 0)
    operator delete(*(void **)(a1 + 432));
  return sub_10057FD10(a1);
}

void sub_10058242C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100939100;
  if (*(char *)(a1 + 455) < 0)
    operator delete(*(void **)(a1 + 432));
  sub_10057FD10(a1);
  operator delete();
}

void sub_10058247C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_1003554E4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100582500(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 128;
        sub_1003557C8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100582714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

double sub_100582920(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_100939170;
  *(_QWORD *)(a1 + 8) = off_1009391B8;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

void sub_10058294C(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeSensorTrackingManager: initialize", v3, 2u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_1009393B8);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009393D8);
  sub_1000B5218((uint64_t)off_100977FA8 + 1872, a1 + 8);
}

void sub_100582A2C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;

  v2 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 19);
    v4 = *(unsigned __int8 *)(a1 + 20);
    v12[0] = 67109376;
    v12[1] = v3;
    v13 = 1024;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stack will start: ftotalTrackingCapacity: %d, fremainingTrackingCapacity: %d", (uint8_t *)v12, 0xEu);
  }
  *(_BYTE *)(a1 + 64) = 0;
  v5 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 2424))(v5))
  {
    *(_BYTE *)(a1 + 16) = 1;
    v6 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 2432))(v6))
      *(_BYTE *)(a1 + 17) = 1;
    v7 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 2440))(v7))
      *(_BYTE *)(a1 + 18) = 1;
    v8 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v9 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v8;

    v10 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v11 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v10;

    *(_WORD *)(a1 + 19) = 25700;
  }
}

void sub_100582B74(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[5];
  uint8_t buf[4];
  id v10;
  __int16 v11;
  id v12;
  __int16 v13;
  uint64_t v14;

  v2 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 56), "count");
    v4 = objc_msgSend(*(id *)(a1 + 48), "count");
    v5 = (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    *(_DWORD *)buf = 134218496;
    v10 = v3;
    v11 = 2048;
    v12 = v4;
    v13 = 2048;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stack did stop fcurrentlyTrackedDevices: %lu, fsensorTrackingRequests: %lu, fsensorTrackingSessions: %lu", buf, 0x20u);
  }
  v6 = sub_1000419F4();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100582CC8;
  v8[3] = &unk_100917378;
  v8[4] = a1;
  sub_100023D84(v6, v8);
  v7 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LeSensorTrackingManager::stackWillStop exit", buf, 2u);
  }
}

_QWORD *sub_100582CC8(_QWORD *result)
{
  uint64_t v1;

  v1 = result[4];
  if (*(_BYTE *)(v1 + 16) || *(_BYTE *)(v1 + 18))
  {
    *(_WORD *)(v1 + 19) = 0;
    *(_QWORD *)(v1 + 32) = *(_QWORD *)(v1 + 24);
    objc_msgSend(*(id *)(v1 + 56), "removeAllObjects");
    return objc_msgSend(*(id *)(v1 + 48), "removeAllObjects");
  }
  return result;
}

uint64_t sub_100582D18(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned __int8 a8, __int16 a9, char a10, unsigned __int8 a11, unsigned __int8 a12, char a13, char a14, int a15, int a16)
{
  id v23;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  NSObject *v33;
  id v34;
  NSObject *v35;
  void *v36;
  void *v37;
  unsigned __int8 v38;
  NSObject *v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v50;
  TrackingDevice *v51;
  id v52;
  void *v53;
  NSObject *v54;
  _BOOL4 v55;
  unsigned int v56;
  const __CFString *v57;
  void *v58;
  _BOOL4 v59;
  void *v60;
  void *v61;
  void *v62;
  NSObject *v63;
  void *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  void *v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  uint8_t buf[16];
  _BYTE __p[14];
  _BYTE v83[20];
  _BYTE v84[6];
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;

  v23 = a3;
  v24 = v23;
  if (*(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 18))
  {
    if (!a2)
    {
      if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
        sub_1007057F8();
      goto LABEL_32;
    }
    if (!v23)
    {
      if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
        sub_100705824();
      goto LABEL_32;
    }
    if (a4 >= 0x65)
    {
      v25 = qword_100999958;
      if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
        sub_100705850(a4, v25, v26, v27, v28, v29, v30, v31);
LABEL_32:
      v41 = 3;
      goto LABEL_33;
    }
    if ((a5 & 0x80) != 0)
    {
      v42 = qword_100999958;
      if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
        sub_1007058B4(a5, v42, v43, v44, v45, v46, v47, v48);
      goto LABEL_32;
    }
    sub_1000340DC(a2, (uint64_t)__p);
    if (v83[9] >= 0)
      v32 = __p;
    else
      v32 = *(_BYTE **)__p;
    v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v32));
    if ((v83[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v33 = qword_100999958;
    if (!v79)
    {
      if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
        sub_100705918();
      v41 = 1;
      goto LABEL_80;
    }
    if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 138545410;
      *(_QWORD *)&__p[4] = v79;
      *(_WORD *)&__p[12] = 2114;
      *(_QWORD *)v83 = v24;
      *(_WORD *)&v83[8] = 1024;
      *(_DWORD *)&v83[10] = a4;
      *(_WORD *)&v83[14] = 1024;
      *(_DWORD *)&v83[16] = a5;
      *(_WORD *)v84 = 1024;
      *(_DWORD *)&v84[2] = a7;
      v85 = 1024;
      v86 = a9;
      v87 = 1024;
      v88 = HIBYTE(a9);
      v89 = 1024;
      v90 = a11;
      v91 = 1024;
      v92 = a12;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "startTracking for session: %{public}@ for device %{public}@ for type %d with timeout value %d rssi:%d:%d:%d eCfg:%d:%d", __p, 0x40u);
    }
    v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v79));
    v34 = sub_1005838B8((uint64_t)v78, v78, v24);
    v80 = (void *)objc_claimAutoreleasedReturnValue(v34);
    v35 = qword_100999958;
    if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEBUG))
    {
      v71 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)__p = 138543874;
      *(_QWORD *)&__p[4] = v71;
      *(_WORD *)&__p[12] = 2114;
      *(_QWORD *)v83 = v78;
      *(_WORD *)&v83[8] = 2114;
      *(_QWORD *)&v83[10] = v80;
      _os_log_debug_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "Current sensor tracking requests: %{public}@, tracking devices set %{public}@ for foundDevice %{public}@", __p, 0x20u);
    }
    sub_100583A30(a1);
    if (v80)
    {
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "appleTypes"));
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a4));
      v38 = objc_msgSend(v36, "containsObject:", v37);

      if ((v38 & 1) != 0)
      {
        v39 = qword_100999958;
        if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
        {
          v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "appleTypes"));
          *(_DWORD *)__p = 138543874;
          *(_QWORD *)&__p[4] = v24;
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)v83 = a4;
          *(_WORD *)&v83[4] = 2114;
          *(_QWORD *)&v83[6] = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Already tracking same device %{public}@ and same type: %d, %{public}@", __p, 0x1Cu);

        }
      }
      else
      {
        v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "appleTypes"));
        v59 = v58 == 0;

        if (v59)
        {
          v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
          objc_msgSend(v80, "setAppleTypes:", v60);

        }
        v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "appleTypes"));
        v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a4));
        objc_msgSend(v61, "addObject:", v62);

        v63 = qword_100999958;
        if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEBUG))
        {
          v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "appleTypes"));
          sub_100705A04(v64, buf, v63);
        }
        if (objc_msgSend(v80, "currentState") == 1
          || objc_msgSend(v80, "currentState") == 3)
        {
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_1009393F8);
          sub_1002E9E24((uint64_t)off_100978168, a2, v24, (uint64_t)objc_msgSend(v80, "currentState"), a4);
        }
      }
      if (sub_100583AD4(a1, v80))
      {
        v41 = sub_100583CF0(a1, 0, (uint64_t)objc_msgSend(v80, "rssiIncreaseScanThreshold"), (uint64_t)objc_msgSend(v80, "rssiIncreaseScanWindowThreshold"), (uint64_t)objc_msgSend(v80, "rssiIncreaseScanIntervalThreshold"), (uint64_t)objc_msgSend(v80, "rssiIncreaseScanTimeoutThreshold"), (uint64_t)objc_msgSend(v80, "sensorTimeoutBetweenIncreaseScan"));
        if ((_DWORD)v41)
        {
          if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
            sub_100705944();
          goto LABEL_79;
        }
      }
LABEL_77:
      v73 = qword_100999958;
      v41 = 0;
      if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
      {
        v74 = *(_QWORD *)(a1 + 48);
        v75 = *(_QWORD *)(a1 + 56);
        *(_DWORD *)__p = 138543618;
        *(_QWORD *)&__p[4] = v74;
        *(_WORD *)&__p[12] = 2114;
        *(_QWORD *)v83 = v75;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "Now tracking requests: %{public}@ with currently tracking devices: %{public}@", __p, 0x16u);
        v41 = 0;
      }
      goto LABEL_79;
    }
    v50 = qword_100999958;
    if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "New session or new device to add in trackign list", __p, 2u);
    }
    *(_DWORD *)((char *)&v76 + 10) = a16;
    *(_DWORD *)((char *)&v76 + 6) = a15;
    BYTE5(v76) = a14;
    BYTE4(v76) = a12;
    BYTE3(v76) = a11;
    BYTE2(v76) = a10;
    LOWORD(v76) = a9;
    v51 = -[TrackingDevice initWithDevice:type:timeoutValue:targetCore:rssiThreshold:rssiThresholdGone:invalidRssiHandling:rssiPrecision:rssiPrecisionGone:eventConfiguration:vseBuffering:rssiIncreaseScanThreshold:rssiIncreaseScanWindowThreshold:rssiIncreaseScanIntervalThreshold:rssiIncreaseScanTimeoutThreshold:sensorTimeoutBetweenIncreaseScan:]([TrackingDevice alloc], "initWithDevice:type:timeoutValue:targetCore:rssiThreshold:rssiThresholdGone:invalidRssiHandling:rssiPrecision:rssiPrecisionGone:eventConfiguration:vseBuffering:rssiIncreaseScanThreshold:rssiIncreaseScanWindowThreshold:rssiIncreaseScanIntervalThreshold:rssiIncreaseScanTimeoutThreshold:sensorTimeoutBetweenIncreaseScan:", v24, a4, a5, a6, a7, a8, v76);
    v52 = sub_100583E68(a1, v24);
    v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
    v54 = qword_100999958;
    v55 = os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT);
    v77 = v53;
    if (v53)
    {
      if (v55)
      {
        v56 = objc_msgSend(v53, "currentState") - 1;
        if (v56 > 2)
          v57 = CFSTR("Not Set");
        else
          v57 = off_100939438[(char)v56];
        *(_DWORD *)__p = 138543362;
        *(_QWORD *)&__p[4] = v57;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Some other sesssion is tracking this device with state: %{public}@", __p, 0xCu);
      }
      -[TrackingDevice setCurrentState:](v51, "setCurrentState:", objc_msgSend(v53, "currentState"));
      if (-[TrackingDevice currentState](v51, "currentState") == 1
        || -[TrackingDevice currentState](v51, "currentState") == 3)
      {
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_1009393F8);
        sub_1002E9E24((uint64_t)off_100978168, a2, v24, -[TrackingDevice currentState](v51, "currentState"), a4);
      }
    }
    else
    {
      if (v55)
      {
        v65 = -[TrackingDevice timeoutValue](v51, "timeoutValue");
        v66 = -[TrackingDevice rssiThreshold](v51, "rssiThreshold");
        v67 = -[TrackingDevice rssiPrecision](v51, "rssiPrecision");
        v68 = -[TrackingDevice invalidRssiHandling](v51, "invalidRssiHandling");
        v69 = -[TrackingDevice eventConfiguration](v51, "eventConfiguration");
        v70 = -[TrackingDevice vseBuffering](v51, "vseBuffering");
        *(_DWORD *)__p = 67110400;
        *(_DWORD *)&__p[4] = v65;
        *(_WORD *)&__p[8] = 1024;
        *(_DWORD *)&__p[10] = v66;
        *(_WORD *)v83 = 1024;
        *(_DWORD *)&v83[2] = v67;
        *(_WORD *)&v83[6] = 1024;
        *(_DWORD *)&v83[8] = v68;
        *(_WORD *)&v83[12] = 1024;
        *(_DWORD *)&v83[14] = v69;
        *(_WORD *)&v83[18] = 1024;
        *(_DWORD *)v84 = v70;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "No other session is tracking this device - start tracking with timeout: %d rssi:%d:%d handling:%d eventCfg:%d vseBuf:%d", __p, 0x26u);
      }
      v41 = sub_100584008(a1, v24, -[TrackingDevice timeoutValue](v51, "timeoutValue"), -[TrackingDevice targetCore](v51, "targetCore"), -[TrackingDevice rssiThreshold](v51, "rssiThreshold"), -[TrackingDevice rssiThresholdGone](v51, "rssiThresholdGone"), -[TrackingDevice invalidRssiHandling](v51, "invalidRssiHandling"), -[TrackingDevice rssiPrecision](v51, "rssiPrecision"), -[TrackingDevice rssiPrecisionGone](v51, "rssiPrecisionGone"), -[TrackingDevice eventConfiguration](v51, "eventConfiguration"), -[TrackingDevice vseBuffering](v51, "vseBuffering"));
      if ((_DWORD)v41)
      {
        if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
          sub_1007059A4();
        goto LABEL_75;
      }
    }
    if (v78)
    {
      objc_msgSend(v78, "addObject:", v51);
    }
    else
    {
      v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithObject:](NSMutableSet, "setWithObject:", v51));
      objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v72, v79);

      sub_100584288((_QWORD *)a1, a2);
    }
    if (!sub_100583AD4(a1, v51)
      || (v41 = sub_100583CF0(a1, 0, -[TrackingDevice rssiIncreaseScanThreshold](v51, "rssiIncreaseScanThreshold"), -[TrackingDevice rssiIncreaseScanWindowThreshold](v51, "rssiIncreaseScanWindowThreshold"), -[TrackingDevice rssiIncreaseScanIntervalThreshold](v51, "rssiIncreaseScanIntervalThreshold"), -[TrackingDevice rssiIncreaseScanTimeoutThreshold](v51, "rssiIncreaseScanTimeoutThreshold"), -[TrackingDevice sensorTimeoutBetweenIncreaseScan](v51, "sensorTimeoutBetweenIncreaseScan")), !(_DWORD)v41))
    {

      goto LABEL_77;
    }
    if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
      sub_100705944();
LABEL_75:

LABEL_79:
LABEL_80:

    goto LABEL_33;
  }
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
    sub_1007057CC();
  v41 = 11;
LABEL_33:

  return v41;
}

void sub_1005837E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

id sub_1005838B8(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v4 = a2;
  v5 = a3;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "deviceUUID", (_QWORD)v14));
        v12 = objc_msgSend(v11, "isEqual:", v5);

        if ((v12 & 1) != 0)
        {
          v7 = v10;
          goto LABEL_11;
        }
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v7)
        continue;
      break;
    }
  }
LABEL_11:

  return v7;
}

void sub_1005839FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100583A30(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(void **)(a1 + 48);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100584D64;
  v4[3] = &unk_100939238;
  v4[4] = &v5;
  objc_msgSend(v1, "enumerateKeysAndObjectsUsingBlock:", v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_100583ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100583AD4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  _BOOL8 v8;
  _QWORD v10[4];
  id v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  _QWORD v18[5];
  id v19;
  uint8_t buf[4];
  unsigned int v21;
  __int16 v22;
  uint64_t v23;

  v3 = a2;
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x3032000000;
  v18[3] = sub_1000626C8;
  v18[4] = sub_1000623FC;
  v19 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v4 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(v3, "rssiIncreaseScanThreshold");
    v6 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 67109378;
    v21 = v5;
    v22 = 2114;
    v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "getMinThresholdForAllSessionAskingIncreaseScanParams: %d in %{public}@", buf, 0x12u);
  }
  if (*(_BYTE *)(a1 + 18))
  {
    if (*(_BYTE *)(a1 + 64) || !objc_msgSend(v3, "rssiIncreaseScanThreshold"))
    {
      v7 = *(void **)(a1 + 48);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100584E90;
      v10[3] = &unk_100939260;
      v11 = v3;
      v12 = v18;
      v13 = &v14;
      objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v10);
      v8 = *((_BYTE *)v15 + 24) != 0;

    }
    else
    {
      v8 = 1;
      *((_BYTE *)v15 + 24) = 1;
    }
  }
  else
  {
    v8 = 0;
  }
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(v18, 8);

  return v8;
}

void sub_100583CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_100583CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  NSObject *v13;
  id v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t result;
  NSObject *v19;
  int v20;
  id v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v13 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    v14 = objc_msgSend(*(id *)(a1 + 56), "count");
    v15 = *(unsigned __int8 *)(a1 + 19);
    v16 = *(unsigned __int8 *)(a1 + 20);
    v20 = 134218496;
    v21 = v14;
    v22 = 1024;
    v23 = v15;
    v24 = 1024;
    v25 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "startTrackingForNewDevice - tracked devices: %lu, total: %d, remaining: %d", (uint8_t *)&v20, 0x18u);
  }
  if ((_DWORD)a3)
  {
    v17 = sub_1000438A4();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 848))(v17, 1, a3, a4, a5, a6, a7);
    if (!(_DWORD)result)
      *(_BYTE *)(a1 + 64) = 1;
  }
  else
  {
    v19 = qword_100999958;
    if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 67109120;
      LODWORD(v21) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "rssiIncreaseScanThreshold is not configured %d", (uint8_t *)&v20, 8u);
    }
    return 1;
  }
  return result;
}

id sub_100583E68(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;
  uint8_t buf[4];
  id v21;
  __int16 v22;
  uint64_t v23;

  v3 = a2;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = sub_1000626C8;
  v18 = sub_1000623FC;
  v19 = 0;
  v4 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    v21 = v3;
    v22 = 2114;
    v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "anySessionTrackingThisDevice: %{public}@ in %{public}@", buf, 0x16u);
  }
  v6 = *(void **)(a1 + 48);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100584CE0;
  v10[3] = &unk_100939210;
  v12 = &v14;
  v13 = a1;
  v11 = v3;
  v7 = v3;
  objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", v10);
  v8 = (id)v15[5];

  _Block_object_dispose(&v14, 8);
  return v8;
}

void sub_100583FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100584008(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, unsigned __int8 a10, unsigned __int8 a11)
{
  id v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  int v25;
  int v26;
  id v28;
  int v29;
  int v30;
  uint64_t v31;
  id v32;
  uint8_t buf[4];
  id v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;

  v18 = a2;
  if (objc_msgSend(*(id *)(a1 + 56), "count") == (id)*(unsigned __int8 *)(a1 + 19))
  {
    v19 = qword_100999958;
    if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
    {
      v28 = objc_msgSend(*(id *)(a1 + 56), "count");
      v29 = *(unsigned __int8 *)(a1 + 19);
      v30 = *(unsigned __int8 *)(a1 + 20);
      *(_DWORD *)buf = 134218496;
      v34 = v28;
      v35 = 1024;
      v36 = v29;
      v37 = 1024;
      v38 = v30;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "startTrackingForNewDevice - maxed out tracked devices: %lu, total: %d, remaining: %d", buf, 0x18u);
    }
    v20 = 4;
  }
  else
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100939418);
    v32 = v18;
    v21 = sub_1000589DC((uint64_t)off_1009778C0, v18, 0);
    v22 = sub_1000438A4();
    *(_WORD *)((char *)&v31 + 3) = __PAIR16__(a11, a10);
    BYTE2(v31) = a9;
    BYTE1(v31) = a8;
    LOBYTE(v31) = a7;
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 840))(v22, v21, a3, a1 + 19, a1 + 20, a4, a5, a6, v31);
    if (!(_DWORD)v20)
      objc_msgSend(*(id *)(a1 + 56), "addObject:", v32);
    v23 = qword_100999958;
    if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
    {
      v24 = objc_msgSend(*(id *)(a1 + 56), "count");
      v25 = *(unsigned __int8 *)(a1 + 19);
      v26 = *(unsigned __int8 *)(a1 + 20);
      *(_DWORD *)buf = 134218496;
      v34 = v24;
      v35 = 1024;
      v36 = v25;
      v37 = 1024;
      v38 = v26;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "startTrackingForNewDevice - tracked devices: %lu, total: %d, remaining: %d", buf, 0x18u);
    }
    v18 = v32;
  }

  return v20;
}

void sub_100584258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_100584288(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v4 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (uint64_t)(a1[4] - a1[3]) >> 3;
    v22 = 134217984;
    v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "addSessionToTrackingSessions: number of currently tracking sessions %lu", (uint8_t *)&v22, 0xCu);
  }
  if (a2)
  {
    v6 = (_QWORD *)a1[3];
    v7 = (_QWORD *)a1[4];
    v8 = v6;
    if (v6 != v7)
    {
      while (*v8 != a2)
      {
        if (++v8 == v7)
        {
          v8 = (_QWORD *)a1[4];
          break;
        }
      }
    }
    if (v8 == v7)
    {
      v9 = a1[5];
      if ((unint64_t)v7 >= v9)
      {
        v10 = v7 - v6;
        if ((unint64_t)(v10 + 1) >> 61)
          abort();
        v11 = v9 - (_QWORD)v6;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)sub_10007ABA0((uint64_t)(a1 + 5), v13);
        else
          v14 = 0;
        v15 = &v14[8 * v10];
        v16 = &v14[8 * v13];
        *(_QWORD *)v15 = a2;
        v7 = v15 + 8;
        v18 = (char *)a1[3];
        v17 = (char *)a1[4];
        if (v17 != v18)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v15 - 1) = v19;
            v15 -= 8;
          }
          while (v17 != v18);
          v17 = (char *)a1[3];
        }
        a1[3] = v15;
        a1[4] = v7;
        a1[5] = v16;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v7++ = a2;
      }
      a1[4] = v7;
    }
    v20 = qword_100999958;
    if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
    {
      v21 = ((uint64_t)v7 - a1[3]) >> 3;
      v22 = 134217984;
      v23 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Currently tracking sessions: %lu", (uint8_t *)&v22, 0xCu);
    }
  }
}

void sub_100584478(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  unsigned int v27;
  void *v28;
  void *v29;
  void *v30;
  _BOOL4 v31;
  id v32;
  void *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  _BYTE __p[12];
  __int16 v40;
  void *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;

  v7 = a3;
  v8 = v7;
  if (*(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 18))
  {
    if (a2)
    {
      if (v7)
      {
        if (a4 < 0x65)
        {
          sub_1000340DC(a2, (uint64_t)__p);
          if (v42 >= 0)
            v16 = __p;
          else
            v16 = *(_BYTE **)__p;
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16));
          if (SHIBYTE(v42) < 0)
            operator delete(*(void **)__p);
          v18 = qword_100999958;
          if (v17)
          {
            if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
            {
              v19 = *(_QWORD *)(a1 + 48);
              v20 = *(_QWORD *)(a1 + 56);
              *(_DWORD *)__p = 138544386;
              *(_QWORD *)&__p[4] = v17;
              v40 = 2114;
              v41 = v8;
              v42 = 1024;
              v43 = a4;
              v44 = 2114;
              v45 = v19;
              v46 = 2114;
              v47 = v20;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "stopTracking for session: %{public}@ for device %{public}@ for type %d with current requests %{public}@ and devices %{public}@", __p, 0x30u);
            }
            v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v17));
            v22 = sub_1005838B8((uint64_t)v21, v21, v8);
            v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
            v24 = v23;
            if (v23)
            {
              v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "appleTypes"));
              v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a4));
              v27 = objc_msgSend(v25, "containsObject:", v26);

              if (v27)
              {
                v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "appleTypes"));
                v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a4));
                objc_msgSend(v28, "removeObject:", v29);

              }
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "appleTypes"));
              v31 = objc_msgSend(v30, "count") == 0;

              if (v31)
              {
                objc_msgSend(v21, "removeObject:", v24);
                v32 = sub_100583E68(a1, v8);
                v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
                if (!v33)
                {
                  v34 = qword_100999958;
                  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)__p = 0;
                    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "No other session is tracking this device - stop tracking", __p, 2u);
                  }
                  sub_100584950(a1, v8);
                }

              }
            }
            if (!objc_msgSend(v21, "count"))
            {
              v35 = qword_100999958;
              if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)__p = 0;
                _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "This session is not tracking any devices, remove session ID from tracking requests", __p, 2u);
              }
              objc_msgSend(*(id *)(a1 + 48), "removeObjectForKey:", v17);
              sub_100584ABC(a1, v17);
            }
            v36 = qword_100999958;
            if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
            {
              v37 = *(_QWORD *)(a1 + 48);
              v38 = *(void **)(a1 + 56);
              *(_DWORD *)__p = 138543618;
              *(_QWORD *)&__p[4] = v37;
              v40 = 2114;
              v41 = v38;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Now tracking requests: %{public}@ with currently tracking devices: %{public}@", __p, 0x16u);
            }

          }
          else if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
          {
            sub_100705B40();
          }

        }
        else
        {
          v9 = qword_100999958;
          if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
            sub_100705ADC(a4, v9, v10, v11, v12, v13, v14, v15);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
      {
        sub_100705AB0();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
    {
      sub_100705A84();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
  {
    sub_100705A58();
  }

}

void sub_1005848B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_100584950(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  int v8;
  int v9;
  int v10;
  id v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;

  v3 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100939418);
  v4 = sub_1000589DC((uint64_t)off_1009778C0, v3, 0);
  v5 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 856))(v5, v4, a1 + 19, a1 + 20);
  objc_msgSend(*(id *)(a1 + 56), "removeObject:", v3);
  v6 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    v7 = objc_msgSend(*(id *)(a1 + 56), "count");
    v8 = *(unsigned __int8 *)(a1 + 19);
    v9 = *(unsigned __int8 *)(a1 + 20);
    v10 = 134218496;
    v11 = v7;
    v12 = 1024;
    v13 = v8;
    v14 = 1024;
    v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "stopTrackingForDevice - tracked devices: %lu, total: %d, remaining: %d", (uint8_t *)&v10, 0x18u);
  }

}

void sub_100584AA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100584ABC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  NSObject *v13;
  uint64_t v14;
  _BYTE __p[12];
  __int16 v16;
  uint64_t v17;
  char v18;

  v3 = a2;
  v4 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    *(_DWORD *)__p = 138543618;
    *(_QWORD *)&__p[4] = v3;
    v16 = 2048;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "removeSessionFromTrackingSessions %{public}@, number of currently tracking sessions: %lu", __p, 0x16u);
  }
  if (v3)
  {
    v6 = *(uint64_t **)(a1 + 24);
    if (v6 != *(uint64_t **)(a1 + 32))
    {
      v7 = -(uint64_t)v6;
      while (1)
      {
        sub_1000340DC(*v6, (uint64_t)__p);
        if (v18 >= 0)
          v8 = __p;
        else
          v8 = *(_BYTE **)__p;
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
        if (v18 < 0)
          operator delete(*(void **)__p);
        if (objc_msgSend(v9, "isEqualToString:", v3))
          break;

        ++v6;
        v7 -= 8;
        if (v6 == *(uint64_t **)(a1 + 32))
          goto LABEL_17;
      }
      v10 = -v7;
      v11 = (const void *)(8 - v7);
      v12 = *(_QWORD *)(a1 + 32) - (8 - v7);
      if (v12)
        memmove((void *)v10, v11, v12);
      *(_QWORD *)(a1 + 32) = v10 + v12;

LABEL_17:
      v13 = qword_100999958;
      if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
      {
        v14 = (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
        *(_DWORD *)__p = 134217984;
        *(_QWORD *)&__p[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Now tracking sessions: %lu", __p, 0xCu);
      }
    }
  }

}

void sub_100584CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_100584CE0(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a3;
  v6 = sub_1005838B8((uint64_t)v10, v10, *(void **)(a1 + 32));
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    *a4 = 1;

}

void sub_100584D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100584D64(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v4 = a3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v4);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i), "rssiIncreaseScanThreshold", (_QWORD)v8))
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_11:

}

void sub_100584E6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100584E90(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  unsigned int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = a3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v8, "rssiIncreaseScanThreshold", (_QWORD)v10))
        {
          v9 = objc_msgSend(v8, "rssiIncreaseScanThreshold");
          if (v9 < objc_msgSend(*(id *)(a1 + 32), "rssiIncreaseScanThreshold"))
          {
            objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v8);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
          }
        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  objc_msgSend(*(id *)(a1 + 32), "setRssiIncreaseScanThreshold:", objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "rssiIncreaseScanThreshold"));
  objc_msgSend(*(id *)(a1 + 32), "setRssiIncreaseScanWindowThreshold:", objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "rssiIncreaseScanWindowThreshold"));
  objc_msgSend(*(id *)(a1 + 32), "setRssiIncreaseScanIntervalThreshold:", objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "rssiIncreaseScanIntervalThreshold"));
  objc_msgSend(*(id *)(a1 + 32), "setRssiIncreaseScanTimeoutThreshold:", objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "rssiIncreaseScanTimeoutThreshold"));
  objc_msgSend(*(id *)(a1 + 32), "setSensorTimeoutBetweenIncreaseScan:", objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "sensorTimeoutBetweenIncreaseScan"));

}

void sub_100585064(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100585090(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  unsigned __int8 v10;
  _BYTE __p[12];
  __int16 v13;
  uint64_t v14;
  char v15;

  v3 = a2;
  v4 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    *(_DWORD *)__p = 138543618;
    *(_QWORD *)&__p[4] = v3;
    v13 = 2048;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sessionFromSessionIDString: %{public}@ from tracking sessions: %lu", __p, 0x16u);
  }
  if (!v3 || (v6 = *(uint64_t **)(a1 + 24), v6 == *(uint64_t **)(a1 + 32)))
  {
LABEL_12:
    v7 = 0;
  }
  else
  {
    while (1)
    {
      v7 = *v6;
      sub_1000340DC(*v6, (uint64_t)__p);
      v8 = v15 >= 0 ? __p : *(_BYTE **)__p;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
      if (v15 < 0)
        operator delete(*(void **)__p);
      v10 = objc_msgSend(v9, "isEqualToString:", v3);

      if ((v10 & 1) != 0)
        break;
      if (++v6 == *(uint64_t **)(a1 + 32))
        goto LABEL_12;
    }
  }

  return v7;
}

void sub_1005851F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_100585234(uint64_t a1, void *a2, int a3, char a4)
{
  id v7;
  NSObject *v8;
  const __CFString *v9;
  uint64_t v10;
  void *v11;
  id v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  char v16;
  char v17;
  uint8_t buf[4];
  id v19;
  __int16 v20;
  const __CFString *v21;
  __int16 v22;
  uint64_t v23;

  v7 = a2;
  v8 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    if ((a3 - 1) > 2)
      v9 = CFSTR("Not Set");
    else
      v9 = off_100939438[(char)(a3 - 1)];
    v10 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    v19 = v7;
    v20 = 2114;
    v21 = v9;
    v22 = 2114;
    v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "leSensorStateChanged received %{public}@ with state: %{public}@ with currently tracked requests %{public}@", buf, 0x20u);
  }
  v11 = *(void **)(a1 + 48);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1005853B0;
  v13[3] = &unk_1009392D8;
  v14 = v7;
  v15 = a1;
  v16 = a3;
  v17 = a4;
  v12 = v7;
  objc_msgSend(v11, "enumerateKeysAndObjectsUsingBlock:", v13);

}

void sub_100585390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1005853B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  __int16 v12;

  v8 = a2;
  v5 = a3;
  v6 = sub_100585090(*(_QWORD *)(a1 + 40), v8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100585484;
  v9[3] = &unk_1009392B0;
  v7 = *(id *)(a1 + 32);
  v12 = *(_WORD *)(a1 + 48);
  v10 = v7;
  v11 = v6;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v9);

}

void sub_10058545C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100585484(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  void *v7;
  id v8;
  uint64_t v9;
  std::string *p_p;
  uint64_t v11;
  __int128 v12;
  uint64_t (**v13)();
  unsigned int *v14;
  std::string __p;
  _QWORD v16[4];
  __int128 v17;
  char v18;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deviceUUID"));
  v5 = objc_msgSend(v4, "isEqual:", *(_QWORD *)(a1 + 32));

  if (v5)
  {
    v6 = objc_msgSend(v3, "currentState");
    objc_msgSend(v3, "setCurrentState:", *(unsigned __int8 *)(a1 + 48));
    if (v6 == 2)
    {
      if ((*(unsigned __int8 *)(a1 + 48) | 2) != 3)
        goto LABEL_16;
    }
    else if ((v6 & 0xFFFFFFFD) != 1 || *(_BYTE *)(a1 + 48) != 2)
    {
      goto LABEL_16;
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "appleTypes"));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100585680;
    v16[3] = &unk_100939288;
    v12 = *(_OWORD *)(a1 + 32);
    v8 = (id)v12;
    v17 = v12;
    v18 = *(_BYTE *)(a1 + 48);
    objc_msgSend(v7, "enumerateObjectsUsingBlock:", v16);

    if (*(_BYTE *)(a1 + 49))
    {
      v9 = sub_10005D5A4();
      sub_10050945C(*(_QWORD *)(a1 + 40), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v11 = *(_QWORD *)(a1 + 32);
      v13 = &off_100918258;
      v14 = 0;
      (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t, uint64_t (***)()))(*(_QWORD *)v9 + 40))(v9, 7, p_p, v11, &v13);
      v13 = &off_100918258;
      if (v14)
        sub_100056AAC(v14);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

  }
LABEL_16:

}

void sub_100585614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;

  if (a12)
    sub_100056AAC(a12);
  if (a18 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100585680(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = v3;
  if (qword_100978170 != -1)
  {
    dispatch_once(&qword_100978170, &stru_1009393F8);
    v3 = v4;
  }
  sub_1002E9E24((uint64_t)off_100978168, *(_QWORD *)(a1 + 40), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 48), objc_msgSend(v3, "intValue"));

}

void sub_100585710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100585724(uint64_t a1, void *a2, int a3, char a4)
{
  sub_100585234(a1 - 8, a2, a3, a4);
}

void sub_10058572C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;

  v2 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ Sensor Tracking Manager -------------------", (uint8_t *)&v8, 2u);
    v2 = qword_100999958;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 48), "count");
    v4 = (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3;
    v8 = 134218240;
    v9 = v3;
    v10 = 2048;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Tracking Requests: %lu %lu", (uint8_t *)&v8, 0x16u);
  }
  objc_msgSend(*(id *)(a1 + 48), "enumerateKeysAndObjectsUsingBlock:", &stru_100939318);
  v5 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    v6 = objc_msgSend(*(id *)(a1 + 56), "count");
    v8 = 134217984;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: Total Devices currently tracked: %lu", (uint8_t *)&v8, 0xCu);
  }
  objc_msgSend(*(id *)(a1 + 56), "enumerateObjectsUsingBlock:", &stru_100939398);
  v7 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ Sensor Tracking Manager END -------------------", (uint8_t *)&v8, 2u);
  }
}

void sub_1005858DC(id a1, NSString *a2, NSMutableSet *a3, BOOL *a4)
{
  NSMutableSet *v5;
  NSObject *v6;
  int v7;
  NSString *v8;

  v5 = a3;
  v6 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138543362;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump: --------- %{public}@ ---------", (uint8_t *)&v7, 0xCu);
  }
  -[NSMutableSet enumerateObjectsUsingBlock:](v5, "enumerateObjectsUsingBlock:", &stru_100939358);

}

void sub_1005859A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005859B8(id a1, TrackingDevice *a2, BOOL *a3)
{
  TrackingDevice *v3;
  NSObject *v4;
  __CFString *v5;
  void *v6;
  __CFString *v7;
  unsigned int v8;
  const __CFString *v9;
  unsigned int v10;
  int v11;
  const __CFString *v12;

  v3 = a2;
  v4 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue(-[TrackingDevice deviceUUID](v3, "deviceUUID"));
    v11 = 138543362;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: \tDevice: %{public}@", (uint8_t *)&v11, 0xCu);

    v4 = qword_100999958;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[TrackingDevice appleTypes](v3, "appleTypes"));
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allObjects"));
    v11 = 138543362;
    v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: \tTypes: %{public}@", (uint8_t *)&v11, 0xCu);

    v4 = qword_100999958;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v8 = -[TrackingDevice currentState](v3, "currentState") - 1;
    if (v8 > 2)
      v9 = CFSTR("Not Set");
    else
      v9 = off_100939438[(char)v8];
    v11 = 138543362;
    v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: \tCurrentState: %{public}@", (uint8_t *)&v11, 0xCu);
    v4 = qword_100999958;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v10 = -[TrackingDevice timeoutValue](v3, "timeoutValue");
    v11 = 67109120;
    LODWORD(v12) = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: \tTimeout: %d", (uint8_t *)&v11, 8u);
  }

}

void sub_100585BB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100585BE8(id a1, NSUUID *a2, BOOL *a3)
{
  NSUUID *v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  void *v7;
  int v8;
  NSUUID *v9;
  __int16 v10;
  void *v11;

  v3 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100939418);
  v4 = sub_1000589DC((uint64_t)off_1009778C0, v3, 0);
  v5 = qword_100999958;
  if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_100021770(v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = 138543618;
    v9 = v3;
    v10 = 2114;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tDevice: %{public}@ - %{public}@", (uint8_t *)&v8, 0x16u);

  }
}

void sub_100585CF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100585D28(id a1)
{
  operator new();
}

void sub_100585D68()
{
  operator delete();
}

void sub_100585D8C(id a1)
{
  operator new();
}

void sub_100585DCC()
{
  operator delete();
}

void sub_100585DF0(id a1)
{
  operator new();
}

void sub_100585E30()
{
  operator delete();
}

void sub_100585E54(id a1)
{
  operator new();
}

void sub_100585E94()
{
  operator delete();
}

uint64_t sub_100585EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;

  *(_QWORD *)a1 = a2;
  v4 = sub_10003BE44();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, 2);
  if (v5)
    LOBYTE(v5) = sub_100447E94(a2);
  *(_BYTE *)(a1 + 8) = v5;
  return a1;
}

uint64_t sub_100585F08(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned __int16 v6;
  uint64_t v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 8))
  {
    v6 = 0;
    v7 = sub_10034FB08();
    switch((int)a2)
    {
      case 1:
        v10 = sub_100448098(*(_QWORD *)a1);
        v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, 4294967294, v10);
        goto LABEL_12;
      case 2:
        v11 = sub_1004485A0(*(_QWORD *)a1, 0);
        v12 = sub_100448098(*(_QWORD *)a1);
        v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v11, v12);
        goto LABEL_12;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        if (!sub_100448010(*(_QWORD *)a1))
          return 0;
        v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, a2);
        if (a3 >= v8)
          return v8;
        else
          return (unsigned __int16)a3;
      case 8:
        if (!sub_100448098(*(_QWORD *)a1))
          return 0;
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
LABEL_12:
        v6 = v9;
        break;
      case 11:
        v6 = 1;
        break;
      default:
        return v6;
    }
  }
  else
  {
    return 0;
  }
  return v6;
}

uint64_t sub_100586028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int16 v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!*(_BYTE *)(a1 + 8))
    goto LABEL_15;
  v14 = sub_10034FB08();
  v15 = v14;
  switch((int)a2)
  {
    case 1:
      v19 = sub_100448098(*(_QWORD *)a1);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, 4294967294, v19, a3, a4, a5, a7);
      break;
    case 2:
      v20 = sub_1004485A0(*(_QWORD *)a1, 0);
      v21 = sub_100448098(*(_QWORD *)a1);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v20, v21, a3, a4, a5, a7);
      break;
    case 3:
    case 4:
    case 5:
    case 7:
      v16 = sub_100448010(*(_QWORD *)a1);
      if (a4 >= a6 || !v16)
        goto LABEL_15;
      v17 = a6 - a4;
      if ((int)(a6 - a4) >= (int)a5)
        v17 = a5;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 48))(v15, a2, a4, v17);
      break;
    case 8:
      if (!sub_100448098(*(_QWORD *)a1))
        goto LABEL_15;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 56))(v15, a4, a5);
      break;
    case 11:
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 64))(v14);
      break;
    default:
      goto LABEL_15;
  }
  if (!result)
LABEL_15:
    operator new();
  return result;
}

void sub_1005861C0()
{
  operator delete();
}

uint64_t sub_1005861E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  if (!*(_BYTE *)(a1 + 8))
    return 0;
  v8 = sub_10034FB08();
  v9 = v8;
  switch((int)a2)
  {
    case 2:
      v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 80);
      v12 = a3;
      v13 = a4;
      goto LABEL_8;
    case 3:
    case 4:
    case 5:
    case 7:
      if (!sub_100448010(*(_QWORD *)a1))
        return 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 48))(v9, a2, (a3 - 1), 1);
    case 8:
      if (!sub_100448098(*(_QWORD *)a1))
        return 0;
      v12 = (a3 - 1);
      v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 56);
      v8 = v9;
      v13 = 1;
LABEL_8:
      result = v11(v8, v12, v13);
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t sub_1005862D8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;

  if (!*(_BYTE *)(a1 + 8))
    return 0;
  v11 = sub_10034FB08();
  if (a2 != 2)
    return 0;
  v12 = v11;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v16 = *(_QWORD *)(a3 + 16);
  }
  v13 = (*(uint64_t (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 88))(v12, __p, a4, a5, a6);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  return v13;
}

void sub_10058639C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005863B8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v18;

  if (!*(_BYTE *)(a1 + 8))
    return 0;
  v13 = sub_10034FB08();
  if (a2 != 2)
    return 0;
  v14 = v13;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v18 = *(_QWORD *)(a3 + 16);
  }
  v15 = (*(uint64_t (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 96))(v14, __p, a4, a5, a6, a7);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  return v15;
}

void sub_10058648C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005864A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 8))
    return 0;
  v3 = sub_10034FB08();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 104))(v3, a2);
}

uint64_t sub_1005864EC(uint64_t a1, uint64_t a2)
{
  uint64_t (***v3)(_QWORD, uint64_t, _QWORD);
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 8))
    return 0;
  v3 = (uint64_t (***)(_QWORD, uint64_t, _QWORD))sub_10034FB88();
  if (a2 > 8)
    return 0;
  v4 = 0;
  if (((1 << a2) & 0x1BC) != 0)
    return (**v3)(v3, a2, 0);
  return v4;
}

uint64_t sub_10058656C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 8) && ((v3 = sub_10034FB88(), (_DWORD)a2 == 8) || (_DWORD)a2 == 2))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 8))(v3, a2);
  else
    return 0;
}

uint64_t sub_1005865C0(uint64_t a1)
{
  uint64_t v1;

  if (!*(_BYTE *)(a1 + 8))
    return 0;
  v1 = sub_10034FB88();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

void sub_1005865F8(uint64_t a1)
{
  sub_100586684(a1);
  operator delete();
}

uint64_t sub_10058661C()
{
  return 0;
}

uint64_t sub_100586624()
{
  return 0;
}

uint64_t sub_10058662C(uint64_t a1, size_t count)
{
  *(_QWORD *)a1 = off_100939490;
  *(_WORD *)(a1 + 8) = count;
  *(_QWORD *)(a1 + 16) = 0;
  if ((_DWORD)count)
    *(_QWORD *)(a1 + 16) = malloc_type_calloc(count, 8uLL, 0x2004093837F09uLL);
  return a1;
}

uint64_t sub_100586684(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_100939490;
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    v3 = *(unsigned __int16 *)(a1 + 8);
    if (*(_WORD *)(a1 + 8))
    {
      v4 = 0;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4);
        if (v5)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
          v3 = *(unsigned __int16 *)(a1 + 8);
        }
        ++v4;
      }
      while (v4 < v3);
      v2 = *(void **)(a1 + 16);
    }
    free(v2);
  }
  return a1;
}

uint64_t sub_1005866FC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8);
}

uint64_t sub_100586704(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;

  if (*(unsigned __int16 *)(a1 + 8) <= a2)
    return 0;
  result = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
  if (!result)
  {
    v4 = a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4);
  }
  return result;
}

uint64_t sub_100586764(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t result;

  if (*(unsigned __int16 *)(a1 + 8) <= a2)
  {
    v4 = qword_100999888;
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_FAULT))
      sub_100705BF0(v4);
  }
  v5 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD *)(v5 + 8 * a2);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v5 = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)(v5 + 8 * a2) = 0;
  return result;
}

uint64_t sub_1005867E4(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  __int128 v4;
  void *v5[2];
  __int128 v6;
  void *v7[2];
  __int128 v8;
  void *__p[2];
  _OWORD v10[3];
  __int128 v11;
  uint64_t v12;

  v2 = *(_DWORD *)(a2 + 768);
  switch(v2)
  {
    case 1:
    case 4:
      operator new();
    case 2:
      operator new();
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 8:
      operator new();
    default:
      if (v2 == 16)
        operator new();
      if (v2 == 32)
      {
        v12 = 0;
        v11 = 0u;
        memset(v10, 0, sizeof(v10));
        v8 = 0u;
        *(_OWORD *)__p = 0u;
        v6 = 0u;
        *(_OWORD *)v7 = 0u;
        v4 = 0u;
        *(_OWORD *)v5 = 0u;
        sub_1005BCCCC((uint64_t)&v4 + 1);
        BYTE2(v5[0]) = 0;
        BYTE4(v5[0]) = 0;
        BYTE2(v7[0]) = 0;
        BYTE4(v7[0]) = 0;
        DWORD1(v10[1]) = 0;
        v6 = 0uLL;
        v5[1] = 0;
        LOBYTE(v7[0]) = 0;
        v8 = 0uLL;
        v7[1] = 0;
        LOBYTE(__p[0]) = 0;
        memset(v10, 0, 19);
        __p[1] = 0;
        BYTE8(v10[1]) = 1;
        BYTE2(v12) = 0;
        *(_QWORD *)((char *)&v10[1] + 14) = 0;
        *(_QWORD *)((char *)&v10[1] + 9) = 0;
        v11 = 0uLL;
        *((_QWORD *)&v10[2] + 1) = 0;
        LOBYTE(v12) = 0;
        operator new();
      }
      return result;
  }
  if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
    sub_100705C70();
  return 0;
}

void sub_100586A50()
{
  operator delete();
}

double sub_100586AB8(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 0x200000000;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)a1 = off_1009394C0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 1;
  return result;
}

uint64_t sub_100586AE4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009394C0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_100586B20(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009394C0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  operator delete();
}

uint64_t sub_100586B6C(uint64_t a1)
{
  std::string *p_p;
  std::string *v3;
  std::string::size_type v4;
  char v5;
  uint64_t v6;
  std::string __p;
  void *v9[2];
  uint64_t v10;
  _QWORD v11[2];

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100939AB0);
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  sub_1004792EC((uint64_t)off_100977890, (uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  sub_100091AE8(v9, (char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::operator+<char>(&__p, "\"", v9);
  v3 = std::string::append(&__p, "\"");
  v4 = v3->__r_.__value_.__r.__words[0];
  v11[0] = v3->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v11 + 7) = *(std::string::size_type *)((char *)&v3->__r_.__value_.__r.__words[1] + 7);
  v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v6 = v11[0];
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 31) = *(_QWORD *)((char *)v11 + 7);
  *(_BYTE *)(a1 + 39) = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  return 1;
}

void sub_100586CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100586D08(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;
  std::string *v5;
  __int128 v6;
  const std::string::value_type *v7;
  uint64_t v8;
  const std::string::value_type *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  void *__p[2];
  unsigned __int8 v23;
  void *v24[2];
  unsigned __int8 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;

  sub_100091AE8(&v26, "\r\n");
  if (*(_DWORD *)(a1 + 40) == 1)
    v4 = "+CGMI: ";
  else
    v4 = "+GMI: ";
  v5 = std::string::append(&v26, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v9 = *(const std::string::value_type **)(a1 + 16);
  v8 = a1 + 16;
  v7 = v9;
  v10 = *(char *)(v8 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)v8;
  else
    v11 = v7;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v8 + 23);
  else
    v12 = *(_QWORD *)(v8 + 8);
  v13 = std::string::append(&v27, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(v24, "\r\n");
  if ((v25 & 0x80u) == 0)
    v15 = v24;
  else
    v15 = (void **)v24[0];
  if ((v25 & 0x80u) == 0)
    v16 = v25;
  else
    v16 = (std::string::size_type)v24[1];
  v17 = std::string::append(&v28, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(__p, "\r\nOK\r\n");
  if ((v23 & 0x80u) == 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v20 = v23;
  else
    v20 = (std::string::size_type)__p[1];
  v21 = std::string::append(&v29, (const std::string::value_type *)v19, v20);
  *a2 = *v21;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((char)v23 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if ((char)v25 < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_100586EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100586F44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

double sub_100586F4C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 0x200000001;
  *(_QWORD *)(a1 + 8) = 0x200000001;
  *(_QWORD *)a1 = off_1009394F0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 1;
  return result;
}

uint64_t sub_100586F78(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009394F0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_100586FB4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009394F0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  operator delete();
}

uint64_t sub_100587000(uint64_t a1)
{
  void **v2;
  void *__p[2];
  char v5;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100939AB0);
  sub_1004791EC((uint64_t)off_100977890, (uint64_t)__p);
  if (v5 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  std::string::assign((std::string *)(a1 + 16), (const std::string::value_type *)v2);
  if (v5 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_10058708C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005870A8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;
  std::string *v5;
  __int128 v6;
  const std::string::value_type *v7;
  uint64_t v8;
  const std::string::value_type *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  void *__p[2];
  unsigned __int8 v23;
  void *v24[2];
  unsigned __int8 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;

  sub_100091AE8(&v26, "\r\n");
  if (*(_DWORD *)(a1 + 40) == 1)
    v4 = "+CGMM: ";
  else
    v4 = "+GMM: ";
  v5 = std::string::append(&v26, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v9 = *(const std::string::value_type **)(a1 + 16);
  v8 = a1 + 16;
  v7 = v9;
  v10 = *(char *)(v8 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)v8;
  else
    v11 = v7;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v8 + 23);
  else
    v12 = *(_QWORD *)(v8 + 8);
  v13 = std::string::append(&v27, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(v24, "\r\n");
  if ((v25 & 0x80u) == 0)
    v15 = v24;
  else
    v15 = (void **)v24[0];
  if ((v25 & 0x80u) == 0)
    v16 = v25;
  else
    v16 = (std::string::size_type)v24[1];
  v17 = std::string::append(&v28, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(__p, "\r\nOK\r\n");
  if ((v23 & 0x80u) == 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v20 = v23;
  else
    v20 = (std::string::size_type)__p[1];
  v21 = std::string::append(&v29, (const std::string::value_type *)v19, v20);
  *a2 = *v21;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((char)v23 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if ((char)v25 < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_100587250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

double sub_1005872E4(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 0x200000002;
  *(_QWORD *)(a1 + 8) = 0x200000002;
  *(_QWORD *)a1 = off_100939520;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 1;
  return result;
}

uint64_t sub_10058730C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100939520;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_100587348(uint64_t a1)
{
  *(_QWORD *)a1 = off_100939520;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  operator delete();
}

uint64_t sub_100587394(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  char v9;

  v9 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(v7, "HFP");
  sub_100091AE8(__p, "HideGeneralRevision");
  (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v2 + 72))(v2, v7, __p, &v9);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v9)
  {
    std::string::assign((std::string *)(a1 + 16), "Unknown");
  }
  else
  {
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_100939AB0);
    sub_10047926C((uint64_t)off_100977890, (uint64_t)v7);
    if (v8 >= 0)
      v3 = v7;
    else
      v3 = (void **)v7[0];
    std::string::assign((std::string *)(a1 + 16), (const std::string::value_type *)v3);
    if (v8 < 0)
      operator delete(v7[0]);
  }
  return 1;
}

void sub_1005874A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005874DC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;
  std::string *v5;
  __int128 v6;
  const std::string::value_type *v7;
  uint64_t v8;
  const std::string::value_type *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  void *__p[2];
  unsigned __int8 v23;
  void *v24[2];
  unsigned __int8 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;

  sub_100091AE8(&v26, "\r\n");
  if (*(_DWORD *)(a1 + 40) == 1)
    v4 = "+CGMR: ";
  else
    v4 = "+GMR: ";
  v5 = std::string::append(&v26, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v9 = *(const std::string::value_type **)(a1 + 16);
  v8 = a1 + 16;
  v7 = v9;
  v10 = *(char *)(v8 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)v8;
  else
    v11 = v7;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v8 + 23);
  else
    v12 = *(_QWORD *)(v8 + 8);
  v13 = std::string::append(&v27, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(v24, "\r\n");
  if ((v25 & 0x80u) == 0)
    v15 = v24;
  else
    v15 = (void **)v24[0];
  if ((v25 & 0x80u) == 0)
    v16 = v25;
  else
    v16 = (std::string::size_type)v24[1];
  v17 = std::string::append(&v28, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(__p, "\r\nOK\r\n");
  if ((v23 & 0x80u) == 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v20 = v23;
  else
    v20 = (std::string::size_type)__p[1];
  v21 = std::string::append(&v29, (const std::string::value_type *)v19, v20);
  *a2 = *v21;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((char)v23 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if ((char)v25 < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_100587684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

double sub_100587718(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 0x200000003;
  *(_QWORD *)(a1 + 8) = 0x200000003;
  *(_QWORD *)a1 = off_100939550;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 1;
  return result;
}

uint64_t sub_100587744(uint64_t a1)
{
  *(_QWORD *)a1 = off_100939550;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_100587780(uint64_t a1)
{
  *(_QWORD *)a1 = off_100939550;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  operator delete();
}

BOOL sub_1005877CC()
{
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100939AD0);
  return sub_1005D47D8((uint64_t)off_10097AB00) == 0;
}

void sub_100587828(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const std::string::value_type *v4;
  std::string *v5;
  __int128 v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  void *__p[2];
  unsigned __int8 v21;
  void *v22[2];
  unsigned __int8 v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;

  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_3;
LABEL_38:
    sub_100091AE8(a2, "\r\nERROR\r\n");
    return;
  }
  if (!*(_BYTE *)(a1 + 39))
    goto LABEL_38;
LABEL_3:
  sub_100091AE8(&v24, "\r\n");
  if (*(_DWORD *)(a1 + 40) == 1)
    v4 = "+CGSN: ";
  else
    v4 = "+GSN: ";
  v5 = std::string::append(&v24, v4);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = *(char *)(a1 + 39);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)(a1 + 16);
  else
    v8 = *(const std::string::value_type **)(a1 + 16);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 39);
  else
    v9 = *(_QWORD *)(a1 + 24);
  v10 = std::string::append(&v25, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(v22, "\r\n");
  if ((v23 & 0x80u) == 0)
    v12 = v22;
  else
    v12 = (void **)v22[0];
  if ((v23 & 0x80u) == 0)
    v13 = v23;
  else
    v13 = (std::string::size_type)v22[1];
  v14 = std::string::append(&v26, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(__p, "\r\nOK\r\n");
  if ((v21 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v21 & 0x80u) == 0)
    v17 = v21;
  else
    v17 = (std::string::size_type)__p[1];
  v18 = std::string::append(&v27, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  a2[2] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((char)v21 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if ((char)v23 < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_100587A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100587A98(uint64_t a1, uint64_t a2, int a3, char *__s)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  void **v8;
  unint64_t v9;
  int *v10;
  size_t v11;
  std::string *v13;
  int v14;
  void *v15;
  std::string::size_type v16;
  const void *p_p;
  std::string::size_type size;
  std::string *v19;
  size_t v20;
  _BOOL4 v21;
  _BOOL4 v22;
  std::string v24;
  std::string v25;
  void *__p;
  std::string::size_type v27;
  uint64_t v28;

  *(_DWORD *)(a1 + 8) = 4;
  *(_DWORD *)(a1 + 12) = a3;
  *(_QWORD *)a1 = off_100939580;
  *(_QWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  if (a3 == 2)
  {
    __p = 0;
    v27 = 0;
    v28 = 0;
    sub_100091AE8(&__p, __s);
    v5 = 0;
    while (1)
    {
      v6 = SHIBYTE(dword_100993370[v5 + 15]);
      v7 = v28 >= 0 ? HIBYTE(v28) : v27;
      v8 = v28 >= 0 ? &__p : (void **)__p;
      v9 = v6 >= 0 ? HIBYTE(dword_100993370[v5 + 15]) : *(_QWORD *)&dword_100993370[v5 + 12];
      v10 = v6 >= 0 ? &dword_100993370[v5 + 10] : *(int **)&dword_100993370[v5 + 10];
      v11 = v9 >= v7 ? v7 : v9;
      if (!memcmp(v8, v10, v11) && v9 == v7)
        break;
      std::operator+<char>(&v24, "\"", &dword_100993370[v5 + 10]);
      v13 = std::string::append(&v24, "\"");
      v25 = *v13;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v14 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
      v15 = (void *)v25.__r_.__value_.__r.__words[0];
      if (v28 >= 0)
        v16 = HIBYTE(v28);
      else
        v16 = v27;
      if (v28 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      else
        size = v25.__r_.__value_.__l.__size_;
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v25;
      else
        v19 = (std::string *)v25.__r_.__value_.__r.__words[0];
      if (size >= v16)
        v20 = v16;
      else
        v20 = size;
      v21 = memcmp(p_p, v19, v20) == 0;
      v22 = size == v16 && v21;
      if (v14 < 0)
        operator delete(v15);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (v22)
        break;
      v5 += 8;
      if (v5 == 40)
        goto LABEL_48;
    }
    *(_DWORD *)(a1 + 16) = dword_100993370[v5 + 8];
LABEL_48:
    if (SHIBYTE(v28) < 0)
      operator delete(__p);
  }
  return a1;
}

void sub_100587C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_100587C98()
{
  operator delete();
}

uint64_t sub_100587CAC(uint64_t a1)
{
  int v1;
  int32x2_t v2;
  int32x2_t v3;
  int v4;

  v1 = *(_DWORD *)(a1 + 12);
  if (v1 == 2)
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (v4 != 1)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 768) = v4;
      return 1;
    }
    return 0;
  }
  if (v1 == 1)
  {
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 768);
    return 1;
  }
  if (v1)
    return 0;
  v2 = *(int32x2_t *)(a1 + 20);
  v3 = vadd_s32(v2, (int32x2_t)0x500000005);
  v2.i32[0] |= 0x3Eu;
  v2.i32[1] = v3.i32[1];
  *(int32x2_t *)(a1 + 20) = v2;
  return 1;
}

void sub_100587D14(_DWORD *a1@<X0>, std::string *a2@<X8>)
{
  char *v4;
  const std::string::value_type *p_p;
  std::string::size_type v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  uint64_t i;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  void *__p;
  std::string::size_type v23;
  unsigned __int8 v24;
  std::string v25;

  memset(&v25, 0, sizeof(v25));
  v4 = "\r\nERROR\r\n";
  switch(a1[3])
  {
    case 0:
      sub_100091AE8(&__p, "\r\n");
      if ((v24 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v24 & 0x80u) == 0)
        v6 = v24;
      else
        v6 = v23;
      std::string::append(&v25, p_p, v6);
      if ((char)v24 < 0)
        operator delete(__p);
      std::string::append(&v25, "+CSCS: (");
      v7 = 0;
      v8 = 0;
      do
      {
        if ((dword_100993370[v7] & a1[5]) != 0)
        {
          if (v8)
            std::string::append(&v25, ",");
          v9 = SHIBYTE(dword_100993370[v7 + 7]);
          if (v9 >= 0)
            v10 = (const std::string::value_type *)&dword_100993370[v7 + 2];
          else
            v10 = *(const std::string::value_type **)&dword_100993370[v7 + 2];
          if (v9 >= 0)
            v11 = HIBYTE(dword_100993370[v7 + 7]);
          else
            v11 = *(_QWORD *)&dword_100993370[v7 + 4];
          std::string::append(&v25, v10, v11);
          ++v8;
        }
        v7 += 8;
      }
      while (v7 != 48);
      std::string::append(&v25, ")");
      goto LABEL_41;
    case 1:
      sub_100091AE8(&__p, "\r\n");
      if ((v24 & 0x80u) == 0)
        v12 = (const std::string::value_type *)&__p;
      else
        v12 = (const std::string::value_type *)__p;
      if ((v24 & 0x80u) == 0)
        v13 = v24;
      else
        v13 = v23;
      std::string::append(&v25, v12, v13);
      if ((char)v24 < 0)
        operator delete(__p);
      std::string::append(&v25, "+CSCS: ");
      for (i = 0; i != 48; i += 8)
      {
        if (a1[4] == dword_100993370[i])
        {
          v15 = SHIBYTE(dword_100993370[i + 7]);
          if (v15 >= 0)
            v16 = (const std::string::value_type *)&dword_100993370[i + 2];
          else
            v16 = *(const std::string::value_type **)&dword_100993370[i + 2];
          if (v15 >= 0)
            v17 = HIBYTE(dword_100993370[i + 7]);
          else
            v17 = *(_QWORD *)&dword_100993370[i + 4];
          std::string::append(&v25, v16, v17);
        }
      }
      goto LABEL_41;
    case 2:
      if (a1[4] != 1)
        v4 = "\r\nOK\r\n";
      goto LABEL_60;
    case 3:
LABEL_60:
      sub_100091AE8(a2, v4);
      break;
    default:
LABEL_41:
      sub_100091AE8(&__p, "\r\n");
      if ((v24 & 0x80u) == 0)
        v18 = (const std::string::value_type *)&__p;
      else
        v18 = (const std::string::value_type *)__p;
      if ((v24 & 0x80u) == 0)
        v19 = v24;
      else
        v19 = v23;
      std::string::append(&v25, v18, v19);
      if ((char)v24 < 0)
        operator delete(__p);
      sub_100091AE8(&__p, "\r\nOK\r\n");
      if ((v24 & 0x80u) == 0)
        v20 = (const std::string::value_type *)&__p;
      else
        v20 = (const std::string::value_type *)__p;
      if ((v24 & 0x80u) == 0)
        v21 = v24;
      else
        v21 = v23;
      std::string::append(&v25, v20, v21);
      if ((char)v24 < 0)
        operator delete(__p);
      *a2 = v25;
      memset(&v25, 0, sizeof(v25));
      break;
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_100587FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

double sub_100588024(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = 0x200000005;
  a1[1] = 0x200000005;
  *a1 = off_1009395B0;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  return result;
}

uint64_t sub_100588048(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009395B0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_100588084(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009395B0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  operator delete();
}

BOOL sub_1005880D0()
{
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100939AD0);
  return sub_1005D47C8((uint64_t)off_10097AB00) == 0;
}

void sub_10058812C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void *__p[2];
  unsigned __int8 v20;
  void *v21[2];
  unsigned __int8 v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;

  if (*(char *)(a1 + 39) < 0)
  {
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_3;
LABEL_35:
    sub_100091AE8(a2, "\r\nERROR\r\n");
    return;
  }
  if (!*(_BYTE *)(a1 + 39))
    goto LABEL_35;
LABEL_3:
  sub_100091AE8(&v23, "\r\n");
  v4 = std::string::append(&v23, "+CIMI: ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *(char *)(a1 + 39);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)(a1 + 16);
  else
    v7 = *(const std::string::value_type **)(a1 + 16);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 39);
  else
    v8 = *(_QWORD *)(a1 + 24);
  v9 = std::string::append(&v24, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(v21, "\r\n");
  if ((v22 & 0x80u) == 0)
    v11 = v21;
  else
    v11 = (void **)v21[0];
  if ((v22 & 0x80u) == 0)
    v12 = v22;
  else
    v12 = (std::string::size_type)v21[1];
  v13 = std::string::append(&v25, (const std::string::value_type *)v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(__p, "\r\nOK\r\n");
  if ((v20 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v16 = v20;
  else
    v16 = (std::string::size_type)__p[1];
  v17 = std::string::append(&v26, (const std::string::value_type *)v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  a2[2] = *((_QWORD *)&v17->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((char)v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1005882F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100588388(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = 7;
  *(_DWORD *)(result + 12) = a2;
  *(_QWORD *)result = off_1009395E0;
  return result;
}

void sub_1005883A4()
{
  operator delete();
}

uint64_t sub_1005883B8()
{
  return 1;
}

void sub_1005883C0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::string *v3;
  __int128 v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  __int128 v8;
  const std::string::value_type *p_p;
  std::string::size_type v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  void *__p;
  std::string::size_type v21;
  unsigned __int8 v22;
  void *v23;
  std::string::size_type v24;
  unsigned __int8 v25;
  std::string v26;
  std::string v27;
  std::string v28;

  switch(*(_DWORD *)(a1 + 12))
  {
    case 0:
      sub_100091AE8(&v26, "\r\n");
      v3 = std::string::append(&v26, "+CREG: 1");
      v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v4;
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
      v3->__r_.__value_.__r.__words[0] = 0;
      sub_100091AE8(&v23, "\r\n");
      if ((v25 & 0x80u) == 0)
        v5 = (const std::string::value_type *)&v23;
      else
        v5 = (const std::string::value_type *)v23;
      if ((v25 & 0x80u) == 0)
        v6 = v25;
      else
        v6 = v24;
      v7 = std::string::append(&v27, v5, v6);
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      sub_100091AE8(&__p, "\r\nOK\r\n");
      if ((v22 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v22 & 0x80u) == 0)
        v10 = v22;
      else
        v10 = v21;
      goto LABEL_27;
    case 1:
      sub_100091AE8(&v26, "\r\n");
      v12 = std::string::append(&v26, "+CREG: 1,1");
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      sub_100091AE8(&v23, "\r\n");
      if ((v25 & 0x80u) == 0)
        v14 = (const std::string::value_type *)&v23;
      else
        v14 = (const std::string::value_type *)v23;
      if ((v25 & 0x80u) == 0)
        v15 = v25;
      else
        v15 = v24;
      v16 = std::string::append(&v27, v14, v15);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      sub_100091AE8(&__p, "\r\nOK\r\n");
      if ((v22 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v22 & 0x80u) == 0)
        v10 = v22;
      else
        v10 = v21;
LABEL_27:
      v18 = std::string::append(&v28, p_p, v10);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      a2[2] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if ((char)v22 < 0)
        operator delete(__p);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if ((char)v25 < 0)
        operator delete(v23);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      return;
    case 2:
      v11 = "\r\nOK\r\n";
      goto LABEL_39;
    default:
      v11 = "\r\nERROR\r\n";
LABEL_39:
      sub_100091AE8(a2, v11);
      return;
  }
}

void sub_10058860C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10058869C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = 8;
  *(_DWORD *)(result + 12) = a2;
  *(_QWORD *)result = off_100939610;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1005886BC(uint64_t a1)
{
  *(_QWORD *)a1 = off_100939610;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1005886F8(uint64_t a1)
{
  *(_QWORD *)a1 = off_100939610;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  operator delete();
}

BOOL sub_100588744(uint64_t a1)
{
  int v2;
  void **v3;
  __int128 v5;
  void *v6;
  void *__p[4];

  memset(__p, 0, sizeof(__p));
  sub_100091AE8(&__p[1], "");
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100939AD0);
  v2 = sub_1005D47E8((uint64_t)off_10097AB00);
  if (!v2)
  {
    if (SHIBYTE(__p[3]) < 0)
    {
      sub_10003430C(&v5, __p[1], (unint64_t)__p[2]);
    }
    else
    {
      v5 = *(_OWORD *)&__p[1];
      v6 = __p[3];
    }
    v3 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v3);
    *(_OWORD *)v3 = v5;
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  return v2 == 0;
}

void sub_100588834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_100588854@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  double result;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  char v23;
  uint64_t v24;
  void *__p[2];
  unsigned __int8 v26;
  void *v27[2];
  unsigned __int8 v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  _QWORD v34[2];

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = sub_100091AE8((_QWORD *)a3, "\r\nERROR\r\n");
  switch(*(_DWORD *)(a1 + 12))
  {
    case 0:
    case 3:
      sub_100091AE8(&v33, "\r\nERROR\r\n");
      goto LABEL_40;
    case 1:
      v8 = sub_1005867E4((uint64_t)v6, a2);
      sub_100091AE8(&v30, "\r\n");
      v9 = std::string::append(&v30, "+COPS: 0,0,");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      sub_1002D20AC(v8, (const char *)(a1 + 16), &v29);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v29;
      else
        v11 = (std::string *)v29.__r_.__value_.__r.__words[0];
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      else
        size = v29.__r_.__value_.__l.__size_;
      v13 = std::string::append(&v31, (const std::string::value_type *)v11, size);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      sub_100091AE8(v27, "\r\n");
      if ((v28 & 0x80u) == 0)
        v15 = v27;
      else
        v15 = (void **)v27[0];
      if ((v28 & 0x80u) == 0)
        v16 = v28;
      else
        v16 = (std::string::size_type)v27[1];
      v17 = std::string::append(&v32, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      sub_100091AE8(__p, "\r\nOK\r\n");
      if ((v26 & 0x80u) == 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      if ((v26 & 0x80u) == 0)
        v20 = v26;
      else
        v20 = (std::string::size_type)__p[1];
      v21 = std::string::append(&v33, (const std::string::value_type *)v19, v20);
      v22 = v21->__r_.__value_.__r.__words[0];
      v34[0] = v21->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
      v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      v24 = v34[0];
      *(_QWORD *)a3 = v22;
      *(_QWORD *)(a3 + 8) = v24;
      *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v34 + 7);
      *(_BYTE *)(a3 + 23) = v23;
      if ((char)v26 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if ((char)v28 < 0)
        operator delete(v27[0]);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      break;
    case 2:
      sub_100091AE8(&v33, "\r\nOK\r\n");
LABEL_40:
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      result = *(double *)&v33.__r_.__value_.__l.__data_;
      *(std::string *)a3 = v33;
      break;
    default:
      return result;
  }
  return result;
}

void sub_100588B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;
  uint64_t v46;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v46 - 73) < 0)
    operator delete(*(void **)(v46 - 96));
  if (a20 < 0)
    operator delete(a15);
  if (a45 < 0)
    operator delete(a40);
  if (a26 < 0)
    operator delete(a21);
  if (a38 < 0)
    operator delete(a33);
  if (a32 < 0)
    operator delete(a27);
  if (*(char *)(v45 + 23) < 0)
    operator delete(*(void **)v45);
  _Unwind_Resume(exception_object);
}

double sub_100588C00(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = 0x200000009;
  a1[1] = 0x200000009;
  *a1 = off_100939640;
  return result;
}

void sub_100588C20()
{
  operator delete();
}

uint64_t sub_100588C34()
{
  return 1;
}

void sub_100588C3C(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v12;
  void *v13[2];
  unsigned __int8 v14;
  std::string v15;
  std::string v16;
  std::string v17;

  sub_100091AE8(&v15, "\r\n");
  v2 = std::string::append(&v15, "+CPAS: READY");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(v13, "\r\n");
  if ((v14 & 0x80u) == 0)
    v4 = v13;
  else
    v4 = (void **)v13[0];
  if ((v14 & 0x80u) == 0)
    v5 = v14;
  else
    v5 = (std::string::size_type)v13[1];
  v6 = std::string::append(&v16, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(__p, "\r\nOK\r\n");
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v9 = v12;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v17, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if ((char)v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_100588D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

double sub_100588DFC(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = 0x20000000ALL;
  a1[1] = 0x20000000ALL;
  *a1 = off_100939670;
  return result;
}

void sub_100588E1C()
{
  operator delete();
}

uint64_t sub_100588E30()
{
  return 1;
}

void sub_100588E38(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v12;
  void *v13[2];
  unsigned __int8 v14;
  std::string v15;
  std::string v16;
  std::string v17;

  sub_100091AE8(&v15, "\r\n");
  v2 = std::string::append(&v15, "+CPIN: READY");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(v13, "\r\n");
  if ((v14 & 0x80u) == 0)
    v4 = v13;
  else
    v4 = (void **)v13[0];
  if ((v14 & 0x80u) == 0)
    v5 = v14;
  else
    v5 = (std::string::size_type)v13[1];
  v6 = std::string::append(&v16, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(__p, "\r\nOK\r\n");
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v9 = v12;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v17, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if ((char)v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_100588F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100588FF8(_QWORD *a1)
{
  a1[1] = 0x20000000BLL;
  *a1 = off_1009396A0;
  sub_100091AE8(a1 + 2, "0,0");
  return a1;
}

uint64_t sub_10058903C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009396A0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_100589078(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009396A0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  operator delete();
}

uint64_t sub_1005890C4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  __int128 v7;
  uint64_t v8;
  __int16 v9;
  _OWORD v10[4];
  void *__p[2];
  __int128 v12;
  __int128 v13;
  _OWORD v14[9];
  uint64_t v15;

  v15 = 0;
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  memset(v10, 0, sizeof(v10));
  sub_100272ADC((uint64_t)v10);
  v9 = 0;
  v2 = sub_100038E50();
  (*(void (**)(uint64_t, char *, __int16 *))(*(_QWORD *)v2 + 96))(v2, (char *)&v9 + 1, &v9);
  v3 = (_QWORD *)std::ostream::operator<<(v10, HIBYTE(v9));
  v4 = sub_1002614D8(v3, (uint64_t)",", 1);
  std::ostream::operator<<(v4, v9);
  std::stringbuf::str((char *)v10 + 8);
  v5 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(a1 + 32) = v8;
  if (SHIBYTE(v12) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v10 + 8);
  std::ios::~ios(v14);
  return 1;
}

void sub_1005891F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100272CFC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100589210(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  const std::string::value_type *v6;
  uint64_t v7;
  const std::string::value_type *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string::size_type v19;
  std::string *v20;
  void *__p[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;

  sub_100091AE8(&v25, "\r\n");
  v4 = std::string::append(&v25, "+CBC: ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v8 = *(const std::string::value_type **)(a1 + 16);
  v7 = a1 + 16;
  v6 = v8;
  v9 = *(char *)(v7 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)v7;
  else
    v10 = v6;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(v7 + 23);
  else
    v11 = *(_QWORD *)(v7 + 8);
  v12 = std::string::append(&v26, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(v23, "\r\n");
  if ((v24 & 0x80u) == 0)
    v14 = v23;
  else
    v14 = (void **)v23[0];
  if ((v24 & 0x80u) == 0)
    v15 = v24;
  else
    v15 = (std::string::size_type)v23[1];
  v16 = std::string::append(&v27, (const std::string::value_type *)v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(__p, "\r\nOK\r\n");
  if ((v22 & 0x80u) == 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if ((v22 & 0x80u) == 0)
    v19 = v22;
  else
    v19 = (std::string::size_type)__p[1];
  v20 = std::string::append(&v28, (const std::string::value_type *)v18, v19);
  *a2 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if ((char)v22 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if ((char)v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1005893A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100589438(_QWORD *a1)
{
  a1[1] = 0x20000000CLL;
  *a1 = off_1009396D0;
  sub_100091AE8(a1 + 2, "0");
  return a1;
}

uint64_t sub_10058947C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009396D0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1005894B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009396D0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  operator delete();
}

uint64_t sub_100589504(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  std::string::value_type __s[2];
  char v6;
  int v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  std::string::value_type *v11;
  __int16 v12;
  _QWORD *v13;

  v7 = 0;
  v6 = 0;
  *(_WORD *)__s = 0;
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100939AD0);
  sub_1005D4808((uint64_t)off_10097AB00);
  v7 = 31;
  sprintf(__s, "%2d", 31);
  v2 = (_QWORD *)(a1 + 16);
  std::string::assign((std::string *)(a1 + 16), __s);
  v3 = qword_100999888;
  if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 39) < 0)
      v2 = (_QWORD *)*v2;
    *(_DWORD *)buf = 67109634;
    v9 = v7;
    v10 = 2082;
    v11 = __s;
    v12 = 2082;
    v13 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Reporting signal quality %i (== %{public}s == %{public}s)", buf, 0x1Cu);
  }
  return 1;
}

void sub_100589678(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  const std::string::value_type *v6;
  uint64_t v7;
  const std::string::value_type *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  void *__p[2];
  unsigned __int8 v24;
  void *v25[2];
  unsigned __int8 v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;

  sub_100091AE8(&v27, "\r\n");
  v4 = std::string::append(&v27, "+CSQ: ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v8 = *(const std::string::value_type **)(a1 + 16);
  v7 = a1 + 16;
  v6 = v8;
  v9 = *(char *)(v7 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)v7;
  else
    v10 = v6;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(v7 + 23);
  else
    v11 = *(_QWORD *)(v7 + 8);
  v12 = std::string::append(&v28, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v29, ",99");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(v25, "\r\n");
  if ((v26 & 0x80u) == 0)
    v16 = v25;
  else
    v16 = (void **)v25[0];
  if ((v26 & 0x80u) == 0)
    v17 = v26;
  else
    v17 = (std::string::size_type)v25[1];
  v18 = std::string::append(&v30, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(__p, "\r\nOK\r\n");
  if ((v24 & 0x80u) == 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if ((v24 & 0x80u) == 0)
    v21 = v24;
  else
    v21 = (std::string::size_type)__p[1];
  v22 = std::string::append(&v31, (const std::string::value_type *)v20, v21);
  *a2 = *v22;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((char)v24 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if ((char)v26 < 0)
    operator delete(v25[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_100589850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 41) < 0)
    operator delete(*(void **)(v40 - 64));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v40 - 73) < 0)
    operator delete(*(void **)(v40 - 96));
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005898FC(uint64_t a1, uint64_t a2, int a3, const char *a4)
{
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)(a1 + 8) = 13;
  *(_DWORD *)(a1 + 12) = a3;
  *(_QWORD *)a1 = off_1009397F0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, 2) && *(_DWORD *)(a1 + 12) == 2)
  {
    v7 = 0;
    if (*a4 == 34)
      ++a4;
    while (strncmp(a4, *(const char **)&dword_1009396F0[v7 + 2], 2uLL))
    {
      v7 += 4;
      if (v7 == 60)
        return a1;
    }
    *(_DWORD *)(a1 + 24) = dword_1009396F0[v7];
  }
  return a1;
}

void sub_1005899B8()
{
  operator delete();
}

uint64_t sub_1005899CC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10003BE44();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, 2);
  if ((_DWORD)result)
  {
    result = 1;
    switch(*(_DWORD *)(a1 + 12))
    {
      case 0:
        return result;
      case 1:
        *(_DWORD *)(a1 + 24) = sub_10058E040(a2, *(_QWORD *)(a1 + 16));
        *(_DWORD *)(a1 + 28) = sub_10058E074((uint64_t)a2, *(_QWORD *)(a1 + 16));
        goto LABEL_5;
      case 2:
        if ((sub_10058DEF8((uint64_t)a2, *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 24)) & 1) != 0)
        {
LABEL_5:
          result = 1;
        }
        else
        {
          *(_DWORD *)(a1 + 24) = 0;
LABEL_7:
          result = 0;
        }
        break;
      default:
        goto LABEL_7;
    }
  }
  return result;
}

void sub_100589A74(_DWORD *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  const std::string::value_type *p_p;
  std::string::size_type v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  void *__p;
  std::string::size_type v13;
  unsigned __int8 v14;
  std::string v15;
  char __str[8];
  int v17;

  v4 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, 2) & 1) != 0)
  {
    memset(&v15, 0, sizeof(v15));
    sub_100091AE8(&v15, "\r\n");
    std::string::append(&v15, "+CPBS: ");
    v5 = "\r\nERROR\r\n";
    v6 = "(\"SM\",\"ON\",\"ME\",\"DC\",\"MC\",\"RC\")";
    switch(a1[3])
    {
      case 0:
        goto LABEL_12;
      case 1:
        std::string::append(&v15, "\"");
        v7 = 0;
        break;
      case 2:
        if (a1[6])
        {
          v5 = "\r\nOK\r\n";
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
            sub_100705C9C();
          v5 = "\r\n+CME ERROR: 22\r\n";
        }
        goto LABEL_33;
      case 3:
LABEL_33:
        sub_100091AE8(a2, v5);
        goto LABEL_34;
      default:
        goto LABEL_13;
    }
    while (a1[6] != dword_1009396F0[v7])
    {
      v7 += 4;
      if (v7 == 60)
        goto LABEL_11;
    }
    std::string::append(&v15, *(const std::string::value_type **)&dword_1009396F0[v7 + 2]);
LABEL_11:
    std::string::append(&v15, "\",");
    v17 = 0;
    *(_QWORD *)__str = 0;
    snprintf(__str, 0xCuLL, "%d", a1[7]);
    std::string::append(&v15, __str);
    std::string::append(&v15, ",");
    v6 = __str;
    snprintf(__str, 0xCuLL, "%d", a1[7] + 100);
LABEL_12:
    std::string::append(&v15, v6);
LABEL_13:
    sub_100091AE8(&__p, "\r\n");
    if ((v14 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v14 & 0x80u) == 0)
      v9 = v14;
    else
      v9 = v13;
    std::string::append(&v15, p_p, v9);
    if ((char)v14 < 0)
      operator delete(__p);
    sub_100091AE8(&__p, "\r\nOK\r\n");
    if ((v14 & 0x80u) == 0)
      v10 = (const std::string::value_type *)&__p;
    else
      v10 = (const std::string::value_type *)__p;
    if ((v14 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = v13;
    std::string::append(&v15, v10, v11);
    if ((char)v14 < 0)
      operator delete(__p);
    *a2 = v15;
    memset(&v15, 0, sizeof(v15));
LABEL_34:
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_100091AE8(a2, "\r\nERROR\r\n");
  }
}

void sub_100589D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100589D90(uint64_t a1, uint64_t a2, int a3, const char *a4)
{
  unsigned int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  char __dst[8];
  __int16 v14;

  *(_DWORD *)(a1 + 8) = 14;
  *(_DWORD *)(a1 + 12) = a3;
  *(_QWORD *)a1 = off_100939820;
  *(_QWORD *)(a1 + 16) = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  v6 = (unsigned int *)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  v7 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, 2) & 1) != 0
    && *(_DWORD *)(a1 + 12) == 2)
  {
    v14 = 0;
    *(_QWORD *)__dst = 0;
    strlcpy(__dst, a4, 0xAuLL);
    HIBYTE(v14) = 0;
    v8 = strtok(__dst, ",");
    if (v8)
    {
      *v6 = atoi(v8);
      v9 = strtok(0, ",");
      if (!v9)
      {
        v11 = *v6;
        goto LABEL_8;
      }
      v10 = atoi(v9);
      v11 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 28) = v10;
      if (v10 < v11)
      {
        *v6 = v10;
LABEL_8:
        *(_DWORD *)(a1 + 28) = v11;
      }
    }
  }
  return a1;
}

void sub_100589EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 + 40);
  sub_10058CDD0(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100589ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unsigned int v7;
  unsigned int v8;

  v4 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, 2))
    return 0;
  v5 = *(_DWORD *)(a1 + 12);
  if (v5 != 2)
  {
    if (!v5)
      return sub_10058E1A4(a2, *(_QWORD *)(a1 + 16), (_DWORD *)(a1 + 24), (_DWORD *)(a1 + 28), (_DWORD *)(a1 + 32), (_DWORD *)(a1 + 36));
    return 0;
  }
  v7 = *(_DWORD *)(a1 + 24);
  v8 = *(_DWORD *)(a1 + 28);
  if (v8 - v7 > 0x32)
    return 0;
  return sub_10058E320(a2, *(_QWORD *)(a1 + 16), v7, v8, (uint64_t *)(a1 + 40));
}

_QWORD *sub_100589F6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *result;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void **v27;
  __int128 v28;
  uint64_t v29;
  void **v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void **v37;
  uint64_t v38;
  unsigned int i;
  uint64_t v40;
  std::string::size_type v41;
  std::string *v42;
  __darwin_ct_rune_t v43;
  __uint32_t v44;
  unsigned int v45;
  std::string *v46;
  char v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  _QWORD *v52;
  std::string *v53;
  std::string::size_type v54;
  _QWORD *v55;
  std::string *v56;
  std::string::size_type v57;
  _QWORD *v58;
  std::string *v59;
  std::string::size_type v60;
  std::string *v61;
  std::string::size_type v62;
  void **v63;
  uint64_t v64;
  _QWORD *v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  std::string v69;
  void *v70[8];
  uint64_t v71;
  unsigned int v72;
  std::string __p;
  _QWORD v74[8];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[144];
  uint64_t v79;
  char v80[17];

  v6 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, 2) & 1) == 0)
    return sub_100091AE8(a3, "\r\nERROR\r\n");
  v79 = 0;
  v77 = 0u;
  memset(v78, 0, sizeof(v78));
  v75 = 0u;
  v76 = 0u;
  memset(v74, 0, sizeof(v74));
  v7 = sub_100272ADC((uint64_t)v74);
  switch(*(_DWORD *)(a1 + 12))
  {
    case 0:
      if (*(_DWORD *)(a1 + 28))
      {
        sub_100091AE8(v70, "\r\n");
        if (SHIBYTE(v70[2]) >= 0)
          v8 = v70;
        else
          v8 = (void **)v70[0];
        if (SHIBYTE(v70[2]) >= 0)
          v9 = HIBYTE(v70[2]);
        else
          v9 = (uint64_t)v70[1];
        v10 = sub_1002614D8(v74, (uint64_t)v8, v9);
        v11 = sub_1002614D8(v10, (uint64_t)"+CPBR: (", 8);
        v12 = (_QWORD *)std::ostream::operator<<(v11, *(unsigned int *)(a1 + 24));
        v13 = sub_1002614D8(v12, (uint64_t)"-", 1);
        v14 = (_QWORD *)std::ostream::operator<<(v13, *(unsigned int *)(a1 + 28));
        v15 = sub_1002614D8(v14, (uint64_t)"),", 2);
        v16 = (_QWORD *)std::ostream::operator<<(v15, *(unsigned int *)(a1 + 32));
        v17 = sub_1002614D8(v16, (uint64_t)",", 1);
        v18 = (_QWORD *)std::ostream::operator<<(v17, *(unsigned int *)(a1 + 36));
        sub_100091AE8(&__p, "\r\n");
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
      }
      else
      {
        sub_100091AE8(v70, "\r\n");
        if (SHIBYTE(v70[2]) >= 0)
          v63 = v70;
        else
          v63 = (void **)v70[0];
        if (SHIBYTE(v70[2]) >= 0)
          v64 = HIBYTE(v70[2]);
        else
          v64 = (uint64_t)v70[1];
        v65 = sub_1002614D8(v74, (uint64_t)v63, v64);
        v18 = sub_1002614D8(v65, (uint64_t)"+CPBR: (1-1),20,20", 18);
        sub_100091AE8(&__p, "\r\n");
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
      }
      sub_1002614D8(v18, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v70[2]) < 0)
        operator delete(v70[0]);
      goto LABEL_189;
    case 1:
    case 3:
      goto LABEL_18;
    case 2:
      if ((*(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 24)) > 0x32)
      {
LABEL_18:
        sub_100091AE8(a3, "\r\nERROR\r\n");
        goto LABEL_198;
      }
      v68 = sub_1005867E4(v7, a2);
      v72 = 0;
      if (sub_100448C84(a2, (int *)&v72))
      {
        v22 = sub_100448AA0(a2);
        v23 = v72;
        if (v22)
        {
          v23 = v72 - 2;
          v72 -= 2;
        }
        *(_QWORD *)(v68 + 16) = v23;
      }
      v24 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 48) != v24)
      {
        v25 = 0;
        while (1)
        {
          v71 = 0;
          memset(v70, 0, sizeof(v70));
          v26 = v24 + 72 * v25;
          LODWORD(v70[0]) = *(_DWORD *)v26;
          v27 = (void **)(v26 + 8);
          if (*(char *)(v26 + 31) < 0)
          {
            sub_10003430C(&v70[1], *v27, *(_QWORD *)(v24 + 72 * v25 + 16));
          }
          else
          {
            v28 = *(_OWORD *)v27;
            v70[3] = *(void **)(v26 + 24);
            *(_OWORD *)&v70[1] = v28;
          }
          v29 = v24 + 72 * v25;
          LODWORD(v70[4]) = *(_DWORD *)(v29 + 32);
          v30 = (void **)(v29 + 40);
          if (*(char *)(v26 + 63) < 0)
          {
            sub_10003430C(&v70[5], *v30, *(_QWORD *)(v24 + 72 * v25 + 48));
          }
          else
          {
            v31 = *(_OWORD *)v30;
            v70[7] = v30[2];
            *(_OWORD *)&v70[5] = v31;
          }
          LODWORD(v71) = *(_DWORD *)(v24 + 72 * v25 + 64);
          sub_100091AE8(&__p, "\r\n");
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = &__p;
          else
            v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v33 = __p.__r_.__value_.__l.__size_;
          v34 = sub_1002614D8(v74, (uint64_t)v32, v33);
          v35 = sub_1002614D8(v34, (uint64_t)"+CPBR: ", 7);
          v36 = (_QWORD *)std::ostream::operator<<(v35, LODWORD(v70[0]));
          sub_1002614D8(v36, (uint64_t)",\"", 2);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (LODWORD(v70[4]) == 2)
          {
            if (SHIBYTE(v70[3]) >= 0)
              v37 = &v70[1];
            else
              v37 = (void **)v70[1];
            if (SHIBYTE(v70[3]) >= 0)
              v38 = HIBYTE(v70[3]);
            else
              v38 = (uint64_t)v70[2];
            sub_1002614D8(v74, (uint64_t)v37, v38);
            goto LABEL_117;
          }
          memset(&__p, 0, sizeof(__p));
          if (SHIBYTE(v70[3]) < 0)
            sub_10003430C(&__p, v70[1], (unint64_t)v70[2]);
          else
            __p = *(std::string *)&v70[1];
          for (i = 0; ; i = v40 + 1)
          {
            v40 = i;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              break;
            v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            v42 = &__p;
            if (i >= HIBYTE(__p.__r_.__value_.__r.__words[2]))
              goto LABEL_101;
LABEL_55:
            v43 = v42->__r_.__value_.__s.__data_[i];
            if (v42->__r_.__value_.__s.__data_[i] < 0)
              v44 = __maskrune(v42->__r_.__value_.__s.__data_[i], 0x100uLL);
            else
              v44 = _DefaultRuneLocale.__runetype[v42->__r_.__value_.__s.__data_[i]] & 0x100;
            if (v44)
            {
              v45 = __tolower(v43);
              if (v45 > 0x63)
              {
                if (v45 > 0x66)
                {
                  if (v45 > 0x69)
                  {
                    if (v45 > 0x6C)
                    {
                      if (v45 > 0x6F)
                      {
                        if (v45 > 0x73)
                        {
                          if (v45 > 0x76)
                          {
                            if (v45 > 0x7A)
                              continue;
                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v46 = &__p;
                            else
                              v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
                            v47 = 57;
                          }
                          else
                          {
                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v46 = &__p;
                            else
                              v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
                            v47 = 56;
                          }
                        }
                        else
                        {
                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v46 = &__p;
                          else
                            v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
                          v47 = 55;
                        }
                      }
                      else
                      {
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v46 = &__p;
                        else
                          v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
                        v47 = 54;
                      }
                    }
                    else
                    {
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v46 = &__p;
                      else
                        v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
                      v47 = 53;
                    }
                  }
                  else
                  {
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v46 = &__p;
                    else
                      v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    v47 = 52;
                  }
                }
                else
                {
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v46 = &__p;
                  else
                    v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  v47 = 51;
                }
              }
              else
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v46 = &__p;
                else
                  v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
                v47 = 50;
              }
              v46->__r_.__value_.__s.__data_[v40] = v47;
            }
          }
          v41 = __p.__r_.__value_.__l.__size_;
          v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__l.__size_ > i)
            goto LABEL_55;
LABEL_101:
          if (v41)
          {
            v48 = 0;
            while (memchr("1234567890#*+,", v42->__r_.__value_.__s.__data_[v48], 0xEuLL))
            {
              if (v41 == ++v48)
                goto LABEL_105;
            }
            while (v48 != -1)
            {
              std::string::erase(&__p, v48, 1uLL);
              v61 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &__p
                  : (std::string *)__p.__r_.__value_.__r.__words[0];
              v62 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? HIBYTE(__p.__r_.__value_.__r.__words[2])
                  : __p.__r_.__value_.__l.__size_;
              if (!v62)
                break;
              v48 = 0;
              while (memchr("1234567890#*+,", v61->__r_.__value_.__s.__data_[v48], 0xEuLL))
              {
                if (v62 == ++v48)
                  goto LABEL_105;
              }
            }
          }
LABEL_105:
          if (!sub_100448894(a2))
          {
            v49 = std::string::find(&__p, 44, 0);
            std::string::basic_string(&v69, &__p, 0, v49, (std::allocator<char> *)v80);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p = v69;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v50 = &__p;
          else
            v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v51 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v51 = __p.__r_.__value_.__l.__size_;
          sub_1002614D8(v74, (uint64_t)v50, v51);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_117:
          sub_1002614D8(v74, (uint64_t)"\",", 2);
          if (LODWORD(v70[4]) <= 2)
            sub_1002614D8(v74, (uint64_t)off_100939B30[SLODWORD(v70[4])], 3);
          memset(&__p, 0, sizeof(__p));
          if (SHIBYTE(v70[7]) < 0)
            sub_10003430C(&__p, v70[5], (unint64_t)v70[6]);
          else
            __p = *(std::string *)&v70[5];
          if (sub_100448AA0(a2) && (v71 - 1) < 3)
            std::string::append(&__p, off_100939B48[(int)v71 - 1]);
          if (*(_BYTE *)(v68 + 8))
          {
            v52 = sub_1002614D8(v74, (uint64_t)",", 1);
            sub_1002D20AC(v68, (const char *)&__p, &v69);
            if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v53 = &v69;
            else
              v53 = (std::string *)v69.__r_.__value_.__r.__words[0];
            if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v54 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
            else
              v54 = v69.__r_.__value_.__l.__size_;
            sub_1002614D8(v52, (uint64_t)v53, v54);
          }
          else
          {
            v55 = sub_1002614D8(v74, (uint64_t)",\"", 2);
            sub_1002D20AC(v68, (const char *)&__p, &v69);
            if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v56 = &v69;
            else
              v56 = (std::string *)v69.__r_.__value_.__r.__words[0];
            if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
            else
              v57 = v69.__r_.__value_.__l.__size_;
            v58 = sub_1002614D8(v55, (uint64_t)v56, v57);
            sub_1002614D8(v58, (uint64_t)"\"", 1);
          }
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v69.__r_.__value_.__l.__data_);
          sub_100091AE8(&v69, "\r\n");
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v59 = &v69;
          else
            v59 = (std::string *)v69.__r_.__value_.__r.__words[0];
          if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
          else
            v60 = v69.__r_.__value_.__l.__size_;
          sub_1002614D8(v74, (uint64_t)v59, v60);
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v69.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v70[7]) < 0)
            operator delete(v70[5]);
          if (SHIBYTE(v70[3]) < 0)
            operator delete(v70[1]);
          ++v25;
          v24 = *(_QWORD *)(a1 + 40);
          if (v25 >= 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 48) - v24) >> 3))
            goto LABEL_188;
        }
      }
      if (!v68)
        goto LABEL_189;
LABEL_188:
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
LABEL_189:
      sub_100091AE8(v70, "\r\nOK\r\n");
      if (SHIBYTE(v70[2]) >= 0)
        v66 = v70;
      else
        v66 = (void **)v70[0];
      if (SHIBYTE(v70[2]) >= 0)
        v67 = HIBYTE(v70[2]);
      else
        v67 = (uint64_t)v70[1];
      sub_1002614D8(v74, (uint64_t)v66, v67);
      if (SHIBYTE(v70[2]) < 0)
        operator delete(v70[0]);
      std::stringbuf::str(&v74[1]);
LABEL_198:
      if (SHIBYTE(v76) < 0)
        operator delete(*((void **)&v75 + 1));
      std::streambuf::~streambuf(&v74[1]);
      result = (_QWORD *)std::ios::~ios(v78);
      break;
    default:
      goto LABEL_189;
  }
  return result;
}

void sub_10058A94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43)
{
  if (a41 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  sub_100272CFC((uint64_t)&a43);
  _Unwind_Resume(a1);
}

uint64_t sub_10058AA44(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10058AA84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = 15;
  *(_DWORD *)(result + 12) = a2;
  *(_QWORD *)result = off_100939850;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_10058AAA4(uint64_t a1)
{
  *(_QWORD *)a1 = off_100939850;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_10058AAE0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100939850;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  operator delete();
}

uint64_t sub_10058AB2C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003BE44();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1 + 16, 1);
  return 1;
}

void sub_10058AB64(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  std::string *v5;
  __int128 v6;
  const std::string::value_type *v7;
  uint64_t v8;
  const std::string::value_type *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  void *__p[2];
  unsigned __int8 v26;
  void *v27[2];
  unsigned __int8 v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;

  switch(*(_DWORD *)(a1 + 12))
  {
    case 1:
      sub_100091AE8(&v29, "\r\n");
      v5 = std::string::append(&v29, "+CCLK: \"");
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      v9 = *(const std::string::value_type **)(a1 + 16);
      v8 = a1 + 16;
      v7 = v9;
      v10 = *(char *)(v8 + 23);
      if (v10 >= 0)
        v11 = (const std::string::value_type *)v8;
      else
        v11 = v7;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(v8 + 23);
      else
        v12 = *(_QWORD *)(v8 + 8);
      v13 = std::string::append(&v30, v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v15 = std::string::append(&v31, "\"");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      sub_100091AE8(v27, "\r\n");
      if ((v28 & 0x80u) == 0)
        v17 = v27;
      else
        v17 = (void **)v27[0];
      if ((v28 & 0x80u) == 0)
        v18 = v28;
      else
        v18 = (std::string::size_type)v27[1];
      v19 = std::string::append(&v32, (const std::string::value_type *)v17, v18);
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      sub_100091AE8(__p, "\r\nOK\r\n");
      if ((v26 & 0x80u) == 0)
        v21 = __p;
      else
        v21 = (void **)__p[0];
      if ((v26 & 0x80u) == 0)
        v22 = v26;
      else
        v22 = (std::string::size_type)__p[1];
      v23 = std::string::append(&v33, (const std::string::value_type *)v21, v22);
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      a2[2] = *((_QWORD *)&v23->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if ((char)v26 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if ((char)v28 < 0)
        operator delete(v27[0]);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      break;
    case 2:
      v3 = "\r\nOK\r\n";
      goto LABEL_37;
    default:
      v3 = "\r\nERROR\r\n";
LABEL_37:
      sub_100091AE8(a2, v3);
      break;
  }
}

void sub_10058AD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 41) < 0)
    operator delete(*(void **)(v40 - 64));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v40 - 73) < 0)
    operator delete(*(void **)(v40 - 96));
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

double sub_10058AE38(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = 0x200000010;
  a1[1] = 0x200000010;
  *a1 = off_100939880;
  return result;
}

void sub_10058AE58()
{
  operator delete();
}

uint64_t sub_10058AE6C()
{
  return 1;
}

_QWORD *sub_10058AE74@<X0>(_QWORD *a1@<X8>)
{
  return sub_100091AE8(a1, "\r\nOK\r\n");
}

double sub_10058AE84(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = 0x200000011;
  a1[1] = 0x200000011;
  *a1 = off_1009398B0;
  return result;
}

void sub_10058AEA4()
{
  operator delete();
}

uint64_t sub_10058AEB8()
{
  return 1;
}

void sub_10058AEC0(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v12;
  void *v13[2];
  unsigned __int8 v14;
  std::string v15;
  std::string v16;
  std::string v17;

  sub_100091AE8(&v15, "\r\n");
  v2 = std::string::append(&v15, "+CGATT: 0");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(v13, "\r\n");
  if ((v14 & 0x80u) == 0)
    v4 = v13;
  else
    v4 = (void **)v13[0];
  if ((v14 & 0x80u) == 0)
    v5 = v14;
  else
    v5 = (std::string::size_type)v13[1];
  v6 = std::string::append(&v16, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(__p, "\r\nOK\r\n");
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v9 = v12;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v17, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if ((char)v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_10058B004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

double sub_10058B080(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = 0x200000012;
  a1[1] = 0x200000012;
  *a1 = off_1009398E0;
  return result;
}

void sub_10058B0A0()
{
  operator delete();
}

uint64_t sub_10058B0B4()
{
  return 1;
}

void sub_10058B0BC(std::string *a1@<X8>)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v12;
  void *v13[2];
  unsigned __int8 v14;
  std::string v15;
  std::string v16;
  std::string v17;

  sub_100091AE8(&v15, "\r\n");
  v2 = std::string::append(&v15, "+VTS: (\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"*\",\"#\"),(0 - 600)");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(v13, "\r\n");
  if ((v14 & 0x80u) == 0)
    v4 = v13;
  else
    v4 = (void **)v13[0];
  if ((v14 & 0x80u) == 0)
    v5 = v14;
  else
    v5 = (std::string::size_type)v13[1];
  v6 = std::string::append(&v16, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_100091AE8(__p, "\r\nOK\r\n");
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v9 = v12;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v17, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if ((char)v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_10058B200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

double sub_10058B27C(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = 0x200000013;
  a1[1] = 0x200000013;
  *a1 = off_100939910;
  return result;
}

void sub_10058B29C()
{
  operator delete();
}

uint64_t sub_10058B2B0()
{
  return 1;
}

_QWORD *sub_10058B2B8@<X0>(_QWORD *a1@<X8>)
{
  return sub_100091AE8(a1, "\r\nOK\r\n");
}

uint64_t sub_10058B2C8(uint64_t a1, const char *a2, uint64_t a3)
{
  std::string *v4;
  char *v5;
  char *v6;
  _OWORD v8[16];

  *(_QWORD *)(a1 + 8) = 0x200000014;
  *(_QWORD *)a1 = off_100939940;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (std::string *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  memset(v8, 0, sizeof(v8));
  *(_BYTE *)(a1 + 24) = 0;
  strlcpy((char *)v8, a2, 0x100uLL);
  v5 = strtok((char *)v8, ",");
  if (v5)
  {
    std::string::assign(v4, v5);
    v6 = strtok(0, ",");
    if (v6)
    {
      *(_DWORD *)(a1 + 56) = atoi(v6);
      *(_BYTE *)(a1 + 24) = 1;
    }
    else if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
    {
      sub_100705D28();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
  {
    sub_100705CC8();
  }
  return a1;
}

void sub_10058B420(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10058B44C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24))
  {
    *(_WORD *)(*(_QWORD *)(a1 + 16) + 576) = 257;
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_100939AF0);
    sub_100420FF0(off_1009778D0, *(_QWORD *)(a1 + 16));
  }
  return 1;
}

void sub_10058B4BC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  const std::string::value_type *p_p;
  std::string::size_type v8;
  NSObject *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  void *__p;
  std::string::size_type v15;
  unsigned __int8 v16;
  std::string v17;
  std::string buf;

  if (*(_BYTE *)(a1 + 24))
  {
    if (*(int *)(a1 + 56) < 8)
      goto LABEL_14;
    if (qword_10097AB18 != -1)
      dispatch_once(&qword_10097AB18, &stru_100939B10);
    if (sub_1002CBABC(qword_10097AB10, *(_QWORD *)(a1 + 16)))
    {
      v4 = qword_100999888;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "AT+APLSIRI response enabled", (uint8_t *)&buf, 2u);
      }
      sub_100091AE8(&v17, "\r\n");
      v5 = std::string::insert(&v17, 0, "\r\n+XAPL=iPhone,15");
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      sub_100091AE8(&__p, "\r\nOK\r\n");
      if ((v16 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v16 & 0x80u) == 0)
        v8 = v16;
      else
        v8 = v15;
    }
    else
    {
LABEL_14:
      v9 = qword_100999888;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "AT+APLSIRI response disabled", (uint8_t *)&buf, 2u);
      }
      sub_100091AE8(&v17, "\r\n");
      v10 = std::string::insert(&v17, 0, "\r\n+XAPL=iPhone,7");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      sub_100091AE8(&__p, "\r\nOK\r\n");
      if ((v16 & 0x80u) == 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if ((v16 & 0x80u) == 0)
        v8 = v16;
      else
        v8 = v15;
    }
    v12 = std::string::append(&buf, p_p, v8);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v12->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v16 < 0)
      operator delete(__p);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_100091AE8(a2, "\r\nERROR\r\n");
  }
}

void sub_10058B704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10058B75C(uint64_t a1, const char *a2, uint64_t a3)
{
  char *v4;
  int v5;
  char *v6;
  char *v7;
  char v8;
  uint64_t v9;
  _OWORD v11[16];

  *(_QWORD *)(a1 + 8) = 0x200000015;
  *(_QWORD *)a1 = off_100939970;
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 0;
  memset(v11, 0, sizeof(v11));
  strlcpy((char *)v11, a2, 0x100uLL);
  v4 = strtok((char *)v11, ",");
  if (v4)
  {
    v5 = atoi(v4);
    v6 = strtok(0, ",");
    v7 = strtok(0, ",");
    if (v6 && v7)
    {
      while (*v6 - 49 < 5)
      {
        v8 = *v7;
        v9 = *(int *)(a1 + 28);
        *(_DWORD *)(a1 + 4 * v9 + 32) = (*v6 - 49) + 1;
        *(_BYTE *)(a1 + v9 + 288) = v8;
        ++*(_DWORD *)(a1 + 28);
        v6 = strtok(0, ",");
        v7 = strtok(0, ",");
        if (!v6 || !v7)
          goto LABEL_13;
      }
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
        sub_100705E48();
    }
LABEL_13:
    if (v5 != *(_DWORD *)(a1 + 28))
    {
      *(_BYTE *)(a1 + 24) = 0;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
        sub_100705DE8();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
      sub_100705D88();
    *(_BYTE *)(a1 + 24) = 0;
  }
  return a1;
}

BOOL sub_10058B960(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint8_t *v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v2 + 576))
  {
    if (!*(_BYTE *)(a1 + 24) || sub_10043F65C(v2, 0x80000u) == 4)
      return 0;
    if (*(int *)(a1 + 28) >= 1)
    {
      v4 = 0;
      v5 = a1 + 288;
      do
      {
        switch(*(_DWORD *)(v5 + 4 * v4 - 256))
        {
          case 1:
            sub_100447298(*(_QWORD *)(a1 + 16), (10 * *(_BYTE *)(v5 + v4) + 42) & 0xFE);
            if (qword_1009778D8 != -1)
              dispatch_once(&qword_1009778D8, &stru_100939AF0);
            sub_10042197C((uint64_t)off_1009778D0, *(_QWORD *)(a1 + 16));
            goto LABEL_25;
          case 2:
            v6 = *(unsigned __int8 *)(v5 + v4);
            if (v6 == 49)
            {
              sub_1004473D0(*(_QWORD *)(a1 + 16), 1);
            }
            else if (v6 == 48)
            {
              sub_1004473D0(*(_QWORD *)(a1 + 16), 0);
              if (qword_1009778D8 != -1)
                dispatch_once(&qword_1009778D8, &stru_100939AF0);
              sub_10042173C((uint64_t)off_1009778D0, *(_QWORD *)(a1 + 16));
            }
            goto LABEL_25;
          case 3:
            v7 = qword_100999888;
            if (!os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_INFO))
              goto LABEL_25;
            v15 = 0;
            v8 = (uint8_t *)&v15;
            v9 = v7;
            v10 = "A65 rebooting";
            break;
          case 4:
            v11 = qword_100999888;
            if (!os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_INFO))
              goto LABEL_25;
            v14 = 0;
            v8 = (uint8_t *)&v14;
            v9 = v11;
            v10 = "Button 1 action";
            break;
          case 5:
            v12 = qword_100999888;
            if (!os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_INFO))
              goto LABEL_25;
            v13 = 0;
            v8 = (uint8_t *)&v13;
            v9 = v12;
            v10 = "Button 2 action";
            break;
          default:
            if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
              sub_100705ED4();
            result = 0;
            *(_BYTE *)(a1 + 24) = 0;
            return result;
        }
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, v10, v8, 2u);
LABEL_25:
        ++v4;
      }
      while (v4 < *(int *)(a1 + 28));
    }
    return 1;
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100705EA8();
      return 0;
    }
  }
  return result;
}

_QWORD *sub_10058BBFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (*(_BYTE *)(a2 + 576))
  {
    if (*(_BYTE *)(a1 + 24))
      return sub_100091AE8(a3, "\r\nOK\r\n");
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
      sub_100705F00();
  }
  else if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
  {
    sub_100705EA8();
  }
  return sub_100091AE8(a3, "\r\nERROR\r\n");
}

uint64_t sub_10058BCA0(uint64_t a1, const char *a2, uint64_t a3)
{
  _OWORD v5[16];

  *(_QWORD *)(a1 + 8) = 0x200000017;
  *(_QWORD *)a1 = off_1009399A0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 24) = 0;
  memset(v5, 0, sizeof(v5));
  strlcpy((char *)v5, a2, 0x100uLL);
  if (LOBYTE(v5[0]) == 49)
    *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

BOOL sub_10058BD60(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned __int8 *)(v1 + 576);
  if (*(_BYTE *)(v1 + 576))
  {
    *(_BYTE *)(v1 + 577) = *(_BYTE *)(a1 + 24);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
  {
    sub_100705F2C();
  }
  return v2 != 0;
}

_QWORD *sub_10058BDC0@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 576))
    return sub_100091AE8(a2, "\r\nOK\r\n");
  if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
    sub_100705F2C();
  return sub_100091AE8(a2, "\r\nERROR\r\n");
}

std::string *sub_10058BE34(std::string *a1, const std::string::value_type *a2, std::string::size_type a3)
{
  a1->__r_.__value_.__l.__size_ = 0x200000016;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1009399D0;
  a1->__r_.__value_.__r.__words[2] = a3;
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::string::assign(a1 + 1, a2);
  return a1;
}

void sub_10058BE8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

BOOL sub_10058BEAC(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned __int8 *)(v1 + 576);
  if (!*(_BYTE *)(v1 + 576) && os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
    sub_100705F58();
  return v2 != 0;
}

_QWORD *sub_10058BF00@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  if (*(_BYTE *)(a1 + 576))
    return sub_100091AE8(a2, "\r\nOK\r\n");
  if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
    sub_100705F58();
  return sub_100091AE8(a2, "\r\nERROR\r\n");
}

uint64_t sub_10058BF74(uint64_t a1, const char *a2, uint64_t a3)
{
  char *v4;
  int v5;
  char *v6;
  char *v7;
  char v8;
  uint64_t v9;
  _OWORD v11[16];

  *(_QWORD *)(a1 + 8) = 0x200000018;
  *(_QWORD *)a1 = off_100939A00;
  *(_QWORD *)(a1 + 16) = a3;
  memset(v11, 0, sizeof(v11));
  strlcpy((char *)v11, a2, 0x100uLL);
  v4 = strtok((char *)v11, ",");
  if (v4)
  {
    v5 = atoi(v4);
    v6 = strtok(0, ",");
    v7 = strtok(0, ",");
    if (v6 && v7)
    {
      while (*v6 - 49 < 3)
      {
        v8 = *v7;
        v9 = *(int *)(a1 + 28);
        *(_DWORD *)(a1 + 4 * v9 + 32) = (*v6 - 49) + 1;
        *(_BYTE *)(a1 + v9 + 288) = v8;
        ++*(_DWORD *)(a1 + 28);
        v6 = strtok(0, ",");
        v7 = strtok(0, ",");
        if (!v6 || !v7)
          goto LABEL_13;
      }
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
        sub_100706044();
    }
LABEL_13:
    if (v5 != *(_DWORD *)(a1 + 28))
    {
      *(_BYTE *)(a1 + 24) = 0;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
        sub_100705FE4();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
      sub_100705F84();
    *(_BYTE *)(a1 + 24) = 0;
  }
  return a1;
}

BOOL sub_10058C16C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  int v6;
  _BOOL8 result;
  uint8_t v8[16];

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + 576))
  {
    result = os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1007060A4();
    return 0;
  }
  if (!*(_BYTE *)(a1 + 24))
    return 0;
  if (*(int *)(a1 + 28) < 1)
    return 1;
  v2 = 0;
  v3 = a1 + 288;
  while (1)
  {
    v4 = *(_DWORD *)(v3 + 4 * v2 - 256);
    if (v4 == 3)
    {
      v5 = qword_100999888;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "A65 rebooting", v8, 2u);
      }
      goto LABEL_19;
    }
    if (v4 == 2)
    {
      v6 = *(unsigned __int8 *)(v3 + v2);
      if (v6 == 49)
      {
        sub_1004473D0(*(_QWORD *)(a1 + 16), 1);
      }
      else if (v6 == 48)
      {
        sub_1004473D0(*(_QWORD *)(a1 + 16), 0);
        if (qword_1009778D8 != -1)
          dispatch_once(&qword_1009778D8, &stru_100939AF0);
        sub_10042173C((uint64_t)off_1009778D0, *(_QWORD *)(a1 + 16));
      }
      goto LABEL_19;
    }
    if (v4 != 1)
      break;
    sub_100447298(*(_QWORD *)(a1 + 16), (10 * *(_BYTE *)(v3 + v2) + 42) & 0xFE);
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_100939AF0);
    sub_10042197C((uint64_t)off_1009778D0, *(_QWORD *)(a1 + 16));
LABEL_19:
    if (++v2 >= *(int *)(a1 + 28))
      return 1;
  }
  if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
    sub_1007060D0();
  result = 0;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

_QWORD *sub_10058C36C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (*(_BYTE *)(a2 + 576))
  {
    if (*(_BYTE *)(a1 + 24))
      return sub_100091AE8(a3, "\r\nOK\r\n");
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
      sub_100705F00();
  }
  else if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
  {
    sub_100705EA8();
  }
  return sub_100091AE8(a3, "\r\nERROR\r\n");
}

double sub_10058C410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 0x200000019;
  *(_QWORD *)(a1 + 8) = 0x200000019;
  *(_QWORD *)a1 = off_100939A30;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

BOOL sub_10058C434(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned __int8 *)(v1 + 576);
  if (*(_BYTE *)(v1 + 576))
  {
    if (qword_10097AB18 != -1)
      dispatch_once(&qword_10097AB18, &stru_100939B10);
    *(_DWORD *)(a1 + 24) = sub_1002CBABC(qword_10097AB10, *(_QWORD *)(a1 + 16));
  }
  else if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
  {
    sub_1007060FC();
  }
  return v2 != 0;
}

void sub_10058C4CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void *__p[2];
  unsigned __int8 v16;
  void *v17[2];
  unsigned __int8 v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string::value_type __s[2];

  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 576))
  {
    *(_WORD *)__s = 0;
    sprintf(__s, "%1d", *(_DWORD *)(a1 + 24));
    sub_100091AE8(&v19, "\r\n");
    v3 = std::string::append(&v19, "+APLSIRI:");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    v5 = std::string::append(&v20, __s);
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    sub_100091AE8(v17, "\r\n");
    if ((v18 & 0x80u) == 0)
      v7 = v17;
    else
      v7 = (void **)v17[0];
    if ((v18 & 0x80u) == 0)
      v8 = v18;
    else
      v8 = (std::string::size_type)v17[1];
    v9 = std::string::append(&v21, (const std::string::value_type *)v7, v8);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    sub_100091AE8(__p, "\r\nOK\r\n");
    if ((v16 & 0x80u) == 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    if ((v16 & 0x80u) == 0)
      v12 = v16;
    else
      v12 = (std::string::size_type)__p[1];
    v13 = std::string::append(&v22, (const std::string::value_type *)v11, v12);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((char)v16 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if ((char)v18 < 0)
      operator delete(v17[0]);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    sub_100091AE8(a2, "\r\nERROR\r\n");
  }
}

void sub_10058C688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 25) < 0)
    operator delete(*(void **)(v33 - 48));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10058C71C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = 0x20000001ALL;
  *(_QWORD *)a1 = off_100939A60;
  *(_QWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 256;
  if (!a2 || !*(_BYTE *)(a3 + 576))
  {
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
    {
      sub_100706128();
      if (!a2)
        return a1;
    }
    else if (!a2)
    {
      return a1;
    }
  }
  if (*a2 == 49)
    *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

BOOL sub_10058C7C0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  _BOOL8 result;
  int v5;
  const char *v6;

  v2 = qword_100999888;
  if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 24))
      v3 = "enabled";
    else
      v3 = "disabled";
    v5 = 136315138;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Siri eyes free mode set to %s", (uint8_t *)&v5, 0xCu);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 576) && *(_BYTE *)(a1 + 25))
  {
    if (qword_10097AB18 != -1)
      dispatch_once(&qword_10097AB18, &stru_100939B10);
    sub_1002CC094(qword_10097AB10, *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
    return 1;
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100706154();
      return 0;
    }
  }
  return result;
}

_QWORD *sub_10058C900@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v3;
  uint8_t v5[16];

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + 576) || !*(_BYTE *)(a1 + 25))
    return sub_100091AE8(a2, "\r\nERROR\r\n");
  v3 = qword_100999888;
  if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Responding with AT_OK for APLEFM", v5, 2u);
  }
  return sub_100091AE8(a2, "\r\nOK\r\n");
}

uint64_t sub_10058C9A8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = 0x20000001BLL;
  *(_QWORD *)a1 = off_100939A90;
  *(_QWORD *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 256;
  if (!a2 || !*(_BYTE *)(a3 + 576))
  {
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
    {
      sub_100706180();
      if (!a2)
        return a1;
    }
    else if (!a2)
    {
      return a1;
    }
  }
  if (*a2 == 49)
    *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

BOOL sub_10058CA4C(uint64_t a1)
{
  _BOOL8 result;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 576) && *(_BYTE *)(a1 + 25))
  {
    if (qword_10097AB18 != -1)
      dispatch_once(&qword_10097AB18, &stru_100939B10);
    sub_1002CC124(qword_10097AB10, *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
    return 1;
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1007061AC();
      return 0;
    }
  }
  return result;
}

_QWORD *sub_10058CAEC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  NSObject *v3;
  uint8_t v5[16];

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + 576) || !*(_BYTE *)(a1 + 25))
    return sub_100091AE8(a2, "\r\nERROR\r\n");
  v3 = qword_100999888;
  if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Responsding with AT_OK for APLNRSTAT", v5, 2u);
  }
  return sub_100091AE8(a2, "\r\nOK\r\n");
}

uint64_t sub_10058CB94(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_100939820;
  v3 = (void **)(a1 + 40);
  sub_10058CDD0(&v3);
  return a1;
}

void sub_10058CBD8(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = off_100939820;
  v1 = (void **)(a1 + 40);
  sub_10058CDD0(&v1);
  operator delete();
}

uint64_t sub_10058CC30(uint64_t a1)
{
  *(_QWORD *)a1 = off_100939940;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_10058CC6C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100939940;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  operator delete();
}

void sub_10058CCBC()
{
  operator delete();
}

void sub_10058CCD4()
{
  operator delete();
}

uint64_t sub_10058CCE8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009399D0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_10058CD24(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009399D0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  operator delete();
}

void sub_10058CD74()
{
  operator delete();
}

void sub_10058CD8C()
{
  operator delete();
}

void sub_10058CDA4()
{
  operator delete();
}

void sub_10058CDBC()
{
  operator delete();
}

void sub_10058CDD0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_10058CE54((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10058CE54(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void sub_10058CE98(id a1)
{
  operator new();
}

void sub_10058CED8()
{
  operator delete();
}

void sub_10058CEFC(id a1)
{
  operator new();
}

void sub_10058CF3C()
{
  operator delete();
}

void sub_10058CF60(id a1)
{
  operator new();
}

void sub_10058CFA0()
{
  operator delete();
}

void sub_10058CFC4(id a1)
{
  operator new();
}

void sub_10058D004()
{
  operator delete();
}

void sub_10058D028()
{
  uint64_t i;

  for (i = 0; i != -48; i -= 8)
  {
    if (SHIBYTE(dword_100993370[i + 47]) < 0)
      operator delete(*(void **)&dword_100993370[i + 42]);
  }
}

void sub_10058D06C()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  dword_100993370[0] = 1;
  sub_100091AE8(qword_100993378, "");
  dword_100993390 = 2;
  sub_100091AE8(qword_100993398, "\"GSM\"");
  dword_1009933B0 = 4;
  sub_100091AE8(qword_1009933B8, "\"ASCII\"");
  dword_1009933D0 = 8;
  sub_100091AE8(qword_1009933D8, "\"8859-1\"");
  dword_1009933F0 = 16;
  sub_100091AE8(qword_1009933F8, "\"UCS2\"");
  dword_100993410 = 32;
  sub_100091AE8(qword_100993418, "\"UTF-8\"");
  __cxa_atexit((void (*)(void *))sub_10058D028, 0, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10058D160(_Unwind_Exception *a1)
{
  int *v1;

  sub_1007061D8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10058D174(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  const char *v6;
  int64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *result;
  int v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  char *v26;
  char __dst[16];
  __int128 v28;
  __int128 v29;
  __int16 v30;

  *a1 = 0;
  v5 = "TEST";
  switch(*(_DWORD *)a3)
  {
    case 0:
      goto LABEL_4;
    case 1:
      v5 = "READ";
      goto LABEL_4;
    case 2:
      v5 = "CMD";
LABEL_4:
      v30 = 0;
      v28 = 0u;
      v29 = 0u;
      *(_OWORD *)__dst = 0u;
      v6 = *(const char **)(a3 + 24);
      v7 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) - (_QWORD)v6 + *(unsigned __int16 *)(*(_QWORD *)(a3 + 32) + 18);
      if (v7 >= 1)
      {
        if ((unint64_t)v7 >= 0x32)
        {
          v8 = qword_100999888;
          if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_INFO))
          {
            LOWORD(v21) = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Truncating data when copying into params", (uint8_t *)&v21, 2u);
            v6 = *(const char **)(a3 + 24);
          }
          v7 = 49;
        }
        strncpy(__dst, v6, v7);
      }
      v9 = qword_100999888;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(_QWORD *)(a3 + 8);
        v21 = 136446722;
        v22 = v5;
        v23 = 2082;
        v24 = v10;
        v25 = 2082;
        v26 = __dst;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received AT %{public}s command %{public}s %{public}s", (uint8_t *)&v21, 0x20u);
      }
      v11 = *(const char **)(a3 + 8);
      if (!strncmp(v11, "+CGMI", 5uLL))
        operator new();
      if (!strncmp(v11, "+CGMM", 5uLL))
        operator new();
      if (!strncmp(v11, "+CGMR", 5uLL))
        operator new();
      if (!strncmp(v11, "+CGSN", 5uLL))
        operator new();
      if (!strncmp(v11, "+CSCS", 5uLL))
        operator new();
      if (!strncmp(v11, "+CIMI", 5uLL))
        operator new();
      if (!strncmp(v11, "+GMI", 4uLL))
        operator new();
      if (!strncmp(v11, "+GMM", 4uLL))
        operator new();
      if (!strncmp(v11, "+GMR", 4uLL))
        operator new();
      if (!strncmp(v11, "+GSN", 4uLL))
        operator new();
      if (!strncmp(v11, "+CREG", 5uLL))
        operator new();
      if (!strncmp(v11, "+COPS", 5uLL))
        operator new();
      if (!strncmp(v11, "+CPAS", 5uLL))
        operator new();
      if (!strncmp(v11, "+CPIN", 5uLL))
        operator new();
      if (!strncmp(v11, "+CBC", 4uLL))
        operator new();
      if (!strncmp(v11, "+CSQ", 4uLL))
        operator new();
      if (!strncmp(v11, "+CPBS", 5uLL))
        operator new();
      if (!strncmp(v11, "+CPBR", 5uLL))
        operator new();
      if (strncmp(v11, "+CPBF", 5uLL) && strncmp(v11, "+CPBW", 5uLL))
      {
        if (!strncmp(v11, "+CCLK", 5uLL))
          operator new();
        if (!strncmp(v11, "+CMEE", 5uLL))
          operator new();
        if (!strncmp(v11, "+CGATT", 6uLL))
          operator new();
        if (!strncmp(v11, "+VTS", 4uLL))
          operator new();
        if (!strncmp(v11, "+VTD", 4uLL))
          operator new();
        if (!strncmp(v11, "+XAPL", 5uLL))
          operator new();
        if (!strncmp(v11, "+IPHONEACCEV", 0xCuLL))
          operator new();
        if (!strncmp(v11, "+IPHONEEV", 9uLL))
          operator new();
        if (!strncmp(v11, "+IPHONEACCINDICATOR", 0x13uLL))
          operator new();
        if (!strncmp(v11, "+IPHONEACCNAME", 0xEuLL))
          operator new();
        if (!strncmp(v11, "+APLSIRI", 8uLL))
          operator new();
        if (!strncmp(v11, "+APLNRSTAT", 0xAuLL))
          operator new();
        if (!strncmp(v11, "+APLEFM", 7uLL))
          operator new();
      }
      return result;
    case 3:
      return a1;
    default:
      v12 = qword_100999888;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
        sub_100706218(v12, v13, v14, v15, v16, v17, v18, v19);
      break;
  }
  return a1;
}

void sub_10058DB74()
{
  operator delete();
}

uint64_t *sub_10058DCE4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_10058DD18(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!*a1)
    return 0;
  if ((*(_DWORD *)(*a1 + 8) - 13) <= 1)
  {
    v6 = sub_10003BE44();
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, 2);
    if ((_DWORD)v7)
      sub_10058DDA0(v7, a2);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, a3);
}

void sub_10058DDA0(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  void *__p[2];
  char v6;
  uint8_t buf[4];
  void **v8;

  if ((sub_1004471D4(a2) & 1) == 0)
  {
    v3 = qword_100999888;
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      if (v6 >= 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Device %{public}s now supports contact sync", buf, 0xCu);
      if (v6 < 0)
        operator delete(__p[0]);
    }
    sub_100447D80(a2);
    sub_1004468B0(a2);
  }
}

_QWORD *sub_10058DE94@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  if (a2 && (v3 = *a1) != 0)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  else
    return sub_100091AE8(a3, "\r\nERROR\r\n");
}

uint64_t sub_10058DEBC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_10058DD18(a3, a2, a1);
}

_QWORD *sub_10058DECC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  return sub_10058DE94(a2, a1, a3);
}

uint64_t sub_10058DED4(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0xE)
    return 0;
  else
    return dword_1007428E0[a2 - 1];
}

uint64_t sub_10058DEF8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v3 = 1;
  *(_DWORD *)(a1 + 16) = 1;
  *(_WORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (*(_DWORD *)a1 != a3)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7)
    {
      *(_DWORD *)a1 = 0;
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 1;
      *(_WORD *)(a1 + 20) = 0;
      *(_QWORD *)(a1 + 24) = 0;
    }
    v3 = sub_10058DED4(v7, a3);
    if ((_DWORD)v3)
    {
      v18[0] = 0;
      v18[1] = 0;
      sub_100585F04(v18, a2);
      v8 = sub_100586028((uint64_t)v18, v3, 2, 0, 0xFFFFLL, 0x14u, 1);
      *(_QWORD *)(a1 + 8) = v8;
      v3 = v8 != 0;
      if (v8)
      {
        *(_DWORD *)a1 = a3;
      }
      else
      {
        v9 = qword_100999888;
        if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
          sub_10070624C(v9, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
  return v3;
}

uint64_t sub_10058DFF8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    *(_DWORD *)a1 = 0;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 1;
    *(_WORD *)(a1 + 20) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t sub_10058E040(_QWORD *a1, uint64_t a2)
{
  if (!a1[1])
    sub_10058DEF8((uint64_t)a1, a2, 11);
  return *(unsigned int *)a1;
}

uint64_t sub_10058E074(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  int v8;
  NSObject *v9;
  _BYTE __s1[14];
  char v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
  {
    sub_10058DEF8(a1, a2, 11);
    v4 = *(_QWORD *)(a1 + 8);
    if (!v4)
      return 0;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  if (v5 >= 0x3E9)
  {
    sub_10043F78C(a2, (uint64_t)__s1);
    if (v12 < 0)
    {
      v7 = *(void **)__s1;
      v8 = strncmp(*(const char **)__s1, "MB PhoneSystem", 0xEuLL);
      operator delete(v7);
      if (v8)
        return v5;
    }
    else if (*(_QWORD *)__s1 != 0x656E6F685020424DLL || *(_QWORD *)&__s1[6] != 0x6D6574737953656ELL)
    {
      return v5;
    }
    v9 = qword_100999888;
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__s1 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Restricting contacts to 1000 on kit matching \"MB PhoneSystem\"", __s1, 2u);
    }
    return 1000;
  }
  return v5;
}

uint64_t sub_10058E1A4(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  int v12;

  if (!*(_QWORD *)(a1 + 8))
    sub_10058DEF8(a1, a2, 11);
  v12 = sub_10058E074(a1, a2);
  *a4 = v12;
  *a3 = v12 != 0;
  *a5 = 50;
  *a6 = 50;
  return 1;
}

uint64_t sub_10058E228(uint64_t a1, unsigned int a2)
{
  unsigned __int16 v4;
  char i;
  uint64_t v6;
  int v7;

  if (*(_DWORD *)(a1 + 16) <= a2)
  {
    v4 = *(_WORD *)(a1 + 20);
  }
  else
  {
    v4 = 0;
    *(_DWORD *)(a1 + 16) = 1;
    *(_WORD *)(a1 + 20) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  for (i = 1; ; i = 0)
  {
    while (1)
    {
      v6 = sub_100586704(*(_QWORD *)(a1 + 8), v4);
      if (!v6)
        break;
      if (*(_QWORD *)(a1 + 24) < (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                   * ((uint64_t)(*(_QWORD *)(v6 + 240) - *(_QWORD *)(v6 + 232)) >> 3)))
      {
        v7 = *(_DWORD *)(a1 + 16);
        if (v7 == a2)
          return 1;
        *(_DWORD *)(a1 + 16) = v7 + 1;
        i = 1;
      }
      sub_100586764(*(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 20));
      v4 = *(_WORD *)(a1 + 20) + 1;
      *(_WORD *)(a1 + 20) = v4;
    }
    if ((i & 1) == 0)
      break;
    v4 = 0;
    *(_WORD *)(a1 + 20) = 0;
    ++*(_QWORD *)(a1 + 24);
  }
  return 0;
}

uint64_t sub_10058E320(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  void **v11;
  _BOOL4 v12;
  int v13;
  int v14;
  int v15;
  std::string::size_type size;
  void *v17;
  std::string *v18;
  __int128 v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  NSObject *v22;
  std::string *p_dst;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  std::string::size_type v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  NSObject *v41;
  int v42;
  uint64_t v43;
  std::string __p;
  void *v46[2];
  uint64_t v47;
  std::string __dst;
  void *v49[2];
  __int128 v50;
  void *v51[2];
  uint64_t v52;
  std::string v53;
  char *v54;
  uint64_t v55;
  _BYTE buf[24];
  _BYTE v57[12];
  __int128 v58;
  uint64_t v59;
  int v60;

  if (*(_QWORD *)(a1 + 8))
  {
    v9 = (uint64_t)(a5 + 2);
    while (sub_10058E228(a1, a3))
    {
      v10 = sub_100586704(*(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 20));
      v52 = 0;
      v50 = 0u;
      *(_OWORD *)v51 = 0u;
      *(_OWORD *)v49 = 0u;
      sub_1003495B0((_QWORD *)v10, *(_QWORD *)(a1 + 24), (uint64_t)v49);
      v11 = v49;
      if (SBYTE7(v50) < 0)
        v11 = (void **)v49[0];
      v12 = *(unsigned __int8 *)v11 != 43;
      if (DWORD2(v50) == 4)
        v13 = 3;
      else
        v13 = 0;
      if (DWORD2(v50) == 3)
        v14 = 2;
      else
        v14 = v13;
      if ((DWORD2(v50) - 1) < 2)
        v15 = 1;
      else
        v15 = v14;
      memset(&__dst, 0, sizeof(__dst));
      if (*(char *)(v10 + 39) < 0)
        sub_10003430C(&__dst, *(void **)(v10 + 16), *(_QWORD *)(v10 + 24));
      else
        __dst = *(std::string *)(v10 + 16);
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __dst.__r_.__value_.__l.__size_;
      if (size)
      {
        v17 = (void *)HIBYTE(v52);
        if (v52 < 0)
          v17 = v51[1];
        if (v17)
        {
          std::operator+<char>(&v53, " (", v51);
          v18 = std::string::append(&v53, ")");
          v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          *(_QWORD *)&buf[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
          *(_OWORD *)buf = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          if (buf[23] >= 0)
            v20 = buf;
          else
            v20 = *(const std::string::value_type **)buf;
          if (buf[23] >= 0)
            v21 = buf[23];
          else
            v21 = *(_QWORD *)&buf[8];
          std::string::append(&__dst, v20, v21);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
        }
      }
      v22 = qword_100999888;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_INFO))
      {
        p_dst = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v24 = *(unsigned __int16 *)(a1 + 20);
        v25 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = a3;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = p_dst;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v24;
        *(_WORD *)v57 = 2048;
        *(_QWORD *)&v57[2] = v25;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Found index #%u (\"%{public}s\") at entry <%u,%zu>", buf, 0x22u);
      }
      if (SBYTE7(v50) < 0)
      {
        sub_10003430C(v46, v49[0], (unint64_t)v49[1]);
      }
      else
      {
        *(_OWORD *)v46 = *(_OWORD *)v49;
        v47 = v50;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_10003430C(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        __p = __dst;
      sub_10058E958((uint64_t)buf, a3, (__int128 *)v46, v12, &__p, v15);
      v26 = a5[1];
      v27 = a5[2];
      if (v26 >= v27)
      {
        v30 = 0x8E38E38E38E38E39 * ((uint64_t)(v26 - *a5) >> 3);
        v31 = v30 + 1;
        if (v30 + 1 > 0x38E38E38E38E38ELL)
          abort();
        v32 = 0x8E38E38E38E38E39 * ((uint64_t)(v27 - *a5) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x1C71C71C71C71C7)
          v33 = 0x38E38E38E38E38ELL;
        else
          v33 = v31;
        v55 = v9;
        v34 = (char *)sub_10058EAA0(v9, v33);
        v35 = (std::string::size_type)&v34[72 * v30];
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
        v53.__r_.__value_.__l.__size_ = v35;
        v54 = &v34[72 * v36];
        *(_DWORD *)v35 = *(_DWORD *)buf;
        v37 = *(_OWORD *)&buf[8];
        *(_QWORD *)(v35 + 24) = *(_QWORD *)v57;
        *(_OWORD *)(v35 + 8) = v37;
        *(_QWORD *)&buf[16] = 0;
        *(_QWORD *)v57 = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_DWORD *)(v35 + 32) = *(_DWORD *)&v57[8];
        v38 = v58;
        *(_QWORD *)(v35 + 56) = v59;
        *(_OWORD *)(v35 + 40) = v38;
        v59 = 0;
        v58 = 0uLL;
        *(_DWORD *)(v35 + 64) = v60;
        v53.__r_.__value_.__r.__words[2] = v35 + 72;
        sub_10058EA08(a5, &v53);
        v39 = a5[1];
        sub_10058EAE8((void **)&v53.__r_.__value_.__l.__data_);
        v40 = SHIBYTE(v59);
        a5[1] = v39;
        if (v40 < 0)
          operator delete((void *)v58);
      }
      else
      {
        *(_DWORD *)v26 = *(_DWORD *)buf;
        v28 = *(_OWORD *)&buf[8];
        *(_QWORD *)(v26 + 24) = *(_QWORD *)v57;
        *(_OWORD *)(v26 + 8) = v28;
        *(_QWORD *)&buf[16] = 0;
        *(_QWORD *)v57 = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_DWORD *)(v26 + 32) = *(_DWORD *)&v57[8];
        v29 = v58;
        *(_QWORD *)(v26 + 56) = v59;
        *(_OWORD *)(v26 + 40) = v29;
        v59 = 0;
        v58 = 0uLL;
        *(_DWORD *)(v26 + 64) = v60;
        a5[1] = v26 + 72;
      }
      if ((v57[7] & 0x80000000) != 0)
        operator delete(*(void **)&buf[8]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v47) < 0)
        operator delete(v46[0]);
      sub_100586764(*(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 20));
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v52) < 0)
        operator delete(v51[0]);
      if (SBYTE7(v50) < 0)
        operator delete(v49[0]);
      if (++a3 > a4)
        return 1;
    }
    v41 = qword_100999888;
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
    {
      v42 = *(unsigned __int16 *)(a1 + 20);
      v43 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = a3;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v42;
      *(_WORD *)&buf[14] = 2048;
      *(_QWORD *)&buf[16] = v43;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Could not find entry for index #%u (curEntryIndex=%u, curNumberDepth=%zu)", buf, 0x18u);
    }
  }
  return 1;
}

void sub_10058E89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a25 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  sub_100353374((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_10058E958(uint64_t a1, int a2, __int128 *a3, int a4, std::string *__str, int a6)
{
  __int128 v10;
  char v12;

  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 8), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v10;
  }
  *(_DWORD *)(a1 + 32) = a4;
  std::string::basic_string((std::string *)(a1 + 40), __str, 0, 0x1F4uLL, (std::allocator<char> *)&v12);
  *(_DWORD *)(a1 + 64) = a6;
  return a1;
}

void sub_10058E9EC(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10058EA08(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 72);
    v2 -= 72;
    *(_DWORD *)(v4 - 72) = v5;
    v4 -= 72;
    v6 = *(_OWORD *)(v2 + 8);
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(v2 + 32);
    v7 = *(_OWORD *)(v2 + 40);
    *(_QWORD *)(v4 + 56) = *(_QWORD *)(v2 + 56);
    *(_OWORD *)(v4 + 40) = v7;
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_DWORD *)(v4 + 64) = *(_DWORD *)(v2 + 64);
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *sub_10058EAA0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    sub_10007ABD4();
  return operator new(72 * a2);
}

void **sub_10058EAE8(void **a1)
{
  sub_10058EB18(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_10058EB18(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    sub_10058CE54(v4, i - 72);
  }
}

uint64_t sub_10058EB5C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100939B70;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

BOOL sub_10058EBB4(uint64_t a1, uint64_t a2, unsigned __int16 a3, _WORD *a4)
{
  const std::string *v8;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  unint64_t v13;
  std::string::size_type v14;

  *a4 = 0;
  v8 = (const std::string *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 40);
  while (1)
  {
    v10 = *(unsigned __int8 *)(a1 + 39);
    if (*(char *)(a1 + 39) < 0)
      v11 = *(_QWORD *)(a1 + 24);
    else
      v11 = *(unsigned __int8 *)(a1 + 39);
    if (v9 == v11)
    {
      *(_QWORD *)(a1 + 40) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v10 = *(unsigned __int8 *)(a1 + 39);
      if (*(char *)(a1 + 39) < 0)
      {
        if (!*(_QWORD *)(a1 + 24))
          break;
      }
      else if (!*(_BYTE *)(a1 + 39))
      {
        break;
      }
    }
    if (!a3)
      break;
    if ((v10 & 0x80) != 0)
      v10 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 40);
    v13 = v10 - v12;
    if (v13 >= a3)
      v14 = a3;
    else
      v14 = v13;
    std::string::copy(v8, (std::string::value_type *)(a2 + (unsigned __int16)*a4), v14, v12);
    v9 = *(_QWORD *)(a1 + 40) + v14;
    *(_QWORD *)(a1 + 40) = v9;
    *a4 += v14;
    a3 -= v14;
  }
  if ((v10 & 0x80) != 0)
    v10 = *(_QWORD *)(a1 + 24);
  return v10 != 0;
}

double sub_10058ECB4(uint64_t a1, uint64_t a2, char a3, __int16 a4)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)a1 = off_100939B98;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 52) = 0;
  *(_WORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 58) = a4;
  return result;
}

void sub_10058ECDC(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string::size_type v11;
  char v12;
  std::string::size_type size;
  std::string::size_type v14;
  _QWORD *v15;
  _BYTE *v16;
  uint64_t v17;
  _QWORD *v18;
  void **v19;
  NSObject *v20;
  int v21;
  std::string v22;
  _BYTE __str[32];
  void *__p[2];
  uint64_t v25;
  uint8_t buf[16];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *v30[2];
  __int128 v31;
  __int128 v32;
  _OWORD v33[9];
  uint64_t v34;

  switch(*(_DWORD *)(a1 + 52))
  {
    case 0:
      v2 = (_QWORD *)(a1 + 16);
      std::string::assign((std::string *)(a1 + 16), "<?xml version=\"1.0\"?>\n<!DOCTYPE vcard-listing SYSTEM \"vcard-listing.dtd\">\n<vCard-listing version=\"1.0\">\n");
      v3 = qword_100999888;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(a1 + 39) < 0)
          v2 = (_QWORD *)*v2;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Sending header:\n\n%s", buf, 0xCu);
      }
      *(_DWORD *)(a1 + 52) = 1;
      break;
    case 1:
      v4 = sub_100586704(*(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 56));
      if (!v4)
      {
        *(_DWORD *)(a1 + 52) = 2;
        goto LABEL_13;
      }
      v5 = v4;
      v34 = 0;
      v32 = 0u;
      memset(v33, 0, sizeof(v33));
      *(_OWORD *)v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      *(_OWORD *)buf = 0u;
      v27 = 0u;
      sub_100272ADC((uint64_t)buf);
      sub_1002614D8(buf, (uint64_t)"<card ", 6);
      if (*(_BYTE *)(a1 + 48))
        v6 = *(unsigned __int16 *)(a1 + 58) + *(unsigned __int16 *)(a1 + 56) + 1;
      else
        v6 = *(unsigned int *)(v5 + 8);
      v9 = sub_1002614D8(buf, (uint64_t)"handle=\"", 8);
      *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 8;
      v10 = (_QWORD *)std::ostream::operator<<(v9, v6);
      *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 8) & 0xFFFFFFB5 | 2;
      sub_1002614D8(v10, (uint64_t)".vcf\"", 5);
      memset(&v22, 0, sizeof(v22));
      if (*(char *)(v5 + 39) < 0)
        sub_10003430C(&v22, *(void **)(v5 + 16), *(_QWORD *)(v5 + 24));
      else
        v22 = *(std::string *)(v5 + 16);
      v11 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      v12 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      size = v22.__r_.__value_.__l.__size_;
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      else
        v14 = v22.__r_.__value_.__l.__size_;
      if (!v14 && *(_BYTE *)(a1 + 48))
      {
        v25 = 0;
        *(_OWORD *)__p = 0u;
        memset(__str, 0, sizeof(__str));
        sub_1003495B0((_QWORD *)v5, 0, (uint64_t)__str);
        std::string::operator=(&v22, (const std::string *)__str);
        if (SHIBYTE(v25) < 0)
          operator delete(__p[0]);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        v11 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
        size = v22.__r_.__value_.__l.__size_;
        v12 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      }
      if (v12 < 0)
        v11 = size;
      if (v11)
      {
        v15 = sub_1002614D8(buf, (uint64_t)" name=\"", 7);
        sub_1004176F0((uint64_t)&v22, (std::string *)__str);
        v16 = __str[23] >= 0 ? __str : *(_BYTE **)__str;
        v17 = __str[23] >= 0 ? __str[23] : *(_QWORD *)&__str[8];
        v18 = sub_1002614D8(v15, (uint64_t)v16, v17);
        sub_1002614D8(v18, (uint64_t)"\"", 1);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
      }
      sub_1002614D8(buf, (uint64_t)"/>\n", 3);
      std::stringbuf::str(&buf[8]);
      v19 = (void **)(a1 + 16);
      if (*(char *)(a1 + 39) < 0)
        operator delete(*v19);
      *(_OWORD *)v19 = *(_OWORD *)__str;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)&__str[16];
      v20 = qword_100999888;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_INFO))
      {
        v21 = *(unsigned __int16 *)(a1 + 56);
        if (*(char *)(a1 + 39) < 0)
          v19 = (void **)*v19;
        *(_DWORD *)__str = 67109378;
        *(_DWORD *)&__str[4] = v21;
        *(_WORD *)&__str[8] = 2080;
        *(_QWORD *)&__str[10] = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Sending card #%u:\n\n%s", __str, 0x12u);
      }
      sub_100586764(*(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 56));
      ++*(_WORD *)(a1 + 56);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31) < 0)
        operator delete(v30[1]);
      std::streambuf::~streambuf(&buf[8]);
      std::ios::~ios(v33);
      break;
    case 2:
LABEL_13:
      v7 = (_QWORD *)(a1 + 16);
      std::string::assign((std::string *)(a1 + 16), "</vCard-listing>\n");
      v8 = qword_100999888;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(a1 + 39) < 0)
          v7 = (_QWORD *)*v7;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Sending footer:\n\n%s", buf, 0xCu);
      }
      *(_DWORD *)(a1 + 52) = 3;
      break;
    case 3:
      if (*(char *)(a1 + 39) < 0)
      {
        **(_BYTE **)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 16) = 0;
        *(_BYTE *)(a1 + 39) = 0;
      }
      break;
    default:
      return;
  }
}

void sub_10058F1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_100353374((uint64_t)&a16);
  if (a14 < 0)
    operator delete(__p);
  sub_100272CFC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_10058F240(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)a1 = off_100939BC0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 52) = a4;
  *(_WORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 58) = sub_100448894(a5);
  return a1;
}

void sub_10058F288(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10058EB5C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10058F2A0(uint64_t a1)
{
  uint64_t result;
  void **v3;
  NSObject *v4;
  int v5;
  _BYTE v6[24];

  result = sub_100586704(*(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 56));
  if (result)
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)result + 16))(v6, result, *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned __int8 *)(a1 + 58));
    v3 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v3);
    *(_OWORD *)v3 = *(_OWORD *)v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)&v6[16];
    v4 = qword_100999888;
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_INFO))
    {
      v5 = *(unsigned __int16 *)(a1 + 56);
      if (*(char *)(a1 + 39) < 0)
        v3 = (void **)*v3;
      *(_DWORD *)v6 = 67109378;
      *(_DWORD *)&v6[4] = v5;
      *(_WORD *)&v6[8] = 2080;
      *(_QWORD *)&v6[10] = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending vCard #%u:\n\n%s", v6, 0x12u);
    }
    result = sub_100586764(*(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 56));
    ++*(_WORD *)(a1 + 56);
  }
  else if (*(char *)(a1 + 39) < 0)
  {
    **(_BYTE **)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 39) = 0;
  }
  return result;
}

void sub_10058F3F8(uint64_t a1)
{
  sub_10058EB5C(a1);
  operator delete();
}

void sub_10058F420(uint64_t a1)
{
  sub_10058EB5C(a1);
  operator delete();
}

uint64_t sub_10058F444(uint64_t a1, int a2, io_service_t a3)
{
  _QWORD *v5;
  IOCFPlugInInterface ***v6;
  const __CFUUID *v7;
  const __CFUUID *v8;
  uint64_t v9;
  IOCFPlugInInterface **v11;
  HRESULT (__cdecl *QueryInterface)(void *, REFIID, LPVOID *);
  const __CFUUID *v13;
  CFUUIDBytes v14;
  SInt32 theScore;

  *(_QWORD *)(a1 + 16) = 0;
  v5 = (_QWORD *)(a1 + 16);
  *(_DWORD *)a1 = a2;
  v6 = (IOCFPlugInInterface ***)(a1 + 8);
  v7 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x53u, 0xEAu, 0x67u, 0x34u, 0xC7u, 0xEu, 0x46u, 0x35u, 0x9Cu, 0xF5u, 0x4Fu, 0xAFu, 5u, 0xB4u, 0xF2u, 0x30u);
  v8 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
  v9 = IOCreatePlugInInterfaceForService(a3, v7, v8, v6, &theScore);
  if (!(_DWORD)v9)
  {
    v11 = *v6;
    QueryInterface = (*v11)->QueryInterface;
    v13 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0xA6u, 0x7Au, 0x69u, 0x95u, 0x23u, 0x6Bu, 0x44u, 0xDEu, 0x97u, 0xB5u, 0x27u, 0xB9u, 0xB1u, 0xE6u, 0x6Fu, 0x2Fu);
    v14 = CFUUIDGetUUIDBytes(v13);
    ((void (*)(IOCFPlugInInterface **, _QWORD, _QWORD, _QWORD *))QueryInterface)(v11, *(_QWORD *)&v14.byte0, *(_QWORD *)&v14.byte8, v5);
    if (*v5)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 64))(*v5);
      if ((_DWORD)v9)
      {
        if (dword_10097B7B0 <= 90
          && (dword_10097B7B0 != -1 || _LogCategory_Initialize(&dword_10097B7B0, 90)))
        {
          LogPrintF_safe(&dword_10097B7B0, "kern_return_t AOPFastpathGlue::open(unsigned int, io_service_t)", 90, "error: failed to open AOP, error 0x%x", v9);
        }
      }
      else
      {
        *(_DWORD *)(a1 + 24) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16));
      }
    }
    else
    {
      if (dword_10097B7B0 <= 90
        && (dword_10097B7B0 != -1 || _LogCategory_Initialize(&dword_10097B7B0, 90)))
      {
        LogPrintF_safe(&dword_10097B7B0, "kern_return_t AOPFastpathGlue::open(unsigned int, io_service_t)", 90, "error: failed to query fastpath interface, error 0x%x", 0);
      }
      return 0;
    }
  }
  return v9;
}

uint64_t sub_10058F698(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  _BYTE v17[12];
  int v18;
  const void *v19;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 96))(v4);
  __chkstk_darwin();
  v8 = &v17[-v7];
  bzero(&v17[-v7], v9);
  v10 = **(_QWORD **)(a1 + 16);
  if (*(_QWORD *)(a1 + 32))
  {
    v11 = (*(uint64_t (**)(void))(v10 + 104))();
    if (v11)
    {
      if (dword_10097B7B0 <= 90)
      {
        v12 = v11;
        if (dword_10097B7B0 != -1 || _LogCategory_Initialize(&dword_10097B7B0, 90))
          LogPrintF_safe(&dword_10097B7B0, "uint32_t AOPFastpathGlue::read(uint8_t *, uint32_t)", 90, "error: Read error 0x%x", v12);
      }
      return 0;
    }
  }
  else
  {
    v14 = (*(uint64_t (**)(void))(v10 + 112))();
    if (v14)
    {
      if (dword_10097B7B0 <= 90)
      {
        v15 = v14;
        if (dword_10097B7B0 != -1 || _LogCategory_Initialize(&dword_10097B7B0, 90))
          LogPrintF_safe(&dword_10097B7B0, "uint32_t AOPFastpathGlue::read(uint8_t *, uint32_t)", 90, "error: ReadLast error 0x%x", v15);
      }
    }
  }
  v19 = 0;
  v13 = 0;
  if ((_DWORD)a3)
  {
    while ((*(unsigned int (**)(_QWORD, _QWORD *, uint64_t, const void **, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16), v8, a1 + 40, &v19, 0, 0))
    {
      memcpy(a2, v19, *(unsigned int *)(a1 + 24));
      v18 = 0;
      (*(void (**)(_QWORD, _QWORD *, _QWORD, int *))(**(_QWORD **)(a1 + 16) + 136))(*(_QWORD *)(a1 + 16), v8, *(_QWORD *)(a1 + 40), &v18);
      if (v18)
      {
        if (dword_10097B7B0 <= 90
          && (dword_10097B7B0 != -1 || _LogCategory_Initialize(&dword_10097B7B0, 90)))
        {
          LogPrintF_safe(&dword_10097B7B0, "uint32_t AOPFastpathGlue::read(uint8_t *, uint32_t)", 90, "interface %0x corrupt count %zd offset %zd, desc read/write [%llu/%llu/%zd, %llu/%llu/%zd", *(_DWORD *)a1, v8[10], v8[11], v8[3], v8[4], v8[2], v8[8], v8[9], v8[7]);
        }
        NSLog(CFSTR("Read %u, corrupt %u"), v13, 1);
        return v13;
      }
      v13 = (v13 + 1);
      a2 += *(unsigned int *)(a1 + 24);
      if ((_DWORD)a3 == (_DWORD)v13)
        return a3;
    }
  }
  return v13;
}

uint64_t sub_10058F98C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 8);
  v10 = *(_QWORD **)(a1 + 80);
  v11 = (_QWORD *)(a1 + 88);
  if (v10 != (_QWORD *)(a1 + 88))
  {
    v12 = a5;
    do
    {
      v13 = v10[4];
      if (v13)
      {
        if (*(_BYTE *)(*(_QWORD *)(v13 + 64) + 160))
        {
          v14 = xpc_dictionary_create(0, 0, 0);
          v15 = v14;
          if (v14)
          {
            xpc_dictionary_set_uint64(v14, "kCBMsgArgID", *(_QWORD *)(v13 + 40));
            xpc_dictionary_set_uint64(v15, "kCBMsgArgAccessoryManagerID", a2);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgEvent", a3);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgBTDevice", a4);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgState", v12);
            sub_1002C5EC8(*(_QWORD *)(v13 + 64), "kCBMsgIdAccessoryEvent", v15, 1);
          }
        }
      }
      v16 = (_QWORD *)v10[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v10[2];
          v18 = *v17 == (_QWORD)v10;
          v10 = v17;
        }
        while (!v18);
      }
      v10 = v17;
    }
    while (v17 != v11);
  }
  return sub_100034234((uint64_t)v20);
}

void sub_10058FAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10058FB0C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, const void *a6, unsigned int a7)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  xpc_object_t v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  _QWORD v24[2];

  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1 + 8);
  v14 = *(_QWORD **)(a1 + 80);
  v15 = (_QWORD *)(a1 + 88);
  if (v14 != (_QWORD *)(a1 + 88))
  {
    v16 = a5;
    do
    {
      v17 = v14[4];
      if (v17)
      {
        if (*(_BYTE *)(*(_QWORD *)(v17 + 64) + 160))
        {
          v18 = xpc_dictionary_create(0, 0, 0);
          v19 = v18;
          if (v18)
          {
            xpc_dictionary_set_uint64(v18, "kCBMsgArgID", *(_QWORD *)(v17 + 40));
            xpc_dictionary_set_uint64(v19, "kCBMsgArgAccessoryManagerID", a2);
            xpc_dictionary_set_uint64(v19, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_uint64(v19, "kCBMsgArgSetupType", a4);
            xpc_dictionary_set_uint64(v19, "kCBMsgArgOPType", v16);
            xpc_dictionary_set_data(v19, "kCBMsgArgData", a6, a7);
            sub_1002C5EC8(*(_QWORD *)(v17 + 64), "kCBMsgIdAccessorySetupCommand", v19, 1);
          }
        }
      }
      v20 = (_QWORD *)v14[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v14[2];
          v22 = *v21 == (_QWORD)v14;
          v14 = v21;
        }
        while (!v22);
      }
      v14 = v21;
    }
    while (v21 != v15);
  }
  return sub_100034234((uint64_t)v24);
}

void sub_10058FC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10058FCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, const void *a6, unsigned int a7)
{
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;
  xpc_object_t v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  _QWORD v23[2];
  int bytes;
  __int16 v25;

  bytes = a4;
  v25 = WORD2(a4);
  v23[0] = 0;
  v23[1] = 0;
  sub_10003415C((uint64_t)v23, a1 + 8);
  v13 = *(_QWORD **)(a1 + 80);
  v14 = (_QWORD *)(a1 + 88);
  if (v13 != (_QWORD *)(a1 + 88))
  {
    v15 = a7;
    do
    {
      v16 = v13[4];
      if (v16)
      {
        if (*(_BYTE *)(*(_QWORD *)(v16 + 64) + 160))
        {
          v17 = xpc_dictionary_create(0, 0, 0);
          v18 = v17;
          if (v17)
          {
            xpc_dictionary_set_uint64(v17, "kCBMsgArgID", *(_QWORD *)(v16 + 40));
            xpc_dictionary_set_uint64(v18, "kCBMsgArgAccessoryManagerID", a2);
            xpc_dictionary_set_uint64(v18, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_data(v18, "kCBMsgArgAddressBytes", &bytes, 6uLL);
            xpc_dictionary_set_uint64(v18, "kCBMsgArgRelayMsgType", a5);
            xpc_dictionary_set_data(v18, "kCBMsgArgData", a6, v15);
            sub_1002C5EC8(*(_QWORD *)(v16 + 64), "kCBMsgIdAccessoryRelayMsgRecv", v18, 1);
          }
        }
      }
      v19 = (_QWORD *)v13[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v13[2];
          v21 = *v20 == (_QWORD)v13;
          v13 = v20;
        }
        while (!v21);
      }
      v13 = v20;
    }
    while (v20 != v14);
  }
  return sub_100034234((uint64_t)v23);
}

void sub_10058FE3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10058FE50(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  xpc_object_t v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD v21[2];

  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 8);
  v12 = *(_QWORD **)(a1 + 80);
  if (v12 != (_QWORD *)(a1 + 88))
  {
    v13 = a6;
    do
    {
      v14 = v12[4];
      if (v14)
      {
        if (*(_BYTE *)(*(_QWORD *)(v14 + 64) + 160))
        {
          v15 = xpc_dictionary_create(0, 0, 0);
          v16 = v15;
          if (v15)
          {
            xpc_dictionary_set_uint64(v15, "kCBMsgArgID", *(_QWORD *)(v14 + 40));
            xpc_dictionary_set_uint64(v16, "kCBMsgArgAccessoryManagerID", a2);
            xpc_dictionary_set_uint64(v16, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_uint64(v16, "kCBMsgArgCmdReqType", a4);
            xpc_dictionary_set_uint64(v16, "kCBMsgArgResult", a5);
            xpc_dictionary_set_uint64(v16, "kCBMsgArgReason", v13);
            sub_1002C5EC8(*(_QWORD *)(v14 + 64), "kCBMsgIdAccessoryCommandStatus", v16, 1);
          }
        }
      }
      v17 = (_QWORD *)v12[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v12[2];
          v19 = *v18 == (_QWORD)v12;
          v12 = v18;
        }
        while (!v19);
      }
      v12 = v18;
    }
    while (v18 != (_QWORD *)(a1 + 88));
  }
  return sub_100034234((uint64_t)v21);
}

void sub_10058FFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10058FFE8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5, size_t a6, uint64_t a7)
{
  NSObject *v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  xpc_object_t v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v26;
  _BYTE v27[22];
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  size_t v31;

  v13 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v27 = 134218752;
    *(_QWORD *)&v27[4] = a2;
    *(_WORD *)&v27[12] = 2048;
    *(_QWORD *)&v27[14] = a3;
    v28 = 1024;
    v29 = a4;
    v30 = 2048;
    v31 = a6;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "BTAccessoryMsgHandler::BTAccessoryCustomCallbackHandler manager:%llX device:%llX type:%X dataSize:%zu", v27, 0x26u);
  }
  *(_QWORD *)v27 = 0;
  *(_QWORD *)&v27[8] = 0;
  sub_10003415C((uint64_t)v27, a1 + 8);
  v14 = *(_QWORD **)(a1 + 80);
  if (v14 != (_QWORD *)(a1 + 88))
  {
    do
    {
      v15 = v14[4];
      if (v15 && *(_BYTE *)(*(_QWORD *)(v15 + 64) + 160) && *(_DWORD *)(v15 + 48) == a4)
      {
        v16 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
        {
          v22 = *(_QWORD *)(v15 + 40);
          *(_DWORD *)buf = 134217984;
          v26 = v22;
          _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "BTAccessoryMsgHandler::BTAccessoryCustomCallbackHandler cbid:%llu", buf, 0xCu);
        }
        v17 = xpc_dictionary_create(0, 0, 0);
        v18 = v17;
        if (v17)
        {
          xpc_dictionary_set_uint64(v17, "kCBMsgArgID", *(_QWORD *)(v15 + 40));
          xpc_dictionary_set_uint64(v18, "kCBMsgArgAccessoryManagerID", a2);
          xpc_dictionary_set_uint64(v18, "kCBMsgArgBTDevice", a3);
          xpc_dictionary_set_uint64(v18, "kCBMsgArgCustomMessageType", a4);
          xpc_dictionary_set_data(v18, "kCBMsgArgData", a5, a6);
          xpc_dictionary_set_uint64(v18, "kCBMsgArgUserData", a7);
          sub_1002C5EC8(*(_QWORD *)(v15 + 64), "kCBMsgIdAccessoryCustomMessage", v18, 1);
        }
      }
      v19 = (_QWORD *)v14[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v14[2];
          v21 = *v20 == (_QWORD)v14;
          v14 = v20;
        }
        while (!v21);
      }
      v14 = v20;
    }
    while (v20 != (_QWORD *)(a1 + 88));
  }
  return sub_100034234((uint64_t)v27);
}

void sub_100590278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100590294(uint64_t result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (a5)
    return sub_10058F98C(a5, result, a2, a3, a4);
  return result;
}

uint64_t sub_1005902B8(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, const void *a5, unsigned int a6, uint64_t a7)
{
  if (a7)
    return sub_10058FB0C(a7, result, a2, a3, a4, a5, a6);
  return result;
}

uint64_t sub_1005902E4(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5, unsigned int a6, uint64_t a7)
{
  if (a7)
    return sub_10058FCA8(a7, result, a2, a3 & 0xFFFFFFFFFFFFLL, a4, a5, a6);
  return result;
}

uint64_t sub_100590314(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  if (a6)
    return sub_10058FE50(a6, result, a2, a3, a4, a5);
  return result;
}

uint64_t sub_10059033C(uint64_t a1, uint64_t a2, unsigned int a3, const void *a4, size_t a5, uint64_t *a6)
{
  NSObject *v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  unsigned int v20;
  __int16 v21;
  size_t v22;
  __int16 v23;
  uint64_t *v24;

  v12 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    v15 = 134219008;
    v16 = a1;
    v17 = 2048;
    v18 = a2;
    v19 = 1024;
    v20 = a3;
    v21 = 2048;
    v22 = a5;
    v23 = 2048;
    v24 = a6;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "BTAccessoryMsgHandler::BTAccessoryCustomMessageCallback manager:%llX device:%llX type:%X dataSize:%zu userData:%p", (uint8_t *)&v15, 0x30u);
  }
  result = *a6;
  if (*a6)
  {
    v14 = *a6;
    if (a3 == 64)
      v14 = a6[1];
    return sub_10058FFE8(result, a1, a2, a3, a4, a5, v14);
  }
  return result;
}

void sub_100590464(id a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  const char *v77;
  uint64_t v78;
  const char **v79;

  v77 = "kCBMsgIdAccessoryGetDefaultMsg";
  v78 = 30;
  v79 = &v77;
  v1 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v1[4] = sub_10000C460;
  v1[5] = 0;
  v77 = "kCBMsgIdAccessoryAddCallbacksMsg";
  v78 = 32;
  v79 = &v77;
  v2 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v2[4] = sub_10000E3B8;
  v2[5] = 0;
  v77 = "kCBMsgIdAccessoryRemoveCallbacksMsg";
  v78 = 35;
  v79 = &v77;
  v3 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v3[4] = sub_1005914E4;
  v3[5] = 0;
  v77 = "kCBMsgIdAccessoryRegisterDeviceMsg";
  v78 = 34;
  v79 = &v77;
  v4 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v4[4] = sub_1005917B8;
  v4[5] = 0;
  v77 = "kCBMsgIdAccessoryPlugInDeviceMsg";
  v78 = 32;
  v79 = &v77;
  v5 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v5[4] = sub_100591970;
  v5[5] = 0;
  v77 = "kCBMsgIdAccessoryUnplugDeviceMsg";
  v78 = 32;
  v79 = &v77;
  v6 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v6[4] = sub_100591A58;
  v6[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDeviceStateMsg";
  v78 = 34;
  v79 = &v77;
  v7 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v7[4] = sub_100591B40;
  v7[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDevicesMsg";
  v78 = 30;
  v79 = &v77;
  v8 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v8[4] = sub_100591C4C;
  v8[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDeviceBatteryLevelMsg";
  v78 = 41;
  v79 = &v77;
  v9 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v9[4] = sub_100591E10;
  v9[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDeviceBatteryStatusMsg";
  v78 = 42;
  v79 = &v77;
  v10 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v10[4] = sub_100591F1C;
  v10[5] = 0;
  v77 = "kCBMsgIdAccessoryGetTimeSyncIdMsg";
  v78 = 33;
  v79 = &v77;
  v11 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v11[4] = sub_10059210C;
  v11[5] = 0;
  v77 = "kCBMsgIdAccessoryIsAccessoryMsg";
  v78 = 31;
  v79 = &v77;
  v12 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v12[4] = sub_100592218;
  v12[5] = 0;
  v77 = "kCBMsgIdAccessoryGenerateLinkKeyMsg";
  v78 = 35;
  v79 = &v77;
  v13 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v13[4] = sub_100592324;
  v13[5] = 0;
  v77 = "kCBMsgIdAccessorySetLinkKeyExMsg";
  v78 = 32;
  v79 = &v77;
  v14 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v14[4] = sub_1005924C0;
  v14[5] = 0;
  v77 = "kCBMsgIdAccessorySetFirstSettingMsg";
  v78 = 35;
  v79 = &v77;
  v15 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v15[4] = sub_1005926D8;
  v15[5] = 0;
  v77 = "kCBMsgIdAccessorySetSecondSettingMsg";
  v78 = 36;
  v79 = &v77;
  v16 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v16[4] = sub_1005927D8;
  v16[5] = 0;
  v77 = "kCBMsgIdAccessoryGetFirstSettingMsg";
  v78 = 35;
  v79 = &v77;
  v17 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v17[4] = sub_1005928D8;
  v17[5] = 0;
  v77 = "kCBMsgIdAccessorySetRemoteTimeSyncMsg";
  v78 = 37;
  v79 = &v77;
  v18 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v18[4] = sub_1005929E4;
  v18[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSecondSettingMsg";
  v78 = 36;
  v79 = &v77;
  v19 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v19[4] = sub_100592AE4;
  v19[5] = 0;
  v77 = "kCBMsgIdAccessoryRegisterCustomMessageClientMsg";
  v78 = 47;
  v79 = &v77;
  v20 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v20[4] = sub_100592BF0;
  v20[5] = 0;
  v77 = "kCBMsgIdAccessoryDeregisterCustomMessageClientMsg";
  v78 = 49;
  v79 = &v77;
  v21 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v21[4] = sub_100592FD8;
  v21[5] = 0;
  v77 = "kCBMsgIdAccessorySendCustomMessageMsg";
  v78 = 37;
  v79 = &v77;
  v22 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v22[4] = sub_1005932B8;
  v22[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDeviceDiagnosticsMsg";
  v78 = 40;
  v79 = &v77;
  v23 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v23[4] = sub_1005933EC;
  v23[5] = 0;
  v77 = "kCBMsgIdAccessorySendRequestPeriodicallyMsg";
  v78 = 43;
  v79 = &v77;
  v24 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v24[4] = sub_100593580;
  v24[5] = 0;
  v77 = "kCBMsgIdAccessoryCancelRequestPeriodicallyMsg";
  v78 = 45;
  v79 = &v77;
  v25 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v25[4] = sub_1005936A0;
  v25[5] = 0;
  v77 = "kCBMsgIdAccessorySendControlCommandMsg";
  v78 = 38;
  v79 = &v77;
  v26 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v26[4] = sub_1005937A0;
  v26[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDoubleTapActionMsg";
  v78 = 38;
  v79 = &v77;
  v27 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v27[4] = sub_1005938C0;
  v27[5] = 0;
  v77 = "kCBMsgIdAccessoryGetControlCommandMsg";
  v78 = 37;
  v79 = &v77;
  v28 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v28[4] = sub_1005939CC;
  v28[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDoubleTapActionExMsg";
  v78 = 40;
  v79 = &v77;
  v29 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v29[4] = sub_100593B10;
  v29[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDoubleTapCapabilityMsg";
  v78 = 42;
  v79 = &v77;
  v30 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v30[4] = sub_100593C34;
  v30[5] = 0;
  v77 = "kCBMsgIdAccessoryGetInEarStatusMsg";
  v78 = 34;
  v79 = &v77;
  v31 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v31[4] = sub_100593D40;
  v31[5] = 0;
  v77 = "kCBMsgIdAccessoryGetFeatureCapabilityMsg";
  v78 = 40;
  v79 = &v77;
  v32 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v32[4] = sub_100593E68;
  v32[5] = 0;
  v77 = "kCBMsgIdAccessorySetDoubleTapActionMsg";
  v78 = 38;
  v79 = &v77;
  v33 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v33[4] = sub_100593F8C;
  v33[5] = 0;
  v77 = "kCBMsgIdAccessorySetDoubleTapActionExMsg";
  v78 = 40;
  v79 = &v77;
  v34 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v34[4] = sub_10059408C;
  v34[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSettingFeatureBitMaskMsg";
  v78 = 44;
  v79 = &v77;
  v35 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v35[4] = sub_1005941AC;
  v35[5] = 0;
  v77 = "kCBMsgIdAccessoryGetAccessoryInfoMsg";
  v78 = 36;
  v79 = &v77;
  v36 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v36[4] = sub_1005942B8;
  v36[5] = 0;
  v77 = "kCBMsgIdAccessoryReadDeviceVersionInfoMsg";
  v78 = 41;
  v79 = &v77;
  v37 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v37[4] = sub_10059444C;
  v37[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDeviceColorMsg";
  v78 = 34;
  v79 = &v77;
  v38 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v38[4] = sub_100594828;
  v38[5] = 0;
  v77 = "kCBMsgIdAccessoryGetWirelessSharingSpatialMsg";
  v78 = 45;
  v79 = &v77;
  v39 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v39[4] = sub_100594934;
  v39[5] = 0;
  v77 = "kCBMsgIdAccessorySetupCommandMsg";
  v78 = 32;
  v79 = &v77;
  v40 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v40[4] = sub_100594A40;
  v40[5] = 0;
  v77 = "kCBMsgIdAccessorySendRelayMsgMsg";
  v78 = 32;
  v79 = &v77;
  v41 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v41[4] = sub_100594B8C;
  v41[5] = 0;
  v77 = "kCBMsgIdAccessoryUpdateConnPriorityListMsg";
  v78 = 42;
  v79 = &v77;
  v42 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v42[4] = sub_100594D34;
  v42[5] = 0;
  v77 = "kCBMsgIdAccessoryGetNonAppleHAEPairedDevicesMsg";
  v78 = 47;
  v79 = &v77;
  v43 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v43[4] = sub_100594F28;
  v43[5] = 0;
  v77 = "kCBMsgIdAccessorySmartRouteModeMsg";
  v78 = 34;
  v79 = &v77;
  v44 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v44[4] = sub_100595108;
  v44[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSmartRouteModeMsg";
  v78 = 37;
  v79 = &v77;
  v45 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v45[4] = sub_100595208;
  v45[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSmartRouteSupportMsg";
  v78 = 40;
  v79 = &v77;
  v46 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v46[4] = sub_100595314;
  v46[5] = 0;
  v77 = "kCBMsgIdAccessorySetDeviceStateOnPeerSrcMsg";
  v78 = 43;
  v79 = &v77;
  v47 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v47[4] = sub_100595420;
  v47[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSpatialAudioPlatformSupportMsg";
  v78 = 50;
  v79 = &v77;
  v48 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v48[4] = sub_1005955A4;
  v48[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDeviceSoundProfileSupportMsg";
  v78 = 48;
  v79 = &v77;
  v49 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v49[4] = sub_1005956B0;
  v49[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDeviceSoundProfileAllowedMsg";
  v78 = 48;
  v79 = &v77;
  v50 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v50[4] = sub_1005957C8;
  v50[5] = 0;
  v77 = "kCBMsgIdAccessorySetDeviceSoundProfileAllowedMsg";
  v78 = 48;
  v79 = &v77;
  v51 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v51[4] = sub_1005958E4;
  v51[5] = 0;
  v77 = "kCBMsgIdAccessoryGetCallManagementConfigMsg";
  v78 = 43;
  v79 = &v77;
  v52 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v52[4] = sub_1005959F0;
  v52[5] = 0;
  v77 = "kCBMsgIdAccessoryGetFeatureProxCardStatusMsg";
  v78 = 44;
  v79 = &v77;
  v53 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v53[4] = sub_100595B84;
  v53[5] = 0;
  v77 = "kCBMsgIdAccessorySetFeatureProxCardStatusMsg";
  v78 = 44;
  v79 = &v77;
  v54 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v54[4] = sub_100595C9C;
  v54[5] = 0;
  v77 = "kCBMsgIdAccessoryGetStereoHFPSupportMsg";
  v78 = 39;
  v79 = &v77;
  v55 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v55[4] = sub_100595DA8;
  v55[5] = 0;
  v77 = "kCBMsgIdAccessoryGetAnnounceMessagesSupportMsg";
  v78 = 46;
  v79 = &v77;
  v56 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v56[4] = sub_100595EB4;
  v56[5] = 0;
  v77 = "kCBMsgIdAccessoryGetAACPCapabilityBitsMsg";
  v78 = 41;
  v79 = &v77;
  v57 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v57[4] = sub_100595FC0;
  v57[5] = 0;
  v77 = "kCBMsgIdAccessoryGetAACPCapabilityIntegerMsg";
  v78 = 44;
  v79 = &v77;
  v58 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v58[4] = sub_100596154;
  v58[5] = 0;
  v77 = "kCBMsgIdAccessorySensorStreamTimeSyncEnableMsg";
  v78 = 46;
  v79 = &v77;
  v59 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v59[4] = sub_100596278;
  v59[5] = 0;
  v77 = "kCBMsgIdAccessoryGetAnnounceCallsSupportMsg";
  v78 = 43;
  v79 = &v77;
  v60 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v60[4] = sub_100596378;
  v60[5] = 0;
  v77 = "kCBMsgIdAccessorySpatialAudioModeMsg";
  v78 = 36;
  v79 = &v77;
  v61 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v61[4] = sub_100596484;
  v61[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSpatialAudioModeMsg";
  v78 = 39;
  v79 = &v77;
  v62 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v62[4] = sub_1005965C8;
  v62[5] = 0;
  v77 = "kCBMsgIdAccessorySpatialAudioAllowedMsg";
  v78 = 39;
  v79 = &v77;
  v63 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v63[4] = sub_100596718;
  v63[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSpatialAudioAllowedMsg";
  v78 = 42;
  v79 = &v77;
  v64 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v64[4] = sub_10059681C;
  v64[5] = 0;
  v77 = "kCBMsgIdAccessoryGetAdaptiveLatencyJitterBufferLevelMsg";
  v78 = 55;
  v79 = &v77;
  v65 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v65[4] = sub_100596928;
  v65[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSpatialAudioActiveMsg";
  v78 = 41;
  v79 = &v77;
  v66 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v66[4] = sub_100596A5C;
  v66[5] = 0;
  v77 = "kCBMsgIdAccessorySetIsHiddenMsg";
  v78 = 31;
  v79 = &v77;
  v67 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v67[4] = sub_100596B68;
  v67[5] = 0;
  v77 = "kCBMsgIdAccessoryGetGyroInformationMsg";
  v78 = 38;
  v79 = &v77;
  v68 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v68[4] = sub_100596C68;
  v68[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSensorStreamingFrequencyMsg";
  v78 = 47;
  v79 = &v77;
  v69 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v69[4] = sub_100596D94;
  v69[5] = 0;
  v77 = "kCBMsgIdAccessoryGetCaseSerialNumbersForAppleProductIdMsg";
  v78 = 57;
  v79 = &v77;
  v70 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v70[4] = sub_100596EA0;
  v70[5] = 0;
  v77 = "kCBMsgIdAccessoryGetCaseSerialNumbersForAppleProductIdsMsg";
  v78 = 58;
  v79 = &v77;
  v71 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v71[4] = sub_100597034;
  v71[5] = 0;
  v77 = "kCBMsgIdAccessoryGetPrimaryBudSideMsg";
  v78 = 37;
  v79 = &v77;
  v72 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v72[4] = sub_10059721C;
  v72[5] = 0;
  v77 = "kCBMsgIdAccessoryGetHeadphoneFeatureValueMsg";
  v78 = 44;
  v79 = &v77;
  v73 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v73[4] = sub_100597330;
  v73[5] = 0;
  v77 = "kCBMsgIdAccessorySetHeadphoneFeatureValueMsg";
  v78 = 44;
  v79 = &v77;
  v74 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v74[4] = sub_100597454;
  v74[5] = 0;
  v77 = "kCBMsgIdAccessorySendAdaptiveVolumeMessageMsg";
  v78 = 45;
  v79 = &v77;
  v75 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v75[4] = sub_100597574;
  v75[5] = 0;
  v77 = "kCBMsgIdAccessorySendPMEConfigMessageMsg";
  v78 = 40;
  v79 = &v77;
  v76 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v77, (uint64_t)&unk_100740F58, (_OWORD **)&v79);
  v76[4] = sub_1005976DC;
  v76[5] = 0;
}

uint64_t sub_1005914E4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  int v8;
  au_asid_t asid;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  int v16;
  xpc_object_t reply;
  void *v18;
  _QWORD v20[2];
  _BYTE buf[12];
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_10070636C();
  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 8);
  if (!uint64)
    goto LABEL_21;
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_DWORD *)(v7 + 40);
  asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  v10 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = uint64;
    v22 = 1024;
    v23 = v8;
    v24 = 2048;
    v25 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "identifier mapping accessoryManagerID:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100939C28);
  if (sub_10000973C(qword_100977B48, uint64, v8, asid))
  {
    v11 = *(_QWORD **)(a1 + 80);
    if (v11 == (_QWORD *)(a1 + 88))
    {
LABEL_18:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100706340();
      v16 = 0;
    }
    else
    {
      while (1)
      {
        v12 = v11[4];
        if (*(_QWORD *)(v12 + 40) == v6 && *(_QWORD *)(v12 + 56) == uint64)
          break;
        v13 = (_QWORD *)v11[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v11[2];
            v15 = *v14 == (_QWORD)v11;
            v11 = v14;
          }
          while (!v15);
        }
        v11 = v14;
        if (v14 == (_QWORD *)(a1 + 88))
          goto LABEL_18;
      }
      *(_QWORD *)buf = v11[4];
      if (*(_BYTE *)(a1 + 105))
      {
        v16 = sub_100424590(uint64, (__int128 *)v12);
        *(_BYTE *)(a1 + 105) = 0;
      }
      else
      {
        v16 = 0;
      }
      sub_100015ECC(a1 + 80, (unint64_t *)buf);
      free(*(void **)buf);
    }
  }
  else
  {
LABEL_21:
    v16 = 7;
  }
  reply = xpc_dictionary_create_reply(xdict);
  v18 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v18);
    xpc_release(v18);
  }
  return sub_100034234((uint64_t)v20);
}

void sub_100591794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1005917B8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  int *data;
  int *v7;
  char *string;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  xpc_object_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  xpc_object_t reply;
  uint64_t value;
  size_t length;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  length = 0;
  data = (int *)xpc_dictionary_get_data(v4, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    v7 = data;
    string = (char *)xpc_dictionary_get_string(v4, "kCBMsgArgName");
    v9 = xpc_dictionary_get_uint64(v4, "kCBMsgArgClassOfDevice");
    v10 = (char *)xpc_dictionary_get_string(v4, "kCBMsgArgPincode");
    value = 0;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      sub_1007063CC();
      if (uint64)
        goto LABEL_4;
    }
    else if (uint64)
    {
LABEL_4:
      v11 = (int)sub_100424604(uint64, v7, string, v9, v10, &value);
LABEL_11:
      reply = xpc_dictionary_create_reply(xdict);
      if (!reply)
        return;
      v13 = reply;
      xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
      v15 = value;
      v14 = "kCBMsgArgBTDevice";
      v12 = v13;
      goto LABEL_13;
    }
    v11 = 7;
    goto LABEL_11;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
    sub_1006E7234();
  v12 = xpc_dictionary_create_reply(xdict);
  if (v12)
  {
    v13 = v12;
    v14 = "kCBMsgArgResult";
    v15 = 8;
LABEL_13:
    xpc_dictionary_set_uint64(v12, v14, v15);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v13);
    xpc_release(v13);
  }
}

void sub_100591970(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_10070642C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100424AF0(uint64, v6);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100591A58(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_10070648C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100424DA4(uint64, v6);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100591B40(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1007064EC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100424E70(uint64, v6, &value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgState", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100591C4C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  size_t v9;
  int v10;
  xpc_object_t reply;
  void *v12;
  xpc_object_t v13;
  unint64_t i;
  unint64_t v15;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  __chkstk_darwin(v6, 8 * v6);
  v8 = (unint64_t *)((char *)&v15 - v7);
  bzero((char *)&v15 - v7, v9);
  v15 = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_10070654C();
  if (v6 <= 0x100)
  {
    if (uint64)
      v10 = sub_100424F5C(uint64, v8, &v15, v6);
    else
      v10 = 7;
  }
  else
  {
    v10 = 1;
  }
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    v13 = xpc_array_create(0, 0);
    if (!v10 && v15)
    {
      for (i = 0; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, v8[i]);
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_100591E10(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LOBYTE(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1007065AC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1004250EC(uint64, v6, &value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercent", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100591F1C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value[2];
  uint64_t v11[2];
  uint64_t v12;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  v12 = 0;
  *(_OWORD *)value = 0u;
  *(_OWORD *)v11 = 0u;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_10070660C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1004251D8(uint64, v6, (uint64_t)value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercentSingle", LOBYTE(value[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercentLeft", LOBYTE(v11[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercentRight", LOBYTE(value[1]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercentCase", LOBYTE(v11[1]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercentCombined", v12);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgBatteryIsChargingSingle", HIDWORD(value[0]) != 0);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgBatteryIsChargingLeft", HIDWORD(v11[0]) != 0);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgBatteryIsChargingRight", HIDWORD(value[1]) != 0);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgBatteryIsChargingCase", HIDWORD(v11[1]) != 0);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgBatteryIsChargingCombined", HIDWORD(v12) != 0);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_10059210C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  value = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_10070666C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100426A30(uint64, v6, (uint64_t *)&value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgID", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100592218(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1007066CC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1004252C4(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgIsAccessory", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100592324(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  const void *data;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  void *v10;
  xpc_object_t reply;
  size_t v12;
  _QWORD bytes[2];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v12 = 0;
  data = xpc_dictionary_get_data(value, "kCBMsgArgAddressBytes", &v12);
  if (v12 == 6)
  {
    v7 = (uint64_t)data;
    bytes[0] = 0;
    bytes[1] = 0;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      sub_10070672C();
      if (uint64)
        goto LABEL_4;
    }
    else if (uint64)
    {
LABEL_4:
      v8 = (int)sub_1004253B4(uint64, v7, bytes);
LABEL_11:
      reply = xpc_dictionary_create_reply(xdict);
      if (!reply)
        return;
      v10 = reply;
      xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
      xpc_dictionary_set_data(v10, "kCBMsgArgLinkKey", bytes, 0x10uLL);
      goto LABEL_13;
    }
    v8 = 7;
    goto LABEL_11;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
    sub_1006E7234();
  v9 = xpc_dictionary_create_reply(xdict);
  if (v9)
  {
    v10 = v9;
    xpc_dictionary_set_uint64(v9, "kCBMsgArgResult", 8uLL);
LABEL_13:
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005924C0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  int *data;
  int *v7;
  char *string;
  uint64_t v9;
  int v10;
  __int128 *v11;
  uint64_t v12;
  xpc_object_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  xpc_object_t reply;
  uint64_t value;
  size_t v19;
  size_t length;
  __int128 v21;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  length = 0;
  data = (int *)xpc_dictionary_get_data(v4, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    v7 = data;
    string = (char *)xpc_dictionary_get_string(v4, "kCBMsgArgName");
    v9 = xpc_dictionary_get_uint64(v4, "kCBMsgArgClassOfDevice");
    v10 = xpc_dictionary_get_uint64(v4, "kCBMsgArgServiceMask");
    v19 = 0;
    v11 = (__int128 *)xpc_dictionary_get_data(v4, "kCBMsgArgLinkKey", &v19);
    value = 0;
    v21 = 0uLL;
    if (v11)
    {
      if (v19)
        v21 = *v11;
    }
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      sub_10070678C();
      if (uint64)
        goto LABEL_7;
    }
    else if (uint64)
    {
LABEL_7:
      v12 = (int)sub_1004254BC(uint64, v7, string, v9, v10, &v21, &value);
LABEL_14:
      reply = xpc_dictionary_create_reply(xdict);
      if (!reply)
        return;
      v14 = reply;
      xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v12);
      v16 = value;
      v15 = "kCBMsgArgBTDevice";
      v13 = v14;
      goto LABEL_16;
    }
    v12 = 7;
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
    sub_1006E7234();
  v13 = xpc_dictionary_create_reply(xdict);
  if (v13)
  {
    v14 = v13;
    v15 = "kCBMsgArgResult";
    v16 = 8;
LABEL_16:
    xpc_dictionary_set_uint64(v13, v15, v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v14);
    xpc_release(v14);
  }
}

void sub_1005926D8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgMicMode");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1007067EC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_100426284(uint64, v6, v7);
    goto LABEL_6;
  }
  v8 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005927D8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  int v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_10070684C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_100426B18(uint64, v6, v7);
    goto LABEL_6;
  }
  v8 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005928D8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1007068AC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100427BC4(uint64, v6, &value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgMicMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005929E4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  int v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_10070690C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_100426A20(uint64, v6, v7);
    goto LABEL_6;
  }
  v8 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_100592AE4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_10070696C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100427D5C(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgInEarDetect", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

uint64_t sub_100592BF0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  au_asid_t asid;
  NSObject *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  int v19;
  NSObject *v20;
  int v21;
  xpc_object_t reply;
  void *v23;
  uint64_t v25;
  _QWORD *v26;
  _QWORD v27[2];
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  _BYTE v31[18];
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgEventType");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgUserData");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1007069F8();
  v27[0] = 0;
  v27[1] = 0;
  sub_10003415C((uint64_t)v27, a1 + 8);
  if (!uint64)
  {
    v21 = 7;
    goto LABEL_28;
  }
  v9 = *(_QWORD *)(a1 + 72);
  v10 = *(_DWORD *)(v9 + 40);
  asid = xpc_connection_get_asid(*(xpc_connection_t *)(v9 + 16));
  v12 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218496;
    v29 = uint64;
    v30 = 1024;
    *(_DWORD *)v31 = v10;
    *(_WORD *)&v31[4] = 2048;
    *(_QWORD *)&v31[6] = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "identifier mapping accessoryManagerID:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100939C28);
  if (!sub_10000973C(qword_100977B48, uint64, v10, asid))
    goto LABEL_27;
  v13 = *(_QWORD **)(a1 + 80);
  if (v13 != (_QWORD *)(a1 + 88))
  {
    while (1)
    {
      v14 = (_QWORD *)v13[4];
      if (v14[5] == v7 && v14[7] == uint64 && v14[6] == v6)
        break;
      v15 = (_QWORD *)v13[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v13[2];
          v17 = *v16 == (_QWORD)v13;
          v13 = v16;
        }
        while (!v17);
      }
      v13 = v16;
      if (v16 == (_QWORD *)(a1 + 88))
        goto LABEL_19;
    }
LABEL_27:
    v21 = 1;
    goto LABEL_28;
  }
LABEL_19:
  v18 = malloc_type_calloc(1uLL, 0x60uLL, 0x10A0040EB02D296uLL);
  v26 = v18;
  v18[6] = v6;
  v18[7] = uint64;
  v18[4] = sub_10059033C;
  v18[5] = v7;
  v18[8] = *(_QWORD *)(a1 + 72);
  v18[9] = a1;
  if (v8)
    v19 = -1;
  else
    v19 = 0;
  *((_DWORD *)v18 + 22) = (int)((_DWORD)v6 << 25) >> 31;
  *((_DWORD *)v18 + 23) = v19;
  sub_10000F7A0((uint64_t **)(a1 + 80), (unint64_t *)&v26, (uint64_t *)&v26);
  v20 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    v25 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)buf = 134219008;
    v29 = uint64;
    v30 = 2048;
    *(_QWORD *)v31 = v26 + 4;
    *(_WORD *)&v31[8] = 2048;
    *(_QWORD *)&v31[10] = v7;
    v32 = 2048;
    v33 = v6;
    v34 = 2048;
    v35 = v25;
    _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "BTAccessoryMsgHandler::handleBTAccessoryRegisterCustomMessageClientMsg accessoryManager:%llx callbacks:%p cbid:%llu messageType:%llX fBTAccessoryCallbacks.size():%lu", buf, 0x34u);
  }
  if (*(_BYTE *)(a1 + 104))
  {
    v21 = 0;
  }
  else
  {
    v21 = sub_1004280B4(uint64, v26 + 4, -1, (uint64_t)(v26 + 9));
    if (v21)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007069CC();
    }
    else
    {
      *(_BYTE *)(a1 + 104) = 1;
    }
  }
LABEL_28:
  reply = xpc_dictionary_create_reply(xdict);
  v23 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v21);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v23);
    xpc_release(v23);
  }
  return sub_100034234((uint64_t)v27);
}

void sub_100592FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100592FD8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  int v8;
  au_asid_t asid;
  NSObject *v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  int v16;
  xpc_object_t reply;
  void *v18;
  _QWORD v20[2];
  _BYTE buf[12];
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_100706A58();
  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 8);
  if (uint64)
  {
    v7 = *(_QWORD *)(a1 + 72);
    v8 = *(_DWORD *)(v7 + 40);
    asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
    v10 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = uint64;
      v22 = 1024;
      v23 = v8;
      v24 = 2048;
      v25 = asid;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "identifier mapping accessoryManagerID:%llx pid:%d asid:%llx", buf, 0x1Cu);
    }
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100939C28);
    if (sub_10000973C(qword_100977B48, uint64, v8, asid))
    {
      v11 = *(_QWORD **)(a1 + 80);
      if (v11 == (_QWORD *)(a1 + 88))
      {
LABEL_18:
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_100706340();
        v16 = 0;
      }
      else
      {
        while (1)
        {
          v12 = (uint64_t *)v11[4];
          if (v12[5] == v6 && v12[7] == uint64)
            break;
          v13 = (_QWORD *)v11[1];
          if (v13)
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v11[2];
              v15 = *v14 == (_QWORD)v11;
              v11 = v14;
            }
            while (!v15);
          }
          v11 = v14;
          if (v14 == (_QWORD *)(a1 + 88))
            goto LABEL_18;
        }
        *(_QWORD *)buf = v11[4];
        if (*(_BYTE *)(a1 + 104))
        {
          v16 = sub_100428174(uint64, v12 + 4);
          *(_BYTE *)(a1 + 104) = 0;
        }
        else
        {
          v16 = 0;
        }
        sub_100015ECC(a1 + 80, (unint64_t *)buf);
        free(*(void **)buf);
      }
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 7;
  }
  reply = xpc_dictionary_create_reply(xdict);
  v18 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v18);
    xpc_release(v18);
  }
  return sub_100034234((uint64_t)v20);
}

void sub_100593294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1005932B8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  const void *data;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;
  size_t length;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgClientType");
  length = 0;
  data = xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706AB8();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v9 = (int)sub_100428218(uint64, v7, v6, (uint64_t)data, length);
    goto LABEL_6;
  }
  v9 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005933EC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  xpc_object_t reply;
  void *v13;
  size_t v14;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v14 - v9;
  bzero((char *)&v14 - v9, v7);
  v14 = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706B18();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v11 = sub_100428710(uint64, v6, v10, &v14, v7);
    goto LABEL_6;
  }
  v11 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    if (!v11)
      xpc_dictionary_set_data(v13, "kCBMsgArgData", v10, v14);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v13);
    xpc_release(v13);
  }
}

void sub_100593580(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int16 v8;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgType");
  v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgInterval");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706B78();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v9 = (int)sub_1004288D8(uint64, v6, v7, v8);
    goto LABEL_6;
  }
  v9 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005936A0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgType");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706BD8();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_100428A20(uint64, v6, v7);
    goto LABEL_6;
  }
  v8 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005937A0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgValue");
  v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgType");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706C38();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v9 = (int)sub_100428B60(uint64, v6, v8, v7);
    goto LABEL_6;
  }
  v9 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005938C0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706C98();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1004277FC(uint64, v6, &value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgDoubleTapAction", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005939CC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int16 v8;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(v4, "kCBMsgArgType");
  v8 = xpc_dictionary_get_uint64(v4, "kCBMsgArgSubType");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706CF8();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v9 = (int)sub_100428DFC(uint64, v6, v7, v8, (int *)&value);
    goto LABEL_6;
  }
  v9 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_dictionary_set_uint64(v11, "kCBMsgArgValue", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_100593B10(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  value = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706D58();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100427988(uint64, v6, (_DWORD *)&value + 1, (int *)&value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgDoubleTapActionLeft", HIDWORD(value));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgDoubleTapActionRight", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100593C34(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706DB8();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100425E28(uint64, v6, &value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgDoubleTapCapability", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100593D40(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value[2];

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  value[0] = 0x300000003;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706E18();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100426E3C(uint64, v6, (int *)value + 1, (int *)value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgInEarStatusPrimary", HIDWORD(value[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgInEarStatusSecondary", LODWORD(value[0]));
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100593E68(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  int v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(v4, "kCBMsgArgFeature");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706E78();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_100425FB8(uint64, v6, v7, (int *)&value);
    goto LABEL_6;
  }
  v8 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgSupported", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_100593F8C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgDoubleTapAction");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706ED8();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_1004258A8(uint64, v6, v7);
    goto LABEL_6;
  }
  v8 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_10059408C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgDoubleTapActionLeft");
  v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgDoubleTapActionRight");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706F38();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v9 = (int)sub_100425B50(uint64, v6, v7, v8);
    goto LABEL_6;
  }
  v9 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005941AC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706F98();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100429ACC(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMSgArgFeatureBitMask", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005942B8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  xpc_object_t reply;
  void *v13;
  size_t v14;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v14 - v9;
  bzero((char *)&v14 - v9, v7);
  v14 = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706FF8();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v11 = sub_100429D94(uint64, v6, v10, &v14, v7);
    goto LABEL_6;
  }
  v11 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    if (!v11)
      xpc_dictionary_set_data(v13, "kCBMsgArgData", v10, v14);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v13);
    xpc_release(v13);
  }
}

void sub_10059444C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  xpc_object_t reply;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  size_t v44;
  size_t v45;
  size_t v46;
  uint64_t uint64;
  xpc_object_t v48;

  v41 = a1;
  v48 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v3 = xpc_dictionary_get_uint64(value, "kCBMsgArgAddressStringBuffSize");
  v4 = xpc_dictionary_get_uint64(value, "kCBMsgArgNameBuffSize");
  v5 = xpc_dictionary_get_uint64(value, "kCBMsgArgManufacturerBuffSize");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgModelNumberBuffSize");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgSerialNumberBuffSize");
  v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgFWVersionBuffSize");
  v9 = xpc_dictionary_get_uint64(value, "kCBMsgArgHWVersionBuffSize");
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v40 - v11;
  v46 = v3;
  bzero((char *)&v40 - v11, v3);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v40 - v15;
  v45 = v4;
  bzero((char *)&v40 - v15, v4);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v40 - v19;
  v44 = v5;
  bzero((char *)&v40 - v19, v5);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v40 - v23;
  v43 = v6;
  bzero((char *)&v40 - v23, v6);
  __chkstk_darwin(v25, v26);
  v28 = (char *)&v40 - v27;
  v42 = v7;
  bzero((char *)&v40 - v27, v7);
  __chkstk_darwin(v29, v30);
  v32 = (char *)&v40 - v31;
  bzero((char *)&v40 - v31, v8);
  __chkstk_darwin(v33, v34);
  v36 = (char *)&v40 - v35;
  bzero((char *)&v40 - v35, v9);
  *v12 = 0;
  *v16 = 0;
  *v20 = 0;
  *v24 = 0;
  *v28 = 0;
  *v32 = 0;
  *v36 = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_100707058();
  v37 = sub_10042A424(uint64, v12, v46, v16, v45, v20, v44, v24, v43, v28, v42, v32, v8, v36, v9);
  reply = xpc_dictionary_create_reply(v48);
  if (reply)
  {
    v39 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v37);
    if (!v37)
    {
      xpc_dictionary_set_string(v39, "kCBMsgArgAddressString", v12);
      xpc_dictionary_set_string(v39, "kCBMsgArgName", v16);
      xpc_dictionary_set_string(v39, "kCBMsgArgManufacturer", v20);
      xpc_dictionary_set_string(v39, "kCBMsgArgModelNumber", v24);
      xpc_dictionary_set_string(v39, "kCBMsgArgSerialNumber", v28);
      xpc_dictionary_set_string(v39, "kCBMsgArgFWVersion", v32);
      xpc_dictionary_set_string(v39, "kCBMsgArgHWVersion", v36);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(v41 + 72) + 16), v39);
    xpc_release(v39);
  }
}

void sub_100594828(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707090();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_10042A4FC(uint64, v6, &value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgColor", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100594934(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1007070F0();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_10042D9C0(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgWSSpatial", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100594A40(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int16 *data;
  uint64_t v10;
  xpc_object_t reply;
  void *v12;
  size_t length;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgSetupType");
  v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgOPType");
  length = 0;
  data = (unsigned __int16 *)xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707150();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v10 = (int)sub_100426FCC(uint64, v6, v7, v8, data, (unsigned __int16)length);
    goto LABEL_6;
  }
  v10 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_100594B8C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  int v7;
  const void *data;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  xpc_object_t reply;
  void *v13;
  uint64_t v14;
  size_t v15;
  size_t length;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgRelayMsgType");
  length = 0;
  data = xpc_dictionary_get_data(value, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    v9 = (uint64_t)data;
    v15 = 0;
    v10 = xpc_dictionary_get_data(value, "kCBMsgArgData", &v15);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      sub_1007071B0();
      if (uint64)
        goto LABEL_4;
    }
    else if (uint64)
    {
LABEL_4:
      v11 = (int)sub_1004272CC(uint64, v6, v9, v7, v10, (unsigned __int16)v15);
LABEL_11:
      reply = xpc_dictionary_create_reply(xdict);
      if (!reply)
        return;
      v13 = reply;
      v14 = v11;
      goto LABEL_13;
    }
    v11 = 7;
    goto LABEL_11;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
    sub_1006E7234();
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v13 = reply;
    v14 = 8;
LABEL_13:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v14);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v13);
    xpc_release(v13);
  }
}

void sub_100594D34(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  int v5;
  xpc_object_t array;
  size_t count;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  size_t v12;
  size_t v13;
  int *v14;
  const void *data;
  size_t v16;
  uint64_t v17;
  xpc_object_t reply;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  size_t length;

  v21 = a1;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v20 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v5 = xpc_dictionary_get_uint64(value, "kCBMsgArgCmdReqType");
  array = xpc_dictionary_get_array(value, "kCBMsgArgDeviceArray");
  count = xpc_array_get_count(array);
  v8 = count;
  v9 = (unsigned __int16)count;
  __chkstk_darwin(count, 6 * (unsigned __int16)count);
  v11 = (int *)((char *)&v20 - v10);
  bzero((char *)&v20 - v10, v12);
  if (v9)
  {
    v13 = 0;
    v14 = v11;
    do
    {
      length = 0;
      data = xpc_array_get_data(array, v13, &length);
      if (length >= 6)
        v16 = 6;
      else
        v16 = length;
      memcpy(v14, data, v16);
      ++v13;
      v14 = (int *)((char *)v14 + 6);
    }
    while (v9 != v13);
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707210();
    if (uint64)
      goto LABEL_9;
  }
  else if (uint64)
  {
LABEL_9:
    v17 = (int)sub_10042756C(uint64, v20, v5, v11, v8);
    goto LABEL_12;
  }
  v17 = 7;
LABEL_12:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v19 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v17);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(v21 + 72) + 16), v19);
    xpc_release(v19);
  }
}

void sub_100594F28(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  xpc_object_t reply;
  void *v12;
  xpc_object_t v13;
  unint64_t i;
  unint64_t v15;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  if (v6 > 0x3E7)
  {
    v7 = 1000;
  }
  else
  {
    v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
    v7 = v6;
  }
  v15 = 0;
  __chkstk_darwin(v6, 8 * v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v9, v8);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707270();
    if (uint64)
      goto LABEL_6;
  }
  else if (uint64)
  {
LABEL_6:
    v10 = (int)sub_10042A664(uint64, (unint64_t *)v9, &v15, v7);
    goto LABEL_9;
  }
  v10 = 7;
LABEL_9:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    v13 = xpc_array_create(0, 0);
    if (v15)
    {
      for (i = 0; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, *(_QWORD *)&v9[8 * i]);
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_100595108(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryGenericConfigMode");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1007072D0();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_10042BBA4(uint64, v6, v7);
    goto LABEL_6;
  }
  v8 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_100595208(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707330();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_10042BC70(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryGenericConfigMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100595314(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707390();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_10042C010(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryGenericConfigMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100595420(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  const void *data;
  uint64_t v8;
  int v9;
  uint64_t v10;
  xpc_object_t reply;
  void *v12;
  uint64_t v13;
  size_t length;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  length = 0;
  data = xpc_dictionary_get_data(value, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    v8 = (uint64_t)data;
    v9 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryDeviceState");
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      sub_1007073F0();
      if (uint64)
        goto LABEL_4;
    }
    else if (uint64)
    {
LABEL_4:
      v10 = (int)sub_10042C3BC(uint64, v6, v8, v9);
LABEL_11:
      reply = xpc_dictionary_create_reply(xdict);
      if (!reply)
        return;
      v12 = reply;
      v13 = v10;
      goto LABEL_13;
    }
    v10 = 7;
    goto LABEL_11;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
    sub_1006E7234();
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    v13 = 8;
LABEL_13:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1005955A4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707450();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_10042C648(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryGenericConfigMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005956B0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  void *v5;
  uint64_t uint64;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  LODWORD(value) = 0;
  if (v4)
  {
    v5 = v4;
    uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
    v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      sub_1007074B0();
      if (uint64)
        goto LABEL_4;
    }
    else if (uint64)
    {
LABEL_4:
      v8 = (int)sub_10042CD10(uint64, v7, (int *)&value);
      goto LABEL_8;
    }
    v8 = 7;
  }
  else
  {
    v8 = 3;
  }
LABEL_8:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005957C8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  void *v5;
  uint64_t uint64;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  LODWORD(value) = -1;
  if (v4)
  {
    v5 = v4;
    uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
    v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      sub_100707510();
      if (uint64)
        goto LABEL_4;
    }
    else if (uint64)
    {
LABEL_4:
      v8 = (int)sub_10042CE10(uint64, v7, (int *)&value);
      goto LABEL_8;
    }
    v8 = 7;
  }
  else
  {
    v8 = 3;
  }
LABEL_8:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005958E4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v5;
  uint64_t uint64;
  uint64_t v7;
  int v8;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    v5 = value;
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
    v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
    v8 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBool");
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      sub_100707570();
      if (uint64)
        goto LABEL_4;
    }
    else if (uint64)
    {
LABEL_4:
      v9 = (int)sub_10042D010(uint64, v7, v8);
      goto LABEL_8;
    }
    v9 = 7;
  }
  else
  {
    v9 = 3;
  }
LABEL_8:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005959F0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v5;
  uint64_t uint64;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  xpc_object_t reply;
  void *v13;
  _DWORD v14[2];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  memset(v14, 0, 7);
  if (!value)
  {
    v9 = 0;
    v8 = 3;
    goto LABEL_11;
  }
  v5 = value;
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1007075D0();
    if (uint64)
      goto LABEL_4;
LABEL_10:
    v9 = 0;
    v8 = 7;
    goto LABEL_11;
  }
  if (!uint64)
    goto LABEL_10;
LABEL_4:
  v8 = (int)sub_10042C8C0(uint64, v7, v14);
  v9 = v14[0];
  if (LOBYTE(v14[0]) == 1)
  {
    v11 = v14[0] | ((unint64_t)(LOWORD(v14[1]) | (BYTE2(v14[1]) << 16)) << 32);
    v10 = (v14[0] >> 20) & 0xF0 | (v11 >> 24) & 0xF00 | (v11 >> 28) & 0xF000 | HIDWORD(v11) & 0xF0000 | 1;
    goto LABEL_12;
  }
  if (LOBYTE(v14[0]))
  {
    v10 = 0;
    goto LABEL_12;
  }
LABEL_11:
  v10 = (v9 >> 4) & 0xF0 | (v9 >> 8) & 0xF00;
LABEL_12:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v13, "kCBMsgArgCallManagementMessage", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v13);
    xpc_release(v13);
  }
}

void sub_100595B84(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  void *v5;
  uint64_t uint64;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  value = 0;
  if (v4)
  {
    v5 = v4;
    uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
    v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      sub_100707630();
      if (uint64)
        goto LABEL_4;
    }
    else if (uint64)
    {
LABEL_4:
      v8 = (int)sub_10042CA54(uint64, v7, (uint64_t *)&value);
      goto LABEL_8;
    }
    v8 = 7;
  }
  else
  {
    v8 = 3;
  }
LABEL_8:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgFeatureProxCardStatusMessage", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_100595C9C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v5;
  uint64_t uint64;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    v5 = value;
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
    v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
    v8 = xpc_dictionary_get_uint64(v5, "kCBMsgArgFeatureProxCardStatusMessage");
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      sub_100707690();
      if (uint64)
        goto LABEL_4;
    }
    else if (uint64)
    {
LABEL_4:
      v9 = (int)sub_10042CC34(uint64, v7, v8);
      goto LABEL_8;
    }
    v9 = 7;
  }
  else
  {
    v9 = 3;
  }
LABEL_8:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_100595DA8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  LODWORD(value) = 0;
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1007076F0();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_10042C758(uint64, v6, &value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStereoHFPSupport", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100595EB4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707750();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1004260CC(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAnnounceMsgSupport", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100595FC0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  xpc_object_t reply;
  void *v13;
  size_t v14;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v14 - v9;
  bzero((char *)&v14 - v9, v7);
  v14 = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1007077B0();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v11 = sub_10042A254(uint64, v6, v10, &v14, v7);
    goto LABEL_6;
  }
  v11 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    if (!v11)
      xpc_dictionary_set_data(v13, "kCBMsgArgData", v10, v14);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v13);
    xpc_release(v13);
  }
}

void sub_100596154(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAACPCapabilityInteger");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707810();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_10042A36C(uint64, v6, v7, &value);
    goto LABEL_6;
  }
  v8 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgValue", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_100596278(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  int v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707870();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_100426A28(uint64, v7, v6);
    goto LABEL_6;
  }
  v8 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_100596378(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1007078D0();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_10042D1BC(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAnnounceCallsSupport", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100596484(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  const char *string;
  int v9;
  uint64_t v10;
  xpc_object_t reply;
  void *v12;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryGenericConfigMode");
  string = xpc_dictionary_get_string(value, "kCBMsgArgAccessoryBundleID");
  v9 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryHeadTrackingStatus");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707930();
    if (string)
    {
LABEL_3:
      if (uint64)
        v10 = (int)sub_10042B338(uint64, v6, (uint64_t)string, v7, v9);
      else
        v10 = 7;
      goto LABEL_8;
    }
  }
  else if (string)
  {
    goto LABEL_3;
  }
  v10 = 3;
LABEL_8:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1005965C8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  const char *string;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  uint64_t value[2];

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  string = xpc_dictionary_get_string(v4, "kCBMsgArgAccessoryBundleID");
  value[0] = 0xFFFFFFFFFFLL;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707990();
    if (string)
    {
LABEL_3:
      if (uint64)
        v8 = (int)sub_10042B7D8(uint64, v6, (uint64_t)string, (int *)value + 1, (int *)value);
      else
        v8 = 7;
      goto LABEL_8;
    }
  }
  else if (string)
  {
    goto LABEL_3;
  }
  v8 = 3;
LABEL_8:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgAccessoryGenericConfigMode", HIDWORD(value[0]));
    xpc_dictionary_set_uint64(v10, "kCBMsgArgAccessoryHeadTrackingStatus", LODWORD(value[0]));
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_100596718(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryGenericConfigMode");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1007079F0();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_10042ABDC(uint64, v6, v7);
    goto LABEL_6;
  }
  v8 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_10059681C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707A6C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_10042AFC4(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryGenericConfigMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100596928(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t v10;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LOWORD(value) = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryJBL");
  v10 = v6;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707AE4();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_10042D368(uint64, &v10, (unsigned __int16 *)&value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryJBL", (unsigned __int16)value);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBTDevice", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100596A5C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707B44();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_10042A81C(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryGenericConfigMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100596B68(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  int v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707BA4();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_100427EF8(uint64, v6, v7);
    goto LABEL_6;
  }
  v8 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_100596C68(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  int v7;
  xpc_object_t reply;
  void *v9;
  _WORD length[5];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  memset(length, 0, sizeof(length));
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707C04();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = sub_10042D7E8(uint64, v6, &length[1], length);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    if (!v7 && *(_QWORD *)&length[1])
      xpc_dictionary_set_data(v9, "kCBMsgArgData", *(const void **)&length[1], length[0]);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
  if (*(_QWORD *)&length[1])
    free(*(void **)&length[1]);
}

void sub_100596D94(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707C64();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_10042D65C(uint64, v6, &value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgSensorStreamingFrequency", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100596EA0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  unsigned __int16 uint64;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  xpc_object_t reply;
  void *v13;
  size_t v14;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgProductId");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v14 - v9;
  bzero((char *)&v14 - v9, v7);
  v14 = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707CC4();
    if (v6)
      goto LABEL_3;
  }
  else if (v6)
  {
LABEL_3:
    v11 = sub_10042DB50(v6, uint64, v10, &v14, v7);
    goto LABEL_6;
  }
  v11 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    if (!v11)
      xpc_dictionary_set_data(v13, "kCBMsgArgData", v10, v14);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v13);
    xpc_release(v13);
  }
}

void sub_100597034(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  xpc_object_t v5;
  size_t count;
  _DWORD *v7;
  size_t i;
  uint64_t uint64;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  xpc_object_t reply;
  void *v16;
  size_t v17;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = xpc_dictionary_get_value(value, "kCBMsgArgProductIds");
  count = xpc_array_get_count(v5);
  v7 = malloc_type_malloc(4 * count, 0x100004052888210uLL);
  if (count)
  {
    for (i = 0; i != count; ++i)
      v7[i] = xpc_array_get_uint64(v5, i);
  }
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v10 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v17 - v12;
  bzero((char *)&v17 - v12, v10);
  v17 = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707D24();
    if (uint64)
      goto LABEL_6;
  }
  else if (uint64)
  {
LABEL_6:
    v14 = sub_10042DE90(uint64, (uint64_t)v7, count, v13, &v17, v10);
    goto LABEL_9;
  }
  v14 = 7;
LABEL_9:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v16 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v14);
    if (!v14)
      xpc_dictionary_set_data(v16, "kCBMsgArgData", v13, v17);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v16);
    xpc_release(v16);
  }
  free(v7);
}

void sub_10059721C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  int v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 3;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707D84();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = sub_10042E1F8(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  v7 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    if (!v7)
      xpc_dictionary_set_uint64(v9, "kCBMsgArgPrimarySide", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_100597330(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(v4, "kCBMsgArgHeadphoneFeatureType");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707DE4();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_10042E3F8(uint64, v6, v7, (int *)&value);
    goto LABEL_6;
  }
  v8 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgHeadphoneFeatureValue", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_100597454(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgHeadphoneFeatureType");
  v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgHeadphoneFeatureValue");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100707E44();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v9 = (int)sub_10042E828(uint64, v6, v7, v8);
    goto LABEL_6;
  }
  v9 = 7;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_100597574(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  unsigned __int16 v7;
  unsigned __int8 *data;
  unsigned __int8 *v9;
  uint64_t v10;
  xpc_object_t reply;
  void *v12;
  size_t length;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgAVMsgLen");
  length = 0;
  data = (unsigned __int8 *)xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
  if (length == v7)
  {
    v9 = data;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      sub_100707EA4();
      if (uint64)
        goto LABEL_4;
    }
    else if (uint64)
    {
LABEL_4:
      v10 = (int)sub_1004284B8(uint64, v6, v7, v9);
      goto LABEL_10;
    }
    v10 = 7;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100707F04();
    v10 = 3;
  }
LABEL_10:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1005976DC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  unsigned __int16 v7;
  unsigned __int8 *data;
  unsigned __int8 *v9;
  uint64_t v10;
  xpc_object_t reply;
  void *v12;
  size_t length;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgPMEMsgLen");
  length = 0;
  data = (unsigned __int8 *)xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
  if (length == v7)
  {
    v9 = data;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      sub_100707F64();
      if (uint64)
        goto LABEL_4;
    }
    else if (uint64)
    {
LABEL_4:
      v10 = (int)sub_1004285E4(uint64, v6, v7, v9);
      goto LABEL_10;
    }
    v10 = 7;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100707FC4();
    v10 = 3;
  }
LABEL_10:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

uint64_t sub_100597844(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int64x2_t *v5;
  int64x2_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v13;
  int64x2_t v14;
  int64x2_t v15;

  v2 = a1 + 80;
  v3 = *(_QWORD **)(a1 + 80);
  v4 = (_QWORD *)(a1 + 88);
  if (v3 != (_QWORD *)(a1 + 88))
  {
    do
    {
      v5 = (int64x2_t *)v3[4];
      v14 = 0u;
      v15 = 0u;
      v6 = v5[1];
      v14 = *v5;
      v15 = v6;
      v7 = v5[2].i64[0];
      v13 = v7;
      v8 = v5[3].u64[1];
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v14), (int32x4_t)vceqzq_s64(v6))))) & 1) != 0)
      {
        sub_100424590(v8, (__int128 *)v14.i8);
      }
      else if (v7 && *(_BYTE *)(a1 + 104))
      {
        sub_100428174(v8, &v13);
        *(_BYTE *)(a1 + 104) = 0;
      }
      free(v5);
      v9 = (_QWORD *)v3[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v3[2];
          v11 = *v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      v3 = v10;
    }
    while (v10 != v4);
  }
  sub_10001A82C(v2, *(_QWORD **)(a1 + 88));
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = v4;
  sub_10001A82C(v2, 0);
  *(_QWORD *)a1 = &off_10092B270;
  sub_100069BDC(a1 + 8);
  return a1;
}

void sub_100597970(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10001A82C(v2, *(_QWORD **)(v1 + 88));
  *(_QWORD *)v1 = &off_10092B270;
  sub_100069BDC(v1 + 8);
  _Unwind_Resume(a1);
}

void sub_1005979A0(uint64_t a1)
{
  sub_100597844(a1);
  operator delete();
}

uint64_t sub_1005979C4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  int64x2_t *v4;
  int64x2_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v12;
  int64x2_t v13;
  int64x2_t v14;
  _QWORD v15[2];

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 8);
  v2 = *(_QWORD **)(a1 + 80);
  v3 = (_QWORD *)(a1 + 88);
  if (v2 != (_QWORD *)(a1 + 88))
  {
    do
    {
      v4 = (int64x2_t *)v2[4];
      v13 = 0u;
      v14 = 0u;
      v5 = v4[1];
      v13 = *v4;
      v14 = v5;
      v6 = v4[2].i64[0];
      v12 = v6;
      v7 = v4[3].u64[1];
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v13), (int32x4_t)vceqzq_s64(v5))))) & 1) != 0&& *(_BYTE *)(a1 + 105))
      {
        sub_100424590(v7, (__int128 *)v13.i8);
        *(_BYTE *)(a1 + 105) = 0;
      }
      else if (v6 && *(_BYTE *)(a1 + 104))
      {
        sub_100428174(v7, &v12);
        *(_BYTE *)(a1 + 104) = 0;
      }
      free(v4);
      v8 = (_QWORD *)v2[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v2[2];
          v10 = *v9 == (_QWORD)v2;
          v2 = v9;
        }
        while (!v10);
      }
      v2 = v9;
    }
    while (v9 != v3);
  }
  sub_10001A82C(a1 + 80, *(_QWORD **)(a1 + 88));
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = v3;
  return sub_100034234((uint64_t)v15);
}

void sub_100597AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100597B00(id a1)
{
  operator new();
}

void sub_100597B40()
{
  operator delete();
}

void sub_100597B80()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  xmmword_1009999E8 = 0u;
  unk_1009999F8 = 0u;
  dword_100999A08 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_10058F988, &xmmword_1009999E8, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_100597BD0(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)sub_100278350(a1, 7);
  *v2 = off_100939C58;
  sub_1000160D0(v2 + 32);
  *(_QWORD *)(a1 + 320) = 0;
  return a1;
}

void sub_100597C10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100278464(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100597C28(_QWORD *a1)
{
  *a1 = off_100939C58;
  sub_100069BDC(a1 + 32);
  return sub_100278464((uint64_t)a1);
}

void sub_100597C5C(_QWORD *a1)
{
  *a1 = off_100939C58;
  sub_100069BDC(a1 + 32);
  sub_100278464((uint64_t)a1);
  operator delete();
}

BOOL sub_100597CA4()
{
  _BOOL8 v0;
  char v2;
  __int128 v3;

  v3 = off_100939CF8;
  v2 = 0;
  sub_100043758(&v2);
  v0 = sub_10016D0C4(0, (uint64_t)sub_1005981B4, (uint64_t)sub_1005982F8, (uint64_t)sub_100598384, (uint64_t)&off_100939CB8, (uint64_t)&v3, 0, 9, 15) != 0;
  sub_100043728(&v2);
  return v0;
}

void sub_100597D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100597D44(int a1, int a2, int a3, int a4, void *__src, size_t __len, __int16 a7, __int16 a8, uint64_t a9, __int16 a10)
{
  void *v16;
  _QWORD v18[4];
  __int128 __p;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  void *__dst[2];
  uint64_t v30;

  __dst[0] = 0;
  __dst[1] = 0;
  v30 = 0;
  sub_1002D236C(__dst, __src, __len);
  if (qword_10097B330 != -1)
    dispatch_once(&qword_10097B330, &stru_100939D88);
  v16 = off_10097B328;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3321888768;
  v18[2] = sub_10059A2D4;
  v18[3] = &unk_100939D38;
  v22 = a1;
  v23 = a2;
  v24 = a3;
  v25 = a4;
  if (SHIBYTE(v30) < 0)
  {
    sub_10003430C(&__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    __p = *(_OWORD *)__dst;
    v20 = v30;
  }
  v26 = a7;
  v27 = a8;
  v21 = a9;
  v28 = a10;
  sub_10048D538((uint64_t)v16, v18);
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v30) < 0)
    operator delete(__dst[0]);
  return 0;
}

void sub_100597E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100597EB8(int a1, int a2, uint64_t *a3, int a4, __int16 a5, __int16 a6, uint64_t a7, __int16 a8)
{
  uint64_t v15;
  _QWORD v17[5];
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;

  v15 = *a3;
  if (qword_10097B330 != -1)
    dispatch_once(&qword_10097B330, &stru_100939D88);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10059A350;
  v17[3] = &unk_100930E20;
  v18 = a1;
  v19 = a2;
  v20 = v15;
  v21 = a4;
  v22 = a5;
  v23 = a6;
  v17[4] = a7;
  v24 = a8;
  sub_10048D538((uint64_t)off_10097B328, v17);
  return 0;
}

uint64_t sub_100597F94(int a1, int a2, int a3, uint64_t *a4, int a5, uint64_t a6, __int16 a7)
{
  uint64_t v13;
  _QWORD v15[5];
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  __int16 v21;

  v13 = *a4;
  if (qword_10097B330 != -1)
    dispatch_once(&qword_10097B330, &stru_100939D88);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10059A3C8;
  v15[3] = &unk_100930E20;
  v16 = a1;
  v17 = a2;
  v18 = v13;
  v19 = a5;
  v20 = a3;
  v15[4] = a6;
  v21 = a7;
  sub_10048D538((uint64_t)off_10097B328, v15);
  return 0;
}

void sub_100598064(uint64_t a1, __int16 a2, int a3)
{
  _QWORD v6[5];
  int v7;
  __int16 v8;

  if (qword_10097B330 != -1)
    dispatch_once(&qword_10097B330, &stru_100939D88);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10059A428;
  v6[3] = &unk_10092D0A8;
  v6[4] = a1;
  v8 = a2;
  v7 = a3;
  sub_10048D538((uint64_t)off_10097B328, v6);
}

uint64_t sub_100598108(uint64_t a1, __int16 a2, uint64_t a3, __int16 a4)
{
  _QWORD v9[6];
  __int16 v10;
  __int16 v11;

  if (qword_10097B330 != -1)
    dispatch_once(&qword_10097B330, &stru_100939D88);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10059A47C;
  v9[3] = &unk_1009180B0;
  v10 = a2;
  v9[4] = a1;
  v9[5] = a3;
  v11 = a4;
  sub_10048D538((uint64_t)off_10097B328, v9);
  return 0;
}

void sub_1005981B4(int *a1, char a2, const void *a3, unsigned int a4, __int16 a5)
{
  void *v7;
  _QWORD v8[4];
  uint64_t (**v9)();
  unsigned int *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  char v14;
  uint64_t (**v15)();
  unsigned int *v16;
  int v17;
  __int16 v18;

  v17 = *a1;
  v18 = *((_WORD *)a1 + 2);
  v15 = 0;
  v16 = 0;
  sub_10003994C(&v15, a3, a4);
  if (qword_10097B330 != -1)
    dispatch_once(&qword_10097B330, &stru_100939D88);
  v7 = off_10097B328;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_10059A1D4;
  v8[3] = &unk_100939D08;
  v12 = v17;
  v13 = v18;
  v14 = a2;
  v9 = &off_100918258;
  v10 = v16;
  if (v16)
    sub_10003C37C((uint64_t)v16);
  v11 = a5;
  sub_10048D538((uint64_t)v7, v8);
  v9 = &off_100918258;
  if (v10)
    sub_100056AAC(v10);
  v15 = &off_100918258;
  if (v16)
    sub_100056AAC(v16);
}

void sub_1005982C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  unsigned int *v18;

  *(_QWORD *)(v16 - 56) = v15;
  v18 = *(unsigned int **)(v16 - 48);
  if (v18)
    sub_100056AAC(v18);
  _Unwind_Resume(exception_object);
}

void sub_1005982F8(__int16 a1)
{
  _QWORD v2[4];
  __int16 v3;

  if (qword_10097B330 != -1)
    dispatch_once(&qword_10097B330, &stru_100939D88);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10059A230;
  v2[3] = &unk_10092D5B8;
  v3 = a1;
  sub_10048D538((uint64_t)off_10097B328, v2);
}

void sub_100598384(__int16 a1, int a2, int a3)
{
  _QWORD v6[4];
  int v7;
  int v8;
  __int16 v9;

  if (qword_10097B330 != -1)
    dispatch_once(&qword_10097B330, &stru_100939D88);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10059A280;
  v6[3] = &unk_100920960;
  v9 = a1;
  v7 = a2;
  v8 = a3;
  sub_10048D538((uint64_t)off_10097B328, v6);
}

BOOL sub_100598424()
{
  _BOOL8 v0;
  char v2;

  v2 = 0;
  sub_100043758(&v2);
  v0 = sub_10016D988() != 0;
  sub_100043728(&v2);
  return v0;
}

void sub_100598468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

BOOL sub_10059847C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  unsigned int v6;
  char v8;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 256);
  v4 = *(_QWORD *)(a1 + 320);
  if (v4 && *(_QWORD *)v4 == a2)
  {
    v6 = *(unsigned __int16 *)(v4 + 8);
    sub_100034264((uint64_t)v9);
    v8 = 0;
    sub_100043758(&v8);
    v5 = sub_10016E448(v6) != 0;
    sub_100043728(&v8);
  }
  else
  {
    v5 = 1;
  }
  sub_100034234((uint64_t)v9);
  return v5;
}

void sub_10059850C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
  sub_100043728(&a13);
  sub_100034234((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_100598534(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 256);
  v6 = *(_QWORD *)(a1 + 320);
  if (v6 && *(_QWORD *)v6 == a2)
  {
    v10 = 0;
    sub_100043758(&v10);
    v8 = sub_10011BA60(*(unsigned __int16 *)(v6 + 8), a3);
    sub_100043728(&v10);
    if (v8)
      v7 = 312;
    else
      v7 = 0;
  }
  else
  {
    v7 = 312;
  }
  sub_100034234((uint64_t)v11);
  return v7;
}

void sub_1005985D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
  sub_100043728(&a13);
  sub_100034234((uint64_t)&a14);
  _Unwind_Resume(a1);
}

_BYTE *sub_1005985F4(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  char v11;
  int v12;
  const void *v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19;
  uint64_t v20;
  int v21;
  NSObject *v23;
  void **v24;
  void *v25[2];
  char v26;
  char v27;
  char v28;
  _QWORD v29[2];
  _BYTE __p[12];
  char v31;
  __int128 v32;
  void *v33[2];
  __int128 v34;
  void *v35[2];
  __int128 v36;
  void *v37[2];
  _OWORD v38[3];
  __int128 v39;
  uint64_t v40;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100939D68);
  LODWORD(v32) = *(_DWORD *)a2;
  WORD2(v32) = *(_WORD *)(a2 + 4);
  v10 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v32, 1);
  v29[0] = 0;
  v29[1] = 0;
  sub_100585F04(v29, v10);
  v11 = sub_100585F08((uint64_t)v29, 6, 0x64u);
  v12 = sub_100481EC8((uint64_t)a1, v10);
  v28 = 0;
  sub_100043758(&v28);
  if ((a3 & v12) == 1)
  {
    v13 = (const void *)sub_10003EB18(a4);
    v14 = sub_10003F8C4(a4);
    v15 = sub_10016DCD4(a5, v13, v14, "0000");
    v12 = 1;
  }
  else
  {
    v40 = 0;
    v39 = 0u;
    memset(v38, 0, sizeof(v38));
    v36 = 0u;
    *(_OWORD *)v37 = 0u;
    v34 = 0u;
    *(_OWORD *)v35 = 0u;
    v32 = 0u;
    *(_OWORD *)v33 = 0u;
    sub_1005BCCCC((uint64_t)&v32 + 1);
    BYTE2(v33[0]) = 0;
    BYTE4(v33[0]) = 0;
    BYTE2(v35[0]) = 0;
    BYTE4(v35[0]) = 0;
    DWORD1(v38[1]) = 0;
    v34 = 0uLL;
    v33[1] = 0;
    LOBYTE(v35[0]) = 0;
    v36 = 0uLL;
    v35[1] = 0;
    LOBYTE(v37[0]) = 0;
    memset(v38, 0, 19);
    v37[1] = 0;
    BYTE8(v38[1]) = 1;
    BYTE2(v40) = 0;
    *(_QWORD *)((char *)&v38[1] + 14) = 0;
    *(_QWORD *)((char *)&v38[1] + 9) = 0;
    v39 = 0uLL;
    *((_QWORD *)&v38[2] + 1) = 0;
    LOBYTE(v40) = 0;
    sub_1004419F4(v10, (uint64_t)&v32);
    v27 = 0;
    v16 = sub_100027F68();
    sub_100091AE8(v25, "PBAP");
    sub_100091AE8(__p, "BypassRCP");
    (*(void (**)(uint64_t, void **, _BYTE *, char *))(*(_QWORD *)v16 + 72))(v16, v25, __p, &v27);
    if (v31 < 0)
      operator delete(*(void **)__p);
    if (v26 < 0)
      operator delete(v25[0]);
    if (BYTE11(v39) || ((v17 = sub_100448120(v10), v27) ? (v18 = 1) : (v18 = v17), (v18 & 1) != 0))
    {
      v19 = 0;
    }
    else
    {
      v23 = qword_100999888;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v10, v25);
        v24 = v26 >= 0 ? v25 : (void **)v25[0];
        *(_DWORD *)__p = 136446210;
        *(_QWORD *)&__p[4] = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Phonebook connection to device %{public}s is unauthorized as user has not yet responded to Rental Car Privacy dialog", __p, 0xCu);
        if (v26 < 0)
          operator delete(v25[0]);
      }
      v12 = 0;
      *(_BYTE *)(v10 + 1316) = 1;
      v19 = 1742;
    }
    v15 = sub_10016DB44(a5, v11, v12, v19);
    if (SHIBYTE(v38[0]) < 0)
      operator delete(v37[1]);
    if (SHIBYTE(v36) < 0)
      operator delete(v35[1]);
    if (SHIBYTE(v34) < 0)
      operator delete(v33[1]);
    nullsub_90((char *)&v32 + 1, v20);
  }
  sub_10004339C(&v28);
  if (v15)
    v21 = 0;
  else
    v21 = v12;
  if (v21 == 1)
    sub_1004816DC(a1, v10);
  if ((sub_1004471D4(v10) & 1) == 0)
  {
    sub_100447D80(v10);
    sub_1004827CC();
  }
  return sub_100043728(&v28);
}

void sub_100598A2C(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  sub_10026B73C((uint64_t)&a28, a2);
  sub_100043728(&a18);
  _Unwind_Resume(a1);
}

_BYTE *sub_100598AAC(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  char v8;

  v8 = 0;
  sub_100043758(&v8);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 256);
  v4 = *(_QWORD *)(a1 + 320);
  if (v4 && *(unsigned __int16 *)(v4 + 8) == a2)
  {
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    free(*(void **)(v4 + 24));
    operator delete();
  }
  sub_100034234((uint64_t)v7);
  return sub_100043728(&v8);
}

void sub_100598B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100034234((uint64_t)&a10);
  sub_100043728(&a15);
  _Unwind_Resume(a1);
}

_BYTE *sub_100598BA4(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  NSObject *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  void *p_p;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  _BYTE *v27;
  _QWORD v29[2];
  void *__p;
  __int16 v31;
  _BYTE *v32;
  char v33;
  _BYTE buf[12];
  __int16 v35;
  const char *v36;
  __int16 v37;
  void *v38;

  v5 = *(_QWORD *)(a1 + 320);
  if (v5 && *(unsigned __int16 *)(v5 + 8) == (_DWORD)a2)
  {
    v8 = *(_QWORD *)v5;
    v29[0] = 0;
    v29[1] = 0;
    sub_100585F04(v29, v8);
    if (a3 == 1)
    {
      if (a4)
        v9 = 0;
      else
        v9 = 10;
    }
    else if (a3 || a4 >= 6)
    {
      v9 = 0;
    }
    else
    {
      v9 = dword_10074292C[a4];
    }
    v18 = qword_100999888;
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
    {
      v19 = "Invalid";
      v20 = "Sim";
      if (a3 != 1)
        v20 = "Invalid";
      if (a3)
        v21 = v20;
      else
        v21 = "Local";
      if (a4 <= 5)
        v19 = off_100939DE0[a4];
      sub_10043E5F8(v8, &__p);
      if (v33 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v21;
      v35 = 2080;
      v36 = v19;
      v37 = 2082;
      v38 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Received 'get size' request for '%s'/'%s' from device %{public}s", buf, 0x20u);
      if (v33 < 0)
        operator delete(__p);
    }
    v16 = sub_100585F08((uint64_t)v29, v9, 0x64u);
    v15 = sub_1005864EC((uint64_t)v29, v9);
    v14 = v23;
    v13 = sub_10058656C((uint64_t)v29, v9);
    v12 = v24;
    v11 = sub_1005865C0((uint64_t)v29);
    v10 = v25;
    v26 = qword_100999888;
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v8, buf);
      v27 = buf;
      if (v37 < 0)
        v27 = *(_BYTE **)buf;
      LODWORD(__p) = 67109378;
      HIDWORD(__p) = v16;
      v31 = 2082;
      v32 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Sending response (%u entries) to device %{public}s", (uint8_t *)&__p, 0x12u);
      if (SHIBYTE(v37) < 0)
        operator delete(*(void **)buf);
    }
    v17 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    LOWORD(v16) = 0;
    v17 = 1715;
  }
  buf[0] = 0;
  sub_100043758(buf);
  sub_10016DD88(a2, v16, v15, v14, v13, v12, v11, v10, v17);
  return sub_100043728(buf);
}

void sub_100598E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

_BYTE *sub_100598EA0(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, __int128 *a6, uint64_t a7, unsigned int a8, void (*a9)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16), unsigned __int16 a10)
{
  uint64_t v10;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  NSObject *v28;
  _BOOL4 v29;
  const char *v30;
  const char *v31;
  void *v32;
  const char *v33;
  const char *v34;
  uint8_t *v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  void **p_dst;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  _BYTE *v51;
  void *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  __int128 v57;
  uint64_t v58;
  __int128 __dst;
  uint64_t v60;
  _QWORD v61[2];
  _BYTE buf[14];
  _BYTE v63[10];
  _BYTE v64[10];
  __int16 v65;
  void *v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  uint8_t *v70;
  uint8_t v71[8];
  __int16 v72;
  _BYTE *v73;
  char v74;

  v10 = *(_QWORD *)(a1 + 320);
  if (!v10)
  {
    v19 = 0;
    v20 = 0;
LABEL_9:
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 1715;
    goto LABEL_10;
  }
  if (*(unsigned __int16 *)(v10 + 8) != a10)
  {
    v19 = 0;
    v20 = 0;
    v10 = 0;
    goto LABEL_9;
  }
  v17 = *(_QWORD *)v10;
  v61[0] = 0;
  v61[1] = 0;
  v54 = v17;
  sub_100585F04(v61, v17);
  if (a2 == 1)
  {
    if (a3)
      v18 = 0;
    else
      v18 = 10;
  }
  else
  {
    if (a2 || a3 >= 6)
    {
      v55 = 0;
      goto LABEL_16;
    }
    v18 = dword_10074292C[a3];
  }
  v55 = v18;
LABEL_16:
  if (a4 > 2)
    v53 = 0;
  else
    v53 = dword_100742920[a4];
  v26 = *((char *)a6 + 23);
  if (v26 >= 0)
    v27 = *((unsigned __int8 *)a6 + 23);
  else
    v27 = *((_QWORD *)a6 + 1);
  v28 = qword_100999888;
  v29 = os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT);
  if (!v27)
  {
    if (v29)
    {
      v37 = "Invalid";
      v38 = "Sim";
      if (a2 != 1)
        v38 = "Invalid";
      if (a2)
        v39 = v38;
      else
        v39 = "Local";
      if (a3 <= 5)
        v37 = off_100939DE0[a3];
      sub_10043E5F8(v54, v71);
      if (v74 >= 0)
        v40 = v71;
      else
        v40 = *(uint8_t **)v71;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = a8;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a7;
      *(_WORD *)v63 = 2080;
      *(_QWORD *)&v63[2] = v39;
      *(_WORD *)v64 = 2080;
      *(_QWORD *)&v64[2] = v37;
      v65 = 2082;
      v66 = v40;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Received 'list' request (offset = %u, count = %u) for '%s'/'%s' from device %{public}s", buf, 0x2Cu);
      if (v74 < 0)
        operator delete(*(void **)v71);
    }
    v36 = v55;
    v41 = sub_100586028((uint64_t)v61, v55, v53, a8, a7, 0x64u, 0);
    v42 = v41;
    if (v41)
      v24 = 0;
    else
      v24 = 1715;
    if (v41)
LABEL_77:
      operator new();
    goto LABEL_61;
  }
  if (v29)
  {
    v30 = "Invalid";
    v31 = "Invalid";
    if (a5 <= 2)
      v31 = off_100939DC8[a5];
    v32 = *(void **)a6;
    if (v26 >= 0)
      v32 = a6;
    v52 = v32;
    v33 = "Sim";
    if (a2 != 1)
      v33 = "Invalid";
    if (a2)
      v34 = v33;
    else
      v34 = "Local";
    if (a3 <= 5)
      v30 = off_100939DE0[a3];
    sub_10043E5F8(v54, v71);
    if (v74 >= 0)
      v35 = v71;
    else
      v35 = *(uint8_t **)v71;
    *(_DWORD *)buf = 136316674;
    *(_QWORD *)&buf[4] = v31;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)v63 = v52;
    *(_WORD *)&v63[8] = 1024;
    *(_DWORD *)v64 = a8;
    *(_WORD *)&v64[4] = 1024;
    *(_DWORD *)&v64[6] = a7;
    v65 = 2080;
    v66 = (void *)v34;
    v67 = 2080;
    v68 = v30;
    v69 = 2082;
    v70 = v35;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Received 'search' request (%s ~= \"%s\", offset = %u, count = %u) in '%s'/'%s' from device %{public}s", buf, 0x40u);
    if (v74 < 0)
      operator delete(*(void **)v71);
  }
  if (a5 == 1)
  {
    v36 = v55;
    if (*((char *)a6 + 23) < 0)
    {
      sub_10003430C(&v57, *(void **)a6, *((_QWORD *)a6 + 1));
    }
    else
    {
      v57 = *a6;
      v58 = *((_QWORD *)a6 + 2);
    }
    v42 = sub_1005863B8((uint64_t)v61, v55, (uint64_t)&v57, v53, a8, a7, 0);
    if ((SHIBYTE(v58) & 0x80000000) == 0)
      goto LABEL_72;
    p_dst = (void **)&v57;
    goto LABEL_71;
  }
  v36 = v55;
  if (a5)
  {
    v42 = 0;
    v43 = 0;
    v44 = 1743;
    goto LABEL_73;
  }
  if (*((char *)a6 + 23) < 0)
  {
    sub_10003430C(&__dst, *(void **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    __dst = *a6;
    v60 = *((_QWORD *)a6 + 2);
  }
  v42 = sub_1005862D8((uint64_t)v61, v55, (uint64_t)&__dst, v53, a8, a7);
  if (SHIBYTE(v60) < 0)
  {
    p_dst = (void **)&__dst;
LABEL_71:
    operator delete(*p_dst);
  }
LABEL_72:
  v44 = 0;
  v43 = 1;
LABEL_73:
  if ((v43 & (v42 == 0)) != 0)
    v24 = 1724;
  else
    v24 = v44;
  if (v42)
    goto LABEL_77;
LABEL_61:
  v23 = sub_1005864EC((uint64_t)v61, v36);
  v22 = v46;
  v21 = sub_10058656C((uint64_t)v61, v36);
  v10 = v47;
  v20 = sub_1005865C0((uint64_t)v61);
  v19 = v48;
  v49 = qword_100999888;
  if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
  {
    if (v42)
      LODWORD(v42) = sub_1005866FC(v42);
    sub_10043E5F8(v54, buf);
    v51 = buf;
    if (v63[9] < 0)
      v51 = *(_BYTE **)buf;
    *(_DWORD *)v71 = 67109378;
    *(_DWORD *)&v71[4] = v42;
    v72 = 2082;
    v73 = v51;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Building response (%u entries) for device %{public}s", v71, 0x12u);
    if ((v63[9] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
LABEL_10:
  buf[0] = 0;
  sub_100043758(buf);
  a9(0, v23, v22, v21, v10, v20, v19, v24, a10);
  return sub_100043728(buf);
}

void sub_100599494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1005994FC(uint64_t a1, int a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, void (*a8)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16), unsigned __int16 a9)
{
  uint64_t v9;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  int v26;
  NSObject *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  void *p_p;
  NSObject *v32;
  char v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint8_t *v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD v44[2];
  void *__p;
  __int16 v46;
  uint8_t *v47;
  char v48;
  uint8_t buf[8];
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  void *v59;

  v9 = *(_QWORD *)(a1 + 320);
  if (!v9 || *(unsigned __int16 *)(v9 + 8) != a9)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    goto LABEL_8;
  }
  v16 = *(_QWORD *)v9;
  v44[0] = 0;
  v44[1] = 0;
  v42 = v16;
  sub_100585F04(v44, v16);
  if (a2 == 1)
  {
    if (a3)
      v17 = 0;
    else
      v17 = 10;
    goto LABEL_13;
  }
  if (!a2 && a3 < 6)
  {
    v17 = dword_10074292C[a3];
LABEL_13:
    v41 = v17;
    goto LABEL_14;
  }
  v41 = 0;
LABEL_14:
  if (a5 == 1)
    v25 = 135;
  else
    v25 = 133;
  if (a4)
    v26 = v25 | HIDWORD(a4);
  else
    v26 = -1;
  v27 = qword_100999888;
  if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
  {
    v28 = "Invalid";
    v29 = "Sim";
    if (a2 != 1)
      v29 = "Invalid";
    if (a2)
      v30 = v29;
    else
      v30 = "Local";
    if (a3 <= 5)
      v28 = off_100939DE0[a3];
    sub_10043E5F8(v42, &__p);
    if (v48 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&buf[4] = a7;
    v50 = 1024;
    v51 = a6;
    v52 = 1024;
    v53 = v26;
    v54 = 2080;
    v55 = v30;
    v56 = 2080;
    v57 = v28;
    v58 = 2082;
    v59 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Received 'open' request (offset = %u, count = %u, attributes = %x) for '%s'/'%s' from device %{public}s", buf, 0x32u);
    if (v48 < 0)
      operator delete(__p);
  }
  if (a3 - 5 >= 0xFFFFFFFC && (v26 & 8) != 0)
  {
    v32 = qword_100999888;
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Ignoring request for contact photos for call history", buf, 2u);
    }
  }
  sub_10043F6EC(v42, (uint64_t)buf);
  if (!std::string::compare((const std::string *)buf, "HandsFreeLink"))
  {
    v33 = sub_100442878(v42);
    if (SBYTE1(v55) < 0)
      operator delete(*(void **)buf);
    if ((v33 & 1) == 0)
    {
      v34 = qword_100999888;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Workaround: disabling contact photos for this device", buf, 2u);
      }
    }
  }
  else if (SBYTE1(v55) < 0)
  {
    operator delete(*(void **)buf);
  }
  v35 = sub_100586028((uint64_t)v44, v41, 2, a7, a6, 0x64u, 0);
  if (v35)
    operator new();
  v23 = sub_1005864EC((uint64_t)v44, v41);
  v22 = v36;
  v21 = sub_10058656C((uint64_t)v44, v41);
  v20 = v37;
  v19 = sub_1005865C0((uint64_t)v44);
  v18 = v38;
  v39 = qword_100999888;
  if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v42, buf);
    v40 = buf;
    if (SBYTE1(v55) < 0)
      v40 = *(uint8_t **)buf;
    LODWORD(__p) = 67109378;
    HIDWORD(__p) = v35;
    v46 = 2082;
    v47 = v40;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Building response (%u entries) for device %{public}s", (uint8_t *)&__p, 0x12u);
    if (SBYTE1(v55) < 0)
      operator delete(*(void **)buf);
  }
LABEL_8:
  buf[0] = 0;
  sub_100043758(buf);
  a8(0, v23, v22, v21, v20, v19, v18, 1715, a9);
  return sub_100043728(buf);
}

void sub_1005999B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_100599A08(uint64_t a1, int a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, void (*a7)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, __int16), int a8)
{
  __int16 v8;
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  void *p_p;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint8_t *v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD v35[2];
  void *__p;
  __int16 v37;
  uint8_t *v38;
  char v39;
  uint8_t buf[8];
  __int16 v41;
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  void *v48;

  v8 = a8;
  v10 = *(_QWORD *)(a1 + 320);
  if (v10 && *(unsigned __int16 *)(v10 + 8) == a8)
  {
    v16 = *(_QWORD *)v10;
    v35[0] = 0;
    v35[1] = 0;
    v34 = v16;
    sub_100585F04(v35, v16);
    if (a2 == 1)
    {
      if (a3)
        v17 = 0;
      else
        v17 = 10;
    }
    else if (a2 || a3 >= 6)
    {
      v17 = 0;
    }
    else
    {
      v17 = dword_10074292C[a3];
    }
    if (a5 == 1)
      v22 = 135;
    else
      v22 = 133;
    if (a4)
      v23 = v22 | HIDWORD(a4);
    else
      v23 = 0xFFFFFFFFLL;
    v24 = qword_100999888;
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
    {
      v33 = v17;
      v25 = "Invalid";
      v26 = "Sim";
      if (a2 != 1)
        v26 = "Invalid";
      if (a2)
        v27 = v26;
      else
        v27 = "Local";
      if (a3 <= 5)
        v25 = off_100939DE0[a3];
      sub_10043E5F8(v34, &__p);
      if (v39 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = a6;
      v41 = 1024;
      v42 = v23;
      v43 = 2080;
      v44 = v27;
      v45 = 2080;
      v46 = v25;
      v47 = 2082;
      v48 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Received 'open card' request (uid = %u, attributes = %x) for '%s'/'%s' from device %{public}s", buf, 0x2Cu);
      if (v39 < 0)
        operator delete(__p);
      v17 = v33;
    }
    v29 = sub_1005861E4((uint64_t)v35, v17, a6, v23);
    if (v29)
      operator new();
    v20 = 1724;
    v19 = sub_1005865C0((uint64_t)v35);
    v18 = v30;
    v31 = qword_100999888;
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v34, buf);
      if (SHIBYTE(v44) >= 0)
        v32 = buf;
      else
        v32 = *(uint8_t **)buf;
      LODWORD(__p) = 67109378;
      HIDWORD(__p) = v29;
      v37 = 2082;
      v38 = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Building response (%u entries) for device %{public}s", (uint8_t *)&__p, 0x12u);
      if (SHIBYTE(v44) < 0)
        operator delete(*(void **)buf);
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 1715;
  }
  buf[0] = 0;
  sub_100043758(buf);
  a7(0, 0, 0, 0, 0, v19, v18, v20, v8);
  return sub_100043728(buf);
}

void sub_100599D74()
{
  operator delete();
}

void sub_100599DB0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;

  v3 = *(_QWORD *)(a1 + 320);
  if (v3 && *(unsigned __int16 *)(v3 + 8) == a3)
  {
    v5 = qword_100999888;
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(*(_QWORD *)v3, __p);
      v6 = v10 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received 'close' request from device %{public}s", buf, 0xCu);
      if (v10 < 0)
        operator delete(__p[0]);
    }
    if (*(_QWORD *)(v3 + 16) == a2)
    {
      v7 = qword_100999888;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(*(_QWORD *)v3, __p);
        if (v10 >= 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v12 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Closing response for device %{public}s", buf, 0xCu);
        if (v10 < 0)
          operator delete(__p[0]);
        a2 = *(_QWORD *)(v3 + 16);
      }
      if (a2)
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
      *(_QWORD *)(v3 + 16) = 0;
    }
  }
}

_BYTE *sub_100599F44(uint64_t a1, uint64_t a2, unsigned int a3, void (*a4)(uint64_t, void *, _QWORD, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v9;
  NSObject *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  _BOOL4 v14;
  uint64_t v15;
  NSObject *v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  unsigned __int16 v21;
  uint8_t buf[8];
  __int16 v23;
  void **v24;
  char v25;
  void *__p;
  __int16 v27;
  const char *v28;
  __int16 v29;
  uint8_t *v30;

  v7 = *(_QWORD *)(a1 + 320);
  if (v7 && *(unsigned __int16 *)(v7 + 8) == (_DWORD)a5)
  {
    v21 = 0;
    v9 = *(_QWORD *)v7;
    v10 = qword_100999888;
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_INFO))
    {
      sub_10043E5F8(v9, &__p);
      v11 = SBYTE3(v30) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = a3;
      v23 = 2082;
      v24 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Received 'read' request (%u bytes) from device %{public}s", buf, 0x12u);
      if (SBYTE3(v30) < 0)
        operator delete(__p);
    }
    v12 = *(_QWORD *)(v7 + 16);
    if (v12)
    {
      v13 = *(void **)(v7 + 24);
      if (*(_QWORD *)(v7 + 32) < (unint64_t)a3)
      {
        v13 = malloc_type_realloc(*(void **)(v7 + 24), a3, 0x682E794BuLL);
        *(_QWORD *)(v7 + 24) = v13;
        *(_QWORD *)(v7 + 32) = a3;
      }
      v14 = sub_10058EBB4(v12, (uint64_t)v13, a3, &v21);
      if (v14)
        v15 = 0;
      else
        v15 = 135;
    }
    else
    {
      v14 = 0;
      v13 = 0;
      v15 = 135;
    }
    v17 = qword_100999888;
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_INFO))
    {
      v18 = v21;
      if (v14)
        v19 = "continue";
      else
        v19 = "eof";
      sub_10043E5F8(v9, buf);
      if (v25 >= 0)
        v20 = buf;
      else
        v20 = *(uint8_t **)buf;
      LODWORD(__p) = 67109634;
      HIDWORD(__p) = v18;
      v27 = 2080;
      v28 = v19;
      v29 = 2082;
      v30 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Sending response (%u bytes, %s) to device %{public}s", (uint8_t *)&__p, 0x1Cu);
      if (v25 < 0)
        operator delete(*(void **)buf);
    }
  }
  else
  {
    v13 = 0;
    v12 = 0;
    v21 = 0;
    v15 = 1715;
  }
  LOBYTE(__p) = 0;
  sub_100043758(&__p);
  a4(v12, v13, v21, v15, a5);
  return sub_100043728(&__p);
}

void sub_10059A1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

_BYTE *sub_10059A1D4(uint64_t a1)
{
  if (qword_10097B3E0 != -1)
    dispatch_once(&qword_10097B3E0, &stru_100939DA8);
  return sub_1005985F4(off_10097B3D8, a1 + 50, *(unsigned __int8 *)(a1 + 56), a1 + 32, *(unsigned __int16 *)(a1 + 48));
}

_BYTE *sub_10059A230(uint64_t a1)
{
  if (qword_10097B3E0 != -1)
    dispatch_once(&qword_10097B3E0, &stru_100939DA8);
  return sub_100598AAC((uint64_t)off_10097B3D8, *(unsigned __int16 *)(a1 + 32));
}

_BYTE *sub_10059A280(uint64_t a1)
{
  if (qword_10097B3E0 != -1)
    dispatch_once(&qword_10097B3E0, &stru_100939DA8);
  return sub_100598BA4((uint64_t)off_10097B3D8, *(unsigned __int16 *)(a1 + 40), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36));
}

_BYTE *sub_10059A2D4(uint64_t a1)
{
  if (qword_10097B3E0 != -1)
    dispatch_once(&qword_10097B3E0, &stru_100939DA8);
  return sub_100598EA0((uint64_t)off_10097B3D8, *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 72), *(_DWORD *)(a1 + 76), (__int128 *)(a1 + 32), *(unsigned __int16 *)(a1 + 80), *(unsigned __int16 *)(a1 + 82), *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16))(a1 + 56), *(_WORD *)(a1 + 84));
}

_BYTE *sub_10059A350(uint64_t a1)
{
  if (qword_10097B3E0 != -1)
    dispatch_once(&qword_10097B3E0, &stru_100939DA8);
  return sub_1005994FC((uint64_t)off_10097B3D8, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 56), *(unsigned __int16 *)(a1 + 60), *(unsigned __int16 *)(a1 + 62), *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16))(a1 + 32), *(_WORD *)(a1 + 64));
}

_BYTE *sub_10059A3C8(uint64_t a1)
{
  if (qword_10097B3E0 != -1)
    dispatch_once(&qword_10097B3E0, &stru_100939DA8);
  return sub_100599A08((uint64_t)off_10097B3D8, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 56), *(unsigned int *)(a1 + 60), *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, __int16))(a1 + 32), *(unsigned __int16 *)(a1 + 64));
}

void sub_10059A428(uint64_t a1)
{
  if (qword_10097B3E0 != -1)
    dispatch_once(&qword_10097B3E0, &stru_100939DA8);
  sub_100599DB0((uint64_t)off_10097B3D8, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 44));
}

_BYTE *sub_10059A47C(uint64_t a1, uint64_t a2)
{
  if (qword_10097B3E0 != -1)
    dispatch_once(&qword_10097B3E0, &stru_100939DA8);
  return sub_100599F44((uint64_t)off_10097B3D8, a2, *(unsigned __int16 *)(a1 + 48), *(void (**)(uint64_t, void *, _QWORD, uint64_t, uint64_t))(a1 + 40), *(unsigned __int16 *)(a1 + 50));
}

uint64_t sub_10059A4D4()
{
  return 0;
}

uint64_t sub_10059A4DC()
{
  return 2;
}

void sub_10059A4E4(id a1)
{
  operator new();
}

void sub_10059A524()
{
  operator delete();
}

void sub_10059A548(id a1)
{
  operator new();
}

void sub_10059A588()
{
  operator delete();
}

void sub_10059A5AC(id a1)
{
  operator new();
}

void sub_10059A5EC()
{
  operator delete();
}

uint64_t sub_10059A610(uint64_t a1)
{
  *(_QWORD *)sub_10048D2F0(a1, "PhonebookService", 2) = &off_100939E20;
  if (qword_10097B3E0 != -1)
    dispatch_once(&qword_10097B3E0, &stru_100939F10);
  sub_10048D5B0(a1, (uint64_t)off_10097B3D8);
  return a1;
}

void sub_10059A684(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048D3E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10059A69C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v5 = 0;
  sub_10004AD30((uint64_t)&v5);
  *(_QWORD *)&v4 = (int)v5;
  *((_QWORD *)&v4 + 1) = SWORD2(v5);
  return sub_1004415B0(a2, 2u, 1, &v4, 0);
}

void sub_10059A6F4(uint64_t a1)
{
  sub_10048D3E0(a1);
  operator delete();
}

void sub_10059A718(id a1)
{
  operator new();
}

void sub_10059A758()
{
  operator delete();
}

uint64_t sub_10059A77C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v6;

  v6 = 0;
  sub_100043758(&v6);
  if (sub_100149524((uint64_t)off_100939F30))
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      sub_100708164();
    goto LABEL_15;
  }
  v2 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 328))(v2))
    v3 = 465;
  else
    v3 = 17;
  if (sub_10014E8CC((uint64_t)&off_100939F60, v3, 0, (uint64_t *)&off_100939F88))
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      sub_100708104();
LABEL_14:
    sub_1001496A8();
LABEL_15:
    v4 = 1;
    goto LABEL_16;
  }
  if (sub_1000FF484((uint64_t)off_100939F98, 2, (uint64_t)&off_100939F88))
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      sub_1007080A4();
    sub_10014F514();
    goto LABEL_14;
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 545));
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10093A408);
  sub_1005A6BF8(qword_100977DF8 + 464, a1 + 272);
  v4 = 0;
LABEL_16:
  sub_100043728(&v6);
  return v4;
}

void sub_10059A908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10059A920(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v4 = 0;
  sub_100043758(&v4);
  if (sub_10014F514())
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      sub_100708284();
LABEL_10:
    v2 = 1;
    goto LABEL_11;
  }
  if (sub_1000FF8C8())
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      sub_100708224();
    goto LABEL_10;
  }
  if (sub_1001496A8())
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      sub_1007081C4();
    goto LABEL_10;
  }
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10093A408);
  sub_100069060(qword_100977DF8 + 464, a1 + 272);
  v2 = 0;
LABEL_11:
  sub_100043728(&v4);
  return v2;
}

void sub_10059AA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10059AA60(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  NSObject *v8;
  _BOOL8 v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  _BYTE buf[12];
  char v23;
  uint8_t v24[4];
  _BYTE *v25;
  __int16 v26;
  int v27;

  v3 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, &__p);
    v4 = v21 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Connecting AVRCP profile to device %{public}s", buf, 0xCu);
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
  }
  v5 = sub_10003BE44();
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 328))(v5);
  if ((_DWORD)v6)
  {
    v18 = xmmword_1007429B0;
    __p = 0;
    v20 = 0;
    v21 = 0;
    if (sub_10059AD40(v6, a2, 0x110Fu) >= 0x104
      && sub_1004442A0(a2, (uint64_t)&v18, 0x311u, &__p))
    {
      v17 = *(_OWORD *)__p;
      if ((BYTE8(v17) & 0x40) != 0)
      {
        v8 = qword_100999840;
        v9 = os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT);
        if (v9)
        {
          sub_10043E5F8(a2, buf);
          v10 = v23;
          v11 = *(_BYTE **)buf;
          v13 = sub_10059AE2C(v12, a2);
          v14 = buf;
          if (v10 < 0)
            v14 = v11;
          *(_DWORD *)v24 = 136446466;
          v25 = v14;
          v26 = 1024;
          v27 = v13;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Browsing is supported on device %{public}s, isBrowsingBroken %d", v24, 0x12u);
          if (v23 < 0)
            operator delete(*(void **)buf);
        }
        v7 = sub_10059AE2C(v9, a2) ^ 1;
      }
      else
      {
        v7 = 0;
      }
      sub_1002C3FB4(&v17);
    }
    else
    {
      v7 = 0;
    }
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v7 = 0;
  }
  v24[0] = 0;
  sub_100043758(v24);
  if (sub_100149730((int *)(a2 + 128), (uint64_t)&unk_100742960, v7))
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a2, &__p);
      sub_1007082E4();
    }
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  sub_100043728(v24);
  return v15;
}

void sub_10059ACE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10059AD40(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;
  _OWORD *v4;
  uint64_t v5;
  int v6;
  __int128 v8;
  void *__p;
  _OWORD *v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[0] = 131075;
  v12[1] = a3;
  __p = 0;
  v10 = 0;
  v11 = 0;
  v3 = sub_1004442A0(a2, (uint64_t)v12, 9u, &__p);
  v4 = __p;
  if (!v3)
  {
    LOWORD(v6) = 0;
    if (!__p)
      return (unsigned __int16)v6;
    goto LABEL_10;
  }
  v5 = *((_QWORD *)__p + 1);
  if (*(_DWORD *)(v5 + 8) == 4366)
    v6 = *(_DWORD *)(v5 + 24);
  else
    LOWORD(v6) = 0;
  if (__p == v10)
    goto LABEL_10;
  do
  {
    v8 = *v4;
    sub_1002C3FB4(&v8);
    ++v4;
  }
  while (v4 != v10);
  v4 = __p;
  if (__p)
  {
LABEL_10:
    v10 = v4;
    operator delete(v4);
  }
  return (unsigned __int16)v6;
}

void sub_10059AE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10059AE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  __int128 v6;
  void *v7[2];
  __int128 v8;
  void *v9[2];
  __int128 v10;
  void *__p[2];
  _OWORD v12[3];
  __int128 v13;
  uint64_t v14;

  v14 = 0;
  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  v10 = 0u;
  *(_OWORD *)__p = 0u;
  v8 = 0u;
  *(_OWORD *)v9 = 0u;
  v6 = 0u;
  *(_OWORD *)v7 = 0u;
  sub_1005BCCCC((uint64_t)&v6 + 1);
  BYTE2(v7[0]) = 0;
  BYTE4(v7[0]) = 0;
  BYTE2(v9[0]) = 0;
  BYTE4(v9[0]) = 0;
  DWORD1(v12[1]) = 0;
  v8 = 0uLL;
  v7[1] = 0;
  LOBYTE(v9[0]) = 0;
  v10 = 0uLL;
  v9[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v12, 0, 19);
  __p[1] = 0;
  BYTE8(v12[1]) = 1;
  BYTE2(v14) = 0;
  *(_QWORD *)((char *)&v12[1] + 14) = 0;
  *(_QWORD *)((char *)&v12[1] + 9) = 0;
  v13 = 0uLL;
  *((_QWORD *)&v12[2] + 1) = 0;
  LOBYTE(v14) = 0;
  LODWORD(a2) = sub_1004419F4(a2, (uint64_t)&v6);
  v4 = BYTE14(v12[2]);
  if (SHIBYTE(v12[0]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[1]);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[1]);
  if (v4)
    a2 = a2;
  else
    a2 = 0;
  nullsub_90((char *)&v6 + 1, v2);
  return a2;
}

void sub_10059AF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026B73C((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_10059AF7C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  char v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;

  v4 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    if (v10 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Disconnecting AVRCP profile to device %{public}s", buf, 0xCu);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  v8 = 0;
  sub_100043758(&v8);
  if (sub_1001498D8((int *)(a2 + 128)))
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
LABEL_9:
      sub_10043E5F8(a2, __p);
      sub_100708328();
    }
  }
  else
  {
    if (!*(_QWORD *)(a1 + 528) || !sub_100100DE4(*(unsigned __int16 *)(a1 + 536)))
    {
      v6 = 0;
      goto LABEL_16;
    }
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
  }
  v6 = 1;
LABEL_16:
  sub_100043728(&v8);
  return v6;
}

void sub_10059B118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10059B13C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  char *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  NSObject *v12;
  _BOOL8 v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  int v19;
  NSObject *v20;
  char *v21;
  _BYTE *v22;
  __int128 v23;
  __int128 v24;
  void *__p[3];
  int v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  uint8_t v31[4];
  _BYTE *v32;
  __int16 v33;
  int v34;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v4 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v5 = sub_100481EC8((uint64_t)a1, v4);
  v6 = qword_100999840;
  if (!os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    goto LABEL_11;
  v7 = v5 ? "Accepting" : "Rejecting";
  sub_10043E5F8(v4, __p);
  v8 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)buf = 136446466;
  *(_QWORD *)&buf[4] = v7;
  v28 = 2082;
  v29 = v8;
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s incoming connection attempt from device %{public}s", buf, 0x16u);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((v5 & 1) != 0)
    {
LABEL_12:
      v9 = sub_10003BE44();
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 328))(v9);
      if ((_DWORD)v10)
      {
        v24 = xmmword_1007429B0;
        memset(__p, 0, sizeof(__p));
        if (sub_10059AD40(v10, v4, 0x110Fu) >= 0x104
          && sub_1004442A0(v4, (uint64_t)&v24, 0x311u, __p))
        {
          v23 = *(_OWORD *)__p[0];
          if ((BYTE8(v23) & 0x40) != 0)
          {
            v12 = qword_100999840;
            v13 = os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT);
            if (v13)
            {
              sub_10043E5F8(v4, buf);
              v14 = v30;
              v15 = *(_BYTE **)buf;
              v17 = sub_10059AE2C(v16, v4);
              v18 = buf;
              if (v14 < 0)
                v18 = v15;
              *(_DWORD *)v31 = 136446466;
              v32 = v18;
              v33 = 1024;
              v34 = v17;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Browsing is supported on device %{public}s, isBrowsingBroken %d", v31, 0x12u);
              if (v30 < 0)
                operator delete(*(void **)buf);
            }
            sub_10059AE2C(v13, v4);
          }
          sub_1002C3FB4(&v23);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      sub_1004816DC(a1, v4);
    }
  }
  else
  {
LABEL_11:
    if ((v5 & 1) != 0)
      goto LABEL_12;
  }
  result = sub_10014980C((int *)a2, 0, 0);
  v19 = result;
  if ((_DWORD)result)
  {
    v20 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      v21 = v5 ? "accept" : "reject";
      sub_10043E5F8(v4, buf);
      v22 = v30 >= 0 ? buf : *(_BYTE **)buf;
      LODWORD(__p[0]) = 136446722;
      *(void **)((char *)__p + 4) = v21;
      WORD2(__p[1]) = 2082;
      *(void **)((char *)&__p[1] + 6) = v22;
      HIWORD(__p[2]) = 1024;
      v26 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to %{public}s connection attempt from device %{public}s - result was %{bluetooth:OI_STATUS}u", (uint8_t *)__p, 0x1Cu);
      if (v30 < 0)
        operator delete(*(void **)buf);
    }
    sub_10048183C((uint64_t)a1, v4, 1);
  }
  return result;
}

void sub_10059B4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_10059B524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  NSObject *v7;
  int v8;
  void **v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  _DWORD buf[3];
  __int16 v25;
  int v26;
  void *__p;
  char v28;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(__p) = *(_DWORD *)a2;
  WORD2(__p) = *(_WORD *)(a2 + 4);
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&__p, 1);
  v7 = qword_100999840;
  if ((_DWORD)a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(v6, &__p);
      v23 = v28 >= 0 ? &__p : (void **)__p;
      buf[0] = 136446466;
      *(_QWORD *)&buf[1] = v23;
      v25 = 1024;
      v26 = a3;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to connect to device %{public}s - result was %{bluetooth:OI_STATUS}u", (uint8_t *)buf, 0x12u);
      if (v28 < 0)
        operator delete(__p);
    }
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10093A448);
    v8 = sub_1004A35C0((uint64_t)off_100977A50, a3, 20000);
    sub_10048183C(a1, v6, v8);
  }
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v6, &__p);
    v9 = v28 >= 0 ? &__p : (void **)__p;
    buf[0] = 136446466;
    *(_QWORD *)&buf[1] = v9;
    v25 = 1024;
    v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "RemoteClient connect confirm device %{public}s with result %{bluetooth:OI_STATUS}u", (uint8_t *)buf, 0x12u);
    if (v28 < 0)
      operator delete(__p);
  }
  v10 = *(_QWORD **)(a1 + 352);
  if (v10)
  {
    v11 = a1 + 352;
    do
    {
      v12 = v10[4];
      v13 = v12 >= v6;
      if (v12 >= v6)
        v14 = v10;
      else
        v14 = v10 + 1;
      if (v13)
        v11 = (uint64_t)v10;
      v10 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v11 != a1 + 352 && v6 >= *(_QWORD *)(v11 + 32))
    {
      v15 = qword_100999840;
      if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_FAULT))
        sub_10070836C(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  operator new();
}

void sub_10059B910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10059B954(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  NSObject *v12;
  _BYTE *v13;
  _BYTE __p[12];
  char v15;
  _BYTE buf[12];
  __int16 v17;
  unsigned int v18;
  __int16 v19;
  int v20;

  v3 = sub_10059AD40(a1, a2, 0x110Cu);
  if ((_DWORD)v3)
  {
    v4 = v3;
    v5 = sub_10044A478(a2, v3);
  }
  else
  {
    v5 = sub_10044A3B4(a2);
    v4 = v5;
  }
  if (v4 < 0x104 || (sub_10059C348(v5, a2) & 1) != 0)
  {
    v6 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v7 = v15;
      v8 = *(_BYTE **)__p;
      v10 = sub_10059C348(v9, a2);
      v11 = __p;
      *(_DWORD *)buf = 136446722;
      if (v7 < 0)
        v11 = v8;
      *(_QWORD *)&buf[4] = v11;
      v17 = 1024;
      v18 = v4;
      v19 = 1024;
      v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Skipping capability check for device %{public}s with remote control version 0x%x, brokenAbs %d", buf, 0x18u);
      if (v15 < 0)
        operator delete(*(void **)__p);
    }
  }
  else
  {
    v12 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, buf);
      v13 = v20 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Querying capabilities of remote device %{public}s to see if they support absolute volume", __p, 0xCu);
      if (SHIBYTE(v20) < 0)
        operator delete(*(void **)buf);
    }
    buf[0] = 0;
    if (sub_10014AD90(a2 + 128, buf) && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      sub_1007083DC();
  }
}

void sub_10059BB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10059BB70(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unint64_t v8;
  NSObject *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v13;
  unint64_t v14;
  uint8_t buf[4];
  _BYTE v16[14];

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v14 = v8;
  v9 = qword_100999840;
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(v8, __p);
      if (v13 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)v16 = v10;
      *(_WORD *)&v16[8] = 1024;
      *(_DWORD *)&v16[10] = a3;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to establish browsing channel with device %{public}s: %{bluetooth:OI_STATUS}u", buf, 0x12u);
      if (v13 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v8, __p);
      v11 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v16 = a4;
      *(_WORD *)&v16[4] = 2082;
      *(_QWORD *)&v16[6] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Browsing channel (MTU = %u) established with device %{public}s", buf, 0x12u);
      if (v13 < 0)
        operator delete(__p[0]);
    }
    __p[0] = &v14;
    *((_WORD *)sub_100482BA8((uint64_t **)(a1 + 504), &v14, (uint64_t)&unk_100740F58, (_QWORD **)__p) + 20) = a4;
  }
}

void sub_10059BD68(uint64_t a1, uint64_t a2, __int16 a3, int a4)
{
  uint64_t v8;
  NSObject *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  int v17;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v9 = qword_100999840;
  if (a4)
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(v8, __p);
      if (v13 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v15 = v10;
      v16 = 1024;
      v17 = a4;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to establish BIP cover art channel with device %{public}s: %{bluetooth:OI_STATUS}u", buf, 0x12u);
      if (v13 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v8, __p);
      v11 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "BIP cover art channel established with device %{public}s", buf, 0xCu);
      if (v13 < 0)
        operator delete(__p[0]);
    }
    *(_QWORD *)(a1 + 528) = v8;
    *(_WORD *)(a1 + 536) = a3;
  }
}

void sub_10059BF30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v4 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v5 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v4, __p);
    v6 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BIP cover art channel disestablished with device %{public}s", buf, 0xCu);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  if (v4 != *(_QWORD *)(a1 + 528))
  {
    v7 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_FAULT))
      sub_10070843C(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  *(_QWORD *)(a1 + 528) = 0;
}

void sub_10059C094(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  _QWORD v22[2];
  _QWORD v23[2];
  unint64_t v24;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(v23[0]) = *(_DWORD *)a2;
  WORD2(v23[0]) = *(_WORD *)(a2 + 4);
  v4 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)v23, 1);
  v24 = v4;
  v5 = *(_QWORD **)(a1 + 352);
  if (!v5)
    goto LABEL_44;
  v6 = a1 + 352;
  do
  {
    v7 = v5[4];
    v8 = v7 >= v4;
    if (v7 >= v4)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (v8)
      v6 = (uint64_t)v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != a1 + 352 && v4 >= *(_QWORD *)(v6 + 32))
  {
    v23[0] = 0;
    v23[1] = 0;
    sub_10003415C((uint64_t)v23, a1 + 280);
    v10 = *sub_10047396C(a1 + 344, &v24);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 64))(v10);
    sub_100015ECC(a1 + 344, &v24);
    sub_100015ECC(a1 + 504, &v24);
    sub_100034264((uint64_t)v23);
    v22[0] = 0;
    v22[1] = 0;
    sub_10003415C((uint64_t)v22, a1 + 392);
    sub_100015ECC(a1 + 456, &v24);
    sub_100034264((uint64_t)v22);
    v12 = *(_QWORD **)(a1 + 488);
    v13 = v24;
    if (v12)
    {
      v14 = a1 + 488;
      do
      {
        v15 = v12[4];
        v16 = v15 >= v24;
        if (v15 >= v24)
          v17 = v12;
        else
          v17 = v12 + 1;
        if (v16)
          v14 = (uint64_t)v12;
        v12 = (_QWORD *)*v17;
      }
      while (*v17);
      if (v14 != a1 + 488 && v24 >= *(_QWORD *)(v14 + 32))
      {
        v18 = *(_QWORD **)(v14 + 40);
        if (v18 != (_QWORD *)(v14 + 48))
        {
          do
          {
            if (*((_BYTE *)v18 + 33) == 32)
              sub_10059C310(v11, (char *)v18[5]);
            v19 = (_QWORD *)v18[1];
            if (v19)
            {
              do
              {
                v20 = v19;
                v19 = (_QWORD *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                v20 = (_QWORD *)v18[2];
                v21 = *v20 == (_QWORD)v18;
                v18 = v20;
              }
              while (!v21);
            }
            v18 = v20;
          }
          while (v20 != (_QWORD *)(v14 + 48));
        }
        sub_10039430C((uint64_t **)(a1 + 480), v14);
        v13 = v24;
      }
    }
    if (v13 == *(_QWORD *)(a1 + 552))
      *(_QWORD *)(a1 + 552) = 0;
    sub_10048257C(a1, v13, 0);
    sub_100034234((uint64_t)v22);
    sub_100034234((uint64_t)v23);
  }
  else
  {
LABEL_44:
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      sub_1007084AC();
  }
}

void sub_10059C2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10059C310(uint64_t a1, char *a2)
{
  uint64_t i;

  for (i = 8; i != 200; i += 24)
    free(*(void **)&a2[i]);
  free(a2);
}

uint64_t sub_10059C348(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  __int128 v6;
  void *v7[2];
  __int128 v8;
  void *v9[2];
  __int128 v10;
  void *__p[2];
  _OWORD v12[3];
  __int128 v13;
  uint64_t v14;

  v14 = 0;
  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  v10 = 0u;
  *(_OWORD *)__p = 0u;
  v8 = 0u;
  *(_OWORD *)v9 = 0u;
  v6 = 0u;
  *(_OWORD *)v7 = 0u;
  sub_1005BCCCC((uint64_t)&v6 + 1);
  BYTE2(v7[0]) = 0;
  BYTE4(v7[0]) = 0;
  BYTE2(v9[0]) = 0;
  BYTE4(v9[0]) = 0;
  DWORD1(v12[1]) = 0;
  v8 = 0uLL;
  v7[1] = 0;
  LOBYTE(v9[0]) = 0;
  v10 = 0uLL;
  v9[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v12, 0, 19);
  __p[1] = 0;
  BYTE8(v12[1]) = 1;
  BYTE2(v14) = 0;
  *(_QWORD *)((char *)&v12[1] + 14) = 0;
  *(_QWORD *)((char *)&v12[1] + 9) = 0;
  v13 = 0uLL;
  *((_QWORD *)&v12[2] + 1) = 0;
  LOBYTE(v14) = 0;
  LODWORD(a2) = sub_1004419F4(a2, (uint64_t)&v6);
  v4 = BYTE13(v12[2]);
  if (SHIBYTE(v12[0]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[1]);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[1]);
  if (v4)
    a2 = a2;
  else
    a2 = 0;
  nullsub_90((char *)&v6 + 1, v2);
  return a2;
}

void sub_10059C47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026B73C((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

void sub_10059C498(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  void **v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  void **v14;
  __int16 v15;
  int v16;

  v6 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v7 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v14 = v7;
    v15 = 1024;
    v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "RemoteClient queryComplete for device %{public}s with result %d", buf, 0x12u);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  if (a3 != 307)
  {
    if (!a3)
    {
      *(_BYTE *)(a1 + 544) = 0;
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      sub_10059B954(a1, a2);
      sub_10004339C(__p);
      sub_100043728(__p);
      return;
    }
    if ((a3 - 316) >= 0x13)
    {
      v8 = *(unsigned __int8 *)(a1 + 544);
      if (v8 <= 3)
      {
        v9 = v8 + 1;
        *(_BYTE *)(a1 + 544) = v8 + 1;
        v10 = qword_100999840;
        if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(__p[0]) = 67109120;
          HIDWORD(__p[0]) = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "RemoteClient retrying with sdpAttempts %d", (uint8_t *)__p, 8u);
        }
        if (qword_10097B080 != -1)
          dispatch_once(&qword_10097B080, &stru_10093A468);
        sub_10048BB30(qword_10097B078, a2);
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    sub_1007084D8();
  *(_BYTE *)(a1 + 544) = 0;
}

void sub_10059C698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_100043728(&a9);
  _Unwind_Resume(a1);
}

void sub_10059C6B4(uint64_t a1, uint64_t a2, int a3)
{
  sub_10059C498(a1 - 256, a2, a3);
}

uint64_t sub_10059C6BC(uint64_t a1, unint64_t a2, float *a3)
{
  _QWORD *v6;
  int *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 392);
  v6 = *(_QWORD **)(a1 + 464);
  if (!v6)
    goto LABEL_12;
  v7 = (int *)(a1 + 464);
  do
  {
    v8 = v6[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = (int *)v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != (int *)(a1 + 464) && *((_QWORD *)v7 + 4) <= a2)
  {
    *a3 = (float)v7[10] / 127.0;
    v11 = 1;
  }
  else
  {
LABEL_12:
    v11 = 0;
  }
  sub_100034234((uint64_t)v13);
  return v11;
}

void sub_10059C770(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  unsigned __int8 v11;
  NSObject *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  NSObject *v20;
  NSObject *v21;
  _QWORD *v22;
  unint64_t v23;
  _BYTE __p[14];
  __int16 v25;
  int v26;
  char v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  _BYTE *v31;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  *(_DWORD *)__p = *(_DWORD *)a2;
  *(_WORD *)&__p[4] = *(_WORD *)(a2 + 4);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v23 = v8;
  v9 = "Previous Track";
  v10 = 504;
  v11 = 9;
  switch(a4 & 0x7F)
  {
    case 'A':
      v9 = "Volume Up";
      v10 = 506;
      goto LABEL_12;
    case 'B':
      v9 = "Volume Down";
      v10 = 507;
      goto LABEL_12;
    case 'C':
      v9 = "Mute";
      v10 = 508;
      goto LABEL_12;
    case 'D':
      sub_1002A8D9C(7);
      v9 = "Play";
      v10 = 501;
      goto LABEL_10;
    case 'E':
      sub_1002A8D9C(7);
      v9 = "Stop";
      v10 = 503;
      goto LABEL_10;
    case 'F':
      sub_1002A8D9C(7);
      v9 = "Pause";
      v10 = 502;
LABEL_10:
      v11 = 9;
      break;
    case 'H':
      if (a4 >= 0)
        v10 = 511;
      else
        v10 = 512;
      v9 = "Rewind";
      break;
    case 'I':
      if (a4 >= 0)
        v10 = 509;
      else
        v10 = 510;
      v9 = "Fast Forward";
      break;
    case 'K':
      v9 = "Next Track";
      v10 = 505;
      break;
    case 'L':
      break;
    default:
      v10 = 0;
      v9 = "Unknown";
LABEL_12:
      v11 = 8;
      break;
  }
  if (sub_10014F624(a2, a3, a4, v11) && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
  {
    sub_100708530();
    if (!(_DWORD)v10)
      return;
  }
  else if (!(_DWORD)v10)
  {
    return;
  }
  if ((a4 & 0x80) == 0 || (a4 & 0xFE) == 0xC8)
  {
    v12 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v8, __p);
      v13 = v27 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446466;
      v29 = v9;
      v30 = 2082;
      v31 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received AVRCP %{public}s command from device %{public}s", buf, 0x16u);
      if (v27 < 0)
        operator delete(*(void **)__p);
    }
    v14 = sub_10043F854(v8);
    v15 = sub_100016B48();
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15);
    v17 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      v18 = atomic_load((unsigned __int8 *)(a1 + 545));
      *(_DWORD *)__p = 67109632;
      *(_DWORD *)&__p[4] = v16;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = v18 & 1;
      v25 = 1024;
      v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CoP: %d, call related session:%d delayPlay:%d", __p, 0x14u);
      v8 = v23;
    }
    if (v8 && sub_10043FC5C(v8))
    {
      v19 = atomic_load((unsigned __int8 *)(a1 + 545));
      if ((v19 & 1) == 0 || v14 != 22 && v14 != 17)
        goto LABEL_51;
      if ((v10 - 502) < 2)
      {
        v20 = qword_100999840;
        if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 136315138;
          *(_QWORD *)&__p[4] = v9;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "AVRCP %s received during call session, ignoring", __p, 0xCu);
        }
        return;
      }
      if ((_DWORD)v10 != 501)
      {
LABEL_51:
        v22 = sub_10047396C(a1 + 344, &v23);
        (*(void (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(*v22 + 8) + 8))(*(_QWORD *)(*v22 + 8), v23, v10);
        return;
      }
      v21 = qword_100999840;
      if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "AVRCP %s received during call session, queueing resumption after session ends", __p, 0xCu);
      }
      *(_QWORD *)(a1 + 552) = v23;
    }
    else if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_100708504();
    }
  }
}

void sub_10059CC10(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_1004759E0();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10059CC78;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_10059CC78(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  atomic_store(*(_BYTE *)(a1 + 40), (unsigned __int8 *)(v1 + 545));
  return sub_10059CC90(v1);
}

uint64_t sub_10059CC90(uint64_t result)
{
  unsigned __int8 v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  NSObject *v9;
  void **v10;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  void **v14;

  v1 = atomic_load((unsigned __int8 *)(result + 545));
  if ((v1 & 1) == 0)
  {
    v2 = result;
    result = sub_10043FC5C(*(_QWORD *)(result + 552));
    if ((_DWORD)result)
    {
      v3 = *(_QWORD **)(v2 + 352);
      if (v3)
      {
        v4 = *(_QWORD *)(v2 + 552);
        v5 = (_QWORD *)(v2 + 352);
        do
        {
          v6 = v3[4];
          v7 = v6 >= v4;
          if (v6 >= v4)
            v8 = v3;
          else
            v8 = v3 + 1;
          if (v7)
            v5 = v3;
          v3 = (_QWORD *)*v8;
        }
        while (*v8);
        if (v5 != (_QWORD *)(v2 + 352) && v4 >= v5[4])
        {
          v9 = qword_100999840;
          if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v4, __p);
            if (v12 >= 0)
              v10 = __p;
            else
              v10 = (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            v14 = v10;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "An AVRCP Play command was pending for device %{public}s, sending to MediaRemote", buf, 0xCu);
            if (v12 < 0)
              operator delete(__p[0]);
            v4 = *(_QWORD *)(v2 + 552);
          }
          result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v5[5] + 8) + 8))(*(_QWORD *)(v5[5] + 8), v4, 501);
        }
      }
      *(_QWORD *)(v2 + 552) = 0;
    }
  }
  return result;
}

void sub_10059CDF0(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  void **v11;
  int v12;
  void *__p[2];
  char v14;
  int v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  void **v19;

  v15 = 6488;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v7 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v8 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    v9 = "unknown";
    if (a4 == 3)
      v9 = "supported events";
    if (a4 == 2)
      v10 = "company ID";
    else
      v10 = v9;
    sub_10043E5F8(v7, __p);
    if (v14 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v17 = v10;
    v18 = 2082;
    v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'get capabilities' (%{public}s) request from device %{public}s", buf, 0x16u);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  if (a4 == 2)
  {
    v12 = sub_10014BE90(a2, a3, 1, (uint64_t)&v15);
  }
  else
  {
    if (a4 == 3)
    {
      sub_10014CF50(a2, a3, 7, (uint64_t)&unk_100742980);
      return;
    }
    v12 = sub_10014BD40(a2, a3, 16, 3306);
  }
  if (v12)
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      sub_100708590();
  }
}

void sub_10059CFF0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v5 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v6 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v5, __p);
    v7 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received 'list player attributes' request from device %{public}s", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  if (sub_10014CFB0(a2, a3, 2, (uint64_t)&unk_100742987))
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      sub_1007085F0();
  }
}

void sub_10059D168(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  void **v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  void *__p[2];
  char v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  void **v26;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v7 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v8 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    v9 = "unsupported";
    if (a4 == 3)
      v9 = "shuffle mode";
    if (a4 == 2)
      v10 = "repeat mode";
    else
      v10 = v9;
    sub_10043E5F8(v7, __p);
    if (v22 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v24 = v10;
    v25 = 2082;
    v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'list player attribute value' (%{public}s) request from device %{public}s", buf, 0x16u);
    if (v22 < 0)
      operator delete(__p[0]);
  }
  switch(a4)
  {
    case 0:
    case 1:
    case 4:
      v12 = a2;
      v13 = a3;
      v14 = 3301;
      goto LABEL_17;
    case 2:
      v16 = &unk_100742989;
      v17 = a2;
      v18 = a3;
      v19 = 2;
      v20 = 3;
      goto LABEL_20;
    case 3:
      v16 = &unk_10074298C;
      v17 = a2;
      v18 = a3;
      v19 = 3;
      v20 = 2;
LABEL_20:
      v15 = sub_10014D000(v17, v18, v19, v20, (uint64_t)v16);
      break;
    default:
      v12 = a2;
      v13 = a3;
      v14 = 3306;
LABEL_17:
      v15 = sub_10014BD40(v12, v13, 18, v14);
      break;
  }
  if (v15)
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      sub_100708650();
  }
}

void sub_10059D3A4(uint64_t a1, uint64_t a2, char a3, unsigned int a4, const void *a5)
{
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  void **v13;
  uint64_t v14;
  _QWORD v15[4];
  uint64_t (**v16)();
  unsigned int *v17;
  unint64_t v18;
  char v19;
  char v20;
  void *__p[2];
  char v22;
  uint64_t (**v23)();
  unsigned int *v24;
  unint64_t v25;
  uint8_t buf[4];
  unsigned int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  void **v31;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v27) = *(_WORD *)(a2 + 4);
  v10 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v24 = 0;
  v25 = v10;
  v23 = 0;
  sub_10003994C(&v23, a5, a4);
  v11 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v10, __p);
    v12 = "s";
    if (a4 == 1)
      v12 = "";
    *(_DWORD *)buf = 67109634;
    if (v22 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    v27 = a4;
    v28 = 2082;
    v29 = v12;
    v30 = 2082;
    v31 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received 'get player attribute value' (%u value%{public}s) request from device %{public}s", buf, 0x1Cu);
    if (v22 < 0)
      operator delete(__p[0]);
  }
  v14 = *(_QWORD *)(*sub_10047396C(a1 + 344, &v25) + 8);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768;
  v15[2] = sub_10059D60C;
  v15[3] = &unk_100939FE0;
  v19 = a4;
  v16 = &off_100918258;
  v17 = v24;
  if (v24)
    sub_10003C37C((uint64_t)v24);
  v18 = v25;
  v20 = a3;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 16))(v14, v15);
  v16 = &off_100918258;
  if (v17)
    sub_100056AAC(v17);
  v23 = &off_100918258;
  if (v24)
    sub_100056AAC(v24);
}

void sub_10059D5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int *a21)
{
  if (a21)
    sub_100056AAC(a21);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10059D60C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint8_t v5;
  uint8_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;
  uint8_t *v12;
  uint64_t v13;
  char *v14;
  void **v15;
  NSObject *v16;
  const char *v17;
  uint8_t v18;
  uint8_t *v19;
  uint64_t v20;
  char *v21;
  void **v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  void *__p[2];
  char v28;
  int v29;
  uint8_t buf[4];
  char *v31;
  __int16 v32;
  void **v33;

  v29 = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    v5 = a4;
    v6 = a3;
    v7 = 0;
    v8 = 0;
    v26 = (a4 - 1);
    v25 = (a3 - 1);
    v9 = 3301;
    do
    {
      if (v8 >= 2u)
      {
        LOBYTE(__p[0]) = 0;
        sub_100043758(__p);
        goto LABEL_23;
      }
      v10 = v9;
      v9 = 3301;
      switch(sub_1005F55FC(a1 + 32, v7))
      {
        case 0u:
        case 1u:
        case 4u:
          break;
        case 2u:
          v11 = sub_1005F55FC(a1 + 32, v7);
          v12 = &buf[2 * v8 - 4];
          *v12 = v11;
          v12[1] = v6;
          ++v8;
          v13 = qword_100999840;
          if (!os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
            goto LABEL_16;
          v14 = off_100939FB0[v25];
          sub_10043E5F8(*(_QWORD *)(a1 + 48), __p);
          v15 = __p;
          if (v28 < 0)
            v15 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v31 = v14;
          v32 = 2082;
          v33 = v15;
          v16 = v13;
          v17 = "Sending repeat mode status '%{public}s' to device %{public}s";
          goto LABEL_14;
        case 3u:
          v18 = sub_1005F55FC(a1 + 32, v7);
          v19 = &buf[2 * v8 - 4];
          *v19 = v18;
          v19[1] = v5;
          ++v8;
          v20 = qword_100999840;
          if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
          {
            v21 = off_100939FC8[v26];
            sub_10043E5F8(*(_QWORD *)(a1 + 48), __p);
            v22 = __p;
            if (v28 < 0)
              v22 = (void **)__p[0];
            *(_DWORD *)buf = 136446466;
            v31 = v21;
            v32 = 2082;
            v33 = v22;
            v16 = v20;
            v17 = "Sending shuffle mode status '%{public}s' to device %{public}s";
LABEL_14:
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 0x16u);
            if (v28 < 0)
              operator delete(__p[0]);
          }
LABEL_16:
          v9 = v10;
          break;
        default:
          v9 = 3306;
          break;
      }
      ++v7;
    }
    while (v7 < *(unsigned __int8 *)(a1 + 56));
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    if (!(_BYTE)v8)
      goto LABEL_21;
LABEL_23:
    v23 = sub_10014D050(*(_QWORD *)(a1 + 48) + 128, *(unsigned __int8 *)(a1 + 57), v8, (uint64_t)&v29);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    LODWORD(v9) = 3301;
LABEL_21:
    v23 = sub_10014BD40(*(_QWORD *)(a1 + 48) + 128, *(unsigned __int8 *)(a1 + 57), 19, v9);
  }
  if (v23 && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    sub_1007086B0();
  return sub_100043728(__p);
}

void sub_10059D918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

void sub_10059D934(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v10;
  NSObject *v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  char *v25;
  BOOL v26;
  _QWORD *v27;
  int v28;
  int v29;
  NSObject *v30;
  _BYTE *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _BYTE v35[12];
  __int16 v36;
  int v37;
  char v38;
  _BYTE buf[18];
  __int16 v40;
  _BYTE *v41;

  LODWORD(v6) = a4;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)&buf[4] = *(_WORD *)(a2 + 4);
  v10 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v34 = v10;
  v11 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    v12 = (_DWORD)v6 == 1 ? "" : "s";
    sub_10043E5F8(v10, v35);
    v13 = v38 >= 0 ? v35 : *(_BYTE **)v35;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = v6;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = v12;
    v40 = 2082;
    v41 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received 'set player attribute value' (%d value%{public}s) request from device %{public}s", buf, 0x1Cu);
    if (v38 < 0)
    {
      operator delete(*(void **)v35);
      if ((_DWORD)v6)
        goto LABEL_12;
LABEL_33:
      LODWORD(v18) = 3301;
      goto LABEL_34;
    }
  }
  if (!(_DWORD)v6)
    goto LABEL_33;
LABEL_12:
  v32 = a1;
  v33 = a3;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v6 = v6;
  v17 = (unsigned __int8 *)(a5 + 1);
  v18 = 3301;
  do
  {
    v19 = v18;
    v18 = 3301;
    switch(*(v17 - 1))
    {
      case 0u:
      case 1u:
      case 4u:
        break;
      case 2u:
        v15 = *v17;
        if ((v15 - 1) > 2)
          goto LABEL_22;
        v20 = qword_100999840;
        if (!os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
          goto LABEL_21;
        v21 = off_100939FB0[(v15 - 1)];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v21;
        v22 = v20;
        v23 = "Setting repeat mode to '%{public}s'";
        goto LABEL_20;
      case 3u:
        v14 = *v17;
        if ((v14 - 1) > 1)
          goto LABEL_22;
        v24 = qword_100999840;
        if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
        {
          v25 = off_100939FC8[(v14 - 1)];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v25;
          v22 = v24;
          v23 = "Setting shuffle mode to '%{public}s'";
LABEL_20:
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v23, buf, 0xCu);
        }
LABEL_21:
        ++v16;
        v18 = v19;
        break;
      default:
LABEL_22:
        v18 = 3306;
        break;
    }
    v17 += 2;
    --v6;
  }
  while (v6);
  v26 = v16 == 0;
  a3 = v33;
  if (!v26)
  {
    v27 = sub_10047396C(v32 + 344, (unint64_t *)&v34);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*v27 + 8) + 40))(*(_QWORD *)(*v27 + 8), v15, v14);
    v28 = sub_10014BD40(a2, v33, 20, 0);
    if (v28)
    {
      v29 = v28;
      v30 = qword_100999840;
      if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v34, buf);
        if (SBYTE3(v41) >= 0)
          v31 = buf;
        else
          v31 = *(_BYTE **)buf;
        *(_DWORD *)v35 = 136446466;
        *(_QWORD *)&v35[4] = v31;
        v36 = 1024;
        v37 = v29;
        _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to respond to set attribute value request on device %{public}s - result was %{bluetooth:OI_STATUS}u", v35, 0x12u);
        if (SBYTE3(v41) < 0)
          operator delete(*(void **)buf);
      }
    }
    return;
  }
LABEL_34:
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    sub_100708770();
  if (sub_10014BD40(a2, a3, 20, v18) && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    sub_100708710();
}

uint64_t sub_10059DD6C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7;
  int v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  uint8_t buf[8];
  char v15;
  _DWORD __p[3];
  __int16 v17;
  unsigned int v18;
  __int16 v19;
  uint8_t *v20;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  v13 = 0;
  __p[0] = *(_DWORD *)a2;
  LOWORD(__p[1]) = *(_WORD *)(a2 + 4);
  v7 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v13 = v7;
  if (a4 <= 0xC && ((1 << a4) & 0x1F06) != 0)
    operator new();
  if (a4 - 1 >= 0xD)
    v8 = 3306;
  else
    v8 = 3301;
  v9 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
  {
    if (a4 - 1 >= 0xD)
      v11 = "invalid";
    else
      v11 = "unimplemented";
    sub_10043E5F8(v7, buf);
    if (v15 >= 0)
      v12 = buf;
    else
      v12 = *(uint8_t **)buf;
    __p[0] = 136446722;
    *(_QWORD *)&__p[1] = v11;
    v17 = 1024;
    v18 = a4;
    v19 = 2082;
    v20 = v12;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Received notification registration request for %{public}s event %d from device %{public}s", (uint8_t *)__p, 0x1Cu);
    if (v15 < 0)
      operator delete(*(void **)buf);
  }
  return sub_10014BD40(a2, a3, 49, v8);
}

uint64_t sub_10059E414(uint64_t a1, unsigned int a2, int a3, unint64_t a4, int *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  int v15;
  unsigned int v16;
  NSObject *v17;
  char *v18;
  void **v19;
  void *__p[2];
  char v22;
  int v23;
  __int16 v24;
  _QWORD v25[2];
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  __int16 v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v25[0] = 0;
  v25[1] = 0;
  sub_10003415C((uint64_t)v25, a1 + 280);
  v10 = *(_QWORD **)(a1 + 352);
  if (!v10)
    goto LABEL_31;
  v11 = (_QWORD *)(a1 + 352);
  do
  {
    v12 = v10[4];
    v13 = v12 >= a4;
    if (v12 >= a4)
      v14 = v10;
    else
      v14 = v10 + 1;
    if (v13)
      v11 = v10;
    v10 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 != (_QWORD *)(a1 + 352) && v11[4] <= a4)
  {
    v15 = *a5;
    v24 = *((_WORD *)a5 + 2);
    v23 = v15;
    v16 = *((unsigned __int8 *)a5 + 6);
    if (a3)
      operator delete();
    sub_100034264((uint64_t)v25);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v17 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      v18 = a2 > 4 ? "unknown" : off_10093A488[a2];
      sub_10043E5F8(a4, __p);
      *(_DWORD *)buf = 136446722;
      v19 = v22 >= 0 ? __p : (void **)__p[0];
      v27 = "interim";
      v28 = 2082;
      v29 = v18;
      v30 = 2082;
      v31 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Sending %{public}s notification for playback state '%{public}s' to device %{public}s", buf, 0x20u);
      if (v22 < 0)
        operator delete(__p[0]);
    }
    LOBYTE(v32) = 1;
    LOBYTE(v33) = a2;
    if (a2 <= 2)
      sub_1002A8D9C(8);
    buf[0] = 0;
    sub_100043758(buf);
    sub_10014D148((uint64_t)&v23, v16, (uint64_t)&v32, 0);
    sub_10004339C(buf);
    sub_100043728(buf);
  }
  else
  {
LABEL_31:
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a4, buf);
      sub_1007087D0();
    }
  }
  return sub_100034234((uint64_t)v25);
}

void sub_10059E678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *sub_10059E6B4(unsigned int a1)
{
  if (a1 > 4)
    return "unknown";
  else
    return off_10093A488[a1];
}

uint64_t sub_10059E6D8(uint64_t a1, unsigned int a2, int a3, unint64_t a4, int *a5)
{
  return sub_10059E414(a1 - 264, a2, a3, a4, a5);
}

uint64_t sub_10059E6E0(uint64_t a1, uint64_t a2, int a3, unint64_t a4, int *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  int v15;
  unsigned int v16;
  NSObject *v17;
  void **v18;
  void *__p[2];
  char v21;
  int v22;
  __int16 v23;
  _QWORD v24[2];
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1 + 280);
  v10 = *(_QWORD **)(a1 + 352);
  if (!v10)
    goto LABEL_26;
  v11 = (_QWORD *)(a1 + 352);
  do
  {
    v12 = v10[4];
    v13 = v12 >= a4;
    if (v12 >= a4)
      v14 = v10;
    else
      v14 = v10 + 1;
    if (v13)
      v11 = v10;
    v10 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 != (_QWORD *)(a1 + 352) && v11[4] <= a4)
  {
    v15 = *a5;
    v23 = *((_WORD *)a5 + 2);
    v22 = v15;
    v16 = *((unsigned __int8 *)a5 + 6);
    if (a3)
      operator delete();
    sub_100034264((uint64_t)v24);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v17 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a4, __p);
      *(_DWORD *)buf = 136446722;
      v18 = v21 >= 0 ? __p : (void **)__p[0];
      v26 = "interim";
      v27 = 2048;
      v28 = a2;
      v29 = 2082;
      v30 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Sending %{public}s notification for track ID [%llu] to device %{public}s", buf, 0x20u);
      if (v21 < 0)
        operator delete(__p[0]);
    }
    LOBYTE(v31) = 2;
    v32 = a2;
    buf[0] = 0;
    sub_100043758(buf);
    sub_10014D148((uint64_t)&v22, v16, (uint64_t)&v31, 0);
    sub_10004339C(buf);
    sub_100043728(buf);
  }
  else
  {
LABEL_26:
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a4, buf);
      sub_1007087D0();
    }
  }
  return sub_100034234((uint64_t)v24);
}

void sub_10059E910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10059E948(uint64_t a1, uint64_t a2, int a3, unint64_t a4, int *a5)
{
  return sub_10059E6E0(a1 - 264, a2, a3, a4, a5);
}

uint64_t sub_10059E950(uint64_t a1, int a2, int a3, int a4, unint64_t a5, int *a6)
{
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  NSObject *v19;
  char *v20;
  char *v21;
  void **v22;
  void *__p[2];
  char v25;
  int v26;
  int v27;
  __int16 v28;
  _QWORD v29[2];
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  __int16 v34;
  char *v35;
  __int16 v36;
  void **v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;

  v29[0] = 0;
  v29[1] = 0;
  sub_10003415C((uint64_t)v29, a1 + 280);
  v12 = *(_QWORD **)(a1 + 352);
  if (!v12)
    goto LABEL_26;
  v13 = (_QWORD *)(a1 + 352);
  do
  {
    v14 = v12[4];
    v15 = v14 >= a5;
    if (v14 >= a5)
      v16 = v12;
    else
      v16 = v12 + 1;
    if (v15)
      v13 = v12;
    v12 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 != (_QWORD *)(a1 + 352) && v13[4] <= a5)
  {
    v17 = *a6;
    v28 = *((_WORD *)a6 + 2);
    v27 = v17;
    v18 = *((unsigned __int8 *)a6 + 6);
    if (a4)
      operator delete();
    sub_100034264((uint64_t)v29);
    v26 = 196610;
    BYTE1(v26) = a2;
    HIBYTE(v26) = a3;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v19 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      v20 = off_100939FB0[a2 - 1];
      v21 = off_100939FC8[a3 - 1];
      sub_10043E5F8(a5, __p);
      *(_DWORD *)buf = 136446978;
      v22 = v25 >= 0 ? __p : (void **)__p[0];
      v31 = "interim";
      v32 = 2082;
      v33 = v20;
      v34 = 2082;
      v35 = v21;
      v36 = 2082;
      v37 = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Sending %{public}s notification for player settings '%{public}s'/'%{public}s' to device %{public}s", buf, 0x2Au);
      if (v25 < 0)
        operator delete(__p[0]);
    }
    LOBYTE(v38) = 8;
    v39 = &v26;
    LOBYTE(v40) = 2;
    buf[0] = 0;
    sub_100043758(buf);
    sub_10014D148((uint64_t)&v27, v18, (uint64_t)&v38, 0);
    sub_10004339C(buf);
    sub_100043728(buf);
  }
  else
  {
LABEL_26:
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a5, buf);
      sub_1007087D0();
    }
  }
  return sub_100034234((uint64_t)v29);
}

void sub_10059EBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10059EC08(uint64_t a1, int a2, int a3, int a4, unint64_t a5, int *a6)
{
  return sub_10059E950(a1 - 264, a2, a3, a4, a5, a6);
}

uint64_t sub_10059EC10(uint64_t a1, int a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  int v13;
  unsigned int v14;
  NSObject *v15;
  void **v16;
  int v18;
  __int16 v19;
  _QWORD v20[3];
  _QWORD v21[2];
  void *__p[2];
  char v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  void **v27;

  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 280);
  v8 = *(_QWORD **)(a1 + 352);
  if (!v8)
    goto LABEL_26;
  v9 = (_QWORD *)(a1 + 352);
  do
  {
    v10 = v8[4];
    v11 = v10 >= a3;
    if (v10 >= a3)
      v12 = v8;
    else
      v12 = v8 + 1;
    if (v11)
      v9 = v8;
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 != (_QWORD *)(a1 + 352) && v9[4] <= a3)
  {
    v13 = *a4;
    v19 = *((_WORD *)a4 + 2);
    v18 = v13;
    v14 = *((unsigned __int8 *)a4 + 6);
    if (a2)
      operator delete();
    sub_100034264((uint64_t)v21);
    memset(v20, 0, sizeof(v20));
    v15 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a3, __p);
      v16 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v25 = "interim";
      v26 = 2082;
      v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending %{public}s notification for now playing content to device %{public}s", buf, 0x16u);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    LOBYTE(v20[0]) = 9;
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    sub_10014D148((uint64_t)&v18, v14, (uint64_t)v20, 0);
    sub_10004339C(__p);
    sub_100043728(__p);
  }
  else
  {
LABEL_26:
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a3, v20);
      sub_1007087D0();
    }
  }
  return sub_100034234((uint64_t)v21);
}

void sub_10059EE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10059EE64(uint64_t a1, int a2, unint64_t a3, int *a4)
{
  return sub_10059EC10(a1 - 264, a2, a3, a4);
}

uint64_t sub_10059EE6C(uint64_t a1, int a2, unint64_t a3, int *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  int v13;
  unsigned int v14;
  NSObject *v15;
  void **v16;
  int v18;
  __int16 v19;
  _QWORD v20[3];
  _QWORD v21[2];
  void *__p[2];
  char v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  void **v27;

  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 280);
  v8 = *(_QWORD **)(a1 + 352);
  if (!v8)
    goto LABEL_26;
  v9 = (_QWORD *)(a1 + 352);
  do
  {
    v10 = v8[4];
    v11 = v10 >= a3;
    if (v10 >= a3)
      v12 = v8;
    else
      v12 = v8 + 1;
    if (v11)
      v9 = v8;
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 != (_QWORD *)(a1 + 352) && v9[4] <= a3)
  {
    v13 = *a4;
    v19 = *((_WORD *)a4 + 2);
    v18 = v13;
    v14 = *((unsigned __int8 *)a4 + 6);
    if (a2)
      operator delete();
    sub_100034264((uint64_t)v21);
    memset(v20, 0, sizeof(v20));
    v15 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a3, __p);
      v16 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v25 = "interim";
      v26 = 2082;
      v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending %{public}s notification for available players to device %{public}s", buf, 0x16u);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    LOBYTE(v20[0]) = 10;
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    sub_10014D148((uint64_t)&v18, v14, (uint64_t)v20, 0);
    sub_10004339C(__p);
    sub_100043728(__p);
  }
  else
  {
LABEL_26:
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a3, v20);
      sub_1007087D0();
    }
  }
  return sub_100034234((uint64_t)v21);
}

void sub_10059F088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10059F0C0(uint64_t a1, int a2, unint64_t a3, int *a4)
{
  return sub_10059EE6C(a1 - 264, a2, a3, a4);
}

uint64_t sub_10059F0C8(uint64_t a1, int a2, __int16 a3, int a4, unint64_t a5, int *a6)
{
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  NSObject *v19;
  void **v20;
  void *__p[2];
  char v23;
  int v24;
  __int16 v25;
  _QWORD v26[2];
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v26[0] = 0;
  v26[1] = 0;
  sub_10003415C((uint64_t)v26, a1 + 280);
  v12 = *(_QWORD **)(a1 + 352);
  if (!v12)
    goto LABEL_26;
  v13 = (_QWORD *)(a1 + 352);
  do
  {
    v14 = v12[4];
    v15 = v14 >= a5;
    if (v14 >= a5)
      v16 = v12;
    else
      v16 = v12 + 1;
    if (v15)
      v13 = v12;
    v12 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 != (_QWORD *)(a1 + 352) && v13[4] <= a5)
  {
    v17 = *a6;
    v25 = *((_WORD *)a6 + 2);
    v24 = v17;
    v18 = *((unsigned __int8 *)a6 + 6);
    if (a4)
      operator delete();
    sub_100034264((uint64_t)v26);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v19 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a5, __p);
      *(_DWORD *)buf = 136446722;
      v20 = v23 >= 0 ? __p : (void **)__p[0];
      v28 = "interim";
      v29 = 1024;
      v30 = a2;
      v31 = 2082;
      v32 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Sending %{public}s notification for player addressed %u to device %{public}s", buf, 0x1Cu);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    LOBYTE(v33) = 11;
    LOWORD(v34) = a2;
    WORD1(v34) = a3;
    buf[0] = 0;
    sub_100043758(buf);
    sub_10014D148((uint64_t)&v24, v18, (uint64_t)&v33, 0);
    sub_10004339C(buf);
    sub_100043728(buf);
  }
  else
  {
LABEL_26:
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a5, buf);
      sub_1007087D0();
    }
  }
  return sub_100034234((uint64_t)v26);
}

void sub_10059F308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10059F340(uint64_t a1, int a2, __int16 a3, int a4, unint64_t a5, int *a6)
{
  return sub_10059F0C8(a1 - 264, a2, a3, a4, a5, a6);
}

uint64_t sub_10059F348(uint64_t a1, int a2, int a3, unint64_t a4, int *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  int v15;
  unsigned int v16;
  NSObject *v17;
  void **v18;
  void *__p[2];
  char v21;
  int v22;
  __int16 v23;
  _QWORD v24[2];
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1 + 280);
  v10 = *(_QWORD **)(a1 + 352);
  if (!v10)
    goto LABEL_26;
  v11 = (_QWORD *)(a1 + 352);
  do
  {
    v12 = v10[4];
    v13 = v12 >= a4;
    if (v12 >= a4)
      v14 = v10;
    else
      v14 = v10 + 1;
    if (v13)
      v11 = v10;
    v10 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 != (_QWORD *)(a1 + 352) && v11[4] <= a4)
  {
    v15 = *a5;
    v23 = *((_WORD *)a5 + 2);
    v22 = v15;
    v16 = *((unsigned __int8 *)a5 + 6);
    if (a3)
      operator delete();
    sub_100034264((uint64_t)v24);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v17 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a4, __p);
      *(_DWORD *)buf = 136446722;
      v18 = v21 >= 0 ? __p : (void **)__p[0];
      v26 = "interim";
      v27 = 1024;
      v28 = a2;
      v29 = 2082;
      v30 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Sending %{public}s notification for uidCounter %u to device %{public}s", buf, 0x1Cu);
      if (v21 < 0)
        operator delete(__p[0]);
    }
    LOBYTE(v31) = 12;
    LOWORD(v32) = a2;
    buf[0] = 0;
    sub_100043758(buf);
    sub_10014D148((uint64_t)&v22, v16, (uint64_t)&v31, 0);
    sub_10004339C(buf);
    sub_100043728(buf);
  }
  else
  {
LABEL_26:
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a4, buf);
      sub_1007087D0();
    }
  }
  return sub_100034234((uint64_t)v24);
}

void sub_10059F578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10059F5B0(uint64_t a1, int a2, int a3, unint64_t a4, int *a5)
{
  return sub_10059F348(a1 - 264, a2, a3, a4, a5);
}

uint64_t sub_10059F5B8(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  _QWORD v11[5];
  char v12;
  void *__p[2];
  char v14;
  unint64_t v15;
  uint8_t buf[4];
  void **v17;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v15 = v6;
  v7 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v6, __p);
    if (v14 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received 'get play status' request from device %{public}s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  v9 = *(_QWORD *)(*sub_10047396C(a1 + 344, &v15) + 8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10059F750;
  v11[3] = &unk_10093A010;
  v11[4] = v15;
  v12 = a3;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 32))(v9, v11);
}

_BYTE *sub_10059F750(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  NSObject *v9;
  char *v10;
  void **v11;
  void *__p[2];
  char v14;
  _DWORD v15[3];
  uint8_t buf[4];
  char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  void **v23;

  v15[1] = a4;
  v15[0] = a3;
  v15[2] = a5;
  v9 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_INFO))
  {
    v10 = a5 > 4 ? "unknown" : off_10093A488[a5];
    sub_10043E5F8(*(_QWORD *)(a1 + 32), __p);
    v11 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446978;
    v17 = v10;
    v18 = 1024;
    v19 = a4;
    v20 = 1024;
    v21 = a3;
    v22 = 2082;
    v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Sending current play status (%{public}s - %u of %ums) to device %{public}s", buf, 0x22u);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  buf[0] = 0;
  sub_100043758(buf);
  if (sub_10014D0A0(*(_QWORD *)(a1 + 32) + 128, *(unsigned __int8 *)(a1 + 40), (uint64_t)v15)
    && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
  {
    sub_10070881C();
  }
  return sub_100043728(buf);
}

void sub_10059F8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

void sub_10059F8FC(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  char v5;
  int v8;
  unint64_t v9;
  NSObject *v10;
  void **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  NSObject *v17;
  void **v18;
  void *__p[2];
  char v20;
  unint64_t v21;
  char *v22[2];
  uint8_t buf[4];
  _BYTE v24[14];

  v5 = a3;
  v22[0] = 0;
  v22[1] = 0;
  v8 = sub_10014D1A0(a2, a3, a4, v22);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v9 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v21 = v9;
  v10 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(v9, __p);
    v11 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v24 = a4;
    *(_WORD *)&v24[4] = 2082;
    *(_QWORD *)&v24[6] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Received 'continue' command for PDU 0x%x from device %{public}s", buf, 0x12u);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  if (v8 != 3304)
  {
    if (v8)
    {
      v17 = qword_100999840;
      if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v9, __p);
        v18 = v20 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)v24 = v18;
        *(_WORD *)&v24[8] = 1024;
        *(_DWORD *)&v24[10] = v8;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to continue response for device %{public}s - result was %{bluetooth:OI_STATUS}u", buf, 0x12u);
        if (v20 < 0)
        {
          v16 = (uint64_t *)__p[0];
LABEL_15:
          operator delete(v16);
        }
      }
    }
    else
    {
      __p[0] = &v21;
      v12 = sub_1002BBB54((uint64_t **)(a1 + 480), &v21, (uint64_t)&unk_100740F58, (uint64_t **)__p);
      LOBYTE(__p[0]) = v5;
      BYTE1(__p[0]) = a4;
      v13 = sub_1005A70D8((uint64_t)(v12 + 5), (unsigned __int8 *)__p);
      __p[0] = &v21;
      v14 = sub_1002BBB54((uint64_t **)(a1 + 480), &v21, (uint64_t)&unk_100740F58, (uint64_t **)__p);
      if (v14 + 6 != v13)
      {
        if (a4 == 32)
          sub_10059C310((uint64_t)v14, (char *)v13[5]);
        __p[0] = &v21;
        v15 = sub_1002BBB54((uint64_t **)(a1 + 480), &v21, (uint64_t)&unk_100740F58, (uint64_t **)__p);
        sub_1000040CC((uint64_t **)v15 + 5, v13);
        v16 = v13;
        goto LABEL_15;
      }
    }
  }
}

uint64_t sub_10059FBB4(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unint64_t v8;
  NSObject *v9;
  void **v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  void *__p[2];
  char v18;
  unint64_t v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  void **v23;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v19 = v8;
  v9 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(v8, __p);
    v10 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    v21 = a4;
    v22 = 2082;
    v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Received 'abort' command for PDU 0x%x from device %{public}s", buf, 0x12u);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  v11 = (uint64_t **)(a1 + 480);
  __p[0] = &v19;
  v12 = sub_1002BBB54(v11, &v19, (uint64_t)&unk_100740F58, (uint64_t **)__p);
  LOBYTE(__p[0]) = a3;
  BYTE1(__p[0]) = a4;
  v13 = sub_1005A70D8((uint64_t)(v12 + 5), (unsigned __int8 *)__p);
  __p[0] = &v19;
  v14 = sub_1002BBB54(v11, &v19, (uint64_t)&unk_100740F58, (uint64_t **)__p);
  if (v14 + 6 != v13)
  {
    if (a4 == 32)
      sub_10059C310((uint64_t)v14, (char *)v13[5]);
    __p[0] = &v19;
    v15 = sub_1002BBB54(v11, &v19, (uint64_t)&unk_100740F58, (uint64_t **)__p);
    sub_1000040CC((uint64_t **)v15 + 5, v13);
    operator delete(v13);
  }
  return sub_10014BD40(a2, a3, 65, 0);
}

uint64_t sub_10059FDD0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v8;
  NSObject *v9;
  void **v10;
  uint64_t v11;
  _QWORD v13[6];
  char v14;
  void *__p[2];
  char v16;
  unint64_t v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  void **v21;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v17 = v8;
  v9 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v8, __p);
    if (v16 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    v19 = a4;
    v20 = 2082;
    v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'SetAddressedPlayer' request (id - %u) from device %{public}s", buf, 0x12u);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  v11 = *(_QWORD *)(*sub_10047396C(a1 + 344, &v17) + 8);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10059FF7C;
  v13[3] = &unk_10093A030;
  v13[4] = a1;
  v13[5] = v17;
  v14 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v11 + 104))(v11, a4, v13);
}

_BYTE *sub_10059FF7C(uint64_t a1, int a2)
{
  NSObject *v4;
  void **v5;
  char v6;
  void *__p[2];
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  void **v16;
  uint64_t v17;

  v17 = 0x1000060581900;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v4 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 40), __p);
    v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    v14 = a2;
    v15 = 2082;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'SetAddressedPlayer' response (result - %02x) to device %{public}s", buf, 0x12u);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  HIBYTE(v17) = a2;
  if (a2 == 4)
    v6 = 9;
  else
    v6 = 10;
  LOBYTE(v10) = v6;
  *(_WORD *)((char *)&v10 + 1) = 9;
  BYTE3(v10) = 0;
  v11 = &v17;
  LOWORD(v12) = 8;
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  if (sub_10014F6A0(*(_QWORD *)(a1 + 40) + 128, *(unsigned __int8 *)(a1 + 48), (unsigned __int8 *)&v10)
    && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
  {
    sub_10070887C();
  }
  return sub_100043728(__p);
}

void sub_1005A0100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_100043728(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A011C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v8;
  NSObject *v9;
  void **v10;
  uint64_t v11;
  _QWORD v13[5];
  char v14;
  void *__p[2];
  char v16;
  unint64_t v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  void **v21;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v17 = v8;
  v9 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v8, __p);
    if (v16 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    v19 = a4;
    v20 = 2082;
    v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'SetBrowsedPlayer' request (id - %u) from device %{public}s", buf, 0x12u);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  v11 = *(_QWORD *)(*sub_10047396C(a1 + 344, &v17) + 8);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1005A02C8;
  v13[3] = &unk_10093A050;
  v13[4] = v17;
  v14 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v11 + 112))(v11, a4, v13);
}

_BYTE *sub_1005A02C8(uint64_t a1, int a2, __int16 a3, int a4, uint64_t a5)
{
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL8 v14;
  unsigned __int16 v15;
  void **v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char *v24;
  int v25;
  char *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v37[2];
  char v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  void **v46;

  if (a2 == 4)
  {
    v10 = *(_QWORD *)(a5 + 8);
    v11 = 13;
    while (v10 != a5)
    {
      if (*(char *)(v10 + 39) < 0)
        v12 = *(_QWORD *)(v10 + 24);
      else
        LOWORD(v12) = *(unsigned __int8 *)(v10 + 39);
      v11 += v12 + 2;
      v10 = *(_QWORD *)(v10 + 8);
    }
  }
  else
  {
    v11 = 4;
  }
  v13 = qword_100999840;
  v14 = os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 32), v37);
    v15 = v11;
    if (v38 >= 0)
      v16 = v37;
    else
      v16 = (void **)v37[0];
    *(_DWORD *)buf = 67109890;
    v40 = a2;
    v41 = 1024;
    v42 = a4;
    v43 = 1024;
    v44 = v11;
    v45 = 2082;
    v46 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Sending 'SetBrowsedPlayer' response (result - %02x, nbItems - %u, length - %u) to device %{public}s", buf, 0x1Eu);
    if (v38 < 0)
      operator delete(v37[0]);
  }
  else
  {
    v15 = v11;
  }
  __chkstk_darwin(v14, v11);
  v18 = (char *)&v37[-1] - v17;
  bzero((char *)&v37[-1] - v17, v19);
  *v18 = 112;
  v18[2] = v15 - 3;
  v18[1] = (unsigned __int16)(v15 - 3) >> 8;
  v18[3] = a2;
  if (a2 == 4)
  {
    v18[5] = a3;
    v18[4] = HIBYTE(a3);
    v18[9] = a4;
    v18[8] = BYTE1(a4);
    v18[7] = BYTE2(a4);
    v18[6] = HIBYTE(a4);
    *((_WORD *)v18 + 5) = 27136;
    v20 = *(_QWORD *)(a5 + 8);
    v18[12] = *(_QWORD *)(a5 + 16);
    v21 = 13;
    while (v20 != a5)
    {
      v22 = *(char *)(v20 + 39);
      if (v22 < 0)
      {
        v26 = &v18[(unsigned __int16)v21];
        v26[1] = *(_QWORD *)(v20 + 24);
        *v26 = BYTE1(*(_QWORD *)(v20 + 24));
        v25 = v21 + 2;
        memcpy(&v18[(unsigned __int16)(v21 + 2)], *(const void **)(v20 + 16), *(_QWORD *)(v20 + 24));
        v23 = *(_QWORD *)(v20 + 24);
      }
      else
      {
        LODWORD(v23) = *(unsigned __int8 *)(v20 + 39);
        v24 = &v18[(unsigned __int16)v21];
        v24[1] = v22;
        *v24 = 0;
        v25 = v21 + 2;
        memcpy(&v18[(unsigned __int16)(v21 + 2)], (const void *)(v20 + 16), v22);
      }
      v21 = v25 + v23;
      v20 = *(_QWORD *)(v20 + 8);
    }
  }
  else
  {
    LOWORD(v21) = 4;
  }
  if ((unsigned __int16)v21 != v11)
  {
    v27 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_FAULT))
      sub_10070893C(v27, v28, v29, v30, v31, v32, v33, v34);
  }
  buf[0] = 0;
  sub_100043758(buf);
  if (sub_10014F6E4(*(_QWORD *)(a1 + 32) + 128, *(unsigned __int8 *)(a1 + 40), v18, v11)
    && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
  {
    sub_1007088DC();
  }
  return sub_100043728(buf);
}

void sub_1005A05B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100043728((_BYTE *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_1005A05D0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5, uint64_t *a6)
{
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  void **v16;
  uint64_t v17;
  _QWORD v19[5];
  char v20;
  void *__p[2];
  char v22;
  unint64_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  void **v29;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v25) = *(_WORD *)(a2 + 4);
  v12 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v23 = v12;
  v13 = *a6;
  v14 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    if (a5)
      v15 = "down";
    else
      v15 = "up";
    sub_10043E5F8(v12, __p);
    if (v22 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    v25 = v15;
    v26 = 1024;
    v27 = a4;
    v28 = 2082;
    v29 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received 'ChangePath(%s)' request (uidCounter - %u) from device %{public}s", buf, 0x1Cu);
    if (v22 < 0)
      operator delete(__p[0]);
  }
  v17 = *(_QWORD *)(*sub_10047396C(a1 + 344, &v23) + 8);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1005A07CC;
  v19[3] = &unk_10093A070;
  v19[4] = v23;
  v20 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, BOOL, uint64_t, _QWORD *))(*(_QWORD *)v17 + 120))(v17, a4, a5 == 0, v13, v19);
}

_BYTE *sub_1005A07CC(uint64_t a1, int a2, unsigned int a3)
{
  size_t v6;
  NSObject *v7;
  _BOOL8 v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  char *v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v24[2];
  char v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  void **v31;

  if (a2 == 4)
    v6 = 8;
  else
    v6 = 4;
  v7 = qword_100999840;
  v8 = os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 32), v24);
    v10 = v25 >= 0 ? v24 : (void **)v24[0];
    *(_DWORD *)buf = 67109634;
    v27 = a2;
    v28 = 1024;
    v29 = a3;
    v30 = 2082;
    v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending 'ChangePath' response (result - %02x, nbItems - %u) to device %{public}s", buf, 0x18u);
    if (v25 < 0)
      operator delete(v24[0]);
  }
  __chkstk_darwin(v8, v9);
  v12 = (char *)&v24[-1] - v11;
  bzero((char *)&v24[-1] - v11, v6);
  *(_WORD *)v12 = 114;
  v12[2] = v6 - 3;
  v12[3] = a2;
  if (a2 == 4)
  {
    *((_DWORD *)v12 + 1) = bswap32(a3);
    v13 = 8;
  }
  else
  {
    v13 = 4;
  }
  if (v13 != (_DWORD)v6)
  {
    v14 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_FAULT))
      sub_10070893C(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  buf[0] = 0;
  sub_100043758(buf);
  if (sub_10014F6E4(*(_QWORD *)(a1 + 32) + 128, *(unsigned __int8 *)(a1 + 40), v12, v6)
    && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
  {
    sub_1007089AC();
  }
  return sub_100043728(buf);
}

void sub_1005A09BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100043728((_BYTE *)(v1 - 96));
  _Unwind_Resume(a1);
}

_QWORD *sub_1005A09D8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  unint64_t v14;
  NSObject *v15;
  char *v16;
  void **v17;
  uint64_t v18;
  _QWORD v22[6];
  char v23;
  void *__p[2];
  char v25;
  unint64_t v26;
  uint8_t buf[4];
  char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  void **v34;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v28) = *(_WORD *)(a2 + 4);
  v14 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v26 = v14;
  v15 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    v16 = a4 > 3 ? "Unknown" : off_10093A4F0[(char)a4];
    sub_10043E5F8(v14, __p);
    v17 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    v28 = v16;
    v29 = 1024;
    v30 = a5;
    v31 = 1024;
    v32 = a6;
    v33 = 2082;
    v34 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Received 'GetFolderItems(%s)' request (startItem - %u, endItem - %u) from device %{public}s", buf, 0x22u);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  if (a4 > 3)
  {
    *(_DWORD *)buf = 167837809;
    return (_QWORD *)sub_10014F6E4(a2, a3, buf, 4uLL);
  }
  else
  {
    v18 = *(_QWORD *)(*sub_10047396C(a1 + 344, &v26) + 8);
    sub_1005A0C4C(a8, a7, buf);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1005A0E44;
    v22[3] = &unk_10093A090;
    v22[4] = a1;
    v22[5] = v26;
    v23 = a3;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *, _QWORD *))(*(_QWORD *)v18 + 128))(v18, a4, a5, a6, buf, v22);
    return sub_10002074C(buf);
  }
}

void sub_1005A0C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_10002074C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1005A0C4C(uint64_t a1@<X1>, unsigned int a2@<W2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;

  *a3 = a3;
  a3[1] = a3;
  a3[2] = 0;
  if (a2)
  {
    if (a1)
    {
      v4 = 0;
      v5 = (unsigned __int8 *)(a1 + 3);
      v6 = a3;
      v7 = a2;
      do
      {
        v8 = *v5;
        v9 = *(v5 - 1);
        v10 = *(v5 - 2);
        v11 = *(v5 - 3);
        v12 = operator new(0x18uLL);
        v12[4] = v8 | (v9 << 8) | (v10 << 16) | (v11 << 24);
        v5 += 4;
        *(_QWORD *)v12 = v6;
        *((_QWORD *)v12 + 1) = a3;
        *((_QWORD *)v6 + 1) = v12;
        *a3 = v12;
        a3[2] = ++v4;
        v6 = v12;
      }
      while (v7 != v4);
    }
  }
  else
  {
    v13 = operator new(0x18uLL);
    v13[4] = 1;
    *(_QWORD *)v13 = a3;
    *((_QWORD *)v13 + 1) = a3;
    *a3 = v13;
    a3[1] = v13;
    a3[2] = 1;
    v14 = operator new(0x18uLL);
    v14[4] = 2;
    *(_QWORD *)v14 = v13;
    *((_QWORD *)v14 + 1) = a3;
    *((_QWORD *)v13 + 1) = v14;
    *a3 = v14;
    a3[2] = 2;
    v15 = operator new(0x18uLL);
    v15[4] = 3;
    *(_QWORD *)v15 = v14;
    *((_QWORD *)v15 + 1) = a3;
    *((_QWORD *)v14 + 1) = v15;
    *a3 = v15;
    a3[2] = 3;
    v16 = operator new(0x18uLL);
    v16[4] = 4;
    *(_QWORD *)v16 = v15;
    *((_QWORD *)v16 + 1) = a3;
    *((_QWORD *)v15 + 1) = v16;
    *a3 = v16;
    a3[2] = 4;
    v17 = operator new(0x18uLL);
    v17[4] = 5;
    *(_QWORD *)v17 = v16;
    *((_QWORD *)v17 + 1) = a3;
    *((_QWORD *)v16 + 1) = v17;
    *a3 = v17;
    a3[2] = 5;
    v18 = operator new(0x18uLL);
    v18[4] = 6;
    *(_QWORD *)v18 = v17;
    *((_QWORD *)v18 + 1) = a3;
    *((_QWORD *)v17 + 1) = v18;
    *a3 = v18;
    a3[2] = 6;
    v19 = operator new(0x18uLL);
    v19[4] = 7;
    *(_QWORD *)v19 = v18;
    *((_QWORD *)v19 + 1) = a3;
    *((_QWORD *)v18 + 1) = v19;
    *a3 = v19;
    a3[2] = 7;
    v20 = operator new(0x18uLL);
    v20[4] = 8;
    *(_QWORD *)v20 = v19;
    *((_QWORD *)v20 + 1) = a3;
    *((_QWORD *)v19 + 1) = v20;
    *a3 = v20;
    a3[2] = 8;
  }
}

void sub_1005A0E10(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10002074C(v1);
  _Unwind_Resume(a1);
}

void sub_1005A0E44(uint64_t a1, int a2, __int16 a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  NSObject *v17;
  uint64_t v18;
  unsigned __int16 v19;
  unsigned int v20;
  unsigned __int16 v21;
  __int16 v22;
  unsigned __int16 v23;
  NSObject *v24;
  _BOOL8 v25;
  __int16 v26;
  _BYTE *v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  __int128 v31;
  unsigned __int16 v32;
  NSObject *v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  unsigned __int16 v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  __int128 v56;
  _BYTE v57[12];
  char v58;
  uint8_t buf[16];
  _QWORD v60[3];

  v4 = *(_QWORD *)(a1 + 32);
  v5 = (uint64_t *)(a1 + 40);
  v6 = *(_QWORD **)(v4 + 512);
  if (!v6)
    goto LABEL_12;
  v7 = a4;
  v11 = (_QWORD *)(v4 + 512);
  v12 = *v5;
  v13 = (_QWORD *)(v4 + 512);
  do
  {
    v14 = v6[4];
    v15 = v14 >= v12;
    if (v14 >= v12)
      v16 = v6;
    else
      v16 = v6 + 1;
    if (v15)
      v13 = v6;
    v6 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 != v11 && v12 >= v13[4])
  {
    if (a2 == 4)
    {
      v18 = *(_QWORD *)(a4 + 8);
      if (v18 == a4)
      {
        v19 = 0;
        LOWORD(v20) = 8;
        v18 = a4;
      }
      else
      {
        v19 = 0;
        v20 = *((unsigned __int16 *)v13 + 20);
        v21 = 8;
        while (1)
        {
          v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 16) + 16))(*(_QWORD *)(v18 + 16));
          v23 = v22 + v21;
          if (v18 != *(_QWORD *)(v7 + 8) && v20 < v23)
            break;
          ++v19;
          v18 = *(_QWORD *)(v18 + 8);
          v21 += v22;
          if (v18 == v7)
          {
            v18 = v7;
            LOWORD(v20) = v23;
            goto LABEL_27;
          }
        }
        if (v20 >= v21)
        {
          LOWORD(v20) = v21;
        }
        else if (v19 == 1)
        {
          v19 = 1;
        }
        else
        {
          v47 = qword_100999840;
          if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_FAULT))
            sub_100708B68(v47, v48, v49, v50, v51, v52, v53, v54);
        }
      }
    }
    else
    {
      v18 = 0;
      v19 = 0;
      LOWORD(v20) = 4;
    }
LABEL_27:
    v24 = qword_100999840;
    v25 = os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT);
    if (v25)
    {
      sub_10043E5F8(*v5, v57);
      v26 = v20;
      if (v58 >= 0)
        v27 = v57;
      else
        v27 = *(_BYTE **)v57;
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = a2;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v19;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v60[0]) = (unsigned __int16)v20;
      WORD2(v60[0]) = 2082;
      *(_QWORD *)((char *)v60 + 6) = v27;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Sending 'GetFolderItems' response (result - %02x, nbItems - %u, length - %u) to device %{public}s", buf, 0x1Eu);
      if (v58 < 0)
        operator delete(*(void **)v57);
    }
    else
    {
      v26 = v20;
    }
    v55[1] = v55;
    __chkstk_darwin(v25, (unsigned __int16)v20);
    v29 = (char *)v55 - v28;
    bzero((char *)v55 - v28, v30);
    *v29 = 113;
    v29[2] = v26 - 3;
    v29[1] = (unsigned __int16)(v26 - 3) >> 8;
    v29[3] = a2;
    if (a2 == 4)
    {
      v29[5] = a3;
      v29[4] = HIBYTE(a3);
      v29[7] = v19;
      v29[6] = HIBYTE(v19);
      v32 = 8;
      *(_QWORD *)&v31 = 136315138;
      v56 = v31;
      do
      {
        v7 = *(_QWORD *)(v7 + 8);
        if (v7 == v18)
          break;
        v33 = qword_100999840;
        if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
        {
          v34 = *(_QWORD *)(v7 + 16);
          if (*(char *)(v34 + 47) < 0)
          {
            sub_10003430C(buf, *(void **)(v34 + 24), *(_QWORD *)(v34 + 32));
          }
          else
          {
            *(_OWORD *)buf = *(_OWORD *)(v34 + 24);
            v60[0] = *(_QWORD *)(v34 + 40);
          }
          v35 = buf;
          if (v60[0] < 0)
            v35 = *(uint8_t **)buf;
          *(_DWORD *)v57 = v56;
          *(_QWORD *)&v57[4] = v35;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Sending item \"%s\"", v57, 0xCu);
          if (SHIBYTE(v60[0]) < 0)
            operator delete(*(void **)buf);
        }
        v36 = *(_QWORD *)(v7 + 16);
        v37 = (unsigned __int16)v20 >= v32 ? v20 - v32 : 0;
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v36 + 24))(*(_QWORD *)(v7 + 16)) > v37)
          break;
        v38 = (*(uint64_t (**)(uint64_t, char *, _QWORD))(*(_QWORD *)v36 + 32))(v36, &v29[v32], v37);
        v32 += v38;
      }
      while (v38);
    }
    else
    {
      v32 = 4;
    }
    if (v32 > (unsigned __int16)v20)
    {
      v39 = qword_100999840;
      if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_FAULT))
        sub_100708AF8(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    buf[0] = 0;
    sub_100043758(buf);
    if (sub_10014F6E4(*(_QWORD *)(a1 + 40) + 128, *(unsigned __int8 *)(a1 + 48), v29, v32)
      && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_100708A98();
    }
    sub_100043728(buf);
  }
  else
  {
LABEL_12:
    v17 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      sub_100708A0C(v5, v17);
  }
}

void sub_1005A12D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100043728((_BYTE *)(v1 - 128));
  _Unwind_Resume(a1);
}

_QWORD *sub_1005A12EC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  unint64_t v14;
  NSObject *v15;
  char *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v23[6];
  char v24;
  void *__p[2];
  char v26;
  unint64_t v27;
  uint8_t buf[4];
  char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  void **v33;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v29) = *(_WORD *)(a2 + 4);
  v14 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v27 = v14;
  v15 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    v16 = a4 > 3 ? "Unknown" : off_10093A4F0[(char)a4];
    sub_10043E5F8(v14, __p);
    v17 = v26 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    v29 = v16;
    v30 = 1024;
    v31 = a6;
    v32 = 2082;
    v33 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Received 'GetItemAttributes(%s)' request (uidCounter - %u) from device %{public}s", buf, 0x1Cu);
    if (v26 < 0)
      operator delete(__p[0]);
  }
  if ((a4 - 1) > 2)
  {
    *(_DWORD *)buf = 167837811;
    return (_QWORD *)sub_10014F6E4(a2, a3, buf, 4uLL);
  }
  else
  {
    v18 = *a5;
    v19 = *(_QWORD *)(*sub_10047396C(a1 + 344, &v27) + 8);
    sub_1005A0C4C(a8, a7, buf);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_1005A1560;
    v23[3] = &unk_10093A0B0;
    v23[4] = a1;
    v23[5] = v27;
    v24 = a3;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *, _QWORD *))(*(_QWORD *)v19 + 136))(v19, a4, v18, a6, buf, v23);
    return sub_10002074C(buf);
  }
}

void sub_1005A1544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_10002074C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1005A1560(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  NSObject *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _BOOL8 v23;
  __int16 v24;
  _BYTE *v25;
  uint64_t v26;
  char *v27;
  size_t v28;
  __int128 v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  int v33;
  NSObject *v34;
  unsigned int v35;
  const char *v36;
  __int128 v37;
  uint8_t *v38;
  unsigned int v39;
  int v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  __int128 v58;
  uint64_t v59;
  _BYTE v60[12];
  __int16 v61;
  uint8_t *v62;
  char v63;
  uint8_t buf[16];
  _QWORD v65[3];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (uint64_t *)(a1 + 40);
  v5 = *(_QWORD **)(v3 + 512);
  if (!v5)
    goto LABEL_12;
  v9 = *v4;
  v10 = (_QWORD *)(v3 + 512);
  do
  {
    v11 = v5[4];
    v12 = v11 >= v9;
    if (v11 >= v9)
      v13 = v5;
    else
      v13 = v5 + 1;
    if (v12)
      v10 = v5;
    v5 = (_QWORD *)*v13;
  }
  while (*v13);
  if (v10 == (_QWORD *)(v3 + 512) || v9 < v10[4])
  {
LABEL_12:
    v14 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      sub_100708BD8(v4, v14);
    return;
  }
  if (a2 != 4)
  {
    v19 = 0;
    v16 = 0;
    v17 = 4;
    goto LABEL_33;
  }
  v15 = *(_QWORD *)(a3 + 8);
  if (v15 == a3)
  {
    v16 = 0;
    v17 = 5;
    v19 = a3;
    goto LABEL_33;
  }
  v16 = 0;
  v17 = *((unsigned __int16 *)v10 + 20);
  v18 = 5;
  v19 = *(_QWORD *)(a3 + 8);
  while (1)
  {
    v20 = *(_QWORD *)(v19 + 16);
    if (*(_DWORD *)(v20 + 4) == 8 && v9 != *(_QWORD *)(v3 + 528))
      goto LABEL_25;
    if (*(char *)(v20 + 31) < 0)
      v20 = *(_QWORD *)(v20 + 16);
    else
      LODWORD(v20) = *(unsigned __int8 *)(v20 + 31);
    v21 = (v18 + v20 + 8);
    if (v19 != v15 && v17 < (unsigned __int16)v21)
      break;
    ++v16;
    v18 = v21;
LABEL_25:
    v19 = *(_QWORD *)(v19 + 8);
    if (v19 == a3)
    {
      v19 = a3;
LABEL_32:
      v17 = v18;
      goto LABEL_33;
    }
  }
  if (v17 >= (unsigned __int16)v18)
    goto LABEL_32;
  if (v16 == 1)
  {
    v16 = 1;
  }
  else
  {
    v49 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_FAULT))
      sub_100708CC4(v49, v50, v51, v52, v53, v54, v55, v56);
  }
LABEL_33:
  v22 = qword_100999840;
  v23 = os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT);
  v59 = v17;
  if (v23)
  {
    sub_10043E5F8(*v4, v60);
    v24 = v59;
    if (v63 >= 0)
      v25 = v60;
    else
      v25 = *(_BYTE **)v60;
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v16;
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v65[0]) = (unsigned __int16)v59;
    WORD2(v65[0]) = 2082;
    *(_QWORD *)((char *)v65 + 6) = v25;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Sending 'GetItemAttributes' response (result - %02x, nbAttributes - %u, length - %u) to device %{public}s", buf, 0x1Eu);
    if (v63 < 0)
      operator delete(*(void **)v60);
    LOWORD(v17) = v59;
  }
  else
  {
    v24 = v17;
  }
  v57[1] = v57;
  __chkstk_darwin(v23, (unsigned __int16)v17);
  v27 = (char *)v57 - v26;
  bzero((char *)v57 - v26, v28);
  *v27 = 115;
  v27[2] = v24 - 3;
  v27[1] = (unsigned __int16)(v24 - 3) >> 8;
  v27[3] = a2;
  if (a2 == 4)
  {
    v27[4] = v16;
    v30 = *(_QWORD *)(a3 + 8);
    v31 = 5;
    if (v30 != v19)
    {
      *(_QWORD *)&v29 = 136315394;
      v58 = v29;
      do
      {
        v32 = *(_QWORD *)(v30 + 16);
        v33 = *(_DWORD *)(v32 + 4);
        if (v33 != 8 || *v4 == *(_QWORD *)(v3 + 528))
        {
          v34 = qword_100999840;
          if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
          {
            v35 = v33 - 1;
            v36 = "Unknown";
            if (v35 <= 7)
              v36 = off_10093A4B0[v35];
            if (*(char *)(v32 + 31) < 0)
            {
              sub_10003430C(buf, *(void **)(v32 + 8), *(_QWORD *)(v32 + 16));
            }
            else
            {
              v37 = *(_OWORD *)(v32 + 8);
              v65[0] = *(_QWORD *)(v32 + 24);
              *(_OWORD *)buf = v37;
            }
            v38 = buf;
            if (v65[0] < 0)
              v38 = *(uint8_t **)buf;
            *(_DWORD *)v60 = v58;
            *(_QWORD *)&v60[4] = v36;
            v61 = 2080;
            v62 = v38;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Sending '%s' attribute: \"%s\"", v60, 0x16u);
            if (SHIBYTE(v65[0]) < 0)
              operator delete(*(void **)buf);
            v32 = *(_QWORD *)(v30 + 16);
          }
          v39 = (unsigned __int16)v59 >= v31 ? (unsigned __int16)v59 - v31 : 0;
          v40 = sub_100359AC0(v32, (uint64_t)&v27[v31], v39);
          v31 += v40;
          if (!v40)
            break;
        }
        v30 = *(_QWORD *)(v30 + 8);
      }
      while (v30 != v19);
    }
  }
  else
  {
    v31 = 4;
  }
  if (v31 > (unsigned __int16)v59)
  {
    v41 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_FAULT))
      sub_100708AF8(v41, v42, v43, v44, v45, v46, v47, v48);
  }
  buf[0] = 0;
  sub_100043758(buf);
  if (sub_10014F6E4(*(_QWORD *)(a1 + 40) + 128, *(unsigned __int8 *)(a1 + 48), v27, v31)
    && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
  {
    sub_100708C64();
  }
  sub_100043728(buf);
}

void sub_1005A1A30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100043728((_BYTE *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_1005A1A4C(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, void *a6)
{
  unint64_t v12;
  NSObject *v13;
  int v14;
  void **v15;
  void **v16;
  void **v17;
  uint64_t v18;
  _QWORD v19[5];
  char v20;
  void *__p[2];
  char v22;
  void *__dst[2];
  uint64_t v24;
  unint64_t v25;
  uint8_t buf[4];
  void **v27;
  __int16 v28;
  void **v29;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(__dst[0]) = *(_DWORD *)a2;
  WORD2(__dst[0]) = *(_WORD *)(a2 + 4);
  v12 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__dst, 1);
  v24 = 0;
  v25 = v12;
  __dst[0] = 0;
  __dst[1] = 0;
  sub_1002D236C(__dst, a6, a5);
  v13 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    v14 = SHIBYTE(v24);
    v15 = (void **)__dst[0];
    sub_10043E5F8(v12, __p);
    v16 = __dst;
    if (v14 < 0)
      v16 = v15;
    if (v22 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v27 = v16;
    v28 = 2082;
    v29 = v17;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received 'Search(\"%s\")' request from device %{public}s", buf, 0x16u);
    if (v22 < 0)
      operator delete(__p[0]);
  }
  if (a4 == 106)
  {
    v18 = *(_QWORD *)(*sub_10047396C(a1 + 344, &v25) + 8);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1005A1CA0;
    v19[3] = &unk_10093A0D0;
    v19[4] = v25;
    v20 = a3;
    (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v18 + 144))(v18, __dst, v19);
  }
  else
  {
    LODWORD(__p[0]) = 16842880;
    sub_10014F6E4(a2, a3, __p, 4uLL);
  }
  if (SHIBYTE(v24) < 0)
    operator delete(__dst[0]);
}

void sub_1005A1C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1005A1CA0(uint64_t a1, int a2, __int16 a3, int a4)
{
  char v5;
  size_t v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  char *v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v26[2];
  char v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  void **v33;

  v5 = HIBYTE(a3);
  if (a2 == 4)
    v8 = 10;
  else
    v8 = 4;
  v9 = qword_100999840;
  v10 = os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 32), v26);
    v12 = v27 >= 0 ? v26 : (void **)v26[0];
    *(_DWORD *)buf = 67109634;
    v29 = a2;
    v30 = 1024;
    v31 = a4;
    v32 = 2082;
    v33 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending 'Search' response (result - %02x, nbItems - %u) to device %{public}s", buf, 0x18u);
    if (v27 < 0)
      operator delete(v26[0]);
  }
  __chkstk_darwin(v10, v11);
  v14 = (char *)&v26[-1] - v13;
  bzero((char *)&v26[-1] - v13, v8);
  *(_WORD *)v14 = 128;
  v14[2] = v8 - 3;
  v14[3] = a2;
  if (a2 == 4)
  {
    v14[5] = v5;
    v14[4] = 0;
    v14[9] = a4;
    v14[8] = BYTE1(a4);
    v14[7] = BYTE2(a4);
    v15 = 10;
    v14[6] = HIBYTE(a4);
  }
  else
  {
    v15 = 4;
  }
  if (v15 != (_DWORD)v8)
  {
    v16 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_FAULT))
      sub_10070893C(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  buf[0] = 0;
  sub_100043758(buf);
  if (sub_10014F6E4(*(_QWORD *)(a1 + 32) + 128, *(unsigned __int8 *)(a1 + 40), v14, v8)
    && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
  {
    sub_100708D34();
  }
  return sub_100043728(buf);
}

void sub_1005A1EB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100043728((_BYTE *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_1005A1ED0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8;
  NSObject *v9;
  char *v10;
  void **v11;
  uint64_t v12;
  _QWORD v14[5];
  char v15;
  void *__p[2];
  char v17;
  unint64_t v18;
  uint8_t buf[4];
  char *v20;
  __int16 v21;
  void **v22;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v18 = v8;
  v9 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    v10 = a4 > 3 ? "Unknown" : off_10093A4F0[(char)a4];
    sub_10043E5F8(v8, __p);
    v11 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v20 = v10;
    v21 = 2082;
    v22 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'GetTotalNumberOfItems(%s)' request from device %{public}s", buf, 0x16u);
    if (v17 < 0)
      operator delete(__p[0]);
  }
  if (a4 > 3)
  {
    LODWORD(__p[0]) = 167837813;
    return sub_10014F6E4(a2, a3, __p, 4uLL);
  }
  else
  {
    v12 = *(_QWORD *)(*sub_10047396C(a1 + 344, &v18) + 8);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1005A20D4;
    v14[3] = &unk_10093A0D0;
    v14[4] = v18;
    v15 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v12 + 152))(v12, a4, v14);
  }
}

_BYTE *sub_1005A20D4(uint64_t a1, int a2, __int16 a3, int a4)
{
  char v5;
  size_t v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  char *v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v26[2];
  char v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  void **v33;

  v5 = HIBYTE(a3);
  if (a2 == 4)
    v8 = 10;
  else
    v8 = 4;
  v9 = qword_100999840;
  v10 = os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 32), v26);
    v12 = v27 >= 0 ? v26 : (void **)v26[0];
    *(_DWORD *)buf = 67109634;
    v29 = a2;
    v30 = 1024;
    v31 = a4;
    v32 = 2082;
    v33 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending 'GetTotalNumberOfItems' response (result - %02x, nbItems - %u) to device %{public}s", buf, 0x18u);
    if (v27 < 0)
      operator delete(v26[0]);
  }
  __chkstk_darwin(v10, v11);
  v14 = (char *)&v26[-1] - v13;
  bzero((char *)&v26[-1] - v13, v8);
  *(_WORD *)v14 = 117;
  v14[2] = v8 - 3;
  v14[3] = a2;
  if (a2 == 4)
  {
    v14[5] = v5;
    v14[4] = 0;
    v14[9] = a4;
    v14[8] = BYTE1(a4);
    v14[7] = BYTE2(a4);
    v15 = 10;
    v14[6] = HIBYTE(a4);
  }
  else
  {
    v15 = 4;
  }
  if (v15 != (_DWORD)v8)
  {
    v16 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_FAULT))
      sub_10070893C(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  buf[0] = 0;
  sub_100043758(buf);
  if (sub_10014F6E4(*(_QWORD *)(a1 + 32) + 128, *(unsigned __int8 *)(a1 + 40), v14, v8)
    && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
  {
    sub_100708D94();
  }
  return sub_100043728(buf);
}

void sub_1005A22E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100043728((_BYTE *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_1005A2304(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  unint64_t v12;
  NSObject *v13;
  char *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[6];
  char v20;
  unint64_t v21;
  void *__p[2];
  char v23;
  _BYTE buf[28];

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)&buf[4] = *(_WORD *)(a2 + 4);
  v12 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v21 = v12;
  v13 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    v14 = a4 > 3 ? "Unknown" : off_10093A4F0[(char)a4];
    sub_10043E5F8(v12, __p);
    v15 = v23 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a6;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received 'PlayItem(%s)' request (uidCounter - %u) from device %{public}s", buf, 0x1Cu);
    if (v23 < 0)
      operator delete(__p[0]);
  }
  if ((a4 - 1) > 2)
  {
    __p[0] = (void *)0xA01000074581900;
    *(_QWORD *)buf = 2314;
    *(_QWORD *)&buf[8] = __p;
    *(_QWORD *)&buf[16] = 8;
    return sub_10014F6A0(a2, a3, buf);
  }
  else
  {
    v16 = *a5;
    v17 = *(_QWORD *)(*sub_10047396C(a1 + 344, &v21) + 8);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1005A2554;
    v19[3] = &unk_10093A030;
    v19[4] = a1;
    v19[5] = v21;
    v20 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v17 + 160))(v17, a4, v16, a6, v19);
  }
}

_BYTE *sub_1005A2554(uint64_t a1, int a2)
{
  NSObject *v4;
  void **v5;
  char v6;
  void *__p[2];
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  void **v16;
  uint64_t v17;

  v17 = 0x1000074581900;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v4 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(*(_QWORD *)(a1 + 40), __p);
    v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    v14 = a2;
    v15 = 2082;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'play item' response (result - %02x) to device %{public}s", buf, 0x12u);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  HIBYTE(v17) = a2;
  if (a2 == 4)
    v6 = 9;
  else
    v6 = 10;
  LOBYTE(v10) = v6;
  *(_WORD *)((char *)&v10 + 1) = 9;
  BYTE3(v10) = 0;
  v11 = &v17;
  LOWORD(v12) = 8;
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  if (sub_10014F6A0(*(_QWORD *)(a1 + 40) + 128, *(unsigned __int8 *)(a1 + 48), (unsigned __int8 *)&v10)
    && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
  {
    sub_100708DF4();
  }
  return sub_100043728(__p);
}

void sub_1005A26D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_100043728(&a9);
  _Unwind_Resume(a1);
}

void sub_1005A26F4(uint64_t a1, uint64_t a2, __int16 a3, char *a4)
{
  unint64_t v8;
  NSObject *v9;
  int v10;
  void **v11;
  void **v12;
  void **v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[5];
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  __int16 v24;
  void *__p[2];
  char v26;
  void *v27[2];
  uint64_t v28;
  unint64_t v29;
  _BYTE buf[22];

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(v27[0]) = *(_DWORD *)a2;
  WORD2(v27[0]) = *(_WORD *)(a2 + 4);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)v27, 1);
  v28 = 0;
  v29 = v8;
  v27[0] = 0;
  v27[1] = 0;
  sub_100091AE8(v27, a4);
  v9 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    v10 = SHIBYTE(v28);
    v11 = (void **)v27[0];
    sub_10043E5F8(v8, __p);
    v12 = v27;
    if (v10 < 0)
      v12 = v11;
    if (v26 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'GetImageProperties(%s)' request from device %{public}s", buf, 0x16u);
    if (v26 < 0)
      operator delete(__p[0]);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_10003415C((uint64_t)buf, a1 + 280);
  v14 = *(_QWORD **)(a1 + 352);
  if (!v14)
    goto LABEL_33;
  v15 = (_QWORD *)(a1 + 352);
  do
  {
    v16 = v14[4];
    v17 = v16 >= v8;
    if (v16 >= v8)
      v18 = v14;
    else
      v18 = v14 + 1;
    if (v17)
      v15 = v14;
    v14 = (_QWORD *)*v18;
  }
  while (*v18);
  if (v15 != (_QWORD *)(a1 + 352) && v8 >= v15[4])
  {
    v19 = *(_QWORD *)(*sub_10047396C(a1 + 344, &v29) + 8);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3321888768;
    v20[2] = sub_1005A2A0C;
    v20[3] = &unk_10093A0F0;
    v20[4] = a1;
    if (SHIBYTE(v28) < 0)
    {
      sub_10003430C(&v21, v27[0], (unint64_t)v27[1]);
    }
    else
    {
      v21 = *(_OWORD *)v27;
      v22 = v28;
    }
    v23 = v29;
    v24 = a3;
    (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v19 + 168))(v19, v27, v20);
    if (SHIBYTE(v22) < 0)
      operator delete((void *)v21);
  }
  else
  {
LABEL_33:
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(v8, __p);
      sub_100708E54();
    }
  }
  sub_100034234((uint64_t)buf);
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
}

void sub_1005A29B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (a20 < 0)
    operator delete(__p);
  sub_100034234(v31 - 112);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(a1);
}

void sub_1005A2A0C(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  NSObject *v6;
  const char *v11;
  _QWORD *v12;
  void **v13;
  const char *v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  _QWORD *v20;
  __int16 v21;
  void **v22;

  v6 = qword_100999840;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 528))
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 > 2)
        v11 = "UNKNOWN";
      else
        v11 = off_10093A510[(char)a2];
      v12 = (_QWORD *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        v12 = (_QWORD *)*v12;
      sub_10043E5F8(*(_QWORD *)(a1 + 64), __p);
      if (v16 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v18 = v11;
      v19 = 2080;
      v20 = v12;
      v21 = 2082;
      v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending 'GetImageProperties' response (result - %s, handle - %s) to device %{public}s", buf, 0x20u);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    buf[0] = 0;
    sub_100043758(buf);
    v14 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v14 = *(const char **)v14;
    if (sub_100100A50(*(unsigned __int16 *)(a1 + 72), v14, *a3, *a4, *a5, a3[1] - *a3))
    {
      if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
        sub_100708F2C();
    }
    sub_100043728(buf);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
  {
    sub_100708EA0(a1, v6);
  }
}

void sub_1005A2BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

void sub_1005A2C04(uint64_t a1, uint64_t a2, __int16 a3, char *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;
  NSObject *v13;
  int v14;
  void **v15;
  void **v16;
  void **v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v24[5];
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  __int16 v28;
  void *__p[2];
  char v30;
  void *v31[2];
  uint64_t v32;
  unint64_t v33;
  uint8_t buf[4];
  void **v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  void **v41;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v35) = *(_WORD *)(a2 + 4);
  v12 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v32 = 0;
  v33 = v12;
  v31[0] = 0;
  v31[1] = 0;
  sub_100091AE8(v31, a4);
  v13 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    v14 = SHIBYTE(v32);
    v15 = (void **)v31[0];
    sub_10043E5F8(v12, __p);
    v16 = v31;
    if (v14 < 0)
      v16 = v15;
    if (v30 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    v35 = v16;
    v36 = 1024;
    v37 = a5;
    v38 = 1024;
    v39 = a6;
    v40 = 2082;
    v41 = v17;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received 'GetImage(%s)' request (width - %d, height - %d) from device %{public}s", buf, 0x22u);
    if (v30 < 0)
      operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003415C((uint64_t)__p, a1 + 280);
  v18 = *(_QWORD **)(a1 + 352);
  if (!v18)
    goto LABEL_33;
  v19 = (_QWORD *)(a1 + 352);
  do
  {
    v20 = v18[4];
    v21 = v20 >= v12;
    if (v20 >= v12)
      v22 = v18;
    else
      v22 = v18 + 1;
    if (v21)
      v19 = v18;
    v18 = (_QWORD *)*v22;
  }
  while (*v22);
  if (v19 != (_QWORD *)(a1 + 352) && v12 >= v19[4])
  {
    v23 = *(_QWORD *)(*sub_10047396C(a1 + 344, &v33) + 8);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3321888768;
    v24[2] = sub_1005A2F40;
    v24[3] = &unk_10093A120;
    v24[4] = a1;
    if (SHIBYTE(v32) < 0)
    {
      sub_10003430C(&v25, v31[0], (unint64_t)v31[1]);
    }
    else
    {
      v25 = *(_OWORD *)v31;
      v26 = v32;
    }
    v27 = v33;
    v28 = a3;
    (*(void (**)(uint64_t, void **, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v23 + 176))(v23, v31, a5, a6, v24);
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
  else
  {
LABEL_33:
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(v12, buf);
      sub_100708E54();
    }
  }
  sub_100034234((uint64_t)__p);
  if (SHIBYTE(v32) < 0)
    operator delete(v31[0]);
}

void sub_1005A2EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a20 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a23);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(a1);
}

void sub_1005A2F40(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  const char *v9;
  _QWORD *v10;
  void **v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  _QWORD *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  void **v21;

  v5 = qword_100999840;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 528))
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 > 2)
        v9 = "UNKNOWN";
      else
        v9 = off_10093A510[(char)a2];
      v10 = (_QWORD *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        v10 = (_QWORD *)*v10;
      sub_10043E5F8(*(_QWORD *)(a1 + 64), __p);
      if (v13 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      v15 = v9;
      v16 = 2080;
      v17 = v10;
      v18 = 2048;
      v19 = a4;
      v20 = 2082;
      v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending 'GetImage' response (result - %s, handle - %s, length - %zu) to device %{public}s", buf, 0x2Au);
      if (v13 < 0)
        operator delete(__p[0]);
    }
    buf[0] = 0;
    sub_100043758(buf);
    if (sub_100100C44(*(unsigned __int16 *)(a1 + 72), a3, a4))
    {
      if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
        sub_100709018();
    }
    sub_100043728(buf);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
  {
    sub_100708F8C(a1, v5);
  }
}

void sub_1005A3104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

void sub_1005A3120(uint64_t a1, uint64_t a2, __int16 a3, char *a4)
{
  unint64_t v8;
  NSObject *v9;
  int v10;
  void **v11;
  void **v12;
  void **v13;
  uint64_t v14;
  _QWORD v15[5];
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  __int16 v19;
  void *__p[2];
  char v21;
  void *v22[2];
  uint64_t v23;
  unint64_t v24;
  uint8_t buf[4];
  void **v26;
  __int16 v27;
  void **v28;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  LODWORD(v22[0]) = *(_DWORD *)a2;
  WORD2(v22[0]) = *(_WORD *)(a2 + 4);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)v22, 1);
  v24 = v8;
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  sub_100091AE8(v22, a4);
  v9 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    v10 = SHIBYTE(v23);
    v11 = (void **)v22[0];
    sub_10043E5F8(v8, __p);
    v12 = v22;
    if (v10 < 0)
      v12 = v11;
    if (v21 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v26 = v12;
    v27 = 2082;
    v28 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'GetLinkedThumbnail(%s)' request from device %{public}s", buf, 0x16u);
    if (v21 < 0)
      operator delete(__p[0]);
  }
  v14 = *(_QWORD *)(*sub_10047396C(a1 + 344, &v24) + 8);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768;
  v15[2] = sub_1005A3394;
  v15[3] = &unk_10093A120;
  v15[4] = a1;
  if (SHIBYTE(v23) < 0)
  {
    sub_10003430C(&v16, v22[0], (unint64_t)v22[1]);
  }
  else
  {
    v16 = *(_OWORD *)v22;
    v17 = v23;
  }
  v18 = v24;
  v19 = a3;
  (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)v14 + 184))(v14, v22, v15);
  if (SHIBYTE(v17) < 0)
    operator delete((void *)v16);
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
}

void sub_1005A3354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005A3394(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  const char *v9;
  _QWORD *v10;
  void **v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  _QWORD *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  void **v21;

  v5 = qword_100999840;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 528))
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 > 2)
        v9 = "UNKNOWN";
      else
        v9 = off_10093A510[(char)a2];
      v10 = (_QWORD *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        v10 = (_QWORD *)*v10;
      sub_10043E5F8(*(_QWORD *)(a1 + 64), __p);
      if (v13 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      v15 = v9;
      v16 = 2080;
      v17 = v10;
      v18 = 2048;
      v19 = a4;
      v20 = 2082;
      v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending 'GetLinkedThumbnail' response (result - %s, handle - %s, length - %zu) to device %{public}s", buf, 0x2Au);
      if (v13 < 0)
        operator delete(__p[0]);
    }
    buf[0] = 0;
    sub_100043758(buf);
    if (sub_100100D18(*(unsigned __int16 *)(a1 + 72), a3, a4))
    {
      if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
        sub_100709104();
    }
    sub_100043728(buf);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
  {
    sub_100709078(a1, v5);
  }
}

void sub_1005A3558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

void sub_1005A3574(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned int a5, const void *a6)
{
  unint64_t v11;
  NSObject *v12;
  _BOOL4 v13;
  const char *v14;
  _BYTE *v15;
  uint8_t *v16;
  size_t v17;
  uint64_t v18;
  _QWORD v19[5];
  uint64_t (**v20)();
  unsigned int *v21;
  unint64_t v22;
  char v23;
  char v24;
  uint64_t (**v25)();
  unsigned int *v26;
  unint64_t v27;
  _BYTE __p[12];
  char v29;
  uint8_t buf[8];
  _BYTE v31[10];
  __int16 v32;
  _BYTE *v33;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)&buf[4] = *(_WORD *)(a2 + 4);
  v11 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v26 = 0;
  v27 = v11;
  v25 = &off_100918258;
  v12 = qword_100999840;
  v13 = os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT);
  if (a5)
  {
    if (v13)
    {
      sub_10043E5F8(v11, __p);
      v14 = "s";
      if (a5 == 1)
        v14 = "";
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = a5;
      if (v29 >= 0)
        v15 = __p;
      else
        v15 = *(_BYTE **)__p;
      *(_WORD *)v31 = 2080;
      *(_QWORD *)&v31[2] = v14;
      v32 = 2082;
      v33 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received 'get element attributes' (%d attribute%s) request from device %{public}s", buf, 0x1Cu);
      if (v29 < 0)
        operator delete(*(void **)__p);
    }
    sub_10003994C(buf, a6, 4 * a5);
    sub_100041698((uint64_t)&v25, (uint64_t)buf);
  }
  else
  {
    if (v13)
    {
      sub_10043E5F8(v11, buf);
      v16 = SBYTE3(v33) >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received 'get element attributes' (all attributes) request from device %{public}s", __p, 0xCu);
      if (SBYTE3(v33) < 0)
        operator delete(*(void **)buf);
    }
    if (*(_QWORD *)(a1 + 528) == v11)
      LOBYTE(a5) = 8;
    else
      LOBYTE(a5) = 7;
    if (*(_QWORD *)(a1 + 528) == v11)
      v17 = 32;
    else
      v17 = 28;
    sub_10003994C(buf, &unk_100742990, v17);
    sub_100041698((uint64_t)&v25, (uint64_t)buf);
  }
  *(_QWORD *)buf = &off_100918258;
  if (*(_QWORD *)v31)
    sub_100056AAC(*(unsigned int **)v31);
  v18 = *(_QWORD *)(*sub_10047396C(a1 + 344, &v27) + 8);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3321888768;
  v19[2] = sub_1005A38D8;
  v19[3] = &unk_10093A150;
  v23 = a5;
  v19[4] = a1;
  v20 = &off_100918258;
  v21 = v26;
  if (v26)
    sub_10003C37C((uint64_t)v26);
  v22 = v27;
  v24 = a3;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 24))(v18, v19);
  v20 = &off_100918258;
  if (v21)
    sub_100056AAC(v21);
  v25 = &off_100918258;
  if (v26)
    sub_100056AAC(v26);
}

void sub_1005A3874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a19)
    sub_100056AAC(a19);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1005A38D8(uint64_t a1, uint64_t a2, int *a3)
{
  char *v5;
  uint64_t v6;
  unsigned __int8 v7;
  int v8;
  const char *v9;
  uint64_t v10;
  uint8_t *v11;
  NSObject *v12;
  const char *v13;
  int v14;
  uint64_t v15;
  uint8_t *v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint8_t *v29;
  int v30;
  char *v31;
  uint64_t v32;
  NSObject *v33;
  uint8_t *v34;
  uint64_t v35;
  uint8_t *v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t *v45;
  uint64_t v47;
  char v48;
  uint8_t buf[8];
  char v50;
  uint8_t v51[4];
  _BYTE v52[18];

  v47 = *(_QWORD *)(a1 + 32);
  v5 = (char *)malloc_type_calloc(8uLL, 0x18uLL, 0x1010040D8983CCAuLL);
  if (*(_BYTE *)(a1 + 64))
  {
    v6 = 0;
    v7 = 0;
    while (2)
    {
      v8 = *(_DWORD *)(sub_10003EB18(a1 + 40) + 4 * v6);
      switch(v8)
      {
        case 1:
          if (*((char *)a3 + 39) >= 0)
            v9 = (const char *)(a3 + 4);
          else
            v9 = (const char *)*((_QWORD *)a3 + 2);
          v10 = qword_100999840;
          if (!os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
            goto LABEL_64;
          sub_10043E5F8(*(_QWORD *)(a1 + 56), buf);
          v11 = buf;
          if (v50 < 0)
            v11 = *(uint8_t **)buf;
          *(_DWORD *)v51 = 136315394;
          *(_QWORD *)v52 = v9;
          *(_WORD *)&v52[8] = 2082;
          *(_QWORD *)&v52[10] = v11;
          v12 = v10;
          v13 = "Sending attribute 'title: %s' to device %{public}s";
          goto LABEL_62;
        case 2:
          if (*((char *)a3 + 63) >= 0)
            v9 = (const char *)(a3 + 10);
          else
            v9 = (const char *)*((_QWORD *)a3 + 5);
          v20 = qword_100999840;
          if (!os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
            goto LABEL_64;
          sub_10043E5F8(*(_QWORD *)(a1 + 56), buf);
          v21 = buf;
          if (v50 < 0)
            v21 = *(uint8_t **)buf;
          *(_DWORD *)v51 = 136315394;
          *(_QWORD *)v52 = v9;
          *(_WORD *)&v52[8] = 2082;
          *(_QWORD *)&v52[10] = v21;
          v12 = v20;
          v13 = "Sending attribute 'artist: %s' to device %{public}s";
          goto LABEL_62;
        case 3:
          if (*((char *)a3 + 87) >= 0)
            v9 = (const char *)(a3 + 16);
          else
            v9 = (const char *)*((_QWORD *)a3 + 8);
          v22 = qword_100999840;
          if (!os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
            goto LABEL_64;
          sub_10043E5F8(*(_QWORD *)(a1 + 56), buf);
          v23 = buf;
          if (v50 < 0)
            v23 = *(uint8_t **)buf;
          *(_DWORD *)v51 = 136315394;
          *(_QWORD *)v52 = v9;
          *(_WORD *)&v52[8] = 2082;
          *(_QWORD *)&v52[10] = v23;
          v12 = v22;
          v13 = "Sending attribute 'album: %s' to device %{public}s";
          goto LABEL_62;
        case 4:
          v14 = *a3;
          v24 = qword_100999840;
          if (!os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
            goto LABEL_48;
          sub_10043E5F8(*(_QWORD *)(a1 + 56), buf);
          v25 = buf;
          if (v50 < 0)
            v25 = *(uint8_t **)buf;
          *(_DWORD *)v51 = 67109378;
          *(_DWORD *)v52 = v14;
          *(_WORD *)&v52[4] = 2082;
          *(_QWORD *)&v52[6] = v25;
          v17 = v24;
          v18 = "Sending attribute 'track number: %u' to device %{public}s";
          goto LABEL_46;
        case 5:
          v14 = a3[1];
          v15 = qword_100999840;
          if (!os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
            goto LABEL_48;
          sub_10043E5F8(*(_QWORD *)(a1 + 56), buf);
          v16 = buf;
          if (v50 < 0)
            v16 = *(uint8_t **)buf;
          *(_DWORD *)v51 = 67109378;
          *(_DWORD *)v52 = v14;
          *(_WORD *)&v52[4] = 2082;
          *(_QWORD *)&v52[6] = v16;
          v17 = v15;
          v18 = "Sending attribute 'total tracks: %u' to device %{public}s";
          goto LABEL_46;
        case 6:
          if (*((char *)a3 + 111) >= 0)
            v9 = (const char *)(a3 + 22);
          else
            v9 = (const char *)*((_QWORD *)a3 + 11);
          v26 = qword_100999840;
          if (!os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
            goto LABEL_64;
          sub_10043E5F8(*(_QWORD *)(a1 + 56), buf);
          v27 = buf;
          if (v50 < 0)
            v27 = *(uint8_t **)buf;
          *(_DWORD *)v51 = 136315394;
          *(_QWORD *)v52 = v9;
          *(_WORD *)&v52[8] = 2082;
          *(_QWORD *)&v52[10] = v27;
          v12 = v26;
          v13 = "Sending attribute 'genre: %s' to device %{public}s";
          goto LABEL_62;
        case 7:
          v14 = a3[2];
          v28 = qword_100999840;
          if (!os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
            goto LABEL_48;
          sub_10043E5F8(*(_QWORD *)(a1 + 56), buf);
          v29 = buf;
          if (v50 < 0)
            v29 = *(uint8_t **)buf;
          *(_DWORD *)v51 = 67109378;
          *(_DWORD *)v52 = v14;
          *(_WORD *)&v52[4] = 2082;
          *(_QWORD *)&v52[6] = v29;
          v17 = v28;
          v18 = "Sending attribute 'playing time: %ums' to device %{public}s";
LABEL_46:
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, v51, 0x12u);
          if (v50 < 0)
            operator delete(*(void **)buf);
LABEL_48:
          v30 = v7;
          v31 = &v5[24 * v7];
          *(_DWORD *)v31 = v8;
          *((_WORD *)v31 + 2) = 106;
          goto LABEL_69;
        case 8:
          v32 = *(_QWORD *)(a1 + 56);
          if (v32 == *(_QWORD *)(v47 + 528))
          {
            if (*((char *)a3 + 135) >= 0)
              v9 = (const char *)(a3 + 28);
            else
              v9 = (const char *)*((_QWORD *)a3 + 14);
            v35 = qword_100999840;
            if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(v32, buf);
              v36 = buf;
              if (v50 < 0)
                v36 = *(uint8_t **)buf;
              *(_DWORD *)v51 = 136315394;
              *(_QWORD *)v52 = v9;
              *(_WORD *)&v52[8] = 2082;
              *(_QWORD *)&v52[10] = v36;
              v12 = v35;
              v13 = "Sending attribute 'image handle: %s' to device %{public}s";
LABEL_62:
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, v51, 0x16u);
              if (v50 < 0)
                operator delete(*(void **)buf);
            }
LABEL_64:
            v30 = v7;
            v37 = &v5[24 * v7];
            *(_DWORD *)v37 = v8;
            *((_WORD *)v37 + 2) = 106;
            if (v9)
            {
              v38 = strlen(v9);
              v39 = 256;
              if (v38 < 0x100)
                v39 = v38;
              v40 = v39 + 1;
              v41 = (char *)malloc_type_malloc(v39 + 1, 0x44D99EA1uLL);
              *(_QWORD *)&v5[24 * v7 + 8] = v41;
              strlcpy(v41, v9, v40);
            }
            else
            {
              v14 = 0;
LABEL_69:
              v42 = (char *)malloc_type_malloc(0xBuLL, 0xC589C341uLL);
              *(_QWORD *)&v5[24 * v30 + 8] = v42;
              if (v14)
                snprintf(v42, 0xBuLL, "%u", v14);
              else
                *v42 = 0;
            }
            *(_DWORD *)&v5[24 * v30 + 16] = strlen(*(const char **)&v5[24 * v30 + 8]);
            ++v7;
          }
          else
          {
            v33 = qword_100999840;
            if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
            {
              sub_10043E5F8(v32, buf);
              v34 = buf;
              if (v50 < 0)
                v34 = *(uint8_t **)buf;
              *(_DWORD *)v51 = 136446210;
              *(_QWORD *)v52 = v34;
              _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Ignoring 'image handle' attribute request as device %{public}s did not establish BIP", v51, 0xCu);
              if (v50 < 0)
                operator delete(*(void **)buf);
            }
          }
LABEL_73:
          if (++v6 < (unint64_t)*(unsigned __int8 *)(a1 + 64) && v7 < 9u)
            continue;
          v48 = 0;
          sub_100043758(&v48);
          if (!v7)
            goto LABEL_78;
          v43 = sub_10014D0F8(*(_QWORD *)(a1 + 56) + 128, *(unsigned __int8 *)(a1 + 65), v7, (uint64_t)v5);
          break;
        default:
          v19 = qword_100999840;
          if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v8;
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Request for unknown attribute attributeID %d", buf, 8u);
          }
          goto LABEL_73;
      }
      break;
    }
  }
  else
  {
    v48 = 0;
    sub_100043758(&v48);
LABEL_78:
    v43 = sub_10014BD40(*(_QWORD *)(a1 + 56) + 128, *(unsigned __int8 *)(a1 + 65), 32, 3306);
  }
  if (!(_DWORD)v43)
    goto LABEL_86;
  if ((_DWORD)v43 != 3304)
  {
    v43 = os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v43)
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 56), buf);
      sub_100709164();
    }
LABEL_86:
    sub_10059C310(v43, v5);
    return sub_100043728(&v48);
  }
  v44 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "Message too big, sent only the first chunk of data. Wait for next request from CT", buf, 2u);
  }
  *(_QWORD *)buf = a1 + 56;
  v45 = sub_1002BBB54((uint64_t **)(v47 + 480), (unint64_t *)(a1 + 56), (uint64_t)&unk_100740F58, (uint64_t **)buf);
  v51[0] = *(_BYTE *)(a1 + 65);
  v51[1] = 32;
  *(_QWORD *)buf = v51;
  *((_QWORD *)sub_1005A7168((uint64_t **)v45 + 5, v51, (uint64_t)&unk_100740F58, (_WORD **)buf) + 5) = v5;
  return sub_100043728(&v48);
}

void sub_1005A4158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28)
{
  sub_100043728(&a28);
  _Unwind_Resume(a1);
}

void sub_1005A417C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5, uint64_t a6, int a7)
{
  uint64_t v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  _BYTE *v16;
  const char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  _BYTE *v24;
  _BOOL4 v25;
  _BOOL4 v26;
  NSObject *v27;
  uint64_t v28;
  void **v29;
  int v30;
  unsigned int v31;
  uint8_t *v32;
  NSObject *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  uint8_t *v37;
  int v38;
  void *v39;
  NSObject *v40;
  uint8_t *v41;
  _BYTE *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  NSObject *v46;
  uint8_t *v47;
  uint64_t v48;
  _QWORD v49[5];
  unsigned __int8 v50;
  _QWORD v51[5];
  int v52;
  char v53;
  _QWORD v54[2];
  _QWORD v55[5];
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  void *v60[2];
  char v61;
  uint8_t buf[32];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _QWORD v67[6];
  __int128 v68;
  uint64_t v69;
  _BYTE __p[24];
  int v71;
  __int16 v72;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A428);
  v59 = 0;
  v71 = *(_DWORD *)a2;
  v72 = *(_WORD *)(a2 + 4);
  v12 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v71, 1);
  v58 = 0;
  v59 = v12;
  v56 = 0;
  v57 = 0;
  bzero(&v71, 0x201uLL);
  if (a7)
  {
    if (a7 != 3301)
    {
      v15 = qword_100999840;
      if (!os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
        return;
      sub_10043E5F8(v12, __p);
      if (__p[23] >= 0)
        v42 = __p;
      else
        v42 = *(_BYTE **)__p;
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = a5;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = v42;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a7;
      v17 = "Received invalid response for PDU 0x%02x from device %{public}s - result was %{bluetooth:OI_STATUS}u";
      goto LABEL_75;
    }
    v13 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(v12, buf);
      v41 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)__p = 67109378;
      *(_DWORD *)&__p[4] = a5;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = v41;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Received 'not implemented' response for PDU 0x%02x from device %{public}s", __p, 0x12u);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
    }
  }
  v14 = sub_10014B030((uint64_t)a4, a5, (uint64_t)&v56, &v71);
  if (v14)
  {
    v15 = qword_100999840;
    if (!os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      return;
    sub_10043E5F8(v59, __p);
    if (__p[23] >= 0)
      v16 = __p;
    else
      v16 = *(_BYTE **)__p;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = a5;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = v16;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v14;
    v17 = "Failed to unmarshal response for PDU 0x%02x from device %{public}s - result was %{bluetooth:OI_STATUS}u";
LABEL_75:
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, v17, buf, 0x18u);
    if ((__p[23] & 0x80000000) != 0)
    {
      v39 = *(void **)__p;
      goto LABEL_77;
    }
    return;
  }
  switch(a5)
  {
    case 80:
      if (*a4 != 9)
      {
        v40 = qword_100999840;
        if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
          sub_10070924C(&v59, v40);
        return;
      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1 + 392);
      v30 = v57;
      *(_QWORD *)__p = &v59;
      *((_DWORD *)sub_1004BF4C8((uint64_t **)(a1 + 456), (unint64_t *)&v59, (uint64_t)&unk_100740F58, (_QWORD **)__p)+ 10) = v30;
      if (qword_100977E00 != -1)
        dispatch_once(&qword_100977E00, &stru_10093A408);
      LOBYTE(v31) = (_BYTE)v57;
      sub_1003E3EC8((_QWORD *)qword_100977DF8, v59, *a4, (float)v31 / 127.0);
      goto LABEL_46;
    case 49:
      v21 = *v57;
      if (v21 == 13)
      {
        if ((*a4 | 2) != 0xF)
        {
          v43 = sub_1004759E0();
          v49[0] = _NSConcreteStackBlock;
          v49[1] = 3221225472;
          v49[2] = sub_1005A4C4C;
          v49[3] = &unk_100917378;
          v49[4] = v59;
          sub_100041A34(v43, v49);
          return;
        }
        v22 = v57[8];
        v23 = qword_100999840;
        if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(v59, __p);
          v24 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v22;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = (3302700 * v22) >> 22;
          *(_WORD *)&buf[14] = 2082;
          *(_QWORD *)&buf[16] = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Received notification for absolute volume 0x%02x (~%d%%) from device %{public}s", buf, 0x18u);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        v54[0] = 0;
        v54[1] = 0;
        sub_10003415C((uint64_t)v54, a1 + 392);
        *(_QWORD *)buf = &v59;
        *((_DWORD *)sub_1004BF4C8((uint64_t **)(a1 + 456), (unint64_t *)&v59, (uint64_t)&unk_100740F58, (_QWORD **)buf)+ 10) = v22;
        sub_100034264((uint64_t)v54);
        v69 = 0;
        v68 = 0u;
        memset(v67, 0, sizeof(v67));
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        memset(buf, 0, sizeof(buf));
        sub_1005BCCCC((uint64_t)&buf[1]);
        buf[18] = 0;
        buf[20] = 0;
        BYTE2(v64) = 0;
        BYTE4(v64) = 0;
        HIDWORD(v67[2]) = 0;
        v63 = 0uLL;
        *(_QWORD *)&buf[24] = 0;
        LOBYTE(v64) = 0;
        v65 = 0uLL;
        *((_QWORD *)&v64 + 1) = 0;
        LOBYTE(v66) = 0;
        v67[0] = 0;
        v67[1] = 0;
        *((_QWORD *)&v66 + 1) = 0;
        *(_DWORD *)((char *)&v67[1] + 7) = 0;
        LOBYTE(v67[3]) = 1;
        BYTE2(v69) = 0;
        *(_QWORD *)((char *)&v67[3] + 6) = 0;
        *(_QWORD *)((char *)&v67[3] + 1) = 0;
        v68 = 0uLL;
        v67[5] = 0;
        LOBYTE(v69) = 0;
        v25 = sub_1004419F4(v59, (uint64_t)buf);
        if (BYTE10(v68))
          v26 = v25;
        else
          v26 = 0;
        if (v26)
        {
          v27 = qword_100999840;
          if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v59, v60);
            v29 = v61 >= 0 ? v60 : (void **)v60[0];
            *(_DWORD *)__p = 67109634;
            *(_DWORD *)&__p[4] = v22;
            *(_WORD *)&__p[8] = 1024;
            *(_DWORD *)&__p[10] = (3302700 * v22) >> 22;
            *(_WORD *)&__p[14] = 2082;
            *(_QWORD *)&__p[16] = v29;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Ignoring notification for absolute volume 0x%02x (~%d%%) from device %{public}s", __p, 0x18u);
            if (v61 < 0)
              operator delete(v60[0]);
          }
        }
        else
        {
          v44 = *a4;
          v45 = sub_1004759E0();
          v51[0] = _NSConcreteStackBlock;
          v51[1] = 3221225472;
          v51[2] = sub_1005A4BE4;
          v51[3] = &unk_100926B98;
          v51[4] = v59;
          v52 = v22;
          v53 = v44;
          sub_100041A34(v45, v51);
        }
        if (*a4 == 13)
        {
          v50 = 0;
          if (sub_10014ADDC(a2, &v50, 13))
          {
            if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
            {
              sub_10043E5F8(v59, __p);
              sub_100709208();
            }
          }
        }
        if (SHIBYTE(v67[1]) < 0)
          operator delete(*((void **)&v66 + 1));
        if (SHIBYTE(v65) < 0)
          operator delete(*((void **)&v64 + 1));
        if (SHIBYTE(v63) < 0)
          operator delete(*(void **)&buf[24]);
        nullsub_90(&buf[1], v28);
        v32 = (uint8_t *)v54;
        goto LABEL_91;
      }
      v33 = qword_100999840;
      if (!os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
        return;
      sub_10043E5F8(v59, buf);
      if ((buf[23] & 0x80u) == 0)
        v36 = buf;
      else
        v36 = *(uint8_t **)buf;
      *(_DWORD *)__p = 67109378;
      *(_DWORD *)&__p[4] = v21;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = v36;
      v35 = "Received notification with unknown id 0x%02x from device %{public}s";
      break;
    case 16:
      if (*a4 == 12 && v57 == 3)
      {
        v18 = BYTE1(v57);
        if (!BYTE1(v57))
          return;
        v19 = v58;
        while (1)
        {
          v20 = *v19++;
          if (v20 == 13)
            break;
          if (!--v18)
            return;
        }
        v46 = qword_100999840;
        if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(v59, buf);
          v47 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)__p = 136446210;
          *(_QWORD *)&__p[4] = v47;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Registering for absolute volume change notifications on device %{public}s", __p, 0xCu);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
        }
        LOBYTE(v54[0]) = 0;
        if (sub_10014ADDC(a2, (unsigned __int8 *)v54, 13))
        {
          if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
            sub_1007091A8();
          return;
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        sub_10003415C((uint64_t)buf, a1 + 392);
        *(_QWORD *)__p = &v59;
        *((_DWORD *)sub_1004BF4C8((uint64_t **)(a1 + 456), (unint64_t *)&v59, (uint64_t)&unk_100740F58, (_QWORD **)__p)+ 10) = 30;
        sub_100034264((uint64_t)buf);
        v48 = sub_1004759E0();
        v55[0] = _NSConcreteStackBlock;
        v55[1] = 3221225472;
        v55[2] = sub_1005A4B90;
        v55[3] = &unk_100917378;
        v55[4] = v59;
        sub_100041A34(v48, v55);
LABEL_46:
        v32 = buf;
LABEL_91:
        sub_100034234((uint64_t)v32);
        return;
      }
      v33 = qword_100999840;
      if (!os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
        return;
      sub_10043E5F8(v59, buf);
      if ((buf[23] & 0x80u) == 0)
        v37 = buf;
      else
        v37 = *(uint8_t **)buf;
      v38 = *a4;
      *(_DWORD *)__p = 136446466;
      *(_QWORD *)&__p[4] = v37;
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = v38;
      v35 = "Received error response for get capabilities request from device %{public}s - response was 0x%02x";
      break;
    default:
      v33 = qword_100999840;
      if (!os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
        return;
      sub_10043E5F8(v59, buf);
      if ((buf[23] & 0x80u) == 0)
        v34 = buf;
      else
        v34 = *(uint8_t **)buf;
      *(_DWORD *)__p = 67109378;
      *(_DWORD *)&__p[4] = a5;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = v34;
      v35 = "Received response for unsupported PDU 0x%02x from device %{public}s";
      break;
  }
  _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, v35, __p, 0x12u);
  if ((char)buf[23] < 0)
  {
    v39 = *(void **)buf;
LABEL_77:
    operator delete(v39);
  }
}

void sub_1005A4B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_10026B73C((uint64_t)&a37, a2);
  sub_100034234((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A4B90(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10093A408);
  return sub_1003E3CF8((_QWORD *)qword_100977DF8, *(_QWORD *)(a1 + 32), 1);
}

uint64_t sub_1005A4BE4(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10093A408);
  return sub_1003E3EC8((_QWORD *)qword_100977DF8, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 44), (float)*(int *)(a1 + 40) / 127.0);
}

uint64_t sub_1005A4C4C(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10093A408);
  return sub_1003E3CF8((_QWORD *)qword_100977DF8, *(_QWORD *)(a1 + 32), 0);
}

void sub_1005A4CA0(float a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;
  char v7;
  NSObject *v8;
  uint8_t *v9;
  int v10;
  uint8_t *v11;
  NSObject *v12;
  _BYTE *v13;
  NSObject *v14;
  void **v15;
  void *v16[2];
  char v17;
  char v18;
  uint8_t v19[4];
  void **v20;
  __int16 v21;
  int v22;
  _BYTE __p[12];
  char v24;
  uint8_t buf[8];
  __int16 v26;
  int v27;
  __int16 v28;
  _BYTE *v29;

  v18 = 0;
  v5 = sub_100027F68();
  sub_100091AE8(buf, "PTS");
  sub_100091AE8(__p, "AVRCPControllerHack");
  v6 = (*(uint64_t (**)(uint64_t, uint8_t *, _BYTE *, char *))(*(_QWORD *)v5 + 72))(v5, buf, __p, &v18);
  if (v24 < 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v29) < 0)
    operator delete(*(void **)buf);
  v18 = v6;
  if (a3)
  {
    v7 = v6 ^ 1;
    if (a1 != 0.0)
      v7 = 1;
    if ((v7 & 1) != 0)
    {
      v12 = qword_100999840;
      if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a3, __p);
        v13 = v24 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = (int)(float)(a1 * 127.0);
        v26 = 1024;
        v27 = (int)(float)(a1 * 100.0);
        v28 = 2082;
        v29 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Setting absolute volume to 0x%02x (~%d%%) on device %{public}s", buf, 0x18u);
        if (v24 < 0)
          operator delete(*(void **)__p);
      }
      buf[0] = 0;
      sub_100043758(buf);
      v10 = sub_1000FFBE8(a3 + 128, (int)(float)(a1 * 127.0));
      v11 = buf;
    }
    else
    {
      LOBYTE(v16[0]) = 0;
      v8 = qword_100999840;
      if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a3, buf);
        v9 = SHIBYTE(v29) >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)__p = 136446210;
        *(_QWORD *)&__p[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Setting absolute volume to zero (muted) on device %{public}s", __p, 0xCu);
        if (SHIBYTE(v29) < 0)
          operator delete(*(void **)buf);
      }
      v19[0] = 0;
      sub_100043758(v19);
      if (sub_1000FF9C8(a3 + 128, (unsigned __int8 *)v16, 67)
        && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(a3, buf);
        sub_10070931C();
      }
      v10 = sub_1000FF9C8(a3 + 128, (unsigned __int8 *)v16, 195);
      if (v10 && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(a3, __p);
        sub_1007092D8();
      }
      v11 = v19;
    }
    sub_100043728(v11);
    if (v10)
    {
      v14 = qword_100999840;
      if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(a3, v16);
        if (v17 >= 0)
          v15 = v16;
        else
          v15 = (void **)v16[0];
        *(_DWORD *)v19 = 136446466;
        v20 = v15;
        v21 = 1024;
        v22 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to set absolute volume on device %{public}s - result was %{bluetooth:OI_STATUS}u", v19, 0x12u);
        if (v17 < 0)
          operator delete(v16[0]);
      }
    }
  }
}

void sub_1005A5030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A5090(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t v3;

  v3 = sub_100139F10(a2, xmmword_100742960, (uint64_t)xmmword_100742960, a3);
  if ((_DWORD)v3 && os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
    sub_100709360();
  return v3;
}

uint64_t sub_1005A50F8(uint64_t a1, uint64_t a2, __int16 *a3, __int16 *a4)
{
  uint64_t v7;
  __int16 v9;
  char v10;
  __int16 v11;

  sub_1004806E0(a2, 3);
  sub_1004806E0(a2, 2);
  sub_10048071C(a2, 104);
  sub_1004806E0(a2, 16);
  sub_1004806E0(a2, 2);
  sub_10048071C(a2, 103);
  v11 = 0;
  v10 = 0;
  v9 = 0;
  v7 = sub_1001DCC5C((unsigned __int16)*a3, &v9, &v11, &v10);
  if ((_DWORD)v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      sub_1007093B8();
  }
  else
  {
    sub_1004806E0(a2, 1);
    sub_1004806E0(a2, 7);
    sub_10048071C(a2, *a3);
    sub_10048071C(a2, v9);
    sub_10048071C(a2, v11);
    sub_1004806E0(a2, v10);
  }
  if (*a4)
  {
    v7 = sub_1001DCC5C((unsigned __int16)*a4, &v9, &v11, &v10);
    if ((_DWORD)v7)
    {
      if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
        sub_10070938C();
    }
    else
    {
      sub_1004806E0(a2, 17);
      sub_1004806E0(a2, 7);
      sub_10048071C(a2, *a4);
      sub_10048071C(a2, v9);
      sub_10048071C(a2, v11);
      sub_1004806E0(a2, v10);
    }
  }
  return v7;
}

void sub_1005A52A0()
{
  operator new();
}

void sub_1005A56C8()
{
  operator delete();
}

void sub_1005A5708(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;

  v4 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    if (v7 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fast Connect AVRCP Report Connection attempt for %{public}s", buf, 0xCu);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  sub_1004816DC(a1, a2);
}

void sub_1005A5800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  _DWORD v8[2];

  v6 = qword_100999840;
  if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fast Connect AVRCP Setup Complete result %d", (uint8_t *)v8, 8u);
  }
  if ((_DWORD)a3)
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10093A448);
    v7 = sub_1004A35C0((uint64_t)off_100977A50, a3, 20000);
    sub_10048183C(a1, a2, v7);
  }
  sub_10048183C(a1, a2, 0);
}

void sub_1005A5934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_100043728(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A5950(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  __int16 v18[3];
  char v19;
  _QWORD v20[2];
  unint64_t v21;

  v20[1] = 0;
  v21 = a2;
  v20[0] = 0;
  sub_10003415C((uint64_t)v20, a1 + 280);
  v10 = *(_QWORD **)(a1 + 352);
  if (v10)
  {
    v11 = (_QWORD *)(a1 + 352);
    do
    {
      v12 = v10[4];
      v13 = v12 >= a2;
      if (v12 >= a2)
        v14 = v10;
      else
        v14 = v10 + 1;
      if (v13)
        v11 = v10;
      v10 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v11 != (_QWORD *)(a1 + 352) && v11[4] <= a2)
    {
      v15 = *sub_10047396C(a1 + 344, &v21);
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15);
      sub_100015ECC(a1 + 344, &v21);
    }
  }
  sub_100034264((uint64_t)v20);
  v19 = 0;
  sub_100043758(&v19);
  if (a5)
  {
    v16 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      v18[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "fastConnectCleanAVRCP OI_AVRCP_FastConnect_DisconnectTable", (uint8_t *)v18, 2u);
    }
    sub_100149A50(v21 + 128);
  }
  sub_10013A180(v21 + 128, a3, a4);
  sub_100043728(&v19);
  return sub_100034234((uint64_t)v20);
}

void sub_1005A5AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A5AD0(uint64_t result, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  NSObject *v8;
  void **v9;
  void *__p[2];
  char v11;
  unint64_t v12;
  uint8_t buf[4];
  void **v14;

  v12 = a2;
  v3 = *(_QWORD **)(result + 376);
  if (!v3)
    goto LABEL_12;
  v4 = (_QWORD *)(result + 376);
  do
  {
    v5 = v3[4];
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v4 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (_QWORD *)(result + 376) || v4[4] > a2)
  {
LABEL_12:
    v8 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      if (v11 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Workaround RemoteMediaInfo for device %{public}s created", buf, 0xCu);
      if (v11 < 0)
        operator delete(__p[0]);
    }
    operator new();
  }
  return result;
}

void sub_1005A5C38()
{
  operator delete();
}

uint64_t sub_1005A5C64(uint64_t a1, unint64_t a2)
{
  return sub_1005A5AD0(a1 - 272, a2);
}

uint64_t sub_1005A5C6C(uint64_t result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  NSObject *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  unint64_t v14;
  uint8_t buf[4];
  void **v16;

  v14 = a2;
  v2 = *(_QWORD **)(result + 376);
  if (v2)
  {
    v4 = result + 368;
    v5 = result + 376;
    do
    {
      v6 = v2[4];
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = v2;
      else
        v8 = v2 + 1;
      if (v7)
        v5 = (uint64_t)v2;
      v2 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != result + 376 && *(_QWORD *)(v5 + 32) <= a2)
    {
      v9 = qword_100999840;
      if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v10 = v13 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Workaround RemoteMediaInfo for device %{public}s deleted", buf, 0xCu);
        if (v13 < 0)
          operator delete(__p[0]);
      }
      v11 = *sub_10047396C(v4, &v14);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11);
      return sub_100015ECC(v4, &v14);
    }
  }
  return result;
}

uint64_t sub_1005A5DB8(uint64_t a1, unint64_t a2)
{
  return sub_1005A5C6C(a1 - 272, a2);
}

uint64_t sub_1005A5DC0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v5;
  void **v6;
  _QWORD *v7;
  void *__p[2];
  char v9;
  uint64_t v10;
  uint8_t buf[4];
  void **v12;

  v10 = a2;
  result = sub_10043FC5C(a2);
  if ((_DWORD)result)
  {
    v5 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      if (v9 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Play command for device %{public}s forwarded", buf, 0xCu);
      if (v9 < 0)
        operator delete(__p[0]);
    }
    v7 = sub_10047396C(a1 + 368, (unint64_t *)&v10);
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*v7 + 8) + 8))(*(_QWORD *)(*v7 + 8), v10, 501);
  }
  return result;
}

uint64_t sub_1005A5ED4(uint64_t a1, uint64_t a2)
{
  return sub_1005A5DC0(a1 - 272, a2);
}

void sub_1005A5EE0(uint64_t a1)
{
  sub_1005A6EBC(a1);
  operator delete();
}

uint64_t sub_1005A5F04()
{
  return 3;
}

uint64_t sub_1005A5F0C(uint64_t a1)
{
  return sub_1005A6EBC(a1 - 256);
}

void sub_1005A5F14(uint64_t a1)
{
  sub_1005A6EBC(a1 - 256);
  operator delete();
}

uint64_t sub_1005A5F3C(uint64_t a1)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  return sub_10059B13C(off_10097ABF8, a1);
}

void sub_1005A5F8C(uint64_t a1)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_10059C094((uint64_t)off_10097ABF8, a1);
}

void sub_1005A5FE4(uint64_t a1, uint64_t a2)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_10059B524((uint64_t)off_10097ABF8, a1, a2);
}

void sub_1005A603C(uint64_t a1, int a2, int a3)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_10059BB70((uint64_t)off_10097ABF8, a1, a2, a3);
}

void sub_1005A60A4(uint64_t a1, __int16 a2, int a3)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_10059BD68((uint64_t)off_10097ABF8, a1, a2, a3);
}

void sub_1005A610C(uint64_t a1)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_10059BF30((uint64_t)off_10097ABF8, a1);
}

void sub_1005A615C(id a1)
{
  operator new();
}

void sub_1005A619C()
{
  operator delete();
}

void sub_1005A61C0(uint64_t a1, unsigned int a2, char a3)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_10059C770((uint64_t)off_10097ABF8, a1, a2, a3);
}

void sub_1005A6228(uint64_t a1, unsigned int a2, int a3)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_10059CDF0(a1, a1, a2, a3);
}

void sub_1005A6288(uint64_t a1, unsigned int a2)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_10059CFF0(a1, a1, a2);
}

void sub_1005A62D8(uint64_t a1, unsigned int a2, int a3)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_10059D168(a1, a1, a2, a3);
}

void sub_1005A6338(uint64_t a1, char a2, unsigned int a3, const void *a4)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_10059D3A4((uint64_t)off_10097ABF8, a1, a2, a3, a4);
}

void sub_1005A63A8(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_10059D934((uint64_t)off_10097ABF8, a1, a2, a3, a4);
}

void sub_1005A6418(uint64_t a1, char a2, uint64_t a3, uint64_t a4, const void *a5)
{
  unsigned int v6;

  v6 = a4;
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_1005A3574((uint64_t)off_10097ABF8, a1, a2, a4, v6, a5);
}

uint64_t sub_1005A6488(uint64_t a1, char a2)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  return sub_10059F5B8((uint64_t)off_10097ABF8, a1, a2);
}

uint64_t sub_1005A64E0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  return sub_10059DD6C((uint64_t)off_10097ABF8, a1, a2, a3);
}

void sub_1005A6548(uint64_t a1, unsigned int a2, int a3)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_10059F8FC((uint64_t)off_10097ABF8, a1, a2, a3);
}

uint64_t sub_1005A65B8(uint64_t a1, unsigned int a2, int a3)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  return sub_10059FBB4((uint64_t)off_10097ABF8, a1, a2, a3);
}

uint64_t sub_1005A6620(uint64_t a1, char a2, uint64_t a3)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  return sub_10059FDD0((uint64_t)off_10097ABF8, a1, a2, a3);
}

uint64_t sub_1005A6688(uint64_t a1, char a2, uint64_t a3)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  return sub_1005A011C((uint64_t)off_10097ABF8, a1, a2, a3);
}

_QWORD *sub_1005A66F0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  return sub_1005A09D8((uint64_t)off_10097ABF8, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1005A6788(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t *a5)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  return sub_1005A05D0((uint64_t)off_10097ABF8, a1, a2, a3, a4, a5);
}

_QWORD *sub_1005A6808(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  return sub_1005A12EC((uint64_t)off_10097ABF8, a1, a2, a3, a4, a5, a6, a7);
}

void sub_1005A68A0(uint64_t a1, unsigned int a2, int a3, unsigned int a4, void *a5)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_1005A1A4C((uint64_t)off_10097ABF8, a1, a2, a3, a4, a5);
}

uint64_t sub_1005A6920(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  return sub_1005A1ED0((uint64_t)off_10097ABF8, a1, a2, a3);
}

uint64_t sub_1005A6988(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  return sub_1005A2304((uint64_t)off_10097ABF8, a1, a2, a3, a4, a5);
}

void sub_1005A6A08(uint64_t a1, __int16 a2, char *a3)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_1005A26F4((uint64_t)off_10097ABF8, a1, a2, a3);
}

void sub_1005A6A70(uint64_t a1, __int16 a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_1005A2C04((uint64_t)off_10097ABF8, a1, a2, a3, a4, a5);
}

void sub_1005A6AF0(uint64_t a1, __int16 a2, char *a3)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_1005A3120((uint64_t)off_10097ABF8, a1, a2, a3);
}

void sub_1005A6B58()
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
}

void sub_1005A6B80(uint64_t a1, uint64_t a2, char *a3, int a4, uint64_t a5, int a6)
{
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A2D8);
  sub_1005A417C((uint64_t)off_10097ABF8, a1, 0, a3, a4, 0, a6);
}

void sub_1005A6BF8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_1005A6C80(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1005A6C80(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1005A6E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005A6EBC(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093A190;
  *(_QWORD *)(a1 + 256) = off_10093A250;
  *(_QWORD *)(a1 + 264) = off_10093A278;
  *(_QWORD *)(a1 + 272) = &off_10093A2C0;
  sub_10001A82C(a1 + 504, *(_QWORD **)(a1 + 512));
  sub_1002BB6B8(a1 + 480, *(_QWORD **)(a1 + 488));
  sub_10001A82C(a1 + 456, *(_QWORD **)(a1 + 464));
  sub_100069BDC(a1 + 392);
  sub_10001A82C(a1 + 368, *(_QWORD **)(a1 + 376));
  sub_10001A82C(a1 + 344, *(_QWORD **)(a1 + 352));
  sub_100069BDC(a1 + 280);
  return sub_100278464(a1);
}

void sub_1005A6F48(id a1)
{
  operator new();
}

void sub_1005A6F88()
{
  operator delete();
}

void sub_1005A6FAC(id a1)
{
  operator new();
}

void sub_1005A6FEC()
{
  operator delete();
}

void sub_1005A7010(id a1)
{
  operator new();
}

void sub_1005A7050()
{
  operator delete();
}

void sub_1005A7074(id a1)
{
  operator new();
}

void sub_1005A70B4()
{
  operator delete();
}

uint64_t *sub_1005A70D8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (uint64_t *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = a2[1];
  v7 = v2;
  do
  {
    v8 = *((unsigned __int8 *)v3 + 32);
    if (v8 >= v5)
    {
      if (v5 >= v8)
      {
        if (*((unsigned __int8 *)v3 + 33) < v6)
          ++v3;
        else
          v7 = v3;
      }
      else
      {
        v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2)
    return v2;
  v9 = *((unsigned __int8 *)v7 + 32);
  if (v5 < v9 || v9 >= v5 && v6 < *((unsigned __int8 *)v7 + 33))
    return v2;
  return v7;
}

_WORD *sub_1005A7168(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  _WORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = 0;
  v6 = sub_1005A71F4((uint64_t)a1, &v10, a2);
  v7 = (_WORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x30uLL);
    v7[16] = **a4;
    *((_QWORD *)v7 + 5) = 0;
    sub_100004078(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_1005A71F4(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *((unsigned __int8 *)v4 + 32);
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v9 >= v6)
      {
        v10 = *((unsigned __int8 *)v8 + 33);
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_12;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_12;
    }
  }
  v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

void sub_1005A725C(_QWORD *a1)
{
  *a1 = &off_10093A538;
  a1[3] = 0;
  a1[2] = a1 + 3;
  a1[4] = 0;
  a1[6] = 0;
  a1[5] = a1 + 6;
  a1[9] = 0;
  a1[8] = a1 + 9;
  a1[7] = 0;
  a1[10] = 0;
  a1[12] = 0;
  a1[11] = a1 + 12;
  a1[13] = 0;
  a1[15] = 0;
  a1[14] = a1 + 15;
  a1[16] = 0;
  a1[19] = 0;
  a1[18] = 0;
  a1[17] = a1 + 18;
  a1[21] = 0;
  a1[20] = a1 + 21;
  a1[22] = 0;
  sub_10034FF28();
}

void sub_1005A7354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD **a13, uint64_t a14)
{
  _QWORD **v14;
  _QWORD **v15;
  _QWORD **v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD **v22;

  sub_10001A82C(v20, *v17);
  sub_10001A82C(v19, *v21);
  sub_10001A82C(v18, *v16);
  sub_10001A82C(a10, *v15);
  sub_10001A82C(a11, *v14);
  sub_10001A82C(a12, *v22);
  sub_10001A82C(a14, *a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A73B8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;

  *(_QWORD *)a1 = &off_10093A538;
  (***(void (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v2 = *(_QWORD **)(a1 + 16);
  if (v2 != (_QWORD *)(a1 + 24))
  {
    do
    {
      if (v2[5])
        operator delete();
      v3 = (_QWORD *)v2[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v2[2];
          v5 = *v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (v4 != (_QWORD *)(a1 + 24));
  }
  v6 = *(_QWORD **)(a1 + 40);
  if (v6 != (_QWORD *)(a1 + 48))
  {
    do
    {
      if (v6[5])
        operator delete();
      v7 = (_QWORD *)v6[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v6[2];
          v5 = *v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v5);
      }
      v6 = v8;
    }
    while (v8 != (_QWORD *)(a1 + 48));
  }
  v9 = *(_QWORD **)(a1 + 64);
  if (v9 != (_QWORD *)(a1 + 72))
  {
    do
    {
      if (v9[5])
        operator delete();
      v10 = (_QWORD *)v9[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v9[2];
          v5 = *v11 == (_QWORD)v9;
          v9 = v11;
        }
        while (!v5);
      }
      v9 = v11;
    }
    while (v11 != (_QWORD *)(a1 + 72));
  }
  v12 = *(_QWORD **)(a1 + 88);
  if (v12 != (_QWORD *)(a1 + 96))
  {
    do
    {
      if (v12[5])
        operator delete();
      v13 = (_QWORD *)v12[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v12[2];
          v5 = *v14 == (_QWORD)v12;
          v12 = v14;
        }
        while (!v5);
      }
      v12 = v14;
    }
    while (v14 != (_QWORD *)(a1 + 96));
  }
  v15 = *(_QWORD **)(a1 + 112);
  if (v15 != (_QWORD *)(a1 + 120))
  {
    do
    {
      if (v15[5])
        operator delete();
      v16 = (_QWORD *)v15[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v15[2];
          v5 = *v17 == (_QWORD)v15;
          v15 = v17;
        }
        while (!v5);
      }
      v15 = v17;
    }
    while (v17 != (_QWORD *)(a1 + 120));
  }
  v18 = *(_QWORD **)(a1 + 136);
  if (v18 != (_QWORD *)(a1 + 144))
  {
    do
    {
      if (v18[5])
        operator delete();
      v19 = (_QWORD *)v18[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v18[2];
          v5 = *v20 == (_QWORD)v18;
          v18 = v20;
        }
        while (!v5);
      }
      v18 = v20;
    }
    while (v20 != (_QWORD *)(a1 + 144));
  }
  v21 = *(_QWORD **)(a1 + 160);
  if (v21 != (_QWORD *)(a1 + 168))
  {
    do
    {
      if (v21[5])
        operator delete();
      v22 = (_QWORD *)v21[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v21[2];
          v5 = *v23 == (_QWORD)v21;
          v21 = v23;
        }
        while (!v5);
      }
      v21 = v23;
    }
    while (v23 != (_QWORD *)(a1 + 168));
  }
  sub_10001A82C(a1 + 160, *(_QWORD **)(a1 + 168));
  sub_10001A82C(a1 + 136, *(_QWORD **)(a1 + 144));
  sub_10001A82C(a1 + 112, *(_QWORD **)(a1 + 120));
  sub_10001A82C(a1 + 88, *(_QWORD **)(a1 + 96));
  sub_10001A82C(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_10001A82C(a1 + 40, *(_QWORD **)(a1 + 48));
  sub_10001A82C(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_1005A7724(_Unwind_Exception *a1)
{
  _QWORD **v1;

  sub_10001A82C((uint64_t)(v1 + 20), v1[21]);
  sub_10001A82C((uint64_t)(v1 + 17), v1[18]);
  sub_10001A82C((uint64_t)(v1 + 14), v1[15]);
  sub_10001A82C((uint64_t)(v1 + 11), v1[12]);
  sub_10001A82C((uint64_t)(v1 + 8), v1[9]);
  sub_10001A82C((uint64_t)(v1 + 5), v1[6]);
  sub_10001A82C((uint64_t)(v1 + 2), v1[3]);
  _Unwind_Resume(a1);
}

void sub_1005A7788(uint64_t a1)
{
  sub_1005A73B8(a1);
  operator delete();
}

uint64_t *sub_1005A77AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t *result;
  _QWORD *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t *v14;

  v13 = a3;
  v5 = *(_QWORD **)(a2 + 8);
  if (!v5)
    goto LABEL_12;
  v6 = (_QWORD *)(a2 + 8);
  do
  {
    v7 = v5[4];
    v8 = v7 >= a3;
    if (v7 >= a3)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (v8)
      v6 = v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != (_QWORD *)(a2 + 8) && v6[4] <= a3)
  {
    v12 = (uint64_t *)v6[5];
    v11 = v6 + 5;
    result = v12;
    if (v12)
      operator delete();
  }
  else
  {
LABEL_12:
    v14 = &v13;
    result = sub_10002252C((uint64_t **)a2, &v13, (uint64_t)&unk_100740F58, (uint64_t **)&v14);
    v11 = result + 5;
  }
  *v11 = a4;
  return result;
}

uint64_t sub_1005A785C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

void sub_1005A786C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;

  v22 = 0;
  v23 = a4;
  v20 = (uint64_t *)&v21;
  v21 = 0;
  if ((a3 & 1) != 0)
  {
    v8 = a1 + 16;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    sub_1005A857C((uint64_t *)&v17, a1 + 16);
    v10 = *(_QWORD **)(a1 + 24);
    v9 = (_QWORD *)(a1 + 24);
    sub_10001A82C(v8, v10);
    *(v9 - 1) = v9;
    *v9 = 0;
    v9[1] = 0;
    sub_10001A82C((uint64_t)&v20, v21);
    v11 = v18;
    v20 = v17;
    v21 = v18;
    v22 = v19;
    if (v19)
    {
      v18[2] = &v21;
      v17 = (uint64_t *)&v18;
      v18 = 0;
      v19 = 0;
      v11 = 0;
    }
    else
    {
      v20 = (uint64_t *)&v21;
    }
    sub_10001A82C((uint64_t)&v17, v11);
  }
  else
  {
    sub_1005A77AC(a1, a1 + 16, a4, a5);
    v17 = (uint64_t *)&v23;
    sub_10002252C(&v20, &v23, (uint64_t)&unk_100740F58, &v17)[5] = a5;
  }
  v13 = v20;
  if (v20 != (uint64_t *)&v21)
  {
    do
    {
      if (qword_10097AC00 != -1)
        dispatch_once(&qword_10097AC00, &stru_10093A580);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)off_10097ABF8 + 120))(off_10097ABF8, a2, a3, v13[4], v13[5]);
      v14 = (uint64_t *)v13[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (uint64_t *)v13[2];
          v16 = *v15 == (_QWORD)v13;
          v13 = v15;
        }
        while (!v16);
      }
      v13 = v15;
    }
    while (v15 != (uint64_t *)&v21);
  }
  sub_10001A82C((uint64_t)&v20, v21);
}

void sub_1005A7A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_10001A82C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A7A3C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_1005A7A4C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;

  v22 = 0;
  v23 = a4;
  v20 = (uint64_t *)&v21;
  v21 = 0;
  if ((a3 & 1) != 0)
  {
    v8 = a1 + 40;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    sub_1005A857C((uint64_t *)&v17, a1 + 40);
    v10 = *(_QWORD **)(a1 + 48);
    v9 = (_QWORD *)(a1 + 48);
    sub_10001A82C(v8, v10);
    *(v9 - 1) = v9;
    *v9 = 0;
    v9[1] = 0;
    sub_10001A82C((uint64_t)&v20, v21);
    v11 = v18;
    v20 = v17;
    v21 = v18;
    v22 = v19;
    if (v19)
    {
      v18[2] = &v21;
      v17 = (uint64_t *)&v18;
      v18 = 0;
      v19 = 0;
      v11 = 0;
    }
    else
    {
      v20 = (uint64_t *)&v21;
    }
    sub_10001A82C((uint64_t)&v17, v11);
  }
  else
  {
    sub_1005A77AC(a1, a1 + 40, a4, a5);
    v17 = (uint64_t *)&v23;
    sub_10002252C(&v20, &v23, (uint64_t)&unk_100740F58, &v17)[5] = a5;
  }
  v13 = v20;
  if (v20 != (uint64_t *)&v21)
  {
    do
    {
      if (qword_10097AC00 != -1)
        dispatch_once(&qword_10097AC00, &stru_10093A580);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)off_10097ABF8 + 128))(off_10097ABF8, a2, a3, v13[4], v13[5]);
      v14 = (uint64_t *)v13[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (uint64_t *)v13[2];
          v16 = *v15 == (_QWORD)v13;
          v13 = v15;
        }
        while (!v16);
      }
      v13 = v15;
    }
    while (v15 != (uint64_t *)&v21);
  }
  sub_10001A82C((uint64_t)&v20, v21);
}

void sub_1005A7BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_10001A82C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A7C1C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
}

void sub_1005A7C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;

  v24 = 0;
  v25 = a5;
  v22 = (uint64_t *)&v23;
  v23 = 0;
  if ((a4 & 1) != 0)
  {
    v10 = a1 + 64;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_1005A857C((uint64_t *)&v19, a1 + 64);
    v12 = *(_QWORD **)(a1 + 72);
    v11 = (_QWORD *)(a1 + 72);
    sub_10001A82C(v10, v12);
    *(v11 - 1) = v11;
    *v11 = 0;
    v11[1] = 0;
    sub_10001A82C((uint64_t)&v22, v23);
    v13 = v20;
    v22 = v19;
    v23 = v20;
    v24 = v21;
    if (v21)
    {
      v20[2] = &v23;
      v19 = (uint64_t *)&v20;
      v20 = 0;
      v21 = 0;
      v13 = 0;
    }
    else
    {
      v22 = (uint64_t *)&v23;
    }
    sub_10001A82C((uint64_t)&v19, v13);
  }
  else
  {
    sub_1005A77AC(a1, a1 + 64, a5, a6);
    v19 = (uint64_t *)&v25;
    sub_10002252C(&v22, &v25, (uint64_t)&unk_100740F58, &v19)[5] = a6;
  }
  v15 = v22;
  if (v22 != (uint64_t *)&v23)
  {
    do
    {
      if (qword_10097AC00 != -1)
        dispatch_once(&qword_10097AC00, &stru_10093A580);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)off_10097ABF8 + 136))(off_10097ABF8, a2, a3, a4, v15[4], v15[5]);
      v16 = (uint64_t *)v15[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (uint64_t *)v15[2];
          v18 = *v17 == (_QWORD)v15;
          v15 = v17;
        }
        while (!v18);
      }
      v15 = v17;
    }
    while (v17 != (uint64_t *)&v23);
  }
  sub_10001A82C((uint64_t)&v22, v23);
}

void sub_1005A7DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_10001A82C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A7E0C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
}

void sub_1005A7E1C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;

  v20 = 0;
  v21 = a3;
  v18 = (uint64_t *)&v19;
  v19 = 0;
  if ((a2 & 1) != 0)
  {
    v6 = a1 + 88;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    sub_1005A857C((uint64_t *)&v15, a1 + 88);
    v8 = *(_QWORD **)(a1 + 96);
    v7 = (_QWORD *)(a1 + 96);
    sub_10001A82C(v6, v8);
    *(v7 - 1) = v7;
    *v7 = 0;
    v7[1] = 0;
    sub_10001A82C((uint64_t)&v18, v19);
    v9 = v16;
    v18 = v15;
    v19 = v16;
    v20 = v17;
    if (v17)
    {
      v16[2] = &v19;
      v15 = (uint64_t *)&v16;
      v16 = 0;
      v17 = 0;
      v9 = 0;
    }
    else
    {
      v18 = (uint64_t *)&v19;
    }
    sub_10001A82C((uint64_t)&v15, v9);
  }
  else
  {
    sub_1005A77AC(a1, a1 + 88, a3, a4);
    v15 = (uint64_t *)&v21;
    sub_10002252C(&v18, &v21, (uint64_t)&unk_100740F58, &v15)[5] = a4;
  }
  v11 = v18;
  if (v18 != (uint64_t *)&v19)
  {
    do
    {
      if (qword_10097AC00 != -1)
        dispatch_once(&qword_10097AC00, &stru_10093A580);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)off_10097ABF8 + 144))(off_10097ABF8, a2, v11[4], v11[5]);
      v12 = (uint64_t *)v11[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)v11[2];
          v14 = *v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v14);
      }
      v11 = v13;
    }
    while (v13 != (uint64_t *)&v19);
  }
  sub_10001A82C((uint64_t)&v18, v19);
}

void sub_1005A7FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_10001A82C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A7FDC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
}

void sub_1005A7FEC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;

  v20 = 0;
  v21 = a3;
  v18 = (uint64_t *)&v19;
  v19 = 0;
  if ((a2 & 1) != 0)
  {
    v6 = a1 + 112;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    sub_1005A857C((uint64_t *)&v15, a1 + 112);
    v8 = *(_QWORD **)(a1 + 120);
    v7 = (_QWORD *)(a1 + 120);
    sub_10001A82C(v6, v8);
    *(v7 - 1) = v7;
    *v7 = 0;
    v7[1] = 0;
    sub_10001A82C((uint64_t)&v18, v19);
    v9 = v16;
    v18 = v15;
    v19 = v16;
    v20 = v17;
    if (v17)
    {
      v16[2] = &v19;
      v15 = (uint64_t *)&v16;
      v16 = 0;
      v17 = 0;
      v9 = 0;
    }
    else
    {
      v18 = (uint64_t *)&v19;
    }
    sub_10001A82C((uint64_t)&v15, v9);
  }
  else
  {
    sub_1005A77AC(a1, a1 + 112, a3, a4);
    v15 = (uint64_t *)&v21;
    sub_10002252C(&v18, &v21, (uint64_t)&unk_100740F58, &v15)[5] = a4;
  }
  v11 = v18;
  if (v18 != (uint64_t *)&v19)
  {
    do
    {
      if (qword_10097AC00 != -1)
        dispatch_once(&qword_10097AC00, &stru_10093A580);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)off_10097ABF8 + 152))(off_10097ABF8, a2, v11[4], v11[5]);
      v12 = (uint64_t *)v11[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)v11[2];
          v14 = *v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v14);
      }
      v11 = v13;
    }
    while (v13 != (uint64_t *)&v19);
  }
  sub_10001A82C((uint64_t)&v18, v19);
}

void sub_1005A818C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_10001A82C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A81AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
}

void sub_1005A81BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;

  v24 = 0;
  v25 = a5;
  v22 = (uint64_t *)&v23;
  v23 = 0;
  if ((a4 & 1) != 0)
  {
    v10 = a1 + 136;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_1005A857C((uint64_t *)&v19, a1 + 136);
    v12 = *(_QWORD **)(a1 + 144);
    v11 = (_QWORD *)(a1 + 144);
    sub_10001A82C(v10, v12);
    *(v11 - 1) = v11;
    *v11 = 0;
    v11[1] = 0;
    sub_10001A82C((uint64_t)&v22, v23);
    v13 = v20;
    v22 = v19;
    v23 = v20;
    v24 = v21;
    if (v21)
    {
      v20[2] = &v23;
      v19 = (uint64_t *)&v20;
      v20 = 0;
      v21 = 0;
      v13 = 0;
    }
    else
    {
      v22 = (uint64_t *)&v23;
    }
    sub_10001A82C((uint64_t)&v19, v13);
  }
  else
  {
    sub_1005A77AC(a1, a1 + 136, a5, a6);
    v19 = (uint64_t *)&v25;
    sub_10002252C(&v22, &v25, (uint64_t)&unk_100740F58, &v19)[5] = a6;
  }
  v15 = v22;
  if (v22 != (uint64_t *)&v23)
  {
    do
    {
      if (qword_10097AC00 != -1)
        dispatch_once(&qword_10097AC00, &stru_10093A580);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)off_10097ABF8 + 160))(off_10097ABF8, a2, a3, a4, v15[4], v15[5]);
      v16 = (uint64_t *)v15[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (uint64_t *)v15[2];
          v18 = *v17 == (_QWORD)v15;
          v15 = v17;
        }
        while (!v18);
      }
      v15 = v17;
    }
    while (v17 != (uint64_t *)&v23);
  }
  sub_10001A82C((uint64_t)&v22, v23);
}

void sub_1005A837C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_10001A82C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A839C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
}

void sub_1005A83AC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;

  v22 = 0;
  v23 = a4;
  v20 = (uint64_t *)&v21;
  v21 = 0;
  if ((a3 & 1) != 0)
  {
    v8 = a1 + 160;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    sub_1005A857C((uint64_t *)&v17, a1 + 160);
    v10 = *(_QWORD **)(a1 + 168);
    v9 = (_QWORD *)(a1 + 168);
    sub_10001A82C(v8, v10);
    *(v9 - 1) = v9;
    *v9 = 0;
    v9[1] = 0;
    sub_10001A82C((uint64_t)&v20, v21);
    v11 = v18;
    v20 = v17;
    v21 = v18;
    v22 = v19;
    if (v19)
    {
      v18[2] = &v21;
      v17 = (uint64_t *)&v18;
      v18 = 0;
      v19 = 0;
      v11 = 0;
    }
    else
    {
      v20 = (uint64_t *)&v21;
    }
    sub_10001A82C((uint64_t)&v17, v11);
  }
  else
  {
    sub_1005A77AC(a1, a1 + 160, a4, a5);
    v17 = (uint64_t *)&v23;
    sub_10002252C(&v20, &v23, (uint64_t)&unk_100740F58, &v17)[5] = a5;
  }
  v13 = v20;
  if (v20 != (uint64_t *)&v21)
  {
    do
    {
      if (qword_10097AC00 != -1)
        dispatch_once(&qword_10097AC00, &stru_10093A580);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)off_10097ABF8 + 168))(off_10097ABF8, a2, a3, v13[4], v13[5]);
      v14 = (uint64_t *)v13[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (uint64_t *)v13[2];
          v16 = *v15 == (_QWORD)v13;
          v13 = v15;
        }
        while (!v16);
      }
      v13 = v15;
    }
    while (v15 != (uint64_t *)&v21);
  }
  sub_10001A82C((uint64_t)&v20, v21);
}

void sub_1005A855C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_10001A82C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_1005A857C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002CCE28(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1005A85B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1005A85D0(id a1)
{
  operator new();
}

void sub_1005A8610()
{
  operator delete();
}

uint64_t sub_1005A8634(uint64_t a1)
{
  *(_QWORD *)sub_10048D2F0(a1, "RemoteService", 8) = &off_10093A5B0;
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10093A6A0);
  sub_10048D5B0(a1, (uint64_t)off_10097ABF8);
  return a1;
}

void sub_1005A86A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048D3E0(v1);
  _Unwind_Resume(a1);
}

void sub_1005A86C4(uint64_t a1)
{
  sub_10048D3E0(a1);
  operator delete();
}

uint64_t sub_1005A86E8(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v9 = xmmword_1007429C0;
  v10 = xmmword_1007429B0;
  v8 = xmmword_100740F90;
  if (sub_100444790(a2))
  {
    if (sub_100442444(a2, &v10, 9u))
    {
      v4 = 4;
      if (sub_100442444(a2, &v9, 9u))
      {
        if (sub_100442444(a2, &v8, 9u))
          v4 = 4;
        else
          v4 = 1;
      }
    }
    else
    {
      v4 = 1;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_DWORD *)(a1 + 32);
  v11 = 0;
  sub_10004AD30((uint64_t)&v11);
  *(_QWORD *)&v7 = (int)v11;
  *((_QWORD *)&v7 + 1) = SWORD2(v11);
  return sub_1004415B0(a2, v5, v4, &v7, 0);
}

void sub_1005A87D8(id a1)
{
  operator new();
}

void sub_1005A8818()
{
  operator delete();
}

uint64_t sub_1005A883C(unint64_t a1, _OWORD *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v10;

  v10 = 0;
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093A6C0);
  v8 = sub_1005B2998(off_100978148, a1, &v10, a4);
  if (!(_DWORD)v8)
    sub_1005AECB8(v10, (unint64_t *)*a4, a2, a3);
  return v8;
}

uint64_t sub_1005A88D8(unint64_t *a1)
{
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093A6C0);
  sub_1005B2CE0(off_100978148, *a1);
  *a1 = 0;
  return 0;
}

uint64_t sub_1005A8934(unint64_t a1)
{
  uint64_t v2;

  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093A6C0);
  v2 = sub_1005B2FB8(off_100978148, a1);
  if (v2)
    return sub_1005AEF50(v2, a1);
  else
    return 7;
}

uint64_t sub_1005A89A0(unint64_t a1)
{
  uint64_t v2;

  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093A6C0);
  v2 = sub_1005B2FB8(off_100978148, a1);
  if (v2)
    return sub_1005AEB14(v2, a1);
  else
    return 7;
}

uint64_t sub_1005A8A0C(uint64_t a1)
{
  uint64_t v2;

  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093A6C0);
  v2 = sub_1005B2FB8(off_100978148, a1);
  if (v2)
    return sub_1005B0460(v2);
  else
    return 7;
}

uint64_t sub_1005A8A74(uint64_t a1, unint64_t a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v11[2];
  char v12;

  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093A6C0);
  v6 = sub_1005B2FB8(off_100978148, a1);
  if (v6)
  {
    v7 = v6;
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10093A6E0);
    v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
    if (v8)
    {
      v9 = v8;
      v11[0] = 0;
      v11[1] = 0;
      v12 = 0;
      sub_1005BCCCC((uint64_t)v11);
      if (*a3)
        sub_1005BCD78((char *)v11, a3);
      sub_1005B04B4(v7, v9);
    }
  }
  return 7;
}

void sub_1005A8BA0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005A8BBC(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093A6C0);
  v6 = sub_1005B2FB8(off_100978148, a1);
  if (!v6)
    return 7;
  v7 = v6;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A6E0);
  v8 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (v8)
    return sub_1005B0704(v7, v8, a3);
  else
    return 7;
}

uint64_t sub_1005A8C84(uint64_t a1, unint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  _BOOL4 v8;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v10;
  int v11;
  uint8_t *v12;
  uint8_t *v13;
  void **v14;
  NSObject *v15;
  int v16;
  uint8_t *v17;
  uint8_t *v18;
  void **v19;
  NSObject *v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *__p[2];
  char v26;
  uint8_t v27[8];
  char v28;
  uint8_t buf[4];
  uint8_t *v30;
  __int16 v31;
  void **v32;
  unsigned __int8 uu[8];
  uint64_t v34;

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093A700);
  *(_QWORD *)uu = 0;
  v34 = 0;
  sub_100657518((uint64_t)off_1009778C0, a2, (uint64_t)uu);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A6E0);
  v4 = (unsigned __int8 *)sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093A6C0);
  v5 = sub_1005B2FB8(off_100978148, a1);
  if (!v5)
  {
    v21 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "PairingAgent is NULL", v27, 2u);
    }
    return 7;
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10093A720);
  v6 = sub_1000229D8((_QWORD *)qword_100977B48, v5);
  v7 = sub_10043FC5C((uint64_t)v4);
  if (v6)
    v8 = v7;
  else
    v8 = 0;
  if (!v8)
    goto LABEL_35;
  if (sub_100070BDC())
  {
    CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
    v10 = CTGreenTeaOsLogHandle;
    if (CTGreenTeaOsLogHandle)
    {
      if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
      {
        sub_1000340DC(v6, (uint64_t)v27);
        v11 = v28;
        v12 = *(uint8_t **)v27;
        sub_10043E5F8((uint64_t)v4, __p);
        v13 = v27;
        if (v11 < 0)
          v13 = v12;
        if (v26 >= 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        v30 = v13;
        v31 = 2082;
        v32 = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to delete pairing for device \"%{public}s\"", buf, 0x16u);
        if (v26 < 0)
          operator delete(__p[0]);
        if (v28 < 0)
          operator delete(*(void **)v27);
      }
    }
  }
  v15 = qword_1009997E8;
  if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    goto LABEL_35;
  sub_1000340DC(v6, (uint64_t)v27);
  v16 = v28;
  v17 = *(uint8_t **)v27;
  sub_10043E5F8((uint64_t)v4, __p);
  v18 = v27;
  if (v16 < 0)
    v18 = v17;
  if (v26 >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  *(_DWORD *)buf = 136446466;
  v30 = v18;
  v31 = 2082;
  v32 = v19;
  _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to delete pairing for device \"%{public}s\"", buf, 0x16u);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
  {
    operator delete(*(void **)v27);
    if (v4)
      return sub_1005B02C4(v5, v4);
  }
  else
  {
LABEL_35:
    if (v4)
      return sub_1005B02C4(v5, v4);
  }
  if (uuid_is_null(uu))
    return 7;
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10093A740);
  v22 = qword_1009778B0;
  v23 = sub_100030DF4(uu);
  v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  sub_100699674(v22, v24);

  return 0;
}

void sub_1005A9054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005A9088(uint64_t a1, int a2)
{
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093A6C0);
  if (!sub_1005B2FB8(off_100978148, a1))
    return 7;
  if (a2 > 3)
    return 3;
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093A760);
  return sub_1005BF45C((uint64_t)off_100978158, a2);
}

uint64_t sub_1005A9138(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093A6C0);
  v4 = sub_1005B2FB8(off_100978148, a1);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A6E0);
  v5 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  if (!v4)
    return 7;
  v6 = v5;
  if (!v5)
    return 7;
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093A760);
  return sub_1005BFFD8((uint64_t)off_100978158, v6);
}

uint64_t sub_1005A921C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;

  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093A6C0);
  v12 = sub_1005B2FB8(off_100978148, a1);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093A6E0);
  v13 = sub_10046F6C0((uint64_t)off_1009778E0, a2);
  v14 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 141560835;
    v17 = 1752392040;
    v18 = 1041;
    v19 = 16;
    v20 = 2097;
    v21 = a3;
    v22 = 2160;
    v23 = 1752392040;
    v24 = 1041;
    v25 = 16;
    v26 = 2097;
    v27 = a4;
    v28 = 2160;
    v29 = 1752392040;
    v30 = 1041;
    v31 = 16;
    v32 = 2097;
    v33 = a5;
    v34 = 2160;
    v35 = 1752392040;
    v36 = 1041;
    v37 = 16;
    v38 = 2097;
    v39 = a6;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "BTPairingAgentSetOOBDataForDevice C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{private, mask.hash}.16P R256:%{private, mask.hash}.16P", (uint8_t *)&v16, 0x6Au);
  }
  result = 7;
  if (v12 && v13)
  {
    if (qword_100978160 != -1)
      dispatch_once(&qword_100978160, &stru_10093A760);
    return sub_1005BFB9C((uint64_t)off_100978158, v13, a3, a4, a5, a6);
  }
  return result;
}

uint64_t sub_1005A9424(uint64_t a1)
{
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093A6C0);
  if (!sub_1005B2FB8(off_100978148, a1))
    return 7;
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093A760);
  return sub_1005C0118((uint64_t)off_100978158);
}

void sub_1005A94BC(id a1)
{
  operator new();
}

void sub_1005A94FC()
{
  operator delete();
}

void sub_1005A9520(id a1)
{
  operator new();
}

void sub_1005A9560()
{
  operator delete();
}

void sub_1005A9584(id a1)
{
  operator new();
}

void sub_1005A95C4()
{
  operator delete();
}

void sub_1005A95E8(id a1)
{
  operator new();
}

void sub_1005A9628()
{
  operator delete();
}

void sub_1005A964C(id a1)
{
  operator new();
}

void sub_1005A968C()
{
  operator delete();
}

void sub_1005A96B0(id a1)
{
  operator new();
}

void sub_1005A96F0()
{
  operator delete();
}

uint64_t sub_1005A9714(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

__n128 sub_1005A9720(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  return result;
}

uint64_t sub_1005A9734(uint64_t result, _OWORD *a2, unsigned int a3)
{
  *(_OWORD *)result = *a2;
  if (a3 <= 8)
    *(_DWORD *)(result + 16) = a3;
  return result;
}

__n128 sub_1005A974C(__n128 *a1, __n128 *a2, unsigned __int32 a3)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u32[0] = a3;
  return result;
}

uint64_t sub_1005A975C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_1005A9764(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1 >= 9)
    return 4;
  else
    return v1;
}

BOOL sub_1005A9778(_BYTE *a1)
{
  unint64_t v2;
  unint64_t v3;

  if (*a1)
    return 0;
  v2 = 0;
  do
  {
    v3 = v2;
    if (v2 == 15)
      break;
    ++v2;
  }
  while (!a1[v3 + 1]);
  return v3 > 0xE;
}

uint64_t sub_1005A97B4()
{
  return 16;
}

void sub_1005A987C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *sub_1005A98EC(_QWORD *a1)
{
  NSObject *v2;

  *a1 = off_10093A790;
  a1[1] = off_10093A850;
  a1[2] = off_10093A878;
  a1[3] = off_10093A928;
  a1[4] = 0;
  a1[10] = 0;
  a1[7] = 0;
  a1[8] = 0;
  a1[6] = 0;
  v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, -1);
  a1[5] = dispatch_queue_create("com.apple.AuthorizationManagerSerialQueue", v2);
  return a1;
}

void sub_1005A9960(uint64_t a1)
{
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_10093A998);
  sub_1005AE2E8((uint64_t)off_100978168 + 192, a1 + 24);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093A9B8);
  sub_10061F358((uint64_t)off_1009778A0, a1 + 16, 0);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10093A9D8);
  sub_100695F80((_QWORD *)qword_1009778B0, a1 + 8);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093A9F8);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1);
}

void sub_1005A9A64(uint64_t a1)
{
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_10093A998);
  sub_100069060((uint64_t)off_100978168 + 192, a1 + 24);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093A9B8);
  sub_10061F45C((uint64_t)off_1009778A0, a1 + 16);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10093A9D8);
  sub_1006960C4(qword_1009778B0, a1 + 8);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093A9F8);
  sub_100069060((uint64_t)off_100977A50 + 64, a1);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

void sub_1005A9B6C(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005A9BC4;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_async(v1, block);
}

void sub_1005A9BC4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_1009998B0;
  if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received 'stackDidStart' listener", buf, 2u);
  }
  v3 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v4 = *(void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = v3;

  v5 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v6 = *(void **)(v1 + 56);
  *(_QWORD *)(v1 + 56) = v5;

  v7 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;

  *(_BYTE *)(v1 + 72) = 0;
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", CFSTR("COGITO"), CFSTR("LG Watch Sport 5148"), CFSTR("HUAWEI WATCH 2 0738"), CFSTR("LG Urbane A94D"), CFSTR("fenix 5"), CFSTR("ASUS ZenWatch3 3419"), CFSTR("Polar Loop 2"), CFSTR("Polar M600 761E"), CFSTR("Charge 2"), CFSTR("Gear Fit2 (98D9)"), CFSTR("The Mission 4349"), CFSTR("vívoactive3"), CFSTR("Ionic"), CFSTR("fenix 3"), CFSTR("TicWatch Pro 1291"), CFSTR("Moto 360 109D"),
                    CFSTR("Charge 3"),
                    CFSTR("Versa"),
                    0));
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 2));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 3));
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4));
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 5));
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 6));
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 7));
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 8));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 9));
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 11));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 12));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 13));
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 14));
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 15));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 16));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 17));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 18));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v26, v8, v9, v29, v25, v24, v23, v22, v21, v20, v10, v19, v11, v18, v28, v17,
                    v12,
                    v13,
                    0));

  v14 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithObjects:forKeys:", v16, v27);
  v15 = (void *)qword_100993438;
  qword_100993438 = (uint64_t)v14;

}

void sub_1005AA01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,void *a30,void *a31,void *a32,void *a33)
{
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;

  v37 = *(void **)(v35 - 128);
  v36 = *(void **)(v35 - 120);

  _Unwind_Resume(a1);
}

void sub_1005AA0E4()
{
  JUMPOUT(0x1005AA07CLL);
}

void sub_1005AA0F0()
{
  JUMPOUT(0x1005AA080);
}

void sub_1005AA0FC()
{
  JUMPOUT(0x1005AA088);
}

void sub_1005AA108()
{
  JUMPOUT(0x1005AA08CLL);
}

void sub_1005AA114()
{
  JUMPOUT(0x1005AA094);
}

void sub_1005AA120()
{
  JUMPOUT(0x1005AA09CLL);
}

void sub_1005AA12C()
{
  JUMPOUT(0x1005AA0A4);
}

void sub_1005AA138()
{
  JUMPOUT(0x1005AA0ACLL);
}

void sub_1005AA144()
{
  JUMPOUT(0x1005AA0B4);
}

void sub_1005AA150()
{
  JUMPOUT(0x1005AA0BCLL);
}

void sub_1005AA15C()
{
  JUMPOUT(0x1005AA0C4);
}

void sub_1005AA168()
{
  JUMPOUT(0x1005AA0C8);
}

void sub_1005AA174()
{
  JUMPOUT(0x1005AA0CCLL);
}

void sub_1005AA17C()
{
  JUMPOUT(0x1005AA0D4);
}

void sub_1005AA184()
{
  void *v0;

  JUMPOUT(0x1005AA0D4);
}

void sub_1005AA190(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005AA1E8;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_async(v1, block);
}

void sub_1005AA1E8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  void *v3;
  void *v4;
  uint8_t v5[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_1009998B0;
  if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received 'stackWillStop' listener", v5, 2u);
  }
  objc_msgSend(*(id *)(v1 + 48), "removeAllObjects");
  objc_msgSend(*(id *)(v1 + 56), "removeAllObjects");
  v3 = *(void **)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;

  v4 = (void *)qword_100993438;
  qword_100993438 = 0;

  sub_1005AA284(v1);
}

void sub_1005AA284(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  _BOOL4 v4;
  void *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v2 = *(void **)(a1 + 32);
  v3 = qword_1009998B0;
  v4 = os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Deregistering FrontBoard services", buf, 2u);
      v2 = *(void **)(a1 + 32);
    }
    objc_msgSend(v2, "setHandler:", 0);
    objc_msgSend(*(id *)(a1 + 32), "invalidate");
    v5 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;

  }
  else if (v4)
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Unable to deregister FrontBoard services as fDisplayLayoutMonitor is NULL", v6, 2u);
  }
}

void sub_1005AA350(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = *(NSObject **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005AA3CC;
  v6[3] = &unk_100918868;
  v7 = v3;
  v8 = a1;
  v5 = v3;
  dispatch_async(v4, v6);

}

void sub_1005AA3CC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  int v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t v10;
  id v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *__p[2];
  char v26;
  uint8_t v27[128];
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  void *v31;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = qword_1009998B0;
  if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v29 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received 'lePairingCompleted' listener for device '%@'", buf, 0xCu);
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093AA18);
  v5 = off_1009778C0;
  v6 = *(void **)(a1 + 32);
  sub_100091AE8(__p, "RequiresANCSAuth");
  v7 = sub_10000628C((uint64_t)v5, v6, (uint64_t)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  v8 = qword_1009998B0;
  v9 = os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v9)
    {
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v29 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device '%@' has the tag 'RequiresANCSAuth', Check if the current bundleIdentifier is present in the device's bundle identifier list", buf, 0xCu);
    }
    v11 = sub_1005AA6F0(v2, *(void **)(a1 + 32));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if (v12)
    {
      v13 = qword_1009998B0;
      if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        v29 = v14;
        v30 = 2112;
        v31 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "bundle identifier list for device '%@': %@", buf, 0x16u);
      }
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v15 = v12;
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
      if (v16)
      {
        v17 = *(_QWORD *)v22;
        while (2)
        {
          for (i = 0; i != v16; i = (char *)i + 1)
          {
            if (*(_QWORD *)v22 != v17)
              objc_enumerationMutation(v15);
            v19 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
            if (objc_msgSend(v19, "isEqualToString:", *(_QWORD *)(v2 + 80), (_QWORD)v21))
            {
              *(_BYTE *)(v2 + 73) = 1;
              sub_1005AA8A0(v2, *(void **)(a1 + 32), v19);
              goto LABEL_25;
            }
          }
          v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
          if (v16)
            continue;
          break;
        }
      }
LABEL_25:

    }
  }
  else if (v9)
  {
    v20 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v29 = v20;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device '%@' does not have the tag 'RequiresANCSAuth', not adding it to the authorization queue.", buf, 0xCu);
  }
}

void sub_1005AA6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  _Unwind_Resume(a1);
}

id sub_1005AA6F0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v3 = a2;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v4 = *(id *)(a1 + 48);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "device", (_QWORD)v14));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "UUIDString"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));
        v12 = objc_msgSend(v10, "isEqualToString:", v11);

        if (v12)
        {
          v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bundleIdentifiers"));
          goto LABEL_11;
        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_11:

  return v5;
}

void sub_1005AA858(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1005AA8A0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005ACACC;
  block[3] = &unk_100919500;
  v12 = v6;
  v13 = a1;
  v11 = v5;
  v8 = v6;
  v9 = v5;
  dispatch_async(v7, block);

}

void sub_1005AA948(uint64_t a1, void *a2)
{
  sub_1005AA350(a1 - 8, a2);
}

void sub_1005AA950(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = *(NSObject **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005AA9CC;
  v6[3] = &unk_100918868;
  v7 = v3;
  v8 = a1;
  v5 = v3;
  dispatch_async(v4, v6);

}

void sub_1005AA9CC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = qword_1009998B0;
  if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 138412290;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received 'leDeviceUnpaired' listener for device '%@'", (uint8_t *)&v5, 0xCu);
  }
  sub_1005AAA88(v2, *(void **)(a1 + 32));
}

void sub_1005AAA88(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *j;
  uint64_t v14;
  void *v15;
  BOOL v16;
  void *v17;
  unsigned int v18;
  void *v19;
  void *v20;
  id obj;
  void *v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];

  v23 = a2;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = *(id *)(a1 + 48);
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v29;
    while (2)
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v29 != v4)
          objc_enumerationMutation(obj);
        v22 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "device"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "UUIDString"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "UUIDString"));
        v9 = objc_msgSend(v7, "isEqualToString:", v8);

        if (v9)
        {
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "bundleIdentifiers"));
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
          if (v11)
          {
            v12 = *(_QWORD *)v25;
            do
            {
              for (j = 0; j != v11; j = (char *)j + 1)
              {
                if (*(_QWORD *)v25 != v12)
                  objc_enumerationMutation(v10);
                v14 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)j);
                v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectForKey:", v14));
                v16 = v15 == 0;

                if (!v16)
                {
                  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "valueForKey:", v14));
                  v18 = objc_msgSend(v17, "intValue");

                  v19 = *(void **)(a1 + 56);
                  if (v18 == 1)
                  {
                    objc_msgSend(*(id *)(a1 + 56), "removeObjectForKey:", v14);
                  }
                  else
                  {
                    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v18 - 1));
                    objc_msgSend(v19, "setValue:forKey:", v20, v14);

                  }
                }
              }
              v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
            }
            while (v11);
          }

          objc_msgSend(*(id *)(a1 + 48), "removeObject:", v22);
          goto LABEL_22;
        }
      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_22:

  if (!objc_msgSend(*(id *)(a1 + 48), "count"))
  {
    objc_msgSend(*(id *)(a1 + 56), "removeAllObjects");
    sub_1005AA284(a1);
  }

}

void sub_1005AAD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1005AADA8(uint64_t a1, void *a2)
{
  sub_1005AA950(a1 - 8, a2);
}

void sub_1005AADB0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = *(NSObject **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005AAE2C;
  v6[3] = &unk_100918868;
  v7 = v3;
  v8 = a1;
  v5 = v3;
  dispatch_async(v4, v6);

}

void sub_1005AAE2C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  int v13;
  void *__p[2];
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t v20[128];
  uint8_t buf[4];
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = qword_1009998B0;
  if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received 'leLinkReady' listener for device '%@'", buf, 0xCu);
  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10093A9D8);
  v5 = sub_10006A768(qword_1009778B0);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v17;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v17 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v9);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093AA18);
        v11 = off_1009778C0;
        sub_100091AE8(__p, "RequiresANCSAuth");
        v12 = sub_10000628C((uint64_t)v11, v10, (uint64_t)__p);
        v13 = v12;
        if (v15 < 0)
        {
          operator delete(__p[0]);
          if (!v13)
            goto LABEL_17;
LABEL_16:
          sub_1005AB06C(v2, v10, 0);
          goto LABEL_17;
        }
        if (v12)
          goto LABEL_16;
LABEL_17:
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v7);
  }

}

void sub_1005AB034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1005AB06C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  DeviceObject *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  NSObject *v15;
  NSObject *v16;
  void *v17;
  unsigned __int8 v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[4];
  id v28;
  __int16 v29;
  id v30;
  _BYTE v31[128];

  v5 = a2;
  v21 = a1;
  v22 = a3;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v6 = (DeviceObject *)*(id *)(a1 + 48);
  v7 = -[DeviceObject countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v24;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v24 != v8)
        objc_enumerationMutation(v6);
      v10 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "device", v21));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "UUIDString"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "UUIDString"));
      v14 = objc_msgSend(v12, "isEqualToString:", v13);

      if (v14)
        break;
      if (v7 == (id)++v9)
      {
        v7 = -[DeviceObject countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
        if (v7)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    v16 = qword_1009998B0;
    if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v28 = v5;
      v29 = 2112;
      v30 = v22;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Device '%@' is present in the authorization queue, adding the bundleIdentifier '%@' to its list", buf, 0x16u);
    }
    if (v22)
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bundleIdentifiers"));
      v18 = objc_msgSend(v17, "containsObject:", v22);

      v19 = qword_1009998B0;
      if ((v18 & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          v28 = v22;
          v29 = 2112;
          v30 = v5;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Added the bundle identifier '%@' to device '%@' bundle identifier list", buf, 0x16u);
        }
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bundleIdentifiers"));
        objc_msgSend(v20, "addObject:", v22);

        goto LABEL_22;
      }
    }
    else
    {
      v19 = qword_1009998B0;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v28 = v22;
      v29 = 2112;
      v30 = v5;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Bundle identifier '%@' already part of the device '%@' bundle identifier list", buf, 0x16u);
    }
  }
  else
  {
LABEL_9:

    v15 = qword_1009998B0;
    if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v28 = v5;
      v29 = 2112;
      v30 = v22;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Device '%@' is not present in the authorization queue, creating device object and adding it to the queue for the bundleIdentifier '%@'", buf, 0x16u);
    }
    v6 = -[DeviceObject initWithDevice:andBundleIdentifier:]([DeviceObject alloc], "initWithDevice:andBundleIdentifier:", v5, v22);
    objc_msgSend(*(id *)(v21 + 48), "addObject:", v6);
  }
LABEL_22:

  if (!*(_QWORD *)(v21 + 32))
    sub_1005AC374(v21);

}

void sub_1005AB3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1005AB450(uint64_t a1, void *a2)
{
  sub_1005AADB0(a1 - 16, a2);
}

void sub_1005AB458(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = *(NSObject **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005AB4D4;
  v6[3] = &unk_100918868;
  v7 = v3;
  v8 = a1;
  v5 = v3;
  dispatch_async(v4, v6);

}

void sub_1005AB4D4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL8 v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *v30[2];
  char v31;
  void *__p[2];
  char v33;
  uint8_t buf[4];
  id v35;
  __int16 v36;
  uint64_t v37;
  _BYTE v38[128];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = qword_1009998B0;
  v4 = os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    v5 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    v35 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received 'deviceSubscribedForANCSNotification' listener for device '%@'", buf, 0xCu);
  }
  if (sub_1005AB924(v4, *(void **)(a1 + 32)))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093AA18);
    v6 = off_1009778C0;
    v7 = *(void **)(a1 + 32);
    sub_100091AE8(__p, "RequiresANCSAuth");
    v8 = sub_10000628C((uint64_t)v6, v7, (uint64_t)__p);
    if (v33 < 0)
      operator delete(__p[0]);
    v9 = qword_1009998B0;
    v10 = os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (v10)
      {
        v11 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v35 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device '%@' already has the tag 'RequiresANCSAuth'", buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        v12 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v35 = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device '%@' does not have the tag 'RequiresANCSAuth'. Setting the tag.", buf, 0xCu);
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093AA18);
      v13 = off_1009778C0;
      v14 = *(void **)(a1 + 32);
      sub_100091AE8(v30, "RequiresANCSAuth");
      sub_1006576F0((uint64_t)v13, v14, (unsigned __int8 *)v30);
      if (v31 < 0)
        operator delete(v30[0]);
    }
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10093A998);
    v15 = sub_1002E11E8((uint64_t)off_100978168, *(void **)(a1 + 32));
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v16 = (id)objc_claimAutoreleasedReturnValue(v15);
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v26, v38, 16);
    if (v17)
    {
      v18 = *(_QWORD *)v27;
LABEL_21:
      v19 = 0;
      while (1)
      {
        if (*(_QWORD *)v27 != v18)
          objc_enumerationMutation(v16);
        v20 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v19);
        if ((objc_msgSend(v20, "isEqualToString:", CFSTR("com.apple.BTLEServer"), (_QWORD)v26) & 1) == 0)
          break;
        if (v17 == (id)++v19)
        {
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v26, v38, 16);
          if (v17)
            goto LABEL_21;
          goto LABEL_27;
        }
      }
      v21 = v20;

      if (!v21)
        goto LABEL_32;
      v22 = qword_1009998B0;
      if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        v35 = v21;
        v36 = 2112;
        v37 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%@ is interetsed in device %@", buf, 0x16u);
      }
      sub_1005ABB60(v2, v21);
      sub_1005AB06C(v2, *(void **)(a1 + 32), v21);
    }
    else
    {
LABEL_27:

LABEL_32:
      v24 = qword_1009998B0;
      if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
      {
        v25 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v35 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "No session interetsed in device %@", buf, 0xCu);
      }
      v21 = 0;
      sub_1005AB06C(v2, *(void **)(a1 + 32), 0);
    }

  }
}

void sub_1005AB8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005AB924(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  char v4;
  void *v5;
  void *v6;
  int v7;
  int v8;
  void *v9;
  uint64_t v10;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;

  v2 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093AA18);
  v3 = off_1009778C0;
  sub_100091AE8(v18, "ANCSAuthorized");
  if ((sub_10000628C((uint64_t)v3, v2, (uint64_t)v18) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093AA18);
    v5 = off_1009778C0;
    sub_100091AE8(__p, "ANCSUnauthorized");
    v4 = sub_10000628C((uint64_t)v5, v2, (uint64_t)__p);
    if (v17 < 0)
      operator delete(__p[0]);
  }
  if ((v19 & 0x80000000) == 0)
  {
    if ((v4 & 1) != 0)
      goto LABEL_21;
LABEL_13:
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093AA18);
    v6 = off_1009778C0;
    sub_100091AE8(v14, "IsHearingAid");
    v7 = sub_10000628C((uint64_t)v6, v2, (uint64_t)v14);
    v8 = v7;
    if (v15 < 0)
    {
      operator delete(v14[0]);
      if (v8)
        goto LABEL_17;
    }
    else if (v7)
    {
LABEL_17:
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093AA18);
      v9 = off_1009778C0;
      sub_100091AE8(v12, "ANCSAuthorized");
      sub_1006576F0((uint64_t)v9, v2, (unsigned __int8 *)v12);
      if (v13 < 0)
        operator delete(v12[0]);
      goto LABEL_21;
    }
    v10 = 1;
    goto LABEL_24;
  }
  operator delete(v18[0]);
  if ((v4 & 1) == 0)
    goto LABEL_13;
LABEL_21:
  v10 = 0;
LABEL_24:

  return v10;
}

void sub_1005ABAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1005ABB60(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectForKey:"));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "valueForKey:", v8));
    v5 = objc_msgSend(v4, "intValue") + 1;

    v6 = *(void **)(a1 + 56);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v5));
    objc_msgSend(v6, "setValue:forKey:", v7, v8);
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
    objc_msgSend(*(id *)(a1 + 56), "setValue:forKey:", v7, v8);
  }

}

void sub_1005ABC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1005ABC60(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005ABD0C;
  block[3] = &unk_100919500;
  v12 = v5;
  v13 = a1;
  v11 = v6;
  v8 = v5;
  v9 = v6;
  dispatch_async(v7, block);

}

void sub_1005ABD0C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16[2];
  char v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = qword_1009998B0;
  v4 = os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v21 = v5;
    v22 = 2112;
    v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received 'appRequestedANCSAuthorizationForDevice' listener for device '%@' and bundleIdentifier '%@'", buf, 0x16u);
  }
  if (sub_1005AB924(v4, *(void **)(a1 + 32)))
  {
    sub_1005ABB60(v2, *(void **)(a1 + 40));
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093AA18);
    v7 = off_1009778C0;
    v8 = *(void **)(a1 + 32);
    sub_100091AE8(__p, "RequiresANCSAuth");
    v9 = sub_10000628C((uint64_t)v7, v8, (uint64_t)__p);
    if (v19 < 0)
      operator delete(__p[0]);
    v10 = qword_1009998B0;
    v11 = os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (v11)
      {
        v12 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v21 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device '%@' already has the tag 'RequiresANCSAuth'", buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        v13 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v21 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device '%@' does not have the tag 'RequiresANCSAuth'. Setting the tag.", buf, 0xCu);
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093AA18);
      v14 = off_1009778C0;
      v15 = *(void **)(a1 + 32);
      sub_100091AE8(v16, "RequiresANCSAuth");
      sub_1006576F0((uint64_t)v14, v15, (unsigned __int8 *)v16);
      if (v17 < 0)
        operator delete(v16[0]);
    }
    sub_1005AB06C(v2, *(void **)(a1 + 32), *(void **)(a1 + 40));
  }
}

void sub_1005ABF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_1005ABF8C(uint64_t a1, void *a2, void *a3)
{
  sub_1005ABC60(a1 - 24, a2, a3);
}

void sub_1005ABF94(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  v6 = a3;
  v7 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005AC040;
  block[3] = &unk_100919500;
  v12 = v5;
  v13 = a1;
  v11 = v6;
  v8 = v5;
  v9 = v6;
  dispatch_async(v7, block);

}

void sub_1005AC040(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = qword_1009998B0;
  if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    v12 = 138412546;
    v13 = v4;
    v14 = 2112;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received 'appSessionChangedInterestInDevice' listener for device '%@' and bundleIdentifier '%@'", (uint8_t *)&v12, 0x16u);
  }
  v6 = sub_1005AC1C8(v2, *(void **)(a1 + 32));
  v7 = qword_1009998B0;
  v8 = os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_QWORD *)(a1 + 40);
      v12 = 138412546;
      v13 = v9;
      v14 = 2112;
      v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Device '%@ is present in authorization queue. Adding '%@' to the bundleIdentifier list for this device.", (uint8_t *)&v12, 0x16u);
    }
    sub_1005ABB60(v2, *(void **)(a1 + 40));
    sub_1005AB06C(v2, *(void **)(a1 + 32), *(void **)(a1 + 40));
  }
  else if (v8)
  {
    v11 = *(_QWORD *)(a1 + 32);
    v12 = 138412290;
    v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Device '%@ is not present in authorization queue. Ignore appSessionChangedInterestInDevice listener", (uint8_t *)&v12, 0xCu);
  }
}

uint64_t sub_1005AC1C8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a2;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = *(id *)(a1 + 48);
  v5 = (uint64_t)objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v14;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v4);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * i), "device", (_QWORD)v13));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "UUIDString"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));
        v11 = objc_msgSend(v9, "isEqualToString:", v10);

        if ((v11 & 1) != 0)
        {
          v5 = 1;
          goto LABEL_11;
        }
      }
      v5 = (uint64_t)objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_11:

  return v5;
}

void sub_1005AC320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1005AC368(uint64_t a1, void *a2, void *a3)
{
  sub_1005ABF94(a1 - 24, a2, a3);
}

void sub_1005AC374(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  _QWORD v5[5];
  uint8_t buf[16];

  v2 = qword_1009998B0;
  if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Registering FrontBoard services", buf, 2u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005AC430;
  v5[3] = &unk_100924A78;
  v5[4] = a1;
  v3 = objc_msgSend(objc_alloc((Class)FBSDisplayLayoutMonitor), "initWithDisplayType:handler:", 0, v5);
  v4 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v3;

}

void sub_1005AC430(uint64_t a1, void *a2)
{
  sub_1005AC438(*(_QWORD *)(a1 + 32), a2);
}

void sub_1005AC438(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = *(NSObject **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005AC4B4;
  v6[3] = &unk_100918868;
  v7 = v3;
  v8 = a1;
  v5 = v3;
  dispatch_async(v4, v6);

}

void sub_1005AC4B4(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  _BOOL4 v19;
  NSObject *v20;
  _BOOL4 v21;
  void *v22;
  void *v23;
  void *v24;
  id obj;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  _BYTE v34[128];

  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v1 = *(_QWORD *)(a1 + 40);
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "elements"));
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v27;
LABEL_3:
    v4 = 0;
    while (1)
    {
      if (*(_QWORD *)v27 != v3)
        objc_enumerationMutation(obj);
      v5 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v4);
      v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
      v7 = *(void **)(v1 + 80);
      *(_QWORD *)(v1 + 80) = v6;

      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
      if (objc_msgSend(v8, "isEqualToString:", CFSTR("com.apple.springboard.home-screen")))
        break;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
      v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("com.apple.Preferences"));

      if (v10)
        goto LABEL_13;
      v11 = *(void **)(v1 + 56);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKey:", v12));
      LOBYTE(v11) = v13 == 0;

      if ((v11 & 1) == 0)
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
        v18 = sub_1005AC8C8(v1, v17);
        v15 = (void *)objc_claimAutoreleasedReturnValue(v18);

        if (v15)
        {
          if (qword_1009778B8 != -1)
            dispatch_once(&qword_1009778B8, &stru_10093A9D8);
          v19 = sub_100030864(qword_1009778B0, v15);
          v20 = qword_1009998B0;
          v21 = os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT);
          if (v19)
          {
            if (v21)
            {
              v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
              *(_DWORD *)buf = 138412290;
              v31 = v22;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "User is in %@", buf, 0xCu);

            }
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
            sub_1005AA8A0(v1, v15, v23);

            *(_WORD *)(v1 + 72) = 256;
          }
          else if (v21)
          {
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleIdentifier"));
            *(_DWORD *)buf = 138412546;
            v31 = v24;
            v32 = 2112;
            v33 = v15;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "User is in %@ but the device '%@' is not paired yet. Not showing authorization alert", buf, 0x16u);

          }
        }
        goto LABEL_26;
      }
      *(_WORD *)(v1 + 72) = 0;
      if (v2 == (id)++v4)
      {
        v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
        if (v2)
          goto LABEL_3;
        goto LABEL_27;
      }
    }

LABEL_13:
    v14 = qword_1009998B0;
    if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "User is in SpringBoard or Settings App.", buf, 2u);
    }
    if (objc_msgSend(*(id *)(v1 + 48), "count"))
    {
      *(_WORD *)(v1 + 72) = 1;
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 48), "objectAtIndexedSubscript:", 0));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "device"));
      sub_1005AA8A0(v1, v16, 0);

LABEL_26:
    }
  }
LABEL_27:

}

void sub_1005AC850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id sub_1005AC8C8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *j;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  _BYTE v24[128];

  v3 = a2;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v4 = *(id *)(a1 + 48);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
        v15 = 0u;
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bundleIdentifiers", 0));
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
        if (v10)
        {
          v11 = *(_QWORD *)v16;
          while (2)
          {
            for (j = 0; j != v10; j = (char *)j + 1)
            {
              if (*(_QWORD *)v16 != v11)
                objc_enumerationMutation(v9);
              if (objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)j), "isEqualToString:", v3))
              {
                v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "device"));

                goto LABEL_19;
              }
            }
            v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
            if (v10)
              continue;
            break;
          }
        }

      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
      v13 = 0;
    }
    while (v5);
  }
  else
  {
    v13 = 0;
  }
LABEL_19:

  return v13;
}

void sub_1005ACA8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1005ACACC(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  UserNotification *v9;
  void *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  const __CFString *v21;
  uint8_t *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  CFUserNotificationRef v39;
  CFRunLoopSourceRef RunLoopSource;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  void *__p[2];
  unsigned __int8 v61;
  _QWORD v62[4];
  _QWORD v63[4];
  uint8_t buf[32];

  v2 = a1[6];
  v3 = qword_1009998B0;
  if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[4];
    v5 = a1[5];
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v4;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "In showAuthorizationAlert %@ and bundle identifier '%@'", buf, 0x16u);
  }
  if (!*(_QWORD *)(v2 + 64))
  {
    v6 = qword_1009998B0;
    if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
    {
      v7 = a1[4];
      v8 = a1[5];
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Display ANCS Authorization alert for %@ and bundle identifier '%@'", buf, 0x16u);
    }
    v9 = -[UserNotification initWithType:device:bundleID:]([UserNotification alloc], "initWithType:device:bundleID:", 5, a1[4], a1[5]);
    v10 = *(void **)(v2 + 64);
    *(_QWORD *)(v2 + 64) = v9;

    memset(buf, 0, 24);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093AA18);
    v11 = off_1009778C0;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "device"));
    sub_10000602C((uint64_t)v11, v12, (uint64_t)__p);
    if ((v61 & 0x80u) == 0)
      v13 = v61;
    else
      v13 = (unint64_t)__p[1];
    if (v13)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093AA18);
      v14 = off_1009778C0;
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "device"));
      sub_10000602C((uint64_t)v14, v15, (uint64_t)buf);
    }
    else
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093AA18);
      v16 = off_1009778C0;
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "device"));
      v17 = sub_1000589DC((uint64_t)v16, v15, 0);
      v18 = sub_100021770(v17);
      v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v18));
      sub_100091AE8(buf, (char *)objc_msgSend(v19, "UTF8String"));

    }
    if ((char)v61 < 0)
      operator delete(__p[0]);

    v20 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 360))(v20))
      v21 = CFSTR("IPAD");
    else
      v21 = CFSTR("IPHONE");
    if ((buf[23] & 0x80u) == 0)
      v22 = buf;
    else
      v22 = *(uint8_t **)buf;
    v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("ANCS_TITLE_"), "stringByAppendingString:", v21));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("ANCS_AUTHORIZATION_MESSAGE_"), "stringByAppendingString:", v21));
    v25 = sub_100355F10(v23, v23);
    v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    v59 = 0;
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithValidatedFormat:validFormatSpecifiers:error:](NSString, "stringWithValidatedFormat:validFormatSpecifiers:error:", v26, CFSTR("%@"), &v59, v57));
    v28 = v59;

    if (v27)
    {
      v29 = sub_100355F10(v24, v24);
      v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      v58 = v28;
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithValidatedFormat:validFormatSpecifiers:error:](NSString, "stringWithValidatedFormat:validFormatSpecifiers:error:", v30, CFSTR("%@"), &v58, v57));
      v56 = v58;

      if (v31)
      {
        v32 = sub_100355F10(CFSTR("AUTHORIZE"), CFSTR("Allow"));
        v55 = (void *)objc_claimAutoreleasedReturnValue(v32);
        v33 = sub_100355F10(CFSTR("UNAUTHORIZE"), CFSTR("Don't Allow"));
        v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
        v35 = v55;
        v36 = v34;
        v62[0] = kCFUserNotificationAlertTopMostKey;
        v62[1] = SBUserNotificationAllowMenuButtonDismissal;
        v63[0] = &__kCFBooleanTrue;
        v63[1] = &__kCFBooleanTrue;
        v62[2] = SBUserNotificationDismissOnLock;
        v62[3] = kCFUserNotificationAlertHeaderKey;
        v63[2] = &__kCFBooleanTrue;
        v63[3] = v27;
        v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v63, v62, 4));
        v38 = objc_msgSend(v37, "mutableCopy");

        objc_msgSend(v38, "setObject:forKey:", v31, kCFUserNotificationAlertMessageKey);
        objc_msgSend(v38, "setObject:forKey:", v35, kCFUserNotificationDefaultButtonTitleKey);
        if (v36)
          objc_msgSend(v38, "setObject:forKey:", v36, kCFUserNotificationAlternateButtonTitleKey);
        v39 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0x10003uLL, 0, (CFDictionaryRef)v38);
        objc_msgSend(*(id *)(v2 + 64), "setNotification:", v39);
        CFRelease(v39);
        RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v39, (CFUserNotificationCallBack)sub_1005AD1B0, 0);
        objc_msgSend(*(id *)(v2 + 64), "setRunLoopSource:", RunLoopSource);
        CFRelease(RunLoopSource);

      }
      else
      {
        v48 = qword_1009998B0;
        if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_ERROR))
          sub_10070944C((uint64_t)v56, v48, v49, v50, v51, v52, v53, v54);
      }

      v28 = v56;
    }
    else
    {
      v41 = qword_1009998B0;
      if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_ERROR))
        sub_10070944C((uint64_t)v28, v41, v42, v43, v44, v45, v46, v47);
    }

    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
  }
}

void sub_1005AD098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  if (*(char *)(v28 - 105) < 0)
    operator delete(*(void **)(v28 - 128));
  _Unwind_Resume(a1);
}

void sub_1005AD1B0(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _QWORD v4[6];

  if (qword_10097B670 != -1)
    dispatch_once(&qword_10097B670, &stru_10093A978);
  v3 = *((_QWORD *)off_10097B668 + 5);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1005AD240;
  v4[3] = &unk_100918090;
  v4[4] = off_10097B668;
  v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_1005AD240(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27[2];
  char v28;
  void *__p[2];
  char v30;
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_1009998B0;
  if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "device"));
    v5 = (void *)v4;
    v6 = *(_QWORD *)(a1 + 40);
    v7 = "unknown";
    if (v6 == 1)
      v7 = "unauthorize";
    *(_DWORD *)buf = 138412802;
    v32 = v4;
    if (!v6)
      v7 = "authorize";
    v33 = 2082;
    v34 = v7;
    v35 = 2048;
    v36 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "User responded to authorization notification for device \"%@\" with %{public}s (%ld) button", buf, 0x20u);

  }
  v8 = *(_QWORD *)(a1 + 40);
  if (v8 == 1)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093AA18);
    v15 = off_1009778C0;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "device"));
    sub_100653B18((uint64_t)v15, v16, CFSTR("RequiresANCSAuth"));

    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093AA18);
    v17 = off_1009778C0;
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "device"));
    sub_100091AE8(v27, "ANCSUnauthorized");
    sub_1006576F0((uint64_t)v17, v18, (unsigned __int8 *)v27);
    if (v28 < 0)
      operator delete(v27[0]);

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "device"));
    sub_1005AAA88(v2, v19);

    v14 = 1;
  }
  else if (v8)
  {
    v20 = qword_1009998B0;
    if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_ERROR))
      sub_1007094B4(v20);
    v14 = 0xFFFF;
  }
  else
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093AA18);
    v9 = off_1009778C0;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "device"));
    sub_100653B18((uint64_t)v9, v10, CFSTR("RequiresANCSAuth"));

    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093AA18);
    v11 = off_1009778C0;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "device"));
    sub_100091AE8(__p, "ANCSAuthorized");
    sub_1006576F0((uint64_t)v11, v12, (unsigned __int8 *)__p);
    if (v30 < 0)
      operator delete(__p[0]);

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "device"));
    sub_1005AAA88(v2, v13);

    v14 = 0;
  }
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "bundleID"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "device"));
  sub_1005AD690(v2, v22, 0, 0xFFFF, v14);

  v23 = *(void **)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;

  if (objc_msgSend(*(id *)(v2 + 48), "count"))
  {
    if (*(_BYTE *)(v2 + 73))
    {
      v24 = sub_1005AC8C8(v2, v21);
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      if (v25)
        sub_1005AA8A0(v2, v25, v21);
      goto LABEL_32;
    }
    if (*(_BYTE *)(v2 + 72))
    {
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 48), "objectAtIndexedSubscript:", 0));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "device"));
      sub_1005AA8A0(v2, v26, 0);

LABEL_32:
    }
  }

}

void sub_1005AD624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1005AD690(uint64_t a1, void *a2, int a3, int a4, int a5)
{
  id v9;
  NSObject *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;

  v9 = a2;
  v10 = *(NSObject **)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1005AD730;
  v12[3] = &unk_10093A958;
  v13 = v9;
  v14 = a1;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v11 = v9;
  dispatch_async(v10, v12);

}

void sub_1005AD730(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  std::string __p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[32];
  __int128 v21;
  __int128 v22;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093AA18);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  sub_10000602C((uint64_t)off_1009778C0, *(void **)(a1 + 32), (uint64_t)&v17);
  if (SHIBYTE(v19) < 0)
  {
    if (v18)
    {
      v3 = v17;
      goto LABEL_8;
    }
LABEL_10:
    v7 = 0;
    goto LABEL_13;
  }
  if (!HIBYTE(v19))
    goto LABEL_10;
  v3 = &v17;
LABEL_8:
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v3, +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100993438, "objectForKey:", v4));
  v6 = v5;
  if (v5)
    v7 = objc_msgSend(v5, "intValue");
  else
    v7 = 0xFFFF;

LABEL_13:
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093A9B8);
  v8 = off_1009778A0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 64), "device"));
  sub_100030BCC(buf, v9);
  sub_100069F08((uint64_t)v8, buf);

  v10 = qword_1009998B0;
  if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
  {
    v11 = &v17;
    if (v19 < 0)
      v11 = v17;
    v12 = *(_DWORD *)(a1 + 48);
    v13 = *(_DWORD *)(a1 + 52);
    v14 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v12;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v13;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v14;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v21) = v7;
    WORD2(v21) = 1024;
    *(_DWORD *)((char *)&v21 + 6) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Push AWD stats ANCS for %{public}s : triggerLoc: %u, prevPermission: %u, currPermission: %u, deviceCategory = %u, connectedTransport = %u", buf, 0x2Au);
  }
  v21 = 0u;
  v22 = 0u;
  memset(buf, 0, sizeof(buf));
  if (v19 >= 0)
    v15 = (char *)&v17;
  else
    v15 = (char *)v17;
  sub_100091AE8(&__p, v15);
  sub_1002F5DE4(buf, &__p, 1, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 56), v7, 0, 0xFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (qword_10097AC48 != -1)
    dispatch_once(&qword_10097AC48, &stru_10093AA38);
  sub_10006544C(qword_10097AC40, (uint64_t)buf);
  if ((char)buf[31] < 0)
    operator delete(*(void **)&buf[8]);
  if (SHIBYTE(v19) < 0)
    operator delete(v17);
}

void sub_1005ADA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  void *v30;

  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1005ADA88(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  id v3;
  id v4;
  void *i;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void **v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  const char *v21;
  void *v22;
  void *v23;
  int v24;
  const char *v25;
  void *v26;
  void *v27;
  int v28;
  const char *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id obj;
  id v35;
  uint64_t v36;
  id v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;
  void *__p[2];
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 buf;
  unsigned __int8 v51;
  uint8_t v52[4];
  void **v53;
  __int16 v54;
  void *v55;
  _BYTE v56[128];

  v32 = a1;
  v2 = qword_1009998B0;
  if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ---------------- ANCS Authorization Manager ----------------", (uint8_t *)&buf, 2u);
    v2 = qword_1009998B0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(v32 + 48), "count");
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: pendingAuthorizationDevicesQueue: %ld devices", (uint8_t *)&buf, 0xCu);
  }
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  obj = *(id *)(v32 + 48);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
  if (v4)
  {
    v36 = *(_QWORD *)v47;
    do
    {
      v37 = v4;
      for (i = 0; i != v37; i = (char *)i + 1)
      {
        if (*(_QWORD *)v47 != v36)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)i);
        v7 = qword_1009998B0;
        if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093AA18);
          v8 = off_1009778C0;
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "device", v32));
          sub_10000602C((uint64_t)v8, v9, (uint64_t)&buf);
          if ((v51 & 0x80u) == 0)
            v10 = v51;
          else
            v10 = *((_QWORD *)&buf + 1);
          if (v10)
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093AA18);
            v11 = off_1009778C0;
            v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "device"));
            sub_10000602C((uint64_t)v11, v1, (uint64_t)__p);
            if (v45 >= 0)
              v12 = __p;
            else
              v12 = (void **)__p[0];
          }
          else
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093AA18);
            v13 = off_1009778C0;
            v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "device"));
            v14 = sub_1000589DC((uint64_t)v13, v33, 0);
            v15 = sub_100021770(v14);
            v35 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v15));
            v12 = (void **)objc_msgSend(v35, "UTF8String");
          }
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "device"));
          *(_DWORD *)v52 = 136315394;
          v53 = v12;
          v54 = 2112;
          v55 = v16;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump: Device: %s (%@)", v52, 0x16u);

          if (v10)
          {
            if (v45 < 0)
              operator delete(__p[0]);

          }
          else
          {

          }
          if ((char)v51 < 0)
            operator delete((void *)buf);

          v7 = qword_1009998B0;
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "bundleIdentifiers"));
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v17;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:    BundleIdentifiers: %@", (uint8_t *)&buf, 0xCu);

          v7 = qword_1009998B0;
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093AA18);
          v18 = off_1009778C0;
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "device", v32));
          sub_100091AE8(v42, "RequiresANCSAuth");
          v20 = sub_10000628C((uint64_t)v18, v19, (uint64_t)v42);
          v21 = "No";
          if (v20)
            v21 = "Yes";
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v21;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:    RequiresANCSAuth: %s", (uint8_t *)&buf, 0xCu);
          if (v43 < 0)
            operator delete(v42[0]);

          v7 = qword_1009998B0;
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093AA18);
          v22 = off_1009778C0;
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "device", v32));
          sub_100091AE8(v40, "ANCSAuthorized");
          v24 = sub_10000628C((uint64_t)v22, v23, (uint64_t)v40);
          v25 = "No";
          if (v24)
            v25 = "Yes";
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v25;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:    ANCSAuthorized: %s", (uint8_t *)&buf, 0xCu);
          if (v41 < 0)
            operator delete(v40[0]);

          v7 = qword_1009998B0;
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093AA18);
          v26 = off_1009778C0;
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "device", v32));
          sub_100091AE8(v38, "ANCSUnauthorized");
          v28 = sub_10000628C((uint64_t)v26, v27, (uint64_t)v38);
          v29 = "No";
          if (v28)
            v29 = "Yes";
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v29;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:    ANCSUnauthorized: %s", (uint8_t *)&buf, 0xCu);
          if (v39 < 0)
            operator delete(v38[0]);

        }
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
    }
    while (v4);
  }

  v30 = qword_1009998B0;
  if (os_log_type_enabled((os_log_t)qword_1009998B0, OS_LOG_TYPE_DEFAULT))
  {
    v31 = *(_QWORD *)(v32 + 56);
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "statedump:    appBundleIndentifiers: %@", (uint8_t *)&buf, 0xCu);
  }
}

void sub_1005AE154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{

  _Unwind_Resume(a1);
}

void sub_1005AE29C(id *a1)
{
  sub_1005AE5E0(a1);
  operator delete();
}

void sub_1005AE2E8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_1005AE370(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1005AE370(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1005AE574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005AE5AC(id a1)
{
  operator new();
}

id *sub_1005AE5E0(id *a1)
{

  return a1;
}

void sub_1005AE628(id a1)
{
  operator new();
}

void sub_1005AE668()
{
  operator delete();
}

void sub_1005AE68C(id a1)
{
  operator new();
}

void sub_1005AE6CC()
{
  operator delete();
}

void sub_1005AE6F0(id a1)
{
  operator new();
}

void sub_1005AE730()
{
  operator delete();
}

void sub_1005AE754(id a1)
{
  operator new();
}

void sub_1005AE794()
{
  operator delete();
}

void sub_1005AE7B8(id a1)
{
  operator new();
}

void sub_1005AE7F8()
{
  operator delete();
}

void sub_1005AE81C(id a1)
{
  operator new();
}

uint64_t sub_1005AE848(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093AA68;
  sub_1000160D0(a1 + 8);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  sub_1000160D0(a1 + 136);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  return a1;
}

void sub_1005AE8DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;

  sub_10001A82C(v2, *v4);
  sub_10001A82C(v3, *v5);
  sub_100069BDC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AE90C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD v14[2];

  *(_QWORD *)a1 = off_10093AA68;
  sub_1005AEB14(a1, 0);
  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 8);
  v3 = *(_QWORD **)(a1 + 88);
  if (v3 != (_QWORD *)(a1 + 96))
  {
    do
    {
      v4 = v3[5];
      if (v4)
      {
        nullsub_90(v4, v2);
        operator delete();
      }
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != (_QWORD *)(a1 + 96));
  }
  v8 = *(_QWORD **)(a1 + 112);
  if (v8 != (_QWORD *)(a1 + 120))
  {
    do
    {
      v9 = v8[5];
      if (v9)
      {
        sub_1005B1314(v8[5], *(_QWORD **)(v9 + 8));
        operator delete();
      }
      v10 = (_QWORD *)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v8[2];
          v7 = *v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v7);
      }
      v8 = v11;
    }
    while (v11 != (_QWORD *)(a1 + 120));
  }
  sub_10001A82C(a1 + 224, *(_QWORD **)(a1 + 232));
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_100034234((uint64_t)v14);
  sub_10001A82C(a1 + 224, *(_QWORD **)(a1 + 232));
  v12 = *(void **)(a1 + 200);
  if (v12)
  {
    *(_QWORD *)(a1 + 208) = v12;
    operator delete(v12);
  }
  sub_100069BDC(a1 + 136);
  sub_10001A82C(a1 + 112, *(_QWORD **)(a1 + 120));
  sub_10001A82C(a1 + 88, *(_QWORD **)(a1 + 96));
  sub_100069BDC(a1 + 8);
  return a1;
}

void sub_1005AEAC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  sub_10001A82C(v1 + 224, *(_QWORD **)(v1 + 232));
  v3 = *(void **)(v1 + 200);
  if (v3)
  {
    *(_QWORD *)(v1 + 208) = v3;
    operator delete(v3);
  }
  sub_100069BDC(v1 + 136);
  sub_10001A82C(v1 + 112, *(_QWORD **)(v1 + 120));
  sub_10001A82C(v1 + 88, *(_QWORD **)(v1 + 96));
  sub_100069BDC(v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AEB14(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  NSObject *v9;
  uint8_t v11[16];
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 8);
  if (*(_BYTE *)(a1 + 72))
  {
    if (a2)
    {
      v4 = *(_QWORD **)(a1 + 232);
      if (v4)
      {
        v5 = a1 + 232;
        do
        {
          v6 = v4[4];
          v7 = v6 >= a2;
          if (v6 >= a2)
            v8 = v4;
          else
            v8 = v4 + 1;
          if (v7)
            v5 = (uint64_t)v4;
          v4 = (_QWORD *)*v8;
        }
        while (*v8);
        if (v5 != a1 + 232 && *(_QWORD *)(v5 + 32) <= a2 && *(_BYTE *)(v5 + 40))
          *(_BYTE *)(v5 + 40) = 0;
      }
    }
    else
    {
      v9 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Stopping pairing agent...", v11, 2u);
      }
      if (*(_QWORD *)(a1 + 80))
      {
        sub_100034264((uint64_t)v12);
        sub_1005AF38C(a1, 161);
        sub_100034188((uint64_t)v12);
      }
      *(_BYTE *)(a1 + 72) = 0;
      sub_100034264((uint64_t)v12);
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_10093ABB8);
      sub_1005B6CEC((uint64_t)off_100978148);
    }
    sub_1005AF03C(a1, 1u, 0, 0, a2);
  }
  sub_100034234((uint64_t)v12);
  return 0;
}

void sub_1005AEC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005AEC94(uint64_t a1)
{
  sub_1005AE90C(a1);
  operator delete();
}

uint64_t sub_1005AECB8(uint64_t a1, unint64_t *a2, _OWORD *a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t **v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[2];
  unint64_t *v18;
  unint64_t *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  _OWORD v25[3];

  v17[1] = 0;
  v18 = a2;
  v17[0] = 0;
  sub_10003415C((uint64_t)v17, a1 + 8);
  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 136);
  v9 = *(unint64_t ***)(a1 + 200);
  v8 = *(_QWORD *)(a1 + 208);
  v10 = a3[1];
  v25[0] = *a3;
  v25[1] = v10;
  v25[2] = a3[2];
  if (v9 != (unint64_t **)v8)
  {
    while (*v9 != a2 || memcmp(v25, v9 + 1, 0x30uLL))
    {
      v9 += 9;
      if (v9 == (unint64_t **)v8)
        goto LABEL_7;
    }
  }
  if (v9 == (unint64_t **)v8)
  {
LABEL_7:
    v11 = a3[1];
    v20 = *a3;
    v21 = v11;
    v22 = a3[2];
    v19 = a2;
    v23 = -1;
    v24 = a4;
    if (v8 >= *(_QWORD *)(a1 + 216))
    {
      v14 = sub_1005B135C((uint64_t *)(a1 + 200), (uint64_t)&v19);
    }
    else
    {
      *(_QWORD *)v8 = a2;
      v12 = v20;
      v13 = v21;
      *(_OWORD *)(v8 + 40) = v22;
      *(_OWORD *)(v8 + 24) = v13;
      *(_OWORD *)(v8 + 8) = v12;
      *(_DWORD *)(v8 + 56) = -1;
      *(_QWORD *)(v8 + 64) = a4;
      v14 = v8 + 72;
    }
    *(_QWORD *)(a1 + 208) = v14;
  }
  v19 = (unint64_t *)&v18;
  *((_BYTE *)sub_100474FBC((uint64_t **)(a1 + 224), (unint64_t *)&v18, (uint64_t)&unk_100740F58, &v19) + 40) = 0;
  sub_100034234((uint64_t)v16);
  sub_100034234((uint64_t)v17);
  return 0;
}

void sub_1005AEE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AEE60(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 136);
  v4 = sub_1005B15C8(*(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), a2);
  sub_1005B1584(a1 + 200, v4, *(_QWORD *)(a1 + 208));
  v5 = *(_QWORD **)(a1 + 232);
  if (v5)
  {
    v6 = a1 + 232;
    do
    {
      v7 = v5[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = v5;
      else
        v9 = v5 + 1;
      if (v8)
        v6 = (uint64_t)v5;
      v5 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != a1 + 232 && *(_QWORD *)(v6 + 32) <= a2)
    {
      if (*(_BYTE *)(v6 + 40))
        sub_1005AEB14(a1, a2);
      sub_1000040CC((uint64_t **)(a1 + 224), (uint64_t *)v6);
      operator delete((void *)v6);
    }
  }
  sub_100034234((uint64_t)v11);
  return 0;
}

void sub_1005AEF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AEF50(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 8);
  v4 = *(_QWORD **)(a1 + 232);
  if (!v4)
    goto LABEL_12;
  v5 = a1 + 232;
  do
  {
    v6 = v4[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v7)
      v5 = (uint64_t)v4;
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != a1 + 232 && *(_QWORD *)(v5 + 32) <= a2)
  {
    if (*(_BYTE *)(v5 + 40))
    {
      v9 = 160;
    }
    else
    {
      *(_BYTE *)(v5 + 40) = 1;
      if (!*(_BYTE *)(a1 + 72))
      {
        *(_BYTE *)(a1 + 72) = 1;
        *(_QWORD *)(a1 + 80) = 0;
      }
      sub_100034264((uint64_t)v11);
      sub_1005AF03C(a1, 0, 0, 0, a2);
      v9 = 0;
    }
  }
  else
  {
LABEL_12:
    v9 = 7;
  }
  sub_100034234((uint64_t)v11);
  return v9;
}

void sub_1005AF028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AF03C(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5)
{
  const char *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint8_t buf[24];

  if (a2 > 3)
    v9 = "unknown";
  else
    v9 = off_10093AC38[a2];
  v10 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Sending '%{public}s' event with result %d", buf, 0x12u);
  }
  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 136);
  v11 = *(_QWORD *)(a1 + 200);
  v12 = *(_QWORD *)(a1 + 208);
  if (v11 == v12)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_1007094F4();
    v16 = 106;
  }
  else
  {
    memset(buf, 0, sizeof(buf));
    sub_1005B197C((char *)buf, v11, v12, 0x8E38E38E38E38E39 * ((v12 - v11) >> 3));
    sub_100034264((uint64_t)v18);
    v13 = *(unint64_t **)buf;
    if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
    {
      do
      {
        if (v13[1] && (!a5 || *v13 == a5))
        {
          if (a3)
          {
            if (qword_1009778E8 != -1)
              dispatch_once(&qword_1009778E8, &stru_10093ABD8);
            v14 = sub_10046F750((uint64_t)off_1009778E0, *v13, a3);
          }
          else
          {
            v14 = 4294901761;
          }
          if (qword_100977B50 != -1)
            dispatch_once(&qword_100977B50, &stru_10093ABF8);
          if (sub_100021398(qword_100977B48, *v13) && v14)
          {
            if (qword_10097AB48 != -1)
              dispatch_once(&qword_10097AB48, &stru_10093AC18);
            operator new();
          }
          sub_100034188((uint64_t)v18);
          v15 = sub_1005B15C8(*(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *v13);
          sub_1005B1584(a1 + 200, v15, *(_QWORD *)(a1 + 208));
          sub_100034264((uint64_t)v18);
        }
        v13 += 9;
      }
      while (v13 != *(unint64_t **)&buf[8]);
      v13 = *(unint64_t **)buf;
    }
    if (v13)
    {
      *(_QWORD *)&buf[8] = v13;
      operator delete(v13);
    }
    v16 = 0;
  }
  sub_100034234((uint64_t)v18);
  return v16;
}

void sub_1005AF350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AF38C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v8[16];
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 8);
  if (*(_BYTE *)(a1 + 72))
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (v4)
    {
      *(_QWORD *)(a1 + 80) = 0;
      sub_100034264((uint64_t)v9);
      v5 = sub_1005AF03C(a1, 3u, v4, a2, 0);
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v6 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Pairing agent is not started - ignoring pairing attempt", v8, 2u);
    }
    v5 = 162;
  }
  sub_100034234((uint64_t)v9);
  return v5;
}

void sub_1005AF464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AF478(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  NSObject *v6;
  void **v7;
  uint64_t v8;
  NSObject *v9;
  void *__p[2];
  char v12;
  _QWORD v13[2];
  uint8_t buf[4];
  void **v15;

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 8);
  if (*(_BYTE *)(a1 + 72))
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (v4)
      v5 = v4 == a2;
    else
      v5 = 1;
    if (!v5)
    {
      sub_100034264((uint64_t)v13);
      v6 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(*(_QWORD *)(a1 + 80), __p);
        if (v12 >= 0)
          v7 = __p;
        else
          v7 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v15 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Pairing already in progress for device %{public}s", buf, 0xCu);
        if (v12 < 0)
          operator delete(__p[0]);
      }
      sub_1005AF38C(a1, 161);
      sub_100034188((uint64_t)v13);
    }
    *(_QWORD *)(a1 + 80) = a2;
    sub_100034264((uint64_t)v13);
    v8 = sub_1005AF03C(a1, 2u, a2, 0, 0);
  }
  else
  {
    v9 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Pairing agent is not started - ignoring pairing attempt", (uint8_t *)__p, 2u);
    }
    v8 = 162;
  }
  sub_100034234((uint64_t)v13);
  return v8;
}

void sub_1005AF618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AF638(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 8);
  if (!*(_BYTE *)(a1 + 72))
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_100709520();
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_10070954C();
LABEL_8:
    v3 = 162;
    goto LABEL_9;
  }
  sub_100034264((uint64_t)v5);
  v3 = sub_1005AF710(a1, v2);
LABEL_9:
  sub_100034234((uint64_t)v5);
  return v3;
}

void sub_1005AF6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AF710(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  unint64_t *v14;
  uint64_t v15;
  uint8_t buf[24];

  v4 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, &__p);
    v5 = v15 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'pincode request' pairing event for device %{public}s", buf, 0xCu);
    if (SHIBYTE(v15) < 0)
      operator delete(__p);
  }
  *(_OWORD *)buf = 0uLL;
  sub_10003415C((uint64_t)buf, a1 + 136);
  v6 = *(_QWORD *)(a1 + 200);
  v7 = *(_QWORD *)(a1 + 208);
  if (v6 == v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_1007094F4();
    v11 = 106;
  }
  else
  {
    __p = 0;
    v14 = 0;
    v15 = 0;
    sub_1005B197C((char *)&__p, v6, v7, 0x8E38E38E38E38E39 * ((v7 - v6) >> 3));
    sub_100034264((uint64_t)buf);
    v8 = (unint64_t *)__p;
    if (__p != v14)
    {
      do
      {
        if (v8[2])
        {
          if (a2)
          {
            if (qword_1009778E8 != -1)
              dispatch_once(&qword_1009778E8, &stru_10093ABD8);
            v9 = sub_10046F750((uint64_t)off_1009778E0, *v8, a2);
          }
          else
          {
            v9 = 4294901761;
          }
          if (qword_100977B50 != -1)
            dispatch_once(&qword_100977B50, &stru_10093ABF8);
          if (sub_100021398(qword_100977B48, *v8) && v9)
          {
            if (qword_10097AB48 != -1)
              dispatch_once(&qword_10097AB48, &stru_10093AC18);
            operator new();
          }
          sub_100034188((uint64_t)buf);
          v10 = sub_1005B15C8(*(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *v8);
          sub_1005B1584(a1 + 200, v10, *(_QWORD *)(a1 + 208));
          sub_100034264((uint64_t)buf);
        }
        v8 += 9;
      }
      while (v8 != v14);
      v8 = (unint64_t *)__p;
    }
    if (v8)
    {
      v14 = v8;
      operator delete(v8);
    }
    v11 = 0;
  }
  sub_100034234((uint64_t)buf);
  return v11;
}

void sub_1005AFA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AFA4C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 8);
  if (!*(_BYTE *)(a1 + 72))
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_100709520();
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a1 + 80);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_10070954C();
LABEL_8:
    v7 = 162;
    goto LABEL_9;
  }
  sub_100034264((uint64_t)v9);
  v7 = sub_1005AFB38(a1, v6, a2, a3);
LABEL_9:
  sub_100034234((uint64_t)v9);
  return v7;
}

void sub_1005AFB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AFB38(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v7;
  char *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  unint64_t *v18;
  uint64_t v19;
  _BYTE buf[22];

  v7 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v8 = a4 ? "numeric comparison" : "user confirmation";
    sub_10043E5F8(a2, &__p);
    v9 = v19 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending '%{public}s request' pairing event for device %{public}s", buf, 0x16u);
    if (SHIBYTE(v19) < 0)
      operator delete(__p);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_10003415C((uint64_t)buf, a1 + 136);
  v10 = *(_QWORD *)(a1 + 200);
  v11 = *(_QWORD *)(a1 + 208);
  if (v10 == v11)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_1007094F4();
    v15 = 106;
  }
  else
  {
    __p = 0;
    v18 = 0;
    v19 = 0;
    sub_1005B197C((char *)&__p, v10, v11, 0x8E38E38E38E38E39 * ((v11 - v10) >> 3));
    sub_100034264((uint64_t)buf);
    v12 = (unint64_t *)__p;
    if (__p != v18)
    {
      do
      {
        if (v12[2])
        {
          if (a2)
          {
            if (qword_1009778E8 != -1)
              dispatch_once(&qword_1009778E8, &stru_10093ABD8);
            v13 = sub_10046F750((uint64_t)off_1009778E0, *v12, a2);
          }
          else
          {
            v13 = 4294901761;
          }
          if (qword_100977B50 != -1)
            dispatch_once(&qword_100977B50, &stru_10093ABF8);
          if (sub_100021398(qword_100977B48, *v12) && v13)
          {
            if (qword_10097AB48 != -1)
              dispatch_once(&qword_10097AB48, &stru_10093AC18);
            operator new();
          }
          sub_100034188((uint64_t)buf);
          v14 = sub_1005B15C8(*(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *v12);
          sub_1005B1584(a1 + 200, v14, *(_QWORD *)(a1 + 208));
          sub_100034264((uint64_t)buf);
        }
        v12 += 9;
      }
      while (v12 != v18);
      v12 = (unint64_t *)__p;
    }
    if (v12)
    {
      v18 = v12;
      operator delete(v12);
    }
    v15 = 0;
  }
  sub_100034234((uint64_t)buf);
  return v15;
}

void sub_1005AFE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AFEA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 8);
  if (!*(_BYTE *)(a1 + 72))
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_100709520();
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_10070954C();
LABEL_8:
    v3 = 162;
    goto LABEL_9;
  }
  sub_100034264((uint64_t)v5);
  v3 = sub_1005AFF88(a1, v2);
LABEL_9:
  sub_100034234((uint64_t)v5);
  return v3;
}

void sub_1005AFF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AFF88(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  unint64_t *v14;
  uint64_t v15;
  uint8_t buf[24];

  v4 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, &__p);
    v5 = v15 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'passkey display request' pairing event for device %{public}s", buf, 0xCu);
    if (SHIBYTE(v15) < 0)
      operator delete(__p);
  }
  *(_OWORD *)buf = 0uLL;
  sub_10003415C((uint64_t)buf, a1 + 136);
  v6 = *(_QWORD *)(a1 + 200);
  v7 = *(_QWORD *)(a1 + 208);
  if (v6 == v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_1007094F4();
    v11 = 106;
  }
  else
  {
    __p = 0;
    v14 = 0;
    v15 = 0;
    sub_1005B197C((char *)&__p, v6, v7, 0x8E38E38E38E38E39 * ((v7 - v6) >> 3));
    sub_100034264((uint64_t)buf);
    v8 = (unint64_t *)__p;
    if (__p != v14)
    {
      do
      {
        if (v8[2])
        {
          if (a2)
          {
            if (qword_1009778E8 != -1)
              dispatch_once(&qword_1009778E8, &stru_10093ABD8);
            v9 = sub_10046F750((uint64_t)off_1009778E0, *v8, a2);
          }
          else
          {
            v9 = 4294901761;
          }
          if (qword_100977B50 != -1)
            dispatch_once(&qword_100977B50, &stru_10093ABF8);
          if (sub_100021398(qword_100977B48, *v8) && v9)
          {
            if (qword_10097AB48 != -1)
              dispatch_once(&qword_10097AB48, &stru_10093AC18);
            operator new();
          }
          sub_100034188((uint64_t)buf);
          v10 = sub_1005B15C8(*(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *v8);
          sub_1005B1584(a1 + 200, v10, *(_QWORD *)(a1 + 208));
          sub_100034264((uint64_t)buf);
        }
        v8 += 9;
      }
      while (v8 != v14);
      v8 = (unint64_t *)__p;
    }
    if (v8)
    {
      v14 = v8;
      operator delete(v8);
    }
    v11 = 0;
  }
  sub_100034234((uint64_t)buf);
  return v11;
}

void sub_1005B0288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B02C4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, a1 + 8);
  v5 = *(_QWORD **)(a1 + 96);
  if (v5)
  {
    v6 = (uint64_t *)(a1 + 96);
    do
    {
      v7 = v5[4];
      v8 = v7 >= (unint64_t)a2;
      if (v7 >= (unint64_t)a2)
        v9 = v5;
      else
        v9 = v5 + 1;
      if (v8)
        v6 = v5;
      v5 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != (uint64_t *)(a1 + 96) && v6[4] <= (unint64_t)a2)
    {
      v10 = v6[5];
      if (v10)
      {
        nullsub_90(v10, v4);
        operator delete();
      }
      sub_1000040CC((uint64_t **)(a1 + 88), v6);
      operator delete(v6);
    }
  }
  v13 = *(_QWORD **)(a1 + 120);
  v12 = (uint64_t *)(a1 + 120);
  v11 = v13;
  if (v13)
  {
    v14 = (uint64_t **)(v12 - 1);
    v15 = v12;
    do
    {
      v16 = v11[4];
      v17 = v16 >= (unint64_t)a2;
      if (v16 >= (unint64_t)a2)
        v18 = v11;
      else
        v18 = v11 + 1;
      if (v17)
        v15 = v11;
      v11 = (_QWORD *)*v18;
    }
    while (*v18);
    if (v15 != v12 && v15[4] <= (unint64_t)a2)
    {
      v19 = v15[5];
      if (v19)
      {
        sub_1005B1314(v15[5], *(_QWORD **)(v19 + 8));
        operator delete();
      }
      sub_1000040CC(v14, v15);
      operator delete(v15);
    }
  }
  sub_100034264((uint64_t)v22);
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093ABB8);
  v20 = sub_1005B8744((uint64_t)off_100978148, a2);
  sub_100034234((uint64_t)v22);
  return v20;
}

void sub_1005B044C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B0460(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 72))
    return 0;
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093ABB8);
  return sub_1005B6CEC((uint64_t)off_100978148);
}

void sub_1005B04B4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[3];

  v13[1] = 0;
  v13[2] = a2;
  v13[0] = 0;
  sub_10003415C((uint64_t)v13, a1 + 8);
  v7 = *(_QWORD **)(a1 + 96);
  v6 = (uint64_t *)(a1 + 96);
  v5 = v7;
  if (v7)
  {
    v8 = v6;
    do
    {
      v9 = v5[4];
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = v5;
      else
        v11 = v5 + 1;
      if (v10)
        v8 = v5;
      v5 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != v6 && v8[4] <= a2)
    {
      v12 = v8[5];
      if (v12)
      {
        nullsub_90(v12, v4);
        operator delete();
      }
      sub_1000040CC((uint64_t **)v6 - 1, v8);
      operator delete(v8);
    }
  }
  operator new();
}

void sub_1005B0618()
{
  operator delete();
}

uint64_t sub_1005B064C(uint64_t a1, unint64_t a2, __n128 *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[2];

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 8);
  v8 = *(_QWORD **)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  v6 = v8;
  if (!v8)
    goto LABEL_12;
  v9 = v7;
  do
  {
    v10 = v6[4];
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = v6;
    else
      v12 = v6 + 1;
    if (v11)
      v9 = v6;
    v6 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 != v7 && v9[4] <= a2)
  {
    sub_1005BCD5C(a3, (__n128 *)v9[5]);
    v13 = 0;
  }
  else
  {
LABEL_12:
    v13 = 1;
  }
  sub_100034234((uint64_t)v15);
  return v13;
}

void sub_1005B06F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B0704(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093ABB8);
  return sub_1005B7378((uint64_t)off_100978148, a2, a3);
}

uint64_t sub_1005B075C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 8);
  v8 = *(_QWORD **)(a1 + 120);
  v7 = (_QWORD *)(a1 + 120);
  v6 = v8;
  if (!v8)
    goto LABEL_14;
  v9 = v7;
  do
  {
    v10 = v6[4];
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = v6;
    else
      v12 = v6 + 1;
    if (v11)
      v9 = v6;
    v6 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v7 || v9[4] > a2 || (v13 = v9[5], v14 = sub_1005B1704(v13, a3), (_QWORD *)(v13 + 8) == v14))
LABEL_14:
    v15 = 0;
  else
    v15 = *((unsigned int *)v14 + 12);
  sub_100034234((uint64_t)v17);
  return v15;
}

void sub_1005B0810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B0824(uint64_t a1, unint64_t a2, __n128 *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  char *v13;
  uint64_t **v15;
  _QWORD v16[3];
  __n128 *v17;

  v16[1] = 0;
  v16[2] = a2;
  v16[0] = 0;
  sub_10003415C((uint64_t)v16, a1 + 8);
  v8 = *(_QWORD **)(a1 + 120);
  v7 = (_QWORD *)(a1 + 120);
  v6 = v8;
  if (!v8)
    goto LABEL_12;
  v9 = v7;
  do
  {
    v10 = v6[4];
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = v6;
    else
      v12 = v6 + 1;
    if (v11)
      v9 = v6;
    v6 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v7 || v9[4] > a2)
LABEL_12:
    operator new();
  v15 = (uint64_t **)v9[5];
  v17 = a3;
  v13 = sub_1005B177C(v15, (uint64_t)a3, (uint64_t)&unk_100740F58, &v17);
  ++*((_DWORD *)v13 + 12);
  return sub_100034234((uint64_t)v16);
}

void sub_1005B0938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B094C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v17[2];
  uint8_t buf[8];
  __int128 v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;

  v9 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68159490;
    *(_DWORD *)&buf[4] = 16;
    LOWORD(v19) = 2096;
    *(_QWORD *)((char *)&v19 + 2) = a2;
    WORD5(v19) = 1040;
    HIDWORD(v19) = 16;
    v20 = 2096;
    v21 = a3;
    v22 = 1040;
    v23 = 16;
    v24 = 2096;
    v25 = a4;
    v26 = 1040;
    v27 = 16;
    v28 = 2096;
    v29 = a5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending 'local OOB Data Ready' event C192:{private, mask.hash}%.16P R192:{private, mask.hash}%.16P C256:{private, mask.hash}%.16P R256:{private, mask.hash}%.16P", buf, 0x42u);
  }
  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 136);
  v10 = *(_QWORD *)(a1 + 200);
  v11 = *(_QWORD *)(a1 + 208);
  if (v10 == v11)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_1007094F4();
    v14 = 106;
  }
  else
  {
    *(_QWORD *)buf = 0;
    v19 = 0uLL;
    sub_1005B197C((char *)buf, v10, v11, 0x8E38E38E38E38E39 * ((v11 - v10) >> 3));
    sub_100034264((uint64_t)v17);
    v12 = *(unint64_t **)buf;
    if (*(_QWORD *)buf != (_QWORD)v19)
    {
      do
      {
        if (v12[6])
        {
          if (qword_100977B50 != -1)
            dispatch_once(&qword_100977B50, &stru_10093ABF8);
          if (sub_100021398(qword_100977B48, *v12))
          {
            if (qword_10097AB48 != -1)
              dispatch_once(&qword_10097AB48, &stru_10093AC18);
            operator new();
          }
          sub_100034188((uint64_t)v17);
          v13 = sub_1005B15C8(*(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), *v12);
          sub_1005B1584(a1 + 200, v13, *(_QWORD *)(a1 + 208));
          sub_100034264((uint64_t)v17);
        }
        v12 += 9;
      }
      while (v12 != (unint64_t *)v19);
      v12 = *(unint64_t **)buf;
    }
    if (v12)
    {
      *(_QWORD *)&v19 = v12;
      operator delete(v12);
    }
    v14 = 0;
  }
  sub_100034234((uint64_t)v17);
  return v14;
}

void sub_1005B0C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100034234((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_1005B0C68(_QWORD *result)
{
  *result = off_10093AA88;
  return result;
}

void sub_1005B0C78(_QWORD *a1)
{
  *a1 = off_10093AA88;
  operator delete();
}

uint64_t sub_1005B0C98(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;

  result = sub_1005B0D04(a1, *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
  {
    result = sub_1005B0D04(a1, *(_QWORD *)(a1 + 56));
    if ((_DWORD)result)
      return sub_100424504(a2, a3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 64), a4);
  }
  return result;
}

BOOL sub_1005B0D04(uint64_t a1, unint64_t a2)
{
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10093ABF8);
  return sub_10050AB38(qword_100977B48, a2);
}

_QWORD *sub_1005B0D54(_QWORD *result)
{
  *result = off_10093AAC8;
  return result;
}

void sub_1005B0D64(_QWORD *a1)
{
  *a1 = off_10093AAC8;
  operator delete();
}

uint64_t sub_1005B0D84(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;

  result = sub_1005B0D04(a1, *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
  {
    result = sub_1005B0D04(a1, *(_QWORD *)(a1 + 48));
    if ((_DWORD)result)
      return sub_100435A6C(a2, a3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), a4);
  }
  return result;
}

_QWORD *sub_1005B0DE8(_QWORD *result)
{
  *result = off_10093AB08;
  return result;
}

void sub_1005B0DF8(_QWORD *a1)
{
  *a1 = off_10093AB08;
  operator delete();
}

uint64_t sub_1005B0E18(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;

  result = sub_1005B0D04(a1, *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
  {
    result = sub_1005B0D04(a1, *(_QWORD *)(a1 + 48));
    if ((_DWORD)result)
      return sub_100424504(a2, a3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), -*(char *)(a1 + 60), a4);
  }
  return result;
}

_QWORD *sub_1005B0E84(_QWORD *result)
{
  *result = off_10093AB48;
  return result;
}

void sub_1005B0E94(_QWORD *a1)
{
  *a1 = off_10093AB48;
  operator delete();
}

uint64_t sub_1005B0EB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;

  result = sub_1005B0D04(a1, *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
  {
    result = sub_1005B0D04(a1, *(_QWORD *)(a1 + 48));
    if ((_DWORD)result)
      return sub_100435A6C(a2, a3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), a4);
  }
  return result;
}

_QWORD *sub_1005B0F18(_QWORD *result)
{
  *result = &off_10093AB88;
  return result;
}

void sub_1005B0F28(_QWORD *a1)
{
  *a1 = &off_10093AB88;
  operator delete();
}

uint64_t sub_1005B0F48(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;

  result = sub_1005B0D04(a1, *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
    return sub_100424570(a2, a3, *(_QWORD *)(a1 + 40), a1 + 48, a1 + 64, a1 + 80, a1 + 96, a4);
  return result;
}

void sub_1005B0FA8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t *v4;
  size_t v5;
  std::string *v6;
  const void *v7;
  const std::string::value_type *v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type v12;
  char v13;
  std::string v14;
  std::string v15;
  _QWORD v16[2];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = (size_t *)(a2 + 8);
  sub_100091AE8((_QWORD *)a2, "");
  if (*(char *)(a2 + 23) >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *v4;
  memset(&v14, 0, sizeof(v14));
  v6 = &v14;
  sub_1002D6774((uint64_t)&v14, v5 + 12);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (*(char *)(a2 + 23) >= 0)
      v7 = (const void *)a2;
    else
      v7 = *(const void **)a2;
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "\t\tfStarted: ");
  if (*(_BYTE *)(a1 + 72))
    v8 = "YES";
  else
    v8 = "NO";
  v9 = std::string::append(&v14, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v15, "\n");
  v12 = v11->__r_.__value_.__r.__words[0];
  v16[0] = v11->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_QWORD *)a2 = v12;
  *v4 = v16[0];
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v16 + 7);
  *(_BYTE *)(a2 + 23) = v13;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_1005B1160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005B11AC(unint64_t *a1)
{
  uint64_t result;

  result = sub_1005B0D04((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

uint64_t sub_1005B11F4(unint64_t *a1)
{
  uint64_t result;

  result = sub_1005B0D04((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

uint64_t sub_1005B123C(unint64_t *a1)
{
  uint64_t result;

  result = sub_1005B0D04((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

uint64_t sub_1005B1284(unint64_t *a1)
{
  uint64_t result;

  result = sub_1005B0D04((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

uint64_t sub_1005B12CC(unint64_t *a1)
{
  uint64_t result;

  result = sub_1005B0D04((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

void sub_1005B1314(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    sub_1005B1314(a1, *a2);
    sub_1005B1314(a1, a2[1]);
    nullsub_90((char *)a2 + 28, v4);
    operator delete(a2);
  }
}

uint64_t sub_1005B135C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *__p;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v2 = *a1;
  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0x8E38E38E38E38E39 * ((v8 - v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x1C71C71C71C71C7)
    v10 = 0x38E38E38E38E38ELL;
  else
    v10 = v4;
  v22 = v7;
  v11 = (char *)sub_10058EAA0(v7, v10);
  v12 = &v11[72 * v3];
  __p = v11;
  v19 = v12;
  v21 = &v11[72 * v13];
  *(_QWORD *)v12 = *(_QWORD *)a2;
  v14 = *(_OWORD *)(a2 + 8);
  v15 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v12 + 24) = v15;
  *(_OWORD *)(v12 + 8) = v14;
  *((_DWORD *)v12 + 14) = *(_DWORD *)(a2 + 56);
  *((_QWORD *)v12 + 8) = *(_QWORD *)(a2 + 64);
  v20 = v12 + 72;
  sub_1005B1504(a1, &__p);
  v16 = a1[1];
  if (v20 != v19)
    v20 = &v19[(v20 - v19 - 72) % 0x48uLL];
  if (__p)
    operator delete(__p);
  return v16;
}

void sub_1005B14B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1005B1504(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 72);
    v2 -= 72;
    *(_QWORD *)(v4 - 72) = v5;
    v4 -= 72;
    v6 = *(_OWORD *)(v2 + 8);
    v7 = *(_OWORD *)(v2 + 24);
    *(_OWORD *)(v4 + 40) = *(_OWORD *)(v2 + 40);
    *(_OWORD *)(v4 + 24) = v7;
    *(_OWORD *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 56) = *(_DWORD *)(v2 + 56);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(v2 + 64);
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1005B1584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a2 != a3)
  {
    sub_1005B1644(a3, *(_QWORD *)(a1 + 8), a2);
    *(_QWORD *)(a1 + 8) = v5;
  }
  return a2;
}

uint64_t sub_1005B15C8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  __int128 v4;
  __int128 v5;

  while (1)
  {
    if (result == a2)
      return a2;
    if (*(_QWORD *)result == a3)
      break;
    result += 72;
  }
  if (result != a2)
  {
    for (i = result + 72; i != a2; i += 72)
    {
      if (*(_QWORD *)i != a3)
      {
        *(_QWORD *)result = *(_QWORD *)i;
        v4 = *(_OWORD *)(i + 8);
        v5 = *(_OWORD *)(i + 24);
        *(_OWORD *)(result + 40) = *(_OWORD *)(i + 40);
        *(_OWORD *)(result + 24) = v5;
        *(_OWORD *)(result + 8) = v4;
        *(_DWORD *)(result + 56) = *(_DWORD *)(i + 56);
        *(_QWORD *)(result + 64) = *(_QWORD *)(i + 64);
        result += 72;
      }
    }
  }
  return result;
}

uint64_t sub_1005B1644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;

  if (a1 == a2)
    return a1;
  do
  {
    *(_QWORD *)a3 = *(_QWORD *)a1;
    v3 = *(_OWORD *)(a1 + 8);
    v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a3 + 24) = v4;
    *(_OWORD *)(a3 + 8) = v3;
    *(_DWORD *)(a3 + 56) = *(_DWORD *)(a1 + 56);
    *(_QWORD *)(a3 + 64) = *(_QWORD *)(a1 + 64);
    a3 += 72;
    a1 += 72;
  }
  while (a1 != a2);
  return a2;
}

void sub_1005B16A0(id a1)
{
  operator new();
}

void sub_1005B16E0()
{
  operator delete();
}

_QWORD *sub_1005B1704(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_1005BCD9C((uint64_t)v3 + 28, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1005BCD9C(a2, (uint64_t)v5 + 28))
    return v2;
  return v5;
}

char *sub_1005B177C(uint64_t **a1, uint64_t a2, uint64_t a3, __n128 **a4)
{
  char **v6;
  char *v7;
  uint64_t **v8;
  char *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (char **)sub_1005B1830((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_1005B18C0((uint64_t)a1, a4, v10);
    sub_100004078(a1, v11, v8, (uint64_t *)v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1005B1938(v10, 0);
  }
  return v7;
}

_QWORD *sub_1005B1830(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)v4 + 28;
        if (!sub_1005BCD9C(a3, (uint64_t)v4 + 28))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_1005BCD9C(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_1005B18C0(uint64_t a1@<X0>, __n128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  sub_1005BCD5C((__n128 *)(v6 + 28), *a2);
  *((_DWORD *)v6 + 12) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1005B1920(_Unwind_Exception *a1)
{
  char **v1;

  sub_1005B1938(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1005B1938(char **a1, char *a2)
{
  char *v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      nullsub_90(v2 + 28, a2);
    operator delete(v2);
  }
}

char *sub_1005B197C(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  if (a4)
  {
    v6 = result;
    result = sub_1005B1A00(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *(_QWORD *)v7 = *(_QWORD *)a2;
      v8 = *(_OWORD *)(a2 + 8);
      v9 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(v7 + 24) = v9;
      *(_OWORD *)(v7 + 8) = v8;
      *(_DWORD *)(v7 + 56) = *(_DWORD *)(a2 + 56);
      *(_QWORD *)(v7 + 64) = *(_QWORD *)(a2 + 64);
      v7 += 72;
      a2 += 72;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *sub_1005B1A00(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    abort();
  result = (char *)sub_10058EAA0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void sub_1005B1A50(id a1)
{
  operator new();
}

void sub_1005B1A90()
{
  operator delete();
}

void sub_1005B1AB4(id a1)
{
  operator new();
}

void sub_1005B1AF4()
{
  operator delete();
}

void sub_1005B1B18(id a1)
{
  operator new();
}

void sub_1005B1B58()
{
  operator delete();
}

uint64_t sub_1005B1B7C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093AC68;
  *(_QWORD *)(a1 + 8) = off_10093ACF0;
  *(_QWORD *)(a1 + 16) = off_10093AD10;
  *(_QWORD *)(a1 + 24) = off_10093AD48;
  *(_QWORD *)(a1 + 32) = off_10093AD70;
  *(_QWORD *)(a1 + 40) = 0;
  sub_1000160D0(a1 + 48);
  *(_QWORD *)(a1 + 112) = 0;
  sub_1000160D0(a1 + 120);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  sub_1000160D0(a1 + 208);
  *(_BYTE *)(a1 + 272) = 0;
  sub_1000160D0(a1 + 280);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = &off_10093AF00;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  sub_1000160D0(a1 + 416);
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 504) = a1 + 512;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  sub_1000160D0(a1 + 536);
  *(_QWORD *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  return a1;
}

void sub_1005B1C84(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;

  v11 = v9;
  v12 = v6;
  sub_10001A82C(v11, *v10);
  v14 = *v12;
  if (*v12)
  {
    v2[61] = v14;
    operator delete(v14);
  }
  sub_100069BDC(v7);
  v15 = (void *)v2[43];
  if (v15)
  {
    v2[44] = v15;
    operator delete(v15);
  }
  sub_100069BDC(v5);
  sub_100069BDC(v4);
  v16 = *v8;
  if (*v8)
  {
    v2[24] = v16;
    operator delete(v16);
  }
  sub_100069BDC(v3);
  sub_100069BDC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B1D28(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = off_10093AC68;
  *(_QWORD *)(a1 + 8) = off_10093ACF0;
  *(_QWORD *)(a1 + 16) = off_10093AD10;
  *(_QWORD *)(a1 + 24) = off_10093AD48;
  *(_QWORD *)(a1 + 32) = off_10093AD70;
  v2 = *(void **)(a1 + 608);
  if (v2)
  {
    *(_QWORD *)(a1 + 616) = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 536);
  sub_10001A82C(a1 + 504, *(_QWORD **)(a1 + 512));
  v3 = *(void **)(a1 + 480);
  if (v3)
  {
    *(_QWORD *)(a1 + 488) = v3;
    operator delete(v3);
  }
  sub_100069BDC(a1 + 416);
  v4 = *(void **)(a1 + 344);
  if (v4)
  {
    *(_QWORD *)(a1 + 352) = v4;
    operator delete(v4);
  }
  sub_100069BDC(a1 + 280);
  sub_100069BDC(a1 + 208);
  v5 = *(void **)(a1 + 184);
  if (v5)
  {
    *(_QWORD *)(a1 + 192) = v5;
    operator delete(v5);
  }
  sub_100069BDC(a1 + 120);
  sub_100069BDC(a1 + 48);
  return a1;
}

uint64_t sub_1005B1DEC(uint64_t a1)
{
  return sub_1005B1D28(a1 - 16);
}

void sub_1005B1DF4(uint64_t a1)
{
  sub_1005B1D28(a1);
  operator delete();
}

void sub_1005B1E18(uint64_t a1)
{
  sub_1005B1D28(a1 - 16);
  operator delete();
}

void sub_1005B1E40(uint64_t a1, int *a2, uint64_t a3, int a4, _OWORD *a5, char a6)
{
  _OWORD *v12;
  uint64_t v13;
  _QWORD v14[7];
  int v15;
  int v16;
  __int16 v17;
  char v18;

  v12 = malloc_type_malloc(0x10uLL, 0xD94A48C2uLL);
  v16 = *a2;
  v17 = *((_WORD *)a2 + 2);
  *v12 = *a5;
  v13 = *(_QWORD *)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1005B1EFC;
  v14[3] = &unk_10093AD90;
  v15 = a4;
  v18 = a6;
  v14[4] = v12;
  v14[5] = a2;
  v14[6] = a3;
  sub_100041A34(v13, v14);
}

_BYTE *sub_1005B1EFC(uint64_t a1)
{
  unsigned __int8 *v2;
  NSObject *v3;
  void **v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _OWORD *v23;
  uint64_t v24;
  char v25;
  void *__p[2];
  char v27;
  __n128 v28;
  int v29;
  __int128 v30;
  _BYTE buf[12];
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  int v41;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093AF38);
  *(_DWORD *)buf = *(_DWORD *)(a1 + 60);
  *(_WORD *)&buf[4] = *(_WORD *)(a1 + 64);
  v2 = (unsigned __int8 *)sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v3 = qword_100999850;
  if (v2)
  {
    if (!os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      goto LABEL_15;
    sub_10043F78C((uint64_t)v2, (uint64_t)__p);
    if (v27 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    goto LABEL_12;
  }
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Oh no, we have no device !", buf, 2u);
    v3 = qword_100999850;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (void **)"UNKNOWN";
LABEL_12:
    v5 = *(_DWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(unsigned __int8 *)(a1 + 66);
    *(_DWORD *)buf = 136316419;
    *(_QWORD *)&buf[4] = v4;
    v32 = 1024;
    v33 = v5;
    v34 = 2160;
    v35 = 1752392040;
    v36 = 1041;
    v37 = 16;
    v38 = 2097;
    v39 = v6;
    v40 = 1024;
    v41 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Classic SMP pairing completed to %s with status %d IRK:%{private, mask.hash}.16P useH7=%d", buf, 0x32u);
    if (v2 && v27 < 0)
      operator delete(__p[0]);
  }
LABEL_15:
  if (!*(_DWORD *)(a1 + 56))
  {
    v30 = 0uLL;
    v28 = 0uLL;
    v29 = 0;
    sub_1005A9714((uint64_t)&v28);
    if (qword_100978160 != -1)
      dispatch_once(&qword_100978160, &stru_10093AF78);
    if (sub_1005BEB64((uint64_t)off_100978158, v2, &v28))
    {
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
        sub_1007095D8();
    }
    else
    {
      v9 = sub_1005A9764((uint64_t)&v28);
      v25 = 0;
      sub_100043758(&v25);
      v11 = nullsub_90(&v28, v10);
      v12 = sub_1005A97B4();
      LODWORD(v11) = sub_1001EDAEC(v11, v12, &v30, *(unsigned __int8 *)(a1 + 66));
      sub_10004339C(&v25);
      if ((_DWORD)v11)
      {
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
          sub_100709578();
      }
      else
      {
        v13 = v9;
        if (qword_1009778B8 != -1)
          dispatch_once(&qword_1009778B8, &stru_10093AF98);
        v14 = *(unsigned __int8 **)(a1 + 40);
        v23 = *(_OWORD **)(a1 + 32);
        v24 = qword_1009778B0;
        v15 = *v14;
        v16 = v14[1];
        v17 = v14[2];
        v18 = v14[3];
        v19 = v14[4];
        v20 = v14[5];
        v21 = *(unsigned __int8 *)(a1 + 66);
        sub_10043F78C((uint64_t)v2, (uint64_t)buf);
        sub_1006A1E00(v24, (v15 << 40) | (v16 << 32) | (v17 << 24) | (v18 << 16) | (v19 << 8) | v20, 1, &v30, v23, v21 != 0, v13 == 8, (uint64_t)buf);
        if (SBYTE3(v35) < 0)
          operator delete(*(void **)buf);
      }
      sub_100043728(&v25);
    }
    nullsub_90(&v28, v8);
  }
  free(*(void **)(a1 + 32));
  buf[0] = 0;
  sub_100043758(buf);
  sub_10018C8E8(*(_QWORD *)(a1 + 48), 3);
  return sub_100043728(buf);
}

void sub_1005B22CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v30;

  if (a29 < 0)
    operator delete(__p);
  sub_100043728(&a15);
  nullsub_90(&a19, v30);
  _Unwind_Resume(a1);
}

void sub_1005B232C(uint64_t a1)
{
  _QWORD v1[2];

  v1[0] = 0;
  v1[1] = 0;
  sub_10003415C((uint64_t)v1, a1 + 208);
  operator new();
}

void sub_1005B24BC()
{
  operator delete();
}

uint64_t sub_1005B24F4(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093AFF8);
  sub_100069060((uint64_t)off_100977A50 + 64, a1 + 32);
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093AF78);
  sub_1005BF5D8((uint64_t)off_100978158, a1 + 16);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10093AFB8);
  sub_100069060(qword_100977B48 + 8, a1 + 8);
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10093AFD8);
  sub_100069060((uint64_t)off_100978188 + 24, a1 + 24);
  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 48);
  v2 = *(unint64_t **)(a1 + 184);
  if (v2 != *(unint64_t **)(a1 + 192))
  {
    do
    {
      v3 = *v2;
      v4 = *(_QWORD *)(a1 + 112);
      if (v4)
        sub_1005AEE60(v4, *v2);
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10093AFB8);
      sub_10050ABD0(qword_100977B48, v3);
      ++v2;
    }
    while (v2 != *(unint64_t **)(a1 + 192));
    v2 = *(unint64_t **)(a1 + 184);
  }
  *(_QWORD *)(a1 + 192) = v2;
  v5 = *(_QWORD *)(a1 + 112);
  if (v5)
  {
    v6 = qword_100999850;
    if (!os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT)
      || (LOWORD(v9[0]) = 0,
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PairingManager is terminating. Deleting fAgent!", (uint8_t *)v9, 2u), (v5 = *(_QWORD *)(a1 + 112)) != 0))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 112) = 0;
  }
  sub_100034264((uint64_t)v10);
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 208);
  *(_BYTE *)(a1 + 272) = 0;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    sub_100475CC8(v7);
    operator delete();
  }
  *(_QWORD *)(a1 + 40) = 0;
  sub_100034234((uint64_t)v9);
  return sub_100034234((uint64_t)v10);
}

void sub_1005B2758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B2774(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint8_t v6[16];
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 120);
  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 40);
    if (v3)
    {
      v4 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cancelling existing pairing timeout event", v6, 2u);
      }
      *(_BYTE *)(v3 + 9) = 1;
      *(_QWORD *)(a2 + 40) = 0;
    }
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_1005B2814(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint8_t v6[16];
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 120);
  if (a2)
  {
    sub_1005B2774(a1, a2);
    v4 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Creating a new pairing timeout event", v6, 2u);
    }
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    sub_100709638();
  return sub_100034234((uint64_t)v7);
}

void sub_1005B2980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B2998(_QWORD *a1, unint64_t a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t v8;
  NSObject *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  NSObject *v26;
  void **v27;
  void *__p[2];
  char v30;
  _QWORD v31[2];
  uint8_t buf[4];
  const char *v33;

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10093AFB8);
  v8 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
  v31[0] = 0;
  v31[1] = 0;
  sub_10003415C((uint64_t)v31, (uint64_t)(a1 + 6));
  if (!a1[14])
  {
    v9 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "allocating fAgent", (uint8_t *)__p, 2u);
    }
    operator new();
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10093AFB8);
  v10 = sub_1000221B8(qword_100977B48, a2);
  *a4 = v10;
  if (v10)
  {
    *a3 = a1[14];
    v11 = a1[25];
    v12 = (unint64_t *)a1[24];
    if ((unint64_t)v12 >= v11)
    {
      v15 = a1[23];
      v16 = ((uint64_t)v12 - v15) >> 3;
      if ((unint64_t)(v16 + 1) >> 61)
        abort();
      v17 = v11 - v15;
      v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v16 + 1))
        v18 = v16 + 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
        v20 = (char *)sub_10007ABA0((uint64_t)(a1 + 25), v19);
      else
        v20 = 0;
      v21 = (unint64_t *)&v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = *a4;
      v13 = v21 + 1;
      v24 = (char *)a1[23];
      v23 = (char *)a1[24];
      if (v23 != v24)
      {
        do
        {
          v25 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *--v21 = v25;
        }
        while (v23 != v24);
        v23 = (char *)a1[23];
      }
      a1[23] = v21;
      a1[24] = v13;
      a1[25] = v22;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v12 = *a4;
      v13 = v12 + 1;
    }
    a1[24] = v13;
    v26 = qword_100999850;
    v14 = 0;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      if (v8)
      {
        sub_1000340DC(v8, (uint64_t)__p);
        if (v30 >= 0)
          v27 = __p;
        else
          v27 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v33 = (const char *)v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Creating pairing agent for session %{public}s", buf, 0xCu);
        if (v30 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 136446210;
        v33 = "(NULL)";
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Creating pairing agent for session %{public}s", buf, 0xCu);
      }
      v14 = 0;
    }
  }
  else
  {
    v14 = 7;
  }
  sub_100034234((uint64_t)v31);
  return v14;
}

void sub_1005B2CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B2CE0(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  void **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  const char *v21;

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10093AFB8);
  v4 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
  v5 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    if (v4)
    {
      sub_1000340DC(v4, (uint64_t)__p);
      if (v19 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v21 = (const char *)v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Destroying pairing agent for session %{public}s", buf, 0xCu);
      if (v19 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 136446210;
      v21 = "(NULL)";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Destroying pairing agent for session %{public}s", buf, 0xCu);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003415C((uint64_t)__p, (uint64_t)(a1 + 6));
  v8 = a1[23];
  v7 = (_QWORD *)a1[24];
  if ((_QWORD *)v8 != v7)
  {
    v9 = -v8;
    while (*(_QWORD *)v8 != a2)
    {
      v8 += 8;
      v9 -= 8;
      if ((_QWORD *)v8 == v7)
        goto LABEL_23;
    }
    v10 = a1[14];
    if (v10)
      sub_1005AEE60(v10, a2);
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_10093AFB8);
    sub_10050ABD0(qword_100977B48, a2);
    v11 = -v9;
    v12 = (const void *)(8 - v9);
    v13 = a1[24] - (8 - v9);
    if (v13)
      memmove((void *)v11, v12, v13);
    v7 = (_QWORD *)(v11 + v13);
    a1[24] = v11 + v13;
  }
LABEL_23:
  if (a1[14] && v7 == (_QWORD *)a1[23])
  {
    v14 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14))
    {
      v15 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v21 = "destroyAgent";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%s - deleting fAgent as fHandleList size is 0", buf, 0xCu);
      }
    }
    v16 = a1[14];
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    a1[14] = 0;
  }
  sub_100034264((uint64_t)__p);
  return sub_100034234((uint64_t)__p);
}

void sub_1005B2F98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B2FB8(_QWORD *a1, uint64_t a2)
{
  _QWORD *i;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, (uint64_t)(a1 + 6));
  for (i = (_QWORD *)a1[23]; ; ++i)
  {
    if (i == (_QWORD *)a1[24])
    {
      v5 = 0;
      goto LABEL_7;
    }
    if (*i == a2)
      break;
  }
  v5 = a1[14];
LABEL_7:
  sub_100034234((uint64_t)v7);
  return v5;
}

uint64_t sub_1005B302C(uint64_t a1)
{
  char v3;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 208);
  if (!*(_BYTE *)(a1 + 272))
  {
    sub_100475868(*(_QWORD *)(a1 + 40), QOS_CLASS_USER_INITIATED);
    *(_BYTE *)(a1 + 272) = 1;
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 344);
    sub_100034264((uint64_t)v4);
    v3 = 0;
    sub_100043758(&v3);
    sub_10024B64C(1);
    sub_10004339C(&v3);
    sub_100043728(&v3);
  }
  return sub_100034234((uint64_t)v4);
}

void sub_1005B30B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B30E0(uint64_t a1)
{
  return sub_1005B302C(a1 - 32);
}

void sub_1005B30E8(uint64_t a1)
{
  NSObject *v1;
  int v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  NSObject *v11;
  char v12;
  void *__p[2];
  char v14;
  char v15;
  uint8_t buf[8];
  char v17;

  if (*(_BYTE *)(a1 + 528))
  {
    v1 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Classic SMP Disabled", buf, 2u);
    }
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    v2 = sub_10018FCEC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1005B33D4);
    sub_10004339C(__p);
    v3 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Classic_SMPInit returned %d", buf, 8u);
    }
    sub_100043728(__p);
  }
  v15 = 0;
  v4 = sub_100027F68();
  sub_100091AE8(buf, "Pairing");
  sub_100091AE8(__p, "DisableH7");
  v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v4 + 72))(v4, buf, __p, &v15);
  if (v15)
    v6 = v5;
  else
    v6 = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
  {
    operator delete(*(void **)buf);
    if (!v6)
      goto LABEL_19;
  }
  else if (!v6)
  {
    goto LABEL_19;
  }
  v7 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Warning: Disabling Classic SMP local H7 support!", buf, 2u);
  }
  sub_100190320();
LABEL_19:
  v12 = 0;
  v8 = sub_100027F68();
  sub_100091AE8(buf, "Pairing");
  sub_100091AE8(__p, "ForceReplyH7");
  v9 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v8 + 72))(v8, buf, __p, &v12);
  if (v12)
    v10 = v9;
  else
    v10 = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
  {
    operator delete(*(void **)buf);
    if (!v10)
      return;
  }
  else if (!v10)
  {
    return;
  }
  v11 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Warning: Forcing Classic SMP to reply with H7!", buf, 2u);
  }
  sub_100190330();
}

void sub_1005B3380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_100043728(&__p);
  _Unwind_Resume(a1);
}

void sub_1005B33D4(uint64_t a1, int a2, _OWORD *a3, int a4)
{
  uint64_t v8;
  NSObject *v9;
  void **v10;
  void *__p[2];
  char v12;
  _BYTE buf[12];
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  _OWORD *v21;
  __int16 v22;
  int v23;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093AF38);
  *(_DWORD *)buf = *(_DWORD *)a1;
  *(_WORD *)&buf[4] = *(_WORD *)(a1 + 4);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v9 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    if (v8)
    {
      sub_10043F78C(v8, (uint64_t)__p);
      if (v12 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 136316419;
      *(_QWORD *)&buf[4] = v10;
      v14 = 1024;
      v15 = a2;
      v16 = 2160;
      v17 = 1752392040;
      v18 = 1041;
      v19 = 16;
      v20 = 2097;
      v21 = a3;
      v22 = 1024;
      v23 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "_Classic_SMP_PairingComplete device:%s status %d IRK:%{private, mask.hash}.16P useH7=%d", buf, 0x32u);
      if (v12 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 136316419;
      *(_QWORD *)&buf[4] = "UNKNOWN";
      v14 = 1024;
      v15 = a2;
      v16 = 2160;
      v17 = 1752392040;
      v18 = 1041;
      v19 = 16;
      v20 = 2097;
      v21 = a3;
      v22 = 1024;
      v23 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "_Classic_SMP_PairingComplete device:%s status %d IRK:%{private, mask.hash}.16P useH7=%d", buf, 0x32u);
    }
  }
  *(_QWORD *)buf = 0;
  sub_100182588(a1, (uint64_t *)buf);
  sub_10018B4A0(a1, 0);
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093AF58);
  sub_1005B1E40((uint64_t)off_100978148, (int *)a1, *(uint64_t *)buf, a2, a3, a4);
}

void sub_1005B3648(uint64_t a1)
{
  sub_1005B30E8(a1 - 32);
}

uint64_t sub_1005B3650(uint64_t a1)
{
  NSObject *v2;
  unsigned __int8 **i;
  NSObject *v4;
  uint8_t v6[16];
  uint8_t buf[8];
  unsigned __int8 **v8;
  uint64_t v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v2 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PairingManager::stackWillStop enter", buf, 2u);
  }
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 208);
  if (*(_BYTE *)(a1 + 272))
  {
    *(_BYTE *)(a1 + 272) = 0;
    if (!*(_BYTE *)(a1 + 528))
    {
      buf[0] = 0;
      sub_100043758(buf);
      sub_10018FE9C();
      sub_10004339C(buf);
      sub_100043728(buf);
    }
    v10[0] = 0;
    v10[1] = 0;
    sub_10003415C((uint64_t)v10, a1 + 280);
    *(_QWORD *)buf = 0;
    v8 = 0;
    v9 = 0;
    sub_10001FE6C(buf, a1 + 344);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 344);
    sub_100034264((uint64_t)v10);
    for (i = *(unsigned __int8 ***)buf; i != v8; ++i)
      sub_1005B3820(a1, *i, 0xA1u);
    sub_100475C60(*(_QWORD *)(a1 + 40));
    sub_100034264((uint64_t)v11);
    v4 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PairingManager::stackWillStop exit", v6, 2u);
    }
    if (*(_QWORD *)buf)
    {
      v8 = *(unsigned __int8 ***)buf;
      operator delete(*(void **)buf);
    }
    sub_100034234((uint64_t)v10);
  }
  return sub_100034234((uint64_t)v11);
}

void sub_1005B37CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  sub_100034234(v15 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B3820(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  _BYTE *v21;
  unint64_t v22;
  _BOOL4 v23;
  NSObject *v24;
  int v25;
  NSObject *v26;
  uint8_t *v27;
  NSObject *v28;
  int v29;
  int v30;
  int v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  NSObject *v40;
  _BYTE *v41;
  int v42;
  NSObject *v43;
  uint8_t *v44;
  unint64_t v45;
  int v48;
  __int16 v49;
  char v50;
  _QWORD v51[2];
  _QWORD v52[2];
  uint64_t v53;
  _BYTE __p[14];
  _BYTE v55[6];
  _BYTE v56[6];
  __int16 v57;
  int v58;
  __int16 v59;
  void *v60;
  uint8_t buf[23];
  char v62;

  v52[1] = 0;
  v53 = 0;
  v5 = (uint64_t)(a2 + 128);
  v4 = a2[128];
  v6 = a2[129];
  v7 = a2[130];
  v8 = a2[131];
  v9 = a2[132];
  v10 = a2[133];
  v52[0] = 0;
  sub_10003415C((uint64_t)v52, a1 + 280);
  sub_10046EA90((char **)(a1 + 344), (uint64_t)a2);
  v11 = *(_QWORD **)(a1 + 512);
  if (v11)
  {
    v12 = (uint64_t *)(a1 + 512);
    do
    {
      v13 = v11[4];
      v14 = v13 >= (unint64_t)a2;
      if (v13 >= (unint64_t)a2)
        v15 = v11;
      else
        v15 = v11 + 1;
      if (v14)
        v12 = v11;
      v11 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v12 != (uint64_t *)(a1 + 512) && v12[4] <= (unint64_t)a2)
    {
      sub_1005B2774(a1, v12[5]);
      v16 = v12[5];
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      sub_1000040CC((uint64_t **)(a1 + 504), v12);
      operator delete(v12);
    }
  }
  sub_100034264((uint64_t)v52);
  v51[0] = 0;
  v51[1] = 0;
  sub_10003415C((uint64_t)v51, a1 + 48);
  v17 = *(_QWORD *)(a1 + 112);
  if (v17)
    sub_1005AF38C(v17, a3);
  v18 = (v4 << 40) | (v6 << 32) | (v7 << 24) | (v8 << 16) | (v9 << 8) | v10;
  v19 = a1;
  v45 = v18;
  if (v18)
  {
    v20 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)a2, __p);
      v21 = v56[3] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Pairing complete for device %{public}s", buf, 0xCu);
      if ((v56[3] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (*(_BYTE *)(a1 + 272))
    {
      v50 = 0;
      sub_100043758(&v50);
      sub_10024B488(v5, 0);
      v22 = sub_100225368(v45);
      v48 = v22;
      v49 = WORD2(v22);
      if (sub_100182588((uint64_t)&v48, &v53))
        v23 = 0;
      else
        v23 = sub_10019AB58(v53);
      v25 = sub_10019AB98(v53);
      sub_10004339C(&v50);
      v26 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8((uint64_t)a2, buf);
        v27 = v62 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)__p = 136446722;
        *(_QWORD *)&__p[4] = v27;
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)v55 = v23;
        *(_WORD *)&v55[4] = 1024;
        *(_DWORD *)v56 = v25;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Device %{public}s ClassicSMPSupported:%d encryptionMode:%d", __p, 0x18u);
        if (v62 < 0)
          operator delete(*(void **)buf);
      }
      sub_100043728(&v50);
    }
    else
    {
      v24 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Stack shutting down, ignore pairing timeout", __p, 2u);
      }
      v25 = 0;
      v23 = 0;
    }
    v28 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      v29 = sub_1004548C4((uint64_t)a2);
      v30 = *(unsigned __int8 *)(a1 + 528);
      v31 = a2[1113];
      v32 = sub_100649588(v45);
      v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      *(_DWORD *)__p = 67110402;
      *(_DWORD *)&__p[4] = a3;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = v29;
      *(_WORD *)v55 = 1024;
      *(_DWORD *)&v55[2] = v23;
      *(_WORD *)v56 = 1024;
      *(_DWORD *)&v56[2] = v30;
      v57 = 1024;
      v58 = v31;
      v59 = 2112;
      v60 = v33;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "pairingComplete result:%d device->isDerivedFromLE:%d connectionSupportsClassicSMP:%d fCTKDDisabled:%d isPendingClassicSMP:%d address:%@", __p, 0x2Au);

      v19 = a1;
    }
    if (a3 || !*(_BYTE *)(v19 + 272) || (sub_1004548C4((uint64_t)a2) & 1) != 0)
      goto LABEL_41;
    if (*(_BYTE *)(a1 + 528) || !v23)
      goto LABEL_41;
    if (a2[1113])
    {
      sub_10018B4A0(v5, 1);
      v40 = qword_100999850;
      if (v25 == 2)
      {
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8((uint64_t)a2, __p);
          v41 = v56[3] >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v41;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Initiating Classic SMP with device %{public}s", buf, 0xCu);
          if ((v56[3] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        a2[1113] = 0;
        buf[0] = 0;
        sub_100043758(buf);
        v42 = sub_10018FEE0(v53);
        sub_10004339C(buf);
        if (v42)
        {
          if (v42 == 4821)
          {
            v43 = qword_100999850;
            if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__p = 0;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Failed to start Classic SMP Pairing, waiting for other side to initiate", __p, 2u);
            }
          }
          else
          {
            if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
              sub_100709664();
            sub_10006D81C(buf);
            sub_10018B4A0(v5, 0);
            sub_10004339C(buf);
          }
        }
        v44 = buf;
        goto LABEL_85;
      }
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
        sub_1007096C4();
      __p[0] = 0;
      sub_100043758(__p);
      sub_10018B4A0(v5, 0);
      sub_10004339C(__p);
    }
    else
    {
      a2[1113] = 1;
      __p[0] = 0;
      sub_100043758(__p);
      sub_10018B4A0(v5, 1);
      sub_10004339C(__p);
    }
    v44 = __p;
LABEL_85:
    sub_100043728(v44);
LABEL_41:
    *(_OWORD *)buf = 0uLL;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093B038);
    sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133], 1u, 0, 0, 0, buf);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093B038);
    v34 = off_1009778C0;
    v35 = sub_100030DF4(buf);
    v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    *((_BYTE *)sub_1000306B0((uint64_t)v34, v36) + 161) = 1;

    if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
    {
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_10093AF98);
      v37 = qword_1009778B0;
      sub_100091AE8(__p, "");
      sub_1006A1E00(v37, v45, 0, 0, 0, 0, 0, (uint64_t)__p);
      if ((v56[3] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
  }
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10093AFD8);
  sub_1004396EC((uint64_t)off_100978188);
  sub_1005B4558(a1, a2, a3);
  if (a3 && !sub_100446894((uint64_t)a2))
  {
    if (qword_100978160 != -1)
      dispatch_once(&qword_100978160, &stru_10093AF78);
    sub_1005BF3F0((uint64_t)off_100978158, (uint64_t)a2);
  }
  sub_100034234((uint64_t)v51);
  return sub_100034234((uint64_t)v52);
}

void sub_1005B400C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_100034234((uint64_t)&a17);
  sub_100034234((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B40C0(uint64_t a1)
{
  return sub_1005B3650(a1 - 32);
}

uint64_t sub_1005B40C8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, (uint64_t)(a1 + 52));
  v4 = (_QWORD *)a1[60];
  v5 = (_QWORD *)a1[61];
  v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        v6 = (_QWORD *)a1[61];
        break;
      }
    }
  }
  if (v6 == v5)
  {
    v7 = a1[62];
    if ((unint64_t)v5 >= v7)
    {
      v9 = v5 - v4;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v10 = v7 - (_QWORD)v4;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)sub_10007ABA0((uint64_t)(a1 + 62), v12);
      else
        v13 = 0;
      v14 = &v13[8 * v9];
      v15 = &v13[8 * v12];
      *(_QWORD *)v14 = a2;
      v8 = v14 + 8;
      v17 = (char *)a1[60];
      v16 = (char *)a1[61];
      if (v16 != v17)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        v16 = (char *)a1[60];
      }
      a1[60] = v14;
      a1[61] = v8;
      a1[62] = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v5 = a2;
      v8 = v5 + 1;
    }
    a1[61] = v8;
  }
  return sub_100034234((uint64_t)v20);
}

void sub_1005B41EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B4200(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 416);
  v5 = *(char **)(a1 + 480);
  v4 = *(char **)(a1 + 488);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 488);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8)
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    *(_QWORD *)(a1 + 488) = &v5[v6];
  }
  return sub_100034234((uint64_t)v8);
}

BOOL sub_1005B4298(uint64_t a1, uint64_t a2)
{
  int v4;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10093B018);
  if (!sub_100420EFC((uint64_t)off_1009778D0, a2))
    return 0;
  v4 = 0;
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10093B018);
  return !sub_100421838((uint64_t)off_1009778D0, a2, &v4) && v4 == 1;
}

uint64_t sub_1005B4354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  _QWORD *v7;
  void *__p;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  void *v13[2];
  __int128 v14;
  void *v15[2];
  __int128 v16;
  void *v17[2];
  _OWORD v18[3];
  __int128 v19;
  uint64_t v20;

  v2 = a2;
  if (!a2)
    return v2;
  v20 = 0;
  v19 = 0u;
  *(_OWORD *)v17 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  *(_OWORD *)v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  sub_1005BCCCC((uint64_t)&v12 + 1);
  BYTE2(v13[0]) = 0;
  BYTE4(v13[0]) = 0;
  BYTE2(v15[0]) = 0;
  BYTE4(v15[0]) = 0;
  DWORD1(v18[1]) = 0;
  v14 = 0uLL;
  v13[1] = 0;
  LOBYTE(v15[0]) = 0;
  v16 = 0uLL;
  v15[1] = 0;
  LOBYTE(v17[0]) = 0;
  memset(v18, 0, 19);
  v17[1] = 0;
  BYTE8(v18[1]) = 1;
  BYTE2(v20) = 0;
  *(_QWORD *)((char *)&v18[1] + 14) = 0;
  *(_QWORD *)((char *)&v18[1] + 9) = 0;
  v19 = 0uLL;
  *((_QWORD *)&v18[2] + 1) = 0;
  LOBYTE(v20) = 0;
  v4 = sub_1004419F4(v2, (uint64_t)&v12);
  if (BYTE10(v18[1]))
    v5 = v4;
  else
    v5 = 0;
  if (v5 || sub_100446894(v2))
  {
    __p = 0;
    v10 = 0;
    v11 = 0;
    if (sub_10006CA88(a1, (uint64_t **)&__p))
    {
      v2 = 0;
      if (!__p)
        goto LABEL_17;
    }
    else
    {
      v7 = __p;
      if (__p != v10)
      {
        while (*v7 != v2)
        {
          if (++v7 == v10)
          {
            v7 = v10;
            break;
          }
        }
      }
      v2 = v10 != v7;
      if (!__p)
        goto LABEL_17;
    }
    v10 = __p;
    operator delete(__p);
  }
  else
  {
    v2 = 0;
  }
LABEL_17:
  if (SHIBYTE(v18[0]) < 0)
    operator delete(v17[1]);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[1]);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[1]);
  nullsub_90((char *)&v12 + 1, v6);
  return v2;
}

void sub_1005B451C(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_10026B73C((uint64_t)&a13, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B4558(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  NSObject *v6;
  void **v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[5];
  void *__p;
  _QWORD *v19;
  uint64_t v20;
  _BYTE buf[18];

  v6 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8((uint64_t)a2, &__p);
    v7 = v20 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending 'pairing complete' event for device %{public}s with result %d", buf, 0x12u);
    if (SHIBYTE(v20) < 0)
      operator delete(__p);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_10003415C((uint64_t)buf, a1 + 416);
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_10001FE6C(&__p, a1 + 480);
  sub_100034264((uint64_t)buf);
  for (i = __p; i != v19; ++i)
    (*(void (**)(_QWORD, unsigned __int8 *, uint64_t))(*(_QWORD *)*i + 24))(*i, a2, a3);
  if (!(_DWORD)a3)
  {
    v9 = a2[128];
    v10 = a2[129];
    v11 = a2[130];
    v12 = a2[131];
    v13 = a2[132];
    v14 = a2[133];
    v15 = sub_10006BBEC();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1005B9824;
    v17[3] = &unk_100917378;
    v17[4] = (v9 << 40) | (v10 << 32) | (v11 << 24) | (v12 << 16) | (v13 << 8) | v14;
    sub_100041A34(v15, v17);
  }
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  return sub_100034234((uint64_t)buf);
}

void sub_1005B4730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1005B476C()
{
  operator new();
}

void sub_1005B47F4()
{
  operator delete();
}

void sub_1005B4838()
{
  operator new();
}

void sub_1005B48C0()
{
  operator delete();
}

void sub_1005B4904()
{
  operator new();
}

void sub_1005B498C()
{
  operator delete();
}

void sub_1005B49D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;

  v9 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 141560835;
    v11 = 1752392040;
    v12 = 1041;
    v13 = 16;
    v14 = 2097;
    v15 = a2;
    v16 = 2160;
    v17 = 1752392040;
    v18 = 1041;
    v19 = 16;
    v20 = 2097;
    v21 = a3;
    v22 = 2160;
    v23 = 1752392040;
    v24 = 1041;
    v25 = 16;
    v26 = 2097;
    v27 = a4;
    v28 = 2160;
    v29 = 1752392040;
    v30 = 1041;
    v31 = 16;
    v32 = 2097;
    v33 = a5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PairingManager::localOOBDataGenerated C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{private, mask.hash}.16P R256:%{private, mask.hash}.16P", (uint8_t *)&v10, 0x6Au);
  }
  operator new();
}

void sub_1005B4B5C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, (uint64_t)(a1 + 26));
  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, (uint64_t)(a1 + 35));
  v4 = *(_QWORD *)(a2 + 8);
  v6 = (_QWORD *)a1[44];
  v5 = a1[45];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[43];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_10007ABA0((uint64_t)(a1 + 45), v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v4;
    v7 = v14 + 8;
    v17 = (char *)a1[43];
    v16 = (char *)a1[44];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)a1[43];
    }
    a1[43] = v14;
    a1[44] = v7;
    a1[45] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[44] = v7;
  operator new();
}

void sub_1005B5524(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v40;

  if (a27 < 0)
    operator delete(__p);
  sub_10026B73C((uint64_t)&a33, a2);
  nullsub_90(v38 - 128, v40);
  sub_100034234((uint64_t)&a12);
  sub_100043728(&a17);
  sub_100034234((uint64_t)&a18);
  sub_100034234((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B5620(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  int v8;
  void **v9;
  int v10;
  void **v11;
  const char *v12;
  _QWORD *v13;
  void *__p[2];
  char v16;
  uint8_t buf[24];
  int v18;

  v6 = a2[1];
  v7 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v6, __p);
    v8 = v16;
    v9 = (void **)__p[0];
    v10 = (*(uint64_t (**)(_QWORD *))(*a2 + 48))(a2);
    v11 = __p;
    if (v8 < 0)
      v11 = v9;
    v12 = "for self-initiated pairing to";
    *(_DWORD *)buf = 136315650;
    if ((_DWORD)a3)
      v12 = "for incoming pairing from";
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v11;
    *(_WORD *)&buf[22] = 1024;
    v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Notifying 'pairing started' %s %{public}s for Auth type %d", buf, 0x1Cu);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003415C((uint64_t)__p, a1 + 416);
  memset(buf, 0, sizeof(buf));
  sub_10001FE6C(buf, a1 + 480);
  sub_100034264((uint64_t)__p);
  v13 = *(_QWORD **)buf;
  if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v13 + 16))(*v13, v6, a3);
      ++v13;
    }
    while (v13 != *(_QWORD **)&buf[8]);
    v13 = *(_QWORD **)buf;
  }
  if (v13)
  {
    *(_QWORD *)&buf[8] = v13;
    operator delete(v13);
  }
  return sub_100034234((uint64_t)__p);
}

void sub_1005B57D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005B5820(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, (uint64_t)(a1 + 26));
  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, (uint64_t)(a1 + 35));
  v4 = *(_QWORD *)(a2 + 8);
  v6 = (_QWORD *)a1[44];
  v5 = a1[45];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[43];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_10007ABA0((uint64_t)(a1 + 45), v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v4;
    v7 = v14 + 8;
    v17 = (char *)a1[43];
    v16 = (char *)a1[44];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)a1[43];
    }
    a1[43] = v14;
    a1[44] = v7;
    a1[45] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[44] = v7;
  operator new();
}

void sub_1005B5EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_100034234((uint64_t)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1005B5F70(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, (uint64_t)(a1 + 26));
  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, (uint64_t)(a1 + 35));
  v4 = *(_QWORD *)(a2 + 8);
  v6 = (_QWORD *)a1[44];
  v5 = a1[45];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[43];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_10007ABA0((uint64_t)(a1 + 45), v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v4;
    v7 = v14 + 8;
    v17 = (char *)a1[43];
    v16 = (char *)a1[44];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)a1[43];
    }
    a1[43] = v14;
    a1[44] = v7;
    a1[45] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[44] = v7;
  operator new();
}

void sub_1005B63A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_100034234((uint64_t)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B6430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  uint64_t v11;
  _QWORD v13[2];
  _BYTE buf[18];
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 208);
  v10 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141560835;
    *(_QWORD *)&buf[4] = 1752392040;
    *(_WORD *)&buf[12] = 1041;
    *(_DWORD *)&buf[14] = 16;
    v15 = 2097;
    v16 = a2;
    v17 = 2160;
    v18 = 1752392040;
    v19 = 1041;
    v20 = 16;
    v21 = 2097;
    v22 = a3;
    v23 = 2160;
    v24 = 1752392040;
    v25 = 1041;
    v26 = 16;
    v27 = 2097;
    v28 = a4;
    v29 = 2160;
    v30 = 1752392040;
    v31 = 1041;
    v32 = 16;
    v33 = 2097;
    v34 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "PairingManager::notifyLocalOOBDataReady C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{private, mask.hash}.16P R256:%{private, mask.hash}.16P", buf, 0x6Au);
  }
  if (*(_BYTE *)(a1 + 272))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    sub_10003415C((uint64_t)buf, a1 + 48);
    v11 = *(_QWORD *)(a1 + 112);
    if (v11)
    {
      sub_1005B094C(v11, a2, a3, a4, a5);
    }
    else if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    {
      sub_100709748();
    }
    sub_100034234((uint64_t)buf);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
  {
    sub_10070984C();
  }
  return sub_100034234((uint64_t)v13);
}

void sub_1005B65FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100034234((uint64_t)&a11);
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B6628(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  NSObject *v11;
  void *p_p;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  _BOOL4 v17;
  _BYTE *v18;
  NSObject *v20;
  void **v21;
  int v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v26;
  int v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  _BYTE buf[12];
  char v32;
  void *__p;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BOOL4 v43;
  __int16 v44;
  _BOOL4 v45;
  __int16 v46;
  _BYTE *v47;
  __int128 v48;
  void *v49[2];
  __int128 v50;
  void *v51[2];
  __int128 v52;
  void *v53[2];
  _OWORD v54[3];
  __int128 v55;
  uint64_t v56;

  if (!(_DWORD)a3)
  {
    v30 = 0;
    v8 = a2 + 128;
    v28 = *(_DWORD *)(a2 + 128);
    v29 = *(_WORD *)(a2 + 132);
    v27 = sub_100182588((uint64_t)&v28, &v30);
    v56 = 0;
    v55 = 0u;
    memset(v54, 0, sizeof(v54));
    v52 = 0u;
    *(_OWORD *)v53 = 0u;
    v50 = 0u;
    *(_OWORD *)v51 = 0u;
    v48 = 0u;
    *(_OWORD *)v49 = 0u;
    sub_1005BCCCC((uint64_t)&v48 + 1);
    BYTE2(v49[0]) = 0;
    BYTE4(v49[0]) = 0;
    BYTE2(v51[0]) = 0;
    BYTE4(v51[0]) = 0;
    DWORD1(v54[1]) = 0;
    v50 = 0uLL;
    v49[1] = 0;
    LOBYTE(v51[0]) = 0;
    v52 = 0uLL;
    v51[1] = 0;
    LOBYTE(v53[0]) = 0;
    memset(v54, 0, 19);
    v53[1] = 0;
    BYTE8(v54[1]) = 1;
    BYTE2(v56) = 0;
    *(_QWORD *)((char *)&v54[1] + 14) = 0;
    *(_QWORD *)((char *)&v54[1] + 9) = 0;
    v55 = 0uLL;
    *((_QWORD *)&v54[2] + 1) = 0;
    LOBYTE(v56) = 0;
    v9 = sub_1004419F4(a2, (uint64_t)&v48);
    if (BYTE2(v56))
      v10 = v9;
    else
      v10 = 0;
    v11 = qword_100999850;
    if (v10 && os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, &__p);
      if ((v39 & 0x8000) == 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = p_p;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Force No Clasic SMP support for device %{public}s", buf, 0xCu);
      if (SBYTE1(v39) < 0)
        operator delete(__p);
      v11 = qword_100999850;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v26 = v8;
      v14 = *(unsigned __int8 *)(a2 + 1113);
      v15 = *(unsigned __int8 *)(a1 + 528);
      v16 = sub_10043E93C((unsigned __int8 *)a2);
      v17 = sub_10046EA5C(a1 + 344, a2);
      sub_10046E9BC((unsigned __int8 *)&v28, buf);
      v18 = buf;
      if (v32 < 0)
        v18 = *(_BYTE **)buf;
      LODWORD(__p) = 67110914;
      HIDWORD(__p) = v27;
      v34 = 1024;
      v35 = a4;
      v36 = 1024;
      v37 = v14;
      v38 = 1024;
      v39 = v15;
      v40 = 1024;
      v41 = v16;
      v42 = 1024;
      v43 = v17;
      v44 = 1024;
      v45 = v10;
      v46 = 2082;
      v47 = v18;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "encryptionComplete status:%d encryptionMode:%d pendingClassicSMP:%d fCTKDDisabled=%d isPaired:%d isPairing:%d disableRemoteCTKDSupport:%d address:%{public}s", (uint8_t *)&__p, 0x36u);
      if (v32 < 0)
        operator delete(*(void **)buf);
      v8 = v26;
    }
    if (a4 == 2 && !v27 && !*(_BYTE *)(a1 + 528) && !v10)
    {
      sub_10018B4A0(v8, 1);
      if (*(_BYTE *)(a2 + 1113))
      {
        v20 = qword_100999850;
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a2, &__p);
          v21 = (v39 & 0x8000) == 0 ? &__p : (void **)__p;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Initiating Classic SMP with device %{public}s", buf, 0xCu);
          if (SBYTE1(v39) < 0)
            operator delete(__p);
        }
        *(_BYTE *)(a2 + 1113) = 0;
        v22 = sub_10018FEE0(v30);
        if (v22)
        {
          if (v22 == 4821)
          {
            v23 = qword_100999850;
            if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__p) = 0;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Failed to start Classic SMP Pairing, waiting for other side to initiate", (uint8_t *)&__p, 2u);
            }
          }
          else
          {
            if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
              sub_100709664();
            sub_10018B4A0(v8, 0);
          }
        }
      }
      else if (sub_10046EA5C(a1 + 344, a2) || (sub_10043E93C((unsigned __int8 *)a2) & 1) == 0)
      {
        *(_BYTE *)(a2 + 1113) = 1;
      }
    }
    if (SHIBYTE(v54[0]) < 0)
      operator delete(v53[1]);
    if (SHIBYTE(v52) < 0)
      operator delete(v51[1]);
    if (SHIBYTE(v50) < 0)
      operator delete(v49[1]);
    nullsub_90((char *)&v48 + 1, v13);
  }
  v24 = sub_100065478();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 640))(v24, a3, 1);
}

void sub_1005B6AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_10026B73C((uint64_t)&a27, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B6ADC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 *v3;
  _BOOL4 v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  uint8_t v14[32];
  _QWORD v15[3];
  _QWORD v16[2];
  unsigned __int8 *v17;

  v3 = (unsigned __int8 *)a3;
  v16[1] = 0;
  v17 = (unsigned __int8 *)a3;
  v16[0] = 0;
  sub_10003415C((uint64_t)v16, a1 + 280);
  v5 = sub_10046EA90((char **)(a1 + 344), (uint64_t)v3);
  if (v5 && os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8((uint64_t)v3, v15);
    sub_1007098C0();
  }
  v6 = *(_QWORD **)(a1 + 512);
  if (!v6)
    goto LABEL_25;
  v7 = a1 + 512;
  do
  {
    v8 = v6[4];
    v9 = v8 >= (unint64_t)v3;
    if (v8 >= (unint64_t)v3)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = (uint64_t)v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != a1 + 512 && *(_QWORD *)(v7 + 32) <= (unint64_t)v3 && (v11 = *(_QWORD *)(v7 + 40)) != 0)
  {
    v12 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "pairing timedout, rejecting pairing request", v14, 2u);
    }
    sub_100015ECC(a1 + 504, (unint64_t *)&v17);
    sub_1005B2774(a1, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v3 = v17;
  }
  else
  {
LABEL_25:
    if (v5 && os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8((uint64_t)v3, v14);
      sub_100709878();
    }
  }
  sub_1005B3820(a1, v3, 0xA1u);
  return sub_100034234((uint64_t)v16);
}

void sub_1005B6CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B6CEC(uint64_t a1)
{
  NSObject *v2;
  unsigned __int8 **v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  unsigned __int8 *v9;
  uint8_t buf[8];
  unsigned __int8 **v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[2];
  uint8_t v15[8];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 208);
  v2 = qword_100999850;
  if (*(_BYTE *)(a1 + 272))
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cancelling all currently pending pairing attempts", buf, 2u);
    }
    v13[0] = 0;
    v13[1] = 0;
    sub_10003415C((uint64_t)v13, a1 + 280);
    *(_QWORD *)buf = 0;
    v11 = 0;
    v12 = 0;
    sub_10001FE6C(buf, a1 + 344);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 344);
    sub_100034264((uint64_t)v13);
    sub_100034264((uint64_t)v14);
    v3 = *(unsigned __int8 ***)buf;
    if (*(unsigned __int8 ***)buf != v11)
    {
      do
      {
        v9 = *v3;
        sub_100034188((uint64_t)v13);
        *(_QWORD *)v15 = &v9;
        v4 = sub_10002252C((uint64_t **)(a1 + 504), (unint64_t *)&v9, (uint64_t)&unk_100740F58, (uint64_t **)v15)[5];
        sub_100034264((uint64_t)v13);
        if (v4)
        {
          v6 = qword_100999850;
          if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v15 = 0;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Pairing cancelled, rejecting pairing request", v15, 2u);
          }
          v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
        }
        sub_1005B6F2C(v5, (uint64_t)v9);
        sub_1005B3820(a1, v9, 0xA1u);
        ++v3;
      }
      while (v3 != v11);
      v3 = *(unsigned __int8 ***)buf;
    }
    if (v3)
    {
      v11 = v3;
      operator delete(v3);
    }
    sub_100034234((uint64_t)v13);
    v7 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_100709908();
    v7 = 1;
  }
  sub_100034234((uint64_t)v14);
  return v7;
}

void sub_1005B6EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  sub_100034234((uint64_t)&a14);
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_1005B6F2C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  _BOOL8 v5;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v3 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    if (v8 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Blocking pairing for device %{public}s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v5 = sub_10024B508(a2 + 128, 1) != 0;
  sub_100043728(__p);
  return v5;
}

void sub_1005B7030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B704C(uint64_t a1, unint64_t a2, __n128 *a3)
{
  NSObject *v6;
  _BOOL8 v7;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *__p[2];
  char v26;
  _BYTE buf[22];

  v6 = qword_100999850;
  v7 = os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    sub_1005BCE08((unsigned __int8 *)a3, v20);
    v8 = SBYTE7(v21);
    v9 = (void **)v20[0];
    sub_10043E5F8(a2, __p);
    v10 = v20;
    if (v8 < 0)
      v10 = v9;
    if (v26 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting pincode %s for device %{public}s", buf, 0x16u);
    if (v26 < 0)
      operator delete(__p[0]);
    if (SBYTE7(v21) < 0)
      operator delete(v20[0]);
  }
  if (sub_1005B4298(v7, a2))
    return 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_10003415C((uint64_t)buf, a1 + 208);
  if (*(_BYTE *)(a1 + 272))
  {
    if ((unint64_t)sub_1005BCE00((uint64_t)a3) > 3)
    {
      __p[0] = 0;
      __p[1] = 0;
      sub_10003415C((uint64_t)__p, a1 + 280);
      if (sub_10046EA5C(a1 + 344, a2))
      {
        sub_100034264((uint64_t)__p);
        v16 = *(_QWORD *)(a1 + 112);
        if (v16)
        {
          sub_1005B075C(v16, a2, (uint64_t)a3);
          sub_1005B0824(v16, a2, a3);
        }
        v24 = 0;
        v22 = 0u;
        v23 = 0u;
        *(_OWORD *)v20 = 0u;
        v21 = 0u;
        sub_1005BDAC4(v20, a2, 0);
        if (sub_100446894(a2)
          && (v17 = sub_10034D508(),
              v12 = (*(uint64_t (**)(uint64_t, unint64_t, __n128 *))(*(_QWORD *)v17 + 16))(v17, a2, a3), (_DWORD)v12))
        {
          sub_1005BDBF4(v20);
        }
        else
        {
          sub_1005BDB58(v20, a3);
          v12 = 0;
        }
        sub_1005BDAC8(v20, v18);
      }
      else
      {
        v12 = 0;
      }
      sub_100034234((uint64_t)__p);
    }
    else
    {
      v24 = 0;
      v22 = 0u;
      v23 = 0u;
      *(_OWORD *)v20 = 0u;
      v21 = 0u;
      sub_1005BDAC4(v20, a2, 0);
      v13 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      {
        v14 = sub_1005BCE00((uint64_t)a3);
        sub_100709934((uint8_t *)__p, v14, v13);
      }
      sub_1005BDBF4(v20);
      sub_1005BDAC8(v20, v15);
      v12 = 159;
    }
  }
  else
  {
    v12 = 0;
  }
  sub_100034234((uint64_t)buf);
  return v12;
}

void sub_1005B7300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  sub_100034234((uint64_t)&a22);
  sub_100034234(v22 - 96);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B7378(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  void **v9;
  uint64_t v10;
  void **v11;
  void *__p[2];
  char v14;
  _QWORD v15[2];
  uint64_t v16;
  uint8_t buf[4];
  void **v18;

  v15[1] = 0;
  v16 = a2;
  v15[0] = 0;
  sub_10003415C((uint64_t)v15, a1 + 280);
  if (sub_10046EA5C(a1 + 344, a2))
  {
    __p[0] = &v16;
    v6 = sub_10002252C((uint64_t **)(a1 + 504), (unint64_t *)&v16, (uint64_t)&unk_100740F58, (uint64_t **)__p)[5];
    sub_1005B2774(a1, v6);
    sub_100015ECC(a1 + 504, (unint64_t *)&v16);
    sub_100034264((uint64_t)v15);
    if (v6)
    {
      v7 = qword_100999850;
      v8 = os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT);
      if (a3)
      {
        if (v8)
        {
          sub_10043E5F8(v16, __p);
          if (v14 >= 0)
            v9 = __p;
          else
            v9 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v18 = v9;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Rejecting SSP request for device %{public}s", buf, 0xCu);
          if (v14 < 0)
            operator delete(__p[0]);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      }
      else
      {
        if (v8)
        {
          sub_10043E5F8(v16, __p);
          v11 = v14 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v18 = v11;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Accepting SSP request for device %{public}s", buf, 0xCu);
          if (v14 < 0)
            operator delete(__p[0]);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v10 = 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v16, __p);
        sub_10070998C();
      }
      v10 = 1;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a2, __p);
      sub_1007099D4();
    }
    v10 = 165;
  }
  sub_100034234((uint64_t)v15);
  return v10;
}

void sub_1005B75F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005B7624(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  _QWORD v4[5];
  int v5;

  if (*(_BYTE *)(a1 + 272))
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1005B7684;
    v4[3] = &unk_1009173C0;
    v4[4] = a2;
    v5 = a3;
    sub_100041A34(v3, v4);
  }
}

uint64_t sub_1005B7684(uint64_t a1)
{
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093AF58);
  return sub_1005B76D8((uint64_t)off_100978148, *(unsigned __int8 **)(a1 + 32), *(_DWORD *)(a1 + 40));
}

uint64_t sub_1005B76D8(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  NSObject *v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  _QWORD v14[3];
  _QWORD v15[2];
  __int128 v16;
  void *v17[2];
  __int128 v18;
  void *v19[2];
  __int128 v20;
  void *__p[2];
  _QWORD v22[6];
  __int128 v23;
  uint64_t v24;
  __n128 v25;
  char v26;

  v25 = 0uLL;
  v26 = 0;
  sub_1005BCCCC((uint64_t)&v25);
  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 280);
  if (sub_10046EA5C(a1 + 344, (uint64_t)a2))
  {
    sub_100034264((uint64_t)v15);
    v6 = qword_100999850;
    v7 = os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (a2)
      {
        sub_10043E5F8((uint64_t)a2, v14);
        sub_100709A5C();
      }
      else
      {
        sub_100709A1C((uint64_t)&v16, v6, v8);
      }
    }
    sub_1005B7980(v7, (uint64_t)a2);
    v9 = *(_QWORD *)(a1 + 112);
    if (!v9
      || sub_1005B064C(v9, (unint64_t)a2, &v25)
      || (unint64_t)sub_1005BCE00((uint64_t)&v25) > 3)
    {
      v24 = 0;
      v23 = 0u;
      memset(v22, 0, sizeof(v22));
      v20 = 0u;
      *(_OWORD *)__p = 0u;
      v18 = 0u;
      *(_OWORD *)v19 = 0u;
      v16 = 0u;
      *(_OWORD *)v17 = 0u;
      sub_1005BCCCC((uint64_t)&v16 + 1);
      BYTE2(v17[0]) = 0;
      BYTE4(v17[0]) = 0;
      BYTE2(v19[0]) = 0;
      BYTE4(v19[0]) = 0;
      HIDWORD(v22[2]) = 0;
      v18 = 0uLL;
      v17[1] = 0;
      LOBYTE(v19[0]) = 0;
      v20 = 0uLL;
      v19[1] = 0;
      LOBYTE(__p[0]) = 0;
      v22[0] = 0;
      v22[1] = 0;
      __p[1] = 0;
      *(_DWORD *)((char *)&v22[1] + 7) = 0;
      LOBYTE(v22[3]) = 1;
      BYTE2(v24) = 0;
      *(_QWORD *)((char *)&v22[3] + 6) = 0;
      *(_QWORD *)((char *)&v22[3] + 1) = 0;
      v23 = 0uLL;
      v22[5] = 0;
      LOBYTE(v24) = 0;
      if (sub_1004419F4((uint64_t)a2, (uint64_t)&v16)
        && BYTE2(v17[0])
        && BYTE2(v19[0])
        && !BYTE3(v17[0])
        && BYTE3(v19[0]))
      {
        sub_1005B6CEC(a1);
      }
      else
      {
        if (a3)
          v11 = a2[1344] + 1;
        else
          v11 = 0;
        a2[1344] = v11;
        sub_1005B3820(a1, a2, a3);
      }
      if (SHIBYTE(v22[1]) < 0)
        operator delete(__p[1]);
      if (SHIBYTE(v20) < 0)
        operator delete(v19[1]);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[1]);
      nullsub_90((char *)&v16 + 1, v10);
    }
    else
    {
      sub_1005B3820(a1, a2, 0x9Eu);
    }
  }
  sub_100034234((uint64_t)v15);
  return nullsub_90(&v25, v12);
}

void sub_1005B793C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  nullsub_90(v5 - 80, v7);
  _Unwind_Resume(a1);
}

BOOL sub_1005B7980(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  _BOOL8 v5;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v3 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    if (v8 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Unblocking pairing for device %{public}s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v5 = sub_10024B508(a2 + 128, 0) != 0;
  sub_100043728(__p);
  return v5;
}

void sub_1005B7A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

void sub_1005B7AA0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  __int128 __p;
  uint64_t v9;
  _QWORD v10[5];
  __int128 v11;
  uint64_t v12;

  v5 = sub_10006BBEC();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  v10[2] = sub_1005B7C00;
  v10[3] = &unk_10092D858;
  v10[4] = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003430C(&v11, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v11 = *a3;
    v12 = *((_QWORD *)a3 + 2);
  }
  sub_100041A34(v5, v10);
  v6 = sub_1000419F4();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  v7[2] = sub_1005B7C90;
  v7[3] = &unk_10092D858;
  v7[4] = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003430C(&__p, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    __p = *a3;
    v9 = *((_QWORD *)a3 + 2);
  }
  sub_100041A34(v6, v7);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)v11);
}

void sub_1005B7BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a19 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005B7C00(uint64_t a1)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093AF38);
  v2 = sub_10006D488((uint64_t)off_1009778E0, *(_QWORD *)(a1 + 32), 1);
  v5 = 0;
  sub_10004AD30((uint64_t)&v5);
  *(_QWORD *)&v4 = (int)v5;
  *((_QWORD *)&v4 + 1) = SWORD2(v5);
  return sub_10044054C(v2, a1 + 40, &v4);
}

void sub_1005B7C90(uint64_t a1)
{
  void *v2;
  void *__p[2];
  uint64_t v4;
  _QWORD v5[2];

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093B038);
  v5[0] = 0;
  v5[1] = 0;
  sub_10003F924((uint64_t)off_1009778C0, *(_QWORD *)(a1 + 32), 1u, 0, 0, 0, (unsigned __int8 *)v5);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093B038);
  v2 = off_1009778C0;
  if (*(char *)(a1 + 63) < 0)
  {
    sub_10003430C(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 56);
  }
  sub_10065354C((uint64_t)v2, (unsigned __int8 *)v5, (uint64_t)__p, 2);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_1005B7DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005B7DD4(uint64_t a1, unint64_t a2, __n128 *a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  NSObject *v22;
  void **v23;
  void **v24;
  _QWORD *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  NSObject *v31;
  uint64_t v33;
  char v34;
  void *__p[2];
  char v36;
  int v37;
  __int16 v38;
  _BYTE v39[22];
  _QWORD v40[2];
  _BYTE buf[28];
  __int16 v42;
  int v43;

  v8 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141558787;
    *(_QWORD *)&buf[4] = 1752392040;
    *(_WORD *)&buf[12] = 1041;
    *(_DWORD *)&buf[14] = 16;
    *(_WORD *)&buf[18] = 2097;
    *(_QWORD *)&buf[20] = nullsub_90(a3, v9);
    v42 = 1024;
    v43 = sub_1005A9764((uint64_t)a3);
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PairingManager::leDevicePaired LK:%{private, mask.hash}.16P LKype:%d", buf, 0x22u);
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093AF38);
  v10 = (unsigned __int8 *)sub_10006D488((uint64_t)off_1009778E0, a2, 1);
  v38 = 0;
  v37 = 0;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093AFF8);
  sub_1004A3424((uint64_t)off_100977A50, (uint64_t)&v37);
  if ((sub_10043E93C(v10) & 1) == 0)
  {
    sub_10043F78C((uint64_t)v10, (uint64_t)buf);
    if (buf[23] >= 0)
      v11 = buf[23];
    else
      v11 = *(_QWORD *)&buf[8];
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (v11)
        goto LABEL_16;
    }
    else if (v11)
    {
      goto LABEL_16;
    }
    __p[0] = 0;
    sub_10004AD30((uint64_t)__p);
    *(_QWORD *)buf = SLODWORD(__p[0]);
    *(_QWORD *)&buf[8] = SWORD2(__p[0]);
    sub_10044054C((uint64_t)v10, a4, buf);
    buf[0] = 0;
    sub_100043758(buf);
    sub_100181E3C((uint64_t)sub_1005B8484, (uint64_t)(v10 + 128));
    sub_100043728(buf);
  }
LABEL_16:
  sub_1004548BC((uint64_t)v10, 1);
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093AF78);
  sub_1005BEC60((uint64_t)off_100978158, v10, a3, 0);
  v40[0] = 0;
  v40[1] = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093B038);
  sub_10003F924((uint64_t)off_1009778C0, a2, 1u, 0, 0, 0, (unsigned __int8 *)v40);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093B038);
  v12 = off_1009778C0;
  v13 = sub_100030DF4((const unsigned __int8 *)v40);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  *((_BYTE *)sub_1000306B0((uint64_t)v12, v14) + 161) = 1;

  memset(buf, 0, 24);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093B038);
  v15 = off_1009778C0;
  v16 = sub_100030DF4((const unsigned __int8 *)v40);
  v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  sub_100658D7C((uint64_t)v15, v17, (uint64_t *)buf);

  v33 = a1;
  v18 = *(_BYTE **)buf;
  if (*(_BYTE **)buf != &buf[8])
  {
    do
    {
      v19 = sub_10034D650();
      v20 = v18 + 32;
      v21 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, _BYTE *))(*(_QWORD *)v19 + 792))(v19, v10, v18 + 32);
      v22 = qword_100999850;
      if (v21)
      {
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
        {
          if ((char)v18[55] < 0)
            v20 = (_QWORD *)*v20;
          sub_10043E5F8((uint64_t)v10, __p);
          if (v36 >= 0)
            v23 = __p;
          else
            v23 = (void **)__p[0];
          *(_DWORD *)v39 = 136446466;
          *(_QWORD *)&v39[4] = v20;
          *(_WORD *)&v39[12] = 2082;
          *(_QWORD *)&v39[14] = v23;
          _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Unable to set tag:\"%{public}s\" for valid classicDevice %{public}s after LE device paired", v39, 0x16u);
LABEL_40:
          if (v36 < 0)
            operator delete(__p[0]);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        if ((char)v18[55] < 0)
          v20 = (_QWORD *)*v20;
        sub_10043E5F8((uint64_t)v10, __p);
        if (v36 >= 0)
          v24 = __p;
        else
          v24 = (void **)__p[0];
        *(_DWORD *)v39 = 136446466;
        *(_QWORD *)&v39[4] = v20;
        *(_WORD *)&v39[12] = 2082;
        *(_QWORD *)&v39[14] = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Set tag:\"%{public}s\" for valid classicDevice %{public}s after LE device paired", v39, 0x16u);
        goto LABEL_40;
      }
      v25 = (_QWORD *)*((_QWORD *)v18 + 1);
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_BYTE *)*((_QWORD *)v18 + 2);
          v29 = *(_QWORD *)v26 == (_QWORD)v18;
          v18 = v26;
        }
        while (!v29);
      }
      v18 = v26;
    }
    while (v26 != &buf[8]);
  }
  *(_QWORD *)v39 = 0;
  *(_QWORD *)&v39[8] = 0;
  sub_10003415C((uint64_t)v39, v33 + 48);
  v27 = *(_QWORD *)(v33 + 112);
  if (v27)
    sub_1005AF38C(v27, 0);
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10093AFD8);
  sub_1004396EC((uint64_t)off_100978188);
  sub_1005B4558(v33, v10, 0);
  if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
  {
    v34 = 0;
    v28 = sub_10034D650();
    sub_100091AE8(__p, "_PENDING_PRIVACY_SYNC_POPUP_");
    if ((*(unsigned int (**)(uint64_t, unsigned __int8 *, void **, char *))(*(_QWORD *)v28 + 784))(v28, v10, __p, &v34))
    {
      v29 = 1;
    }
    else
    {
      v29 = v34 == 0;
    }
    v30 = !v29;
    if (v36 < 0)
    {
      operator delete(__p[0]);
      if (!v30)
        goto LABEL_66;
    }
    else if (!v30)
    {
      goto LABEL_66;
    }
    v31 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "_CTKD_ device pending for contacts/favorites sync, popping up dialog", (uint8_t *)__p, 2u);
    }
    sub_1005B85A8(v33, (uint64_t)v10);
  }
LABEL_66:
  sub_100034234((uint64_t)v39);
  sub_100056BAC((uint64_t)buf, *(char **)&buf[8]);
  return 0;
}

void sub_1005B8400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
  sub_100043728(&a28);
  _Unwind_Resume(a1);
}

void sub_1005B8484(int a1, unsigned __int8 *a2, char *__s)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *__p[2];
  uint64_t v11;
  void *v12[2];
  uint64_t v13;

  if (!a1)
  {
    v3 = *a2;
    v4 = a2[1];
    v5 = a2[2];
    v6 = a2[3];
    v7 = a2[4];
    v8 = a2[5];
    v12[0] = 0;
    v12[1] = 0;
    v13 = 0;
    v9 = sub_100091AE8(v12, __s);
    if (qword_100978150 != -1)
      dispatch_once(&qword_100978150, &stru_10093AF58);
    if (SHIBYTE(v13) < 0)
    {
      v9 = sub_10003430C(__p, v12[0], (unint64_t)v12[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v12;
      v11 = v13;
    }
    sub_1005B7AA0((uint64_t)v9, (v3 << 40) | (v4 << 32) | (v5 << 24) | (v6 << 16) | (v7 << 8) | v8, (__int128 *)__p);
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v13) < 0)
      operator delete(v12[0]);
  }
}

void sub_1005B8574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005B85A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
  {
    v4 = sub_10006BBEC();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1005BA2C0;
    v7[3] = &unk_100918690;
    v7[5] = a1;
    v7[6] = a2;
    v7[4] = &v8;
    sub_100041A34(v4, v7);
  }
  v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1005B865C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B8674(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093AF38);
  v4 = (unsigned __int8 *)sub_10006D488((uint64_t)off_1009778E0, a2, 1);
  if (v4)
  {
    v5 = v4;
    if (sub_1005B86F4((uint64_t)v4, v4))
      sub_1005B8744(a1, v5);
  }
  return 0;
}

uint64_t sub_1005B86F4(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093AF78);
  return sub_1005BEA2C((uint64_t)off_100978158, a2);
}

uint64_t sub_1005B8744(uint64_t a1, unsigned __int8 *a2)
{
  char v4;
  NSObject *v5;
  void **v6;
  const char *v7;
  void **v8;
  uint64_t v9;
  _QWORD v11[6];
  char v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10093B058);
  v4 = *((_BYTE *)off_100977A80 + 431);
  if (sub_10043F65C((uint64_t)a2, 0x80000u) != 4)
    goto LABEL_12;
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10093B058);
  if (sub_1002843E4((uint64_t)off_100977A80, (uint64_t)a2))
  {
    v5 = qword_100999870;
    if (!os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
    sub_10043E5F8((uint64_t)a2, __p);
    if (v14 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v16 = v6;
    v7 = "Easy Unpairing device %{public}s - Wait for Easy Unpair to complete before tearing down link";
  }
  else
  {
LABEL_12:
    v5 = qword_100999850;
    if (!os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
    sub_10043E5F8((uint64_t)a2, __p);
    if (v14 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v16 = v8;
    v7 = "Unpairing device %{public}s - defer unpairing";
  }
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, buf, 0xCu);
  if (v14 < 0)
    operator delete(__p[0]);
LABEL_19:
  __p[0] = 0;
  __p[1] = 0;
  sub_10003415C((uint64_t)__p, a1 + 536);
  *(_QWORD *)(a1 + 600) = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
  sub_100034264((uint64_t)__p);
  if (a2[952])
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10093AF38);
    sub_1004739B8((uint64_t)off_1009778E0);
  }
  v9 = *(_QWORD *)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1005B89F8;
  v11[3] = &unk_10091FF68;
  v11[4] = a1;
  v11[5] = a2;
  v12 = v4;
  sub_100475CEC(v9, 500, v11);
  sub_100034234((uint64_t)__p);
  return 0;
}

void sub_1005B89DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005B89F8(uint64_t a1)
{
  return sub_1005B8A08(*(_QWORD *)(a1 + 32), *(unsigned __int8 **)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t sub_1005B8A08(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *p_p;
  uint64_t v13;
  NSObject *v14;
  NSObject *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  int v23;
  void *v24;
  id v25;
  void *v26;
  _BYTE *v27;
  uint64_t v28;
  NSObject *v29;
  id v30;
  void *v31;
  uint64_t v32;
  _QWORD v34[5];
  void *v35[2];
  char v36;
  _BYTE v37[16];
  void *__p;
  void **v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t (*v42)();
  void *v43;
  _QWORD v44[2];
  _BYTE buf[22];
  __n128 v46;
  int v47;

  if (*(_BYTE *)(a1 + 272))
  {
    v5 = a2[128];
    v6 = a2[129];
    v7 = a2[130];
    v8 = a2[131];
    v9 = a2[132];
    v10 = a2[133];
    v46 = 0uLL;
    v47 = 0;
    sub_1005A9714((uint64_t)&v46);
    if (qword_100978160 != -1)
      dispatch_once(&qword_100978160, &stru_10093AF78);
    if (sub_1005BEB64((uint64_t)off_100978158, a2, &v46))
    {
      v11 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8((uint64_t)a2, &__p);
        if (v40 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = p_p;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device %{public}s -  already unpaired", buf, 0xCu);
        if (SHIBYTE(v40) < 0)
          operator delete(__p);
      }
      __p = 0;
      v39 = 0;
      sub_10003415C((uint64_t)&__p, a1 + 536);
      *(_QWORD *)(a1 + 600) = 0;
      sub_100034234((uint64_t)&__p);
    }
    else
    {
      sub_1005B90FC(a1, a2, 0, a3);
      v32 = v10;
      v16 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        v17 = &__p;
        sub_10043E5F8((uint64_t)a2, &__p);
        if (v40 < 0)
          v17 = __p;
        if (qword_100977A88 != -1)
          dispatch_once(&qword_100977A88, &stru_10093B058);
        v18 = sub_100284CEC((uint64_t)off_100977A80, a3);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v17;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Unpairing device %{public}s - disconnecting and removing link key with unpair type - %s", buf, 0x16u);
        if (SHIBYTE(v40) < 0)
          operator delete(__p);
      }
      if (qword_100977A78 != -1)
        dispatch_once(&qword_100977A78, &stru_10093B078);
      sub_100495A3C((uint64_t)off_100977A70, (uint64_t)a2, 1);
      sub_1004548BC((uint64_t)a2, 0);
      v19 = (v5 << 40) | (v6 << 32) | (v7 << 24) | (v8 << 16) | (v9 << 8) | v32;
      __p = 0;
      v39 = &__p;
      v40 = 0x4012000000;
      v41 = sub_1000626D8;
      v42 = nullsub_23;
      v44[0] = 0;
      v44[1] = 0;
      v43 = &unk_10083E079;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093B038);
      sub_10003F924(v44, off_1009778C0, v19, 0, 0, 0, 0);
      if (uuid_is_null((const unsigned __int8 *)v39 + 48))
        goto LABEL_39;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093B038);
      v20 = off_1009778C0;
      v21 = sub_100030DF4((const unsigned __int8 *)v39 + 48);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      sub_100091AE8(v35, "_CTKD_");
      v23 = sub_10000628C((uint64_t)v20, v22, (uint64_t)v35);
      if (v36 < 0)
        operator delete(v35[0]);

      if (!v23)
      {
LABEL_39:
        v29 = qword_100999850;
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
        {
          v30 = sub_100649588(v19);
          v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
          sub_100709B7C(v31, (uint64_t)v37, v29);
        }
        if (qword_1009778B8 != -1)
          dispatch_once(&qword_1009778B8, &stru_10093AF98);
        sub_1006A293C(qword_1009778B0, v19, 0);
      }
      else
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093B038);
        v24 = off_1009778C0;
        v25 = sub_100030DF4((const unsigned __int8 *)v39 + 48);
        v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        v27 = sub_1000306B0((uint64_t)v24, v26);
        v27[161] = 0;
        if (!v27[160])
          v27[162] = 0;

        if (qword_1009778B8 != -1)
          dispatch_once(&qword_1009778B8, &stru_10093AF98);
        sub_1006A293C(qword_1009778B0, v19, 1);
        v28 = sub_1000419F4();
        v34[0] = _NSConcreteStackBlock;
        v34[1] = 3221225472;
        v34[2] = sub_1005B9330;
        v34[3] = &unk_10093ADB8;
        v34[4] = &__p;
        sub_100041A34(v28, v34);
      }
      sub_10044688C((uint64_t)a2, 0);
      if (qword_100978160 != -1)
        dispatch_once(&qword_100978160, &stru_10093AF78);
      sub_1005BF3F0((uint64_t)off_100978158, (uint64_t)a2);
      if (qword_100978160 != -1)
        dispatch_once(&qword_100978160, &stru_10093AF78);
      if (sub_1005BEF34((uint64_t)off_100978158, a2, a3))
      {
        sub_10044688C((uint64_t)a2, 1);
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
          sub_100709B50();
      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      sub_10003415C((uint64_t)buf, a1 + 536);
      *(_QWORD *)(a1 + 600) = 0;
      sub_100034264((uint64_t)buf);
      sub_100034234((uint64_t)buf);
      _Block_object_dispose(&__p, 8);
    }
    nullsub_90(&v46, v13);
    return 0;
  }
  else
  {
    v14 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_100709AA4((uint64_t)a2, v14);
    __p = 0;
    v39 = 0;
    sub_10003415C((uint64_t)&__p, a1 + 536);
    *(_QWORD *)(a1 + 600) = 0;
    sub_100034234((uint64_t)&__p);
    return 111;
  }
}

void sub_1005B905C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;
  uint64_t v36;
  uint64_t v38;

  _Block_object_dispose(&a24, 8);
  nullsub_90(v36 - 128, v38);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B90FC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4)
{
  NSObject *v8;
  void **v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD v21[5];
  char v22;
  void *__p[2];
  char v24;
  uint8_t buf[24];

  v8 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8((uint64_t)a2, __p);
    v9 = v24 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a4;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending 'device unpaired' event for device %{public}s with UnpairInitiatorType %d, result %d", buf, 0x18u);
    if (v24 < 0)
      operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003415C((uint64_t)__p, a1 + 416);
  memset(buf, 0, sizeof(buf));
  sub_10001FE6C(buf, a1 + 480);
  sub_100034264((uint64_t)__p);
  for (i = *(_QWORD **)buf; i != *(_QWORD **)&buf[8]; ++i)
    v10 = (*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t))(*(_QWORD *)*i + 32))(*i, a2, a3);
  v12 = a2[128];
  v13 = a2[129];
  v14 = a2[130];
  v15 = a2[131];
  v16 = a2[132];
  v17 = a2[133];
  v18 = sub_1005B987C(v10, a4);
  v19 = sub_10006BBEC();
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1005B98E8;
  v21[3] = &unk_100918888;
  v21[4] = (v12 << 40) | (v13 << 32) | (v14 << 24) | (v15 << 16) | (v16 << 8) | v17;
  v22 = v18;
  sub_100041A34(v19, v21);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  return sub_100034234((uint64_t)__p);
}

void sub_1005B92F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1005B9330(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;

  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_10093B098);
  v2 = qword_1009778F0;
  v3 = sub_100030DF4((const unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  sub_1005DCD50(v2, v4);

}

void sub_1005B93AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL sub_1005B93C0()
{
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093AF78);
  return sub_1005BEB08((uint64_t)off_100978158);
}

uint64_t sub_1005B9400(uint64_t result, unsigned __int8 *a2, char a3)
{
  _QWORD *v4;
  char **v5;
  unint64_t v6;
  unsigned __int8 **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned __int8 **v14;
  char *v15;
  char *v16;
  char *v17;
  unsigned __int8 *v18;
  _QWORD v19[2];

  if ((a3 & 1) == 0)
  {
    v4 = (_QWORD *)result;
    v19[0] = 0;
    v19[1] = 0;
    sub_10003415C((uint64_t)v19, result + 280);
    v5 = (char **)(v4 + 43);
    if (!sub_10046EA5C((uint64_t)(v4 + 43), (uint64_t)a2))
    {
      v7 = (unsigned __int8 **)v4[44];
      v6 = v4[45];
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((char *)v7 - *v5) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          abort();
        v10 = v6 - (_QWORD)*v5;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v13 = (char *)sub_10007ABA0((uint64_t)(v4 + 45), v12);
        else
          v13 = 0;
        v14 = (unsigned __int8 **)&v13[8 * v9];
        v15 = &v13[8 * v12];
        *v14 = a2;
        v8 = v14 + 1;
        v17 = (char *)v4[43];
        v16 = (char *)v4[44];
        if (v16 != v17)
        {
          do
          {
            v18 = (unsigned __int8 *)*((_QWORD *)v16 - 1);
            v16 -= 8;
            *--v14 = v18;
          }
          while (v16 != v17);
          v16 = *v5;
        }
        v4[43] = v14;
        v4[44] = v8;
        v4[45] = v15;
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v7 = a2;
        v8 = v7 + 1;
      }
      v4[44] = v8;
    }
    sub_100034264((uint64_t)v19);
    sub_1005B3820((uint64_t)v4, a2, 0);
    return sub_100034234((uint64_t)v19);
  }
  return result;
}

void sub_1005B9524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B9538(uint64_t a1, unsigned __int8 *a2, char a3)
{
  return sub_1005B9400(a1 - 16, a2, a3);
}

uint64_t sub_1005B954C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 416);
  v4 = 0;
  v5 = 0;
  v6 = 0;
  sub_10001FE6C(&v4, a1 + 480);
  sub_100034264((uint64_t)v7);
  v2 = v4;
  if (v4 != v5)
  {
    do
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
      ++v2;
    }
    while (v2 != v5);
    v2 = v4;
  }
  if (v2)
  {
    v5 = v2;
    operator delete(v2);
  }
  return sub_100034234((uint64_t)v7);
}

void sub_1005B95E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B9614(uint64_t a1)
{
  return sub_1005B954C(a1 - 16);
}

uint64_t sub_1005B961C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  sub_1005B965C(a1, a2, 1);
  result = *(_QWORD *)(a1 + 112);
  if (result)
    return sub_1005AF478(result, a2);
  return result;
}

uint64_t sub_1005B965C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  char *v7;
  void **v8;
  _QWORD *v9;
  void *__p;
  _QWORD *v12;
  uint64_t v13;
  _BYTE buf[22];

  v6 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (_DWORD)a3 ? "incoming device" : "device";
    sub_10043E5F8(a2, &__p);
    v8 = v13 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending 'pairing started' event for %{public}s %s", buf, 0x16u);
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_10003415C((uint64_t)buf, a1 + 416);
  __p = 0;
  v12 = 0;
  v13 = 0;
  sub_10001FE6C(&__p, a1 + 480);
  sub_100034264((uint64_t)buf);
  v9 = __p;
  if (__p != v12)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v9 + 16))(*v9, a2, a3);
      ++v9;
    }
    while (v9 != v12);
    v9 = __p;
  }
  if (v9)
  {
    v12 = v9;
    operator delete(v9);
  }
  return sub_100034234((uint64_t)buf);
}

void sub_1005B97E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B981C(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1005B4558(a1, a2, 0);
}

uint64_t sub_1005B9824(uint64_t a1)
{
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093B0B8);
  return sub_1004B9DCC((uint64_t)off_100977B38, 1, *(_QWORD *)(a1 + 32), 1);
}

uint64_t sub_1005B987C(uint64_t a1, unsigned int a2)
{
  int v2;

  if (a2 >= 4)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_100709BC0();
    LOBYTE(v2) = 0;
  }
  else
  {
    return (0xC9CBCAC8 >> (8 * a2));
  }
  return v2;
}

uint64_t sub_1005B98E8(uint64_t a1)
{
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093B0B8);
  return sub_1004B9DCC((uint64_t)off_100977B38, 0, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

_QWORD *sub_1005B9940(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10093ADE8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1005B9980(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_10093ADE8;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

void sub_1005B99D0(uint64_t a1)
{
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093AF58);
  sub_1005B4B5C(off_100978148, *(_QWORD *)(a1 + 16));
}

_QWORD *sub_1005B9A20(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10093AE20;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1005B9A60(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_10093AE20;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

void sub_1005B9AB0(uint64_t a1)
{
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093AF58);
  sub_1005B5820(off_100978148, *(_QWORD *)(a1 + 16));
}

_QWORD *sub_1005B9B00(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10093AE58;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1005B9B40(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_10093AE58;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  operator delete();
}

void sub_1005B9B90(uint64_t a1)
{
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093AF58);
  sub_1005B5F70(off_100978148, *(_QWORD *)(a1 + 16));
}

void sub_1005B9BE4()
{
  operator delete();
}

uint64_t sub_1005B9BF8(uint64_t a1)
{
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093AF58);
  return sub_1005B6430((uint64_t)off_100978148, a1 + 10, a1 + 26, a1 + 42, a1 + 58);
}

void sub_1005B9C54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  _BOOL4 v17;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v1 + 616);
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v1 + 616) = v3 - 8;
  v5 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v4, __p);
    v6 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v15 = v6;
    v16 = 1024;
    v17 = v2 == 1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "privacySyncAlertCB for device %s allow:%d", buf, 0x12u);
    if (v13 < 0)
    {
      operator delete(__p[0]);
      if (v4)
        goto LABEL_7;
LABEL_24:
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
        sub_100709C20();
      goto LABEL_26;
    }
  }
  if (!v4)
    goto LABEL_24;
LABEL_7:
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093AF38);
  sub_100471F78((uint64_t)off_1009778E0, v4, 0, v2 == 1, v2 == 1, v2 == 1, v2 == 1);
  buf[0] = 0;
  v7 = sub_10034D650();
  sub_100091AE8(__p, "_PENDING_PRIVACY_SYNC_POPUP_");
  if ((*(unsigned int (**)(uint64_t, uint64_t, void **, uint8_t *))(*(_QWORD *)v7 + 784))(v7, v4, __p, buf))
    v8 = 1;
  else
    v8 = buf[0] == 0;
  v9 = !v8;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (!v9)
      goto LABEL_26;
  }
  else if (!v9)
  {
    goto LABEL_26;
  }
  v10 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "_CTKD_ device pending for contacts/favorites sync, removing tag", (uint8_t *)__p, 2u);
  }
  v11 = sub_10034D650();
  sub_100091AE8(__p, "_PENDING_PRIVACY_SYNC_POPUP_");
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v11 + 800))(v11, v4, __p);
  if (v13 < 0)
    operator delete(__p[0]);
LABEL_26:
  CFRelease(*(CFTypeRef *)(v1 + 632));
  *(_QWORD *)(v1 + 632) = 0;
}

void sub_1005B9EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005B9EEC(uint64_t a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  __CFUserNotification *v13;
  NSObject *v14;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Main;
  uint8_t v18[8];
  _QWORD v19[4];
  _QWORD v20[4];

  if (*(_QWORD *)(a1 + 632))
    return 0;
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 616) - 8))
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_100709C4C();
    return 0;
  }
  v3 = sub_100355F10(CFSTR("SYNC_CONTACTS_TITLE"), CFSTR("Allow Contacts and Favorites Sync?"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = sub_100355F10(CFSTR("SYNC_ALLOW_BUTTON"), CFSTR("Allow"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_100355F10(CFSTR("SYNC_DISALLOW_BUTTON"), CFSTR("Don’t Allow"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = sub_100355F10(CFSTR("SYNC_CONTACTS_MESSAGE"), CFSTR("Your car may request your contacts, phone favorites, and recent phone calls over Bluetooth. Do you wish to allow this? CarPlay will work without syncing."));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v19[0] = kCFUserNotificationAlertTopMostKey;
  v19[1] = SBUserNotificationAllowMenuButtonDismissal;
  v20[0] = &__kCFBooleanTrue;
  v20[1] = &__kCFBooleanTrue;
  v19[2] = SBUserNotificationDismissOnLock;
  v19[3] = kCFUserNotificationAlertHeaderKey;
  v20[2] = &__kCFBooleanTrue;
  v20[3] = v4;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 4));
  v12 = objc_msgSend(v11, "mutableCopy");

  objc_msgSend(v12, "setObject:forKey:", v10, kCFUserNotificationAlertMessageKey);
  objc_msgSend(v12, "setObject:forKey:", v8, kCFUserNotificationDefaultButtonTitleKey);
  objc_msgSend(v12, "setObject:forKey:", v6, kCFUserNotificationAlternateButtonTitleKey);
  v13 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0x10003uLL, 0, (CFDictionaryRef)v12);
  *(_QWORD *)(a1 + 632) = v13;
  if (v13)
  {
    v1 = 0;
  }
  else
  {
    v14 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v18 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to create Privacy Sync notification", v18, 2u);
      v13 = *(__CFUserNotification **)(a1 + 632);
    }
    else
    {
      v13 = 0;
    }
    v1 = 1;
  }
  RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v13, (CFUserNotificationCallBack)sub_1005BA230, 0);
  if (!RunLoopSource)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_100709C78();
    CFRelease(*(CFTypeRef *)(a1 + 632));
    v1 = 1;
  }
  Main = CFRunLoopGetMain();
  CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopCommonModes);
  CFRelease(RunLoopSource);

  return v1;
}

void sub_1005BA1D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1005BA230(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  _QWORD v5[6];

  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093AF58);
  v3 = off_100978148;
  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005B9C54;
  v5[3] = &unk_100918090;
  v5[4] = v3;
  v5[5] = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_1005BA2C0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t result;

  v2 = (_QWORD *)a1[5];
  v3 = (_QWORD *)v2[77];
  v4 = v2[78];
  if ((unint64_t)v3 >= v4)
  {
    v6 = v2[76];
    v7 = ((uint64_t)v3 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      abort();
    v8 = v4 - v6;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v11 = (char *)sub_10007ABA0((uint64_t)(v2 + 78), v10);
    else
      v11 = 0;
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = a1[6];
    v5 = v12 + 8;
    v14 = (char *)v2[77];
    v15 = (char *)v2[76];
    if (v14 != v15)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      v14 = (char *)v2[76];
    }
    v2[76] = v12;
    v2[77] = v5;
    v2[78] = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v3 = a1[6];
    v5 = v3 + 1;
  }
  v2[77] = v5;
  result = sub_1005B9EEC((uint64_t)v2);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

void sub_1005BA3BC()
{
  operator delete();
}

uint64_t sub_1005BA3D0(uint64_t a1, uint64_t a2)
{
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093AF58);
  return sub_1005B6ADC((uint64_t)off_100978148, a2, *(_QWORD *)(a1 + 24));
}

double sub_1005BA420@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  _QWORD *v5;
  size_t v6;
  std::string *v7;
  const void *v8;
  const std::string::value_type *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type v13;
  char v14;
  size_t v15;
  std::string *v16;
  const void *v17;
  uint64_t v18;
  const std::string::value_type *p_p;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  size_t v26;
  std::string *v27;
  const void *v28;
  double result;
  std::string v30;
  std::string v31;
  __int128 __p;
  unsigned __int8 v33;
  _QWORD v34[2];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = (std::string *)sub_100091AE8((_QWORD *)a2, "");
  std::string::assign(v4, "\nPairingManager STATUS :{\n");
  v5 = (_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  memset(&v30, 0, sizeof(v30));
  v7 = &v30;
  sub_1002D6774((uint64_t)&v30, v6 + 16);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*(char *)(a2 + 23) >= 0)
      v8 = (const void *)a2;
    else
      v8 = *(const void **)a2;
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "\tfStackStarted: ");
  if (*(_BYTE *)(a1 + 272))
    v9 = "YES";
  else
    v9 = "NO";
  v10 = std::string::append(&v30, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v31, "\n");
  v13 = v12->__r_.__value_.__r.__words[0];
  *(_QWORD *)&__p = v12->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&__p + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_QWORD *)a2 = v13;
  *v5 = __p;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)&__p + 7);
  *(_BYTE *)(a2 + 23) = v14;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 23) >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  memset(&v30, 0, sizeof(v30));
  v16 = &v30;
  sub_1002D6774((uint64_t)&v30, v15 + 12);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v16 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v15)
  {
    if (*(char *)(a2 + 23) >= 0)
      v17 = (const void *)a2;
    else
      v17 = *(const void **)a2;
    memmove(v16, v17, v15);
  }
  strcpy((char *)v16 + v15, "\tfAgent : {\n");
  v18 = *(_QWORD *)(a1 + 112);
  if (v18)
    sub_1005B0FA8(v18, (uint64_t)&__p);
  else
    sub_100091AE8(&__p, "\t\t(null)");
  if ((v33 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v33 & 0x80u) == 0)
    v20 = v33;
  else
    v20 = *((_QWORD *)&__p + 1);
  v21 = std::string::append(&v30, p_p, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v31, "}\n");
  v24 = v23->__r_.__value_.__r.__words[0];
  v34[0] = v23->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
  v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_QWORD *)a2 = v24;
  *v5 = v34[0];
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v34 + 7);
  *(_BYTE *)(a2 + 23) = v25;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if ((char)v33 < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 23) >= 0)
    v26 = *(unsigned __int8 *)(a2 + 23);
  else
    v26 = *(_QWORD *)(a2 + 8);
  memset(&v31, 0, sizeof(v31));
  v27 = &v31;
  sub_1002D6774((uint64_t)&v31, v26 + 29);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if (v26)
  {
    if (*(char *)(a2 + 23) >= 0)
      v28 = (const void *)a2;
    else
      v28 = *(const void **)a2;
    memmove(v27, v28, v26);
  }
  strcpy((char *)v27 + v26, "} END PairingManager STATUS\n\n");
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v31.__r_.__value_.__l.__data_;
  *(std::string *)a2 = v31;
  return result;
}

void sub_1005BA7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  _Unwind_Resume(exception_object);
}

void sub_1005BA874()
{
  operator delete();
}

uint64_t sub_1005BA888()
{
  return 30;
}

uint64_t sub_1005BA898(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void sub_1005BA8A0(id a1)
{
  operator new();
}

void sub_1005BA8E0()
{
  operator delete();
}

void sub_1005BA904(id a1)
{
  operator new();
}

void sub_1005BA944()
{
  operator delete();
}

void sub_1005BA968(id a1)
{
  operator new();
}

void sub_1005BA9A8()
{
  operator delete();
}

void sub_1005BA9CC(id a1)
{
  operator new();
}

void sub_1005BAA0C()
{
  operator delete();
}

void sub_1005BAA30(id a1)
{
  operator new();
}

void sub_1005BAA70()
{
  operator delete();
}

void sub_1005BAA94(id a1)
{
  operator new();
}

void sub_1005BAAD4()
{
  operator delete();
}

void sub_1005BAAF8(id a1)
{
  operator new();
}

void sub_1005BAB38()
{
  operator delete();
}

void sub_1005BAB5C(id a1)
{
  operator new();
}

void sub_1005BAB9C()
{
  operator delete();
}

void sub_1005BABC0(id a1)
{
  operator new();
}

void sub_1005BAC00()
{
  operator delete();
}

void sub_1005BAC24(id a1)
{
  operator new();
}

void sub_1005BAC64()
{
  operator delete();
}

void sub_1005BAC88(id a1)
{
  operator new();
}

void sub_1005BACC8()
{
  operator delete();
}

void sub_1005BACEC(id a1)
{
  operator new();
}

void sub_1005BAD2C()
{
  operator delete();
}

void sub_1005BAD50(id a1)
{
  operator new();
}

void sub_1005BAE68()
{
  operator delete();
}

void sub_1005BAE8C(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  __n128 v5;
  unsigned __int8 *v6;
  const char *v7;
  int v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  BOOL v16;
  std::string *v17;
  void *__p[2];
  unsigned __int8 v19;
  std::string v20;
  std::string v21;
  std::string v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  int v38;
  __int128 v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  __n128 v45;
  int v46;
  __n128 v47;
  int v48;
  char __str[16];
  _DWORD v50[7];

  *(_OWORD *)__str = 0u;
  memset(v50, 0, sizeof(v50));
  v48 = 0;
  v47 = 0uLL;
  v4 = a1[1];
  v5 = *(__n128 *)(v4 + 4);
  v46 = *(_DWORD *)(v4 + 20);
  v45 = v5;
  sub_100042F44(&v47, &v45);
  v44 = 0;
  v43 = xmmword_1007429E8;
  if (sub_100072DF0(v6, (unsigned __int8 *)&v43))
  {
    v7 = "Primary Service";
LABEL_21:
    v8 = *(unsigned __int16 *)a1[1];
LABEL_22:
    snprintf(__str, 0x2CuLL, "0x%04X %-20s", v8, v7);
    goto LABEL_23;
  }
  v42 = 0;
  v41 = xmmword_1007429FC;
  if (sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v41))
  {
    v7 = "Secondary Service";
    goto LABEL_21;
  }
  v40 = 0;
  v39 = xmmword_100742A10;
  if (sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v39))
  {
    v7 = "Included Service";
    goto LABEL_21;
  }
  v38 = 0;
  v37 = xmmword_100742A24;
  if (sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v37))
  {
    v7 = "Characteristic";
    goto LABEL_21;
  }
  v36 = 0;
  v35 = xmmword_100742A38;
  if (sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v35))
  {
    v7 = "Characteristic Value";
    goto LABEL_21;
  }
  v34 = 0;
  v33 = xmmword_100742A4C;
  if (sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v33))
  {
    v7 = "Extended Properties";
    goto LABEL_21;
  }
  v32 = 0;
  v31 = xmmword_100742A60;
  if (sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v31))
  {
    v7 = "User Description";
    goto LABEL_21;
  }
  v30 = 0;
  v29 = xmmword_100742A74;
  if (sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v29))
  {
    v7 = "Client Configuration";
    goto LABEL_21;
  }
  v28 = 0;
  v27 = xmmword_100742A88;
  if (sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v27))
  {
    v7 = "Server Configuration";
    goto LABEL_21;
  }
  v26 = 0;
  v25 = xmmword_100742A9C;
  if (sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v25))
  {
    v7 = "Format";
    goto LABEL_21;
  }
  v24 = 0;
  v23 = xmmword_100742AB0;
  v16 = sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v23);
  v8 = *(unsigned __int16 *)a1[1];
  if (v16)
  {
    v7 = "Aggregate Format";
    goto LABEL_22;
  }
  sub_10006887C((uint64_t)&v47, &v22);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v22;
  else
    v17 = (std::string *)v22.__r_.__value_.__r.__words[0];
  snprintf(__str, 0x2CuLL, "0x%04X %-20s", v8, (const char *)v17);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
LABEL_23:
  sub_100091AE8(&v20, __str);
  v9 = std::string::append(&v20, " [ ");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 24))(__p, a1);
  if ((v19 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v12 = v19;
  else
    v12 = (std::string::size_type)__p[1];
  v13 = std::string::append(&v21, (const std::string::value_type *)v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v22, " ]");
  *a2 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_1005BB28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005BB2F8(_BYTE *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 32))(a1);
  a1[20] = result;
  return result;
}

BOOL sub_1005BB324(uint64_t a1, unsigned __int8 *a2, int a3)
{
  __int16 v3;

  if (a3 == 2)
  {
    v3 = *a2;
    *(_WORD *)(a1 + 72) = v3;
    *(_WORD *)(a1 + 72) = v3 | (a2[1] << 8);
  }
  return a3 == 2;
}

uint64_t sub_1005BB34C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned __int8 *v4;
  _BOOL4 v5;
  __int16 v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  _OWORD v12[4];
  void *__p[2];
  __int128 v14;
  __int128 v15;
  _OWORD v16[9];
  uint64_t v17;
  __int128 v18;
  int v19;
  __n128 v20;
  int v21;
  __n128 v22;

  v17 = 0;
  v15 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  memset(v12, 0, sizeof(v12));
  v11 = 0u;
  sub_1002613AC((uint64_t)&v11);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(v2 + 20);
  v20 = *(__n128 *)(v2 + 4);
  v21 = v3;
  sub_100042F44(&v22, &v20);
  v19 = 0;
  v18 = xmmword_100742A74;
  v5 = sub_100072DF0(v4, (unsigned __int8 *)&v18);
  v6 = *(_WORD *)(a1 + 72);
  if (!v5)
  {
    if (*(_WORD *)(a1 + 72))
    {
      if ((v6 & 1) == 0)
        goto LABEL_12;
      v7 = "broadcast";
      v8 = 9;
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (!*(_WORD *)(a1 + 72))
  {
LABEL_10:
    v7 = "none";
    v8 = 4;
    goto LABEL_11;
  }
  if ((v6 & 1) != 0)
  {
    sub_1002614D8(v12, (uint64_t)"notification", 12);
    v6 = *(_WORD *)(a1 + 72);
  }
  if ((v6 & 2) != 0)
  {
    v7 = "indication";
    v8 = 10;
LABEL_11:
    sub_1002614D8(v12, (uint64_t)v7, v8);
  }
LABEL_12:
  std::stringbuf::str((char *)v12 + 8);
  *(_QWORD *)((char *)&v12[-1]
  *(_QWORD *)&v12[0] = v9;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v12 + 8);
  return std::ios::~ios(v16);
}

void sub_1005BB4F8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005BB518(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 72);
  if (result)
    operator delete[]();
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 0;
  if (a3)
    operator new[]();
  return result;
}

uint64_t sub_1005BB59C(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *__p[2];
  unsigned __int8 v9;
  __int128 v10;
  _OWORD v11[4];
  void *v12[2];
  __int128 v13;
  __int128 v14;
  _BYTE v15[144];
  uint64_t v16;
  char v17;

  v16 = 0;
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  *(_OWORD *)v12 = 0u;
  v13 = 0u;
  memset(v11, 0, sizeof(v11));
  v10 = 0u;
  sub_1002613AC((uint64_t)&v10);
  LOBYTE(__p[0]) = 34;
  v2 = sub_1002614D8(v11, (uint64_t)__p, 1);
  sub_10039A49C(a1, __p);
  if ((v9 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v4 = v9;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_1002614D8(v2, (uint64_t)v3, v4);
  v17 = 34;
  sub_1002614D8(v5, (uint64_t)&v17, 1);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  std::stringbuf::str((char *)v11 + 8);
  *(_QWORD *)((char *)&v11[-1]
  *(_QWORD *)&v11[0] = v6;
  if (SHIBYTE(v13) < 0)
    operator delete(v12[1]);
  std::streambuf::~streambuf((char *)v11 + 8);
  return std::ios::~ios(v15);
}

void sub_1005BB6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_1006CC5C8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_1005BB720(uint64_t a1, unsigned __int8 *a2, int a3)
{
  __int16 v3;

  if (a3 == 2)
  {
    v3 = *a2;
    *(_WORD *)(a1 + 72) = v3;
    *(_WORD *)(a1 + 72) = v3 | (a2[1] << 8);
  }
  return a3 == 2;
}

uint64_t sub_1005BB748(uint64_t a1)
{
  __int16 v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  _OWORD v8[4];
  void *__p[2];
  __int128 v10;
  __int128 v11;
  _OWORD v12[9];
  uint64_t v13;

  v13 = 0;
  v11 = 0u;
  memset(v12, 0, sizeof(v12));
  *(_OWORD *)__p = 0u;
  v10 = 0u;
  memset(v8, 0, sizeof(v8));
  v7 = 0u;
  sub_1002613AC((uint64_t)&v7);
  v2 = *(_WORD *)(a1 + 72);
  if (!v2)
  {
    v3 = "none";
    v4 = 4;
    goto LABEL_7;
  }
  if ((v2 & 1) != 0)
  {
    sub_1002614D8(v8, (uint64_t)"reliable-write", 14);
    v2 = *(_WORD *)(a1 + 72);
  }
  if ((v2 & 2) != 0)
  {
    v3 = "writeable-auxiliaries";
    v4 = 21;
LABEL_7:
    sub_1002614D8(v8, (uint64_t)v3, v4);
  }
  std::stringbuf::str((char *)v8 + 8);
  *(_QWORD *)((char *)&v8[-1]
  *(_QWORD *)&v8[0] = v5;
  if (SHIBYTE(v10) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v8 + 8);
  return std::ios::~ios(v12);
}

void sub_1005BB870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1006CC5C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1005BB884(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 7)
  {
    *(_BYTE *)(a1 + 72) = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 1);
    *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 2);
    *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 4);
    *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 5);
  }
  return a3 == 7;
}

uint64_t sub_1005BB8C0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v14;
  _OWORD v15[4];
  void *__p[2];
  __int128 v17;
  __int128 v18;
  _OWORD v19[9];
  uint64_t v20;

  v20 = 0;
  v18 = 0u;
  memset(v19, 0, sizeof(v19));
  *(_OWORD *)__p = 0u;
  v17 = 0u;
  memset(v15, 0, sizeof(v15));
  v14 = 0u;
  sub_1002613AC((uint64_t)&v14);
  v2 = *(_QWORD *)&v15[0];
  *(_DWORD *)((char *)v15 + *(_QWORD *)(*(_QWORD *)&v15[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v15
                                                                                    + *(_QWORD *)(*(_QWORD *)&v15[0]
                                                                                                - 24)
                                                                                    + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v15 + *(_QWORD *)(v2 - 24) + 8) |= 0x4000u;
  v3 = sub_1002614D8(v15, (uint64_t)"format: 0x", 10);
  v4 = (_QWORD *)std::ostream::operator<<(v3, *(unsigned __int8 *)(a1 + 72));
  v5 = sub_1002614D8(v4, (uint64_t)", exponent: 0x", 14);
  v6 = (_QWORD *)std::ostream::operator<<(v5, *(unsigned __int8 *)(a1 + 73));
  v7 = sub_1002614D8(v6, (uint64_t)", unit: 0x", 10);
  v8 = (_QWORD *)std::ostream::operator<<(v7, *(unsigned __int16 *)(a1 + 74));
  v9 = sub_1002614D8(v8, (uint64_t)", namespace: 0x", 15);
  v10 = (_QWORD *)std::ostream::operator<<(v9, *(unsigned __int8 *)(a1 + 76));
  v11 = sub_1002614D8(v10, (uint64_t)", description: 0x", 17);
  std::ostream::operator<<(v11, *(unsigned __int16 *)(a1 + 78));
  std::stringbuf::str((char *)v15 + 8);
  *(_QWORD *)((char *)&v15[-1]
  *(_QWORD *)&v15[0] = v12;
  if (SHIBYTE(v17) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v15 + 8);
  return std::ios::~ios(v19);
}

void sub_1005BBA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1006CC5C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BBA60(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 72);
  if (result)
    operator delete[]();
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 0;
  if (a3)
    operator new[]();
  return result;
}

void sub_1005BBAF0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (**v3)();
  unsigned int *v4;

  sub_10003994C(&v3, *(const void **)(a1 + 72), *(unsigned __int16 *)(a1 + 80));
  sub_1000453F0((uint64_t)&v3, a2);
  v3 = &off_100918258;
  if (v4)
    sub_100056AAC(v4);
}

void sub_1005BBB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10)
    sub_100056AAC(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1005BBB6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1000453F0(a1 + 72, a2);
}

uint64_t sub_1005BBB74(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v17;
  __int128 v18;
  _OWORD v19[4];
  void *v20[2];
  __int128 v21;
  __int128 v22;
  _BYTE v23[144];
  uint64_t v24;
  __n128 v25;
  __n128 v26;
  int v27;

  v24 = 0;
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  memset(v19, 0, sizeof(v19));
  v18 = 0u;
  sub_1002613AC((uint64_t)&v18);
  v2 = sub_1002614D8(v19, (uint64_t)"valueUUID: ", 11);
  v26 = *(__n128 *)(a1 + 76);
  v27 = *(_DWORD *)(a1 + 92);
  sub_100042F44(&v25, &v26);
  v3 = __p;
  sub_10006887C(v4, __p);
  if (v17 < 0)
    v3 = (void **)__p[0];
  v5 = strlen((const char *)v3);
  v6 = sub_1002614D8(v2, (uint64_t)v3, v5);
  sub_1002614D8(v6, (uint64_t)", ", 2);
  if (v17 < 0)
    operator delete(__p[0]);
  *(_DWORD *)((char *)__p + 3) = 0;
  LODWORD(__p[0]) = 0;
  snprintf((char *)__p, 7uLL, "0x%04X", *(unsigned __int16 *)(a1 + 74));
  v7 = sub_1002614D8(v19, (uint64_t)"valueHandle: ", 13);
  v8 = strlen((const char *)__p);
  v9 = sub_1002614D8(v7, (uint64_t)__p, v8);
  sub_1002614D8(v9, (uint64_t)", ", 2);
  sub_1002614D8(v19, (uint64_t)"properties:", 11);
  v10 = *(_BYTE *)(a1 + 72);
  if ((v10 & 1) != 0)
  {
    sub_1002614D8(v19, (uint64_t)" broadcast", 10);
    v10 = *(_BYTE *)(a1 + 72);
  }
  if ((v10 & 2) != 0)
  {
    sub_1002614D8(v19, (uint64_t)" read", 5);
    v10 = *(_BYTE *)(a1 + 72);
  }
  if ((v10 & 4) != 0)
  {
    sub_1002614D8(v19, (uint64_t)" responseless-writes", 20);
    v10 = *(_BYTE *)(a1 + 72);
  }
  if ((v10 & 8) != 0)
  {
    sub_1002614D8(v19, (uint64_t)" write", 6);
    v10 = *(_BYTE *)(a1 + 72);
  }
  if ((v10 & 0x10) != 0)
  {
    sub_1002614D8(v19, (uint64_t)" notify", 7);
    v10 = *(_BYTE *)(a1 + 72);
  }
  if ((v10 & 0x20) != 0)
  {
    sub_1002614D8(v19, (uint64_t)" indicate", 9);
    v10 = *(_BYTE *)(a1 + 72);
  }
  if ((v10 & 0x40) != 0)
  {
    sub_1002614D8(v19, (uint64_t)" signed-writes", 14);
    v10 = *(_BYTE *)(a1 + 72);
  }
  if (v10 < 0)
    sub_1002614D8(v19, (uint64_t)" extended", 9);
  sub_1002614D8(v19, (uint64_t)", ", 2);
  v11 = sub_1002614D8(v19, (uint64_t)"discoveredDescriptors: ", 23);
  if (*(_BYTE *)(a1 + 128))
    v12 = "all";
  else
    v12 = "none";
  if (*(_BYTE *)(a1 + 128))
    v13 = 3;
  else
    v13 = 4;
  sub_1002614D8(v11, (uint64_t)v12, v13);
  std::stringbuf::str((char *)v19 + 8);
  *(_QWORD *)((char *)&v19[-1]
  *(_QWORD *)&v19[0] = v14;
  if (SHIBYTE(v21) < 0)
    operator delete(v20[1]);
  std::streambuf::~streambuf((char *)v19 + 8);
  return std::ios::~ios(v23);
}

void sub_1005BBEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_1006CC5C8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BBEF4(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  uint64_t v9;
  __int128 v11;
  _OWORD v12[4];
  void *__p[2];
  __int128 v14;
  __int128 v15;
  _OWORD v16[9];
  uint64_t v17;
  char __str[16];
  __int128 v19;
  __n128 v20;
  __n128 v21;
  int v22;

  v17 = 0;
  v15 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  memset(v12, 0, sizeof(v12));
  v11 = 0u;
  sub_1002613AC((uint64_t)&v11);
  v2 = sub_1002614D8(v12, (uint64_t)"serviceUUID: ", 13);
  v21 = *(__n128 *)(a1 + 76);
  v22 = *(_DWORD *)(a1 + 92);
  sub_100042F44(&v20, &v21);
  v3 = __str;
  sub_10006887C(v4, __str);
  if (SBYTE7(v19) < 0)
    v3 = *(char **)__str;
  v5 = strlen(v3);
  v6 = sub_1002614D8(v2, (uint64_t)v3, v5);
  sub_1002614D8(v6, (uint64_t)", ", 2);
  if (SBYTE7(v19) < 0)
    operator delete(*(void **)__str);
  *(_OWORD *)__str = 0u;
  v19 = 0u;
  snprintf(__str, 0x20uLL, "0x%04X - 0x%04X", *(unsigned __int16 *)(a1 + 72), *(unsigned __int16 *)(a1 + 74));
  v7 = sub_1002614D8(v12, (uint64_t)"handleRange: ", 13);
  v8 = strlen(__str);
  sub_1002614D8(v7, (uint64_t)__str, v8);
  std::stringbuf::str((char *)v12 + 8);
  *(_QWORD *)((char *)&v12[-1]
  *(_QWORD *)&v12[0] = v9;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v12 + 8);
  return std::ios::~ios(v16);
}

void sub_1005BC0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1006CC5C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BC120(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *__p[2];
  char v18;
  __int128 v19;
  _OWORD v20[4];
  void *v21[2];
  __int128 v22;
  __int128 v23;
  _BYTE v24[144];
  uint64_t v25;
  __n128 v26;
  __n128 v27;
  int v28;

  v25 = 0;
  v23 = 0u;
  memset(v24, 0, sizeof(v24));
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  memset(v20, 0, sizeof(v20));
  v19 = 0u;
  sub_1002613AC((uint64_t)&v19);
  v2 = sub_1002614D8(v20, (uint64_t)"serviceUUID: ", 13);
  v27 = *(__n128 *)(a1 + 72);
  v28 = *(_DWORD *)(a1 + 88);
  sub_100042F44(&v26, &v27);
  v3 = __p;
  sub_10006887C(v4, __p);
  if (v18 < 0)
    v3 = (void **)__p[0];
  v5 = strlen((const char *)v3);
  v6 = sub_1002614D8(v2, (uint64_t)v3, v5);
  sub_1002614D8(v6, (uint64_t)", ", 2);
  if (v18 < 0)
    operator delete(__p[0]);
  *(_DWORD *)((char *)__p + 3) = 0;
  LODWORD(__p[0]) = 0;
  snprintf((char *)__p, 7uLL, "0x%04X", *(unsigned __int16 *)(a1 + 48));
  v7 = sub_1002614D8(v20, (uint64_t)"endHandle: ", 11);
  v8 = strlen((const char *)__p);
  v9 = sub_1002614D8(v7, (uint64_t)__p, v8);
  sub_1002614D8(v9, (uint64_t)", ", 2);
  sub_1002614D8(v20, (uint64_t)"discoveredCharacteristics: ", 27);
  if (*(_BYTE *)(a1 + 160))
  {
    v10 = "all";
    v11 = 3;
  }
  else
  {
    if (*(_QWORD *)(a1 + 168) == *(_QWORD *)(a1 + 176))
      v10 = "none";
    else
      v10 = "some";
    v11 = 4;
  }
  sub_1002614D8(v20, (uint64_t)v10, v11);
  if (*(_DWORD *)(a1 + 16))
  {
    v12 = sub_1002614D8(v20, (uint64_t)", ID: 0x", 8);
    v13 = *v12;
    *(_DWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v12 + *(_QWORD *)(v13 - 24) + 8) |= 0x4000u;
    v27.n128_u8[0] = 48;
    v14 = sub_1003CDCD4(v12, (unsigned __int8 *)&v27);
    *(_QWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 24) = 8;
    std::ostream::operator<<(v14, *(unsigned int *)(a1 + 16));
  }
  std::stringbuf::str((char *)v20 + 8);
  *(_QWORD *)((char *)&v20[-1]
  *(_QWORD *)&v20[0] = v15;
  if (SHIBYTE(v22) < 0)
    operator delete(v21[1]);
  std::streambuf::~streambuf((char *)v20 + 8);
  return std::ios::~ios(v24);
}

void sub_1005BC3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_1006CC5C8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1005BC438()
{
  operator delete();
}

void sub_1005BC44C()
{
  operator new();
}

_QWORD *sub_1005BC4C0(_QWORD *result)
{
  *result = off_10093B120;
  if (result[9])
    operator delete[]();
  return result;
}

void sub_1005BC508(_QWORD *a1)
{
  *a1 = off_10093B120;
  if (a1[9])
    operator delete[]();
  operator delete();
}

void sub_1005BC560()
{
  operator new();
}

void sub_1005BC5F0()
{
  operator delete();
}

uint64_t sub_1005BC614(uint64_t a1, uint64_t a2, int a3)
{
  sub_1005BB518(a1, a2, a3);
  return 1;
}

void sub_1005BC630()
{
  operator delete();
}

void sub_1005BC644()
{
  operator new();
}

void sub_1005BC6BC()
{
  operator delete();
}

void sub_1005BC6D0()
{
  operator new();
}

_QWORD *sub_1005BC744(_QWORD *result)
{
  *result = off_10093B1C8;
  if (result[9])
    operator delete[]();
  return result;
}

void sub_1005BC78C(_QWORD *a1)
{
  *a1 = off_10093B1C8;
  if (a1[9])
    operator delete[]();
  operator delete();
}

void sub_1005BC7E4()
{
  operator new();
}

void sub_1005BC86C()
{
  operator delete();
}

uint64_t sub_1005BC890(uint64_t a1, uint64_t a2, int a3)
{
  sub_1005BBA60(a1, a2, a3);
  return 1;
}

_QWORD *sub_1005BC8A8(_QWORD *a1)
{
  unsigned int *v2;

  *a1 = off_10093B200;
  a1[9] = &off_100918258;
  v2 = (unsigned int *)a1[10];
  if (v2)
    sub_100056AAC(v2);
  return a1;
}

void sub_1005BC8EC(_QWORD *a1)
{
  unsigned int *v1;

  *a1 = off_10093B200;
  a1[9] = &off_100918258;
  v1 = (unsigned int *)a1[10];
  if (v1)
    sub_100056AAC(v1);
  operator delete();
}

void sub_1005BC940()
{
  operator new();
}

void sub_1005BC9C4()
{
  operator delete();
}

void sub_1005BC9EC(_QWORD *a1)
{
  sub_1005BCB9C(a1);
  operator delete();
}

void sub_1005BCA10()
{
  operator new();
}

void sub_1005BCA54()
{
  operator delete();
}

void sub_1005BCA7C()
{
  operator delete();
}

void sub_1005BCA90()
{
  operator new();
}

void sub_1005BCB10(_QWORD *a1)
{
  sub_1005BCC18(a1);
  operator delete();
}

void sub_1005BCB34()
{
  operator new();
}

void sub_1005BCB78()
{
  operator delete();
}

_QWORD *sub_1005BCB9C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  *a1 = off_10093B230;
  v3 = (_QWORD *)a1[13];
  v2 = (_QWORD *)a1[14];
  while (v3 != v2)
  {
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      v2 = (_QWORD *)a1[14];
    }
    ++v3;
  }
  v4 = a1[12];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_1005BCC18(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_10093B290;
  v3 = (_QWORD *)a1[13];
  v2 = (_QWORD *)a1[14];
  while (v3 != v2)
  {
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      v2 = (_QWORD *)a1[14];
    }
    ++v3;
  }
  v5 = (_QWORD *)a1[17];
  v4 = (_QWORD *)a1[18];
  while (v5 != v4)
  {
    if (*v5)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 8))(*v5);
      v4 = (_QWORD *)a1[18];
    }
    ++v5;
  }
  v6 = (void *)a1[21];
  if (v6)
  {
    a1[22] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[17];
  if (v7)
  {
    a1[18] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[13];
  if (v8)
  {
    a1[14] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_1005BCCCC(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  return result;
}

char *sub_1005BCCD8(char *result, char *__s)
{
  char *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  result[16] = 0;
  if (__s)
  {
    v3 = result;
    v4 = strlen(__s);
    if (v4 <= 0x10uLL)
      v5 = v4;
    else
      v5 = 16;
    v3[16] = v5;
    return strncpy(v3, __s, v5);
  }
  return result;
}

char *sub_1005BCD34(char *a1, char *a2)
{
  a1[16] = 0;
  sub_1005BCCD8(a1, a2);
  return a1;
}

__n128 sub_1005BCD5C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  return result;
}

uint64_t sub_1005BCD70(uint64_t result)
{
  *(_BYTE *)(result + 16) = 0;
  return result;
}

char *sub_1005BCD78(char *a1, char *a2)
{
  sub_1005BCCD8(a1, a2);
  return a1;
}

uint64_t sub_1005BCD9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;

  if (*(unsigned __int8 *)(a1 + 16) < *(unsigned __int8 *)(a2 + 16))
    return 1;
  v3 = bswap64(*(_QWORD *)a1);
  v4 = bswap64(*(_QWORD *)a2);
  if (v3 == v4 && (v3 = bswap64(*(_QWORD *)(a1 + 8)), v4 = bswap64(*(_QWORD *)(a2 + 8)), v3 == v4))
  {
    v5 = 0;
  }
  else if (v3 < v4)
  {
    v5 = -1;
  }
  else
  {
    v5 = 1;
  }
  return v5 >> 31;
}

uint64_t sub_1005BCE00(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

_QWORD *sub_1005BCE08@<X0>(unsigned __int8 *__src@<X0>, _QWORD *a2@<X8>)
{
  return sub_1002D236C(a2, __src, __src[16]);
}

uint64_t sub_1005BCE18(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 32) = dispatch_workloop_create("XPCServer");
  return a1;
}

BOOL sub_1005BCE70(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  _xpc_connection_s *v6;
  BOOL v7;

  a1[13] = 0;
  v2 = dispatch_workloop_create("com.apple.server.bluetooth.le.att.xpc");
  a1[5] = v2;
  a1[9] = sub_1005BCF58((uint64_t)a1, "com.apple.server.bluetooth.le.att.xpc", v2);
  v3 = dispatch_workloop_create("com.apple.server.bluetooth.le.pipe.xpc");
  a1[6] = v3;
  a1[10] = sub_1005BCF58((uint64_t)a1, "com.apple.server.bluetooth.le.pipe.xpc", v3);
  v4 = dispatch_workloop_create("com.apple.server.bluetooth.general.xpc");
  a1[7] = v4;
  a1[11] = sub_1005BCF58((uint64_t)a1, "com.apple.server.bluetooth.general.xpc", v4);
  v5 = dispatch_workloop_create("com.apple.server.bluetooth.classic.xpc");
  a1[8] = v5;
  v6 = sub_1005BCF58((uint64_t)a1, "com.apple.server.bluetooth.classic.xpc", v5);
  a1[12] = v6;
  if (!a1[9] || !a1[10])
    return 0;
  if (a1[11])
    v7 = v6 == 0;
  else
    v7 = 1;
  return !v7;
}

_xpc_connection_s *sub_1005BCF58(uint64_t a1, char *name, dispatch_queue_t targetq)
{
  _xpc_connection_s *mach_service;
  NSObject *v6;
  _QWORD v8[6];
  uint8_t buf[4];
  char *v10;

  mach_service = xpc_connection_create_mach_service(name, targetq, 1uLL);
  if (mach_service)
  {
    v6 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v10 = name;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Registering XPC service \"%{public}s\"", buf, 0xCu);
    }
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100066454;
    v8[3] = &unk_10093B2B0;
    v8[4] = a1;
    v8[5] = name;
    xpc_connection_set_event_handler(mach_service, v8);
    xpc_connection_resume(mach_service);
  }
  return mach_service;
}

void sub_1005BD064(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  void *__p[2];
  char v5;
  char __s[16];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v2 = *(_QWORD *)(a1 + 40);
  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  *(_OWORD *)__s = 0u;
  v7 = 0u;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10093B2D0);
  sub_10050AD08(qword_100977B48, *(_DWORD *)(a1 + 48), __s, 0x64uLL);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 136));
  __p[0] = (void *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  v3 = sub_1005BD604((uint64_t **)(v2 + 112), (const void **)__p[0], (uint64_t)&unk_100740F58, (__int128 **)__p);
  sub_100091AE8(__p, __s);
  sub_100565F28((uint64_t **)v3 + 7, (const void **)__p, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 136));
}

void sub_1005BD180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005BD1A4(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  NSObject *v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  NSObject *v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  uint8_t *v13;
  uint8_t *v14;
  NSObject *v15;
  uint8_t *v16;
  uint8_t *v17;
  uint8_t *v18;
  uint8_t *v19;
  uint8_t *v20;
  uint8_t v21[4];
  uint8_t *v22;
  __int16 v23;
  int v24;
  uint8_t buf[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v2 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ XPC Server ------------------", buf, 2u);
  }
  v3 = *(_QWORD **)(a1 + 8);
  if (v3 != (_QWORD *)(a1 + 16))
  {
    do
    {
      v31 = 0;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      *(_OWORD *)buf = 0u;
      v26 = 0u;
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10093B2D0);
      sub_10050AD08(qword_100977B48, *((_DWORD *)v3 + 8), (char *)buf, 0x64uLL);
      v4 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *((_DWORD *)v3 + 10);
        *(_DWORD *)v21 = 136315394;
        v22 = buf;
        v23 = 1024;
        v24 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: process:%s numOfConnections:%d", v21, 0x12u);
      }
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != (_QWORD *)(a1 + 16));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  memset(buf, 0, sizeof(buf));
  *(_QWORD *)&v26 = 0;
  sub_1005BD798((uint64_t *)buf, (const void ***)(a1 + 112));
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  if ((_QWORD)v26)
  {
    v9 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump: ", v21, 2u);
    }
    v10 = *(uint8_t **)buf;
    if (*(uint8_t **)buf != &buf[8])
    {
      v11 = qword_100999860;
      v12 = qword_100999860;
      do
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v13 = v10 + 32;
          if ((char)v10[55] < 0)
            v13 = *(uint8_t **)v13;
          *(_DWORD *)v21 = 136315138;
          v22 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:     %s", v21, 0xCu);
          v11 = qword_100999860;
          v12 = qword_100999860;
        }
        v14 = (uint8_t *)*((_QWORD *)v10 + 7);
        v15 = v11;
        if (v14 != v10 + 64)
        {
          do
          {
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              v16 = v14 + 32;
              if ((char)v14[55] < 0)
                v16 = *(uint8_t **)v16;
              *(_DWORD *)v21 = 136315138;
              v22 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump:           %s", v21, 0xCu);
              v11 = qword_100999860;
              v12 = qword_100999860;
            }
            else
            {
              v12 = v15;
            }
            v17 = (uint8_t *)*((_QWORD *)v14 + 1);
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = *(uint8_t **)v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (uint8_t *)*((_QWORD *)v14 + 2);
                v8 = *(_QWORD *)v18 == (_QWORD)v14;
                v14 = v18;
              }
              while (!v8);
            }
            v15 = v12;
            v14 = v18;
          }
          while (v18 != v10 + 64);
        }
        v19 = (uint8_t *)*((_QWORD *)v10 + 1);
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = *(uint8_t **)v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (uint8_t *)*((_QWORD *)v10 + 2);
            v8 = *(_QWORD *)v20 == (_QWORD)v10;
            v10 = v20;
          }
          while (!v8);
        }
        v10 = v20;
      }
      while (v20 != &buf[8]);
    }
  }
  sub_10003F8DC((uint64_t)buf, *(_QWORD **)&buf[8]);
}

void sub_1005BD560(uint64_t a1)
{
  sub_100056BAC(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1005BD5A0(id a1)
{
  operator new();
}

void sub_1005BD5E0()
{
  operator delete();
}

uint64_t *sub_1005BD604(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)sub_10001F574((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1005BD6B8((uint64_t)a1, a4, v10);
    sub_100004078(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1005BD754((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_1005BD6B8@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_10003430C(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1005BD73C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1005BD754(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1005BD754(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1005BD560((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_1005BD798(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1005BD7EC(a1, *a2, a2 + 1);
  return a1;
}

void sub_1005BD7D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10003F8DC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1005BD7EC(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1005BD870(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1005BD870(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v11 = 0;
  v12 = 0;
  v6 = sub_1002A4958(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_1005BD910((uint64_t)a1, a4, v10);
    sub_100004078(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1005BD754((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_1005BD910@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = sub_1005BD980(v6 + 4, a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1005BD968(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1005BD754(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1005BD980(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_1002F6144(__dst + 3, (const void ***)a2 + 3);
  return __dst;
}

void sub_1005BD9D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005BD9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_10093B300;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  sub_1005BCD5C((__n128 *)(a1 + 50), (__n128 *)(a2 + 50));
  return a1;
}

uint64_t sub_1005BDA4C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  sub_10004AD30((uint64_t)&v8);
  v6 = SWORD2(v8);
  *(_QWORD *)(a1 + 16) = (int)v8;
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_10093B300;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 48) = a3;
  *(_BYTE *)(a1 + 49) = 0;
  sub_1005BCCCC(a1 + 50);
  return a1;
}

_QWORD *sub_1005BDAC8(_QWORD *a1, uint64_t a2)
{
  *a1 = off_10093B300;
  nullsub_90((char *)a1 + 50, a2);
  return a1;
}

void sub_1005BDAF8(_QWORD *a1, uint64_t a2)
{
  *a1 = off_10093B300;
  nullsub_90((char *)a1 + 50, a2);
  operator delete();
}

uint64_t sub_1005BDB38(uint64_t a1)
{
  *(_WORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return sub_1005BCD70(a1 + 50);
}

uint64_t sub_1005BDB50()
{
  return 30;
}

_BYTE *sub_1005BDB58(_BYTE *result, __n128 *a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (!result[49])
  {
    v3 = result;
    sub_1005BCD5C((__n128 *)(result + 50), a2);
    v3[49] = 1;
    v7 = 0;
    sub_100043758(&v7);
    v4 = *((_QWORD *)v3 + 1);
    v6 = nullsub_90(a2, v5);
    sub_1005BCE00((uint64_t)a2);
    sub_10024E48C(1, v4 + 128, v6);
    return sub_100043728(&v7);
  }
  return result;
}

void sub_1005BDBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

_BYTE *sub_1005BDBF4(_BYTE *result)
{
  _BYTE *v1;
  char v2;

  if (!result[49])
  {
    v1 = result;
    result[49] = 1;
    v2 = 0;
    sub_100043758(&v2);
    sub_10024E48C(0, *((_QWORD *)v1 + 1) + 128, 0);
    return sub_100043728(&v2);
  }
  return result;
}

void sub_1005BDC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BDC68(uint64_t a1, uint64_t a2, int a3, char a4, char a5)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  sub_10004AD30((uint64_t)&v12);
  v10 = SWORD2(v12);
  *(_QWORD *)(a1 + 16) = (int)v12;
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = 2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_10093B348;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_BYTE *)(a1 + 52) = a4;
  *(_BYTE *)(a1 + 53) = a5;
  return a1;
}

__n128 sub_1005BDCEC(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unsigned __int32 v3;
  __n128 result;

  v2 = a2->n128_u64[1];
  v3 = a2[2].n128_u32[0];
  result = a2[1];
  a1[1] = result;
  a1[2].n128_u32[0] = v3;
  a1[2].n128_u64[1] = 0;
  a1->n128_u64[0] = (unint64_t)off_10093B348;
  a1->n128_u64[1] = v2;
  a1[3].n128_u32[0] = a2[3].n128_u32[0];
  a1[3].n128_u16[2] = a2[3].n128_u16[2];
  return result;
}

void sub_1005BDD28()
{
  operator delete();
}

uint64_t sub_1005BDD3C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 52);
}

uint64_t sub_1005BDD44(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_1005BDD4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 53);
}

_BYTE *sub_1005BDD54(uint64_t a1)
{
  char v3;

  v3 = 0;
  sub_100043758(&v3);
  sub_10024CDB0(1, *(_QWORD *)(a1 + 8) + 128);
  return sub_100043728(&v3);
}

void sub_1005BDD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BDDB0()
{
  return 30;
}

_BYTE *sub_1005BDDB8(uint64_t a1)
{
  char v3;

  v3 = 0;
  sub_100043758(&v3);
  sub_10024CDB0(0, *(_QWORD *)(a1 + 8) + 128);
  return sub_100043728(&v3);
}

void sub_1005BDE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BDE14(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_BYTE *)(result + 52) = 1;
  return result;
}

uint64_t sub_1005BDE28(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  sub_10004AD30((uint64_t)&v8);
  v6 = SWORD2(v8);
  *(_QWORD *)(a1 + 16) = (int)v8;
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = 3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_10093B390;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  return a1;
}

__n128 sub_1005BDE94(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  unsigned __int32 v3;
  __n128 result;

  v2 = a2->n128_u64[1];
  v3 = a2[2].n128_u32[0];
  result = a2[1];
  a1[1] = result;
  a1[2].n128_u32[0] = v3;
  a1[2].n128_u64[1] = 0;
  a1->n128_u64[0] = (unint64_t)off_10093B390;
  a1->n128_u64[1] = v2;
  a1[3].n128_u32[0] = a2[3].n128_u32[0];
  return result;
}

void sub_1005BDEC8()
{
  operator delete();
}

uint64_t sub_1005BDEDC(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_1005BDEE8()
{
  return 30;
}

_BYTE *sub_1005BDEF0(uint64_t a1)
{
  char v3;

  v3 = 0;
  sub_100043758(&v3);
  sub_10024D100(*(_DWORD *)(a1 + 48) != 0, *(_QWORD *)(a1 + 8) + 128, *(unsigned int *)(a1 + 48));
  return sub_100043728(&v3);
}

void sub_1005BDF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

_BYTE *sub_1005BDF54(uint64_t a1)
{
  char v3;

  v3 = 0;
  sub_100043758(&v3);
  sub_10024D100(0, *(_QWORD *)(a1 + 8) + 128, 0);
  return sub_100043728(&v3);
}

void sub_1005BDFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BDFBC(uint64_t a1)
{
  char *v3;

  *(_QWORD *)a1 = off_10093B3D8;
  *(_QWORD *)(a1 + 8) = off_10093B430;
  *(_QWORD *)(a1 + 16) = &off_10093B450;
  sub_1000160D0(a1 + 24);
  *(_BYTE *)(a1 + 88) = 0;
  v3 = (char *)sub_1005BCCCC(a1 + 89);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 240) = 0;
  sub_1000160D0(a1 + 248);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 334) = 0;
  sub_1005BCD78(v3, "0000");
  return a1;
}

void sub_1005BE0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD **v14;
  _QWORD **v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  uint64_t v19;
  _QWORD **v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  v24 = *v21;
  if (*v21)
  {
    *(_QWORD *)(v19 + 320) = v24;
    operator delete(v24);
  }
  sub_100069BDC(v23);
  sub_1005C364C(v22, *v18);
  sub_10001A82C(a10, *v17);
  sub_1005C364C(a11, *v15);
  sub_10001A82C(a12, *v14);
  sub_10001A82C(v16, *v20);
  nullsub_90(a14, v25);
  sub_100069BDC(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BE15C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_10093B3D8;
  *(_QWORD *)(a1 + 8) = off_10093B430;
  *(_QWORD *)(a1 + 16) = &off_10093B450;
  v2 = *(void **)(a1 + 312);
  if (v2)
  {
    *(_QWORD *)(a1 + 320) = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 248);
  sub_1005C364C(a1 + 224, *(_QWORD **)(a1 + 232));
  sub_10001A82C(a1 + 200, *(_QWORD **)(a1 + 208));
  sub_1005C364C(a1 + 176, *(_QWORD **)(a1 + 184));
  sub_10001A82C(a1 + 152, *(_QWORD **)(a1 + 160));
  sub_10001A82C(a1 + 128, *(_QWORD **)(a1 + 136));
  nullsub_90(a1 + 89, v3);
  sub_100069BDC(a1 + 24);
  return a1;
}

void sub_1005BE1FC(uint64_t a1)
{
  sub_1005BE15C(a1);
  operator delete();
}

double sub_1005BE220(uint64_t a1)
{
  double result;

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10093B518);
  sub_10042381C(qword_100977B48 + 8, a1 + 8);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093B538);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 16);
  if (qword_100977A68 != -1)
    dispatch_once(&qword_100977A68, &stru_10093B558);
  (**(void (***)(void *))off_100977A60)(off_100977A60);
  result = 0.0;
  *(_OWORD *)(a1 + 375) = 0u;
  *(_OWORD *)(a1 + 391) = 0u;
  *(_OWORD *)(a1 + 343) = 0u;
  *(_OWORD *)(a1 + 359) = 0u;
  return result;
}

uint64_t sub_1005BE300(uint64_t a1)
{
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10093B518);
  sub_100069060(qword_100977B48 + 8, a1 + 8);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093B538);
  sub_100069060((uint64_t)off_100977A50 + 64, a1 + 16);
  if (qword_100977A68 != -1)
    dispatch_once(&qword_100977A68, &stru_10093B558);
  return (*(uint64_t (**)(void *))(*(_QWORD *)off_100977A60 + 8))(off_100977A60);
}

uint64_t sub_1005BE3CC(uint64_t a1)
{
  void (***v2)(_QWORD, void **);
  unsigned __int8 **v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  char *v9;
  sqlite3 **v10;
  void *v11;
  id v12;
  void *v13;
  _QWORD *v14;
  _BOOL4 v16;
  unint64_t v18;
  unsigned __int8 *v19;
  void *__p;
  void *v21;
  uint64_t v22;
  _QWORD v23[2];
  unsigned __int8 uu[8];
  uint64_t v25;
  __n128 v26;
  int v27;

  v23[0] = 0;
  v23[1] = 0;
  sub_10003415C((uint64_t)v23, a1 + 24);
  if (!*(_BYTE *)(a1 + 88))
  {
    *(_BYTE *)(a1 + 88) = 1;
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10093B538);
    sub_1004A3424((uint64_t)off_100977A50, a1 + 336);
    sub_10001A82C(a1 + 128, *(_QWORD **)(a1 + 136));
    *(_QWORD *)(a1 + 128) = a1 + 136;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    __p = 0;
    v21 = 0;
    v22 = 0;
    v2 = (void (***)(_QWORD, void **))sub_10034D508();
    (**v2)(v2, &__p);
    v3 = (unsigned __int8 **)__p;
    if (__p != v21)
    {
      do
      {
        v19 = *v3;
        v18 = ((unint64_t)v19[128] << 40) | ((unint64_t)v19[129] << 32) | ((unint64_t)v19[130] << 24) | ((unint64_t)v19[131] << 16) | ((unint64_t)v19[132] << 8) | v19[133];
        v26 = 0uLL;
        v27 = 0;
        sub_1005A9714((uint64_t)&v26);
        v4 = sub_10034D508();
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, __n128 *))(*(_QWORD *)v4 + 48))(v4, a1 + 336, v19, &v26);
        if (v5 || BYTE6(v18) && (BYTE6(v18) != 1 || (v18 & 0xC00000000000) == 0x800000000000))
        {
          v6 = qword_100999850;
          if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
          {
            v16 = (v18 & 0xC00000000000) != 0x800000000000 && BYTE6(v18) == 1;
            *(_DWORD *)uu = 67109376;
            *(_DWORD *)&uu[4] = v5;
            if (!BYTE6(v18))
              v16 = 1;
            LOWORD(v25) = 1024;
            *(_DWORD *)((char *)&v25 + 2) = v16;
            _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Not link key, result %d, BTAddressIsValid %d", uu, 0xEu);
          }
        }
        else
        {
          v8 = v19;
          *(_QWORD *)uu = &v18;
          sub_10002252C((uint64_t **)(a1 + 128), &v18, (uint64_t)&unk_100740F58, (uint64_t **)uu)[5] = (uint64_t)v8;
          *(_QWORD *)uu = &v19;
          v9 = sub_1005C36F8(a1 + 176, (unint64_t *)&v19, (uint64_t)&unk_100740F58, (_QWORD **)uu);
          sub_1005A9720((__n128 *)(v9 + 40), &v26);
          v10 = (sqlite3 **)sub_10034D5AC();
          sub_100336910(v10, (uint64_t)v19);
          *(_QWORD *)uu = 0;
          v25 = 0;
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093B578);
          sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)v19[128] << 40) | ((unint64_t)v19[129] << 32) | ((unint64_t)v19[130] << 24) | ((unint64_t)v19[131] << 16) | ((unint64_t)v19[132] << 8) | v19[133], 1u, 0, 0, 0, uu);
          if (!uuid_is_null(uu))
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093B578);
            v11 = off_1009778C0;
            v12 = sub_100030DF4(uu);
            v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
            v14 = sub_1000306B0((uint64_t)v11, v13);

            if (v14)
              *((_BYTE *)v14 + 161) = 1;
          }
        }
        nullsub_90(&v26, v7);
        ++v3;
      }
      while (v3 != v21);
    }
    *(_DWORD *)(a1 + 108) = 1;
    sub_1005BE7F8(a1);
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
  return sub_100034234((uint64_t)v23);
}

void sub_1005BE79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BE7F8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 248);
  v4 = 0;
  v5 = 0;
  v6 = 0;
  sub_10001FE6C(&v4, a1 + 312);
  sub_100034264((uint64_t)v7);
  v2 = v4;
  if (v4 != v5)
  {
    do
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 32))(*v2);
      ++v2;
    }
    while (v2 != v5);
    v2 = v4;
  }
  if (v2)
  {
    v5 = v2;
    operator delete(v2);
  }
  return sub_100034234((uint64_t)v7);
}

void sub_1005BE890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BE8C0(uint64_t a1)
{
  return sub_1005BE3CC(a1 - 16);
}

uint64_t sub_1005BE8C8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  NSObject *v8;
  uint8_t v10[16];
  uint8_t buf[8];
  uint64_t v12;

  v2 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SecurityManager::stackWillStop enter", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v12 = 0;
  sub_10003415C((uint64_t)buf, a1 + 24);
  v3 = *(_QWORD **)(a1 + 200);
  *(_BYTE *)(a1 + 88) = 0;
  v4 = (_QWORD *)(a1 + 208);
  if (v3 != (_QWORD *)(a1 + 208))
  {
    do
    {
      if (v3[5])
        operator delete();
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v4);
  }
  sub_10001A82C(a1 + 200, *(_QWORD **)(a1 + 208));
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 200) = v4;
  *(_OWORD *)(a1 + 343) = 0u;
  *(_OWORD *)(a1 + 359) = 0u;
  *(_OWORD *)(a1 + 375) = 0u;
  *(_OWORD *)(a1 + 391) = 0u;
  v8 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SecurityManager::stackWillStop exit", v10, 2u);
  }
  return sub_100034234((uint64_t)buf);
}

uint64_t sub_1005BEA24(uint64_t a1)
{
  return sub_1005BE8C8(a1 - 16);
}

uint64_t sub_1005BEA2C(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v4;
  _QWORD *i;
  unint64_t v6;
  _QWORD *j;
  unint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  if (!a2)
    return 0;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 24);
  v4 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
  for (i = *(_QWORD **)(a1 + 136); i; i = (_QWORD *)*i)
  {
    v6 = i[4];
    if (v4 >= v6)
    {
      if (v6 >= v4)
      {
LABEL_14:
        v9 = 1;
        goto LABEL_15;
      }
      ++i;
    }
  }
  for (j = *(_QWORD **)(a1 + 160); j; j = (_QWORD *)*j)
  {
    v8 = j[4];
    if (v4 >= v8)
    {
      if (v8 >= v4)
        goto LABEL_14;
      ++j;
    }
  }
  v9 = 0;
LABEL_15:
  sub_100034234((uint64_t)v11);
  return v9;
}

BOOL sub_1005BEB08(uint64_t a1)
{
  _BOOL8 v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 24);
  if (*(_QWORD *)(a1 + 144))
    v2 = 1;
  else
    v2 = *(_QWORD *)(a1 + 168) != 0;
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_1005BEB64(uint64_t a1, unsigned __int8 *a2, __n128 *a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  unsigned __int8 *v13;
  unint64_t *v14;

  v12[1] = 0;
  v13 = a2;
  v12[0] = 0;
  sub_10003415C((uint64_t)v12, a1 + 24);
  v6 = *(_QWORD **)(a1 + 136);
  if (v6)
  {
    v7 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
    do
    {
      v8 = v6[4];
      if (v7 >= v8)
      {
        if (v8 >= v7)
        {
          v14 = (unint64_t *)&v13;
          v10 = sub_1005C36F8(a1 + 176, (unint64_t *)&v13, (uint64_t)&unk_100740F58, &v14);
          sub_1005A9720(a3, (__n128 *)(v10 + 40));
          v9 = 0;
          goto LABEL_9;
        }
        ++v6;
      }
      v6 = (_QWORD *)*v6;
    }
    while (v6);
  }
  v9 = 150;
LABEL_9:
  sub_100034234((uint64_t)v12);
  return v9;
}

void sub_1005BEC4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BEC60(uint64_t a1, unsigned __int8 *a2, __n128 *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *i;
  unint64_t v14;
  uint64_t v15;
  _QWORD v17[5];
  char v18;
  unint64_t v19;
  _QWORD v20[2];
  unsigned __int8 *v21;
  unsigned __int8 **v22;

  v21 = a2;
  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 24);
  v8 = sub_10034D508();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, __n128 *, _QWORD))(*(_QWORD *)v8 + 56))(v8, a1 + 336, a2, a3, 0);
  if (!(_DWORD)v9)
  {
    v22 = &v21;
    v10 = sub_1005C36F8(a1 + 176, (unint64_t *)&v21, (uint64_t)&unk_100740F58, &v22);
    sub_1005A9720((__n128 *)(v10 + 40), a3);
    v11 = (uint64_t)v21;
    v12 = ((unint64_t)*(unsigned __int8 *)(v11 + 128) << 40) | ((unint64_t)*(unsigned __int8 *)(v11 + 129) << 32) | ((unint64_t)v21[130] << 24) | ((unint64_t)v21[131] << 16) | v21[133] | ((unint64_t)v21[132] << 8);
    v19 = v12;
    for (i = *(_QWORD **)(a1 + 136); i; i = (_QWORD *)*i)
    {
      v14 = i[4];
      if (v12 >= v14)
      {
        if (v14 >= v12)
          goto LABEL_8;
        ++i;
      }
    }
    v22 = (unsigned __int8 **)&v19;
    sub_10002252C((uint64_t **)(a1 + 128), &v19, (uint64_t)&unk_100740F58, (uint64_t **)&v22)[5] = v11;
LABEL_8:
    sub_100034264((uint64_t)v20);
    v15 = sub_10006BBEC();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1005BEE00;
    v17[3] = &unk_100918888;
    v17[4] = v21;
    v18 = a4;
    sub_100041A34(v15, v17);
    v9 = 0;
  }
  sub_100034234((uint64_t)v20);
  return v9;
}

void sub_1005BEDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BEE00(uint64_t a1)
{
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093B598);
  return sub_1005BEE54((uint64_t)off_100978158, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1005BEE54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 248);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_10001FE6C(&v8, a1 + 312);
  sub_100034264((uint64_t)v11);
  v6 = v8;
  if (v8 != v9)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2, a3);
      ++v6;
    }
    while (v6 != v9);
    v6 = v8;
  }
  if (v6)
  {
    v9 = v6;
    operator delete(v6);
  }
  return sub_100034234((uint64_t)v11);
}

void sub_1005BEF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BEF34(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v6;
  int v7;
  NSObject *v8;
  void **v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  void *__p[2];
  char v15;
  _QWORD v16[2];
  unsigned __int8 *v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;

  v16[1] = 0;
  v17 = a2;
  v16[0] = 0;
  sub_10003415C((uint64_t)v16, a1 + 24);
  v6 = sub_10034D508();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v6 + 64))(v6, a1 + 336, a2);
  if (v7)
  {
    v8 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      if (a2)
      {
        sub_10043E5F8((uint64_t)a2, __p);
        if (v15 >= 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        v19 = (const char *)v9;
        v20 = 1024;
        v21 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Failed to delete linkey for device %{public}s with error %d, but we'll keep unpairing", buf, 0x12u);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 136446466;
        v19 = "NULL";
        v20 = 1024;
        v21 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Failed to delete linkey for device %{public}s with error %d, but we'll keep unpairing", buf, 0x12u);
      }
    }
  }
  v10 = (void *)(((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133]);
  __p[0] = v10;
  for (i = *(_QWORD **)(a1 + 136); i; i = (_QWORD *)*i)
  {
    v12 = i[4];
    if ((unint64_t)v10 >= v12)
    {
      if (v12 >= (unint64_t)v10)
      {
        sub_100015ECC(a1 + 128, (unint64_t *)__p);
        break;
      }
      ++i;
    }
  }
  sub_1005C394C(a1 + 176, (unint64_t *)&v17);
  sub_1005BF1B4(a1, v17);
  sub_100034264((uint64_t)v16);
  if (!a3)
  {
    if (qword_100977A68 != -1)
      dispatch_once(&qword_100977A68, &stru_10093B558);
    sub_10045E9C0((uint64_t)off_100977A60, v17, 1);
  }
  sub_1005BF238(a1, (uint64_t)v17);
  sub_100034234((uint64_t)v16);
  return 0;
}

void sub_1005BF190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BF1B4(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;

  v2 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
  v5 = v2;
  v3 = *(_QWORD **)(result + 160);
  if (v3)
  {
    result += 152;
    do
    {
      v4 = v3[4];
      if (v2 >= v4)
      {
        if (v4 >= v2)
          return sub_100015ECC(result, &v5);
        ++v3;
      }
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1005BF238(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 248);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_10001FE6C(&v6, a1 + 312);
  sub_100034264((uint64_t)v9);
  v4 = v6;
  if (v6 != v7)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 24))(*v4, a2);
      ++v4;
    }
    while (v4 != v7);
    v4 = v6;
  }
  if (v4)
  {
    v7 = v4;
    operator delete(v4);
  }
  return sub_100034234((uint64_t)v9);
}

void sub_1005BF2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BF308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 24);
  v5 = sub_10034D508();
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 8))(v5, a2, a3);
  sub_100034234((uint64_t)v8);
  return v6;
}

void sub_1005BF368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BF37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 24);
  v5 = sub_10034D508();
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2, a3);
  sub_100034234((uint64_t)v8);
  return v6;
}

void sub_1005BF3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BF3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 24);
  v3 = sub_10034D508();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, a2);
  sub_100034234((uint64_t)v6);
  return v4;
}

void sub_1005BF448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BF45C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 344))(v4))
    return 2;
  result = 0;
  *(_DWORD *)(a1 + 108) = a2;
  return result;
}

uint64_t sub_1005BF4A0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, (uint64_t)(a1 + 31));
  v4 = (_QWORD *)a1[39];
  v5 = (_QWORD *)a1[40];
  v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        v6 = (_QWORD *)a1[40];
        break;
      }
    }
  }
  if (v6 == v5)
  {
    v7 = a1[41];
    if ((unint64_t)v5 >= v7)
    {
      v9 = v5 - v4;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v10 = v7 - (_QWORD)v4;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)sub_10007ABA0((uint64_t)(a1 + 41), v12);
      else
        v13 = 0;
      v14 = &v13[8 * v9];
      v15 = &v13[8 * v12];
      *(_QWORD *)v14 = a2;
      v8 = v14 + 8;
      v17 = (char *)a1[39];
      v16 = (char *)a1[40];
      if (v16 != v17)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        v16 = (char *)a1[39];
      }
      a1[39] = v14;
      a1[40] = v8;
      a1[41] = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v5 = a2;
      v8 = v5 + 1;
    }
    a1[40] = v8;
  }
  return sub_100034234((uint64_t)v20);
}

void sub_1005BF5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BF5D8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 248);
  v5 = *(char **)(a1 + 312);
  v4 = *(char **)(a1 + 320);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 320);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8)
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    *(_QWORD *)(a1 + 320) = &v5[v6];
  }
  return sub_100034234((uint64_t)v8);
}

void sub_1005BF670(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  __int128 *v17;
  NSObject *v18;
  _QWORD v19[2];
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  __int128 *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  __int128 *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  __int128 *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  __int16 v42;
  __int128 *v43;

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 24);
  v10 = (__int128 *)(a1 + 343);
  v11 = &xmmword_100993440;
  if (a2)
    v12 = a2;
  else
    v12 = &xmmword_100993440;
  *v10 = *v12;
  v13 = (__int128 *)(a1 + 359);
  if (a3)
    v14 = a3;
  else
    v14 = &xmmword_100993440;
  *v13 = *v14;
  v15 = (__int128 *)(a1 + 375);
  if (a4)
    v16 = a4;
  else
    v16 = &xmmword_100993440;
  *v15 = *v16;
  v17 = (__int128 *)(a1 + 391);
  if (a5)
    v11 = a5;
  *v17 = *v11;
  v18 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141560835;
    v21 = 1752392040;
    v22 = 1041;
    v23 = 16;
    v24 = 2097;
    v25 = v10;
    v26 = 2160;
    v27 = 1752392040;
    v28 = 1041;
    v29 = 16;
    v30 = 2097;
    v31 = v13;
    v32 = 2160;
    v33 = 1752392040;
    v34 = 1041;
    v35 = 16;
    v36 = 2097;
    v37 = v15;
    v38 = 2160;
    v39 = 1752392040;
    v40 = 1041;
    v41 = 16;
    v42 = 2097;
    v43 = v17;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Received local OOB Data from the controller C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{private, mask.hash}.16P R256:%{private, mask.hash}.16P", buf, 0x6Au);
  }
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093B5B8);
  sub_1005B49D0((uint64_t)off_100978148, (uint64_t)v10, (uint64_t)v13, (uint64_t)v15, (uint64_t)v17);
}

void sub_1005BF854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005BF870(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v4;
  _QWORD *i;
  unint64_t v6;
  unint64_t v8;
  _QWORD v9[2];
  unint64_t *v10;

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 24);
  v4 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
  v8 = v4;
  for (i = *(_QWORD **)(a1 + 160); i; i = (_QWORD *)*i)
  {
    v6 = i[4];
    if (v4 >= v6)
    {
      if (v6 >= v4)
        return sub_100034234((uint64_t)v9);
      ++i;
    }
  }
  v10 = &v8;
  sub_10002252C((uint64_t **)(a1 + 152), &v8, (uint64_t)&unk_100740F58, (uint64_t **)&v10)[5] = (uint64_t)a2;
  return sub_100034234((uint64_t)v9);
}

void sub_1005BF934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1005BF948(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  char v6;
  char v8;

  result.n128_u64[0] = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  if (!a4 || !a5 || *(_OWORD *)a4 == xmmword_100993440)
    goto LABEL_15;
  if (!a2 || *(_OWORD *)a5 == xmmword_100993440)
  {
    if (*(_OWORD *)a5 != xmmword_100993440)
    {
LABEL_14:
      v6 = 2;
      goto LABEL_25;
    }
LABEL_15:
    if (a2)
    {
      v6 = 0;
      if (!a3 || *(_OWORD *)a2 == xmmword_100993440)
      {
LABEL_25:
        *(_BYTE *)(a1 + 64) = v6;
        if (!a2)
          goto LABEL_31;
        goto LABEL_26;
      }
      if (a3->n128_u64[0] != (_QWORD)xmmword_100993440 || a3->n128_u64[1] != *((_QWORD *)&xmmword_100993440 + 1))
      {
        v8 = 1;
        goto LABEL_23;
      }
    }
    v6 = 0;
    goto LABEL_25;
  }
  v6 = 2;
  if (!a3 || *(_OWORD *)a2 == xmmword_100993440)
    goto LABEL_25;
  if (a3->n128_u64[0] == (_QWORD)xmmword_100993440 && a3->n128_u64[1] == *((_QWORD *)&xmmword_100993440 + 1))
    goto LABEL_14;
  v8 = 3;
LABEL_23:
  *(_BYTE *)(a1 + 64) = v8;
LABEL_26:
  if (*(_QWORD *)a2 != (_QWORD)xmmword_100993440 || *(_QWORD *)(a2 + 8) != *((_QWORD *)&xmmword_100993440 + 1))
  {
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
LABEL_31:
  if (a3)
  {
    if (a3->n128_u64[0] != (_QWORD)xmmword_100993440 || a3->n128_u64[1] != *((_QWORD *)&xmmword_100993440 + 1))
    {
      result = *a3;
      *(__n128 *)(a1 + 16) = *a3;
    }
  }
  if (a4)
  {
    if (*(_QWORD *)a4 != (_QWORD)xmmword_100993440 || *(_QWORD *)(a4 + 8) != *((_QWORD *)&xmmword_100993440 + 1))
    {
      result = *(__n128 *)a4;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)a4;
    }
  }
  if (a5)
  {
    if (*(_QWORD *)a5 != (_QWORD)xmmword_100993440 || *(_QWORD *)(a5 + 8) != *((_QWORD *)&xmmword_100993440 + 1))
    {
      result = *(__n128 *)a5;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)a5;
    }
  }
  return result;
}

void sub_1005BFACC(uint64_t a1, __int128 *a2, __int128 *a3)
{
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093B598);
  sub_1005BF670((uint64_t)off_100978158, a2, a3, 0, 0);
}

void sub_1005BFB2C(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093B598);
  sub_1005BF670((uint64_t)off_100978158, a2, a3, a4, a5);
}

uint64_t sub_1005BFB9C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v11;
  void **v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  char v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  _BYTE buf[12];
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;

  v26 = a2;
  v24 = *(_DWORD *)(a2 + 128);
  v25 = *(_WORD *)(a2 + 132);
  v11 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC((unsigned __int8 *)&v24, __p);
    v12 = v23 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136449283;
    *(_QWORD *)&buf[4] = v12;
    v28 = 2160;
    v29 = 1752392040;
    v30 = 1041;
    v31 = 16;
    v32 = 2097;
    v33 = a3;
    v34 = 2160;
    v35 = 1752392040;
    v36 = 1041;
    v37 = 16;
    v38 = 2097;
    v39 = a4;
    v40 = 2160;
    v41 = 1752392040;
    v42 = 1041;
    v43 = 16;
    v44 = 2097;
    v45 = a5;
    v46 = 2160;
    v47 = 1752392040;
    v48 = 1041;
    v49 = 16;
    v50 = 2097;
    v51 = a6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Setting OOB Data for device %{public}s C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{private, mask.hash}.16P R256:%{private, mask.hash}.16P", buf, 0x74u);
    if (v23 < 0)
      operator delete(__p[0]);
  }
  *(_QWORD *)buf = &v26;
  if (!sub_10002252C((uint64_t **)(a1 + 200), &v26, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5])
  {
    sub_1000438A4();
    operator new();
  }
  v13 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    sub_100709E00(v13, v14, v15, v16, v17, v18, v19, v20);
  return 177;
}

uint64_t sub_1005BFFD8(uint64_t a1, unint64_t a2)
{
  NSObject *v3;
  void **v4;
  uint64_t **v5;
  void *__p[2];
  char v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  uint8_t buf[4];
  void **v13;

  v11 = a2;
  v9 = *(_DWORD *)(a2 + 128);
  v10 = *(_WORD *)(a2 + 132);
  v3 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC((unsigned __int8 *)&v9, __p);
    v4 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Clearing OOB Data for device %{public}s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  v5 = (uint64_t **)(a1 + 200);
  __p[0] = &v11;
  if (sub_10002252C(v5, &v11, (uint64_t)&unk_100740F58, (uint64_t **)__p)[5])
    operator delete();
  sub_100015ECC((uint64_t)v5, &v11);
  return 0;
}

uint64_t sub_1005C0118(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint8_t buf[16];

  v2 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Initiating read local OOB data from local controller", buf, 2u);
  }
  if (*(_BYTE *)(a1 + 88))
  {
    v3 = *(_DWORD *)(sub_1000438A4() + 712);
    v13 = 0;
    sub_100043758(&v13);
    if ((v3 - 11) > 0x7C4)
    {
      v11 = sub_10024B658((uint64_t (*)())sub_1005BFACC, v4, v5, v6, v7, v8, v9, v10);
      if ((_DWORD)v11)
      {
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
          sub_100709E90();
        goto LABEL_12;
      }
    }
    else
    {
      v11 = sub_10024B6E0((uint64_t (*)())sub_1005BFB2C, v4, v5, v6, v7, v8, v9, v10);
      if ((_DWORD)v11)
      {
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
          sub_100709E30();
LABEL_12:
        v11 = 1;
      }
    }
    sub_100043728(&v13);
    return v11;
  }
  return 111;
}

void sub_1005C0238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_1005C024C(uint64_t a1, unint64_t a2)
{
  NSObject *v3;
  _BYTE *v4;
  uint64_t v5;
  NSObject *v6;
  _BYTE *v7;
  NSObject *v8;
  _BYTE *v9;
  _QWORD v10[2];
  int v11;
  __int16 v12;
  unint64_t v13;
  _BYTE buf[12];
  char v15;
  _BYTE __p[12];
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;

  v13 = a2;
  v11 = *(_DWORD *)(a2 + 128);
  v12 = *(_WORD *)(a2 + 132);
  v3 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC((unsigned __int8 *)&v11, __p);
    v4 = v19 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "OOB Data requested for device %{public}s", buf, 0xCu);
    if (SHIBYTE(v19) < 0)
      operator delete(*(void **)__p);
  }
  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 248);
  *(_QWORD *)__p = &v13;
  v5 = sub_10002252C((uint64_t **)(a1 + 200), &v13, (uint64_t)&unk_100740F58, (uint64_t **)__p)[5];
  if (v5 && *(_BYTE *)(v5 + 64))
  {
    v6 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      sub_10046E9BC((unsigned __int8 *)&v11, buf);
      if (v15 >= 0)
        v7 = buf;
      else
        v7 = *(_BYTE **)buf;
      *(_DWORD *)__p = 136449283;
      *(_QWORD *)&__p[4] = v7;
      v17 = 2160;
      v18 = 1752392040;
      v19 = 1041;
      v20 = 16;
      v21 = 2097;
      v22 = v5;
      v23 = 2160;
      v24 = 1752392040;
      v25 = 1041;
      v26 = 16;
      v27 = 2097;
      v28 = v5 + 16;
      v29 = 2160;
      v30 = 1752392040;
      v31 = 1041;
      v32 = 16;
      v33 = 2097;
      v34 = v5 + 32;
      v35 = 2160;
      v36 = 1752392040;
      v37 = 1041;
      v38 = 16;
      v39 = 2097;
      v40 = v5 + 48;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "OOB data found for device %{public}s C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{private, mask.hash}.16P R256:%{private, mask.hash}.16P", __p, 0x74u);
      if (v15 < 0)
        operator delete(*(void **)buf);
    }
    sub_10024D758(1, v13 + 128, v5, v5 + 16, v5 + 32, v5 + 48);
    sub_100034234((uint64_t)v10);
  }
  else
  {
    sub_100034234((uint64_t)v10);
    v8 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      sub_10046E9BC((unsigned __int8 *)&v11, __p);
      v9 = v19 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "No OOB data found for device %{public}s", buf, 0xCu);
      if (SHIBYTE(v19) < 0)
        operator delete(*(void **)__p);
    }
    sub_10024D758(0, v13 + 128, 0, 0, 0, 0);
  }
}

void sub_1005C0558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C057C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  unint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  _DWORD v17[4];
  _BYTE buf[18];
  __int16 v19;
  uint64_t v20;

  v4 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "oobDataForDeviceAvailable", buf, 2u);
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093B5D8);
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)&buf[4] = *(_WORD *)(a2 + 4);
  v5 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  if (!v5)
    return 0;
  v6 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141558531;
    *(_QWORD *)&buf[4] = 1752392040;
    *(_WORD *)&buf[12] = 1041;
    *(_DWORD *)&buf[14] = 6;
    v19 = 2097;
    v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "oobDataForDeviceAvailable device %{private, mask.hash}.6P is valid", buf, 0x1Cu);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_10003415C((uint64_t)buf, a1 + 248);
  v9 = *(_QWORD **)(a1 + 208);
  v8 = (_QWORD *)(a1 + 208);
  v7 = v9;
  if (!v9)
    goto LABEL_19;
  v10 = v8;
  do
  {
    v11 = v7[4];
    v12 = v11 >= v5;
    if (v11 >= v5)
      v13 = v7;
    else
      v13 = v7 + 1;
    if (v12)
      v10 = v7;
    v7 = (_QWORD *)*v13;
  }
  while (*v13);
  if (v10 != v8 && v5 >= v10[4])
    v14 = *(unsigned __int8 *)(v10[5] + 64);
  else
LABEL_19:
    v14 = 0;
  v15 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 67109120;
    v17[1] = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "oobDataForDeviceAvailable = %d", (uint8_t *)v17, 8u);
  }
  sub_100034234((uint64_t)buf);
  return v14;
}

uint64_t sub_1005C07A0(uint64_t a1)
{
  NSObject *v2;
  _BYTE *v3;
  _QWORD *v4;
  NSObject *v5;
  _BYTE *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  NSObject *v10;
  _QWORD *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE buf[12];
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint8_t v26[4];
  _BYTE *v27;

  v2 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ----------------- Security Manager ------------------", buf, 2u);
    v2 = qword_100999850;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_1005BCE08((unsigned __int8 *)(a1 + 89), buf);
    if ((v25 & 0x80000000) == 0)
      v3 = buf;
    else
      v3 = *(_BYTE **)buf;
    *(_DWORD *)v26 = 136315138;
    v27 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Default pincode: %s", v26, 0xCu);
    if (SBYTE3(v25) < 0)
      operator delete(*(void **)buf);
    v2 = qword_100999850;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Paired devices:", buf, 2u);
  }
  v4 = *(_QWORD **)(a1 + 128);
  if (v4 != (_QWORD *)(a1 + 136))
  {
    do
    {
      v5 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v4[5], buf);
        v6 = (v25 & 0x80000000) == 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v26 = 136446210;
        v27 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:    Device %{public}s", v26, 0xCu);
        if (SBYTE3(v25) < 0)
          operator delete(*(void **)buf);
      }
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != (_QWORD *)(a1 + 136));
  }
  v10 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump: Generated local OOB data:", buf, 2u);
    v10 = qword_100999850;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141558531;
    *(_QWORD *)&buf[4] = 1752392040;
    v22 = 1041;
    v23 = 16;
    v24 = 2097;
    v25 = a1 + 343;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump: \tC192:%{private, mask.hash}.16P", buf, 0x1Cu);
    v10 = qword_100999850;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141558531;
    *(_QWORD *)&buf[4] = 1752392040;
    v22 = 1041;
    v23 = 16;
    v24 = 2097;
    v25 = a1 + 359;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump: \tR192:%{private, mask.hash}.16P", buf, 0x1Cu);
    v10 = qword_100999850;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141558531;
    *(_QWORD *)&buf[4] = 1752392040;
    v22 = 1041;
    v23 = 16;
    v24 = 2097;
    v25 = a1 + 375;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:    C256:%{private, mask.hash}.16P", buf, 0x1Cu);
    v10 = qword_100999850;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141558531;
    *(_QWORD *)&buf[4] = 1752392040;
    v22 = 1041;
    v23 = 16;
    v24 = 2097;
    v25 = a1 + 391;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:    R256:%{private, mask.hash}.16P", buf, 0x1Cu);
    v10 = qword_100999850;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump: OOB data for devices:", buf, 2u);
    v10 = qword_100999850;
  }
  v11 = *(_QWORD **)(a1 + 200);
  if (v11 != (_QWORD *)(a1 + 208))
  {
    do
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v11[4], buf);
        v12 = buf;
        if ((v25 & 0x80000000) != 0)
          v12 = *(_BYTE **)buf;
        *(_DWORD *)v26 = 136446210;
        v27 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s:", v26, 0xCu);
        if (SBYTE3(v25) < 0)
          operator delete(*(void **)buf);
        v10 = qword_100999850;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v13 = v11[5];
        *(_DWORD *)buf = 141558531;
        *(_QWORD *)&buf[4] = 1752392040;
        v22 = 1041;
        v23 = 16;
        v24 = 2097;
        v25 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:      C192:%{private, mask.hash}.16P", buf, 0x1Cu);
        v10 = qword_100999850;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v14 = v11[5] + 16;
        *(_DWORD *)buf = 141558531;
        *(_QWORD *)&buf[4] = 1752392040;
        v22 = 1041;
        v23 = 16;
        v24 = 2097;
        v25 = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:      R192:%{private, mask.hash}.16P", buf, 0x1Cu);
        v10 = qword_100999850;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v15 = v11[5] + 32;
        *(_DWORD *)buf = 141558531;
        *(_QWORD *)&buf[4] = 1752392040;
        v22 = 1041;
        v23 = 16;
        v24 = 2097;
        v25 = v15;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:      C256:%{private, mask.hash}.16P", buf, 0x1Cu);
        v10 = qword_100999850;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v16 = v11[5] + 48;
        *(_DWORD *)buf = 141558531;
        *(_QWORD *)&buf[4] = 1752392040;
        v22 = 1041;
        v23 = 16;
        v24 = 2097;
        v25 = v16;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:      R256:%{private, mask.hash}.16P", buf, 0x1Cu);
        v10 = qword_100999850;
      }
      v17 = (_QWORD *)v11[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v11[2];
          v9 = *v18 == (_QWORD)v11;
          v11 = v18;
        }
        while (!v9);
      }
      v11 = v18;
    }
    while (v18 != (_QWORD *)(a1 + 208));
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump: Security keys:", buf, 2u);
  }
  v19 = sub_10034D508();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 184))(v19);
}

uint64_t sub_1005C0E88(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  const char *v10;
  CFStringRef v11;
  const char *v12;
  CFStringRef v13;
  CFStringRef v14;
  CFStringRef v15;
  const __CFDictionary *v16;
  __CFUserNotification *v17;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Main;
  SInt32 error;
  _QWORD v22[2];
  void *values[4];
  void *keys[4];

  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, a1 + 24);
  if (!*(_QWORD *)(a1 + 112))
  {
    *(_QWORD *)(a1 + 120) = a2;
    error = 0;
    if (*(char *)(a4 + 23) >= 0)
      v10 = (const char *)a4;
    else
      v10 = *(const char **)a4;
    v11 = CFStringCreateWithCString(kCFAllocatorDefault, v10, 0x600u);
    if (*(char *)(a5 + 23) >= 0)
      v12 = (const char *)a5;
    else
      v12 = *(const char **)a5;
    v13 = CFStringCreateWithCString(kCFAllocatorDefault, v12, 0x600u);
    v14 = CFStringCreateWithCString(kCFAllocatorDefault, "Allow", 0x600u);
    v15 = CFStringCreateWithCString(kCFAllocatorDefault, "Don't Allow", 0x600u);
    keys[0] = (void *)kCFUserNotificationAlertHeaderKey;
    keys[1] = (void *)kCFUserNotificationAlertMessageKey;
    keys[2] = (void *)kCFUserNotificationAlternateButtonTitleKey;
    keys[3] = (void *)kCFUserNotificationDefaultButtonTitleKey;
    values[0] = (void *)v11;
    values[1] = (void *)v13;
    values[2] = (void *)v14;
    values[3] = (void *)v15;
    v16 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v17 = CFUserNotificationCreate(kCFAllocatorDefault, (double)a3, 3uLL, &error, v16);
    *(_QWORD *)(a1 + 112) = v17;
    RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v17, (CFUserNotificationCallBack)sub_1005C10C0, 0);
    if (RunLoopSource)
    {
      Main = CFRunLoopGetMain();
      CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopCommonModes);
      CFRelease(RunLoopSource);
    }
    else
    {
      CFUserNotificationCancel(v17);
      CFRelease(v17);
    }
    CFRelease(v16);
    CFRelease(v11);
    CFRelease(v13);
  }
  return sub_100034234((uint64_t)v22);
}

void sub_1005C108C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C10C0(uint64_t a1, uint64_t a2)
{
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093B598);
  return sub_1005C1110((uint64_t)off_100978158, a2, a2);
}

uint64_t sub_1005C1110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const void *v18;
  _QWORD v20[2];
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 24);
  v5 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v6 = "unknown";
    v7 = *(_QWORD *)(a1 + 120);
    *(_DWORD *)buf = 136447235;
    if (!a3)
      v6 = "disallow";
    if (a3 == 1)
      v6 = "allow";
    v22 = v6;
    v23 = 2048;
    v24 = a3;
    v25 = 2160;
    v26 = 1752392040;
    v27 = 1041;
    v28 = 6;
    v29 = 2097;
    v30 = v7 + 128;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "User responded to security alert notification with %{public}s (%ld) button for device %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x30u);
  }
  if (!a3)
  {
    v8 = 2;
    goto LABEL_11;
  }
  if (a3 == 1)
  {
    v8 = 1;
LABEL_11:
    sub_100445354(*(_QWORD *)(a1 + 120), v8);
    goto LABEL_14;
  }
  v9 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    sub_100709EF0(v9, v10, v11, v12, v13, v14, v15, v16);
LABEL_14:
  v18 = *(const void **)(a1 + 112);
  v17 = (_QWORD *)(a1 + 112);
  CFRelease(v18);
  *v17 = 0;
  v17[1] = 0;
  return sub_100034234((uint64_t)v20);
}

void sub_1005C128C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1005C12A8(int *a1)
{
  unint64_t v2;
  int v3;
  __int16 v4;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093B5D8);
  v3 = *a1;
  v4 = *((_WORD *)a1 + 2);
  v2 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v3, 1);
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093B598);
  sub_1005C024C((uint64_t)off_100978158, v2);
}

uint64_t (**sub_1005C1354())()
{
  return &off_10093B470;
}

uint64_t (**sub_1005C1360())()
{
  return &off_10093B4E8;
}

void sub_1005C1374(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  int v6;
  __int16 v7;
  uint64_t v8;

  v2 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 141558531;
    v4 = 1752392040;
    v5 = 1041;
    v6 = 6;
    v7 = 2097;
    v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Secure-Simple-Pairing has started on device %{private,bluetooth:BD_ADDR,mask.hash}.6P", (uint8_t *)&v3, 0x1Cu);
  }
}

void sub_1005C1438(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  void **v6;
  void *v7;
  int v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093B5D8);
  LODWORD(__p[0]) = *(_DWORD *)a1;
  WORD2(__p[0]) = *(_WORD *)(a1 + 4);
  v4 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v5 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    if (v4)
    {
      sub_10043E5F8(v4, __p);
      if (v10 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 67109378;
      v12 = a2;
      v13 = 2082;
      v14 = (const char *)v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Pairing has completed with result %{bluetooth:OI_STATUS}u on device %{public}s", buf, 0x12u);
      if (v10 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 67109378;
      v12 = a2;
      v13 = 2082;
      v14 = "NULL";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Pairing has completed with result %{bluetooth:OI_STATUS}u on device %{public}s", buf, 0x12u);
    }
  }
  if ((_DWORD)a2)
  {
    if (qword_100978150 != -1)
      dispatch_once(&qword_100978150, &stru_10093B5B8);
    v7 = off_100978148;
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10093B538);
    v8 = sub_1004A35C0((uint64_t)off_100977A50, a2, 10000);
    sub_1005B7624((uint64_t)v7, v4, v8);
  }
}

void sub_1005C1644(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v2 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 141558531;
    v6 = 1752392040;
    v7 = 1041;
    v8 = 6;
    v9 = 2097;
    v10 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received IO Capability request for device %{private,bluetooth:BD_ADDR,mask.hash}.6P", (uint8_t *)&v5, 0x1Cu);
  }
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093B598);
  v3 = *((unsigned __int8 *)off_100978158 + 108);
  v4 = sub_1005C057C((uint64_t)off_100978158, a1);
  sub_10024DD60(0, a1, v3, v4);
}

BOOL sub_1005C175C(int *a1, uint64_t a2)
{
  NSObject *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t v10;
  __n128 v12;
  int v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int *v19;

  v4 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 141558531;
    v15 = 1752392040;
    v16 = 1041;
    v17 = 6;
    v18 = 2097;
    v19 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Link key requested for device %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093B5D8);
  *(_DWORD *)buf = *a1;
  LOWORD(v15) = *((_WORD *)a1 + 2);
  v5 = (unsigned __int8 *)sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v12 = 0uLL;
  v13 = 0;
  sub_1005A9714((uint64_t)&v12);
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093B598);
  if (!sub_1005BEB64((uint64_t)off_100978158, v5, &v12))
  {
    v7 = *a1;
    *(_WORD *)(a2 + 4) = *((_WORD *)a1 + 2);
    *(_DWORD *)a2 = v7;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)nullsub_90(&v12, v6);
    *(_DWORD *)(a2 + 24) = sub_1005A975C((uint64_t)&v12);
    v8 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 141558531;
      v15 = 1752392040;
      v16 = 1041;
      v17 = 6;
      v18 = 2097;
      v19 = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Found link key for device %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
    }
  }
  v9 = sub_1005A9778(&v12);
  nullsub_90(&v12, v10);
  return !v9;
}

void sub_1005C197C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C1998(uint64_t a1, __n128 *a2, unsigned __int32 a3)
{
  unsigned __int8 *v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[18];
  __int16 v13;
  uint64_t v14;
  __n128 v15;
  int v16;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093B5D8);
  *(_DWORD *)v12 = *(_DWORD *)a1;
  *(_WORD *)&v12[4] = *(_WORD *)(a1 + 4);
  v6 = (unsigned __int8 *)sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)v12, 1);
  v15 = 0uLL;
  v16 = 0;
  sub_1005A974C(&v15, a2, a3);
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093B598);
  v7 = sub_1005BEC60((uint64_t)off_100978158, v6, &v15, 0);
  v8 = qword_100999850;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_100709F20();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v12 = 141558531;
      *(_QWORD *)&v12[4] = 1752392040;
      *(_WORD *)&v12[12] = 1041;
      *(_DWORD *)&v12[14] = 6;
      v13 = 2097;
      v14 = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "New link key created for device %{private,bluetooth:BD_ADDR,mask.hash}.6P", v12, 0x1Cu);
    }
    sub_10043F78C((uint64_t)v6, (uint64_t)v12);
    if (SBYTE3(v14) < 0)
    {
      v10 = *(_QWORD *)&v12[8];
      operator delete(*(void **)v12);
      if (v10)
        return nullsub_90(&v15, v9);
    }
    else if (BYTE3(v14))
    {
      return nullsub_90(&v15, v9);
    }
    if (qword_100977D80 != -1)
      dispatch_once(&qword_100977D80, &stru_10093B4F8);
    sub_1004C22DC((uint64_t)off_100977D78);
  }
  return nullsub_90(&v15, v9);
}

void sub_1005C1BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  nullsub_90(va, a2);
  _Unwind_Resume(a1);
}

void sub_1005C1BC0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void **v4;
  uint64_t v5;
  int v6;
  void *v7;
  NSObject *v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093B5D8);
  LODWORD(__p[0]) = *(_DWORD *)a1;
  WORD2(__p[0]) = *(_WORD *)(a1 + 4);
  v2 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v3 = qword_100999850;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v2, __p);
      v4 = v10 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received a new pincode request for device %{public}s", buf, 0xCu);
      if (v10 < 0)
        operator delete(__p[0]);
    }
    v5 = sub_100185EF4(a1);
    if ((_DWORD)v5)
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10093B5D8);
      sub_100470B08((uint64_t)off_1009778E0, v2, v5);
      sub_10043F78C(v2, (uint64_t)__p);
      if (v10 < 0)
      {
        v6 = v5 & 0x1F00;
        v7 = __p[1];
        operator delete(__p[0]);
        if (v6 != 256 || v7)
          goto LABEL_26;
      }
      else if ((v5 & 0x1F00) != 0x100 || v10)
      {
        goto LABEL_26;
      }
      v8 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Pairing request coming from a computer without a name - try and get the name", (uint8_t *)__p, 2u);
      }
      if (qword_100977D80 != -1)
        dispatch_once(&qword_100977D80, &stru_10093B4F8);
      sub_1004C22DC((uint64_t)off_100977D78);
    }
LABEL_26:
    if (qword_100978150 != -1)
      dispatch_once(&qword_100978150, &stru_10093B5B8);
    sub_1005BDAC4(__p, v2, 4);
    sub_1005B476C();
  }
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    sub_100709F80();
}

void sub_1005C1E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1005BDAC8(&a9, a2);
  _Unwind_Resume(a1);
}

void sub_1005C1E80(uint64_t a1, int a2, int a3, char a4)
{
  uint64_t v7;
  NSObject *v8;
  char *v9;
  void **v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  char *v18;
  __int16 v19;
  void **v20;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093B5D8);
  LODWORD(__p[0]) = *(_DWORD *)a1;
  WORD2(__p[0]) = *(_WORD *)(a1 + 4);
  v7 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v8 = qword_100999850;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      v9 = a3 ? "numeric comparison" : "user confirmation";
      sub_10043E5F8(v7, __p);
      v10 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v18 = v9;
      v19 = 2082;
      v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received a new %s request for device %{public}s", buf, 0x16u);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    v11 = sub_100185EF4(a1);
    if ((_DWORD)v11)
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10093B5D8);
      sub_100470B08((uint64_t)off_1009778E0, v7, v11);
      sub_10043F78C(v7, (uint64_t)__p);
      if (v16 < 0)
      {
        v12 = __p[1];
        operator delete(__p[0]);
        if ((v11 & 0x1F00) != 0x100 || v12)
          goto LABEL_29;
      }
      else if ((v11 & 0x1F00) != 0x100 || v16)
      {
        goto LABEL_29;
      }
      v13 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Pairing request coming from a computer without a name - try and get the name", (uint8_t *)__p, 2u);
      }
      if (qword_100977D80 != -1)
        dispatch_once(&qword_100977D80, &stru_10093B4F8);
      sub_1004C22DC((uint64_t)off_100977D78);
    }
LABEL_29:
    if (qword_100978150 != -1)
      dispatch_once(&qword_100978150, &stru_10093B5B8);
    sub_1005BDC68((uint64_t)__p, v7, a2, a3, a4);
    sub_1005B4838();
  }
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    sub_100709F80();
}

void sub_1005C2164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nullsub_547(va);
  _Unwind_Resume(a1);
}

void sub_1005C2180(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  int v6;
  __int16 v7;
  uint64_t v8;

  v2 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 141558531;
    v4 = 1752392040;
    v5 = 1041;
    v6 = 6;
    v7 = 2097;
    v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received a passkey request for device %{private,bluetooth:BD_ADDR,mask.hash}.6P", (uint8_t *)&v3, 0x1Cu);
  }
  sub_10024D100(0, a1, 0);
}

void sub_1005C2254(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;

  v4 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 141558787;
    v6 = 1752392040;
    v7 = 1041;
    v8 = 6;
    v9 = 2097;
    v10 = a1;
    v11 = 1024;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received key-press request for device %{private,bluetooth:BD_ADDR,mask.hash}.6P with type %d", (uint8_t *)&v5, 0x22u);
  }
}

void sub_1005C2330(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093B5D8);
  LODWORD(__p[0]) = *(_DWORD *)a1;
  WORD2(__p[0]) = *(_WORD *)(a1 + 4);
  v4 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v5 = qword_100999850;
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v4, __p);
      v6 = v8 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received a new passkey display request for device %{public}s", buf, 0xCu);
      if (v8 < 0)
        operator delete(__p[0]);
    }
    if (qword_100978150 != -1)
      dispatch_once(&qword_100978150, &stru_10093B5B8);
    sub_1005BDE28((uint64_t)__p, v4, a2);
    sub_1005B4904();
  }
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    sub_100709F80();
}

void sub_1005C24D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_548(va);
  _Unwind_Resume(a1);
}

void sub_1005C24EC(int *a1)
{
  uint64_t v2;
  int v3;
  __int16 v4;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093B5D8);
  v3 = *a1;
  v4 = *((_WORD *)a1 + 2);
  v2 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v3, 1);
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10093B5B8);
  sub_1005B7624((uint64_t)off_100978148, v2, 156);
}

void sub_1005C259C(int a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;

  v4 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 141558787;
    v6 = 1752392040;
    v7 = 1041;
    v8 = 6;
    v9 = 2097;
    v10 = a2;
    v11 = 1024;
    v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received encryption refresh for device %{private,bluetooth:BD_ADDR,mask.hash}.6P with status %{bluetooth:OI_STATUS}u", (uint8_t *)&v5, 0x22u);
  }
}

void sub_1005C2678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  _BYTE v16[10];
  int v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v8 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v15 = 141559299;
    *(_QWORD *)v16 = 1752392040;
    *(_WORD *)&v16[8] = 1041;
    v17 = 6;
    v18 = 2097;
    v19 = a2;
    v20 = 1024;
    v21 = a1;
    v22 = 1024;
    v23 = a3;
    v24 = 1024;
    v25 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received encryption change for device %{private,bluetooth:BD_ADDR,mask.hash}.6P with status %{bluetooth:OI_STATUS}u mode:%d keySize:%d", (uint8_t *)&v15, 0x2Eu);
  }
  if (a2)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10093B5D8);
    v15 = *(_DWORD *)a2;
    *(_WORD *)v16 = *(_WORD *)(a2 + 4);
    v9 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v15, 1);
    if (v9)
    {
      v10 = v9;
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_10093B5B8);
      sub_1005B6628((uint64_t)off_100978148, v10, a1, a3);
      if ((_DWORD)a3 && (_DWORD)a4 != 255)
      {
        if (!sub_10044501C(v10))
        {
          v11 = qword_100999850;
          if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
          {
            v15 = 67109120;
            *(_DWORD *)v16 = a4;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Initializing EncryptionKeySize to %d", (uint8_t *)&v15, 8u);
          }
          sub_100445068(v10, a4);
        }
        if (!sub_1004451B8(v10))
        {
          v12 = qword_100999850;
          if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
          {
            v15 = 67109120;
            *(_DWORD *)v16 = a3;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Initializing EncryptionMode to %d", (uint8_t *)&v15, 8u);
          }
          sub_100445204(v10, a3);
        }
        if (!sub_1005C2AA0(v10, a2, a4) && !sub_1005C2C70(v10, a2, a3))
        {
          sub_100445068(v10, a4);
          sub_100445204(v10, a3);
          sub_1005C2D8C(v10, a2, a4);
        }
        return;
      }
      v13 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        v15 = 67109376;
        *(_DWORD *)v16 = a3;
        *(_WORD *)&v16[4] = 1024;
        *(_DWORD *)&v16[6] = a4;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "_encryptChange: Skipping setEncryptionKeySize setEncryptionMode. encryptionMode = %d, keySize = %d", (uint8_t *)&v15, 0xEu);
      }
    }
    if (!(_DWORD)a1 && (_DWORD)a3)
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10093B5D8);
      v15 = *(_DWORD *)a2;
      *(_WORD *)v16 = *(_WORD *)(a2 + 4);
      v14 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v15, 1);
      if (sub_100192A2C((uint64_t (*)())sub_1005C32A8, v14 + 128))
      {
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
          sub_100709FE0();
      }
      else if (v14 && sub_1005C2C70(v14, a2, a3))
      {
        sub_100445204(v14, a3);
      }
    }
  }
}

void sub_1005C2A3C(id a1)
{
  operator new();
}

void sub_1005C2A7C()
{
  operator delete();
}

uint64_t sub_1005C2AA0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;

  v6 = sub_100445174(a1);
  if (v6 <= a3 || (v7 = v6, v6 == 255))
  {
    v14 = sub_100065478();
    (*(void (**)(uint64_t, uint64_t, BOOL, _QWORD))(*(_QWORD *)v14 + 648))(v14, a1, a3 < 7, 0);
    return 0;
  }
  v8 = sub_100065478();
  (*(void (**)(uint64_t, uint64_t, BOOL, BOOL))(*(_QWORD *)v8 + 648))(v8, a1, a3 < 7, a3 < 7);
  if (a3 > 6)
    return 0;
  v9 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
  {
    v15 = 141559043;
    v16 = 1752392040;
    v17 = 1041;
    v18 = 6;
    v19 = 2097;
    v20 = a2;
    v21 = 1024;
    v22 = v7;
    v23 = 1024;
    v24 = a3;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Encryption key size downgraded for device %{private,bluetooth:BD_ADDR,mask.hash}.6P from %u to %u. Disconnecting device.", (uint8_t *)&v15, 0x28u);
  }
  v10 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 328))(v10) & 1) != 0
    || (v11 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 384))(v11)))
  {
    v12 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12))
      sub_1002534F4();
  }
  sub_10018070C(a1 + 128);
  return 181;
}

uint64_t sub_1005C2C70(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t result;
  NSObject *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  unsigned int v18;

  v6 = sub_100445310(a1);
  result = 0;
  if (v6 > a3 && v6 != 255)
  {
    v8 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    {
      v9 = 141559043;
      v10 = 1752392040;
      v11 = 1041;
      v12 = 6;
      v13 = 2097;
      v14 = a2;
      v15 = 1024;
      v16 = v6;
      v17 = 1024;
      v18 = a3;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Encryption mode downgraded for device %{private,bluetooth:BD_ADDR,mask.hash}.6P from %u to %u. Disconnecting device.", (uint8_t *)&v9, 0x28u);
    }
    sub_10018070C(a1 + 128);
    return 181;
  }
  return result;
}

void sub_1005C2D8C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  const std::string::value_type *v10;
  NSObject *v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  void *v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  __int128 v31;
  std::string::size_type v32;
  _BYTE buf[28];

  if (a3 <= 6)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_10070A040();
    v5 = sub_100445388(a1);
    if (v5)
    {
      if (v5 == 2)
      {
        v11 = qword_100999850;
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 141558531;
          *(_QWORD *)&buf[4] = 1752392040;
          *(_WORD *)&buf[12] = 1041;
          *(_DWORD *)&buf[14] = 6;
          *(_WORD *)&buf[18] = 2097;
          *(_QWORD *)&buf[20] = a2;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "User has disallowed to connect to the low security device %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
        }
        sub_10018070C(a1 + 128);
      }
      else if (v5 == 1)
      {
        v6 = qword_100999850;
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 141558531;
          *(_QWORD *)&buf[4] = 1752392040;
          *(_WORD *)&buf[12] = 1041;
          *(_DWORD *)&buf[14] = 6;
          *(_WORD *)&buf[18] = 2097;
          *(_QWORD *)&buf[20] = a2;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "User has allowed to connect to the low security device %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
        }
      }
    }
    else
    {
      v7 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 141558531;
        *(_QWORD *)&buf[4] = 1752392040;
        *(_WORD *)&buf[12] = 1041;
        *(_DWORD *)&buf[14] = 6;
        *(_WORD *)&buf[18] = 2097;
        *(_QWORD *)&buf[20] = a2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Show security alert to user for the low security device %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
      }
      sub_10018070C(a1 + 128);
      memset(buf, 0, 24);
      v8 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 328))(v8))
      {
        v9 = sub_10003BE44();
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 368))(v9) & 1) != 0)
        {
          v10 = "iPod";
        }
        else
        {
          v12 = sub_10003BE44();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 360))(v12))
            v10 = "iPad";
          else
            v10 = "iPhone";
        }
        std::string::assign((std::string *)buf, v10);
        v31 = 0uLL;
        v32 = 0;
        sub_10043F78C(a1, (uint64_t)&v26);
        v13 = std::string::insert(&v26, 0, "\"");
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v27.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        v15 = std::string::append(&v27, "\"");
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        v17 = std::string::append(&v28, " is trying to connect using an unsecured Bluetooth connection. Unsecured Bluetooth accessories can be used to control your ");
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if (buf[23] >= 0)
          v19 = buf;
        else
          v19 = *(const std::string::value_type **)buf;
        if (buf[23] >= 0)
          v20 = buf[23];
        else
          v20 = *(_QWORD *)&buf[8];
        v21 = std::string::append(&v29, v19, v20);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = std::string::append(&v30, " or gain access to your data.");
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v32 = v23->__r_.__value_.__r.__words[2];
        v31 = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v30.__r_.__value_.__l.__data_);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        if (qword_100978160 != -1)
          dispatch_once(&qword_100978160, &stru_10093B598);
        v25 = off_100978158;
        sub_100091AE8(&v30, "Unsecured Bluetooth Connection Request");
        sub_1005C0E88((uint64_t)v25, a1, 0, (uint64_t)&v30, (uint64_t)&v31);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v30.__r_.__value_.__l.__data_);
        if (SHIBYTE(v32) < 0)
          operator delete((void *)v31);
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
  }
}

void sub_1005C31DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a42 < 0)
    operator delete(__p);
  if (*(char *)(v42 - 105) < 0)
    operator delete(*(void **)(v42 - 128));
  if (*(char *)(v42 - 73) < 0)
    operator delete(*(void **)(v42 - 96));
  _Unwind_Resume(exception_object);
}

void sub_1005C32A8(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int16 v7;
  int v8;
  __int16 v9;

  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_10070A0BC();
  }
  else
  {
    v9 = 0;
    v8 = 0;
    sub_100182620(a2, (uint64_t)&v8);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10093B5D8);
    v6 = v8;
    v7 = v9;
    v4 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v6, 1);
    if (v4)
    {
      v5 = v4;
      if (sub_1005C2AA0(v4, (uint64_t)&v8, a3))
      {
        sub_100445068(v5, a3);
        sub_1005C2D8C(v5, (uint64_t)&v8, a3);
      }
    }
  }
}

uint64_t sub_1005C339C()
{
  return 2;
}

uint64_t sub_1005C33A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  _QWORD v11[2];
  _QWORD v12[2];
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int128 v25;

  v12[0] = a1;
  v12[1] = a2;
  v25 = xmmword_10073BB70;
  v4 = sub_10017C9A0((uint64_t)v12);
  v11[1] = &v25;
  v11[0] = 1048579;
  if (a3)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10093B5D8);
    *(_DWORD *)buf = *(_DWORD *)a3;
    LOWORD(v14) = *(_WORD *)(a3 + 4);
    v5 = 1;
    v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
    if (v6)
      v5 = sub_100446884(v6);
  }
  else
  {
    v5 = 1;
  }
  v7 = 0;
  if (v5 && (v4 - 4099) <= 0xFFFFFFFC)
  {
    if (sub_10017C904((uint64_t)v12, (uint64_t)v11))
      v7 = 0;
    else
      v7 = 2;
  }
  v8 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 1752392040;
    v9 = "not enforcing";
    v15 = 1041;
    *(_DWORD *)buf = 141559299;
    v16 = 6;
    if (v5)
      v9 = "enforcing";
    v17 = 2097;
    v18 = a3;
    v19 = 1024;
    v20 = v4;
    v21 = 1024;
    v22 = v7;
    v23 = 2080;
    v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device %{private,bluetooth:BD_ADDR,mask.hash}.6P running UUID 0x%x has security level %d and %s", buf, 0x32u);
  }
  return v7;
}

void sub_1005C3584(id a1)
{
  operator new();
}

void sub_1005C35C4()
{
  operator delete();
}

void sub_1005C35E8(id a1)
{
  operator new();
}

void sub_1005C3628()
{
  operator delete();
}

void sub_1005C364C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    sub_1005C364C(a1, *a2);
    sub_1005C364C(a1, a2[1]);
    nullsub_90(a2 + 5, v4);
    operator delete(a2);
  }
}

void sub_1005C3694(id a1)
{
  operator new();
}

void sub_1005C36D4()
{
  operator delete();
}

char *sub_1005C36F8(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v5;
  uint64_t **v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (char *)v5;
        v9 = *(_QWORD *)(v5 + 32);
        if (v7 >= v9)
          break;
        v5 = *(_QWORD *)v8;
        v6 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = *((_QWORD *)v8 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 8);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (char *)(a1 + 8);
LABEL_10:
    memset(v11, 0, sizeof(v11));
    sub_1005C37C8(a1, a4, v11);
    sub_100004078((uint64_t **)a1, (uint64_t)v8, v6, (uint64_t *)v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    sub_1005C3840(v11, 0);
  }
  return v8;
}

uint64_t sub_1005C37C8@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  v6[4] = **a2;
  result = sub_1005A9714((uint64_t)(v6 + 5));
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1005C3828(_Unwind_Exception *a1)
{
  char **v1;

  sub_1005C3840(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1005C3840(char **a1, char *a2)
{
  char *v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      nullsub_90(v2 + 40, a2);
    operator delete(v2);
  }
}

void sub_1005C3884(id a1)
{
  operator new();
}

void sub_1005C38C4()
{
  operator delete();
}

void sub_1005C38E8(id a1)
{
  operator new();
}

void sub_1005C3928()
{
  operator delete();
}

uint64_t sub_1005C394C(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v9;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  sub_1000040CC((uint64_t **)a1, v4);
  nullsub_90(v4 + 5, v9);
  operator delete(v4);
  return 1;
}

void sub_1005C39CC(id a1)
{
  operator new();
}

void sub_1005C3A0C()
{
  operator delete();
}

void sub_1005C3A30(id a1)
{
  operator new();
}

void sub_1005C3A70()
{
  operator delete();
}

void sub_1005C3A94(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

uint64_t sub_1005C3AA4(uint64_t a1, uint64_t a2, __int16 a3)
{
  *(_QWORD *)a1 = &off_10093B608;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_1005C3B1C(a1);
  *(_WORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 8) = a2;
  return a1;
}

void sub_1005C3B00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 72);
  if (v3)
  {
    *(_QWORD *)(v1 + 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005C3B1C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = mach_absolute_time();
  *(_BYTE *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v2;
  *(_BYTE *)(a1 + 49) = 0;
  v16 = 0;
  v17 = 0;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10093B620);
  if (sub_10051E888((uint64_t)off_100977A90, 0, 0))
  {
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_10093B620);
    sub_10051E9F8((uint64_t)off_100977A90, &v14);
    v3 = v15;
    v16 = v14;
    v17 = v15;
    if (v14)
    {
      sub_1002D9DD4(v14, a1);
      goto LABEL_10;
    }
  }
  else
  {
    v3 = 0;
  }
  v4 = qword_1009997E0;
  if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
  {
LABEL_10:
    if (!v3)
      return;
    goto LABEL_11;
  }
  sub_10070A11C(v4, v5, v6, v7, v8, v9, v10, v11);
  if (!v3)
    return;
LABEL_11:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1005C3C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10009F88C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C3C64(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_10093B608;
  sub_1005C3CC8(a1);
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1005C3CAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 72);
  if (v3)
  {
    *(_QWORD *)(v1 + 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005C3CC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10093B620);
  v5 = 0;
  v6 = 0;
  sub_10051E9F8((uint64_t)off_100977A90, &v5);
  if (v5)
    sub_100069060(v5 + 128, a1);
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10093B620);
  sub_10051EA20((uint64_t)off_100977A90, 0, 0);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1005C3DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10009F88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1005C3DD0(uint64_t a1)
{
  sub_1005C3C64(a1);
  operator delete();
}

uint64_t sub_1005C3DF4(uint64_t result)
{
  __int16 v1;
  __int16 v2;

  v1 = *(_WORD *)(result + 18);
  if ((unsigned __int16)(v1 + 1) <= 0x63u)
    v2 = v1 + 1;
  else
    v2 = 0;
  *(_WORD *)(result + 18) = v2;
  return result;
}

void sub_1005C3E10(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v5;
  _DWORD v6[2];

  v5 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Audio Timesync: TimeSync Notification %d ", (uint8_t *)v6, 8u);
  }
  *(_BYTE *)(a1 + 49) = a3;
}

BOOL sub_1005C3EC0(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  _BOOL8 v5;
  NSObject *v9;
  int v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;

  v5 = a2 > a3 || a2 > a4;
  if (v5)
  {
    v9 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 134218496;
      v12 = a2;
      v13 = 2048;
      v14 = a3;
      v15 = 2048;
      v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: Audio Tx complete Timestamp wrapped Previous TS=%llu First in the queue TS=%llu Last in the Queue TS=%llu", (uint8_t *)&v11, 0x20u);
    }
  }
  return v5;
}

void sub_1005C3FA4(uint64_t a1, unsigned int a2, uint64_t a3, char a4, uint64_t *a5)
{
  unsigned int v5;
  __int16 v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  unsigned int v15;
  BOOL v16;
  __int16 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  _BYTE buf[32];
  int v24;
  __int16 v25;
  char v26;

  v5 = *(unsigned __int16 *)(a1 + 18);
  if (*(_WORD *)(a1 + 18))
  {
    v21 = 0;
    v22 = 0;
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_10093B620);
    sub_10051E9F8((uint64_t)off_100977A90, &v21);
    if (v21 && (a4 & 0x80) == 0 && *(_BYTE *)(a1 + 49))
    {
      sub_1005C4294(a1, a2, 0, 0, a5, 0, v5);
    }
    else
    {
      if (*(float *)(a1 + 24) != 0.0)
      {
        v10 = *(_WORD *)(a1 + 16);
        v11 = sub_1004759E0();
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_1005C4E04;
        *(_QWORD *)&buf[24] = &unk_100931C98;
        v25 = v10;
        v24 = 0;
        v26 = 0;
        sub_100041A34(v11, buf);
        *(_QWORD *)(a1 + 32) = 0;
        *(_DWORD *)(a1 + 24) = 0;
      }
      v12 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v13 = "Yes";
        if (*(_BYTE *)(a1 + 49))
          v14 = "Yes";
        else
          v14 = "No";
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v14;
        if (a4 >= 0)
          v13 = "No";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v5;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: Audio Tx not processed, Timesync Engine Ready=%{public}s number of enqueued pacekts=%u, overflow: %{public}s", buf, 0x1Cu);
      }
      v15 = *(unsigned __int16 *)(a1 + 18);
      v16 = v15 >= v5;
      v17 = v15 - v5;
      if (v16)
        *(_WORD *)(a1 + 18) = v17;
    }
    v18 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

void sub_1005C41C0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C41DC(uint64_t a1, __int16 a2, int a3, int a4)
{
  BOOL v4;
  uint64_t v5;
  char v6;
  uint64_t v9;
  NSObject *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];
  int v21;
  __int16 v22;
  char v23;

  if (a3)
    v4 = 1;
  else
    v4 = a4 == 0;
  v5 = v4;
  if (v4)
  {
    v6 = a4;
    v9 = sub_1004759E0();
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1005C4E04;
    v20[3] = &unk_100931C98;
    v22 = a2;
    v21 = a3;
    v23 = v6;
    sub_100041A34(v9, v20);
  }
  else
  {
    v10 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_10070A150(v10, v12, v13, v14, v15, v16, v17, v18);
  }
  return v5;
}

_BYTE *sub_1005C4294(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, unsigned int a7)
{
  unsigned __int16 *v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  _BOOL4 v34;
  __int16 v35;
  uint64_t v36;
  NSObject *v37;
  unsigned int v39;
  float v40;
  char v41;
  uint8_t buf[8];
  __int128 v43;
  void *v44;
  int v45;
  __int16 v46;
  char v47;

  v41 = 0;
  sub_100043758(&v41);
  v11 = (unsigned __int16 *)sub_10019AEA4(*(_QWORD *)(a1 + 8) + 128);
  sub_10004339C(&v41);
  v39 = a7;
  if (v11)
  {
    v12 = *v11;
    if (!a2)
      goto LABEL_27;
  }
  else
  {
    v12 = 0xFFFF;
    if (!a2)
      goto LABEL_27;
  }
  v13 = 0;
  do
  {
    v14 = *((unsigned __int16 *)a5 + 4);
    if (v12 == v14)
    {
      v15 = *(_QWORD *)(a1 + 80);
      v16 = *(_QWORD *)(a1 + 88);
      if (v15 >= v16)
      {
        v21 = *(_QWORD *)(a1 + 72);
        v22 = 0x2E8BA2E8BA2E8BA3 * (v15 - v21);
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) > 0x1745D1745D1745D1)
          abort();
        v24 = 0x2E8BA2E8BA2E8BA3 * (v16 - v21);
        if (2 * v24 > v23)
          v23 = 2 * v24;
        if (v24 >= 0xBA2E8BA2E8BA2E8)
          v25 = 0x1745D1745D1745D1;
        else
          v25 = v23;
        if (v25)
          v26 = (char *)sub_1005C5880(a1 + 88, v25);
        else
          v26 = 0;
        v27 = &v26[11 * v22];
        v28 = *a5;
        *(_DWORD *)(v27 + 7) = *(_DWORD *)((char *)a5 + 7);
        *(_QWORD *)v27 = v28;
        v30 = *(_QWORD *)(a1 + 72);
        v29 = *(_QWORD *)(a1 + 80);
        v31 = v27;
        if (v29 != v30)
        {
          do
          {
            v32 = *(_QWORD *)(v29 - 11);
            v29 -= 11;
            v33 = *(_DWORD *)(v29 + 7);
            *(_QWORD *)(v31 - 11) = v32;
            v31 -= 11;
            *(_DWORD *)(v31 + 7) = v33;
          }
          while (v29 != v30);
          v29 = *(_QWORD *)(a1 + 72);
        }
        v18 = v27 + 11;
        *(_QWORD *)(a1 + 72) = v31;
        *(_QWORD *)(a1 + 80) = v27 + 11;
        *(_QWORD *)(a1 + 88) = &v26[11 * v25];
        if (v29)
          operator delete((void *)v29);
      }
      else
      {
        v17 = *a5;
        *(_DWORD *)(v15 + 7) = *(_DWORD *)((char *)a5 + 7);
        *(_QWORD *)v15 = v17;
        v18 = (char *)(v15 + 11);
      }
      *(_QWORD *)(a1 + 80) = v18;
    }
    else
    {
      v19 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v20 = *a5;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v14;
        LOWORD(v43) = 2048;
        *(_QWORD *)((char *)&v43 + 2) = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: Invalid LinkID received ID=%x TS=%llu", buf, 0x12u);
      }
    }
    a5 = (uint64_t *)((char *)a5 + 11);
    ++v13;
  }
  while (a2 > (unsigned __int16)v13);
LABEL_27:
  v40 = 0.0;
  v34 = sub_1005C45DC(a1, *(unsigned __int16 *)(a1 + 16), (uint64_t *)(a1 + 72), v39, &v40);
  v35 = *(_WORD *)(a1 + 16);
  if (v34)
  {
    sub_1005C4AA8(a1, *(unsigned __int16 *)(a1 + 16), v40);
  }
  else
  {
    v36 = sub_1004759E0();
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&v43 = 3221225472;
    *((_QWORD *)&v43 + 1) = sub_1005C4E04;
    v44 = &unk_100931C98;
    v46 = v35;
    v45 = 0;
    v47 = 0;
    sub_100041A34(v36, buf);
    v37 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Audio Timesync: update average audio transmit time not ready, reset the modifier", buf, 2u);
    }
  }
  return sub_100043728(&v41);
}

void sub_1005C45B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_1005C45DC(uint64_t a1, int a2, uint64_t *a3, unsigned int a4, float *a5)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;
  uint64_t v16;
  NSObject *v17;
  _BOOL8 v18;
  unint64_t *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  __int16 v25;
  float v27;
  unsigned int v28;
  NSObject *v29;
  double v30;
  uint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  _BYTE buf[36];
  int v40;

  v8 = (unint64_t *)*a3;
  v9 = (unint64_t *)a3[1];
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)v9 - *a3) >= (unint64_t)a4)
    LODWORD(v10) = a4;
  else
    v10 = 0x2E8BA2E8BA2E8BA3 * ((_QWORD)v9 - *a3);
  if ((_DWORD)v10 && *(_BYTE *)(a1 + 48))
  {
    v38 = 0;
    v13 = *v8;
    v14 = *(unint64_t *)((char *)v9 - 11);
    if (sub_1005C3EC0(a1, *(_QWORD *)(a1 + 40), v13, v14))
    {
      if (a3[1] != *a3)
        a3[1] = *a3;
      if (*(_WORD *)(a1 + 18))
      {
        if (*(float *)(a1 + 24) != 0.0)
        {
          v15 = *(_WORD *)(a1 + 16);
          v16 = sub_1004759E0();
          *(_QWORD *)buf = _NSConcreteStackBlock;
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = sub_1005C4E04;
          *(_QWORD *)&buf[24] = &unk_100931C98;
          LOWORD(v40) = v15;
          *(_DWORD *)&buf[32] = 0;
          BYTE2(v40) = 0;
          sub_100041A34(v16, buf);
          *(_QWORD *)(a1 + 32) = 0;
          *(_DWORD *)(a1 + 24) = 0;
        }
        v17 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: Dynamic Audio Delivery wrapped around, resetting", buf, 2u);
        }
        v18 = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_WORD *)(a1 + 18) = 0;
        *(_BYTE *)(a1 + 48) = 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      v36 = 0;
      v37 = 0;
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_10093B620);
      sub_10051E9F8((uint64_t)off_100977A90, &v36);
      if (v36 && sub_1002DA850(v36, v14, &v38))
      {
        if (!*(_QWORD *)(a1 + 32))
        {
          *(_QWORD *)buf = 0;
          if (sub_1002DA850(v36, v13, buf))
            *(_QWORD *)(a1 + 32) = *(_QWORD *)buf;
        }
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_10093B620);
        v27 = sub_10051DF38((uint64_t)off_100977A90, v38 - *(_QWORD *)(a1 + 32), 2) / (float)(int)v10;
        *a5 = v27;
        if (v27 > 250000.0)
          sub_1005C4B50(a1, a2, a3, a4);
        v18 = 1;
      }
      else
      {
        v18 = 0;
      }
      v28 = *(unsigned __int16 *)(a1 + 18);
      if (v28 >= (unsigned __int16)v10)
      {
        LOWORD(v28) = v28 - v10;
        *(_WORD *)(a1 + 18) = v28;
      }
      if (*(_BYTE *)(a1 + 52))
      {
        v29 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          v30 = *a5;
          v31 = 0x2E8BA2E8BA2E8BA3 * (a3[1] - *a3);
          *(_DWORD *)buf = 134219008;
          if (v18)
            v32 = 84;
          else
            v32 = 70;
          *(double *)&buf[4] = v30;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = a4;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v31;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = (unsigned __int16)v28;
          *(_WORD *)&buf[34] = 1024;
          v40 = v32;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Audio Delivery  Average Time=%f, Pending Packets=%d, Tx Completed Tx=%lu, Queue depth=%d, status=%c", buf, 0x28u);
        }
      }
      if (*a3 != a3[1])
        a3[1] = *a3;
      *(_QWORD *)(a1 + 32) = v38;
      *(_QWORD *)(a1 + 40) = v14;
      v33 = v37;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v35 = __ldaxr(p_shared_owners);
        while (__stlxr(v35 - 1, p_shared_owners));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
  }
  else
  {
    if (v9 != v8)
    {
      v19 = (unint64_t *)a3[1];
      v20 = (char *)v9 - (char *)v19;
      if (v9 != v19)
        memmove((void *)*a3, v19, (char *)v9 - (char *)v19);
      v9 = (unint64_t *)((char *)v8 + v20);
      a3[1] = (uint64_t)v8 + v20;
    }
    v18 = *(_BYTE *)(a1 + 48) != 0;
    if (!*(_BYTE *)(a1 + 48))
    {
      v21 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v22 = 0x2E8BA2E8BA2E8BA3 * ((_QWORD)v9 - *a3);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v22;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = a4;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "No";
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Number of packets in queue not yet in sync with Tx complete Tx completed=%lu Enqueued Packets=%d Sync =%s", buf, 0x1Cu);
      }
    }
    v23 = *(unsigned __int16 *)(a1 + 18);
    v24 = v23 >= a4;
    v25 = v23 - a4;
    if (v24)
      *(_WORD *)(a1 + 18) = v25;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return v18;
}

void sub_1005C4A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10009F88C((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1005C4AA8(uint64_t a1, int a2, float a3)
{
  ++*(_WORD *)(a1 + 50);
  *(float *)(a1 + 20) = *(float *)(a1 + 20) + a3;
  sub_1005C50A0(a1, a2, a3);
  if (*(_WORD *)(a1 + 50) == 2)
  {
    *(float *)(a1 + 24) = *(float *)(a1 + 20) * 0.5;
    *(_DWORD *)(a1 + 20) = 0;
    *(_WORD *)(a1 + 50) = 0;
  }
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10093B620);
  return sub_10051F588((uint64_t)off_100977A90, a2, a3);
}

void sub_1005C4B50(uint64_t a1, int a2, uint64_t *a3, int a4)
{
  NSObject *v8;
  double v9;
  double v10;
  int v11;
  uint64_t v12;
  double v13;
  uint64_t i;
  NSObject *v15;
  int v16;
  int v17;
  uint64_t v18;
  double v19;
  float v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  double v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36[2];

  v8 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(float *)(a1 + 24);
    v10 = *(float *)(a1 + 20);
    v11 = *(unsigned __int16 *)(a1 + 50);
    v12 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 67110400;
    v28 = a2;
    v29 = 1024;
    v30 = a4;
    v31 = 2048;
    v32 = v9;
    v33 = 2048;
    v34 = v10;
    v35 = 1024;
    LODWORD(v36[0]) = v11;
    WORD2(v36[0]) = 2048;
    *(_QWORD *)((char *)v36 + 6) = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Handle=%d, Enqueued Packets=%d Previous Average=%f Current Total Tx time=%f updated count=%d Previous TS=%llu", buf, 0x32u);
  }
  v13 = *(double *)(a1 + 32);
  v25 = 0;
  v26 = 0;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10093B620);
  sub_10051E9F8((uint64_t)off_100977A90, &v25);
  if (v25)
  {
    for (i = *a3; i != a3[1]; i += 11)
    {
      v24 = 0.0;
      sub_1002DA850(v25, *(_QWORD *)i, &v24);
      v15 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(unsigned __int16 *)(i + 8);
        v17 = *(unsigned __int8 *)(i + 10);
        v18 = *(uint64_t *)i;
        v19 = v24;
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_10093B620);
        v20 = sub_10051DF38((uint64_t)off_100977A90, *(_QWORD *)&v24 - *(_QWORD *)&v13, 2);
        *(_DWORD *)buf = 67110144;
        v28 = v16;
        v29 = 1024;
        v30 = v17;
        v31 = 2048;
        v32 = *(double *)&v18;
        v33 = 2048;
        v34 = v19;
        v35 = 2048;
        v36[0] = v20;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Link=%d Status=%d Time=%llu Translated Time=%llu delta=%f", buf, 0x2Cu);
      }
      v13 = v24;
    }
  }
  v21 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1005C4DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C4E04(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10093B640);
  return sub_1003E6840((os_unfair_lock_s *)qword_100977DF8, *(unsigned __int16 *)(a1 + 36), *(_DWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 38));
}

BOOL sub_1005C4E5C(uint64_t a1, int a2, float a3)
{
  int v6;
  int v7;
  float v8;
  _BOOL8 result;
  NSObject *v10;
  _BOOL4 v11;
  uint8_t v12[16];

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10093B620);
  v6 = sub_10051C590((uint64_t)off_100977A90, a2);
  if (*(unsigned __int16 *)(a1 + 18) < 8u)
    return 0;
  v7 = v6;
  v8 = *(float *)(a1 + 24);
  result = v8 < a3;
  if (v8 >= a3)
    v7 = 0;
  if (v7 == 1)
  {
    v10 = qword_1009997E0;
    v11 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v11)
    {
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Low Latency Mode enabled Timesync paused", v12, 2u);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1005C4F40(uint64_t a1, float a2, float a3)
{
  float v3;
  unsigned int v4;
  uint64_t v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v11;
  double v12[2];

  if (a2 <= a3)
    return 0;
  v3 = (float)(a2 - a3) / 1000.0;
  v4 = (int)(float)(v3 * 10.0);
  if (v4 >= 0x97)
  {
    v9 = qword_1009997E0;
    v6 = 0;
    if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      return v6;
    v11 = 134217984;
    v12[0] = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Packet Tx Delta High Delta=%fMSec", (uint8_t *)&v11, 0xCu);
    return 0;
  }
  if (v4 >= 0x3C)
    v6 = 60;
  else
    v6 = v4;
  v7 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int16 *)(a1 + 18);
    v11 = 67109376;
    LODWORD(v12[0]) = v8;
    WORD2(v12[0]) = 2048;
    *(double *)((char *)v12 + 6) = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Starting Timesync speed adjust, Current enqueue count=%d Average A2DP Tx Time in Msec =% f", (uint8_t *)&v11, 0x12u);
  }
  return v6;
}

void sub_1005C50A0(uint64_t a1, int a2, float a3)
{
  int v6;
  __int16 v7;

  if (!*(_BYTE *)(a1 + 52) && *(float *)(a1 + 24) != 0.0)
  {
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_10093B620);
    if ((sub_10051C588((uint64_t)off_100977A90, a2) & 1) == 0 && sub_1005C4E5C(a1, a2, a3))
    {
      v6 = sub_1005C4F40(a1, a3, *(float *)(a1 + 24));
      if (v6)
      {
        v7 = v6;
        *(_WORD *)(a1 + 28) = 0;
        *(_QWORD *)(a1 + 56) = mach_absolute_time();
        *(_WORD *)(a1 + 30) = v7;
        sub_1005C5188(a1, a2, 1, v7);
      }
    }
  }
}

void sub_1005C5188(uint64_t a1, __int16 a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  void **v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  void *v15;
  int v16;
  __int16 v17;
  char v18;

  v8 = sub_1004759E0();
  v12 = _NSConcreteStackBlock;
  v13 = 3221225472;
  v14 = sub_1005C4E04;
  v15 = &unk_100931C98;
  v17 = a2;
  v16 = 0;
  v18 = 0;
  sub_100041A34(v8, &v12);
  if (a3 == 2)
  {
    sub_1005C41DC(v9, a2, 2, a4);
    *(_DWORD *)(a1 + 28) = 0;
  }
  else if (a3 == 1)
  {
    sub_1005C41DC(v9, a2, 1, a4);
    *(_WORD *)(a1 + 28) += a4;
  }
  *(_BYTE *)(a1 + 52) = a3;
  v10 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(unsigned __int16 *)(a1 + 18);
    LODWORD(v12) = 67109632;
    HIDWORD(v12) = a3;
    LOWORD(v13) = 1024;
    *(_DWORD *)((char *)&v13 + 2) = v11;
    HIWORD(v13) = 1024;
    LODWORD(v14) = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Audio Delivery Speed Direction=%d, Pending packets=%d Steps=%d", (uint8_t *)&v12, 0x14u);
  }
}

void sub_1005C52E0(uint64_t a1, uint64_t a2, __int16 a3, unsigned int a4)
{
  NSObject *v8;
  int v9;
  uint64_t v10;
  dispatch_time_t v11;
  NSObject *v12;
  _QWORD block[6];
  __int16 v14;
  uint8_t buf[8];
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  void *v18;
  int v19;
  __int16 v20;
  char v21;

  v8 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(unsigned __int16 *)(a1 + 18);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Audio Timesync: delay audio speedup, Pending packets=%d", buf, 8u);
  }
  v10 = sub_1004759E0();
  *(_QWORD *)buf = _NSConcreteStackBlock;
  v16 = 3221225472;
  v17 = sub_1005C4E04;
  v18 = &unk_100931C98;
  v20 = a3;
  v19 = 0;
  v21 = 0;
  sub_100041A34(v10, buf);
  v11 = dispatch_time(0, 1000000 * a4);
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10093B620);
  v12 = *((_QWORD *)off_100977A90 + 31);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005C5468;
  block[3] = &unk_1009186D0;
  block[4] = a1;
  block[5] = a2;
  v14 = a3;
  dispatch_after(v11, v12, block);
}

uint64_t sub_1005C5468(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10093B620);
  result = sub_10051F694((uint64_t)off_100977A90, *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
    return sub_1005C54D8(v2, *(unsigned __int16 *)(a1 + 48));
  return result;
}

void sub_1005C54D8(uint64_t a1, int a2)
{
  unsigned int v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  NSObject *v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  int v15;
  _DWORD v16[2];
  __int16 v17;
  int v18;

  v4 = *(unsigned __int16 *)(a1 + 18);
  v5 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int8 *)(a1 + 52);
    v7 = *(unsigned __int16 *)(a1 + 28);
    v16[0] = 67109376;
    v16[1] = v6;
    v17 = 1024;
    v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Speed Update Complete current State = %d Slowdown duration = %d ", (uint8_t *)v16, 0xEu);
  }
  v8 = *(unsigned __int8 *)(a1 + 52);
  if (*(_BYTE *)(a1 + 52))
  {
    if (v8 == 2)
    {
      *(_QWORD *)(a1 + 56) = 0;
      v12 = a1;
      v13 = a2;
      v14 = 0;
      v15 = 0;
    }
    else
    {
      if (v8 != 1)
        return;
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_10093B620);
      if (sub_10051C674((uint64_t)off_100977A90, a2))
        v9 = 120;
      else
        v9 = 60;
      if (v9 <= *(unsigned __int16 *)(a1 + 28) || v4 < 8)
      {
        sub_1005C5690(a1, a2);
        return;
      }
      v15 = *(unsigned __int8 *)(a1 + 30);
      v12 = a1;
      v13 = a2;
      v14 = 1;
    }
    sub_1005C5188(v12, v13, v14, v15);
  }
  else
  {
    v11 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Should not reach here", (uint8_t *)v16, 2u);
    }
  }
}

void sub_1005C5690(uint64_t a1, __int16 a2)
{
  unsigned int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  float v8;
  NSObject *v10;
  int v11;
  _DWORD v12[2];
  __int16 v13;
  double v14;

  v4 = *(unsigned __int16 *)(a1 + 18);
  v5 = *(_QWORD *)(a1 + 64);
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10093B620);
  v6 = off_100977A90;
  v7 = mach_absolute_time();
  v8 = sub_10051DF38((uint64_t)v6, v7 - *(_QWORD *)(a1 + 56), 0);
  if (v4 >= 8 && v8 < 5.0)
  {
    sub_1005C52E0(a1, v5, a2, 0x1F4u);
  }
  else
  {
    v10 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(unsigned __int16 *)(a1 + 18);
      v12[0] = 67109376;
      v12[1] = v11;
      v13 = 2048;
      v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Speedup %d [%f]", (uint8_t *)v12, 0x12u);
    }
    sub_1005C5188(a1, a2, 2, *(unsigned __int8 *)(a1 + 28));
  }
}

void sub_1005C581C(id a1)
{
  operator new();
}

void sub_1005C585C()
{
  operator delete();
}

void *sub_1005C5880(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745D2)
    sub_10007ABD4();
  return operator new(11 * a2);
}

void sub_1005C58C8(id a1)
{
  operator new();
}

void sub_1005C5908()
{
  operator delete();
}

_QWORD *sub_1005C592C(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)sub_10048D2F0(a1, "WirelessCarplayService", 0x40000);
  *result = &off_10093B670;
  return result;
}

void sub_1005C595C(uint64_t a1)
{
  sub_10048D3E0(a1);
  operator delete();
}

uint64_t sub_1005C5980(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  int AppBooleanValue;
  uint8x8_t v7;
  uint8x8_t v8;
  int v9;
  int v10;
  unsigned int v11;
  __int128 v13;
  int v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[15];

  v15 = 0;
  v14 = 0;
  v18 = xmmword_100742B00;
  memset(v19, 0, sizeof(v19));
  v17 = xmmword_100742B10;
  v4 = sub_100452168(a2, v19, &v15);
  if (v15)
    v5 = v4;
  else
    v5 = 0;
  if (v5)
  {
    LOBYTE(v13) = 0;
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("EnableBLE"), CFSTR("com.apple.carplay"), (Boolean *)&v13);
    if ((_BYTE)v13 && AppBooleanValue && !sub_10018F848((unsigned __int8 *)v19, 64660, &v14))
    {
      v9 = 2;
    }
    else
    {
      if (sub_10018F9EC((unsigned __int8 *)v19, (uint64_t)&v18, &v14, v7)
        && sub_10018F9EC((unsigned __int8 *)v19, (uint64_t)&v17, &v14, v8))
      {
        v9 = 0;
        v10 = 0;
LABEL_15:
        sub_100455B74(a2, v9);
        goto LABEL_16;
      }
      v9 = 1;
    }
    v10 = 4;
    goto LABEL_15;
  }
  v10 = 0;
LABEL_16:
  v11 = *(_DWORD *)(a1 + 32);
  v16 = 0;
  sub_10004AD30((uint64_t)&v16);
  *(_QWORD *)&v13 = (int)v16;
  *((_QWORD *)&v13 + 1) = SWORD2(v16);
  return sub_1004415B0(a2, v11, v10, &v13, 0);
}

uint64_t sub_1005C5B10(uint64_t a1, unsigned __int8 *a2, _BYTE *a3)
{
  uint64_t result;
  uint8x8_t v6;
  uint8x8_t v7;
  int v8;
  char v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[15];

  memset(v12, 0, sizeof(v12));
  v9 = 0;
  v8 = 0;
  v10 = xmmword_100742B10;
  v11 = xmmword_100742B00;
  *a3 = 0;
  result = sub_100452168((uint64_t)a2, v12, &v9);
  if ((_DWORD)result)
  {
    if (v9)
    {
      if (!sub_10018F9EC((unsigned __int8 *)v12, (uint64_t)&v11, &v8, v6)
        || (result = sub_10018F9EC((unsigned __int8 *)v12, (uint64_t)&v10, &v8, v7), !(_DWORD)result))
      {
        *a3 = 1;
        result = sub_10043E93C(a2);
        if ((result & 1) == 0)
          return sub_100447ED8((uint64_t)a2, 0);
      }
    }
  }
  return result;
}

_QWORD *sub_1005C5C20(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t *sub_1005C5C2C(uint64_t *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a1 != a2)
    sub_10026BDD4((uint64_t)a1, *a2, a2[1], 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  return a1;
}

void sub_1005C5C90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10026BD18((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C5CAC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = sub_1005C648C(a1, a2);
  }
  else
  {
    sub_10026C0AC(a1[1], a2);
    result = v3 + 104;
    a1[1] = v3 + 104;
  }
  a1[1] = result;
  return result;
}

void sub_1005C5CF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1005C5CFC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    do
    {
      v2 -= 104;
      sub_10026BD9C((uint64_t)(a1 + 2), v2);
    }
    while (v2 != v3);
  }
  a1[1] = v3;
}

id *sub_1005C5D4C(uint64_t a1, id *location)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  sub_10026C154((int)&v8, (uint64_t)(location + 13), *(_QWORD *)(a1 + 8), location);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 != v4)
  {
    do
    {
      v6 -= 104;
      sub_10026BD9C(a1 + 16, v6);
    }
    while (v6 != v5);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return location;
}

id *sub_1005C5DCC(id **a1, void *a2)
{
  id v3;
  id *i;
  id v5;
  unsigned __int8 v6;

  v3 = a2;
  for (i = *a1; i != a1[1]; i += 13)
  {
    v5 = *i;
    v6 = objc_msgSend(v3, "isEqual:", v5);

    if ((v6 & 1) != 0)
      break;
  }

  return i;
}

void sub_1005C5E44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1005C5E58(uint64_t *a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  v4 = a1[1];
  if (result != v4)
  {
    while (*(_DWORD *)(result + 8) != a2)
    {
      result += 104;
      if (result == v4)
        return v4;
    }
  }
  return result;
}

uint64_t sub_1005C5E8C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = *a1;
  v2 = a1[1];
  for (result = 1; ; result = (result + 1))
  {
    v4 = v1;
    if (v1 != v2)
    {
      v4 = v1;
      while (*(_DWORD *)(v4 + 8) != (_DWORD)result)
      {
        v4 += 104;
        if (v4 == v2)
          return result;
      }
    }
    if (v4 == v2)
      break;
  }
  return result;
}

std::string *sub_1005C5ED4@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t i;
  void **v5;
  std::string::size_type v6;
  void *__p[2];
  unsigned __int8 v9;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sub_100091AE8(a2, "[ ");
  for (i = *a1; i != a1[1]; i += 104)
  {
    if (i != *a1)
      std::string::append(a2, ", ");
    sub_1004DE0EC(i, __p);
    if ((v9 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v6 = v9;
    else
      v6 = (std::string::size_type)__p[1];
    std::string::append(a2, (const std::string::value_type *)v5, v6);
    if ((char)v9 < 0)
      operator delete(__p[0]);
  }
  return std::string::append(a2, " ]");
}

void sub_1005C5FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1005C5FEC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;

  if (a2 == a1)
    return 1;
  v3 = *a2;
  v5 = *a1;
  v4 = a1[1];
  if (-991146299 * ((unint64_t)(a2[1] - *a2) >> 3) != -991146299
                                                                          * ((unint64_t)(v4 - *a1) >> 3))
    return 0;
  if (v5 == v4)
    return 1;
  do
  {
    result = sub_1005C6334(v5, v3);
    if (!(_DWORD)result)
      break;
    v5 += 104;
    v3 += 104;
  }
  while (v5 != a1[1]);
  return result;
}

uint64_t sub_1005C608C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  LODWORD(result) = 0;
  do
  {
    if (*(_DWORD *)(v1 + 16) == 2)
      result = (result + 1);
    else
      result = result;
    v1 += 104;
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_1005C60C0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  LODWORD(result) = 0;
  do
  {
    if (*(_DWORD *)(v1 + 16) == 1)
      result = (result + 1);
    else
      result = result;
    v1 += 104;
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_1005C60F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  LODWORD(result) = 0;
  do
  {
    if ((*(_DWORD *)(v1 + 16) - 3) >= 2)
      result = result;
    else
      result = (result + 1);
    v1 += 104;
  }
  while (v1 != v2);
  return result;
}

BOOL sub_1005C612C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL8 result;
  BOOL v5;

  v1 = a1[1];
  if (*a1 == v1)
    return 0;
  v2 = *a1 + 104;
  do
  {
    v3 = *(_DWORD *)(v2 - 88);
    result = v3 == 6;
    v5 = v3 == 6 || v2 == v1;
    v2 += 104;
  }
  while (!v5);
  return result;
}

BOOL sub_1005C6160(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL8 result;
  BOOL v5;

  v1 = a1[1];
  if (*a1 == v1)
    return 0;
  v2 = *a1 + 104;
  do
  {
    v3 = *(_DWORD *)(v2 - 88);
    result = v3 == 5;
    v5 = v3 == 5 || v2 == v1;
    v2 += 104;
  }
  while (!v5);
  return result;
}

BOOL sub_1005C6194(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL8 result;
  BOOL v5;

  v1 = a1[1];
  if (*a1 == v1)
    return 0;
  v2 = *a1 + 104;
  do
  {
    v3 = *(_DWORD *)(v2 - 88);
    result = v3 == 3;
    v5 = v3 == 3 || v2 == v1;
    v2 += 104;
  }
  while (!v5);
  return result;
}

BOOL sub_1005C61C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL8 result;
  BOOL v5;

  v1 = a1[1];
  if (*a1 == v1)
    return 0;
  v2 = *a1 + 104;
  do
  {
    v3 = *(_DWORD *)(v2 - 88);
    result = v3 == 4;
    v5 = v3 == 4 || v2 == v1;
    v2 += 104;
  }
  while (!v5);
  return result;
}

BOOL sub_1005C61FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  if (a2 == a1)
    return 0;
  v3 = *a2;
  v5 = *a1;
  v4 = a1[1];
  if (-991146299 * ((unint64_t)(a2[1] - *a2) >> 3) != -991146299
                                                                          * ((unint64_t)(v4 - *a1) >> 3))
    return 1;
  if (v5 == v4)
    return 0;
  do
  {
    result = sub_1005C629C(v5, v3);
    if (result)
      break;
    v5 += 104;
    v3 += 104;
  }
  while (v5 != a1[1]);
  return result;
}

BOOL sub_1005C629C(uint64_t a1, uint64_t a2)
{
  return !objc_msgSend(*(id *)a1, "isEqual:", *(_QWORD *)a2)
      || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
      || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12)
      || *(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
      || *(unsigned __int8 *)(a1 + 14) != *(unsigned __int8 *)(a2 + 14)
      || *(unsigned __int8 *)(a1 + 15) != *(unsigned __int8 *)(a2 + 15);
}

unint64_t sub_1005C6334(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  result = (unint64_t)objc_msgSend(*(id *)a1, "isEqual:", *(_QWORD *)a2);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
      || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12)
      || *(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    {
      return 0;
    }
    result = sub_1005D4270((unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a2 + 24));
    if ((_DWORD)result)
    {
      result = sub_1005C63EC((unsigned __int8 *)(a1 + 80), (unsigned __int8 *)(a2 + 80));
      if ((_DWORD)result)
      {
        if (*(unsigned __int8 *)(a1 + 14) == *(unsigned __int8 *)(a2 + 14))
          return *(unsigned __int8 *)(a1 + 15) == *(unsigned __int8 *)(a2 + 15);
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_1005C63EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t sub_1005C648C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v2 = *a1;
  v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0x4EC4EC4EC4EC4EC5 * ((v8 - v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x13B13B13B13B13BLL)
    v10 = 0x276276276276276;
  else
    v10 = v4;
  v18 = v7;
  if (v10)
    v11 = (char *)sub_1000B5ED0(v7, v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[104 * v3];
  v17 = &v11[104 * v10];
  sub_10026C0AC((uint64_t)v15, a2);
  v16 = v15 + 104;
  sub_1005C65A0(a1, &v14);
  v12 = a1[1];
  sub_1005C6624(&v14);
  return v12;
}

void sub_1005C658C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1005C6624((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005C65A0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 104;
    result = sub_10026C0AC(result - 104, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void **sub_1005C6624(void **a1)
{
  sub_1005C6654(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1005C6654(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 104;
    sub_10026BD9C(v4, i - 104);
  }
}

uint64_t sub_1005C6698(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_10093B770;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 40) = 0;
  if (!a2)
  {
    v3 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      sub_10070A18C(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  return a1;
}

void sub_1005C66FC(uint64_t a1, void *a2, uint64_t *a3, __int16 a4)
{
  id v8;

  v8 = a2;
  objc_storeStrong((id *)(a1 + 16), a2);
  sub_1004C0DC4((_QWORD *)(a1 + 24), a3);
  *(_WORD *)(a1 + 40) = a4;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);

}

void sub_1005C6784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1005C6798(uint64_t a1, uint64_t a2)
{
  void *__p;
  void *v3;
  uint64_t v4;

  __p = 0;
  v3 = 0;
  v4 = 0;
  sub_1005C67F4(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    v3 = __p;
    operator delete(__p);
  }
}

void sub_1005C67D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C67F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2)
  {
    v6 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070A1FC(a2, v6, v7, v8, v9, v10, v11, v12);
  }
  return (***(uint64_t (****)(_QWORD, uint64_t, uint64_t, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), a1, a2, a3);
}

void sub_1005C686C(uint64_t a1)
{
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_10093BD68);
  sub_1005E4EC8(qword_1009778F0, *(void **)(a1 + 16));
}

void sub_1005C68BC(uint64_t a1, __int16 a2)
{
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_10093BD68);
  sub_1005E53B0(qword_1009778F0, *(void **)(a1 + 16), a2);
}

void sub_1005C6914(uint64_t a1, uint64_t a2)
{
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_10093BD68);
  sub_1005E50EC(qword_1009778F0, *(void **)(a1 + 16), a2);
}

void sub_1005C696C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (qword_1009778F8 == -1)
  {
    v4 = v3;
  }
  else
  {
    dispatch_once(&qword_1009778F8, &stru_10093BD68);
    v4 = v5;
  }
  sub_1005E4930(qword_1009778F0, a1, v4);

}

void sub_1005C69DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1005C69F0(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v5;
  _DWORD v8[2];

  v5 = qword_100999820;
  if ((_DWORD)a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070A260();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 67109120;
      v8[1] = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Remote response with MTU %d", (uint8_t *)v8, 8u);
    }
    if (a3 != 23)
      sub_1005C68BC(a1, a3);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
}

uint64_t sub_1005C6AEC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  char v6;
  uint8_t buf[4];
  id v8;

  v6 = 0;
  sub_100043758(&v6);
  v2 = sub_10022660C(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_1005C6C1C, *(unsigned __int16 *)(a1 + 42), a1);
  sub_10004339C(&v6);
  if ((_DWORD)v2 == 146)
  {
    v3 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 138412290;
      v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Ignoring MTU exchange request - MTU already set for device \"%@\"", buf, 0xCu);

    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 0);
    v2 = 0;
  }
  sub_100043728(&v6);
  return v2;
}

void sub_1005C6C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C6C1C(uint64_t a1, int a2, uint64_t a3)
{
  return sub_1005C69F0(a3, a1, a2);
}

void sub_1005C6C30(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void *__p;
  void *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  if (!(_DWORD)a2)
  {
    if (a4)
      operator new();
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070A2E0(a1);
  }
  sub_1005C67F4(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_1005C6F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C6F78(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD v13[3];
  void *__p;
  void *v15;
  uint64_t v16;

  __p = 0;
  v15 = 0;
  v16 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v13[0] = v2;
  v13[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = sub_1004B20B8(v2, 0, &__p);
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v7)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v6)
    {
LABEL_9:
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      LOBYTE(__p) = 0;
      sub_100043758(&__p);
      v10 = sub_1002266C4(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_1005C7110, a1);
      sub_100043728(&__p);
      return v10;
    }
  }
  v11 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Returning primary services from cache", (uint8_t *)v13, 2u);
  }
  (***(void (****)(_QWORD, uint64_t, _QWORD, void **))(a1 + 8))(*(_QWORD *)(a1 + 8), a1, 0, &__p);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_1005C70D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005C7110(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1005C6C30(a4, a1, a2, a3);
}

void sub_1005C7128(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v6;
  void *v7;
  id v8;
  void *v9;
  char v10;
  void *__p;
  void *v12;
  uint64_t v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  id v17;

  __p = 0;
  v12 = 0;
  v13 = 0;
  if (!(_DWORD)a2)
  {
    if (a4)
      operator new();
    v6 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v7 = &v9;
      sub_10006887C(a1 + 44, &v9);
      if (v10 < 0)
        v7 = v9;
      v8 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 136446466;
      v15 = v7;
      v16 = 2112;
      v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "No primary services with UUID %{public}s found on device \"%@\"", buf, 0x16u);
      if (v10 < 0)
        operator delete(v9);

    }
  }
  sub_1005C67F4(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
}

void sub_1005C746C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C74B0(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  void **v18;
  id v19;
  uint64_t v20;
  void *v21[2];
  char v22;
  void *__p;
  void *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint8_t buf[4];
  void **v29;
  __int16 v30;
  id v31;

  __p = 0;
  v24 = 0;
  v25 = 0;
  v2 = *(void **)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v21[0] = v2;
  v21[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = sub_1004B20B8((uint64_t)v2, (unsigned __int8 *)(a1 + 44), &__p);
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v7)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v6)
    {
LABEL_9:
      if (__p)
      {
        v24 = __p;
        operator delete(__p);
      }
      LOBYTE(__p) = 0;
      sub_100043758(&__p);
      v10 = *(unsigned __int16 *)(a1 + 40);
      v26 = *(_OWORD *)(a1 + 44);
      v27 = *(_DWORD *)(a1 + 60);
      sub_1002269E4(v10, (uint64_t)sub_1005C7744, (unsigned __int8 *)&v26, a1);
      v12 = v11;
      sub_100043728(&__p);
      return v12;
    }
  }
  v14 = __p;
  v13 = v24;
  v15 = qword_100999820;
  v16 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT);
  if (v13 == v14)
  {
    if (v16)
    {
      sub_10006887C(a1 + 44, v21);
      if (v22 >= 0)
        v18 = v21;
      else
        v18 = (void **)v21[0];
      v19 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 136446466;
      v29 = v18;
      v30 = 2112;
      v31 = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Database cache fetching returned empty for service UUID %{public}s on device \"%@\"", buf, 0x16u);
      if (v22 < 0)
        operator delete(v21[0]);

    }
    v20 = sub_100065478();
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 424))(v20);
    goto LABEL_9;
  }
  if (v16)
  {
    LOWORD(v21[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Using local database for discover services by UUID.", (uint8_t *)v21, 2u);
  }
  (***(void (****)(_QWORD, uint64_t, _QWORD, void **))(a1 + 8))(*(_QWORD *)(a1 + 8), a1, 0, &__p);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_1005C76FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005C7744(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1005C7128(a4, a1, a2, a3);
}

void sub_1005C775C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v6;
  int v7;
  int v8;
  id v9;
  void *__p;
  void *v11;
  uint64_t v12;
  uint8_t buf[8];
  __int16 v14;
  int v15;
  __int16 v16;
  id v17;

  __p = 0;
  v11 = 0;
  v12 = 0;
  if (!(_DWORD)a2)
  {
    if (a4)
      operator new();
    v6 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(unsigned __int16 *)(a1 + 42);
      v8 = *(unsigned __int16 *)(a1 + 44);
      v9 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v7;
      v14 = 1024;
      v15 = v8;
      v16 = 2112;
      v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "No included services found in range [0x%04x, 0x%04x] on device \"%@\"", buf, 0x18u);

    }
  }
  sub_1005C67F4(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_1005C7A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C7AD8(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD v13[3];
  void *__p;
  void *v15;
  uint64_t v16;

  __p = 0;
  v15 = 0;
  v16 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v13[0] = v2;
  v13[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = sub_1004B2480(v2, *(unsigned __int16 *)(a1 + 42), *(unsigned __int16 *)(a1 + 44), &__p);
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v7)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v6)
    {
LABEL_9:
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      LOBYTE(__p) = 0;
      sub_100043758(&__p);
      v10 = sub_100226D60(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_1005C7C7C, *(_WORD *)(a1 + 42), *(_WORD *)(a1 + 44), a1);
      sub_100043728(&__p);
      return v10;
    }
  }
  v11 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Using local database for discover included services.", (uint8_t *)v13, 2u);
  }
  (***(void (****)(_QWORD, uint64_t, _QWORD, void **))(a1 + 8))(*(_QWORD *)(a1 + 8), a1, 0, &__p);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_1005C7C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005C7C7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1005C775C(a4, a1, a2, a3);
}

void sub_1005C7C94(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned __int8 *v8;
  int v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  uint8_t *v13;
  id v14;
  void *__p;
  void *v16;
  uint64_t v17;
  uint8_t buf[8];
  _WORD v19[7];
  char v20;
  uint8_t v21[4];
  uint8_t *v22;
  __int16 v23;
  id v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  int v38;
  __int128 v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  __n128 v45;
  int v46;
  __n128 v47;
  int v48;

  __p = 0;
  v16 = 0;
  v17 = 0;
  if (!(_DWORD)a2)
  {
    if (a4)
    {
      v6 = a4;
      v7 = (unsigned __int16 *)(a3 + 4);
      do
      {
        v47 = 0uLL;
        v48 = 0;
        v45 = *(__n128 *)(v7 + 2);
        v46 = *((_DWORD *)v7 + 5);
        sub_100042F44(&v47, &v45);
        v9 = *(v7 - 2);
        if (v9 == *v7)
        {
          v10 = qword_100999820;
          if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
          {
            v11 = *(id *)(a1 + 16);
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)&buf[4] = v9;
            v19[0] = 2112;
            *(_QWORD *)&v19[1] = v11;
            _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Ignoring invalid characteristic with identical handle and value handle (0x%04x) on device \"%@\"", buf, 0x12u);

          }
        }
        else
        {
          v44 = 0;
          v43 = xmmword_100742B44;
          if (!sub_100072DF0(v8, (unsigned __int8 *)&v43))
          {
            v42 = 0;
            v41 = xmmword_100742B58;
            if (!sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v41))
            {
              v40 = 0;
              v39 = xmmword_100742B6C;
              if (!sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v39))
              {
                v38 = 0;
                v37 = xmmword_100742B80;
                if (!sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v37))
                {
                  v36 = 0;
                  v35 = xmmword_100742B94;
                  if (!sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v35))
                  {
                    v34 = 0;
                    v33 = xmmword_100742BA8;
                    if (!sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v33))
                    {
                      v32 = 0;
                      v31 = xmmword_100742BBC;
                      if (!sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v31))
                      {
                        v30 = 0;
                        v29 = xmmword_100742BD0;
                        if (!sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v29))
                        {
                          v28 = 0;
                          v27 = xmmword_100742BE4;
                          if (!sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v27))
                          {
                            v26 = 0;
                            v25 = xmmword_100742BF8;
                            if (!sub_100072DF0((unsigned __int8 *)&v47, (unsigned __int8 *)&v25))
                              operator new();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v12 = qword_100999820;
          if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
          {
            sub_10006887C((uint64_t)&v47, buf);
            if (v20 >= 0)
              v13 = buf;
            else
              v13 = *(uint8_t **)buf;
            v14 = *(id *)(a1 + 16);
            *(_DWORD *)v21 = 136446466;
            v22 = v13;
            v23 = 2112;
            v24 = v14;
            _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Ignoring invalid characteristic with invalid UUID %{public}s on device \"%@\"", v21, 0x16u);
            if (v20 < 0)
              operator delete(*(void **)buf);

          }
        }
        v7 += 14;
        --v6;
      }
      while (v6);
    }
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070A358(a1);
  }
  sub_1005C67F4(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_1005C8170(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  operator delete();
}

uint64_t sub_1005C81D0(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD v13[3];
  void *__p;
  void *v15;
  uint64_t v16;

  __p = 0;
  v15 = 0;
  v16 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v13[0] = v2;
  v13[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = sub_1004B26A8(v2, 0, *(unsigned __int16 *)(a1 + 42), *(unsigned __int16 *)(a1 + 44), &__p);
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v7)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v6)
    {
LABEL_9:
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      LOBYTE(__p) = 0;
      sub_100043758(&__p);
      v10 = sub_1002270E4(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_1005C8378, *(_WORD *)(a1 + 42), *(_WORD *)(a1 + 44), a1);
      sub_100043728(&__p);
      return v10;
    }
  }
  v11 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Using local database for discover all characteristics.", (uint8_t *)v13, 2u);
  }
  (***(void (****)(_QWORD, uint64_t, _QWORD, void **))(a1 + 8))(*(_QWORD *)(a1 + 8), a1, 0, &__p);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_1005C833C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005C8378(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  sub_1005C7C94(a4, a1, a2, a3);
}

void sub_1005C8390(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  id v11;
  NSObject *v12;
  void **v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  id v18;
  void *v20[2];
  char v21;
  void *__p;
  void *v23;
  uint64_t v24;
  int buf;
  _BYTE buf_4[14];
  __int16 v27;
  int v28;
  __int16 v29;
  id v30;

  v4 = a2;
  v5 = a1;
  __p = 0;
  v23 = 0;
  v24 = 0;
  if (!(_DWORD)a2)
  {
    if (a4)
    {
      v7 = 0;
      v8 = a4;
      do
      {
        v9 = *(unsigned __int16 *)(a3 + 28 * v7);
        if (v9 != *(unsigned __int16 *)(a3 + 28 * v7 + 4))
          operator new();
        v10 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        {
          v11 = *(id *)(a1 + 16);
          buf = 67109378;
          *(_DWORD *)buf_4 = v9;
          *(_WORD *)&buf_4[4] = 2112;
          *(_QWORD *)&buf_4[6] = v11;
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Ignoring invalid characteristic with identical handle and value handle (0x%04x) on device \"%@\"", (uint8_t *)&buf, 0x12u);

        }
        ++v7;
      }
      while (v7 != v8);
      v4 = 0;
      v5 = a1;
    }
    v12 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v13 = v20;
      sub_10006887C(v5 + 48, v20);
      v14 = v4;
      if (v21 < 0)
        v13 = (void **)v20[0];
      v15 = *(unsigned __int16 *)(v5 + 42);
      v16 = *(unsigned __int16 *)(v5 + 44);
      v17 = v5;
      v18 = *(id *)(v5 + 16);
      buf = 136446978;
      *(_QWORD *)buf_4 = v13;
      *(_WORD *)&buf_4[8] = 1024;
      *(_DWORD *)&buf_4[10] = v15;
      v27 = 1024;
      v28 = v16;
      v29 = 2112;
      v30 = v18;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "No characteristics with UUID %{public}s found in range [0x%04x, 0x%04x] on device \"%@\"", (uint8_t *)&buf, 0x22u);
      if (v21 < 0)
        operator delete(v20[0]);

      v4 = v14;
      v5 = v17;
    }
  }
  sub_1005C67F4(v5, v4, (uint64_t)&__p);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
}

void sub_1005C879C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C87FC(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD v15[3];
  void *__p;
  void *v17;
  uint64_t v18;
  __n128 v19;
  int v20;

  __p = 0;
  v17 = 0;
  v18 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v15[0] = v2;
  v15[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = sub_1004B26A8(v2, (unsigned __int8 *)(a1 + 48), *(unsigned __int16 *)(a1 + 42), *(unsigned __int16 *)(a1 + 44), &__p);
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v7)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v6)
    {
LABEL_9:
      if (__p)
      {
        v17 = __p;
        operator delete(__p);
      }
      LOBYTE(__p) = 0;
      sub_100043758(&__p);
      v10 = *(unsigned __int16 *)(a1 + 40);
      v19 = *(__n128 *)(a1 + 48);
      v20 = *(_DWORD *)(a1 + 64);
      sub_100227488(v10, (uint64_t)sub_1005C89F0, &v19, *(_WORD *)(a1 + 42), *(_WORD *)(a1 + 44), a1);
      v12 = v11;
      sub_100043728(&__p);
      return v12;
    }
  }
  v13 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Using local database for discover characteristics by UUID.", (uint8_t *)v15, 2u);
  }
  (***(void (****)(_QWORD, uint64_t, _QWORD, void **))(a1 + 8))(*(_QWORD *)(a1 + 8), a1, 0, &__p);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_1005C89AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005C89F0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  sub_1005C8390(a4, a1, a2, a3);
}

void sub_1005C8A08(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  NSObject *v6;
  int v7;
  int v8;
  id v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint8_t buf[16];
  id v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  int v38;
  __n128 v39;
  int v40;

  v4 = a2;
  __p = 0;
  v17 = 0;
  v18 = 0;
  if (!(_DWORD)a2)
  {
    if (a4)
    {
      memset(buf, 0, sizeof(buf));
      LODWORD(v20) = 0;
      v39 = *(__n128 *)(a3 + 4);
      v40 = *(_DWORD *)(a3 + 20);
      sub_100042F44((__n128 *)buf, &v39);
      v38 = 0;
      v37 = xmmword_100742B94;
      if (sub_100072DF0(buf, (unsigned __int8 *)&v37))
        operator new();
      v36 = 0;
      v35 = xmmword_100742BA8;
      if (sub_100072DF0(buf, (unsigned __int8 *)&v35))
        operator new();
      v34 = 0;
      v33 = xmmword_100742BBC;
      if (sub_100072DF0(buf, (unsigned __int8 *)&v33)
        || (v32 = 0, v31 = xmmword_100742BD0, sub_100072DF0(buf, (unsigned __int8 *)&v31)))
      {
        operator new();
      }
      v30 = 0;
      v29 = xmmword_100742BE4;
      if (sub_100072DF0(buf, (unsigned __int8 *)&v29))
        operator new();
      v28 = 0;
      v27 = xmmword_100742B44;
      if (!sub_100072DF0(buf, (unsigned __int8 *)&v27))
      {
        v26 = 0;
        v25 = xmmword_100742B58;
        if (!sub_100072DF0(buf, (unsigned __int8 *)&v25))
        {
          v24 = 0;
          v23 = xmmword_100742B6C;
          if (!sub_100072DF0(buf, (unsigned __int8 *)&v23))
          {
            v22 = 0;
            v21 = xmmword_100742B80;
            if (!sub_100072DF0(buf, (unsigned __int8 *)&v21))
              operator new();
          }
        }
      }
    }
    v6 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(unsigned __int16 *)(a1 + 42);
      v8 = *(unsigned __int16 *)(a1 + 44);
      v9 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v7;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v8;
      *(_WORD *)&buf[14] = 2112;
      v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "No descriptors found in range [0x%04x, 0x%04x] on device \"%@\"", buf, 0x18u);

    }
    v10 = *(_QWORD **)(a1 + 24);
    v11 = *(std::__shared_weak_count **)(a1 + 32);
    *(_QWORD *)buf = v10;
    *(_QWORD *)&buf[8] = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    sub_1004B4948(v10, (uint64_t **)&__p, *(_WORD *)(a1 + 42));
    v4 = 0;
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  sub_1005C67F4(a1, v4, (uint64_t)&__p);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_1005C9004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C906C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD v13[3];
  void *__p;
  void *v15;
  uint64_t v16;

  __p = 0;
  v15 = 0;
  v16 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v13[0] = v2;
  v13[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = sub_1004B2B74(v2, *(_WORD *)(a1 + 42), *(unsigned __int16 *)(a1 + 44), &__p);
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v7)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v6)
    {
LABEL_9:
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      LOBYTE(__p) = 0;
      sub_100043758(&__p);
      v10 = sub_100227590(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_1005C9210, *(_WORD *)(a1 + 42), *(_WORD *)(a1 + 44), a1);
      sub_100043728(&__p);
      return v10;
    }
  }
  v11 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Using local database for discover all descriptors.", (uint8_t *)v13, 2u);
  }
  (***(void (****)(_QWORD, uint64_t, _QWORD, void **))(a1 + 8))(*(_QWORD *)(a1 + 8), a1, 0, &__p);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_1005C91D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005C9210(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1005C8A08(a4, a1, a2, a3);
}

void sub_1005C9228(uint64_t a1, uint64_t a2)
{
  void *__p;
  void *v5;
  uint64_t v6;

  __p = 0;
  v5 = 0;
  v6 = 0;
  if (!(_DWORD)a2)
    operator new();
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_10070A3F8();
  sub_1005C67F4(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_1005C9438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C94AC(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v14;
  int v15;
  __n128 v16;
  __n128 v17;
  int v18;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v17.n128_u64[0] = v2;
  v17.n128_u64[1] = (unint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = sub_1004B5294(v2, *(unsigned __int16 *)(a1 + 44));
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_8:
    if (v6)
      goto LABEL_9;
LABEL_17:
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070A470(a1 + 44, a1);
    return 1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if (!v7)
    goto LABEL_17;
LABEL_9:
  v10 = v7[1];
  v11 = *(_DWORD *)(v10 + 20);
  v17 = *(__n128 *)(v10 + 4);
  v18 = v11;
  sub_100042F44(&v16, &v17);
  v15 = 0;
  v14 = xmmword_100742B80;
  if (!sub_100072DF0((unsigned __int8 *)&v16, (unsigned __int8 *)&v14))
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070A54C(a1 + 44, a1);
    return 1;
  }
  if ((v7[9] & 2) != 0)
  {
    v17.n128_u8[0] = 0;
    sub_100043758(&v17);
    v12 = sub_1002277F4(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_1005C96B4, *(_WORD *)(a1 + 42), a1);
    sub_100043728(&v17);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070A4E8();
    return 2;
  }
  return v12;
}

void sub_1005C9688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

void sub_1005C96B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1005C9228(a4, a1);
}

void sub_1005C96CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v6;
  void *v7[3];
  void *__p;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  __p = 0;
  v9 = 0;
  v10 = 0;
  if (a4)
    operator new();
  v6 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
  {
    sub_10006887C(a1 + 44, v7);
    sub_10070A5C4((char *)v7, a1, (uint64_t)&v11, v6);
  }
  sub_1005C67F4(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_1005C994C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C99C8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  char v5;
  __int128 v6;
  int v7;

  v5 = 0;
  sub_100043758(&v5);
  v2 = *(unsigned __int16 *)(a1 + 40);
  v6 = *(_OWORD *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 60);
  v3 = sub_100227A20(v2, (uint64_t)sub_1005C9A84, &v6, *(_WORD *)(a1 + 64), *(unsigned __int16 *)(a1 + 66), *(_WORD *)(a1 + 68), a1);
  sub_100043728(&v5);
  return v3;
}

void sub_1005C9A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_1005C9A84(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1005C96CC(a4, a1, a2, a3);
}

void sub_1005C9A9C(uint64_t a1, uint64_t a2)
{
  void *__p;
  void *v5;
  uint64_t v6;

  __p = 0;
  v5 = 0;
  v6 = 0;
  if (!(_DWORD)a2)
    operator new();
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_10070A68C();
  sub_1005C67F4(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_1005C9CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005C9D20(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v4 = 0;
  sub_100043758(&v4);
  v2 = sub_100227DB0(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_1005C9D90, *(_WORD *)(a1 + 42), *(_WORD *)(a1 + 44), a1);
  sub_100043728(&v4);
  return v2;
}

void sub_1005C9D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_1005C9D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1005C9A9C(a4, a1);
}

void sub_1005C9DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *__p;
  char *v28;
  char *v29;

  __p = 0;
  v28 = 0;
  v29 = 0;
  if (!(_DWORD)a2)
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v8 = (_BYTE *)sub_1004B5514(v4, *(unsigned __int16 *)(a1 + 42));
    if (v5)
    {
      v9 = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v8)
    {
      if (sub_1005BB2F8(v8))
      {
        v11 = *(_QWORD **)(a1 + 24);
        v12 = *(std::__shared_weak_count **)(a1 + 32);
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        sub_1004B5234(v11, (uint64_t)v8);
        if (v12)
        {
          v15 = (unint64_t *)&v12->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v17 = (v28 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v17 + 1) >> 61)
          abort();
        v18 = (v29 - (_BYTE *)__p) >> 2;
        if (v18 <= v17 + 1)
          v18 = v17 + 1;
        if ((unint64_t)(v29 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)sub_10007ABA0((uint64_t)&v29, v19);
        else
          v20 = 0;
        v21 = &v20[8 * v17];
        v22 = &v20[8 * v19];
        *(_QWORD *)v21 = v8;
        v23 = v21 + 8;
        v25 = (char *)__p;
        v24 = v28;
        if (v28 != __p)
        {
          do
          {
            v26 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *((_QWORD *)v21 - 1) = v26;
            v21 -= 8;
          }
          while (v24 != v25);
          v24 = (char *)__p;
        }
        __p = v21;
        v28 = v23;
        v29 = v22;
        if (v24)
          operator delete(v24);
        v28 = v23;
      }
      else
      {
        (*(void (**)(_BYTE *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  if (__p == v28 && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_10070A704();
  sub_1005C67F4(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    v28 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1005C9FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005CA024(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v4 = 0;
  sub_100043758(&v4);
  v2 = sub_1002277F4(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_1005CA090, *(_WORD *)(a1 + 42), a1);
  sub_100043728(&v4);
  return v2;
}

void sub_1005CA07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_1005CA090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1005C9DA8(a4, a1);
}

uint64_t sub_1005CA0A8(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2 && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_10070A77C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
}

uint64_t sub_1005CA118(uint64_t a1)
{
  int v2;
  __int16 v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  char v8;

  v8 = 0;
  sub_100043758(&v8);
  v2 = *(unsigned __int16 *)(a1 + 40);
  v3 = *(_WORD *)(a1 + 42);
  v4 = sub_10003EB18(a1 + 48);
  v5 = sub_10003F8C4(a1 + 48);
  v6 = sub_100227E64(v2, (uint64_t)sub_1005CA1BC, v3, v4, v5, a1);
  sub_100043728(&v8);
  return v6;
}

void sub_1005CA1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CA1BC(uint64_t a1, uint64_t a2)
{
  return sub_1005CA0A8(a2, a1);
}

uint64_t sub_1005CA1CC(unsigned __int16 *a1)
{
  int v2;
  __int16 v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  char v8;

  v8 = 0;
  sub_100043758(&v8);
  v2 = a1[20];
  v3 = a1[21];
  v4 = sub_10003EB18((uint64_t)(a1 + 24));
  v5 = sub_10003F8C4((uint64_t)(a1 + 24));
  v6 = sub_100227E64(v2, 0, v3, v4, v5, (uint64_t)a1);
  sub_10004339C(&v8);
  if (!(_DWORD)v6)
    (*(void (**)(unsigned __int16 *, _QWORD))(*(_QWORD *)a1 + 24))(a1, 0);
  sub_100043728(&v8);
  return v6;
}

void sub_1005CA278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CA28C(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2 && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_10070A7F0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
}

uint64_t sub_1005CA2FC(uint64_t a1)
{
  int v2;
  __int16 v3;
  const void *v4;
  unsigned __int16 v5;
  uint64_t v6;
  char v8;

  v8 = 0;
  sub_100043758(&v8);
  v2 = *(unsigned __int16 *)(a1 + 40);
  v3 = *(_WORD *)(a1 + 42);
  v4 = (const void *)sub_10003EB18(a1 + 48);
  v5 = sub_10003F8C4(a1 + 48);
  v6 = sub_100228014(v2, (uint64_t)sub_1005CA3A4, v3, 0, v4, v5, a1);
  sub_100043728(&v8);
  return v6;
}

void sub_1005CA390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CA3A4(uint64_t a1, uint64_t a2)
{
  return sub_1005CA28C(a2, a1);
}

uint64_t sub_1005CA3B4(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2 && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_10070A864();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
}

uint64_t sub_1005CA424(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  _QWORD v16[2];

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v16[0] = v2;
  v16[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = sub_1004B5294(v2, *(unsigned __int16 *)(a1 + 42));
  v7 = v6;
  if (v3)
  {
    v8 = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v7)
        goto LABEL_9;
      return 1;
    }
  }
  if (!v6)
    return 1;
LABEL_9:
  LOBYTE(v16[0]) = 0;
  sub_100043758(v16);
  v10 = *(unsigned __int16 *)(a1 + 40);
  v11 = *(_WORD *)(a1 + 42);
  v12 = sub_10003EB18(a1 + 48);
  v13 = sub_10003F8C4(a1 + 48);
  v14 = sub_1002285EC(v10, (uint64_t)sub_1005CA54C, v11, v12, v13, a1);
  sub_100043728(v16);
  return v14;
}

void sub_1005CA528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10009F88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CA54C(uint64_t a1, uint64_t a2)
{
  return sub_1005CA3B4(a2, a1);
}

uint64_t sub_1005CA55C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  id v13;
  const void *v14;
  size_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  int v20;
  __int128 v21;
  int v22;
  __n128 v23;
  __int128 v24;
  int v25;
  uint8_t buf[16];
  int v27;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v17 = v2;
  v18 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v24 = xmmword_10073B314;
  v25 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v24);
  v21 = xmmword_10073B33C;
  v22 = 0;
  sub_100042F44(&v23, (__n128 *)&v21);
  v6 = sub_1004B535C(v2, buf, (unsigned __int8 *)&v23);
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_8:
    if (!v6)
      goto LABEL_15;
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = *(_DWORD *)(v10 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v10 + 4);
  v27 = v11;
  sub_100042F44(&v23, (__n128 *)buf);
  v20 = 0;
  v19 = xmmword_100742B80;
  if (sub_100072DF0((unsigned __int8 *)&v23, (unsigned __int8 *)&v19))
  {
    v12 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Setting GAP name characteristic value on device \"%@\"", buf, 0xCu);

    }
    if (*(char *)(a1 + 87) < 0)
    {
      v14 = *(const void **)(a1 + 64);
      v15 = *(_QWORD *)(a1 + 72);
    }
    else
    {
      v14 = (const void *)(a1 + 64);
      v15 = *(unsigned __int8 *)(a1 + 87);
    }
    sub_10003994C(buf, v14, v15);
    operator new();
  }
LABEL_15:
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_10070A8D8(a1);
  return 10;
}

void sub_1005CA844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_10009F88C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1005CA8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  _QWORD v18[4];
  id v19;
  uint64_t v20;
  __int128 __p;
  uint64_t v22;
  void *__dst[2];
  uint64_t v24;

  if ((_DWORD)a3)
  {
    v7 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070A950(a3, v7, v8, v9, v10, v11, v12, v13);
  }
  else
  {
    v14 = *(id *)(a1 + 16);
    __dst[0] = 0;
    __dst[1] = 0;
    v24 = 0;
    if (*(char *)(a1 + 87) < 0)
    {
      sub_10003430C(__dst, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(a1 + 64);
      v24 = *(_QWORD *)(a1 + 80);
    }
    v15 = sub_1000419F4();
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3321888768;
    v18[2] = sub_1005CAA6C;
    v18[3] = &unk_10093B798;
    v20 = a1;
    v16 = v14;
    v19 = v16;
    if (SHIBYTE(v24) < 0)
    {
      sub_10003430C(&__p, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      __p = *(_OWORD *)__dst;
      v22 = v24;
    }
    sub_100041A34(v15, v18);
    if (SHIBYTE(v22) < 0)
      operator delete((void *)__p);

    if (SHIBYTE(v24) < 0)
      operator delete(__dst[0]);

  }
  return sub_1005C67F4(a1, a3, a4);
}

void sub_1005CAA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  if (a27 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1005CAA6C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  int v4;
  int v5;
  void *__p[2];
  uint64_t v7;
  unsigned __int8 v8[16];

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093BD88);
  v3 = off_1009778C0;
  sub_100030BCC(v8, *(_QWORD *)(a1 + 32));
  if (*(char *)(a1 + 71) < 0)
  {
    sub_10003430C(__p, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 64);
  }
  v4 = sub_10065354C((uint64_t)v3, v8, (uint64_t)__p, 2);
  v5 = v4;
  if (SHIBYTE(v7) < 0)
  {
    operator delete(__p[0]);
    if (!v5)
      return;
    goto LABEL_10;
  }
  if (v4)
LABEL_10:
    sub_1005C686C(v2);
}

void sub_1005CAB6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005CAB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1005CA8B8(a1 - 48, a2, a3, a4);
}

void sub_1005CAB98(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void **v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;
  __int128 __p;
  uint64_t v11;
  void *__dst[2];
  uint64_t v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  void **v17;

  if (*(char *)(a1 + 103) < 0)
  {
    if (!*(_QWORD *)(a1 + 88))
      return;
  }
  else if (!*(_BYTE *)(a1 + 103))
  {
    return;
  }
  v2 = *(id *)(a1 + 16);
  __dst[0] = 0;
  __dst[1] = 0;
  v13 = 0;
  if (*(char *)(a1 + 103) < 0)
  {
    sub_10003430C(__dst, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a1 + 80);
    v13 = *(_QWORD *)(a1 + 96);
  }
  v3 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    v4 = __dst;
    if (v13 < 0)
      v4 = (void **)__dst[0];
    *(_DWORD *)buf = 138412546;
    v15 = v2;
    v16 = 2080;
    v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "The device \"%@\" is named \"%s\"", buf, 0x16u);
  }
  v5 = sub_1000419F4();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  v7[2] = sub_1005CADBC;
  v7[3] = &unk_10093B798;
  v9 = a1;
  v6 = v2;
  v8 = v6;
  if (SHIBYTE(v13) < 0)
  {
    sub_10003430C(&__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    __p = *(_OWORD *)__dst;
    v11 = v13;
  }
  sub_100041A34(v5, v7);
  if (SHIBYTE(v11) < 0)
    operator delete((void *)__p);

  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);

}

void sub_1005CAD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  if (a27 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1005CADBC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  int v4;
  int v5;
  void *__p[2];
  uint64_t v7;
  unsigned __int8 v8[16];

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093BD88);
  v3 = off_1009778C0;
  sub_100030BCC(v8, *(_QWORD *)(a1 + 32));
  if (*(char *)(a1 + 71) < 0)
  {
    sub_10003430C(__p, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 64);
  }
  v4 = sub_10065354C((uint64_t)v3, v8, (uint64_t)__p, 2);
  v5 = v4;
  if (SHIBYTE(v7) < 0)
  {
    operator delete(__p[0]);
    if (!v5)
      return;
    goto LABEL_10;
  }
  if (v4)
LABEL_10:
    sub_1005C686C(v2);
}

void sub_1005CAEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005CAEE0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  id v12;
  _QWORD v14[2];
  __int128 v15;
  int v16;
  __n128 v17;
  __int128 v18;
  int v19;
  uint8_t buf[16];
  int v21;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  v14[0] = v3;
  v14[1] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v18 = xmmword_10073B314;
  v19 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v18);
  sub_100069AFC(&v17);
  v6 = sub_1004B535C(v3, buf, (unsigned __int8 *)&v17);
  if (v2)
  {
    v7 = (unint64_t *)&v2->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  LOWORD(v14[0]) = 0;
  if (v6
    && (v9 = *(_QWORD *)(v6 + 8),
        v10 = *(_DWORD *)(v9 + 20),
        *(_OWORD *)buf = *(_OWORD *)(v9 + 4),
        v21 = v10,
        sub_100042F44(&v17, (__n128 *)buf),
        v16 = 0,
        v15 = xmmword_100742B44,
        sub_100072DF0((unsigned __int8 *)&v17, (unsigned __int8 *)&v15)))
  {
    v11 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Reading long GAP name characteristic value on device \"%@\"", buf, 0xCu);

    }
    if (!sub_1002264F4(*(unsigned __int16 *)(a1 + 40), v14))
    {
      LOWORD(v14[0]) -= 4;
      operator new();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 9501);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070A9B4(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 10);
  }
}

void sub_1005CB1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_10009F88C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1005CB1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  void **v16;
  uint64_t v17;
  NSObject *v18;
  _BOOL4 v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  void *v24;
  size_t v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  char v31;
  __int16 v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD v36[5];
  __int16 v37;
  __int128 v38;
  int v39;
  std::string __dst;
  __int128 v41;
  int v42;
  __n128 v43;

  v7 = *(_QWORD *)(a1 + 56);
  if (v7)
  {
    if (v7 != a2
      && (v8 = qword_100999820,
          v9 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT),
          a2 = v7,
          v9))
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fReadGapName.get() == command";
      _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&__dst, 0xCu);
      a2 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;
      if (!a2)
        goto LABEL_6;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = 0;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
LABEL_6:
    if (a4[1] == *a4
      || (v10 = *(_QWORD *)(**a4 + 8),
          v11 = *(_DWORD *)(v10 + 20),
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)(v10 + 4),
          LODWORD(__dst.__r_.__value_.__r.__words[2]) = v11,
          sub_100042F44(&v43, (__n128 *)&__dst),
          v42 = 0,
          v41 = xmmword_100742C0C,
          !sub_100072DF0(v12, (unsigned __int8 *)&v41)))
    {
      sub_1005C67F4(a1, a3, (uint64_t)a4);
    }
    else
    {
      v13 = **a4;
      v14 = (void *)sub_10003EB18(v13 + 72);
      v15 = sub_10003F8C4(v13 + 72);
      sub_1002D236C(&__dst, v14, v15);
      v16 = (void **)(a1 + 80);
      if (*(char *)(a1 + 103) < 0)
        operator delete(*v16);
      *(_OWORD *)v16 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 96) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
      if (sub_10003F8C4(v13 + 72) >= (unint64_t)*(unsigned __int16 *)(a1 + 72) - 4)
      {
        v32 = **(_WORD **)(v13 + 8);
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472;
        v36[2] = sub_1005CB664;
        v36[3] = &unk_100920960;
        v36[4] = a1;
        v37 = v32;
        sub_1005C696C(a1, v36);
        v34 = *a4;
        v33 = a4[1];
        while (v34 != v33)
        {
          if (*v34)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)*v34 + 8))(*v34);
            v33 = a4[1];
          }
          ++v34;
        }
      }
      else
      {
        sub_1005CAB98(a1);
        (***(void (****)(_QWORD, uint64_t, _QWORD, uint64_t **))(a1 + 8))(*(_QWORD *)(a1 + 8), a1, 0, a4);
      }
    }
    return;
  }
  v17 = *(_QWORD *)(a1 + 64);
  if (!v17)
  {
    v35 = sub_100027F68();
    sub_100576500(v35, 1);
  }
  if (v17 != a2
    && (v18 = qword_100999820,
        v19 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT),
        a2 = v17,
        v19))
  {
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fReadLongGapName.get() == command";
    _os_log_fault_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&__dst, 0xCu);
    a2 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (!a2)
      goto LABEL_18;
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
LABEL_18:
  if (a4[1] == *a4
    || (v20 = *(_QWORD *)(**a4 + 8),
        v21 = *(_DWORD *)(v20 + 20),
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)(v20 + 4),
        LODWORD(__dst.__r_.__value_.__r.__words[2]) = v21,
        sub_100042F44(&v43, (__n128 *)&__dst),
        v39 = 0,
        v38 = xmmword_100742C0C,
        !sub_100072DF0(v22, (unsigned __int8 *)&v38)))
  {
    sub_1005C67F4(a1, a3, (uint64_t)a4);
  }
  else
  {
    v23 = **a4 + 72;
    v24 = (void *)sub_10003EB18(v23);
    v25 = sub_10003F8C4(v23);
    sub_1002D236C(&__dst, v24, v25);
    v26 = *(char *)(a1 + 103);
    if (v26 >= 0)
      v27 = (const std::string::value_type *)(a1 + 80);
    else
      v27 = *(const std::string::value_type **)(a1 + 80);
    if (v26 >= 0)
      v28 = *(unsigned __int8 *)(a1 + 103);
    else
      v28 = *(_QWORD *)(a1 + 88);
    v29 = std::string::insert(&__dst, 0, v27, v28);
    v30 = v29->__r_.__value_.__r.__words[0];
    v43.n128_u64[0] = v29->__r_.__value_.__l.__size_;
    *(unint64_t *)((char *)v43.n128_u64 + 7) = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1]
                                                                                + 7);
    v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 103) < 0)
      operator delete(*(void **)(a1 + 80));
    *(_QWORD *)(a1 + 80) = v30;
    *(_QWORD *)(a1 + 88) = v43.n128_u64[0];
    *(_QWORD *)(a1 + 95) = *(unint64_t *)((char *)v43.n128_u64 + 7);
    *(_BYTE *)(a1 + 103) = v31;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    sub_1005CAB98(a1);
    (***(void (****)(_QWORD, uint64_t, _QWORD, uint64_t **))(a1 + 8))(*(_QWORD *)(a1 + 8), a1, 0, a4);
  }
}

void sub_1005CB640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005CB664(uint64_t a1)
{
  return sub_1005CAEE0(*(_QWORD *)(a1 + 32));
}

void sub_1005CB674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  sub_1005CB1F8(a1 - 48, a2, a3, a4);
}

uint64_t sub_1005CB67C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  id v13;
  _QWORD v15[2];
  __int128 v16;
  int v17;
  __int128 v18;
  int v19;
  __n128 v20;
  uint8_t buf[16];
  int v22;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v15[0] = v2;
  v15[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v18 = xmmword_10073B314;
  v19 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v18);
  sub_100069AFC(&v20);
  v6 = sub_1004B535C(v2, buf, (unsigned __int8 *)&v20);
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v7)
      goto LABEL_14;
  }
  else
  {
LABEL_8:
    if (!v6)
      goto LABEL_14;
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = *(_DWORD *)(v10 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v10 + 4);
  v22 = v11;
  sub_100042F44(&v20, (__n128 *)buf);
  v17 = 0;
  v16 = xmmword_100742B44;
  if (sub_100072DF0((unsigned __int8 *)&v20, (unsigned __int8 *)&v16))
  {
    v12 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Reading GAP name characteristic value on device \"%@\"", buf, 0xCu);

    }
    LOBYTE(v15[0]) = 0;
    sub_100043758(v15);
    sub_1002264F4(*(unsigned __int16 *)(a1 + 40), (_WORD *)(a1 + 72));
    sub_10004339C(v15);
    operator new();
  }
LABEL_14:
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_10070AA2C(a1);
  return 10;
}

void sub_1005CB98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  sub_10009F88C((uint64_t)&a9);

  sub_100043728(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CB9F8(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v4;
  unsigned int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v15;
  id v16;
  uint8_t buf[8];
  std::__shared_weak_count *v18;
  id v19;

  v4 = (unsigned __int16 *)(a1 + 56);
  v5 = *(unsigned __int16 *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (std::__shared_weak_count *)*((_QWORD *)v4 - 3);
  *(_QWORD *)buf = v6;
  v18 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = *v4;
  }
  else
  {
    v10 = v5;
  }
  v11 = sub_1004B5688(v6, v10);
  if (!v7)
    goto LABEL_10;
  v12 = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if ((_DWORD)a2)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
  }
  else
  {
LABEL_10:
    if ((_DWORD)a2)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
  }
  if (v11)
  {
    if (v11 >= (unsigned __int16)(v5 + 2))
    {
      v15 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(id *)(a1 + 16);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = (unsigned __int16)(v5 + 2);
        LOWORD(v18) = 1024;
        *(_DWORD *)((char *)&v18 + 2) = v11;
        HIWORD(v18) = 2112;
        v19 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Attempting to discover descriptors in range [0x%04x, 0x%04x] on device \"%@\"", buf, 0x18u);

      }
      operator new();
    }
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 0);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070AAA4((uint64_t)v4, a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 1);
  }
}

void sub_1005CBCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_10009F88C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1005CBD10(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  NSObject *v8;
  _BOOL4 v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL4 v14;
  uint64_t v15;
  _QWORD v16[5];
  int v17;
  uint8_t buf[4];
  const char *v19;

  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
  {
    v12 = *(_QWORD *)(a1 + 72);
    if (!v12)
    {
      v15 = sub_100027F68();
      sub_100576500(v15, 1);
    }
    if (v12 != a2
      && (v13 = qword_100999820,
          v14 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT),
          a2 = v12,
          v14))
    {
      *(_DWORD *)buf = 136446210;
      v19 = "fDescDisc.get() == command";
      _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
      a2 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!a2)
        goto LABEL_17;
    }
    else
    {
      *(_QWORD *)(a1 + 72) = 0;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
LABEL_17:
    sub_1005C67F4(a1, a3, (uint64_t)a4);
    return;
  }
  if (v7 == a2
    || (v8 = qword_100999820,
        v9 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT),
        a2 = v7,
        !v9))
  {
    *(_QWORD *)(a1 + 64) = 0;
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
    goto LABEL_6;
  }
  *(_DWORD *)buf = 136446210;
  v19 = "fServiceDisc.get() == command";
  _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
  a2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (a2)
    goto LABEL_5;
LABEL_6:
  v11 = (_QWORD *)*a4;
  v10 = (_QWORD *)a4[1];
  while (v11 != v10)
  {
    if (*v11)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v11 + 8))(*v11);
      v10 = (_QWORD *)a4[1];
    }
    ++v11;
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1005CBF24;
  v16[3] = &unk_1009173C0;
  v16[4] = a1;
  v17 = a3;
  sub_1005C696C(a1, v16);
}

uint64_t sub_1005CBF24(uint64_t a1)
{
  return sub_1005CB9F8(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1005CBF34(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  sub_1005CBD10(a1 - 48, a2, a3, a4);
}

uint64_t sub_1005CBF3C(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned __int16 v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  int v16;
  id v17;
  uint8_t buf[8];
  __int128 v20;

  v2 = *(unsigned __int16 *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)buf = v3;
  *(_QWORD *)&v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(unsigned __int16 *)(a1 + 56);
  }
  else
  {
    v7 = v2;
  }
  v8 = sub_1004B5688(v3, v7);
  v9 = v8;
  if (!v4)
    goto LABEL_10;
  v10 = (unint64_t *)&v4->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_10:
    if (v8)
      goto LABEL_11;
LABEL_17:
    v15 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(unsigned __int16 *)(a1 + 56);
      v17 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v16;
      LOWORD(v20) = 2112;
      *(_QWORD *)((char *)&v20 + 2) = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Attempting to find service for characteristic handle 0x%04x on device \"%@\"", buf, 0x12u);

    }
    operator new();
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (!v9)
    goto LABEL_17;
LABEL_11:
  v12 = v2 + 2;
  if (v9 >= (unsigned __int16)(v2 + 2))
  {
    v13 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v12;
      LOWORD(v20) = 1024;
      *(_DWORD *)((char *)&v20 + 2) = v9;
      WORD3(v20) = 2112;
      *((_QWORD *)&v20 + 1) = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Attempting to discover descriptors in range [0x%04x, 0x%04x] on device \"%@\"", buf, 0x18u);

    }
    operator new();
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 0);
  return 0;
}

void sub_1005CC2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_10009F88C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1005CC308(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  char v21;
  void *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  NSObject *v32;
  _BOOL4 v33;
  const char *v34;
  int v35;
  id v36;
  NSObject *v37;
  int v38;
  id v39;
  int v40;
  id v41;
  __int16 v42;
  _BYTE buf[20];
  id v44;
  __int128 v45;
  int v46;
  __int128 v47;
  int v48;
  __n128 v49;

  v42 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)buf = v2;
  *(_QWORD *)&buf[8] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = sub_1004B5294(v2, *(unsigned __int16 *)(a1 + 56));
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_8:
    if (v6)
      goto LABEL_9;
LABEL_30:
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070AB1C(a1 + 56, a1);
    goto LABEL_37;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if (!v7)
    goto LABEL_30;
LABEL_9:
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)buf = v10;
  *(_QWORD *)&buf[8] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = sub_1004B5294(v10, *(unsigned __int16 *)(a1 + 56));
  v15 = v14;
  if (!v11)
    goto LABEL_16;
  v16 = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_16:
    if (v14)
      goto LABEL_17;
LABEL_35:
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070AB94(a1 + 56, a1);
    goto LABEL_37;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v15)
    goto LABEL_35;
LABEL_17:
  v18 = v15[1];
  v19 = *(_DWORD *)(v18 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v18 + 4);
  *(_DWORD *)&buf[16] = v19;
  sub_100042F44(&v49, (__n128 *)buf);
  v48 = 0;
  v47 = xmmword_100742B80;
  if (!sub_100072DF0(v20, (unsigned __int8 *)&v47))
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070AC84(a1 + 56, a1);
LABEL_37:
    v29 = 1;
LABEL_38:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v29);
    return;
  }
  if ((v15[9] & 0x30) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070AC0C(a1 + 56, a1);
    v29 = 6;
    goto LABEL_38;
  }
  if (*(_BYTE *)(a1 + 58))
  {
    if ((v15[9] & 0x10) != 0)
      v21 = 1;
    else
      v21 = 2;
    LOBYTE(v42) = v21;
  }
  sub_10001FE6C(buf, (uint64_t)(v15 + 13));
  v22 = *(void **)buf;
  v23 = *(uint64_t **)&buf[8];
  if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
  {
    v24 = *(uint64_t **)buf;
    while (1)
    {
      v25 = *v24;
      v26 = *(_QWORD *)(*v24 + 8);
      v27 = *(_DWORD *)(v26 + 20);
      *(_OWORD *)buf = *(_OWORD *)(v26 + 4);
      *(_DWORD *)&buf[16] = v27;
      sub_100042F44(&v49, (__n128 *)buf);
      v46 = 0;
      v45 = xmmword_100742BBC;
      if (sub_100072DF0(v28, (unsigned __int8 *)&v45))
        break;
      if (++v24 == v23)
        goto LABEL_52;
    }
    v30 = **(unsigned __int16 **)(v25 + 8);
    v31 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Found client configuration descriptor at handle 0x%04x", buf, 8u);
    }
    if (v30)
    {
      v32 = qword_100999820;
      v33 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT);
      if ((_BYTE)v42)
      {
        if (v33)
        {
          if ((v42 & 1) != 0)
            v34 = "notifications";
          else
            v34 = "indications";
          v35 = *(unsigned __int16 *)(a1 + 56);
          v36 = *(id *)(a1 + 16);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = v34;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v35;
          *(_WORD *)&buf[18] = 2112;
          v44 = v36;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Enabling %{public}s on client configuration descriptor for characteristic at handle 0x%04x on device \"%@\"", buf, 0x1Cu);

        }
      }
      else if (v33)
      {
        v40 = *(unsigned __int16 *)(a1 + 56);
        v41 = *(id *)(a1 + 16);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v40;
        *(_WORD *)&buf[8] = 2112;
        *(_QWORD *)&buf[10] = v41;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Disabling notifications/indications on client configuration descriptor for characteristic at handle 0x%04x on device \"%@\"", buf, 0x12u);

      }
      sub_10003994C(buf, &v42, 2uLL);
      operator new();
    }
  }
LABEL_52:
  v37 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    v38 = *(unsigned __int16 *)(a1 + 56);
    v39 = *(id *)(a1 + 16);
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v38;
    *(_WORD *)&buf[8] = 2112;
    *(_QWORD *)&buf[10] = v39;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Unable to find client configuration descriptor for characteristic at handle 0x%04x on device \"%@\"", buf, 0x12u);

  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 10);
  if (v22)
    operator delete(v22);
}

void sub_1005CC8D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  sub_10009F88C((uint64_t)va);

  if (v2)
    operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1005CC968(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v8;
  _BOOL4 v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL4 v14;
  uint64_t v15;
  _QWORD v16[5];
  int v17;
  uint8_t buf[4];
  const char *v19;

  v6 = a1[8];
  if (!v6)
  {
    v12 = a1[9];
    if (!v12)
    {
      v15 = sub_100027F68();
      sub_100576500(v15, 1);
    }
    if (v12 != a2
      && (v13 = qword_100999820,
          v14 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT),
          a2 = v12,
          v14))
    {
      *(_DWORD *)buf = 136446210;
      v19 = "fWriteCommand.get() == command";
      _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
      a2 = a1[9];
      a1[9] = 0;
      if (!a2)
        goto LABEL_17;
    }
    else
    {
      a1[9] = 0;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
LABEL_17:
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 24))(a1, a3);
    return;
  }
  if (v6 == a2
    || (v8 = qword_100999820,
        v9 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT),
        a2 = v6,
        !v9))
  {
    a1[8] = 0;
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
    goto LABEL_6;
  }
  *(_DWORD *)buf = 136446210;
  v19 = "fTreeCommand.get() == command";
  _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
  a2 = a1[8];
  a1[8] = 0;
  if (a2)
    goto LABEL_5;
LABEL_6:
  v11 = *(_QWORD **)a4;
  v10 = *(_QWORD **)(a4 + 8);
  while (v11 != v10)
  {
    if (*v11)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v11 + 8))(*v11);
      v10 = *(_QWORD **)(a4 + 8);
    }
    ++v11;
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1005CCB80;
  v16[3] = &unk_1009173C0;
  v16[4] = a1;
  v17 = a3;
  sub_1005C696C((uint64_t)a1, v16);
}

void sub_1005CCB80(uint64_t a1)
{
  sub_1005CC308(*(_QWORD *)(a1 + 32));
}

void sub_1005CCB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1005CC968((_QWORD *)(a1 - 48), a2, a3, a4);
}

uint64_t sub_1005CCB90(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  char v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  int v29;
  NSObject *v30;
  NSObject *v31;
  _BOOL4 v32;
  const char *v33;
  int v34;
  id v35;
  NSObject *v36;
  int v37;
  id v38;
  int v39;
  id v40;
  __int16 v41;
  _BYTE buf[20];
  id v43;
  __int128 v44;
  int v45;
  __int128 v46;
  int v47;
  __n128 v48;

  v41 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)buf = v2;
  *(_QWORD *)&buf[8] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = sub_1004B5294(v2, *(unsigned __int16 *)(a1 + 56));
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_8:
    if (v6)
      goto LABEL_9;
LABEL_30:
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070ACFC(a1 + 56, a1);
    return 1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if (!v7)
    goto LABEL_30;
LABEL_9:
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)buf = v10;
  *(_QWORD *)&buf[8] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = sub_1004B5294(v10, *(unsigned __int16 *)(a1 + 56));
  v15 = v14;
  if (!v11)
    goto LABEL_16;
  v16 = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_16:
    if (v14)
      goto LABEL_17;
LABEL_35:
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070AD74(a1 + 56, a1);
    return 1;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v15)
    goto LABEL_35;
LABEL_17:
  v18 = v15[1];
  v19 = *(_DWORD *)(v18 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v18 + 4);
  *(_DWORD *)&buf[16] = v19;
  sub_100042F44(&v48, (__n128 *)buf);
  v47 = 0;
  v46 = xmmword_100742B80;
  if (!sub_100072DF0(v20, (unsigned __int8 *)&v46))
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070AE64(a1 + 56, a1);
    return 1;
  }
  if ((v15[9] & 0x30) != 0)
  {
    if (*(_BYTE *)(a1 + 58))
    {
      if ((v15[9] & 0x10) != 0)
        v21 = 1;
      else
        v21 = 2;
      LOBYTE(v41) = v21;
    }
    sub_10001FE6C(buf, (uint64_t)(v15 + 13));
    v22 = *(uint64_t **)&buf[8];
    if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
    {
      v23 = *(uint64_t **)buf;
      while (1)
      {
        v24 = *v23;
        v25 = *(_QWORD *)(*v23 + 8);
        v26 = *(_DWORD *)(v25 + 20);
        *(_OWORD *)buf = *(_OWORD *)(v25 + 4);
        *(_DWORD *)&buf[16] = v26;
        sub_100042F44(&v48, (__n128 *)buf);
        v45 = 0;
        v44 = xmmword_100742BBC;
        if (sub_100072DF0(v27, (unsigned __int8 *)&v44))
          break;
        if (++v23 == v22)
          goto LABEL_51;
      }
      v29 = **(unsigned __int16 **)(v24 + 8);
      v30 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v29;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Found client configuration descriptor at handle 0x%04x", buf, 8u);
      }
      if (v29)
      {
        v31 = qword_100999820;
        v32 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT);
        if ((_BYTE)v41)
        {
          if (v32)
          {
            if ((v41 & 1) != 0)
              v33 = "notifications";
            else
              v33 = "indications";
            v34 = *(unsigned __int16 *)(a1 + 56);
            v35 = *(id *)(a1 + 16);
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v33;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v34;
            *(_WORD *)&buf[18] = 2112;
            v43 = v35;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Enabling %s on client configuration descriptor at handle 0x%04x on device \"%@\"", buf, 0x1Cu);

          }
        }
        else if (v32)
        {
          v39 = *(unsigned __int16 *)(a1 + 56);
          v40 = *(id *)(a1 + 16);
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = v39;
          *(_WORD *)&buf[8] = 2112;
          *(_QWORD *)&buf[10] = v40;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Disabling notifications/indications on client configuration descriptor at handle 0x%04x on device \"%@\"", buf, 0x12u);

        }
        sub_10003994C(buf, &v41, 2uLL);
        operator new();
      }
    }
LABEL_51:
    v36 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
    {
      v37 = *(unsigned __int16 *)(a1 + 56);
      v38 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v37;
      *(_WORD *)&buf[8] = 2112;
      *(_QWORD *)&buf[10] = v38;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Don't have client configuration descriptor yet for characteristic at handle 0x%04x on device \"%@\"", buf, 0x12u);

    }
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_10070ADEC(a1 + 56, a1);
  return 6;
}

void sub_1005CD1FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  sub_10009F88C((uint64_t)va);

  if (v2)
    operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CD2A8(uint64_t a1, uint64_t a2, __int128 **a3)
{
  uint64_t v5;

  v5 = sub_1005C6698(a1, a2);
  *(_QWORD *)v5 = off_10093B7D8;
  *(_QWORD *)(v5 + 48) = &off_10093B810;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  sub_1000B61B8((char *)(v5 + 56), *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a3[1] - (char *)*a3) >> 2));
  *(_WORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_1005CD310(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1005CD324(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005CD324(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005CD360(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  void **v5;
  id v6;
  uint8_t buf[4];
  void **v8;
  __int16 v9;
  id v10;
  void *__p[2];
  uint64_t v12;

  v2 = *(unsigned __int16 *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 56);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 64) - v3) >> 2) > v2)
  {
    v4 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      sub_10006887C(v3 + 20 * v2, __p);
      if (v12 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      v6 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 136446466;
      v8 = v5;
      v9 = 2112;
      v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Attempting to discover services for next UUID %{public}s on device \"%@\"", buf, 0x16u);
      if (SHIBYTE(v12) < 0)
        operator delete(__p[0]);

    }
    operator new();
  }
  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  sub_1005CD604((_QWORD *)a1, (char **)__p);
  (***(void (****)(_QWORD, uint64_t, _QWORD, void **))(a1 + 8))(*(_QWORD *)(a1 + 8), a1, 0, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1005CD5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  void *v16;

  sub_10009F88C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1005CD604(_QWORD *a1, char **a2)
{
  unsigned __int8 *v2;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void *__p;
  _QWORD *v25;
  uint64_t v26;

  v2 = (unsigned __int8 *)a1[7];
  if (v2 != (unsigned __int8 *)a1[8])
  {
    v5 = a2 + 2;
    do
    {
      __p = 0;
      v25 = 0;
      v26 = 0;
      v6 = a1[3];
      v7 = (std::__shared_weak_count *)a1[4];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = sub_1004B20B8(v6, v2, &__p);
      if (v7)
      {
        v11 = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v13 = __p;
      if (!v10 && __p != v25)
      {
        v14 = a2[1];
        do
        {
          if ((unint64_t)v14 >= *v5)
          {
            v15 = (v14 - *a2) >> 3;
            if ((unint64_t)(v15 + 1) >> 61)
              abort();
            v16 = *v5 - (_QWORD)*a2;
            v17 = v16 >> 2;
            if (v16 >> 2 <= (unint64_t)(v15 + 1))
              v17 = v15 + 1;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
              v18 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v18 = v17;
            if (v18)
              v19 = (char *)sub_10007ABA0((uint64_t)v5, v18);
            else
              v19 = 0;
            v20 = &v19[8 * v15];
            *(_QWORD *)v20 = *v13;
            v14 = v20 + 8;
            v22 = *a2;
            v21 = a2[1];
            if (v21 != *a2)
            {
              do
              {
                v23 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *((_QWORD *)v20 - 1) = v23;
                v20 -= 8;
              }
              while (v21 != v22);
              v21 = *a2;
            }
            *a2 = v20;
            a2[1] = v14;
            a2[2] = &v19[8 * v18];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_QWORD *)v14 = *v13;
            v14 += 8;
          }
          a2[1] = v14;
          ++v13;
        }
        while (v13 != v25);
        v13 = __p;
      }
      if (v13)
      {
        v25 = v13;
        operator delete(v13);
      }
      v2 += 20;
    }
    while (v2 != (unsigned __int8 *)a1[8]);
  }
}

void sub_1005CD7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  sub_10009F88C((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1005CD7F4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  void *v8;
  uint64_t v9;

  v3 = a1[11];
  if (v3)
  {
    a1[11] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    __p = 0;
    v8 = 0;
    v9 = 0;
    sub_1005CD604(a1, (char **)&__p);
    sub_1005C67F4((uint64_t)a1, a2, (uint64_t)&__p);
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v5 = a1[12];
    if (!v5)
    {
      v6 = sub_100027F68();
      sub_100576500(v6, 1);
    }
    a1[12] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    sub_1005CD360((uint64_t)a1);
  }
}

void sub_1005CD8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005CD8BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v9[5];
  int v10;

  v7 = *(_QWORD **)a4;
  v6 = *(_QWORD **)(a4 + 8);
  if (*(_QWORD **)a4 != v6)
  {
    do
    {
      if (*v7)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 8))(*v7);
        v6 = *(_QWORD **)(a4 + 8);
      }
      ++v7;
    }
    while (v7 != v6);
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1005CD960;
  v9[3] = &unk_1009173C0;
  v9[4] = a1;
  v10 = a3;
  sub_1005C696C(a1, v9);
}

void sub_1005CD960(uint64_t a1)
{
  sub_1005CD7F4(*(_QWORD **)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1005CD970(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1005CD8BC(a1 - 48, a2, a3, a4);
}

uint64_t sub_1005CD978(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  uint64_t *p_buf;
  id v8;
  uint64_t buf;
  __int16 buf_8;
  id buf_10;
  char v13;
  uint8_t v14[4];
  uint64_t *v15;
  __int16 v16;
  id v17;

  v3 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  if (0xCCCCCCCCCCCCCCCDLL * ((v2 - v3) >> 2) >= 4)
  {
    v4 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(id *)(a1 + 16);
      buf = 0x404000202;
      buf_8 = 2112;
      buf_10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Number of UUIDs exceeds maximum (%d) - discovering all services on device \"%@\"", (uint8_t *)&buf, 0x12u);

    }
    operator new();
  }
  if (v2 != v3)
  {
    v6 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      sub_10006887C(v3 + 20 * *(unsigned __int16 *)(a1 + 80), &buf);
      if (v13 >= 0)
        p_buf = &buf;
      else
        p_buf = (uint64_t *)buf;
      v8 = *(id *)(a1 + 16);
      *(_DWORD *)v14 = 136446466;
      v15 = p_buf;
      v16 = 2112;
      v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Attempting to discover services for first UUID %{public}s on device \"%@\"", v14, 0x16u);
      if (v13 < 0)
        operator delete((void *)buf);

    }
    operator new();
  }
  return 0;
}

void sub_1005CDCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_10009F88C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1005CDD0C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unint64_t v14;
  NSObject *v15;
  uint64_t v16;
  char v17;
  unsigned __int16 v18;
  _BYTE buf[20];
  __int128 v20;
  int v21;
  __n128 v22;

  v18 = 23;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  *(_QWORD *)buf = v2;
  *(_QWORD *)&buf[8] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = sub_1004B5294(v2, *(unsigned __int16 *)(a1 + 56));
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_8:
    if (v6)
      goto LABEL_9;
LABEL_17:
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070AEDC(a1 + 56, a1);
    return 1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if (!v7)
    goto LABEL_17;
LABEL_9:
  v10 = v7[1];
  v11 = *(_DWORD *)(v10 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v10 + 4);
  *(_DWORD *)&buf[16] = v11;
  sub_100042F44(&v22, (__n128 *)buf);
  v21 = 0;
  v20 = xmmword_100742B80;
  if (!sub_100072DF0(v12, (unsigned __int8 *)&v20))
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070B01C(a1 + 56, a1);
    return 1;
  }
  if (!*(_BYTE *)(a1 + 58))
  {
    if ((v7[9] & 4) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        sub_10070AF54();
      return 3;
    }
LABEL_24:
    v17 = 0;
    sub_100043758(&v17);
    sub_1002264F4(*(unsigned __int16 *)(a1 + 40), &v18);
    sub_10004339C(&v17);
    v14 = sub_10003F8C4(a1 + 64);
    if (v14 > (unint64_t)v18 - 3)
    {
      v15 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        v16 = sub_10003F8C4(a1 + 64);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v16;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v18 - 3;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Using Write Long Characteristic Value, as data exceeds PDU capacity at current MTU (%zu of available %u bytes)", buf, 0x12u);
      }
      operator new();
    }
    if (*(_BYTE *)(a1 + 58))
      operator new();
    operator new();
  }
  if ((v7[9] & 8) != 0)
    goto LABEL_24;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_10070AFB8();
  return 3;
}

void sub_1005CE4E0()
{
  operator delete();
}

uint64_t sub_1005CE574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a1 + 80) != a2)
  {
    v7 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      sub_10070B094(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  return sub_1005C67F4(a1, a3, a4);
}

uint64_t sub_1005CE5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1005CE574(a1 - 48, a2, a3, a4);
}

uint64_t sub_1005CE5EC(uint64_t a1)
{
  sub_1005CE604(a1);
  return 0;
}

void sub_1005CE604(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 56))
  {
    case 0:
      sub_1005CE770(a1);
      break;
    case 1:
      sub_1005CE8CC();
    case 2:
      sub_1005CE9F8(a1);
      break;
    case 3:
      sub_1005CEB5C();
    case 4:
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 0);
      break;
    default:
      return;
  }
}

void sub_1005CE64C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  _QWORD v19[5];

  if (*(_QWORD *)(a1 + 64) != a2)
  {
    v7 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      sub_10070B104(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v16 = *(_QWORD **)a4;
  v15 = *(_QWORD **)(a4 + 8);
  while (v16 != v15)
  {
    if (*v16)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v16 + 8))(*v16);
      v15 = *(_QWORD **)(a4 + 8);
    }
    ++v16;
  }
  v17 = 4;
  switch(*(_DWORD *)(a1 + 56))
  {
    case 0:
    case 2:
    case 4:
      v18 = sub_100027F68();
      sub_100576500(v18, 1);
    case 1:
      if (a3)
        v17 = 4;
      else
        v17 = 2;
      goto LABEL_13;
    case 3:
LABEL_13:
      *(_DWORD *)(a1 + 56) = v17;
      break;
    default:
      break;
  }
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1005CE760;
  v19[3] = &unk_100917378;
  v19[4] = a1;
  sub_1005C696C(a1, v19);
}

void sub_1005CE760(uint64_t a1)
{
  sub_1005CE604(*(_QWORD *)(a1 + 32));
}

void sub_1005CE768(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1005CE64C(a1 - 48, a2, a3, a4);
}

void sub_1005CE770(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  _QWORD v10[7];
  unsigned __int8 v11[20];
  __int128 v12;
  int v13;
  __n128 v14;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  v10[5] = v3;
  v10[6] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12 = xmmword_10073B4CC;
  v13 = 0;
  sub_100042F44(&v14, (__n128 *)&v12);
  sub_100069AFC(v11);
  v6 = sub_1004B535C(v3, (unsigned __int8 *)&v14, v11);
  *(_QWORD *)(a1 + 72) = v6;
  if (v2)
  {
    v7 = (unint64_t *)&v2->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    v6 = *(_QWORD *)(a1 + 72);
  }
  if (v6)
    v9 = 1;
  else
    v9 = 4;
  *(_DWORD *)(a1 + 56) = v9;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1005CECDC;
  v10[3] = &unk_100917378;
  v10[4] = a1;
  sub_1005C696C(a1, v10);
}

void sub_1005CE8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void sub_1005CE8CC()
{
  operator new();
}

void sub_1005CE9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_10009F88C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1005CE9F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  _QWORD v10[7];
  __int128 v11;
  int v12;
  __n128 v13;
  _QWORD v14[2];
  int v15;

  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  sub_10005F5E4((uint64_t)v14, 10916);
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  v10[5] = v3;
  v10[6] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v11 = xmmword_10073B4CC;
  v12 = 0;
  sub_100042F44(&v13, (__n128 *)&v11);
  v6 = sub_1004B535C(v3, (unsigned __int8 *)&v13, (unsigned __int8 *)v14);
  *(_QWORD *)(a1 + 80) = v6;
  if (v2)
  {
    v7 = (unint64_t *)&v2->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    v6 = *(_QWORD *)(a1 + 80);
  }
  if (v6)
    v9 = 3;
  else
    v9 = 4;
  *(_DWORD *)(a1 + 56) = v9;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1005CECE4;
  v10[3] = &unk_100917378;
  v10[4] = a1;
  sub_1005C696C(a1, v10);
}

void sub_1005CEB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_1005CEB5C()
{
  uint64_t v0;
  char v1;

  v1 = 3;
  sub_10003994C(&v0, &v1, 1uLL);
  operator new();
}

void sub_1005CEC84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_10009F88C((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1005CECDC(uint64_t a1)
{
  return sub_1005CE604(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1005CECE4(uint64_t a1)
{
  return sub_1005CE604(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1005CECEC(uint64_t a1)
{
  sub_1005CED04(a1);
  return 0;
}

void sub_1005CED04(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  id v5;
  void **v6;
  uint64_t v7;
  id v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  id v12;
  __int16 v13;
  void **v14;
  __int128 v15;
  int v16;
  __int128 v17;
  int v18;
  __int128 v19;
  int v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;

  switch(*(_DWORD *)(a1 + 56))
  {
    case 0:
      sub_1005D032C(a1);
      break;
    case 1:
      sub_1005D0484(a1);
      break;
    case 2:
      v33 = xmmword_10073B3A0;
      v34 = 0;
      sub_1005D06D0(a1, (__n128 *)&v33, 3);
      break;
    case 3:
      v31 = xmmword_10073B3B4;
      v32 = 0;
      sub_1005D06D0(a1, (__n128 *)&v31, 4);
      break;
    case 4:
      v29 = xmmword_10073B3C8;
      v30 = 0;
      sub_1005D06D0(a1, (__n128 *)&v29, 5);
      break;
    case 5:
      v27 = xmmword_10073B3DC;
      v28 = 0;
      sub_1005D06D0(a1, (__n128 *)&v27, 6);
      break;
    case 6:
      v25 = xmmword_10073B3F0;
      v26 = 0;
      sub_1005D06D0(a1, (__n128 *)&v25, 7);
      break;
    case 7:
      v23 = xmmword_10073B404;
      v24 = 0;
      sub_1005D06D0(a1, (__n128 *)&v23, 8);
      break;
    case 8:
      v21 = xmmword_10073B418;
      v22 = 0;
      sub_1005D06D0(a1, (__n128 *)&v21, 9);
      break;
    case 9:
      v19 = xmmword_10073B42C;
      v20 = 0;
      sub_1005D06D0(a1, (__n128 *)&v19, 10);
      break;
    case 0xA:
      v17 = xmmword_10073B440;
      v18 = 0;
      sub_1005D06D0(a1, (__n128 *)&v17, 11);
      break;
    case 0xB:
      v15 = xmmword_10073B454;
      v16 = 0;
      sub_1005D06D0(a1, (__n128 *)&v15, 12);
      break;
    case 0xC:
      v2 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        v3 = *(id *)(a1 + 16);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093BD88);
        v4 = off_1009778C0;
        v5 = *(id *)(a1 + 16);
        sub_10065FC24((uint64_t)v4, v5, __p);
        if (v10 >= 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        *(_DWORD *)buf = 138412546;
        v12 = v3;
        v13 = 2080;
        v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Completed DIS discovery for device %@ %s", buf, 0x16u);
        if (v10 < 0)
          operator delete(__p[0]);

      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093BD88);
      sub_100656134((uint64_t)off_1009778C0, *(void **)(a1 + 16), 1);
      if (qword_1009778F8 != -1)
        dispatch_once(&qword_1009778F8, &stru_10093BD68);
      v7 = qword_1009778F0;
      v8 = *(id *)(a1 + 16);
      sub_100030BCC(__p, v8);
      sub_1005DDCE8(v7, (unsigned __int8 *)__p);

      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 0);
      break;
    default:
      return;
  }
}

void sub_1005CF154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1005CF1B4(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  NSData *v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  NSData *v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  void *v41;
  size_t v42;
  __n128 *v43;
  void *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  int v48;
  unsigned __int8 *v49;
  uint64_t v50;
  void *v51;
  size_t v52;
  __n128 *v53;
  void *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  int v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  NSData *v62;
  void *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  int v67;
  unsigned __int8 *v68;
  uint64_t v69;
  void *v70;
  size_t v71;
  __n128 *v72;
  void *v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  int v77;
  unsigned __int8 *v78;
  uint64_t v79;
  void *v80;
  size_t v81;
  __n128 *p_dst;
  void *v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  int v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  NSData *v91;
  void *v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  int v96;
  unsigned __int8 *v97;
  uint64_t v98;
  void *v99;
  size_t v100;
  __n128 *v101;
  void *v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  int v106;
  unsigned __int8 *v107;
  uint64_t v108;
  void *v109;
  size_t v110;
  __n128 *v111;
  void *v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  _QWORD v116[5];
  _QWORD v117[4];
  id v118;
  id v119;
  _QWORD v120[4];
  id v121;
  id v122;
  _QWORD v123[4];
  id v124;
  id v125;
  _QWORD v126[4];
  id v127;
  id v128;
  _QWORD v129[4];
  id v130;
  id v131;
  _QWORD v132[4];
  id v133;
  id v134;
  _QWORD v135[4];
  id v136;
  id v137;
  _QWORD v138[4];
  id v139;
  id v140;
  _QWORD v141[4];
  id v142;
  id v143;
  _QWORD v144[4];
  id v145;
  id v146;
  __int128 v147;
  int v148;
  __int128 v149;
  int v150;
  __int128 v151;
  int v152;
  __int128 v153;
  int v154;
  __int128 v155;
  int v156;
  __int128 v157;
  int v158;
  __int128 v159;
  int v160;
  __int128 v161;
  int v162;
  __int128 v163;
  int v164;
  __n128 __dst;
  int v166;
  char v167;
  __int128 v168;
  int v169;
  __n128 v170;

  if (*(_QWORD *)(a1 + 64) != a2)
  {
    v7 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      sub_10070B104(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v15 = *(id *)(a1 + 16);
  switch(*(_DWORD *)(a1 + 56))
  {
    case 0:
    case 0xC:
      v115 = sub_100027F68();
      sub_100576500(v115, 1);
    case 1:
      if (a3)
        v16 = 12;
      else
        v16 = 2;
      goto LABEL_28;
    case 2:
      if (!a3 && a4[1] != *a4)
      {
        v76 = *(_QWORD *)(*(_QWORD *)*a4 + 8);
        v77 = *(_DWORD *)(v76 + 20);
        __dst = *(__n128 *)(v76 + 4);
        v166 = v77;
        sub_100042F44(&v170, &__dst);
        v169 = 0;
        v168 = xmmword_100742C0C;
        if (sub_100072DF0(v78, (unsigned __int8 *)&v168))
        {
          v79 = *(_QWORD *)*a4 + 72;
          v80 = (void *)sub_10003EB18(v79);
          v81 = sub_10003F8C4(v79);
          sub_1002D236C(&__dst, v80, v81);
          if (v167 >= 0)
            p_dst = &__dst;
          else
            p_dst = (__n128 *)__dst.n128_u64[0];
          v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_dst));
          if (v167 < 0)
            operator delete((void *)__dst.n128_u64[0]);
          v84 = sub_1000419F4();
          v144[0] = _NSConcreteStackBlock;
          v144[1] = 3221225472;
          v144[2] = sub_1005CFFFC;
          v144[3] = &unk_100918340;
          v145 = v15;
          v85 = v83;
          v146 = v85;
          sub_100041A34(v84, v144);

        }
      }
      v16 = 3;
      goto LABEL_28;
    case 3:
      if (!a3 && a4[1] != *a4)
      {
        v66 = *(_QWORD *)(*(_QWORD *)*a4 + 8);
        v67 = *(_DWORD *)(v66 + 20);
        __dst = *(__n128 *)(v66 + 4);
        v166 = v67;
        sub_100042F44(&v170, &__dst);
        v164 = 0;
        v163 = xmmword_100742C0C;
        if (sub_100072DF0(v68, (unsigned __int8 *)&v163))
        {
          v69 = *(_QWORD *)*a4 + 72;
          v70 = (void *)sub_10003EB18(v69);
          v71 = sub_10003F8C4(v69);
          sub_1002D236C(&__dst, v70, v71);
          if (v167 >= 0)
            v72 = &__dst;
          else
            v72 = (__n128 *)__dst.n128_u64[0];
          v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v72));
          if (v167 < 0)
            operator delete((void *)__dst.n128_u64[0]);
          v74 = sub_1000419F4();
          v141[0] = _NSConcreteStackBlock;
          v141[1] = 3221225472;
          v141[2] = sub_1005D004C;
          v141[3] = &unk_100918340;
          v142 = v15;
          v75 = v73;
          v143 = v75;
          sub_100041A34(v74, v141);

        }
      }
      v16 = 4;
      goto LABEL_28;
    case 4:
      if (!a3 && a4[1] != *a4)
      {
        v47 = *(_QWORD *)(*(_QWORD *)*a4 + 8);
        v48 = *(_DWORD *)(v47 + 20);
        __dst = *(__n128 *)(v47 + 4);
        v166 = v48;
        sub_100042F44(&v170, &__dst);
        v162 = 0;
        v161 = xmmword_100742C0C;
        if (sub_100072DF0(v49, (unsigned __int8 *)&v161))
        {
          v50 = *(_QWORD *)*a4 + 72;
          v51 = (void *)sub_10003EB18(v50);
          v52 = sub_10003F8C4(v50);
          sub_1002D236C(&__dst, v51, v52);
          if (v167 >= 0)
            v53 = &__dst;
          else
            v53 = (__n128 *)__dst.n128_u64[0];
          v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v53));
          if (v167 < 0)
            operator delete((void *)__dst.n128_u64[0]);
          v55 = sub_1000419F4();
          v138[0] = _NSConcreteStackBlock;
          v138[1] = 3221225472;
          v138[2] = sub_1005D009C;
          v138[3] = &unk_100918340;
          v139 = v15;
          v56 = v54;
          v140 = v56;
          sub_100041A34(v55, v138);

        }
      }
      v16 = 5;
      goto LABEL_28;
    case 5:
      if (!a3 && a4[1] != *a4)
      {
        v95 = *(_QWORD *)(*(_QWORD *)*a4 + 8);
        v96 = *(_DWORD *)(v95 + 20);
        __dst = *(__n128 *)(v95 + 4);
        v166 = v96;
        sub_100042F44(&v170, &__dst);
        v160 = 0;
        v159 = xmmword_100742C0C;
        if (sub_100072DF0(v97, (unsigned __int8 *)&v159))
        {
          v98 = *(_QWORD *)*a4 + 72;
          v99 = (void *)sub_10003EB18(v98);
          v100 = sub_10003F8C4(v98);
          sub_1002D236C(&__dst, v99, v100);
          if (v167 >= 0)
            v101 = &__dst;
          else
            v101 = (__n128 *)__dst.n128_u64[0];
          v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v101));
          if (v167 < 0)
            operator delete((void *)__dst.n128_u64[0]);
          v103 = sub_1000419F4();
          v135[0] = _NSConcreteStackBlock;
          v135[1] = 3221225472;
          v135[2] = sub_1005D00EC;
          v135[3] = &unk_100918340;
          v136 = v15;
          v104 = v102;
          v137 = v104;
          sub_100041A34(v103, v135);

        }
      }
      v16 = 6;
      goto LABEL_28;
    case 6:
      if (!a3 && a4[1] != *a4)
      {
        v105 = *(_QWORD *)(*(_QWORD *)*a4 + 8);
        v106 = *(_DWORD *)(v105 + 20);
        __dst = *(__n128 *)(v105 + 4);
        v166 = v106;
        sub_100042F44(&v170, &__dst);
        v158 = 0;
        v157 = xmmword_100742C0C;
        if (sub_100072DF0(v107, (unsigned __int8 *)&v157))
        {
          v108 = *(_QWORD *)*a4 + 72;
          v109 = (void *)sub_10003EB18(v108);
          v110 = sub_10003F8C4(v108);
          sub_1002D236C(&__dst, v109, v110);
          if (v167 >= 0)
            v111 = &__dst;
          else
            v111 = (__n128 *)__dst.n128_u64[0];
          v112 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v111));
          if (v167 < 0)
            operator delete((void *)__dst.n128_u64[0]);
          v113 = sub_1000419F4();
          v132[0] = _NSConcreteStackBlock;
          v132[1] = 3221225472;
          v132[2] = sub_1005D013C;
          v132[3] = &unk_100918340;
          v133 = v15;
          v114 = v112;
          v134 = v114;
          sub_100041A34(v113, v132);

        }
      }
      v16 = 7;
      goto LABEL_28;
    case 7:
      if (!a3 && a4[1] != *a4)
      {
        v37 = *(_QWORD *)(*(_QWORD *)*a4 + 8);
        v38 = *(_DWORD *)(v37 + 20);
        __dst = *(__n128 *)(v37 + 4);
        v166 = v38;
        sub_100042F44(&v170, &__dst);
        v156 = 0;
        v155 = xmmword_100742C0C;
        if (sub_100072DF0(v39, (unsigned __int8 *)&v155))
        {
          v40 = *(_QWORD *)*a4 + 72;
          v41 = (void *)sub_10003EB18(v40);
          v42 = sub_10003F8C4(v40);
          sub_1002D236C(&__dst, v41, v42);
          if (v167 >= 0)
            v43 = &__dst;
          else
            v43 = (__n128 *)__dst.n128_u64[0];
          v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v43));
          if (v167 < 0)
            operator delete((void *)__dst.n128_u64[0]);
          v45 = sub_1000419F4();
          v129[0] = _NSConcreteStackBlock;
          v129[1] = 3221225472;
          v129[2] = sub_1005D018C;
          v129[3] = &unk_100918340;
          v130 = v15;
          v46 = v44;
          v131 = v46;
          sub_100041A34(v45, v129);

        }
      }
      v16 = 8;
      goto LABEL_28;
    case 8:
      if (!a3 && a4[1] != *a4)
      {
        v57 = *(_QWORD *)(*(_QWORD *)*a4 + 8);
        v58 = *(_DWORD *)(v57 + 20);
        __dst = *(__n128 *)(v57 + 4);
        v166 = v58;
        sub_100042F44(&v170, &__dst);
        v154 = 0;
        v153 = xmmword_100742C0C;
        if (sub_100072DF0(v59, (unsigned __int8 *)&v153))
        {
          v60 = *(_QWORD *)*a4 + 72;
          v61 = sub_10003EB18(v60);
          v62 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v61, sub_10003F8C4(v60));
          v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
          v64 = sub_1000419F4();
          v126[0] = _NSConcreteStackBlock;
          v126[1] = 3221225472;
          v126[2] = sub_1005D01DC;
          v126[3] = &unk_100918340;
          v127 = v15;
          v65 = v63;
          v128 = v65;
          sub_100041A34(v64, v126);

        }
      }
      v16 = 9;
      goto LABEL_28;
    case 9:
      if (!a3 && a4[1] != *a4)
      {
        v19 = *(_QWORD *)(*(_QWORD *)*a4 + 8);
        v20 = *(_DWORD *)(v19 + 20);
        __dst = *(__n128 *)(v19 + 4);
        v166 = v20;
        sub_100042F44(&v170, &__dst);
        v152 = 0;
        v151 = xmmword_100742C0C;
        if (sub_100072DF0(v21, (unsigned __int8 *)&v151))
        {
          v22 = *(_QWORD *)*a4 + 72;
          v23 = sub_10003EB18(v22);
          v24 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v23, sub_10003F8C4(v22));
          v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
          v26 = sub_1000419F4();
          v123[0] = _NSConcreteStackBlock;
          v123[1] = 3221225472;
          v123[2] = sub_1005D022C;
          v123[3] = &unk_100918340;
          v124 = v15;
          v27 = v25;
          v125 = v27;
          sub_100041A34(v26, v123);

        }
      }
      v16 = 10;
      goto LABEL_28;
    case 0xA:
      if (!a3 && a4[1] != *a4)
      {
        v28 = *(_QWORD *)(*(_QWORD *)*a4 + 8);
        v29 = *(_DWORD *)(v28 + 20);
        __dst = *(__n128 *)(v28 + 4);
        v166 = v29;
        sub_100042F44(&v170, &__dst);
        v150 = 0;
        v149 = xmmword_100742C0C;
        if (sub_100072DF0(v30, (unsigned __int8 *)&v149))
        {
          v31 = *(_QWORD *)*a4 + 72;
          v32 = sub_10003EB18(v31);
          v33 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v32, sub_10003F8C4(v31));
          v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
          v35 = sub_1000419F4();
          v120[0] = _NSConcreteStackBlock;
          v120[1] = 3221225472;
          v120[2] = sub_1005D027C;
          v120[3] = &unk_100918340;
          v121 = v15;
          v36 = v34;
          v122 = v36;
          sub_100041A34(v35, v120);

        }
      }
      v16 = 11;
      goto LABEL_28;
    case 0xB:
      if (!a3 && a4[1] != *a4)
      {
        v86 = *(_QWORD *)(*(_QWORD *)*a4 + 8);
        v87 = *(_DWORD *)(v86 + 20);
        __dst = *(__n128 *)(v86 + 4);
        v166 = v87;
        sub_100042F44(&v170, &__dst);
        v148 = 0;
        v147 = xmmword_100742C0C;
        if (sub_100072DF0(v88, (unsigned __int8 *)&v147))
        {
          v89 = *(_QWORD *)*a4 + 72;
          v90 = sub_10003EB18(v89);
          v91 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v90, sub_10003F8C4(v89));
          v92 = (void *)objc_claimAutoreleasedReturnValue(v91);
          v93 = sub_1000419F4();
          v117[0] = _NSConcreteStackBlock;
          v117[1] = 3221225472;
          v117[2] = sub_1005D02CC;
          v117[3] = &unk_100918340;
          v118 = v15;
          v94 = v92;
          v119 = v94;
          sub_100041A34(v93, v117);

        }
      }
      v16 = 12;
LABEL_28:
      *(_DWORD *)(a1 + 56) = v16;
      break;
    default:
      break;
  }
  v18 = (_QWORD *)*a4;
  v17 = (_QWORD *)a4[1];
  while (v18 != v17)
  {
    if (*v18)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v18 + 8))(*v18);
      v17 = (_QWORD *)a4[1];
    }
    ++v18;
  }
  v116[0] = _NSConcreteStackBlock;
  v116[1] = 3221225472;
  v116[2] = sub_1005D031C;
  v116[3] = &unk_100917378;
  v116[4] = a1;
  sub_1005C696C(a1, v116);

}

void sub_1005CFE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,void *a50)
{
  void *v50;
  void *v51;

  _Unwind_Resume(a1);
}

void sub_1005CFFFC(uint64_t a1)
{
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093BD88);
  sub_10065E7A0((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1005D004C(uint64_t a1)
{
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093BD88);
  sub_10065E9F4((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1005D009C(uint64_t a1)
{
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093BD88);
  sub_10065EB2C((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1005D00EC(uint64_t a1)
{
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093BD88);
  sub_10065EC64((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1005D013C(uint64_t a1)
{
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093BD88);
  sub_10065ED9C((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1005D018C(uint64_t a1)
{
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093BD88);
  sub_10065EED4((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1005D01DC(uint64_t a1)
{
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093BD88);
  sub_10065F00C((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1005D022C(uint64_t a1)
{
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093BD88);
  sub_10065F144((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1005D027C(uint64_t a1)
{
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093BD88);
  sub_10065F27C((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1005D02CC(uint64_t a1)
{
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093BD88);
  sub_10065F888((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1005D031C(uint64_t a1)
{
  sub_1005CED04(*(_QWORD *)(a1 + 32));
}

void sub_1005D0324(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  sub_1005CF1B4(a1 - 48, a2, a3, a4);
}

void sub_1005D032C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  _QWORD v10[7];
  unsigned __int8 v11[20];
  __int128 v12;
  int v13;
  __n128 v14;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  v10[5] = v3;
  v10[6] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12 = xmmword_10073B38C;
  v13 = 0;
  sub_100042F44(&v14, (__n128 *)&v12);
  sub_100069AFC(v11);
  v6 = sub_1004B535C(v3, (unsigned __int8 *)&v14, v11);
  if (v2)
  {
    v7 = (unint64_t *)&v2->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (v6)
    v9 = 1;
  else
    v9 = 12;
  *(_DWORD *)(a1 + 56) = v9;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1005D0A4C;
  v10[3] = &unk_100917378;
  v10[4] = a1;
  sub_1005C696C(a1, v10);
}

void sub_1005D0464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void sub_1005D0484(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v10[9];
  unsigned __int8 v11[20];
  __int128 v12;
  int v13;
  __n128 v14;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  v10[7] = v3;
  v10[8] = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12 = xmmword_10073B38C;
  v13 = 0;
  sub_100042F44(&v14, (__n128 *)&v12);
  sub_100069AFC(v11);
  v6 = sub_1004B535C(v3, (unsigned __int8 *)&v14, v11);
  v7 = v6;
  if (!v2)
    goto LABEL_8;
  v8 = (unint64_t *)&v2->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v7)
LABEL_9:
      operator new();
  }
  else
  {
LABEL_8:
    if (v6)
      goto LABEL_9;
  }
  *(_DWORD *)(a1 + 56) = 12;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1005D0A54;
  v10[3] = &unk_100917378;
  v10[4] = a1;
  sub_1005C696C(a1, v10);
}

void sub_1005D069C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);
  sub_10009F88C((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1005D06D0(uint64_t a1, __n128 *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[5];
  uint64_t v23;
  std::__shared_weak_count *v24;
  __n128 v25;
  unsigned __int32 v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  __n128 v31;
  __n128 v32;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(std::__shared_weak_count **)(a1 + 32);
  v23 = v6;
  v24 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v29 = xmmword_10073B38C;
  v30 = 0;
  sub_100042F44(&v32, (__n128 *)&v29);
  sub_100069AFC(&v31);
  v10 = sub_1004B535C(v6, (unsigned __int8 *)&v32, (unsigned __int8 *)&v31);
  v11 = v10;
  if (!v7)
    goto LABEL_8;
  v12 = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_8:
    if (v10)
      goto LABEL_9;
LABEL_19:
    a3 = 12;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v11)
    goto LABEL_19;
LABEL_9:
  v15 = *(_QWORD *)(a1 + 24);
  v14 = *(std::__shared_weak_count **)(a1 + 32);
  v23 = v15;
  v24 = v14;
  if (v14)
  {
    v16 = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v27 = xmmword_10073B38C;
  v28 = 0;
  sub_100042F44(&v32, (__n128 *)&v27);
  v25 = *a2;
  v26 = a2[1].n128_u32[0];
  sub_100042F44(&v31, &v25);
  v18 = sub_1004B535C(v15, (unsigned __int8 *)&v32, (unsigned __int8 *)&v31);
  v19 = v18;
  if (!v14)
    goto LABEL_16;
  v20 = (unint64_t *)&v14->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v19)
LABEL_17:
      operator new();
  }
  else
  {
LABEL_16:
    if (v18)
      goto LABEL_17;
  }
LABEL_20:
  *(_DWORD *)(a1 + 56) = a3;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1005D0A5C;
  v22[3] = &unk_100917378;
  v22[4] = a1;
  sub_1005C696C(a1, v22);
}

void sub_1005D09F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_10009F88C((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1005D0A4C(uint64_t a1)
{
  return sub_1005CED04(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1005D0A54(uint64_t a1)
{
  return sub_1005CED04(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1005D0A5C(uint64_t a1)
{
  return sub_1005CED04(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1005D0A64(uint64_t a1)
{
  sub_1005D0A7C(a1);
  return 0;
}

uint64_t sub_1005D0A7C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  int v14;
  __int128 v15;
  int v16;
  __n128 v17;
  __int128 v18;
  int v19;
  __n128 v20;
  int v21;

  v1 = result;
  switch(*(_DWORD *)(result + 60))
  {
    case 0:
      sub_1005D0E2C(result);
    case 1:
      sub_1005D1164(result);
    case 2:
      if (qword_1009778F8 != -1)
        dispatch_once(&qword_1009778F8, &stru_10093BD68);
      v2 = qword_1009778F0;
      v3 = *(id *)(v1 + 16);
      sub_100030BCC(&v20, v3);
      sub_1005DD030(v2, (unsigned __int8 *)&v20);

      if (!*(_BYTE *)(v1 + 58))
        goto LABEL_8;
      result = sub_1005D12A0((_QWORD *)v1);
      break;
    case 3:
LABEL_8:
      *(unsigned __int32 *)((char *)v20.n128_u32 + 3) = 0;
      v20.n128_u32[0] = 0;
      sub_100073B84((uint64_t)&v20);
      if (v20.n128_u8[0] == 1 && v20.n128_u8[1] <= 0x3Fu)
        result = sub_1005D14C0(v1);
      else
        result = sub_1005D1B3C(v1);
      break;
    case 4:
      result = sub_1005D1798(result);
      break;
    case 5:
      result = sub_1005D1B3C(result);
      break;
    case 6:
      v5 = *(_QWORD *)(result + 24);
      v4 = *(std::__shared_weak_count **)(result + 32);
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v18 = xmmword_10073B328;
      v19 = 0;
      sub_100042F44(&v20, (__n128 *)&v18);
      v15 = xmmword_10073B378;
      v16 = 0;
      sub_100042F44(&v17, (__n128 *)&v15);
      v8 = sub_1004B535C(v5, (unsigned __int8 *)&v20, (unsigned __int8 *)&v17);
      if (v4)
      {
        v9 = (unint64_t *)&v4->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if (v8
        && (v11 = *(_QWORD *)(v8 + 8),
            v12 = *(_DWORD *)(v11 + 20),
            v20 = *(__n128 *)(v11 + 4),
            v21 = v12,
            sub_100042F44(&v17, &v20),
            v14 = 0,
            v13 = xmmword_100742B80,
            sub_100072DF0((unsigned __int8 *)&v17, (unsigned __int8 *)&v13)))
      {
        result = sub_1005D1E14(v1);
      }
      else
      {
        result = sub_1005D20F8(v1);
      }
      break;
    case 7:
      result = sub_1005D20F8(result);
      break;
    case 8:
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 24))(result, 0);
      break;
    default:
      return result;
  }
  return result;
}

void sub_1005D0DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10009F88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1005D0E2C(uint64_t a1)
{
  void *v2;
  id v3;
  _BOOL4 v4;
  int v5;
  _BOOL4 v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  int v10;
  id v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  id v15;

  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093BDA8);
  v2 = off_1009778A0;
  v3 = *(id *)(a1 + 16);
  sub_100030BCC(buf, v3);
  v4 = sub_100069F08((uint64_t)v2, buf);

  v5 = *(unsigned __int16 *)(a1 + 56);
  if (*(_WORD *)(a1 + 56))
    v6 = v4;
  else
    v6 = 0;
  if (v6)
  {
    v7 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 67109378;
      v13 = v5;
      v14 = 2112;
      v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Attempting to set MTU to %u on device \"%@\"", buf, 0x12u);

    }
    operator new();
  }
  sub_1005C68BC(a1, *(_WORD *)(a1 + 56));
  v9 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(unsigned __int16 *)(a1 + 56);
    v11 = *(id *)(a1 + 16);
    *(_DWORD *)buf = 67109378;
    v13 = v10;
    v14 = 2112;
    v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Skipping MTU %u set on remote to discovering services for device \"%@\"", buf, 0x12u);

  }
  sub_1005D1164(a1);
}

void sub_1005D1044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1005D1078(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v5 = *a2;
  *a2 = 0;
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v5 = *(_QWORD *)(a1 + 64);
  }
  *(_DWORD *)(a1 + 60) = a3;
  v7 = *(id *)(a1 + 16);
  v8 = *(std::__shared_weak_count **)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_1005C66FC(v5, v7, &v14, *(_WORD *)(a1 + 40));
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

}

void sub_1005D114C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_10009F88C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1005D1164(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint8_t buf[4];
  id v5;

  v2 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(id *)(a1 + 16);
    *(_DWORD *)buf = 138412290;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Attempting to find all services on device \"%@\"", buf, 0xCu);

  }
  operator new();
}

void sub_1005D1278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D12A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;
  int v16;
  __n128 v17;
  __int128 v18;
  int v19;
  __n128 v20;
  int v21;

  v3 = a1[3];
  v2 = (std::__shared_weak_count *)a1[4];
  v13 = v3;
  v14 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v18 = xmmword_10073B314;
  v19 = 0;
  sub_100042F44(&v20, (__n128 *)&v18);
  sub_100069AFC(&v17);
  v6 = sub_1004B535C(v3, (unsigned __int8 *)&v20, (unsigned __int8 *)&v17);
  v7 = v6;
  if (!v2)
    goto LABEL_8;
  v8 = (unint64_t *)&v2->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!v7)
      goto LABEL_12;
  }
  else
  {
LABEL_8:
    if (!v6)
      goto LABEL_12;
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = *(_DWORD *)(v10 + 20);
  v20 = *(__n128 *)(v10 + 4);
  v21 = v11;
  sub_100042F44(&v17, &v20);
  v16 = 0;
  v15 = xmmword_100742B44;
  if (sub_100072DF0((unsigned __int8 *)&v17, (unsigned __int8 *)&v15))
    operator new();
LABEL_12:
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_10070B174((uint64_t)a1);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 24))(a1, 10);
}

void sub_1005D1484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D14C0(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  id v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  int v18;
  __int128 v19;
  int v20;
  __n128 v21;
  uint8_t buf[16];
  int v23;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v15 = v2;
  v16 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v19 = xmmword_10073B314;
  v20 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v19);
  sub_100069AFC(&v21);
  v6 = sub_1004B535C(v2, buf, (unsigned __int8 *)&v21);
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v7)
      goto LABEL_14;
  }
  else
  {
LABEL_8:
    if (!v6)
      goto LABEL_14;
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = *(_DWORD *)(v10 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v10 + 4);
  v23 = v11;
  sub_100042F44(&v21, (__n128 *)buf);
  v18 = 0;
  v17 = xmmword_100742B44;
  if (sub_100072DF0((unsigned __int8 *)&v21, (unsigned __int8 *)&v17))
  {
    v12 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Finding GAP reconnection characteristic handle on device \"%@\"", buf, 0xCu);

    }
    operator new();
  }
LABEL_14:
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_10070B1EC(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 10);
}

void sub_1005D173C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D1798(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unsigned __int8 v26[8];
  int v27;
  __int16 v28;
  _BYTE buf[22];
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  __n128 v34;
  __int128 v35;
  int v36;

  v28 = 0;
  v27 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v24 = v2;
  v25 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  *(_DWORD *)&v26[3] = 0;
  *(_DWORD *)v26 = 0;
  v35 = xmmword_10073B314;
  v36 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v35);
  v32 = xmmword_10073B364;
  v33 = 0;
  sub_100042F44(&v34, (__n128 *)&v32);
  v6 = sub_1004B535C(v2, buf, (unsigned __int8 *)&v34);
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v7)
      goto LABEL_16;
  }
  else
  {
LABEL_8:
    if (!v6)
      goto LABEL_16;
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = *(_DWORD *)(v10 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v10 + 4);
  *(_DWORD *)&buf[16] = v11;
  sub_100042F44(&v34, (__n128 *)buf);
  v31 = 0;
  v30 = xmmword_100742B80;
  if (sub_100072DF0(v12, (unsigned __int8 *)&v30))
  {
    sub_100073B84((uint64_t)v26);
    if (v26[0] == 1)
    {
      v13 = v26[1];
      if (v26[1] < 0x40uLL)
      {
        v14 = v26[6];
        LOBYTE(v27) = v26[6];
        v15 = v26[5];
        BYTE1(v27) = v26[5];
        v16 = v26[4];
        BYTE2(v27) = v26[4];
        v17 = v26[3];
        HIBYTE(v27) = v26[3];
        v18 = v26[2];
        LOBYTE(v28) = v26[2];
        HIBYTE(v28) = v26[1];
        v19 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          v20 = sub_100021770(v14 | (v13 << 40) | (v15 << 8) | (v16 << 16) | (v17 << 24) | (v18 << 32) | 0x1000000000000);
          v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
          v22 = *(id *)(a1 + 16);
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v21;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v22;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Writing local address \"%@\" into GAP reconnection characteristic value on device \"%@\"", buf, 0x16u);

        }
        sub_10003994C(buf, &v27, 6uLL);
        operator new();
      }
    }
    return sub_1005D1B3C(a1);
  }
LABEL_16:
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_10070B264(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 10);
}

void sub_1005D1AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D1B3C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  id v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  int v18;
  __int128 v19;
  int v20;
  __n128 v21;
  uint8_t buf[16];
  int v23;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v15 = v2;
  v16 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v19 = xmmword_10073B328;
  v20 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v19);
  sub_100069AFC(&v21);
  v6 = sub_1004B535C(v2, buf, (unsigned __int8 *)&v21);
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (!v7)
      goto LABEL_14;
  }
  else
  {
LABEL_8:
    if (!v6)
      goto LABEL_14;
  }
  v10 = *(_QWORD *)(v7 + 8);
  v11 = *(_DWORD *)(v10 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v10 + 4);
  v23 = v11;
  sub_100042F44(&v21, (__n128 *)buf);
  v18 = 0;
  v17 = xmmword_100742B44;
  if (sub_100072DF0((unsigned __int8 *)&v21, (unsigned __int8 *)&v17))
  {
    v12 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(id *)(a1 + 16);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Finding GATT service changed characteristic handle on device \"%@\"", buf, 0xCu);

    }
    operator new();
  }
LABEL_14:
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_10070B2DC(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 10);
}

void sub_1005D1DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D1E14(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  id v14;
  __int128 v16;
  int v17;
  __int128 v18;
  int v19;
  __n128 v20;
  __int128 v21;
  int v22;
  __n128 buf;
  int v24;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v21 = xmmword_10073B328;
  v22 = 0;
  sub_100042F44(&buf, (__n128 *)&v21);
  v18 = xmmword_10073B378;
  v19 = 0;
  sub_100042F44(&v20, (__n128 *)&v18);
  v6 = sub_1004B535C(v2, (unsigned __int8 *)&buf, (unsigned __int8 *)&v20);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v6)
  {
    v9 = *(_QWORD *)(v6 + 8);
    v10 = *(_DWORD *)(v9 + 20);
    buf = *(__n128 *)(v9 + 4);
    v24 = v10;
    sub_100042F44(&v20, &buf);
    v17 = 0;
    v16 = xmmword_100742B80;
    if (sub_100072DF0((unsigned __int8 *)&v20, (unsigned __int8 *)&v16))
    {
      v11 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(id *)(a1 + 16);
        buf.n128_u32[0] = 138412290;
        *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Enabling GATT service changed indications on device \"%@\"", (uint8_t *)&buf, 0xCu);

      }
      operator new();
    }
  }
  v13 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(id *)(a1 + 16);
    buf.n128_u32[0] = 138412290;
    *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Failed to locate GATT service changed characteristic handle on device \"%@\"", (uint8_t *)&buf, 0xCu);

  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 10);
}

void sub_1005D20BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D20F8(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  id v31;
  __int128 v33;
  int v34;
  __n128 v35;
  __int128 v36;
  int v37;
  __n128 v38;
  __int128 v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  __n128 v45;
  __int128 v46;
  int v47;
  __n128 buf;
  int v49;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  v38.n128_u64[0] = v2;
  v38.n128_u64[1] = (unint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v46 = xmmword_10073B4A4;
  v47 = 0;
  sub_100042F44(&buf, (__n128 *)&v46);
  sub_100069AFC(&v45);
  v6 = sub_1004B535C(v2, (unsigned __int8 *)&buf, (unsigned __int8 *)&v45);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(std::__shared_weak_count **)(a1 + 32);
  v38.n128_u64[0] = v9;
  v38.n128_u64[1] = (unint64_t)v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v43 = xmmword_10073B5E8;
  v44 = 13091918;
  sub_100042F44(&buf, (__n128 *)&v43);
  sub_100069AFC(&v45);
  v13 = sub_1004B535C(v9, (unsigned __int8 *)&buf, (unsigned __int8 *)&v45);
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(std::__shared_weak_count **)(a1 + 32);
  v38.n128_u64[0] = v16;
  v38.n128_u64[1] = (unint64_t)v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v41 = xmmword_10073B4B8;
  v42 = 0;
  sub_100042F44(&buf, (__n128 *)&v41);
  sub_100069AFC(&v45);
  v20 = sub_1004B535C(v16, (unsigned __int8 *)&buf, (unsigned __int8 *)&v45);
  if (v17)
  {
    v21 = (unint64_t *)&v17->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v6)
  {
    v23 = *(_QWORD *)(v6 + 8);
    v24 = *(_DWORD *)(v23 + 20);
    buf = *(__n128 *)(v23 + 4);
    v49 = v24;
    sub_100042F44(&v45, &buf);
    v40 = 0;
    v39 = xmmword_100742B44;
    if (sub_100072DF0(v25, (unsigned __int8 *)&v39))
      goto LABEL_31;
  }
  if (v13)
  {
    v26 = *(_QWORD *)(v13 + 8);
    v27 = *(_DWORD *)(v26 + 20);
    buf = *(__n128 *)(v26 + 4);
    v49 = v27;
    sub_100042F44(&v38, &buf);
    v37 = 0;
    v36 = xmmword_100742B44;
    if (sub_100072DF0((unsigned __int8 *)&v38, (unsigned __int8 *)&v36))
      goto LABEL_31;
  }
  if (v20)
  {
    v28 = *(_QWORD *)(v20 + 8);
    v29 = *(_DWORD *)(v28 + 20);
    buf = *(__n128 *)(v28 + 4);
    v49 = v29;
    sub_100042F44(&v35, &buf);
    v34 = 0;
    v33 = xmmword_100742B44;
    if (sub_100072DF0((unsigned __int8 *)&v35, (unsigned __int8 *)&v33))
    {
LABEL_31:
      v30 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        v31 = *(id *)(a1 + 16);
        buf.n128_u32[0] = 138412290;
        *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Reading DIS information on HID, MIDI, or GHS device \"%@\"", (uint8_t *)&buf, 0xCu);

      }
      operator new();
    }
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 0);
}

void sub_1005D24C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1005D250C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __n128 *v18;
  __n128 v19;
  unsigned __int32 *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  __n128 *v25;
  __n128 v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD v33[5];
  void *__p;
  __n128 *v35;
  char *v36;
  __int128 v37;
  int v38;
  __n128 v39;
  unsigned __int32 v40;
  __n128 v41;
  int v42;

  if (*(_QWORD *)(a1 + 64) != a2)
  {
    v6 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      sub_10070B104(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  if (*(_DWORD *)(a1 + 60) == 2)
  {
    v14 = (_QWORD *)*a4;
    if (a4[1] != *a4)
    {
      __p = 0;
      v35 = 0;
      v36 = 0;
      do
      {
        v15 = *(_QWORD *)(*v14 + 8);
        v16 = *(_DWORD *)(v15 + 20);
        v41 = *(__n128 *)(v15 + 4);
        v42 = v16;
        sub_100042F44(&v39, &v41);
        v38 = 0;
        v37 = xmmword_100742B44;
        if (sub_100072DF0((unsigned __int8 *)&v39, (unsigned __int8 *)&v37))
        {
          v17 = *v14;
          v41 = *(__n128 *)(*v14 + 72);
          v42 = *(_DWORD *)(v17 + 88);
          sub_100042F44(&v39, &v41);
          v18 = v35;
          if (v35 >= (__n128 *)v36)
          {
            v21 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v35 - (_BYTE *)__p) >> 2);
            v22 = v21 + 1;
            if (v21 + 1 > 0xCCCCCCCCCCCCCCCLL)
              abort();
            if (0x999999999999999ALL * ((v36 - (_BYTE *)__p) >> 2) > v22)
              v22 = 0x999999999999999ALL * ((v36 - (_BYTE *)__p) >> 2);
            if (0xCCCCCCCCCCCCCCCDLL * ((v36 - (_BYTE *)__p) >> 2) >= 0x666666666666666)
              v23 = 0xCCCCCCCCCCCCCCCLL;
            else
              v23 = v22;
            if (v23)
              v24 = (char *)sub_1000B58EC((uint64_t)&v36, v23);
            else
              v24 = 0;
            v25 = (__n128 *)&v24[4 * (((char *)v35 - (_BYTE *)__p) >> 2)];
            v26 = v39;
            v25[1].n128_u32[0] = v40;
            *v25 = v26;
            v28 = (char *)__p;
            v27 = (char *)v35;
            v29 = &v24[20 * v21];
            if (v35 != __p)
            {
              do
              {
                v30 = *(_OWORD *)(v27 - 20);
                *((_DWORD *)v29 - 1) = *((_DWORD *)v27 - 1);
                *(_OWORD *)(v29 - 20) = v30;
                v29 -= 20;
                v27 -= 20;
              }
              while (v27 != v28);
              v27 = (char *)__p;
            }
            v20 = &v25[1].n128_u32[1];
            __p = v29;
            v35 = (__n128 *)((char *)v25 + 20);
            v36 = &v24[20 * v23];
            if (v27)
              operator delete(v27);
          }
          else
          {
            v19 = v39;
            v35[1].n128_u32[0] = v40;
            *v18 = v19;
            v20 = &v18[1].n128_u32[1];
          }
          v35 = (__n128 *)v20;
        }
        ++v14;
      }
      while (v14 != (_QWORD *)a4[1]);
      sub_1005C6914(a1, (uint64_t)&__p);
      if (__p)
      {
        v35 = (__n128 *)__p;
        operator delete(__p);
      }
    }
  }
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_1005D2808;
  v33[3] = &unk_100917378;
  v33[4] = a1;
  sub_1005C696C(a1, v33);
  v32 = (_QWORD *)*a4;
  v31 = (_QWORD *)a4[1];
  while (v32 != v31)
  {
    if (*v32)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v32 + 8))(*v32);
      v31 = (_QWORD *)a4[1];
    }
    ++v32;
  }
}

void sub_1005D27D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D2808(uint64_t a1)
{
  return sub_1005D0A7C(*(_QWORD *)(a1 + 32));
}

void sub_1005D2810(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  sub_1005D250C(a1 - 48, a2, a3, a4);
}

void sub_1005D2818(uint64_t a1, uint64_t a2)
{
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_10093BD68);
  sub_1005E5264(qword_1009778F0, *(void **)(a1 + 16));
  sub_1005C6798(a1, a2);
}

uint64_t sub_1005D2878(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D28B0(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D28F8(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D2930(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D2978(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D29B0(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D29F8(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D2A30(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D2A78(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D2AB0(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D2AF8(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D2B30(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D2B78(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D2BB0(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D2BF8(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D2C30(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D2C78(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D2CB0(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D2CF8(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D2D30(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D2D78(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D2DB0(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D2DF8(uint64_t a1)
{
  unsigned int *v2;

  *(_QWORD *)a1 = off_10093BA38;
  *(_QWORD *)(a1 + 48) = &off_100918258;
  v2 = *(unsigned int **)(a1 + 56);
  if (v2)
    sub_100056AAC(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D2E58(uint64_t a1)
{
  unsigned int *v2;

  *(_QWORD *)a1 = off_10093BA38;
  *(_QWORD *)(a1 + 48) = &off_100918258;
  v2 = *(unsigned int **)(a1 + 56);
  if (v2)
    sub_100056AAC(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D2EC8(uint64_t a1)
{
  unsigned int *v2;

  *(_QWORD *)a1 = off_10093BA68;
  *(_QWORD *)(a1 + 48) = &off_100918258;
  v2 = *(unsigned int **)(a1 + 56);
  if (v2)
    sub_100056AAC(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D2F28(uint64_t a1)
{
  unsigned int *v2;

  *(_QWORD *)a1 = off_10093BA68;
  *(_QWORD *)(a1 + 48) = &off_100918258;
  v2 = *(unsigned int **)(a1 + 56);
  if (v2)
    sub_100056AAC(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D2F98(uint64_t a1)
{
  unsigned int *v2;

  *(_QWORD *)a1 = off_10093BA98;
  *(_QWORD *)(a1 + 48) = &off_100918258;
  v2 = *(unsigned int **)(a1 + 56);
  if (v2)
    sub_100056AAC(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D2FF8(uint64_t a1)
{
  unsigned int *v2;

  *(_QWORD *)a1 = off_10093BA98;
  *(_QWORD *)(a1 + 48) = &off_100918258;
  v2 = *(unsigned int **)(a1 + 56);
  if (v2)
    sub_100056AAC(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D3068(uint64_t a1)
{
  unsigned int *v2;

  *(_QWORD *)a1 = off_10093BAC8;
  *(_QWORD *)(a1 + 48) = &off_100918258;
  v2 = *(unsigned int **)(a1 + 56);
  if (v2)
    sub_100056AAC(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D30C8(uint64_t a1)
{
  unsigned int *v2;

  *(_QWORD *)a1 = off_10093BAC8;
  *(_QWORD *)(a1 + 48) = &off_100918258;
  v2 = *(unsigned int **)(a1 + 56);
  if (v2)
    sub_100056AAC(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D3138(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10093BAF8;
  *(_QWORD *)(a1 + 48) = &off_10093BB30;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D31B0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10093BAF8;
  *(_QWORD *)(a1 + 48) = &off_10093BB30;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D3238(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_10093BB48;
  *(_QWORD *)(a1 + 48) = &off_10093BB80;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D32C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_10093BB48;
  *(_QWORD *)(a1 + 48) = &off_10093BB80;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D3368(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_10093BB98;
  *(_QWORD *)(a1 + 48) = &off_10093BBD0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D33E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_10093BB98;
  *(_QWORD *)(a1 + 48) = &off_10093BBD0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D3478(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_10093BBE8;
  *(_QWORD *)(a1 + 48) = &off_10093BC20;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D34F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_10093BBE8;
  *(_QWORD *)(a1 + 48) = &off_10093BC20;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D3588(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;

  *(_QWORD *)a1 = off_10093BC38;
  *(_QWORD *)(a1 + 48) = &off_10093BC70;
  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)(a1 + 64) = &off_100918258;
  v3 = *(unsigned int **)(a1 + 72);
  if (v3)
    sub_100056AAC(v3);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D3608(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;

  *(_QWORD *)a1 = off_10093BC38;
  *(_QWORD *)(a1 + 48) = &off_10093BC70;
  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)(a1 + 64) = &off_100918258;
  v3 = *(unsigned int **)(a1 + 72);
  if (v3)
    sub_100056AAC(v3);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D3698(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10093BC88;
  *(_QWORD *)(a1 + 48) = &off_10093BCC0;
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D3700(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10093BC88;
  *(_QWORD *)(a1 + 48) = &off_10093BCC0;
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D3778(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10093BCD8;
  *(_QWORD *)(a1 + 48) = &off_10093BD10;
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D37E0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10093BCD8;
  *(_QWORD *)(a1 + 48) = &off_10093BD10;
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D3858(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10093BD28;
  *(_QWORD *)(a1 + 48) = &off_10093BD60;
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D38C0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10093BD28;
  *(_QWORD *)(a1 + 48) = &off_10093BD60;
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

uint64_t sub_1005D3938(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_10093B7D8;
  *(_QWORD *)(a1 + 48) = &off_10093B810;
  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = v4;
    operator delete(v4);
  }
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  return a1;
}

void sub_1005D39C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_10093B7D8;
  *(_QWORD *)(a1 + 48) = &off_10093B810;
  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = v4;
    operator delete(v4);
  }
  *(_QWORD *)a1 = off_10093B770;
  sub_10009F88C(a1 + 24);

  operator delete();
}

void sub_1005D3A68(id a1)
{
  operator new();
}

void sub_1005D3AA8()
{
  operator delete();
}

uint64_t sub_1005D3ACC(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = sub_1005C6698(a1, a2);
  *(_QWORD *)v7 = off_10093BA38;
  *(_WORD *)(v7 + 42) = a3;
  v8 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a1 + 48) = &off_100918258;
  *(_QWORD *)(a1 + 56) = v8;
  if (v8)
    sub_10003C37C(v8);
  return a1;
}

void sub_1005D3B28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1005CD324(v1);
  _Unwind_Resume(a1);
}

void sub_1005D3B3C(id a1)
{
  operator new();
}

void sub_1005D3B7C()
{
  operator delete();
}

uint64_t sub_1005D3BA0(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = sub_1005C6698(a1, a2);
  *(_QWORD *)v7 = off_10093BAC8;
  *(_WORD *)(v7 + 42) = a3;
  v8 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a1 + 48) = &off_100918258;
  *(_QWORD *)(a1 + 56) = v8;
  if (v8)
    sub_10003C37C(v8);
  return a1;
}

void sub_1005D3BFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1005CD324(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D3C10(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = sub_1005C6698(a1, a2);
  *(_QWORD *)v7 = off_10093BA98;
  *(_WORD *)(v7 + 42) = a3;
  v8 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a1 + 48) = &off_100918258;
  *(_QWORD *)(a1 + 56) = v8;
  if (v8)
    sub_10003C37C(v8);
  return a1;
}

void sub_1005D3C6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1005CD324(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D3C80(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = sub_1005C6698(a1, a2);
  *(_QWORD *)v7 = off_10093BA68;
  *(_WORD *)(v7 + 42) = a3;
  v8 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a1 + 48) = &off_100918258;
  *(_QWORD *)(a1 + 56) = v8;
  if (v8)
    sub_10003C37C(v8);
  return a1;
}

void sub_1005D3CDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1005CD324(v1);
  _Unwind_Resume(a1);
}

void sub_1005D3CF0(id a1)
{
  operator new();
}

void sub_1005D3D30()
{
  operator delete();
}

id sub_1005D3D6C(uint64_t a1, uint64_t a2)
{
  return *(id *)(a2 + 16);
}

void sub_1005D3DA0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x18u);
}

id sub_1005D3DB4(uint64_t a1)
{
  return *(id *)(a1 + 16);
}

id sub_1005D3DC4(uint64_t a1)
{
  return *(id *)(a1 + 16);
}

_QWORD *sub_1005D3DCC(_QWORD *a1)
{
  _QWORD *v2;

  v2 = sub_100091AE8(a1, "");
  *((_BYTE *)v2 + 24) = -127;
  sub_100091AE8(v2 + 4, "");
  return a1;
}

void sub_1005D3E10(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1005D3E30(std::string *__str)
{
  int v2;
  std::string *v3;
  std::string::size_type size;
  std::string *v5;
  std::string::size_type v6;
  std::string::value_type v7;
  std::string::size_type v8;
  std::string __p;
  _QWORD v10[2];

  if ((__str[1].__r_.__value_.__s.__data_[0] & 0x70) == 0x10)
  {
    sub_100091AE8(&__p, "+");
    v2 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v2 >= 0)
      v3 = __str;
    else
      v3 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v2 >= 0)
      size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      size = __str->__r_.__value_.__l.__size_;
    v5 = std::string::append(&__p, (const std::string::value_type *)v3, size);
    v6 = v5->__r_.__value_.__r.__words[0];
    v10[0] = v5->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v10 + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
    v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (__str[2].__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)__str[1].__r_.__value_.__l.__size_);
    v8 = v10[0];
    __str[1].__r_.__value_.__l.__size_ = v6;
    __str[1].__r_.__value_.__r.__words[2] = v8;
    *(std::string::size_type *)((char *)&__str[1].__r_.__value_.__r.__words[2] + 7) = *(_QWORD *)((char *)v10 + 7);
    __str[2].__r_.__value_.__s.__data_[7] = v7;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::operator=((std::string *)((char *)__str + 32), __str);
  }
}

void sub_1005D3F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D3F70(std::string *this, _BYTE *a2)
{
  _BYTE *v3;
  unsigned int v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  char v7;
  int v8;

  if (!a2)
    goto LABEL_4;
  v3 = a2;
  if (*a2 == 43)
  {
    this[1].__r_.__value_.__s.__data_[0] = -111;
    v3 = a2 + 1;
  }
  else
  {
    if (!*a2)
    {
LABEL_4:
      std::string::assign(this, "");
      this[1].__r_.__value_.__s.__data_[0] = -127;
      return;
    }
    this[1].__r_.__value_.__s.__data_[0] = -127;
  }
  std::string::assign(this, "");
  LOBYTE(v4) = *v3;
  if (*v3)
  {
    v5 = v3 + 1;
    do
    {
      if ((v4 & 0x80) != 0)
      {
        if (!__maskrune(v4, 0x100uLL))
        {
LABEL_14:
          if ((_DefaultRuneLocale.__runetype[v4] & 0x400) == 0
            && (v4 > 0x3Fu || ((1 << v4) & 0x88001C0800000000) == 0))
          {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[v4] & 0x100) == 0)
      {
        goto LABEL_14;
      }
      v6 = __toupper(v4);
      if (v6 > 0x4Fu)
      {
        if (v6 < 0x57u)
          v7 = 56;
        else
          v7 = 57;
        if (v6 >= 0x54u)
          LOBYTE(v4) = v7;
        else
          LOBYTE(v4) = 55;
      }
      else
      {
        v4 = (((86 * (char)(v6 - 65)) >> 15) & 1) + ((86 * (char)(v6 - 65)) >> 8) + 50;
      }
LABEL_24:
      std::string::push_back(this, v4);
LABEL_25:
      v8 = *v5++;
      LOBYTE(v4) = v8;
    }
    while (v8);
  }
}

std::string *sub_1005D40E0(std::string *a1, _BYTE *a2)
{
  std::string *v4;

  v4 = (std::string *)sub_100091AE8(a1, "");
  v4[1].__r_.__value_.__s.__data_[0] = -127;
  v4[1].__r_.__value_.__l.__size_ = 0;
  v4[1].__r_.__value_.__r.__words[2] = 0;
  v4[2].__r_.__value_.__r.__words[0] = 0;
  sub_1005D3F70(v4, a2);
  sub_1005D3E30(a1);
  return a1;
}

void sub_1005D413C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  sub_10070B354(v1);
  _Unwind_Resume(a1);
}

char *sub_1005D4164(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[24] = *((_BYTE *)a2 + 24);
  v5 = __dst + 32;
  if (*((char *)a2 + 55) < 0)
  {
    sub_10003430C(v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v6 = a2[2];
    *((_QWORD *)__dst + 6) = *((_QWORD *)a2 + 6);
    *(_OWORD *)v5 = v6;
  }
  return __dst;
}

void sub_1005D41E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_1005D4208(uint64_t a1)
{
  uint64_t v1;

  if (*(char *)(a1 + 23) < 0)
    v1 = *(_QWORD *)(a1 + 8);
  else
    v1 = *(unsigned __int8 *)(a1 + 23);
  return v1 == 0;
}

std::string *sub_1005D4228(std::string *this, uint64_t a2)
{
  if ((std::string *)a2 != this)
  {
    std::string::operator=(this, (const std::string *)a2);
    this[1].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 24);
    std::string::operator=((std::string *)((char *)this + 32), (const std::string *)(a2 + 32));
  }
  return this;
}

BOOL sub_1005D4270(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  if (a2 == a1)
    return 1;
  if (a1[24] != a2[24])
    return 0;
  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

char *sub_1005D4330@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[55] < 0)
    return (char *)sub_10003430C((_BYTE *)a2, *((void **)result + 4), *((_QWORD *)result + 5));
  *(_OWORD *)a2 = *((_OWORD *)result + 2);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 6);
  return result;
}

std::string *sub_1005D435C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const std::string *v3;
  int v4;
  uint64_t v6;
  std::string *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t i;
  uint64_t j;
  std::string::size_type size;
  std::string *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string *result;
  std::string v20;
  char v21[8];

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = (const std::string *)(a1 + 32);
  v4 = *(char *)(a1 + 55);
  if ((v4 & 0x80000000) == 0)
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 48);
    strcpy(v21, "()- ");
    goto LABEL_4;
  }
  sub_10003430C(a2, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  v4 = *(char *)(a1 + 55);
  strcpy(v21, "()- ");
  if ((v4 & 0x80000000) == 0)
  {
LABEL_4:
    v6 = v4;
    v7 = (std::string *)v3;
    if (!v6)
      goto LABEL_16;
    goto LABEL_5;
  }
  v7 = *(std::string **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_16;
LABEL_5:
  v8 = (unsigned __int8 *)v7 + v6;
  v9 = (unsigned __int8 *)v7;
  while (2)
  {
    for (i = 0; i != 2; ++i)
    {
      if (*v9 == asc_10082DB17[i])
      {
        if (v9 != v8 && v9 - (unsigned __int8 *)v7 != -1)
        {
          std::string::basic_string(&v20, v3, 0, v9 - (unsigned __int8 *)v7, (std::allocator<char> *)&v21[7]);
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
            operator delete(a2->__r_.__value_.__l.__data_);
          *a2 = v20;
        }
        goto LABEL_16;
      }
    }
    if (++v9 != v8)
      continue;
    break;
  }
LABEL_16:
  for (j = 0; j != 4; ++j)
  {
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v13 = a2;
    else
      v13 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = a2->__r_.__value_.__l.__size_;
    v14 = sub_10044CC00(v13, (unsigned __int8 *)v13 + size, (unsigned __int8 *)&v21[j]);
    v15 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v16 = (char)v15;
    v17 = (std::string::size_type)a2 + v15;
    if (v16 >= 0)
    {
      v18 = (std::string::size_type)a2;
    }
    else
    {
      v17 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
      v18 = a2->__r_.__value_.__r.__words[0];
    }
    result = std::string::erase(a2, (std::string::size_type)&v14[-v18], v17 - (_QWORD)v14);
  }
  return result;
}

void sub_1005D44F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_1005D4514(uint64_t a1)
{
  std::string *result;

  std::string::assign((std::string *)a1, "");
  result = std::string::assign((std::string *)(a1 + 32), "");
  *(_BYTE *)(a1 + 24) = -127;
  return result;
}

uint64_t sub_1005D4554(uint64_t result)
{
  *(_QWORD *)result = off_10093BDD8;
  *(_QWORD *)(result + 8) = off_10093BE48;
  *(_QWORD *)(result + 16) = off_10093BE88;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = result + 16;
  *(_QWORD *)(result + 64) = 0;
  return result;
}

void sub_1005D458C(uint64_t a1, uint64_t a2)
{
  sub_1005D4594(a1 + 24, a2);
}

void sub_1005D4594(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_1005D51DC(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1005D4648(uint64_t a1, uint64_t a2)
{
  sub_1002B43D4(a1 + 24, a2);
}

void sub_1005D4650()
{
  operator new();
}

void sub_1005D4694()
{
  operator delete();
}

void sub_1005D46B8()
{
  sub_1005D4650();
}

uint64_t sub_1005D46C0(uint64_t a1)
{
  uint64_t result;
  _QWORD v3[5];

  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1005D4730;
    v3[3] = &unk_100917378;
    v3[4] = result;
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
  return result;
}

uint64_t sub_1005D4730(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1005D4748(uint64_t a1)
{
  uint64_t result;
  _QWORD v3[5];

  result = *(_QWORD *)(a1 + 48);
  if (result)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1005D4730;
    v3[3] = &unk_100917378;
    v3[4] = result;
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v3);
    *(_QWORD *)(a1 + 48) = 0;
  }
  return result;
}

uint64_t sub_1005D47B8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 208))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D47C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 216))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D47D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 224))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D47E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 184))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D47F8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 192))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4808(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 200))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4818(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 152))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4828(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 160))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4838(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 168))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4848(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 176))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4858(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 240))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4868(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 256))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4878(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 64);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v2 + 32))(v2, __p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_1005D48F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D4910(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 40))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4920(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 48))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4930(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 56))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4940(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 64);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v2 + 64))(v2, __p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_1005D49BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D49D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 64);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v2 + 72))(v2, __p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_1005D4A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D4A70(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 80))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4A80(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 88))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4A90(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 96))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 64);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v8 = *(_QWORD *)(a3 + 16);
  }
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v4 + 104))(v4, a2, __p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_1005D4B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D4B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 64);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v2 + 112))(v2, __p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_1005D4BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D4BD4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 120))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4BE4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 136))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4BF4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 144))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1005D4C04(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
}

void sub_1005D4C18(os_unfair_lock_s *a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint8_t buf[16];

  v3 = a2;
  v4 = qword_100999858;
  if (os_log_type_enabled((os_log_t)qword_100999858, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'call status changed' notification to telephony listeners", buf, 2u);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005D50C4;
  v6[3] = &unk_10093BEA0;
  v7 = v3;
  v5 = v3;
  sub_1005D5008(a1 + 6, v6);

}

void sub_1005D4CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1005D4CFC(uint64_t a1, void *a2)
{
  sub_1005D4C18((os_unfair_lock_s *)(a1 - 8), a2);
}

void sub_1005D4D08(os_unfair_lock_s *a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_100999858;
  if (os_log_type_enabled((os_log_t)qword_100999858, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending 'operator status changed' notification to telephony listeners", v3, 2u);
  }
  sub_1005D5008(a1 + 6, &stru_10093BEE0);
}

void sub_1005D4D80(uint64_t a1)
{
  sub_1005D4D08((os_unfair_lock_s *)(a1 - 8));
}

void sub_1005D4D8C(os_unfair_lock_s *a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_100999858;
  if (os_log_type_enabled((os_log_t)qword_100999858, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending 'wireless technology changed' notification to telephony listeners", v3, 2u);
  }
  sub_1005D5008(a1 + 6, &stru_10093BF00);
}

void sub_1005D4E04(uint64_t a1)
{
  sub_1005D4D8C((os_unfair_lock_s *)(a1 - 8));
}

void sub_1005D4E10(os_unfair_lock_s *a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_100999858;
  if (os_log_type_enabled((os_log_t)qword_100999858, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending 'registration status changed' notification to telephony listeners", v3, 2u);
  }
  sub_1005D5008(a1 + 6, &stru_10093BF20);
}

void sub_1005D4E88(uint64_t a1)
{
  sub_1005D4E10((os_unfair_lock_s *)(a1 - 8));
}

void sub_1005D4E94(os_unfair_lock_s *a1, char a2)
{
  NSObject *v4;
  _QWORD v5[4];
  char v6;
  uint8_t buf[16];

  v4 = qword_100999858;
  if (os_log_type_enabled((os_log_t)qword_100999858, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending 'signal strength changed' notification to telephony listeners", buf, 2u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005D510C;
  v5[3] = &unk_10093BF40;
  v6 = a2;
  sub_1005D5008(a1 + 6, v5);
}

void sub_1005D4F44(uint64_t a1, char a2)
{
  sub_1005D4E94((os_unfair_lock_s *)(a1 - 8), a2);
}

void sub_1005D4F50(os_unfair_lock_s *a1, char a2)
{
  NSObject *v4;
  _QWORD v5[4];
  char v6;
  uint8_t buf[16];

  v4 = qword_100999858;
  if (os_log_type_enabled((os_log_t)qword_100999858, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending 'transmit state changed' notification to telephony listeners", buf, 2u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005D5124;
  v5[3] = &unk_10093BF40;
  v6 = a2;
  sub_1005D5008(a1 + 6, v5);
}

void sub_1005D5000(uint64_t a1, char a2)
{
  sub_1005D4F50((os_unfair_lock_s *)(a1 - 8), a2);
}

void sub_1005D5008(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1005D509C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1005D50C4(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32));
}

void sub_1005D50DC(id a1, TelephonyEventListener *a2)
{
  (*((void (**)(TelephonyEventListener *))a2->var0 + 1))(a2);
}

void sub_1005D50EC(id a1, TelephonyEventListener *a2)
{
  (*((void (**)(TelephonyEventListener *))a2->var0 + 2))(a2);
}

void sub_1005D50FC(id a1, TelephonyEventListener *a2)
{
  (*((void (**)(TelephonyEventListener *))a2->var0 + 3))(a2);
}

uint64_t sub_1005D510C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_1005D5124(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(unsigned __int8 *)(a1 + 32));
}

_QWORD *sub_1005D513C(_QWORD *a1)
{
  void *v2;

  *a1 = off_10093BDD8;
  a1[1] = off_10093BE48;
  a1[2] = off_10093BE88;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1005D5184(_QWORD *a1)
{
  void *v2;

  *a1 = off_10093BDD8;
  a1[1] = off_10093BE48;
  a1[2] = off_10093BE88;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  operator delete();
}

char *sub_1005D51DC(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1005D53E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D54C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1005D5544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1005D5684(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005D57D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005D593C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005D59F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005D5A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1005D5B24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1005D5B80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005D5C98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1005D5D5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005D5E90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005D5F28(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_100278350(a1, 14);
  sub_100321888(v1 + 256, 0, 1, 1007);
}

void sub_1005D5FE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100278464(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D6010(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10093BF70;
  v2 = a1 + 256;
  *(_QWORD *)(a1 + 256) = off_10093BFE0;
  dispatch_release(*(dispatch_object_t *)(a1 + 512));
  CFRelease(*(CFTypeRef *)(a1 + 520));

  sub_1003219A8(v2);
  return sub_100278464(a1);
}

void sub_1005D6070(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1003219A8(v2);
  sub_100278464(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D6098(uint64_t a1)
{
  return sub_1005D6010(a1 - 256);
}

void sub_1005D60A0(uint64_t a1)
{
  sub_1005D6010(a1);
  operator delete();
}

void sub_1005D60C4(uint64_t a1)
{
  sub_1005D6010(a1 - 256);
  operator delete();
}

uint64_t sub_1005D60EC(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  v2 = (_BYTE *)(a1 + 504);
  *(_BYTE *)(a1 + 504) = 1;
  v5 = 0;
  sub_100043758(&v5);
  if (sub_10023E274((uint64_t)sub_1005D6294, (uint64_t)off_10093C030, 0x3EFu, 0x3B01u, v2, (uint64_t)&unk_10093C058))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_10070B428();
LABEL_10:
    v3 = 1;
    goto LABEL_11;
  }
  *(_QWORD *)&v8 = &unk_10093C088;
  WORD4(v8) = 3;
  *(_QWORD *)&v9 = &unk_10093C000;
  WORD4(v9) = 1;
  *(_QWORD *)&v6 = &unk_10093C0D0;
  WORD4(v6) = 3;
  *(_QWORD *)&v7 = &unk_10093C018;
  WORD4(v7) = 1;
  byte_100993450 = 1;
  word_100993452 = 1;
  dword_100993458 = *(unsigned __int8 *)(a1 + 504);
  if (sub_1002465CC((uint64_t)&v8, (int *)(a1 + 496)))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_10070B3C8();
    goto LABEL_10;
  }
  v3 = sub_1002465CC((uint64_t)&v6, (int *)(a1 + 500));
  if ((_DWORD)v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_10070B368();
    goto LABEL_10;
  }
LABEL_11:
  sub_100043728(&v5);
  return v3;
}

void sub_1005D6280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_1005D6294(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (qword_10097B828 != -1)
    dispatch_once(&qword_10097B828, &stru_10093C268);
  sub_1005D681C(off_10097B820, a1, a4);
}

uint64_t sub_1005D62EC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v12 = 0;
  sub_100043758(&v12);
  sub_1002467B8(*(_DWORD *)(a1 + 496));
  sub_1002467B8(*(_DWORD *)(a1 + 500));
  if (sub_10023E540(*(unsigned __int8 *)(a1 + 504)) == 101)
  {
    v2 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_10070B488(v2, v3, v4, v5, v6, v7, v8, v9);
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  sub_100043728(&v12);
  return v10;
}

void sub_1005D637C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D6394(uint64_t a1)
{
  sub_10032251C(a1 + 256);
  return 0;
}

uint64_t sub_1005D63B0(uint64_t a1, unint64_t a2)
{
  int v4;
  _OWORD *v5;
  _OWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  void **v15;
  const char *v16;
  void *v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  void *__p[2];
  char v24;
  _BYTE buf[18];
  __int16 v26;
  const char *v27;

  if (a2)
  {
    v21 = unk_10093C128;
    v22 = unk_10093C118;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v4 = sub_1004442A0(a2, (uint64_t)&v21, 4u, &v18);
    if ((v4 & 1) != 0 || sub_1004442A0(a2, (uint64_t)&v22, 4u, &v18))
    {
      v6 = v18;
      v5 = v19;
      if (v18 != v19)
      {
        v7 = v18;
        while (1)
        {
          if (*(_BYTE *)v7 == 6 && *((_WORD *)v7 + 1) == 2)
          {
            v9 = v7[1];
            v10 = *(_BYTE *)v9 == 3 && *(_DWORD *)(v9 + 8) == 3;
            if (v10 && *(_BYTE *)(v9 + 16) == 1)
              break;
          }
          v7 += 2;
          if (v7 == (_QWORD *)v19)
          {
            v11 = -1;
            goto LABEL_26;
          }
        }
        v11 = *(_DWORD *)(v9 + 24);
LABEL_26:
        while (v6 != v5)
        {
          *(_OWORD *)buf = *v6;
          sub_1002C3FB4(buf);
          ++v6;
          v5 = v19;
        }
        if (v11 != -1)
        {
          v14 = qword_1009997D8;
          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a2, __p);
            if (v24 >= 0)
              v15 = __p;
            else
              v15 = (void **)__p[0];
            v16 = "Old WiAP UUID";
            *(_DWORD *)buf = 136446722;
            if (v4)
              v16 = "New WiAP UUID";
            *(_QWORD *)&buf[4] = v15;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v11;
            v26 = 2082;
            v27 = v16;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Initiating outgoing Wireless IAP connection request to device %{public}s on rfcomm channel %d, %{public}s", buf, 0x1Cu);
            if (v24 < 0)
              operator delete(__p[0]);
          }
          LOBYTE(__p[0]) = 0;
          sub_100043758(__p);
          *(_WORD *)buf = 0;
          if (sub_10023E88C((uint64_t)sub_1005D672C, off_10093C030, a2 + 128, v11, 0x3EFu, 0x3B01u, buf, (uint64_t)&unk_10093C058))
          {
            if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
              sub_10070B54C();
            v12 = 305;
          }
          else
          {
            sub_1004820E0(a1, a2, *(__int16 *)buf);
            v12 = 0;
          }
          sub_100043728(__p);
          goto LABEL_45;
        }
      }
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_10070B520();
    }
    else
    {
      v13 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(a2, buf);
        sub_10070B5AC(buf, (uint64_t)__p, v13);
      }
    }
    v12 = 305;
LABEL_45:
    if (v18)
    {
      v19 = v18;
      operator delete(v18);
    }
    return v12;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_10070B4F4();
  return 1;
}

void sub_1005D66E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D672C(int a1, uint64_t a2, uint64_t a3)
{
  if (qword_10097B828 != -1)
    dispatch_once(&qword_10097B828, &stru_10093C268);
  sub_1005D6A88(off_10097B820, a1, a3);
}

uint64_t sub_1005D6784(_QWORD *a1, unint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  char v5;

  v2 = sub_1004821D4(a1, a2);
  v5 = 0;
  sub_100043758(&v5);
  v3 = sub_10023EEBC(v2, 1818);
  if ((_DWORD)v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006FD130();
    v3 = 1;
  }
  sub_100043728(&v5);
  return v3;
}

void sub_1005D6808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_1005D681C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  int v8;
  void **v9;
  int v10;
  void **v11;
  NSObject *v12;
  int v13;
  char v14;
  NSObject *v15;
  void *__p[2];
  char v17;
  uint8_t buf[4];
  void **v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unsigned int v23;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093C208);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v19) = *(_WORD *)(a2 + 4);
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v7 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v6, __p);
    v8 = v17;
    v9 = (void **)__p[0];
    v10 = sub_1004821D4(a1, v6);
    v11 = __p;
    *(_DWORD *)buf = 136446722;
    if (v8 < 0)
      v11 = v9;
    v19 = v11;
    v20 = 1024;
    v21 = v10;
    v22 = 1024;
    v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received incoming connection attempt from device %{public}s getHandleForDevice %d, linkHandle %d", buf, 0x18u);
    if (v17 < 0)
      operator delete(__p[0]);
  }
  if (sub_100481EC8((uint64_t)a1, v6) && !sub_1004821D4(a1, v6))
  {
    v13 = sub_10023EB7C((uint64_t)sub_1005D672C, a3, 1);
    if (!v13)
    {
      sub_1004820E0((uint64_t)a1, v6, a3);
      sub_1004816DC(a1, v6);
    }
    v14 = 1;
    goto LABEL_14;
  }
  v12 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Denying connection attempt", buf, 2u);
  }
  v13 = sub_10023EB7C((uint64_t)sub_1005D672C, a3, 0);
  if (v13)
  {
    v14 = 0;
LABEL_14:
    v15 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_10070B614(v14, v13, v15);
  }
}

void sub_1005D6A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005D6A88(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  void **v9;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  void **v13;
  __int16 v14;
  int v15;

  v5 = sub_1004822D0(a1, a2);
  if (v5)
  {
    v6 = v5;
    if ((_DWORD)a3)
    {
      v7 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v6, __p);
        v9 = v11 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        v13 = v9;
        v14 = 1024;
        v15 = a3;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Connection to device %{public}s failed - result was %{bluetooth:OI_STATUS}u", buf, 0x12u);
        if (v11 < 0)
          operator delete(__p[0]);
      }
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_10093C228);
      v8 = sub_1004A35C0((uint64_t)off_100977A50, a3, 20000);
      sub_10048183C((uint64_t)a1, v6, v8);
    }
    sub_10048183C((uint64_t)a1, v5, 0);
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_10070B6B0();
}

_BYTE *sub_1005D6D8C(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  const char *v6;
  CFStringRef v7;
  void *Connection;
  void *Endpoint;
  NSObject *v10;
  CFNumberRef v11;
  iapUUID *v12;
  void *v13;
  void *v14;
  _QWORD v16[5];
  _QWORD v17[6];
  char v18;
  _BYTE __p[12];
  __int16 v20;
  void *v21;
  char v22;

  v2 = *(_QWORD *)(a1 + 32);
  v18 = 0;
  sub_100043758(&v18);
  v4 = *(unsigned __int16 *)(a1 + 40);
  v3 = (unsigned __int16 *)(a1 + 40);
  v5 = sub_1004822D0((_QWORD *)v2, v4);
  sub_10004339C(&v18);
  if (v5)
  {
    sub_10046E9BC((unsigned __int8 *)(v5 + 128), __p);
    if (v22 >= 0)
      v6 = __p;
    else
      v6 = *(const char **)__p;
    v7 = CFStringCreateWithCString(kCFAllocatorDefault, v6, 0x600u);
    if (v22 < 0)
      operator delete(*(void **)__p);
    Connection = (void *)acc_transportClient_createConnection(2, v7);
    if (v7)
      CFRelease(v7);
    if (Connection)
    {
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1005D710C;
      v17[3] = &unk_100921128;
      v17[4] = v2;
      v17[5] = v5;
      Endpoint = (void *)acc_transportClient_createEndpoint(Connection, 2, 0, 0, v17, 1);
      v10 = qword_1009997D8;
      if (Endpoint)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 138412546;
          *(_QWORD *)&__p[4] = Connection;
          v20 = 2112;
          v21 = Endpoint;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[iAP CONNECTED] CONNUUID: %@ and ENDPOINTUUID: %@", __p, 0x16u);
        }
        v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, v3);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v2 + 520), Connection, v11);
        CFRelease(v11);
        v12 = objc_opt_new(iapUUID);
        -[iapUUID setConnectionUUID:](v12, "setConnectionUUID:", Connection);

        -[iapUUID setEndpointUUID:](v12, "setEndpointUUID:", Endpoint);
        v13 = *(void **)(v2 + 528);
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *v3));
        objc_msgSend(v13, "setObject:forKey:", v12, v14);

        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        v16[2] = sub_1005D7160;
        v16[3] = &unk_100917378;
        v16[4] = v2;
        if (qword_100993460 != -1)
          dispatch_once(&qword_100993460, v16);

      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
          sub_10070B7B4();
        sub_10006D81C(&v18);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 80))(v2, v5);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_10070B788();
      sub_10006D81C(&v18);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 80))(v2, v5);
    }
  }
  return sub_100043728(&v18);
}

void sub_1005D7094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  void *v30;

  sub_100043728(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D710C(uint64_t a1, int a2, int a3, CFDataRef theData)
{
  unint64_t v5;
  uint64_t v6;
  const UInt8 *BytePtr;
  int Length;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32) + 256;
  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  return sub_100322608(v6, v5, (uint64_t)BytePtr, Length, 1);
}

uint64_t sub_1005D7160(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[5];

  v1 = *(_QWORD *)(a1 + 32);
  acc_transportClient_setConnectionAuthStatusDidChangeHandler(&stru_10093C158);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1005D747C;
  v3[3] = &unk_10093C178;
  v3[4] = v1;
  return acc_transportClient_setEndpointPropertiesDidChangeHandler(v3);
}

void sub_1005D71C8(id a1, __CFString *a2, BOOL a3)
{
  _BOOL8 v3;
  NSObject *v5;
  int v6;
  __CFString *v7;

  v3 = a3;
  v5 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138412290;
    v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "acc_transportClient_setConnectionAuthStatusDidChangeHandler - connUID:%@", (uint8_t *)&v6, 0xCu);
  }
  if (qword_10097B828 != -1)
    dispatch_once(&qword_10097B828, &stru_10093C268);
  sub_1005D72B0(off_10097B820, (uint64_t)a2, v3);
}

void sub_1005D72B0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  const __CFDictionary *v13;
  int v14;
  uint64_t v15;

  v6 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 138412290;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "authStatusDidChange - connUUID: %@", (uint8_t *)&v14, 0xCu);
  }
  v7 = sub_1005D7D94((uint64_t)a1, a2);
  v8 = sub_1004822D0(a1, v7);
  if (v8)
  {
    v9 = (void *)a1[66];
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v7));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "endpointUUID"));
    v13 = (const __CFDictionary *)acc_transportClient_copyPropertiesForEndpointWithUUID();

    if (v13)
    {
      LOBYTE(v14) = 0;
      if (sub_1005D7EB4(v13, &v14))
      {
        if (qword_10097B1B0 != -1)
          dispatch_once(&qword_10097B1B0, &stru_10093C288);
        (*(void (**)(void *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)off_10097B1A8 + 240))(off_10097B1A8, v8, a3, v14);
      }
      CFRelease(v13);
    }

  }
}

void sub_1005D7448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1005D747C(uint64_t a1, uint64_t a2, const __CFDictionary *a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;

  if (sub_1005D7530(*(_QWORD *)(a1 + 32), a2))
  {
    if (qword_10097B828 != -1)
      dispatch_once(&qword_10097B828, &stru_10093C268);
    sub_1005D75D0(off_10097B820, v9, a3, a4, a5);
  }
  else
  {
    v10 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_10070B7E0(a2, v10, v11);
  }
}

uint64_t sub_1005D7530(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int16 v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  if (a2)
  {
    v2 = *(NSObject **)(a1 + 512);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005D7FE8;
    block[3] = &unk_100918690;
    block[5] = a1;
    block[6] = a2;
    block[4] = &v6;
    dispatch_sync(v2, block);
    v3 = *((unsigned __int16 *)v7 + 12);
  }
  else
  {
    v3 = 0;
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t sub_1005D75D0(_QWORD *a1, uint64_t a2, const __CFDictionary *a3, const __CFDictionary *a4, uint64_t a5)
{
  int v9;
  uint64_t result;
  uint64_t v11;
  unsigned __int8 v12;

  v9 = sub_1005D7D94((uint64_t)a1, a5);
  result = sub_1004822D0(a1, v9);
  if (a3)
  {
    v11 = result;
    if (result)
    {
      result = acc_transportClient_isConnectionAuthenticated(a5);
      if ((_DWORD)result)
      {
        result = (uint64_t)sub_1005D7EB4(a4, 0);
        if ((result & 1) == 0)
        {
          v12 = 0;
          result = (uint64_t)sub_1005D7EB4(a3, &v12);
          if ((_DWORD)result)
          {
            if (qword_10097B1B0 != -1)
              dispatch_once(&qword_10097B1B0, &stru_10093C288);
            return (*(uint64_t (**)(void *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)off_10097B1A8 + 240))(off_10097B1A8, v11, 1, v12);
          }
        }
      }
    }
  }
  return result;
}

void sub_1005D76A0(_QWORD *a1, int a2)
{
  __int16 v2;
  unsigned __int8 *v4;
  NSObject *v5;
  _QWORD v6[5];
  __int16 v7;
  int v8;
  int v9;
  uint64_t v10;

  v2 = a2;
  v4 = (unsigned __int8 *)sub_1004822D0(a1, a2);
  sub_10048257C((uint64_t)a1, (uint64_t)v4, 0);
  if (v4)
  {
    v10 = 0;
    v9 = 0;
    v8 = 0;
    sub_100444BF0((uint64_t)v4, (_DWORD *)&v10 + 1, &v10, &v9, &v8);
    if ((_DWORD)v10 == 7563 && (v9 & 0xFFFFFFFD) == 0xC008)
    {
      if (qword_100977B40 != -1)
        dispatch_once(&qword_100977B40, &stru_10093C248);
      sub_1004BA540((uint64_t)off_100977B38, 0, ((unint64_t)v4[128] << 40) | ((unint64_t)v4[129] << 32) | ((unint64_t)v4[130] << 24) | ((unint64_t)v4[131] << 16) | ((unint64_t)v4[132] << 8) | v4[133]);
    }
  }
  sub_1003222D0((uint64_t)(a1 + 32), (uint64_t)v4);
  v5 = a1[64];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005D77F0;
  v6[3] = &unk_100920960;
  v6[4] = a1;
  v7 = v2;
  dispatch_async(v5, v6);
}

void sub_1005D77F0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  __CFDictionary *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 528);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 40)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v4));

  v6 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "connectionUUID"));
    v13 = 138412290;
    v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[iAP DISCONNECTED] connectionUUID: %@", (uint8_t *)&v13, 0xCu);

  }
  if (v5)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "connectionUUID"));
    acc_transportClient_destroyConnection(v8);

    v9 = *(__CFDictionary **)(v2 + 520);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "connectionUUID"));
    CFDictionaryRemoveValue(v9, v10);

    v11 = *(void **)(v2 + 528);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 40)));
    objc_msgSend(v11, "removeObjectForKey:", v12);

  }
}

void sub_1005D7958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005D79A4(_QWORD *a1, int a2, const UInt8 *a3, unsigned int a4)
{
  __int16 v6;
  CFDataRef v8;
  NSObject *v9;
  _QWORD block[6];
  __int16 v11;

  v6 = a2;
  if (sub_1004822D0(a1, a2))
  {
    v8 = CFDataCreate(kCFAllocatorDefault, a3, a4);
    v9 = a1[64];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005D7A6C;
    block[3] = &unk_1009186D0;
    v11 = v6;
    block[4] = a1;
    block[5] = v8;
    dispatch_async(v9, block);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_10070B84C();
  }
}

void sub_1005D7A6C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char v7;
  const void *v8;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 528);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 48)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v3));

  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "endpointUUID"));
  v7 = acc_transportClient_processIncomingData(v5, v6);

  v8 = *(const void **)(a1 + 40);
  if (v8)
    CFRelease(v8);
  if ((v7 & 1) == 0 && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_10070B878();

}

void sub_1005D7B2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1005D7B54(_QWORD *a1, int a2)
{
  unint64_t v3;

  v3 = sub_1004822D0(a1, a2);
  if (v3)
  {
    sub_10032280C((uint64_t)(a1 + 32), v3);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_10070B8A4();
  }
}

BOOL sub_1005D7BB4(_QWORD *a1, unint64_t a2, char *a3, int a4)
{
  NSObject *v8;
  unsigned int v9;
  int v10;
  _DWORD v12[2];

  v8 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_INFO))
  {
    v12[0] = 67109120;
    v12[1] = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Sending %d bytes of WiAP data to stack", (uint8_t *)v12, 8u);
  }
  v9 = sub_1004821D4(a1, a2);
  LOBYTE(v12[0]) = 0;
  sub_100043758(v12);
  v10 = sub_10023E880((uint64_t)sub_1005D7CFC, v9, a3, (unsigned __int16)a4);
  if (v10 && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_10070B8D0();
  sub_100043728(v12);
  return v10 == 0;
}

void sub_1005D7CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_100043728(&a9);
  _Unwind_Resume(a1);
}

void sub_1005D7CFC(int a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_10070B930();
  if (qword_10097B828 != -1)
    dispatch_once(&qword_10097B828, &stru_10093C268);
  sub_1005D7B54(off_10097B820, a1);
}

BOOL sub_1005D7D8C(uint64_t a1, unint64_t a2, char *a3, int a4)
{
  return sub_1005D7BB4((_QWORD *)(a1 - 256), a2, a3, a4);
}

uint64_t sub_1005D7D94(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  _QWORD block[7];
  __int128 buf;
  uint64_t v9;
  __int16 v10;

  v4 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "getLinkForConnectionUUID - connectionUUID: %@", (uint8_t *)&buf, 0xCu);
  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v9 = 0x2020000000;
  v10 = 0;
  if (a2)
  {
    v5 = *(NSObject **)(a1 + 512);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005D7F14;
    block[3] = &unk_100918690;
    block[5] = a1;
    block[6] = a2;
    block[4] = &buf;
    dispatch_sync(v5, block);
    a2 = *(unsigned __int16 *)(*((_QWORD *)&buf + 1) + 24);
  }
  _Block_object_dispose(&buf, 8);
  return a2;
}

const __CFDictionary *sub_1005D7EB4(const __CFDictionary *result, _BYTE *a2)
{
  int valuePtr;

  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, kCFACCProperties_Endpoint_Bluetooth_HIDFunction);
    valuePtr = 0;
    if (result)
    {
      result = (const __CFDictionary *)CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
      if ((_DWORD)result)
      {
        if (a2)
          *a2 = valuePtr;
        return (const __CFDictionary *)1;
      }
    }
  }
  return result;
}

void sub_1005D7F14(uint64_t a1)
{
  const __CFNumber *Value;
  NSObject *v3;
  int v4;
  const __CFNumber *v5;

  Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 520), *(const void **)(a1 + 48));
  v3 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 138412290;
    v5 = Value;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "getLinkForConnectionUUID - linkCF: %@", (uint8_t *)&v4, 0xCu);
  }
  if (Value)
    CFNumberGetValue(Value, kCFNumberSInt16Type, (void *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

void sub_1005D7FE8(_QWORD *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  const __CFNumber *v7;
  void *v8;
  const __CFString *v9;
  __CFString *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v2 = a1[5];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = *(id *)(v2 + 528);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v3);
        v7 = *(const __CFNumber **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 528), "objectForKeyedSubscript:", v7, (_QWORD)v11));
        v9 = (const __CFString *)a1[6];
        v10 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "endpointUUID"));
        LODWORD(v9) = CFStringCompare(v9, v10, 0) == kCFCompareEqualTo;

        if ((_DWORD)v9)
          CFNumberGetValue(v7, kCFNumberSInt16Type, (void *)(*(_QWORD *)(a1[4] + 8) + 24));

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }

}

void sub_1005D8144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1005D8180()
{
  return 5;
}

void sub_1005D8188(int a1)
{
  if (qword_10097B828 != -1)
    dispatch_once(&qword_10097B828, &stru_10093C268);
  sub_1005D76A0(off_10097B820, a1);
}

void sub_1005D81E0(int a1, const UInt8 *a2, unsigned int a3)
{
  if (qword_10097B828 != -1)
    dispatch_once(&qword_10097B828, &stru_10093C268);
  sub_1005D79A4(off_10097B820, a1, a2, a3);
}

void sub_1005D8248(id a1)
{
  operator new();
}

void sub_1005D8288()
{
  operator delete();
}

void sub_1005D82AC(id a1)
{
  operator new();
}

void sub_1005D82EC()
{
  operator delete();
}

void sub_1005D8310(id a1)
{
  operator new();
}

void sub_1005D8428()
{
  operator delete();
}

void sub_1005D844C(id a1)
{
  operator new();
}

void sub_1005D848C()
{
  operator delete();
}

void sub_1005D84B0(id a1)
{
  operator new();
}

void sub_1005D84F0()
{
  operator delete();
}

uint64_t sub_1005D8514(uint64_t a1)
{
  *(_QWORD *)sub_10048D2F0(a1, "WiAPSinkService", 0x20000) = &off_10093C2B8;
  if (qword_10097B838 != -1)
    dispatch_once(&qword_10097B838, &stru_10093C3E8);
  sub_10048D5B0(a1, (uint64_t)off_10097B830);
  return a1;
}

void sub_1005D8588(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048D3E0(v1);
  _Unwind_Resume(a1);
}

void sub_1005D85A4(uint64_t a1)
{
  sub_10048D3E0(a1);
  operator delete();
}

uint64_t sub_1005D85D0(uint64_t a1, uint64_t a2)
{
  if (qword_10097B838 != -1)
    dispatch_once(&qword_10097B838, &stru_10093C3E8);
  return (*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)off_10097B830 + 32) + 16))((char *)off_10097B830 + 256, a2);
}

void sub_1005D862C(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  int v6;
  int v7;
  char *v8;
  NSObject *v9;
  NSObject *v10;
  unsigned int v11;
  __int128 v12;
  uint8_t v13;
  char v14[15];
  uint8_t v15;
  char v16[7];
  void *__p;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v20 = unk_10093C3B8;
  v21 = unk_10093C3A8;
  __p = 0;
  v18 = 0;
  v19 = 0;
  if (!sub_100444790(a2))
  {
    v7 = 0;
    goto LABEL_22;
  }
  v4 = sub_100442444(a2, &v21, 4u);
  v5 = sub_100442444(a2, &v20, 4u);
  v6 = v5;
  if (!v4 && !v5)
  {
    v7 = 1;
    goto LABEL_22;
  }
  if (v4)
  {
    if ((sub_1004442A0(a2, (uint64_t)&v21, 0x301u, &__p) & 1) != 0)
      goto LABEL_11;
  }
  else if (v5)
  {
    v6 = sub_1004442A0(a2, (uint64_t)&v20, 0x301u, &__p);
  }
  if (!v6)
    goto LABEL_21;
LABEL_11:
  v8 = (char *)__p;
  if (__p == v18)
    goto LABEL_21;
  while (1)
  {
    if (*v8 != 1)
    {
      v10 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_10070B990(&v15, v16, v10);
      goto LABEL_18;
    }
    if (*((_WORD *)v8 + 1) == 4)
      break;
    v9 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_10070B990(&v13, v14, v9);
LABEL_18:
    v8 += 16;
    if (v8 == v18)
      goto LABEL_21;
  }
  sub_10044A254(a2, *((_DWORD *)v8 + 2));
LABEL_21:
  v7 = 4;
LABEL_22:
  v11 = *(_DWORD *)(a1 + 32);
  v22 = 0;
  sub_10004AD30((uint64_t)&v22);
  *(_QWORD *)&v12 = (int)v22;
  *((_QWORD *)&v12 + 1) = SWORD2(v22);
  sub_1004415B0(a2, v11, v7, &v12, 0);
  if (__p)
  {
    v18 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1005D881C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D8844(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint8x8_t v5;
  uint64_t result;
  uint8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  __int128 v10;
  __int128 v11;
  int v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[15];

  v13 = 0;
  v12 = 0;
  v17 = xmmword_10073BB80;
  memset(v18, 0, sizeof(v18));
  v10 = unk_10093C3D8;
  v11 = unk_10093C3C8;
  v15 = xmmword_100742CB0;
  v16 = xmmword_10073BB90;
  v14 = xmmword_100742CC0;
  *a3 = 0;
  if (sub_100452168(a2, v18, &v13)
    && v13
    && ((result = sub_10018F9EC((unsigned __int8 *)v18, (uint64_t)&v17, &v12, v5), !(_DWORD)result)
     || (result = sub_10018F9EC((unsigned __int8 *)v18, (uint64_t)&v16, &v12, v7), !(_DWORD)result)
     || (result = sub_10018F9EC((unsigned __int8 *)v18, (uint64_t)&v15, &v12, v8), !(_DWORD)result)
     || (result = sub_10018F9EC((unsigned __int8 *)v18, (uint64_t)&v14, &v12, v9), !(_DWORD)result))
    || (result = sub_100444790(a2), (_DWORD)result)
    && ((result = sub_100442444(a2, &v11, 4u), (result & 1) != 0)
     || (result = sub_100442444(a2, &v10, 4u), (_DWORD)result)))
  {
    *a3 = 1;
  }
  return result;
}

void sub_1005D89CC(id a1)
{
  operator new();
}

void sub_1005D8A0C()
{
  operator delete();
}

uint64_t sub_1005D8A30(uint64_t a1)
{
  *(_QWORD *)sub_10048D2F0(a1, "WiAPService", 128) = &off_10093C418;
  if (qword_10097B828 != -1)
    dispatch_once(&qword_10097B828, &stru_10093C528);
  sub_10048D5B0(a1, (uint64_t)off_10097B820);
  return a1;
}

void sub_1005D8AA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048D3E0(v1);
  _Unwind_Resume(a1);
}

void sub_1005D8AC0(uint64_t a1)
{
  sub_10048D3E0(a1);
  operator delete();
}

uint64_t sub_1005D8AEC(uint64_t a1, uint64_t a2)
{
  if (qword_10097B828 != -1)
    dispatch_once(&qword_10097B828, &stru_10093C528);
  return (*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)off_10097B820 + 32) + 16))((char *)off_10097B820 + 256, a2);
}

void sub_1005D8B48(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  int v6;
  int v7;
  char *v8;
  NSObject *v9;
  NSObject *v10;
  unsigned int v11;
  __int128 v12;
  uint8_t v13;
  char v14[15];
  uint8_t v15;
  char v16[7];
  void *__p;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v20 = unk_10093C518;
  v21 = unk_10093C508;
  __p = 0;
  v18 = 0;
  v19 = 0;
  if (!sub_100444790(a2))
  {
    v7 = 0;
    goto LABEL_22;
  }
  v4 = sub_100442444(a2, &v21, 4u);
  v5 = sub_100442444(a2, &v20, 4u);
  v6 = v5;
  if (!v4 && !v5)
  {
    sub_10044B0E8(a2, 0);
    v7 = 1;
    goto LABEL_22;
  }
  if (v4)
  {
    sub_10044B0E8(a2, 1u);
    if ((sub_1004442A0(a2, (uint64_t)&v21, 0x301u, &__p) & 1) != 0)
      goto LABEL_11;
  }
  else if (v5)
  {
    sub_10044B0E8(a2, 2u);
    v6 = sub_1004442A0(a2, (uint64_t)&v20, 0x301u, &__p);
  }
  if (!v6)
    goto LABEL_21;
LABEL_11:
  v8 = (char *)__p;
  if (__p == v18)
    goto LABEL_21;
  while (1)
  {
    if (*v8 != 1)
    {
      v10 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_10070B990(&v15, v16, v10);
      goto LABEL_18;
    }
    if (*((_WORD *)v8 + 1) == 4)
      break;
    v9 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_10070B990(&v13, v14, v9);
LABEL_18:
    v8 += 16;
    if (v8 == v18)
      goto LABEL_21;
  }
  sub_10044A254(a2, *((_DWORD *)v8 + 2));
LABEL_21:
  v7 = 4;
LABEL_22:
  v11 = *(_DWORD *)(a1 + 32);
  v22 = 0;
  sub_10004AD30((uint64_t)&v22);
  *(_QWORD *)&v12 = (int)v22;
  *((_QWORD *)&v12 + 1) = SWORD2(v22);
  sub_1004415B0(a2, v11, v7, &v12, 0);
  if (__p)
  {
    v18 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1005D8D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005D8D84(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint8x8_t v5;
  uint64_t result;
  uint8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  __int128 v10;
  __int128 v11;
  int v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[15];

  v13 = 0;
  v12 = 0;
  v17 = xmmword_10073BB80;
  memset(v18, 0, sizeof(v18));
  v10 = unk_10093C518;
  v11 = unk_10093C508;
  v15 = xmmword_100742CD0;
  v16 = xmmword_10073BB90;
  v14 = xmmword_100742CC0;
  *a3 = 0;
  if (sub_100452168(a2, v18, &v13)
    && v13
    && ((result = sub_10018F9EC((unsigned __int8 *)v18, (uint64_t)&v17, &v12, v5), !(_DWORD)result)
     || (result = sub_10018F9EC((unsigned __int8 *)v18, (uint64_t)&v16, &v12, v7), !(_DWORD)result)
     || (result = sub_10018F9EC((unsigned __int8 *)v18, (uint64_t)&v15, &v12, v8), !(_DWORD)result)
     || (result = sub_10018F9EC((unsigned __int8 *)v18, (uint64_t)&v14, &v12, v9), !(_DWORD)result))
    || (result = sub_100444790(a2), (_DWORD)result)
    && ((result = sub_100442444(a2, &v11, 4u), (result & 1) != 0)
     || (result = sub_100442444(a2, &v10, 4u), (_DWORD)result)))
  {
    *a3 = 1;
  }
  return result;
}

void sub_1005D8F0C(id a1)
{
  operator new();
}

void sub_1005D8F4C()
{
  operator delete();
}

uint64_t sub_1005D8F70(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  v8 = (_QWORD *)sub_1002D3720(a1, 1952539500);
  *v8 = &off_10093C558;
  sub_1004127B8((uint64_t)(v8 + 50), a2, a3);
  *(_QWORD *)(a1 + 776) = a4;
  *(_BYTE *)(a1 + 784) = 0;
  return a1;
}

void sub_1005D8FD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002D383C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D8FEC(_QWORD *a1)
{
  *a1 = &off_10093C558;
  sub_100412810((uint64_t)(a1 + 50));
  return sub_1002D383C((uint64_t)a1);
}

void sub_1005D9020(_QWORD *a1)
{
  *a1 = &off_10093C558;
  sub_100412810((uint64_t)(a1 + 50));
  sub_1002D383C((uint64_t)a1);
  operator delete();
}

uint64_t sub_1005D9068(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 600);
}

void sub_1005D9070(uint64_t a1, char *__s1, const __CFBoolean *a3)
{
  void (*v6)(void);
  _BOOL8 v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  CFNumberRef v18;
  unsigned int v19;
  CFNumberRef number;
  CFBooleanRef BOOLean;
  void *value;
  void *valuePtr;
  __int16 v24;
  id v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;

  if (!strcmp(__s1, "kBTAudioMsgPropertyGameOn"))
  {
    CFBooleanGetValue(a3);
    v6 = *(void (**)(void))(**(_QWORD **)(a1 + 776) + 48);
LABEL_26:
    v6();
    return;
  }
  if (!strcmp(__s1, "kBTAudioMsgPropertyExpanseOn"))
  {
    CFBooleanGetValue(a3);
    v6 = *(void (**)(void))(**(_QWORD **)(a1 + 776) + 56);
    goto LABEL_26;
  }
  if (!strcmp(__s1, "kBTAudioMsgPropertyVoiceOverOn"))
  {
    CFBooleanGetValue(a3);
    v6 = *(void (**)(void))(**(_QWORD **)(a1 + 776) + 64);
    goto LABEL_26;
  }
  if (!strcmp(__s1, "kBTAudioMsgPropertyDynamicLatencyAudioAndInputAggregationOn"))
  {
    CFBooleanGetValue(a3);
    v6 = *(void (**)(void))(**(_QWORD **)(a1 + 776) + 112);
    goto LABEL_26;
  }
  if (!strcmp(__s1, "kBTAudioMsgPropertyWSModeEnabled"))
  {
    v7 = CFBooleanGetValue(a3) != 0;
    (*(void (**)(_QWORD, uint64_t, _BOOL8, uint64_t))(**(_QWORD **)(a1 + 776) + 104))(*(_QWORD *)(a1 + 776), a1, v7, 1);
    return;
  }
  if (!strcmp(__s1, "kBTAudioMsgPropertyEnableSoftwareVolume"))
  {
    CFBooleanGetValue(a3);
    v6 = *(void (**)(void))(**(_QWORD **)(a1 + 776) + 120);
    goto LABEL_26;
  }
  if (!strcmp(__s1, "kBTAudioMsgPropertyPMEOnBuds"))
  {
    CFBooleanGetValue(a3);
    v6 = *(void (**)(void))(**(_QWORD **)(a1 + 776) + 128);
    goto LABEL_26;
  }
  if (!strcmp(__s1, "kBTAudioMsgPropertySpatialOn"))
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
    if ((valuePtr & 1) != 0)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 776) + 80))(*(_QWORD *)(a1 + 776), a1, 1);
    }
    else
    {
      v8 = **(_QWORD **)(a1 + 776);
      if ((valuePtr & 2) != 0)
      {
        (*(void (**)(void))(v8 + 72))();
      }
      else
      {
        (*(void (**)(void))(v8 + 80))();
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 776) + 72))(*(_QWORD *)(a1 + 776), a1, 0);
      }
    }
    return;
  }
  if (!strcmp(__s1, "kBTAudioMsgPropertySpatialAudioActive"))
  {
    CFBooleanGetValue(a3);
    v6 = *(void (**)(void))(**(_QWORD **)(a1 + 776) + 168);
    goto LABEL_26;
  }
  if (!strcmp(__s1, "kBTAudioMsgPropertySpatialAudioAppBasedMode"))
  {
    value = 0;
    valuePtr = 0;
    BOOLean = 0;
    LODWORD(number) = 0;
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertySpatialBundleID"), (const void **)&valuePtr))
      v9 = objc_msgSend(valuePtr, "copy");
    else
      v9 = 0;
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertySpatialMode"), (const void **)&value))
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &number);
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyHeadTrack"), (const void **)&BOOLean))
    {
      if (CFBooleanGetValue(BOOLean))
        v12 = 0xFFFFFFFFLL;
      else
        v12 = 0;
    }
    else
    {
      v12 = 0xFFFFFFFFLL;
    }
    (*(void (**)(_QWORD, uint64_t, id, _QWORD, uint64_t))(**(_QWORD **)(a1 + 776) + 160))(*(_QWORD *)(a1 + 776), a1, v9, number, v12);

  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyAdaptiveVolumeRampEnd"))
  {
    BOOLean = 0;
    value = 0;
    number = 0;
    LODWORD(v18) = 0;
    v19 = 0;
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyAdaptiveVolumeCurrentVolume"), (const void **)&value))
    {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v18);
    }
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyAdaptiveVolumeAudioCategory"), (const void **)&BOOLean))
    {
      v10 = -[__CFBoolean copy](BOOLean, "copy");
    }
    else
    {
      v10 = 0;
    }
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyAdaptiveVolumeRampEndReason"), (const void **)&number))
    {
      CFNumberGetValue(number, kCFNumberSInt32Type, &v19);
      v13 = v19;
    }
    else
    {
      v13 = 0;
    }
    v14 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(valuePtr) = 67109634;
      HIDWORD(valuePtr) = v18;
      v24 = 2112;
      v25 = v10;
      v26 = 1024;
      v27 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Adaptive Volume: Volume ramp ended with currentVolume: %d audioCategory %@ rampEndReason %d", (uint8_t *)&valuePtr, 0x18u);
      v13 = v19;
    }
    (*(void (**)(_QWORD, uint64_t, _QWORD, id, uint64_t))(**(_QWORD **)(a1 + 776) + 96))(*(_QWORD *)(a1 + 776), a1, v18, v10, v13);

  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyManualVolumeUpdate"))
  {
    BOOLean = 0;
    value = 0;
    number = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyManualVolumeUpdateNewVolume"), (const void **)&number))
    {
      CFNumberGetValue(number, kCFNumberSInt32Type, &v19);
    }
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyManualVolumeUpdateCurrentVolume"), (const void **)&value))
    {
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, (char *)&v17 + 4);
    }
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyManualVolumeUpdateCurrentAudioCategory"), (const void **)&BOOLean))
    {
      v11 = -[__CFBoolean copy](BOOLean, "copy");
    }
    else
    {
      v11 = 0;
    }
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyManualVolumeUpdateRampInProgress"), (const void **)&v18))
    {
      CFNumberGetValue(v18, kCFNumberSInt32Type, &v17);
      v15 = v17;
    }
    else
    {
      v15 = 0;
    }
    v16 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(valuePtr) = 67109890;
      HIDWORD(valuePtr) = BYTE4(v17);
      v24 = 2112;
      v25 = v11;
      v26 = 1024;
      v27 = v19;
      v28 = 1024;
      v29 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Manual Volume update received currentVolume: %d audioCategory %@ newVolume %d isRampInProgress %d", (uint8_t *)&valuePtr, 0x1Eu);
      v15 = v17;
    }
    (*(void (**)(_QWORD, uint64_t, _QWORD, id, _QWORD, BOOL))(**(_QWORD **)(a1 + 776) + 88))(*(_QWORD *)(a1 + 776), a1, HIDWORD(v17), v11, v19, v15 != 0);

  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyFrameCount"))
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 776) + 176))(*(_QWORD *)(a1 + 776), a1, valuePtr);
  }
  else
  {
    sub_1002D5A64((uint64_t *)a1, __s1, a3);
  }
}

void sub_1005D979C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1005D97D4(uint64_t a1)
{
  uint64_t result;

  result = (***(uint64_t (****)(_QWORD, uint64_t))(a1 + 776))(*(_QWORD *)(a1 + 776), a1);
  *(_BYTE *)(a1 + 784) = 1;
  return result;
}

uint64_t sub_1005D9810(uint64_t a1)
{
  *(_BYTE *)(a1 + 784) = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 776) + 24))(*(_QWORD *)(a1 + 776), a1);
}

uint64_t sub_1005D9828(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 776) + 40))(*(_QWORD *)(a1 + 776), a1);
}

uint64_t sub_1005D983C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 776) + 32))(*(_QWORD *)(a1 + 776), a1);
}

uint64_t sub_1005D9850(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 784);
}

uint64_t sub_1005D9858(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 776) + 144))(*(_QWORD *)(a1 + 776), a1, a2);
}

uint64_t sub_1005D9870(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 776) + 152))(*(_QWORD *)(a1 + 776), a1);
}

uint64_t sub_1005D9884(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 776) + 184))(*(_QWORD *)(a1 + 776), a1);
}

void sub_1005D9898(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyDynamicLatencySupported", a2);
}

void sub_1005D98A8(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyLowLatencyMode", a2);
}

void sub_1005D98B8(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyDynamicLatencyDelayMicroSec", a2);
}

void sub_1005D98C8(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertySamplingSpeed", a2);
}

void sub_1005D98D8(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyLinkAdaptEncoderBitrate", a2);
}

void sub_1005D98E8(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyTransportType", a2);
}

void sub_1005D98F8(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyDynamicClock", a2);
}

void sub_1005D9908(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyAllowSoundProfile", a2);
}

void sub_1005D9918(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertySoundProfileEnhancedTuning", a2);
}

void sub_1005D9928(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyUntrackedSpatial", a2);
}

void sub_1005D9938(uint64_t a1, int a2, float a3)
{
  CFNumberRef v4;
  CFNumberRef v5;
  CFDictionaryRef v6;
  int v7;
  float valuePtr;
  void *values[2];
  void *keys[2];

  valuePtr = a3;
  v7 = a2;
  *(_OWORD *)keys = *(_OWORD *)off_10093C668;
  v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &valuePtr);
  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v7);
  values[0] = v4;
  values[1] = v5;
  v6 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  sub_1002D4F78(a1, "kBTAudioMsgPropertySamplingSpeedParams", v6);
  CFRelease(v4);
  CFRelease(v5);
  CFRelease(v6);
}

void sub_1005D9A34(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyLowLatencyGameSupport", a2);
}

uint64_t sub_1005D9A44(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 776) + 136))(*(_QWORD *)(a1 + 776), a1, a2);
}

void sub_1005D9A5C(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyCodec", a2);
}

void sub_1005D9A6C(uint64_t a1, double a2)
{
  sub_1002D5924(a1, "kBTAudioMsgPropertySampleRate", a2);
}

void sub_1005D9A78(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyBitpool", a2);
}

void sub_1005D9A88(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyFrameCount", a2);
}

void sub_1005D9A98(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyFrameLen", a2);
}

void sub_1005D9AA8(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyRtpInterval", a2);
}

unint64_t sub_1005D9AB8(uint64_t a1)
{
  return (unint64_t)*(double *)(a1 + 680);
}

void sub_1005D9AC4(uint64_t a1, CFDictionaryRef theDict)
{
  CFMutableDictionaryRef MutableCopy;

  MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
  sub_1002D4F78(a1, "kBTAudioMsgPropertySpatialPerAppModeMap", MutableCopy);
  CFRelease(MutableCopy);
}

void sub_1005D9B14(uint64_t a1, CFDictionaryRef theDict)
{
  CFMutableDictionaryRef MutableCopy;

  MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
  sub_1002D4F78(a1, "kBTAudioMsgPropertyAdaptiveVolumeMap", MutableCopy);
  CFRelease(MutableCopy);
}

void sub_1005D9B64(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyPersonalizedVolumeDRCInfo", a2);
}

uint64_t sub_1005D9B74(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  int v12;
  unint64_t v13;
  __int16 v14;
  int v15;
  __int16 v16;
  unsigned int v17;

  v8 = *(unsigned __int8 *)(a1 + 652);
  v6 = *(unsigned __int8 *)(a1 + 660);
  v7 = sub_100412EDC(a1 + 400);
  LODWORD(v8) = vcvtps_s32_f32((float)a3 / (float)(int)v8);
  if (*(_BYTE *)(a1 + 396)
    && (v9 = qword_1009997E0, os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEBUG)))
  {
    v12 = 134218496;
    v13 = a3;
    v14 = 1024;
    v15 = v8;
    v16 = 1024;
    v17 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "A2DPAudioDevice readHandler called on data of size %lu (%d frames) with maxFrame count of %d", (uint8_t *)&v12, 0x18u);
    if ((_DWORD)v7)
      goto LABEL_4;
  }
  else if ((_DWORD)v7)
  {
LABEL_4:
    v8 = 0;
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 776) + 16))(*(_QWORD *)(a1 + 776), a1, a2, a3, v8, v7);
  }
  if (v6 < v8)
  {
    v10 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
      sub_10070B9C0(v8, v6, v10);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 776)
                                                                                                 + 16))(*(_QWORD *)(a1 + 776), a1, a2, a3, v8, v7);
}

uint64_t sub_1005D9CE0()
{
  return 1;
}

uint64_t sub_1005D9CEC(uint64_t a1)
{
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_100925080;
  sub_1000160D0(a1 + 8);
  *(_QWORD *)a1 = off_10093C688;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 216;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  *(_DWORD *)(a1 + 80) = 2;
  return a1;
}

uint64_t sub_1005D9DA8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 8);
  sub_1002F6144(a2, (const void ***)(a1 + 88));
  return sub_100034234((uint64_t)v5);
}

void sub_1005D9DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D9E08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 8);
  sub_1002F6144(a2, (const void ***)(a1 + 112));
  return sub_100034234((uint64_t)v5);
}

void sub_1005D9E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D9E68@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 8);
  sub_1002F6144(a2, (const void ***)(a1 + 136));
  return sub_100034234((uint64_t)v5);
}

void sub_1005D9EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D9EC8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 8);
  sub_1005DAE14(a2, a1 + 160);
  return sub_100034234((uint64_t)v5);
}

void sub_1005D9F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D9F28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 8);
  sub_1005DB13C(a2, (const void ***)(a1 + 184));
  return sub_100034234((uint64_t)v5);
}

void sub_1005D9F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D9F88@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 8);
  sub_1005DB350(a2, a1 + 208);
  return sub_100034234((uint64_t)v5);
}

void sub_1005D9FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005D9FE8(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 8);
  v2 = *(unsigned __int8 *)(a1 + 256);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_1005DA02C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 8);
  sub_1005DB3A4(a2, (const void ***)(a1 + 232));
  return sub_100034234((uint64_t)v5);
}

void sub_1005DA078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1005DA08C(uint64_t a1, void *a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  char **v28;
  char *v29;
  char *v30;
  char *v31;
  void *v32;
  id v33;
  id v34;
  char *v35;
  char *v36;
  char *v37;
  id v38;
  _QWORD v39[2];

  v34 = a2;
  v39[0] = 0;
  v39[1] = 0;
  sub_10003415C((uint64_t)v39, a1 + 8);
  objc_storeStrong((id *)(a1 + 72), a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "getLocalFileUrl"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:relativeToURL:](NSURL, "URLWithString:relativeToURL:", CFSTR("MobileBluetoothConfig.plist"), v4));

  v38 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithContentsOfURL:error:](NSDictionary, "dictionaryWithContentsOfURL:error:", v5, &v38));
  v33 = v38;
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", CFSTR("denylistedAVRCPSubstrings")));
  sub_1005DA53C(v32, (uint64_t)&v35);
  v7 = a1 + 120;
  sub_100056BAC(a1 + 112, *(char **)(a1 + 120));
  v8 = v36;
  *(_QWORD *)(a1 + 112) = v35;
  *(_QWORD *)(a1 + 120) = v8;
  v9 = v37;
  *(_QWORD *)(a1 + 128) = v37;
  if (v9)
  {
    *((_QWORD *)v8 + 2) = v7;
    v35 = (char *)&v36;
    v36 = 0;
    v37 = 0;
    v8 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 112) = v7;
  }
  sub_100056BAC((uint64_t)&v35, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", CFSTR("denylistedCATTSubstrings")));
  sub_1005DA53C(v10, (uint64_t)&v35);
  v11 = a1 + 144;
  sub_100056BAC(a1 + 136, *(char **)(a1 + 144));
  v12 = v36;
  *(_QWORD *)(a1 + 136) = v35;
  *(_QWORD *)(a1 + 144) = v12;
  v13 = v37;
  *(_QWORD *)(a1 + 152) = v37;
  if (v13)
  {
    *((_QWORD *)v12 + 2) = v11;
    v35 = (char *)&v36;
    v36 = 0;
    v37 = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 136) = v11;
  }
  sub_100056BAC((uint64_t)&v35, v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", CFSTR("denylistedPBAPSubstrings")));
  sub_1005DA53C(v14, (uint64_t)&v35);
  v15 = a1 + 96;
  sub_100056BAC(a1 + 88, *(char **)(a1 + 96));
  v16 = v36;
  *(_QWORD *)(a1 + 88) = v35;
  *(_QWORD *)(a1 + 96) = v16;
  v17 = v37;
  *(_QWORD *)(a1 + 104) = v37;
  if (v17)
  {
    *((_QWORD *)v16 + 2) = v15;
    v35 = (char *)&v36;
    v36 = 0;
    v37 = 0;
    v16 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 88) = v15;
  }
  sub_100056BAC((uint64_t)&v35, v16);
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", CFSTR("triesteDenylistedAutomationDongles")));
  sub_1005DA6B8(v18, (uint64_t)&v35);
  v19 = a1 + 192;
  sub_100056BAC(a1 + 184, *(char **)(a1 + 192));
  v20 = v36;
  *(_QWORD *)(a1 + 184) = v35;
  *(_QWORD *)(a1 + 192) = v20;
  v21 = v37;
  *(_QWORD *)(a1 + 200) = v37;
  if (v21)
  {
    *((_QWORD *)v20 + 2) = v19;
    v35 = (char *)&v36;
    v36 = 0;
    v37 = 0;
    v20 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 184) = v19;
  }
  sub_100056BAC((uint64_t)&v35, v20);
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", CFSTR("maxFindMyLEConnections")));
  sub_1005DA848(v22, (uint64_t *)&v35);
  v23 = a1 + 216;
  sub_10001A82C(a1 + 208, *(_QWORD **)(a1 + 216));
  v24 = v36;
  *(_QWORD *)(a1 + 208) = v35;
  *(_QWORD *)(a1 + 216) = v24;
  v25 = v37;
  *(_QWORD *)(a1 + 224) = v37;
  if (v25)
  {
    *((_QWORD *)v24 + 2) = v23;
    v35 = (char *)&v36;
    v36 = 0;
    v37 = 0;
    v24 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 208) = v23;
  }
  sub_10001A82C((uint64_t)&v35, v24);
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", CFSTR("maxFindMyLETransientConnections")));
  *(_BYTE *)(a1 + 256) = objc_msgSend(v26, "unsignedCharValue");
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", CFSTR("maxSharingNearbyInvitationsHostLEConnections")));
  sub_1005DA948(v27, (uint64_t *)&v35);
  v29 = *(char **)(a1 + 240);
  v28 = (char **)(a1 + 240);
  sub_100056BAC((uint64_t)(v28 - 1), v29);
  v30 = v36;
  *(v28 - 1) = v35;
  *v28 = v30;
  v31 = v37;
  v28[1] = v37;
  if (v31)
  {
    *((_QWORD *)v30 + 2) = v28;
    v35 = (char *)&v36;
    v36 = 0;
    v37 = 0;
    v30 = 0;
  }
  else
  {
    *(v28 - 1) = (char *)v28;
  }
  sub_100056BAC((uint64_t)&v35, v30);

  sub_100034234((uint64_t)v39);
}

void sub_1005DA478(_Unwind_Exception *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a9);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005DA4F8()
{
  JUMPOUT(0x1005DA4C0);
}

void sub_1005DA504()
{
  JUMPOUT(0x1005DA4C4);
}

void sub_1005DA510()
{
  JUMPOUT(0x1005DA4CCLL);
}

void sub_1005DA518()
{
  JUMPOUT(0x1005DA4D8);
}

void sub_1005DA520()
{
  void *v0;

  JUMPOUT(0x1005DA4E0);
}

void sub_1005DA52C()
{
  JUMPOUT(0x1005DA4E0);
}

void sub_1005DA534()
{
  JUMPOUT(0x1005DA4E8);
}

void sub_1005DA53C(void *a1@<X1>, uint64_t a2@<X8>)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *__p[2];
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v3 = a1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v11;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v4);
        sub_100091AE8(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7)), "UTF8String"));
        sub_100565F28((uint64_t **)a2, (const void **)__p, (uint64_t)__p);
        if (v9 < 0)
          operator delete(__p[0]);
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

}

void sub_1005DA66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;

  sub_100056BAC(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void sub_1005DA6B8(void *a1@<X1>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *__p[2];
  uint64_t v10;
  void **v11;

  v3 = a1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectEnumerator"));
  while (1)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "nextObject"));
    v6 = v5;
    if (!v5)
      break;
    __p[0] = 0;
    __p[1] = 0;
    v10 = 0;
    v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "valueForKey:", CFSTR("friendlyName"))));
    sub_100091AE8(__p, (char *)objc_msgSend(v7, "UTF8String"));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "valueForKey:", CFSTR("chipsetManufacturerNameID")));
    LOWORD(v7) = (unsigned __int16)objc_msgSend(v8, "unsignedIntValue");

    v11 = __p;
    *((_WORD *)sub_1005DB5B8((uint64_t **)a2, (const void **)__p, (uint64_t)&unk_100740F58, (__int128 **)&v11) + 28) = (_WORD)v7;
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);

  }
}

void sub_1005DA7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  uint64_t v16;

  sub_100056BAC(v16, *(char **)(v16 + 8));

  _Unwind_Resume(a1);
}

void sub_1005DA848(void *a1@<X1>, uint64_t *a2@<X8>)
{
  id v3;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *(*v8)(_QWORD *, _QWORD *);
  void (*v9)(uint64_t);
  void *v10;
  _QWORD **v11;
  _QWORD *v12[2];

  v3 = a1;
  v5 = 0;
  v6 = &v5;
  v7 = 0x4812000000;
  v8 = sub_100062700;
  v9 = sub_10006241C;
  v12[0] = 0;
  v12[1] = 0;
  v10 = &unk_10083E079;
  v11 = v12;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1005DAA48;
  v4[3] = &unk_10093C6A8;
  v4[4] = &v5;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v4);
  sub_1005DB350(a2, (uint64_t)(v6 + 6));
  _Block_object_dispose(&v5, 8);
  sub_10001A82C((uint64_t)&v11, v12[0]);

}

void sub_1005DA920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a14, 8);
  sub_10001A82C(v22, a21);

  _Unwind_Resume(a1);
}

void sub_1005DA948(void *a1@<X1>, uint64_t *a2@<X8>)
{
  id v3;
  _QWORD v4[5];
  uint64_t v5;
  const void ***v6;
  uint64_t v7;
  _QWORD *(*v8)(_QWORD *, _QWORD *);
  void (*v9)(uint64_t);
  void *v10;
  char **v11;
  char *v12[2];

  v3 = a1;
  v5 = 0;
  v6 = (const void ***)&v5;
  v7 = 0x4812000000;
  v8 = sub_1005DABB4;
  v9 = sub_1005DABF0;
  v12[0] = 0;
  v12[1] = 0;
  v10 = &unk_10083E079;
  v11 = v12;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1005DAC00;
  v4[3] = &unk_10093C6A8;
  v4[4] = &v5;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v4);
  sub_1005DB3A4(a2, v6 + 6);
  _Block_object_dispose(&v5, 8);
  sub_100056BAC((uint64_t)&v11, v12[0]);

}

void sub_1005DAA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose(&a14, 8);
  sub_100056BAC(v22, a21);

  _Unwind_Resume(a1);
}

void sub_1005DAA48(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  unsigned __int8 v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  int *v13;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "isEqualToString:", CFSTR("legacyBCMChipsets")))
  {
    v7 = objc_msgSend(v6, "unsignedCharValue");
    v8 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
    v12 = 0;
    v13 = &v12;
    v9 = sub_10031FA08(v8, &v12, (uint64_t)&unk_100740F58, &v13);
LABEL_7:
    *((_BYTE *)v9 + 32) = v7;
    goto LABEL_8;
  }
  if (objc_msgSend(v5, "isEqualToString:", CFSTR("modernBCMChipsets")))
  {
    v7 = objc_msgSend(v6, "unsignedCharValue");
    v10 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
    v12 = 1;
    v13 = &v12;
    v9 = sub_10031FA08(v10, &v12, (uint64_t)&unk_100740F58, &v13);
    goto LABEL_7;
  }
  if (objc_msgSend(v5, "isEqualToString:", CFSTR("aciChipsets")))
  {
    v7 = objc_msgSend(v6, "unsignedCharValue");
    v11 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
    v12 = 2;
    v13 = &v12;
    v9 = sub_10031FA08(v11, &v12, (uint64_t)&unk_100740F58, &v13);
    goto LABEL_7;
  }
LABEL_8:

}

void sub_1005DAB94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_1005DABB4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void sub_1005DABF0(uint64_t a1)
{
  sub_100056BAC(a1 + 48, *(char **)(a1 + 56));
}

void sub_1005DAC00(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  unsigned __int8 v7;
  uint64_t v8;
  id v9;
  void *__p[2];
  char v11;
  void **v12;

  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(v6, "unsignedCharValue");
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = objc_retainAutorelease(v5);
  sub_100091AE8(__p, (char *)objc_msgSend(v9, "UTF8String"));
  v12 = __p;
  *((_BYTE *)sub_1002F7194((uint64_t **)(v8 + 48), (const void **)__p, (uint64_t)&unk_100740F58, (_OWORD **)&v12) + 56) = v7;
  if (v11 < 0)
    operator delete(__p[0]);

}

void sub_1005DACB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1005DACE4(uint64_t a1)
{
  sub_100056BAC(a1 + 232, *(char **)(a1 + 240));
  sub_10001A82C(a1 + 208, *(_QWORD **)(a1 + 216));
  sub_100056BAC(a1 + 184, *(char **)(a1 + 192));
  sub_10001A82C(a1 + 160, *(_QWORD **)(a1 + 168));
  sub_100056BAC(a1 + 136, *(char **)(a1 + 144));
  sub_100056BAC(a1 + 112, *(char **)(a1 + 120));
  sub_100056BAC(a1 + 88, *(char **)(a1 + 96));
  *(_QWORD *)a1 = off_100925080;

  sub_100069BDC(a1 + 8);
  return a1;
}

void sub_1005DAD74(uint64_t a1)
{
  sub_100056BAC(a1 + 232, *(char **)(a1 + 240));
  sub_10001A82C(a1 + 208, *(_QWORD **)(a1 + 216));
  sub_100056BAC(a1 + 184, *(char **)(a1 + 192));
  sub_10001A82C(a1 + 160, *(_QWORD **)(a1 + 168));
  sub_100056BAC(a1 + 136, *(char **)(a1 + 144));
  sub_100056BAC(a1 + 112, *(char **)(a1 + 120));
  sub_100056BAC(a1 + 88, *(char **)(a1 + 96));
  *(_QWORD *)a1 = off_100925080;

  sub_100069BDC(a1 + 8);
  operator delete();
}

uint64_t *sub_1005DAE14(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1005DAE68(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1005DAE50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1005DAE68(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1005DAEEC(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1005DAEEC(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10;
  uint64_t *v11;

  v10 = 0;
  v11 = 0;
  v6 = sub_1005DAF74(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_100004078(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1005DAF74(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;

  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_3;
  v5 = *a5;
  v6 = *((_DWORD *)a2 + 7);
  if (*a5 < v6)
    goto LABEL_3;
  if (v6 < v5)
  {
LABEL_9:
    v10 = a2[1];
    if (v10)
    {
      v11 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v11;
        v11 = (uint64_t *)*v11;
      }
      while (v11);
    }
    else
    {
      v17 = a2;
      do
      {
        a4 = (uint64_t **)v17[2];
        v13 = *a4 == v17;
        v17 = (uint64_t *)a4;
      }
      while (!v13);
    }
    if (a4 != a1 + 1)
    {
      v18 = *((_DWORD *)a4 + 7);
      if (v5 >= v18 && (v18 < v5 || a5[1] >= *((_DWORD *)a4 + 8)))
        return sub_1005DB0D8((uint64_t)a1, a3, a5);
    }
    if (v10)
    {
      *a3 = (uint64_t *)a4;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
    return (uint64_t *)a4;
  }
  v15 = a5[1];
  v16 = *((_DWORD *)a2 + 8);
  if (v15 >= v16)
  {
    if (v16 >= v15)
    {
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    goto LABEL_9;
  }
LABEL_3:
  v7 = (uint64_t *)*a2;
  if (*a1 == a2)
  {
    v9 = a2;
  }
  else
  {
    if (v7)
    {
      v8 = (uint64_t *)*a2;
      do
      {
        v9 = v8;
        v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      v12 = a2;
      do
      {
        v9 = (uint64_t *)v12[2];
        v13 = *v9 == (_QWORD)v12;
        v12 = v9;
      }
      while (v13);
    }
    v14 = *((_DWORD *)v9 + 7);
    if (v14 >= *a5 && (*a5 < v14 || *((_DWORD *)v9 + 8) >= a5[1]))
      return sub_1005DB0D8((uint64_t)a1, a3, a5);
  }
  if (v7)
  {
    *a3 = v9;
    return v9 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

uint64_t *sub_1005DB0D8(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *((_DWORD *)v4 + 7);
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v9 >= v6)
      {
        v10 = *((_DWORD *)v8 + 8);
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_12;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_12;
    }
  }
  v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t *sub_1005DB13C(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1005DB190(a1, *a2, a2 + 1);
  return a1;
}

void sub_1005DB178(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100056BAC(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1005DB190(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1005DB214(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1005DB214(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;
  const void **v10;

  v9 = 0;
  v10 = 0;
  v6 = (uint64_t **)sub_1002A4958(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1005DB2A0((uint64_t)a1, a4, v8);
    sub_100004078(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

_BYTE *sub_1005DB2A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  _BYTE *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_10003430C(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_WORD *)v7 + 28) = *(_WORD *)(a2 + 24);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1005DB334(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002A4BA0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1005DB350(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10053797C(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1005DB38C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

