uint64_t *sub_100004078(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_100097004(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_1000040CC(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_100261EA0(v6, a2);
  return v3;
}

uint64_t sub_10000413C(__int16 a1, char a2, char a3, uint64_t a4, uint64_t (*a5)())
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  unsigned __int16 v16;
  uint64_t v17;
  unsigned __int8 v18;
  int v19;
  __int16 v20;
  unsigned __int16 v21;
  char v22;
  _BYTE *v23;
  __int16 v24;
  unsigned __int16 v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v33 = 0;
  v34 = 0;
  result = sub_10004BC7C(&v33);
  if ((_DWORD)result)
    return result;
  if (HIBYTE(v34))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6605, "OI_STATUS _BCM_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
    goto LABEL_55;
  }
  v14 = WORD2(v34);
  if (WORD1(v34) <= WORD2(v34) || BYTE6(v34) != 2)
LABEL_55:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  ++WORD2(v34);
  *(_BYTE *)(v33 + v14) = 4;
  if (HIBYTE(v34))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6606, "OI_STATUS _BCM_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
    goto LABEL_57;
  }
  if (WORD1(v34) - WORD2(v34) <= 1 || BYTE6(v34) != 2)
LABEL_57:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  *(_WORD *)(v33 + WORD2(v34)) = a1;
  v15 = WORD2(v34);
  v16 = WORD2(v34) + 2;
  WORD2(v34) += 2;
  if (HIBYTE(v34))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6607, "OI_STATUS _BCM_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
    goto LABEL_59;
  }
  if (WORD1(v34) <= v16 || BYTE6(v34) != 2)
LABEL_59:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  WORD2(v34) = v15 + 3;
  *(_BYTE *)(v33 + v16) = a2;
  if (HIBYTE(v34))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6608, "OI_STATUS _BCM_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
    goto LABEL_61;
  }
  v17 = WORD2(v34);
  if (WORD1(v34) <= WORD2(v34) || BYTE6(v34) != 2)
LABEL_61:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  v18 = a3 - a2 + 1;
  ++WORD2(v34);
  *(_BYTE *)(v33 + v17) = a3;
  if (v18)
  {
    v19 = 0;
    while (!HIBYTE(v34))
    {
      if (WORD1(v34) - WORD2(v34) <= 5 || BYTE6(v34) != 2)
        goto LABEL_41;
      sub_10004C878(v33 + WORD2(v34), a4, 6uLL);
      v20 = WORD2(v34);
      v21 = WORD2(v34) + 6;
      WORD2(v34) += 6;
      if (HIBYTE(v34))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6613, "OI_STATUS _BCM_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
LABEL_43:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
      if (WORD1(v34) <= v21 || BYTE6(v34) != 2)
        goto LABEL_43;
      v22 = *(_BYTE *)(a4 + 6);
      WORD2(v34) = v20 + 7;
      *(_BYTE *)(v33 + v21) = v22;
      if (HIBYTE(v34))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6614, "OI_STATUS _BCM_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
LABEL_45:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
      if (WORD1(v34) - WORD2(v34) <= 5 || BYTE6(v34) != 2)
        goto LABEL_45;
      v23 = (_BYTE *)(a4 + 7);
      sub_10004C878(v33 + WORD2(v34), (uint64_t)v23, 6uLL);
      v24 = WORD2(v34);
      v25 = WORD2(v34) + 6;
      WORD2(v34) += 6;
      if (HIBYTE(v34))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6615, "OI_STATUS _BCM_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
LABEL_47:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
      if (WORD1(v34) <= v25 || BYTE6(v34) != 2)
        goto LABEL_47;
      v26 = v23[6];
      WORD2(v34) = v24 + 7;
      *(_BYTE *)(v33 + v25) = v26;
      if (HIBYTE(v34))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6616, "OI_STATUS _BCM_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
LABEL_49:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
      v27 = WORD2(v34);
      if (WORD1(v34) <= WORD2(v34) || BYTE6(v34) != 2)
        goto LABEL_49;
      v28 = v23[7];
      ++WORD2(v34);
      *(_BYTE *)(v33 + v27) = v28;
      if (HIBYTE(v34))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6617, "OI_STATUS _BCM_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
LABEL_51:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
      v29 = WORD2(v34);
      if (WORD1(v34) <= WORD2(v34) || BYTE6(v34) != 2)
        goto LABEL_51;
      v30 = v23[8];
      ++WORD2(v34);
      *(_BYTE *)(v33 + v29) = v30;
      if (HIBYTE(v34))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6618, "OI_STATUS _BCM_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
LABEL_53:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
      v31 = WORD2(v34);
      if (WORD1(v34) <= WORD2(v34) || BYTE6(v34) != 2)
        goto LABEL_53;
      v32 = v23[9];
      ++WORD2(v34);
      *(_BYTE *)(v33 + v31) = v32;
      ++v19;
      a4 = (uint64_t)(v23 + 10);
      if (v19 >= v18)
        return sub_10004C8A0(556, v33, BYTE4(v34), a5, (uint64_t)sub_100070F3C, v11, v12, v13);
    }
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6612, "OI_STATUS _BCM_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
LABEL_41:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
  return sub_10004C8A0(556, v33, BYTE4(v34), a5, (uint64_t)sub_100070F3C, v11, v12, v13);
}

uint64_t sub_10000475C(uint64_t a1, __int16 a2, char a3, char a4)
{
  _QWORD v5[4];
  __int16 v6;
  char v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100047200;
  v5[3] = &unk_100926678;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return sub_100042FD0(a1, 111, 1, v5, 0);
}

void sub_1000047C0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100066A8C;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100023D84(v2, v3);
}

uint64_t sub_100004820(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  __int16 v12;
  void *__p[2];
  char v15;
  int v16;
  uint8_t buf[8];
  char v18;

  *(_QWORD *)a1 = &off_10093F6C0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 80) = a3;
  *(_BYTE *)(a1 + 81) = a4;
  *(_BYTE *)(a1 + 82) = a5;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 128;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 128;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 176) = 200;
  *(_BYTE *)(a1 + 178) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_DWORD *)(a1 + 208) = 3;
  *(_WORD *)(a1 + 224) = 257;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  v6 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 384))(v6))
    *(_DWORD *)(a1 + 96) = 3;
  v16 = 0;
  v7 = sub_100027F68();
  sub_100091AE8(buf, "LESCAN");
  sub_100091AE8(__p, "MaxReportsInMap");
  v8 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v7 + 88))(v7, buf, __p, &v16);
  if (v16 > 0)
    v9 = v8;
  else
    v9 = 0;
  if (v15 < 0)
    operator delete(__p[0]);
  if (v18 < 0)
    operator delete(*(void **)buf);
  v10 = qword_100999828;
  if (v9)
  {
    v11 = os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT);
    v12 = v16;
    if (v11)
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Warning: Using override value (%d) for max number of ADV reports in map", buf, 8u);
      v12 = v16;
      v10 = qword_100999828;
    }
    *(_WORD *)(a1 + 176) = v12;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    sub_100718944(v10);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 216) = sub_1000063DC();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 81) == 16;
  return a1;
}

void sub_100004A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100004AE4(uint64_t a1, char a2)
{
  NSObject *v3;
  uint8_t v4[16];

  if ((*(_DWORD *)(a1 + 1960) & 0xFFFFFFFD) == 1)
    return sub_10005B0B8(a1, a2);
  v3 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Waiting for scan state to settle before updating scan", v4, 2u);
  }
  return 0;
}

void sub_100004B6C(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  dispatch_assert_queue_V2(*(dispatch_queue_t *)a1);
  if (os_log_type_enabled((os_log_t)qword_100999970, OS_LOG_TYPE_DEBUG))
    sub_1006F4854();
  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 24))
    sub_100476338(a1);
  v2 = *(NSObject **)a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100066478;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_async(v2, block);
}

uint64_t sub_100004C14(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = *(NSObject **)(a1 + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100007C4C;
  v5[3] = &unk_100919528;
  v5[4] = &v6;
  v5[5] = a2;
  dispatch_sync(v2, v5);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_100004CA0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v4[5];
  uint8_t buf[16];

  v2 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "scanRxConfigured", buf, 2u);
  }
  v3 = sub_1000419F4();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100066898;
  v4[3] = &unk_100917378;
  v4[4] = a1;
  sub_100041A34(v3, v4);
}

uint64_t sub_100004D44(void *a1)
{
  id v1;
  _BOOL4 v2;
  uint64_t v3;
  void *v5[2];
  char v6;

  v1 = a1;
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100937780);
  if (sub_100030864(qword_1009778B0, v1))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    sub_1006594CC((uint64_t)off_1009778C0, v1, (uint64_t)v5);
    if (v6 < 0)
    {
      v2 = v5[1] == 0;
      operator delete(v5[0]);
    }
    else
    {
      v2 = v6 == 0;
    }
    if (v2)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_100004E24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100004E38(os_unfair_lock_s *a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  _QWORD v6[5];
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000340DC(a2, (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'session detached' event for session \"%{public}s\"", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000229A4;
  v6[3] = &unk_100935028;
  v6[4] = a2;
  sub_1000228B4(a1 + 2, v6);
}

uint64_t sub_100004F50(void *key, size_t keyLength, const void *a3, unsigned int a4, void *a5, unsigned int a6)
{
  CCCryptorStatus v10;
  CCCryptorStatus v12;
  size_t dataOutMoved;
  CCCryptorRef cryptorRef;

  dataOutMoved = 0;
  cryptorRef = 0;
  v10 = CCCryptorCreate(0, 0, 0, key, keyLength, 0, &cryptorRef);
  if (v10)
  {
    printf("Could not create cryptor : %d\n", v10);
    return 1041;
  }
  else
  {
    v12 = CCCryptorUpdate(cryptorRef, a3, a4, a5, a6, &dataOutMoved);
    if (v12)
    {
      printf("Failed to encrypt : %d (need %d, got %zu)\n", v12, a6, dataOutMoved);
      CCCryptorRelease(cryptorRef);
      return 1042;
    }
    else
    {
      CCCryptorRelease(cryptorRef);
      if (dataOutMoved == a6)
      {
        return 0;
      }
      else
      {
        printf("Incorrect checksum size %ld, expecting %d\n", dataOutMoved, a6);
        return 1043;
      }
    }
  }
}

uint64_t sub_100005044(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093E890);
  v3 = sub_1000589DC((uint64_t)off_1009778C0, v2, 0);
  if (v3)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10093E990);
    v4 = sub_10006D488((uint64_t)off_1009778E0, v3, 0);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      sub_100715668();
    v4 = 0;
  }

  return v4;
}

void sub_100005124(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100005134(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v3 = a2;
  if ((_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit") & 1) != 0 && (v4 = *(void **)(a1 + 216)) != 0)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v5 = v4;
    v6 = (uint64_t)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v11;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v11 != v7)
            objc_enumerationMutation(v5);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "isEqual:", v3, (_QWORD)v10) & 1) != 0)
          {
            v6 = 1;
            goto LABEL_14;
          }
        }
        v6 = (uint64_t)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v6)
          continue;
        break;
      }
    }
LABEL_14:

  }
  else
  {
    v6 = 1;
  }

  return v6;
}

void sub_100005264(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *sub_100005290(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_1000040CC(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  operator delete((void *)a2);
  return v3;
}

uint64_t sub_1000052D0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  id v8;
  void *v9;
  void *v10;
  BOOL v11;
  uint64_t result;
  __int128 *v13;
  __int128 *i;
  __int128 v15;
  unsigned int v16;
  void *v17;
  void *v18;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  char v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint8_t buf[16];
  __int128 v36;
  void *v37[2];
  __int128 v38;
  void *__p[2];
  uint64_t v40;
  __int128 v41;
  uint64_t v42;

  if (*(_BYTE *)(a1 + 128))
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
      sub_1006EDDEC();
    v6 = *(_QWORD *)(a1 + 120);
    if (v6 && *(int *)(v6 - 64) >= 1)
    {
      if (qword_10097AC58 != -1)
        dispatch_once(&qword_10097AC58, &stru_10092DEA8);
      if (sub_100005E48(qword_10097AC50, 0, *(void **)(a1 + 88)))
      {
        v7 = *(_DWORD *)(a3 + 168);
        v8 = *(id *)(a3 + 176);
        v9 = v8;
        if (v8 && objc_msgSend(v8, "count"))
        {
          if (objc_msgSend(v9, "count") == (id)1)
          {
            v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", 0));
            v11 = objc_msgSend(v10, "longLongValue") != 0;

            if (!v11 && v7 == 0)
            {
LABEL_13:
              if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
                sub_1006EDD8C();

              return 348;
            }
          }
        }
        else if (!v7)
        {
          goto LABEL_13;
        }

      }
    }
    *(_BYTE *)(a1 + 381) = *(_BYTE *)(a3 + 199);
    *(_DWORD *)(a1 + 384) = *(_DWORD *)(a3 + 168);
    if (qword_100977FB0 != -1)
      dispatch_once(&qword_100977FB0, &stru_10092DEC8);
    result = sub_10001ABD0((uint64_t)off_100977FA8, a2, a3);
    *(_BYTE *)(a1 + 380) = *(_BYTE *)(a3 + 184);
    if (!(_DWORD)result)
    {
      *(_QWORD *)(a1 + 368) = 0;
      objc_msgSend(*(id *)(a1 + 344), "removeAllObjects");
      v13 = *(__int128 **)(a3 + 8);
      for (i = *(__int128 **)(a3 + 16); v13 != i; v13 = (__int128 *)((char *)v13 + 20))
      {
        memset(buf, 0, sizeof(buf));
        LODWORD(v36) = 0;
        v15 = *v13;
        LODWORD(v36) = *((_DWORD *)v13 + 4);
        *(_OWORD *)buf = v15;
        v41 = 0uLL;
        v16 = sub_1000689E4(buf, &v41);
        if (v16 == 16 || v16 == 2)
        {
          v17 = *(void **)(a1 + 344);
          v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v41, v16));
          objc_msgSend(v17, "addObject:", v18);

        }
      }
      *(_BYTE *)(a1 + 306) = *(_BYTE *)(a3 + 143);
      *(_BYTE *)(a1 + 304) = 1;
      if (sub_100070BDC())
      {
        CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
        v20 = CTGreenTeaOsLogHandle;
        if (CTGreenTeaOsLogHandle)
        {
          if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
          {
            v21 = *(_QWORD *)(a1 + 88);
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "LE start scanning for application '%{public}@'", buf, 0xCu);
          }
        }
      }
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_10092DE88);
      result = sub_10006F648((uint64_t)off_100978168, a2);
      if ((_DWORD)result)
      {
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_10092DE88);
        v22 = sub_1002DE254((uint64_t)off_100978168, a2);
        v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        v24 = v23;
        v41 = 0uLL;
        v42 = 0;
        if (v23)
          sub_100091AE8(&v41, (char *)objc_msgSend(objc_retainAutorelease(v23), "UTF8String"));
        else
          sub_100091AE8(&v41, "");
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_10092DE88);
        v25 = sub_1002DE2B8((uint64_t)off_100978168, a2);
        v26 = (void *)objc_claimAutoreleasedReturnValue(v25);

        v33 = 0uLL;
        v34 = 0;
        if (v26)
          sub_100091AE8(&v33, (char *)objc_msgSend(objc_retainAutorelease(v26), "UTF8String"));
        else
          sub_100091AE8(&v33, "");
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_10092DE88);
        v27 = sub_1002DE31C((uint64_t)off_100978168, a2);
        v28 = (void *)objc_claimAutoreleasedReturnValue(v27);

        v31 = 0uLL;
        v32 = 0;
        if (v28)
          sub_100091AE8(&v31, (char *)objc_msgSend(objc_retainAutorelease(v28), "UTF8String"));
        else
          sub_100091AE8(&v31, "");
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_10092DE88);
        v29 = sub_1002F240C((uint64_t)off_100978168, a2);
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_10092DE88);
        v30 = sub_10006F6A4((uint64_t)off_100978168, a2);
        v40 = 0;
        v38 = 0u;
        *(_OWORD *)__p = 0u;
        v36 = 0u;
        *(_OWORD *)v37 = 0u;
        *(_OWORD *)buf = 0u;
        sub_10047D520((uint64_t)buf, &v31, v30, objc_msgSend(*(id *)(a1 + 344), "count") == 0, *(_BYTE *)a3, v29, 1, &v33, &v41);
        if (qword_10097AC48 != -1)
          dispatch_once(&qword_10097AC48, &stru_10092DEE8);
        sub_10006544C(qword_10097AC40, (uint64_t)buf);
        if (SHIBYTE(v40) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v38) < 0)
          operator delete(v37[1]);
        if (SHIBYTE(v36) < 0)
          operator delete(*(void **)&buf[8]);
        if (SHIBYTE(v32) < 0)
          operator delete((void *)v31);
        if (SHIBYTE(v34) < 0)
          operator delete((void *)v33);
        if (SHIBYTE(v42) < 0)
          operator delete((void *)v41);

        return 0;
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006EDD2C();
    return 341;
  }
  return result;
}

void sub_1000058D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

uint64_t sub_10000598C(void *a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD applier[5];

  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_array)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472;
    applier[2] = sub_100066F04;
    applier[3] = &unk_100923110;
    applier[4] = a2;
    if (xpc_array_apply(a1, applier))
      return 0;
    else
      return 3;
  }
  else
  {
    v4 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1006DB9D8(a1, v4);
    return 3;
  }
}

void sub_100005A44(uint64_t a1)
{
  NSObject *v2;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v2 = *(NSObject **)(a1 + 16);
  if (!v2)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
    sub_100070B24(a1);
    operator delete();
  }
  dispatch_set_finalizer_f(v2, (dispatch_function_t)sub_1000065AC);
  sub_1000066E8(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_100005AB0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v2 = *(void **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 72);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1006B1A90;
  v5[3] = &unk_100940230;
  v6 = v2;
  v4 = objc_msgSend(v3, "indexOfObjectPassingTest:", v5);
  if (v4 != (id)0x7FFFFFFFFFFFFFFFLL)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "removeObjectAtIndex:", v4);

}

void sub_100005B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_100005B54(uint64_t a1@<X0>, unint64_t a2@<X1>, void **a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *i;
  id v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  id obj;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  int8x16_t v38;
  _BYTE v39[128];

  *a3 = 0;
  a3[1] = 0;
  v6 = *(_QWORD **)(a1 + 232);
  v4 = (_QWORD *)(a1 + 232);
  v5 = v6;
  a3[2] = 0;
  if (v6)
  {
    v7 = v4;
    do
    {
      v8 = v5[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v5;
      else
        v10 = v5 + 1;
      if (v9)
        v7 = v5;
      v5 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != v4 && v7[4] <= a2 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v7[5] + 16))(v7[5]))
    {
      v11 = v7[5];
      if (v11)
      {
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        obj = *(id *)(v11 + 224);
        v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v39, 16);
        if (v12)
        {
          v13 = *(_QWORD *)v33;
          do
          {
            for (i = 0; i != v12; i = (char *)i + 1)
            {
              if (*(_QWORD *)v33 != v13)
                objc_enumerationMutation(obj);
              v15 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i));
              v38 = 0uLL;
              objc_msgSend(v15, "getUUIDBytes:", &v38);
              sub_100069B04((uint64_t)&v36, &v38, 16);
              v17 = (char *)a3[1];
              v16 = (char *)a3[2];
              if (v17 >= v16)
              {
                v20 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - (_BYTE *)*a3) >> 2);
                v21 = v20 + 1;
                if (v20 + 1 > 0xCCCCCCCCCCCCCCCLL)
                  abort();
                v22 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (_BYTE *)*a3) >> 2);
                if (2 * v22 > v21)
                  v21 = 2 * v22;
                if (v22 >= 0x666666666666666)
                  v23 = 0xCCCCCCCCCCCCCCCLL;
                else
                  v23 = v21;
                if (v23)
                  v24 = (char *)sub_1000B58EC((uint64_t)(a3 + 2), v23);
                else
                  v24 = 0;
                v25 = &v24[20 * v20];
                v26 = v36;
                *((_DWORD *)v25 + 4) = v37;
                *(_OWORD *)v25 = v26;
                v28 = (char *)*a3;
                v27 = (char *)a3[1];
                v29 = v25;
                if (v27 != *a3)
                {
                  do
                  {
                    v30 = *(_OWORD *)(v27 - 20);
                    *((_DWORD *)v29 - 1) = *((_DWORD *)v27 - 1);
                    *(_OWORD *)(v29 - 20) = v30;
                    v29 -= 20;
                    v27 -= 20;
                  }
                  while (v27 != v28);
                  v27 = (char *)*a3;
                }
                v19 = v25 + 20;
                *a3 = v29;
                a3[1] = v25 + 20;
                a3[2] = &v24[20 * v23];
                if (v27)
                  operator delete(v27);
              }
              else
              {
                v18 = v36;
                *((_DWORD *)v17 + 4) = v37;
                *(_OWORD *)v17 = v18;
                v19 = v17 + 20;
              }
              a3[1] = v19;

            }
            v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v39, 16);
          }
          while (v12);
        }

      }
    }
  }
}

void sub_100005DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100005E48(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v13;
  int v14;
  id v15;
  __int16 v16;
  unint64_t v17;

  v5 = a3;
  if (v5)
  {
    v6 = sub_100027F68();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6) & 1) != 0
      && ((objc_msgSend(v5, "hasPrefix:", CFSTR("com.apple.")) & 1) != 0
       || objc_msgSend(v5, "hasPrefix:", CFSTR("com.Apple."))))
    {
      v7 = CBGenerateObfuscatedSHA256HashedString(v5);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = v8;
      if (a2 < 3)
      {
        if (objc_msgSend((id)*(&off_1009408F0)[a2], "containsObject:", v8))
        {
          if (*(_BYTE *)(a1 + 154))
          {
            v10 = 1;
LABEL_17:

            goto LABEL_13;
          }
          v13 = qword_100999908;
          v10 = 0;
          if (!os_log_type_enabled((os_log_t)qword_100999908, OS_LOG_TYPE_DEFAULT))
            goto LABEL_17;
          v14 = 138543618;
          v15 = v5;
          v16 = 2048;
          v17 = a2;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@ is required to provide the use case for operation type %ld but check is bypassed due to overriding", (uint8_t *)&v14, 0x16u);
        }
        v10 = 0;
        goto LABEL_17;
      }

    }
    goto LABEL_12;
  }
  v11 = qword_100999908;
  v10 = 0;
  if (os_log_type_enabled((os_log_t)qword_100999908, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "BundleID is not available.", (uint8_t *)&v14, 2u);
LABEL_12:
    v10 = 0;
  }
LABEL_13:

  return v10;
}

void sub_100006000(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10000602C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  _QWORD *v6;
  __int128 v7;
  _QWORD v8[2];

  v5 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
  {
    if (*((char *)v6 + 127) < 0)
    {
      sub_10003430C((_BYTE *)a3, (void *)v6[13], v6[14]);
    }
    else
    {
      v7 = *(_OWORD *)(v6 + 13);
      *(_QWORD *)(a3 + 16) = v6[15];
      *(_OWORD *)a3 = v7;
    }
  }
  else
  {
    sub_100091AE8((_QWORD *)a3, "");
  }
  sub_100034234((uint64_t)v8);

}

void sub_1000060D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1000060F0(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _BOOL8 v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((_BYTE *)v4 + 238) != 0;
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100006160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100006180(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  unsigned __int8 uu2[16];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 40);
  sub_100030BCC(uu2, v3);
  v4 = sub_10000C5B8(a1 + 536, uu2);
  if (a1 + 544 == v4)
  {
    v5 = 23;
  }
  else
  {
    uu2[0] = 0;
    sub_100043758(uu2);
    v5 = sub_10020E244(*(unsigned __int16 **)(v4 + 48));
    sub_100043728(uu2);
  }
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100006250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100043728(va1);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

unint64_t sub_10000628C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v11;
  void *__p[2];
  uint64_t v13;
  _QWORD v14[2];

  v5 = a2;
  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 88);
  v6 = (unint64_t)sub_1000306B0(a1, v5);
  if (v6)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_10003430C(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      v13 = *(_QWORD *)(a3 + 16);
    }
    v6 = v6 + 184 != sub_10001F2AC(v6 + 176, (const void **)__p);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  sub_100034264((uint64_t)v14);
  v8 = sub_100005044(v7, v5);
  if (v8)
  {
    v11 = 0;
    v9 = sub_10034D650();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v9 + 784))(v9, v8, a3, &v11))
    {
      v6 = v6;
    }
    else
    {
      v6 = (v11 | v6) != 0;
    }
  }
  sub_100034234((uint64_t)v14);

  return v6;
}

void sub_100006398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;

  if (a16 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a18);

  _Unwind_Resume(a1);
}

uint64_t sub_1000063DC()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unsigned int v6;

  if (!dword_10098029C)
  {
    mach_timebase_info((mach_timebase_info_t)&dword_100980298);
    v0 = dword_10098029C;
    v1 = dword_10098029C;
    v2 = dword_100980298;
    while ((_DWORD)v2)
    {
      if (v2 > v1)
      {
        v3 = v2 % v1;
        v2 = v1;
        v1 = v3;
      }
      v4 = v1;
      v1 = v2;
      v5 = (_DWORD)v4 == (_DWORD)v2;
      v2 = v4;
      if (v5)
      {
        LODWORD(v1) = 1;
        break;
      }
    }
    v6 = dword_10098029C / v1;
    dword_100980298 /= v1;
    dword_10098029C /= v1;
    if ((v0 / v1) >> 1 >= 0x863)
    {
      sub_100253460();
      v6 = dword_10098029C;
    }
    dword_10098029C = 1000000 * v6;
  }
  return mach_continuous_time() * dword_100980298 / dword_10098029C;
}

void sub_100006490(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](LeDeviceCache, "sharedInstance"));
  objc_msgSend(v1, "tryLoadProtectedCache");

}

void sub_1000064CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1000064E0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  v2 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 240);
    v4 = *(_QWORD *)(a1 + 264);
    v6 = 134218240;
    v7 = v3;
    v8 = 2048;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "evaluateScanRxThresholds fDiscoveryScanThresholds:%lu fConnectScanThresholds:%lu", (uint8_t *)&v6, 0x16u);
  }
  sub_100008B5C(a1);
  sub_10000C630(a1);
  return sub_10000DCB8(a1);
}

void sub_1000065AC(os_unfair_lock_s *a1)
{
  os_unfair_lock_lock(a1);
  os_unfair_lock_unlock(a1);
  if (a1)
  {
    sub_100070B24((uint64_t)a1);
    operator delete();
  }
}

uint64_t sub_1000065FC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v6[16];
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 40);
  v2 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "cancelSoftwareScanRxTimer", v6, 2u);
  }
  if (!*(_BYTE *)(a1 + 320))
  {
    v3 = *(NSObject **)(a1 + 328);
    if (v3)
    {
      v4 = qword_1009999E0;
      if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "fSoftwareScanRxTimer destroyed!", v6, 2u);
        v3 = *(NSObject **)(a1 + 328);
      }
      dispatch_source_cancel(v3);
      dispatch_release(*(dispatch_object_t *)(a1 + 328));
      *(_QWORD *)(a1 + 328) = 0;
    }
  }
  return sub_100034234((uint64_t)v7);
}

void sub_1000066E8(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
  }
}

BOOL sub_10000671C(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 v4;
  unsigned __int8 uu2[16];

  v3 = a2;
  sub_100030BCC(uu2, v3);
  v4 = a1 + 56 != sub_10000C5B8(a1 + 48, uu2);

  return v4;
}

void sub_1000067A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000067B8(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v9[2];

  v3 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v4 = (id *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v3);
  if (v4 && (v5 = v4[8]) != 0)
  {
    v6 = v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "beaconIdentifier"));

  }
  else
  {
    v7 = 0;
  }
  sub_100034234((uint64_t)v9);

  return v7;
}

void sub_100006844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100006870(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  NSObject *v6;

  v5 = 101;
  if (a2 <= 2 && a5 <= 0xF)
  {
    if (off_100985010)
    {
      v5 = off_100985010();
      if (!(_DWORD)v5)
        return v5;
    }
    else
    {
      v5 = 3601;
    }
    if (sub_10005549C())
    {
      sub_100054530("VSC failed %!", v5);
      v6 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  return v5;
}

uint64_t sub_10000690C(char a1, char a2, char a3, char a4, char a5, __int16 a6, __int16 a7, uint64_t (*a8)())
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  result = sub_10004BC7C(&v26);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v27))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6101, "OI_STATUS _BCM_OlympicLESetScanEnable(const uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v20 = WORD2(v27);
      if (WORD1(v27) > WORD2(v27) && BYTE6(v27) == 2)
      {
        ++WORD2(v27);
        *(_BYTE *)(v26 + v20) = a1;
        if (HIBYTE(v27))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6102, "OI_STATUS _BCM_OlympicLESetScanEnable(const uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v21 = WORD2(v27);
          if (WORD1(v27) > WORD2(v27) && BYTE6(v27) == 2)
          {
            ++WORD2(v27);
            *(_BYTE *)(v26 + v21) = a2;
            if (HIBYTE(v27))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6103, "OI_STATUS _BCM_OlympicLESetScanEnable(const uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
            }
            else
            {
              v22 = WORD2(v27);
              if (WORD1(v27) > WORD2(v27) && BYTE6(v27) == 2)
              {
                ++WORD2(v27);
                *(_BYTE *)(v26 + v22) = a3;
                if (HIBYTE(v27))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6104, "OI_STATUS _BCM_OlympicLESetScanEnable(const uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
                }
                else
                {
                  v23 = WORD2(v27);
                  if (WORD1(v27) > WORD2(v27) && BYTE6(v27) == 2)
                  {
                    ++WORD2(v27);
                    *(_BYTE *)(v26 + v23) = a4;
                    if (HIBYTE(v27))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6105, "OI_STATUS _BCM_OlympicLESetScanEnable(const uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
                    }
                    else
                    {
                      v24 = WORD2(v27);
                      if (WORD1(v27) > WORD2(v27) && BYTE6(v27) == 2)
                      {
                        ++WORD2(v27);
                        *(_BYTE *)(v26 + v24) = a5;
                        if (HIBYTE(v27))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6106, "OI_STATUS _BCM_OlympicLESetScanEnable(const uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
                        }
                        else if (WORD1(v27) - WORD2(v27) > 1 && BYTE6(v27) == 2)
                        {
                          *(_WORD *)(v26 + WORD2(v27)) = a7;
                          v25 = WORD2(v27) + 2;
                          WORD2(v27) += 2;
                          if (HIBYTE(v27))
                          {
                            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6107, "OI_STATUS _BCM_OlympicLESetScanEnable(const uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
                          }
                          else if (WORD1(v27) - v25 > 1 && BYTE6(v27) == 2)
                          {
                            *(_BYTE *)(v26 + v25) = a6;
                            *(_BYTE *)(v26 + WORD2(v27) + 1) = HIBYTE(a6);
                            WORD2(v27) += 2;
                            return sub_10004C8A0(553, v26, BYTE4(v27), a8, (uint64_t)sub_10004AE9C, v17, v18, v19);
                          }
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
  return result;
}

void sub_100006EB0(uint64_t a1, void *a2)
{
  uint64_t v4;
  xpc_object_t value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD v14[5];
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;

  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v15 = 0;
  v4 = sub_100065478();
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 632))(v4, *(_QWORD *)(a1 + 96), 0);
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  v12 = sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgUUIDs");
  *((_DWORD *)v20 + 6) = v12;
  if (!v12)
  {
    if (!sub_100018C6C(v15, "kCBScanOptionReadADVBuffersNow"))
      operator new();
    if (*(_BYTE *)(a1 + 190))
    {
      v13 = sub_1000419F4();
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_100558E74;
      v14[3] = &unk_1009193E8;
      v14[4] = &v19;
      sub_100023D84(v13, v14);
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_100700CCC();
    }
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  _Block_object_dispose(&v19, 8);
}

void sub_100007604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  _Unwind_Resume(exception_object);
}

void sub_10000768C(uint64_t a1)
{
  dispatch_sync(*(dispatch_queue_t *)(a1 + 8), &stru_100929100);
}

void sub_100007970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  void *v20;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100007C4C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](LeDeviceCache, "sharedInstance"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v3, "readDeviceByAddress:", *(_QWORD *)(a1 + 40));

  objc_autoreleasePoolPop(v2);
}

void sub_100007CA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100007CB8(uint64_t a1)
{
  __int128 v1;
  NSObject *v2;
  _QWORD v3[4];
  __int128 v4;

  v1 = *(_OWORD *)(a1 + 32);
  v2 = **(NSObject ***)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100015E60;
  v3[3] = &unk_100918090;
  v4 = v1;
  dispatch_async(v2, v3);
}

void sub_100007D14(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](LeDeviceCache, "sharedInstance"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v3, "readDevice:", *(_QWORD *)(a1 + 32));

  objc_autoreleasePoolPop(v2);
}

void sub_100007D70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100007D80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  const char *v14;

  v2 = *(_QWORD *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)v2);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    goto LABEL_11;
  v4 = *(_DWORD *)(a1 + 40);
  v5 = v2 + 16;
  do
  {
    v6 = *(_DWORD *)(v3 + 32);
    v7 = v6 < v4;
    if (v6 >= v4)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (!v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 + 16 || v4 < *(_DWORD *)(v5 + 32))
  {
LABEL_11:
    v9 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
      sub_100709D84(v9);
    v5 = v2 + 16;
  }
  v10 = *(_DWORD *)(v5 + 40);
  if (!v10)
  {
    v12 = qword_100999860;
    if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)(v5 + 40) = -1;
      goto LABEL_19;
    }
    v13 = 136446210;
    v14 = "clientInfo.numConnections > 0";
    _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v13, 0xCu);
    v10 = *(_DWORD *)(v5 + 40);
  }
  v11 = v10 - 1;
  *(_DWORD *)(v5 + 40) = v11;
  if (!v11)
  {
    dispatch_release(*(dispatch_object_t *)(v5 + 48));
    sub_1000040CC((uint64_t **)(v2 + 8), (uint64_t *)v5);
    operator delete((void *)v5);
  }
LABEL_19:
  os_unfair_lock_unlock((os_unfair_lock_t)v2);
}

void sub_100007EF4(uint64_t a1, void *a2, int a3)
{
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  int v11;

  v5 = a2;
  v6 = sub_10006BBAC();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10000963C;
  v8[3] = &unk_100919818;
  v10 = a1;
  v7 = v5;
  v9 = v7;
  v11 = a3;
  sub_100041A34(v6, v8);

}

void sub_100007F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_100007FAC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  int v7;
  id v8;

  v3 = a2;
  v4 = objc_msgSend(*(id *)(a1 + 296), "containsObject:", v3);
  if ((_DWORD)v4)
  {
    v5 = qword_1009998F0;
    if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 138543362;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "\"%{public}@\" restored by bluetooth", (uint8_t *)&v7, 0xCu);
    }
  }

  return v4;
}

void sub_100008078(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100008090(uint64_t a1, int a2, int a3, _WORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  NSObject *v15;
  BOOL v16;
  int v17;
  NSObject *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  NSObject *v32;
  NSObject *v34;
  _BOOL4 v35;
  char v38;
  _BYTE v39[15];
  char v40;
  _BYTE v41[15];
  uint8_t v42[4];
  _DWORD v43[3];
  uint8_t buf[4];
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  _BOOL4 v51;
  __int16 v52;
  _BOOL4 v53;

  *a4 = 0;
  v4 = *(_QWORD **)(a1 + 1816);
  v5 = (_QWORD *)(a1 + 1824);
  if (v4 == (_QWORD *)(a1 + 1824))
  {
    v7 = 0;
LABEL_40:
    v21 = 0;
LABEL_41:
    v22 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v45 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "MATCH TABLE nextHandle:%d", buf, 8u);
      if (!*a4)
        return 4;
    }
    else if (!v21)
    {
      return 4;
    }
    if (v7 != 5)
      return 0;
    v23 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
      sub_100717D34(v23, v24, v25, v26, v27, v28, v29, v30);
    return 4;
  }
  v7 = 0;
  v8 = *(_QWORD **)(a1 + 1816);
  do
  {
    if (*((_WORD *)v8 + 16))
      ++v7;
    v9 = (_QWORD *)v8[1];
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v8[2];
        v16 = *v10 == (_QWORD)v8;
        v8 = v10;
      }
      while (!v16);
    }
    v8 = v10;
  }
  while (v10 != v5);
  if (v4 == v5)
    goto LABEL_40;
  while (1)
  {
    v11 = *((unsigned __int8 *)v4 + 28);
    v12 = *((unsigned __int16 *)v4 + 15);
    v13 = *((unsigned __int16 *)v4 + 16);
    v14 = *((unsigned __int16 *)v4 + 18);
    v15 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
      break;
    if (!v13)
      goto LABEL_24;
LABEL_14:
    v16 = v11 == 255 || v14 == 0;
    if (v16 && os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_FAULT))
      sub_100717ED8(&v40, v41);
    if (v11 == a2)
    {
      v32 = qword_100999828;
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109632;
        v45 = a2;
        v46 = 1024;
        v47 = v12;
        v48 = 1024;
        v49 = v14;
        _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "MATCH TABLE table for type:%d is already created with handle %d and size:%d", buf, 0x14u);
      }
      *a4 = v12;
      return 15;
    }
LABEL_32:
    v19 = (_QWORD *)v4[1];
    if (v19)
    {
      do
      {
        v20 = v19;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        v20 = (_QWORD *)v4[2];
        v16 = *v20 == (_QWORD)v4;
        v4 = v20;
      }
      while (!v16);
    }
    v4 = v20;
    if (v20 == v5)
    {
      v21 = (unsigned __int16)*a4;
      goto LABEL_41;
    }
  }
  v17 = *((unsigned __int16 *)v4 + 17);
  *(_DWORD *)buf = 67110144;
  v45 = v12;
  v46 = 1024;
  v47 = v11;
  v48 = 1024;
  v49 = v14;
  v50 = 1024;
  v51 = v13 != 0;
  v52 = 1024;
  v53 = v17 != 0;
  _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "MATCH TABLE handle:%d type:%d length:%d isCreated:%d isEnabled:%d", buf, 0x20u);
  if (v13)
    goto LABEL_14;
LABEL_24:
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
    sub_100717EAC(&v38, v39);
  if (v11 != a2)
  {
    if (v11 == 255 && !*a4)
    {
      v18 = qword_100999828;
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
        sub_100717E70(v42, v43, v18);
      *a4 = v12;
    }
    goto LABEL_32;
  }
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
    sub_100717E10();
  v34 = qword_100999828;
  v35 = os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG);
  if (v14 != a3)
  {
    if (v35)
    {
      *(_DWORD *)buf = 67109632;
      v45 = a2;
      v46 = 1024;
      v47 = v12;
      v48 = 1024;
      v49 = v14;
      _os_log_debug_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "MATCH TABLE so close! table for type:%d is already registered with handle %d and size:%d", buf, 0x14u);
    }
    *a4 = 0;
    return 15;
  }
  if (v35)
    sub_100717DA0();
  result = 0;
  *a4 = v12;
  return result;
}

uint64_t sub_100008708(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1009230F0;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    sub_100005A44(v2);
  if (qword_10097AB88 != -1)
    dispatch_once(&qword_10097AB88, &stru_100923130);
  sub_100068F1C(qword_10097AB80, *(_DWORD *)(a1 + 40));

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));

  return a1;
}

void sub_1000087A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));

  _Unwind_Resume(a1);
}

uint64_t sub_1000087E4(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  int v6;
  int v7;
  int v8;
  BOOL v9;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  NSObject *v17;
  char *p_p;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v23;
  NSObject *v24;
  char *v25;
  NSObject *v26;
  char *v27;
  NSObject *v28;
  char *v29;
  char *v30;
  char *v31;
  NSObject *v32;
  char *v33;
  char *v34;
  char *v35;
  void *__p;
  char v38;
  uint8_t buf[4];
  char *v40;
  __int16 v41;
  unsigned int v42;
  __int16 v43;
  unsigned int v44;
  __int16 v45;
  unsigned int v46;
  __int16 v47;
  unsigned int v48;
  __int16 v49;
  unsigned int v50;

  v6 = *(_DWORD *)(a2 + 24);
  v8 = *(_DWORD *)(a2 + 8);
  v7 = *(_DWORD *)(a2 + 12);
  if (v8)
    v9 = 0;
  else
    v9 = v6 == 0;
  if (v9 && v7 == 0)
  {
    v32 = qword_1009999E0;
    if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
    {
      v35 = *(char **)(a2 + 32);
      v34 = (char *)(a2 + 32);
      v33 = v35;
      if (v34[23] >= 0)
        v33 = v34;
      *(_DWORD *)buf = 136315138;
      v40 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "%s ignoring invalid threshold request for minimum calculation", buf, 0xCu);
    }
    return 0;
  }
  else
  {
    if (v8)
      v14 = v8 - *(_DWORD *)(a2 + 16);
    else
      v14 = 0;
    if (v7)
      v15 = v7 - *(_DWORD *)(a2 + 20);
    else
      v15 = 0;
    if (v6)
      v16 = v6 - *(_DWORD *)(a2 + 28);
    else
      v16 = 0;
    v17 = qword_1009999E0;
    if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
    {
      sub_100017BFC((unsigned __int8 *)a2);
      if (v38 >= 0)
        p_p = (char *)&__p;
      else
        p_p = (char *)__p;
      v19 = *a3;
      v20 = *a4;
      *(_DWORD *)buf = 136316418;
      v40 = p_p;
      v41 = 1024;
      v42 = v14;
      v43 = 1024;
      v44 = v15;
      v45 = 1024;
      v46 = v19;
      v47 = 1024;
      v48 = v20;
      v49 = 1024;
      v50 = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s sessionTotalRxDelta=%u sessionBtMCRxDelta=%u totalRxDeltaMs=%u btMCRxDelta=%u sessionTimeoutDelta=%u", buf, 0x2Au);
      if (v38 < 0)
        operator delete(__p);
      v6 = *(_DWORD *)(a2 + 24);
    }
    if (v6)
      v21 = v16 == 0;
    else
      v21 = 1;
    v23 = !v21 && v16 < *a5;
    if ((_DWORD)v23 == 1)
    {
      *a5 = v16;
      v24 = qword_1009999E0;
      if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
      {
        v25 = (char *)(a2 + 32);
        if (*(char *)(a2 + 55) < 0)
          v25 = *(char **)(a2 + 32);
        *(_DWORD *)buf = 136315394;
        v40 = v25;
        v41 = 1024;
        v42 = v16;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%s set new minimal timeout=%u", buf, 0x12u);
      }
    }
    if (*(_DWORD *)(a2 + 8))
    {
      if (v14)
      {
        if (*a3 > v14)
        {
          *a3 = v14;
          v26 = qword_1009999E0;
          v23 = 1;
          if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
          {
            v27 = (char *)(a2 + 32);
            if (*(char *)(a2 + 55) < 0)
              v27 = *(char **)(a2 + 32);
            *(_DWORD *)buf = 136315394;
            v40 = v27;
            v41 = 1024;
            v42 = v14;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "%s set new minimal totalRxDeltaMs=%u", buf, 0x12u);
          }
        }
      }
    }
    if (*(_DWORD *)(a2 + 12))
    {
      if (v15)
      {
        if (*a4 > v15)
        {
          *a4 = v15;
          v28 = qword_1009999E0;
          v23 = 1;
          if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
          {
            v31 = *(char **)(a2 + 32);
            v30 = (char *)(a2 + 32);
            v29 = v31;
            if (v30[23] >= 0)
              v29 = v30;
            *(_DWORD *)buf = 136315394;
            v40 = v29;
            v41 = 1024;
            v42 = v15;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "%s set new minimal btMCRxDeltaMs=%u", buf, 0x12u);
          }
        }
      }
    }
  }
  return v23;
}

uint64_t sub_100008B5C(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD v16[2];
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 40);
  v2 = qword_1009999E0;
  v3 = os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 344);
    v5 = *(_DWORD *)(a1 + 348);
    v6 = *(_DWORD *)(a1 + 356);
    v7 = *(_DWORD *)(a1 + 360);
    *(_DWORD *)buf = 67109888;
    v18 = v4;
    v19 = 1024;
    v20 = v5;
    v21 = 1024;
    v22 = v6;
    v23 = 1024;
    v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "updateActualRx fLastScan: TotalRx=%u BtMCRx=%u fLastConnectionScan: TotalRx=%u BtMCRx=%u", buf, 0x1Au);
  }
  v8 = *(_QWORD **)(a1 + 224);
  if (v8 != (_QWORD *)(a1 + 232))
  {
    do
    {
      sub_1004BABA8(v3, (uint64_t)(v8 + 5), *(_DWORD *)(a1 + 344), *(_DWORD *)(a1 + 348), *(_DWORD *)(a1 + 352));
      v9 = (_QWORD *)v8[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v8[2];
          v11 = *v10 == (_QWORD)v8;
          v8 = v10;
        }
        while (!v11);
      }
      v8 = v10;
    }
    while (v10 != (_QWORD *)(a1 + 232));
  }
  v12 = *(_QWORD **)(a1 + 248);
  if (v12 != (_QWORD *)(a1 + 256))
  {
    do
    {
      sub_1004BABA8(v3, (uint64_t)(v12 + 7), *(_DWORD *)(a1 + 356), *(_DWORD *)(a1 + 360), *(_DWORD *)(a1 + 364));
      v13 = (_QWORD *)v12[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v12[2];
          v11 = *v14 == (_QWORD)v12;
          v12 = v14;
        }
        while (!v11);
      }
      v12 = v14;
    }
    while (v14 != (_QWORD *)(a1 + 256));
  }
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  return sub_100034234((uint64_t)v16);
}

void sub_100008D04(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100008FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  void *v20;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10000903C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  int v10;
  NSObject *v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  int v19;
  id v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  const char *v24;

  v3 = a2;
  if (!v3)
  {
    v8 = qword_100999908;
    if (os_log_type_enabled((os_log_t)qword_100999908, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v19) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BundleID is allowed - bundleID is not available", (uint8_t *)&v19, 2u);
    }
    goto LABEL_9;
  }
  v4 = sub_100027F68();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4) & 1) == 0)
  {
LABEL_9:
    v7 = 1;
    goto LABEL_10;
  }
  if ((objc_msgSend(v3, "hasPrefix:", CFSTR("com.apple.")) & 1) != 0
    || objc_msgSend(v3, "hasPrefix:", CFSTR("com.Apple.")))
  {
    v5 = CBGenerateObfuscatedSHA256HashedString(v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if ((objc_msgSend((id)qword_100999C50, "containsObject:", v6) & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 152))
      {
        v7 = 0;
        goto LABEL_13;
      }
      v18 = qword_100999908;
      if (os_log_type_enabled((os_log_t)qword_100999908, OS_LOG_TYPE_DEFAULT))
      {
        v19 = 138543362;
        v20 = v3;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%{public}@ is NOT in the CB allowed list but is allowed with overriding.", (uint8_t *)&v19, 0xCu);
      }
    }
    v7 = 1;
LABEL_13:

    goto LABEL_15;
  }
  v7 = 1;
LABEL_15:
  v10 = *(unsigned __int8 *)(a1 + 153);
  v11 = qword_100999908;
  v12 = os_log_type_enabled((os_log_t)qword_100999908, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (v12)
    {
      v13 = CBGenerateObfuscatedSHA256HashedString(v3);
      v14 = objc_claimAutoreleasedReturnValue(v13);
      v15 = (void *)v14;
      v16 = "N";
      v19 = 138543874;
      v20 = v3;
      if ((_DWORD)v7)
        v16 = "Y";
      v21 = 2114;
      v22 = v14;
      v23 = 2082;
      v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "BundleID %{public}@ hash %{public}@ is in the allowed CBSession list:%{public}s", (uint8_t *)&v19, 0x20u);

    }
  }
  else if (v12)
  {
    v17 = "N";
    if ((_DWORD)v7)
      v17 = "Y";
    v19 = 138543618;
    v20 = v3;
    v21 = 2082;
    v22 = (uint64_t)v17;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "BundleID %{public}@ is in the allowed CBSession list:%{public}s", (uint8_t *)&v19, 0x16u);
  }
LABEL_10:

  return v7;
}

void sub_1000092C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000092F4(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_100009388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1000093B0(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_10000944C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  __int128 v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__p[2];
  uint64_t v24;
  _OWORD v25[3];

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(unsigned __int8 *)(v2 + 185);
  v4 = *(unsigned __int8 *)(a1 + 132);
  v5 = *(unsigned __int8 *)(v2 + 186);
  v6 = *(unsigned __int8 *)(a1 + 133);
  v7 = *(unsigned __int8 *)(v2 + 88);
  v18 = *(_QWORD *)(a1 + 80);
  v19 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 88);
  v8 = sub_10001CB50(v2) | ((unint64_t)*(unsigned __int8 *)(v2 + 175) << 8) | ((unint64_t)*(unsigned __int8 *)(v2 + 86) << 16) | ((unint64_t)*(unsigned __int8 *)(v2 + 104) << 40);
  v9 = *(unsigned __int8 *)(v2 + 177);
  v10 = *(unsigned __int8 *)(v2 + 87);
  v21 = v5;
  v22 = v3;
  v20 = v6;
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  v11 = v8 | (v9 << 24);
  v12 = off_100978168;
  v13 = *(void **)(v2 + 48);
  v14 = *(_OWORD *)(a1 + 112);
  v25[0] = *(_OWORD *)(a1 + 96);
  v25[1] = v14;
  v15 = *(_DWORD *)(v2 + 40);
  v16 = *(void **)(a1 + 32);
  if (*(char *)(v2 + 79) < 0)
  {
    sub_10003430C(__p, *(void **)(v2 + 56), *(_QWORD *)(v2 + 64));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v2 + 56);
    v24 = *(_QWORD *)(v2 + 72);
  }
  *(_QWORD *)(v2 + 128) = sub_1002DE404((uint64_t)v12, v13, v2 + 144, v25, v15, v16, (uint64_t)__p, *(_DWORD *)(a1 + 128), *(void **)(a1 + 40), (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), ((unint64_t)(v17 != 0) << 56) | ((unint64_t)(v18 != 0) << 48) | (v7 << 40) | (v20 << 32) | (v21 << 24) | (v22 << 16) | (v4 << 8) | (v19 != 0), v11, (v11 | (v10 << 32)) >> 32, 0);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
}

void sub_100009620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10000963C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  NSMutableDictionary *v4;
  void *v5;
  NSMutableDictionary *v6;
  NSMutableDictionary *v7;
  unsigned int v8;
  const __CFString *v9;
  id v10;
  NSMutableDictionary *v11;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(v2 + 800);
  if (!v3)
  {
    v4 = objc_opt_new(NSMutableDictionary);
    v5 = *(void **)(v2 + 800);
    *(_QWORD *)(v2 + 800) = v4;

    v3 = *(void **)(v2 + 800);
  }
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", *(_QWORD *)(a1 + 32)));
  v6 = (NSMutableDictionary *)objc_msgSend(v10, "mutableCopy");

  v7 = v6;
  if (!v6)
    v7 = objc_opt_new(NSMutableDictionary);
  v8 = *(_DWORD *)(a1 + 48) - 1;
  if (v8 > 9)
    v9 = CFSTR("CBCentralManager_scan");
  else
    v9 = off_10092AEB8[v8];
  v11 = v7;
  -[NSMutableDictionary setObject:forKey:](v7, "setObject:forKey:", &__kCFBooleanTrue, v9);
  -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", *(_QWORD *)(a1 + 32), CFSTR("BundleID"));
  objc_msgSend(*(id *)(v2 + 800), "setObject:forKeyedSubscript:", v11, *(_QWORD *)(a1 + 32));

}

void sub_100009724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_10000973C(uint64_t a1, unint64_t a2, int a3, int a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD v18[2];
  uint8_t buf[4];
  unint64_t v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 40);
  if (!a2)
  {
LABEL_18:
    v15 = 0;
    goto LABEL_19;
  }
  v10 = *(_QWORD **)(a1 + 200);
  v9 = (_QWORD *)(a1 + 200);
  v8 = v10;
  if (!v10)
    goto LABEL_16;
  v11 = v9;
  do
  {
    v12 = v8[4];
    v13 = v12 >= a2;
    if (v12 >= a2)
      v14 = v8;
    else
      v14 = v8 + 1;
    if (v13)
      v11 = v8;
    v8 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 == v9 || v11[4] > a2 || *((_DWORD *)v11 + 10) != a3 || *((_DWORD *)v11 + 11) != a4)
  {
LABEL_16:
    v16 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218496;
      v20 = a2;
      v21 = 1024;
      v22 = a3;
      v23 = 1024;
      v24 = a4;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Invalid handle identifier mapping found for handle %p with pid \"%d\", pidVersion \"%d\"", buf, 0x18u);
    }
    goto LABEL_18;
  }
  v15 = 1;
LABEL_19:
  sub_100034234((uint64_t)v18);
  return v15;
}

void sub_100009AAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100009AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  id v8;
  _QWORD *v9;
  id v10;
  void *v11;
  int v12;
  int v13;
  BOOL v14;
  xpc_object_t v15;
  NSObject *v16;
  _QWORD *v17;
  int v18;
  const char *v19;
  _BYTE bytes[6];
  uint8_t buf[4];
  _QWORD *v22;
  __int16 v23;
  _QWORD v24[3];

  v7 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v8 = sub_100021770(a3);
    v9 = (_QWORD *)objc_claimAutoreleasedReturnValue(v8);
    v10 = sub_100021770(a4);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    *(_DWORD *)buf = 138412546;
    v22 = v9;
    v23 = 2112;
    v24[0] = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "advertisingAddressDidChange connectable:%@ non-connectable:%@", buf, 0x16u);

  }
  v12 = *(_DWORD *)(a1 + 80);
  if (v12 >= 1 && ((v13 = *(_DWORD *)(a1 + 136), v13 != 5) ? (v14 = v13 == 10) : (v14 = 1), v14))
  {
    v15 = xpc_dictionary_create(0, 0, 0);
    buf[0] = BYTE5(a3);
    buf[1] = BYTE4(a3);
    buf[2] = BYTE3(a3);
    buf[3] = BYTE2(a3);
    LOBYTE(v22) = BYTE1(a3);
    BYTE1(v22) = a3;
    bytes[0] = BYTE5(a4);
    bytes[1] = BYTE4(a4);
    bytes[2] = BYTE3(a4);
    bytes[3] = BYTE2(a4);
    bytes[4] = BYTE1(a4);
    bytes[5] = a4;
    xpc_dictionary_set_data(v15, "kCBConnectableAdvertisingAddress", buf, 6uLL);
    xpc_dictionary_set_int64(v15, "kCBConnectableAdvertisingAddressType", BYTE6(a3));
    xpc_dictionary_set_data(v15, "kCBNonConnectableAdvertisingAddress", bytes, 6uLL);
    xpc_dictionary_set_int64(v15, "kCBNonConnectableAdvertisingAddressType", BYTE6(a4));
    sub_10005E138(a1, 59, v15, 1);
  }
  else
  {
    v16 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v17 = (_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        v17 = (_QWORD *)*v17;
      v18 = *(_DWORD *)(a1 + 136);
      *(_DWORD *)buf = 136315650;
      if (v18 == 5)
        v19 = "";
      else
        v19 = "not ";
      v22 = v17;
      v23 = 1024;
      LODWORD(v24[0]) = v12;
      WORD2(v24[0]) = 2080;
      *(_QWORD *)((char *)v24 + 6) = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Ignore advertisingAddressDidChange for session %s with access level : %d and manager state %spowered on", buf, 0x1Cu);
    }
  }
}

void sub_100009D64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100009D7C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 336), "containsObject:", v3) & 1) != 0)
    v4 = 1;
  else
    v4 = (uint64_t)objc_msgSend(*(id *)(a1 + 344), "containsObject:", v3);

  return v4;
}

void sub_100009DD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_BYTE *sub_100009DE0@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  _BYTE *result;
  __int128 *v9;
  __int128 v10;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = v7 + 32;
  v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_10003430C(result, *(void **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    *((_QWORD *)v7 + 6) = *((_QWORD *)v9 + 2);
    *(_OWORD *)result = v10;
  }
  *((_QWORD *)v7 + 7) = 0;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100009E74(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002A4BA0(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100009E90(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  _QWORD v6[4];
  char v7;
  uint8_t buf[4];
  const char *v9;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "off";
    if (a2)
      v5 = "on";
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Microphone is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100066460;
  v6[3] = &unk_100923AA0;
  v7 = a2;
  sub_10000EF90(a1 + 142, v6);
}

void sub_100009F90(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  sub_10000A0C8(16, a2);
  v4 = sub_10000A1A4(a1, a2, 0);
  if (v4)
  {
    v5 = v4;
    sub_10006AA24(v4, a2);
    if (qword_100977FC0 != -1)
      dispatch_once(&qword_100977FC0, &stru_100924E50);
    sub_100014F60(qword_100977FB8, a2);
    v6 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(v5 + 88);
      v8 = *(_QWORD *)(v5 + 368);
      v9 = 138543618;
      v10 = v7;
      v11 = 2048;
      v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Stopping scan for session \"%{public}@\" - %llu advertisements delivered", (uint8_t *)&v9, 0x16u);
    }
    if (*(_BYTE *)(v5 + 24))
    {
      if (*(_QWORD *)(v5 + 96))
        sub_10006F07C(a1);
    }
  }
}

void sub_10000A0C8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void *__p[2];
  char v6;

  if (qword_100991AA8 != -1)
    dispatch_once(&qword_100991AA8, &stru_1009223C0);
  if (byte_100991AA0)
  {
    if (a2)
    {
      sub_1000340DC(a2, (uint64_t)__p);
      a2 = sub_100417910((uint64_t)__p);
      if (v6 < 0)
        operator delete(__p[0]);
    }
    v4 = a1 - 15;
    if ((unint64_t)(a1 - 15) < 8 && ((0xC3u >> v4) & 1) != 0)
      kdebug_trace(dword_10073D064[v4], a2, 0, 0, 0);
  }
}

void sub_10000A188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000A1A4(uint64_t a1, unint64_t a2, unsigned int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  int v12;
  _BOOL4 v13;
  NSObject *v14;
  const __CFString *v15;
  void **v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  const __CFString *v21;
  __int16 v22;
  void **v23;

  v7 = *(_QWORD **)(a1 + 232);
  v5 = (_QWORD *)(a1 + 232);
  v6 = v7;
  if (v7)
  {
    v8 = v5;
    do
    {
      v9 = v6[4];
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = v6;
      else
        v11 = v6 + 1;
      if (v10)
        v8 = v6;
      v6 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != v5 && v8[4] <= a2)
    {
      v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v8[5] + 16))(v8[5]);
      if (a3 == 2 || v12 == a3)
        return v8[5];
    }
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100924E10);
  v13 = sub_10006C874(qword_100977B48, a2);
  v14 = qword_100999898;
  if (v13)
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_FAULT))
    {
      if (a3 > 3)
        v15 = CFSTR("Unknown");
      else
        v15 = (const __CFString *)*((_QWORD *)&off_100924F30 + (int)a3);
      sub_1000340DC(a2, (uint64_t)__p);
      if (v19 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      *(_DWORD *)buf = 138543618;
      v21 = v15;
      v22 = 2082;
      v23 = v17;
      _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Couldn't find a registered %{public}@ app for session \"%{public}s\"", buf, 0x16u);
      if (v19 < 0)
        operator delete(__p[0]);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006DCEC8(a3, a2, v14);
  }
  return 0;
}

uint64_t sub_10000A378(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  NSObject *v6;
  NSObject *v7;
  uint64_t v9;
  _QWORD v10[2];
  _DWORD buf[3];

  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v10[0] = 0;
    v10[1] = 0;
    sub_10003415C((uint64_t)v10, a1 + 40);
    if (!*(_BYTE *)(a1 + 108))
    {
      sub_100034264((uint64_t)v10);
      (**(void (***)(uint64_t))a1)(a1);
      sub_100034188((uint64_t)v10);
    }
    if (a1 + 128 == sub_10001F2AC(a1 + 120, (const void **)a2))
    {
      if (sub_10006C6C0(a1, a2))
        operator new();
    }
    else
    {
      v6 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a2 + 23) >= 0)
          v9 = a2;
        else
          v9 = *(_QWORD *)a2;
        buf[0] = 136446210;
        *(_QWORD *)&buf[1] = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Session \"%{public}s\" already attached", (uint8_t *)buf, 0xCu);
        v6 = qword_1009997E8;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
        sub_1006FE0AC();
    }
    sub_100034234((uint64_t)v10);
  }
  else
  {
    v7 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006FE038((_QWORD *)a2, v4 < 0, v7);
  }
  return 100;
}

void sub_10000A620()
{
  operator delete();
}

void sub_10000A668(os_unfair_lock_s *a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  _QWORD v6[5];
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000340DC(a2, (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'session attached' event for session \"%{public}s\"", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100022970;
  v6[3] = &unk_100935028;
  v6[4] = a2;
  sub_1000228B4(a1 + 2, v6);
}

id sub_10000A780(uint64_t a1, unsigned int a2)
{
  const __CFString *v3;
  void *v4;
  const __CFString *v5;
  void *v6;

  v3 = sub_10000A800(a1, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = CFSTR("com.apple.Bluetooth.");
  if (a2 == 64)
    v5 = CFSTR("com.apple.");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), v5, v4));

  return v6;
}

void sub_10000A7F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *sub_10000A800(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x7B)
    return CFSTR("Unknown");
  else
    return (const __CFString *)*((_QWORD *)&off_10092A6D0 + (int)a2);
}

void sub_10000A824(uint64_t a1, int a2)
{
  int v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint8_t v15[16];
  uint8_t buf[16];

  sub_10005D5E4(a1);
  v4 = *(_DWORD *)(a1 + 1960);
  if (v4)
  {
    if (v4 != 2)
    {
      v5 = qword_100999828;
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_FAULT))
        sub_1007175DC(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    v13 = qword_100999828;
    if (a2)
    {
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
        sub_10071757C();
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Scanning started successfully", buf, 2u);
      }
      *(_QWORD *)(a1 + 2096) = 0;
      *(_DWORD *)(a1 + 1960) = 3;
      sub_10005B0B8(a1, 0);
    }
  }
  else
  {
    v14 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Ignoring late scan started event", v15, 2u);
    }
  }
}

void sub_10000A988(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  os_log_t *v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  void *i;
  unsigned int v21;
  int v22;
  uint64_t v23;
  int v24;
  _BOOL4 v25;
  _BOOL4 v26;
  os_log_t v27;
  NSObject *v28;
  const char *v29;
  os_log_t *v30;
  NSObject *v31;
  _BOOL4 v32;
  uint64_t v33;
  os_log_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  id obj;
  void *v43;
  _QWORD v44[5];
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE __p[18];
  __int16 v51;
  int v52;
  __int16 v53;
  _BOOL4 v54;
  __int16 v55;
  _BOOL4 v56;
  _BYTE v57[128];

  v3 = a3;
  v4 = *(_QWORD **)(a1 + 232);
  if (!v4)
    goto LABEL_54;
  v7 = (_QWORD *)(a1 + 232);
  do
  {
    v8 = v4[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == (_QWORD *)(a1 + 232) || v7[4] > a2)
  {
LABEL_54:
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006DD67C();
    return;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v7[5] + 24))(v7[5], a3);
  if (v3 == 16 || v3 == 8)
    *(_BYTE *)(v7[5] + 28) = 1;
  if (v3 == 16)
  {
    v11 = sub_100069D20();
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v11 + 104))(v11, a2);
    *(_QWORD *)__p = 0;
    sub_10004AD30((uint64_t)__p);
    v12 = *(__int16 *)&__p[4];
    v13 = v7[5];
    *(_QWORD *)(v13 + 8) = *(int *)__p;
    *(_QWORD *)(v13 + 16) = v12;
  }
  sub_1000340DC(v7[4], (uint64_t)__p);
  if (v52 >= 0)
    v14 = __p;
  else
    v14 = *(_BYTE **)__p;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
  if (SHIBYTE(v52) < 0)
    operator delete(*(void **)__p);
  v16 = (os_log_t *)&qword_100999898;
  v17 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__p = 138543618;
    *(_QWORD *)&__p[4] = v15;
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = v3;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "AppSession state changed for %{public}@ to state %d", __p, 0x12u);
  }
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v39 = a1;
  obj = *(id *)(a1 + 352);
  v43 = v15;
  v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v57, 16);
  if (!v18)
    goto LABEL_51;
  v19 = *(_QWORD *)v47;
  v41 = v3;
  v40 = *(_QWORD *)v47;
  while (2)
  {
    for (i = 0; i != v18; i = (char *)i + 1)
    {
      if (*(_QWORD *)v47 != v19)
        objc_enumerationMutation(obj);
      v21 = objc_msgSend(*(id *)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)i), "isEqualToString:", v15) ^ 1;
      if (v3 != 16)
        LOBYTE(v21) = 1;
      if ((v21 & 1) != 0)
      {
        v27 = *v16;
        if (!os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
          continue;
        *(_DWORD *)__p = 138543362;
        *(_QWORD *)&__p[4] = v15;
        v28 = v27;
        v29 = "AppSession not found in list  %{public}@.";
        goto LABEL_44;
      }
      v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v7[5] + 16))(v7[5]);
      v23 = v7[5];
      if (v22)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
      }
      else
      {
        v24 = sub_10006AB38(v7[5]);
        v23 = v7[5];
        v25 = *(_BYTE *)(v23 + 505) != 0;
        v26 = *(_BYTE *)(v23 + 506) != 0;
      }
      v30 = v16;
      v31 = *v16;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v32 = *(_QWORD *)(v23 + 120) != 0;
        *(_DWORD *)__p = 138544386;
        *(_QWORD *)&__p[4] = v43;
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = v32;
        v51 = 1024;
        v52 = v24;
        v53 = 1024;
        v54 = v25;
        v55 = 1024;
        v56 = v26;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "TCC pending for %{public}@. Remove from tccPendingBundleList, sessionIsLive %d isDeviceAccessSession:%d isDeviceAccessMediaExtensionSession:%d isDeviceAccessPerAccessoryExtensionSession:%d", __p, 0x24u);
        v23 = v7[5];
      }
      v33 = *(_QWORD *)(v23 + 120);
      v3 = v41;
      v16 = v30;
      if (v33)
      {
        v15 = v43;
        v35 = objc_msgSend(*(id *)(v39 + 352), "removeObject:", v43);
        v36 = v7[5];
        *(_BYTE *)(v36 + 38) = 1;
        v37 = sub_10006E9D0((uint64_t)v35, v36) ^ 1;
        v38 = *v30;
        if (os_log_type_enabled(*v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 67109378;
          *(_DWORD *)&__p[4] = v37;
          *(_WORD *)&__p[8] = 2114;
          *(_QWORD *)&__p[10] = v43;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Calling readyForTCC with %d for %{public}@", __p, 0x12u);
        }
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v7[5] + 120) + 264))(*(_QWORD *)(v7[5] + 120), v37);
        goto LABEL_51;
      }
      v34 = *v30;
      v15 = v43;
      v19 = v40;
      if (os_log_type_enabled(*v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 138543362;
        *(_QWORD *)&__p[4] = v43;
        v28 = v34;
        v29 = "%{public}@ not alive";
LABEL_44:
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v29, __p, 0xCu);
        continue;
      }
    }
    v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v57, 16);
    if (v18)
      continue;
    break;
  }
LABEL_51:

  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472;
  v44[2] = sub_1000093B0;
  v44[3] = &unk_100924AC0;
  v44[4] = a2;
  v45 = v3;
  sub_1000092F4((os_unfair_lock_s *)(v39 + 192), v44);

}

void sub_10000AE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{

  _Unwind_Resume(a1);
}

uint64_t sub_10000AEE4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[2];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 88);
  v10 = sub_1000306B0(a1, v7);
  if (v10)
  {
    v11 = sub_10000B41C((uint64_t)v10, v8, v9);
  }
  else
  {
    sub_100034264((uint64_t)v13);
    v11 = 1;
  }
  sub_100034234((uint64_t)v13);

  return v11;
}

void sub_10000AF88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10000AFB0(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v7[4];
  id v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v2 = a2;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", CFSTR("com.dexcom."), CFSTR("com.medtronic."), CFSTR("com.senseonics."), 0));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000622A4;
  v7[3] = &unk_100937710;
  v4 = v2;
  v8 = v4;
  v9 = &v10;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v7);
  v5 = *((unsigned __int8 *)v11 + 24);

  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_10000B098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  uint64_t v19;

  _Block_object_dispose((const void *)(v19 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000B0C8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  v4 = *(NSObject **)(a1 + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100007D14;
  v8[3] = &unk_100929128;
  v9 = v3;
  v10 = &v11;
  v5 = v3;
  dispatch_sync(v4, v8);
  v6 = v12[3];

  _Block_object_dispose(&v11, 8);
  return v6;
}

uint64_t sub_10000B174(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD v14[2];
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  _QWORD *v18;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 40);
  if (*(_BYTE *)(a1 + 108))
  {
    if (a2)
    {
      v4 = sub_1000229D8((_QWORD *)a1, a2);
      v5 = qword_1009997E8;
      if (v4)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          v16 = v4;
          v17 = 2048;
          v18 = (_QWORD *)a2;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Detach session: %p, session handle: %p", buf, 0x16u);
        }
        sub_100034264((uint64_t)v14);
        sub_100004E38((os_unfair_lock_s *)a1, v4);
        sub_100034188((uint64_t)v14);
        v6 = *(_QWORD *)(a1 + 120);
        if (v6 != a1 + 128)
        {
          while (*(_QWORD *)(v6 + 56) != v4)
          {
            v7 = *(_QWORD **)(v6 + 8);
            if (v7)
            {
              do
              {
                v8 = v7;
                v7 = (_QWORD *)*v7;
              }
              while (v7);
            }
            else
            {
              do
              {
                v8 = *(_QWORD **)(v6 + 16);
                v9 = *v8 == v6;
                v6 = (uint64_t)v8;
              }
              while (!v9);
            }
            v6 = (uint64_t)v8;
            if (v8 == (_QWORD *)(a1 + 128))
              goto LABEL_28;
          }
          v11 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            v12 = (_QWORD *)(v6 + 32);
            if (*(char *)(v6 + 55) < 0)
              v12 = (_QWORD *)*v12;
            *(_DWORD *)buf = 134218242;
            v16 = v4;
            v17 = 2082;
            v18 = v12;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Erasing session %p from SessionMap for \"%{public}s\"", buf, 0x16u);
          }
          sub_100005290((uint64_t **)(a1 + 120), v6);
        }
LABEL_28:
        sub_100069A38(v4);
        sub_10006C57C((_QWORD *)a1, a2);
        sub_100069920(v4);
        operator delete();
      }
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006FE1A4();
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      sub_1006FE178();
    }
    v10 = 7;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006FE14C();
    v10 = 1;
  }
  sub_100034234((uint64_t)v14);
  return v10;
}

void sub_10000B3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10000B41C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "beaconIdentifier"));

  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "allowedSessions"));

    if (v8)
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "allowedSessions", 0));
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v10)
      {
        v11 = *(_QWORD *)v19;
        do
        {
          for (i = 0; i != v10; i = (char *)i + 1)
          {
            if (*(_QWORD *)v19 != v11)
              objc_enumerationMutation(v9);
            v13 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "bundleId"));
            if ((objc_msgSend(v5, "isEqual:", v14) & 1) != 0)
            {
              v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "userIdentifier"));
              v16 = objc_msgSend(v6, "isEqual:", v15);

              if ((v16 & 1) != 0)
                goto LABEL_14;
            }
            else
            {

            }
          }
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        }
        while (v10);
      }
LABEL_14:

    }
  }

  return 1;
}

void sub_10000B5BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10000B608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  uint64_t v8;
  NSObject *v9;

  v8 = 101;
  if (a8 <= 8 && ((1 << a8) & 0x116) != 0)
  {
    if (off_100985018)
    {
      v8 = off_100985018(a1, a2, a3);
      if (!(_DWORD)v8)
        return v8;
    }
    else
    {
      v8 = 3601;
    }
    if (sub_10005549C())
    {
      sub_100054530("VSC failed %!", v8);
      v9 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  return v8;
}

uint64_t sub_10000B6C8(char a1, char a2, unsigned __int8 a3, char *a4, _WORD *a5, _BYTE *a6, char a7, char a8, _BYTE *a9, char a10, uint64_t (*a11)())
{
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned __int16 v34;
  unsigned __int16 v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;

  v37 = 0;
  v38 = 0;
  result = sub_10004BC7C(&v37);
  if ((_DWORD)result)
    return result;
  LOBYTE(v23) = 0;
  v25 = 3;
  v26 = a3;
  do
  {
    LOBYTE(v23) = (v26 & 1) + v23;
    v26 >>= 1;
    --v25;
  }
  while (v25);
  if (HIBYTE(v38))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6137, "OI_STATUS _BCM_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_47;
  }
  v27 = WORD2(v38);
  if (WORD1(v38) <= WORD2(v38) || BYTE6(v38) != 2)
LABEL_47:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  ++WORD2(v38);
  *(_BYTE *)(v37 + v27) = a1;
  if (HIBYTE(v38))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6138, "OI_STATUS _BCM_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_49;
  }
  v28 = WORD2(v38);
  if (WORD1(v38) <= WORD2(v38) || BYTE6(v38) != 2)
LABEL_49:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  ++WORD2(v38);
  *(_BYTE *)(v37 + v28) = a2;
  if (HIBYTE(v38))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6139, "OI_STATUS _BCM_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_51;
  }
  v29 = WORD2(v38);
  if (WORD1(v38) <= WORD2(v38) || BYTE6(v38) != 2)
LABEL_51:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  ++WORD2(v38);
  *(_BYTE *)(v37 + v29) = a3;
  if (HIBYTE(v38))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6140, "OI_STATUS _BCM_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_53;
  }
  v30 = WORD2(v38);
  if (WORD1(v38) <= WORD2(v38) || BYTE6(v38) != 2)
LABEL_53:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  ++WORD2(v38);
  *(_BYTE *)(v37 + v30) = (4 * a10) | a7;
  if (HIBYTE(v38))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6141, "OI_STATUS _BCM_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_55;
  }
  v31 = WORD2(v38);
  if (WORD1(v38) <= WORD2(v38) || BYTE6(v38) != 2)
LABEL_55:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  ++WORD2(v38);
  *(_BYTE *)(v37 + v31) = a8;
  if ((_BYTE)v23)
  {
    v23 = v23;
    while (!HIBYTE(v38))
    {
      v32 = WORD2(v38);
      if (WORD1(v38) <= WORD2(v38) || BYTE6(v38) != 2)
        goto LABEL_39;
      v33 = *a4;
      ++WORD2(v38);
      *(_BYTE *)(v37 + v32) = v33;
      if (HIBYTE(v38))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6145, "OI_STATUS _BCM_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
LABEL_41:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
      if (WORD1(v38) - WORD2(v38) <= 1 || BYTE6(v38) != 2)
        goto LABEL_41;
      *(_WORD *)(v37 + WORD2(v38)) = *a5;
      v34 = WORD2(v38) + 2;
      WORD2(v38) += 2;
      if (HIBYTE(v38))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6146, "OI_STATUS _BCM_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
LABEL_43:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
      if (WORD1(v38) - v34 <= 1 || BYTE6(v38) != 2)
        goto LABEL_43;
      *(_BYTE *)(v37 + v34) = *a6;
      *(_BYTE *)(v37 + WORD2(v38) + 1) = a6[1];
      v35 = WORD2(v38) + 2;
      WORD2(v38) += 2;
      if (HIBYTE(v38))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6147, "OI_STATUS _BCM_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
LABEL_45:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
      if (WORD1(v38) - v35 <= 1 || BYTE6(v38) != 2)
        goto LABEL_45;
      *(_BYTE *)(v37 + v35) = *a9;
      *(_BYTE *)(v37 + WORD2(v38) + 1) = a9[1];
      v36 = BYTE4(v38) + 2;
      a9 += 2;
      WORD2(v38) += 2;
      a6 += 2;
      ++a5;
      ++a4;
      if (!--v23)
        return sub_10004C8A0(567, v37, v36, a11, (uint64_t)sub_10004AE9C, v20, v21, v22);
    }
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6144, "OI_STATUS _BCM_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
LABEL_39:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
  v36 = BYTE4(v38);
  return sub_10004C8A0(567, v37, v36, a11, (uint64_t)sub_10004AE9C, v20, v21, v22);
}

void sub_10000BC44(uint64_t a1, _BOOL4 a2)
{
  void *v4;
  NSArray *v5;
  void *v6;
  NSArray *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  unsigned int v11;
  __CFString *v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  xpc_object_t v17;
  void *v18;
  _DWORD v19[2];
  __int16 v20;
  uint64_t v21;

  v4 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = &stru_100941758;

  v5 = objc_opt_new(NSArray);
  v6 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v5;

  if (a2 && sub_100551C64(a1) == 2)
  {
    if (qword_100978130 != -1)
      dispatch_once(&qword_100978130, &stru_100937940);
    if (sub_10002527C((uint64_t)off_100978128) == 1)
    {
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_100937800);
      if (!*((_BYTE *)off_100978168 + 179))
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_1009377A0);
        v7 = sub_100665EA8(off_1009778C0, 0);
        v8 = objc_claimAutoreleasedReturnValue(v7);
        v9 = *(void **)(a1 + 120);
        *(_QWORD *)(a1 + 120) = v8;

        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_1009377A0);
        v10 = off_1009778C0;
        v11 = sub_100662AE4((uint64_t)off_1009778C0, 0);
        v12 = sub_100663B74((uint64_t)v10, v11, 0);
        v13 = objc_claimAutoreleasedReturnValue(v12);
        v14 = *(void **)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v13;

      }
    }
  }
  v15 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(_QWORD *)(a1 + 96);
    v19[0] = 67109378;
    v19[1] = a2;
    v20 = 2112;
    v21 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "ReadyForTCC. TCC required:%d %@", (uint8_t *)v19, 0x12u);
  }
  v17 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v17, "kCBMsgArgRequiresTCC", a2);
  xpc_dictionary_set_string(v17, "kCBMsgArgTCCLELocalizedCenterLabel", (const char *)objc_msgSend(*(id *)(a1 + 112), "UTF8String"));
  v18 = (void *)sub_1004B10A4(*(_QWORD *)(a1 + 120));
  xpc_dictionary_set_value(v17, "kCBMsgArgTCCLEDevicesAroundDetails", v18);
  sub_10005E138(a1, 3, v17, 1);
  if (v18)
    CFRelease(v18);
}

char *sub_10000BED0(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  uint64_t v9;

  v9 = 0;
  v5 = (void **)sub_10000BF5C((uint64_t)a1, &v9, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 28) = *(_OWORD *)a3;
    *((_DWORD *)v6 + 11) = *(_DWORD *)(a3 + 16);
    sub_100004078(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *sub_10000BF5C(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  unsigned __int8 *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (unsigned __int8 *)(v4 + 28);
        if (!sub_100068844(a3, (unsigned __int8 *)(v4 + 28)))
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_100068844(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

id sub_10000BFEC(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", CFSTR("com.apple.AppStore"), CFSTR("com.apple.Preferences"), CFSTR("com.apple.Bridge"), 0));
  v4 = objc_msgSend(v3, "containsObject:", v2);

  return v4;
}

void sub_10000C068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10000C084(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  dispatch_time_t v9;
  _QWORD handler[5];
  _QWORD v12[2];
  uint8_t buf[4];
  unsigned int v14;

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 40);
  v4 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "armSoftwareScanRxTimer duration=%u", buf, 8u);
  }
  if (!*(_BYTE *)(a1 + 320) && !*(_QWORD *)(a1 + 328))
  {
    v5 = qword_1009999E0;
    if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "fSoftwareScanRxTimer %u ms Armed!", buf, 8u);
    }
    v6 = sub_10006BBEC();
    v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v6 + 8));
    *(_QWORD *)(a1 + 328) = v7;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1004BB358;
    handler[3] = &unk_100917378;
    handler[4] = a1;
    dispatch_source_set_event_handler(v7, handler);
    v8 = *(NSObject **)(a1 + 328);
    v9 = dispatch_time(0x8000000000000000, 1000000 * a2);
    dispatch_source_set_timer(v8, v9, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_activate(*(dispatch_object_t *)(a1 + 328));
  }
  return sub_100034234((uint64_t)v12);
}

void sub_10000C22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10000C368(id a1, NSDictionary *a2)
{
  void *v2;
  NSDictionary *v3;

  v3 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v2, "applicationStateChanged:", v3);

}

void sub_10000C3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10000C460(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  int v8;
  au_asid_t asid;
  xpc_object_t reply;
  void *v11;
  au_asid_t v12;
  uint64_t v13;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSessionID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_100706280();
    if (uint64)
      goto LABEL_3;
LABEL_9:
    v6 = 7;
    goto LABEL_10;
  }
  if (!uint64)
    goto LABEL_9;
LABEL_3:
  v13 = 0;
  LODWORD(v6) = sub_1000746D0(uint64, &v13);
  uint64 = 0;
  if (!(_DWORD)v6)
  {
    uint64 = v13;
    v7 = *(_QWORD *)(a1 + 72);
    v8 = *(_DWORD *)(v7 + 40);
    asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
    if (qword_100977B50 != -1)
    {
      v12 = asid;
      dispatch_once(&qword_100977B50, &stru_100939C28);
      asid = v12;
    }
    sub_1000225E8(qword_100977B48, v13, v8, asid);
  }
  v6 = (int)v6;
LABEL_10:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgAccessoryManagerID", uint64);
    xpc_dictionary_set_uint64(v11, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

uint64_t sub_10000C5B8(uint64_t a1, unsigned __int8 *uu2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = uuid_compare((const unsigned __int8 *)(v3 + 32), uu2);
    v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || uuid_compare(uu2, (const unsigned __int8 *)(v5 + 32)) < 0)
    return v2;
  return v5;
}

uint64_t sub_10000C630(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  unint64_t *v23;
  unint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t **v27;
  _OWORD *v28;
  __int128 v29;
  int v30;
  _OWORD *v31;
  __int128 v32;
  char *v33;
  uint64_t *v34;
  uint64_t **v35;
  const void **v36;
  const void **v37;
  _OWORD v39[2];
  __int128 v40;
  uint64_t *v41;
  int v42;
  uint64_t *v43;
  uint64_t *v44;
  void *__dst[2];
  uint64_t *v46;
  _OWORD v47[2];
  __int128 __p;
  uint64_t v49;
  int v50;
  id v51;
  id v52;
  void *v53[2];
  char v54;
  const void **v55;
  char *v56;
  unint64_t v57;
  _QWORD v58[2];
  char **v59;
  uint8_t buf[24];
  int v61;

  v58[0] = 0;
  v58[1] = 0;
  sub_10003415C((uint64_t)v58, a1 + 40);
  v2 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 240);
    v4 = *(_QWORD *)(a1 + 264);
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v4;
    *(_WORD *)&buf[22] = 1024;
    v61 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "checkForExpired fSessionThresholds:%lu fConnectScanThresholds:%lu fStackStarted:%d", buf, 0x1Cu);
  }
  if (!*(_BYTE *)(a1 + 104))
    return sub_100034234((uint64_t)v58);
  memset(buf, 0, sizeof(buf));
  v6 = *(_QWORD **)(a1 + 224);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  if (v6 == (_QWORD *)(a1 + 232))
    goto LABEL_40;
  do
  {
    v7 = v6[4];
    sub_100091AE8(v53, "");
    v8 = *(_OWORD *)(v6 + 7);
    v47[0] = *(_OWORD *)(v6 + 5);
    v47[1] = v8;
    if (*((char *)v6 + 95) < 0)
    {
      sub_10003430C(&__p, (void *)v6[9], v6[10]);
    }
    else
    {
      __p = *(_OWORD *)(v6 + 9);
      v49 = v6[11];
    }
    v50 = *((_DWORD *)v6 + 24);
    v51 = objc_retainBlock((id)v6[13]);
    v52 = objc_retainBlock((id)v6[14]);
    v9 = sub_10006BC2C((uint64_t)v52, v7, (__int128 *)v53, (uint64_t)v47);

    if (SHIBYTE(v49) < 0)
      operator delete((void *)__p);
    if (v54 < 0)
    {
      operator delete(v53[0]);
      if (!v9)
        goto LABEL_31;
    }
    else if (!v9)
    {
      goto LABEL_31;
    }
    v10 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
    {
      v12 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3;
      if ((unint64_t)(v12 + 1) >> 61)
        abort();
      v13 = (uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2;
      if (v13 <= v12 + 1)
        v13 = v12 + 1;
      if (*(_QWORD *)&buf[16] - *(_QWORD *)buf >= 0x7FFFFFFFFFFFFFF8uLL)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)sub_10007ABA0((uint64_t)&buf[16], v14);
      else
        v15 = 0;
      v16 = &v15[8 * v12];
      *(_QWORD *)v16 = v6[4];
      v11 = v16 + 8;
      v18 = *(char **)buf;
      v17 = *(char **)&buf[8];
      if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v16 - 1) = v19;
          v16 -= 8;
        }
        while (v17 != v18);
        v17 = *(char **)buf;
      }
      *(_QWORD *)buf = v16;
      *(_QWORD *)&buf[8] = v11;
      *(_QWORD *)&buf[16] = &v15[8 * v14];
      if (v17)
        operator delete(v17);
    }
    else
    {
      **(_QWORD **)&buf[8] = v6[4];
      v11 = (_QWORD *)(v10 + 8);
    }
    *(_QWORD *)&buf[8] = v11;
LABEL_31:
    v20 = (_QWORD *)v6[1];
    if (v20)
    {
      do
      {
        v21 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = (_QWORD *)v6[2];
        v22 = *v21 == (_QWORD)v6;
        v6 = v21;
      }
      while (!v22);
    }
    v6 = v21;
  }
  while (v21 != (_QWORD *)(a1 + 232));
  v23 = *(unint64_t **)buf;
  v24 = *(unint64_t **)&buf[8];
  while (v23 != v24)
    sub_1004BC6FC(a1 + 224, v23++);
LABEL_40:
  v27 = *(uint64_t ***)(a1 + 248);
  v25 = (uint64_t **)(a1 + 248);
  v26 = v27;
  if (v27 != v25 + 1)
  {
    while (2)
    {
      v28 = v26 + 4;
      if (*((char *)v26 + 55) < 0)
      {
        sub_10003430C(__dst, v26[4], (unint64_t)v26[5]);
      }
      else
      {
        *(_OWORD *)__dst = *v28;
        v46 = v26[6];
      }
      v29 = *(_OWORD *)(v26 + 9);
      v39[0] = *(_OWORD *)(v26 + 7);
      v39[1] = v29;
      if (*((char *)v26 + 111) < 0)
      {
        sub_10003430C(&v40, v26[11], (unint64_t)v26[12]);
      }
      else
      {
        v40 = *(_OWORD *)(v26 + 11);
        v41 = v26[13];
      }
      v42 = *((_DWORD *)v26 + 28);
      v43 = objc_retainBlock(v26[15]);
      v44 = objc_retainBlock(v26[16]);
      v30 = sub_10006BC2C((uint64_t)v44, 0, (__int128 *)__dst, (uint64_t)v39);

      if (SHIBYTE(v41) < 0)
        operator delete((void *)v40);
      if (SHIBYTE(v46) < 0)
      {
        operator delete(__dst[0]);
        if (!v30)
          goto LABEL_60;
      }
      else if (!v30)
      {
        goto LABEL_60;
      }
      v31 = v56;
      if ((unint64_t)v56 >= v57)
      {
        v33 = sub_1002A553C((char **)&v55, (__int128 *)v26 + 2);
      }
      else
      {
        if (*((char *)v26 + 55) < 0)
        {
          sub_10003430C(v56, v26[4], (unint64_t)v26[5]);
        }
        else
        {
          v32 = *v28;
          *((_QWORD *)v56 + 2) = v26[6];
          *v31 = v32;
        }
        v33 = (char *)v31 + 24;
      }
      v56 = v33;
LABEL_60:
      v34 = v26[1];
      if (v34)
      {
        do
        {
          v35 = (uint64_t **)v34;
          v34 = (uint64_t *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (uint64_t **)v26[2];
          v22 = *v35 == (uint64_t *)v26;
          v26 = v35;
        }
        while (!v22);
      }
      v26 = v35;
      if (v35 == v25 + 1)
        break;
      continue;
    }
  }
  v36 = v55;
  v37 = (const void **)v56;
  while (v36 != v37)
  {
    sub_1004BC780(v25, v36);
    v36 += 3;
  }
  v59 = (char **)&v55;
  sub_100091BF8((void ***)&v59);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  return sub_100034234((uint64_t)v58);
}

void sub_10000CAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  uint64_t v43;
  void *v45;

  *(_QWORD *)(v43 - 184) = v42;
  *(_QWORD *)(v43 - 152) = v43 - 192;
  sub_100091BF8((void ***)(v43 - 152));
  v45 = *(void **)(v43 - 144);
  if (v45)
  {
    *(_QWORD *)(v43 - 136) = v45;
    operator delete(v45);
  }
  sub_100034234(v43 - 168);
  _Unwind_Resume(a1);
}

void sub_10000CE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void (**a12)(void))
{

  a12[2]();
  _Unwind_Resume(a1);
}

void sub_10000CEF0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E54CC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100074424(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgAirplaneMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_10000CFD8(id a1, NSDictionary *a2)
{
  void *v2;
  NSDictionary *v3;

  v3 = a2;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v2, "applicationStateChanged:", v3);

}

void sub_10000D024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10000D044(os_unfair_lock_s *a1, _xpc_connection_s *a2, const char *a3)
{
  uint64_t **v6;

  os_unfair_lock_lock(a1);
  v6 = sub_100017284((uint64_t)a1, a2, a3);
  if (!strcmp(a3, "com.apple.server.bluetooth.le.att.xpc"))
    operator new();
  if (!strcmp(a3, "com.apple.server.bluetooth.le.pipe.xpc"))
    operator new();
  if (!strcmp(a3, "com.apple.server.bluetooth.general.xpc"))
    operator new();
  if (!strcmp(a3, "com.apple.server.bluetooth.classic.xpc"))
    operator new();
  ++*(_DWORD *)v6;
  os_unfair_lock_unlock(a1);
}

void sub_10000D1C4()
{
  operator delete();
}

uint64_t sub_10000D224(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void **v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  int64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  const char *v23;

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10093AFB8);
  v4 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
  v5 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5))
  {
    v6 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      if (v4)
      {
        sub_1000340DC(v4, (uint64_t)__p);
        if (v19 >= 0)
          v7 = __p;
        else
          v7 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v21 = "sessionDetached";
        v22 = 2082;
        v23 = (const char *)v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s - session %{public}s is detaching", buf, 0x16u);
        if (v19 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 136315394;
        v21 = "sessionDetached";
        v22 = 2082;
        v23 = "(NULL)";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s - session %{public}s is detaching", buf, 0x16u);
      }
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003415C((uint64_t)__p, (uint64_t)(a1 + 6));
  v8 = (unint64_t *)a1[23];
  if (v8 == (unint64_t *)a1[24])
    goto LABEL_26;
  do
  {
    v9 = *v8;
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_10093AFB8);
    if (sub_100021398(qword_100977B48, v9) == a2)
    {
      v11 = a1[14];
      if (v11)
        sub_1005AEE60(v11, v9);
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10093AFB8);
      sub_10050ABD0(qword_100977B48, v9);
      v12 = (unint64_t *)a1[24];
      v13 = (char *)v12 - (char *)(v8 + 1);
      if (v12 != v8 + 1)
        memmove(v8, v8 + 1, (char *)v12 - (char *)(v8 + 1));
      v10 = (unint64_t *)((char *)v8 + v13);
      a1[24] = (char *)v8 + v13;
    }
    else
    {
      ++v8;
      v10 = (unint64_t *)a1[24];
    }
  }
  while (v8 != v10);
  if (v10 == (unint64_t *)a1[23])
  {
LABEL_26:
    v14 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14))
    {
      v15 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v21 = "sessionDetached";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%s - deleting fAgent as fHandleList size is 0", buf, 0xCu);
      }
    }
    v16 = a1[14];
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    a1[14] = 0;
  }
  return sub_100034234((uint64_t)__p);
}

void sub_10000D538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10000D558(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD *v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  _BOOL4 v13;
  uint64_t **v14;
  __int16 v15;
  uint64_t v16;
  int v17;
  uint64_t **v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  unsigned __int8 v24;
  uint8_t buf[8];
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  _BOOL4 v31;
  __int16 v32;
  _BOOL4 v33;

  v4 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Destroying match table for type %d", buf, 8u);
    v4 = qword_100999828;
  }
  v5 = *(_QWORD **)(a1 + 1816);
  if (v5 == (_QWORD *)(a1 + 1824))
    goto LABEL_24;
  while (1)
  {
    v6 = *((unsigned __int8 *)v5 + 28);
    v7 = *((unsigned __int16 *)v5 + 15);
    v8 = *((unsigned __int16 *)v5 + 16);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v12 = *((unsigned __int16 *)v5 + 18);
      v13 = *((unsigned __int16 *)v5 + 17) != 0;
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = v7;
      v26 = 1024;
      v27 = v6;
      v28 = 1024;
      v29 = v12;
      v30 = 1024;
      v31 = v8 != 0;
      v32 = 1024;
      v33 = v13;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "handle:%d type:%d length:%d isCreated:%d isEnabled:%d", buf, 0x20u);
      v4 = qword_100999828;
    }
    v9 = v6 != a2 || v8 == 0;
    if (!v9)
      break;
    v10 = (_QWORD *)v5[1];
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (_QWORD *)v5[2];
        v9 = *v11 == (_QWORD)v5;
        v5 = v11;
      }
      while (!v9);
    }
    v5 = v11;
    if (v11 == (_QWORD *)(a1 + 1824))
      goto LABEL_24;
  }
  if (!v7)
  {
LABEL_24:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1007164C0();
    return 3;
  }
  else
  {
    v24 = v7;
    *(_QWORD *)buf = &v24;
    v14 = sub_10000DB5C((uint64_t **)(a1 + 1816), &v24, (uint64_t)&unk_100740F58, (char **)buf);
    v15 = *((_WORD *)v14 + 14);
    v16 = *((unsigned __int16 *)v14 + 15);
    v17 = *((_DWORD *)v14 + 9);
    v24 = v7;
    *(_QWORD *)buf = &v24;
    v18 = sub_10000DB5C((uint64_t **)(a1 + 1816), &v24, (uint64_t)&unk_100740F58, (char **)buf);
    *((_WORD *)v18 + 14) = v15;
    *((_WORD *)v18 + 15) = v16;
    *((_DWORD *)v18 + 8) = 0;
    *((_DWORD *)v18 + 9) = v17;
    v19 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = a2;
      v26 = 1024;
      v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Destroying match table for type %d with handle %d", buf, 0xEu);
    }
    v20 = sub_1000438A4();
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v20 + 2856))(v20, v16, 0, 1);
    if ((_DWORD)v21)
    {
      v22 = qword_100999828;
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = a2;
        v26 = 1024;
        v27 = v7;
        v28 = 1024;
        v29 = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to destroy match table for type %d on handle %d: %d", buf, 0x14u);
      }
    }
    else
    {
      sub_10006DE50((double *)a1, a2, 0);
    }
  }
  return v21;
}

uint64_t sub_10000D8A4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t **v10;
  char v11;
  __int16 v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  unsigned __int8 v20;
  unsigned __int16 v21;
  unsigned __int8 v22;
  char *v23;
  uint8_t buf[16];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[30];

  v21 = 0;
  v6 = sub_100008090(a1, a2, 1, &v21);
  if ((_DWORD)v6)
  {
    v7 = v6;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
      sub_100717224();
  }
  else
  {
    v8 = (uint64_t **)(a1 + 1816);
    v9 = v21;
    v22 = v21;
    *(_QWORD *)buf = &v22;
    v10 = sub_10000DB5C(v8, &v22, (uint64_t)&unk_100740F58, (char **)buf);
    v11 = *((_BYTE *)v10 + 29);
    v12 = *((_WORD *)v10 + 15);
    v13 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a2;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v25) = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Creating a match table with handle %x for type %d and mask: %d", buf, 0x14u);
    }
    v14 = sub_1000438A4();
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _BYTE, _QWORD, char, _QWORD, _QWORD, _BYTE))(*(_QWORD *)v14 + 2832))(v14, v9, 7, 255, 76, a2, 0, 1, 0, 0, 16, 0, 0, 0);
    if (!(_DWORD)v7)
    {
      v36 = 0u;
      memset(v37, 0, sizeof(v37));
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      *(_OWORD *)buf = 0u;
      v25 = 0u;
      buf[6] = 2;
      v15 = sub_1000438A4();
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint8_t *))(*(_QWORD *)v15 + 2880))(v15, v9, 0, 0, buf);
      if ((_DWORD)v16)
      {
        v7 = v16;
        if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
          sub_100716954();
      }
      else
      {
        v20 = v12;
        v23 = (char *)&v20;
        v17 = sub_10000DB5C(v8, &v20, (uint64_t)&unk_100740F58, &v23);
        *((_BYTE *)v17 + 28) = a2;
        *((_BYTE *)v17 + 29) = v11;
        *((_WORD *)v17 + 15) = v12;
        *((_DWORD *)v17 + 8) = 65537;
        *((_WORD *)v17 + 18) = 1;
        *((_WORD *)v17 + 19) = a3;
        v18 = sub_1000438A4();
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v18 + 2856))(v18, v9, 1, 0);
        if ((_DWORD)v7 && os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
          sub_1007171C4();
      }
    }
  }
  return v7;
}

uint64_t **sub_10000DB5C(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, char **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 26);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x28uLL);
    v11[26] = **a4;
    v11[28] = -1;
    *((_WORD *)v11 + 19) = 0;
    *(_QWORD *)(v11 + 30) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *sub_10000DC28(uint64_t a1, _QWORD *a2, unsigned __int8 *uu1)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  const unsigned __int8 *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (const unsigned __int8 *)(v4 + 32);
        if ((uuid_compare(uu1, (const unsigned __int8 *)(v4 + 32)) & 0x80000000) == 0)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((uuid_compare(v8, uu1) & 0x80000000) == 0)
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_10000DCB8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _BOOL8 v8;
  int v9;
  int v10;
  NSObject *v11;
  _BYTE *v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  _BOOL8 v18;
  int v19;
  int v20;
  NSObject *v21;
  _BYTE *v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  NSObject *v46;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  _QWORD v53[2];
  _BYTE buf[14];
  uint64_t v55;
  _BYTE v56[6];
  unsigned int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  unsigned int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  uint8_t v68[4];
  _BYTE *v69;

  v53[0] = 0;
  v53[1] = 0;
  sub_10003415C((uint64_t)v53, a1 + 40);
  v2 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 240);
    v4 = *(_QWORD *)(a1 + 264);
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2048;
    v55 = v4;
    *(_WORD *)v56 = 1024;
    *(_DWORD *)&v56[2] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "configureNextThreshold fDiscoveryScanThresholds:%lu fConnectScanThresholds:%lu fStackStarted:%d", buf, 0x1Cu);
  }
  if (*(_BYTE *)(a1 + 104))
  {
    v51 = -1;
    v52 = -1;
    v49 = -1;
    v50 = -1;
    v48 = -1;
    v6 = *(_QWORD **)(a1 + 224);
    if (v6 == (_QWORD *)(a1 + 232))
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      do
      {
        v8 = sub_10006C1C4(a1, (uint64_t)(v6 + 5));
        if (v8 && !(*(unsigned __int8 *)(a1 + 320) | *((unsigned __int8 *)v6 + 41)))
        {
          v9 = *((_DWORD *)v6 + 16);
          if (v9)
          {
            v10 = *((_DWORD *)v6 + 13);
            if (v10 != v9)
            {
              if (v10)
              {
                *((_DWORD *)v6 + 12) = v9;
                *((_DWORD *)v6 + 13) = v9;
                v11 = qword_1009999E0;
                v7 = 1;
                v8 = os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO);
                if (v8)
                {
                  sub_100017BFC((unsigned __int8 *)v6 + 40);
                  v12 = v56[1] >= 0 ? buf : *(_BYTE **)buf;
                  *(_DWORD *)v68 = 136315138;
                  v69 = v12;
                  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "New coex actuals for scanRequest %s", v68, 0xCu);
                  if ((v56[1] & 0x80000000) != 0)
                    operator delete(*(void **)buf);
                }
              }
            }
          }
        }
        v13 = sub_1000087E4(v8, (uint64_t)(v6 + 5), &v52, &v51, &v48);
        v14 = (_QWORD *)v6[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v6[2];
            v16 = *v15 == (_QWORD)v6;
            v6 = v15;
          }
          while (!v16);
        }
        v7 |= v13;
        v6 = v15;
      }
      while (v15 != (_QWORD *)(a1 + 232));
    }
    v17 = *(_QWORD **)(a1 + 248);
    if (v17 != (_QWORD *)(a1 + 256))
    {
      do
      {
        v18 = sub_10006C1C4(a1, (uint64_t)(v17 + 7));
        if (v18 && !(*(unsigned __int8 *)(a1 + 320) | *((unsigned __int8 *)v17 + 57)))
        {
          v19 = *((_DWORD *)v17 + 20);
          if (v19)
          {
            v20 = *((_DWORD *)v17 + 17);
            if (v20 != v19)
            {
              if (v20)
              {
                *((_DWORD *)v17 + 16) = v19;
                *((_DWORD *)v17 + 17) = v19;
                v21 = qword_1009999E0;
                v7 = 1;
                v18 = os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO);
                if (v18)
                {
                  sub_100017BFC((unsigned __int8 *)v17 + 56);
                  v22 = v56[1] >= 0 ? buf : *(_BYTE **)buf;
                  *(_DWORD *)v68 = 136315138;
                  v69 = v22;
                  _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "New coex actuals for connection %s", v68, 0xCu);
                  if ((v56[1] & 0x80000000) != 0)
                    operator delete(*(void **)buf);
                }
              }
            }
          }
        }
        v23 = sub_1000087E4(v18, (uint64_t)(v17 + 7), &v50, &v49, &v48);
        v24 = (_QWORD *)v17[1];
        if (v24)
        {
          do
          {
            v25 = v24;
            v24 = (_QWORD *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (_QWORD *)v17[2];
            v16 = *v25 == (_QWORD)v17;
            v17 = v25;
          }
          while (!v16);
        }
        v7 |= v23;
        v17 = v25;
      }
      while (v25 != (_QWORD *)(a1 + 256));
    }
    if (*(_BYTE *)(a1 + 320))
    {
      if (v52 == -1)
        v26 = 0;
      else
        v26 = v52;
      v27 = v51;
      if (v51 == -1)
        v27 = 0;
      v51 = v27;
      v52 = v26;
      if (v50 == -1)
        v28 = 0;
      else
        v28 = v50;
      v29 = v49;
      if (v49 == -1)
        v29 = 0;
      v49 = v29;
      v50 = v28;
      v30 = v48;
      if (v48 == -1)
        v30 = 0;
      v48 = v30;
    }
    v31 = qword_1009999E0;
    if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v7 & 1;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "configChanged=%d deltas:", buf, 8u);
      v31 = qword_1009999E0;
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v52;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v51;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "scanTotalRxDeltaMs=%u scanBtMCRxDeltaMs=%u", buf, 0xEu);
      v31 = qword_1009999E0;
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v50;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v49;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "connectTotalRxDeltaMs=%u connectBtMCRxDeltaMs=%u", buf, 0xEu);
    }
    if (*(_QWORD *)(a1 + 240) || *(_QWORD *)(a1 + 264))
    {
      if ((v7 & 1) == 0)
        return sub_100034234((uint64_t)v53);
    }
    else
    {
      *(_QWORD *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
      if ((v7 & 1) == 0)
        return sub_100034234((uint64_t)v53);
    }
    *(_QWORD *)buf = 0;
    sub_10004AD30((uint64_t)buf);
    v32 = *(_DWORD *)buf;
    v33 = *(__int16 *)&buf[4];
    *(_QWORD *)(a1 + 288) = *(int *)buf;
    *(_QWORD *)(a1 + 296) = v33;
    if (*(_BYTE *)(a1 + 320))
    {
      v34 = qword_1009999E0;
      if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v33 + 1000 * v32;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "configChanged! Configuring controller at time %llu", buf, 0xCu);
        v34 = qword_1009999E0;
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67111424;
        *(_DWORD *)&buf[4] = 1;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = 0;
        LOWORD(v55) = 1024;
        *(_DWORD *)((char *)&v55 + 2) = v48;
        HIWORD(v55) = 1024;
        *(_DWORD *)v56 = v52;
        *(_WORD *)&v56[4] = 1024;
        v57 = v51;
        v58 = 1024;
        v59 = v50;
        v60 = 1024;
        v61 = v49;
        v62 = 1024;
        v63 = 0;
        v64 = 1024;
        v65 = 0;
        v66 = 1024;
        v67 = 1;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "getScanStatsWithThreshold reset %u ver %u duration %u discovery %u %u conn %u %u numAdvs %u %u canWakeupAP %u", buf, 0x3Eu);
      }
      v35 = sub_1000438A4();
      v36 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))(*(_QWORD *)v35 + 3576))(v35, 1, 0, v48, v52, v51, v50, v49, 0, 1);
      if ((_DWORD)v36)
      {
        v37 = qword_1009999E0;
        if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
          sub_1006F900C(v36, v37, v38, v39, v40, v41, v42, v43);
      }
    }
    else
    {
      v44 = v49;
      if (v49 >= v51)
        v44 = v51;
      if (v48 >= v44)
        v45 = v44;
      else
        v45 = v48;
      v46 = qword_1009999E0;
      if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "configChanged! Setting soft timer", buf, 2u);
      }
      sub_10000C084(a1, v45);
    }
    sub_10001FD88((os_unfair_lock_s *)(a1 + 120), &stru_1009329C8);
  }
  return sub_100034234((uint64_t)v53);
}

void sub_10000E380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10000E3B8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  int v8;
  au_asid_t asid;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  int v17;
  xpc_object_t reply;
  void *v19;
  _QWORD v21[2];
  _BYTE buf[12];
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1007062E0();
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 8);
  if (!uint64)
    goto LABEL_20;
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_DWORD *)(v7 + 40);
  asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  v10 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = uint64;
    v23 = 1024;
    v24 = v8;
    v25 = 2048;
    v26 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "identifier mapping accessoryManagerID:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100939C28);
  if (sub_10000973C(qword_100977B48, uint64, v8, asid))
  {
    v11 = *(_QWORD **)(a1 + 80);
    if (v11 == (_QWORD *)(a1 + 88))
    {
LABEL_18:
      v16 = malloc_type_calloc(1uLL, 0x60uLL, 0x10A0040EB02D296uLL);
      *(_QWORD *)buf = v16;
      v16[5] = v6;
      v16[7] = uint64;
      *v16 = sub_100590294;
      v16[1] = sub_1005902B8;
      v16[2] = sub_1005902E4;
      v16[3] = sub_100590314;
      v16[8] = *(_QWORD *)(a1 + 72);
      sub_10000F7A0((uint64_t **)(a1 + 80), (unint64_t *)buf, (uint64_t *)buf);
      if (*(_BYTE *)(a1 + 105))
      {
        v17 = 0;
      }
      else
      {
        v17 = sub_100074738(uint64, *(__int128 **)buf, a1);
        *(_BYTE *)(a1 + 105) = 1;
      }
    }
    else
    {
      while (1)
      {
        v12 = v11[4];
        if (*(_QWORD *)(v12 + 40) == v6 && *(_QWORD *)(v12 + 56) == uint64)
          break;
        v13 = (_QWORD *)v11[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v11[2];
            v15 = *v14 == (_QWORD)v11;
            v11 = v14;
          }
          while (!v15);
        }
        v11 = v14;
        if (v14 == (_QWORD *)(a1 + 88))
          goto LABEL_18;
      }
      v17 = 1;
    }
  }
  else
  {
LABEL_20:
    v17 = 7;
  }
  reply = xpc_dictionary_create_reply(xdict);
  v19 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v17);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v19);
    xpc_release(v19);
  }
  return sub_100034234((uint64_t)v21);
}

void sub_10000E6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10000E6CC(uint64_t a1, void *a2)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;
  int v14;
  xpc_object_t reply;
  void *v16;
  uint64_t *v18;
  _QWORD v19[2];

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 8);
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSessionID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceMask");
  if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    if (uint64)
      goto LABEL_3;
LABEL_16:
    v14 = 1;
    goto LABEL_17;
  }
  sub_1006E7980();
  if (!uint64)
    goto LABEL_16;
LABEL_3:
  v8 = *(_QWORD **)(a1 + 80);
  if (v8 != (_QWORD *)(a1 + 88))
  {
    do
    {
      v9 = v8[4];
      if (*(_QWORD *)(v9 + 8) == v6 && *(_QWORD *)(v9 + 16) == uint64)
        goto LABEL_16;
      v10 = (_QWORD *)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v8[2];
          v12 = *v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v12);
      }
      v8 = v11;
    }
    while (v11 != (_QWORD *)(a1 + 88));
  }
  v13 = (uint64_t *)malloc_type_calloc(1uLL, 0x20uLL, 0x10A00407049A3A3uLL);
  v18 = v13;
  v13[1] = v6;
  v13[2] = uint64;
  *v13 = (uint64_t)sub_1003BAA54;
  v13[3] = *(_QWORD *)(a1 + 72);
  sub_10000F7A0((uint64_t **)(a1 + 80), (unint64_t *)&v18, (uint64_t *)&v18);
  if (*(_BYTE *)(a1 + 104))
  {
    v14 = 0;
  }
  else
  {
    v14 = sub_100074108(uint64, *v18, v7, a1);
    *(_BYTE *)(a1 + 104) = 1;
  }
LABEL_17:
  reply = xpc_dictionary_create_reply(a2);
  v16 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v14);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v16);
    xpc_release(v16);
  }
  return sub_100034234((uint64_t)v19);
}

void sub_10000E8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10000E8EC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  int v8;
  au_asid_t asid;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  int v17;
  xpc_object_t reply;
  void *v19;
  _QWORD v21[2];
  _BYTE buf[12];
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E51EC();
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 8);
  if (!uint64)
  {
LABEL_20:
    v17 = 1;
    goto LABEL_23;
  }
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_DWORD *)(v7 + 40);
  asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  v10 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = uint64;
    v23 = 1024;
    v24 = v8;
    v25 = 2048;
    v26 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "identifier mapping localDevice:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092B520);
  if (sub_10000973C(qword_100977B48, uint64, v8, asid))
  {
    v11 = *(_QWORD **)(a1 + 80);
    if (v11 != (_QWORD *)(a1 + 88))
    {
      do
      {
        v12 = v11[4];
        if (*(_QWORD *)(v12 + 32) == v6 && *(_QWORD *)(v12 + 40) == uint64)
          goto LABEL_20;
        v13 = (_QWORD *)v11[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v11[2];
            v15 = *v14 == (_QWORD)v11;
            v11 = v14;
          }
          while (!v15);
        }
        v11 = v14;
      }
      while (v14 != (_QWORD *)(a1 + 88));
    }
    v16 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A0040AF0111D3uLL);
    *(_QWORD *)buf = v16;
    v16[4] = v6;
    v16[5] = uint64;
    v16[1] = sub_1003A2B30;
    v16[2] = sub_1003A2B50;
    *v16 = sub_1003A2AF4;
    v16[6] = *(_QWORD *)(a1 + 72);
    sub_10000F7A0((uint64_t **)(a1 + 80), (unint64_t *)buf, (uint64_t *)buf);
    if (*(_BYTE *)(a1 + 104))
    {
      v17 = 0;
    }
    else
    {
      v17 = sub_1000744B4(uint64, *(__int128 **)buf, a1);
      *(_BYTE *)(a1 + 104) = 1;
    }
  }
  else
  {
    v17 = 7;
  }
LABEL_23:
  reply = xpc_dictionary_create_reply(xdict);
  v19 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v17);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v19);
    xpc_release(v19);
  }
  return sub_100034234((uint64_t)v21);
}

void sub_10000EBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10000EBF4(uint64_t **a1, unint64_t a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  void *v9;
  void *p_p;
  void *v11;
  void *__p;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  unint64_t v16;

  v16 = a2;
  v4 = a3;
  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, (uint64_t)(a1 + 1));
  __p = 0;
  v13 = 0;
  v14 = 0;
  v5 = objc_retainAutorelease(v4);
  sub_100091AE8(&__p, (char *)objc_msgSend(v5, "UTF8String"));
  v6 = sub_10001F2AC((uint64_t)(a1 + 12), (const void **)&__p);
  v7 = (uint64_t *)v6;
  if (a1 + 13 != (uint64_t **)v6)
  {
    sub_100015ECC(v6 + 56, &v16);
    if (!v7[9])
    {
      ((void (*)(uint64_t **, unint64_t))(*a1)[13])(a1, v16);
      sub_1000040CC(a1 + 12, v7);
      sub_1002D34D0((uint64_t)(v7 + 4));
      operator delete(v7);
      v8 = objc_autoreleasePoolPush();
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
      if (v14 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p, __p, v13, v14));
      objc_msgSend(v9, "unregisterApplication:", v11);

      objc_autoreleasePoolPop(v8);
    }
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  sub_100034234((uint64_t)v15);

}

void sub_10000ED4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a14 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_10000ED9C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  int v8;
  au_asid_t asid;
  NSObject *v10;
  xpc_object_t reply;
  void *v12;
  uint64_t v13;
  uint8_t buf[4];
  unint64_t v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSessionID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E518C();
    if (uint64)
      goto LABEL_3;
LABEL_11:
    v6 = 1;
    goto LABEL_12;
  }
  if (!uint64)
    goto LABEL_11;
LABEL_3:
  v13 = 0;
  LODWORD(v6) = sub_1000742FC(uint64, &v13);
  uint64 = 0;
  if (!(_DWORD)v6)
  {
    uint64 = v13;
    v7 = *(_QWORD *)(a1 + 72);
    v8 = *(_DWORD *)(v7 + 40);
    asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
    v10 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      v15 = v13;
      v16 = 1024;
      v17 = v8;
      v18 = 2048;
      v19 = asid;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Adding identifier mapping localDevice:%llx pid:%d asid:%llx", buf, 0x1Cu);
    }
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_10092B520);
    sub_1000225E8(qword_100977B48, v13, v8, asid);
  }
  v6 = (int)v6;
LABEL_12:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgLocalDeviceID", uint64);
    xpc_dictionary_set_uint64(v12, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_10000EF90(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_10000F024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_10000F04C(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  uint64_t v7;
  _QWORD v9[2];
  uint8_t buf[4];
  const char *v11;

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 72);
  if (*(_DWORD *)(sub_1000438A4() + 712) && *(_DWORD *)(sub_1000438A4() + 712) <= 0x7CFu)
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      v5 = sub_1000438E4(a1, 200);
      *(_DWORD *)buf = 136446210;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
    }
    if (sub_1000431F4(a1, 200))
    {
      buf[0] = 0;
      sub_100043758(buf);
      v6 = sub_100073DD8();
      sub_10004339C(buf);
      if (!v6)
      {
        if (!a2)
          goto LABEL_11;
        if (qword_100977A58 != -1)
          dispatch_once(&qword_100977A58, &stru_100926C78);
        v6 = sub_1000433A4((uint64_t)off_100977A50, 200);
        if (!v6)
        {
LABEL_11:
          v6 = 0;
          *(_BYTE *)(a1 + 1176) = 1;
        }
      }
      sub_1000445D4(a1, 0xC8u);
      sub_100043728(buf);
      v7 = v6 != 0;
    }
    else
    {
      v7 = 2;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1180) |= 0x100000u;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 352))(a1, 1))
      *(_DWORD *)(a1 + 1180) &= ~0x100000u;
    else
      *(_BYTE *)(a1 + 1176) = 1;
    *(_DWORD *)(a1 + 1184) |= 1u;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 360))(a1, 1);
    v7 = 0;
  }
  sub_100034234((uint64_t)v9);
  return v7;
}

void sub_10000F254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10000F288(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  char *p_p;
  uint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_DWORD **)(a1 + 32);
  if (v1[178] == 9)
  {
    __p = 0;
    v17 = 0;
    v18 = 0;
    v2 = sub_10034D3CC();
    v3 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v2 + 64))(v2, &__p);
    v4 = HIBYTE(v18);
    if (v3)
      goto LABEL_3;
    if (v18 < 0)
    {
      v12 = v17;
      if (!v17)
      {
LABEL_4:
        operator delete(__p);
        goto LABEL_5;
      }
      p_p = (char *)__p;
      goto LABEL_23;
    }
    if (HIBYTE(v18))
    {
      p_p = (char *)&__p;
      v12 = HIBYTE(v18);
LABEL_23:
      if (v12 >= 2)
      {
        v13 = &p_p[v12];
        v14 = p_p;
        do
        {
          v15 = (char *)memchr(v14, 66, v12 - 1);
          if (!v15)
            break;
          if (*(_WORD *)v15 == 12354)
          {
            if (v15 != v13 && v15 - p_p != -1)
              v1[295] &= ~0x100000u;
            break;
          }
          v14 = v15 + 1;
          v12 = v13 - (_BYTE *)v14;
        }
        while (v13 - (_BYTE *)v14 >= 2);
      }
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
LABEL_5:
  v5 = sub_1000438A4();
  if (sub_100333DE4(v5, 100))
    v1[295] |= 0x2000000u;
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v1 + 2640))(v1))
    v1[295] |= 0x4000000u;
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v1 + 2264))(v1))
    v1[295] |= 0x1000000u;
  v6 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 744))(v6))
    v1[295] |= 0x8000000u;
  v7 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 760))(v7))
    v1[295] |= 0x10000000u;
  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v9 = v1[295];
    LODWORD(__p) = 67109120;
    HIDWORD(__p) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "fEnabledFeatures: %x", (uint8_t *)&__p, 8u);
  }
  return sub_100073EE8();
}

void sub_10000F4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10000F4E0(_BYTE *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  int v8;
  int v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;

  v4 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "NO";
    if (a2)
      v6 = "YES";
    else
      v6 = "NO";
    if (a1[1849])
      v7 = "YES";
    else
      v7 = "NO";
    v8 = a1[1848];
    v9 = a1[1850];
    if (a1[1843])
      v10 = "YES";
    else
      v10 = "NO";
    v17 = 136447234;
    if (v8)
      v11 = "YES";
    else
      v11 = "NO";
    v18 = v6;
    v19 = 2082;
    if (v9)
      v5 = "YES";
    v20 = v7;
    v21 = 2082;
    v22 = v10;
    v23 = 2082;
    v24 = v11;
    v25 = 2082;
    v26 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Trying to remove scan filters with forceRemove=%{public}s fHaveZoneFilters:%{public}s fZoneScansHaveChanged:%{public}s fHaveUUIDFilters:%{public}s fHaveRuleFilters:%{public}s", (uint8_t *)&v17, 0x34u);
  }
  if (a1[1849])
  {
    if (a1[1843] || (a2 & 1) != 0)
      goto LABEL_22;
  }
  else if (a2)
  {
LABEL_22:
    v12 = sub_1000438A4();
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 632))(v12);
    v13 = sub_1000438A4();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 640))(v13, 0);
    a1[1849] = 0;
    a1[1842] = 0;
  }
  if (a1[1848] || a2)
  {
    v14 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 416))(v14, 1);
    a1[1848] = 0;
    a1[1842] = 0;
  }
  if (a1[1850] || a2)
  {
    v15 = sub_1000438A4();
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 648))(v15);
    v16 = sub_1000438A4();
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 792))(v16);
    a1[1850] = 0;
    a1[1842] = 0;
  }
}

uint64_t **sub_10000F69C(uint64_t **result, unint64_t *a2, unint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v10 = result;
    v11 = v8;
    v12 = v8;
    if (v8)
    {
      v11 = sub_10001FD34((uint64_t)v8);
      while (a2 != a3)
      {
        sub_1002C61B8(v5, a2, v8);
        if ((v9 & 1) != 0)
        {
          v8 = v11;
          v12 = v11;
          if (!v11)
          {
            ++a2;
            break;
          }
          v11 = sub_10001FD34((uint64_t)v11);
        }
        else
        {
          v8 = v12;
        }
        ++a2;
        if (!v8)
          break;
      }
    }
    result = (uint64_t **)sub_1002C6244((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    result = (uint64_t **)sub_10000F7A0(v5, a2, (uint64_t *)a2);
    ++a2;
  }
  return result;
}

void sub_10000F78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002C6244((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10000F7A0(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_100004078(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void sub_10000F858(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, int a6)
{
  id v11;
  uint64_t v12;
  int v13;
  int v14;
  NSObject *v15;
  _BOOL8 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  id v26;
  void *v27;
  _QWORD v28[5];
  uint8_t buf[4];
  id v30;
  __int16 v31;
  _BOOL4 v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;

  v11 = a4;
  v12 = sub_100069D20();
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 56))(v12, a3);
  v14 = sub_100009D7C(a1, *(void **)(a2 + 88));
  v15 = qword_100999898;
  v16 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT);
  if (v16)
  {
    v17 = *(unsigned __int8 *)(a2 + 28);
    *(_DWORD *)buf = 138544386;
    v30 = v11;
    v31 = 1024;
    v32 = v13 == 8;
    v33 = 1024;
    v34 = a6;
    v35 = 1024;
    v36 = v17;
    v37 = 1024;
    v38 = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "getReadyForTCC %{public}@, appIsBackgroundRunning: %d, isBeingRestored: %d, isApp : %d, appAuthorizationHasBeenChecked: %d", buf, 0x24u);
  }
  if (((a5 | v14) & 1) == 0 && v13 == 8 && (*(_BYTE *)(a2 + 28) || a6))
  {
    v23 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *(unsigned __int8 *)(a2 + 24);
      *(_DWORD *)buf = 138543618;
      v30 = v11;
      v31 = 1024;
      v32 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Add %{public}@ to tccPendingBundleList, session support backgrounding %d", buf, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 352), "addObject:", v11);
    if (*(_BYTE *)(a2 + 24) && !*(_QWORD *)(a1 + 360))
    {
      v25 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Create FBSDisplayLayoutMonitor", buf, 2u);
      }
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_1002E0C30;
      v28[3] = &unk_100924A78;
      v28[4] = a1;
      v26 = objc_msgSend(objc_alloc((Class)FBSDisplayLayoutMonitor), "initWithDisplayType:handler:", 0, v28);
      v27 = *(void **)(a1 + 360);
      *(_QWORD *)(a1 + 360) = v26;

    }
  }
  else
  {
    v18 = *(unsigned __int8 *)(a2 + 129);
    v19 = sub_10006E9D0(v16, a2);
    if (v18 == 32)
      v20 = 1;
    else
      v20 = a5;
    v21 = (v19 | v20) ^ 1u;
    v22 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      v30 = v11;
      v31 = 1024;
      v32 = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Session \"%{public}@\" tccRequired : %d", buf, 0x12u);
    }
    *(_BYTE *)(a2 + 38) = 1;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 120) + 264))(*(_QWORD *)(a2 + 120), v21);
  }

}

void sub_10000FB3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10000FB58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void **v8;
  void *v9;
  id v10;
  void *__p[2];
  char v13;

  v6 = objc_autoreleasePoolPush();
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  sub_100020A60(a1, a2, __p);
  if (v13 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  v10 = objc_msgSend(v7, "isBackgroundingSupported:central:", v9, a3);

  if (v13 < 0)
    operator delete(__p[0]);

  objc_autoreleasePoolPop(v6);
  return v10;
}

void sub_10000FC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_10000FC60(void *a1, const char *a2)
{
  xpc_object_t value;
  id v3;
  void *v4;
  size_t count;
  size_t v6;
  xpc_object_t v7;
  void *v8;
  NSNumber *v9;
  void *v10;

  value = xpc_dictionary_get_value(a1, a2);
  v3 = value;
  if (value)
  {
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      count = xpc_array_get_count(v3);
      if (count)
      {
        v6 = 0;
        while (1)
        {
          v7 = xpc_array_get_value(v3, v6);
          v8 = v7;
          if (!v7)
            break;
          if (xpc_get_type(v7) != (xpc_type_t)&_xpc_type_int64)
            break;
          v9 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", xpc_int64_get_value(v8));
          v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
          if (!v10)
            break;
          objc_msgSend(v4, "addObject:", v10);

          if (count == ++v6)
            goto LABEL_12;
        }
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_1006DBC30();
        v3 = 0;
      }
      else
      {
LABEL_12:
        v3 = v4;
      }

    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006DBBA0();
      v3 = 0;
    }
  }
  return v3;
}

void sub_10000FDC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000FDE4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  size_t v9;
  int v10;
  xpc_object_t reply;
  void *v12;
  xpc_object_t v13;
  uint64_t i;
  uint64_t v15;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  __chkstk_darwin(v6, 8 * v6);
  v8 = (uint64_t *)((char *)&v15 - v7);
  bzero((char *)&v15 - v7, v9);
  v15 = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E576C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v10 = sub_100074178(uint64, v8, &v15, v6);
    goto LABEL_6;
  }
  v10 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_dictionary_set_uint64(v12, "kCbMsgArgDeviceArrayMaxSize", v15);
    v13 = xpc_array_create(0, 0);
    if (!v10 && v15)
    {
      for (i = 0; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, v8[i]);
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_10000FFAC(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void **v6;
  void *v7;
  void *__p[2];
  char v9;

  v4 = objc_autoreleasePoolPush();
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  sub_100020A60(a1, a2, __p);
  if (v9 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
  objc_msgSend(v5, "cancelAppLaunchAlert:", v7);

  if (v9 < 0)
    operator delete(__p[0]);

  objc_autoreleasePoolPop(v4);
}

void sub_100010068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_10001015C(uint64_t a1)
{
  unsigned __int16 v2;
  void *v3;
  uint64_t v4;

  v2 = (unsigned __int16)objc_msgSend(*(id *)(a1 + 32), "internalFlags");
  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  if ((v2 & 0x800) != 0)
    return objc_msgSend(v3, "deviceBuffered:", v4);
  else
    return objc_msgSend(v3, "deviceFound:", v4);
}

BOOL sub_100010198(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  _BOOL8 v6;
  BOOL v7;

  v1 = *(_QWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 72);
  if (v1 == v2)
    return 0;
  v3 = v1 + 96;
  do
  {
    v4 = *(id *)(v3 - 40);
    v5 = objc_msgSend(v4, "count");
    v6 = v5 != 0;

    if (v5)
      v7 = 1;
    else
      v7 = v3 == v2;
    v3 += 96;
  }
  while (!v7);
  return v6;
}

void sub_10001020C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10001021C(uint64_t a1, uint64_t **a2)
{
  BOOL v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  void **v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  id v22;
  id v23;
  int v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t **v33;
  __int128 v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  NSObject *v39;
  uint8_t *v40;
  char v42;
  uint64_t v44;
  _OWORD v45[2];
  void *__p[2];
  __int128 v47;
  id v48[2];
  _QWORD v49[2];
  uint8_t v50[16];
  uint64_t v51;
  uint8_t buf[32];
  __int128 v53;
  __int128 v54;
  void *v55[2];
  __int128 v56;
  __int128 v57;
  _OWORD v58[9];
  uint64_t v59;

  v49[0] = 0;
  v49[1] = 0;
  sub_10003415C((uint64_t)v49, a1 + 40);
  if (*(_QWORD *)(a1 + 240))
    v3 = 1;
  else
    v3 = *(_QWORD *)(a1 + 264) != 0;
  v42 = v3;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v7 = (_QWORD *)(a1 + 232);
    do
    {
      v47 = 0u;
      v48[0] = 0;
      *(_OWORD *)__p = 0u;
      memset(v45, 0, sizeof(v45));
      v48[1] = 0;

      BYTE1(v45[0]) = 0;
      DWORD1(v45[0]) = 0;
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_100932C78);
      if (sub_10006C874(qword_100977B48, *v4))
      {
        sub_1000340DC(*v4, (uint64_t)buf);
        if (SBYTE7(v47) < 0)
          operator delete(__p[0]);
        *(_OWORD *)__p = *(_OWORD *)buf;
        *(_QWORD *)&v47 = *(_QWORD *)&buf[16];
      }
      else
      {
        v59 = 0;
        v57 = 0u;
        memset(v58, 0, sizeof(v58));
        *(_OWORD *)v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        memset(buf, 0, sizeof(buf));
        sub_100272ADC((uint64_t)buf);
        std::ostream::operator<<(buf, *v4);
        std::stringbuf::str(&buf[8]);
        if (SBYTE7(v47) < 0)
          operator delete(__p[0]);
        *(_OWORD *)__p = *(_OWORD *)v50;
        *(_QWORD *)&v47 = v51;
        *(_QWORD *)buf = v6;
        *(_QWORD *)&buf[*(_QWORD *)(v6 - 24)] = v44;
        if (SHIBYTE(v56) < 0)
          operator delete(v55[1]);
        std::streambuf::~streambuf(&buf[8]);
        std::ios::~ios(v58);
      }
      std::string::append((std::string *)__p, "-scan");
      v8 = qword_1009999E0;
      if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
      {
        if ((SBYTE7(v47) & 0x80u) == 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        v10 = *((_DWORD *)v4 + 2);
        v11 = *((_DWORD *)v4 + 3);
        v12 = *((_DWORD *)v4 + 4);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v10;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v11;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v12;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "requestScanRxThreshold session=%s totalRx=%u btMCRx=%u timeout=%u", buf, 0x1Eu);
      }
      v13 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_33;
      v14 = *v4;
      v15 = a1 + 232;
      do
      {
        v16 = v13[4];
        v17 = v16 >= v14;
        if (v16 >= v14)
          v18 = v13;
        else
          v18 = v13 + 1;
        if (v17)
          v15 = (uint64_t)v13;
        v13 = (_QWORD *)*v18;
      }
      while (*v18);
      if ((_QWORD *)v15 == v7 || v14 < *(_QWORD *)(v15 + 32))
LABEL_33:
        v15 = a1 + 232;
      v19 = *((_DWORD *)v4 + 2);
      v20 = *((_DWORD *)v4 + 3);
      v21 = *((_DWORD *)v4 + 4);
      if (!__PAIR64__(v20, v19) && !v21 && (_QWORD *)v15 != v7)
      {
        LOBYTE(v45[0]) = 0;
        memset((char *)v45 + 8, 0, 24);
        v22 = v48[0];
        v48[0] = 0;

        v23 = v48[1];
        v48[1] = 0;

        *(_QWORD *)((char *)&v45[1] + 4) = *(_QWORD *)(v15 + 60);
        LOWORD(v45[0]) = *(_WORD *)(v15 + 40);
        v24 = *(_DWORD *)(v15 + 68);
        DWORD2(v47) = *(_DWORD *)(v15 + 96);
        *(_OWORD *)((char *)v45 + 4) = *(_OWORD *)(v15 + 44);
        HIDWORD(v45[1]) = v24;
        v25 = *(void **)(v15 + 104);
        if (v25)
        {
          v26 = objc_retainBlock(v25);
          v27 = v48[0];
          v48[0] = v26;

        }
        v28 = *(void **)(v15 + 112);
        if (v28)
        {
          v29 = objc_retainBlock(v28);
          v30 = v48[1];
          v48[1] = v29;

        }
        BYTE1(v45[0]) = 1;
        v19 = *((_DWORD *)v4 + 2);
        v20 = *((_DWORD *)v4 + 3);
        v21 = *((_DWORD *)v4 + 4);
      }
      *((_QWORD *)&v45[0] + 1) = __PAIR64__(v20, v19);
      DWORD2(v45[1]) = v21;
      v31 = objc_retainBlock((id)v4[4]);
      v32 = v48[0];
      v48[0] = v31;

      DWORD2(v47) = *((_DWORD *)v4 + 5);
      DWORD1(v45[0]) = *((_DWORD *)v4 + 6);
      *(_QWORD *)buf = v4;
      v33 = sub_100067CE0((uint64_t **)(a1 + 224), (unint64_t *)v4, (uint64_t)&unk_100740F58, (_QWORD **)buf);
      v34 = v45[1];
      *(_OWORD *)(v33 + 5) = v45[0];
      *(_OWORD *)(v33 + 7) = v34;
      std::string::operator=((std::string *)v33 + 3, (const std::string *)__p);
      *((_DWORD *)v33 + 24) = DWORD2(v47);
      v35 = (uint64_t *)objc_retainBlock(v48[0]);
      v36 = v33[13];
      v33[13] = v35;

      v37 = (uint64_t *)objc_retainBlock(v48[1]);
      v38 = v33[14];
      v33[14] = v37;

      if (BYTE1(v45[0]))
      {
        v39 = qword_1009999E0;
        if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
        {
          sub_100017BFC((unsigned __int8 *)v45);
          v40 = buf;
          if ((buf[23] & 0x80u) != 0)
            v40 = *(uint8_t **)buf;
          *(_DWORD *)v50 = 136315138;
          *(_QWORD *)&v50[4] = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "Session %s cancelled", v50, 0xCu);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
        }
      }

      if (SBYTE7(v47) < 0)
        operator delete(__p[0]);
      v4 += 5;
    }
    while (v4 != v5);
  }
  sub_10006BF1C(a1, v42);
  return sub_100034234((uint64_t)v49);
}

void sub_10001075C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_100034234((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_1000107AC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  dispatch_time_t v8;
  NSObject *v9;
  _QWORD v10[5];
  _QWORD block[6];

  v2 = *(_QWORD **)(a1 + 8);
  v3 = (_QWORD *)(a1 + 16);
  if (v2 != (_QWORD *)(a1 + 16))
  {
    do
    {
      v4 = v2[4];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100007CB8;
      block[3] = &unk_100918090;
      block[4] = a1;
      block[5] = v4;
      dispatch_async(v4, block);
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  v8 = dispatch_time(0, 300000000000);
  v9 = *(NSObject **)a1;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1004767B8;
  v10[3] = &unk_100917378;
  v10[4] = a1;
  dispatch_after(v8, v9, v10);
}

void sub_100010A2C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  int *data;
  int *v6;
  uint64_t uint64;
  uint64_t v8;
  xpc_object_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  xpc_object_t reply;
  uint64_t value;
  size_t length;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  length = 0;
  data = (int *)xpc_dictionary_get_data(v4, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    v6 = data;
    uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgSessionID");
    value = 0;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      sub_1006E71D4();
      if (uint64)
        goto LABEL_4;
    }
    else if (uint64)
    {
LABEL_4:
      v8 = (int)sub_10007453C(uint64, v6, &value);
LABEL_11:
      reply = xpc_dictionary_create_reply(xdict);
      if (!reply)
        return;
      v10 = reply;
      xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
      v12 = value;
      v11 = "kCBMsgArgBTDevice";
      v9 = v10;
      goto LABEL_13;
    }
    v8 = 1;
    goto LABEL_11;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
    sub_1006E7234();
  v9 = xpc_dictionary_create_reply(xdict);
  if (v9)
  {
    v10 = v9;
    v11 = "kCBMsgArgResult";
    v12 = 8;
LABEL_13:
    xpc_dictionary_set_uint64(v9, v11, v12);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

uint64_t sub_100010B94(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_10092DBD0;
  v2 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;

  v3 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;

  sub_100010D8C(a1 + 160, *(_QWORD **)(a1 + 168));
  sub_100010D8C(a1 + 136, *(_QWORD **)(a1 + 144));

  return a1;
}

uint64_t sub_100010C28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_10092DBD0;
  *(_QWORD *)(a1 + 21) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 44) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_WORD *)(a1 + 128) = 257;
  *(_QWORD *)(a1 + 144) = 0;
  v2 = a1 + 144;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  v3 = a1 + 136;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v4 = a1 + 168;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  v5 = a1 + 160;
  *(_WORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 186) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = 0;
  v6 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v7 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v6;

  v8 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v9 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v8;

  sub_100010D8C(v3, *(_QWORD **)(a1 + 144));
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = v2;
  sub_100010D8C(v5, *(_QWORD **)(a1 + 168));
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = v4;
  return a1;
}

void sub_100010D30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100010D8C(v3, *(_QWORD **)(v1 + 168));
  sub_100010D8C(v2, *(_QWORD **)(v1 + 144));

  _Unwind_Resume(a1);
}

void sub_100010D8C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100010D8C(a1, *a2);
    sub_100010D8C(a1, a2[1]);

    operator delete(a2);
  }
}

void sub_100010DD4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  unsigned __int8 *string;
  int v6;
  xpc_object_t reply;
  void *v8;
  int bytes;
  __int16 v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  string = (unsigned __int8 *)xpc_dictionary_get_string(value, "kCBMsgArgAddressString");
  v10 = 0;
  bytes = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E7174();
  v6 = sub_10007464C(string, (uint64_t)&bytes);
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_data(v8, "kCBMsgArgAddressBytes", &bytes, 6uLL);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

uint64_t sub_100010EB8(uint64_t a1, uint64_t *a2, uint64_t *a3, char *a4)
{
  void *v7;
  uint64_t *v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v7 = objc_autoreleasePoolPush();
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  v10 = (void *)CFPreferencesCopyAppValue(v9, CFSTR("com.apple.MobileBluetooth.debug"));

  v11 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    if (*((char *)a3 + 23) >= 0)
      v12 = a3;
    else
      v12 = (uint64_t *)*a3;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", v13));

    v15 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v14, v15) & 1) != 0)
    {
      v16 = v14;
      if ((objc_msgSend(v16, "isEqualToString:", CFSTR("TRUE")) & 1) != 0
        || (objc_msgSend(v16, "isEqualToString:", CFSTR("YES")) & 1) != 0)
      {
        v17 = 1;
LABEL_12:
        *a4 = v17;

LABEL_16:
        v18 = 1;
LABEL_22:

        goto LABEL_23;
      }
      if ((objc_msgSend(v16, "isEqualToString:", CFSTR("FALSE")) & 1) != 0
        || (objc_msgSend(v16, "isEqualToString:", CFSTR("NO")) & 1) != 0)
      {
        v17 = 0;
        goto LABEL_12;
      }

    }
    else
    {
      v19 = objc_opt_class(NSNumber);
      if ((objc_opt_isKindOfClass(v14, v19) & 1) != 0)
      {
        *a4 = objc_msgSend(v14, "BOOLValue");
        goto LABEL_16;
      }
    }
    v18 = 0;
    goto LABEL_22;
  }
  v18 = 0;
LABEL_23:

  objc_autoreleasePoolPop(v7);
  return v18;
}

void sub_100011058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000110A0(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKey:", *(_QWORD *)(a1 + 40)));
  v3 = v2;
  if (v2)
  {
    if ((objc_msgSend(v2, "isApp") & 1) != 0)
    {
      if (objc_msgSend(v3, "isAlive"))
      {
        if (objc_msgSend(v3, "state") == 1)
          v4 = objc_msgSend(*(id *)(a1 + 32), "translateApplicationState:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "applicationStateForApplication:", *(_QWORD *)(a1 + 40)));
        else
          v4 = objc_msgSend(v3, "state");
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v4;
        goto LABEL_13;
      }
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v6 = 2;
    }
    else
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v6 = 32;
    }
    *(_BYTE *)(v5 + 24) = v6;
    goto LABEL_13;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_10071ACC8((uint64_t)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "UTF8String"), (uint64_t)&v7);
LABEL_13:

}

void sub_1000111C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1000111FC(_QWORD *a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *__p;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD v24[2];

  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, (uint64_t)(a1 + 7));
  __p = 0;
  v22 = 0;
  v23 = 0;
  v4 = (unint64_t *)a1[29];
  if (v4 != (unint64_t *)a1[30])
  {
    do
    {
      v5 = *v4;
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092E880);
      if (sub_100021398(qword_100977B48, v5) == a2)
      {
        v6 = (unint64_t *)a1[30];
        v7 = (char *)v6 - (char *)(v4 + 1);
        if (v6 != v4 + 1)
          memmove(v4, v4 + 1, (char *)v6 - (char *)(v4 + 1));
        a1[30] = (char *)v4 + v7;
        if (v22 >= v23)
        {
          v9 = v22 - __p;
          if ((unint64_t)(v9 + 1) >> 61)
            abort();
          v10 = ((char *)v23 - (char *)__p) >> 2;
          if (v10 <= v9 + 1)
            v10 = v9 + 1;
          if ((unint64_t)((char *)v23 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v10;
          if (v11)
            v12 = (char *)sub_10007ABA0((uint64_t)&v23, v11);
          else
            v12 = 0;
          v13 = (unint64_t *)&v12[8 * v9];
          *v13 = v5;
          v8 = (uint64_t *)(v13 + 1);
          v14 = v22;
          if (v22 != __p)
          {
            do
            {
              v15 = *--v14;
              *--v13 = v15;
            }
            while (v14 != __p);
            v14 = __p;
          }
          __p = (uint64_t *)v13;
          v23 = (uint64_t *)&v12[8 * v11];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v22 = v5;
          v8 = v22 + 1;
        }
        v22 = v8;
      }
      else
      {
        ++v4;
      }
    }
    while (v4 != (unint64_t *)a1[30]);
    v17 = __p;
    v16 = v22;
    if (__p != v22)
    {
      do
      {
        v18 = *v17;
        v19 = sub_100423FCC(a1[32], a1[33], *v17);
        sub_100423F88((uint64_t)(a1 + 32), v19, a1[33]);
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_10092E880);
        sub_10050ABD0(qword_100977B48, v18);
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_10092E880);
        sub_10050AC6C(qword_100977B48, v18);
        ++v17;
      }
      while (v17 != v22);
      v16 = __p;
    }
    if (v16)
      operator delete(v16);
  }
  return sub_100034234((uint64_t)v24);
}

void sub_10001145C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_100011488(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  _QWORD *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  unsigned __int8 *i;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  int v21;
  id v22;
  void *v23;
  _BYTE *v24;
  NSObject *v25;
  __int16 v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  NSObject *v31;
  _BYTE *v32;
  NSObject *v33;
  uint64_t v34;
  int v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  unsigned __int16 v43;
  uint64_t v44;
  int v45;
  uint64_t v47;
  unsigned __int16 v48;
  uint64_t v49;
  int v50;
  _QWORD v51[3];
  _QWORD v52[2];
  uint8_t v53[4];
  _BYTE *v54;
  uint8_t v55[4];
  uint64_t v56;
  _BYTE __p[14];
  const char *__p_14;
  _BYTE v59[10];
  __int16 v60;
  _BYTE v61[10];
  const char *v62;
  __int16 v63;
  const char *v64;
  __int16 v65;
  int v66;
  _WORD buf[16];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unsigned __int8 src[8];
  uint64_t v75;

  v3 = a1;
  if (!a2 && os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
  {
    sub_10071590C();
    v3 = a1;
  }
  v4 = *(id *)a2;
  v52[0] = 0;
  v52[1] = 0;
  sub_10003415C((uint64_t)v52, v3 + 88);
  v5 = objc_msgSend(*(id *)(v3 + 168), "objectForKey:", v4);
  objc_msgSend(*(id *)(v3 + 168), "setObject:forKey:", a2, v4);
  if (v5)
  {
    v6 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      v7 = v5[60];
      v8 = *(_QWORD *)(a2 + 480);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[2] = v7;
      buf[6] = 2048;
      *(_QWORD *)&buf[7] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MUC - Old device exist - copy current IDS user address 0x%llx in new device 0x%llx", (uint8_t *)buf, 0x16u);
    }
    sub_10065CE38(a2, (uint64_t)v5);
    sub_10066963C((uint64_t)v5);
    operator delete();
  }
  *(_QWORD *)src = 0;
  v75 = 0;
  sub_100030BCC(src, v4);
  *(_QWORD *)__p = *(_QWORD *)(a2 + 16);
  *(_QWORD *)buf = __p;
  v47 = v3 + 176;
  v9 = sub_100067AE0(v3 + 176, (unint64_t *)__p, (uint64_t)&unk_100740F58, (_QWORD **)buf);
  uuid_copy((unsigned __int8 *)v9 + 40, src);
  if (*(_QWORD *)(a2 + 24))
  {
    *(_QWORD *)__p = *(_QWORD *)(a2 + 24);
    *(_QWORD *)buf = __p;
    v10 = sub_100067AE0(v47, (unint64_t *)__p, (uint64_t)&unk_100740F58, (_QWORD **)buf);
    uuid_copy((unsigned __int8 *)v10 + 40, src);
  }
  v11 = (unsigned __int8 *)(v3 + 200);
  for (i = *(unsigned __int8 **)(v3 + 208); i != v11; i = (unsigned __int8 *)*((_QWORD *)i + 1))
  {
    if (!uuid_compare(i + 16, src))
    {
      if (i != v11)
      {
        v13 = *(_QWORD *)i;
        *(_QWORD *)(v13 + 8) = *((_QWORD *)i + 1);
        **((_QWORD **)i + 1) = v13;
        --*(_QWORD *)(v3 + 216);
        operator delete(i);
      }
      break;
    }
  }
  v14 = sub_10066A19C(v3 + 200, 0, 0, src);
  *v14 = v11;
  v15 = *(_QWORD **)(v3 + 208);
  v14[1] = v15;
  *v15 = v14;
  v16 = *(_QWORD *)(v3 + 216);
  *(_QWORD *)(v3 + 208) = v14;
  *(_QWORD *)(v3 + 216) = v16 + 1;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  memset(buf, 0, sizeof(buf));
  v17 = (unsigned __int16)(v16 + 1);
  if ((signed int)v17 > *(_DWORD *)(v3 + 152))
  {
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEBUG))
    {
      sub_100715890();
      v3 = a1;
    }
    v18 = 0;
    v43 = 0;
    v50 = 0;
    v49 = 0;
    v48 = 0;
    v19 = 0;
    v20 = 0;
    v44 = v3 + 256;
    if (v17 <= 1)
      v21 = 1;
    else
      v21 = v17;
    v45 = v21;
    while (v45 != v18 + 1)
    {
      v22 = sub_100030DF4((const unsigned __int8 *)(*(_QWORD *)v11 + 16));
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      v24 = objc_msgSend(*(id *)(v3 + 168), "objectForKey:", v23);
      if (!v24)
      {
        v25 = qword_100999810;
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
        {
          sub_10071584C(v55, &v56, v25);
          v3 = a1;
        }
      }
      v26 = v24[164];
      v20 += v26;
      v19 += v24[163];
      if (v24[163])
        LOBYTE(v26) = v26 | 2;
      v48 += v24[160];
      if (v24[160])
        LOBYTE(v26) = v26 | 4;
      if (v24[161])
        LOBYTE(v26) = v26 | 8;
      v27 = HIDWORD(v49);
      if (*((_QWORD *)v24 + 8))
        v27 = HIDWORD(v49) + 1;
      LOWORD(v49) = v49 + v24[161];
      HIDWORD(v49) = v27;
      if (*((_QWORD *)v24 + 8))
        LOBYTE(v26) = v26 | 0x10;
      v28 = v50;
      if (v24[528])
        v28 = v50 + 1;
      v50 = v28;
      if (v24[528])
        LOBYTE(v26) = v26 | 0x20;
      if (!(_BYTE)v26)
      {
        v29 = *(uint64_t **)(v3 + 200);
        v30 = *v29;
        *(_QWORD *)(v30 + 8) = v29[1];
        *(_QWORD *)v29[1] = v30;
        --*(_QWORD *)(v3 + 216);
        operator delete(v29);
        if (*((_QWORD *)v24 + 3))
        {
          *(_QWORD *)__p = *((_QWORD *)v24 + 3);
          sub_100015ECC(v47, (unint64_t *)__p);
        }
        v31 = qword_100999810;
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
        {
          sub_10064E030((uint64_t)v24);
          v32 = __p;
          if (v59[1] < 0)
            v32 = *(_BYTE **)__p;
          *(_DWORD *)v53 = 136446210;
          v54 = v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Device erased [%{public}s]", v53, 0xCu);
          if ((v59[1] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        *(_QWORD *)__p = *((_QWORD *)v24 + 2);
        sub_100015ECC(v47, (unint64_t *)__p);
        objc_msgSend(*(id *)(v3 + 168), "removeObjectForKey:", v23);
        sub_10065CED8((uint64_t)v24, v44);
        sub_10066963C((uint64_t)v24);
        operator delete();
      }
      ++buf[v26];
      sub_100030BCC(__p, v23);
      sub_100030E34(v3, __p);

      ++v43;
      ++v18;
      v3 = a1;
    }
    v33 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 67110656;
      *(_DWORD *)&__p[4] = v20;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = v19;
      LOWORD(__p_14) = 1024;
      *(_DWORD *)((char *)&__p_14 + 2) = v48;
      HIWORD(__p_14) = 1024;
      *(_DWORD *)v59 = (unsigned __int16)v49;
      *(_WORD *)&v59[4] = 1024;
      *(_DWORD *)&v59[6] = WORD2(v49);
      v60 = 1024;
      *(_DWORD *)v61 = (unsigned __int16)v50;
      *(_WORD *)&v61[4] = 1024;
      *(_DWORD *)&v61[6] = v43;
      _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Device List Full with numConnected %d numConnecting %d numLEPaired %d numClassicPaired %d numOfFindMyDevices %d numOfFastLeConnection %d numConnectOrPaired %d", __p, 0x2Cu);
      v33 = qword_100999810;
    }
    v34 = 0;
    while (1)
    {
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        v35 = (unsigned __int16)buf[v34];
        if ((v34 & 1) != 0)
          v36 = "Y";
        else
          v36 = "N";
        *(_DWORD *)__p = 136316674;
        if ((v34 & 2) != 0)
          v37 = "Y";
        else
          v37 = "N";
        *(_QWORD *)&__p[4] = v36;
        if ((v34 & 4) != 0)
          v38 = "Y";
        else
          v38 = "N";
        *(_WORD *)&__p[12] = 2080;
        if ((v34 & 8) != 0)
          v39 = "Y";
        else
          v39 = "N";
        __p_14 = v37;
        if ((v34 & 0x10) != 0)
          v40 = "Y";
        else
          v40 = "N";
        *(_WORD *)v59 = 2080;
        if ((v34 & 0x20) != 0)
          v41 = "Y";
        else
          v41 = "N";
        *(_QWORD *)&v59[2] = v38;
        v60 = 2080;
        *(_QWORD *)v61 = v39;
        *(_WORD *)&v61[8] = 2080;
        v62 = v40;
        v63 = 2080;
        v64 = v41;
        v65 = 1024;
        v66 = v35;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Device List Full with connected %s connecting %s lePaired %s ClassicPaired %s UnexpiredFindMyDevice %s FastLeConnectionDevice %s - count %d", __p, 0x44u);
        v33 = qword_100999810;
      }
      if (++v34 == 64)
      {
        v42 = sub_100027F68();
        sub_100091AE8(v51, "");
        sub_1005756F0(v42, 3717, v51, 1);
        __break(1u);
      }
    }
  }
  sub_100034234((uint64_t)v52);

}

void sub_100011D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52)
{
  sub_100034234((uint64_t)&a44);

  _Unwind_Resume(a1);
}

uint64_t sub_100011E94(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;

  *(_QWORD *)a1 = off_10092DC68;
  sub_1003FCECC(a1);
  sub_1003FCECC(a1);
  v2 = *(void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;

  v3 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;

  v4 = *(void **)(a1 + 408);
  *(_QWORD *)(a1 + 408) = 0;

  v5 = *(void **)(a1 + 336);
  *(_QWORD *)(a1 + 336) = 0;

  sub_100012148(a1 + 312, *(_QWORD **)(a1 + 320));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 312) = a1 + 320;
  sub_100012198(a1 + 448, *(_QWORD **)(a1 + 456));
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 448) = a1 + 456;
  v6 = *(void **)(a1 + 344);
  *(_QWORD *)(a1 + 344) = 0;

  v7 = *(_QWORD *)(a1 + 400);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    *(_QWORD *)(a1 + 400) = 0;
  }
  v8 = *(NSObject **)(a1 + 440);
  if (v8)
  {
    dispatch_source_cancel(v8);
    dispatch_release(*(dispatch_object_t *)(a1 + 440));
    *(_QWORD *)(a1 + 440) = 0;
  }
  sub_100010D8C(a1 + 416, *(_QWORD **)(a1 + 424));
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = a1 + 424;
  if (*(int *)(a1 + 376) >= 1)
  {
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10092DE88);
    sub_1002E51D0((uint64_t)off_100978168, *(void **)(a1 + 88), 0);
  }

  sub_100012198(a1 + 448, *(_QWORD **)(a1 + 456));
  sub_100010D8C(a1 + 416, *(_QWORD **)(a1 + 424));

  sub_100012148(a1 + 312, *(_QWORD **)(a1 + 320));
  sub_100067F18(a1 + 272, *(_QWORD **)(a1 + 280));

  return sub_100010B94(a1);
}

void sub_10001208C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012198(v1 + 448, *(_QWORD **)(v1 + 456));
  sub_100010D8C(v1 + 416, *(_QWORD **)(v1 + 424));

  sub_100012148(v1 + 312, *(_QWORD **)(v1 + 320));
  sub_100067F18(v1 + 272, *(_QWORD **)(v1 + 280));

  sub_100010B94(v1);
  _Unwind_Resume(a1);
}

void sub_100012148(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100012148(a1, *a2);
    sub_100012148(a1, a2[1]);

    operator delete(a2);
  }
}

void sub_100012198(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100012198(a1, *a2);
    sub_100012198(a1, a2[1]);
    sub_10040F2B4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

unint64_t sub_1000121E0(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  _QWORD v23[2];

  if (!a2)
    return 0;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092E880);
  v4 = sub_100021398(qword_100977B48, a2);
  if (!v4)
    return 0;
  v5 = v4;
  v23[0] = 0;
  v23[1] = 0;
  sub_10003415C((uint64_t)v23, (uint64_t)(a1 + 7));
  v6 = (unint64_t *)a1[29];
  if (v6 == (unint64_t *)a1[30])
  {
LABEL_13:
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_10092E880);
    v7 = sub_1000221B8(qword_100977B48, v5);
    if (v7)
    {
      v8 = a1[31];
      v9 = (unint64_t *)a1[30];
      if ((unint64_t)v9 >= v8)
      {
        v11 = a1[29];
        v12 = ((uint64_t)v9 - v11) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          abort();
        v13 = v8 - v11;
        v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)sub_10007ABA0((uint64_t)(a1 + 31), v15);
        else
          v16 = 0;
        v17 = (unint64_t *)&v16[8 * v12];
        v18 = &v16[8 * v15];
        *v17 = v7;
        v10 = v17 + 1;
        v20 = (char *)a1[29];
        v19 = (char *)a1[30];
        if (v19 != v20)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *--v17 = v21;
          }
          while (v19 != v20);
          v19 = (char *)a1[29];
        }
        a1[29] = v17;
        a1[30] = v10;
        a1[31] = v18;
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v9 = v7;
        v10 = v9 + 1;
      }
      a1[30] = v10;
    }
  }
  else
  {
    while (1)
    {
      v7 = *v6;
      if (*v6 == a2)
        break;
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092E880);
      if (sub_100021398(qword_100977B48, v7) == v5)
        goto LABEL_34;
      if (++v6 == (unint64_t *)a1[30])
        goto LABEL_13;
    }
    v7 = a2;
  }
LABEL_34:
  sub_100034234((uint64_t)v23);
  return v7;
}

void sub_1000123EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100012680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  (*(void (**)(uint64_t))(v13 + 16))(v13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000126BC(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v6;
  void *v8[2];
  uint64_t v9;

  v9 = a2;
  v6 = a3;
  switch(a4)
  {
    case 3:
      operator new();
    case 1:
      operator new();
    case 0:
      operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1000340DC(a2, (uint64_t)v8);
    sub_1006DCE7C();
  }
  if (a4 == 2 && os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    sub_1006DCE50();

  return 1;
}

void sub_100012A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;

  _Unwind_Resume(a1);
}

void sub_100012AC0(uint64_t a1, uint64_t a2, _xpc_connection_s *a3, uint64_t a4)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_10001C578(a1, a2, a3, a4);
  *v4 = off_100923160;
  v4[17] = 0;
  v4[16] = v4 + 17;
  v4[18] = 0;
  operator new();
}

void sub_100012E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  sub_100272CFC((uint64_t)va);
  sub_10001A82C(v6, *(_QWORD **)(v5 + 136));
  sub_100008708(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_100012EF4(uint64_t a1, unint64_t a2, int a3, int a4, char a5)
{
  _QWORD *v6;
  uint64_t *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  id v13;
  void *v14;
  void *v15;
  NSNumber *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  NSObject *v29;
  NSObject *v30;
  _BYTE *v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  const char *v58;
  void *v59;
  int v60;
  NSObject *v61;
  int v62;
  __int128 *v63;
  __int128 *p_buf;
  void **v65;
  const char *v66;
  const char *v67;
  NSObject *v68;
  NSObject *v69;
  uint64_t **v71;
  void *v73;
  uint64_t v75;
  uint64_t v76;
  void *v77[2];
  char v78;
  uint64_t *v79[3];
  _QWORD v80[5];
  _QWORD v81[4];
  int v82;
  int v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  void *v88[2];
  __int128 v89;
  uint64_t v90;
  _BYTE __p[24];
  const char *v92;
  _QWORD v93[2];
  __int128 buf;
  char *v95;
  _BYTE v96[128];

  if (!*(_DWORD *)(a1 + 1960))
    return 105;
  v6 = *(_QWORD **)(a1 + 2048);
  if (!v6)
    return 401;
  v8 = (uint64_t *)(a1 + 2048);
  do
  {
    v9 = v6[4];
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = v6;
    else
      v11 = v6 + 1;
    if (v10)
      v8 = v6;
    v6 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 == (uint64_t *)(a1 + 2048) || v8[4] > a2)
    return 401;
  v71 = (uint64_t **)(a1 + 2040);
  v76 = v8[5];
  v90 = 0;
  *(_OWORD *)v88 = 0u;
  v89 = 0u;
  sub_1000340DC(a2, (uint64_t)__p);
  sub_100013A54((uint64_t)v88, (__int128 *)__p, *(_BYTE *)(v76 + 81), *(_DWORD *)(v76 + 120));
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (qword_10097AC48 != -1)
    dispatch_once(&qword_10097AC48, &stru_10093F558);
  sub_10006544C(qword_10097AC40, (uint64_t)v88);
  v13 = sub_10003920C(v76);
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "cuFilteredArrayUsingBlock:", &stru_10093EF38));
  v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v15));

  if (sub_100039218(v76))
  {
    v16 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_100039218(v76));
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    objc_msgSend(v73, "addObject:", v17);

  }
  v75 = a1;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v18 = v73;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v84, v96, 16);
  if (v19)
  {
    v20 = *(_QWORD *)v85;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v85 != v20)
          objc_enumerationMutation(v18);
        v22 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * (_QWORD)v21);
        if (qword_100977B40 != -1)
          dispatch_once(&qword_100977B40, &stru_10093F498);
        sub_1004BBCD0((uint64_t)off_100977B38, objc_msgSend(v22, "longLongValue"));
        v21 = (char *)v21 + 1;
      }
      while (v19 != v21);
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v84, v96, 16);
    }
    while (v19);
  }

  if (sub_1000589B8(v76))
    *(_BYTE *)(v75 + 1843) = 1;
  if (sub_1000589A4(v76))
    *(_BYTE *)(v75 + 1845) = 1;
  if (sub_100068E98(v76))
    *(_BYTE *)(v75 + 1844) = 1;
  v23 = (_QWORD *)sub_1000587C8(v76);
  if (v23[1] != *v23 || sub_100058920(v76))
    *(_BYTE *)(v75 + 1846) = 1;
  if (sub_1000340C8(v76))
    *(_BYTE *)(v75 + 1847) = 1;
  v24 = *(_QWORD *)(v76 + 8);
  v26 = *(_QWORD *)(v24 + 64);
  v25 = *(_QWORD *)(v24 + 72);
  if (v26 != v25)
  {
    do
    {
      if (*(_BYTE *)(v26 + 64))
      {
        v27 = *(unsigned __int8 *)(v26 + 8);
        v28 = sub_10000D558(v75, v27);
        if ((v28 & 0xFFFFFFFD) != 0)
        {
          v29 = qword_100999828;
          if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__p = 67109376;
            *(_DWORD *)&__p[4] = v27;
            *(_WORD *)&__p[8] = 1024;
            *(_DWORD *)&__p[10] = v28;
            _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Failed to destroy a match table for type %d with error %d", __p, 0xEu);
          }
        }
      }
      v26 += 96;
    }
    while (v26 != v25);
    v24 = *(_QWORD *)(v76 + 8);
  }
  if (*(_BYTE *)(v24 + 143))
  {
    v30 = qword_100999948;
    if (os_log_type_enabled((os_log_t)qword_100999948, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(a2, (uint64_t)__p);
      v31 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "session %{public}s no longer needs to do Exposure Notification", (uint8_t *)&buf, 0xCu);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    sub_10066E900((dispatch_object_t *)v75);
    *(_QWORD *)(v75 + 2280) = 0;
    *(_OWORD *)(v75 + 2296) = 0u;
    *(_OWORD *)(v75 + 2312) = 0u;
    *(_OWORD *)(v75 + 2328) = 0u;
    if (*(_BYTE *)(v75 + 1255))
      sub_10066D748(v75, 2);
  }
  v32 = *(_DWORD *)(v75 + 1964) != 2 || *(_BYTE *)(*(_QWORD *)(v76 + 8) + 3) != 0;
  v33 = sub_10003BE44();
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 824))(v33);
  if (byte_1009940AD)
    v35 = 0;
  else
    v35 = v34;
  if (v35 != 1)
  {
    v37 = 0;
LABEL_75:
    v40 = 0;
    goto LABEL_76;
  }
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093F498);
  v36 = sub_1004BAB08();
  v37 = (v36 & 0xFFFFFFFD) != 1;
  if ((sub_100038F18(v75, v76) & 1) == 0 && !*(_BYTE *)(*(_QWORD *)(v76 + 8) + 200)
    || v36 == 2 && (v38 = sub_1000438A4(), !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 2664))(v38)))
  {
    v37 = 0;
  }
  if (!byte_1009940AE)
  {
    v34 = sub_1006787FC(v75, v76);
    if (!(_DWORD)v34)
      goto LABEL_75;
  }
  v39 = sub_1000438A4();
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 2672))(v39);
  v40 = v34 | v37;
LABEL_76:
  v83 = 0;
  if (sub_10067858C(v34, v76, &v83))
  {
    v81[0] = _NSConcreteStackBlock;
    v81[1] = 3221225472;
    v81[2] = sub_100678A50;
    v81[3] = &unk_10093EEF8;
    v82 = v83;
    sub_10003F2E8((os_unfair_lock_s *)(v75 + 1872), v81);
  }
  sub_1000160D4(v75, a2, v37, v40);
  if ((a5 & 1) != 0)
    goto LABEL_99;
  v41 = *(_QWORD *)(v76 + 8);
  if (!*(_DWORD *)(v41 + 188) && !*(_DWORD *)(v41 + 192))
    goto LABEL_99;
  if (!*(_BYTE *)(v41 + 196))
    goto LABEL_99;
  buf = 0uLL;
  v95 = 0;
  v80[0] = _NSConcreteStackBlock;
  v80[1] = 3221225472;
  v80[2] = sub_100678A6C;
  v80[3] = &unk_10093EF58;
  v80[4] = v75;
  v42 = objc_retainBlock(v80);
  v43 = v42;
  v44 = *((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1) >= (unint64_t)v95)
  {
    v46 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 3);
    v47 = v46 + 1;
    if (v46 + 1 > 0x666666666666666)
      abort();
    if (0x999999999999999ALL * ((uint64_t)&v95[-buf] >> 3) > v47)
      v47 = 0x999999999999999ALL * ((uint64_t)&v95[-buf] >> 3);
    v48 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v95[-buf] >> 3) >= 0x333333333333333 ? 0x666666666666666 : v47;
    v93[0] = &v95;
    v49 = (char *)sub_100261D70((uint64_t)&v95, v48);
    v51 = &v49[40 * v46];
    *((_QWORD *)v51 + 1) = 0;
    *((_QWORD *)v51 + 2) = 0;
    *(_QWORD *)v51 = a2;
    *((_DWORD *)v51 + 6) = 0;
    *((_QWORD *)v51 + 4) = v43;
    v52 = *((_QWORD *)&buf + 1);
    v53 = buf;
    if (*((_QWORD *)&buf + 1) == (_QWORD)buf)
    {
      v53 = *((_QWORD *)&buf + 1);
      v55 = &v49[40 * v46];
    }
    else
    {
      v54 = *((_QWORD *)&buf + 1);
      v55 = &v49[40 * v46];
      do
      {
        v56 = *(_OWORD *)(v54 - 40);
        *(_OWORD *)(v55 - 28) = *(_OWORD *)(v54 - 28);
        *(_OWORD *)(v55 - 40) = v56;
        v57 = *(_QWORD *)(v54 - 8);
        *(_QWORD *)(v54 - 8) = 0;
        *((_QWORD *)v55 - 1) = v57;
        v55 -= 40;
        v54 -= 40;
      }
      while (v54 != v53);
    }
    v45 = v51 + 40;
    *(_QWORD *)&buf = v55;
    *((_QWORD *)&buf + 1) = v51 + 40;
    v58 = v95;
    v95 = &v49[40 * v50];
    *(_QWORD *)&__p[16] = v52;
    v92 = v58;
    *(_QWORD *)__p = v53;
    *(_QWORD *)&__p[8] = v53;
    sub_10006858C((uint64_t)__p);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)&buf + 1) + 8) = 0;
    *(_QWORD *)(v44 + 16) = 0;
    *(_QWORD *)v44 = a2;
    *(_DWORD *)(v44 + 24) = 0;
    v45 = (char *)(v44 + 40);
    *(_QWORD *)(v44 + 32) = v42;
  }
  *((_QWORD *)&buf + 1) = v45;
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093F498);
  v59 = off_100977B38;
  memset(v79, 0, sizeof(v79));
  sub_1006865A8(v79, (__int128 *)buf, *((__int128 **)&buf + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 3));
  sub_10001021C((uint64_t)v59, v79);
  *(_QWORD *)__p = v79;
  sub_100686534((void ***)__p);
  *(_QWORD *)__p = &buf;
  sub_100686534((void ***)__p);
  if (v76)
LABEL_99:
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  v60 = v32 & a3;
  sub_1000040CC(v71, v8);
  operator delete(v8);
  v61 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000340DC(a2, (uint64_t)&buf);
    v62 = SHIBYTE(v95);
    v63 = (__int128 *)buf;
    sub_100013A3C(a2, v77);
    p_buf = &buf;
    if (v62 < 0)
      p_buf = v63;
    v65 = (void **)v77[0];
    v66 = "NO";
    if (v78 >= 0)
      v65 = v77;
    *(_DWORD *)__p = 136446978;
    *(_QWORD *)&__p[4] = p_buf;
    if (a3)
      v67 = "YES";
    else
      v67 = "NO";
    *(_WORD *)&__p[12] = 2082;
    *(_QWORD *)&__p[14] = v65;
    if (v60)
      v66 = "YES";
    *(_WORD *)&__p[22] = 2082;
    v92 = v67;
    LOWORD(v93[0]) = 2082;
    *(_QWORD *)((char *)v93 + 2) = v66;
    _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "Received 'stop scan' request from session \"%{public}s\" (%{public}s) updateScanParams:%{public}s shouldUpdateState:%{public}s", __p, 0x2Au);
    if (v78 < 0)
      operator delete(v77[0]);
    if (SHIBYTE(v95) < 0)
      operator delete((void *)buf);
  }
  if (!sub_10006E040(v75)
    && a4
    && (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures") & 1) == 0)
  {
    v68 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "ADVBUFF Legacy mode", __p, 2u);
    }
    if (!sub_10006E040(v75))
    {
      sub_10066D748(v75, 0);
      sub_10066D748(v75, 1);
      sub_100673C68(v75);
    }
  }
  if ((v60 & 1) != 0)
  {
    *(_BYTE *)(v75 + 1840) = 1;
    sub_100004AE4(v75, 0);
  }
  else
  {
    v69 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "Not updating state", __p, 2u);
    }
  }

  if (SHIBYTE(v89) < 0)
    operator delete(v88[1]);
  return 0;
}

void sub_10001394C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  sub_100686534((void ***)&a52);
  a19 = v57 - 256;
  sub_100686534((void ***)&a19);

  if (a49 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_100013A3C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100091AE8(a2, off_100934FC8[*(int *)(a1 + 140)]);
}

uint64_t sub_100013A54(uint64_t a1, __int128 *a2, char a3, int a4)
{
  uint64_t v7;
  __int128 v8;

  *(_DWORD *)a1 = 3;
  v7 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C((_BYTE *)v7, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
  }
  *(_BYTE *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  return a1;
}

xpc_object_t sub_100013ABC(void *a1, int a2, int a3)
{
  id v5;
  xpc_object_t v6;
  id v7;
  unsigned __int8 *v8;
  void *v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  char v14;
  void *v15;
  int64_t v16;
  void *v17;
  unsigned int v18;
  _BOOL4 v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  size_t v26;
  char *v27;
  id v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void *v35;
  xpc_object_t v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD v47[2];
  void *v48;
  id v49;
  id v50;
  id v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  void *v56[2];
  char v57;
  _BYTE v58[128];
  unsigned __int8 uuid[8];
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 bytes[8];
  uint64_t v63;

  v5 = a1;
  v6 = xpc_dictionary_create(0, 0, 0);
  if (!v5)
    goto LABEL_69;
  v51 = v5;
  v7 = v5;
  *(_QWORD *)uuid = 0;
  v60 = 0;
  objc_msgSend(v7, "getUUIDBytes:", uuid);
  xpc_dictionary_set_uuid(v6, "kCBMsgArgDeviceUUID", uuid);

  *(_QWORD *)uuid = 0;
  v60 = 0;
  v61 = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  sub_10000602C((uint64_t)off_1009778C0, v7, (uint64_t)uuid);
  if (SHIBYTE(v61) < 0)
  {
    if (!v60)
      goto LABEL_10;
    v8 = *(unsigned __int8 **)uuid;
  }
  else
  {
    if (!HIBYTE(v61))
      goto LABEL_10;
    v8 = uuid;
  }
  xpc_dictionary_set_string(v6, "kCBMsgArgName", (const char *)v8);
LABEL_10:
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  v9 = off_1009778C0;
  sub_100091AE8(v56, "ANCSAuthorized");
  v10 = sub_10000628C((uint64_t)v9, v7, (uint64_t)v56);
  xpc_dictionary_set_BOOL(v6, "kCBMsgArgAncsAuthorization", v10);
  if ((v57 & 0x80000000) == 0)
  {
    if (!a2)
      goto LABEL_20;
LABEL_16:
    v11 = sub_100004D44(v7);
    xpc_dictionary_set_int64(v6, "kCBMsgArgPairingState", v11);
    if (qword_10097AC28 != -1)
      dispatch_once(&qword_10097AC28, &stru_100937960);
    if (sub_10000671C(qword_10097AC20, v7))
      xpc_dictionary_set_BOOL(v6, "kCBMsgArgConnectionState", 1);
    goto LABEL_20;
  }
  operator delete(v56[0]);
  if (a2)
    goto LABEL_16;
LABEL_20:
  if (a3 >= 1)
  {
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_100937920);
    v12 = sub_100006180(qword_10097AC10, v7);
    xpc_dictionary_set_int64(v6, "kCBMsgArgATTMTU", v12);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100937820);
    v13 = off_1009778A0;
    sub_100030BCC(bytes, v7);
    v14 = sub_100069D64((uint64_t)v13, bytes);
    xpc_dictionary_set_BOOL(v6, "kCBMsgArgIsLinkEncrypted", v14);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100937820);
    v15 = off_1009778A0;
    sub_100030BCC(bytes, v7);
    if (sub_100069F08((uint64_t)v15, bytes))
      v16 = 2;
    else
      v16 = 1;
    xpc_dictionary_set_int64(v6, "kCBMsgArgConnectionTransport", v16);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100937820);
    v17 = off_1009778A0;
    sub_100030BCC(bytes, v7);
    v18 = sub_100069F78((uint64_t)v17, bytes);
    xpc_dictionary_set_int64(v6, "kCBMsgArgConnectionRole", v18);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v19 = sub_1000060F0((uint64_t)off_1009778C0, v7);
    xpc_dictionary_set_int64(v6, "kCBMsgArgVisibleInSettings", !v19);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v20 = sub_1000067B8((uint64_t)off_1009778C0, v7);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    if (v21)
    {
      v48 = v21;
      v22 = v21;
      *(_QWORD *)bytes = 0;
      v63 = 0;
      v49 = v22;
      objc_msgSend(v22, "getUUIDBytes:", bytes);
      xpc_dictionary_set_uuid(v6, "kCBMsgArgFindMyBeaconID", bytes);

      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      v23 = sub_100660C04((uint64_t)off_1009778C0, v7);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v50 = objc_msgSend(v24, "mutableCopy");

      if (v50)
      {
        v25 = v50;
        objc_msgSend(v50, "count");
        v47[1] = v47;
        __chkstk_darwin();
        v27 = (char *)v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v27, v26);
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v28 = v25;
        v29 = (size_t)objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v52, v58, 16);
        if (v29)
        {
          v30 = 0;
          v31 = *(_QWORD *)v53;
          do
          {
            v32 = 0;
            v33 = v30;
            v34 = &v27[8 * v30];
            do
            {
              if (*(_QWORD *)v53 != v31)
                objc_enumerationMutation(v28);
              v35 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * v32);
              *(_QWORD *)bytes = 0;
              v63 = 0;
              objc_msgSend(v35, "getUUIDBytes:", bytes);
              *(_QWORD *)&v34[8 * v32++] = xpc_data_create(bytes, 0x10uLL);
            }
            while (v29 != v32);
            v29 = (size_t)objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v52, v58, 16);
            v30 = v33 + v32;
          }
          while (v29);
          v29 = v33 + v32;
        }

        v36 = xpc_array_create((xpc_object_t *)v27, v29);
        while (v29)
          xpc_release(*(xpc_object_t *)&v27[8 * v29-- - 8]);
        xpc_dictionary_set_value(v6, "kCBMsgArgFindMyGroupMembers", v36);
        xpc_release(v36);
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      v37 = sub_100660C64((uint64_t)off_1009778C0, v7);
      v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      v39 = v38;
      if (v38)
        xpc_dictionary_set_string(v6, "kCBMsgArgFindMySerialNumberString", (const char *)objc_msgSend(objc_retainAutorelease(v38), "UTF8String"));
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      v40 = sub_1006606B0((uint64_t)off_1009778C0, v7);
      v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
      v42 = v41;
      if (v41)
      {
        v43 = v41;
        *(_QWORD *)bytes = 0;
        v63 = 0;
        objc_msgSend(v43, "getUUIDBytes:", bytes);
        xpc_dictionary_set_uuid(v6, "kCBMsgArgFindMyUserID", bytes);

      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      v44 = sub_100660D1C((uint64_t)off_1009778C0, v7);
      xpc_dictionary_set_int64(v6, "kCBMsgArgFindMyPartNumber", v44);
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      v45 = sub_100660DD0((uint64_t)off_1009778C0, v7);
      xpc_dictionary_set_int64(v6, "kCBMsgArgFindMyManaged", v45);

      v21 = v48;
    }

  }
  if (SHIBYTE(v61) < 0)
    operator delete(*(void **)uuid);
  v5 = v51;
LABEL_69:

  return v6;
}

void sub_10001421C(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  uint64_t v3;

  if (*(char *)(v3 - 113) < 0)
    operator delete(*(void **)(v3 - 136));

  _Unwind_Resume(a1);
}

uint64_t sub_100014314(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;

  if (!a1)
    return 101;
  if (off_1009851C8)
  {
    v2 = off_1009851C8(a1, a2);
    if (!(_DWORD)v2)
      return v2;
  }
  else
  {
    v2 = 3601;
  }
  if (sub_10005549C())
  {
    sub_100054530("VSC failed %!", v2);
    v3 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  return v2;
}

uint64_t sub_1000143B0(uint64_t a1, unsigned int a2, unsigned int a3, char a4, char a5, char a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t (*a10)())
{
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned __int16 v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;

  v48 = 0;
  v49 = 0;
  result = sub_10004BC7C(&v48);
  if ((_DWORD)result)
    return result;
  if (HIBYTE(v49))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3303, "OI_STATUS _BCM_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
    goto LABEL_71;
  }
  v19 = WORD2(v49);
  if (WORD1(v49) <= WORD2(v49) || BYTE6(v49) != 2)
LABEL_71:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  ++WORD2(v49);
  *(_BYTE *)(v48 + v19) = 97;
  if (HIBYTE(v49))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3305, "OI_STATUS _BCM_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
    goto LABEL_73;
  }
  v20 = WORD2(v49);
  if (WORD1(v49) <= WORD2(v49) || BYTE6(v49) != 2)
LABEL_73:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  ++WORD2(v49);
  *(_BYTE *)(v48 + v20) = a3;
  if (HIBYTE(v49))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3306, "OI_STATUS _BCM_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
    goto LABEL_75;
  }
  if (WORD1(v49) - WORD2(v49) <= 5 || BYTE6(v49) != 2)
LABEL_75:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  v21 = v48 + WORD2(v49);
  *(_WORD *)(v21 + 4) = 0;
  *(_DWORD *)v21 = 0;
  v22 = WORD2(v49);
  v23 = WORD2(v49) + 6;
  WORD2(v49) += 6;
  if (HIBYTE(v49))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3307, "OI_STATUS _BCM_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
    goto LABEL_77;
  }
  if (WORD1(v49) <= v23 || BYTE6(v49) != 2)
LABEL_77:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  WORD2(v49) = v22 + 7;
  *(_BYTE *)(v48 + v23) = 2;
  if (HIBYTE(v49))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3308, "OI_STATUS _BCM_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
    goto LABEL_79;
  }
  v24 = WORD2(v49);
  if (WORD1(v49) <= WORD2(v49) || BYTE6(v49) != 2)
LABEL_79:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  ++WORD2(v49);
  *(_BYTE *)(v48 + v24) = 0;
  if (HIBYTE(v49))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3310, "OI_STATUS _BCM_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
    goto LABEL_81;
  }
  v25 = WORD2(v49);
  if (WORD1(v49) <= WORD2(v49) || BYTE6(v49) != 2)
LABEL_81:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  ++WORD2(v49);
  *(_BYTE *)(v48 + v25) = a4;
  if (HIBYTE(v49))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3311, "OI_STATUS _BCM_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
    goto LABEL_83;
  }
  v26 = WORD2(v49);
  if (WORD1(v49) <= WORD2(v49) || BYTE6(v49) != 2)
LABEL_83:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  ++WORD2(v49);
  *(_BYTE *)(v48 + v26) = a5;
  if (HIBYTE(v49))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3312, "OI_STATUS _BCM_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
    goto LABEL_85;
  }
  v27 = WORD2(v49);
  if (WORD1(v49) <= WORD2(v49) || BYTE6(v49) != 2)
LABEL_85:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  ++WORD2(v49);
  *(_BYTE *)(v48 + v27) = a6;
  if (a3 <= 1 && a2 != 2 && a2 != 16)
    sub_100253460();
  if (a8 && a7)
  {
    v28 = 0;
    while (!HIBYTE(v49))
    {
      v29 = WORD2(v49);
      if (WORD1(v49) <= WORD2(v49) || BYTE6(v49) != 2)
        goto LABEL_67;
      v30 = *(_BYTE *)(a8 + v28);
      ++WORD2(v49);
      *(_BYTE *)(v48 + v29) = v30;
      if (++v28 >= (unint64_t)a7)
        goto LABEL_37;
    }
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3319, "OI_STATUS _BCM_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
LABEL_67:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
LABEL_37:
  v31 = v48;
  v32 = WORD2(v49);
  if (HIBYTE(v49))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3321, "OI_STATUS _BCM_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
    v33 = 0;
  }
  else
  {
    v33 = WORD1(v49) - WORD2(v49);
  }
  v34 = 27 - a7;
  if (v33 < (int)(27 - a7) || BYTE6(v49) != 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  bzero((void *)(v31 + v32), v34);
  v35 = WORD2(v49) + v34;
  WORD2(v49) += v34;
  if (a9 && a7)
  {
    v36 = 0;
    do
    {
      if (HIBYTE(v49))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3324, "OI_STATUS _BCM_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
LABEL_69:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
      v37 = WORD2(v49);
      if (WORD1(v49) <= WORD2(v49) || BYTE6(v49) != 2)
        goto LABEL_69;
      v38 = *(_BYTE *)(a9 + v36);
      ++WORD2(v49);
      *(_BYTE *)(v48 + v37) = v38;
      ++v36;
    }
    while (v36 < a7);
    v35 = WORD2(v49);
  }
  v39 = v48;
  if (HIBYTE(v49))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3326, "OI_STATUS _BCM_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
    v40 = 0;
  }
  else
  {
    v40 = WORD1(v49) - v35;
  }
  if (v40 < v34 || BYTE6(v49) != 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  bzero((void *)(v39 + v35), v34);
  v44 = BYTE4(v49) + v34;
  WORD2(v49) += v34;
  if (a2)
  {
    v45 = a2;
    do
    {
      if (HIBYTE(v49))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3329, "OI_STATUS _BCM_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
LABEL_65:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
      v46 = WORD2(v49);
      if (WORD1(v49) <= WORD2(v49) || BYTE6(v49) != 2)
        goto LABEL_65;
      v47 = *(_BYTE *)(a1 - 1 + v45--);
      ++WORD2(v49);
      *(_BYTE *)(v48 + v46) = v47;
    }
    while ((unint64_t)(v45 + 1) > 1);
    v44 = BYTE4(v49);
  }
  return sub_10004C8A0(233, v48, v44, a10, (uint64_t)sub_10004AE9C, v41, v42, v43);
}

uint64_t sub_100014B24(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  void *v7;
  uint64_t *v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char isKindOfClass;

  v7 = objc_autoreleasePoolPush();
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  v10 = (void *)CFPreferencesCopyAppValue(v9, CFSTR("com.apple.MobileBluetooth.debug"));

  v11 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    if (*((char *)a3 + 23) >= 0)
      v12 = a3;
    else
      v12 = (uint64_t *)*a3;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", v13));

    v15 = objc_opt_class(NSNumber);
    isKindOfClass = objc_opt_isKindOfClass(v14, v15);
    if ((isKindOfClass & 1) != 0)
      *a4 = objc_msgSend(v14, "intValue");

  }
  else
  {
    isKindOfClass = 0;
  }

  objc_autoreleasePoolPop(v7);
  return isKindOfClass & 1;
}

void sub_100014C34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t **sub_100014C6C(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_10001FD34((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v8[4] = v9[4];
          sub_1002D36B4(v5, v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_10001FD34((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_1002C6244((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_100014DCC(v5, a2 + 4);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_100014DB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002C6244((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100014DCC(uint64_t **a1, unint64_t *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a2;
  v4[4] = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= v7[4])
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_100004078(a1, (uint64_t)v6, v8, v4);
  return v4;
}

void sub_100014F60(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  void *i;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *j;
  void *v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id obj;
  uint64_t v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];
  _BYTE buf[12];
  __int16 v37;
  void *v38;
  __int16 v39;
  uint64_t v40;

  if (*(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 18))
  {
    if (a2)
    {
      sub_1000340DC(a2, (uint64_t)buf);
      if (v39 >= 0)
        v4 = buf;
      else
        v4 = *(_BYTE **)buf;
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4));
      if (SHIBYTE(v39) < 0)
        operator delete(*(void **)buf);
      if (v22)
      {
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:"));
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allObjects"));

        v7 = qword_100999958;
        if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
        {
          v8 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 138543874;
          *(_QWORD *)&buf[4] = v22;
          v37 = 2114;
          v38 = v6;
          v39 = 2114;
          v40 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "stopTrackingForSession: %{public}@ for tracking devices %{public}@ from requests %{public}@", buf, 0x20u);
        }
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        obj = v6;
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
        if (v9)
        {
          v24 = *(_QWORD *)v31;
          do
          {
            v25 = v9;
            for (i = 0; i != v25; i = (char *)i + 1)
            {
              if (*(_QWORD *)v31 != v24)
                objc_enumerationMutation(obj);
              v11 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
              v26 = 0u;
              v27 = 0u;
              v28 = 0u;
              v29 = 0u;
              v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "appleTypes", v22));
              v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "allObjects"));

              v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
              if (v14)
              {
                v15 = *(_QWORD *)v27;
                do
                {
                  for (j = 0; j != v14; j = (char *)j + 1)
                  {
                    if (*(_QWORD *)v27 != v15)
                      objc_enumerationMutation(v13);
                    v17 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)j);
                    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "deviceUUID"));
                    sub_100584478(a1, a2, v18, objc_msgSend(v17, "intValue"));

                  }
                  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
                }
                while (v14);
              }

            }
            v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
          }
          while (v9);
        }

        v19 = qword_100999958;
        if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_DEFAULT))
        {
          v20 = *(_QWORD *)(a1 + 48);
          v21 = *(void **)(a1 + 56);
          *(_DWORD *)buf = 138543618;
          *(_QWORD *)&buf[4] = v20;
          v37 = 2114;
          v38 = v21;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Now tracking %{public}@ with devices %{public}@", buf, 0x16u);
        }

      }
      else if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
      {
        sub_100705BC4();
      }

    }
    else if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
    {
      sub_100705B98();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999958, OS_LOG_TYPE_ERROR))
  {
    sub_100705B6C();
  }
}

void sub_100015314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1000153A4(uint64_t a1)
{
  id *v2;
  uint64_t v3;
  void *v4;
  const __CFString *v5;
  uint64_t v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];
  _QWORD v15[5];

  v14[0] = CFSTR("actn");
  v2 = (id *)(a1 + 32);
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "action"));
  v4 = (void *)v3;
  if (v3)
    v5 = (const __CFString *)v3;
  else
    v5 = &stru_100941758;
  v15[0] = v5;
  v14[1] = CFSTR("apID");
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*v2, "appID"));
  v7 = (void *)v6;
  if (v6)
    v8 = (const __CFString *)v6;
  else
    v8 = &stru_100941758;
  v15[1] = v8;
  v14[2] = CFSTR("cid");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(*(id *)(a1 + 32), "clientID")));
  v15[2] = v9;
  v14[3] = CFSTR("dsFl");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 32), "discoveryFlags")));
  v15[3] = v10;
  v14[4] = CFSTR("scnR");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(*(id *)(a1 + 32), "scanRate")));
  v15[4] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 5));

  v13 = sub_100065478();
  (*(void (**)(uint64_t, void *))(*(_QWORD *)v13 + 232))(v13, v12);

}

void sub_100015540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

id sub_100015598(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];
  int v4;
  char v5;

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10001575C;
  v3[3] = &unk_100917B08;
  v3[4] = v1;
  v5 = *(_BYTE *)(a1 + 44);
  v4 = *(_DWORD *)(a1 + 40);
  return objc_msgSend(v1, "_performUserControllerActionWithCompletion:", v3);
}

void sub_10001575C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v8 = v3;
  if (!v3)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 496), "recordEventWithStarting:useCase:", *(unsigned __int8 *)(a1 + 44), *(unsigned int *)(a1 + 40));
LABEL_3:
    v4 = v8;
    goto LABEL_4;
  }
  v4 = v3;
  if (dword_100977980 <= 90)
  {
    if (dword_100977980 != -1 || (v7 = _LogCategory_Initialize(&dword_100977980, 90), v4 = v8, v7))
    {
      v5 = CUPrintNSError(v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer recordEventWithStarting:useCase:]_block_invoke_2", 90, "Unable to report biome event: %@", v6);

      goto LABEL_3;
    }
  }
LABEL_4:

}

void sub_100015818(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  NSObject *v7;
  __SecTask *v8;
  __SecTask *v9;
  CFStringRef v10;
  CFStringRef v11;
  int v12;
  _BOOL4 v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  id v32;
  int v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  au_asid_t asid;
  NSObject *v47;
  NSObject *v48;
  xpc_object_t reply;
  void *v50;
  NSObject *v51;
  uint64_t v52;
  audit_token_t token;
  audit_token_t v54;
  uint8_t v55[4];
  uint64_t v56;
  __int16 v57;
  int v58;
  uint8_t buf[4];
  void *v60;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1000239F0(value, "kCBMsgArgName");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  memset(&v54, 0, sizeof(v54));
  v7 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v60 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BTSessionMsgHandler::handleAttachMsg name:%@", buf, 0xCu);
  }
  xpc_connection_get_audit_token(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 16), &v54);
  token = v54;
  v8 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
  v9 = v8;
  if (v8)
  {
    v10 = SecTaskCopySigningIdentifier(v8, 0);
    v11 = v10;
    if (v10)
    {
      v12 = CFEqual(v10, CFSTR("com.apple.dmd"));
      v13 = v12 != 0;
      if (!v12)
      {
        v14 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_10006F9B4(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      CFRelease(v11);
    }
    else
    {
      v22 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006E4718(v22, v23, v24, v25, v26, v27, v28, v29);
      v13 = 0;
    }
    CFRelease(v9);
  }
  else
  {
    v13 = 0;
  }
  bzero(buf, 0x400uLL);
  v30 = *(_QWORD *)(a1 + 72);
  v31 = (const char *)(v30 + 56);
  if (*(char *)(v30 + 79) < 0)
    v31 = *(const char **)v31;
  v32 = objc_retainAutorelease(v6);
  snprintf((char *)buf, 0x400uLL, "%s-unique-id-%s", v31, (const char *)objc_msgSend(v32, "UTF8String"));
  v52 = 0;
  v33 = sub_100070C04((char *)buf);
  if (v33)
  {
    v34 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1006E46E8(v34, v35, v36, v37, v38, v39, v40, v41);
    v42 = 0;
  }
  else
  {
    v42 = v52;
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_10092B290);
    v43 = sub_1000229D8((_QWORD *)qword_100977B48, v52);
    if (v43)
    {
      *(_BYTE *)(v43 + 136) = 1;
      sub_1000699B8(v43, (unint64_t)off_10097ADC0, *(_QWORD *)(a1 + 72));
      v44 = *(_QWORD *)(a1 + 72);
      v45 = *(_DWORD *)(v44 + 40);
      asid = xpc_connection_get_asid(*(xpc_connection_t *)(v44 + 16));
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092B290);
      sub_10006C3F8(qword_100977B48, v52, v45, asid);
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 152) = v42;
      if (v13)
      {
        v47 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v55 = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Session has Managed Config Bundle ID", v55, 2u);
        }
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_10092B290);
        sub_10050B1C4(qword_100977B48, v52);
      }
      v33 = 0;
    }
    else
    {
      sub_100508DC0(&v52);
      v33 = 100;
    }
  }
  v48 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v55 = 134218240;
    v56 = v42;
    v57 = 1024;
    v58 = v33;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Sending the reply now sessionID:%llx result:%d", v55, 0x12u);
  }
  reply = xpc_dictionary_create_reply(xdict);
  v50 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgSessionID", v42);
    xpc_dictionary_set_uint64(v50, "kCBMsgArgResult", v33);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v50);
    xpc_release(v50);
  }
  v51 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Done sending the reply now", v55, 2u);
  }

}

void sub_100015C64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100015C9C(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_100015CC8(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  id v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  int v24;

  v5 = a3;
  v6 = sub_100018CC0(a1, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = sub_10000A780((uint64_t)v7, a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10038A150;
  v19[3] = &unk_10092A398;
  v10 = v7;
  v20 = v10;
  v11 = AnalyticsSendEventLazy(v9, v19);
  v12 = qword_1009997E8;
  if (v11)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
      sub_1006E2F04((uint64_t)v9, v12, v13, v14, v15, v16, v17, v18);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v22 = v9;
    v23 = 1024;
    v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "BT Stats for metric '%@' sent to CoreAnalytics with result %u", buf, 0x12u);
  }

}

void sub_100015E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_100015E60(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (os_log_type_enabled((os_log_t)qword_100999970, OS_LOG_TYPE_DEBUG))
    sub_1006F47E0(a1);
  ++*(_QWORD *)(v2 + 56);
  return sub_100015ECC(v2 + 32, (unint64_t *)(a1 + 40));
}

uint64_t sub_100015ECC(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  sub_1000040CC((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void sub_100015F44(dispatch_source_t *a1)
{
  NSObject *global_queue;
  NSObject *v3;
  NSObject *v4;
  dispatch_time_t v5;

  global_queue = dispatch_get_global_queue(17, 0);
  v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, global_queue);
  a1[2] = v3;
  dispatch_set_context(v3, a1);
  dispatch_source_set_event_handler_f(a1[2], (dispatch_function_t)sub_100399438);
  v4 = a1[2];
  v5 = dispatch_time(0, 10000000000);
  dispatch_source_set_timer(v4, v5, 0x2540BE400uLL, 0x3B9ACA00uLL);
  dispatch_resume(a1[2]);
}

_QWORD *sub_100015FDC(_QWORD *a1, uint64_t a2)
{
  *a1 = &off_10092B270;
  sub_1000160D0(a1 + 1);
  a1[9] = a2;
  return a1;
}

pthread_mutex_t *sub_100016014(pthread_mutex_t *a1)
{
  int v2;
  pthread_mutexattr_t v4;

  v4.__sig = 0;
  *(_QWORD *)v4.__opaque = 0;
  pthread_mutexattr_init(&v4);
  pthread_mutexattr_settype(&v4, 2);
  v2 = pthread_mutex_init(a1, &v4);
  pthread_mutexattr_destroy(&v4);
  if (v2 && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    sub_1006D99A4();
  return a1;
}

void sub_1000160D4(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  NSObject *v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  id v15;
  void *v16;
  void *v17;
  unsigned __int8 *v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  void **v21;
  void *v22;
  void *v23;
  int v24;
  int v25;
  void *v26;
  void *v27;
  _BOOL4 v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  _BOOL8 v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  void *i;
  uint64_t v41;
  void *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void *__p[2];
  char v50;
  void *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint8_t buf[4];
  void **v55;
  __int16 v56;
  void **v57;
  _BYTE v58[128];

  v5 = *(_QWORD **)(a1 + 2048);
  if (!v5)
    goto LABEL_12;
  v6 = (_QWORD *)(a1 + 2048);
  do
  {
    v7 = v5[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (v8)
      v6 = v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != (_QWORD *)(a1 + 2048) && v6[4] <= a2)
  {
    v15 = sub_10002FC28(v6[5]);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v16));

    v51 = 0;
    v52 = 0;
    v53 = 0;
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10093F458);
    sub_100005B54((uint64_t)off_100978168, a2, &v51);
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
    v18 = (unsigned __int8 *)v51;
    if (v51 == v52)
    {
      v20 = 0;
      v19 = 0;
    }
    else
    {
      v19 = 0;
      v20 = 0;
      do
      {
        sub_10006887C((uint64_t)v18, __p);
        if (v50 >= 0)
          v21 = __p;
        else
          v21 = (void **)__p[0];
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21));
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ "), v22));
        objc_msgSend(v44, "appendString:", v23);

        if (v50 < 0)
          operator delete(__p[0]);
        v25 = *v18;
        v18 += 20;
        v24 = v25;
        if (v25 == 16)
          ++v19;
        if (v24 == 2)
          ++v20;
      }
      while (v18 != v52);
    }
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v44, CFSTR("DAPlistServiceUUID"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v20));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v26, CFSTR("DAPlistNumberOf16bitUUID"));

    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v19));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v27, CFSTR("DAPlistNumberOf128bitUUID"));

    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10093F458);
    v28 = sub_10006EFB4((uint64_t)off_100978168, a2);
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10093F458);
    if (sub_1002F2468((uint64_t)off_100978168, a2))
      v29 = 2;
    else
      v29 = v28;
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10093F458);
    if (sub_1002F24C4((uint64_t)off_100978168, a2))
      v30 = 4;
    else
      v30 = v29;
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v30));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v31, CFSTR("DASessionType"));

    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10093F458);
    if (sub_10006E8AC((uint64_t)off_100978168, a2))
    {
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_10093F458);
      v32 = sub_10006F5E4((uint64_t)off_100978168, a2);
    }
    else
    {
      v32 = 0;
    }
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v32));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v33, CFSTR("SupportsStateRestoration"));

    v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 140)));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v34, CFSTR("ClientType"));

    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a3));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v35, CFSTR("IsPrioritizedOverBT"));

    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a4));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v36, CFSTR("IsPrioritizedOverWiFi"));

    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v37 = *(id *)(*(_QWORD *)(v6[5] + 8) + 152);
    v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v45, v58, 16);
    if (v38)
    {
      v39 = *(_QWORD *)v46;
      do
      {
        for (i = 0; i != v38; i = (char *)i + 1)
        {
          if (*(_QWORD *)v46 != v39)
            objc_enumerationMutation(v37);
          objc_msgSend(v17, "setObject:forKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)i), CFSTR("BundleID"));
          v41 = sub_100065478();
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v41 + 304))(v41, v17);
        }
        v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v45, v58, 16);
      }
      while (v38);
    }

    if (v51)
    {
      v52 = (unsigned __int8 *)v51;
      operator delete(v51);
    }

  }
  else
  {
LABEL_12:
    v10 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(a2, (uint64_t)&v51);
      v11 = SHIBYTE(v53);
      v12 = (void **)v51;
      sub_100013A3C(a2, __p);
      v13 = &v51;
      if (v11 < 0)
        v13 = v12;
      if (v50 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v55 = v13;
      v56 = 2082;
      v57 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "sendSessionScanMetricStats could not find an agent for %{public}s(%{public}s)", buf, 0x16u);
      if (v50 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v53) < 0)
        operator delete(v51);
    }
  }
}

void sub_1000166EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  void *v33;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_1000167EC(uint64_t a1)
{
  __SecTask *v1;
  __SecTask *v2;
  CFStringRef v3;
  CFStringRef v4;
  CFErrorRef v5;
  NSObject *v6;
  void *v7;
  NSString *v8;
  uint64_t v9;
  uint8_t buf[8];
  CFErrorRef error;
  audit_token_t token;
  audit_token_t v14;

  memset(&v14, 0, sizeof(v14));
  xpc_connection_get_audit_token(a1, &v14);
  token = v14;
  v1 = SecTaskCreateWithAuditToken(0, &token);
  v2 = v1;
  if (v1)
  {
    error = 0;
    v3 = SecTaskCopySigningIdentifier(v1, &error);
    v4 = v3;
    v5 = error;
    if (error)
    {
      v6 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to copy signing ID - using framework-provided bundle identifier!", buf, 2u);
        v5 = error;
      }
      CFRelease(v5);
      if (v4)
      {
        v7 = 0;
        CFRelease(v4);
LABEL_14:
        CFRelease(v2);
        goto LABEL_15;
      }
    }
    else
    {
      v7 = (void *)v3;
      if (v3)
        goto LABEL_14;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006DB85C();
    }
    v7 = 0;
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_1006DB830();
  v7 = 0;
LABEL_15:
  if (!objc_msgSend(v7, "length"))
  {
    v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("UNKNOWN-%0000x"), arc4random_uniform(0xFFFFu));
    v9 = objc_claimAutoreleasedReturnValue(v8);

    v7 = (void *)v9;
  }
  return v7;
}

void sub_100016980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100016994(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  void *p_p;
  uint64_t v8;
  int v9;
  void *__p;
  char v12;
  _QWORD v13[2];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  int v25;

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 40);
  v2 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 197);
    v4 = *(unsigned __int8 *)(a1 + 198);
    v5 = *(unsigned __int8 *)(a1 + 204);
    v6 = *(unsigned __int8 *)(a1 + 200);
    p_p = &__p;
    sub_100021AE4(a1 + 272);
    if (v12 < 0)
      p_p = __p;
    v8 = sub_100016B48();
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
    *(_DWORD *)buf = 67110402;
    v15 = v3;
    v16 = 1024;
    v17 = v4;
    v18 = 1024;
    v19 = v5;
    v20 = 1024;
    v21 = v6;
    v22 = 2080;
    v23 = p_p;
    v24 = 1024;
    v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "coexChanged a2dp:%d hfp:%d isoPipe:%d BTStreaming:%d wifi:%s critical(UCM):%d", buf, 0x2Au);
    if (v12 < 0)
      operator delete(__p);
  }
  if (*(_QWORD *)(a1 + 240) || *(_QWORD *)(a1 + 264))
    sub_10006BF1C(a1, 1);
  sub_10001FD88((os_unfair_lock_s *)(a1 + 120), &stru_100932A18);
  return sub_100034234((uint64_t)v13);
}

void sub_100016B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100016B48()
{
  if (qword_100991F18 != -1)
    dispatch_once(&qword_100991F18, &stru_100929618);
  return qword_100991F10;
}

uint64_t sub_100016B88(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v6[2];

  *(_WORD *)(a1 + 378) = a2;
  v4 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Updated ucmWiFiBitmap 0x%x", (uint8_t *)v6, 8u);
  }
  return sub_100016994(a1);
}

void sub_100016C40(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v4[5];
  uint8_t buf[16];

  v2 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "systemCoexStateCahnged", buf, 2u);
  }
  v3 = sub_1000419F4();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10006688C;
  v4[3] = &unk_100917378;
  v4[4] = a1;
  sub_100041A34(v3, v4);
}

uint64_t sub_100016CE4(uint64_t a1, int a2)
{
  _BOOL8 v4;
  NSObject *v5;
  int v6;
  _QWORD v8[5];
  char v9;
  uint8_t buf[4];
  const char *v11;

  if (!*(_BYTE *)(a1 + 1176))
    return 0;
  if (*(_DWORD *)(sub_1000438A4() + 712) && *(_DWORD *)(sub_1000438A4() + 712) <= 0x7CFu)
  {
    sub_100042FD0(a1, 200, a2, &stru_100926458, 0);
    *(_BYTE *)(a1 + 1176) = 0;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100303A6C;
    v8[3] = &unk_1009263D8;
    v8[4] = a1;
    v9 = a2;
    return sub_100042FD0(a1, 201, a2, v8, 0);
  }
  else
  {
    *(int8x8_t *)(a1 + 1180) = vand_s8(*(int8x8_t *)(a1 + 1180), (int8x8_t)0xFFFFFFFEFFEFFFFFLL);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 352))(a1, 1))
    {
      v4 = 0;
      *(_DWORD *)(a1 + 1180) |= 0x100000u;
    }
    else
    {
      *(_BYTE *)(a1 + 1176) = 0;
      v5 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446210;
        v11 = sub_1000438E4(a1, 201);
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
      }
      if (!sub_1000431F4(a1, 201))
        return 2;
      buf[0] = 0;
      sub_100043758(buf);
      v6 = sub_100073E60();
      sub_10004339C(buf);
      if (!v6)
      {
        if (a2)
        {
          if (qword_100977A58 != -1)
            dispatch_once(&qword_100977A58, &stru_100926C78);
          sub_1000433A4((uint64_t)off_100977A50, 201);
        }
        *(_BYTE *)(a1 + 1176) = 1;
      }
      sub_1000445D4(a1, 0xC9u);
      sub_100043728(buf);
      v4 = v6 != 0;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 360))(a1, 1);
  }
  return v4;
}

void sub_100016F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100016F58(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  NSMutableSet *v10;
  void *v11;
  NSMutableSet *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  NSMutableArray *v25;
  void *v26;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;
  int v32;

  v2 = sub_100010C28(a1);
  *(_QWORD *)v2 = off_10092DC68;
  *(_QWORD *)(v2 + 288) = 0;
  *(_QWORD *)(v2 + 296) = 0;
  *(_QWORD *)(v2 + 272) = v2 + 280;
  *(_QWORD *)(v2 + 280) = 0;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 264) = 0;
  *(_QWORD *)(v2 + 320) = 0;
  *(_QWORD *)(v2 + 328) = 0;
  *(_DWORD *)(v2 + 303) = 0;
  *(_QWORD *)(v2 + 312) = v2 + 320;
  v3 = (void **)(v2 + 336);
  *(_DWORD *)(v2 + 384) = 0;
  *(_QWORD *)(v2 + 392) = 0;
  *(_QWORD *)(v2 + 424) = 0;
  *(_QWORD *)(v2 + 432) = 0;
  *(_OWORD *)(v2 + 367) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_QWORD *)(v2 + 408) = 0;
  *(_QWORD *)(v2 + 416) = v2 + 424;
  *(_QWORD *)(v2 + 456) = 0;
  *(_QWORD *)(v2 + 464) = 0;
  *(_QWORD *)(v2 + 448) = v2 + 456;
  *(_DWORD *)(v2 + 503) = 0;
  *(_QWORD *)(v2 + 496) = 0;
  v4 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v5 = *(void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v4;

  v6 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v7 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v6;

  v8 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v9 = *(void **)(a1 + 408);
  *(_QWORD *)(a1 + 408) = v8;

  v10 = objc_opt_new(NSMutableSet);
  v11 = *v3;
  *v3 = v10;

  v12 = objc_opt_new(NSMutableSet);
  v13 = *(void **)(a1 + 344);
  *(_QWORD *)(a1 + 344) = v12;

  v14 = objc_alloc_init((Class)NSMutableDictionary);
  v15 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v14;

  v16 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v17 = *(void **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v16;

  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  v32 = 0;
  v18 = sub_100027F68();
  sub_100091AE8(v30, "BTUCM");
  sub_100091AE8(__p, "DefaultWifiCoexPriority");
  v19 = (*(uint64_t (**)(uint64_t, void **, void **, int *))(*(_QWORD *)v18 + 88))(v18, v30, __p, &v32);
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
    operator delete(v30[0]);
  v20 = v32;
  if (!v19)
    v20 = -1;
  *(_DWORD *)(a1 + 488) = v20;
  v21 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;

  v22 = *(void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;

  v23 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;

  v24 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;

  v25 = objc_opt_new(NSMutableArray);
  v26 = *(void **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v25;

  return a1;
}

void sub_100017180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  sub_100012198(v21 + 448, *(_QWORD **)(v21 + 456));
  sub_100010D8C(v21 + 416, *(_QWORD **)(v21 + 424));

  sub_100012148(v21 + 312, *(_QWORD **)(v21 + 320));
  sub_100067F18(v21 + 272, *(_QWORD **)(v21 + 280));

  sub_100010B94(v21);
  _Unwind_Resume(a1);
}

uint64_t **sub_100017284(uint64_t a1, xpc_connection_t connection, const char *a3)
{
  uint64_t **v6;
  id v7;
  id v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  NSObject **v14;
  const char *p_p;
  NSObject *v16;
  void *__p;
  char v19;
  _OWORD v20[4];
  void *v21[2];
  __int128 v22;
  __int128 v23;
  _BYTE v24[144];
  uint64_t v25;
  unsigned int pid;

  pid = xpc_connection_get_pid(connection);
  *(_QWORD *)&v20[0] = &pid;
  v6 = sub_100067C1C((uint64_t **)(a1 + 8), (int *)&pid, (uint64_t)&unk_100740F58, (_DWORD **)v20);
  if (v6[6])
    return v6 + 5;
  v7 = sub_1000167EC((uint64_t)connection);
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v7));
  v9 = (const char *)objc_msgSend(v8, "cStringUsingEncoding:", 4);

  v25 = 0;
  memset(v24, 0, sizeof(v24));
  v22 = 0u;
  v23 = 0u;
  *(_OWORD *)v21 = 0u;
  memset(v20, 0, sizeof(v20));
  sub_100272ADC((uint64_t)v20);
  if (!v9)
    v9 = "CoreBluetooth";
  v10 = strlen(v9);
  v11 = sub_1002614D8(v20, (uint64_t)v9, v10);
  v12 = sub_1002614D8(v11, (uint64_t)"-", 1);
  std::ostream::operator<<(v12, pid);
  v13 = *(NSObject **)(a1 + 32);
  if (!strcmp(a3, "com.apple.server.bluetooth.le.att.xpc"))
  {
    v14 = (NSObject **)(a1 + 40);
    goto LABEL_12;
  }
  if (!strcmp(a3, "com.apple.server.bluetooth.le.pipe.xpc"))
  {
    v14 = (NSObject **)(a1 + 48);
    goto LABEL_12;
  }
  if (!strcmp(a3, "com.apple.server.bluetooth.general.xpc"))
  {
    v14 = (NSObject **)(a1 + 56);
    goto LABEL_12;
  }
  if (!strcmp(a3, "com.apple.server.bluetooth.classic.xpc"))
  {
    v14 = (NSObject **)(a1 + 64);
LABEL_12:
    v13 = *v14;
  }
  p_p = (const char *)&__p;
  std::stringbuf::str((char *)v20 + 8);
  if (v19 < 0)
    p_p = (const char *)__p;
  v16 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v6[6] = (uint64_t *)dispatch_queue_create_with_target_V2(p_p, v16, v13);
  if (v19 < 0)
    operator delete(__p);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[1]);
  std::streambuf::~streambuf((char *)v20 + 8);
  std::ios::~ios(v24);
  return v6 + 5;
}

void sub_1000174CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100272CFC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100017844(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_100017BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100017BFC(unsigned __int8 *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _OWORD v25[4];
  void *__p[2];
  __int128 v27;
  __int128 v28;
  _OWORD v29[9];
  uint64_t v30;

  v30 = 0;
  v28 = 0u;
  memset(v29, 0, sizeof(v29));
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  memset(v25, 0, sizeof(v25));
  sub_100272ADC((uint64_t)v25);
  v2 = (char)a1[55];
  if (v2 >= 0)
    v3 = (uint64_t)(a1 + 32);
  else
    v3 = *((_QWORD *)a1 + 4);
  if (v2 >= 0)
    v4 = a1[55];
  else
    v4 = *((_QWORD *)a1 + 5);
  v5 = sub_1002614D8(v25, v3, v4);
  v6 = sub_1002614D8(v5, (uint64_t)"(", 1);
  v7 = sub_1000351FC(*((_DWORD *)a1 + 1));
  v8 = strlen(v7);
  v9 = sub_1002614D8(v6, (uint64_t)v7, v8);
  v10 = sub_1002614D8(v9, (uint64_t)") Scanning:", 11);
  v11 = (_QWORD *)std::ostream::operator<<(v10, *a1);
  sub_1002614D8(v11, (uint64_t)" ", 1);
  v12 = sub_1002614D8(v25, (uint64_t)"[totalRx=", 9);
  v13 = (_QWORD *)std::ostream::operator<<(v12, *((unsigned int *)a1 + 2));
  sub_1002614D8(v13, (uint64_t)" ", 1);
  v14 = sub_1002614D8(v25, (uint64_t)"btMCRx=", 7);
  v15 = (_QWORD *)std::ostream::operator<<(v14, *((unsigned int *)a1 + 3));
  sub_1002614D8(v15, (uint64_t)" ", 1);
  v16 = sub_1002614D8(v25, (uint64_t)"actualTotalRx=", 14);
  v17 = (_QWORD *)std::ostream::operator<<(v16, *((unsigned int *)a1 + 4));
  sub_1002614D8(v17, (uint64_t)" ", 1);
  v18 = sub_1002614D8(v25, (uint64_t)"actualBtMCRx=", 13);
  v19 = (_QWORD *)std::ostream::operator<<(v18, *((unsigned int *)a1 + 5));
  sub_1002614D8(v19, (uint64_t)" ", 1);
  v20 = sub_1002614D8(v25, (uint64_t)"timeout=", 8);
  v21 = (_QWORD *)std::ostream::operator<<(v20, *((unsigned int *)a1 + 6));
  sub_1002614D8(v21, (uint64_t)" ", 1);
  v22 = sub_1002614D8(v25, (uint64_t)"actualTime=", 11);
  v23 = (_QWORD *)std::ostream::operator<<(v22, *((unsigned int *)a1 + 7));
  sub_1002614D8(v23, (uint64_t)"] ", 2);
  std::stringbuf::str((char *)v25 + 8);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v25 + 8);
  return std::ios::~ios(v29);
}

void sub_100017E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100272CFC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100017E74(uint64_t a1, void *a2, uint64_t a3)
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  NSObject *v26;
  char *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  char v33;
  NSObject *v34;
  const char *v35;
  uint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int8 v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  xpc_object_t value;
  void *v51;
  id v52;
  int v53;
  int v54;
  void *v55;
  void *v56;
  xpc_object_t v57;
  void *v58;
  BOOL v59;
  id v60;
  void *v61;
  NSObject *v62;
  uint64_t v64;
  _QWORD v65[4];
  id v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD applier[5];
  void *__p;
  __int128 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 *v98;
  __int128 *v99;
  uint64_t v100;
  uint64_t v101;
  uint8_t buf[4];
  const char *v103;

  v100 = 0;
  v101 = 0;
  v98 = 0;
  v99 = 0;
  v96 = 0;
  v97 = 0;
  v94 = 0;
  v95 = 0;
  v92 = 0;
  v93 = 0;
  v90 = 0;
  v91 = 0;
  v88 = 0;
  v89 = 0;
  v6 = sub_1000708B8(a2, "kCBScanOptionPeers");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v86 = 0;
  v87 = 0;
  v85 = 0;
  v84 = 1;
  v83 = 0;
  v82 = 0;
  v81 = 0;
  v80 = 0;
  v79 = 0;
  v78 = 0;
  v77 = 0;
  v8 = sub_100023E20(a2, "kCBManagerListOfClients");
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v9));

  objc_storeStrong((id *)(a3 + 152), v10);
  v76 = 0;
  v75 = 0;
  v74 = 0;
  v73 = 0;
  v17 = sub_100023B7C(a2, 0, v11, v12, v13, v14, v15, v16, (uint64_t)"kCBScanOptionAllowDuplicates");
  if ((_DWORD)v17)
  {
    v18 = 0;
    goto LABEL_129;
  }
  if (*(int *)(a1 + 80) < 1)
  {
    v18 = 0;
  }
  else
  {
    *(_DWORD *)(a3 + 168) = v76;
    v19 = sub_10000FC60(a2, "kCBOptionUseCaseList");
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    v21 = v20;
    if (v20)
    {
      if (objc_msgSend(v20, "count"))
      {
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v21));
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "allObjects"));

        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "sortedArrayUsingSelector:", "compare:"));
      }
      v18 = v21;
    }
    else
    {
      v18 = 0;
    }
    objc_storeStrong((id *)(a3 + 176), v18);
    if (v18 && objc_msgSend(v18, "count"))
    {
      v24 = sub_100558F38(v18);
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      v26 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        v27 = (char *)(id)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "componentsJoinedByString:", CFSTR(",")));
        *(_DWORD *)buf = 138412290;
        v103 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "scanUseCaseList: %@", buf, 0xCu);

      }
      if (!v76)
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "firstObject"));
        v29 = v28;
        if (v28)
        {
          *(_DWORD *)(a3 + 168) = objc_msgSend(v28, "longLongValue");
          v30 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
          {
            v31 = sub_100035930((int)objc_msgSend(v29, "longLongValue"));
            *(_DWORD *)buf = 136315138;
            v103 = v31;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "default scanUseCase derived from scanUseCaseList: %s", buf, 0xCu);
          }
        }

      }
    }
  }
  *(_BYTE *)(a3 + 201) = *(_BYTE *)(a1 + 190);
  v32 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 3544))(v32) == 32)
  {
    if (*(_BYTE *)(a1 + 191))
      v33 = 32;
    else
      v33 = 8;
    *(_BYTE *)(a3 + 203) = v33;
  }
  if ((unint64_t)WORD1(v76) << 16 == 0x10000
    && (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures") & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703DF4();
    goto LABEL_77;
  }
  if (sub_100018C6C(a2, "kCBScanOptionScanRxDuration"))
    *(_QWORD *)(a3 + 188) = v77;
  if (sub_100018C6C(a2, "kCBScanOptionAllowDuplicates"))
    *(_BYTE *)a3 = v101 != 0;
  if (sub_100018C6C(a2, "kCBScanOptionRequiresActive"))
    *(_BYTE *)(a3 + 2) = v91 != 0;
  if (sub_100018C6C(a2, "kCBScanOptionSolicitedServiceUUIDs"))
  {
    v71 = 0;
    __p = 0;
    v72 = 0;
    sub_1000B61B8((char *)&__p, v98, v99, 0xCCCCCCCCCCCCCCCDLL * (((char *)v99 - (char *)v98) >> 2));
    if ((void **)(a3 + 32) != &__p)
      sub_1000B56F0((_QWORD *)(a3 + 32), (__int128 *)__p, v71, 0xCCCCCCCCCCCCCCCDLL * (((char *)v71 - (_BYTE *)__p) >> 2));
    if (__p)
    {
      v71 = (__int128 *)__p;
      operator delete(__p);
    }
  }
  if (sub_100018C6C(a2, "kCBMsgArgIsPrivilegedDaemon"))
    *(_BYTE *)(a3 + 1) = v97 != 0;
  if (sub_100018C6C(a2, "kCBScanOptionPeers"))
    objc_storeStrong((id *)(a3 + 56), v7);
  if (sub_100018C6C(a2, "kCBScanOptionPriorityCritical"))
    *(_BYTE *)(a3 + 141) = v82 != 0;
  if (sub_100018C6C(a2, "kCBScanOptionRange"))
    *(_BYTE *)(a3 + 140) = v83 != 0;
  *(_BYTE *)(a3 + 121) = v92 != 0;
  *(_BYTE *)(a3 + 139) = v84;
  *(_BYTE *)(a3 + 184) = v75 != 0;
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    *(_BYTE *)(a3 + 199) = v74 != 0;
    if (!(_DWORD)v76)
    {
      v41 = sub_100018C6C(a2, "kCBScanOptionHWObjectDiscovery");
      if (v87)
        v42 = v41;
      else
        v42 = 0;
      if (v42 == 1)
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_100703D84();
        v85 = 1;
      }
      v43 = sub_100018C6C(a2, "kCBScanOptionHWObjectDiscoveryWild");
      v44 = v85;
      v45 = sub_100018C6C(a2, "kCBScanOptionHWObjectDiscoveryNearOwner");
      v46 = v44 ? v43 : 0;
      v47 = (v45 & (v86 != 0)) != 0 ? v46 | 2 : v46;
      if (v47)
      {
        if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
        {
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            sub_100703D58();
          goto LABEL_77;
        }
        v64 = sub_10003BE44();
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 704))(v64))
          goto LABEL_80;
        *(_BYTE *)(a3 + 122) = v47;
      }
    }
    *(_BYTE *)(a3 + 3) = v90 != 0;
    if (v81)
    {
      v34 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        v35 = (const char *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0)
          v35 = *(const char **)v35;
        *(_DWORD *)buf = 136315138;
        v103 = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Session \"%s\" requested to hold a scan power assertion", buf, 0xCu);
      }
      *(_BYTE *)(a3 + 142) = 1;
    }
    *(_BYTE *)(a3 + 144) = v79 != 0;
    if (sub_100018C6C(a2, "kCBScanOptionPriorityConfiguration"))
      *(_BYTE *)(a3 + 145) = v78;
  }
  if (!v80)
    goto LABEL_60;
  v36 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 352))(v36) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703B28();
LABEL_80:
    v17 = 11;
    goto LABEL_129;
  }
  if (*(int *)(a1 + 80) >= 1)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 143) = 1;
    *(_BYTE *)(a1 + 173) = 1;
  }
LABEL_60:
  if (sub_100070A30(a1))
    *(_BYTE *)(a1 + 173) = 1;
  if (*(_BYTE *)(a1 + 185))
    *(_BYTE *)(a3 + 137) = v96;
  v38 = v94;
  v37 = v95;
  if (v94)
    v39 = v95 == 0;
  else
    v39 = 1;
  if (!v39 || v87)
  {
    if (v95 == 0xFFFF || v94 == 0xFFFF)
    {
      v94 = 0;
      v95 = 0;
    }
    else if ((_DWORD)v95 && (_DWORD)v94)
    {
      v40 = v93 != 0;
      *(_BYTE *)(a3 + 120) = 1;
      *(_DWORD *)(a3 + 128) = v38;
      *(_DWORD *)(a3 + 132) = v37;
      *(_BYTE *)(a3 + 136) = v40;
    }
  }
  if (v89)
  {
    v48 = *(unsigned __int8 *)(a1 + 171);
    *(_BYTE *)(a3 + 138) = v48;
    if (!v48 && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703D2C();
  }
  else
  {
    *(_BYTE *)(a3 + 138) = 0;
  }
  v49 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v49 + 2408))(v49))
  {
    value = xpc_dictionary_get_value(a2, "kCBScanOptionZone");
    if (*(_BYTE *)(a1 + 170))
    {
      v51 = value;
      if (value)
      {
        if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
        {
          applier[0] = _NSConcreteStackBlock;
          applier[1] = 3221225472;
          applier[2] = sub_100562B64;
          applier[3] = &unk_100923110;
          applier[4] = a3;
          if (!xpc_array_apply(v51, applier))
          {
LABEL_77:
            v17 = 3;
            goto LABEL_129;
          }
        }
      }
    }
  }
  v52 = *(id *)(a1 + 96);
  v53 = _os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit");
  if (v10)
    v54 = v53;
  else
    v54 = 0;
  if (v54 == 1)
  {
    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "allObjects"));
    v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "firstObject"));

    if (objc_msgSend(v56, "length"))
    {
      objc_storeStrong((id *)(a1 + 224), v56);
      if (!sub_100552C38(a1))
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_1007001FC();

        goto LABEL_127;
      }
    }

  }
  v57 = xpc_dictionary_get_value(a2, "kCBScanOptionAppleFilter");
  v58 = v57;
  if (!v57)
    goto LABEL_119;
  if (xpc_get_type(v57) != (xpc_type_t)&_xpc_type_array)
    goto LABEL_119;
  v65[0] = _NSConcreteStackBlock;
  v65[1] = 3221225472;
  v65[2] = sub_100562CD0;
  v65[3] = &unk_1009376E8;
  v67 = a1;
  v66 = v52;
  v68 = a3;
  v59 = xpc_array_apply(v58, v65);

  if (v59)
  {
LABEL_119:
    v60 = *(id *)(a3 + 152);
    v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](NSMutableSet, "setWithSet:", v60));

    if (!objc_msgSend(v61, "count"))
      objc_msgSend(v61, "addObject:", *(_QWORD *)(a1 + 96));
    v62 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v103 = (const char *)v61;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Setting client list to %@", buf, 0xCu);
    }
    objc_storeStrong((id *)(a3 + 152), v61);
    sub_10006D084(a3);
    v17 = 0;
    v10 = v61;
    goto LABEL_128;
  }
LABEL_127:
  v17 = 3;
LABEL_128:

LABEL_129:
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  return v17;
}

void sub_100018B84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v8;

  v8 = *(void **)(v6 - 160);
  if (v8)
  {
    *(_QWORD *)(v6 - 152) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void *sub_100018C6C(void *result, const char *a2)
{
  void *v3;

  if (result)
  {
    v3 = result;
    if (xpc_get_type(result) == (xpc_type_t)&_xpc_type_dictionary)
      return (void *)(xpc_dictionary_get_value(v3, a2) != 0);
    else
      return 0;
  }
  return result;
}

id sub_100018CC0(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  const __CFString *v5;
  const __CFString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  const __CFString *v18;
  void *v19;
  unsigned int v21;

  v3 = a2;
  v4 = *(_DWORD *)(a1 + 548);
  v21 = *(_DWORD *)(a1 + 556);
  if (*(_BYTE *)(a1 + 544))
    v5 = CFSTR("On");
  else
    v5 = CFSTR("Off");
  if (v4 == 3)
    v5 = CFSTR("WiFiAssociatedBand6GHz");
  if (v4 == 2)
    v5 = CFSTR("WiFiAssociatedBand5GHz");
  if (v4 == 1)
    v6 = CFSTR("WiFiAssociatedBand2GHz");
  else
    v6 = v5;
  v7 = *(unsigned __int8 *)(a1 + 528);
  v8 = *(unsigned __int8 *)(a1 + 531);
  v9 = *(unsigned __int8 *)(a1 + 529);
  v10 = *(unsigned __int8 *)(a1 + 530);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v3));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v4 == 1));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v12, CFSTR("WiFiAssociated2GHz"));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v7));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v13, CFSTR("NumberOfClassicDevicesConnected"));

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v9));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v14, CFSTR("NumberOfLEDevicesConnected"));

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v8));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v15, CFSTR("NumberOfClassicHIDDevicesConnected"));

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v10));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v16, CFSTR("NumberOfLEHIDDevicesConnected"));

  objc_msgSend(v11, "setObject:forKeyedSubscript:", v6, CFSTR("WiFiState"));
  v17 = *(_DWORD *)(a1 + 540) - 1;
  if (v17 > 2)
    v18 = CFSTR("Unknown");
  else
    v18 = (const __CFString *)*((_QWORD *)&off_10092AB20 + v17);
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v18, CFSTR("SmartCoverState"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v21));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v19, CFSTR("WiFiM1M4HandshakeCount"));

  return v11;
}

void sub_100018EF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100018F58(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  unsigned int v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *i;
  void *v14;
  unsigned int v15;
  int v17;
  uint64_t v18;
  int v19;
  const char *v20;
  NSObject *v21;
  void *v22;
  unsigned int v23;
  NSObject *v24;
  id v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  NSObject *v30;
  uint32_t v31;
  NSObject *v32;
  id v33;
  unsigned int v34;
  const char *v35;
  void *v36;
  NSObject *v37;
  _BOOL4 v38;
  NSObject *v39;
  id v40;
  unsigned int v41;
  const char *v42;
  const char *v43;
  unsigned int v44;
  const char *v45;
  unsigned int v46;
  const char *v47;
  NSObject *v48;
  id v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  unsigned int v55;
  void *v56;
  id v57;
  _QWORD v58[5];
  id v59;
  char v60;
  _QWORD block[5];
  id v62;
  BOOL v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint8_t buf[4];
  id v69;
  __int16 v70;
  _BYTE v71[14];
  __int16 v72;
  const char *v73;

  v2 = BKSApplicationStateKey;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", BKSApplicationStateKey));
  v55 = objc_msgSend(v3, "intValue");

  v57 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", BKSApplicationStateDisplayIDKey));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", BKSApplicationStateProcessIDKey));
  LODWORD(v52) = objc_msgSend(v4, "intValue");

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", BKSApplicationStateExtensionKey));
  v54 = objc_msgSend(v5, "BOOLValue");

  v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "objectForKeyedSubscript:", v57));
  if (!v56)
  {
    if (!v57)
      goto LABEL_108;
    v18 = qword_1009998F0;
    if (!os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_108;
    v19 = objc_msgSend(*(id *)(a1 + 40), "translateApplicationState:", v55);
    if (v19 <= 7)
    {
      if (v19 == 2)
      {
        v20 = "terminated";
        goto LABEL_73;
      }
      if (v19 == 4)
      {
        v20 = "suspended";
        goto LABEL_73;
      }
    }
    else
    {
      switch(v19)
      {
        case 8:
          v20 = "background-running";
          goto LABEL_73;
        case 16:
          v20 = "foreground-running";
          goto LABEL_73;
        case 32:
          v20 = "daemon";
LABEL_73:
          v43 = "";
          *(_DWORD *)buf = 138413058;
          v69 = v57;
          v70 = 1024;
          if (v54)
            v43 = " (Is an extension)";
          *(_DWORD *)v71 = v52;
          *(_WORD *)&v71[4] = 2080;
          *(_QWORD *)&v71[6] = v20;
          v72 = 2080;
          v73 = v43;
          v29 = "%@ [%d] is not in the application map. State: %s%s";
          v30 = v18;
          v31 = 38;
          goto LABEL_76;
      }
    }
    v20 = "unknown";
    goto LABEL_73;
  }
  HIDWORD(v52) = objc_msgSend(*(id *)(a1 + 40), "translateApplicationState:", v55);
  v6 = *(id *)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v2));
  v8 = objc_msgSend(v7, "intValue");

  if (v8 == 4)
  {
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", BKSApplicationStateRunningReasonsKey));
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v64, buf, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v65;
      v12 = BKSApplicationStateRunningReasonAssertionReasonKey;
      while (2)
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v65 != v11)
            objc_enumerationMutation(v9);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v64 + 1) + 8 * (_QWORD)i), "objectForKeyedSubscript:", v12, v52));
          v15 = objc_msgSend(v14, "unsignedIntValue");

          if (v15 == 16 || v15 == 50004)
          {
            v17 = 1;
            goto LABEL_25;
          }
        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v64, buf, 16);
        v17 = 0;
        if (v10)
          continue;
        break;
      }
    }
    else
    {
      v17 = 0;
    }
LABEL_25:

  }
  else
  {
    v17 = 0;
  }

  if ((v54 | v17) == 1)
  {
    v21 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      v69 = v57;
      v70 = 1024;
      *(_DWORD *)v71 = v54;
      *(_WORD *)&v71[4] = 1024;
      *(_DWORD *)&v71[6] = v17;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Overriding bundle %@ state to foregroundRunning isExtension:%d isAssertionReasonWatchConnectivity:%d", buf, 0x18u);
    }
    HIDWORD(v52) = 16;
  }
  if (v55 != 1)
  {
    if (objc_msgSend(v56, "pid"))
    {
      v32 = qword_1009998F0;
      if (!os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_92;
      v33 = objc_msgSend(objc_retainAutorelease(v57), "UTF8String");
      v34 = objc_msgSend(v56, "pid");
      if (SHIDWORD(v52) <= 7)
      {
        if (HIDWORD(v52) == 2)
        {
          v35 = "terminated";
          goto LABEL_81;
        }
        if (HIDWORD(v52) == 4)
        {
          v35 = "suspended";
          goto LABEL_81;
        }
      }
      else
      {
        switch(HIDWORD(v52))
        {
          case 8:
            v35 = "background-running";
            goto LABEL_81;
          case 0x10:
            v35 = "foreground-running";
            goto LABEL_81;
          case 0x20:
            v35 = "daemon";
LABEL_81:
            v44 = objc_msgSend(v56, "isAlive", v52);
            v45 = "false";
            *(_DWORD *)buf = 136446978;
            v69 = v33;
            v70 = 1024;
            if (v44)
              v45 = "true";
            *(_DWORD *)v71 = v34;
            *(_WORD *)&v71[4] = 2082;
            *(_QWORD *)&v71[6] = v35;
            v72 = 2080;
            v73 = v45;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Application \"%{public}s\" is still at pid %d, with state \"%{public}s\", isAlive: %s", buf, 0x26u);
LABEL_92:
            v48 = qword_1009998F0;
            if (!os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
              goto LABEL_106;
            v49 = objc_msgSend(objc_retainAutorelease(v57), "UTF8String");
            if (SHIDWORD(v52) <= 7)
            {
              if (HIDWORD(v52) == 2)
              {
                v50 = "terminated";
                goto LABEL_105;
              }
              if (HIDWORD(v52) == 4)
              {
                v50 = "suspended";
                goto LABEL_105;
              }
            }
            else
            {
              switch(HIDWORD(v52))
              {
                case 8:
                  v50 = "background-running";
                  goto LABEL_105;
                case 0x10:
                  v50 = "foreground-running";
                  goto LABEL_105;
                case 0x20:
                  v50 = "daemon";
LABEL_105:
                  *(_DWORD *)buf = 136446466;
                  v69 = v49;
                  v70 = 2082;
                  *(_QWORD *)v71 = v50;
                  _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "State of application \"%{public}s\" is now \"%{public}s\"", buf, 0x16u);
LABEL_106:
                  objc_msgSend(v56, "setState:", HIDWORD(v52), v52);
                  v51 = *(_QWORD *)(a1 + 40);
                  if (*(_QWORD *)(v51 + 8))
                  {
                    v58[0] = _NSConcreteStackBlock;
                    v58[1] = 3221225472;
                    v58[2] = sub_1006AF890;
                    v58[3] = &unk_1009195F8;
                    v58[4] = v51;
                    v59 = v57;
                    v60 = v53;
                    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v58);

                  }
                  goto LABEL_108;
              }
            }
            v50 = "unknown";
            goto LABEL_105;
        }
      }
      v35 = "unknown";
      goto LABEL_81;
    }
    objc_msgSend(v56, "setPid:", v52);
    v39 = qword_1009998F0;
    if (!os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
    {
LABEL_91:
      objc_msgSend(*(id *)(a1 + 40), "takeAssertionForProcess:duration:isUrgent:", v57, 10, 0, v52);
      goto LABEL_92;
    }
    v40 = objc_msgSend(objc_retainAutorelease(v57), "UTF8String");
    v41 = objc_msgSend(v56, "pid");
    if (SHIDWORD(v52) <= 7)
    {
      if (HIDWORD(v52) == 2)
      {
        v42 = "terminated";
        goto LABEL_88;
      }
      if (HIDWORD(v52) == 4)
      {
        v42 = "suspended";
        goto LABEL_88;
      }
    }
    else
    {
      switch(HIDWORD(v52))
      {
        case 8:
          v42 = "background-running";
          goto LABEL_88;
        case 0x10:
          v42 = "foreground-running";
          goto LABEL_88;
        case 0x20:
          v42 = "daemon";
LABEL_88:
          v46 = objc_msgSend(v56, "isAlive", v52);
          v47 = "false";
          *(_DWORD *)buf = 136446978;
          v69 = v40;
          v70 = 1024;
          if (v46)
            v47 = "true";
          *(_DWORD *)v71 = v41;
          *(_WORD *)&v71[4] = 2082;
          *(_QWORD *)&v71[6] = v42;
          v72 = 2080;
          v73 = v47;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Application \"%{public}s\" is now at pid %d, with state \"%{public}s\", isAlive: %s", buf, 0x26u);
          goto LABEL_91;
      }
    }
    v42 = "unknown";
    goto LABEL_88;
  }
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", BKSApplicationStateExitReasonKey));
  v23 = objc_msgSend(v22, "unsignedIntValue");

  v24 = qword_1009998F0;
  if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
  {
    v25 = objc_msgSend(objc_retainAutorelease(v57), "UTF8String");
    v26 = "terminated";
    if (v23 == 1)
      v26 = "killed by the user";
    *(_DWORD *)buf = 136446466;
    v69 = v25;
    v70 = 2082;
    *(_QWORD *)v71 = v26;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Application \"%{public}s\" has been %{public}s", buf, 0x16u);
  }
  objc_msgSend(v56, "setPid:", 0, v52);
  v27 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v27 + 8))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1006AF80C;
    block[3] = &unk_1009195F8;
    block[4] = v27;
    v62 = v57;
    v63 = v23 == 1;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
  if (v23 == 1)
  {
    v28 = qword_1009998F0;
    if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v69 = v57;
      v29 = "bundleID %{public}@ in launch queue but won't resurrect. Reason: killed by user.";
      v30 = v28;
      v31 = 12;
LABEL_76:
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
    }
  }
  else
  {
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "objectForKey:", v57));
    v37 = qword_1009998F0;
    v38 = os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT);
    if (v36)
    {
      if (v38)
      {
        *(_DWORD *)buf = 138543362;
        v69 = v57;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Found bundleID in launch queue, attempting to resurrect - %{public}@", buf, 0xCu);
      }
      objc_msgSend(*(id *)(a1 + 40), "openBundle:options:attempt:", v57, v36, 0);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 112), "removeObjectForKey:", v57);
    }
    else if (v38)
    {
      *(_DWORD *)buf = 138543362;
      v69 = v57;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "BundleID not in launch queue - not resurrecting: %{public}@", buf, 0xCu);
    }

  }
LABEL_108:

}

void sub_1000199A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_100019A7C(uint64_t a1, unint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t *v4;
  unint64_t v6;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  NSObject *v12;
  void **v13;
  id v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *i;
  void *v23;
  NSObject *v24;
  NSObject *v25;
  void **v26;
  NSObject *v27;
  void *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  _BOOL4 v40;
  id v41;
  _BOOL4 v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  void *j;
  id v48;
  id v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  int v54;
  void *v55;
  id v56;
  id v57;
  uint64_t v58;
  void *k;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  BOOL v65;
  void *v66;
  void *v67;
  NSObject *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BOOL4 v77;
  void *v78;
  id v79;
  uint64_t **v81;
  id v82;
  uint64_t *v83;
  void *v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102[2];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _BYTE buf[12];
  __int16 v108;
  id v109;
  char v110;
  void *__p[2];
  __int128 v112;
  uint64_t v113;
  _BYTE v114[128];
  _BYTE v115[128];
  _BYTE v116[128];
  _BYTE v117[128];
  _BYTE v118[128];

  v4 = (uint64_t *)(a1 + 232);
  v3 = *(_QWORD **)(a1 + 232);
  if (v3)
  {
    v6 = a2;
    v81 = (uint64_t **)(a1 + 224);
    v83 = (uint64_t *)(a1 + 232);
    do
    {
      v8 = v3[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v3;
      else
        v10 = v3 + 1;
      if (v9)
        v4 = v3;
      v3 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v4 != v83 && v4[4] <= a2)
    {
      v12 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(v6, (uint64_t)__p);
        v13 = (SBYTE7(v112) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Unregistering session \"%{public}s\"", buf, 0xCu);
        if (SBYTE7(v112) < 0)
          operator delete(__p[0]);
      }
      v14 = *(id *)(v4[5] + 88);
      v15 = v4[5];
      v82 = *(id *)(v15 + 104);
      if ((a3 & 1) == 0)
      {
        if (*(_BYTE *)(v15 + 24) && *(_QWORD *)(v15 + 96))
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
        else
          v16 = 0;
        v17 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          v18 = *(void **)(a1 + 344);
          LODWORD(__p[0]) = 138543362;
          *(void **)((char *)__p + 4) = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "bundle ID's not allowed to use bluetooth %{public}@", (uint8_t *)__p, 0xCu);
        }
        if (*(_QWORD *)(v15 + 96))
        {
          v105 = 0u;
          v106 = 0u;
          v103 = 0u;
          v104 = 0u;
          v19 = *(id *)(a1 + 344);
          v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v103, v118, 16);
          if (v20)
          {
            v21 = *(_QWORD *)v104;
            while (2)
            {
              for (i = 0; i != v20; i = (char *)i + 1)
              {
                if (*(_QWORD *)v104 != v21)
                  objc_enumerationMutation(v19);
                v23 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * (_QWORD)i);
                if (objc_msgSend(v23, "isEqualToString:", *(_QWORD *)(v15 + 88)))
                {
                  v24 = qword_1009998F0;
                  if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(__p[0]) = 138543362;
                    *(void **)((char *)__p + 4) = v23;
                    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Removing restorable bundle %{public}@ because user disabled TCC access to bluetooth", (uint8_t *)__p, 0xCu);
                  }
                  objc_msgSend(*(id *)(a1 + 296), "removeObject:", *(_QWORD *)(v15 + 88));
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15))
                  {
                    v25 = qword_1009998F0;
                    if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
                    {
                      sub_1000340DC(a2, (uint64_t)__p);
                      v26 = (SBYTE7(v112) & 0x80u) == 0 ? __p : (void **)__p[0];
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = v26;
                      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Removing restorable session %{public}s due to TCC change", buf, 0xCu);
                      if (SBYTE7(v112) < 0)
                        operator delete(__p[0]);
                    }
                  }

                  v6 = a2;
                  goto LABEL_55;
                }
              }
              v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v103, v118, 16);
              if (v20)
                continue;
              break;
            }
          }

          v6 = a2;
          if ((v16 & 1) != 0)
            goto LABEL_50;
        }
        else if (v16)
        {
LABEL_50:
          v27 = qword_1009998F0;
          if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
          {
            v28 = *(void **)(v15 + 88);
            LODWORD(__p[0]) = 138543362;
            *(void **)((char *)__p + 4) = v28;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Session %{public}@ is restorable, persisting", (uint8_t *)__p, 0xCu);
          }
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15) == 3)
            *(_QWORD *)(v15 + 216) = 0;
          *(_QWORD *)(v15 + 120) = 0;
          *(_BYTE *)(v15 + 38) = 0;
LABEL_147:

          return 0;
        }
      }
LABEL_55:
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4[5] + 16))(v4[5]);
      v30 = v4[5];
      if (v29)
      {
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v4[5]);
        v32 = v4[5];
        if (v31 != 1)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 16))(v4[5]) == 3)
          {
            v74 = v4[5];
            v40 = objc_msgSend(*(id *)(v74 + 232), "count") != 0;
            objc_msgSend(*(id *)(v74 + 240), "removeAllObjects");
          }
          else
          {
            v40 = 0;
          }
          goto LABEL_104;
        }
        if (*(_BYTE *)(v32 + 226))
        {
          if (qword_100977C30 != -1)
            dispatch_once(&qword_100977C30, &stru_100924D10);
          sub_1005FEF50((uint64_t)off_100977C28, v6);
        }
        sub_1002E1084(a1, v6);
        v79 = v14;
        v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v32 + 80), "allKeys"));
        objc_msgSend(*(id *)(v32 + 80), "removeAllObjects");
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v33 = v84;
        v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v86, v114, 16);
        if (v34)
        {
          v35 = *(_QWORD *)v87;
          do
          {
            v36 = 0;
            do
            {
              if (*(_QWORD *)v87 != v35)
                objc_enumerationMutation(v33);
              v37 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * (_QWORD)v36);
              if (qword_1009778A8 != -1)
                dispatch_once(&qword_1009778A8, &stru_100924C30);
              v38 = off_1009778A0;
              v39 = sub_1002E0FA0(a1, v37);
              sub_10061E160((uint64_t)v38, v37, v39, 1);
              v36 = (char *)v36 + 1;
            }
            while (v34 != v36);
            v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v86, v114, 16);
          }
          while (v34);
        }

        v14 = v79;
        v40 = 0;
      }
      else
      {
        if (*(_BYTE *)(v30 + 304))
          sub_10006AA24(v4[5], v6);
        memset(v102, 0, sizeof(v102));
        sub_100402CF0(v30, v6, 0, v82, 0, v102, 0, v14);
        if (qword_1009778F8 != -1)
          dispatch_once(&qword_1009778F8, &stru_100924C10);
        sub_10006DBC4(qword_1009778F0, v6);
        objc_msgSend(*(id *)(v30 + 256), "removeAllObjects");
        v41 = objc_msgSend(*(id *)(v30 + 248), "count");
        v42 = v41 != 0;
        if (v41)
        {
          v100 = 0u;
          v101 = 0u;
          v98 = 0u;
          v99 = 0u;
          v43 = v30;
          v44 = *(id *)(v30 + 248);
          v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v98, v117, 16);
          if (v45)
          {
            v46 = *(_QWORD *)v99;
            do
            {
              for (j = 0; j != v45; j = (char *)j + 1)
              {
                if (*(_QWORD *)v99 != v46)
                  objc_enumerationMutation(v44);
                v48 = *(id *)(*((_QWORD *)&v98 + 1) + 8 * (_QWORD)j);
                sub_1002E0D4C(a1, v48);

              }
              v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v98, v117, 16);
            }
            while (v45);
          }

          v30 = v43;
        }
        objc_msgSend(*(id *)(v30 + 336), "removeAllObjects");
        v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v30 + 80), "allKeys"));
        v85 = v30;
        objc_msgSend(*(id *)(v30 + 80), "removeAllObjects");
        v77 = v42;
        v96 = 0u;
        v97 = 0u;
        v94 = 0u;
        v95 = 0u;
        v33 = v78;
        v49 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v94, v116, 16);
        if (v49)
        {
          v50 = *(_QWORD *)v95;
          do
          {
            v51 = 0;
            do
            {
              if (*(_QWORD *)v95 != v50)
                objc_enumerationMutation(v33);
              v52 = *(void **)(*((_QWORD *)&v94 + 1) + 8 * (_QWORD)v51);
              if (qword_1009778A8 != -1)
                dispatch_once(&qword_1009778A8, &stru_100924C30);
              v53 = off_1009778A0;
              v54 = sub_1002E0FA0(a1, v52);
              sub_10061E160((uint64_t)v53, v52, v54, 0);
              v51 = (char *)v51 + 1;
            }
            while (v49 != v51);
            v49 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v94, v116, 16);
          }
          while (v49);
        }

        v40 = v77;
        sub_10006EF24(a1, a2);
        v55 = *(void **)(v85 + 392);
        if (v55 && objc_msgSend(v55, "count"))
        {
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v56 = *(id *)(v85 + 392);
          v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v90, v115, 16);
          if (v57)
          {
            v58 = *(_QWORD *)v91;
            do
            {
              for (k = 0; k != v57; k = (char *)k + 1)
              {
                if (*(_QWORD *)v91 != v58)
                  objc_enumerationMutation(v56);
                sub_100409F54(v85, *(void **)(*((_QWORD *)&v90 + 1) + 8 * (_QWORD)k), 0, 0);
              }
              v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v90, v115, 16);
            }
            while (v57);
          }

          objc_msgSend(*(id *)(v85 + 392), "removeAllObjects");
        }
      }

      v6 = a2;
LABEL_104:
      sub_10006ED08(a1, v6);
      v60 = sub_100069D20();
      (*(void (**)(uint64_t, unint64_t, id))(*(_QWORD *)v60 + 8))(v60, v6, v14);
      v113 = 0;
      *(_OWORD *)__p = 0u;
      v112 = 0u;
      sub_1000340DC(v6, (uint64_t)buf);
      sub_100069BE0((uint64_t)__p, (__int128 *)buf, *(_BYTE *)(v4[5] + 129));
      if (v110 < 0)
        operator delete(*(void **)buf);
      if (qword_10097AC48 != -1)
        dispatch_once(&qword_10097AC48, &stru_100924DF0);
      sub_10006544C(qword_10097AC40, (uint64_t)__p);
      sub_10006F07C(a1);
      v61 = v4[5];
      if (v61)
        (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
      sub_1000040CC(v81, v4);
      operator delete(v4);
      v62 = *v81;
      if (*v81 == v83)
      {
LABEL_119:
        v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 320), "objectForKeyedSubscript:", v14));
        v67 = v66;
        if (v66)
        {
          objc_msgSend(v66, "removeObject:", v82);
          objc_msgSend(*(id *)(a1 + 320), "setObject:forKeyedSubscript:", v67, v14);
          v68 = qword_100999898;
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543618;
            *(_QWORD *)&buf[4] = v14;
            v108 = 2112;
            v109 = v82;
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Application %{public}@ for user %@ is no longer interested in FindMy devices", buf, 0x16u);
          }
        }

        v6 = a2;
      }
      else
      {
        while (!objc_msgSend(*(id *)(v62[5] + 88), "isEqualToString:", v14)
             || (objc_msgSend(*(id *)(v62[5] + 104), "isEqual:", v82) & 1) == 0)
        {
          v63 = (uint64_t *)v62[1];
          if (v63)
          {
            do
            {
              v64 = v63;
              v63 = (uint64_t *)*v63;
            }
            while (v63);
          }
          else
          {
            do
            {
              v64 = (uint64_t *)v62[2];
              v65 = *v64 == (_QWORD)v62;
              v62 = v64;
            }
            while (!v65);
          }
          v62 = v64;
          if (v64 == v83)
            goto LABEL_119;
        }
      }
      if (*(_BYTE *)(a1 + 178))
      {
        v69 = *v81;
        if (*v81 == v83)
        {
LABEL_133:
          v73 = 0;
        }
        else
        {
          while (1)
          {
            v70 = v69[5];
            if (*(_BYTE *)(v70 + 24))
            {
              if (*(_QWORD *)(v70 + 96))
                break;
            }
            v71 = (uint64_t *)v69[1];
            if (v71)
            {
              do
              {
                v72 = v71;
                v71 = (uint64_t *)*v71;
              }
              while (v71);
            }
            else
            {
              do
              {
                v72 = (uint64_t *)v69[2];
                v65 = *v72 == (_QWORD)v69;
                v69 = v72;
              }
              while (!v65);
            }
            v69 = v72;
            if (v72 == v83)
              goto LABEL_133;
          }
          v73 = 1;
        }
        *(_BYTE *)(a1 + 178) = v73;
      }
      if (!*(_QWORD *)(a1 + 240))
        word_10097AC0A = 1;
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_100924E10);
      v75 = qword_100977B48;
      v76 = sub_100022AE4(v6);
      sub_10000B174(v75, v76);
      if (v40)
        sub_1002DD240(a1);
      if (SHIBYTE(v112) < 0)
        operator delete(__p[1]);
      goto LABEL_147;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    sub_1006DCD3C();
  return 1;
}

void sub_10001A690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id sub_10001A7AC(uint64_t a1)
{
  id result;

  sub_10001A82C(a1 + 4328, *(_QWORD **)(a1 + 4336));
  *(_QWORD *)(a1 + 4328) = a1 + 4336;
  *(_QWORD *)(a1 + 4344) = 0;
  *(_QWORD *)(a1 + 4336) = 0;
  sub_10001A82C(a1 + 4304, *(_QWORD **)(a1 + 4312));
  *(_QWORD *)(a1 + 4304) = a1 + 4312;
  *(_QWORD *)(a1 + 4320) = 0;
  *(_QWORD *)(a1 + 4312) = 0;
  objc_msgSend(*(id *)(a1 + 4352), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 4360), "removeAllObjects");
  result = objc_msgSend(*(id *)(a1 + 4368), "removeAllObjects");
  *(_DWORD *)(a1 + 4376) = 0;
  return result;
}

void sub_10001A82C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10001A82C(a1, *a2);
    sub_10001A82C(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_10001A86C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t **v19;
  NSObject *v20;
  _BYTE __p[12];
  char v22;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(*(id *)(a1 + 352), "containsObject:", v5))
  {
    v7 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 138543362;
      *(_QWORD *)&__p[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Remove %{public}@ from tccPendingBundleList", __p, 0xCu);
    }
    objc_msgSend(*(id *)(a1 + 352), "removeObject:", v5);
  }
  v8 = *(_QWORD **)(a1 + 224);
  if (v8 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v9 = v8[5];
      sub_1000340DC(v8[4], (uint64_t)__p);
      if (v22 >= 0)
        v10 = __p;
      else
        v10 = *(_BYTE **)__p;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
      if (v22 < 0)
        operator delete(*(void **)__p);
      if (objc_msgSend(v11, "isEqualToString:", v5))
        *(_BYTE *)(v9 + 39) = 1;

      v12 = (_QWORD *)v8[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v8[2];
          v14 = *v13 == (_QWORD)v8;
          v8 = v13;
        }
        while (!v14);
      }
      v8 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 232));
  }
  v17 = *(uint64_t ***)(a1 + 248);
  v15 = (uint64_t **)(a1 + 248);
  v16 = (uint64_t)v17;
  if (v17 != v15 + 1)
  {
    while (!objc_msgSend(*(id *)(v16 + 32), "isEqualToString:", v6))
    {
      v18 = *(uint64_t **)(v16 + 8);
      if (v18)
      {
        do
        {
          v19 = (uint64_t **)v18;
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = *(uint64_t ***)(v16 + 16);
          v14 = *v19 == (uint64_t *)v16;
          v16 = (uint64_t)v19;
        }
        while (!v14);
      }
      v16 = (uint64_t)v19;
      if (v19 == v15 + 1)
        goto LABEL_31;
    }
    v20 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 138543362;
      *(_QWORD *)&__p[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Erasing %{public}@ from fBundleCheckinMap", __p, 0xCu);
    }
    sub_1002F6C4C(v15, v16);
  }
LABEL_31:

}

void sub_10001AAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_10001AB14(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_10001ABA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_10001ABD0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  void **v8;
  int v9;
  id v10;
  _BOOL4 v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v16[3];
  unint64_t v17;
  void *__p[2];
  __int128 v19;
  int buf;
  void **buf_4;
  __int16 buf_12;
  int buf_14;

  v17 = a2;
  if (!*(_DWORD *)(a1 + 1960))
    return 105;
  if (!sub_10006E4B8(a1, a2))
  {
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10093F458);
    sub_10006EB5C((uint64_t)off_100978168, a2);
    memset(v16, 0, sizeof(v16));
    sub_1000B61B8((char *)v16, *(__int128 **)(a3 + 8), *(__int128 **)(a3 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2));
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10093F458);
    sub_10006F6A4((uint64_t)off_100978168, v17);
    v10 = *(id *)(a3 + 152);
    v11 = objc_msgSend(v10, "count") == 0;

    if (v11)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", CFSTR("com.apple.bluetooth")));
      objc_storeStrong((id *)(a3 + 152), v12);

    }
    v13 = *(_QWORD **)(a1 + 2048);
    if (v13)
    {
      do
      {
        if (v13[4] >= v17)
          v14 = v13;
        else
          v14 = v13 + 1;
        v13 = (_QWORD *)*v14;
      }
      while (*v14);
    }
    operator new();
  }
  v6 = qword_100999828;
  v7 = 0;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000340DC(a2, (uint64_t)__p);
    if ((SBYTE7(v19) & 0x80u) == 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    v9 = *(unsigned __int8 *)(a1 + 2168);
    buf = 136446466;
    buf_4 = v8;
    buf_12 = 1024;
    buf_14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Rejecting the custom Scan for %{public}s for list type %d", (uint8_t *)&buf, 0x12u);
    if (SBYTE7(v19) < 0)
      operator delete(__p[0]);
    return 0;
  }
  return v7;
}

void sub_10001C3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p)
{
  uint64_t v39;

  if (*(char *)(v39 - 137) < 0)
    operator delete(*(void **)(v39 - 160));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10001C578(uint64_t a1, uint64_t a2, xpc_connection_t connection, uint64_t a4)
{
  _xpc_connection_s *v5;
  uid_t euid;
  NSObject *v7;
  id v8;
  void *v9;
  int v10;
  id v11;
  uint64_t v12;
  void *v13;
  int v15;
  int *v16;
  char *v17;
  int v18;
  _QWORD handler[5];
  uint8_t buf[4];
  int v21;
  __int16 v22;
  char *v23;
  __int16 v24;
  int v25;
  uuid_t uu;

  *(_QWORD *)a1 = &off_1009230F0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = connection;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 75) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 40) = xpc_connection_get_pid(connection);
  xpc_connection_set_context(*(xpc_connection_t *)(a1 + 16), (void *)a1);
  xpc_connection_set_finalizer_f(*(xpc_connection_t *)(a1 + 16), (xpc_finalizer_t)sub_1000708A4);
  v5 = *(_xpc_connection_s **)(a1 + 16);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100062254;
  handler[3] = &unk_1009203A0;
  handler[4] = a1;
  xpc_connection_set_event_handler(v5, handler);
  xpc_connection_set_target_queue(*(xpc_connection_t *)(a1 + 16), *(dispatch_queue_t *)(a1 + 24));
  xpc_connection_resume(*(xpc_connection_t *)(a1 + 16));
  euid = xpc_connection_get_euid(*(xpc_connection_t *)(a1 + 16));
  *(_DWORD *)(a1 + 44) = euid;
  memset(uu, 0, sizeof(uu));
  if (mbr_uid_to_uuid(euid, uu))
  {
    v7 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      v15 = *(_DWORD *)(a1 + 44);
      v16 = __error();
      v17 = strerror(*v16);
      v18 = *__error();
      *(_DWORD *)buf = 67240706;
      v21 = v15;
      v22 = 2082;
      v23 = v17;
      v24 = 1026;
      v25 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "mbr_uid_to_uuid for id %{public}d failed: %{public}s (%{public}d)", buf, 0x18u);
    }
    v8 = 0;
  }
  else
  {
    v8 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", uu);
  }
  v9 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;

  if (sub_10001CB50(a1))
  {
    v10 = 2;
  }
  else
  {
    if (!sub_10001CB50(a1))
      goto LABEL_11;
    v10 = 1;
  }
  *(_DWORD *)(a1 + 80) = v10;
LABEL_11:
  v11 = sub_1000167EC(*(_QWORD *)(a1 + 16));
  v12 = objc_claimAutoreleasedReturnValue(v11);
  v13 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v12;

  if ((objc_msgSend(&off_1009611D0, "containsObject:", *(_QWORD *)(a1 + 96)) & 1) == 0)
    operator new();
  *(_BYTE *)(a1 + 89) = sub_10001CB50(a1);
  *(_BYTE *)(a1 + 84) = sub_10001CB50(a1);
  *(_BYTE *)(a1 + 90) = sub_10001CB50(a1);
  *(_BYTE *)(a1 + 85) = sub_10001CB50(a1);
  *(_BYTE *)(a1 + 86) = sub_10001CB50(a1);
  if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
    *(_BYTE *)(a1 + 87) = sub_10001CB50(a1);
  return a1;
}

void sub_10001C8A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_10001C928(uint64_t a1, uint64_t a2, _xpc_connection_s *a3, uint64_t a4)
{
  uint64_t v5;
  BOOL v6;
  int v7;
  int v8;
  NSObject *v9;
  uint8_t v11[16];

  v5 = sub_100070614(a1, a2, a3, a4);
  *(_QWORD *)v5 = off_100936BC0;
  *(_QWORD *)(v5 + 144) = off_100936D80;
  *(_QWORD *)(v5 + 152) = off_100936EB8;
  *(_QWORD *)(v5 + 160) = &off_100936EE8;
  *(_WORD *)(v5 + 168) = 0;
  *(_BYTE *)(a1 + 170) = sub_10001CB50(v5);
  *(_BYTE *)(a1 + 171) = sub_10001CB50(a1);
  *(_WORD *)(a1 + 172) = 0;
  *(_BYTE *)(a1 + 174) = sub_10001CB50(a1);
  *(_DWORD *)(a1 + 175) = 0;
  *(_WORD *)(a1 + 179) = 0;
  *(_BYTE *)(a1 + 181) = sub_10001CB50(a1);
  *(_BYTE *)(a1 + 182) = sub_10001CB50(a1);
  *(_BYTE *)(a1 + 183) = sub_10001CB50(a1);
  *(_BYTE *)(a1 + 184) = sub_10001CB50(a1);
  *(_BYTE *)(a1 + 185) = sub_10001CB50(a1);
  *(_BYTE *)(a1 + 186) = 0;
  *(_BYTE *)(a1 + 187) = sub_10001CB50(a1);
  *(_BYTE *)(a1 + 188) = sub_10001CB50(a1);
  *(_BYTE *)(a1 + 189) = sub_10001CB50(a1);
  *(_BYTE *)(a1 + 190) = sub_10001CB50(a1);
  v6 = sub_10001CB50(a1);
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 191) = v6;
  *(_BYTE *)(a1 + 192) = 8;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 193) = 0;
  *(_DWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  v7 = *(_DWORD *)(a1 + 80);
  if (v7 >= 1)
  {
    *(_WORD *)(a1 + 170) = 257;
    *(_BYTE *)(a1 + 181) = 1;
    *(_WORD *)(a1 + 183) = 257;
    *(_BYTE *)(a1 + 185) = 1;
    *(_BYTE *)(a1 + 187) = 1;
    *(_BYTE *)(a1 + 174) = 1;
  }
  if (v7 <= 0)
    v8 = 0;
  else
    v8 = -1;
  *(_DWORD *)(a1 + 196) = v8;
  if (*(_BYTE *)(a1 + 188))
  {
    v9 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Entitled Scan Client - Checked in", v11, 2u);
    }
  }
  return a1;
}

void sub_10001CB3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008708(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10001CB50(uint64_t a1)
{
  void *v1;
  void *v2;
  _BOOL8 v3;

  v1 = (void *)xpc_connection_copy_entitlement_value(*(_QWORD *)(a1 + 16));
  if (!v1)
    return 0;
  v2 = v1;
  v3 = xpc_get_type(v1) == (xpc_type_t)&_xpc_type_BOOL && xpc_BOOL_get_value(v2);
  xpc_release(v2);
  return v3;
}

uint64_t sub_10001CBB4(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  _OWORD v7[4];
  void *__p[2];
  __int128 v9;
  __int128 v10;
  _OWORD v11[9];
  uint64_t v12;

  v12 = 0;
  v10 = 0u;
  memset(v11, 0, sizeof(v11));
  *(_OWORD *)__p = 0u;
  v9 = 0u;
  memset(v7, 0, sizeof(v7));
  v6 = 0u;
  sub_1002613AC((uint64_t)&v6);
  if (!a1)
  {
    v2 = "Init";
    v3 = 4;
    goto LABEL_15;
  }
  if ((a1 & 1) != 0)
    sub_1002614D8(v7, (uint64_t)"FaceTime ", 9);
  if ((a1 & 2) != 0)
    sub_1002614D8(v7, (uint64_t)"WiFiCalling ", 12);
  if ((a1 & 4) != 0)
    sub_1002614D8(v7, (uint64_t)"Voip ", 5);
  if ((a1 & 8) != 0)
    sub_1002614D8(v7, (uint64_t)"CarPlay ", 8);
  if ((a1 & 0x10) != 0)
    sub_1002614D8(v7, (uint64_t)"MediaPlaying ", 13);
  if ((a1 & 0x40) != 0)
  {
    v2 = "CoPresence ";
    v3 = 11;
LABEL_15:
    sub_1002614D8(v7, (uint64_t)v2, v3);
  }
  std::stringbuf::str((char *)v7 + 8);
  *(_QWORD *)((char *)&v7[-1]
  *(_QWORD *)&v7[0] = v4;
  if (SHIBYTE(v9) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v7 + 8);
  return std::ios::~ios(v11);
}

void sub_10001CD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1006CC5C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

xpc_object_t sub_10001CD58(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, char a9, char a10, char a11)
{
  xpc_object_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  xpc_object_t v20;
  _QWORD *v21;
  xpc_object_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unsigned __int8 **v29;
  uint64_t v30;
  uint64_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unsigned __int8 **v41;
  uint64_t v42;
  uint64_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  xpc_object_t v64;
  xpc_object_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  xpc_object_t v73;
  xpc_object_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  xpc_object_t v82;
  xpc_object_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  _QWORD *v90;
  xpc_object_t v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  unsigned int v94;
  const void *v95;
  size_t v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  char *v99;
  size_t v100;
  _WORD *v101;
  uint64_t v102;
  uint64_t v103;
  xpc_object_t v104;
  xpc_object_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  xpc_object_t v117;
  xpc_object_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  NSMutableData *v125;
  int v126;
  xpc_object_t v127;
  xpc_object_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  unint64_t v133;
  unsigned int v134;
  int v135;
  int v136;
  size_t v137;
  size_t v138;
  uint64_t **v139;
  unsigned int v140;
  char *v141;
  NSObject *v142;
  uint64_t v143;
  void **v144;
  const char *v145;
  NSObject *v146;
  uint32_t v147;
  uint64_t v148;
  NSMutableData *v149;
  xpc_object_t v150;
  xpc_object_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  NSObject *v157;
  NSObject *v158;
  uint64_t v159;
  const void *v160;
  xpc_object_t v161;
  xpc_object_t v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  NSObject *v170;
  _BYTE *v171;
  xpc_object_t v172;
  xpc_object_t v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  xpc_object_t v180;
  xpc_object_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  size_t v187;
  const void *v188;
  xpc_object_t v189;
  xpc_object_t v190;
  char *v191;
  uint64_t v192;
  xpc_object_t v193;
  xpc_object_t v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  char *v204;
  xpc_object_t v205;
  xpc_object_t v206;
  char *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  xpc_object_t v213;
  xpc_object_t v214;
  char *v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  char *v220;
  xpc_object_t v221;
  xpc_object_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  char *v227;
  xpc_object_t v228;
  __int128 v229;
  xpc_object_t v230;
  char *v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  xpc_object_t v237;
  __int128 v238;
  xpc_object_t v239;
  char *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  char *v244;
  char *v245;
  xpc_object_t v246;
  xpc_object_t v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  char *v252;
  char *v253;
  xpc_object_t v254;
  xpc_object_t v255;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  char *v260;
  char *v261;
  xpc_object_t v262;
  xpc_object_t v263;
  char *v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  char *v268;
  char *v269;
  xpc_object_t v270;
  xpc_object_t v271;
  char *v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  char *v276;
  char *v277;
  xpc_object_t v278;
  xpc_object_t v279;
  char *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  char *v284;
  char *v285;
  xpc_object_t v286;
  xpc_object_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  char *v291;
  char *v292;
  BOOL v293;
  char *v294;
  xpc_object_t v295;
  xpc_object_t v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  char *v300;
  char *v301;
  const void *v302;
  size_t v303;
  xpc_object_t v304;
  xpc_object_t v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  char *v309;
  char *v310;
  xpc_object_t v311;
  xpc_object_t *v312;
  char *v314;
  NSUInteger v315;
  void **v316;
  void **v317;
  _BYTE *v318;
  int v319;
  id v320;
  id v321;
  void *__p[2];
  char v325;
  unsigned __int8 *v326;
  _QWORD *v327[2];
  uint8_t buf[4];
  _BYTE *v329;
  _BYTE bytes[24];
  size_t v331;
  __int16 v332;
  int v333;
  __int16 v334;
  int v335;
  __int16 v336;
  int v337;
  __int16 v338;
  size_t v339;
  __int128 v340;
  int v341;
  __int128 v342;
  int v343;

  v321 = a1;
  v320 = a2;
  v327[0] = 0;
  v327[1] = 0;
  v326 = (unsigned __int8 *)v327;
  if ((a9 & 1) == 0)
  {
    v342 = xmmword_10073B558;
    v343 = 0;
    sub_100042F44((__n128 *)bytes, (__n128 *)&v342);
    sub_10000BED0((uint64_t **)&v326, bytes, (uint64_t)bytes);
  }
  v319 = a8;
  if ((a11 & 1) == 0)
  {
    v340 = xmmword_10073B660;
    v341 = 0;
    sub_100042F44((__n128 *)bytes, (__n128 *)&v340);
    sub_10000BED0((uint64_t **)&v326, bytes, (uint64_t)bytes);
  }
  v16 = xpc_BOOL_create(*(_BYTE *)(*(_QWORD *)(a3 + 8) + 12));
  v17 = (char *)operator new(0x10uLL);
  v18 = v17;
  *(_QWORD *)v17 = "kCBAdvDataIsConnectable";
  *((_QWORD *)v17 + 1) = v16;
  if (a6)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 200);
    bytes[0] = BYTE5(v19);
    bytes[1] = BYTE4(v19);
    bytes[2] = BYTE3(v19);
    bytes[3] = BYTE2(v19);
    bytes[4] = BYTE1(v19);
    bytes[5] = v19;
    v20 = xpc_data_create(bytes, 6uLL);
    v21 = operator new(0x20uLL);
    v21[2] = "kCBAdvDataDeviceAddress";
    v21[3] = v20;
    *(_OWORD *)v21 = *(_OWORD *)v18;
    operator delete(v18);
    v22 = xpc_int64_create(BYTE6(v19));
    v23 = (char *)operator new(0x40uLL);
    v24 = v23;
    v25 = 0;
    v26 = v23 + 64;
    *((_QWORD *)v23 + 4) = "kCBAdvDataDeviceAddressType";
    *((_QWORD *)v23 + 5) = v22;
    v27 = v23 + 48;
    do
    {
      *(_OWORD *)&v23[v25 * 8 + 16] = *(_OWORD *)&v21[v25 + 2];
      v25 -= 2;
    }
    while (v25 != -4);
    operator delete(v21);
    v18 = v24;
  }
  else
  {
    v26 = v17 + 16;
    v27 = v17 + 16;
  }
  v28 = *(_QWORD *)(a3 + 8);
  v30 = *(_QWORD *)(v28 + 64);
  v31 = *(_QWORD *)(v28 + 72);
  v29 = (unsigned __int8 **)(v28 + 64);
  if (v31 != v30)
  {
    v32 = sub_1004B16F4(v29, (uint64_t)&v326);
    v33 = v32;
    if (v27 >= v26)
    {
      v34 = (v27 - v18) >> 4;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v35)
        v35 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v36 = 0xFFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      if (v36)
      {
        if (v36 >> 60)
          sub_10007ABD4();
        v37 = (char *)operator new(16 * v36);
      }
      else
      {
        v37 = 0;
      }
      v38 = &v37[16 * v34];
      v26 = &v37[16 * v36];
      *(_QWORD *)v38 = "kCBAdvDataServiceUUIDs";
      *((_QWORD *)v38 + 1) = v33;
      v39 = v38 + 16;
      if (v27 != v18)
      {
        do
        {
          *((_OWORD *)v38 - 1) = *((_OWORD *)v27 - 1);
          v38 -= 16;
          v27 -= 16;
        }
        while (v27 != v18);
        v27 = v18;
      }
      operator delete(v27);
      v27 = v39;
      v18 = v38;
    }
    else
    {
      *(_QWORD *)v27 = "kCBAdvDataServiceUUIDs";
      *((_QWORD *)v27 + 1) = v32;
      v27 += 16;
    }
  }
  v40 = *(_QWORD *)(a3 + 8);
  v42 = *(_QWORD *)(v40 + 88);
  v43 = *(_QWORD *)(v40 + 96);
  v41 = (unsigned __int8 **)(v40 + 88);
  if (v43 != v42)
  {
    v44 = sub_1004B16F4(v41, (uint64_t)&v326);
    v45 = v44;
    if (v27 >= v26)
    {
      v46 = (v27 - v18) >> 4;
      v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v47)
        v47 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v48 = 0xFFFFFFFFFFFFFFFLL;
      else
        v48 = v47;
      if (v48)
      {
        if (v48 >> 60)
          sub_10007ABD4();
        v49 = (char *)operator new(16 * v48);
      }
      else
      {
        v49 = 0;
      }
      v50 = &v49[16 * v46];
      v26 = &v49[16 * v48];
      *(_QWORD *)v50 = "kCBAdvDataSolicitedServiceUUIDs";
      *((_QWORD *)v50 + 1) = v45;
      v51 = v50 + 16;
      if (v27 != v18)
      {
        do
        {
          *((_OWORD *)v50 - 1) = *((_OWORD *)v27 - 1);
          v50 -= 16;
          v27 -= 16;
        }
        while (v27 != v18);
        v27 = v18;
      }
      operator delete(v27);
      v27 = v51;
      v18 = v50;
    }
    else
    {
      *(_QWORD *)v27 = "kCBAdvDataSolicitedServiceUUIDs";
      *((_QWORD *)v27 + 1) = v44;
      v27 += 16;
    }
  }
  if (*(_QWORD *)(a4 + 8) != *(_QWORD *)a4)
  {
    v52 = sub_1004B16F4((unsigned __int8 **)a4, (uint64_t)&v326);
    v53 = v52;
    if (v27 >= v26)
    {
      v54 = (v27 - v18) >> 4;
      v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v55)
        v55 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v56 = 0xFFFFFFFFFFFFFFFLL;
      else
        v56 = v55;
      if (v56)
      {
        if (v56 >> 60)
          sub_10007ABD4();
        v57 = (char *)operator new(16 * v56);
      }
      else
      {
        v57 = 0;
      }
      v58 = &v57[16 * v54];
      v26 = &v57[16 * v56];
      *(_QWORD *)v58 = "kCBAdvDataHashedServiceUUIDs";
      *((_QWORD *)v58 + 1) = v53;
      v59 = v58 + 16;
      if (v27 != v18)
      {
        do
        {
          *((_OWORD *)v58 - 1) = *((_OWORD *)v27 - 1);
          v58 -= 16;
          v27 -= 16;
        }
        while (v27 != v18);
        v27 = v18;
      }
      operator delete(v27);
      v27 = v59;
      v18 = v58;
    }
    else
    {
      *(_QWORD *)v27 = "kCBAdvDataHashedServiceUUIDs";
      *((_QWORD *)v27 + 1) = v52;
      v27 += 16;
    }
  }
  v60 = *(_QWORD *)(a3 + 8);
  if (*(char *)(v60 + 39) < 0)
  {
    sub_10003430C(bytes, *(void **)(v60 + 16), *(_QWORD *)(v60 + 24));
  }
  else
  {
    *(_OWORD *)bytes = *(_OWORD *)(v60 + 16);
    *(_QWORD *)&bytes[16] = *(_QWORD *)(v60 + 32);
  }
  if ((bytes[23] & 0x80000000) != 0)
  {
    v61 = *(_QWORD *)&bytes[8];
    operator delete(*(void **)bytes);
    if (!v61)
      goto LABEL_92;
  }
  else if (!bytes[23])
  {
    goto LABEL_92;
  }
  v62 = *(_QWORD *)(a3 + 8);
  if (*(char *)(v62 + 39) < 0)
  {
    sub_10003430C(bytes, *(void **)(v62 + 16), *(_QWORD *)(v62 + 24));
  }
  else
  {
    *(_OWORD *)bytes = *(_OWORD *)(v62 + 16);
    *(_QWORD *)&bytes[16] = *(_QWORD *)(v62 + 32);
  }
  if (bytes[23] >= 0)
    v63 = bytes;
  else
    v63 = *(const char **)bytes;
  v64 = xpc_string_create(v63);
  v65 = v64;
  if (v27 >= v26)
  {
    v67 = (v27 - v18) >> 4;
    v68 = v67 + 1;
    if ((unint64_t)(v67 + 1) >> 60)
      abort();
    if ((v26 - v18) >> 3 > v68)
      v68 = (v26 - v18) >> 3;
    if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
      v69 = 0xFFFFFFFFFFFFFFFLL;
    else
      v69 = v68;
    if (v69)
    {
      if (v69 >> 60)
        sub_10007ABD4();
      v70 = (char *)operator new(16 * v69);
    }
    else
    {
      v70 = 0;
    }
    v66 = &v70[16 * v67];
    v26 = &v70[16 * v69];
    *(_QWORD *)v66 = "kCBAdvDataLocalName";
    *((_QWORD *)v66 + 1) = v65;
    v71 = v66;
    if (v27 != v18)
    {
      do
      {
        *((_OWORD *)v71 - 1) = *((_OWORD *)v27 - 1);
        v71 -= 16;
        v27 -= 16;
      }
      while (v27 != v18);
      v27 = v18;
    }
    operator delete(v27);
    v18 = v71;
  }
  else
  {
    *(_QWORD *)v27 = "kCBAdvDataLocalName";
    *((_QWORD *)v27 + 1) = v64;
    v66 = v27;
  }
  v27 = v66 + 16;
  if ((bytes[23] & 0x80000000) != 0)
    operator delete(*(void **)bytes);
LABEL_92:
  v72 = *(_QWORD *)(a3 + 8);
  if (*(_WORD *)(v72 + 40))
  {
    v73 = xpc_int64_create(*(unsigned __int16 *)(v72 + 40));
    v74 = v73;
    if (v27 >= v26)
    {
      v76 = (v27 - v18) >> 4;
      v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v77)
        v77 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v78 = 0xFFFFFFFFFFFFFFFLL;
      else
        v78 = v77;
      if (v78)
      {
        if (v78 >> 60)
          sub_10007ABD4();
        v79 = (char *)operator new(16 * v78);
      }
      else
      {
        v79 = 0;
      }
      v80 = &v79[16 * v76];
      v26 = &v79[16 * v78];
      *(_QWORD *)v80 = "kCBAdvDataAppearance";
      *((_QWORD *)v80 + 1) = v74;
      v75 = v80 + 16;
      if (v27 != v18)
      {
        do
        {
          *((_OWORD *)v80 - 1) = *((_OWORD *)v27 - 1);
          v80 -= 16;
          v27 -= 16;
        }
        while (v27 != v18);
        v27 = v18;
      }
      v18 = v80;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *(_QWORD *)v27 = "kCBAdvDataAppearance";
      *((_QWORD *)v27 + 1) = v73;
      v75 = v27 + 16;
    }
  }
  else
  {
    v75 = v27;
  }
  v81 = *(_QWORD *)(a3 + 8);
  if (*(_BYTE *)(v81 + 42))
  {
    v82 = xpc_int64_create(*(char *)(v81 + 43));
    v83 = v82;
    if (v75 >= v26)
    {
      v85 = (v75 - v18) >> 4;
      v86 = v85 + 1;
      if ((unint64_t)(v85 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v86)
        v86 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v87 = 0xFFFFFFFFFFFFFFFLL;
      else
        v87 = v86;
      if (v87)
      {
        if (v87 >> 60)
          sub_10007ABD4();
        v88 = (char *)operator new(16 * v87);
      }
      else
      {
        v88 = 0;
      }
      v89 = &v88[16 * v85];
      v26 = &v88[16 * v87];
      *(_QWORD *)v89 = "kCBAdvDataTxPowerLevel";
      *((_QWORD *)v89 + 1) = v83;
      v84 = v89 + 16;
      if (v75 != v18)
      {
        do
        {
          *((_OWORD *)v89 - 1) = *((_OWORD *)v75 - 1);
          v89 -= 16;
          v75 -= 16;
        }
        while (v75 != v18);
        v75 = v18;
      }
      v18 = v89;
      if (v75)
        operator delete(v75);
    }
    else
    {
      *(_QWORD *)v75 = "kCBAdvDataTxPowerLevel";
      *((_QWORD *)v75 + 1) = v82;
      v84 = v75 + 16;
    }
  }
  else
  {
    v84 = v75;
  }
  v90 = *(_QWORD **)(a3 + 8);
  if (v90[16])
  {
    v91 = xpc_array_create(0, 0);
    v92 = (unsigned __int8 *)v90[14];
    v93 = (unsigned __int8 *)(v90 + 15);
    if (v92 != (unsigned __int8 *)(v90 + 15))
    {
      do
      {
        bytes[0] = 0;
        if (v327 == (_QWORD **)sub_100565FBC(v326, (unsigned __int8 *)v327, v92 + 32))
        {
          *(_OWORD *)bytes = 0uLL;
          v94 = sub_1000689E4(v92 + 32, bytes);
          xpc_array_set_data(v91, 0xFFFFFFFFFFFFFFFFLL, bytes, v94);
          v95 = (const void *)sub_10003EB18((uint64_t)(v92 + 56));
          v96 = sub_10003F8C4((uint64_t)(v92 + 56));
          xpc_array_set_data(v91, 0xFFFFFFFFFFFFFFFFLL, v95, v96);
        }
        v97 = (unsigned __int8 *)*((_QWORD *)v92 + 1);
        if (v97)
        {
          do
          {
            v98 = v97;
            v97 = *(unsigned __int8 **)v97;
          }
          while (v97);
        }
        else
        {
          do
          {
            v98 = (unsigned __int8 *)*((_QWORD *)v92 + 2);
            v293 = *(_QWORD *)v98 == (_QWORD)v92;
            v92 = v98;
          }
          while (!v293);
        }
        v92 = v98;
      }
      while (v98 != v93);
    }
    if (xpc_array_get_count(v91))
    {
      if (v84 >= v26)
      {
        v107 = (v84 - v18) >> 4;
        v108 = v107 + 1;
        if ((unint64_t)(v107 + 1) >> 60)
          abort();
        if ((v26 - v18) >> 3 > v108)
          v108 = (v26 - v18) >> 3;
        if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
          v109 = 0xFFFFFFFFFFFFFFFLL;
        else
          v109 = v108;
        if (v109)
        {
          if (v109 >> 60)
            sub_10007ABD4();
          v110 = (char *)operator new(16 * v109);
        }
        else
        {
          v110 = 0;
        }
        v115 = &v110[16 * v107];
        v26 = &v110[16 * v109];
        *(_QWORD *)v115 = "kCBAdvDataServiceData";
        *((_QWORD *)v115 + 1) = v91;
        v99 = v115 + 16;
        if (v84 != v18)
        {
          do
          {
            *((_OWORD *)v115 - 1) = *((_OWORD *)v84 - 1);
            v115 -= 16;
            v84 -= 16;
          }
          while (v84 != v18);
          v84 = v18;
        }
        v18 = v115;
        if (v84)
          operator delete(v84);
      }
      else
      {
        *(_QWORD *)v84 = "kCBAdvDataServiceData";
        *((_QWORD *)v84 + 1) = v91;
        v99 = v84 + 16;
      }
      goto LABEL_145;
    }
    xpc_release(v91);
  }
  v99 = v84;
LABEL_145:
  v100 = sub_10003F8C4(*(_QWORD *)(a3 + 8) + 48);
  v101 = (_WORD *)sub_10003EB18(*(_QWORD *)(a3 + 8) + 48);
  v102 = sub_10003BE44();
  if ((((*(unsigned int (**)(uint64_t))(*(_QWORD *)v102 + 384))(v102) | a7) & 1) == 0
    && v100 >= 3
    && *v101 == 76)
  {
    v100 = 0;
  }
  if (_os_feature_enabled_impl("BluetoothFeatures", "Type18ToPOSH"))
  {
    v103 = *(_QWORD *)(a3 + 8);
    if (*(_DWORD *)(v103 + 312) || !v100)
      goto LABEL_281;
  }
  else
  {
    if (!v100)
      goto LABEL_281;
    v103 = *(_QWORD *)(a3 + 8);
  }
  if (*(_BYTE *)(v103 + 361))
  {
    v104 = xpc_int64_create(1);
    v105 = v104;
    if (v99 >= v26)
    {
      v111 = (v99 - v18) >> 4;
      v112 = v111 + 1;
      if ((unint64_t)(v111 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v112)
        v112 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v113 = 0xFFFFFFFFFFFFFFFLL;
      else
        v113 = v112;
      if (v113)
      {
        if (v113 >> 60)
          sub_10007ABD4();
        v114 = (char *)operator new(16 * v113);
      }
      else
      {
        v114 = 0;
      }
      v116 = &v114[16 * v111];
      v26 = &v114[16 * v113];
      *(_QWORD *)v116 = "kCBAdvDataProximityPairingStatusDecrypted";
      *((_QWORD *)v116 + 1) = v105;
      v106 = v116 + 16;
      if (v99 != v18)
      {
        do
        {
          *((_OWORD *)v116 - 1) = *((_OWORD *)v99 - 1);
          v116 -= 16;
          v99 -= 16;
        }
        while (v99 != v18);
        v99 = v18;
      }
      v18 = v116;
      if (v99)
        operator delete(v99);
    }
    else
    {
      *(_QWORD *)v99 = "kCBAdvDataProximityPairingStatusDecrypted";
      *((_QWORD *)v99 + 1) = v104;
      v106 = v99 + 16;
    }
  }
  else
  {
    v106 = v99;
  }
  if (*(_BYTE *)(*(_QWORD *)(a3 + 8) + 362))
  {
    v117 = xpc_int64_create(1);
    v118 = v117;
    if (v106 >= v26)
    {
      v120 = (v106 - v18) >> 4;
      v121 = v120 + 1;
      if ((unint64_t)(v120 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v121)
        v121 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v122 = 0xFFFFFFFFFFFFFFFLL;
      else
        v122 = v121;
      if (v122)
      {
        if (v122 >> 60)
          sub_10007ABD4();
        v123 = (char *)operator new(16 * v122);
      }
      else
      {
        v123 = 0;
      }
      v124 = &v123[16 * v120];
      v26 = &v123[16 * v122];
      *(_QWORD *)v124 = "kCBAdvDataAccessoryStatusDecrypted";
      *((_QWORD *)v124 + 1) = v118;
      v119 = v124 + 16;
      if (v106 != v18)
      {
        do
        {
          *((_OWORD *)v124 - 1) = *((_OWORD *)v106 - 1);
          v124 -= 16;
          v106 -= 16;
        }
        while (v106 != v18);
        v106 = v18;
      }
      v18 = v124;
      if (v106)
        operator delete(v106);
    }
    else
    {
      *(_QWORD *)v106 = "kCBAdvDataAccessoryStatusDecrypted";
      *((_QWORD *)v106 + 1) = v117;
      v119 = v106 + 16;
    }
  }
  else
  {
    v119 = v106;
  }
  if (!*(_QWORD *)(a5 + 16) || *v101 != 76)
  {
    v127 = xpc_data_create(v101, v100);
    v128 = v127;
    if (v119 >= v26)
    {
      v129 = (v119 - v18) >> 4;
      v130 = v129 + 1;
      if ((unint64_t)(v129 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v130)
        v130 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v131 = 0xFFFFFFFFFFFFFFFLL;
      else
        v131 = v130;
      if (v131)
      {
        if (v131 >> 60)
          sub_10007ABD4();
        v132 = (char *)operator new(16 * v131);
      }
      else
      {
        v132 = 0;
      }
      v141 = &v132[16 * v129];
      v26 = &v132[16 * v131];
      *(_QWORD *)v141 = "kCBAdvDataManufacturerData";
      *((_QWORD *)v141 + 1) = v128;
      v99 = v141 + 16;
      if (v119 != v18)
      {
        do
        {
          *((_OWORD *)v141 - 1) = *((_OWORD *)v119 - 1);
          v141 -= 16;
          v119 -= 16;
        }
        while (v119 != v18);
        v119 = v18;
      }
      v18 = v141;
      if (v119)
        operator delete(v119);
    }
    else
    {
      *(_QWORD *)v119 = "kCBAdvDataManufacturerData";
      *((_QWORD *)v119 + 1) = v127;
      v99 = v119 + 16;
    }
    goto LABEL_281;
  }
  v125 = objc_opt_new(NSMutableData);
  strcpy((char *)buf, "L");
  -[NSMutableData appendBytes:length:](v125, "appendBytes:length:", buf, 2);
  if (v100 < 3)
    goto LABEL_211;
  v318 = (char *)__p + 1;
  v133 = 2;
LABEL_224:
  v134 = *((unsigned __int8 *)v101 + v133);
  if (v134 != 1)
  {
    v137 = (v133 + 1);
    if (v100 <= v137)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_10064960C(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 200));
        sub_10070450C();
      }
      goto LABEL_258;
    }
    v136 = *((_BYTE *)v101 + v137) & 0x1F;
    if (v136 == 31)
    {
      v138 = (v133 + 2);
      if (v100 <= v138)
      {
        v148 = qword_100999860;
        if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          goto LABEL_258;
        sub_10064960C(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 200));
        if (v325 >= 0)
          v317 = __p;
        else
          v317 = (void **)__p[0];
        *(_DWORD *)bytes = 138412802;
        *(_QWORD *)&bytes[4] = v321;
        *(_WORD *)&bytes[12] = 2080;
        *(_QWORD *)&bytes[14] = v317;
        *(_WORD *)&bytes[22] = 2112;
        v331 = (size_t)v320;
        v145 = "createXpcAdvData error device:%@ address:%s agent:%@, not enough data for the extended data byte. Ignoring.";
        v146 = v148;
        v147 = 32;
        goto LABEL_632;
      }
      v136 = *((unsigned __int8 *)v101 + v138) + 31;
      v135 = 2;
    }
    else
    {
      v135 = 1;
    }
    if (v100 < (v136 + v135 + v133))
    {
      v143 = qword_100999860;
      if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        goto LABEL_258;
      sub_10064960C(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 200));
      v144 = __p;
      if (v325 < 0)
        v144 = (void **)__p[0];
      *(_DWORD *)bytes = 138413826;
      *(_QWORD *)&bytes[4] = v321;
      *(_WORD *)&bytes[12] = 2080;
      *(_QWORD *)&bytes[14] = v144;
      *(_WORD *)&bytes[22] = 2112;
      v331 = (size_t)v320;
      v332 = 1024;
      v333 = v133;
      v334 = 1024;
      v335 = v136;
      v336 = 1024;
      v337 = v135;
      v338 = 2048;
      v339 = v100;
      v145 = "createXpcAdvData error device:%@ address:%s agent:%@, ignoring packet since byte offset of %d + payload len"
             "gth of %d + length size of %d doesnt fit in dataLength %zu";
      v146 = v143;
      v147 = 60;
LABEL_632:
      _os_log_error_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_ERROR, v145, bytes, v147);
      if (v325 < 0)
        operator delete(__p[0]);
      goto LABEL_258;
    }
    v139 = *(uint64_t ***)(a5 + 8);
    if (!v139)
      goto LABEL_239;
    while (1)
    {
      v140 = *((unsigned __int8 *)v139 + 25);
      if (v134 >= v140)
      {
        if (v140 >= v134)
        {
          -[NSMutableData appendBytes:length:](v125, "appendBytes:length:", v318);
LABEL_227:
          LODWORD(v137) = v133 + 1;
LABEL_239:
          v133 = (v137 + v135 + v136);
          if (v100 <= v133)
          {
LABEL_211:
            v126 = 0;
            goto LABEL_259;
          }
          goto LABEL_224;
        }
        ++v139;
      }
      v139 = (uint64_t **)*v139;
      if (!v139)
        goto LABEL_239;
    }
  }
  if (v100 > (v133 + 16))
  {
    v135 = 0;
    v136 = 16;
    goto LABEL_227;
  }
  v142 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10064960C(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 200));
    v316 = v325 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)bytes = 138412802;
    *(_QWORD *)&bytes[4] = v321;
    *(_WORD *)&bytes[12] = 2080;
    *(_QWORD *)&bytes[14] = v316;
    *(_WORD *)&bytes[22] = 2112;
    v331 = (size_t)v320;
    _os_log_error_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_ERROR, "createXpcAdvData error device:%@ address:%s agent:%@, Invalid length", bytes, 0x20u);
    if (v325 < 0)
      operator delete(__p[0]);
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_1007044E0(__p, v318);
LABEL_258:
  v126 = 1;
LABEL_259:
  if (-[NSMutableData length](v125, "length", v318) < 3)
  {
    v99 = v119;
  }
  else
  {
    v149 = objc_retainAutorelease(v125);
    v150 = xpc_data_create(-[NSMutableData bytes](v149, "bytes"), -[NSMutableData length](v149, "length"));
    v151 = v150;
    if (v119 >= v26)
    {
      v152 = (v119 - v18) >> 4;
      v153 = v152 + 1;
      if ((unint64_t)(v152 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v153)
        v153 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v154 = 0xFFFFFFFFFFFFFFFLL;
      else
        v154 = v153;
      if (v154)
      {
        if (v154 >> 60)
          sub_10007ABD4();
        v155 = (char *)operator new(16 * v154);
      }
      else
      {
        v155 = 0;
      }
      v156 = &v155[16 * v152];
      v26 = &v155[16 * v154];
      *(_QWORD *)v156 = "kCBAdvDataManufacturerData";
      *((_QWORD *)v156 + 1) = v151;
      v99 = v156 + 16;
      if (v119 != v18)
      {
        do
        {
          *((_OWORD *)v156 - 1) = *((_OWORD *)v119 - 1);
          v156 -= 16;
          v119 -= 16;
        }
        while (v119 != v18);
        v119 = v18;
      }
      v18 = v156;
      if (v119)
        operator delete(v119);
    }
    else
    {
      *(_QWORD *)v119 = "kCBAdvDataManufacturerData";
      *((_QWORD *)v119 + 1) = v150;
      v99 = v119 + 16;
    }
    v157 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      v315 = -[NSMutableData length](v149, "length");
      *(_DWORD *)bytes = 138413058;
      *(_QWORD *)&bytes[4] = v149;
      *(_WORD *)&bytes[12] = 2048;
      *(_QWORD *)&bytes[14] = v315;
      *(_WORD *)&bytes[22] = 2048;
      v331 = v100;
      v332 = 1024;
      v333 = v126;
      _os_log_debug_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_DEBUG, "createXpcAdvData sending data:%@ length:%lu originalLength:%zu lenError:%d", bytes, 0x26u);
    }
  }

LABEL_281:
  if (sub_10003F8C4(*(_QWORD *)(a3 + 8) + 136) == 7)
  {
    v158 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v159 = sub_10003EB18(*(_QWORD *)(a3 + 8) + 136);
      *(_QWORD *)bytes = 0x704100202;
      *(_WORD *)&bytes[8] = 2096;
      *(_QWORD *)&bytes[10] = v159;
      _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_DEFAULT, "Create XPC Adv Data with LE BT Address data: %.7P", bytes, 0x12u);
    }
    v160 = (const void *)sub_10003EB18(*(_QWORD *)(a3 + 8) + 136);
    v161 = xpc_data_create(v160, 7uLL);
    v162 = v161;
    if (v99 >= v26)
    {
      v164 = (v99 - v18) >> 4;
      v165 = v164 + 1;
      if ((unint64_t)(v164 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v165)
        v165 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v166 = 0xFFFFFFFFFFFFFFFLL;
      else
        v166 = v165;
      if (v166)
      {
        if (v166 >> 60)
          sub_10007ABD4();
        v167 = (char *)operator new(16 * v166);
      }
      else
      {
        v167 = 0;
      }
      v168 = &v167[16 * v164];
      v26 = &v167[16 * v166];
      *(_QWORD *)v168 = "kCBAdvDataLeBluetoothDeviceAddress";
      *((_QWORD *)v168 + 1) = v162;
      v163 = v168 + 16;
      if (v99 != v18)
      {
        do
        {
          *((_OWORD *)v168 - 1) = *((_OWORD *)v99 - 1);
          v168 -= 16;
          v99 -= 16;
        }
        while (v99 != v18);
        v99 = v18;
      }
      v18 = v168;
      if (v99)
        operator delete(v99);
    }
    else
    {
      *(_QWORD *)v99 = "kCBAdvDataLeBluetoothDeviceAddress";
      *((_QWORD *)v99 + 1) = v161;
      v163 = v99 + 16;
    }
  }
  else
  {
    v163 = v99;
  }
  v169 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 208);
  if (v169)
  {
    v170 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
    {
      sub_10064960C(v169);
      if (bytes[23] >= 0)
        v171 = bytes;
      else
        v171 = *(_BYTE **)bytes;
      *(_DWORD *)buf = 136315138;
      v329 = v171;
      _os_log_impl((void *)&_mh_execute_header, v170, OS_LOG_TYPE_INFO, "Create XPC Adv Data with Peer TX Address data: %s", buf, 0xCu);
      if ((bytes[23] & 0x80000000) != 0)
        operator delete(*(void **)bytes);
      v169 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 208);
    }
    bytes[0] = BYTE5(v169);
    bytes[1] = BYTE4(v169);
    bytes[2] = BYTE3(v169);
    bytes[3] = BYTE2(v169);
    bytes[4] = BYTE1(v169);
    bytes[5] = v169;
    v172 = xpc_data_create(bytes, 6uLL);
    v173 = v172;
    if (v163 >= v26)
    {
      v175 = (v163 - v18) >> 4;
      v176 = v175 + 1;
      if ((unint64_t)(v175 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v176)
        v176 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v177 = 0xFFFFFFFFFFFFFFFLL;
      else
        v177 = v176;
      if (v177)
      {
        if (v177 >> 60)
          sub_10007ABD4();
        v178 = (char *)operator new(16 * v177);
      }
      else
      {
        v178 = 0;
      }
      v179 = &v178[16 * v175];
      v26 = &v178[16 * v177];
      *(_QWORD *)v179 = "kCBAdvDataPeerTxAddress";
      *((_QWORD *)v179 + 1) = v173;
      v174 = v179 + 16;
      if (v163 != v18)
      {
        do
        {
          *((_OWORD *)v179 - 1) = *((_OWORD *)v163 - 1);
          v179 -= 16;
          v163 -= 16;
        }
        while (v163 != v18);
        v163 = v18;
      }
      v18 = v179;
      if (v163)
        operator delete(v163);
    }
    else
    {
      *(_QWORD *)v163 = "kCBAdvDataPeerTxAddress";
      *((_QWORD *)v163 + 1) = v172;
      v174 = v163 + 16;
    }
    v180 = xpc_int64_create(BYTE6(v169));
    v181 = v180;
    if (v174 >= v26)
    {
      v182 = (v174 - v18) >> 4;
      v183 = v182 + 1;
      if ((unint64_t)(v182 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v183)
        v183 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v184 = 0xFFFFFFFFFFFFFFFLL;
      else
        v184 = v183;
      if (v184)
      {
        if (v184 >> 60)
          sub_10007ABD4();
        v185 = (char *)operator new(16 * v184);
      }
      else
      {
        v185 = 0;
      }
      v186 = &v185[16 * v182];
      v26 = &v185[16 * v184];
      *(_QWORD *)v186 = "kCBAdvDataPeerTxAddressType";
      *((_QWORD *)v186 + 1) = v181;
      v163 = v186 + 16;
      if (v174 == v18)
        goto LABEL_342;
      do
      {
        *((_OWORD *)v186 - 1) = *((_OWORD *)v174 - 1);
        v186 -= 16;
        v174 -= 16;
      }
      while (v174 != v18);
      if (v18)
LABEL_342:
        operator delete(v18);
      v18 = v186;
    }
    else
    {
      *(_QWORD *)v174 = "kCBAdvDataPeerTxAddressType";
      *((_QWORD *)v174 + 1) = v180;
      v163 = v174 + 16;
    }
  }
  if (v319 && (v187 = sub_10003F8C4(*(_QWORD *)(a3 + 8) + 224)) != 0)
  {
    v188 = (const void *)sub_10003EB18(*(_QWORD *)(a3 + 8) + 224);
    v189 = xpc_data_create(v188, v187);
    v190 = v189;
    if (v163 >= v26)
    {
      v200 = (v163 - v18) >> 4;
      v201 = v200 + 1;
      if ((unint64_t)(v200 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v201)
        v201 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v202 = 0xFFFFFFFFFFFFFFFLL;
      else
        v202 = v201;
      if (v202)
      {
        if (v202 >> 60)
          sub_10007ABD4();
        v203 = (char *)operator new(16 * v202);
      }
      else
      {
        v203 = 0;
      }
      v314 = &v203[16 * v200];
      v26 = &v203[16 * v202];
      *(_QWORD *)v314 = "kCBAdvDataTDSData";
      *((_QWORD *)v314 + 1) = v190;
      v191 = v314 + 16;
      if (v163 != v18)
      {
        do
        {
          *((_OWORD *)v314 - 1) = *((_OWORD *)v163 - 1);
          v314 -= 16;
          v163 -= 16;
        }
        while (v163 != v18);
        v163 = v18;
      }
      v18 = v314;
      if (v163)
        operator delete(v163);
    }
    else
    {
      *(_QWORD *)v163 = "kCBAdvDataTDSData";
      *((_QWORD *)v163 + 1) = v189;
      v191 = v163 + 16;
    }
  }
  else
  {
    v191 = v163;
  }
  v192 = *(_QWORD *)(a3 + 8);
  if (*(_BYTE *)(v192 + 218))
  {
    v193 = xpc_int64_create(*(unsigned __int8 *)(v192 + 218));
    v194 = v193;
    if (v191 >= v26)
    {
      v196 = (v191 - v18) >> 4;
      v197 = v196 + 1;
      if ((unint64_t)(v196 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v197)
        v197 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v198 = 0xFFFFFFFFFFFFFFFLL;
      else
        v198 = v197;
      if (v198)
      {
        if (v198 >> 60)
          sub_10007ABD4();
        v199 = (char *)operator new(16 * v198);
      }
      else
      {
        v199 = 0;
      }
      v204 = &v199[16 * v196];
      v26 = &v199[16 * v198];
      *(_QWORD *)v204 = "kCBAdvDataProximityLevel";
      *((_QWORD *)v204 + 1) = v194;
      v195 = v204 + 16;
      if (v191 != v18)
      {
        do
        {
          *((_OWORD *)v204 - 1) = *((_OWORD *)v191 - 1);
          v204 -= 16;
          v191 -= 16;
        }
        while (v191 != v18);
        v191 = v18;
      }
      v18 = v204;
      if (v191)
        operator delete(v191);
    }
    else
    {
      *(_QWORD *)v191 = "kCBAdvDataProximityLevel";
      *((_QWORD *)v191 + 1) = v193;
      v195 = v191 + 16;
    }
  }
  else
  {
    v195 = v191;
  }
  if (a7)
  {
    v205 = xpc_int64_create(*(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 219));
    v206 = v205;
    if (v195 >= v26)
    {
      v208 = (v195 - v18) >> 4;
      v209 = v208 + 1;
      if ((unint64_t)(v208 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v209)
        v209 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v210 = 0xFFFFFFFFFFFFFFFLL;
      else
        v210 = v209;
      if (v210)
      {
        if (v210 >> 60)
          sub_10007ABD4();
        v211 = (char *)operator new(16 * v210);
      }
      else
      {
        v211 = 0;
      }
      v212 = &v211[16 * v208];
      v26 = &v211[16 * v210];
      *(_QWORD *)v212 = "kCBAdvDataChannel";
      *((_QWORD *)v212 + 1) = v206;
      v207 = v212 + 16;
      if (v195 != v18)
      {
        do
        {
          *((_OWORD *)v212 - 1) = *((_OWORD *)v195 - 1);
          v212 -= 16;
          v195 -= 16;
        }
        while (v195 != v18);
        v195 = v18;
      }
      v18 = v212;
      if (v195)
        operator delete(v195);
    }
    else
    {
      *(_QWORD *)v195 = "kCBAdvDataChannel";
      *((_QWORD *)v195 + 1) = v205;
      v207 = v195 + 16;
    }
    v213 = xpc_BOOL_create(*(_BYTE *)(*(_QWORD *)(a3 + 8) + 220));
    v214 = v213;
    if (v207 >= v26)
    {
      v216 = (v207 - v18) >> 4;
      v217 = v216 + 1;
      if ((unint64_t)(v216 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v217)
        v217 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v218 = 0xFFFFFFFFFFFFFFFLL;
      else
        v218 = v217;
      if (v218)
      {
        if (v218 >> 60)
          sub_10007ABD4();
        v219 = (char *)operator new(16 * v218);
      }
      else
      {
        v219 = 0;
      }
      v220 = &v219[16 * v216];
      v26 = &v219[16 * v218];
      *(_QWORD *)v220 = "kCBAdvDataWlanRSSI";
      *((_QWORD *)v220 + 1) = v214;
      v215 = v220 + 16;
      if (v207 == v18)
        goto LABEL_410;
      do
      {
        *((_OWORD *)v220 - 1) = *((_OWORD *)v207 - 1);
        v220 -= 16;
        v207 -= 16;
      }
      while (v207 != v18);
      if (v18)
LABEL_410:
        operator delete(v18);
      v18 = v220;
    }
    else
    {
      *(_QWORD *)v207 = "kCBAdvDataWlanRSSI";
      *((_QWORD *)v207 + 1) = v213;
      v215 = v207 + 16;
    }
    v221 = xpc_BOOL_create(*(_BYTE *)(*(_QWORD *)(a3 + 8) + 217));
    v222 = v221;
    if (v215 >= v26)
    {
      v223 = (v215 - v18) >> 4;
      v224 = v223 + 1;
      if ((unint64_t)(v223 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v224)
        v224 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v225 = 0xFFFFFFFFFFFFFFFLL;
      else
        v225 = v224;
      if (v225)
      {
        if (v225 >> 60)
          sub_10007ABD4();
        v226 = (char *)operator new(16 * v225);
      }
      else
      {
        v226 = 0;
      }
      v227 = &v226[16 * v223];
      v26 = &v226[16 * v225];
      *(_QWORD *)v227 = "kCBAdvDataWSaturated";
      *((_QWORD *)v227 + 1) = v222;
      v195 = v227 + 16;
      if (v215 == v18)
        goto LABEL_427;
      do
      {
        *((_OWORD *)v227 - 1) = *((_OWORD *)v215 - 1);
        v227 -= 16;
        v215 -= 16;
      }
      while (v215 != v18);
      if (v18)
LABEL_427:
        operator delete(v18);
      v18 = v227;
    }
    else
    {
      *(_QWORD *)v215 = "kCBAdvDataWSaturated";
      *((_QWORD *)v215 + 1) = v221;
      v195 = v215 + 16;
    }
  }
  v228 = xpc_double_create(*(double *)(*(_QWORD *)(a3 + 8) + 240));
  v230 = v228;
  if (v195 >= v26)
  {
    v232 = (v195 - v18) >> 4;
    v233 = v232 + 1;
    if ((unint64_t)(v232 + 1) >> 60)
      abort();
    if ((v26 - v18) >> 3 > v233)
      v233 = (v26 - v18) >> 3;
    if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
      v234 = 0xFFFFFFFFFFFFFFFLL;
    else
      v234 = v233;
    if (v234)
    {
      if (v234 >> 60)
        sub_10007ABD4();
      v235 = (char *)operator new(16 * v234);
    }
    else
    {
      v235 = 0;
    }
    v236 = &v235[16 * v232];
    v26 = &v235[16 * v234];
    *(_QWORD *)v236 = "kCBAdvDataTimestamp";
    *((_QWORD *)v236 + 1) = v230;
    v231 = v236 + 16;
    if (v195 != v18)
    {
      do
      {
        v229 = *((_OWORD *)v195 - 1);
        *((_OWORD *)v236 - 1) = v229;
        v236 -= 16;
        v195 -= 16;
      }
      while (v195 != v18);
      v195 = v18;
    }
    v18 = v236;
    if (v195)
      operator delete(v195);
  }
  else
  {
    *(_QWORD *)v195 = "kCBAdvDataTimestamp";
    *((_QWORD *)v195 + 1) = v228;
    v231 = v195 + 16;
  }
  LOBYTE(v229) = *(_BYTE *)(*(_QWORD *)(a3 + 8) + 341);
  v237 = xpc_double_create((double)(unint64_t)v229);
  v239 = v237;
  if (v231 >= v26)
  {
    v241 = (v231 - v18) >> 4;
    v242 = v241 + 1;
    if ((unint64_t)(v241 + 1) >> 60)
      abort();
    if ((v26 - v18) >> 3 > v242)
      v242 = (v26 - v18) >> 3;
    if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
      v243 = 0xFFFFFFFFFFFFFFFLL;
    else
      v243 = v242;
    if (v243)
    {
      if (v243 >> 60)
        sub_10007ABD4();
      v244 = (char *)operator new(16 * v243);
    }
    else
    {
      v244 = 0;
    }
    v245 = &v244[16 * v241];
    v26 = &v244[16 * v243];
    *(_QWORD *)v245 = "kCBAdvDataRxPrimaryPHY";
    *((_QWORD *)v245 + 1) = v239;
    v240 = v245 + 16;
    if (v231 == v18)
      goto LABEL_461;
    do
    {
      v238 = *((_OWORD *)v231 - 1);
      *((_OWORD *)v245 - 1) = v238;
      v245 -= 16;
      v231 -= 16;
    }
    while (v231 != v18);
    if (v18)
LABEL_461:
      operator delete(v18);
    v18 = v245;
  }
  else
  {
    *(_QWORD *)v231 = "kCBAdvDataRxPrimaryPHY";
    *((_QWORD *)v231 + 1) = v237;
    v240 = v231 + 16;
  }
  LOBYTE(v238) = *(_BYTE *)(*(_QWORD *)(a3 + 8) + 342);
  v246 = xpc_double_create((double)(unint64_t)v238);
  v247 = v246;
  if (v240 >= v26)
  {
    v249 = (v240 - v18) >> 4;
    v250 = v249 + 1;
    if ((unint64_t)(v249 + 1) >> 60)
      abort();
    if ((v26 - v18) >> 3 > v250)
      v250 = (v26 - v18) >> 3;
    if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
      v251 = 0xFFFFFFFFFFFFFFFLL;
    else
      v251 = v250;
    if (v251)
    {
      if (v251 >> 60)
        sub_10007ABD4();
      v252 = (char *)operator new(16 * v251);
    }
    else
    {
      v252 = 0;
    }
    v253 = &v252[16 * v249];
    v26 = &v252[16 * v251];
    *(_QWORD *)v253 = "kCBAdvDataRxSecondaryPHY";
    *((_QWORD *)v253 + 1) = v247;
    v248 = v253 + 16;
    if (v240 == v18)
      goto LABEL_478;
    do
    {
      *((_OWORD *)v253 - 1) = *((_OWORD *)v240 - 1);
      v253 -= 16;
      v240 -= 16;
    }
    while (v240 != v18);
    if (v18)
LABEL_478:
      operator delete(v18);
    v18 = v253;
  }
  else
  {
    *(_QWORD *)v240 = "kCBAdvDataRxSecondaryPHY";
    *((_QWORD *)v240 + 1) = v246;
    v248 = v240 + 16;
  }
  if (a10)
  {
    v254 = xpc_int64_create(*(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 365));
    v255 = v254;
    if (v248 >= v26)
    {
      v257 = (v248 - v18) >> 4;
      v258 = v257 + 1;
      if ((unint64_t)(v257 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v258)
        v258 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v259 = 0xFFFFFFFFFFFFFFFLL;
      else
        v259 = v258;
      if (v259)
      {
        if (v259 >> 60)
          sub_10007ABD4();
        v260 = (char *)operator new(16 * v259);
      }
      else
      {
        v260 = 0;
      }
      v261 = &v260[16 * v257];
      v26 = &v260[16 * v259];
      *(_QWORD *)v261 = "kCBAdvDataScanSourceCore";
      *((_QWORD *)v261 + 1) = v255;
      v256 = v261 + 16;
      if (v248 == v18)
        goto LABEL_496;
      do
      {
        *((_OWORD *)v261 - 1) = *((_OWORD *)v248 - 1);
        v261 -= 16;
        v248 -= 16;
      }
      while (v248 != v18);
      if (v18)
LABEL_496:
        operator delete(v18);
      v18 = v261;
    }
    else
    {
      *(_QWORD *)v248 = "kCBAdvDataScanSourceCore";
      *((_QWORD *)v248 + 1) = v254;
      v256 = v248 + 16;
    }
    v262 = xpc_int64_create(*(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 366));
    v263 = v262;
    if (v256 >= v26)
    {
      v265 = (v256 - v18) >> 4;
      v266 = v265 + 1;
      if ((unint64_t)(v265 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v266)
        v266 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v267 = 0xFFFFFFFFFFFFFFFLL;
      else
        v267 = v266;
      if (v267)
      {
        if (v267 >> 60)
          sub_10007ABD4();
        v268 = (char *)operator new(16 * v267);
      }
      else
      {
        v268 = 0;
      }
      v269 = &v268[16 * v265];
      v26 = &v268[16 * v267];
      *(_QWORD *)v269 = "kCBAdvDataIsELNAOn";
      *((_QWORD *)v269 + 1) = v263;
      v264 = v269 + 16;
      if (v256 == v18)
        goto LABEL_513;
      do
      {
        *((_OWORD *)v269 - 1) = *((_OWORD *)v256 - 1);
        v269 -= 16;
        v256 -= 16;
      }
      while (v256 != v18);
      if (v18)
LABEL_513:
        operator delete(v18);
      v18 = v269;
    }
    else
    {
      *(_QWORD *)v256 = "kCBAdvDataIsELNAOn";
      *((_QWORD *)v256 + 1) = v262;
      v264 = v256 + 16;
    }
    v270 = xpc_int64_create(*(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 367));
    v271 = v270;
    if (v264 >= v26)
    {
      v273 = (v264 - v18) >> 4;
      v274 = v273 + 1;
      if ((unint64_t)(v273 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v274)
        v274 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v275 = 0xFFFFFFFFFFFFFFFLL;
      else
        v275 = v274;
      if (v275)
      {
        if (v275 >> 60)
          sub_10007ABD4();
        v276 = (char *)operator new(16 * v275);
      }
      else
      {
        v276 = 0;
      }
      v277 = &v276[16 * v273];
      v26 = &v276[16 * v275];
      *(_QWORD *)v277 = "kCBAdvDataIsPassup";
      *((_QWORD *)v277 + 1) = v271;
      v272 = v277 + 16;
      if (v264 == v18)
        goto LABEL_530;
      do
      {
        *((_OWORD *)v277 - 1) = *((_OWORD *)v264 - 1);
        v277 -= 16;
        v264 -= 16;
      }
      while (v264 != v18);
      if (v18)
LABEL_530:
        operator delete(v18);
      v18 = v277;
    }
    else
    {
      *(_QWORD *)v264 = "kCBAdvDataIsPassup";
      *((_QWORD *)v264 + 1) = v270;
      v272 = v264 + 16;
    }
    v278 = xpc_int64_create(*(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 368));
    v279 = v278;
    if (v272 >= v26)
    {
      v281 = (v272 - v18) >> 4;
      v282 = v281 + 1;
      if ((unint64_t)(v281 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v282)
        v282 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v283 = 0xFFFFFFFFFFFFFFFLL;
      else
        v283 = v282;
      if (v283)
      {
        if (v283 >> 60)
          sub_10007ABD4();
        v284 = (char *)operator new(16 * v283);
      }
      else
      {
        v284 = 0;
      }
      v285 = &v284[16 * v281];
      v26 = &v284[16 * v283];
      *(_QWORD *)v285 = "kCBAdvDataIsFromSCCompensation";
      *((_QWORD *)v285 + 1) = v279;
      v280 = v285 + 16;
      if (v272 == v18)
        goto LABEL_547;
      do
      {
        *((_OWORD *)v285 - 1) = *((_OWORD *)v272 - 1);
        v285 -= 16;
        v272 -= 16;
      }
      while (v272 != v18);
      if (v18)
LABEL_547:
        operator delete(v18);
      v18 = v285;
    }
    else
    {
      *(_QWORD *)v272 = "kCBAdvDataIsFromSCCompensation";
      *((_QWORD *)v272 + 1) = v278;
      v280 = v272 + 16;
    }
    v286 = xpc_int64_create(*(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 369));
    v287 = v286;
    if (v280 >= v26)
    {
      v288 = (v280 - v18) >> 4;
      v289 = v288 + 1;
      if ((unint64_t)(v288 + 1) >> 60)
        abort();
      if ((v26 - v18) >> 3 > v289)
        v289 = (v26 - v18) >> 3;
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
        v290 = 0xFFFFFFFFFFFFFFFLL;
      else
        v290 = v289;
      if (v290)
      {
        if (v290 >> 60)
          sub_10007ABD4();
        v291 = (char *)operator new(16 * v290);
      }
      else
      {
        v291 = 0;
      }
      v292 = &v291[16 * v288];
      v26 = &v291[16 * v290];
      *(_QWORD *)v292 = "kCBAdvDataIsCoexDenied";
      *((_QWORD *)v292 + 1) = v287;
      v248 = v292 + 16;
      if (v280 == v18)
        goto LABEL_564;
      do
      {
        *((_OWORD *)v292 - 1) = *((_OWORD *)v280 - 1);
        v292 -= 16;
        v280 -= 16;
      }
      while (v280 != v18);
      if (v18)
LABEL_564:
        operator delete(v18);
      v18 = v292;
    }
    else
    {
      *(_QWORD *)v280 = "kCBAdvDataIsCoexDenied";
      *((_QWORD *)v280 + 1) = v286;
      v248 = v280 + 16;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(a3 + 8) + 14))
    v293 = a11 == 0;
  else
    v293 = 1;
  if (v293)
  {
    v294 = v248;
    goto LABEL_591;
  }
  v295 = xpc_int64_create(1);
  v296 = v295;
  if (v248 < v26)
  {
    *(_QWORD *)v248 = "kCBAdvDataHostWakeEvent";
    *((_QWORD *)v248 + 1) = v295;
    v294 = v248 + 16;
    goto LABEL_591;
  }
  v297 = (v248 - v18) >> 4;
  v298 = v297 + 1;
  if ((unint64_t)(v297 + 1) >> 60)
    abort();
  if ((v26 - v18) >> 3 > v298)
    v298 = (v26 - v18) >> 3;
  if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
    v299 = 0xFFFFFFFFFFFFFFFLL;
  else
    v299 = v298;
  if (v299)
  {
    if (v299 >> 60)
      sub_10007ABD4();
    v300 = (char *)operator new(16 * v299);
  }
  else
  {
    v300 = 0;
  }
  v301 = &v300[16 * v297];
  v26 = &v300[16 * v299];
  *(_QWORD *)v301 = "kCBAdvDataHostWakeEvent";
  *((_QWORD *)v301 + 1) = v296;
  v294 = v301 + 16;
  if (v248 == v18)
  {
    v18 = v248;
  }
  else
  {
    do
    {
      *((_OWORD *)v301 - 1) = *((_OWORD *)v248 - 1);
      v301 -= 16;
      v248 -= 16;
    }
    while (v248 != v18);
    if (!v18)
      goto LABEL_590;
  }
  operator delete(v18);
LABEL_590:
  v18 = v301;
LABEL_591:
  if (!sub_10003F8C4(*(_QWORD *)(a3 + 8) + 448))
  {
    v306 = v294;
    goto LABEL_611;
  }
  v302 = (const void *)sub_10003EB18(*(_QWORD *)(a3 + 8) + 448);
  v303 = sub_10003F8C4(*(_QWORD *)(a3 + 8) + 448);
  v304 = xpc_data_create(v302, v303);
  v305 = v304;
  if (v294 < v26)
  {
    *(_QWORD *)v294 = "kCBCoordinatedSetRSIAdv";
    *((_QWORD *)v294 + 1) = v304;
    v306 = v294 + 16;
    goto LABEL_611;
  }
  v307 = (v294 - v18) >> 4;
  v308 = v307 + 1;
  if ((unint64_t)(v307 + 1) >> 60)
    abort();
  if ((v26 - v18) >> 3 > v308)
    v308 = (v26 - v18) >> 3;
  if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0)
    v308 = 0xFFFFFFFFFFFFFFFLL;
  if (v308)
  {
    if (v308 >> 60)
      sub_10007ABD4();
    v309 = (char *)operator new(16 * v308);
  }
  else
  {
    v309 = 0;
  }
  v310 = &v309[16 * v307];
  *(_QWORD *)v310 = "kCBCoordinatedSetRSIAdv";
  *((_QWORD *)v310 + 1) = v305;
  v306 = v310 + 16;
  if (v294 == v18)
  {
    v18 = v294;
  }
  else
  {
    do
    {
      *((_OWORD *)v310 - 1) = *((_OWORD *)v294 - 1);
      v310 -= 16;
      v294 -= 16;
    }
    while (v294 != v18);
    if (!v18)
      goto LABEL_610;
  }
  operator delete(v18);
LABEL_610:
  v18 = v310;
LABEL_611:
  v311 = xpc_dictionary_create(0, 0, 0);
  if (v18 != v306)
  {
    v312 = (xpc_object_t *)v18;
    do
    {
      xpc_dictionary_set_value(v311, (const char *)*v312, v312[1]);
      xpc_release(v312[1]);
      v312 += 2;
    }
    while (v312 != (xpc_object_t *)v306);
  }
  sub_10001A82C((uint64_t)&v326, v327[0]);
  if (v18)
    operator delete(v18);

  return v311;
}

void sub_10001F140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;

  sub_10001A82C((uint64_t)&a18, a19);
  if (v29)
    operator delete(v29);

  _Unwind_Resume(a1);
}

uint64_t sub_10001F2AC(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = sub_100091A80(v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_100091A80(v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

void sub_10001F338(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  void *__p[2];
  uint64_t v14;
  _QWORD v15[2];
  unint64_t v16;
  void **v17;

  v16 = a2;
  v6 = a3;
  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 8);
  v7 = objc_autoreleasePoolPush();
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v8, "registerApplication:pid:", v6, a4);

  objc_autoreleasePoolPop(v7);
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  v9 = objc_retainAutorelease(v6);
  sub_100091AE8(__p, (char *)objc_msgSend(v9, "UTF8String"));
  v10 = (uint64_t **)(a1 + 96);
  v17 = __p;
  v11 = sub_10001F4C0((uint64_t **)(a1 + 96), (const void **)__p, (uint64_t)&unk_100740F58, (__int128 **)&v17);
  sub_10000F7A0((uint64_t **)v11 + 7, &v16, (uint64_t *)&v16);
  v17 = __p;
  v12 = sub_10001F4C0(v10, (const void **)__p, (uint64_t)&unk_100740F58, (__int128 **)&v17);
  if (v12 != v11)
    sub_1002D3554((uint64_t **)v12 + 7, (_QWORD *)v11[7], v11 + 8);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  sub_100034234((uint64_t)v15);

}

void sub_10001F478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  void *v16;

  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_10001F4C0(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)sub_10001F574((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_100067E7C((uint64_t)a1, a4, v10);
    sub_100004078(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1002D3510((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_10001F574(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!sub_100091A80(v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_100091A80(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void sub_10001F610(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(unsigned __int8 **)(v1 + 48);
  if (v2 != (unsigned __int8 *)(v1 + 56))
  {
    do
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093F4F8);
      sub_100030BD0((uint64_t)off_1009778C0, v2 + 25);
      v4 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(unsigned __int8 **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (unsigned __int8 *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != (unsigned __int8 *)(v1 + 56));
    v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  }
  v8 = *(_QWORD **)(v1 + 56);
  v7 = (_QWORD *)(v1 + 56);
  sub_10001A82C((uint64_t)(v7 - 1), v8);
  *(v7 - 1) = v7;
  *v7 = 0;
  v7[1] = 0;
}

uint64_t sub_10001F6F4(uint64_t a1, __int128 *a2, int a3, uint64_t a4)
{
  _OWORD *v8;
  __int128 v9;
  _QWORD *v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  const char *v28;
  size_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;
  NSObject *v34;
  void **v35;
  uint64_t v36;
  void *__p;
  char v39;
  __int128 v40;
  _OWORD v41[4];
  void *v42[2];
  __int128 v43;
  __int128 v44;
  _BYTE v45[144];
  uint64_t v46;
  _QWORD v47[2];
  uint8_t buf[4];
  void **v49;

  v47[0] = 0;
  v47[1] = 0;
  sub_10003415C((uint64_t)v47, a1 + 40);
  if (!a3)
  {
    v8 = (_OWORD *)(a1 + 380);
    if (*(_BYTE *)(a1 + 380))
      goto LABEL_12;
    goto LABEL_9;
  }
  if (!*(_BYTE *)a2 && *(_BYTE *)(a1 + 380))
  {
    *(CFAbsoluteTime *)(a1 + 496) = CFAbsoluteTimeGetCurrent();
    ++*(_DWORD *)(a1 + 504);
  }
  v8 = (_OWORD *)(a1 + 380);
  if (!*(_BYTE *)(a1 + 380) && *(_BYTE *)a2)
  {
LABEL_9:
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100932B98);
    sub_1006662FC((uint64_t)off_1009778C0);
  }
LABEL_12:
  v9 = *a2;
  *(_OWORD *)((char *)v8 + 10) = *(__int128 *)((char *)a2 + 10);
  *v8 = v9;
  *(_BYTE *)(a1 + 406) = a3;
  if (a1 + 408 != a4)
    sub_10001FB68((uint64_t **)(a1 + 408), *(unsigned int **)a4, (unsigned int *)(a4 + 8));
  v46 = 0;
  v44 = 0u;
  memset(v45, 0, sizeof(v45));
  *(_OWORD *)v42 = 0u;
  v43 = 0u;
  memset(v41, 0, sizeof(v41));
  v40 = 0u;
  sub_1002613AC((uint64_t)&v40);
  v10 = sub_1002614D8(v41, (uint64_t)"Discovery scans ", 16);
  if (a3)
    v11 = "enabled ";
  else
    v11 = "disbled ";
  sub_1002614D8(v10, (uint64_t)v11, 8);
  if (a3)
  {
    v12 = *(_BYTE *)v8 ? "passive" : "active";
    v13 = *(_BYTE *)v8 ? 7 : 6;
    sub_1002614D8(v41, (uint64_t)v12, v13);
    v14 = sub_1002614D8(v41, (uint64_t)" with ", 6);
    v15 = *(_BYTE *)(a1 + 383) ? "No " : "";
    v16 = *(_BYTE *)(a1 + 383) ? 3 : 0;
    v17 = sub_1002614D8(v14, (uint64_t)v15, v16);
    sub_1002614D8(v17, (uint64_t)"duplicates ", 11);
    LOWORD(v18) = *(_WORD *)(a1 + 386);
    v19 = (_QWORD *)std::ostream::operator<<((double)v18 * 0.625);
    sub_1002614D8(v19, (uint64_t)"/", 1);
    LOWORD(v20) = *(_WORD *)(a1 + 388);
    v21 = (_QWORD *)std::ostream::operator<<((double)v20 * 0.625);
    sub_1002614D8(v21, (uint64_t)"/", 1);
    LOWORD(v22) = *(_WORD *)(a1 + 392);
    v23 = (_QWORD *)std::ostream::operator<<((double)v22 * 0.625);
    sub_1002614D8(v23, (uint64_t)"/", 1);
    LOWORD(v24) = *(_WORD *)(a1 + 390);
    v25 = (_QWORD *)std::ostream::operator<<((double)v24 * 0.625);
    sub_1002614D8(v25, (uint64_t)"//", 2);
    LOWORD(v26) = *(_WORD *)(a1 + 384);
    std::ostream::operator<<((double)v26 * 0.625);
    sub_1002614D8(v41, (uint64_t)" usecases:", 10);
    v27 = *(_QWORD **)(a1 + 408);
    if (v27 != (_QWORD *)(a1 + 416))
    {
      do
      {
        v28 = sub_1000351FC(*((_DWORD *)v27 + 7));
        v29 = strlen(v28);
        v30 = sub_1002614D8(v41, (uint64_t)v28, v29);
        sub_1002614D8(v30, (uint64_t)",", 1);
        v31 = (_QWORD *)v27[1];
        if (v31)
        {
          do
          {
            v32 = v31;
            v31 = (_QWORD *)*v31;
          }
          while (v31);
        }
        else
        {
          do
          {
            v32 = (_QWORD *)v27[2];
            v33 = *v32 == (_QWORD)v27;
            v27 = v32;
          }
          while (!v33);
        }
        v27 = v32;
      }
      while (v32 != (_QWORD *)(a1 + 416));
    }
  }
  v34 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str((char *)v41 + 8);
    v35 = v39 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    v49 = v35;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    if (v39 < 0)
      operator delete(__p);
  }
  *(_QWORD *)((char *)&v41[-1]
  *(_QWORD *)&v41[0] = v36;
  if (SHIBYTE(v43) < 0)
    operator delete(v42[1]);
  std::streambuf::~streambuf((char *)v41 + 8);
  std::ios::~ios(v45);
  return sub_100034234((uint64_t)v47);
}

void sub_10001FB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_1006CC5C8((uint64_t)va);
  sub_100034234(v5 - 96);
  _Unwind_Resume(a1);
}

uint64_t **sub_10001FB68(uint64_t **result, unsigned int *a2, unsigned int *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_10001FD34((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          sub_10001FCC8(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_10001FD34((uint64_t)v15);
          v10 = (unsigned int *)*((_QWORD *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = *(unsigned int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (unsigned int *)*((_QWORD *)v9 + 2);
              v11 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_1002C6244((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_100068500(v5, a2 + 7);
      v12 = (unsigned int *)*((_QWORD *)a2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(unsigned int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (unsigned int *)*((_QWORD *)a2 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_10001FCB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002C6244((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001FCC8(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  sub_100004078(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_QWORD *sub_10001FD34(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

void sub_10001FD88(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_10001FE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_10001FE44(id a1, BluetoothDaemonListener *a2)
{
  (*((void (**)(BluetoothDaemonListener *))a2->var0 + 3))(a2);
}

void sub_10001FE58(id a1, BluetoothDaemonListener *a2)
{
  (*((void (**)(BluetoothDaemonListener *))a2->var0 + 1))(a2);
}

_QWORD *sub_10001FE6C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    sub_1002A3F78(a1, v5 >> 3);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

uint64_t sub_1000206C4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_10093F6C0;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    sub_100060EA8(v2);
    operator delete();
  }
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  sub_100067F60(a1 + 184, *(_QWORD **)(a1 + 192));
  sub_10001A82C(a1 + 152, *(_QWORD **)(a1 + 160));
  sub_10002074C((_QWORD *)(a1 + 128));
  sub_100024010(a1 + 104, *(_QWORD **)(a1 + 112));
  return a1;
}

_QWORD *sub_10002074C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t sub_1000207AC()
{
  unsigned int v0;
  BOOL v1;
  timespec v3;

  pthread_setname_np("StackLoop");
  if (byte_10097FB48)
  {
    v3.tv_sec = 0;
    v3.tv_nsec = 0;
    do
    {
      pthread_mutex_lock(&stru_10097FB88);
      v0 = dword_10097FB50;
      if (dword_10097FB50)
        v1 = byte_10097FBE0 == 0;
      else
        v1 = 0;
      if (v1)
      {
        do
        {
          v3.tv_sec = v0 / 0x3E8uLL;
          v3.tv_nsec = 1000000 * (v0 % 0x3E8);
          if (pthread_cond_timedwait_relative_np(&stru_10097FB58, &stru_10097FB88, &v3) == 60)
            break;
          v0 = dword_10097FB50;
          if (!dword_10097FB50)
            break;
        }
        while (!byte_10097FBE0);
      }
      dword_10097FB50 = -1;
      pthread_mutex_unlock(&stru_10097FB88);
      sub_1000477B8();
      sub_10004A810();
      sub_1000478A0();
    }
    while (byte_10097FB48);
  }
  return 0;
}

void sub_1000208B4(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = objc_autoreleasePoolPush();
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v4, "updateApplicationState:", a2);

  objc_autoreleasePoolPop(v3);
}

void sub_100020904(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100020914(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void **v6;
  void *v7;
  id v8;
  void *__p[2];
  char v11;

  v4 = objc_autoreleasePoolPush();
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  sub_100020A60(a1, a2, __p);
  if (v11 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
  v8 = objc_msgSend(v5, "applicationStateForProcess:", v7);

  if (v11 < 0)
    operator delete(__p[0]);

  objc_autoreleasePoolPop(v4);
  return v8;
}

void sub_1000209D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_100020A60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  _QWORD v15[2];

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 8);
  v6 = *(_QWORD **)(a1 + 96);
  if (v6 == (_QWORD *)(a1 + 104))
  {
LABEL_16:
    sub_100091AE8(a3, "");
  }
  else
  {
    while (1)
    {
      v7 = (_QWORD *)v6[7];
      if (v7 != v6 + 8)
        break;
LABEL_10:
      v11 = (_QWORD *)v6[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v6[2];
          v10 = *v12 == (_QWORD)v6;
          v6 = v12;
        }
        while (!v10);
      }
      v6 = v12;
      if (v12 == (_QWORD *)(a1 + 104))
        goto LABEL_16;
    }
    while (v7[4] != a2)
    {
      v8 = (_QWORD *)v7[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v7[2];
          v10 = *v9 == (_QWORD)v7;
          v7 = v9;
        }
        while (!v10);
      }
      v7 = v9;
      if (v9 == v6 + 8)
        goto LABEL_10;
    }
    if (*((char *)v6 + 55) < 0)
    {
      sub_10003430C(a3, (void *)v6[4], v6[5]);
    }
    else
    {
      v13 = *((_OWORD *)v6 + 2);
      a3[2] = v6[6];
      *(_OWORD *)a3 = v13;
    }
  }
  return sub_100034234((uint64_t)v15);
}

void sub_100020B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_100020C54(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  _QWORD v22[2];

  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, (uint64_t)(a1 + 12));
  if (!a2)
    goto LABEL_12;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100930720);
  v4 = sub_100021398(qword_100977B48, a2);
  if (v4)
  {
    v5 = (unint64_t *)a1[20];
    if (v5 == (unint64_t *)a1[21])
    {
LABEL_14:
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_100930720);
      v6 = sub_1000221B8(qword_100977B48, v4);
      if (v6)
      {
        v8 = a1[22];
        v9 = (unint64_t *)a1[21];
        if ((unint64_t)v9 >= v8)
        {
          v11 = a1[20];
          v12 = ((uint64_t)v9 - v11) >> 3;
          if ((unint64_t)(v12 + 1) >> 61)
            abort();
          v13 = v8 - v11;
          v14 = v13 >> 2;
          if (v13 >> 2 <= (unint64_t)(v12 + 1))
            v14 = v12 + 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
            v16 = (char *)sub_10007ABA0((uint64_t)(a1 + 22), v15);
          else
            v16 = 0;
          v17 = (unint64_t *)&v16[8 * v12];
          v18 = &v16[8 * v15];
          *v17 = v6;
          v10 = v17 + 1;
          v20 = (char *)a1[20];
          v19 = (char *)a1[21];
          if (v19 != v20)
          {
            do
            {
              v21 = *((_QWORD *)v19 - 1);
              v19 -= 8;
              *--v17 = v21;
            }
            while (v19 != v20);
            v19 = (char *)a1[20];
          }
          a1[20] = v17;
          a1[21] = v10;
          a1[22] = v18;
          if (v19)
            operator delete(v19);
        }
        else
        {
          *v9 = v6;
          v10 = v9 + 1;
        }
        a1[21] = v10;
      }
    }
    else
    {
      while (1)
      {
        v6 = *v5;
        if (*v5 == a2)
          break;
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_100930720);
        if (sub_100021398(qword_100977B48, v6) == v4)
          goto LABEL_13;
        if (++v5 == (unint64_t *)a1[21])
          goto LABEL_14;
      }
      v6 = a2;
    }
  }
  else
  {
LABEL_12:
    v6 = 0;
  }
LABEL_13:
  sub_100034234((uint64_t)v22);
  return v6;
}

void sub_100020E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100020E7C(_QWORD *a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  int64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t *v18;
  __objc2_class *v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *i;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[2];
  void *__p;
  unint64_t *v37;
  unint64_t *v38;
  _QWORD v39[2];

  v39[0] = 0;
  v39[1] = 0;
  sub_10003415C((uint64_t)v39, (uint64_t)(a1 + 12));
  __p = 0;
  v37 = 0;
  v38 = 0;
  v4 = (unint64_t *)a1[20];
  while (v4 != (unint64_t *)a1[21])
  {
    v5 = *v4;
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100930720);
    if (sub_100021398(qword_100977B48, v5) == a2)
    {
      v6 = (unint64_t *)a1[21];
      v7 = (char *)v6 - (char *)(v4 + 1);
      if (v6 != v4 + 1)
        memmove(v4, v4 + 1, (char *)v6 - (char *)(v4 + 1));
      a1[21] = (char *)v4 + v7;
      v8 = v37;
      if (v37 >= v38)
      {
        v10 = ((char *)v37 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          abort();
        v11 = ((char *)v38 - (_BYTE *)__p) >> 2;
        if (v11 <= v10 + 1)
          v11 = v10 + 1;
        if ((unint64_t)((char *)v38 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v13 = (char *)sub_10007ABA0((uint64_t)&v38, v12);
        else
          v13 = 0;
        v14 = (unint64_t *)&v13[8 * v10];
        *v14 = v5;
        v9 = v14 + 1;
        v16 = (char *)__p;
        v15 = (char *)v37;
        if (v37 != __p)
        {
          do
          {
            v17 = *((_QWORD *)v15 - 1);
            v15 -= 8;
            *--v14 = v17;
          }
          while (v15 != v16);
          v15 = (char *)__p;
        }
        __p = v14;
        v37 = v9;
        v38 = (unint64_t *)&v13[8 * v12];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v37 = v5;
        v9 = v8 + 1;
      }
      v37 = v9;
    }
    else
    {
      ++v4;
    }
  }
  sub_100034264((uint64_t)v39);
  v35[0] = 0;
  v35[1] = 0;
  sub_10003415C((uint64_t)v35, (uint64_t)(a1 + 23));
  v18 = (unint64_t *)__p;
  v19 = &OBJC_METACLASS___BTVCLinkAdvertiseSet;
  if (__p != v37)
  {
    v20 = 0;
    v21 = a1 + 80;
    v22 = a1 + 83;
    do
    {
      v23 = *v18;
      for (i = (_QWORD *)a1[32]; i != a1 + 31; i = (_QWORD *)*v25)
      {
        v33 = (_QWORD *)i[2];
        if (*v33 == v23)
        {
          sub_100476838((uint64_t)(a1 + 31), &v33);
          v26 = v33;
          if (v33)
          {
            v33[2] = 0;
            free((void *)v26[1]);
            v26[1] = 0;
            v26[4] = 0;
            free((void *)v26[3]);
            v26[3] = 0;
            operator delete();
          }
          v20 = 1;
          v25 = a1 + 32;
        }
        else
        {
          v25 = i + 1;
        }
      }
      v33 = 0;
      v34 = 0;
      sub_10003415C((uint64_t)&v33, (uint64_t)(a1 + 72));
      v27 = a1 + 80;
      if ((_QWORD *)a1[81] != v21)
      {
        v27 = (_QWORD *)a1[81];
        while (v27[2] != v23)
        {
          v27 = (_QWORD *)v27[1];
          if (v27 == v21)
          {
            v27 = a1 + 80;
            break;
          }
        }
      }
      sub_100034264((uint64_t)&v33);
      if (v27 != v21)
        sub_100476904(a1, v23, 0);
      sub_100034188((uint64_t)&v33);
      v28 = a1 + 83;
      if ((_QWORD *)a1[84] != v22)
      {
        v28 = (_QWORD *)a1[84];
        while (v28[2] != v23)
        {
          v28 = (_QWORD *)v28[1];
          if (v28 == v22)
          {
            v28 = a1 + 83;
            break;
          }
        }
      }
      sub_100034264((uint64_t)&v33);
      if (v28 != v22)
        sub_100476B34(a1, v23, 0);
      sub_100034234((uint64_t)&v33);
      ++v18;
    }
    while (v18 != v37);
    v19 = &OBJC_METACLASS___BTVCLinkAdvertiseSet;
    if ((v20 & 1) != 0)
    {
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_100930740);
      sub_1004A5144((uint64_t)off_100977A50);
      if (qword_100977A78 != -1)
        dispatch_once(&qword_100977A78, &stru_100930760);
      sub_10049BBBC();
    }
  }
  sub_100034264((uint64_t)v35);
  v29 = (unint64_t *)__p;
  if (__p != v37)
  {
    do
    {
      v30 = *v29;
      v33 = 0;
      v34 = 0;
      sub_10003415C((uint64_t)&v33, (uint64_t)(a1 + 52));
      v31 = sub_10047B940(a1[60], a1[61], v30);
      sub_10047B8FC((uint64_t)(a1 + 60), v31, a1[61]);
      sub_100034264((uint64_t)&v33);
      sub_100476D64((uint64_t)a1, v30);
      sub_100476D64((uint64_t)a1, v30);
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_100930720);
      sub_10050ABD0((uint64_t)v19[72].superclass, v30);
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_100930720);
      sub_10050AC6C((uint64_t)v19[72].superclass, v30);
      sub_100034234((uint64_t)&v33);
      ++v29;
    }
    while (v29 != v37);
  }
  sub_100034234((uint64_t)v35);
  if (__p)
  {
    v37 = (unint64_t *)__p;
    operator delete(__p);
  }
  return sub_100034234((uint64_t)v39);
}

void sub_100021338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100021398(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 40);
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006FE258();
    goto LABEL_16;
  }
  v6 = *(_QWORD **)(a1 + 152);
  v5 = (_QWORD *)(a1 + 152);
  v4 = v6;
  if (!v6)
    goto LABEL_16;
  v7 = v5;
  do
  {
    v8 = v4[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == v5 || v7[4] > a2)
  {
LABEL_16:
    v11 = 0;
    goto LABEL_17;
  }
  v11 = v7[5];
LABEL_17:
  sub_100034234((uint64_t)v13);
  return v11;
}

void sub_100021708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_100021770(uint64_t a1)
{
  void *p_p;
  void *v2;
  void *__p;
  char v5;

  sub_1000217F4(a1);
  if (v5 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p));
  if (v5 < 0)
    operator delete(__p);
  return v2;
}

void sub_1000217D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000217F4(uint64_t a1)
{
  const char *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned __int8 v22;
  _OWORD v23[4];
  void *__p[2];
  __int128 v25;
  __int128 v26;
  _OWORD v27[9];
  uint64_t v28;

  v28 = 0;
  v26 = 0u;
  memset(v27, 0, sizeof(v27));
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  memset(v23, 0, sizeof(v23));
  sub_100272ADC((uint64_t)v23);
  if ((a1 & 0xFF000000000000) != 0)
    v2 = "Random ";
  else
    v2 = "Public ";
  v3 = sub_1002614D8(v23, (uint64_t)v2, 7);
  *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 8) |= 0x4000u;
  v22 = 48;
  v4 = sub_1003CDCD4(v3, &v22);
  v5 = *v4;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 24) = 2;
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFFB5 | 8;
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = sub_1002614D8(v6, (uint64_t)":", 1);
  v8 = *v7;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 24) = 2;
  *(_DWORD *)((char *)v7 + *(_QWORD *)(v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(v8 - 24) + 8) & 0xFFFFFFB5 | 8;
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = sub_1002614D8(v9, (uint64_t)":", 1);
  v11 = *v10;
  *(uint64_t *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 24) = 2;
  *(_DWORD *)((char *)v10 + *(_QWORD *)(v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(v11 - 24) + 8) & 0xFFFFFFB5 | 8;
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = sub_1002614D8(v12, (uint64_t)":", 1);
  v14 = *v13;
  *(uint64_t *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 24) = 2;
  *(_DWORD *)((char *)v13 + *(_QWORD *)(v14 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(v14 - 24) + 8) & 0xFFFFFFB5 | 8;
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = sub_1002614D8(v15, (uint64_t)":", 1);
  v17 = *v16;
  *(uint64_t *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 24) = 2;
  *(_DWORD *)((char *)v16 + *(_QWORD *)(v17 - 24) + 8) = *(_DWORD *)((_BYTE *)v16 + *(_QWORD *)(v17 - 24) + 8) & 0xFFFFFFB5 | 8;
  v18 = (_QWORD *)std::ostream::operator<<();
  v19 = sub_1002614D8(v18, (uint64_t)":", 1);
  v20 = *v19;
  *(uint64_t *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 24) = 2;
  *(_DWORD *)((char *)v19 + *(_QWORD *)(v20 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(v20 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str((char *)v23 + 8);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v23 + 8);
  return std::ios::~ios(v27);
}

void sub_100021AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100272CFC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100021AE4(uint64_t a1)
{
  _QWORD *v2;
  const char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;
  __int128 v19;
  _OWORD v20[4];
  void *v21[2];
  __int128 v22;
  __int128 v23;
  _BYTE v24[144];
  uint64_t v25;

  v25 = 0;
  v23 = 0u;
  memset(v24, 0, sizeof(v24));
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  memset(v20, 0, sizeof(v20));
  v19 = 0u;
  sub_1002613AC((uint64_t)&v19);
  v2 = sub_1002614D8(v20, (uint64_t)"WiFi State: powerState-", 23);
  if (*(_BYTE *)a1)
    v3 = "on";
  else
    v3 = "off";
  if (*(_BYTE *)a1)
    v4 = 2;
  else
    v4 = 3;
  v5 = sub_1002614D8(v2, (uint64_t)v3, v4);
  v6 = sub_1002614D8(v5, (uint64_t)", associated-", 13);
  v7 = *(int *)(a1 + 4);
  if (v7 > 3)
    v8 = "";
  else
    v8 = off_10091FDF8[v7];
  sub_100091AE8(__p, v8);
  if ((v18 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v10 = v18;
  else
    v10 = (uint64_t)__p[1];
  v11 = sub_1002614D8(v6, (uint64_t)v9, v10);
  v12 = sub_1002614D8(v11, (uint64_t)", 2.4GHz critical-", 18);
  if (*(_BYTE *)(a1 + 8))
    v13 = "Yes";
  else
    v13 = "No";
  if (*(_BYTE *)(a1 + 8))
    v14 = 3;
  else
    v14 = 2;
  sub_1002614D8(v12, (uint64_t)v13, v14);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  std::stringbuf::str((char *)v20 + 8);
  *(_QWORD *)((char *)&v20[-1]
  *(_QWORD *)&v20[0] = v15;
  if (SHIBYTE(v22) < 0)
    operator delete(v21[1]);
  std::streambuf::~streambuf((char *)v20 + 8);
  return std::ios::~ios(v24);
}

void sub_100021CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_1006CC5C8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_100021CE0(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  xpc_object_t value;
  void *v7;
  __int16 uint64;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  NSObject *v12;
  int v13;
  const char *v14;
  int v15;
  unsigned int v16;
  const char *v17;
  void *p_p;
  int v19;
  const char *v20;
  int v21;
  int v22;
  NSObject *v23;
  int v24;
  _QWORD v25[5];
  void *__p;
  char v27;
  _BYTE buf[18];
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  v4 = qword_1009997F0;
  if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "UpdateWifiState WCMWiFiState %@", buf, 0xCu);
  }
  if (*(_BYTE *)(a1 + 280))
  {
    v5 = qword_1009997F0;
    if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ignoring real wifi signals", buf, 2u);
    }
  }
  else
  {
    value = xpc_dictionary_get_value(a2, "kMessageArgs");
    v7 = value;
    if (value)
    {
      uint64 = xpc_dictionary_get_uint64(value, "kWCMBTWiFiState_Priority");
      v9 = xpc_dictionary_get_uint64(v7, "kWCMWiFiState_Bitmap");
      v10 = xpc_dictionary_get_uint64(v7, "kWCMWiFiState_Band");
      v11 = xpc_dictionary_get_uint64(v7, "kWCMWiFiState_DesiredBtDc");
      *(_WORD *)(a1 + 162) = v10;
      *(_WORD *)(a1 + 160) = uint64;
      *(_WORD *)(a1 + 164) = v11;
      *(_WORD *)(a1 + 166) = v9;
      if (!*(_BYTE *)(a1 + 154))
      {
        *(_DWORD *)(a1 + 156) = 0;
        if (uint64 == 2 && (v9 & 0x41) != 0 && *(_DWORD *)(a1 + 456) == 1 && *(_BYTE *)(a1 + 452))
        {
          switch(v11)
          {
            case 1:
              if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEBUG))
                sub_10071BE90();
              v15 = 0;
              break;
            case 2:
              v15 = 2;
              if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEBUG))
                sub_10071BDE0();
              break;
            case 3:
              if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEBUG))
                sub_10071BE0C();
              goto LABEL_43;
            case 4:
              if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEBUG))
                sub_10071BE38();
              v15 = 5;
              break;
            case 5:
              if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEBUG))
                sub_10071BE64();
              v15 = 6;
              break;
            default:
              if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEBUG))
                sub_10071BDB4();
LABEL_43:
              v15 = 3;
              break;
          }
          *(_DWORD *)(a1 + 156) = v15;
        }
      }
      v12 = qword_1009997F0;
      if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(unsigned __int16 *)(a1 + 164);
        if (*(_WORD *)(a1 + 164) > 5u)
          v14 = "NA";
        else
          v14 = off_100940F38[(char)v13];
        v16 = *(unsigned __int8 *)(a1 + 160);
        v17 = "NA";
        if (v16 <= 2)
          v17 = off_100940FB8[(char)v16];
        sub_10001CBB4(*(unsigned __int16 *)(a1 + 166));
        if (v27 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        v19 = *(unsigned __int8 *)(a1 + 166);
        v20 = "kWCMWiFiStateBand5G";
        v21 = *(unsigned __int8 *)(a1 + 162);
        if (v21 != 2)
          v20 = "NA";
        v22 = *(_DWORD *)(a1 + 156);
        if (v21 == 1)
          v20 = "kWCMWiFiStateBand2_4G";
        *(_DWORD *)buf = 136317186;
        *(_QWORD *)&buf[4] = v14;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v13;
        v29 = 1024;
        v30 = v16;
        v31 = 2080;
        v32 = v17;
        v33 = 2080;
        v34 = p_p;
        v35 = 1024;
        v36 = v19;
        v37 = 2080;
        v38 = v20;
        v39 = 1024;
        v40 = v21;
        v41 = 1024;
        v42 = v22;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "UpdateWifiState UCMWifiCoexInterval:%s(%d) priority:%d(%s) bitmap:[%s](0x%x) band:%s(%d) UCMWifiCoexInterval:%d", buf, 0x48u);
        if (v27 < 0)
          operator delete(__p);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_ERROR))
    {
      sub_10071BD88();
    }
    v23 = qword_1009997F0;
    if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *(unsigned __int16 *)(a1 + 164);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "UpdateWifiState done, UCMBTConnectionScanDutyCycle:%d", buf, 8u);
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    sub_10003415C((uint64_t)buf, a1 + 80);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1000664E0;
    v25[3] = &unk_100940D48;
    v25[4] = a1;
    sub_10001AB14((os_unfair_lock_s *)(a1 + 480), v25);
    sub_100034234((uint64_t)buf);
  }
}

void sub_10002219C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1000221B8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  NSObject *v18;
  void **v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v26;
  NSObject *v28;
  uint64_t v29;
  void *__p[2];
  char v31;
  unint64_t v32;
  _QWORD v33[2];
  unint64_t v34;
  uint8_t buf[4];
  const char *v36;

  v33[1] = 0;
  v34 = a2;
  v33[0] = 0;
  sub_10003415C((uint64_t)v33, a1 + 40);
  v4 = sub_1000229D8((_QWORD *)a1, a2);
  if (a2)
  {
    v5 = v4;
    v6 = (uint64_t **)(a1 + 168);
    __p[0] = &v34;
    v7 = sub_10002252C((uint64_t **)(a1 + 168), &v34, (uint64_t)&unk_100740F58, (uint64_t **)__p)[5];
    if (v7)
    {
      v32 = 0;
      v8 = (_QWORD *)(a1 + 152);
      v9 = v7;
      while (++v9 < (v7 | 0xFFFF))
      {
        v10 = (_QWORD *)*v8;
        if (*v8)
        {
          v11 = (_QWORD *)(a1 + 152);
          do
          {
            v12 = v10[4];
            v13 = v12 >= v9;
            if (v12 >= v9)
              v14 = v10;
            else
              v14 = v10 + 1;
            if (v13)
              v11 = v10;
            v10 = (_QWORD *)*v14;
          }
          while (*v14);
          if (v11 != v8 && v9 >= v11[4])
            continue;
        }
        v32 = v9;
        v15 = v34;
        __p[0] = &v32;
        sub_10002252C((uint64_t **)(a1 + 144), &v32, (uint64_t)&unk_100740F58, (uint64_t **)__p)[5] = v15;
        v16 = v32;
        __p[0] = &v34;
        sub_10002252C(v6, &v34, (uint64_t)&unk_100740F58, (uint64_t **)__p)[5] = v16;
LABEL_43:
        v17 = v32;
        goto LABEL_44;
      }
      v18 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
      {
        if (v5)
        {
          sub_1000340DC(v5, (uint64_t)__p);
          if (v31 >= 0)
            v19 = __p;
          else
            v19 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v36 = (const char *)v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Handles for session %{public}s wrapped!", buf, 0xCu);
          if (v31 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v36 = "(NULL)";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Handles for session %{public}s wrapped!", buf, 0xCu);
        }
      }
      v20 = v34;
      v21 = v34;
      while (++v21 < v7)
      {
        v22 = (_QWORD *)*v8;
        if (*v8)
        {
          v23 = (_QWORD *)(a1 + 152);
          do
          {
            v24 = v22[4];
            v25 = v24 >= v21;
            if (v24 >= v21)
              v26 = v22;
            else
              v26 = v22 + 1;
            if (v25)
              v23 = v22;
            v22 = (_QWORD *)*v26;
          }
          while (*v26);
          if (v23 != v8 && v21 >= v23[4])
            continue;
        }
        v32 = v21;
LABEL_42:
        __p[0] = &v32;
        sub_10002252C((uint64_t **)(a1 + 144), &v32, (uint64_t)&unk_100740F58, (uint64_t **)__p)[5] = v20;
        goto LABEL_43;
      }
      if (v32)
        goto LABEL_42;
      v28 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        if (v5)
        {
          sub_1000340DC(v5, (uint64_t)__p);
          sub_1006FE210();
        }
        else
        {
          sub_1006FE1D0((uint64_t)buf, v28, v29);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      sub_1006FE178();
    }
  }
  v17 = 0;
LABEL_44:
  sub_100034234((uint64_t)v33);
  return v17;
}

void sub_100022500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10002252C(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    sub_100004078(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t sub_1000225E8(uint64_t a1, unint64_t a2, int a3, int a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  const char *v19;
  NSObject *v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  void *__p[2];
  char v29;
  _QWORD v30[2];
  unint64_t v31;
  _BYTE buf[12];
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  void **v38;

  v30[1] = 0;
  v31 = a2;
  v30[0] = 0;
  sub_10003415C((uint64_t)v30, a1 + 40);
  if (a2)
  {
    if (*(_QWORD *)(a1 + 112) == a2)
    {
      v22 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006FE284(a2, v22);
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 200);
      v9 = (_QWORD *)(a1 + 200);
      v8 = v10;
      if (!v10)
        goto LABEL_14;
      v11 = v9;
      do
      {
        v12 = v8[4];
        v13 = v12 >= a2;
        if (v12 >= a2)
          v14 = v8;
        else
          v14 = v8 + 1;
        if (v13)
          v11 = v8;
        v8 = (_QWORD *)*v14;
      }
      while (*v14);
      if (v11 == v9 || v11[4] > a2)
LABEL_14:
        v11 = v9;
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_100935048);
      v15 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
      v16 = v15;
      if (v11 == v9)
      {
        *(_QWORD *)buf = &v31;
        v23 = sub_10002252C((uint64_t **)v9 - 1, &v31, (uint64_t)&unk_100740F58, (uint64_t **)buf);
        *((_DWORD *)v23 + 10) = a3;
        *((_DWORD *)v23 + 11) = a4;
        v24 = qword_1009997E8;
        if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
          return sub_100034234((uint64_t)v30);
        v25 = v31;
        sub_1000340DC(v16, (uint64_t)__p);
        if (v29 >= 0)
          v26 = __p;
        else
          v26 = (void **)__p[0];
        *(_DWORD *)buf = 134218754;
        *(_QWORD *)&buf[4] = v25;
        v33 = 1024;
        v34 = a3;
        v35 = 1024;
        v36 = a4;
        v37 = 2082;
        v38 = v26;
        v19 = "Adding handle-identifier mapping for handle : %p \t with pid \"%d\", pidVersion \"%d\" for session %{public}s";
        v20 = v24;
        v21 = OS_LOG_TYPE_INFO;
      }
      else
      {
        if (!v15)
          return sub_100034234((uint64_t)v30);
        v17 = qword_1009997E8;
        if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          return sub_100034234((uint64_t)v30);
        sub_1000340DC(v16, (uint64_t)__p);
        if (v29 >= 0)
          v18 = __p;
        else
          v18 = (void **)__p[0];
        *(_DWORD *)buf = 134218754;
        *(_QWORD *)&buf[4] = a2;
        v33 = 1024;
        v34 = a3;
        v35 = 1024;
        v36 = a4;
        v37 = 2082;
        v38 = v18;
        v19 = "Handle identifier entry already exists. Don't add handle : %p \t with pid \"%d\", pidVersion \"%d\" for se"
              "ssion %{public}s";
        v20 = v17;
        v21 = OS_LOG_TYPE_DEFAULT;
      }
      _os_log_impl((void *)&_mh_execute_header, v20, v21, v19, buf, 0x22u);
      if (v29 < 0)
        operator delete(__p[0]);
    }
  }
  return sub_100034234((uint64_t)v30);
}

void sub_10002288C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000228B4(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_100022948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_100022970(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t))
{
  uint64_t v3;

  v3 = sub_100022AE4(*(_QWORD *)(a1 + 32));
  return (**a2)(a2, v3);
}

uint64_t sub_1000229A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_100022AE4(*(_QWORD *)(a1 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, v3);
}

uint64_t sub_1000229D8(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, (uint64_t)(a1 + 5));
  if (!a2)
    goto LABEL_23;
  v4 = (_QWORD *)a1[19];
  if (!v4)
    goto LABEL_23;
  v5 = a1 + 19;
  do
  {
    v6 = v4[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v7)
      v5 = v4;
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == a1 + 19 || v5[4] > a2 || (v9 = (_QWORD *)a1[15], v10 = a1 + 16, v9 == a1 + 16))
  {
LABEL_23:
    v12 = 0;
  }
  else
  {
    v11 = v5[5];
    while (1)
    {
      v12 = v9[7];
      if (v12)
      {
        if (sub_100022AE4(v9[7]) == v11)
          break;
      }
      v13 = (_QWORD *)v9[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v9[2];
          v15 = *v14 == (_QWORD)v9;
          v9 = v14;
        }
        while (!v15);
      }
      v9 = v14;
      if (v14 == v10)
        goto LABEL_23;
    }
  }
  sub_100034234((uint64_t)v17);
  return v12;
}

void sub_100022AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100022AE4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(_QWORD *)(a1 + 64);
  sub_100034234((uint64_t)v4);
  return v2;
}

void sub_100022B28(uint64_t a1, void *a2)
{
  xpc_object_t value;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  size_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  const char *v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  BOOL v44;
  int v45;
  int v46;
  void *v47;
  id v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  void **v54;
  NSObject *v55;
  void *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  char v61;
  NSObject *v62;
  void *v63;
  NSObject *v64;
  void *v65;
  NSObject *v66;
  void *v67;
  int v68;
  NSObject *v69;
  void *v70;
  uint64_t v71;
  void *v72;
  NSObject *v73;
  uint64_t v74;
  char v75;
  NSObject *v76;
  NSObject *v77;
  uint64_t v78;
  unsigned __int8 v79;
  NSObject *v80;
  int v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  void *v87;
  id v88;
  int v89;
  void *v90;
  void *v91;
  void *v92;
  _QWORD v93[5];
  unsigned __int8 v94;
  _QWORD v95[4];
  id v96;
  id v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  int v106;
  char v107;
  char v108;
  _QWORD v109[8];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _BYTE v113[144];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD v125[3];
  char v126;
  _QWORD v127[3];
  int v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  const __CFString *v132;
  void *v133;
  uint8_t buf[32];
  int v135;

  v130 = 0;
  v131 = 0;
  v129 = 0;
  v127[0] = 0;
  v127[1] = v127;
  v127[2] = 0x2020000000;
  v128 = 0;
  v125[0] = 0;
  v125[1] = v125;
  v125[2] = 0x2020000000;
  v126 = 0;
  v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", CFSTR("com.apple.identityservicesd"), CFSTR("com.apple.nanoregistryd"), CFSTR("nanoregistryd"), CFSTR("com.apple.magicswitchd"), CFSTR("com.apple.sharingd"), CFSTR("com.apple.BTReporter"), CFSTR("com.apple.coreBluetoothUtil"), CFSTR("com.apple.terminusd"), 0));
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  v5 = sub_1000239F0(value, "kCBMsgArgName");
  v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  if (sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgType") || !v6)
  {
LABEL_104:
    if (!*(_QWORD *)(a1 + 128))
      sub_10007069C(a1, 2u);
    goto LABEL_106;
  }
  v89 = v131;
  v124 = 0;
  v123 = 0;
  v122 = 0;
  v121 = 0;
  v120 = 1;
  v119 = 0;
  v118 = 0;
  v13 = sub_1000239F0(v129, "kCBInitOptionRestoreIdentifier");
  v91 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v117 = 0;
  v116 = 0;
  v115 = 0;
  v14 = sub_1000239F0(v129, "kCBCentralManagerOptionInitLeProfilesManagerWithOptions");
  v90 = (void *)objc_claimAutoreleasedReturnValue(v14);
  sub_100023B7C(v129, 0, v15, v16, v17, v18, v19, v20, (uint64_t)"kCBInitOptionShowPowerAlert");
  v21 = sub_1000167EC(*(_QWORD *)(a1 + 16));
  v22 = objc_claimAutoreleasedReturnValue(v21);
  v23 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v22;

  v88 = *(id *)(a1 + 96);
  v114 = 0;
  v112 = 0u;
  memset(v113, 0, sizeof(v113));
  v110 = 0u;
  v111 = 0u;
  memset(v109, 0, sizeof(v109));
  sub_100272ADC((uint64_t)v109);
  v6 = objc_retainAutorelease(v88);
  v24 = (const char *)objc_msgSend(v6, "UTF8String");
  v25 = strlen(v24);
  sub_1002614D8(v109, (uint64_t)v24, v25);
  v26 = sub_1000239F0(v129, "kCBMsgArgManagerCustomName");
  v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  v28 = v27;
  if (v27 && objc_msgSend(v27, "length"))
  {
    if ((unint64_t)objc_msgSend(v28, "length") > 0xF)
      v29 = 16;
    else
      v29 = (uint64_t)objc_msgSend(v28, "length");
    v30 = objc_msgSend(v28, "rangeOfComposedCharacterSequencesForRange:", 0, v29);
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "substringWithRange:", v30, v31));

    v33 = sub_1002614D8(v109, (uint64_t)"(", 1);
    v28 = objc_retainAutorelease(v32);
    v34 = (const char *)objc_msgSend(v28, "UTF8String");
    v35 = strlen(v34);
    v36 = sub_1002614D8(v33, (uint64_t)v34, v35);
    sub_1002614D8(v36, (uint64_t)")", 1);
  }
  v37 = sub_1002614D8(v109, (uint64_t)"-", 1);
  if (v89)
    v38 = "peripheral-";
  else
    v38 = "central-";
  if (v89)
    v39 = 11;
  else
    v39 = 8;
  sub_1002614D8(v37, (uint64_t)v38, v39);
  if (!v131 && v116)
  {
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[LSBundleRecord bundleRecordWithBundleIdentifier:allowPlaceholder:error:](LSBundleRecord, "bundleRecordWithBundleIdentifier:allowPlaceholder:error:", *(_QWORD *)(a1 + 96), 1, 0));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "infoDictionary"));
    v42 = objc_msgSend(v41, "objectForKey:ofClass:", CFSTR("NSBluetoothForMediaDeviceDiscoveryOnly"), objc_opt_class(NSArray));
    v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    v44 = v43 == 0;

    if (v44)
    {
      if (*(_BYTE *)(a1 + 86))
      {
        sub_1002614D8(v109, (uint64_t)"DAMDDExtension", 14);
        *(_BYTE *)(a1 + 176) = 1;
      }
    }
    else
    {
      sub_1002614D8(v109, (uint64_t)"DAlimitedMedia-", 15);
      *(_BYTE *)(a1 + 175) = 1;
    }
    v45 = _os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit");
    if (v115)
      v46 = v45;
    else
      v46 = 0;
    if (v46 == 1)
    {
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "infoDictionary"));
      v48 = objc_msgSend(v47, "objectForKey:ofClass:", CFSTR("NSAccessorySetupKitSupports"), objc_opt_class(NSArray));
      v49 = (void *)objc_claimAutoreleasedReturnValue(v48);

      v50 = objc_opt_class(NSArray);
      if ((objc_opt_isKindOfClass(v49, v50) & 1) != 0
        && objc_msgSend(v49, "containsObject:", CFSTR("Bluetooth")))
      {
        sub_1002614D8(v109, (uint64_t)"DAPerAccessory-", 15);
        *(_BYTE *)(a1 + 177) = 1;
      }
      else if (*(_BYTE *)(a1 + 87))
      {
        sub_1002614D8(v109, (uint64_t)"DAPerAccessoryExtension", 23);
        *(_BYTE *)(a1 + 178) = 1;
      }

    }
  }
  v51 = (_QWORD *)std::ostream::operator<<(v109, *(unsigned int *)(a1 + 40));
  v52 = sub_1002614D8(v51, (uint64_t)"-", 1);
  std::ostream::operator<<(v52, *(_QWORD *)(a1 + 8));
  std::stringbuf::str(&v109[1]);
  v53 = (char *)(a1 + 79);
  v54 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v54);
  *(_OWORD *)v54 = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)&buf[16];
  v55 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v56 = (void *)(a1 + 56);
    if (*v53 < 0)
      v56 = *v54;
    v57 = *(_DWORD *)(a1 + 80);
    v58 = *(unsigned __int8 *)(a1 + 185);
    v59 = *(unsigned __int8 *)(a1 + 175);
    v60 = *(unsigned __int8 *)(a1 + 177);
    *(_DWORD *)buf = 136447234;
    *(_QWORD *)&buf[4] = v56;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v57;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v58;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v59;
    *(_WORD *)&buf[30] = 1024;
    v135 = v60;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Received XPC check-in from session \"%{public}s\" fAccessLevel %d fProgrammaticPairing %d fDeviceAccessForMediaSession %d fDeviceAccessPerAccessorySession %d", buf, 0x24u);
  }
  v61 = *(_BYTE *)(a1 + 89);
  if (v61)
  {
    v62 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v63 = (void *)(a1 + 56);
      if (*v53 < 0)
        v63 = *v54;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v63;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v91;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "On-Demand-Install app XPC started: %{public}s, RI %@", buf, 0x16u);
    }

    v91 = 0;
  }
  if (v122)
  {
    if (*(int *)(a1 + 80) >= 1)
    {
      *(_BYTE *)(a1 + 172) = 1;
      v64 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        v65 = (void *)(a1 + 56);
        if (*v53 < 0)
          v65 = *v54;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v65;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "Incoming ObjectDiscovery data  will be forwarded to session \"%{public}s\"", buf, 0xCu);
      }
    }
  }
  if (v123)
  {
    *(_BYTE *)(a1 + 168) = 1;
    v66 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v67 = (void *)(a1 + 56);
      if (*v53 < 0)
        v67 = *v54;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v67;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "System events will be forwarded to session \"%{public}s\"", buf, 0xCu);
    }
  }
  v68 = *(_DWORD *)(a1 + 80);
  if (v68 < 1 || !v121)
  {
LABEL_61:
    if (v68 < 1)
      goto LABEL_64;
    goto LABEL_62;
  }
  *(_BYTE *)(a1 + 169) = 1;
  v69 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v70 = (void *)(a1 + 56);
    if (*v53 < 0)
      v70 = *v54;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v70;
    _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "Application activity events will be sent to session \"%{public}s\"", buf, 0xCu);
    v68 = *(_DWORD *)(a1 + 80);
    goto LABEL_61;
  }
LABEL_62:
  if (objc_msgSend(v90, "length"))
  {
    v71 = sub_10034FCFC();
    v132 = CFSTR("collectForTypes");
    v133 = v90;
    v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v133, &v132, 1));
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v71 + 184))(v71, v72);

  }
LABEL_64:
  if (*(int *)(a1 + 80) >= 1)
  {
    v73 = qword_100999860;
LABEL_67:
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v119;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "Setting fNeedsRestrictedState operation: %lld", buf, 0xCu);
    }
    *(_BYTE *)(a1 + 186) = v119 != 0;
    goto LABEL_70;
  }
  v118 = 0;
  v117 = 0;
  v73 = qword_100999860;
  if (*(_BYTE *)(a1 + 185))
    goto LABEL_67;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v87 = (void *)(a1 + 56);
    if (*v53 < 0)
      v87 = *v54;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v87;
    _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "Access level is less than kXPCAccessLevelSystem for session \"%{public}s\". Restricted state operation not allowed", buf, 0xCu);
  }
  *(_BYTE *)(a1 + 186) = 0;
LABEL_70:
  v74 = (uint64_t)objc_msgSend(v92, "containsObject:", v6);
  v75 = v74;
  if ((_DWORD)v74)
  {
    v76 = qword_100999860;
    v74 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v74)
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "Override restricted state operation for bundle: %@", buf, 0xCu);
    }
  }
  if ((sub_10000BFEC(v74, *(void **)(a1 + 96)) & 1) != 0 || *(int *)(a1 + 80) >= 1)
  {
    *(_BYTE *)(a1 + 88) = 1;
    v77 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v78 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v78;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Warning: Overriding TCC for bundleIdentifier %@", buf, 0xCu);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 194) = sub_1002C3B60(v129, "kCBManagerPrivacySupported");
  }
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  v79 = sub_100007FAC((uint64_t)off_100978168, *(void **)(a1 + 96));
  if (*(_QWORD *)(a1 + 128))
  {
    v80 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007002D8((char *)(a1 + 79), (_QWORD *)(a1 + 56), v80);
  }
  else
  {
    v81 = v130;
    if (v130 == 20161219)
    {
      memset(buf, 0, sizeof(buf));
      xpc_connection_get_audit_token(*(_QWORD *)(a1 + 16), buf);
      v82 = sub_1000419F4();
      v95[0] = _NSConcreteStackBlock;
      v95[1] = 3221225472;
      v95[2] = sub_10000944C;
      v95[3] = &unk_100936F20;
      v107 = v61;
      v100 = a1;
      v101 = v124;
      v108 = v75;
      v102 = v118;
      v103 = v117;
      v104 = *(_OWORD *)buf;
      v105 = *(_OWORD *)&buf[16];
      v96 = v6;
      v106 = v89;
      v97 = v91;
      v98 = v127;
      v99 = v125;
      sub_100023D84(v82, v95);

    }
    else
    {
      v83 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070025C(v81, v83, v84);
    }
  }
  if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
  {
    objc_storeStrong((id *)(a1 + 224), *(id *)(a1 + 96));
    if (*(_QWORD *)(a1 + 128))
    {
      if ((*(_BYTE *)(a1 + 176) || v115) && !sub_100552C38(a1))
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_1007001FC();
        v85 = 0;
        goto LABEL_101;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_1007001D0();
    }
  }
  if (*(int *)(a1 + 80) <= 0 && !*(_BYTE *)(a1 + 185))
  {
    v86 = sub_1000419F4();
    v93[0] = _NSConcreteStackBlock;
    v93[1] = 3221225472;
    v93[2] = sub_1005530A8;
    v93[3] = &unk_100918888;
    v93[4] = a1;
    v94 = v79;
    sub_100023D84(v86, v93);
  }
  v85 = 1;
LABEL_101:

  if (SHIBYTE(v111) < 0)
    operator delete(*((void **)&v110 + 1));
  std::streambuf::~streambuf(&v109[1]);
  std::ios::~ios(v113);

  if ((v85 & 1) != 0)
    goto LABEL_104;
LABEL_106:

  _Block_object_dispose(v125, 8);
  _Block_object_dispose(v127, 8);
}

void sub_1000238E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,void *a47,void *a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,void *a61)
{
  void *v61;
  uint64_t v62;

  sub_100272CFC((uint64_t)&STACK[0x200]);
  _Block_object_dispose((const void *)(v62 - 248), 8);
  _Block_object_dispose((const void *)(v62 - 216), 8);
  _Unwind_Resume(a1);
}

id sub_1000239F0(void *a1, const char *a2)
{
  xpc_object_t value;
  void *v3;
  NSString *v4;

  value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    v3 = value;
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_string)
    {
      v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", xpc_string_get_string_ptr(v3));
      value = (xpc_object_t)objc_claimAutoreleasedReturnValue(v4);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006DBA48();
      value = 0;
    }
  }
  return value;
}

uint64_t sub_100023A7C(void *a1, uint64_t a2)
{
  NSObject *v4;
  const void *bytes_ptr;
  size_t length;
  uint64_t (**v8)();
  unsigned int *v9;

  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_data)
  {
    bytes_ptr = xpc_data_get_bytes_ptr(a1);
    length = xpc_data_get_length(a1);
    sub_10003994C(&v8, bytes_ptr, length);
    sub_100041698(a2, (uint64_t)&v8);
    v8 = &off_100918258;
    if (v9)
      sub_100056AAC(v9);
    return 0;
  }
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_null)
    return 0;
  v4 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_1006DB8F8(a1, v4);
  return 3;
}

void sub_100023B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10)
    sub_100056AAC(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100023B7C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  const char **v12;
  const char *v13;
  xpc_object_t value;
  _QWORD *v15;
  uint64_t (*v16)(xpc_object_t, _QWORD);
  NSObject *v17;
  uint64_t *v18;
  uint64_t (**v19)(_QWORD, _QWORD);
  uint8_t buf[4];
  const char *v21;

  if (!a1 || xpc_get_type(a1) != (xpc_type_t)&_xpc_type_dictionary)
    return 3;
  v18 = &a9;
  while (1)
  {
    v12 = (const char **)v18;
    v19 = (uint64_t (**)(_QWORD, _QWORD))(v18 + 1);
    v13 = *v12;
    if (!*v12)
      return 0;
    value = xpc_dictionary_get_value(a1, *v12);
    v15 = v19 + 1;
    v16 = (uint64_t (*)(xpc_object_t, _QWORD))*v19;
    v18 = (uint64_t *)(v19 + 2);
    if (!value)
      break;
    result = v16(value, *v15);
LABEL_10:
    if ((_DWORD)result)
      return result;
  }
  if (!a2)
  {
    result = 0;
    goto LABEL_10;
  }
  v17 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    v21 = v13;
    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "No XPC object for key: %{public}s", buf, 0xCu);
  }
  return 3;
}

uint64_t sub_100023CBC(void *a1, int64_t *a2)
{
  NSObject *v4;
  uint64_t result;
  int64_t value;

  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_int64)
  {
    value = xpc_int64_get_value(a1);
    result = 0;
    *a2 = value;
  }
  else
  {
    v4 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1006DB888(a1, v4);
    return 3;
  }
  return result;
}

unint64_t sub_100023D38(uint64_t a1)
{
  int v2;

  if ((*(_DWORD *)(a1 + 712) - 20) < 7)
    return 1;
  v2 = sub_10005F864();
  if ((v2 - 154) <= 0x3C)
    return (0x1E7FE1E1E0000003uLL >> (v2 + 102)) & 1;
  else
    return 0;
}

void sub_100023D84(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2;
  if (qword_100992BA8 != -1)
    dispatch_once(&qword_100992BA8, &stru_100930248);
  if (qword_100992BA0 == a1)
  {
    v4 = qword_100999970;
    if (os_log_type_enabled((os_log_t)qword_100999970, OS_LOG_TYPE_FAULT))
      sub_1006F4550(v4, v5, v6);
  }
  dispatch_sync(*(dispatch_queue_t *)(a1 + 8), v3);

}

id sub_100023E20(void *a1, const char *a2)
{
  xpc_object_t value;
  id v3;
  void *v4;
  size_t i;
  xpc_object_t v6;
  void *v7;
  NSString *v8;
  void *v9;

  value = xpc_dictionary_get_value(a1, a2);
  v3 = value;
  if (value)
  {
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      for (i = 0; ; ++i)
      {
        if (i >= xpc_array_get_count(v3))
        {
          v3 = v4;
          goto LABEL_16;
        }
        v6 = xpc_array_get_value(v3, i);
        v7 = v6;
        if (!v6)
          break;
        if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_string)
          break;
        v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", xpc_string_get_string_ptr(v7));
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        if (!v9)
          break;
        objc_msgSend(v4, "addObject:", v9);

      }
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006DBB74();
      v3 = 0;
LABEL_16:

    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006DBBA0();
      v3 = 0;
    }
  }
  return v3;
}

void sub_100023F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100023F94(void *a1, _DWORD *a2)
{
  NSObject *v4;
  uint64_t result;
  int value;

  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_int64)
  {
    value = xpc_int64_get_value(a1);
    result = 0;
    *a2 = value;
  }
  else
  {
    v4 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1006DB888(a1, v4);
    return 3;
  }
  return result;
}

void sub_100024010(uint64_t a1, _QWORD *a2)
{
  unsigned int *v4;

  if (a2)
  {
    sub_100024010(a1, *a2);
    sub_100024010(a1, a2[1]);
    a2[6] = &off_100918298;
    v4 = (unsigned int *)a2[7];
    if (v4)
      sub_100056AAC(v4);
    operator delete(a2);
  }
}

void sub_100024068(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      sub_10002420C(v5);
    (*(void (**)(uint64_t, xpc_object_t))(*(_QWORD *)a1 + 16))(a1, object);
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
      sub_100015C9C(v6);
  }
  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    v7 = qword_100999860;
    if (object == &_xpc_error_connection_invalid)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        v8 = (_QWORD *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0)
          v8 = (_QWORD *)*v8;
        v9 = 136446210;
        v10 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Closed XPC connection to session \"%{public}s\"", (uint8_t *)&v9, 0xCu);
      }
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 0);
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_1006DB74C(object, v7);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_1006DB7CC();
  }
}

void sub_10002420C(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 4) = 1;
  ++*(_DWORD *)(a1 + 8);
  if (!*(_QWORD *)(a1 + 16))
    sub_100015F44((dispatch_source_t *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_100024258(uint64_t a1, xpc_object_t xdict)
{
  char *string;
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  xpc_object_t reply;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  _QWORD *v16;
  int v17;
  char *v18;
  __int16 v19;
  _QWORD *v20;

  if (*(int *)(a1 + 80) <= 0)
  {
    v14 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
      sub_1006DBF08(a1, v14);
    return;
  }
  string = (char *)xpc_dictionary_get_string(xdict, "kCBMsgId");
  v5 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
  {
    v6 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v6 = (_QWORD *)*v6;
    v17 = 136446466;
    v18 = string;
    v19 = 2082;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received MBFramework XPC message \"%{public}s\" from session \"%{public}s\"", (uint8_t *)&v17, 0x16u);
  }
  if (!string)
  {
    reply = xpc_dictionary_create_reply(xdict);
    if (!reply)
      return;
    v12 = reply;
    v13 = 19;
    goto LABEL_25;
  }
  if (qword_10097AB88 != -1)
    dispatch_once(&qword_10097AB88, &stru_1009231B0);
  sub_1000244F8(qword_10097AB80, string, *(_DWORD *)(a1 + 40));
  v7 = *(_QWORD **)(a1 + 128);
  if (v7 == (_QWORD *)(a1 + 136))
  {
LABEL_17:
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1006DBF88();
    reply = xpc_dictionary_create_reply(xdict);
    if (!reply)
      return;
    v12 = reply;
    v13 = 2;
LABEL_25:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v12);
    xpc_release(v12);
    return;
  }
  while (!(**(unsigned int (***)(_QWORD, xpc_object_t))v7[4])(v7[4], xdict))
  {
    v8 = (_QWORD *)v7[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v7[2];
        v10 = *v9 == (_QWORD)v7;
        v7 = v9;
      }
      while (!v10);
    }
    v7 = v9;
    if (v9 == (_QWORD *)(a1 + 136))
      goto LABEL_17;
  }
  v15 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
  {
    v16 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v16 = (_QWORD *)*v16;
    v17 = 136446466;
    v18 = string;
    v19 = 2082;
    v20 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Handled MBFramework XPC message \"%{public}s\" from session \"%{public}s\"", (uint8_t *)&v17, 0x16u);
  }
}

void sub_1000244F8(uint64_t a1, char *a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[6];
  int v9;
  _QWORD v10[5];
  void *__p[2];
  __int128 v12;

  v6 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6))
  {
    v10[0] = 0;
    v10[1] = v10;
    v10[2] = 0x4812000000;
    v10[3] = sub_1000626E4;
    v10[4] = sub_100062408;
    *(_OWORD *)__p = 0u;
    v12 = 0u;
    sub_100091AE8(&__p[1], a2);
    v7 = *(NSObject **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1005BD064;
    v8[3] = &unk_100935A98;
    v9 = a3;
    v8[4] = v10;
    v8[5] = a1;
    dispatch_async(v7, v8);
    _Block_object_dispose(v10, 8);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[1]);
  }
}

BOOL sub_1000245D8(uint64_t a1, xpc_object_t xdict)
{
  const char *string;
  uint64_t **v5;
  _QWORD *v6;
  void (*v7)(_QWORD *, xpc_object_t);
  uint64_t v8;
  _QWORD *v9;
  const char *v11;
  size_t v12;
  const char **v13;

  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  v11 = string;
  v12 = strlen(string);
  v5 = sub_1000246A4(&xmmword_100999468, (uint64_t)&v11);
  if (v5)
  {
    v11 = string;
    v12 = strlen(string);
    v13 = &v11;
    v6 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v11, (uint64_t)&unk_100740F58, (_OWORD **)&v13);
    v7 = (void (*)(_QWORD *, xpc_object_t))v6[4];
    v8 = v6[5];
    v9 = (_QWORD *)(a1 + (v8 >> 1));
    if ((v8 & 1) != 0)
      v7 = *(void (**)(_QWORD *, xpc_object_t))(*v9 + v7);
    v7(v9, xdict);
  }
  return v5 != 0;
}

uint64_t **sub_1000246A4(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  char v17;

  v4 = sub_10039B518((uint64_t)&v17, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v14 = a2;
    v12 = *(uint64_t **)a2;
    v13 = *(_QWORD *)(v14 + 8);
    do
    {
      v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(_QWORD *)&v5)
            v15 %= *(_QWORD *)&v5;
        }
        else
        {
          v15 &= *(_QWORD *)&v5 - 1;
        }
        if (v15 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

BOOL sub_1000247C0(uint64_t a1, xpc_object_t xdict)
{
  const char *string;
  uint64_t **v5;
  _QWORD *v6;
  void (*v7)(_QWORD *, xpc_object_t);
  uint64_t v8;
  _QWORD *v9;
  const char *v11;
  size_t v12;
  const char **v13;

  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  v11 = string;
  v12 = strlen(string);
  v5 = sub_1000246A4(&xmmword_100999440, (uint64_t)&v11);
  if (v5)
  {
    v11 = string;
    v12 = strlen(string);
    v13 = &v11;
    v6 = sub_1000685DC((uint64_t)&xmmword_100999440, (uint64_t)&v11, (uint64_t)&unk_100740F58, (_OWORD **)&v13);
    v7 = (void (*)(_QWORD *, xpc_object_t))v6[4];
    v8 = v6[5];
    v9 = (_QWORD *)(a1 + (v8 >> 1));
    if ((v8 & 1) != 0)
      v7 = *(void (**)(_QWORD *, xpc_object_t))(*v9 + v7);
    v7(v9, xdict);
  }
  return v5 != 0;
}

BOOL sub_10002488C(uint64_t a1, xpc_object_t xdict)
{
  const char *string;
  uint64_t **v5;
  _QWORD *v6;
  void (*v7)(_QWORD *, xpc_object_t);
  uint64_t v8;
  _QWORD *v9;
  const char *v11;
  size_t v12;
  const char **v13;

  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  v11 = string;
  v12 = strlen(string);
  v5 = sub_1000246A4(&xmmword_100999490, (uint64_t)&v11);
  if (v5)
  {
    v11 = string;
    v12 = strlen(string);
    v13 = &v11;
    v6 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v11, (uint64_t)&unk_100740F58, (_OWORD **)&v13);
    v7 = (void (*)(_QWORD *, xpc_object_t))v6[4];
    v8 = v6[5];
    v9 = (_QWORD *)(a1 + (v8 >> 1));
    if ((v8 & 1) != 0)
      v7 = *(void (**)(_QWORD *, xpc_object_t))(*v9 + v7);
    v7(v9, xdict);
  }
  return v5 != 0;
}

BOOL sub_100024958(uint64_t a1, xpc_object_t xdict)
{
  const char *string;
  uint64_t **v5;
  _QWORD *v6;
  void (*v7)(_QWORD *, xpc_object_t);
  uint64_t v8;
  _QWORD *v9;
  const char *v11;
  size_t v12;
  const char **v13;

  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  v11 = string;
  v12 = strlen(string);
  v5 = sub_1000246A4(&xmmword_100999738, (uint64_t)&v11);
  if (v5)
  {
    v11 = string;
    v12 = strlen(string);
    v13 = &v11;
    v6 = sub_1004CAEE8((uint64_t)&xmmword_100999738, (uint64_t)&v11, (uint64_t)&unk_100740F58, (_OWORD **)&v13);
    v7 = (void (*)(_QWORD *, xpc_object_t))v6[4];
    v8 = v6[5];
    v9 = (_QWORD *)(a1 + (v8 >> 1));
    if ((v8 & 1) != 0)
      v7 = *(void (**)(_QWORD *, xpc_object_t))(*v9 + v7);
    v7(v9, xdict);
  }
  return v5 != 0;
}

BOOL sub_100024A24(uint64_t a1, xpc_object_t xdict)
{
  const char *string;
  uint64_t **v5;
  _QWORD *v6;
  void (*v7)(_QWORD *, xpc_object_t);
  uint64_t v8;
  _QWORD *v9;
  const char *v11;
  size_t v12;
  const char **v13;

  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  v11 = string;
  v12 = strlen(string);
  v5 = sub_1000246A4(&xmmword_1009999E8, (uint64_t)&v11);
  if (v5)
  {
    v11 = string;
    v12 = strlen(string);
    v13 = &v11;
    v6 = sub_100025E14((uint64_t)&xmmword_1009999E8, (uint64_t)&v11, (uint64_t)&unk_100740F58, (_OWORD **)&v13);
    v7 = (void (*)(_QWORD *, xpc_object_t))v6[4];
    v8 = v6[5];
    v9 = (_QWORD *)(a1 + (v8 >> 1));
    if ((v8 & 1) != 0)
      v7 = *(void (**)(_QWORD *, xpc_object_t))(*v9 + v7);
    v7(v9, xdict);
  }
  return v5 != 0;
}

BOOL sub_100024AF0(uint64_t a1, xpc_object_t xdict)
{
  const char *string;
  uint64_t **v5;
  _QWORD *v6;
  void (*v7)(_QWORD *, xpc_object_t);
  uint64_t v8;
  _QWORD *v9;
  const char *v11;
  size_t v12;
  const char **v13;

  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  v11 = string;
  v12 = strlen(string);
  v5 = sub_1000246A4(&xmmword_100999A28, (uint64_t)&v11);
  if (v5)
  {
    v11 = string;
    v12 = strlen(string);
    v13 = &v11;
    v6 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v11, (uint64_t)&unk_100740F58, (_OWORD **)&v13);
    v7 = (void (*)(_QWORD *, xpc_object_t))v6[4];
    v8 = v6[5];
    v9 = (_QWORD *)(a1 + (v8 >> 1));
    if ((v8 & 1) != 0)
      v7 = *(void (**)(_QWORD *, xpc_object_t))(*v9 + v7);
    v7(v9, xdict);
  }
  return v5 != 0;
}

void *sub_100024BBC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  uint64_t *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v29;

  v7 = sub_10039B518((uint64_t)&v29, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v17 = a2;
        v15 = *(uint64_t **)a2;
        v16 = *(_QWORD *)(v17 + 8);
        do
        {
          v18 = *((_QWORD *)v14 + 1);
          if (v18 == v8)
          {
            if (*((_QWORD *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16))
              return v14;
          }
          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9)
                v18 %= v9;
            }
            else
            {
              v18 &= v9 - 1;
            }
            if (v18 != v12)
              break;
          }
          v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((_QWORD *)v14 + 4) = 0;
  *((_QWORD *)v14 + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_1000B678C(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v26)
  {
    *(_QWORD *)v14 = *v26;
LABEL_40:
    *v26 = v14;
    goto LABEL_41;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v25 + 8 * v12) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_100024E10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100024E24(uint64_t a1, xpc_object_t xdict)
{
  const char *string;
  uint64_t **v5;
  _QWORD *v6;
  void (*v7)(_QWORD *, xpc_object_t);
  uint64_t v8;
  _QWORD *v9;
  const char *v11;
  size_t v12;
  const char **v13;

  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  v11 = string;
  v12 = strlen(string);
  v5 = sub_1000246A4(&xmmword_1009995D8, (uint64_t)&v11);
  if (v5)
  {
    v11 = string;
    v12 = strlen(string);
    v13 = &v11;
    v6 = sub_100491FF0((uint64_t)&xmmword_1009995D8, (uint64_t)&v11, (uint64_t)&unk_100740F58, (_OWORD **)&v13);
    v7 = (void (*)(_QWORD *, xpc_object_t))v6[4];
    v8 = v6[5];
    v9 = (_QWORD *)(a1 + (v8 >> 1));
    if ((v8 & 1) != 0)
      v7 = *(void (**)(_QWORD *, xpc_object_t))(*v9 + v7);
    v7(v9, xdict);
  }
  return v5 != 0;
}

void sub_100024EF0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  NSObject *v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTPowerModule");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E53AC();
    if (uint64)
      goto LABEL_3;
LABEL_7:
    uint64 = 1;
    goto LABEL_8;
  }
  if (!uint64)
    goto LABEL_7;
LABEL_3:
  LODWORD(uint64) = sub_100025024(uint64, v6, (int *)&value);
  v7 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E5338((int *)&value, v7);
  uint64 = (int)uint64;
LABEL_8:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", uint64);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBTPowerMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

uint64_t sub_100025024(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  unsigned int v10;
  uint8_t buf[4];
  int v12;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v5 = sub_100025158((uint64_t)off_100977890, a1);
  if (!v5)
    return 7;
  v10 = 0;
  v6 = sub_1000251D8(v5, &v10);
  if (!(_DWORD)v6)
  {
    if (v10 > 4)
    {
      v6 = 1;
    }
    else
    {
      v6 = 0;
      *a3 = dword_100741280[v10];
    }
  }
  v7 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67109120;
    v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Returning bluetooth power state: %x", buf, 8u);
  }
  return v6;
}

uint64_t sub_100025158(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[2];

  v3 = a1;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 96);
  if (a2)
  {
    v5 = *(_QWORD **)(v3 + 160);
    v4 = *(_QWORD **)(v3 + 168);
    if (v5 != v4)
    {
      while (*v5 != a2)
      {
        if (++v5 == v4)
        {
          v5 = *(_QWORD **)(v3 + 168);
          break;
        }
      }
    }
    if (v5 == v4)
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  sub_100034234((uint64_t)v7);
  return v3;
}

uint64_t sub_1000251D8(uint64_t a1, _DWORD *a2)
{
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_1009307C0);
  *a2 = sub_10002527C((uint64_t)off_100978128);
  return 0;
}

uint64_t sub_10002527C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

void sub_100025284(char *a1, xpc_object_t xdict)
{
  unsigned int int64;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void (*v9)(char *, xpc_object_t);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  xpc_object_t reply;
  void *v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  _QWORD *v30;

  int64 = xpc_dictionary_get_int64(xdict, "kCBMsgId");
  v5 = (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)a1 + 32))(a1, (unsigned __int16)int64);
  v7 = v6 & 1;
  v8 = qword_100999860;
  if (v7 | v5)
  {
    v9 = (void (*)(char *, xpc_object_t))v5;
    v10 = v6;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)a1 + 56))(a1, (unsigned __int16)int64);
      v12 = a1 + 56;
      if (a1[79] < 0)
        v12 = (_QWORD *)*v12;
      v27 = 136446466;
      v28 = v11;
      v29 = 2082;
      v30 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received XPC message \"%{public}s\" from session \"%{public}s\"", (uint8_t *)&v27, 0x16u);
    }
    sub_1004B11DC(a1, xdict);
    if (*((_QWORD *)a1 + 16)
      && ((v13 = *((_DWORD *)a1 + 34), v13 == 10)
       || v13 == 5
       || v13 == 4
       && ((*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)a1 + 40))(a1, (unsigned __int16)int64) & 1) != 0
       || ((*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)a1 + 48))(a1, (unsigned __int16)int64) & 1) != 0)
      || int64 <= 7 && ((1 << int64) & 0x96) != 0)
    {
      v14 = &a1[v10 >> 1];
      if (v7)
        v9 = *(void (**)(char *, xpc_object_t))(*(_QWORD *)v14 + v9);
      v9(v14, xdict);
    }
    else
    {
      v15 = *((_QWORD *)a1 + 16);
      v16 = qword_100999860;
      v17 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR);
      if (v15)
      {
        if (v17)
          sub_1006F877C((uint64_t)a1, v16);
        reply = xpc_dictionary_create_reply(xdict);
        if (reply)
        {
          v26 = reply;
          xpc_dictionary_set_int64(reply, "kCBMsgArgResult", 12);
          xpc_connection_send_message(*((xpc_connection_t *)a1 + 2), v26);
          xpc_release(v26);
        }
      }
      else if (v17)
      {
        sub_1006F874C(v16, v18, v19, v20, v21, v22, v23, v24);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_1006F86DC(int64, v8);
  }
}

char *sub_1000254D8(uint64_t a1, int a2)
{
  return off_1009364B8[a2];
}

void *sub_1000254E8(uint64_t a1, int a2)
{
  void *result;

  result = sub_100022B28;
  switch(a2)
  {
    case 1:
      return result;
    case 2:
      result = sub_1000703BC;
      break;
    case 4:
      result = sub_1000703F8;
      break;
    case 8:
      result = sub_10053BEDC;
      break;
    case 9:
      result = sub_10053BF9C;
      break;
    case 10:
      result = sub_10053BFFC;
      break;
    case 11:
      result = sub_10053C0B4;
      break;
    case 12:
      result = sub_10053C2EC;
      break;
    case 13:
      result = sub_10053C694;
      break;
    case 14:
      result = sub_10053C8F4;
      break;
    case 15:
      result = sub_10053C9FC;
      break;
    case 19:
      result = sub_10053EE14;
      break;
    case 20:
      result = sub_10053EFF0;
      break;
    case 25:
      result = sub_10054F014;
      break;
    case 26:
      result = sub_10054F240;
      break;
    case 27:
      result = sub_10053CB90;
      break;
    case 28:
      result = sub_10053CC34;
      break;
    case 30:
      result = sub_10053D084;
      break;
    case 31:
      result = sub_10053CF64;
      break;
    case 32:
      result = sub_10053D9A4;
      break;
    case 33:
      result = sub_10053DC38;
      break;
    case 34:
      result = sub_10053DCAC;
      break;
    case 35:
      result = sub_10053DF50;
      break;
    case 36:
      result = sub_10053E1C0;
      break;
    case 37:
      result = sub_10053E690;
      break;
    case 38:
      result = sub_10053E734;
      break;
    case 39:
      result = sub_10053E794;
      break;
    case 40:
      result = sub_10053E908;
      break;
    case 41:
      result = sub_10053EA94;
      break;
    case 42:
      result = sub_10053EB08;
      break;
    case 43:
      result = sub_10053F290;
      break;
    case 44:
      result = sub_10053F41C;
      break;
    case 45:
      result = sub_10053F660;
      break;
    case 46:
      result = sub_10053F80C;
      break;
    case 60:
      result = sub_10053F0F0;
      break;
    case 63:
      result = sub_10053F9D0;
      break;
    case 64:
      result = sub_10053FD70;
      break;
    case 65:
      result = sub_10053FFA4;
      break;
    case 66:
      result = sub_1005400D4;
      break;
    case 67:
      result = sub_1005404C8;
      break;
    case 68:
      result = sub_100541A74;
      break;
    case 69:
      result = sub_100540908;
      break;
    case 70:
      result = sub_10054104C;
      break;
    case 71:
      result = sub_100006EB0;
      break;
    case 72:
      result = sub_1000047C0;
      break;
    case 73:
      result = sub_100541C54;
      break;
    case 74:
      result = sub_1005438B8;
      break;
    case 75:
      result = sub_100543C28;
      break;
    case 76:
      result = sub_100543FBC;
      break;
    case 77:
      result = sub_1005445C4;
      break;
    case 78:
      result = sub_10054CB48;
      break;
    case 79:
      result = sub_10054C74C;
      break;
    case 80:
      result = sub_10054D144;
      break;
    case 81:
      result = sub_10054BC20;
      break;
    case 82:
      result = sub_10054D6D0;
      break;
    case 83:
      result = sub_100541B2C;
      break;
    case 93:
      result = sub_1005446E4;
      break;
    case 95:
      result = sub_100544CC4;
      break;
    case 96:
      result = sub_100544CF4;
      break;
    case 97:
      result = sub_100544D24;
      break;
    case 98:
      result = sub_100544D90;
      break;
    case 99:
      result = sub_100544DFC;
      break;
    case 100:
      result = sub_100544EC0;
      break;
    case 101:
      result = sub_10054512C;
      break;
    case 102:
      result = sub_10054529C;
      break;
    case 103:
      result = sub_100545464;
      break;
    case 104:
      result = sub_10054565C;
      break;
    case 105:
      result = sub_1005457C8;
      break;
    case 106:
      result = sub_1005459C0;
      break;
    case 107:
      result = sub_100545DA4;
      break;
    case 108:
      result = sub_1005465F8;
      break;
    case 109:
      result = sub_100546C44;
      break;
    case 111:
      result = sub_10054024C;
      break;
    case 112:
      result = sub_100547134;
      break;
    case 113:
      result = sub_1005472AC;
      break;
    case 114:
      result = sub_1005474E0;
      break;
    case 115:
      result = sub_100547628;
      break;
    case 116:
      result = sub_100547CF8;
      break;
    case 117:
      result = sub_100547990;
      break;
    case 118:
      result = sub_100548290;
      break;
    case 119:
      result = sub_1005485F8;
      break;
    case 120:
      result = sub_100548D20;
      break;
    case 121:
      result = sub_100549184;
      break;
    case 122:
      result = sub_100549640;
      break;
    case 123:
      result = sub_100549B9C;
      break;
    case 124:
      result = sub_100549EA4;
      break;
    case 125:
      result = sub_10054A194;
      break;
    case 126:
      result = sub_10054A2C8;
      break;
    case 127:
      result = sub_10054A684;
      break;
    case 128:
      result = sub_10054ABA4;
      break;
    case 130:
      result = sub_10054C7E0;
      break;
    case 131:
      result = sub_10054C964;
      break;
    case 132:
      result = sub_10054CA4C;
      break;
    case 137:
      result = sub_10054588C;
      break;
    case 140:
      result = sub_10054C1D4;
      break;
    case 141:
      result = sub_10054C490;
      break;
    case 142:
      result = sub_10054AEC0;
      break;
    case 143:
      result = sub_10054B574;
      break;
    case 144:
      result = sub_10054B8E4;
      break;
    case 145:
      result = sub_10054CE90;
      break;
    case 146:
      result = sub_10054CF88;
      break;
    case 161:
      result = sub_10054D254;
      break;
    case 162:
      result = sub_10054D38C;
      break;
    case 163:
      result = sub_10054D7A8;
      break;
    case 168:
      result = sub_10054DA6C;
      break;
    case 169:
      result = sub_10054DCA4;
      break;
    case 170:
      result = sub_10054DE98;
      break;
    case 171:
      result = sub_10054E21C;
      break;
    case 172:
      result = sub_10054E6E0;
      break;
    case 173:
      result = sub_10054EA04;
      break;
    case 174:
      result = sub_10054EB10;
      break;
    case 175:
      result = sub_10054EC10;
      break;
    case 176:
      result = sub_10054ED40;
      break;
    case 177:
      result = sub_10054EEDC;
      break;
    case 183:
      result = sub_10054F358;
      break;
    case 184:
      result = sub_10054F5C0;
      break;
    case 186:
      result = sub_10054F744;
      break;
    case 187:
      result = sub_10054F8C8;
      break;
    case 188:
      result = sub_10054FA88;
      break;
    case 191:
      result = sub_10054FC48;
      break;
    case 192:
      result = sub_10054FD70;
      break;
    case 194:
      result = sub_10054FF44;
      break;
    case 195:
      result = sub_100550080;
      break;
    case 201:
      result = sub_1005501CC;
      break;
    case 202:
      result = sub_1005503C4;
      break;
    case 205:
      result = sub_100550654;
      break;
    case 206:
      result = sub_100550AAC;
      break;
    case 207:
      result = sub_1005395B0;
      break;
    case 208:
      result = sub_1005396E4;
      break;
    case 211:
      result = sub_10054CD0C;
      break;
    case 217:
      result = sub_100550CE4;
      break;
    case 218:
      result = sub_100541790;
      break;
    case 219:
      result = sub_100550D48;
      break;
    case 220:
      result = sub_1005417F4;
      break;
    case 222:
      result = sub_100551560;
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700170();
      result = 0;
      break;
  }
  return result;
}

void *sub_100025BAC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  uint64_t *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v29;

  v7 = sub_10039B518((uint64_t)&v29, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v17 = a2;
        v15 = *(uint64_t **)a2;
        v16 = *(_QWORD *)(v17 + 8);
        do
        {
          v18 = *((_QWORD *)v14 + 1);
          if (v18 == v8)
          {
            if (*((_QWORD *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16))
              return v14;
          }
          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9)
                v18 %= v9;
            }
            else
            {
              v18 &= v9 - 1;
            }
            if (v18 != v12)
              break;
          }
          v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((_QWORD *)v14 + 4) = 0;
  *((_QWORD *)v14 + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_1000B678C(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v26)
  {
    *(_QWORD *)v14 = *v26;
LABEL_40:
    *v26 = v14;
    goto LABEL_41;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v25 + 8 * v12) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_100025E00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100025E14(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  uint64_t *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v29;

  v7 = sub_10039B518((uint64_t)&v29, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v17 = a2;
        v15 = *(uint64_t **)a2;
        v16 = *(_QWORD *)(v17 + 8);
        do
        {
          v18 = *((_QWORD *)v14 + 1);
          if (v18 == v8)
          {
            if (*((_QWORD *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16))
              return v14;
          }
          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9)
                v18 %= v9;
            }
            else
            {
              v18 &= v9 - 1;
            }
            if (v18 != v12)
              break;
          }
          v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((_QWORD *)v14 + 4) = 0;
  *((_QWORD *)v14 + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_1000B678C(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v26)
  {
    *(_QWORD *)v14 = *v26;
LABEL_40:
    *v26 = v14;
    goto LABEL_41;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v25 + 8 * v12) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_100026068(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10002607C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E61FC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100026164(uint64, (int *)&value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

uint64_t sub_100026164(uint64_t a1, int *a2)
{
  int v4;
  uint64_t result;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  if (!sub_100025158((uint64_t)off_100977890, a1))
    return 7;
  v4 = sub_1000261E4();
  result = 0;
  *a2 = v4 << 31 >> 31;
  return result;
}

uint64_t sub_1000261DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 203);
}

uint64_t sub_1000261E4()
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100930740);
  return sub_1000261DC((uint64_t)off_100977A50);
}

uint64_t sub_100026224(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v5 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
  v6 = a1[5];
  v7 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v8 = *(void **)(v6 + 8 * v7);
  *(_QWORD *)(v6 + 8 * v7) = v5;

  v9 = sub_1000262B0(a3);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = a1[6];
  v12 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  v13 = *(void **)(v11 + 8 * v12);
  *(_QWORD *)(v11 + 8 * v12) = v10;

  ++*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  return 1;
}

__CFString *sub_1000262B0(void *a1)
{
  xpc_type_t type;
  xpc_type_t v3;
  NSObject *v4;
  NSNumber *v6;
  id v7;
  NSNumber *v8;
  _BOOL4 value;
  void *v10;
  NSString *v11;
  uint64_t v12;
  void *v13;
  __CFString *v14;
  __CFString *v15;
  id v16;
  const void *bytes_ptr;
  id v18;
  uint64_t v19;
  NSNumber *v20;
  NSNumber *v21;
  int v22;
  xpc_type_t v23;

  type = xpc_get_type(a1);
  if (type == (xpc_type_t)&_xpc_type_int64)
  {
    v6 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", xpc_int64_get_value(a1));
    v7 = (id)objc_claimAutoreleasedReturnValue(v6);
    return (__CFString *)v7;
  }
  v3 = type;
  if (type == (xpc_type_t)&_xpc_type_uint64)
  {
    v8 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", xpc_uint64_get_value(a1));
    v7 = (id)objc_claimAutoreleasedReturnValue(v8);
    return (__CFString *)v7;
  }
  if (type == (xpc_type_t)&_xpc_type_BOOL)
  {
    value = xpc_BOOL_get_value(a1);
    v10 = &__kCFBooleanFalse;
    if (value)
      v10 = &__kCFBooleanTrue;
    return (__CFString *)v10;
  }
  else
  {
    if (type != (xpc_type_t)&_xpc_type_string)
    {
      if (type == (xpc_type_t)&_xpc_type_data)
      {
        v16 = objc_alloc((Class)NSData);
        bytes_ptr = xpc_data_get_bytes_ptr(a1);
        v7 = objc_msgSend(v16, "initWithBytes:length:", bytes_ptr, xpc_data_get_length(a1));
      }
      else if (type == (xpc_type_t)&_xpc_type_uuid)
      {
        v7 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", xpc_uuid_get_bytes(a1));
      }
      else if (type == (xpc_type_t)&_xpc_type_array)
      {
        v18 = sub_1004B0F60(a1);
        v7 = (id)objc_claimAutoreleasedReturnValue(v18);
      }
      else if (type == (xpc_type_t)&_xpc_type_dictionary)
      {
        v19 = sub_100026584(a1);
        v7 = (id)objc_claimAutoreleasedReturnValue(v19);
      }
      else if (type == (xpc_type_t)&_xpc_type_fd)
      {
        v20 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", xpc_fd_dup(a1));
        v7 = (id)objc_claimAutoreleasedReturnValue(v20);
      }
      else
      {
        if (type != (xpc_type_t)&_xpc_type_double)
        {
          v4 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
          {
            v22 = 134217984;
            v23 = v3;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Unknown XPC type: %p", (uint8_t *)&v22, 0xCu);
          }
          return (__CFString *)0;
        }
        v21 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", xpc_double_get_value(a1));
        v7 = (id)objc_claimAutoreleasedReturnValue(v21);
      }
      return (__CFString *)v7;
    }
    v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", xpc_string_get_string_ptr(a1));
    v12 = objc_claimAutoreleasedReturnValue(v11);
    v13 = (void *)v12;
    v14 = &stru_100941758;
    if (v12)
      v14 = (__CFString *)v12;
    v15 = v14;

    return v15;
  }
}

id sub_100026584(void *a1)
{
  size_t count;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  char *v7;
  _QWORD applier[7];
  _QWORD v10[4];

  count = xpc_dictionary_get_count(a1);
  v3 = 8 * count;
  __chkstk_darwin();
  v4 = (char *)applier - ((8 * count + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v4, 8 * count);
  __chkstk_darwin();
  bzero(v4, 8 * count);
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  v10[3] = 0;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 3221225472;
  applier[2] = sub_100026224;
  applier[3] = &unk_1009324D0;
  applier[4] = v10;
  applier[5] = v4;
  applier[6] = v4;
  xpc_dictionary_apply(a1, applier);
  v5 = objc_msgSend(objc_alloc((Class)NSDictionary), "initWithObjects:forKeys:count:", v4, v4, count);
  _Block_object_dispose(v10, 8);
  if (count)
  {
    v6 = 8 * count;
    do
    {

      v6 -= 8;
    }
    while (v6);
    v7 = v4 - 8;
    do
    {

      v3 -= 8;
    }
    while (v3);
  }
  return v5;
}

void sub_100026708(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  _Block_object_dispose((const void *)(v5 - 88), 8);
  if (v3)
  {
    v7 = v4 - 8;
    v8 = v1;
    do
    {

      v8 -= 8;
    }
    while (v8);
    v9 = v2 - 8;
    do
    {

      v1 -= 8;
    }
    while (v1);
  }
  _Unwind_Resume(a1);
}

void sub_100026758(id a1, NSString *a2, CBExtension *a3, BOOL *a4)
{
  *a4 = -[CBExtension triggerIfPending](a3, "triggerIfPending");
}

void sub_100026888(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_100026CD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100027D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100027F68()
{
  if (qword_100991EA8 != -1)
    dispatch_once(&qword_100991EA8, &stru_100929538);
  (*(void (**)(uint64_t))(*(_QWORD *)qword_100991EA0 + 40))(qword_100991EA0);
  return qword_100991EA0;
}

uint64_t sub_100027FC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  _QWORD v7[5];
  _QWORD handler[5];
  char v9;
  __int16 v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  v2 = sub_10003415C((uint64_t)v11, a1 + 296);
  if ((byte_100991D98 & 1) == 0)
  {
    byte_100991D98 = 1;
    sub_100034264(v2);
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100927598);
    sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 8);
    v10 = 0;
    v9 = 0;
    sub_100322C4C((_BYTE *)a1, (BOOL *)&v10 + 1, (BOOL *)&v10, (unsigned __int8 *)&v9);
    v3 = sub_1000438A4();
    sub_10011C160(0, v9, *(_DWORD *)(v3 + 712));
    sub_10011C128((uint64_t (*)(_QWORD))sub_10032307C);
    if (*(_DWORD *)(a1 + 20) == -1)
    {
      v4 = *(NSObject **)(a1 + 24);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1003230D4;
      handler[3] = &unk_100927440;
      handler[4] = a1;
      notify_register_dispatch("com.apple.MCX._managementStatusChangedForDomains", (int *)(a1 + 20), v4, handler);
    }
    if (*(_DWORD *)(a1 + 16) == -1)
    {
      v5 = *(NSObject **)(a1 + 24);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_1003230E4;
      v7[3] = &unk_100927440;
      v7[4] = a1;
      notify_register_dispatch("com.apple.bluetooth.prefsChanged", (int *)(a1 + 16), v5, v7);
    }
    sub_1002534E8(sub_100322910);
    (**(void (***)(uint64_t))a1)(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  }
  return sub_100034234((uint64_t)v11);
}

void sub_100028160(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100034234(v1 - 32);
  _Unwind_Resume(a1);
}

BOOL sub_10002817C(uint64_t a1)
{
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;
  char v7;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 0;
  v7 = 0;
  sub_100091AE8(v5, "Scan");
  sub_100091AE8(__p, "DisableRssiFilter");
  (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)a1 + 72))(a1, v5, __p, &v7);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  return v7 != 0;
}

void sub_100028224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002825C()
{
  return os_variant_has_internal_diagnostics("com.apple.bluetooth");
}

void sub_100028444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100029A10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_100029B90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_100029BB0(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[57])
    return objc_msgSend(result, "_stackBLEScannerDeviceFound:", a2);
  return result;
}

_QWORD *sub_10002A03C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) == result[12])
    return objc_msgSend(result, "_xpcDeviceFound:", a2);
  return result;
}

void sub_10002A590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_10002AE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  _Unwind_Resume(a1);
}

void sub_10002B4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  void *v62;
  void *v63;

  _Block_object_dispose(&a62, 8);
  _Unwind_Resume(a1);
}

void sub_10002C760(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x200], 8);

  _Unwind_Resume(a1);
}

void sub_10002D2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,id a45,uint64_t a46,char a47)
{

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a47, 8);

  _Unwind_Resume(a1);
}

void sub_10002E0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

id sub_10002FC28(uint64_t a1)
{
  const unsigned __int8 *v2;
  uint64_t v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  const unsigned __int8 **v7;
  BOOL v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  void **v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  id v23;
  unsigned __int16 v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  NSNumber *v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  void *i;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  unint64_t j;
  void *v60;
  NSString *v61;
  void *v62;
  void *v63;
  id v65;
  void *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void *__p[2];
  char v72;
  void *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  _BYTE v76[128];

  sub_10006DA84(a1);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a1 + 81) == 16;
  v2 = *(const unsigned __int8 **)(a1 + 104);
  if (v2 != (const unsigned __int8 *)(a1 + 112))
  {
    do
    {
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_10093F6F0);
      v3 = qword_1009778B0;
      v4 = sub_100030DF4(v2 + 32);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LODWORD(v3) = sub_100030864(v3, v5);

      if ((_DWORD)v3)
        ++*(_QWORD *)(a1 + 72);
      v6 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
      if (v6)
      {
        do
        {
          v7 = (const unsigned __int8 **)v6;
          v6 = *(unsigned __int8 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const unsigned __int8 **)*((_QWORD *)v2 + 2);
          v8 = *v7 == v2;
          v2 = (const unsigned __int8 *)v7;
        }
        while (!v8);
      }
      v2 = (const unsigned __int8 *)v7;
    }
    while (v7 != (const unsigned __int8 **)(a1 + 112));
  }
  v65 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
  v9 = *(_QWORD *)(a1 + 8);
  v74 = 0;
  v75 = 0;
  v73 = 0;
  sub_1000B61B8((char *)&v73, *(__int128 **)(v9 + 8), *(__int128 **)(v9 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 2));
  v11 = (unsigned __int8 *)v73;
  v10 = v74;
  if (v73 == v74)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      sub_10006887C((uint64_t)v11, __p);
      if (v72 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ "), v15));
      objc_msgSend(v66, "appendString:", v16);

      if (v72 < 0)
        operator delete(__p[0]);
      v18 = *v11;
      v11 += 20;
      v17 = v18;
      if (v18 == 16)
        ++v13;
      if (v17 == 2)
        ++v12;
    }
    while (v11 != v10);
  }
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(v19 + 64);
  v21 = *(_QWORD *)(v19 + 72);
  if (v20 == v21)
  {
    v22 = 0;
  }
  else
  {
    v22 = 0;
    do
    {
      v23 = *(id *)(v20 + 56);
      v24 = (unsigned __int16)objc_msgSend(v23, "count");

      v22 += v24;
      v20 += 96;
    }
    while (v20 != v21);
  }
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v66, CFSTR("ServiceUUID"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v12));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v25, CFSTR("NumberOf16bitUUID"));

  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v13));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v26, CFSTR("NumberOf128bitUUID"));

  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 5)));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v27, CFSTR("NumberOfPuckType"));

  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v22));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v28, CFSTR("NumberOfPeers"));

  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 122)));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v29, CFSTR("ObjectDiscoveryMask"));

  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 88), "count") != 0));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v30, CFSTR("HasZoneFilter"));

  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 143)));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v31, CFSTR("isContactTracing"));

  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 24)));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v32, CFSTR("NumberOfEventsInBackground"));

  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 32)));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v33, CFSTR("NumberOfEventsInForeground"));

  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 120)));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v34, CFSTR("NumberOfUniqueDevicesFound"));

  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 72)));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v35, CFSTR("NumberOfUniquePairedDevicesFound"));

  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", **(unsigned __int8 **)(a1 + 8)));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v36, CFSTR("AllowsDuplicates"));

  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v37, CFSTR("TimeSpentInBackground"));

  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 48)));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v38, CFSTR("TimeSpentInForeground"));

  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a1 + 56)));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v39, CFSTR("DurationInMS"));

  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 64)));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v40, CFSTR("AppInForegroundAtStart"));

  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 65)));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v41, CFSTR("AppInForegroundAtStop"));

  v42 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_10003F24C(a1));
  v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v43, CFSTR("AllowedInBackground"));

  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 82)));
  objc_msgSend(v65, "setObject:forKeyedSubscript:", v44, CFSTR("ScreenState"));

  v45 = objc_alloc_init((Class)NSMutableSet);
  v46 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v46 + 168))
  {
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
    objc_msgSend(v45, "addObject:", v47);

    v46 = *(_QWORD *)(a1 + 8);
  }
  v48 = *(_QWORD *)(v46 + 64);
  v49 = *(_QWORD *)(v46 + 72);
  while (v48 != v49)
  {
    v50 = *(id *)(v48 + 72);
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v51 = v50;
    v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v67, v76, 16);
    if (v52)
    {
      v53 = *(_QWORD *)v68;
      do
      {
        for (i = 0; i != v52; i = (char *)i + 1)
        {
          if (*(_QWORD *)v68 != v53)
            objc_enumerationMutation(v51);
          if (objc_msgSend(*(id *)(*((_QWORD *)&v67 + 1) + 8 * (_QWORD)i), "longLongValue"))
          {
            v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
            objc_msgSend(v45, "addObject:", v55);

          }
        }
        v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v67, v76, 16);
      }
      while (v52);
    }

    v48 += 96;
  }
  if (objc_msgSend(v45, "count"))
  {
    v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "allObjects"));
    v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "sortedArrayUsingSelector:", "compare:"));

    for (j = 0; j < (unint64_t)objc_msgSend(v58, "count"); ++j)
    {
      v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "objectAtIndex:", j));
      v61 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sub_100037600((int)objc_msgSend(v60, "longLongValue")));
      v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
      objc_msgSend(v57, "addObject:", v62);

    }
    v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "componentsJoinedByString:", CFSTR(",")));
    objc_msgSend(v65, "setObject:forKeyedSubscript:", v63, CFSTR("CBUseCase"));

  }
  else
  {
    v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Unspecified"));
    objc_msgSend(v65, "setObject:forKeyedSubscript:", v58, CFSTR("CBUseCase"));
  }

  if (v73)
  {
    v74 = (unsigned __int8 *)v73;
    operator delete(v73);
  }

  return v65;
}

void sub_100030498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28)
{
  void *v28;
  void *v29;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *sub_1000306B0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  id v9;
  void *v10;
  _QWORD v12[2];
  uint8_t buf[4];
  id v14;
  __int16 v15;
  void *v16;

  v3 = a2;
  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 88);
  if (!v3)
  {
    v4 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
      sub_100715070(v4, v5, v6);
  }
  v7 = objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v3);
  if (v7)
  {
    sub_100030BCC(buf, v3);
    sub_100030E34(a1, buf);
  }
  else
  {
    sub_100034264((uint64_t)v12);
    v7 = (_QWORD *)sub_10000B0C8(*(_QWORD *)(a1 + 248), v3);
    if (v7)
    {
      v8 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
      {
        v9 = sub_100021770(v7[2]);
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        *(_DWORD *)buf = 138543618;
        v14 = v3;
        v15 = 2114;
        v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Device \"%{public}@\" was on disk with address \"%{public}@\"", buf, 0x16u);

      }
      sub_100034188((uint64_t)v12);
      sub_100011488(a1, (uint64_t)v7);
    }
  }
  sub_100034234((uint64_t)v12);

  return v7;
}

void sub_100030830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_100030864(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t (**v8)();
  unsigned int *v9;
  uint64_t (**v10)();
  unsigned int *v11;
  uint64_t (**v12)();
  unsigned int *v13;
  uint64_t (**v14)();
  unsigned int *v15;
  uint64_t (**v16)();
  unsigned int *v17;
  _QWORD v18[2];
  unsigned __int8 uu2[8];
  unsigned int *v20;

  v3 = a2;
  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 48);
  sub_100030BCC(uu2, v3);
  v4 = sub_10000C5B8(a1 + 440, uu2);
  v5 = v4;
  if (a1 + 448 == v4)
  {
    v6 = 0;
  }
  else
  {
    sub_1003965C0(*(_QWORD *)(v4 + 56), 0, uu2);
    if (sub_1000452EC((uint64_t)uu2))
    {
      sub_1003965C0(*(_QWORD *)(v5 + 56), 3, &v16);
      if (sub_1000452EC((uint64_t)&v16))
      {
        sub_1003965C0(*(_QWORD *)(v5 + 56), 4, &v14);
        if (sub_1000452EC((uint64_t)&v14))
        {
          sub_1003965C0(*(_QWORD *)(v5 + 56), 5, &v12);
          if (sub_1000452EC((uint64_t)&v12))
          {
            sub_1003965C0(*(_QWORD *)(v5 + 56), 8, &v10);
            if (sub_1000452EC((uint64_t)&v10))
            {
              sub_1003965C0(*(_QWORD *)(v5 + 56), 9, &v8);
              v6 = !sub_1000452EC((uint64_t)&v8);
              v8 = &off_100918258;
              if (v9)
                sub_100056AAC(v9);
            }
            else
            {
              v6 = 1;
            }
            v10 = &off_100918258;
            if (v11)
              sub_100056AAC(v11);
          }
          else
          {
            v6 = 1;
          }
          v12 = &off_100918258;
          if (v13)
            sub_100056AAC(v13);
        }
        else
        {
          v6 = 1;
        }
        v14 = &off_100918258;
        if (v15)
          sub_100056AAC(v15);
      }
      else
      {
        v6 = 1;
      }
      v16 = &off_100918258;
      if (v17)
        sub_100056AAC(v17);
    }
    else
    {
      v6 = 1;
    }
    *(_QWORD *)uu2 = &off_100918258;
    if (v20)
      sub_100056AAC(v20);
  }
  sub_100034234((uint64_t)v18);

  return v6;
}

void sub_100030A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, uint64_t a12, unsigned int *a13, uint64_t a14, unsigned int *a15, uint64_t a16, unsigned int *a17, uint64_t a18, unsigned int *a19)
{
  void *v19;
  uint64_t v20;
  unsigned int *v22;

  if (a11)
    sub_100056AAC(a11);
  if (a13)
    sub_100056AAC(a13);
  if (a15)
    sub_100056AAC(a15);
  if (a17)
    sub_100056AAC(a17);
  if (a19)
    sub_100056AAC(a19);
  *(_QWORD *)(v20 - 56) = &off_100918258;
  v22 = *(unsigned int **)(v20 - 48);
  if (v22)
    sub_100056AAC(v22);
  sub_100034234(v20 - 72);

  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100030B74(unsigned __int8 *a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = v3;
  if (v3)
    objc_msgSend(v3, "getUUIDBytes:", a1);
  else
    uuid_clear(a1);

  return a1;
}

void sub_100030BBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100030BD0(uint64_t a1, unsigned __int8 *a2)
{
  void *v4;
  id v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _BOOL4 v9;
  void *__p[2];
  char v12;
  _QWORD v13[2];
  _QWORD v14[4];
  char out[40];

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 88);
  v4 = *(void **)(a1 + 168);
  v5 = sub_100030DF4(a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = objc_msgSend(v4, "objectForKey:", v6);

  if (v7)
  {
    if (!*((_BYTE *)v7 + 97) && !*((_BYTE *)v7 + 96))
    {
      sub_100030E34(a1, a2);
      if (!v7[8])
      {
        v8 = v7[2];
        v9 = 1;
        if ((v8 & 0xFF000000000000) != 0 && (v8 & 0xFFC00000000000) != 0x1C00000000000)
          v9 = v7[3] != 0;
        sub_100091AE8(__p, "DA_ASK_RETAIN_DEVICE");
        if (v7 + 23 != (_QWORD *)sub_10001F2AC((uint64_t)(v7 + 22), (const void **)__p))
          v9 = 1;
        if (v12 < 0)
          operator delete(__p[0]);
        if (v9)
        {
          if (!*(_BYTE *)(a1 + 164)
            && !*((_BYTE *)v7 + 160)
            && os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
          {
            sub_1003D2DB4(a2, out);
            sub_100715454();
          }
          sub_10033FC58(*(_QWORD *)(a1 + 248), v7);
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, out);
    sub_100091AE8(v14, out);
    sub_1007153FC();
  }
  return sub_100034234((uint64_t)v13);
}

void sub_100030DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

id sub_100030DF4(const unsigned __int8 *a1)
{
  id v2;

  if (uuid_is_null(a1))
    v2 = 0;
  else
    v2 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a1);
  return v2;
}

_QWORD *sub_100030E34(uint64_t a1, unsigned __int8 *uu2)
{
  uint64_t v4;
  unsigned __int8 *i;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  _QWORD *v11;
  uint64_t v12;

  v4 = a1 + 200;
  for (i = *(unsigned __int8 **)(a1 + 208); i != (unsigned __int8 *)v4; i = (unsigned __int8 *)*((_QWORD *)i + 1))
  {
    if (!uuid_compare(i + 16, uu2))
    {
      if (i != (unsigned __int8 *)v4)
        goto LABEL_8;
      break;
    }
  }
  v6 = qword_100999810;
  i = (unsigned __int8 *)v4;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
  {
    sub_100715938(v6, v7, v8);
    i = (unsigned __int8 *)v4;
  }
LABEL_8:
  v9 = *(_QWORD *)i;
  *(_QWORD *)(v9 + 8) = *((_QWORD *)i + 1);
  **((_QWORD **)i + 1) = v9;
  --*(_QWORD *)(a1 + 216);
  operator delete(i);
  result = sub_10066A19C(v4, 0, 0, uu2);
  v11 = *(_QWORD **)(a1 + 208);
  v12 = *(_QWORD *)(a1 + 216);
  *result = v4;
  result[1] = v11;
  *v11 = result;
  *(_QWORD *)(a1 + 208) = result;
  *(_QWORD *)(a1 + 216) = v12 + 1;
  return result;
}

uint64_t sub_100030F10(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  _QWORD *v13;
  _UNKNOWN **v14;
  uint64_t v15;
  double v16;
  double v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  void *v21;
  void *v22;
  NSNumber *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  NSNumber *v28;
  void *v29;
  void *v30;
  void *v31;
  NSNumber *v32;
  void *v33;
  void *v34;
  void *v35;
  NSNumber *v36;
  void *v37;
  NSNumber *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  _BYTE *v47;
  void *v48;
  void *v49;
  _BYTE *v50;
  void *v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  float v60;
  float v61;
  NSObject *v62;
  _BYTE *v63;
  void *v64;
  float v65;
  float v66;
  NSObject *v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  BOOL v73;
  int v74;
  uint64_t v75;
  NSObject *v76;
  _BYTE *v77;
  int8x8_t *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  BOOL v82;
  char v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  NSObject *v99;
  int v100;
  uint64_t v101;
  char v102;
  NSObject *v103;
  unsigned int v104;
  unsigned __int16 v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  int v109;
  int v110;
  unsigned int v111;
  void *v112;
  int v113;
  _BYTE *v114;
  id v115;
  _BYTE *v116;
  void *v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  _BOOL8 v125;
  _BOOL8 v126;
  _BOOL8 v127;
  double v128;
  double v129;
  unsigned int v130;
  id v131;
  void *v132;
  _QWORD *v133;
  _QWORD *v134;
  NSObject *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  void *v144;
  NSObject *v145;
  id v146;
  int v147;
  char v148;
  unsigned __int16 v149;
  BOOL v150;
  char v151;
  unsigned int v152;
  unsigned int v153;
  _BOOL4 v154;
  uint64_t v155;
  int v156;
  char v157;
  uint64_t v158;
  unsigned int v159;
  NSObject *v160;
  unint64_t v161;
  unint64_t v162;
  char v163;
  NSObject *v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  NSObject *v168;
  NSObject *v169;
  NSObject *v170;
  int v171;
  NSObject *v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  NSObject *v176;
  double v177;
  CFAbsoluteTime Current;
  CFAbsoluteTime v179;
  char v180;
  unsigned int v181;
  NSObject *v182;
  const char *v183;
  const char *v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  double v188;
  NSObject *v189;
  NSObject *v190;
  int v191;
  int v192;
  NSObject *v193;
  const char *v194;
  uint64_t v195;
  NSObject *v196;
  unint64_t v197;
  unint64_t v198;
  double v199;
  unint64_t v200;
  double v201;
  double v202;
  double v203;
  const char *v204;
  unint64_t v205;
  double v206;
  double v207;
  const char *v208;
  const char *v209;
  int v210;
  int v211;
  const char *v212;
  const char *v213;
  int v214;
  int v215;
  const char *v216;
  int v217;
  const char *v218;
  int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned __int16 v223;
  unsigned __int16 v224;
  int v225;
  _BOOL4 v226;
  int v227;
  int v228;
  NSObject *v229;
  const char *v230;
  const char *v231;
  int v232;
  unsigned int v233;
  void *v234;
  void *v235;
  void *v236;
  void *v237;
  unint64_t v238;
  void *v239;
  unint64_t v240;
  void *v241;
  unint64_t v242;
  void *v243;
  unint64_t v244;
  void *v245;
  unint64_t v246;
  void *v247;
  void *v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  void *v262;
  void *v263;
  void *v264;
  void *v265;
  void *v266;
  void *v267;
  void *v268;
  void *v269;
  void *v270;
  void *v271;
  void *v272;
  void *v273;
  void *v274;
  void *v275;
  void *v276;
  id v277;
  int v279;
  int v280;
  uint64_t v281;
  unsigned __int16 *v282;
  BOOL v283;
  char v284;
  unsigned int v285;
  unsigned int v286;
  char v287;
  BOOL v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  BOOL v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  char v296;
  int v297;
  unsigned int v298;
  uint64_t v299;
  uint64_t v300;
  char v301;
  void *v302;
  char v303;
  uint64_t v304;
  uint64_t v305;
  unsigned __int16 v306;
  char v307;
  void *v308;
  uint64_t v309;
  char v310;
  void *v311;
  void *v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  _QWORD v318[4];
  id v319;
  char v320;
  char v321[11];
  int v322;
  _BYTE buf[104];
  _BYTE v324[6];
  _BYTE v325[6];
  __int16 v326;
  int v327;
  __int16 v328;
  int v329;
  __int16 v330;
  int v331;
  __int16 v332;
  int v333;
  __int16 v334;
  const char *v335;
  __int16 v336;
  const char *v337;
  __int16 v338;
  int v339;
  __int16 v340;
  const char *v341;
  __int16 v342;
  const char *v343;
  __int16 v344;
  int v345;
  __int16 v346;
  int v347;
  __int16 v348;
  int v349;
  __int16 v350;
  int v351;
  __int16 v352;
  int v353;
  _BYTE v354[12];
  char v355;
  _BYTE v356[14];
  _BYTE v357[10];
  double v358;
  __int16 v359;
  unsigned int v360;
  __int16 v361;
  unsigned int v362;
  __int16 v363;
  int v364;
  __int16 v365;
  int v366;

  v288 = (sub_10003C5EC(a1) & 1) != 0 || sub_100041D74(a1);
  v316 = a1;
  v292 = sub_100041D74(a1);
  v3 = sub_10003BE44();
  v286 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 616))(v3);
  v4 = sub_10003BE44();
  v285 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 648))(v4);
  v5 = sub_10003BE44();
  v295 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 824))(v5);
  v6 = sub_1000438A4();
  v289 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 2672))(v6);
  v311 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  *(_WORD *)a2 = 0;
  a2[2] = 0;
  *((_DWORD *)a2 + 2) = 0;
  *((_WORD *)a2 + 6) = 0;
  *(_DWORD *)(a2 + 14) = 256;
  a2[18] = 0;
  *((_DWORD *)a2 + 5) = 0;
  v282 = (unsigned __int16 *)(a2 + 20);
  *((_WORD *)a2 + 12) = 0;
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093F498);
  v7 = a1;
  v8 = sub_100046928((uint64_t)off_100977B38, 0, 1u);
  if (v8)
  {
    v9 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "coexStateBitmap:0x%llX", buf, 0xCu);
    }
  }
  v322 = 0;
  v10 = sub_100038E50();
  if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v10 + 120))(v10, &v322))
    v11 = 1;
  else
    v11 = v322 == 0;
  v12 = !v11;
  v279 = v12;
  v312 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v13 = *(_QWORD **)(v316 + 2040);
  v14 = &AMFDRSealingMapCopyLocalDictForClass_ptr;
  if (v13 != (_QWORD *)(v316 + 2048))
  {
    v283 = 0;
    v297 = 0;
    v284 = 0;
    v290 = 0;
    v15 = 0;
    v281 = 0;
    v280 = 0;
    v287 = 0;
    v310 = 0;
    v306 = 0;
    v296 = 0;
    v313 = 0;
    v307 = 0;
    v293 = 0;
    v294 = 3;
    v291 = 4;
    v16 = 0.0;
    v17 = 0.0;
    v304 = 3;
    v303 = 1;
    while (1)
    {
      v314 = v15;
      v18 = *(_DWORD *)(*(_QWORD *)(v13[5] + 8) + 168);
      memset(&buf[16], 0, 88);
      *(_OWORD *)buf = 0u;
      v19 = *(_QWORD *)(v13[5] + 8);
      v20 = *(_OWORD *)(v19 + 296);
      *(_OWORD *)buf = *(_OWORD *)(v19 + 280);
      *(_OWORD *)&buf[16] = v20;
      *(_OWORD *)&buf[28] = *(_OWORD *)(v19 + 308);
      sub_100685584(&buf[48], *(_QWORD *)(v19 + 328), *(_QWORD *)(v19 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v19 + 336) - *(_QWORD *)(v19 + 328)) >> 5));
      memset(&buf[72], 0, 24);
      sub_1000B61B8(&buf[72], *(__int128 **)(v19 + 352), *(__int128 **)(v19 + 360), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v19 + 360) - *(_QWORD *)(v19 + 352)) >> 2));
      buf[96] = *(_BYTE *)(v19 + 376);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(v13[5] + 8) + 3)));
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v22, CFSTR("isAllowedInScreenOff"));

      v23 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100038A04(v13[5]));
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v24, CFSTR("allowDupes"));

      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 0));
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v25, CFSTR("window"));

      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 0));
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v26, CFSTR("interval"));

      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0));
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v27, CFSTR("active"));

      v28 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100038A1C(v13[5]));
      v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v29, CFSTR("requiresActiveScan"));

      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v13[5] + 81) == 32));
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v30, CFSTR("daemon"));

      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v13[5] + 81) == 16));
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v31, CFSTR("ForegroundApp"));

      v32 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_1000340C8(v13[5]));
      v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v33, CFSTR("isAnyHWObjectDiscoveryEnabled"));

      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v16));
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v34, CFSTR("HWADVBufferWindowMs"));

      v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v17));
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v35, CFSTR("HWADVBufferIntervalMs"));

      v36 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100038A10(v13[5]));
      v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v37, CFSTR("isRangeScan"));

      v38 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_1000389F8(v13[5]));
      v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v39, CFSTR("isPriorityCritical"));

      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(v13[5] + 8) + 142)));
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v40, CFSTR("holdPowerAssert"));

      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(v13[5] + 8) + 143)));
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v41, CFSTR("isContactTracing"));

      v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v13[5] + 208)));
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v42, CFSTR("scanAgentType"));

      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v13[5] + 96)));
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v43, CFSTR("agentScanLevel"));

      v44 = objc_msgSend(v14[497], "stringWithUTF8String:", sub_100036ECC(v18));
      v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v45, CFSTR("usecase"));

      if (buf[8])
      {
        v46 = v14[497];
        sub_100038468(buf);
        v47 = v357[9] >= 0 ? v356 : *(_BYTE **)v356;
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "stringWithUTF8String:", v47));
        objc_msgSend(v21, "setObject:forKeyedSubscript:", v48, CFSTR("usecaseParams"));

        if ((v357[9] & 0x80000000) != 0)
          operator delete(*(void **)v356);
      }
      v49 = v14[497];
      sub_1000340DC(v13[4], (uint64_t)v356);
      if (v357[9] >= 0)
        v50 = v356;
      else
        v50 = *(_BYTE **)v356;
      v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "stringWithUTF8String:", v50));
      objc_msgSend(v311, "setObject:forKeyedSubscript:", v21, v51);

      if ((v357[9] & 0x80000000) != 0)
        operator delete(*(void **)v356);
      if (!sub_100038A28(v13[5]))
        goto LABEL_175;
      ++v310;
      v52 = v13[5];
      if (!*(_BYTE *)(*(_QWORD *)(v52 + 8) + 3) && *(_DWORD *)(v316 + 1964) == 2)
        goto LABEL_175;
      v53 = sub_1000340C8(v52);
      v54 = v13[5];
      v55 = *(_QWORD *)(v54 + 8);
      if (v53)
      {
        v56 = *(unsigned __int8 *)(v55 + 120);
        if (*(_BYTE *)(v55 + 120))
        {
          v58 = *(_DWORD *)(v55 + 128);
          v57 = *(_DWORD *)(v55 + 132);
          v59 = *(unsigned __int8 *)(v55 + 136);
        }
        else
        {
          v59 = 0;
          v57 = 0;
          v58 = 0;
        }
        v65 = v17;
        if (v65 < (float)v58)
          v65 = (float)v58;
        v17 = v65;
        v66 = v16;
        if (v66 < (float)v57)
          v66 = (float)v57;
        v16 = v66;
        v67 = qword_100999828;
        if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(v13[4], (uint64_t)v354);
          v68 = v354;
          if (v355 < 0)
            v68 = *(_BYTE **)v354;
          *(_DWORD *)v356 = 136447746;
          *(_QWORD *)&v356[4] = v68;
          *(_WORD *)&v356[12] = 2048;
          *(double *)v357 = v17;
          *(_WORD *)&v357[8] = 2048;
          v358 = v16;
          v359 = 1024;
          v360 = v58;
          v361 = 1024;
          v362 = v57;
          v363 = 1024;
          v364 = v59;
          v365 = 1024;
          v366 = v56;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "ObjectDiscovery Client (%{public}s) HWADVBufferIntervalMs:%f HWADVBufferWindowMs:%f _interval:%d _window:%d _active:%d specifiedParams:%d", v356, 0x38u);
          if (v355 < 0)
            operator delete(*(void **)v354);
          v54 = v13[5];
          v55 = *(_QWORD *)(v54 + 8);
        }
        v69 = 0;
        v70 = 0;
        v292 = 0;
        if (*(_QWORD *)(v55 + 16) != *(_QWORD *)(v55 + 8))
          v297 |= sub_100038A04(v54);
        goto LABEL_121;
      }
      if (*(_BYTE *)(v55 + 143))
      {
        if (*(_BYTE *)(v316 + 1255))
        {
          v60 = v17;
          if (v60 < 965.62)
            v60 = 965.62;
          v17 = v60;
          v61 = v16;
          if (v61 < 30.0)
            v61 = 30.0;
          v16 = v61;
          v62 = qword_100999828;
          if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000340DC(v13[4], (uint64_t)v354);
            v63 = v354;
            if (v355 < 0)
              v63 = *(_BYTE **)v354;
            *(_DWORD *)v356 = 136446722;
            *(_QWORD *)&v356[4] = v63;
            *(_WORD *)&v356[12] = 2048;
            *(double *)v357 = v17;
            *(_WORD *)&v357[8] = 2048;
            v358 = v16;
            _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "EN Client (%{public}s) HWADVBufferIntervalMs:%f HWADVBufferWindowMs:%f", v356, 0x20u);
            if (v355 < 0)
            {
              v64 = *(void **)v354;
              goto LABEL_73;
            }
          }
        }
        else
        {
          v74 = *(_DWORD *)(v54 + 96);
          if ((int)v291 >= v74)
            v75 = v74;
          else
            v75 = v291;
          v291 = v75;
          v297 |= sub_100038A04(v54);
          v76 = qword_100999948;
          if (os_log_type_enabled((os_log_t)qword_100999948, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000340DC(v13[4], (uint64_t)v356);
            v77 = v357[9] >= 0 ? v356 : *(_BYTE **)v356;
            *(_DWORD *)v354 = 136446210;
            *(_QWORD *)&v354[4] = v77;
            _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "EN Client (%{public}s) ", v354, 0xCu);
            if ((v357[9] & 0x80000000) != 0)
            {
              v64 = *(void **)v356;
LABEL_73:
              operator delete(v64);
            }
          }
        }
        v59 = 0;
        v69 = 0;
        v70 = 0;
        goto LABEL_121;
      }
      v71 = *(_DWORD *)(v55 + 168);
      if (v71 == 265 || (v72 = *(unsigned __int8 *)(v54 + 81), v72 == 32) || v72 == 16)
      {
        if ((sub_100038A04(v13[5]) & 1) != 0)
        {
          v73 = 1;
        }
        else
        {
          v78 = *(int8x8_t **)(v13[5] + 8);
          v354[0] = 1;
          v356[0] = 0;
          v73 = sub_100685BE4(v78 + 26, 0, (uint64_t)&v78[30], 0, v354) != 0;
        }
        v79 = v13[5];
        v80 = *(_QWORD **)(v79 + 8);
        if (v80[2] != v80[1]
          || v80[8] == v80[9]
          || (v93 = sub_10003BE44(),
              v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 592))(v93),
              v79 = v13[5],
              v71 == 265)
          || v94 != 1)
        {
          v297 |= sub_100038A04(v79);
        }
        else if (sub_100038A04(v79) && os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
        {
          sub_100718574(&v320, v321);
        }
        v284 |= v73;
        v81 = v13[5];
        if (*(_BYTE *)(v81 + 81) == 32)
        {
          v82 = sub_10003C804(v81);
          v83 = v71 == 265 || v82;
          v81 = v13[5];
          if ((v83 & 1) != 0)
          {
LABEL_88:
            v55 = *(_QWORD *)(v81 + 8);
            v86 = v316;
            if (*(_BYTE *)(v55 + 120))
            {
              v70 = *(unsigned int *)(v55 + 128);
              v69 = *(unsigned int *)(v55 + 132);
              v59 = *(unsigned __int8 *)(v55 + 136);
              v283 = (v59 | v283) != 0;
              if (*(_BYTE *)(v55 + 136))
              {
                v87 = qword_100999828;
                v81 = os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO);
                if ((_DWORD)v81)
                {
                  *(_DWORD *)v356 = 67109634;
                  *(_DWORD *)&v356[4] = v69;
                  *(_WORD *)&v356[8] = 1024;
                  *(_DWORD *)&v356[10] = v70;
                  *(_WORD *)v357 = 2082;
                  *(_QWORD *)&v357[2] = "active";
                  _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_INFO, "Daemon is requesting scan parameters %d/%d (%{public}s)", v356, 0x18u);
                }
              }
              if (v279)
              {
                v88 = sub_10067D6D8(v81, v13[5]);
                v86 = v316;
                if ((_DWORD)v88)
                {
                  v89 = sub_100046E20(v88, (int)((double)v70 / 0.625), (int)((double)v69 / 0.625));
                  if (v89 == 5)
                    v69 = 30;
                  else
                    v69 = v69;
                  if (v89 == 5)
                    v70 = 300;
                  else
                    v70 = v70;
                }
              }
              v90 = v314;
              if (!(_DWORD)v314 || v70 / v69 < (int)v290 / (int)v314)
              {
                v90 = v69;
                v290 = v70;
              }
              v314 = v90;
              v55 = *(_QWORD *)(v13[5] + 8);
              if (*(_BYTE *)(v55 + 273))
              {
                BYTE4(v281) = 1;
                if ((_DWORD)v290)
                {
                  if ((_DWORD)v90)
                  {
                    if ((_DWORD)v281)
                    {
                      v91 = v280;
                      v92 = v281;
                      if ((int)v281 / v280 < (int)v290 / (int)v90)
                      {
                        v91 = v90;
                        v92 = v290;
                      }
                      v280 = v91;
                      LODWORD(v281) = v92;
                      BYTE4(v281) = 1;
                    }
                    else
                    {
                      v280 = v90;
                      LODWORD(v281) = v290;
                      BYTE4(v281) = 1;
                    }
                  }
                }
              }
            }
            else
            {
              v59 = 0;
              v69 = 0;
              v70 = 0;
            }
            goto LABEL_119;
          }
        }
        else if (v71 == 265)
        {
          goto LABEL_88;
        }
        v59 = 0;
        v69 = 0;
        v70 = 0;
        v84 = *(_DWORD *)(v81 + 96);
        if ((int)v291 >= v84)
          v85 = v84;
        else
          v85 = v291;
        v291 = v85;
        v55 = *(_QWORD *)(v81 + 8);
      }
      else
      {
        v59 = 0;
        v69 = 0;
        v70 = 0;
      }
      v86 = v316;
LABEL_119:
      v288 = 0;
      v292 = 0;
      if (*(_BYTE *)(v55 + 3))
        v287 |= *(_DWORD *)(v86 + 1964) == 2;
LABEL_121:
      v95 = sub_1000389F8(v13[5]);
      v96 = v95;
      v97 = v295;
      if (byte_1009940AD)
        v97 = 0;
      if (v97 != 1)
        goto LABEL_146;
      if ((sub_100038F18(v316, v13[5]) & 1) != 0)
      {
        v313 = 1;
        v98 = v316;
      }
      else
      {
        v98 = v316;
        if (*(_BYTE *)(*(_QWORD *)(v13[5] + 8) + 200))
        {
          v99 = qword_100999828;
          if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v356 = 0;
            _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "Scanning Prioritization for double boost with allowed use cases.", v356, 2u);
          }
          v313 = 1;
        }
      }
      if (byte_1009940AE || sub_1006787FC(v98, v13[5]))
        v293 = v289 | v313;
      if (qword_100977B40 != -1)
        dispatch_once(&qword_100977B40, &stru_10093F498);
      v95 = sub_1004BAB08();
      if ((v313 & 1) == 0)
        goto LABEL_143;
      v100 = v95 & 0xFFFFFFFD;
      if ((_DWORD)v95 == 2)
      {
        v101 = sub_1000438A4();
        v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 2664))(v101);
        if (v100 == 1)
          v102 = 0;
        else
          v102 = v95;
        if ((v102 & 1) != 0)
        {
LABEL_145:
          v313 = 1;
          goto LABEL_146;
        }
      }
      else if (v100 != 1)
      {
        goto LABEL_145;
      }
      v293 &= v289;
      v103 = qword_100999828;
      v95 = os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT);
      v313 = 0;
      if ((v95 & 1) != 0)
      {
        *(_WORD *)v356 = 0;
        _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "Scanning Prioritization is not enabled with HIDs connected.", v356, 2u);
LABEL_143:
        v313 = 0;
      }
LABEL_146:
      if (*(_BYTE *)(v316 + 4384))
      {
        v95 = sub_10067D48C(v95, v13[5]);
        v296 |= v95;
      }
      v104 = sub_10067D964(v95, v13[5]);
      v105 = v306;
      if (v104 > v306)
        v105 = v104;
      v306 = v105;
      if ((v303 & 1) != 0)
        v303 = sub_100038A10(v13[5]);
      else
        v303 = 0;
      v106 = v13[5];
      v107 = *(_QWORD *)(v106 + 8);
      v108 = *(_BYTE *)(v107 + 139);
      if (!v108)
      {
        v108 = 1;
        *(_BYTE *)(v107 + 139) = 1;
      }
      a2[15] |= v108;
      v109 = *(_DWORD *)(v106 + 208);
      if (v109 == 3)
      {
        v110 = v304;
      }
      else
      {
        v110 = *(_DWORD *)(v106 + 208);
        if ((_DWORD)v304 != 3)
        {
          if ((_DWORD)v304 == v109)
            v110 = v304;
          else
            v110 = 2;
        }
      }
      v298 = v110;
      v294 = *(_DWORD *)(v106 + 208);
      v111 = *(unsigned __int8 *)(v107 + 145);
      if (v111 > a2[17])
        a2[17] = v111;
      v301 = v96;
      v305 = v59;
      v112 = v14[497];
      sub_1000340DC(v13[4], (uint64_t)v356);
      v113 = v357[9];
      v114 = *(_BYTE **)v356;
      v115 = objc_msgSend(v14[497], "defaultCStringEncoding");
      if (v113 >= 0)
        v116 = v356;
      else
        v116 = v114;
      v117 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "stringWithCString:encoding:", v116, v115));
      v299 = v70;
      v300 = v69;
      v302 = v21;
      if ((v357[9] & 0x80000000) != 0)
        operator delete(*(void **)v356);
      v118 = v14[497];
      v119 = v13[5];
      v120 = *(unsigned __int8 *)(*(_QWORD *)(v119 + 8) + 3);
      v121 = sub_100038A04(v119);
      v122 = sub_100038A1C(v13[5]);
      v123 = v13[5];
      v124 = *(unsigned __int8 *)(v123 + 81);
      v125 = v124 == 32;
      v126 = v124 == 16;
      v127 = sub_1000340C8(v123);
      if (sub_1000340C8(v13[5]))
        v128 = v16;
      else
        v128 = 0.0;
      if (sub_1000340C8(v13[5]))
        v129 = v17;
      else
        v129 = 0.0;
      v130 = sub_100038A10(v13[5]);
      v131 = objc_msgSend(v118, "stringWithFormat:", CFSTR("[%@] AP:%d AD:%d(%d/%d) AS:%d RAS:%d DMN:%d FG:%d ADVBF:%d(%.0f/%.0f) Rg:%d Cri:%d pBT:%d pwrAsrt:%d CT:%d type:%d level:%d"), v117, v120, v121, v300, v299, v305, v122, v125, v126, v127, *(_QWORD *)&v128, *(_QWORD *)&v129, v130, sub_1000389F8(v13[5]), v313 & 1, *(unsigned __int8 *)(*(_QWORD *)(v13[5] + 8) + 142),
               *(unsigned __int8 *)(*(_QWORD *)(v13[5] + 8) + 143),
               *(unsigned int *)(v13[5] + 208),
               *(unsigned int *)(v13[5] + 96));
      v132 = (void *)objc_claimAutoreleasedReturnValue(v131);
      objc_msgSend(v312, "addObject:", v132);

      v21 = v302;
      v14 = &AMFDRSealingMapCopyLocalDictForClass_ptr;

      v307 |= v301;
      v304 = v298;
LABEL_175:

      if (*(_QWORD *)&buf[72])
      {
        *(_QWORD *)&buf[80] = *(_QWORD *)&buf[72];
        operator delete(*(void **)&buf[72]);
      }
      *(_QWORD *)v356 = &buf[48];
      sub_1000B5524((void ***)v356);
      v133 = (_QWORD *)v13[1];
      v15 = v314;
      v7 = v316;
      if (v133)
      {
        do
        {
          v134 = v133;
          v133 = (_QWORD *)*v133;
        }
        while (v133);
      }
      else
      {
        do
        {
          v134 = (_QWORD *)v13[2];
          v11 = *v134 == (_QWORD)v13;
          v13 = v134;
        }
        while (!v11);
      }
      v13 = v134;
      if (v134 == (_QWORD *)(v316 + 2048))
        goto LABEL_186;
    }
  }
  v307 = 0;
  v313 = 0;
  v293 = 0;
  v296 = 0;
  v306 = 0;
  v310 = 0;
  v287 = 0;
  v280 = 0;
  v281 = 0;
  v15 = 0;
  v284 = 0;
  LOBYTE(v297) = 0;
  v283 = 0;
  v290 = 0;
  v291 = 4;
  v304 = 3;
  v17 = 0.0;
  v16 = 0.0;
  v303 = 1;
  v294 = 3;
LABEL_186:
  *(_DWORD *)(v7 + 3216) = v304;
  v309 = (v310 != 0) & v303;
  v308 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14[497], "stringWithFormat:", CFSTR("AD:%d RD:%d AS:%d PHYS:%d MSL:%d (%d/%d) PSV:%d Rg:%d Cri:%d pBT:%d pWiFi:%d pCfg:%d type:%d"), v297 & 1, *(unsigned __int8 *)(v7 + 2352), v283, a2[15], v291, v15, v290, *a2, v309, v307 & 1, v313 & 1, v293 & 1, a2[17], v304));
  v135 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
  {
    v136 = *(_QWORD *)(v7 + 2056);
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = v136;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v308;
    _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_DEFAULT, "ScanParams: numScanAgents %lu, combined params %{public}@", buf, 0x16u);
  }
  v315 = v15;
  v137 = objc_msgSend(v312, "count");
  if (v137 >= -1)
  {
    v138 = 0;
    v139 = v137 - 1;
    v140 = ((v137 - 1) / 3 + 1);
    v141 = 2;
    v142 = 1;
    do
    {
      if (v141 >= v139)
        v143 = v139;
      else
        v143 = v141;
      v144 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v312, "subarrayWithRange:", v138, v143 + v142));
      v145 = qword_100999828;
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
      {
        v146 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v144, "componentsJoinedByString:", CFSTR("|")));
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v146;
        _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_DEFAULT, "ScanParams: %{public}@", buf, 0xCu);

      }
      v141 += 3;
      v142 -= 3;
      v138 += 3;
      --v140;
    }
    while (v140);
  }
  if ((_DWORD)v291 == 1)
  {
    *((_DWORD *)a2 + 1) = 3145792;
    v147 = v315;
    v148 = BYTE4(v281);
    goto LABEL_205;
  }
  v147 = v315;
  v148 = BYTE4(v281);
  if ((_DWORD)v291 == 4)
  {
    *((_DWORD *)a2 + 1) = 3147273;
    *a2 = 1;
  }
  else
  {
    if ((_DWORD)v291 == 3)
    {
      v149 = 480;
    }
    else
    {
      if ((_DWORD)v291 != 2)
        goto LABEL_205;
      v149 = 96;
    }
    *((_DWORD *)a2 + 1) = v149 | 0x300000;
  }
LABEL_205:
  if ((_DWORD)v290)
    v150 = v147 == 0;
  else
    v150 = 1;
  v151 = !v150;
  if (v150)
  {
    v153 = *((unsigned __int16 *)a2 + 3);
    v152 = *((unsigned __int16 *)a2 + 2);
  }
  else
  {
    if (v283)
      *a2 = 0;
    v152 = *((unsigned __int16 *)a2 + 2);
    v153 = *((unsigned __int16 *)a2 + 3);
    if ((int)v290 / v147 <= (int)(v152 / v153))
    {
      v152 = (int)((double)(int)v290 / 0.625);
      *((_WORD *)a2 + 2) = v152;
      v153 = (int)((double)v147 / 0.625);
      *((_WORD *)a2 + 3) = v153;
    }
  }
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093F498);
  v154 = sub_1000468F8(off_100977B38);
  v155 = sub_10003BE44();
  v156 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 960))(v155);
  if (((v154 | v156 ^ 1) & 1) != 0)
    v157 = 0;
  else
    v157 = _os_feature_enabled_impl("BluetoothFeatures", "ScanCorePolicyV2");
  *(_DWORD *)v356 = 100;
  if ((int)v281 / v280 == *((unsigned __int16 *)a2 + 2) / *((unsigned __int16 *)a2 + 3)
    && _os_feature_enabled_impl("BluetoothFeatures", "ScanCorePolicyV2"))
  {
    v157 |= v148;
  }
  if (!v154)
  {
    v158 = sub_100016B48();
    v159 = 100 * v153 / v152;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 96))(v158) & 1) != 0)
      goto LABEL_229;
    if ((_DWORD)v291 == 1)
    {
      if (v159 < 0x33)
        goto LABEL_229;
    }
    else
    {
      if (v159 > 0x32)
        v163 = v151;
      else
        v163 = 0;
      if ((v163 & 1) == 0)
      {
LABEL_229:
        if (v159 < 0x22)
        {
          v157 = 0;
        }
        else
        {
          v160 = qword_100999828;
          if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
          {
            LOWORD(v161) = *((_WORD *)a2 + 3);
            LOWORD(v162) = *((_WORD *)a2 + 2);
            *(_DWORD *)buf = 134219264;
            *(double *)&buf[4] = (double)v161 * 0.625;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = (double)v162 * 0.625;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = v159;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = 0x403E000000000000;
            *(_WORD *)&buf[38] = 2048;
            *(_QWORD *)&buf[40] = 0x4056800000000000;
            *(_WORD *)&buf[48] = 1024;
            *(_DWORD *)&buf[50] = v291;
            _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_INFO, "Limiting scan duty cycle based on other activities from %.2fms/%.2fms (scanPercentage %d)to %.2fms/%.2fms minScanLevel %d", buf, 0x36u);
          }
          *((_DWORD *)a2 + 1) = 3145872;
          v356[0] = ((3 * v159) >> 1) - 50;
        }
        goto LABEL_241;
      }
    }
    v164 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
    {
      LOWORD(v165) = *((_WORD *)a2 + 3);
      LOWORD(v166) = *((_WORD *)a2 + 2);
      *(_DWORD *)buf = 134219264;
      *(double *)&buf[4] = (double)v165 * 0.625;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = (double)v166 * 0.625;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v159;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = 0x403E000000000000;
      *(_WORD *)&buf[38] = 2048;
      *(_QWORD *)&buf[40] = 0x404E000000000000;
      *(_WORD *)&buf[48] = 1024;
      *(_DWORD *)&buf[50] = v291;
      _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_INFO, "Limiting scan duty cycle based on other activities from %.2fms/%.2fms (scanPercentage %d)to %.2fms/%.2fms minScanLevel %d", buf, 0x36u);
    }
    *((_DWORD *)a2 + 1) = 3145824;
  }
LABEL_241:
  if (*(_QWORD *)(v316 + 2344))
  {
    if (qword_10097B180 != -1)
      dispatch_once(&qword_10097B180, &stru_10093F518);
    v167 = sub_10041C778((uint64_t)off_10097B178);
    *((_WORD *)a2 + 2) = v167;
    *((_WORD *)a2 + 3) = 48;
    v168 = qword_100999948;
    if (os_log_type_enabled((os_log_t)qword_100999948, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v167;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = 48;
      _os_log_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_INFO, "ExposureNotification scan active, setting params interval:%d window:%d", buf, 0xEu);
    }
    v288 = 0;
    v157 = 0;
  }
  if (!*a2 && !((*(_BYTE *)(v316 + 144) != 0) | v287 & 1))
  {
    v169 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_DEFAULT, "Forcing passive scans based on screen state", buf, 2u);
    }
    *a2 = 1;
    if (*(_BYTE *)(v316 + 2246))
    {
      v170 = qword_100999828;
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
      {
        v171 = *(unsigned __int8 *)(v316 + 2247);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v171;
        _os_log_impl((void *)&_mh_execute_header, v170, OS_LOG_TYPE_DEFAULT, "ForcePassiveScan is now %d", buf, 8u);
      }
      *a2 = *(_BYTE *)(v316 + 2247);
    }
  }
  if (v288)
  {
    v172 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v17;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v16;
      _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_INFO, "ADV buffer only, overriding settings HWADVBufferIntervalMs:%f HWADVBufferWindowMs:%f", buf, 0x16u);
    }
    v157 = 0;
    *((_WORD *)a2 + 2) = (int)(v17 / 0.625);
    *((_WORD *)a2 + 3) = (int)(v16 / 0.625);
    *a2 = 1;
  }
  v173 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v173 + 2720))(v173))
  {
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_10093F498);
    if (*((_BYTE *)off_100977B38 + 201))
    {
      v174 = *((unsigned __int16 *)a2 + 3);
      v175 = *((unsigned __int16 *)a2 + 2);
      if (100 * v174 / v175 >= 0xB)
      {
        v176 = qword_100999828;
        if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134219264;
          *(double *)&buf[4] = (double)v174 * 0.625;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = (double)v175 * 0.625;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 100 * v174 / v175;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = 0x403E000000000000;
          *(_WORD *)&buf[38] = 2048;
          *(_QWORD *)&buf[40] = 0x4072C00000000000;
          *(_WORD *)&buf[48] = 1024;
          *(_DWORD *)&buf[50] = v291;
          _os_log_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_INFO, "Limiting scan duty cycle due to BT ACL protect mode from %.2fms/%.2fms (scanPercentage %d)to %.2fms/%.2fms minScanLevel %d", buf, 0x36u);
        }
        *((_DWORD *)a2 + 1) = 3146208;
      }
    }
  }
  v177 = *(double *)(v316 + 2336);
  if (v292)
  {
    if (v177 == 0.0)
    {
      Current = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(v316 + 2336) = Current;
      *(CFAbsoluteTime *)(v316 + 2328) = Current;
    }
  }
  else
  {
    if (v177 != 0.0)
    {
      v179 = CFAbsoluteTimeGetCurrent();
      *(_QWORD *)(v316 + 2304) = (unint64_t)(v179
                                                  - *(double *)(v316 + 2336)
                                                  + (double)*(unint64_t *)(v316 + 2304));
      *(CFAbsoluteTime *)(v316 + 2336) = v179;
    }
    *(_QWORD *)(v316 + 2336) = 0;
  }
  if ((v286 | v285) == 1
    && (*((unsigned __int16 *)a2 + 3) == 0xFFFF || !*((_WORD *)a2 + 3))
    && sub_10003C5EC(v316))
  {
    *((_WORD *)a2 + 2) = 4800;
  }
  v180 = v148 | v157;
  v181 = 100 * *((unsigned __int16 *)a2 + 3) / *((unsigned __int16 *)a2 + 2);
  if (v181 < 0x1E)
  {
    if (((v313 | v293) & 1) != 0)
    {
      v182 = qword_100999828;
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
      {
        v183 = "No";
        if ((v313 & 1) != 0)
          v184 = "Yes";
        else
          v184 = "No";
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v184;
        if ((v293 & 1) != 0)
          v183 = "Yes";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v183;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v181;
        _os_log_impl((void *)&_mh_execute_header, v182, OS_LOG_TYPE_DEFAULT, "Do not prioritize scanning over BT %s WiFi %s for scan duty cycle %u.", buf, 0x1Cu);
      }
    }
  }
  else
  {
    a2[24] = v313 & 1;
    a2[25] = v293 & 1;
  }
  v185 = v316;
  if (*(_BYTE *)(v316 + 4384))
  {
    v186 = *((unsigned __int16 *)a2 + 3);
    v187 = *((unsigned __int16 *)a2 + 2);
    v188 = (double)v186 * 100.0 / (double)v187;
    v189 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = v186;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v187;
      *(_WORD *)&buf[14] = 2048;
      *(double *)&buf[16] = (double)v186 * 100.0 / (double)v187;
      *(_WORD *)&buf[24] = 2048;
      *(_QWORD *)&buf[26] = 0x4008DAB7EC1DD343;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v188 > 3.10679612;
      _os_log_impl((void *)&_mh_execute_header, v189, OS_LOG_TYPE_DEFAULT, "Checking if throttling down our scan during SDP is needed window:%d interval:%d dutyCycle:%f throttledDutyCycle:%f needToThrottle:%d", buf, 0x28u);
    }
    if (v188 <= 3.10679612)
    {
      v185 = v316;
    }
    else
    {
      v190 = qword_100999828;
      v185 = v316;
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v190, OS_LOG_TYPE_DEFAULT, "Throttling down our scan during SDP", buf, 2u);
      }
      *((_DWORD *)a2 + 1) = 3147273;
      if ((v296 & 1) != 0)
      {
        *(_DWORD *)v356 = 72745216;
        v180 = 1;
      }
    }
  }
  if (!*a2)
  {
    a2[3] = (v284 & 1) == 0;
    if ((v284 & 1) == 0)
      goto LABEL_300;
    goto LABEL_299;
  }
  a2[3] = (v297 & 1) == 0;
  if ((v297 & 1) != 0)
LABEL_299:
    *(_BYTE *)(v185 + 2352) = 0;
LABEL_300:
  v191 = *((unsigned __int16 *)a2 + 2);
  if (v191 != 48)
  {
    if (*((_WORD *)a2 + 2))
    {
      v192 = *((unsigned __int16 *)a2 + 3);
      if (*((_WORD *)a2 + 3))
      {
        if (v192 == v191)
        {
          if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
            sub_10071850C(v192);
          v185 = v316;
          *((_DWORD *)a2 + 1) = 3145776;
        }
      }
    }
  }
  if ((v180 & (*a2 != 0)) == 0)
  {
    v356[0] = 0;
    *(_WORD *)&v356[2] = 0;
  }
  if (v306)
  {
    v193 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      v194 = "No";
      if (v279)
        v194 = "Yes";
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v322;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v194;
      _os_log_impl((void *)&_mh_execute_header, v193, OS_LOG_TYPE_DEFAULT, "powerSource %d is wall powered %s\n", buf, 0x12u);
    }
  }
  sub_10067CFBC(v185, a2, v286, v285, v307 & 1, v309, (uint64_t)v356, v306);
  v195 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v195 + 2680))(v195, *((unsigned __int16 *)a2 + 2), *((unsigned __int16 *)a2 + 3)))
  {
    a2[25] = 1;
  }
  v196 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v197) = *((_WORD *)a2 + 3);
    *(double *)&v198 = (double)v197;
    v199 = *(double *)&v198 * 0.625;
    LOWORD(v198) = *((_WORD *)a2 + 2);
    *(double *)&v200 = (double)v198;
    v201 = *(double *)&v200 * 0.625;
    LOWORD(v200) = *((_WORD *)a2 + 4);
    v202 = (double)v200;
    v203 = v202 * 0.625;
    if (v286)
      v204 = "supported";
    else
      v204 = "unsupported";
    LOWORD(v202) = *((_WORD *)a2 + 6);
    *(double *)&v205 = (double)*(unint64_t *)&v202;
    v206 = *(double *)&v205 * 0.625;
    LOWORD(v205) = *((_WORD *)a2 + 5);
    v207 = (double)v205 * 0.625;
    if (a2[14])
      v208 = "concurrent";
    else
      v208 = "non-concurrent";
    if (v285)
      v209 = "supported";
    else
      v209 = "unspported";
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_10093F498);
    v210 = *((unsigned __int8 *)off_100977B38 + 204);
    v211 = *(unsigned __int8 *)(v316 + 144);
    v212 = "passive";
    if (!*a2)
      v212 = "active";
    if (a2[3])
      v213 = "Enabled";
    else
      v213 = "Disabled";
    v214 = *((unsigned __int16 *)a2 + 10);
    v215 = *((unsigned __int16 *)a2 + 11);
    v216 = "Yes";
    v217 = a2[24];
    if (v154)
      v218 = "Yes";
    else
      v218 = "No";
    v219 = a2[25];
    if (!a2[18])
      v216 = "No";
    *(_DWORD *)buf = 134224642;
    *(double *)&buf[4] = v199;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v201;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&buf[24] = v203;
    *(_WORD *)&buf[32] = 2048;
    *(double *)&buf[34] = v201;
    *(_WORD *)&buf[42] = 2082;
    *(_QWORD *)&buf[44] = v204;
    *(_WORD *)&buf[52] = 2048;
    *(double *)&buf[54] = v206;
    *(_WORD *)&buf[62] = 2048;
    *(double *)&buf[64] = v207;
    *(_WORD *)&buf[72] = 2082;
    *(_QWORD *)&buf[74] = v208;
    *(_WORD *)&buf[82] = 2082;
    *(_QWORD *)&buf[84] = v209;
    *(_WORD *)&buf[92] = 1024;
    *(_DWORD *)&buf[94] = v315;
    *(_WORD *)&buf[98] = 1024;
    *(_DWORD *)&buf[100] = v290;
    *(_WORD *)v324 = 1024;
    *(_DWORD *)&v324[2] = v210;
    *(_WORD *)v325 = 1024;
    *(_DWORD *)&v325[2] = v154;
    v326 = 1024;
    v327 = v156;
    v328 = 1024;
    v329 = v180 & 1;
    v330 = 1024;
    v331 = v287 & 1;
    v332 = 1024;
    v333 = v211;
    v334 = 2082;
    v335 = v212;
    v336 = 2082;
    v337 = v213;
    v338 = 1024;
    v339 = v291;
    v340 = 2082;
    v341 = v218;
    v342 = 2082;
    v343 = v216;
    v344 = 1024;
    v345 = v214;
    v346 = 1024;
    v347 = v215;
    v348 = 1024;
    v349 = v217;
    v350 = 1024;
    v351 = v219;
    v352 = 1024;
    v353 = v322;
    _os_log_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_DEFAULT, "Returning scan parameters: Main:%.2fms/%.2fms LP:%.2fms/%.2fms(%{public}s) SC:%.2fms/%.2fms/%{public}s(%{public}s) Dm:(m:%d/%d) Cond:%d:%d:%d:%d:%d Sc:%d (%{public}s) Dupfilter:%{public}s minScanLevel:%d HD:%{public}s Comp:%{public}s(%d,%d) Pri:%d/%d PS:%d", buf, 0xD8u);
  }
  if (*(_BYTE *)(v316 + 2222))
  {
    v220 = *(unsigned __int16 *)(v316 + 2224);
    *((_WORD *)a2 + 2) = v220;
    v221 = *(unsigned __int16 *)(v316 + 2226);
    *((_WORD *)a2 + 3) = v221;
    v222 = *(unsigned __int16 *)(v316 + 2228);
    *((_WORD *)a2 + 4) = v222;
    v223 = *(_BYTE *)(v316 + 2230) ? *(_WORD *)(v316 + 2232) : 0;
    v224 = *(_BYTE *)(v316 + 2230) ? 0 : *(_WORD *)(v316 + 2232);
    *((_WORD *)a2 + 6) = v223;
    *((_WORD *)a2 + 5) = v224;
    v225 = *(unsigned __int8 *)(v316 + 2234);
    a2[14] = v225;
    v226 = *(_BYTE *)(v316 + 2235) && *(_BYTE *)(v316 + 2238) != 0;
    a2[18] = v226;
    v227 = *(_BYTE *)(v316 + 2236) ? *(unsigned __int16 *)(v316 + 2240) : 0;
    *v282 = v227;
    v228 = *(_BYTE *)(v316 + 2237) ? *(unsigned __int16 *)(v316 + 2242) : 0;
    *((_WORD *)a2 + 11) = v228;
    v229 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67112450;
      v230 = "Yes";
      *(_DWORD *)&buf[4] = v220;
      *(_WORD *)&buf[8] = 2048;
      if (v225)
        v231 = "Yes";
      else
        v231 = "No";
      *(double *)&buf[10] = (double)v220 * 0.625;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v221;
      if (!v226)
        v230 = "No";
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v222;
      *(_WORD *)&buf[30] = 1024;
      *(_DWORD *)&buf[32] = v223;
      *(_WORD *)&buf[36] = 1024;
      *(_DWORD *)&buf[38] = v224;
      *(_WORD *)&buf[42] = 2048;
      *(double *)&buf[44] = (double)v221 * 0.625;
      *(_WORD *)&buf[52] = 2048;
      *(double *)&buf[54] = (double)v222 * 0.625;
      *(_WORD *)&buf[62] = 2048;
      *(double *)&buf[64] = (double)v223 * 0.625;
      *(_WORD *)&buf[72] = 2048;
      *(double *)&buf[74] = (double)v224 * 0.625;
      *(_WORD *)&buf[82] = 2082;
      *(_QWORD *)&buf[84] = v231;
      *(_WORD *)&buf[92] = 2082;
      *(_QWORD *)&buf[94] = v230;
      *(_WORD *)&buf[102] = 1024;
      *(_DWORD *)v324 = v227;
      *(_WORD *)&v324[4] = 1024;
      *(_DWORD *)v325 = v228;
      _os_log_impl((void *)&_mh_execute_header, v229, OS_LOG_TYPE_DEFAULT, "Returning scan parameters (overridden with ScanCore) Interval %d(%.2fms) Window %d/%d/%d/%d(%.2fms/%.2fms/%.2fms/%.2fms) Concurrent %{public}s Compensation %{public}s percent %d query %d", buf, 0x72u);
    }
  }
  v232 = *((unsigned __int16 *)a2 + 3);
  v233 = *((unsigned __int16 *)a2 + 2);
  v234 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v235 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *a2));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v235, CFSTR("scanParams.passive"));

  v236 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[1]));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v236, CFSTR("scanParams.limited"));

  v237 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[3]));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v237, CFSTR("scanParams.filterDups"));

  LOWORD(v238) = *((_WORD *)a2 + 2);
  v239 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)v238 * 0.625));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v239, CFSTR("scanParams.interval"));

  LOWORD(v240) = *((_WORD *)a2 + 3);
  v241 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)v240 * 0.625));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v241, CFSTR("scanParams.window"));

  LOWORD(v242) = *((_WORD *)a2 + 4);
  v243 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)v242 * 0.625));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v243, CFSTR("scanParams.windowLPCore"));

  LOWORD(v244) = *((_WORD *)a2 + 5);
  v245 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)v244 * 0.625));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v245, CFSTR("scanParams.windowScanCoreELNABypass"));

  LOWORD(v246) = *((_WORD *)a2 + 6);
  v247 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)v246 * 0.625));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v247, CFSTR("scanParams.windowScanCoreELNAOn"));

  v248 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[14]));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v248, CFSTR("scanParams.concurrencyMode"));

  v249 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a2[15]));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v249, CFSTR("scanParams.scanningPhys"));

  v250 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[16]));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v250, CFSTR("scanParams.retainDuplicates"));

  v251 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a2[17]));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v251, CFSTR("scanParams.priorityConfig"));

  v252 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[18]));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v252, CFSTR("scanParams.isScanCoreCompensated"));

  v253 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *v282));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v253, CFSTR("scanParams.scanCoreCompensationPercent"));

  v254 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *((unsigned __int16 *)a2 + 11)));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v254, CFSTR("scanParams.scanCoreCoexQueryPeriod"));

  v255 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[24]));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v255, CFSTR("scanParams.isPrioritizedOverBT"));

  v256 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[25]));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v256, CFSTR("scanParams.isPrioritizedOverWiFi"));

  v257 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v316 + 144)));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v257, CFSTR("fScreenState"));

  v258 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v290));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v258, CFSTR("daemonInterval"));

  v259 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v315));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v259, CFSTR("daemonWindow"));

  v260 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v291));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v260, CFSTR("minScanLevel"));

  v261 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 100 * v232 / v233));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v261, CFSTR("scanPercentage"));

  v262 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v287 & 1));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v262, CFSTR("allowInPause"));

  v263 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v288));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v263, CFSTR("onlyDoingHWADVBuffer"));

  v264 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v292));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v264, CFSTR("onlyDoingENHWADVBuffer"));

  v265 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v17));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v265, CFSTR("HWADVBufferIntervalMs"));

  v266 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v16));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v266, CFSTR("HWADVBufferWindowMs"));

  v267 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v286));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v267, CFSTR("scanLPCoreEnable"));

  v268 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v285));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v268, CFSTR("isScanCoreEnabled"));

  v269 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v295));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v269, CFSTR("supportsDiscoveryScanPrioritization"));

  v270 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v309));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v270, CFSTR("isRangeScan"));

  v271 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v307 & 1));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v271, CFSTR("isPriorityCritical"));

  v272 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v304));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v272, CFSTR("combinedScanAgentType"));

  v273 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v294));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v273, CFSTR("scanAgentType"));

  v274 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v313 & 1));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v274, CFSTR("isPrioritizedOverBT"));

  v275 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v293 & 1));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v275, CFSTR("isPrioritizedOverWiFi"));

  v276 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v316 + 1964)));
  objc_msgSend(v234, "setObject:forKeyedSubscript:", v276, CFSTR("fObserverState"));

  objc_msgSend(v311, "setObject:forKeyedSubscript:", v234, CFSTR("Controller"));
  v318[0] = _NSConcreteStackBlock;
  v318[1] = 3221225472;
  v318[2] = sub_10003F3A4;
  v318[3] = &unk_10093F1D8;
  v277 = v311;
  v319 = v277;
  sub_10003F2E8((os_unfair_lock_s *)(v316 + 1872), v318);

  return 1;
}

void sub_100033CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a68;
  void *a69;

  _Unwind_Resume(a1);
}

BOOL sub_1000340C8(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 8) + 122) != 0;
}

uint64_t sub_1000340DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  if (*(char *)(a1 + 103) < 0)
  {
    sub_10003430C((_BYTE *)a2, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 96);
  }
  return sub_100034234((uint64_t)v5);
}

void sub_100034148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10003415C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  sub_100034188(a1);
  return a1;
}

void sub_100034188(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006D9B24(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  *(_BYTE *)(a1 + 8) = 1;
  sub_1000341E4(*(pthread_mutex_t **)a1);
}

void sub_1000341E4(pthread_mutex_t *a1)
{
  if (pthread_mutex_lock(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006D9A64();
  }
}

uint64_t sub_100034234(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    sub_100034264(a1);
  return a1;
}

void sub_100034264(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 8))
  {
    v2 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006D9B98(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  *(_BYTE *)(a1 + 8) = 0;
  sub_1000342BC(*(pthread_mutex_t **)a1);
}

void sub_1000342BC(pthread_mutex_t *a1)
{
  if (pthread_mutex_unlock(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006D9AC4();
  }
}

void *sub_10003430C(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

const char *sub_100034394(int a1)
{
  const char *result;

  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 >= 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589824:
              return "FindNearbyRemote";
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              result = "InternalTestActiveScan";
              break;
            case 2147418118:
              result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            result = "ADPD";
            break;
          case 524289:
            result = "ADPDBuffer";
            break;
          case 524290:
            result = "MicroLocation";
            break;
          case 524291:
            result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 458754)
                return "?";
              result = "PrecisionFindingFindeeHighPriority";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            result = "CaptiveNetworkJoin";
            break;
          case 393217:
            result = "UseCaseSIMTransfer";
            break;
          case 393218:
            result = "MacSetup";
            break;
          case 393219:
            result = "AppleIDSignIn";
            break;
          case 393220:
            result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752)
                return "?";
              result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000)
              return "?";
            result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else
  {
    result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "HealthKit";
        break;
      case 2:
        result = "HomeKit";
        break;
      case 3:
        result = "FindMyObjectConnection";
        break;
      case 4:
        result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        result = "MIDI";
        break;
      case 6:
        result = "Continuity";
        break;
      case 7:
        result = "InstantHotSpot";
        break;
      case 8:
        result = "NearBy";
        break;
      case 9:
        result = "Sharing";
        break;
      case 10:
        result = "HearingSupport";
        break;
      case 11:
        result = "Magnet";
        break;
      case 12:
        result = "HID";
        break;
      case 13:
        result = "LEA";
        break;
      case 14:
        result = "External";
        break;
      case 15:
        result = "ExternalMedical";
        break;
      case 16:
        result = "ExternalLock";
        break;
      case 17:
        result = "ExternalWatch";
        break;
      case 18:
        result = "SmartRouting";
        break;
      case 19:
        result = "DigitalID";
        break;
      case 20:
        result = "DigitalKey";
        break;
      case 21:
        result = "DigitalCarKey";
        break;
      case 22:
        result = "HeySiri";
        break;
      case 23:
        result = "ThirdPartyApp";
        break;
      case 24:
        result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            result = "DevicePresenceDetection";
            break;
          case 257:
            result = "AudioBox";
            break;
          case 258:
            result = "SIMTransfer";
            break;
          case 259:
            result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            result = "MacMigrate";
            break;
          case 263:
            result = "HIDUARTService";
            break;
          case 264:
            result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            result = "BaseBandFastConnect";
            break;
          case 266:
            result = "SafetyAlerts";
            break;
          case 267:
            result = "LECarPlay";
            break;
          case 268:
            result = "TCCBluetooth";
            break;
          case 269:
            result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_100034AC8(int a1)
{
  const char *result;

  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 >= 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589824:
              return "FindNearbyRemote";
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              result = "InternalTestActiveScan";
              break;
            case 2147418118:
              result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            result = "ADPD";
            break;
          case 524289:
            result = "ADPDBuffer";
            break;
          case 524290:
            result = "MicroLocation";
            break;
          case 524291:
            result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 458754)
                return "?";
              result = "PrecisionFindingFindeeHighPriority";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            result = "CaptiveNetworkJoin";
            break;
          case 393217:
            result = "UseCaseSIMTransfer";
            break;
          case 393218:
            result = "MacSetup";
            break;
          case 393219:
            result = "AppleIDSignIn";
            break;
          case 393220:
            result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752)
                return "?";
              result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000)
              return "?";
            result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else
  {
    result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "HealthKit";
        break;
      case 2:
        result = "HomeKit";
        break;
      case 3:
        result = "FindMyObjectConnection";
        break;
      case 4:
        result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        result = "MIDI";
        break;
      case 6:
        result = "Continuity";
        break;
      case 7:
        result = "InstantHotSpot";
        break;
      case 8:
        result = "NearBy";
        break;
      case 9:
        result = "Sharing";
        break;
      case 10:
        result = "HearingSupport";
        break;
      case 11:
        result = "Magnet";
        break;
      case 12:
        result = "HID";
        break;
      case 13:
        result = "LEA";
        break;
      case 14:
        result = "External";
        break;
      case 15:
        result = "ExternalMedical";
        break;
      case 16:
        result = "ExternalLock";
        break;
      case 17:
        result = "ExternalWatch";
        break;
      case 18:
        result = "SmartRouting";
        break;
      case 19:
        result = "DigitalID";
        break;
      case 20:
        result = "DigitalKey";
        break;
      case 21:
        result = "DigitalCarKey";
        break;
      case 22:
        result = "HeySiri";
        break;
      case 23:
        result = "ThirdPartyApp";
        break;
      case 24:
        result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            result = "DevicePresenceDetection";
            break;
          case 257:
            result = "AudioBox";
            break;
          case 258:
            result = "SIMTransfer";
            break;
          case 259:
            result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            result = "MacMigrate";
            break;
          case 263:
            result = "HIDUARTService";
            break;
          case 264:
            result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            result = "BaseBandFastConnect";
            break;
          case 266:
            result = "SafetyAlerts";
            break;
          case 267:
            result = "LECarPlay";
            break;
          case 268:
            result = "TCCBluetooth";
            break;
          case 269:
            result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_1000351FC(int a1)
{
  const char *result;

  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 >= 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589824:
              return "FindNearbyRemote";
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              result = "InternalTestActiveScan";
              break;
            case 2147418118:
              result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            result = "ADPD";
            break;
          case 524289:
            result = "ADPDBuffer";
            break;
          case 524290:
            result = "MicroLocation";
            break;
          case 524291:
            result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 458754)
                return "?";
              result = "PrecisionFindingFindeeHighPriority";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            result = "CaptiveNetworkJoin";
            break;
          case 393217:
            result = "UseCaseSIMTransfer";
            break;
          case 393218:
            result = "MacSetup";
            break;
          case 393219:
            result = "AppleIDSignIn";
            break;
          case 393220:
            result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752)
                return "?";
              result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000)
              return "?";
            result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else
  {
    result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "HealthKit";
        break;
      case 2:
        result = "HomeKit";
        break;
      case 3:
        result = "FindMyObjectConnection";
        break;
      case 4:
        result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        result = "MIDI";
        break;
      case 6:
        result = "Continuity";
        break;
      case 7:
        result = "InstantHotSpot";
        break;
      case 8:
        result = "NearBy";
        break;
      case 9:
        result = "Sharing";
        break;
      case 10:
        result = "HearingSupport";
        break;
      case 11:
        result = "Magnet";
        break;
      case 12:
        result = "HID";
        break;
      case 13:
        result = "LEA";
        break;
      case 14:
        result = "External";
        break;
      case 15:
        result = "ExternalMedical";
        break;
      case 16:
        result = "ExternalLock";
        break;
      case 17:
        result = "ExternalWatch";
        break;
      case 18:
        result = "SmartRouting";
        break;
      case 19:
        result = "DigitalID";
        break;
      case 20:
        result = "DigitalKey";
        break;
      case 21:
        result = "DigitalCarKey";
        break;
      case 22:
        result = "HeySiri";
        break;
      case 23:
        result = "ThirdPartyApp";
        break;
      case 24:
        result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            result = "DevicePresenceDetection";
            break;
          case 257:
            result = "AudioBox";
            break;
          case 258:
            result = "SIMTransfer";
            break;
          case 259:
            result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            result = "MacMigrate";
            break;
          case 263:
            result = "HIDUARTService";
            break;
          case 264:
            result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            result = "BaseBandFastConnect";
            break;
          case 266:
            result = "SafetyAlerts";
            break;
          case 267:
            result = "LECarPlay";
            break;
          case 268:
            result = "TCCBluetooth";
            break;
          case 269:
            result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_100035930(int a1)
{
  const char *result;

  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 >= 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589824:
              return "FindNearbyRemote";
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              result = "InternalTestActiveScan";
              break;
            case 2147418118:
              result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            result = "ADPD";
            break;
          case 524289:
            result = "ADPDBuffer";
            break;
          case 524290:
            result = "MicroLocation";
            break;
          case 524291:
            result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 458754)
                return "?";
              result = "PrecisionFindingFindeeHighPriority";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            result = "CaptiveNetworkJoin";
            break;
          case 393217:
            result = "UseCaseSIMTransfer";
            break;
          case 393218:
            result = "MacSetup";
            break;
          case 393219:
            result = "AppleIDSignIn";
            break;
          case 393220:
            result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752)
                return "?";
              result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000)
              return "?";
            result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else
  {
    result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "HealthKit";
        break;
      case 2:
        result = "HomeKit";
        break;
      case 3:
        result = "FindMyObjectConnection";
        break;
      case 4:
        result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        result = "MIDI";
        break;
      case 6:
        result = "Continuity";
        break;
      case 7:
        result = "InstantHotSpot";
        break;
      case 8:
        result = "NearBy";
        break;
      case 9:
        result = "Sharing";
        break;
      case 10:
        result = "HearingSupport";
        break;
      case 11:
        result = "Magnet";
        break;
      case 12:
        result = "HID";
        break;
      case 13:
        result = "LEA";
        break;
      case 14:
        result = "External";
        break;
      case 15:
        result = "ExternalMedical";
        break;
      case 16:
        result = "ExternalLock";
        break;
      case 17:
        result = "ExternalWatch";
        break;
      case 18:
        result = "SmartRouting";
        break;
      case 19:
        result = "DigitalID";
        break;
      case 20:
        result = "DigitalKey";
        break;
      case 21:
        result = "DigitalCarKey";
        break;
      case 22:
        result = "HeySiri";
        break;
      case 23:
        result = "ThirdPartyApp";
        break;
      case 24:
        result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            result = "DevicePresenceDetection";
            break;
          case 257:
            result = "AudioBox";
            break;
          case 258:
            result = "SIMTransfer";
            break;
          case 259:
            result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            result = "MacMigrate";
            break;
          case 263:
            result = "HIDUARTService";
            break;
          case 264:
            result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            result = "BaseBandFastConnect";
            break;
          case 266:
            result = "SafetyAlerts";
            break;
          case 267:
            result = "LECarPlay";
            break;
          case 268:
            result = "TCCBluetooth";
            break;
          case 269:
            result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_100036064(int a1)
{
  const char *result;

  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 >= 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589824:
              return "FindNearbyRemote";
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              result = "InternalTestActiveScan";
              break;
            case 2147418118:
              result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            result = "ADPD";
            break;
          case 524289:
            result = "ADPDBuffer";
            break;
          case 524290:
            result = "MicroLocation";
            break;
          case 524291:
            result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 458754)
                return "?";
              result = "PrecisionFindingFindeeHighPriority";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            result = "CaptiveNetworkJoin";
            break;
          case 393217:
            result = "UseCaseSIMTransfer";
            break;
          case 393218:
            result = "MacSetup";
            break;
          case 393219:
            result = "AppleIDSignIn";
            break;
          case 393220:
            result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752)
                return "?";
              result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000)
              return "?";
            result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else
  {
    result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "HealthKit";
        break;
      case 2:
        result = "HomeKit";
        break;
      case 3:
        result = "FindMyObjectConnection";
        break;
      case 4:
        result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        result = "MIDI";
        break;
      case 6:
        result = "Continuity";
        break;
      case 7:
        result = "InstantHotSpot";
        break;
      case 8:
        result = "NearBy";
        break;
      case 9:
        result = "Sharing";
        break;
      case 10:
        result = "HearingSupport";
        break;
      case 11:
        result = "Magnet";
        break;
      case 12:
        result = "HID";
        break;
      case 13:
        result = "LEA";
        break;
      case 14:
        result = "External";
        break;
      case 15:
        result = "ExternalMedical";
        break;
      case 16:
        result = "ExternalLock";
        break;
      case 17:
        result = "ExternalWatch";
        break;
      case 18:
        result = "SmartRouting";
        break;
      case 19:
        result = "DigitalID";
        break;
      case 20:
        result = "DigitalKey";
        break;
      case 21:
        result = "DigitalCarKey";
        break;
      case 22:
        result = "HeySiri";
        break;
      case 23:
        result = "ThirdPartyApp";
        break;
      case 24:
        result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            result = "DevicePresenceDetection";
            break;
          case 257:
            result = "AudioBox";
            break;
          case 258:
            result = "SIMTransfer";
            break;
          case 259:
            result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            result = "MacMigrate";
            break;
          case 263:
            result = "HIDUARTService";
            break;
          case 264:
            result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            result = "BaseBandFastConnect";
            break;
          case 266:
            result = "SafetyAlerts";
            break;
          case 267:
            result = "LECarPlay";
            break;
          case 268:
            result = "TCCBluetooth";
            break;
          case 269:
            result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_100036798(int a1)
{
  const char *result;

  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 >= 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589824:
              return "FindNearbyRemote";
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              result = "InternalTestActiveScan";
              break;
            case 2147418118:
              result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            result = "ADPD";
            break;
          case 524289:
            result = "ADPDBuffer";
            break;
          case 524290:
            result = "MicroLocation";
            break;
          case 524291:
            result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 458754)
                return "?";
              result = "PrecisionFindingFindeeHighPriority";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            result = "CaptiveNetworkJoin";
            break;
          case 393217:
            result = "UseCaseSIMTransfer";
            break;
          case 393218:
            result = "MacSetup";
            break;
          case 393219:
            result = "AppleIDSignIn";
            break;
          case 393220:
            result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752)
                return "?";
              result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000)
              return "?";
            result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else
  {
    result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "HealthKit";
        break;
      case 2:
        result = "HomeKit";
        break;
      case 3:
        result = "FindMyObjectConnection";
        break;
      case 4:
        result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        result = "MIDI";
        break;
      case 6:
        result = "Continuity";
        break;
      case 7:
        result = "InstantHotSpot";
        break;
      case 8:
        result = "NearBy";
        break;
      case 9:
        result = "Sharing";
        break;
      case 10:
        result = "HearingSupport";
        break;
      case 11:
        result = "Magnet";
        break;
      case 12:
        result = "HID";
        break;
      case 13:
        result = "LEA";
        break;
      case 14:
        result = "External";
        break;
      case 15:
        result = "ExternalMedical";
        break;
      case 16:
        result = "ExternalLock";
        break;
      case 17:
        result = "ExternalWatch";
        break;
      case 18:
        result = "SmartRouting";
        break;
      case 19:
        result = "DigitalID";
        break;
      case 20:
        result = "DigitalKey";
        break;
      case 21:
        result = "DigitalCarKey";
        break;
      case 22:
        result = "HeySiri";
        break;
      case 23:
        result = "ThirdPartyApp";
        break;
      case 24:
        result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            result = "DevicePresenceDetection";
            break;
          case 257:
            result = "AudioBox";
            break;
          case 258:
            result = "SIMTransfer";
            break;
          case 259:
            result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            result = "MacMigrate";
            break;
          case 263:
            result = "HIDUARTService";
            break;
          case 264:
            result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            result = "BaseBandFastConnect";
            break;
          case 266:
            result = "SafetyAlerts";
            break;
          case 267:
            result = "LECarPlay";
            break;
          case 268:
            result = "TCCBluetooth";
            break;
          case 269:
            result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_100036ECC(int a1)
{
  const char *result;

  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 >= 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589824:
              return "FindNearbyRemote";
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              result = "InternalTestActiveScan";
              break;
            case 2147418118:
              result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            result = "ADPD";
            break;
          case 524289:
            result = "ADPDBuffer";
            break;
          case 524290:
            result = "MicroLocation";
            break;
          case 524291:
            result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 458754)
                return "?";
              result = "PrecisionFindingFindeeHighPriority";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            result = "CaptiveNetworkJoin";
            break;
          case 393217:
            result = "UseCaseSIMTransfer";
            break;
          case 393218:
            result = "MacSetup";
            break;
          case 393219:
            result = "AppleIDSignIn";
            break;
          case 393220:
            result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752)
                return "?";
              result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000)
              return "?";
            result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else
  {
    result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "HealthKit";
        break;
      case 2:
        result = "HomeKit";
        break;
      case 3:
        result = "FindMyObjectConnection";
        break;
      case 4:
        result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        result = "MIDI";
        break;
      case 6:
        result = "Continuity";
        break;
      case 7:
        result = "InstantHotSpot";
        break;
      case 8:
        result = "NearBy";
        break;
      case 9:
        result = "Sharing";
        break;
      case 10:
        result = "HearingSupport";
        break;
      case 11:
        result = "Magnet";
        break;
      case 12:
        result = "HID";
        break;
      case 13:
        result = "LEA";
        break;
      case 14:
        result = "External";
        break;
      case 15:
        result = "ExternalMedical";
        break;
      case 16:
        result = "ExternalLock";
        break;
      case 17:
        result = "ExternalWatch";
        break;
      case 18:
        result = "SmartRouting";
        break;
      case 19:
        result = "DigitalID";
        break;
      case 20:
        result = "DigitalKey";
        break;
      case 21:
        result = "DigitalCarKey";
        break;
      case 22:
        result = "HeySiri";
        break;
      case 23:
        result = "ThirdPartyApp";
        break;
      case 24:
        result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            result = "DevicePresenceDetection";
            break;
          case 257:
            result = "AudioBox";
            break;
          case 258:
            result = "SIMTransfer";
            break;
          case 259:
            result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            result = "MacMigrate";
            break;
          case 263:
            result = "HIDUARTService";
            break;
          case 264:
            result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            result = "BaseBandFastConnect";
            break;
          case 266:
            result = "SafetyAlerts";
            break;
          case 267:
            result = "LECarPlay";
            break;
          case 268:
            result = "TCCBluetooth";
            break;
          case 269:
            result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_100037600(int a1)
{
  const char *result;

  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 >= 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589824:
              return "FindNearbyRemote";
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              result = "InternalTestActiveScan";
              break;
            case 2147418118:
              result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            result = "ADPD";
            break;
          case 524289:
            result = "ADPDBuffer";
            break;
          case 524290:
            result = "MicroLocation";
            break;
          case 524291:
            result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 458754)
                return "?";
              result = "PrecisionFindingFindeeHighPriority";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            result = "CaptiveNetworkJoin";
            break;
          case 393217:
            result = "UseCaseSIMTransfer";
            break;
          case 393218:
            result = "MacSetup";
            break;
          case 393219:
            result = "AppleIDSignIn";
            break;
          case 393220:
            result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752)
                return "?";
              result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000)
              return "?";
            result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else
  {
    result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "HealthKit";
        break;
      case 2:
        result = "HomeKit";
        break;
      case 3:
        result = "FindMyObjectConnection";
        break;
      case 4:
        result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        result = "MIDI";
        break;
      case 6:
        result = "Continuity";
        break;
      case 7:
        result = "InstantHotSpot";
        break;
      case 8:
        result = "NearBy";
        break;
      case 9:
        result = "Sharing";
        break;
      case 10:
        result = "HearingSupport";
        break;
      case 11:
        result = "Magnet";
        break;
      case 12:
        result = "HID";
        break;
      case 13:
        result = "LEA";
        break;
      case 14:
        result = "External";
        break;
      case 15:
        result = "ExternalMedical";
        break;
      case 16:
        result = "ExternalLock";
        break;
      case 17:
        result = "ExternalWatch";
        break;
      case 18:
        result = "SmartRouting";
        break;
      case 19:
        result = "DigitalID";
        break;
      case 20:
        result = "DigitalKey";
        break;
      case 21:
        result = "DigitalCarKey";
        break;
      case 22:
        result = "HeySiri";
        break;
      case 23:
        result = "ThirdPartyApp";
        break;
      case 24:
        result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            result = "DevicePresenceDetection";
            break;
          case 257:
            result = "AudioBox";
            break;
          case 258:
            result = "SIMTransfer";
            break;
          case 259:
            result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            result = "MacMigrate";
            break;
          case 263:
            result = "HIDUARTService";
            break;
          case 264:
            result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            result = "BaseBandFastConnect";
            break;
          case 266:
            result = "SafetyAlerts";
            break;
          case 267:
            result = "LECarPlay";
            break;
          case 268:
            result = "TCCBluetooth";
            break;
          case 269:
            result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_100037D34(int a1)
{
  const char *result;

  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 >= 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589824:
              return "FindNearbyRemote";
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              result = "InternalTestActiveScan";
              break;
            case 2147418118:
              result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            result = "ADPD";
            break;
          case 524289:
            result = "ADPDBuffer";
            break;
          case 524290:
            result = "MicroLocation";
            break;
          case 524291:
            result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 458754)
                return "?";
              result = "PrecisionFindingFindeeHighPriority";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            result = "CaptiveNetworkJoin";
            break;
          case 393217:
            result = "UseCaseSIMTransfer";
            break;
          case 393218:
            result = "MacSetup";
            break;
          case 393219:
            result = "AppleIDSignIn";
            break;
          case 393220:
            result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752)
                return "?";
              result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000)
              return "?";
            result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else
  {
    result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "HealthKit";
        break;
      case 2:
        result = "HomeKit";
        break;
      case 3:
        result = "FindMyObjectConnection";
        break;
      case 4:
        result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        result = "MIDI";
        break;
      case 6:
        result = "Continuity";
        break;
      case 7:
        result = "InstantHotSpot";
        break;
      case 8:
        result = "NearBy";
        break;
      case 9:
        result = "Sharing";
        break;
      case 10:
        result = "HearingSupport";
        break;
      case 11:
        result = "Magnet";
        break;
      case 12:
        result = "HID";
        break;
      case 13:
        result = "LEA";
        break;
      case 14:
        result = "External";
        break;
      case 15:
        result = "ExternalMedical";
        break;
      case 16:
        result = "ExternalLock";
        break;
      case 17:
        result = "ExternalWatch";
        break;
      case 18:
        result = "SmartRouting";
        break;
      case 19:
        result = "DigitalID";
        break;
      case 20:
        result = "DigitalKey";
        break;
      case 21:
        result = "DigitalCarKey";
        break;
      case 22:
        result = "HeySiri";
        break;
      case 23:
        result = "ThirdPartyApp";
        break;
      case 24:
        result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            result = "DevicePresenceDetection";
            break;
          case 257:
            result = "AudioBox";
            break;
          case 258:
            result = "SIMTransfer";
            break;
          case 259:
            result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            result = "MacMigrate";
            break;
          case 263:
            result = "HIDUARTService";
            break;
          case 264:
            result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            result = "BaseBandFastConnect";
            break;
          case 266:
            result = "SafetyAlerts";
            break;
          case 267:
            result = "LECarPlay";
            break;
          case 268:
            result = "TCCBluetooth";
            break;
          case 269:
            result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

uint64_t sub_100038468(unsigned __int8 *a1)
{
  const char *v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  const char *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _BYTE *v39;
  _BYTE *v40;
  _QWORD *v41;
  const char *v42;
  _QWORD *v43;
  const char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51[2];
  unsigned __int8 v52;
  _OWORD v53[4];
  void *__p[2];
  __int128 v55;
  __int128 v56;
  _BYTE v57[144];
  uint64_t v58;

  v58 = 0;
  memset(v57, 0, sizeof(v57));
  v55 = 0u;
  v56 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v53, 0, sizeof(v53));
  sub_100272ADC((uint64_t)v53);
  if (a1[5])
  {
    v2 = "disabled";
    v3 = 8;
  }
  else if (a1[8])
  {
    v5 = sub_1002614D8(v53, (uint64_t)"leech:", 6);
    v6 = (_QWORD *)std::ostream::operator<<(v5, a1[4]);
    sub_1002614D8(v6, (uint64_t)" ", 1);
    v7 = sub_1002614D8(v53, (uint64_t)"disabled:", 9);
    v8 = (_QWORD *)std::ostream::operator<<(v7, a1[5]);
    sub_1002614D8(v8, (uint64_t)" ", 1);
    v9 = sub_1002614D8(v53, (uint64_t)"AllowDups:", 10);
    v10 = (_QWORD *)std::ostream::operator<<(v9, *a1);
    sub_1002614D8(v10, (uint64_t)" ", 1);
    v11 = sub_1002614D8(v53, (uint64_t)"WhenLocked:", 11);
    v12 = (_QWORD *)std::ostream::operator<<(v11, a1[1]);
    sub_1002614D8(v12, (uint64_t)" ", 1);
    v13 = sub_1002614D8(v53, (uint64_t)"BeforeFirstUnlock:", 18);
    v14 = (_QWORD *)std::ostream::operator<<(v13, a1[2]);
    sub_1002614D8(v14, (uint64_t)" ", 1);
    v15 = sub_1002614D8(v53, (uint64_t)"activeScan:", 11);
    v16 = (_QWORD *)std::ostream::operator<<(v15, a1[3]);
    sub_1002614D8(v16, (uint64_t)" ", 1);
    v17 = sub_1002614D8(v53, (uint64_t)"advBufferConfig:", 16);
    v18 = (_QWORD *)std::ostream::operator<<(v17, *((unsigned __int16 *)a1 + 7));
    sub_1002614D8(v18, (uint64_t)" ", 1);
    v19 = sub_1002614D8(v53, (uint64_t)"coexImpacted:", 13);
    v20 = (_QWORD *)std::ostream::operator<<(v19, a1[7]);
    sub_1002614D8(v20, (uint64_t)" ", 1);
    v21 = sub_1002614D8(v53, (uint64_t)"scanDurationMS:", 15);
    v22 = (_QWORD *)std::ostream::operator<<(v21, *((_QWORD *)a1 + 2));
    sub_1002614D8(v22, (uint64_t)" ", 1);
    v23 = sub_1002614D8(v53, (uint64_t)"ms scanDurationTimeoutMs:", 25);
    v24 = (_QWORD *)std::ostream::operator<<(v23, *((_QWORD *)a1 + 3));
    sub_1002614D8(v24, (uint64_t)" ", 1);
    v25 = sub_1002614D8(v53, (uint64_t)"ms scanWindow:", 14);
    v26 = (_QWORD *)std::ostream::operator<<(v25, *((unsigned __int16 *)a1 + 16));
    sub_1002614D8(v26, (uint64_t)" ", 1);
    v27 = sub_1002614D8(v53, (uint64_t)"ms scanInterval:", 16);
    v28 = (_QWORD *)std::ostream::operator<<(v27, *((unsigned __int16 *)a1 + 17));
    sub_1002614D8(v28, (uint64_t)" ", 1);
    v29 = sub_1002614D8(v53, (uint64_t)"ms isSCOffloading:", 18);
    v30 = (_QWORD *)std::ostream::operator<<(v29, a1[36]);
    sub_1002614D8(v30, (uint64_t)" ", 1);
    v31 = sub_1002614D8(v53, (uint64_t)"privileged:", 11);
    v32 = (_QWORD *)std::ostream::operator<<(v31, a1[6]);
    sub_1002614D8(v32, (uint64_t)" ", 1);
    v33 = sub_1002614D8(v53, (uint64_t)"operatorType:", 13);
    v34 = *((_DWORD *)a1 + 10);
    if (v34)
      v35 = "OR ";
    else
      v35 = "AND ";
    if (v34)
      v36 = 3;
    else
      v36 = 4;
    sub_1002614D8(v33, (uint64_t)v35, v36);
    v37 = sub_1002614D8(v53, (uint64_t)"configureControllerUUIDs:", 25);
    v38 = (_QWORD *)std::ostream::operator<<(v37, a1[96]);
    sub_1002614D8(v38, (uint64_t)" ", 1);
    sub_1002614D8(v53, (uint64_t)"AppleTypes[", 11);
    v40 = (_BYTE *)*((_QWORD *)a1 + 6);
    v39 = (_BYTE *)*((_QWORD *)a1 + 7);
    if (v39 == v40)
    {
      sub_1002614D8(v53, (uint64_t)"none", 4);
    }
    else
    {
      do
      {
        v41 = (_QWORD *)std::ostream::operator<<(v53, v40[22]);
        if (v40[20])
          v42 = "Y";
        else
          v42 = "N";
        v43 = sub_1002614D8(v41, (uint64_t)v42, 1);
        if (v40[23])
          v44 = "D";
        else
          v44 = "";
        v45 = sub_1002614D8(v43, (uint64_t)v44, v40[23] != 0);
        sub_1002614D8(v45, (uint64_t)" ", 1);
        v40 += 96;
      }
      while (v40 != v39);
    }
    sub_1002614D8(v53, (uint64_t)"] uuids[", 8);
    v46 = *((_QWORD *)a1 + 9);
    v47 = *((_QWORD *)a1 + 10);
    if (v47 == v46)
    {
      sub_1002614D8(v53, (uint64_t)"none", 4);
      v2 = "]";
      v3 = 1;
    }
    else
    {
      v3 = 1;
      v2 = "]";
      do
      {
        sub_10006887C(v46, v51);
        if ((v52 & 0x80u) == 0)
          v48 = v51;
        else
          v48 = (void **)v51[0];
        if ((v52 & 0x80u) == 0)
          v49 = v52;
        else
          v49 = (uint64_t)v51[1];
        v50 = sub_1002614D8(v53, (uint64_t)v48, v49);
        sub_1002614D8(v50, (uint64_t)" ", 1);
        if ((char)v52 < 0)
          operator delete(v51[0]);
        v46 += 20;
      }
      while (v46 != v47);
    }
  }
  else
  {
    v2 = "NA";
    v3 = 2;
  }
  sub_1002614D8(v53, (uint64_t)v2, v3);
  std::stringbuf::str((char *)v53 + 8);
  if (SHIBYTE(v55) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v53 + 8);
  return std::ios::~ios(v57);
}

void sub_1000389C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100272CFC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1000389F8(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 141);
}

uint64_t sub_100038A04(uint64_t a1)
{
  return **(unsigned __int8 **)(a1 + 8);
}

uint64_t sub_100038A10(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 140);
}

uint64_t sub_100038A1C(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 2);
}

BOOL sub_100038A28(uint64_t a1)
{
  uint64_t v2;
  int v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _BOOL8 v12;
  int v13;
  char v14;
  NSObject *v15;
  _QWORD *v17;
  const char *v18;
  const char *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  char v23;
  __int128 v24;
  _OWORD v25[6];
  _BYTE buf[12];
  __int16 v27;
  const char *v28;
  __int16 v29;
  _BOOL4 v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  void *v40;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(v2 + 168);
  memset((char *)&v25[1] + 12, 0, 32);
  memset((char *)&v25[3] + 12, 0, 28);
  v4 = *(_OWORD *)(v2 + 296);
  v24 = *(_OWORD *)(v2 + 280);
  v25[0] = v4;
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)(v2 + 308);
  memset(&v25[2], 0, 24);
  sub_100685584(&v25[2], *(_QWORD *)(v2 + 328), *(_QWORD *)(v2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 336) - *(_QWORD *)(v2 + 328)) >> 5));
  memset((char *)&v25[3] + 8, 0, 24);
  sub_1000B61B8((char *)&v25[3] + 8, *(__int128 **)(v2 + 352), *(__int128 **)(v2 + 360), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v2 + 360) - *(_QWORD *)(v2 + 352)) >> 2));
  LOBYTE(v25[5]) = *(_BYTE *)(v2 + 376);
  v5 = sub_100038E50();
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 184))(v5);
  v7 = sub_100038E50();
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 192))(v7);
  v9 = *(unsigned __int8 *)(a1 + 225);
  v10 = *(unsigned __int8 *)(a1 + 81);
  if (BYTE8(v24))
  {
    if (BYTE4(v24) | BYTE5(v24))
    {
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
        sub_100718B1C();
      v11 = 0;
    }
    else
    {
      v11 = 1;
    }
    if (BYTE1(v24))
      v13 = 0;
    else
      v13 = v6;
    if (v13 == 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
        sub_100718A98();
      v11 = 0;
    }
    v12 = v11 != 0;
    if (BYTE2(v24))
      v14 = 1;
    else
      v14 = v8;
    if ((v14 & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
        sub_100718A20();
      v12 = 0;
    }
  }
  else
  {
    v12 = 1;
  }
  v15 = qword_100999828;
  if (!v9 && v3 == 23 && v10 != 16)
  {
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
    {
      v20 = (_QWORD *)(a1 + 232);
      if (*(char *)(a1 + 255) < 0)
        v20 = (_QWORD *)*v20;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v20;
      v27 = 1024;
      LODWORD(v28) = v10;
      _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "agent %s cannot scan, CBUseCaseThirdPartyApp not allowed to scan in background getSessionState:%d", buf, 0x12u);
      v12 = 0;
      v15 = qword_100999828;
    }
    else
    {
      v12 = 0;
    }
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    v17 = (_QWORD *)(a1 + 232);
    if (*(char *)(a1 + 255) < 0)
      v17 = (_QWORD *)*v17;
    v18 = sub_100037600(v3);
    if (v10 <= 7)
    {
      if (v10 == 2)
      {
        v19 = "terminated";
        goto LABEL_48;
      }
      if (v10 == 4)
      {
        v19 = "suspended";
        goto LABEL_48;
      }
    }
    else
    {
      switch(v10)
      {
        case 8:
          v19 = "background-running";
          goto LABEL_48;
        case 16:
          v19 = "foreground-running";
          goto LABEL_48;
        case 32:
          v19 = "daemon";
          goto LABEL_48;
      }
    }
    v19 = "unknown";
LABEL_48:
    sub_100038468((unsigned __int8 *)&v24);
    if (v23 >= 0)
      v21 = &v22;
    else
      v21 = v22;
    *(_DWORD *)buf = 136316930;
    *(_QWORD *)&buf[4] = v17;
    v27 = 2080;
    v28 = v18;
    v29 = 1024;
    v30 = v12;
    v31 = 1024;
    v32 = v6;
    v33 = 1024;
    v34 = v8;
    v35 = 1024;
    v36 = v9;
    v37 = 2080;
    v38 = v19;
    v39 = 2080;
    v40 = v21;
    _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "canScanNow session:%s(%s) allowed:%d  deviceLocked:%d deviceFirstUnlocked:%d allowedInBKG:%d sessionState:%s %s", buf, 0x42u);
    if (v23 < 0)
      operator delete(v22);
  }
  if (*((_QWORD *)&v25[3] + 1))
  {
    *(_QWORD *)&v25[4] = *((_QWORD *)&v25[3] + 1);
    operator delete(*((void **)&v25[3] + 1));
  }
  *(_QWORD *)buf = &v25[2];
  sub_1000B5524((void ***)buf);
  return v12;
}

void sub_100038E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1000B54DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100038E50()
{
  if (qword_100991ED8 != -1)
    dispatch_once(&qword_100991ED8, &stru_100929598);
  return qword_100991ED0;
}

uint64_t sub_100038E90(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 1448);
  v2 = *(unsigned __int8 *)(a1 + 1512);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100038ED4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 1448);
  v2 = *(unsigned __int8 *)(a1 + 1513);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_100038F18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  id v14;
  NSObject *v15;
  const char *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t v22[128];
  uint8_t buf[4];
  const char *v24;

  if (!a2 || !*(_QWORD *)(a2 + 8))
    return 0;
  v3 = sub_100039218(a2);
  if (sub_10003916C(v3, v3))
  {
    v4 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      v5 = sub_100039218(a2);
      *(_DWORD *)buf = 136315138;
      v24 = sub_100036ECC(v5);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Scanning Prioritization over BT for useCase %s", buf, 0xCu);
    }
    return 1;
  }
  else
  {
    v7 = sub_10003920C(a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = v8;
    if (v8 && objc_msgSend(v8, "count"))
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v10 = v9;
      v6 = (uint64_t)objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v6)
      {
        v11 = *(_QWORD *)v19;
        while (2)
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_QWORD *)v19 != v11)
              objc_enumerationMutation(v10);
            v13 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
            v14 = objc_msgSend(v13, "longLongValue", (_QWORD)v18);
            if (sub_10003916C((uint64_t)v14, (int)v14))
            {
              v15 = qword_100999828;
              if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
              {
                v16 = sub_100036ECC((int)objc_msgSend(v13, "longLongValue"));
                *(_DWORD *)buf = 136315138;
                v24 = v16;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Scanning Prioritization over BT for useCase %s", buf, 0xCu);
              }
              v6 = 1;
              goto LABEL_23;
            }
          }
          v6 = (uint64_t)objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
          if (v6)
            continue;
          break;
        }
      }
LABEL_23:

    }
    else
    {
      v6 = 0;
    }

  }
  return v6;
}

void sub_10003913C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10003916C(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = 1;
  if (((a2 - 131078) > 9 || ((1 << (a2 - 6)) & 0x203) == 0) && a2 != 22)
  {
    if (a2 == 265)
    {
      v5 = sub_10003BE44();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 328))(v5) & 1) != 0)
        return 1;
      v6 = sub_10003BE44();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 384))(v6) & 1) != 0)
        return 1;
      v7 = sub_10003BE44();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 424))(v7) & 1) != 0)
      {
        return 1;
      }
      else
      {
        v8 = sub_10003BE44();
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 936))(v8);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

id sub_10003920C(uint64_t a1)
{
  return *(id *)(*(_QWORD *)(a1 + 8) + 176);
}

uint64_t sub_100039218(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 168);
}

uint64_t sub_100039224(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  NSObject *v12;
  BOOL v13;
  BOOL v14;
  int v15;
  _BOOL4 v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  id v30;
  void *v31;
  char v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v41;
  void **v42;
  const char *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  int v47;
  void *__p;
  __int128 *v49;
  uint64_t v50;
  void *v51;
  char v52;
  void *v53;
  unsigned int *v54;
  char v55;
  void *v56[2];
  char v57;
  __int128 v58;
  _OWORD v59[6];
  __int128 v60[3];
  __int128 v61;
  void *v62[2];
  __int128 v63;
  uint64_t v64;
  uint8_t buf[8];
  _BYTE v66[10];
  __int16 v67;
  const char *v68;
  __int16 v69;
  void *v70;
  __int16 v71;
  void *v72;

  v4 = atomic_load((unsigned __int8 *)&qword_1009940B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1009940B0))
  {
    v46 = sub_10003BE44();
    byte_1009940AF = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 840))(v46);
    __cxa_guard_release(&qword_1009940B0);
  }
  v5 = *(_QWORD **)(a1 + 2040);
  if (v5 == (_QWORD *)(a1 + 2048))
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    while (v5[5] != a2)
    {
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v13 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v13);
      }
      v5 = v8;
      if (v8 == (_QWORD *)(a1 + 2048))
        goto LABEL_14;
    }
    v6 = v5[4];
  }
LABEL_14:
  v9 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 168);
  v64 = 0;
  *(_OWORD *)v62 = 0u;
  v63 = 0u;
  v61 = 0u;
  memset(v60, 0, sizeof(v60));
  v47 = v9;
  sub_1000399BC(a1, v9, (uint64_t)v60);
  if (!BYTE8(v60[0]))
  {
    v18 = *(_QWORD *)(a2 + 8) + 280;
    goto LABEL_65;
  }
  v10 = *(_QWORD *)(a2 + 8);
  memset((char *)&v59[1] + 12, 0, 48);
  *(_OWORD *)((char *)&v59[4] + 8) = 0u;
  v11 = *(_OWORD *)(v10 + 296);
  v58 = *(_OWORD *)(v10 + 280);
  v59[0] = v11;
  *(_OWORD *)((char *)v59 + 12) = *(_OWORD *)(v10 + 308);
  memset(&v59[2], 0, 24);
  sub_100685584(&v59[2], *(_QWORD *)(v10 + 328), *(_QWORD *)(v10 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v10 + 336) - *(_QWORD *)(v10 + 328)) >> 5));
  memset((char *)&v59[3] + 8, 0, 24);
  sub_1000B61B8((char *)&v59[3] + 8, *(__int128 **)(v10 + 352), *(__int128 **)(v10 + 360), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v10 + 360) - *(_QWORD *)(v10 + 352)) >> 2));
  LOBYTE(v59[5]) = *(_BYTE *)(v10 + 376);
  v12 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
  {
    v41 = byte_1009940AF;
    if (v6)
    {
      sub_1000340DC(v6, (uint64_t)v56);
      if (v57 >= 0)
        v42 = v56;
      else
        v42 = (void **)v56[0];
    }
    else
    {
      v42 = (void **)"NA";
    }
    v43 = sub_100036ECC(v47);
    sub_100038468((unsigned __int8 *)&v58);
    sub_100038468((unsigned __int8 *)v60);
    v44 = &v53;
    if (v55 < 0)
      v44 = v53;
    if (v52 >= 0)
      v45 = &v51;
    else
      v45 = v51;
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v41;
    *(_WORD *)v66 = 2080;
    *(_QWORD *)&v66[2] = v42;
    v67 = 2080;
    v68 = v43;
    v69 = 2080;
    v70 = v44;
    v71 = 2080;
    v72 = v45;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "updateAgentScanUseCaseEntry controllerSupportsScanRx:%d session:%s usecase:%s previous:%s entry:%s", buf, 0x30u);
    if (v52 < 0)
      operator delete(v51);
    if (v55 < 0)
      operator delete(v53);
    if (v6 && v57 < 0)
      operator delete(v56[0]);
  }
  if (BYTE8(v58))
    v13 = BYTE7(v58) == 0;
  else
    v13 = 1;
  v14 = !v13 && BYTE5(v58) == 0;
  v15 = v14;
  if (!v14)
    goto LABEL_34;
  v16 = v59[0] != 0;
  if (byte_1009940AF)
  {
LABEL_35:
    sub_10003C568(*(_DWORD **)(a2 + 8), v60);
    goto LABEL_36;
  }
  if (!BYTE7(v60[0]) && v59[0] == 0)
  {
LABEL_34:
    v16 = 0;
    goto LABEL_35;
  }
  v15 = 1;
LABEL_36:
  v19 = *(_QWORD *)(a2 + 8);
  v20 = *(unsigned __int16 *)(v19 + 312);
  v21 = *(unsigned __int16 *)(v19 + 314);
  v22 = *(_BYTE *)(v19 + 283);
  *(_BYTE *)(v19 + 120) = 1;
  *(_DWORD *)(v19 + 128) = v21;
  *(_DWORD *)(v19 + 132) = v20;
  *(_BYTE *)(v19 + 136) = v22;
  *(_BYTE *)v19 = *(_BYTE *)(v19 + 280);
  *(_BYTE *)(v19 + 1) = *(_BYTE *)(v19 + 286);
  v49 = 0;
  v50 = 0;
  __p = 0;
  sub_1000B61B8((char *)&__p, *(__int128 **)(v19 + 352), *(__int128 **)(v19 + 360), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v19 + 360) - *(_QWORD *)(v19 + 352)) >> 2));
  if ((void **)(v19 + 8) != &__p)
    sub_1000B56F0((_QWORD *)(v19 + 8), (__int128 *)__p, v49, 0xCCCCCCCCCCCCCCCDLL * (((char *)v49 - (_BYTE *)__p) >> 2));
  if (__p)
  {
    v49 = (__int128 *)__p;
    operator delete(__p);
  }
  *(_BYTE *)(a2 + 224) = *(_BYTE *)(v19 + 376);
  v23 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v23 + 273) = *(_BYTE *)(v19 + 316);
  *(_DWORD *)(v23 + 384) = *(_DWORD *)(v19 + 320);
  if (((v15 | v16) & 1) == 0)
  {
    v24 = *(_QWORD *)(v19 + 304);
    *(_DWORD *)(v23 + 188) = *(_QWORD *)(v19 + 296);
    *(_DWORD *)(v23 + 192) = v24;
  }
  sub_10003C4E0(v23);
  v26 = *(_QWORD *)(v19 + 328);
  for (i = *(_QWORD *)(v19 + 336); v26 != i; v26 += 96)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)v66 = 0;
    sub_10003994C(buf, (const void *)(v26 + 40), *(unsigned __int16 *)(v26 + 90));
    v53 = 0;
    v54 = 0;
    sub_10003994C(&v53, (const void *)(v26 + 65), *(unsigned __int16 *)(v26 + 92));
    v27 = sub_10003BE44();
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 616))(v27);
    v29 = *(_QWORD *)(a2 + 8);
    v30 = *(id *)(v29 + 152);
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "anyObject"));
    if (v28)
      v32 = 3;
    else
      v32 = 1;
    sub_10003BFE0(v29, v31, *(unsigned __int8 *)(v26 + 22), *(_BYTE *)(v26 + 26), (uint64_t)buf, (uint64_t)&v53, *(_BYTE *)(v26 + 21), *(_BYTE *)(v26 + 23), *(_BYTE *)(v26 + 23) != 0, v32, *(_BYTE *)(v26 + 25), *(void **)v26, *(_BYTE *)(v26 + 16), *(_DWORD *)(v26 + 17), BYTE1(*(_DWORD *)(v26 + 17)), BYTE2(*(_DWORD *)(v26 + 17)), HIBYTE(*(_DWORD *)(v26 + 17)), 0, 0xFFFF,
      0xFFFF,
      0xFFFF);

    v53 = &off_100918258;
    if (v54)
      sub_100056AAC(v54);
    *(_QWORD *)buf = &off_100918258;
    if (*(_QWORD *)v66)
      sub_100056AAC(*(unsigned int **)v66);
  }
  if ((v47 & 0xFFFF0000) == 0x10000)
  {
    v33 = _os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures");
    v34 = HIWORD(v60[0]) ? v33 : 0;
    if (v34 == 1 && *(_BYTE *)(*(_QWORD *)(a2 + 8) + 201))
    {
      v35 = sub_10003BE44();
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 704))(v35);
      v37 = *(unsigned __int16 *)(v19 + 294);
      v38 = (v36 != 0) & (v37 >> 1);
      v39 = (v37 & (v36 != v38)) != 0 ? v38 | 2 : (v36 != 0) & (v37 >> 1);
      if (v39)
        *(_BYTE *)(*(_QWORD *)(a2 + 8) + 122) = v39;
    }
  }
  v18 = v19 + 280;
  if (*((_QWORD *)&v59[3] + 1))
  {
    *(_QWORD *)&v59[4] = *((_QWORD *)&v59[3] + 1);
    operator delete(*((void **)&v59[3] + 1));
  }
  *(_QWORD *)buf = &v59[2];
  sub_1000B5524((void ***)buf);
LABEL_65:
  if (v62[1])
  {
    *(void **)&v63 = v62[1];
    operator delete(v62[1]);
  }
  *(_QWORD *)&v58 = &v61;
  sub_1000B5524((void ***)&v58);
  return v18;
}

void sub_100039854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  __cxa_guard_abort(&qword_1009940B0);
  _Unwind_Resume(a1);
}

_QWORD *sub_10003994C(_QWORD *a1, const void *a2, size_t a3)
{
  _DWORD *v6;

  v6 = operator new(a3 + 24);
  v6[2] = 1;
  *(_QWORD *)v6 = off_10093CBC0;
  *((_QWORD *)v6 + 2) = a3;
  memcpy(v6 + 6, a2, a3);
  *a1 = &off_100918258;
  a1[1] = v6;
  return a1;
}

void sub_1000399BC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  int v50;
  int v51;
  __int128 v52;
  __int128 v53;
  char v54;
  void *v55;
  __int128 v56;
  uint64_t v57;
  _OWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  __int128 v61;
  __int16 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __n128 *v67;
  __n128 v68;
  __int8 *v69;
  _OWORD *v70;
  __int128 v71;
  char *v72;
  void *v73;
  uint64_t v74;
  __int128 v75;
  _DWORD *v76;
  int v77;
  BOOL v79;
  int v80;
  NSObject *v81;
  const char *v82;
  int v83;
  uint64_t v84;
  int v85;
  __int16 v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  __int128 v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  int v96;
  __int16 v97;
  __int128 v98;
  __n128 *v99;
  char *v100;
  __n128 v101;
  char *v102;
  char *v103;
  __n128 v104;
  __n128 *v105;
  __n128 v106;
  __int8 *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  __n128 *v112;
  char *v113;
  __n128 v114;
  char *v115;
  char *v116;
  __n128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  __int16 v121;
  char *v122;
  char *v123;
  __int128 v124;
  char *v125;
  char *v126;
  __int128 v127;
  uint64_t v128;
  BOOL v129;
  __int16 v130;
  __int16 v131;
  unsigned __int16 v132;
  char v133;
  __int128 v134;
  __int128 v135;
  int v136;
  _OWORD v137[3];
  _OWORD v138[3];
  uint64_t v139;
  _OWORD v140[3];
  _OWORD v141[3];
  uint64_t v142;
  __int128 v143;
  int v144;
  __int128 v145;
  int v146;
  __int128 v147;
  int v148;
  __int128 v149;
  int v150;
  __int128 v151;
  int v152;
  __int128 v153;
  int v154;
  __int128 v155;
  int v156;
  __int128 v157;
  int v158;
  __int128 v159;
  int v160;
  __int128 v161;
  int v162;
  __int128 v163;
  int v164;
  __int128 v165;
  int v166;
  __int128 v167;
  int v168;
  __int128 v169;
  int v170;
  __int128 v171;
  int v172;
  __int128 v173;
  int v174;
  __int128 v175;
  int v176;
  __int128 v177;
  int v178;
  __int128 v179;
  int v180;
  __int128 v181;
  int v182;
  __int128 v183;
  int v184;
  __int128 v185;
  int v186;
  __int128 v187;
  int v188;
  __int128 v189;
  int v190;
  __int128 v191;
  int v192;
  __int128 v193;
  int v194;
  uint8_t buf[16];
  const char *v196;
  __int16 v197;
  int v198;
  __int128 v199;
  int v200;
  __int128 v201;
  int v202;
  __int128 v203;
  int v204;
  __int128 v205;
  int v206;
  __n128 v207;
  _BYTE v208[78];
  __int16 v209;
  __n128 v210;
  int v211;
  __n128 v212;
  int v213;

  v6 = atomic_load((unsigned __int8 *)&qword_1009940C0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1009940C0))
  {
    dword_1009940B8 = *(_DWORD *)(sub_1000438A4() + 712);
    __cxa_guard_release(&qword_1009940C0);
  }
  v7 = 0uLL;
  memset(v140, 0, sizeof(v140));
  v142 = 1;
  memset(v141, 0, sizeof(v141));
  BYTE1(v140[0]) = 1;
  *(_DWORD *)((char *)v140 + 2) = 0x1000000;
  BYTE6(v140[0]) = 1;
  *(_DWORD *)((char *)v140 + 7) = 256;
  *(_WORD *)((char *)v140 + 11) = 0;
  memset(v137, 0, sizeof(v137));
  memset(v138, 0, sizeof(v138));
  BYTE1(v137[0]) = 1;
  BYTE6(v137[0]) = 1;
  *(_DWORD *)((char *)v137 + 7) = 0;
  *(_WORD *)((char *)v137 + 11) = 0;
  v139 = 1;
  if (a2 > 268)
  {
    v12 = (_QWORD *)&v138[1] + 1;
    switch(a2)
    {
      case 65544:
      case 65559:
        v209 = (unsigned __int128)0 >> 112;
        v207 = 0uLL;
        *(_OWORD *)v208 = 0uLL;
        *(_QWORD *)&v208[1] = 0x100129C00010101;
        *(_WORD *)&v208[9] = 513;
        *(_QWORD *)&v208[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v208[20] = 0xFFFF;
        memset(&v208[24], 0, 54);
        if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
          LOBYTE(v139) = 0;
        v13 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 384))(v13))
        {
          LODWORD(v137[2]) = 19660830;
          HIWORD(v137[0]) = 0;
          LOBYTE(v137[0]) = 0;
          *(_QWORD *)&v137[1] = 0;
          v208[4] = *(_BYTE *)(a1 + 144);
          v14 = *((_QWORD *)&v138[0] + 1);
          if (*((_QWORD *)&v138[0] + 1) >= *(_QWORD *)&v138[1])
          {
            v18 = sub_100686328((uint64_t *)v138, (uint64_t)&v207);
          }
          else
          {
            **((_QWORD **)&v138[0] + 1) = (id)v207.n128_u64[0];
            *(_QWORD *)(v14 + 8) = (id)v207.n128_u64[1];
            *(_OWORD *)(v14 + 16) = *(_OWORD *)v208;
            v16 = *(_OWORD *)&v208[32];
            v15 = *(_OWORD *)&v208[48];
            v17 = *(_OWORD *)&v208[16];
            *(_OWORD *)(v14 + 78) = *(_OWORD *)&v208[62];
            *(_OWORD *)(v14 + 48) = v16;
            *(_OWORD *)(v14 + 64) = v15;
            *(_OWORD *)(v14 + 32) = v17;
            v18 = v14 + 96;
          }
          *((_QWORD *)&v138[0] + 1) = v18;
          if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
          {
            v205 = xmmword_10073B660;
            v206 = 0;
            sub_100042F44((__n128 *)buf, (__n128 *)&v205);
            sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
            if (_os_feature_enabled_impl("BluetoothFeatures", "StandardUTFEAA"))
            {
              v203 = xmmword_10073B674;
              v204 = 0;
              sub_100042F44((__n128 *)buf, (__n128 *)&v203);
              sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
            }
            LOBYTE(v139) = *(_BYTE *)(a1 + 144);
          }
        }
        else
        {
          v57 = sub_10003BE44();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v57 + 376))(v57))
          {
            LODWORD(v137[2]) = 0;
            HIWORD(v137[0]) = 0;
            LOBYTE(v137[0]) = 0;
            *(_QWORD *)&v137[1] = 0;
            BYTE4(v137[0]) = 1;
            v208[4] = 1;
            sub_10066D40C((uint64_t *)v138, (uint64_t)&v207);
            if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
            {
              LOBYTE(v139) = 1;
              v201 = xmmword_10073B660;
              v202 = 0;
              sub_100042F44((__n128 *)buf, (__n128 *)&v201);
              sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
              if (_os_feature_enabled_impl("BluetoothFeatures", "StandardUTFEAA"))
              {
                v199 = xmmword_10073B674;
                v200 = 0;
                sub_100042F44((__n128 *)buf, (__n128 *)&v199);
                sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
              }
            }
            if (!*(_BYTE *)(a1 + 144))
            {
              v58 = v140;
              v59 = v141;
              v12 = (_QWORD *)&v141[1] + 1;
              goto LABEL_183;
            }
          }
          else
          {
            v76 = &unk_100994000;
            LOBYTE(v137[0]) = 0;
            v77 = *(unsigned __int8 *)(a1 + 144);
            v79 = (dword_1009940B8 - 19) < 0x7BD && v77 != 0;
            v208[7] = v79;
            *(_QWORD *)&v137[1] = 0;
            v208[4] = v77;
            if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
              LOBYTE(v139) = *(_BYTE *)(a1 + 144);
            if ((dword_1009940B8 - 22) > 0x7B9)
            {
              if ((dword_1009940B8 - 19) > 0x7BC)
                HIWORD(v137[0]) = 0;
              else
                HIWORD(v137[0]) = 2;
            }
            else
            {
              HIWORD(v137[0]) = 3;
              v80 = _os_feature_enabled_impl("BluetoothFeatures", "BeepOnMoveWake");
              v81 = qword_100999828;
              if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
              {
                v136 = dword_1009940B8;
                v82 = sub_100036ECC(a2);
                v83 = *(unsigned __int8 *)(a1 + 144);
                *(_DWORD *)buf = 67109890;
                *(_DWORD *)&buf[4] = v80;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v136;
                *(_WORD *)&buf[14] = 2080;
                v196 = v82;
                v197 = 1024;
                v198 = v83;
                _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "bomEnabled:%d chipset:%d usecase:%s fScreenState:%d", buf, 0x1Eu);
              }
              v76 = (_DWORD *)&unk_100994000;
              if (v80)
              {
                v84 = sub_1000438A4();
                v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 3536))(v84);
                if (a2 == 65559 && v85 == 25 && !*(_BYTE *)(a1 + 144))
                {
                  v208[4] = 1;
                  *(_QWORD *)&v208[24] = 0;
                  *(_QWORD *)&v208[32] = 0;
                  *(_QWORD *)&v208[39] = 0;
                  memset(&v208[49], 0, 23);
                  *(_WORD *)&v208[47] = 4;
                  *(_WORD *)&v208[72] = 4;
                  *(_DWORD *)&v208[74] = 1638425;
                }
              }
            }
            if ((v76[46] - 20) > 0x7BB)
            {
              if (*(_BYTE *)(a1 + 144))
              {
                LODWORD(v137[2]) = 19660830;
              }
              else
              {
                LODWORD(v137[2]) = 0;
                BYTE4(v137[0]) = 1;
              }
            }
            else
            {
              v129 = *(_BYTE *)(a1 + 144) == 0;
              if (*(_BYTE *)(a1 + 144))
                v130 = 30;
              else
                v130 = 0;
              LOWORD(v137[2]) = v130;
              if (v129)
                v131 = 0;
              else
                v131 = 300;
              WORD1(v137[2]) = v131;
            }
            sub_10066D40C((uint64_t *)v138, (uint64_t)&v207);
            if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
            {
              v193 = xmmword_10073B660;
              v194 = 0;
              sub_100042F44((__n128 *)buf, (__n128 *)&v193);
              sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
              if (_os_feature_enabled_impl("BluetoothFeatures", "StandardUTFEAA"))
              {
                v191 = xmmword_10073B674;
                v192 = 0;
                sub_100042F44((__n128 *)buf, (__n128 *)&v191);
                sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
              }
            }
          }
        }
        DWORD2(v137[2]) = 1;
        BYTE8(v137[0]) = 1;
        v58 = v137;
        v59 = v138;
        goto LABEL_183;
      case 65545:
      case 65546:
        v209 = (unsigned __int128)0 >> 112;
        v207 = 0uLL;
        *(_OWORD *)v208 = 0uLL;
        *(_QWORD *)&v208[1] = 0x100129C00010101;
        *(_WORD *)&v208[9] = 513;
        *(_QWORD *)&v208[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v208[20] = 0xFFFF;
        memset(&v208[24], 0, 54);
        if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
          LOBYTE(v139) = 0;
        v38 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 384))(v38))
        {
          LODWORD(v137[2]) = 19660830;
          HIWORD(v137[0]) = 0;
          LOBYTE(v137[0]) = 0;
          *(_QWORD *)&v137[1] = 0;
          v208[4] = *(_BYTE *)(a1 + 144);
          v39 = *((_QWORD *)&v138[0] + 1);
          if (*((_QWORD *)&v138[0] + 1) >= *(_QWORD *)&v138[1])
          {
            v43 = sub_100686328((uint64_t *)v138, (uint64_t)&v207);
          }
          else
          {
            **((_QWORD **)&v138[0] + 1) = (id)v207.n128_u64[0];
            *(_QWORD *)(v39 + 8) = (id)v207.n128_u64[1];
            *(_OWORD *)(v39 + 16) = *(_OWORD *)v208;
            v41 = *(_OWORD *)&v208[32];
            v40 = *(_OWORD *)&v208[48];
            v42 = *(_OWORD *)&v208[16];
            *(_OWORD *)(v39 + 78) = *(_OWORD *)&v208[62];
            *(_OWORD *)(v39 + 48) = v41;
            *(_OWORD *)(v39 + 64) = v40;
            *(_OWORD *)(v39 + 32) = v42;
            v43 = v39 + 96;
          }
          *((_QWORD *)&v138[0] + 1) = v43;
          if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
          {
            LOBYTE(v139) = *(_BYTE *)(a1 + 144);
            v189 = xmmword_10073B660;
            v190 = 0;
            sub_100042F44((__n128 *)buf, (__n128 *)&v189);
            sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
            if (_os_feature_enabled_impl("BluetoothFeatures", "StandardUTFEAA"))
            {
              v187 = xmmword_10073B674;
              v188 = 0;
              sub_100042F44((__n128 *)buf, (__n128 *)&v187);
              sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
            }
          }
          goto LABEL_182;
        }
        v60 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v60 + 376))(v60))
        {
          LODWORD(v137[2]) = 0;
          HIWORD(v137[0]) = 0;
          LOBYTE(v137[0]) = 0;
          *(_QWORD *)&v137[1] = 0;
          BYTE4(v137[0]) = 1;
          v208[4] = 1;
          sub_10066D40C((uint64_t *)v138, (uint64_t)&v207);
          if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
          {
            LOBYTE(v139) = 1;
            v185 = xmmword_10073B660;
            v186 = 0;
            sub_100042F44((__n128 *)buf, (__n128 *)&v185);
            sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
            if (_os_feature_enabled_impl("BluetoothFeatures", "StandardUTFEAA"))
            {
              v183 = xmmword_10073B674;
              v184 = 0;
              sub_100042F44((__n128 *)buf, (__n128 *)&v183);
              sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
            }
          }
          if (!*(_BYTE *)(a1 + 144))
          {
LABEL_181:
            v58 = v140;
            v59 = v141;
            v12 = (_QWORD *)&v141[1] + 1;
            goto LABEL_183;
          }
LABEL_182:
          DWORD2(v137[2]) = 1;
          BYTE8(v137[0]) = 1;
          v58 = v137;
          v59 = v138;
LABEL_183:
          v98 = v58[1];
          *(_OWORD *)a3 = *v58;
          *(_OWORD *)(a3 + 16) = v98;
          *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)v58 + 28);
          *(_QWORD *)(a3 + 48) = *((_QWORD *)v58 + 6);
          *(_OWORD *)(a3 + 56) = *(_OWORD *)((char *)v58 + 56);
          v59[1] = 0;
          v59[2] = 0;
          *v59 = 0;
          *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)v58 + 72);
          *(_QWORD *)(a3 + 88) = *((_QWORD *)v58 + 11);
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          *(_BYTE *)(a3 + 96) = *((_BYTE *)v58 + 96);

          goto LABEL_108;
        }
        LOBYTE(v137[0]) = 0;
        if ((dword_1009940B8 - 19) > 0x7BC)
        {
          v86 = 0;
          v208[7] = 0;
          *(_QWORD *)&v137[1] = 0;
          if (dword_1009940B8 < 0x13)
            goto LABEL_173;
        }
        else
        {
          v208[7] = *(_BYTE *)(a1 + 144);
          *(_QWORD *)&v137[1] = 0;
          if ((dword_1009940B8 - 22) < 0x7BA)
          {
            v86 = 3;
LABEL_173:
            HIWORD(v137[0]) = v86;
            v208[4] = *(_BYTE *)(a1 + 144);
            sub_10066D40C((uint64_t *)v138, (uint64_t)&v207);
            if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
            {
              LOBYTE(v139) = *(_BYTE *)(a1 + 144);
              v181 = xmmword_10073B660;
              v182 = 0;
              sub_100042F44((__n128 *)buf, (__n128 *)&v181);
              sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
              if (_os_feature_enabled_impl("BluetoothFeatures", "StandardUTFEAA"))
              {
                v179 = xmmword_10073B674;
                v180 = 0;
                sub_100042F44((__n128 *)buf, (__n128 *)&v179);
                sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
              }
            }
            LOWORD(v137[2]) = 30;
            v96 = *(unsigned __int8 *)(a1 + 144);
            if (*(_BYTE *)(a1 + 144))
              v97 = 300;
            else
              v97 = 966;
            WORD1(v137[2]) = v97;
            if (!v96 && dword_1009940B8 < 0x13)
              goto LABEL_181;
            goto LABEL_182;
          }
        }
        v86 = 2;
        goto LABEL_173;
      case 65547:
      case 65548:
        v209 = (unsigned __int128)0 >> 112;
        v207 = 0uLL;
        *(_OWORD *)v208 = 0uLL;
        *(_QWORD *)&v208[1] = 0x100129C01010101;
        *(_WORD *)&v208[9] = 513;
        *(_QWORD *)&v208[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v208[20] = 0xFFFF;
        memset(&v208[24], 0, 54);
        BYTE2(v137[0]) = 1;
        v29 = sub_10003BE44();
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 384))(v29) & 1) != 0
          || (v30 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 376))(v30)))
        {
          v31 = sub_10003BE44();
          v208[7] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 376))(v31);
          v32 = sub_10003BE44();
          LOBYTE(v137[0]) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 376))(v32);
          LODWORD(v137[2]) = 1966110;
          HIWORD(v137[0]) = 0;
          v33 = *((_QWORD *)&v138[0] + 1);
          if (*((_QWORD *)&v138[0] + 1) >= *(_QWORD *)&v138[1])
          {
            v37 = sub_100686328((uint64_t *)v138, (uint64_t)&v207);
          }
          else
          {
            **((_QWORD **)&v138[0] + 1) = (id)v207.n128_u64[0];
            *(_QWORD *)(v33 + 8) = (id)v207.n128_u64[1];
            *(_OWORD *)(v33 + 16) = *(_OWORD *)v208;
            v35 = *(_OWORD *)&v208[32];
            v34 = *(_OWORD *)&v208[48];
            v36 = *(_OWORD *)&v208[16];
            *(_OWORD *)(v33 + 78) = *(_OWORD *)&v208[62];
            *(_OWORD *)(v33 + 48) = v35;
            *(_OWORD *)(v33 + 64) = v34;
            *(_OWORD *)(v33 + 32) = v36;
            v37 = v33 + 96;
          }
          *((_QWORD *)&v138[0] + 1) = v37;
          if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
          {
            v177 = xmmword_10073B660;
            v178 = 0;
            sub_100042F44((__n128 *)buf, (__n128 *)&v177);
            v70 = *(_OWORD **)&v138[2];
            if (*(_QWORD *)&v138[2] >= *((_QWORD *)&v138[2] + 1))
            {
              v92 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v138[2] - *((_QWORD *)&v138[1] + 1)) >> 2);
              v93 = v92 + 1;
              if (v92 + 1 > 0xCCCCCCCCCCCCCCCLL)
                abort();
              if (0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v138[2] + 1) - *((_QWORD *)&v138[1] + 1)) >> 2) > v93)
                v93 = 0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v138[2] + 1) - *((_QWORD *)&v138[1] + 1)) >> 2);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v138[2] + 1) - *((_QWORD *)&v138[1] + 1)) >> 2) >= 0x666666666666666)
                v94 = 0xCCCCCCCCCCCCCCCLL;
              else
                v94 = v93;
              if (v94)
                v95 = (char *)sub_1000B58EC((uint64_t)&v138[2] + 8, v94);
              else
                v95 = 0;
              v122 = &v95[20 * v92];
              v123 = &v95[20 * v94];
              v124 = *(_OWORD *)buf;
              *((_DWORD *)v122 + 4) = (_DWORD)v196;
              *(_OWORD *)v122 = v124;
              v72 = v122 + 20;
              v126 = (char *)*((_QWORD *)&v138[1] + 1);
              v125 = *(char **)&v138[2];
              if (*(_QWORD *)&v138[2] != *((_QWORD *)&v138[1] + 1))
              {
                do
                {
                  v127 = *(_OWORD *)(v125 - 20);
                  *((_DWORD *)v122 - 1) = *((_DWORD *)v125 - 1);
                  *(_OWORD *)(v122 - 20) = v127;
                  v122 -= 20;
                  v125 -= 20;
                }
                while (v125 != v126);
                v125 = (char *)*((_QWORD *)&v138[1] + 1);
              }
              *((_QWORD *)&v138[1] + 1) = v122;
              *(_QWORD *)&v138[2] = v72;
              *((_QWORD *)&v138[2] + 1) = v123;
              if (v125)
                operator delete(v125);
            }
            else
            {
              v71 = *(_OWORD *)buf;
              *(_DWORD *)(*(_QWORD *)&v138[2] + 16) = (_DWORD)v196;
              *v70 = v71;
              v72 = (char *)v70 + 20;
            }
            *(_QWORD *)&v138[2] = v72;
            if (_os_feature_enabled_impl("BluetoothFeatures", "StandardUTFEAA"))
            {
              v175 = xmmword_10073B674;
              v176 = 0;
              sub_100042F44((__n128 *)buf, (__n128 *)&v175);
              sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
            }
          }
        }
        else
        {
          v208[7] = (dword_1009940B8 - 19) < 0x7BD;
          LOBYTE(v137[0]) = v208[7];
          LODWORD(v137[2]) = 1966110;
          HIWORD(v137[0]) = 0;
          sub_10066D40C((uint64_t *)v138, (uint64_t)&v207);
          if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
          {
            v173 = xmmword_10073B660;
            v174 = 0;
            sub_100042F44((__n128 *)buf, (__n128 *)&v173);
            sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
            if (_os_feature_enabled_impl("BluetoothFeatures", "StandardUTFEAA"))
            {
              v171 = xmmword_10073B674;
              v172 = 0;
              sub_100042F44((__n128 *)buf, (__n128 *)&v171);
              sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
            }
          }
        }
        if (a2 == 65547)
        {
          *((_QWORD *)&v137[1] + 1) = 6000;
        }
        else
        {
          v128 = sub_10003BE44();
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v128 + 384))(v128) & 1) == 0)
          {
            *(_QWORD *)&v137[1] = 39000;
            if ((a2 - 65548) < 2)
              v132 = 63;
            else
              v132 = 0;
            if (qword_100977B40 != -1)
              dispatch_once(&qword_100977B40, &stru_10093F498);
            v133 = sub_100046928((uint64_t)off_100977B38, v132, 1u);
            if ((~v133 & 6) == 0 || (v133 & 1) != 0)
            {
              strcpy((char *)&v137[2] + 2, "Z");
              BYTE7(v137[0]) = 1;
              BYTE4(v137[2]) = 1;
            }
            *((_QWORD *)&v137[1] + 1) = 120000;
            *(_WORD *)((char *)v137 + 9) = 257;
            BYTE11(v137[0]) = 1;
          }
        }
        goto LABEL_243;
      case 65549:
        v209 = (unsigned __int128)0 >> 112;
        v207 = 0uLL;
        *(_OWORD *)v208 = 0uLL;
        *(_QWORD *)&v208[1] = 0x100129C01010101;
        *(_WORD *)&v208[9] = 513;
        *(_QWORD *)&v208[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v208[20] = 0xFFFF;
        memset(&v208[24], 0, 54);
        v46 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 384))(v46))
          goto LABEL_121;
        if (qword_100977B40 != -1)
          dispatch_once(&qword_100977B40, &stru_10093F498);
        v47 = sub_100046928((uint64_t)off_100977B38, 0x3Fu, 1u);
        v208[7] = 1;
        LOBYTE(v137[0]) = 1;
        BYTE2(v137[0]) = 1;
        if (!*(_BYTE *)(a1 + 144))
        {
LABEL_121:
          v73 = 0;
          v74 = *((_QWORD *)&v141[2] + 1);
          *(_QWORD *)(a3 + 64) = *(_QWORD *)&v141[1];
          v75 = v140[1];
          *(_OWORD *)a3 = v140[0];
          *(_OWORD *)(a3 + 16) = v75;
          *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v140[1] + 12);
          *(_OWORD *)(a3 + 48) = v141[0];
          memset(v141, 0, 24);
          *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v141[1] + 8);
          *(_QWORD *)(a3 + 88) = v74;
          memset((char *)&v141[1] + 8, 0, 24);
          *(_BYTE *)(a3 + 96) = v142;
        }
        else
        {
          v48 = v47;
          v49 = sub_10003BE44();
          v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 376))(v49);
          LOWORD(v137[2]) = 30;
          if (v50)
          {
            strcpy((char *)&v137[2] + 2, "(");
          }
          else
          {
            if ((v48 & 3) != 0)
            {
              if ((v48 & 5) != 0)
                v121 = 90;
              else
                v121 = 60;
              WORD1(v137[2]) = v121;
              BYTE7(v137[0]) = 1;
              BYTE4(v137[2]) = 1;
            }
            else
            {
              WORD1(v137[2]) = 30;
            }
            *(_DWORD *)((char *)v137 + 9) = 16843009;
          }
          HIWORD(v137[0]) = 0;
          *(_QWORD *)&v137[1] = 0;
          sub_10066D40C((uint64_t *)v138, (uint64_t)&v207);
          if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
          {
            v169 = xmmword_10073B660;
            v170 = 0;
            sub_100042F44((__n128 *)buf, (__n128 *)&v169);
            sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
            if (_os_feature_enabled_impl("BluetoothFeatures", "StandardUTFEAA"))
            {
              v167 = xmmword_10073B674;
              v168 = 0;
              sub_100042F44((__n128 *)buf, (__n128 *)&v167);
              sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
            }
          }
          DWORD2(v137[2]) = 1;
          BYTE8(v137[0]) = 1;
          v135 = v137[1];
          *(_OWORD *)a3 = v137[0];
          *(_OWORD *)(a3 + 16) = v135;
          *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v137[1] + 12);
          *(_OWORD *)(a3 + 48) = v138[0];
          *(_QWORD *)(a3 + 64) = *(_QWORD *)&v138[1];
          memset(v138, 0, 24);
          *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v138[1] + 8);
          *(_QWORD *)(a3 + 88) = *((_QWORD *)&v138[2] + 1);
          memset((char *)&v138[1] + 8, 0, 24);
          *(_BYTE *)(a3 + 96) = v139;
          v73 = (void *)v207.n128_u64[1];
        }

        goto LABEL_108;
      case 65550:
        v209 = (unsigned __int128)0 >> 112;
        v207 = 0uLL;
        *(_OWORD *)v208 = 0uLL;
        *(_QWORD *)&v208[1] = 0x101129C01010101;
        *(_WORD *)&v208[9] = 513;
        *(_QWORD *)&v208[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v208[20] = 0xFFFF;
        memset(&v208[24], 0, 54);
        LOBYTE(v137[0]) = 1;
        BYTE2(v137[0]) = 1;
        LODWORD(v137[2]) = 19660830;
        HIWORD(v137[0]) = 0;
        *((_QWORD *)&v138[0] + 1) = sub_100686328((uint64_t *)v138, (uint64_t)&v207);
        if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
        {
          v165 = xmmword_10073B660;
          v166 = 0;
          sub_100042F44((__n128 *)buf, (__n128 *)&v165);
          sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
          if (_os_feature_enabled_impl("BluetoothFeatures", "StandardUTFEAA"))
          {
            v163 = xmmword_10073B674;
            v164 = 0;
            sub_100042F44((__n128 *)buf, (__n128 *)&v163);
            sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
          }
        }
        *((_QWORD *)&v137[1] + 1) = 60000;
        DWORD2(v137[2]) = 1;
        BYTE8(v137[0]) = 1;
        v45 = v137[1];
        *(_OWORD *)a3 = v137[0];
        *(_OWORD *)(a3 + 16) = v45;
        *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v137[1] + 12);
        *(_OWORD *)(a3 + 48) = v138[0];
        *(_QWORD *)(a3 + 64) = *(_QWORD *)&v138[1];
        memset(v138, 0, 24);
        *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v138[1] + 8);
        *(_QWORD *)(a3 + 88) = *((_QWORD *)&v138[2] + 1);
        memset((char *)&v138[1] + 8, 0, 24);
        *(_BYTE *)(a3 + 96) = v139;

        goto LABEL_108;
      case 65551:
        v209 = (unsigned __int128)0 >> 112;
        v207 = 0uLL;
        *(_OWORD *)v208 = 0uLL;
        *(_QWORD *)&v208[1] = 0x101129C01010101;
        *(_WORD *)&v208[9] = 513;
        *(_QWORD *)&v208[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v208[20] = 0xFFFF;
        memset(&v208[24], 0, 54);
        LOBYTE(v137[0]) = 1;
        LODWORD(v137[2]) = 2621470;
        HIWORD(v137[0]) = 0;
        *((_QWORD *)&v137[1] + 1) = 6000;
        *((_QWORD *)&v138[0] + 1) = sub_100686328((uint64_t *)v138, (uint64_t)&v207);
        if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
        {
          v161 = xmmword_10073B660;
          v162 = 0;
          sub_100042F44((__n128 *)buf, (__n128 *)&v161);
          sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
          if (_os_feature_enabled_impl("BluetoothFeatures", "StandardUTFEAA"))
          {
            v159 = xmmword_10073B674;
            v160 = 0;
            sub_100042F44((__n128 *)buf, (__n128 *)&v159);
            sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
          }
        }
        goto LABEL_243;
      case 65552:
        v209 = (unsigned __int128)0 >> 112;
        v207 = 0uLL;
        *(_OWORD *)v208 = 0uLL;
        *(_QWORD *)&v208[1] = 0x101129C01010101;
        *(_WORD *)&v208[9] = 513;
        *(_QWORD *)&v208[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v208[20] = 0xFFFF;
        memset(&v208[24], 0, 54);
        LOBYTE(v137[0]) = 1;
        HIWORD(v137[0]) = 0;
        *((_QWORD *)&v137[1] + 1) = 60000;
        v51 = *(unsigned __int8 *)(a1 + 144);
        BYTE5(v137[0]) = v51 ^ 1;
        if (v51)
        {
          *((_QWORD *)&v138[0] + 1) = sub_100686328((uint64_t *)v138, (uint64_t)&v207);
          if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
          {
            v157 = xmmword_10073B660;
            v158 = 0;
            sub_100042F44((__n128 *)buf, (__n128 *)&v157);
            sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
            if (_os_feature_enabled_impl("BluetoothFeatures", "StandardUTFEAA"))
            {
              v155 = xmmword_10073B674;
              v156 = 0;
              sub_100042F44((__n128 *)buf, (__n128 *)&v155);
              sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
            }
          }
          LODWORD(v137[2]) = 5898270;
          v7 = v138[0];
          v52 = v138[1];
          v53 = v138[2];
          v54 = v139;
          v55 = (void *)v207.n128_u64[1];
        }
        else
        {
          v55 = 0;
          LODWORD(v137[2]) = 0;
          v54 = 1;
          v52 = 0uLL;
          v53 = 0uLL;
        }
        DWORD2(v137[2]) = 1;
        BYTE8(v137[0]) = 1;
        v91 = v137[1];
        *(_OWORD *)a3 = v137[0];
        *(_OWORD *)(a3 + 16) = v91;
        *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v137[1] + 12);
        memset(v138, 0, 24);
        *(_OWORD *)(a3 + 48) = v7;
        *(_OWORD *)(a3 + 64) = v52;
        *(_OWORD *)(a3 + 80) = v53;
        memset((char *)&v138[1] + 8, 0, 24);
        *(_BYTE *)(a3 + 96) = v54;

        goto LABEL_108;
      case 65553:
        if (!*(_BYTE *)(a1 + 144))
          goto LABEL_83;
        v209 = (unsigned __int128)0 >> 112;
        v207 = 0uLL;
        *(_OWORD *)v208 = 0uLL;
        *(_QWORD *)&v208[1] = 0x101129C00010101;
        *(_WORD *)&v208[9] = 513;
        *(_QWORD *)&v208[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v208[20] = 0xFFFF;
        memset(&v208[24], 0, 54);
        *((_QWORD *)&v138[0] + 1) = sub_100686328((uint64_t *)v138, (uint64_t)&v207);
        if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
        {
          LOBYTE(v139) = 0;
          v153 = xmmword_10073B660;
          v154 = 0;
          sub_100042F44((__n128 *)buf, (__n128 *)&v153);
          sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
          if (_os_feature_enabled_impl("BluetoothFeatures", "StandardUTFEAA"))
          {
            v151 = xmmword_10073B674;
            v152 = 0;
            sub_100042F44((__n128 *)buf, (__n128 *)&v151);
            sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
          }
        }
        goto LABEL_24;
      case 65554:
        v209 = (unsigned __int128)0 >> 112;
        v207 = 0uLL;
        *(_OWORD *)v208 = 0uLL;
        *(_QWORD *)&v208[1] = 0x101129C01010101;
        *(_WORD *)&v208[9] = 513;
        *(_QWORD *)&v208[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v208[20] = 0xFFFF;
        memset(&v208[24], 0, 54);
        LOBYTE(v137[0]) = 1;
        LODWORD(v137[2]) = 1966110;
        HIWORD(v137[0]) = 0;
        *((_QWORD *)&v138[0] + 1) = sub_100686328((uint64_t *)v138, (uint64_t)&v207);
        if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
        {
          v149 = xmmword_10073B660;
          v150 = 0;
          sub_100042F44((__n128 *)buf, (__n128 *)&v149);
          sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
          if (_os_feature_enabled_impl("BluetoothFeatures", "StandardUTFEAA"))
          {
            v147 = xmmword_10073B674;
            v148 = 0;
            sub_100042F44((__n128 *)buf, (__n128 *)&v147);
            sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
          }
        }
LABEL_243:
        DWORD2(v137[2]) = 1;
        BYTE8(v137[0]) = 1;
        v134 = v137[1];
        *(_OWORD *)a3 = v137[0];
        *(_OWORD *)(a3 + 16) = v134;
        *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v137[1] + 12);
        *(_OWORD *)(a3 + 48) = v138[0];
        *(_QWORD *)(a3 + 64) = *(_QWORD *)&v138[1];
        memset(v138, 0, 24);
        *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v138[1] + 8);
        *(_QWORD *)(a3 + 88) = *((_QWORD *)&v138[2] + 1);
        memset((char *)&v138[1] + 8, 0, 24);
        *(_BYTE *)(a3 + 96) = v139;

        goto LABEL_108;
      case 65555:
      case 65556:
      case 65557:
      case 65558:
        goto LABEL_54;
      default:
        switch(a2)
        {
          case 2147418112:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            LOWORD(v137[0]) = 0;
            goto LABEL_101;
          case 2147418113:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            LOWORD(v137[0]) = 256;
            *(_QWORD *)&v137[1] = 0;
            BYTE4(v137[0]) = *(_BYTE *)(a1 + 144) ^ 1;
            v25 = 1;
            BYTE8(v137[0]) = 1;
            v64 = *(_OWORD *)((char *)&v137[1] + 12);
            v65 = v137[1];
            *(_OWORD *)a3 = v137[0];
            *(_OWORD *)(a3 + 16) = v65;
            goto LABEL_104;
          case 2147418114:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            v62 = 256;
            goto LABEL_100;
          case 2147418115:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            v62 = 257;
LABEL_100:
            LOWORD(v137[0]) = v62;
LABEL_101:
            *(_QWORD *)&v137[1] = 0;
            goto LABEL_103;
          case 2147418116:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            LOWORD(v137[0]) = 256;
            *(_QWORD *)&v137[1] = 20000;
            v25 = 1;
            BYTE8(v137[0]) = 1;
            *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v137[1] + 12);
            v61 = v137[1];
            *(_OWORD *)a3 = v137[0];
            *(_OWORD *)(a3 + 16) = v61;
            goto LABEL_105;
          case 2147418117:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            LOWORD(v137[0]) = 256;
            *(_QWORD *)&v137[1] = 0;
            v25 = 1;
            BYTE3(v137[0]) = 1;
            BYTE8(v137[0]) = 1;
            v66 = v137[1];
            *(_OWORD *)a3 = v137[0];
            *(_OWORD *)(a3 + 16) = v66;
            *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v137[1] + 12);
            *(_QWORD *)(a3 + 48) = 0;
            *(_QWORD *)(a3 + 56) = 0;
            memset(v138, 0, 24);
            goto LABEL_106;
          case 2147418118:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            LOWORD(v137[0]) = 257;
            *(_QWORD *)&v137[1] = 0;
            v212 = (__n128)0xFF0000000002uLL;
            v213 = 0;
            sub_100042F44(&v207, &v212);
            v67 = *(__n128 **)&v138[2];
            if (*(_QWORD *)&v138[2] >= *((_QWORD *)&v138[2] + 1))
            {
              v87 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v138[2] - *((_QWORD *)&v138[1] + 1)) >> 2);
              v88 = v87 + 1;
              if (v87 + 1 > 0xCCCCCCCCCCCCCCCLL)
                abort();
              if (0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v138[2] + 1) - *((_QWORD *)&v138[1] + 1)) >> 2) > v88)
                v88 = 0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v138[2] + 1) - *((_QWORD *)&v138[1] + 1)) >> 2);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v138[2] + 1) - *((_QWORD *)&v138[1] + 1)) >> 2) >= 0x666666666666666)
                v89 = 0xCCCCCCCCCCCCCCCLL;
              else
                v89 = v88;
              if (v89)
                v90 = (char *)sub_1000B58EC((uint64_t)&v138[2] + 8, v89);
              else
                v90 = 0;
              v99 = (__n128 *)&v90[20 * v87];
              v100 = &v90[20 * v89];
              v101 = v207;
              v99[1].n128_u32[0] = *(_DWORD *)v208;
              *v99 = v101;
              v69 = &v99[1].n128_i8[4];
              v103 = (char *)*((_QWORD *)&v138[1] + 1);
              v102 = *(char **)&v138[2];
              if (*(_QWORD *)&v138[2] != *((_QWORD *)&v138[1] + 1))
              {
                do
                {
                  v104 = *(__n128 *)(v102 - 20);
                  v99[-1].n128_u32[3] = *((_DWORD *)v102 - 1);
                  *(__n128 *)((char *)v99 - 20) = v104;
                  v99 = (__n128 *)((char *)v99 - 20);
                  v102 -= 20;
                }
                while (v102 != v103);
                v102 = (char *)*((_QWORD *)&v138[1] + 1);
              }
              *((_QWORD *)&v138[1] + 1) = v99;
              *(_QWORD *)&v138[2] = v69;
              *((_QWORD *)&v138[2] + 1) = v100;
              if (v102)
                operator delete(v102);
            }
            else
            {
              v68 = v207;
              *(_DWORD *)(*(_QWORD *)&v138[2] + 16) = *(_DWORD *)v208;
              *v67 = v68;
              v69 = &v67[1].n128_i8[4];
            }
            *(_QWORD *)&v138[2] = v69;
            v210 = (__n128)0xFF0100000002uLL;
            v211 = 0;
            sub_100042F44(&v207, &v210);
            v105 = *(__n128 **)&v138[2];
            if (*(_QWORD *)&v138[2] >= *((_QWORD *)&v138[2] + 1))
            {
              v108 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v138[2] - *((_QWORD *)&v138[1] + 1)) >> 2);
              v109 = v108 + 1;
              if (v108 + 1 > 0xCCCCCCCCCCCCCCCLL)
                abort();
              if (0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v138[2] + 1) - *((_QWORD *)&v138[1] + 1)) >> 2) > v109)
                v109 = 0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v138[2] + 1) - *((_QWORD *)&v138[1] + 1)) >> 2);
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v138[2] + 1) - *((_QWORD *)&v138[1] + 1)) >> 2) >= 0x666666666666666)
                v110 = 0xCCCCCCCCCCCCCCCLL;
              else
                v110 = v109;
              if (v110)
                v111 = (char *)sub_1000B58EC((uint64_t)&v138[2] + 8, v110);
              else
                v111 = 0;
              v112 = (__n128 *)&v111[20 * v108];
              v113 = &v111[20 * v110];
              v114 = v207;
              v112[1].n128_u32[0] = *(_DWORD *)v208;
              *v112 = v114;
              v107 = &v112[1].n128_i8[4];
              v116 = (char *)*((_QWORD *)&v138[1] + 1);
              v115 = *(char **)&v138[2];
              if (*(_QWORD *)&v138[2] != *((_QWORD *)&v138[1] + 1))
              {
                do
                {
                  v117 = *(__n128 *)(v115 - 20);
                  v112[-1].n128_u32[3] = *((_DWORD *)v115 - 1);
                  *(__n128 *)((char *)v112 - 20) = v117;
                  v112 = (__n128 *)((char *)v112 - 20);
                  v115 -= 20;
                }
                while (v115 != v116);
                v115 = (char *)*((_QWORD *)&v138[1] + 1);
              }
              *((_QWORD *)&v138[1] + 1) = v112;
              *(_QWORD *)&v138[2] = v107;
              *((_QWORD *)&v138[2] + 1) = v113;
              if (v115)
                operator delete(v115);
            }
            else
            {
              v106 = v207;
              *(_DWORD *)(*(_QWORD *)&v138[2] + 16) = *(_DWORD *)v208;
              *v105 = v106;
              v107 = &v105[1].n128_i8[4];
            }
            BYTE8(v137[0]) = 1;
            v118 = v137[1];
            *(_OWORD *)a3 = v137[0];
            *(_OWORD *)(a3 + 16) = v118;
            *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v137[1] + 12);
            *(_OWORD *)(a3 + 48) = v138[0];
            v119 = v138[1];
            memset(v138, 0, 24);
            *(_OWORD *)(a3 + 64) = v119;
            v120 = *((_QWORD *)&v138[2] + 1);
            *(_QWORD *)(a3 + 80) = v107;
            *(_QWORD *)(a3 + 88) = v120;
            memset((char *)&v138[1] + 8, 0, 24);
            goto LABEL_39;
          case 2147418119:
            LODWORD(v137[2]) = 1966110;
            HIWORD(v137[0]) = 0;
            LOWORD(v137[0]) = 256;
            *((_QWORD *)&v137[1] + 1) = 10000;
LABEL_103:
            v25 = 1;
            BYTE8(v137[0]) = 1;
            v63 = v137[1];
            *(_OWORD *)a3 = v137[0];
            *(_OWORD *)(a3 + 16) = v63;
            v64 = *(_OWORD *)((char *)&v137[1] + 12);
LABEL_104:
            *(_OWORD *)(a3 + 28) = v64;
LABEL_105:
            *(_QWORD *)(a3 + 48) = 0;
            *(_QWORD *)(a3 + 56) = 0;
            memset(v138, 0, 24);
LABEL_106:
            *(_QWORD *)(a3 + 64) = 0;
            *(_QWORD *)(a3 + 72) = 0;
            *(_QWORD *)(a3 + 80) = 0;
            *(_QWORD *)(a3 + 88) = 0;
            memset((char *)&v138[1] + 8, 0, 24);
            break;
          default:
            if (a2 == 269)
            {
              BYTE4(v137[0]) = 1;
              BYTE8(v137[0]) = 1;
              DWORD2(v137[2]) = 1;
            }
            goto LABEL_54;
        }
        goto LABEL_107;
    }
  }
  if (a2 != 259)
  {
    if (a2 != 265)
    {
      if (a2 == 268)
      {
        if (*(_BYTE *)(a1 + 144))
        {
          v8 = sub_10003BE44();
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 328))(v8) & 1) != 0)
          {
            if (qword_100977B40 != -1)
              dispatch_once(&qword_100977B40, &stru_10093F498);
            v9 = sub_100046928((uint64_t)off_100977B38, 0xFFFFu, 1u);
            LODWORD(v137[2]) = 2621470;
            *(_WORD *)((char *)v137 + 9) = 257;
            BYTE11(v137[0]) = 1;
            *((_QWORD *)&v137[1] + 1) = 5000;
            LODWORD(v137[0]) = 0x1000000;
            if ((~v9 & 6) == 0 || (v9 & 1) != 0)
            {
              strcpy((char *)&v137[2] + 2, "Z");
              BYTE7(v137[0]) = 1;
              BYTE4(v137[2]) = 1;
            }
            BYTE8(v137[0]) = 1;
            v10 = *(_OWORD *)((char *)&v137[1] + 12);
            v11 = v137[1];
            *(_OWORD *)a3 = v137[0];
            *(_OWORD *)(a3 + 16) = v11;
            *(_OWORD *)(a3 + 28) = v10;
            *(_OWORD *)(a3 + 48) = v138[0];
            *(_QWORD *)(a3 + 64) = *(_QWORD *)&v138[1];
            memset(v138, 0, 24);
            *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v138[1] + 8);
            *(_QWORD *)(a3 + 88) = *((_QWORD *)&v138[2] + 1);
            memset((char *)&v138[1] + 8, 0, 24);
            goto LABEL_39;
          }
          v7 = v141[0];
          v26 = v141[1];
          v27 = v141[2];
          v25 = v142;
        }
        else
        {
          v25 = 1;
          v26 = 0uLL;
          v27 = 0uLL;
        }
        v28 = v140[1];
        *(_OWORD *)a3 = v140[0];
        *(_OWORD *)(a3 + 16) = v28;
        *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v140[1] + 12);
        memset(v141, 0, 24);
        *(_OWORD *)(a3 + 48) = v7;
        *(_OWORD *)(a3 + 64) = v26;
        *(_OWORD *)(a3 + 80) = v27;
        memset((char *)&v141[1] + 8, 0, 24);
        goto LABEL_107;
      }
LABEL_54:
      v44 = v137[1];
      *(_OWORD *)a3 = v137[0];
      *(_OWORD *)(a3 + 16) = v44;
      *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v137[1] + 12);
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      memset(v138, 0, 24);
      *(_QWORD *)(a3 + 80) = 0;
      *(_QWORD *)(a3 + 88) = 0;
      memset((char *)&v138[1] + 8, 0, 24);
LABEL_84:
      v25 = 1;
      goto LABEL_107;
    }
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_10093F498);
    v20 = sub_100046928((uint64_t)off_100977B38, 0x6Fu, 0);
    LOWORD(v137[2]) = 30;
    v21 = sub_10003BE44();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 328))(v21) & 1) != 0)
    {
      if ((~v20 & 6) != 0)
      {
LABEL_37:
        strcpy((char *)&v137[2] + 2, "(");
LABEL_38:
        LODWORD(v137[0]) = 16843009;
        *(_QWORD *)&v137[1] = 0;
        WORD4(v137[0]) = 257;
        BYTE10(v137[0]) = 1;
        DWORD2(v137[2]) = 1;
        v24 = v137[1];
        *(_OWORD *)a3 = v137[0];
        *(_OWORD *)(a3 + 16) = v24;
        *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v137[1] + 12);
        *(_OWORD *)(a3 + 48) = v138[0];
        *(_QWORD *)(a3 + 64) = *(_QWORD *)&v138[1];
        memset(v138, 0, 24);
        *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v138[1] + 8);
        *(_QWORD *)(a3 + 88) = *((_QWORD *)&v138[2] + 1);
        memset((char *)&v138[1] + 8, 0, 24);
LABEL_39:
        v25 = v139;
LABEL_107:
        *(_BYTE *)(a3 + 96) = v25;
        goto LABEL_108;
      }
    }
    else
    {
      v22 = sub_10003BE44();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 424))(v22) || (v20 & 4) == 0 || (v20 & 2) == 0)
        goto LABEL_37;
    }
    strcpy((char *)&v137[2] + 2, "<");
    v23 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 648))(v23))
      BYTE4(v137[2]) = 1;
    goto LABEL_38;
  }
  if (!*(_BYTE *)(a1 + 144))
  {
LABEL_83:
    v56 = v140[1];
    *(_OWORD *)a3 = v140[0];
    *(_OWORD *)(a3 + 16) = v56;
    *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v140[1] + 12);
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    memset(v141, 0, 24);
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    memset((char *)&v141[1] + 8, 0, 24);
    goto LABEL_84;
  }
  v209 = (unsigned __int128)0 >> 112;
  v207 = 0uLL;
  *(_OWORD *)v208 = 0uLL;
  *(_QWORD *)&v208[1] = 0x101079C00010101;
  *(_WORD *)&v208[9] = 513;
  *(_QWORD *)&v208[12] = 0xFFFF0000FFFFLL;
  *(_DWORD *)&v208[20] = 0xFFFF;
  memset(&v208[24], 0, 54);
  *((_QWORD *)&v138[0] + 1) = sub_100686328((uint64_t *)v138, (uint64_t)&v207);
  if (_os_feature_enabled_impl("CoreLocation", "StandardUT"))
  {
    LOBYTE(v139) = 0;
    v145 = xmmword_10073B660;
    v146 = 0;
    sub_100042F44((__n128 *)buf, (__n128 *)&v145);
    sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
    if (_os_feature_enabled_impl("BluetoothFeatures", "StandardUTFEAA"))
    {
      v143 = xmmword_10073B674;
      v144 = 0;
      sub_100042F44((__n128 *)buf, (__n128 *)&v143);
      sub_10066D2EC((void **)&v138[1] + 1, (__int128 *)buf);
    }
  }
LABEL_24:
  HIWORD(v137[0]) = 0;
  LOWORD(v137[0]) = 257;
  *(_QWORD *)&v137[1] = 0;
  BYTE4(v137[0]) = 1;
  BYTE8(v137[0]) = 1;
  LODWORD(v137[2]) = 19660830;
  DWORD2(v137[2]) = 1;
  v19 = v137[1];
  *(_OWORD *)a3 = v137[0];
  *(_OWORD *)(a3 + 16) = v19;
  *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v137[1] + 12);
  *(_OWORD *)(a3 + 48) = v138[0];
  *(_QWORD *)(a3 + 64) = *(_QWORD *)&v138[1];
  memset(v138, 0, 24);
  *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v138[1] + 8);
  *(_QWORD *)(a3 + 88) = *((_QWORD *)&v138[2] + 1);
  memset((char *)&v138[1] + 8, 0, 24);
  *(_BYTE *)(a3 + 96) = v139;

LABEL_108:
  if (*((_QWORD *)&v138[1] + 1))
  {
    *(_QWORD *)&v138[2] = *((_QWORD *)&v138[1] + 1);
    operator delete(*((void **)&v138[1] + 1));
  }
  v207.n128_u64[0] = (unint64_t)v138;
  sub_1000B5524((void ***)&v207);
  if (*((_QWORD *)&v141[1] + 1))
  {
    *(_QWORD *)&v141[2] = *((_QWORD *)&v141[1] + 1);
    operator delete(*((void **)&v141[1] + 1));
  }
  *(_QWORD *)&v137[0] = v141;
  sub_1000B5524((void ***)v137);
}

void sub_10003BC78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1009940C0);
  _Unwind_Resume(a1);
}

uint64_t sub_10003BE44()
{
  if (qword_100991E68 != -1)
    dispatch_once(&qword_100991E68, &stru_1009294B8);
  return qword_100991E60;
}

uint64_t sub_10003BE84(_DWORD *a1)
{
  uint64_t v1;

  v1 = 25;
  if ((a1[178] - 2001) >= 0x7CF)
  {
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 3552))(a1))
      return 25;
    else
      return 22;
  }
  return v1;
}

uint64_t sub_10003BECC()
{
  if (qword_100991FD0 != -1)
    dispatch_once(&qword_100991FD0, &stru_10092B970);
  return byte_100991FC8;
}

uint64_t sub_10003BF0C(uint64_t a1)
{
  uint64_t v2;

  if (!_os_feature_enabled_impl("BluetoothFeatures", "BeepOnMoveWake")
    || (*(_DWORD *)(a1 + 712) - 22) > 4)
  {
    return 0;
  }
  v2 = sub_10003BE44();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 352))(v2);
}

uint64_t sub_10003BF6C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003ABE58;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992130 != -1)
    dispatch_once(&qword_100992130, block);
  return byte_100992128;
}

void sub_10003BFE0(uint64_t a1, void *a2, unsigned int a3, char a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, void *a12, char a13, char a14, char a15, char a16, char a17, void *a18, int a19, int a20,int a21)
{
  id v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  id v36[3];
  unsigned int *v37;
  uint64_t (**v38)();
  unsigned int *v39;
  id v40;
  id v41;

  v22 = a2;
  sub_10003C22C((uint64_t)v36, v22, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21);
  v23 = *(_QWORD *)(a1 + 72);
  if (v23 >= *(_QWORD *)(a1 + 80))
  {
    v24 = sub_1000B5990((uint64_t *)(a1 + 64), (uint64_t *)v36);
  }
  else
  {
    sub_1000B5A98(a1 + 80, *(_QWORD *)(a1 + 72), (uint64_t *)v36);
    v24 = v23 + 96;
    *(_QWORD *)(a1 + 72) = v23 + 96;
  }
  *(_QWORD *)(a1 + 72) = v24;

  v38 = &off_100918258;
  if (v39)
    sub_100056AAC(v39);
  v36[2] = &off_100918258;
  if (v37)
    sub_100056AAC(v37);

  v25 = *(id *)(a1 + 152);
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](NSMutableSet, "setWithSet:", v25));

  objc_msgSend(v26, "addObject:", v22);
  v27 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v26;

  if (a9 == 1)
  {
    v28 = (unint64_t)a3 >> 6;
    v29 = 1 << a3;
    *(_QWORD *)(a1 + 8 * v28 + 208) |= 1 << a3;
  }
  else
  {
    *(_BYTE *)(a1 + 272) = 1;
    v28 = (unint64_t)a3 >> 6;
    v29 = 1 << a3;
  }
  *(_QWORD *)(a1 + 8 * v28 + 240) |= v29;

}

void sub_10003C1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  va_list va;

  va_start(va, a14);
  sub_1000B5930((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_10003C22C(uint64_t a1, void *a2, char a3, char a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, void *a12, char a13, char a14, char a15, char a16, char a17, void *a18, int a19, int a20,int a21)
{
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;

  v28 = a2;
  v29 = a12;
  v30 = a18;
  v31 = v28;
  *(_QWORD *)a1 = v31;
  *(_BYTE *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 9) = a4;
  v32 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a1 + 16) = &off_100918258;
  *(_QWORD *)(a1 + 24) = v32;
  if (v32)
    sub_10003C37C(v32);
  v33 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(a1 + 32) = &off_100918258;
  *(_QWORD *)(a1 + 40) = v33;
  if (v33)
    sub_10003C37C(v33);
  *(_BYTE *)(a1 + 48) = a7;
  *(_BYTE *)(a1 + 49) = a8;
  *(_BYTE *)(a1 + 50) = a9;
  *(_BYTE *)(a1 + 51) = a10;
  *(_BYTE *)(a1 + 52) = a11;
  *(_QWORD *)(a1 + 56) = v29;
  *(_BYTE *)(a1 + 64) = a13;
  *(_BYTE *)(a1 + 65) = a14;
  *(_BYTE *)(a1 + 66) = a15;
  *(_BYTE *)(a1 + 67) = a16;
  *(_BYTE *)(a1 + 68) = a17;
  *(_QWORD *)(a1 + 72) = v30;
  *(_DWORD *)(a1 + 80) = a19;
  *(_DWORD *)(a1 + 84) = a20;
  *(_DWORD *)(a1 + 88) = a21;

  return a1;
}

void sub_10003C344(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v7;

  *(_QWORD *)(v1 + 16) = v5;
  v7 = *(unsigned int **)(v1 + 24);
  if (v7)
    sub_100056AAC(v7);

  _Unwind_Resume(a1);
}

void sub_10003C37C(uint64_t a1)
{
  unsigned int *v1;
  signed int v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (unsigned int *)(a1 + 8);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2, v1));
  if (v2 <= 0x3FFFFFFF)
  {
    do
      v3 = __ldxr(v1);
    while (__stxr(v3 + 1, v1));
    if (v3 <= 0)
    {
      v4 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
        sub_1006E04C4(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t *sub_10003C3F0(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = (_OWORD *)a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 96);
    v2 -= 96;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(v4 - 6) = v5;
    v4 -= 6;
    v4[1] = *(_OWORD *)(v2 + 16);
    v6 = *(_OWORD *)(v2 + 32);
    v7 = *(_OWORD *)(v2 + 48);
    v8 = *(_OWORD *)(v2 + 64);
    *(_OWORD *)((char *)v4 + 78) = *(_OWORD *)(v2 + 78);
    v4[3] = v7;
    v4[4] = v8;
    v4[2] = v6;
  }
  a2[1] = v4;
  v9 = *result;
  *result = (uint64_t)v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10003C46C(uint64_t a1)
{
  sub_10068644C(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_10003C4A0()
{
  if (qword_100992000 != -1)
    dispatch_once(&qword_100992000, &stru_10092B9D0);
  return byte_100991FF8;
}

void sub_10003C4E0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 64);
  for (i = *(_QWORD *)(a1 + 72); i != v3; sub_1000B5BF8(a1 + 80, i))
    i -= 96;
  *(_QWORD *)(a1 + 72) = v3;
  v4 = a1 + 240;
  v5 = 0;
  sub_10068587C((uint64_t)&v4, 0x100uLL);
  v4 = a1 + 208;
  v5 = 0;
  sub_10068587C((uint64_t)&v4, 0x100uLL);
}

_DWORD *sub_10003C568(_DWORD *result, __int128 *a2)
{
  _DWORD *v3;
  __int128 v4;
  __int128 v5;

  v3 = result;
  v4 = *a2;
  v5 = a2[1];
  *(_OWORD *)(result + 77) = *(__int128 *)((char *)a2 + 28);
  *(_OWORD *)(result + 70) = v4;
  *(_OWORD *)(result + 74) = v5;
  if (result + 70 != (_DWORD *)a2)
  {
    sub_100685660((uint64_t *)result + 41, *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 5));
    result = sub_1000B56F0((_QWORD *)v3 + 44, *((__int128 **)a2 + 9), *((__int128 **)a2 + 10), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2));
  }
  *((_BYTE *)v3 + 376) = *((_BYTE *)a2 + 96);
  return result;
}

uint64_t sub_10003C5EC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  _BOOL4 v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v13;
  __int128 v14;
  void *__p[2];
  __int128 v16;
  uint64_t v17;
  void **v18;

  v1 = *(_QWORD **)(a1 + 2040);
  v2 = (_QWORD *)(a1 + 2048);
  if (v1 != (_QWORD *)(a1 + 2048))
  {
    v3 = 0;
    while (1)
    {
      v4 = v1[5];
      v5 = *(_QWORD *)(v4 + 8);
      if (*(_DWORD *)(v5 + 168))
      {
        v17 = 0;
        *(_OWORD *)__p = 0u;
        v16 = 0u;
        v14 = 0u;
        v6 = *(_QWORD *)(v4 + 8);
        v13 = *(_OWORD *)(v6 + 280);
        __p[0] = 0;
        v14 = 0uLL;
        sub_100685584(&v14, *(_QWORD *)(v6 + 328), *(_QWORD *)(v6 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 336) - *(_QWORD *)(v6 + 328)) >> 5));
        __p[1] = 0;
        v16 = 0uLL;
        sub_1000B61B8((char *)&__p[1], *(__int128 **)(v6 + 352), *(__int128 **)(v6 + 360), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v6 + 360) - *(_QWORD *)(v6 + 352)) >> 2));
        LOBYTE(v17) = *(_BYTE *)(v6 + 376);
        if (BYTE8(v13))
          v7 = HIWORD(v13) == 0;
        else
          v7 = 1;
        v8 = !v7;
        if (__p[1])
        {
          *(void **)&v16 = __p[1];
          operator delete(__p[1]);
        }
        v3 |= v8;
        v18 = (void **)&v14;
        sub_1000B5524(&v18);
        v5 = *(_QWORD *)(v4 + 8);
      }
      v9 = *(_BYTE *)(v5 + 122) != 0;
      if ((*(_BYTE *)(v5 + 242) & 4) != 0 && !*(_BYTE *)(v5 + 122))
        break;
      v10 = (_QWORD *)v1[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v1[2];
          v7 = *v11 == (_QWORD)v1;
          v1 = v11;
        }
        while (!v7);
      }
      v3 |= v9;
      v1 = v11;
      if (v11 == v2)
        return v3 & 1;
    }
  }
  LOBYTE(v3) = 0;
  return v3 & 1;
}

void sub_10003C778(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 88) = v1;
  sub_1000B5524((void ***)(v2 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_10003C790(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AF480;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992278 != -1)
    dispatch_once(&qword_100992278, block);
  return byte_100992270;
}

BOOL sub_10003C804(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  return *(_BYTE *)(v1 + 1) && *(_BYTE *)(v1 + 120) != 0;
}

uint64_t sub_10003C828()
{
  if (qword_1009921B8 != -1)
    dispatch_once(&qword_1009921B8, &stru_10092BB70);
  return byte_1009921B0;
}

uint64_t sub_10003C868(uint64_t a1, unint64_t a2, int a3, uint64_t a4, char a5, int a6)
{
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  id v33;
  id v34;
  id v35;
  __n128 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  __int128 v47;
  uint64_t v48;
  _QWORD v49[2];
  uint64_t (**v50)();
  unsigned int *v51;
  _QWORD v52[10];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[144];
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  _QWORD v62[2];

  v57 = 0;
  memset(v56, 0, sizeof(v56));
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  memset(v52, 0, sizeof(v52));
  sub_1002613AC((uint64_t)v52);
  if (a2)
  {
    ++*(_QWORD *)(a1 + 2096);
    if (a6)
    {
      v10 = *(_QWORD *)(a4 + 8);
      v11 = *(_WORD *)(v10 + 472);
      v12 = *(unsigned __int8 *)(v10 + 474);
      v13 = *(unsigned __int8 *)(v10 + 342);
      v14 = sub_100065478();
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 680))(v14, ((unint64_t)(v11 & 4) << 16) | (v13 << 24) | ((unint64_t)(v11 & 3) << 8) | v12);
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093F4F8);
    v62[1] = 0;
    v62[0] = 0;
    v43 = off_1009778C0;
    sub_10003F924((uint64_t)off_1009778C0, a2, 1u, 1u, 0, 0, (unsigned __int8 *)v62);
    if (!uuid_is_null((const unsigned __int8 *)v62))
    {
      v17 = sub_100030DF4((const unsigned __int8 *)v62);
      v44 = (void *)objc_claimAutoreleasedReturnValue(v17);
      sub_10066278C((uint64_t)v43, v44, *(_DWORD *)(*(_QWORD *)(a4 + 8) + 312) != 0);
      v18 = *(_QWORD *)(a4 + 8);
      if (*(_BYTE *)(v18 + 304))
        v19 = 1;
      else
        v19 = *(_BYTE *)(v18 + 305) != 0;
      sub_100662814((uint64_t)v43, v44, v19);
      v22 = *(_QWORD *)(a4 + 8);
      if (*(_BYTE *)(v22 + 13))
      {
        sub_100047178((uint64_t)v43, v44, 1);
        v22 = *(_QWORD *)(a4 + 8);
      }
      sub_10065D7BC((uint64_t)v43, v44, *(_BYTE *)(v22 + 12));
      v23 = *(_QWORD *)(a4 + 8);
      if (*(_WORD *)(v23 + 40))
      {
        sub_1006575D4((uint64_t)v43, v44, *(_WORD *)(v23 + 40));
        v23 = *(_QWORD *)(a4 + 8);
      }
      if (*(_QWORD *)(v23 + 128))
      {
        v60 = xmmword_10073B4B8;
        v61 = 0;
        sub_100042F44(&v58, (__n128 *)&v60);
        v24 = sub_100042F58(v23 + 112, (unsigned __int8 *)&v58);
        if (v23 + 120 != v24)
        {
          v25 = v24 + 56;
          if ((unint64_t)sub_10003F8C4(v24 + 56) >= 3)
          {
            v26 = sub_10003EB18(v25);
            if (*(_WORD *)(v26 + 1))
            {
              v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), *(unsigned __int16 *)(v26 + 1)));
              sub_1006592E8((uint64_t)v43, v44, CFSTR("GHSDeviceType"), v27);
              if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
                sub_100717864();

            }
          }
        }
      }
      if (*(_BYTE *)(a1 + 3256))
      {
        v28 = *(_QWORD *)(a4 + 8);
        if (*(_BYTE *)(v28 + 367))
        {
          v29 = *(unsigned __int8 *)(v28 + 365);
          if (v29 == 1)
          {
            ++*(_DWORD *)(a1 + 3244);
            if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
              sub_100717804();
          }
          else if (!v29)
          {
            ++*(_DWORD *)(a1 + 3240);
            if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
              sub_1007177A4();
          }
        }
      }
      sub_1000457D0((uint64_t)v43, v44);
      sub_100045748((uint64_t)v43, v44, *(double *)(*(_QWORD *)(a4 + 8) + 240));
      if (*(_BYTE *)(*(_QWORD *)(a4 + 8) + 367))
        sub_10065B4A4((uint64_t)v43, v44, a5);
      sub_100666874((uint64_t)v43, v44, a5);
      v58.n128_u64[0] = (unint64_t)v62;
      v37 = sub_1000446A4((uint64_t **)(a1 + 2064), (unsigned __int8 *)v62, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v58);
      switch(a3)
      {
        case 0:
        case 2:
        case 3:
          if (a6)
            v38 = (uint64_t)(v37 + 96);
          else
            v38 = (uint64_t)(v37 + 48);
          goto LABEL_62;
        case 1:
          if (a6)
            v38 = (uint64_t)(v37 + 96);
          else
            v38 = (uint64_t)(v37 + 64);
          goto LABEL_62;
        case 4:
          if (a6)
            v38 = (uint64_t)(v37 + 112);
          else
            v38 = (uint64_t)(v37 + 80);
LABEL_62:
          sub_100041698(v38, a4);
          break;
        default:
          break;
      }
      v49[1] = 0;
      v49[0] = 0;
      sub_1000452FC(v49);
    }
    v15 = *(_QWORD *)(a4 + 8);
    if (*(_BYTE *)(v15 + 14))
    {
      v16 = qword_100999828;
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
      {
        v41 = sub_100021770(a2);
        v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
        v58.n128_u32[0] = 138543362;
        *(unint64_t *)((char *)v58.n128_u64 + 4) = (unint64_t)v42;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to get UUID for device \"%{public}@\" that caused AP wakeup", (uint8_t *)&v58, 0xCu);

        v15 = *(_QWORD *)(a4 + 8);
      }
      v58 = 0uLL;
      v59 = 0;
      if (*(char *)(v15 + 39) < 0)
      {
        sub_10003430C(&v47, *(void **)(v15 + 16), *(_QWORD *)(v15 + 24));
      }
      else
      {
        v47 = *(_OWORD *)(v15 + 16);
        v48 = *(_QWORD *)(v15 + 32);
      }
      v20 = HIBYTE(v48);
      if (v48 < 0)
        v20 = *((_QWORD *)&v47 + 1);
      if (v20)
      {
        v21 = *(_QWORD *)(a4 + 8);
        if (*(char *)(v21 + 39) < 0)
        {
          sub_10003430C(&v58, *(void **)(v21 + 16), *(_QWORD *)(v21 + 24));
        }
        else
        {
          v58 = *(__n128 *)(v21 + 16);
          v59 = *(_QWORD *)(v21 + 32);
        }
      }
      else
      {
        sub_100091AE8(&v58, "Unknown");
      }
      if (SHIBYTE(v48) < 0)
        operator delete((void *)v47);
      if (*(_BYTE *)(*(_QWORD *)(a4 + 8) + 367))
        v30 = 2;
      else
        v30 = 1;
      v31 = sub_10005D5A4();
      v32 = *(unsigned int **)(*(_QWORD *)(a4 + 8) + 56);
      v50 = &off_100918258;
      v51 = v32;
      if (v32)
        sub_10003C37C((uint64_t)v32);
      v33 = sub_100021770(a2);
      v34 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v33));
      v35 = objc_msgSend(v34, "UTF8String");
      if (v59 >= 0)
        v36 = &v58;
      else
        v36 = (__n128 *)v58.n128_u64[0];
      (*(void (**)(uint64_t, uint64_t (***)(), uint64_t, const char *, id, __n128 *))(*(_QWORD *)v31 + 32))(v31, &v50, v30, "com.apple.bluetoothd", v35, v36);

      v50 = &off_100918258;
      if (v51)
        sub_100056AAC(v51);
      if (SHIBYTE(v59) < 0)
        operator delete((void *)v58.n128_u64[0]);
    }
  }
  *(_QWORD *)((char *)v52
  v52[2] = v39;
  if (SHIBYTE(v54) < 0)
    operator delete(*((void **)&v53 + 1));
  std::streambuf::~streambuf(&v52[3]);
  return std::ios::~ios(v56);
}

void sub_10003E5A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;

  std::ostream::sentry::~sentry(v1 + 208);
  if (*(char *)(v1 + 439) < 0)
    operator delete(*(void **)(v1 + 416));
  if (*(char *)(v1 + 543) < 0)
    operator delete(*(void **)(v1 + 520));
  *(_QWORD *)(v1 + 344) = &off_100918258;
  v3 = *(unsigned int **)(v1 + 352);
  if (v3)
    sub_100056AAC(v3);

  *(_QWORD *)(v1 + 400) = &off_100918298;
  v4 = *(unsigned int **)(v1 + 408);
  if (v4)
    sub_100056AAC(v4);

  sub_10003F8DC(v1 + 824, *(_QWORD **)(v1 + 832));
  sub_1006CC5C8(v1 + 848);
  sub_1006CC5C8(v1 + 1856);
  *(_QWORD *)(v1 + 1248) = &off_100918298;
  v5 = *(unsigned int **)(v1 + 1256);
  if (v5)
    sub_100056AAC(v5);

  sub_1006CC5C8(v1 + 1280);
  _Unwind_Resume(a1);
}

uint64_t sub_10003EB18(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return v1 + 24;
  else
    return 0;
}

BOOL sub_10003EB2C(uint64_t a1)
{
  uint64_t v2;
  char v3;
  int v4;
  char v5;

  v2 = sub_10003BE44();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 384))(v2);
  v4 = *(unsigned __int8 *)(a1 + 81);
  if ((v4 & 0x30) != 0)
    v5 = v3;
  else
    v5 = 0;
  return (v5 & 1) != 0 || v4 == 16 || sub_10003F24C(a1);
}

uint64_t sub_10003EB84()
{
  if (qword_100992010 != -1)
    dispatch_once(&qword_100992010, &stru_10092B9F0);
  return byte_100992008;
}

BOOL sub_10003EBC4(uint64_t a1)
{
  uint64_t v2;

  if (sub_100687C6C(a1))
    return 1;
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 56), "count"))
    return 1;
  v2 = *(_QWORD *)(a1 + 8);
  return *(_BYTE *)(v2 + 137)
      || *(_QWORD *)(v2 + 64) != *(_QWORD *)(v2 + 72)
      || *(_QWORD *)(v2 + 96) != *(_QWORD *)(v2 + 104);
}

uint64_t sub_10003EC24(uint64_t a1, uint64_t a2, unint64_t a3, void **a4, _BYTE *a5)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  char v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  void **v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  int8x8_t *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  NSObject *v46;
  uint32_t v47;
  uint64_t v50;
  void *__p[2];
  char v53;
  __int16 v54;
  uint8_t v55[8];
  _DWORD *v56;
  _QWORD v57[2];
  uint8_t buf[4];
  void **v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int128 v64;
  int v65;

  if (a3 >= 3)
  {
    v50 = (uint64_t)(a4 + 2);
    v8 = 2;
    v9 = 2;
    while (1)
    {
      v10 = a2 + v8;
      v11 = *(unsigned __int8 *)(a2 + v8);
      if ((_DWORD)v11 == 1)
      {
        if (v9 + 16 >= a3)
        {
          v43 = qword_100999828;
          v15 = 0;
          if (!os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
            return v15 & 1;
          *(_WORD *)v55 = 0;
          v44 = "Invalid length";
          goto LABEL_69;
        }
        v12 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v12 + 16) != *(_QWORD *)(v12 + 8))
        {
          v56 = 0;
          v57[0] = 0;
          *(_QWORD *)v55 = 0;
          sub_1000B61B8((char *)v55, *(__int128 **)(v12 + 8), *(__int128 **)(v12 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 2));
          v14 = *(_DWORD **)v55;
          v13 = v56;
          if (*(_DWORD **)v55 == v56)
          {
            v15 = 0;
          }
          else
          {
            v15 = 0;
            v16 = v10 + 1;
            do
            {
              v54 = 0;
              v17 = v14[4];
              v64 = *(_OWORD *)v14;
              v65 = v17;
              sub_1004750E0((unsigned __int8 *)&v64, (_BYTE *)&v54 + 1, &v54);
              if (HIBYTE(v54) <= 0xFuLL && ((*(unsigned __int8 *)(v16 + HIBYTE(v54)) >> v54) & 1) != 0)
              {
                v18 = qword_100999828;
                if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
                {
                  sub_10006887C((uint64_t)v14, __p);
                  v19 = __p;
                  if (v53 < 0)
                    v19 = (void **)__p[0];
                  *(_DWORD *)buf = 136446722;
                  v59 = v19;
                  v60 = 1024;
                  v61 = HIBYTE(v54);
                  v62 = 1024;
                  v63 = v54;
                  _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Tentatively matched UUID %{public}s (@ byte: %u, bit: %u)", buf, 0x18u);
                  if (v53 < 0)
                    operator delete(__p[0]);
                }
                v21 = (char *)a4[1];
                v20 = (char *)a4[2];
                if (v21 >= v20)
                {
                  v24 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - (_BYTE *)*a4) >> 2);
                  v25 = v24 + 1;
                  if (v24 + 1 > 0xCCCCCCCCCCCCCCCLL)
                    abort();
                  v26 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - (_BYTE *)*a4) >> 2);
                  if (2 * v26 > v25)
                    v25 = 2 * v26;
                  if (v26 >= 0x666666666666666)
                    v27 = 0xCCCCCCCCCCCCCCCLL;
                  else
                    v27 = v25;
                  if (v27)
                    v28 = (char *)sub_1000B58EC(v50, v27);
                  else
                    v28 = 0;
                  v29 = &v28[20 * v24];
                  v30 = *(_OWORD *)v14;
                  *((_DWORD *)v29 + 4) = v14[4];
                  *(_OWORD *)v29 = v30;
                  v32 = (char *)*a4;
                  v31 = (char *)a4[1];
                  v33 = v29;
                  if (v31 != *a4)
                  {
                    do
                    {
                      v34 = *(_OWORD *)(v31 - 20);
                      *((_DWORD *)v33 - 1) = *((_DWORD *)v31 - 1);
                      *(_OWORD *)(v33 - 20) = v34;
                      v33 -= 20;
                      v31 -= 20;
                    }
                    while (v31 != v32);
                    v31 = (char *)*a4;
                  }
                  v23 = v29 + 20;
                  *a4 = v33;
                  a4[1] = v29 + 20;
                  a4[2] = &v28[20 * v27];
                  if (v31)
                    operator delete(v31);
                }
                else
                {
                  v22 = *(_OWORD *)v14;
                  *((_DWORD *)v21 + 4) = v14[4];
                  *(_OWORD *)v21 = v22;
                  v23 = v21 + 20;
                }
                a4[1] = v23;
                v15 = 1;
              }
              v14 += 5;
            }
            while (v14 != v13);
            v14 = *(_DWORD **)v55;
          }
          if (v14)
          {
            v56 = v14;
            operator delete(v14);
          }
          v9 += 17;
          goto LABEL_58;
        }
        v38 = 0;
        v15 = 0;
        LODWORD(v35) = v9 + 1;
        v36 = 16;
      }
      else
      {
        v35 = v9 + 1;
        if (v35 >= a3)
        {
          v43 = qword_100999828;
          v15 = 0;
          if (!os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
            return v15 & 1;
          *(_WORD *)v55 = 0;
          v44 = "Invalid length, not enough room for the len field.";
LABEL_69:
          v46 = v43;
          v47 = 2;
LABEL_70:
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, v44, v55, v47);
          break;
        }
        v36 = *(_BYTE *)(a2 + v35) & 0x1F;
        if (v36 == 31)
        {
          v37 = v9 + 2;
          if (v37 >= a3)
          {
            v43 = qword_100999828;
            v15 = 0;
            if (!os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
              return v15 & 1;
            *(_WORD *)v55 = 0;
            v44 = "Not enough data for the extended data byte. Ignoring.";
            goto LABEL_69;
          }
          v36 = *(unsigned __int8 *)(a2 + v37) + 31;
          v38 = 2;
        }
        else
        {
          v38 = 1;
        }
        if (v36 + v9 + v38 > a3)
        {
          v45 = qword_100999828;
          v15 = 0;
          if (!os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
            return v15 & 1;
          *(_DWORD *)v55 = 67109888;
          *(_DWORD *)&v55[4] = v9;
          LOWORD(v56) = 1024;
          *(_DWORD *)((char *)&v56 + 2) = v36;
          HIWORD(v56) = 1024;
          LODWORD(v57[0]) = v38;
          WORD2(v57[0]) = 2048;
          *(_QWORD *)((char *)v57 + 6) = a3;
          v44 = "Ignoring packet since byte offset of %d + payload length of %d + length size of %d doesnt fit in dataLength %zu";
          v46 = v45;
          v47 = 30;
          goto LABEL_70;
        }
        v39 = *(int8x8_t **)(a1 + 8);
        buf[0] = 1;
        v55[0] = 0;
        v40 = sub_100685BE4(v39 + 26, 0, (uint64_t)&v39[30], 0, buf);
        v41 = *(_QWORD *)(a1 + 8);
        if (v40 && ((*(_QWORD *)(v41 + ((v11 >> 3) & 0x18) + 208) >> v11) & 1) != 0)
        {
          v42 = qword_100999828;
          if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v55 = 67109120;
            *(_DWORD *)&v55[4] = v11;
            _os_log_debug_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Show dup for given rule with puck type 0x%x", v55, 8u);
            v41 = *(_QWORD *)(a1 + 8);
          }
          *a5 = 1;
        }
        if ((_DWORD)v11 != 2)
          goto LABEL_54;
        if (!objc_msgSend(*(id *)(v41 + 88), "count"))
        {
          v41 = *(_QWORD *)(a1 + 8);
LABEL_54:
          if (*(_QWORD *)(v41 + 64) != *(_QWORD *)(v41 + 72)
            && ((*(_QWORD *)(v41 + ((v11 >> 3) & 0x18) + 240) >> v11) & 1) != 0)
          {
            sub_10006D02C(v41, v11);
            v15 = 1;
            return v15 & 1;
          }
          v15 = 0;
          goto LABEL_57;
        }
        v15 = 1;
      }
LABEL_57:
      v9 = v35 + v36 + v38;
LABEL_58:
      v8 = v9;
      if (v9 >= a3 || (v15 & 1) != 0)
        return v15 & 1;
    }
  }
  v15 = 0;
  return v15 & 1;
}

void sub_10003F220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_10003F24C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  if (*(_BYTE *)(a1 + 81) == 32)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v2 + 1))
      return 1;
    if (objc_msgSend(*(id *)(v2 + 88), "count"))
      return 1;
    v3 = *(_QWORD **)(a1 + 8);
    if (v3[8] != v3[9] || v3[2] != v3[1])
      return 1;
    v7 = v3 + 12;
    v6 = v3 + 13;
    return *v7 != *v6;
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (_QWORD *)(v5 + 8);
    v7 = (_QWORD *)(v5 + 16);
    return *v7 != *v6;
  }
  return 0;
}

void sub_10003F2E8(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_10003F37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_10003F3A4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(_QWORD *)(a1 + 32));
}

double sub_10003F3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  char *v23;
  size_t v24;
  const void *v25;
  unsigned int v26;
  uint64_t v27;
  __int128 *i;
  __int128 *j;
  unsigned __int8 *v30;
  _OWORD *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  double result;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  std::string __str;

  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) |= *(_BYTE *)(v4 + 12);
  *(_BYTE *)(a1 + 13) |= *(_BYTE *)(v4 + 13);
  v5 = (void **)(v4 + 16);
  if (*(char *)(v4 + 39) < 0)
  {
    v6 = *(_QWORD *)(v4 + 24);
    if (!v6)
      goto LABEL_8;
    sub_10003430C(&__str, *v5, v6);
  }
  else
  {
    if (!*(_BYTE *)(v4 + 39))
      goto LABEL_8;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 32);
  }
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_8:
  v7 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 40) = *(_WORD *)(v7 + 40);
  if (*(_BYTE *)(v7 + 42))
  {
    v8 = *(_BYTE *)(v7 + 43);
    *(_BYTE *)(a1 + 42) = 1;
    *(_BYTE *)(a1 + 43) = v8;
  }
  if (sub_10003F8C4(v7 + 48))
  {
    v9 = sub_10003F8C4(a1 + 48);
    v10 = sub_10003F8C4(*(_QWORD *)(a2 + 8) + 48);
    v11 = v10 + v9;
    __chkstk_darwin(v10, v12);
    v14 = (char *)&v41 - v13;
    bzero((char *)&v41 - v13, v11);
    v15 = sub_1000455DC(a1 + 48, v14, v11);
    if ((unint64_t)sub_10003F8C4(a1 + 48) < 3 || (unint64_t)sub_10003F8C4(*(_QWORD *)(a2 + 8) + 48) < 3)
    {
      v17 = 0;
    }
    else
    {
      v16 = (unsigned __int16 *)sub_10003EB18(a1 + 48);
      v17 = 2 * (*v16 == *(unsigned __int16 *)sub_10003EB18(*(_QWORD *)(a2 + 8) + 48));
    }
    v18 = *(_QWORD *)(a2 + 8) + 48;
    v19 = sub_10003F8C4(v18);
    v20 = sub_100041DE0(v18, &v14[v15], v17, v19 - v17);
    sub_10003994C(&v41, v14, v20 + v15);
    sub_100041698(a1 + 48, (uint64_t)&v41);
    *(_QWORD *)&v41 = &off_100918258;
    if (*((_QWORD *)&v41 + 1))
      sub_100056AAC(*((unsigned int **)&v41 + 1));
  }
  if (sub_10003F8C4(*(_QWORD *)(a2 + 8) + 224))
  {
    v21 = sub_10003F8C4(*(_QWORD *)(a2 + 8) + 224);
    v23 = (char *)&v41 - ((__chkstk_darwin(v21, v22) + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v23, v21);
    v24 = sub_1000455DC(*(_QWORD *)(a2 + 8) + 224, v23, v21);
    sub_10003994C(&v41, v23, v24);
    sub_100041698(a1 + 224, (uint64_t)&v41);
    *(_QWORD *)&v41 = &off_100918258;
    if (*((_QWORD *)&v41 + 1))
      sub_100056AAC(*((unsigned int **)&v41 + 1));
  }
  if (sub_10003F8C4(*(_QWORD *)(a2 + 8) + 448))
  {
    v25 = (const void *)sub_10003EB18(*(_QWORD *)(a2 + 8) + 448);
    v26 = sub_10003F8C4(*(_QWORD *)(a2 + 8) + 448);
    sub_10003994C(&v41, v25, v26);
    sub_100041698(a1 + 448, (uint64_t)&v41);
    *(_QWORD *)&v41 = &off_100918258;
    if (*((_QWORD *)&v41 + 1))
      sub_100056AAC(*((unsigned int **)&v41 + 1));
  }
  v27 = *(_QWORD *)(a2 + 8);
  for (i = *(__int128 **)(v27 + 64); i != *(__int128 **)(v27 + 72); i = (__int128 *)((char *)i + 20))
  {
    sub_100562650((_QWORD *)a1, i);
    v27 = *(_QWORD *)(a2 + 8);
  }
  for (j = *(__int128 **)(v27 + 88); j != *(__int128 **)(v27 + 96); j = (__int128 *)((char *)j + 20))
  {
    sub_100562770((_QWORD *)a1, j);
    v27 = *(_QWORD *)(a2 + 8);
  }
  v30 = *(unsigned __int8 **)(v27 + 112);
  if (v30 != (unsigned __int8 *)(v27 + 120))
  {
    do
    {
      *(_QWORD *)&v41 = v30 + 32;
      v31 = sub_10009C400((uint64_t **)(a1 + 112), v30 + 32, (uint64_t)&unk_100740F58, (_OWORD **)&v41);
      sub_100041698((uint64_t)v31 + 56, (uint64_t)(v30 + 56));
      v32 = (unsigned __int8 *)*((_QWORD *)v30 + 1);
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = *(unsigned __int8 **)v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (unsigned __int8 *)*((_QWORD *)v30 + 2);
          v34 = *(_QWORD *)v33 == (_QWORD)v30;
          v30 = v33;
        }
        while (!v34);
      }
      v27 = *(_QWORD *)(a2 + 8);
      v30 = v33;
    }
    while (v33 != (unsigned __int8 *)(v27 + 120));
  }
  v35 = 0;
  *(_BYTE *)(a1 + 305) |= *(_BYTE *)(v27 + 305);
  *(_BYTE *)(a1 + 304) |= *(_BYTE *)(v27 + 304);
  *(_BYTE *)(a1 + 370) |= *(_BYTE *)(v27 + 370);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(v27 + 376);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(v27 + 384);
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(v27 + 392);
  v36 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 396) = *(_WORD *)(v36 + 396);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(v36 + 312);
  *(_BYTE *)(a1 + 316) = *(_BYTE *)(v36 + 316);
  v37 = v36 + 168;
  v38 = *(_OWORD *)(a1 + 184);
  v41 = *(_OWORD *)(a1 + 168);
  v42 = v38;
  do
  {
    *(__int128 *)((char *)&v41 + v35) = (__int128)vorrq_s8(*(int8x16_t *)((char *)&v41 + v35), *(int8x16_t *)(v37 + v35));
    v35 += 16;
  }
  while (v35 != 32);
  result = *(double *)&v41;
  v40 = v42;
  *(_OWORD *)(a1 + 168) = v41;
  *(_OWORD *)(a1 + 184) = v40;
  return result;
}

void sub_10003F878(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;

  *(_QWORD *)(v1 - 144) = &off_100918258;
  v3 = *(unsigned int **)(v1 - 136);
  if (v3)
    sub_100056AAC(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003F8C4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return *(_QWORD *)(v1 + 16);
  else
    return 0;
}

void sub_10003F8DC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10003F8DC(a1, *a2);
    sub_10003F8DC(a1, a2[1]);
    sub_1005BD560((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10003F924(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, void *a5@<X4>, __int128 *a6@<X5>, unsigned __int8 *a7@<X8>)
{
  NSObject *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *i;
  id *v16;
  id *v17;
  uint64_t v18;
  NSObject *v19;
  _BYTE *v20;
  id v21;
  id v22;
  NSMutableSet *v23;
  id v24;
  uint64_t v25;
  void *j;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  BOOL v33;
  id *v34;
  id *v35;
  id v36;
  NSObject *v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  int v42;
  NSObject *v43;
  _BOOL4 v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  unint64_t v50;
  id v51;
  id v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  void *v58;
  uint64_t v59;
  unsigned int v60;
  id v61;
  void *v62;
  unint64_t v63;
  uint64_t v64;
  BOOL v65;
  NSObject *v66;
  _BYTE *v67;
  unint64_t v68;
  unsigned __int8 *uu;
  unint64_t v70;
  id v71;
  NSMutableSet *v72;
  _DWORD v74[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _QWORD v83[2];
  uuid_t out;
  unsigned __int8 dst[8];
  uint64_t v86;
  _BYTE v87[128];
  _BYTE __p[12];
  __int16 v89;
  id v90;
  char v91;
  uint8_t buf[4];
  _BYTE *v93;
  __int16 v94;
  id v95;
  _BYTE v96[128];

  v68 = __PAIR64__(a3, a4);
  uu = a7;
  v71 = a5;
  v83[0] = 0;
  v83[1] = 0;
  sub_10003415C((uint64_t)v83, a1 + 88);
  v70 = a2;
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
      sub_100715194();
    goto LABEL_12;
  }
  if (BYTE6(a2) && (BYTE6(a2) != 1 || (a2 & 0xC00000000000) == 0x800000000000))
  {
LABEL_12:
    v9 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
    {
      v10 = sub_100021770(v70);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      sub_10071514C(v11, (uint64_t)__p, v9);
    }
    goto LABEL_14;
  }
  if (HIDWORD(v68))
  {
    if (v71 && (v68 & 1) == 0)
    {
LABEL_8:
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
        sub_10071531C();
LABEL_14:
      uuid_clear(uu);
      goto LABEL_15;
    }
  }
  else if (v71)
  {
    goto LABEL_8;
  }
  if (a6)
  {
    v72 = objc_opt_new(NSMutableSet);
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v12 = *(id *)(a1 + 168);
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v79, v96, 16);
    if (v13)
    {
      v14 = *(_QWORD *)v80;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(_QWORD *)v80 != v14)
            objc_enumerationMutation(v12);
          v16 = (id *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v79 + 1) + 8 * (_QWORD)i), v68, uu);
          v17 = v16;
          if (!v16[3])
          {
            *(_DWORD *)&dst[3] = 0;
            *(_DWORD *)dst = 0;
            v18 = sub_1000746A4((unint64_t)v16[2]);
            *(_DWORD *)dst = v18;
            dst[6] = BYTE6(v18);
            *(_WORD *)&dst[4] = WORD2(v18);
            if (sub_10022DD00((uint64_t)dst, a6))
            {
              v19 = qword_100999810;
              if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
              {
                sub_1000217F4((uint64_t)v17[2]);
                if (v91 >= 0)
                  v20 = __p;
                else
                  v20 = *(_BYTE **)__p;
                v21 = *v17;
                *(_DWORD *)buf = 136315394;
                v93 = v20;
                v94 = 2112;
                v95 = v21;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Removing previous instances of cloud device with address:%s UUID:%@ from device cache", buf, 0x16u);
                if (v91 < 0)
                  operator delete(*(void **)__p);

              }
              v22 = *v17;
              -[NSMutableSet addObject:](v72, "addObject:", v22);

            }
          }
        }
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v79, v96, 16);
      }
      while (v13);
    }

    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v23 = v72;
    v24 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v23, "countByEnumeratingWithState:objects:count:", &v75, v87, 16);
    if (v24)
    {
      v25 = *(_QWORD *)v76;
      do
      {
        for (j = 0; j != v24; j = (char *)j + 1)
        {
          if (*(_QWORD *)v76 != v25)
            objc_enumerationMutation(v23);
          sub_100653040(a1, *(void **)(*((_QWORD *)&v75 + 1) + 8 * (_QWORD)j));
        }
        v24 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v23, "countByEnumeratingWithState:objects:count:", &v75, v87, 16);
      }
      while (v24);
    }

    -[NSMutableSet removeAllObjects](v23, "removeAllObjects");
    v27 = sub_100004C14(*(_QWORD *)(a1 + 248), v70);
    if (v27)
    {
      sub_10033FD4C(*(_QWORD *)(a1 + 248), v27);
      sub_10066963C(v27);
      operator delete();
    }

  }
  *(_QWORD *)dst = 0;
  v86 = 0;
  sub_100040610(a1, v70, dst);
  if (!uuid_is_null(dst) || (sub_100040474(a1, v70, __p), uuid_copy(dst, __p), !uuid_is_null(dst)))
  {
    uuid_copy(uu, dst);
    goto LABEL_15;
  }
  v28 = *(_QWORD **)(a1 + 184);
  if (v28)
  {
    v29 = a1 + 184;
    do
    {
      v30 = v28[4];
      v31 = v30 >= v70;
      if (v30 >= v70)
        v32 = v28;
      else
        v32 = v28 + 1;
      if (v31)
        v29 = (uint64_t)v28;
      v28 = (_QWORD *)*v32;
    }
    while (*v32);
    if (v29 != a1 + 184 && *(_QWORD *)(v29 + 32) <= v70)
    {
      if (!v71)
      {
        sub_100030E34(a1, (unsigned __int8 *)(v29 + 40));
        uuid_copy(uu, (const unsigned __int8 *)(v29 + 40));
        goto LABEL_15;
      }
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      {
        v55 = sub_100021770(v70);
        v56 = (id)objc_claimAutoreleasedReturnValue(v55);
        sub_1003D2DB4((const unsigned __int8 *)(v29 + 40), __p);
        sub_1007152D0();
      }
      goto LABEL_86;
    }
  }
  if (*(_BYTE *)(a1 + 164))
    v33 = 1;
  else
    v33 = (_DWORD)v68 == 0;
  if (v33)
    goto LABEL_63;
  v41 = sub_10003BE44();
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 432))(v41);
  v43 = qword_100999810;
  v44 = os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT);
  if (!v42)
  {
    if (v44)
    {
      v53 = sub_100021770(v70);
      v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
      *(_DWORD *)__p = 138543362;
      *(_QWORD *)&__p[4] = v54;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Ignoring non-paired device address \"%{public}@\" as the protected cache has not been loaded", __p, 0xCu);

    }
LABEL_86:
    uuid_clear(uu);
    goto LABEL_15;
  }
  if (v44)
  {
    v45 = sub_100021770(v70);
    v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
    *(_DWORD *)__p = 138543362;
    *(_QWORD *)&__p[4] = v46;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Warning: Diagnostics mode detected, ignoring non-paired device cached, creating a new identifier for device address \"%{public}@\" as the protected cache has not been loaded", __p, 0xCu);

  }
LABEL_63:
  v34 = (id *)sub_100004C14(*(_QWORD *)(a1 + 248), v70);
  v35 = v34;
  if (!v34)
  {
    v47 = objc_autoreleasePoolPush();
    if ((v68 & 0x100000000) != 0)
    {
      memset(out, 0, sizeof(out));
      uuid_clear(out);
      if (!v71)
      {
        do
        {
          v58 = objc_autoreleasePoolPush();
          *(_DWORD *)((char *)v74 + 3) = 0;
          v74[0] = 0;
          v59 = sub_1000746A4(v70);
          v74[0] = v59;
          BYTE2(v74[1]) = BYTE6(v59);
          LOWORD(v74[1]) = WORD2(v59);
          if (uuid_is_null(out))
            v60 = 7;
          else
            v60 = 0;
          sub_1000728E8(out, (uint64_t)v74, v60);
          v61 = sub_100030DF4(out);
          v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
          v63 = (unint64_t)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v62);
          v64 = v63 | sub_10000B0C8(*(_QWORD *)(a1 + 248), v62);
          v65 = v64 != 0;
          if (v64)
          {
            v66 = qword_100999810;
            if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEBUG))
            {
              sub_1003D2DB4(out, __p);
              v67 = __p;
              if (v91 < 0)
                v67 = *(_BYTE **)__p;
              *(_DWORD *)buf = 136446210;
              v93 = v67;
              _os_log_debug_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "UUID generation collision - UUID \"%{public}s\" already exists!", buf, 0xCu);
              if (v91 < 0)
                operator delete(*(void **)__p);
            }
          }

          objc_autoreleasePoolPop(v58);
        }
        while (v65);
LABEL_78:
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEBUG))
        {
          v51 = sub_100021770(v70);
          v52 = (id)objc_claimAutoreleasedReturnValue(v51);
          sub_1003D2DB4(out, __p);
          sub_1007151C0();
        }
        operator new();
      }
      sub_100030BCC(__p, v71);
      uuid_copy(out, __p);
      v48 = sub_100030DF4(out);
      v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
      v50 = (unint64_t)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v49);
      if (!(v50 | sub_10000B0C8(*(_QWORD *)(a1 + 248), v49)))
      {

        goto LABEL_78;
      }
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      {
        sub_1003D2DB4(out, __p);
        sub_10071520C();
      }
      uuid_clear(uu);

    }
    else
    {
      uuid_clear(uu);
    }
    objc_autoreleasePoolPop(v47);
    goto LABEL_15;
  }
  v36 = objc_msgSend(*v34, "copy");
  v37 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    v38 = sub_100021770(v70);
    v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    *(_DWORD *)__p = 138543618;
    *(_QWORD *)&__p[4] = v39;
    v89 = 2114;
    v90 = v36;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Address \"%{public}@\" is already associated with device \"%{public}@\"", __p, 0x16u);

  }
  if (v71)
  {
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
    {
      v40 = sub_100021770(v70);
      objc_claimAutoreleasedReturnValue(v40);
      sub_100715294();
    }
    uuid_clear(uu);

  }
  else
  {
    if (objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v36)
      && os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
    {
      v57 = sub_100021770(v70);
      objc_claimAutoreleasedReturnValue(v57);
      sub_100715258();
    }

    sub_100011488(a1, (uint64_t)v35);
    sub_100030BCC(uu, *v35);
  }
LABEL_15:
  sub_100034234((uint64_t)v83);

}

void sub_10004031C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;

  sub_100034234((uint64_t)&a37);
  _Unwind_Resume(a1);
}

uint64_t sub_100040474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X8>)
{
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[2];
  _BYTE v20[128];

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 88);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v6 = *(id *)(a1 + 280);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v8)
          objc_enumerationMutation(v6);
        v10 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        v11 = objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v10, (_QWORD)v15);
        if (sub_100661850((uint64_t)v11) && *((_BYTE *)v11 + 164))
        {
          v12 = v11[7];
          if (v12 == a2 && v12 != 0)
          {
            sub_100030BCC(a3, v10);

            return sub_100034234((uint64_t)v19);
          }
        }
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
    }
    while (v7);
  }

  uuid_clear(a3);
  return sub_100034234((uint64_t)v19);
}

void sub_1000405D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100040610@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X8>)
{
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  _QWORD *v11;
  unint64_t v12;
  _BYTE v14[8];
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  _BYTE v21[128];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 88);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v6 = *(id *)(a1 + 280);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
        sub_100660428(a1, v10, 0, (uint64_t)v14);
        if (v15)
        {
          v11 = v15;
          do
          {
            v12 = v11[4];
            if (v12 <= a2)
            {
              if (v12 >= a2)
              {
                sub_10001A82C((uint64_t)v14, v15);
                sub_100030BCC(a3, v10);

                return sub_100034234((uint64_t)v20);
              }
              ++v11;
            }
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        sub_10001A82C((uint64_t)v14, v15);
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v7);
  }

  uuid_clear(a3);
  return sub_100034234((uint64_t)v20);
}

void sub_100040790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  va_list va;

  va_start(va, a14);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000407C4()
{
  if (qword_100994100 != -1)
    dispatch_once(&qword_100994100, &stru_10093F080);
  operator new();
}

void sub_100041558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100041698(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;

  v3 = *(unsigned int **)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (v3 != (unsigned int *)v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    if (v4)
      sub_10003C37C(v4);
    if (v3)
      sub_100056AAC(v3);
  }
  return a1;
}

double sub_1000416E0(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_10093CBE0;
  *(_WORD *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 14) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_100918258;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_100918258;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = &off_100918258;
  *(_WORD *)(a1 + 222) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 213) = 0;
  *(_QWORD *)(a1 + 224) = &off_100918258;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 272) = &off_100918258;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = &off_100918258;
  *(_QWORD *)(a1 + 296) = 0;
  *(_WORD *)(a1 + 304) = 0;
  *(_WORD *)(a1 + 307) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 316) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 367) = 0;
  *(_QWORD *)(a1 + 416) = a1 + 424;
  *(_QWORD *)&result = 0xFF00000000;
  *(_QWORD *)(a1 + 440) = 0xFF00000000;
  *(_QWORD *)(a1 + 448) = &off_100918258;
  *(_QWORD *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 468) = 0;
  return result;
}

uint64_t sub_1000417B4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AC6A0;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992160 != -1)
    dispatch_once(&qword_100992160, block);
  return byte_100992158;
}

void sub_100041828(uint64_t a1, int a2)
{
  char v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;

  if (qword_100993EC0 != -1)
    dispatch_once(&qword_100993EC0, &stru_10093CBF0);
  if (a2 == 27 || a2 == 127)
  {
    *(_WORD *)(a1 + 216) = 383;
  }
  else
  {
    v4 = a2 - 126;
    if (a2 <= 20)
      v4 = a2;
    *(_BYTE *)(a1 + 216) = v4;
    *(_BYTE *)(a1 + 217) = a2 > 20;
    v5 = dword_100993EB8;
    if (dword_100993EB8)
    {
      v6 = v4;
      v7 = dword_100993EB8 + v4;
      if (v7 < 21)
      {
        if (v7 <= -128)
        {
          v9 = qword_1009998B8;
          if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
          {
            v10 = 67109888;
            v11 = a2;
            v12 = 1024;
            v13 = v6;
            v14 = 1024;
            v15 = v5;
            v16 = 1024;
            v17 = -127;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: RSSI original: %d converted: %d offset: %d adjusted to %d", (uint8_t *)&v10, 0x1Au);
          }
          LOBYTE(v7) = -127;
        }
      }
      else
      {
        v8 = qword_1009998B8;
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
        {
          v10 = 67109888;
          v11 = a2;
          v12 = 1024;
          v13 = v6;
          v14 = 1024;
          v15 = v5;
          v16 = 1024;
          v17 = 20;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: RSSI original: %d converted: %d offset: %d adjusted to %d", (uint8_t *)&v10, 0x1Au);
        }
        LOBYTE(v7) = 20;
      }
      *(_BYTE *)(a1 + 216) = v7;
    }
  }
}

uint64_t sub_1000419F4()
{
  if (qword_100992BB8 != -1)
    dispatch_once(&qword_100992BB8, &stru_100930268);
  return qword_100992BB0;
}

void sub_100041A34(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  const char *v7;

  v3 = a2;
  v4 = *(NSObject **)(a1 + 8);
  if (v4
    || (v5 = qword_100999970, os_log_type_enabled((os_log_t)qword_100999970, OS_LOG_TYPE_FAULT))
    && (v6 = 136446210,
        v7 = "fQueue",
        _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v6, 0xCu), (v4 = *(NSObject **)(a1 + 8)) != 0))
  {
    dispatch_async(v4, v3);
  }

}

uint64_t sub_100041B10(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AB150;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_1009920D0 != -1)
    dispatch_once(&qword_1009920D0, block);
  return byte_1009920C8;
}

uint64_t sub_100041B84(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AB2CC;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_1009920E0 != -1)
    dispatch_once(&qword_1009920E0, block);
  return byte_1009920D8;
}

uint64_t sub_100041BF8(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AB448;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_1009920F0 != -1)
    dispatch_once(&qword_1009920F0, block);
  return byte_1009920E8;
}

uint64_t sub_100041C6C(uint64_t a1, int a2)
{
  int v3;
  int v4;
  _BOOL4 v5;
  char v6;
  char v7;
  NSObject *v8;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;

  v3 = *(_DWORD *)(a1 + 2292);
  if (v3)
  {
    v4 = a2 + v3;
    v5 = __OFADD__(a2, v3);
    if (v4 != (char)v4)
      v5 = 1;
    if (v3 > 0)
      v6 = 127;
    else
      v6 = 0x80;
    if (v5)
      LOBYTE(v4) = v6;
    if ((char)v4 >= 19)
      v7 = 19;
    else
      v7 = v4;
    v8 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109632;
      v10[1] = v3;
      v11 = 1024;
      v12 = a2;
      v13 = 1024;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: Applying RSSI offset of %d to %d, new rssi level is %d", (uint8_t *)v10, 0x14u);
    }
  }
  else
  {
    return (char)a2;
  }
  return v7;
}

BOOL sub_100041D74(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _BOOL8 result;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v1 = *(_QWORD **)(a1 + 2040);
  v2 = (_QWORD *)(a1 + 2048);
  if (v1 == (_QWORD *)(a1 + 2048))
    return 0;
  do
  {
    result = *(_BYTE *)(*(_QWORD *)(v1[5] + 8) + 143) != 0;
    if (*(_BYTE *)(*(_QWORD *)(v1[5] + 8) + 143))
      break;
    v4 = (_QWORD *)v1[1];
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (_QWORD *)v1[2];
        v6 = *v5 == (_QWORD)v1;
        v1 = v5;
      }
      while (!v6);
    }
    v1 = v5;
  }
  while (v5 != v2);
  return result;
}

size_t sub_100041DE0(uint64_t a1, void *__dst, uint64_t a3, size_t __n)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  os_log_t v14;
  os_log_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = *(_QWORD *)(v5 + 16);
  else
    v6 = 0;
  if (__n + a3 > v6)
  {
    v9 = sub_100027F68();
    sub_100576510(v9, 1);
    v10 = _os_log_pack_size(12);
    v11 = (char *)&v16 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v12 = __error();
    v13 = _os_log_pack_fill(v11, v10, *v12, &_mh_execute_header, "Assertion failed: %{public}s");
    *(_DWORD *)v13 = 136446210;
    *(_QWORD *)(v13 + 4) = "(offset + length) <= getSize()";
    v14 = os_log_create("com.apple.bluetooth", "CBCrash");
    if (v14)
      v15 = v14;
    else
      v15 = (os_log_t)&_os_log_default;
    qword_10097BA60 = os_log_pack_send_and_compose(v11, v15, 16, 0, 0);
    abort_with_payload(18, 2, v11, v10, qword_10097BA60, 0);
  }
  if (v5)
    v7 = v5 + 24;
  else
    v7 = 0;
  memcpy(__dst, (const void *)(v7 + a3), __n);
  return __n;
}

uint64_t sub_100041F48(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, void **a4, _BYTE *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  __int128 *v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _WORD *v35;
  NSObject *v36;
  void **v37;
  NSObject *v38;
  _BYTE *v40;
  void *v41[2];
  char v42;
  char v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint8_t buf[4];
  void **v48;
  void *__p[2];
  _QWORD v50[4];

  sub_10068A5D0(*(_QWORD *)(a1 + 8), __p);
  if (__p[1] == __p[0])
  {
    v10 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD *)(v10 + 32);
    v11 = *(_QWORD *)(v10 + 40);
    if (__p[1])
      operator delete(__p[1]);
    if (v11 == v12)
      return 0;
  }
  else if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v13 = *(_QWORD **)(a3 + 8);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  sub_10068A5D0(*(_QWORD *)(a1 + 8), &v44);
  if (*(_QWORD *)(*(_QWORD *)(a3 + 8) + 72) != *(_QWORD *)(*(_QWORD *)(a3 + 8) + 64))
  {
    v14 = sub_100689E64(v14, a2, (uint64_t)&v44, (unsigned __int8 **)(*(_QWORD *)(a3 + 8) + 64));
    if ((v14 & 1) != 0)
      goto LABEL_39;
  }
  if (v13[16])
  {
    v40 = a5;
    __p[0] = 0;
    __p[1] = 0;
    v50[0] = 0;
    v15 = (_QWORD *)v13[14];
    if (v15 != v13 + 15)
    {
      v16 = 0;
      do
      {
        v17 = (__int128 *)(v15 + 4);
        if ((unint64_t)v16 >= v50[0])
        {
          v19 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (char *)__p[0]) >> 2);
          v20 = v19 + 1;
          if (v19 + 1 > 0xCCCCCCCCCCCCCCCLL)
            abort();
          if (0x999999999999999ALL * ((uint64_t)(v50[0] - (unint64_t)__p[0]) >> 2) > v20)
            v20 = 0x999999999999999ALL * ((uint64_t)(v50[0] - (unint64_t)__p[0]) >> 2);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v50[0] - (unint64_t)__p[0]) >> 2) >= 0x666666666666666)
            v21 = 0xCCCCCCCCCCCCCCCLL;
          else
            v21 = v20;
          if (v21)
            v14 = (uint64_t)sub_1000B58EC((uint64_t)v50, v21);
          else
            v14 = 0;
          v22 = v14 + 20 * v19;
          v23 = *v17;
          *(_DWORD *)(v22 + 16) = *((_DWORD *)v15 + 12);
          *(_OWORD *)v22 = v23;
          v25 = (char *)__p[0];
          v24 = (char *)__p[1];
          v26 = (char *)v22;
          if (__p[1] != __p[0])
          {
            do
            {
              v27 = *(_OWORD *)(v24 - 20);
              *((_DWORD *)v26 - 1) = *((_DWORD *)v24 - 1);
              *(_OWORD *)(v26 - 20) = v27;
              v26 -= 20;
              v24 -= 20;
            }
            while (v24 != v25);
            v24 = (char *)__p[0];
          }
          v16 = (char *)(v22 + 20);
          __p[0] = v26;
          __p[1] = (void *)(v22 + 20);
          v50[0] = v14 + 20 * v21;
          if (v24)
            operator delete(v24);
        }
        else
        {
          v18 = *v17;
          *((_DWORD *)v16 + 4) = *((_DWORD *)v15 + 12);
          *(_OWORD *)v16 = v18;
          v16 += 20;
        }
        __p[1] = v16;
        v28 = (_QWORD *)v15[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v15[2];
            v30 = *v29 == (_QWORD)v15;
            v15 = v29;
          }
          while (!v30);
        }
        v15 = v29;
      }
      while (v29 != v13 + 15);
    }
    v31 = sub_100689E64(v14, a2, (uint64_t)&v44, (unsigned __int8 **)__p);
    v14 = (uint64_t)__p[0];
    a5 = v40;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v31 & 1) != 0)
      goto LABEL_39;
  }
  v32 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)(v32 + 96) != *(_QWORD *)(v32 + 88))
  {
    if ((sub_100689E64(v14, a2, (uint64_t)&v44, (unsigned __int8 **)(v32 + 88)) & 1) != 0)
      goto LABEL_39;
    v32 = *(_QWORD *)(a3 + 8);
  }
  v34 = sub_10003F8C4(v32 + 48);
  v35 = (_WORD *)sub_10003EB18(*(_QWORD *)(a3 + 8) + 48);
  if (v34 < 3 || *v35 != 76 || !sub_10003EC24(a1, (uint64_t)v35, v34, a4, &v43))
  {
    v38 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
    {
      *(_OWORD *)__p = 0u;
      memset(v50, 0, 21);
      uuid_unparse_upper(a2, (char *)__p);
      sub_100091AE8(v41, (char *)__p);
      sub_100718984((uint64_t)__p, (char *)v41, (uint64_t)buf, v38);
    }
    v33 = 0;
    goto LABEL_56;
  }
  v36 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
  {
    *(_OWORD *)__p = 0u;
    memset(v50, 0, 21);
    uuid_unparse_upper(a2, (char *)__p);
    sub_100091AE8(v41, (char *)__p);
    v37 = v42 >= 0 ? v41 : (void **)v41[0];
    *(_DWORD *)buf = 136446210;
    v48 = v37;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Device \"%{public}s\" matched MFG data", buf, 0xCu);
    if (v42 < 0)
      operator delete(v41[0]);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 1))
    *a5 = 1;
LABEL_39:
  v33 = 1;
LABEL_56:
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  return v33;
}

void sub_10004238C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000423E8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;

  v5 = a2;
  v6 = v5;
  if (*(_BYTE *)(a1 + 24))
    *(_BYTE *)(a1 + 24) = 0;
  else
    sub_100042450(a1, v5, a3);

}

void sub_10004243C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100042450(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  id v12;
  unsigned int *v13;
  uint64_t v14;
  id v15;
  int v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  id v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  unsigned __int8 *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  void **v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  id v61;
  id v62;
  NSObject *v63;
  _QWORD block[6];
  uint64_t v65;
  _QWORD *v66[2];
  void *__p[2];
  char v68;
  uint64_t (**v69)();
  unsigned int *v70;
  uint64_t (**v71)();
  unsigned int *v72;
  __int128 v73;
  int v74;
  __int128 v75;
  int v76;
  __n128 v77;
  void *__dst[2];
  uint64_t v79;
  __int128 v80;
  int v81;
  __n128 v82;
  uint64_t v83;
  __int128 v84;
  int v85;
  __int128 v86;
  int v87;

  v5 = a2;
  v6 = objc_alloc_init((Class)CBDevice);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "UUIDString"));
  objc_msgSend(v6, "setIdentifier:", v7);

  if (*(_BYTE *)(*(_QWORD *)(a3 + 8) + 305))
    v8 = 2048;
  else
    v8 = 2;
  objc_msgSend(v6, "setInternalFlags:", v8);
  v9 = *(_QWORD *)(a3 + 8);
  if (*(_BYTE *)(v9 + 306))
  {
    objc_msgSend(v6, "setInternalFlags:", objc_msgSend(v6, "internalFlags") | 0x1000);
    v9 = *(_QWORD *)(a3 + 8);
  }
  if (*(_WORD *)(v9 + 40))
  {
    objc_msgSend(v6, "setAppearanceValue:");
    v9 = *(_QWORD *)(a3 + 8);
  }
  v10 = *(unsigned int **)(v9 + 144);
  v71 = &off_100918258;
  v72 = v10;
  if (v10)
    sub_10003C37C((uint64_t)v10);
  v11 = sub_10003EB18((uint64_t)&v71);
  if (sub_10003F8C4((uint64_t)&v71) == 7)
  {
    v12 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v11 + 1, 6);
    objc_msgSend(v6, "setBleAddressData:", v12);

  }
  objc_msgSend(v6, "setBleAdvertisementTimestamp:", *(double *)(*(_QWORD *)(a3 + 8) + 240));
  objc_msgSend(v6, "setBleAdvertisementTimestampMachContinuous:", *(_QWORD *)(*(_QWORD *)(a3 + 8) + 248));
  v13 = *(unsigned int **)(*(_QWORD *)(a3 + 8) + 56);
  v69 = &off_100918258;
  v70 = v13;
  if (v13)
    sub_10003C37C((uint64_t)v13);
  v14 = sub_10003EB18((uint64_t)&v69);
  if (v14)
  {
    v15 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v14, sub_10003F8C4((uint64_t)&v69));
    objc_msgSend(v6, "setBleAppleManufacturerData:", v15);

  }
  objc_msgSend(v6, "setBleChannel:", *(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 219));
  v16 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 216);
  if (v16 == 127)
    LOBYTE(v16) = 0;
  objc_msgSend(v6, "setBleRSSI:", (char)v16);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 200);
  if (v17)
  {
    LOBYTE(v65) = (unsigned __int16)WORD2(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 200)) >> 8;
    BYTE1(v65) = BYTE4(v17);
    BYTE2(v65) = BYTE3(v17);
    BYTE3(v65) = BYTE2(v17);
    BYTE4(v65) = BYTE1(v17);
    BYTE5(v65) = v17;
    v18 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v65, 6);
    objc_msgSend(v6, "setBtAddressData:", v18);

  }
  v19 = objc_msgSend(v6, "deviceFlags");
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100918AE0);
  if (sub_100030864(qword_1009778B0, v5))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100918AC0);
    v20 = off_1009778C0;
    sub_100091AE8(__p, "_CTKD_");
    if (sub_10000628C((uint64_t)v20, v5, (uint64_t)__p))
      v21 = 0x40000000000;
    else
      v21 = 0;
    if (v68 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v21 = 0x40000000000;
  }
  if (v19 != (id)v21)
    objc_msgSend(v6, "setDeviceFlags:", v21);
  v65 = 0;
  v66[0] = 0;
  v66[1] = 0;
  sub_1000B6B08(&v65, *(_QWORD *)(a3 + 8) + 112);
  v86 = xmmword_10073B638;
  v87 = -815610143;
  sub_100042F44(&v82, (__n128 *)&v86);
  v22 = sub_100042F58((uint64_t)&v65, (unsigned __int8 *)&v82);
  if (v66 != (_QWORD **)v22)
  {
    v23 = *(_QWORD *)(v22 + 64);
    v82.n128_u64[0] = (unint64_t)&off_100918258;
    v82.n128_u64[1] = v23;
    if (v23)
      sub_10003C37C(v23);
    v24 = objc_alloc((Class)NSData);
    v25 = sub_10003EB18((uint64_t)&v82);
    v26 = objc_msgSend(v24, "initWithBytes:length:", v25, sub_10003F8C4((uint64_t)&v82));
    objc_msgSend(v6, "setDockKitAccessoryPayloadData:", v26);

    v82.n128_u64[0] = (unint64_t)&off_100918258;
    if (v82.n128_u64[1])
      sub_100056AAC((unsigned int *)v82.n128_u64[1]);
  }
  v85 = 0;
  v84 = xmmword_100738700;
  sub_100042F44(&v82, (__n128 *)&v84);
  v27 = sub_100042F58((uint64_t)&v65, (unsigned __int8 *)&v82);
  if (v66 != (_QWORD **)v27)
  {
    v28 = *(_QWORD *)(v27 + 64);
    v82.n128_u64[0] = (unint64_t)&off_100918258;
    v82.n128_u64[1] = v28;
    if (v28)
      sub_10003C37C(v28);
    v29 = objc_alloc((Class)NSData);
    v30 = sub_10003EB18((uint64_t)&v82);
    v31 = objc_msgSend(v29, "initWithBytes:length:", v30, sub_10003F8C4((uint64_t)&v82));
    objc_msgSend(v6, "setFidoPayloadData:", v31);

    v82.n128_u64[0] = (unint64_t)&off_100918258;
    if (v82.n128_u64[1])
      sub_100056AAC((unsigned int *)v82.n128_u64[1]);
  }
  v32 = *(_QWORD *)(a3 + 8);
  v83 = 0;
  v82 = 0uLL;
  sub_1000B61B8((char *)&v82, *(__int128 **)(v32 + 64), *(__int128 **)(v32 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v32 + 72) - *(_QWORD *)(v32 + 64)) >> 2));
  v81 = 0;
  v80 = xmmword_100738714;
  sub_100042F44((__n128 *)__dst, (__n128 *)&v80);
  v33 = sub_100042F58((uint64_t)&v65, (unsigned __int8 *)__dst);
  if (v66 == (_QWORD **)v33)
  {
    v39 = v82.n128_u64[1];
    v38 = (unsigned __int8 *)v82.n128_u64[0];
    if (v82.n128_u64[0] == v82.n128_u64[1])
    {
      v40 = v82.n128_u64[0];
    }
    else
    {
      while (1)
      {
        LODWORD(v79) = 0;
        *(_OWORD *)__dst = xmmword_100738714;
        if (sub_100072DF0(v38, (unsigned __int8 *)__dst))
          break;
        v38 += 20;
        if (v38 == (unsigned __int8 *)v39)
        {
          v38 = (unsigned __int8 *)v39;
          break;
        }
      }
      v40 = (unint64_t)v38;
      v38 = (unsigned __int8 *)v82.n128_u64[1];
    }
    if ((unsigned __int8 *)v40 != v38)
    {
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](NSData, "data"));
      objc_msgSend(v6, "setGfpPayloadData:", v41);

    }
  }
  else
  {
    v34 = *(void **)(v33 + 64);
    __dst[0] = &off_100918258;
    __dst[1] = v34;
    if (v34)
      sub_10003C37C((uint64_t)v34);
    v35 = objc_alloc((Class)NSData);
    v36 = sub_10003EB18((uint64_t)__dst);
    v37 = objc_msgSend(v35, "initWithBytes:length:", v36, sub_10003F8C4((uint64_t)__dst));
    objc_msgSend(v6, "setGfpPayloadData:", v37);

    __dst[0] = &off_100918258;
    if (__dst[1])
      sub_100056AAC((unsigned int *)__dst[1]);
  }
  v43 = v82.n128_u64[1];
  v42 = (unsigned __int8 *)v82.n128_u64[0];
  if (v82.n128_u64[0] == v82.n128_u64[1])
  {
    v44 = v82.n128_u64[0];
  }
  else
  {
    while (1)
    {
      *(_OWORD *)__dst = xmmword_10073B4A4;
      LODWORD(v79) = 0;
      if (sub_100072DF0(v42, (unsigned __int8 *)__dst))
        break;
      v42 += 20;
      if (v42 == (unsigned __int8 *)v43)
      {
        v42 = (unsigned __int8 *)v43;
        break;
      }
    }
    v44 = (unint64_t)v42;
    v42 = (unsigned __int8 *)v82.n128_u64[1];
  }
  if ((unsigned __int8 *)v44 != v42)
    objc_msgSend(v6, "setDiscoveryFlags:", (unint64_t)objc_msgSend(v6, "discoveryFlags") | 0x2000000000000);
  __dst[0] = 0;
  __dst[1] = 0;
  v79 = 0;
  v45 = *(_QWORD *)(a3 + 8);
  if (*(char *)(v45 + 39) < 0)
  {
    sub_10003430C(__dst, *(void **)(v45 + 16), *(_QWORD *)(v45 + 24));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v45 + 16);
    v79 = *(_QWORD *)(v45 + 32);
  }
  v46 = (void *)HIBYTE(v79);
  if (v79 < 0)
    v46 = __dst[1];
  if (v46)
  {
    v47 = objc_alloc((Class)NSString);
    if (v79 >= 0)
      v48 = __dst;
    else
      v48 = (void **)__dst[0];
    v49 = objc_msgSend(v47, "initWithUTF8String:", v48, 0xFE2C00000002, 0);
    objc_msgSend(v6, "setLeAdvName:", v49);

  }
  v75 = xmmword_10073B56C;
  v76 = 0;
  sub_100042F44(&v77, (__n128 *)&v75);
  v50 = sub_100042F58((uint64_t)&v65, (unsigned __int8 *)&v77);
  if (v66 != (_QWORD **)v50)
  {
    v51 = *(_QWORD *)(v50 + 64);
    v77.n128_u64[0] = (unint64_t)&off_100918258;
    v77.n128_u64[1] = v51;
    if (v51)
      sub_10003C37C(v51);
    v52 = objc_alloc((Class)NSData);
    v53 = sub_10003EB18((uint64_t)&v77);
    v54 = objc_msgSend(v52, "initWithBytes:length:", v53, sub_10003F8C4((uint64_t)&v77));
    objc_msgSend(v6, "setProximityServiceData:", v54);

    v77.n128_u64[0] = (unint64_t)&off_100918258;
    if (v77.n128_u64[1])
      sub_100056AAC((unsigned int *)v77.n128_u64[1]);
  }
  v74 = 0;
  v73 = xmmword_100738728;
  sub_100042F44(&v77, (__n128 *)&v73);
  v55 = sub_100042F58((uint64_t)&v65, (unsigned __int8 *)&v77);
  if (v66 != (_QWORD **)v55)
  {
    v56 = *(_QWORD *)(v55 + 64);
    v77.n128_u64[0] = (unint64_t)&off_100918258;
    v77.n128_u64[1] = v56;
    if (v56)
      sub_10003C37C(v56);
    v57 = objc_alloc((Class)NSData);
    v58 = sub_10003EB18((uint64_t)&v77);
    v59 = objc_msgSend(v57, "initWithBytes:length:", v58, sub_10003F8C4((uint64_t)&v77));
    objc_msgSend(v6, "setSafetyAlertsSegmentServiceData:", v59);

    objc_msgSend(v6, "setInternalFlags:", objc_msgSend(v6, "internalFlags") | 0x4000);
    v77.n128_u64[0] = (unint64_t)&off_100918258;
    if (v77.n128_u64[1])
      sub_100056AAC((unsigned int *)v77.n128_u64[1]);
  }
  v60 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 208);
  if (v60)
  {
    v77.n128_u8[0] = (unsigned __int16)WORD2(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 208)) >> 8;
    v77.n128_u8[1] = BYTE4(v60);
    v77.n128_u8[2] = BYTE3(v60);
    v77.n128_u8[3] = BYTE2(v60);
    v77.n128_u8[4] = BYTE1(v60);
    v77.n128_u8[5] = v60;
    v61 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v77, 6);
    objc_msgSend(v6, "setTxAddressData:", v61);

  }
  v62 = *(id *)(a1 + 8);
  v63 = *(NSObject **)(a1 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001015C;
  block[3] = &unk_100918340;
  block[4] = v6;
  block[5] = v62;
  dispatch_async(v63, block);

  if (SHIBYTE(v79) < 0)
    operator delete(__dst[0]);
  if (v82.n128_u64[0])
  {
    v82.n128_u64[1] = v82.n128_u64[0];
    operator delete((void *)v82.n128_u64[0]);
  }
  sub_100056B54((uint64_t)&v65, v66[0]);
  v69 = &off_100918258;
  if (v70)
    sub_100056AAC(v70);
  v71 = &off_100918258;
  if (v72)
    sub_100056AAC(v72);

}

void sub_100042D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,unsigned int *a27,uint64_t a28,unsigned int *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v50;

  v50 = *(void **)(v48 - 184);
  if (v50)
  {
    *(_QWORD *)(v48 - 176) = v50;
    operator delete(v50);
  }
  sub_100056B54((uint64_t)&a17, a18);
  if (a27)
    sub_100056AAC(a27);
  if (a29)
    sub_100056AAC(a29);

  _Unwind_Resume(a1);
}

__n128 sub_100042F44(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_100042F58(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = sub_100068844((unsigned __int8 *)(v3 + 32), a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || sub_100068844(a2, (unsigned __int8 *)(v5 + 32)))
    return v2;
  return v5;
}

uint64_t sub_100042FD0(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5)
{
  uint64_t (**v9)(_QWORD);
  void (**v10)(_QWORD);
  NSObject *v11;
  _BOOL8 v12;
  const char *v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD v18[2];
  uint8_t buf[4];
  const char *v20;

  v9 = a4;
  v10 = a5;
  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 72);
  v11 = qword_1009997E8;
  v12 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO);
  if (v12)
  {
    v13 = sub_1000438E4(v12, a2);
    *(_DWORD *)buf = 136446210;
    v20 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }
  if (sub_1000431F4(a1, a2))
  {
    buf[0] = 0;
    sub_100043758(buf);
    v14 = v9[2](v9);
    sub_10004339C(buf);
    if (v14 == 3603)
    {
      a3 = 0;
    }
    else if (v14)
    {
      v16 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E0818(a2, v14, v16);
      a3 = 1;
    }
    else
    {
      if (a3)
      {
        if (qword_100977A58 != -1)
          dispatch_once(&qword_100977A58, &stru_100928588);
        a3 = sub_1000433A4((uint64_t)off_100977A50, a2);
      }
      if (v10)
        v10[2](v10);
    }
    *(_BYTE *)(a1 + a2 + 440) = 0;
    v15 = a3 != 0;
    sub_100043728(buf);
  }
  else
  {
    v15 = 2;
  }
  sub_100034234((uint64_t)v18);

  return v15;
}

void sub_1000431B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_1000431F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  int v6;
  _BYTE *v7;
  NSObject *v8;
  NSObject *v9;
  _BOOL8 result;
  NSObject *v11;
  _BOOL8 v12;
  int v13;
  const char *v14;

  if (a2 >= 0x110 && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    sub_1006E074C();
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100928588);
  if (*((_DWORD *)off_100977A50 + 14) == 1)
  {
    v4 = a1 + a2;
    v6 = *(unsigned __int8 *)(v4 + 168);
    v5 = (_BYTE *)(v4 + 168);
    if (v6)
    {
      v7 = (_BYTE *)(a1 + a2 + 440);
      if (*v7)
      {
        v8 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
          sub_1006E0654(a2, v8);
      }
      *v7 = 1;
    }
    else
    {
      v11 = qword_1009997E8;
      v12 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO);
      if (v12)
      {
        v13 = 136446210;
        v14 = sub_1000438E4(v12, a2);
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "VSC %{public}s, not supported", (uint8_t *)&v13, 0xCu);
      }
    }
    return *v5 != 0;
  }
  else
  {
    v9 = qword_1009997E8;
    result = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006E06D0(a2, v9);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10004339C(_BYTE *a1)
{
  *a1 = 0;
  return sub_1000478A0();
}

uint64_t sub_1000433A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  void *__p[2];
  uint64_t v26;
  char v27;
  pthread_mutex_t *v28[2];
  uint8_t buf[16];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[24];

  v28[0] = 0;
  v28[1] = 0;
  sub_10003415C((uint64_t)v28, (uint64_t)&unk_100999618);
  v4 = sub_1000438A4();
  if (sub_10004371C(v4, a2))
  {
    if (!sub_100043714(&stru_100999688, v28, 0x3A98uLL))
    {
      if ((sub_100052F88() & 1) == 0 && *(_DWORD *)(a1 + 352) == 0xFFFF)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        {
          v12 = sub_1000438A4();
          v13 = sub_1000438E4(v12, a2);
          sub_1006F77C8((uint64_t)v13, (uint64_t)v45);
        }
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        *(_OWORD *)buf = 0u;
        v30 = 0u;
        v27 = 0;
        sub_100043758(&v27);
        v14 = sub_1000438A4();
        v15 = sub_1000438E4(v14, a2);
        sub_1002532F8((uint64_t)buf, 256, (uint64_t)"VSC stall detected, %s (0x%x)", v16, v17, v18, v19, v20, (uint64_t)v15);
        sub_10011D44C((const char *)buf);
        sub_10004339C(&v27);
        if (sub_100065478())
        {
          v23 = sub_100065478();
          __p[0] = 0;
          __p[1] = 0;
          v26 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v23 + 104))(v23, 3, a2, __p);
          if (SHIBYTE(v26) < 0)
            operator delete(__p[0]);
        }
        sub_100034264((uint64_t)v28);
        v21 = sub_1000438A4();
        v22 = (char *)sub_1000438E4(v21, a2);
        sub_100091AE8(&v24, v22);
        sub_1004A37B0(a1, 3602, &v24);
      }
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        v5 = sub_1000438A4();
        v6 = sub_1000438E4(v5, a2);
        sub_1006F7790((uint64_t)v6, (uint64_t)buf);
      }
    }
  }
  else
  {
    v7 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      v8 = sub_1000438A4();
      v9 = sub_1000438E4(v8, a2);
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%{public}s completed prior to waiting", buf, 0xCu);
    }
  }
  v10 = dword_1009996B8;
  sub_100034234((uint64_t)v28);
  return v10;
}

void sub_10004360C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a17 < 0)
    operator delete(__p);
  sub_100043728(&a27);
  sub_100034234((uint64_t)&a28);
  _Unwind_Resume(a1);
}

BOOL sub_100043674(pthread_cond_t *a1, pthread_mutex_t *a2, unint64_t a3)
{
  int v3;
  int v4;
  timespec v6;

  v6.tv_sec = a3 / 0x3E8;
  v6.tv_nsec = 1000000 * (a3 % 0x3E8);
  v3 = pthread_cond_timedwait_relative_np(a1, a2, &v6);
  v4 = v3;
  if (v3 && v3 != 60 && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    sub_1006D9C0C();
  return v4 != 60;
}

BOOL sub_100043714(pthread_cond_t *a1, pthread_mutex_t **a2, unint64_t a3)
{
  return sub_100043674(a1, *a2, a3);
}

uint64_t sub_10004371C(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(a1 + a2 + 440);
}

_BYTE *sub_100043728(_BYTE *a1)
{
  if (*a1)
  {
    *a1 = 0;
    sub_1000478A0();
  }
  return a1;
}

_BYTE *sub_100043758(_BYTE *a1)
{
  *a1 = 1;
  sub_1000477B8();
  return a1;
}

uint64_t sub_100043784(int a1, unsigned int a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  _QWORD v10[2];
  _BYTE v11[24];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, (uint64_t)&unk_100999618);
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      v4 = sub_1000438A4();
      v5 = sub_1000438E4(v4, a2);
      sub_1006F7748((uint64_t)v5, (uint64_t)v11);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
  {
    v6 = sub_1000438A4();
    v7 = sub_1000438E4(v6, a2);
    sub_1006F76FC((uint64_t)v7, (uint64_t)v11);
  }
  v8 = sub_1000438A4();
  sub_1000445D4(v8, a2);
  dword_1009996B8 = a1;
  sub_1000445E0(&stru_100999688);
  return sub_100034234((uint64_t)v10);
}

void sub_100043880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000438A4()
{
  if (qword_100991EB8 != -1)
    dispatch_once(&qword_100991EB8, &stru_100929558);
  return qword_100991EB0;
}

const char *sub_1000438E4(uint64_t a1, int a2)
{
  const char *result;

  result = "BD_VSC_GET_POWER_CONSUMPTION";
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      result = "BD_VSC_WRITE_PCM_PARAM";
      break;
    case 2:
      result = "BD_VSC_WRITE_SLEEPMODE_PARAM";
      break;
    case 3:
      result = "BD_VSC_READ_RAW_RSSI";
      break;
    case 4:
      result = "BD_VSC_WRITE_HI_PRIO_CONN";
      break;
    case 5:
      result = "BD_VSC_OP_LOW_LATENCY_PRIO_CONN";
      break;
    case 6:
      result = "BD_VSC_SET_SCO_PATH";
      break;
    case 7:
      result = "BD_VSC_WRITE_I2SPCM_INTF";
      break;
    case 8:
      result = "BD_VSC_ENA_WBS";
      break;
    case 9:
      result = "BD_VSC_DYN_VOICE_ROUTE_CHANGE";
      break;
    case 10:
      result = "BD_VSC_OLYMPIC_SETTINGS";
      break;
    case 11:
      result = "BD_VSC_LE_META_VSC";
      break;
    case 12:
      result = "BD_VSC_OP_DELAYED_HOST_WAKE";
      break;
    case 13:
      result = "BD_VSC_LTE_COEX_LINK_QUAL_METRICS";
      break;
    case 14:
      result = "BD_VSC_LTE_TRIGGER_WCI2";
      break;
    case 15:
      result = "BD_VSC_LTE_ENA_WCI2";
      break;
    case 16:
      result = "DB_VSC_FACTORY_CAL_SET_TX_POWER";
      break;
    case 17:
      result = "BD_VSC_FACTORY_CAL_READ_TABLE";
      break;
    case 18:
      result = "BD_VSC_OP_ANTENNA_DIVERSITY";
      break;
    case 19:
      result = "BD_VSC_OP_DIVERSITY_AFH_MAPS";
      break;
    case 20:
      result = "BD_VSC_OP_DIVERSITY_CELL_COEX";
      break;
    case 21:
      result = "BD_VSC_REMOTE_AP_WRITE_LOCAL_STATE";
      break;
    case 22:
      result = "BD_VSC_OP_BT_SYNC";
      break;
    case 23:
      result = "BD_VSC_LTE_VSC";
      break;
    case 24:
      result = "BD_VSC_OP_POWER_LDO_DURING_SLEEP";
      break;
    case 25:
      result = "BD_VSC_WRITE_LE_REMOTE_PUBLIC_ADDR";
      break;
    case 26:
      result = "BD_VSC_OP_GIZMO_DETECTED";
      break;
    case 27:
      result = "BD_VSC_DISABLE_TPC";
      break;
    case 28:
      result = "BD_VSC_CORE_DUMP";
      break;
    case 29:
      result = "BD_VSC_CONFIG_LINK_QUALITY_STATS_TRIG";
      break;
    case 30:
      result = "BD_VSC_LE_WRITE_LOCAL_SUPPORTED_FEATURES";
      break;
    case 31:
      result = "BD_VSC_ENABLE_EXTENDED_DUPLICATE_FILTER";
      break;
    case 32:
      result = "BD_VSC_WRITE_HI_PRIO_LE_CONN";
      break;
    case 33:
      result = "BD_VSC_LE_CREATE_EXT_ADV_INSTANCE";
      break;
    case 34:
      result = "BD_VSC_LE_REMOVE_EXT_ADV_INSTANCE";
      break;
    case 35:
      result = "BD_VSC_LE_SET_EXT_ADV_INST_PARAMS";
      break;
    case 36:
      result = "BD_VSC_LE_SET_EXT_ADV_INST_DATA";
      break;
    case 37:
      result = "BD_VSC_LE_SET_EXT_SCAN_RSP_DATA";
      break;
    case 38:
      result = "BD_VSC_LE_SET_EXT_ADV_INST_ENABLE";
      break;
    case 39:
      result = "BD_VSC_HP_BT_CLASSIC";
      break;
    case 40:
      result = "BD_VSC_SET_PRIORITIZATION_THRESHOLD";
      break;
    case 41:
      result = "BD_VSC_ENABLE_LMP_ROUTING";
      break;
    case 42:
      result = "BD_VSC_ENABLE_LMP_ROUTING_THROUGH_VSE";
      break;
    case 43:
      result = "BD_VSC_GET_AWD_DATA_EVENT";
      break;
    case 44:
      result = "BD_VSC_ENABLE_DISABLE_FW_LOG_STREAMING";
      break;
    case 45:
      result = "BD_VSC_ENABLE_COEX_DEBUG_COUNTERS";
      break;
    case 46:
      result = "BD_VSC_READ_DETAILED_PROFILE_STATS";
      break;
    case 47:
      result = "BD_VSC_CLEAR_DETAILED_PROFILE_STATS";
      break;
    case 48:
      result = "BD_VSC_READ_TRANSPORT_SWITCH_STATS";
      break;
    case 49:
      result = "BD_VSC_CLEAR_TRANSPORT_SWITCH_STATS";
      break;
    case 50:
      result = "BD_VSC_HP_EDR_ACCESSORY";
      break;
    case 51:
      result = "BD_VSC_READ_FW_MEMORY_STATISTICS";
      break;
    case 52:
      result = "BD_VSC_ENABLE_HIGH_POWER";
      break;
    case 53:
      result = "BD_VSC_SET_FW_TRACE_MODE";
      break;
    case 54:
      result = "BD_VSC_SET_MAXIMUM_CONNECTION_UPDATE_INSTANT";
      break;
    case 55:
      result = "BD_VSC_CONFIG_PAGE_SCAN_RESPONSE";
      break;
    case 56:
      result = "BD_VSC_HDR_CONTROL";
      break;
    case 57:
      result = "BD_VSC_READ_PROP_LOCAL_FEATURES";
      break;
    case 58:
      result = "BD_VSC_READ_PROP_REMOTE_FEATURES";
      break;
    case 59:
      result = "BD_VSC_HDR_CHANGE_CONN_PKT_TYPE";
      break;
    case 60:
      result = "BD_VSC_HDR_SETUP_SYNCHRONOUS_CONNECTION";
      break;
    case 61:
      result = "BD_VSC_HDR_ACCEPT_SYNCHRONOUS_CONNECTION";
      break;
    case 62:
      result = "BD_VSC_SCO_BUFFER_SIZE_CONTROL";
      break;
    case 63:
      result = "BD_VSC_HRB_CONTROL";
      break;
    case 64:
      result = "BD_VSC_HRB_ALLOWED_BANDS";
      break;
    case 65:
      result = "BD_VSC_HRB_CLASSIFICATION_BANDS";
      break;
    case 66:
      result = "BD_VSC_HRB_CREATE_CONNECTION";
      break;
    case 67:
      result = "BD_VSC_HRB_CHANGE_CONNECTION_BAND";
      break;
    case 68:
      result = "BD_VSC_HRB_WRITE_SCAN_ENABLE";
      break;
    case 69:
      result = "BD_VSC_HRB_WRITE_PAGE_SCAN_ACTIVITY";
      break;
    case 70:
      result = "BD_VSC_HRB_READ_AFH_CHANNEL_MAP";
      break;
    case 71:
      result = "BD_VSC_HRB_SET_AFH_CHANNEL_CLASSIFICATION";
      break;
    case 72:
      result = "BD_VSC_GET_ESSENTIAL_POWER_DATABASE_ENTRIES";
      break;
    case 73:
      result = "BD_VSC_HRB_LIMIT_CHANNEL_MAP";
      break;
    case 74:
      result = "BD_VSC_HRB_SET_BAND_EDGES";
      break;
    case 75:
      result = "BD_VSC_HRB_READ_ENHANCED_TRANSMIT_POWER_LEVEL";
      break;
    case 79:
      result = "BD_VSC_ADVANCED_SNIFF_MODE";
      break;
    case 80:
      result = "BD_VSC_EXIT_ADVANCED_SNIFF_MODE";
      break;
    case 81:
      result = "BD_VSC_ADVANCED_SNIFF_RECONFIG";
      break;
    case 82:
      result = "BD_VSC_SET_PERIPHERAL_MAX_AGE";
      break;
    case 83:
      result = "BD_VSC_LMP_FLOW";
      break;
    case 84:
      result = "BD_VSC_AOS_EMPTY_PACKET_REPORT";
      break;
    case 85:
      result = "BD_VSC_CONTROL_AOS";
      break;
    case 86:
      result = "BD_VSC_SET_LE_POWER_CONTROL";
      break;
    case 87:
      result = "BD_VSC_GET_ADV_STATS";
      break;
    case 88:
      result = "BD_VSC_PHY_STATISTIC";
      break;
    case 89:
      result = "BD_VSC_DISCONNECT_EVENT";
      break;
    case 90:
      result = "BD_VSC_SET_MWS_COEX_RX_GAIN_MODE";
      break;
    case 91:
      result = "BD_VSC_ENABLE_AUDIO_STATISTICS";
      break;
    case 92:
      result = "BD_VSC_EPA_GPIO_TOGGLE_ENABLE";
      break;
    case 93:
      result = "BD_VSC_EPA_GPIO_READ_STATUS";
      break;
    case 94:
      result = "BD_VSC_SET_BIDIRECTIONAL_MAX_POWER_MODE";
      break;
    case 95:
      result = "BD_VSC_HP_EDR_HDR";
      break;
    case 96:
      result = "BD_VSC_ENABLE_HOST_WAKE_REPORT";
      break;
    case 97:
      result = "BD_VSC_ENABLE_POWER_TAG";
      break;
    case 98:
      result = "BD_VSC_ENABLE_POWER_TAG_V2";
      break;
    case 99:
      result = "BD_VSC_ADJUST_LE_INSTANT_FACTOR";
      break;
    case 100:
      result = "BD_VSC_DISABLE_HOST_WAKE_ON_LE_LINK_DROP";
      break;
    case 101:
      result = "BD_VSC_SET_BAD_COMPANY_ID_FOR_LE2M";
      break;
    case 102:
      result = "BD_VSC_TUNABLES_READ_ENABLE_DISABLE";
      break;
    case 103:
      result = "BD_VSC_ENABLE_WIRELESS_SPLITTER";
      break;
    case 104:
      result = "BD_VSC_ADVBUF_CONFIG";
      break;
    case 105:
      result = "BD_VSC_ADVBUF_READ_COMMAND";
      break;
    case 106:
      result = "BD_VSC_MATCHTABLE_CONFIG";
      break;
    case 107:
      result = "BD_VSC_MATCHTABLE_CONFIG_V2";
      break;
    case 108:
      result = "BD_VSC_MATCHTABLE_CONFIG_V3";
      break;
    case 109:
      result = "BD_VSC_MATCHTABLE_EXT_FILTER_CONFIG";
      break;
    case 110:
      result = "BD_VSC_MATCHTABLE_EXT_FILTER_CONFIG_V2";
      break;
    case 111:
      result = "BD_VSC_ADVBUFMATCH_CONTROL";
      break;
    case 112:
      result = "BD_VSC_ADVBUF_RSSI_THRESHOLD";
      break;
    case 113:
      result = "BD_VSC_ADVBUF_CFG_TIME_SLICE";
      break;
    case 114:
      result = "BD_VSC_ADVBUF_EXT_FILTER_CONFIG";
      break;
    case 115:
      result = "BD_VSC_MATCHTABLE_PARAMS";
      break;
    case 116:
      result = "BD_VSC_MATCHBUFFER_CONFIG";
      break;
    case 117:
      result = "BD_VSC_MATCHBUFFER_READ";
      break;
    case 118:
      result = "BD_VSC_SPMI_DIAGNOSTICS";
      break;
    case 119:
      result = "BD_VSC_BTCLK_SENSORC_TIMESYNC";
      break;
    case 120:
      result = "BD_VSC_ADV_TX_TRIG_TIMESTAMP";
      break;
    case 121:
      result = "BD_VSC_READ_CONN_EVENT_TRIGGER";
      break;
    case 122:
      result = "BD_VSC_LE_CONN_EVENT_TRIGGER";
      break;
    case 123:
      result = "BD_VSC_SPMI_DEBUG_VSE_CONTROL";
      break;
    case 124:
      result = "BD_VSC_HP_BF";
      break;
    case 125:
      result = "BD_VSC_SET_ENCRYPTION_KEY_SIZE";
      break;
    case 126:
      result = "BD_VSC_DUP_FILTER_REPORT_ENABLE";
      break;
    case 127:
      result = "BD_VSC_BEAMFORMING_MRC_CONTROL";
      break;
    case 128:
      result = "BD_VSC_SNR_MRC_CONTROL";
      break;
    case 129:
      result = "BD_VSC_BT_CORE_ANTENNA_SWITCH";
      break;
    case 130:
      result = "BD_VSC_USE_SINGLE_CORE_POWER_DB_FOR_ANT_DIVERSITY";
      break;
    case 131:
      result = "BD_VSC_CONFIGURE_CONTROLLER_BTCLK_CAPTURE";
      break;
    case 132:
      result = "BD_VSC_ENABLE_LE_SCAN_PROTECTION";
      break;
    case 133:
      result = "BD_VSC_SET_FW_LOG_MASK";
      break;
    case 134:
      result = "BD_VSC_SET_BTSC_PAGE_SCAN";
      break;
    case 135:
      result = "BD_VSC_SET_QOS_CONFIG";
      break;
    case 136:
      result = "BD_VSC_GET_QOS_CONFIG";
      break;
    case 137:
      result = "BD_VSC_CONFIGURE_RSSI_STATISTICS_AND_DETECTION";
      break;
    case 138:
      result = "BD_VSC_GET_SCAN_STATS_WITH_THRESHOLD";
      break;
    case 139:
      result = "BD_VSC_READ_SCAN_STATS_WITH_THRESHOLD";
      break;
    case 140:
      result = "BD_VSC_INCOMING_LE_CONNECTION_DENY_LIST_ADD";
      break;
    case 141:
      result = "BD_VSC_INCOMING_LE_CONNECTION_DENY_LIST_REMOVE";
      break;
    case 142:
      result = "BD_VSC_INCOMING_LE_CONNECTION_DENY_LIST_ENABLE";
      break;
    case 143:
      result = "BD_VSC_INCOMING_LE_CONNECTION_DENY_LIST_CLEAR";
      break;
    case 144:
      result = "BD_VSC_GET_FW_VERSIONS";
      break;
    case 145:
      result = "BD_VSC_INIT_DONE";
      break;
    case 146:
      result = "BD_VSC_SET_RANDOM_SEED";
      break;
    case 147:
      result = "BD_VSC_OLYMPIC_NUM_CMPLT_PKT_THRESH";
      break;
    case 148:
      result = "BD_VSC_OLYMPIC_RSSI_THRESH";
      break;
    case 149:
      result = "BD_VSC_OLYMPIC_READ_BT_SETTINGS";
      break;
    case 150:
      result = "BD_VSC_OLYMPIC_IGNORE_FEC";
      break;
    case 151:
      result = "BD_VSC_OLYMPIC_LINK_QUAL_STATS";
      break;
    case 152:
      result = "BD_VSC_OLYMPIC_ENHANCED_LINK_QUAL_STATS";
      break;
    case 153:
      result = "BD_VSC_OLYMPIC_ENABLE_EPA_VSE";
      break;
    case 154:
      result = "BD_VSC_OLYMPIC_LE_AUDIO";
      break;
    case 155:
      result = "BD_VSC_OLYMPIC_LE_AUDIO_STATS";
      break;
    case 156:
      result = "BD_VSC_OLYMPIC_READ_LE_SETTINGS";
      break;
    case 157:
      result = "BD_VSC_OLYMPIC_CHANGE_LE_SETTINGS";
      break;
    case 158:
      result = "BD_VSC_OLYMPIC_READ_PROFILING_STATS";
      break;
    case 159:
      result = "BD_VSC_OLYMPIC_READ_ENHANCED_PROFILING_STATS";
      break;
    case 160:
      result = "BD_VSC_OLYMPIC_READ_TRANSMIT_IPA_EPA_COUNTERS";
      break;
    case 161:
      result = "BD_VSC_OLYMPIC_LE_NUM_OF_COMPLT_PKT";
      break;
    case 162:
      result = "BD_VSC_OLYMPIC_SET_MAX_TXRX_PAIRS";
      break;
    case 163:
      result = "BD_VSC_OLYMPIC_ANTENNA_PREF";
      break;
    case 164:
      result = "BD_VSC_OLYMPIC_LE_COUNTRY_PWR_SELECT";
      break;
    case 165:
      result = "BD_VSC_OLYMPIC_COUNTRY_CODE_SELECTION";
      break;
    case 166:
      result = "BD_VSC_OLYMPIC_COUNTRY_CODE_SELECTION_MULTI_BAND";
      break;
    case 167:
      result = "BD_VSC_OLYMPIC_300KHZ_DEV_SELECT";
      break;
    case 168:
      result = "BD_VSC_OLYMPIC_ANTENNA_PREF_B";
      break;
    case 169:
      result = "BD_VSC_OLYMPIC_A2DP_ACL_SIMULTANEOUS";
      break;
    case 170:
      result = "BD_VSC_OLYMPIC_SET_TX_POWER_CAP";
      break;
    case 171:
      result = "BD_VSC_OLYMPIC_SET_SAR_LOCATION";
      break;
    case 172:
      result = "BD_VSC_OLYMPIC_SET_MIN_AFH_LE_CHANNELS";
      break;
    case 173:
      result = "BD_VSC_OLYMPIC_ADV_DUPLICATE_FILTER_BYPASS_CONFIG";
      break;
    case 174:
      result = "BD_VSC_OLYMPIC_SET_HI_PRIO_RSSI";
      break;
    case 175:
      result = "BD_VSC_OLYMPIC_COEX_MULTI_HID_LE_CONFIG";
      break;
    case 176:
      result = "BD_VSC_OLYMPIC_GPIO_AUDIO_SYNC_REPORT";
      break;
    case 177:
      result = "BD_VSC_FORCE_WLAN_5G";
      break;
    case 178:
      result = "BD_VSC_OLYMPIC_SET_CONNECTION_DESCRIPTOR";
      break;
    case 179:
      result = "BD_VSC_PCAP_ANT_WIFI5G_HB_STATUS";
      break;
    case 180:
      result = "BD_VSC_ENHANCED_PCAP_ANT_WIFI5G_HB_STATUS";
      break;
    case 181:
      result = "BD_VSC_OLYMPIC_SET_ENHANCED_SCAN_ENABLE";
      break;
    case 182:
      result = "BD_VSC_OLYMPIC_SET_SCAN_PARAMETERS_MULTICORE";
      break;
    case 183:
      result = "BD_VSC_OLYMPIC_SET_EXT_SCAN_LIMITS";
      break;
    case 184:
      result = "BD_VSC_OLYMPIC_GET_EXT_ADV_DROPPED";
      break;
    case 185:
      result = "BD_VSC_OLYMPIC_SET_EXT_ADV_LIMITS";
      break;
    case 186:
      result = "BD_VSC_OLYMPIC_SET_EXT_SCAN_BUFFERS";
      break;
    case 187:
      result = "BD_VSC_OLYMPIC_SET_SINGLE_SHOT_ROLE_SWITCH";
      break;
    case 188:
      result = "BD_VSC_OLYMPIC_SET_EXT_ADV_PHY_OPTIONS";
      break;
    case 189:
      result = "BD_VSC_OLYMPIC_SET_RC2_BT_SUPPRESSION";
      break;
    case 190:
      result = "BD_VSC_OLYMPIC_ENABLE_BT_GRANT_RC2_COEX";
      break;
    case 191:
      result = "BD_VSC_OLYMPIC_SET_SNIFF_ATTEMPT_OPTIMIZATION";
      break;
    case 192:
      result = "BD_VSC_OLYMPIC_UPDATE_LE_PHY_DENYLIST";
      break;
    case 193:
      result = "BT_VSC_OLYMPIC_SET_RETAIN_LE_SCAN_DUPLICATES_ON_START";
      break;
    case 194:
      result = "BD_VSC_OLYMPIC_SET_HID_LATENCY_STATS";
      break;
    case 195:
      result = "BD_VSC_OLYMPIC_SET_DIAG_DEBUG_EVENT_BEHAVIOR";
      break;
    case 196:
      result = "BD_VSC_LE_META_ENA_FEATURES";
      break;
    case 197:
      result = "BD_VSC_LE_META_ADD_IRK_TO_LIST";
      break;
    case 198:
      result = "BD_VSC_LE_META_REMV_IRK_FROM_LIST";
      break;
    case 199:
      result = "BD_VSC_LE_META_CLEAR_IRK_LIST";
      break;
    case 200:
      result = "BD_VSC_LE_META_ADV_PCF_FEATURE_SEL";
      break;
    case 201:
      result = "BD_VSC_LE_META_ADV_PCF_SERVICE_UUID";
      break;
    case 202:
      result = "BD_VSC_LE_META_MONITOR_RSSI_FOR_PROX";
      break;
    case 203:
      result = "BD_VSC_LE_META_TRACK_SENSOR";
      break;
    case 204:
      result = "BD_VSC_LE_META_TRACK_SENSOR_INCREASE_SCAN_PARAMS";
      break;
    case 205:
      result = "BD_VSC_LE_META_SET_ZONE_RSSI";
      break;
    case 206:
      result = "BD_VSC_LE_META_GET_ZONE_MONITOR_CAP";
      break;
    case 207:
      result = "BD_VSC_LE_META_ADD_ZONE_MONITOR_ENTRY";
      break;
    case 208:
      result = "BD_VSC_LE_META_RESET_ADV_MATCHING_RULES";
      break;
    case 209:
      result = "BD_VSC_LE_META_REMV_ZONE_MONITOR_ENTRY";
      break;
    case 210:
      result = "BD_VSC_LE_META_RESET_ZONE_MONITOR_FEAT";
      break;
    case 211:
      result = "BD_VSC_LE_META_ADD_ADV_MATCHING_RULE";
      break;
    case 212:
      result = "BD_VSC_LE_META_REMV_ADV_MATCHING_RULE";
      break;
    case 213:
      result = "BD_VSC_LE_META_CONN_RSSI_HISTORY";
      break;
    case 214:
      result = "BD_VSC_LE_META_ADD_TO_FILTER_ACCEPT_LIST";
      break;
    case 215:
      result = "BD_VSC_LE_META_ENABLE_ASYMMETRIC_LATENCY";
      break;
    case 216:
      result = "BD_VSC_LE_META_ADD_ADV_MATCHING_RULE_WITH_ADDRESS";
      break;
    case 217:
      result = "BD_VSC_LE_META_REMV_ADV_MATCHING_RULE_WITH_ADDRESS";
      break;
    case 218:
      result = "BD_VSC_LE_META_CONFIG_ADV_MATCHING_ADDRESS_LIST";
      break;
    case 219:
      result = "BD_VSC_LE_META_ADD_ADV_MATCHING_RULE_ENHANCED";
      break;
    case 220:
      result = "BD_VSC_LE_META_REMV_ADV_MATCHING_RULE_ENHANCED";
      break;
    case 221:
      result = "BD_VSC_LE_META_WIPE_ADV_MATCHING_RULE";
      break;
    case 222:
      result = "BD_VSC_LE_META_ADD_ADV_MATCHING_RULE_ENHANCED_BATCHED";
      break;
    case 224:
      result = "BD_VSC_LE_META_REMV_DUPLICATE_ENTRY_ADV_MATCHING_RULE";
      break;
    case 225:
      result = "BD_VSC_LE_META_REMV_MULTIPLE_DUPLICATE_ENTRIE_ADV_MATCHING_RULE";
      break;
    case 226:
      result = "BD_VSC_LE_META_STATUS_ADV_MATCHING_RULE_ENHANCED";
      break;
    case 227:
      result = "BD_VSC_LE_META_STATUS_ADV_MATCHING_RULE_ENHANCED_EXTENDED_BLOBMASK";
      break;
    case 228:
      result = "BD_VSC_LE_META_LPCORE_GET_STATS";
      break;
    case 229:
      result = "BD_VSC_LE_META_GET_SCAN_STATS";
      break;
    case 230:
      result = "BD_VSC_LE_META_ENABLE_TDS";
      break;
    case 231:
      result = "BD_VSC_LE_META_ADD_TDS_FILTER_SERVICE";
      break;
    case 232:
      result = "BD_VSC_LE_META_REMV_TDS_FILTER_SERVICE";
      break;
    case 233:
      result = "BD_VSC_LE_META_ADD_TO_FILTER_ACCEPT_LIST_WITH_OPTIONS_V1";
      break;
    case 234:
      result = "BD_VSC_LE_META_ADD_TO_FILTERACCEPTLIST_WITH_OPTIONS_POLL_STATS";
      break;
    case 235:
      result = "BD_VSC_LE_META_ADD_TO_FILTER_ACCEPT_LIST_WITH_OPTIONS_V2";
      break;
    case 236:
      result = "BD_VSC_LE_META_BTSC_LE_SET_CONNECTION_SCAN";
      break;
    case 237:
      result = "BD_VSC_LE_META_MFG_SCAN_FILTER";
      break;
    case 238:
      result = "BD_VSC_LE_META_SET_CONNECTION_PRIORITIZATION";
      break;
    case 239:
      result = "BD_VSC_LE_META_ADD_TO_FILTER_ACCEPT_LIST_WITH_OPTIONS_V3";
      break;
    case 240:
      result = "BD_VSC_LE_META2_WRITE_STORED_LTK";
      break;
    case 241:
      result = "BD_VSC_LE_META2_REMOVE_STORED_LTK";
      break;
    case 242:
      result = "BD_VSC_LE_META2_READ_LOCAL_CONTROLLER_CACHED_INFO";
      break;
    case 243:
      result = "BD_VSC_LE_META2_WRITE_PEER_CACHED_INFO";
      break;
    case 244:
      result = "BD_VSC_LE_META2_SET_MAX_INSTANT_UPDATE_INFO";
      break;
    case 245:
      result = "BD_VSC_LE_META2_ENABLE_ADV_CONN_IND";
      break;
    case 246:
      result = "BD_VSC_LE_META2_CONFIGURE_ADV_CONN_IND";
      break;
    case 247:
      result = "BD_VSC_BT_ENA_FEATURES";
      break;
    case 248:
      result = "BD_VSC_OP_DELAYED_HOST_WAKE_PCIE";
      break;
    case 249:
      result = "BD_VSC_SET_GPIO_STATE";
      break;
    case 250:
      result = "BD_VSC_SET_AGC_TABLE_OVERRIDE";
      break;
    case 251:
      result = "BD_VSC_GET_LPEM_DATA";
      break;
    case 252:
      result = "BD_VSC_READ_CONTROLLER_RAM";
      break;
    case 253:
      result = "BD_VSC_LE_META_ADD_IRK_TO_FAST_LIST";
      break;
    case 254:
      result = "BD_VSC_CONFIGURE_CREATE_CONNECTION";
      break;
    case 255:
      result = "BD_VSC_SPMI_COEX_DEBUG_COUNTERS";
      break;
    case 256:
      result = "BD_VSC_SPMI_COEX_TEST_COMMAND";
      break;
    case 257:
      result = "BD_VSC_SPMI_COEX_TX_CONTROL";
      break;
    case 258:
      result = "BD_VSC_SPMI_COEX_TYPE_53_CONFIG";
      break;
    case 259:
      result = "BD_VSC_SPMI_COEX_TYPE_60_CONFIG";
      break;
    case 260:
      result = "BD_VSC_LE_META_ENA_FILTERING_FEATURES";
      break;
    case 261:
      result = "BD_VSC_LOAD_MSFFILE";
      break;
    case 262:
      result = "BD_VSC_LOAD_PWR_REGULATORYFILE";
      break;
    case 263:
      result = "BD_VSC_LOAD_PWR_REGULATORYFILE_A3";
      break;
    case 264:
      result = "BD_VSC_WRITE_BT_ADDRESS";
      break;
    case 265:
      result = "BD_VSC_ADD_TO_FILTER_ACCEPT_LIST_UNIFIED";
      break;
    case 266:
      result = "BD_VSC_LE_ADV_TX_POWER_INCREASE";
      break;
    case 268:
      result = "BD_VSC_CONFIG_APPLE_EXTENDED_ADV_REPORT";
      break;
    case 269:
      result = "BD_VSC_APPLE_LE_FEATURE_SET_VENDOR_LIST";
      break;
    case 271:
      result = "BD_VSC_SET_UNIFIED_PRIORITY";
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
        sub_1006E05E8();
      result = "Unknown VSC";
      break;
  }
  return result;
}

uint64_t sub_1000445D4(uint64_t result, unsigned int a2)
{
  *(_BYTE *)(result + a2 + 440) = 0;
  return result;
}

void sub_1000445E0(pthread_cond_t *a1)
{
  if (pthread_cond_broadcast(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006D9C0C();
  }
}

uint64_t sub_100044630(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003B10E0;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992310 != -1)
    dispatch_once(&qword_100992310, block);
  return byte_100992308;
}

unsigned __int8 *sub_1000446A4(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  uint64_t **v8;
  unsigned __int8 *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (unsigned __int8 **)sub_10000DC28((uint64_t)a1, &v11, uu1);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_100067FA8((uint64_t)a1, a4, v10);
    sub_100004078(a1, v11, v8, (uint64_t *)v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100686618((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_100044758(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  char *v18;
  unsigned __int8 *v19;
  void **v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *p_p;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  BOOL v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  void **v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  const char *v53;
  uint64_t v54;
  _QWORD *v55;
  void **v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  void *__p;
  uint64_t v69;
  unsigned __int8 v70;
  __int128 v71;
  _OWORD v72[4];
  void *v73[2];
  __int128 v74;
  __int128 v75;
  _BYTE v76[144];
  uint64_t v77;
  __int128 v78;
  int v79;
  void **v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;

  v77 = 0;
  v75 = 0u;
  memset(v76, 0, sizeof(v76));
  *(_OWORD *)v73 = 0u;
  v74 = 0u;
  memset(v72, 0, sizeof(v72));
  v71 = 0u;
  sub_1002613AC((uint64_t)&v71);
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(_QWORD *)(a1 + 24))
      goto LABEL_12;
  }
  else if (!*(_BYTE *)(a1 + 39))
  {
    goto LABEL_12;
  }
  v2 = sub_1002614D8(v72, (uint64_t)"\"", 1);
  v3 = *(char *)(a1 + 39);
  if (v3 >= 0)
    v4 = a1 + 16;
  else
    v4 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 39);
  else
    v5 = *(_QWORD *)(a1 + 24);
  v6 = sub_1002614D8(v2, v4, v5);
  sub_1002614D8(v6, (uint64_t)"\", ", 3);
LABEL_12:
  v7 = sub_1002614D8(v72, (uint64_t)"RSSI: ", 6);
  v8 = (_QWORD *)std::ostream::operator<<(v7, *(char *)(a1 + 216));
  sub_1002614D8(v8, (uint64_t)" dB (", 5);
  if (!*(_BYTE *)(a1 + 217))
    sub_1002614D8(v72, (uint64_t)"non-", 4);
  sub_1002614D8(v72, (uint64_t)"saturated), ", 12);
  if (*(_BYTE *)(a1 + 42))
  {
    v9 = sub_1002614D8(v72, (uint64_t)"Tx: ", 4);
    v10 = (_QWORD *)std::ostream::operator<<(v9, *(char *)(a1 + 43));
    sub_1002614D8(v10, (uint64_t)" dB, ", 5);
  }
  if (*(_QWORD *)(a1 + 72) != *(_QWORD *)(a1 + 64))
  {
    sub_1002614D8(v72, (uint64_t)"Service UUIDs: ", 15);
    v11 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 72) != v11)
    {
      v12 = 0;
      v13 = 1;
      do
      {
        sub_10006887C(v11 + 20 * v12, &v80);
        if ((v82 & 0x80u) == 0)
          v14 = (void **)&v80;
        else
          v14 = v80;
        if ((v82 & 0x80u) == 0)
          v15 = v82;
        else
          v15 = v81;
        v16 = sub_1002614D8(v72, (uint64_t)v14, v15);
        sub_1002614D8(v16, (uint64_t)" ", 1);
        if ((char)v82 < 0)
          operator delete(v80);
        v12 = v13;
        v11 = *(_QWORD *)(a1 + 64);
        v17 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 72) - v11) >> 2) > v13++;
      }
      while (v17);
    }
    __p = 0;
    v69 = 0;
    std::ostream::sentry::sentry(&__p, v72);
    v18 = (char *)v72 + *(_QWORD *)(*(_QWORD *)&v72[0] - 24);
    if ((v18[32] & 5) == 0)
    {
      (*(void (**)(void ***__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v18 + 5) + 32))(&v80, *((_QWORD *)v18 + 5), -1, 1, 16);
      if (v83 == -1)
        std::ios_base::clear((std::ios_base *)((char *)v72 + *(_QWORD *)(*(_QWORD *)&v72[0] - 24)), *(_DWORD *)((char *)&v72[2] + *(_QWORD *)(*(_QWORD *)&v72[0] - 24)) | 4);
    }
    std::ostream::sentry::~sentry(&__p);
    sub_1002614D8(v72, (uint64_t)", ", 2);
  }
  if (*(_QWORD *)(a1 + 128))
  {
    sub_1002614D8(v72, (uint64_t)"Service Data UUIDs: ", 20);
    v19 = *(unsigned __int8 **)(a1 + 112);
    if (v19 != (unsigned __int8 *)(a1 + 120))
    {
      do
      {
        v78 = xmmword_10073B558;
        v79 = 0;
        if (!sub_100072DF0(v19 + 32, (unsigned __int8 *)&v78))
        {
          sub_10006887C((uint64_t)(v19 + 32), &v80);
          if ((v82 & 0x80u) == 0)
            v20 = (void **)&v80;
          else
            v20 = v80;
          if ((v82 & 0x80u) == 0)
            v21 = v82;
          else
            v21 = v81;
          v22 = sub_1002614D8(v72, (uint64_t)v20, v21);
          v23 = sub_1002614D8(v22, (uint64_t)":", 1);
          sub_1000453F0((uint64_t)(v19 + 56), &__p);
          if ((v70 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          if ((v70 & 0x80u) == 0)
            v25 = v70;
          else
            v25 = v69;
          v26 = sub_1002614D8(v23, (uint64_t)p_p, v25);
          sub_1002614D8(v26, (uint64_t)" ", 1);
          if ((char)v70 < 0)
            operator delete(__p);
          if ((char)v82 < 0)
            operator delete(v80);
        }
        v27 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
        if (v27)
        {
          do
          {
            v28 = v27;
            v27 = *(unsigned __int8 **)v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            v28 = (unsigned __int8 *)*((_QWORD *)v19 + 2);
            v29 = *(_QWORD *)v28 == (_QWORD)v19;
            v19 = v28;
          }
          while (!v29);
        }
        v19 = v28;
      }
      while (v28 != (unsigned __int8 *)(a1 + 120));
    }
    __p = 0;
    v69 = 0;
    std::ostream::sentry::sentry(&__p, v72);
    v30 = (char *)v72 + *(_QWORD *)(*(_QWORD *)&v72[0] - 24);
    if ((v30[32] & 5) == 0)
    {
      (*(void (**)(void ***__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v30 + 5) + 32))(&v80, *((_QWORD *)v30 + 5), -1, 1, 16);
      if (v83 == -1)
        std::ios_base::clear((std::ios_base *)((char *)v72 + *(_QWORD *)(*(_QWORD *)&v72[0] - 24)), *(_DWORD *)((char *)&v72[2] + *(_QWORD *)(*(_QWORD *)&v72[0] - 24)) | 4);
    }
    std::ostream::sentry::~sentry(&__p);
    sub_1002614D8(v72, (uint64_t)", ", 2);
  }
  if (*(_QWORD *)(a1 + 96) != *(_QWORD *)(a1 + 88))
  {
    sub_1002614D8(v72, (uint64_t)"Solicited Service UUIDs: ", 25);
    v31 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 96) != v31)
    {
      v32 = 0;
      v33 = 1;
      do
      {
        sub_10006887C(v31 + 20 * v32, &v80);
        if ((v82 & 0x80u) == 0)
          v34 = (void **)&v80;
        else
          v34 = v80;
        if ((v82 & 0x80u) == 0)
          v35 = v82;
        else
          v35 = v81;
        v36 = sub_1002614D8(v72, (uint64_t)v34, v35);
        sub_1002614D8(v36, (uint64_t)" ", 1);
        if ((char)v82 < 0)
          operator delete(v80);
        v32 = v33;
        v31 = *(_QWORD *)(a1 + 88);
        v17 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 96) - v31) >> 2) > v33++;
      }
      while (v17);
    }
    __p = 0;
    v69 = 0;
    std::ostream::sentry::sentry(&__p, v72);
    v37 = (char *)v72 + *(_QWORD *)(*(_QWORD *)&v72[0] - 24);
    if ((v37[32] & 5) == 0)
    {
      (*(void (**)(void ***__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v37 + 5) + 32))(&v80, *((_QWORD *)v37 + 5), -1, 1, 16);
      if (v83 == -1)
        std::ios_base::clear((std::ios_base *)((char *)v72 + *(_QWORD *)(*(_QWORD *)&v72[0] - 24)), *(_DWORD *)((char *)&v72[2] + *(_QWORD *)(*(_QWORD *)&v72[0] - 24)) | 4);
    }
    std::ostream::sentry::~sentry(&__p);
    sub_1002614D8(v72, (uint64_t)", ", 2);
  }
  if (!sub_1000452EC(a1 + 48))
  {
    sub_1002614D8(v72, (uint64_t)"MFR Data: ", 10);
    sub_1000453F0(a1 + 48, &v80);
    if ((v82 & 0x80u) == 0)
      v38 = (void **)&v80;
    else
      v38 = v80;
    if ((v82 & 0x80u) == 0)
      v39 = v82;
    else
      v39 = v81;
    v40 = sub_1002614D8(v72, (uint64_t)v38, v39);
    v41 = sub_1002614D8(v40, (uint64_t)"[AppleTypesBitmap:", 18);
    sub_1005F5FC4(a1 + 168, 0x30u, 49, (int8x16_t **)&__p);
    if ((v70 & 0x80u) == 0)
      v42 = &__p;
    else
      v42 = __p;
    if ((v70 & 0x80u) == 0)
      v43 = v70;
    else
      v43 = v69;
    v44 = sub_1002614D8(v41, (uint64_t)v42, v43);
    sub_1002614D8(v44, (uint64_t)"], ", 3);
    if ((char)v70 < 0)
      operator delete(__p);
    if ((char)v82 < 0)
      operator delete(v80);
  }
  if (!sub_1000452EC(a1 + 136))
  {
    sub_1002614D8(v72, (uint64_t)"LE BT Address: ", 15);
    sub_1000453F0(a1 + 136, &v80);
    if ((v82 & 0x80u) == 0)
      v45 = (void **)&v80;
    else
      v45 = v80;
    if ((v82 & 0x80u) == 0)
      v46 = v82;
    else
      v46 = v81;
    sub_1002614D8(v72, (uint64_t)v45, v46);
    if ((char)v82 < 0)
      operator delete(v80);
    sub_1002614D8(v72, (uint64_t)", ", 2);
  }
  if (!sub_1000452EC(a1 + 152))
  {
    sub_1002614D8(v72, (uint64_t)"MFR Data (non-Apple): ", 22);
    sub_1000453F0(a1 + 152, &v80);
    if ((v82 & 0x80u) == 0)
      v47 = (void **)&v80;
    else
      v47 = v80;
    if ((v82 & 0x80u) == 0)
      v48 = v82;
    else
      v48 = v81;
    sub_1002614D8(v72, (uint64_t)v47, v48);
    if ((char)v82 < 0)
      operator delete(v80);
    sub_1002614D8(v72, (uint64_t)", ", 2);
  }
  if (!sub_1000452EC(a1 + 224))
  {
    sub_1002614D8(v72, (uint64_t)"TDS Data: ", 10);
    sub_1000453F0(a1 + 224, &v80);
    if ((v82 & 0x80u) == 0)
      v49 = (void **)&v80;
    else
      v49 = v80;
    if ((v82 & 0x80u) == 0)
      v50 = v82;
    else
      v50 = v81;
    sub_1002614D8(v72, (uint64_t)v49, v50);
    if ((char)v82 < 0)
      operator delete(v80);
    sub_1002614D8(v72, (uint64_t)", ", 2);
  }
  if (!*(_BYTE *)(a1 + 12))
    sub_1002614D8(v72, (uint64_t)"non-", 4);
  sub_1002614D8(v72, (uint64_t)"connectable, ", 13);
  if (*(_BYTE *)(a1 + 13))
    sub_1002614D8(v72, (uint64_t)"dual-mode, ", 11);
  if (*(_BYTE *)(a1 + 14))
    sub_1002614D8(v72, (uint64_t)"AP wakeup, ", 11);
  if (*(_BYTE *)(a1 + 219))
  {
    v51 = sub_1002614D8(v72, (uint64_t)"channel: ", 9);
    v52 = (_QWORD *)std::ostream::operator<<(v51, *(unsigned __int8 *)(a1 + 219));
    sub_1002614D8(v52, (uint64_t)", ", 2);
  }
  if (*(_BYTE *)(a1 + 220))
    sub_1002614D8(v72, (uint64_t)"RSSI_WLAN, ", 11);
  if (!*(_BYTE *)(a1 + 365))
  {
    v53 = "sourceCore: MainCore";
    goto LABEL_138;
  }
  if (*(_BYTE *)(a1 + 365) == 1)
  {
    v53 = "sourceCore: ScanCore";
LABEL_138:
    v54 = 20;
    goto LABEL_140;
  }
  v53 = "sourceCore: Unknown";
  v54 = 19;
LABEL_140:
  v55 = sub_1002614D8(v72, (uint64_t)v53, v54);
  sub_1002614D8(v55, (uint64_t)", ", 2);
  if (!sub_1000452EC(a1 + 448))
  {
    sub_1002614D8(v72, (uint64_t)"Resolvable Set ID Data: ", 24);
    sub_1000453F0(a1 + 448, &v80);
    if ((v82 & 0x80u) == 0)
      v56 = (void **)&v80;
    else
      v56 = v80;
    if ((v82 & 0x80u) == 0)
      v57 = v82;
    else
      v57 = v81;
    sub_1002614D8(v72, (uint64_t)v56, v57);
    if ((char)v82 < 0)
      operator delete(v80);
    sub_1002614D8(v72, (uint64_t)", ", 2);
  }
  v58 = sub_1002614D8(v72, (uint64_t)"IsELNAOn: ", 10);
  v59 = (_QWORD *)std::ostream::operator<<(v58, *(unsigned __int8 *)(a1 + 366));
  sub_1002614D8(v59, (uint64_t)", ", 2);
  v60 = sub_1002614D8(v72, (uint64_t)"IsPassup: ", 10);
  v61 = (_QWORD *)std::ostream::operator<<(v60, *(unsigned __int8 *)(a1 + 367));
  sub_1002614D8(v61, (uint64_t)", ", 2);
  v62 = sub_1002614D8(v72, (uint64_t)"IsFromSCCompensation", 20);
  v63 = (_QWORD *)std::ostream::operator<<(v62, *(unsigned __int8 *)(a1 + 368));
  sub_1002614D8(v63, (uint64_t)", ", 2);
  v64 = sub_1002614D8(v72, (uint64_t)"IsCoexDenied", 12);
  v65 = (_QWORD *)std::ostream::operator<<(v64, *(unsigned __int8 *)(a1 + 369));
  sub_1002614D8(v65, (uint64_t)", ", 2);
  std::stringbuf::str((char *)v72 + 8);
  *(_QWORD *)((char *)&v72[-1]
  *(_QWORD *)&v72[0] = v66;
  if (SHIBYTE(v74) < 0)
    operator delete(v73[1]);
  std::streambuf::~streambuf((char *)v72 + 8);
  return std::ios::~ios(v76);
}

void sub_100045230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::ostream::sentry::~sentry(&__p);
  sub_1006CC5C8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_1000452EC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) == 0;
}

void sub_1000452FC(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_1000453B8()
{
  operator delete();
}

_QWORD *sub_1000453F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v9;
  _OWORD v10[4];
  void *__p[2];
  __int128 v12;
  __int128 v13;
  _OWORD v14[9];
  uint64_t v15;
  unsigned __int8 v16;

  if (!*(_QWORD *)(a1 + 8))
    return sub_100091AE8(a2, "NULL");
  v15 = 0;
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  memset(v10, 0, sizeof(v10));
  v9 = 0u;
  sub_1002613AC((uint64_t)&v9);
  v3 = 0;
  v4 = *(_QWORD *)&v10[0];
  *(_DWORD *)((char *)v10 + *(_QWORD *)(*(_QWORD *)&v10[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v10
                                                                                    + *(_QWORD *)(*(_QWORD *)&v10[0]
                                                                                                - 24)
                                                                                    + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v10 + *(_QWORD *)(v4 - 24) + 8) |= 0x4000u;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
      v5 = *(_QWORD *)(v5 + 16);
    if (v3 >= v5)
      break;
    if (v3)
    {
      v16 = 32;
      sub_1002614D8(v10, (uint64_t)&v16, 1);
    }
    v16 = 48;
    v6 = sub_1003CDCD4(v10, &v16);
    *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 24) = 2;
    std::ostream::operator<<();
    ++v3;
  }
  std::stringbuf::str((char *)v10 + 8);
  *(_QWORD *)((char *)&v10[-1]
  *(_QWORD *)&v10[0] = v7;
  if (SHIBYTE(v12) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v10 + 8);
  return (_QWORD *)std::ios::~ios(v14);
}

void sub_1000455BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1006CC5C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1000455DC(uint64_t a1, void *__dst, size_t a3)
{
  uint64_t v4;
  size_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  os_log_t v15;
  os_log_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
  {
    v7 = 0;
    v6 = 0;
LABEL_5:
    memcpy(__dst, v7, v6);
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
      return *(_QWORD *)(v8 + 16);
    else
      return 0;
  }
  v6 = *(_QWORD *)(v4 + 16);
  if (v6 <= a3)
  {
    v7 = (const void *)(v4 + 24);
    goto LABEL_5;
  }
  v10 = sub_100027F68();
  sub_100576510(v10, 1);
  v11 = _os_log_pack_size(12);
  v12 = (char *)&v18 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __error();
  v14 = _os_log_pack_fill(v12, v11, *v13, &_mh_execute_header, "Assertion failed: %{public}s");
  *(_DWORD *)v14 = 136446210;
  *(_QWORD *)(v14 + 4) = "dstSize >= getSize()";
  v15 = os_log_create("com.apple.bluetooth", "CBCrash");
  if (v15)
    v16 = v15;
  else
    v16 = (os_log_t)&_os_log_default;
  qword_10097BA60 = os_log_pack_send_and_compose(v12, v16, 16, 0, 0);
  v17 = abort_with_payload(18, 2, v12, v11, qword_10097BA60, 0);
  return sub_100045748(v17);
}

void sub_100045748(uint64_t a1, void *a2, double a3)
{
  id v5;
  double *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = (double *)sub_1000306B0(a1, v5);
  if (v6)
    v6[50] = a3;
  sub_100034234((uint64_t)v7);

}

void sub_1000457B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1000457D0(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  int v5;
  _QWORD v6[2];

  v3 = a2;
  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 160) + 1;
    *(_DWORD *)(a1 + 160) = v5;
    *((_DWORD *)v4 + 33) = v5;
  }
  sub_100034234((uint64_t)v6);

}

void sub_100045838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100045858(uint64_t a1, unint64_t a2, uint64_t a3)
{
  NSObject *v6;
  id v7;
  id v8;
  void **v9;
  uint64_t v10;
  BOOL v11;
  NSObject *v12;
  id v13;
  void *v14;
  _DWORD buf[3];
  __int16 v16;
  void **v17;
  void *__p[2];
  char v19;
  _QWORD v20[2];

  if ((unint64_t)sub_10003F8C4(*(_QWORD *)(a3 + 8) + 48) >= 0x1D)
  {
    v6 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093F4F8);
      sub_10003F924((uint64_t)off_1009778C0, a2, 0, 1u, 0, 0, (unsigned __int8 *)v20);
      v7 = sub_100030DF4((const unsigned __int8 *)v20);
      v8 = (id)objc_claimAutoreleasedReturnValue(v7);
      sub_1000217F4(a2);
      if (v19 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      buf[0] = 138412546;
      *(_QWORD *)&buf[1] = v8;
      v16 = 2080;
      v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "decryptProximityPairingPayload device:%@ address:%s", (uint8_t *)buf, 0x16u);
      if (v19 < 0)
        operator delete(__p[0]);

    }
    v10 = sub_10003EB18(*(_QWORD *)(a3 + 8) + 48);
    v11 = *(_WORD *)v10 == 76 && *(_BYTE *)(v10 + 2) == 7;
    if (v11 && *(_BYTE *)(v10 + 4) == 1)
    {
      v20[0] = 0;
      v20[1] = 0;
      if ((sub_10068461C(a1, a2, (uint64_t)v20) & 1) != 0)
      {
        sub_10003F8C4(*(_QWORD *)(a3 + 8) + 48);
        operator new[]();
      }
      v12 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_INFO))
      {
        v13 = sub_100021770(a2);
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        LODWORD(__p[0]) = 138543362;
        *(void **)((char *)__p + 4) = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "No encryption key for the device %{public}@", (uint8_t *)__p, 0xCu);

      }
    }
  }
}

void sub_1000460C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100046114(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void **v25;
  NSObject *v26;
  void **v27;
  uint64_t (**v28)();
  unsigned int *v29;
  void *v30[2];
  char v31;
  _BYTE buf[22];
  __int16 v33;
  int v34;
  __int16 v35;
  const void *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  char *v42;
  __int128 v43;

  v6 = *(unsigned int **)(*(_QWORD *)(a3 + 8) + 56);
  v28 = &off_100918258;
  v29 = v6;
  if (v6)
    sub_10003C37C((uint64_t)v6);
  v7 = sub_10003F8C4((uint64_t)&v28);
  v8 = sub_10003EB18((uint64_t)&v28);
  if ((unint64_t)v7 >= 2)
  {
    v10 = (const void *)v8;
    if (*(_BYTE *)v8 == 76 && !*(_BYTE *)(v8 + 1) && v7 >= 4)
    {
      v11 = v8 + v7;
      v12 = (unsigned __int8 *)(v8 + 2);
      while (1)
      {
        v13 = v12 + 2;
        v14 = v12[1] & 0x1F;
        if (v11 - (uint64_t)(v12 + 2) < v14)
          goto LABEL_53;
        if (*v12 == 7)
          break;
        v12 = &v13[v14];
        if (v11 - (uint64_t)&v13[v14] <= 1)
          goto LABEL_53;
      }
      if (v14 < 0x11)
        goto LABEL_53;
      v15 = *v13;
      if (v15 != 8 && v15 != 6)
        goto LABEL_53;
      v43 = 0uLL;
      v17 = *v13;
      if (v17 == 6)
      {
        v8 = sub_10068461C(a1, a2, (uint64_t)&v43);
        if ((v8 & 1) == 0)
        {
          if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEBUG))
          {
            sub_10064960C(a2);
            sub_100717A88();
          }
          goto LABEL_53;
        }
      }
      else if (v17 == 8)
      {
        *(_DWORD *)&buf[3] = 0;
        *(_DWORD *)buf = 0;
        v18 = sub_1000746A4(a2);
        *(_DWORD *)buf = v18;
        buf[6] = BYTE6(v18);
        *(_WORD *)&buf[4] = WORD2(v18);
        if (qword_1009778B8 != -1)
          dispatch_once(&qword_1009778B8, &stru_10093F538);
        v8 = sub_1006A12D8(qword_1009778B0, buf, &v43);
        if ((v8 & 1) == 0)
        {
          if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
            sub_100717AD4();
          goto LABEL_53;
        }
      }
      __chkstk_darwin(v8, v9);
      v19 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v19, v7);
      v20 = memcpy(v19, v10, v7);
      v21 = v13 - (_BYTE *)v10 + 1;
      if (v17 == 6)
      {
        if (sub_10022A6A4((uint64_t)&v43, (uint64_t)&v19[v21], (uint64_t)&v19[v21], v7 - v21))
        {
          if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
          {
            sub_10064960C(a2);
            sub_1007179F8();
          }
          goto LABEL_53;
        }
        v23 = *(_QWORD *)(a3 + 8);
        *(_BYTE *)(v23 + 362) = 1;
        v24 = qword_100999870;
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_INFO))
        {
          sub_10064960C(a2);
          if (v31 >= 0)
            v25 = v30;
          else
            v25 = (void **)v30[0];
          *(_DWORD *)buf = 136447747;
          *(_QWORD *)&buf[4] = v25;
          *(_WORD *)&buf[12] = 2160;
          *(_QWORD *)&buf[14] = 1752392040;
          v33 = 1040;
          v34 = v7;
          v35 = 2097;
          v36 = v10;
          v37 = 2160;
          v38 = 1752392040;
          v39 = 1040;
          v40 = v7;
          v41 = 2097;
          v42 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Decrypt AccessoryStatus ADV success: %{public}s, %{private, mask.hash}.*P -> %{private, mask.hash}.*P", buf, 0x40u);
          if (v31 < 0)
            operator delete(v30[0]);
          v23 = *(_QWORD *)(a3 + 8);
        }
        goto LABEL_51;
      }
      if (v17 != 8)
        goto LABEL_53;
      v22 = ccaes_ecb_decrypt_mode(v20);
      if (!ccecb_one_shot(v22, 16, &v43, 1, &v19[v21], &v19[v21]))
      {
        v23 = *(_QWORD *)(a3 + 8);
        *(_BYTE *)(v23 + 362) = 1;
        v26 = qword_100999828;
        if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
        {
          sub_10064960C(a2);
          if (v31 >= 0)
            v27 = v30;
          else
            v27 = (void **)v30[0];
          *(_DWORD *)buf = 136447747;
          *(_QWORD *)&buf[4] = v27;
          *(_WORD *)&buf[12] = 2160;
          *(_QWORD *)&buf[14] = 1752392040;
          v33 = 1040;
          v34 = v7;
          v35 = 2097;
          v36 = v10;
          v37 = 2160;
          v38 = 1752392040;
          v39 = 1040;
          v40 = v7;
          v41 = 2097;
          v42 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Decrypt FindMyAccessory ADV success: %{public}s, %{private, mask.hash}.*P -> %{private, mask.hash}.*P", buf, 0x40u);
          if (v31 < 0)
            operator delete(v30[0]);
          v23 = *(_QWORD *)(a3 + 8);
        }
LABEL_51:
        sub_10003994C(buf, (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
        sub_100041698(v23 + 48, (uint64_t)buf);
        *(_QWORD *)buf = &off_100918258;
        if (*(_QWORD *)&buf[8])
          sub_100056AAC(*(unsigned int **)&buf[8]);
        goto LABEL_53;
      }
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
      {
        sub_10064960C(a2);
        sub_100717A40();
      }
    }
  }
LABEL_53:
  v28 = &off_100918258;
  if (v29)
    sub_100056AAC(v29);
}

void sub_100046654(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;

  *(_QWORD *)(v2 - 224) = v1;
  v4 = *(unsigned int **)(v2 - 216);
  if (v4)
    sub_100056AAC(v4);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000466C8(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 768))(*(_QWORD *)(a1 + 32), 1);
  **(_BYTE **)(a1 + 40) = BYTE2(xmmword_100991B70);
  return result;
}

uint64_t sub_100046708(uint64_t a1)
{
  return sub_1000467A0(*(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 58));
}

uint64_t sub_100046768(_DWORD *a1, int a2)
{
  int v2;
  unsigned int v3;

  v2 = a1[295];
  if (!a2)
  {
    if ((v2 & 0x40000) != 0)
    {
      v3 = v2 & 0xFFFBFFFF;
      goto LABEL_7;
    }
    return 0;
  }
  if ((v2 & 0x40000) != 0)
    return 0;
  v3 = v2 | 0x40000;
LABEL_7:
  a1[295] = v3;
  return (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 352))(a1, 1);
}

uint64_t sub_1000467A0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  NSObject *v5;

  v4 = 101;
  if (a4 <= a2 && a2 <= 0x16 && a1 && a3)
  {
    if (off_100985160)
    {
      v4 = off_100985160(a1, a2, a3);
      if (!(_DWORD)v4)
        return v4;
    }
    else
    {
      v4 = 3601;
    }
    if (sub_10005549C())
    {
      sub_100054530("VSC failed %!", v4);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  return v4;
}

void sub_10004686C(uint64_t a1, void *a2)
{
  sub_100046F7C(a1 - 32, a2);
}

BOOL sub_100046874(uint64_t a1)
{
  _BOOL8 result;
  unsigned int v3;
  BOOL v4;
  int v5;
  BOOL v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 1200))
    return *(_BYTE *)(a1 + 1201) != 0;
  v3 = *(_DWORD *)(a1 + 712);
  v4 = v3 - 1 > 0x7CE || v3 > 0x13;
  v5 = (1 << v3) & 0x83000;
  v6 = v4 || v5 == 0;
  if (v6 || (v7 = sub_10003BE44(), !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 360))(v7)))
  {
    result = 0;
    *(_BYTE *)(a1 + 1201) = 0;
  }
  else
  {
    result = 1;
    *(_BYTE *)(a1 + 1201) = 1;
  }
  return result;
}

BOOL sub_1000468F8(_BYTE *a1)
{
  return !a1[197] && !a1[198] && !a1[199] && a1[204] == 0;
}

uint64_t sub_100046928(uint64_t a1, unsigned __int16 a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;

  if ((*(_WORD *)(a1 + 378) & a2 & 0x7FLL) != 0 && *(_BYTE *)(a1 + 272) && *(_DWORD *)(a1 + 276) == 1)
  {
    v3 = 4;
  }
  else if (*(_BYTE *)(a1 + 280) && *(_BYTE *)(a1 + 272))
  {
    if (((*(_DWORD *)(a1 + 276) == 1) & a3) != 0)
      v3 = 4;
    else
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  if (*(_BYTE *)(a1 + 197) || *(_BYTE *)(a1 + 198) || *(_BYTE *)(a1 + 200))
    v4 = 1;
  else
    v4 = *(unsigned __int8 *)(a1 + 204);
  if (*(_BYTE *)(a1 + 272))
    v5 = 2 * (*(_DWORD *)(a1 + 276) == 1);
  else
    v5 = 0;
  v6 = sub_1004BAAAC(a1);
  v7 = 8;
  if (!v6)
    v7 = 0;
  return v4 | v3 | v5 | v7;
}

id sub_100046A04(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  int v14;
  id v15;
  int v16;
  unsigned __int8 v17;
  void *v18;
  uint64_t v19;
  NSData *v20;
  void *v21;
  uint64_t v22;
  NSData *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  int v35;
  id v39;
  uint64_t v40;
  int v41;
  int v42;
  id v43;
  unsigned int v44;

  v4 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(v5 + 64);
  v6 = *(_QWORD *)(v5 + 72);
  v39 = (id)v4;
  v40 = v6;
  while (v7 != v6)
  {
    v8 = *(unsigned __int8 *)(v7 + 48);
    v44 = *(unsigned __int8 *)(v7 + 8);
    v9 = *(unsigned __int8 *)(v7 + 49);
    v10 = *(unsigned __int8 *)(v7 + 50);
    v11 = *(unsigned __int8 *)(v7 + 51);
    v12 = *(unsigned __int8 *)(v7 + 52);
    v13 = *(id *)(v7 + 56);
    if (*(_BYTE *)(v7 + 68))
    {
      v41 = v9;
      v14 = *(unsigned __int8 *)(v7 + 65);
      v43 = v13;
      v15 = objc_msgSend(v13, "count");
      v42 = v14;
      v16 = a2;
      if (!v15)
        v16 = 1;
      if (v16)
        v17 = 2;
      else
        v17 = 3;
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      v19 = sub_10003EB18(v7 + 16);
      v20 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v19, sub_10003F8C4(v7 + 16));
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v21, CFSTR("data"));

      v22 = sub_10003EB18(v7 + 32);
      v23 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v22, sub_10003F8C4(v7 + 32));
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v24, CFSTR("mask"));

      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v8));
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v25, CFSTR("rssi"));

      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v44));
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v26, CFSTR("puckType"));

      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v17));
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v27, CFSTR("matchAllDevices"));

      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 0));
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v28, CFSTR("address"));

      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v10));
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v29, CFSTR("bypassFilterDuplicate"));

      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v11));
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v30, CFSTR("targetCore"));

      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v12));
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v31, CFSTR("rssithresholdOrder"));

      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v42 != 0));
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v32, CFSTR("shouldConsolidateRule"));

      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v7 + 66)));
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v33, CFSTR("report127dBm"));

      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v7 + 67)));
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v34, CFSTR("report27dBm"));

      objc_msgSend(v39, "addObject:", v18);
      v35 = 1 << v44;
      if (!v41)
        v35 = 0;
      *a3 |= v35;

      v13 = v43;
    }

    v7 += 96;
    v6 = v40;
  }
  return v39;
}

void sub_100046DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_100046E20(uint64_t a1, int a2, int a3)
{
  BOOL v4;

  if (a2 == 48 && a3 == 48)
    return 0;
  if (a2 == 64 && a3 == 48)
    return 1;
  if (a2 == 96 && a3 == 48)
    return 2;
  if (a2 == 144 && a3 == 48)
    return 3;
  if (a2 == 480 && a3 == 48)
    return 4;
  if (a3 == 48 && (a2 & 0xFFFE) == 0x608)
    return 5;
  if (a3)
    v4 = 0;
  else
    v4 = a2 == 4800;
  if (v4)
    return 6;
  else
    return 7;
}

uint64_t sub_100046ECC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  *(_WORD *)(a2 + 8) = a3;
  *(_WORD *)(a2 + 12) = WORD1(a3);
  *(_WORD *)(a2 + 10) = WORD2(a3);
  *(_BYTE *)(a2 + 14) = BYTE6(a3) & 1;
  if (*(_BYTE *)(result + 2244))
  {
    v6 = sub_10003BE44();
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 672))(v6);
    if ((_DWORD)result)
    {
      *(_BYTE *)(a2 + 18) = a4 & 1;
      *(_WORD *)(a2 + 20) = WORD1(a4);
      *(_WORD *)(a2 + 22) = WORD2(a4);
    }
  }
  return result;
}

uint64_t sub_100046F3C()
{
  if (qword_100992190 != -1)
    dispatch_once(&qword_100992190, &stru_10092BB50);
  return byte_100992188;
}

void sub_100046F7C(uint64_t a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  id v9;

  v9 = a2;
  v3 = *(_QWORD **)(a1 + 224);
  v4 = (_QWORD *)(a1 + 232);
  if (v3 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v5 = v3[5];
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5))
        sub_100047040(v5, v9);
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }

}

void sub_100047020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100047038()
{
  return 0;
}

void sub_100047040(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (*(_BYTE *)(a1 + 381) && *(_QWORD *)(a1 + 120))
    sub_10005DC70((_QWORD *)a1, 134, v3);

}

void sub_100047090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1000470A4()
{
  return 1;
}

void sub_1000470AC(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (uint64_t *)*a1;
  v4 = (uint64_t *)a1[1];
  v6 = a2[1];
  if (v4 != (uint64_t *)*a1)
  {
    do
    {
      v6 -= 96;
      v4 -= 12;
      sub_1000B5A98((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void **sub_100047148(void **a1)
{
  sub_1000B5BB4(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_100047178(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 98) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_1000471E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100047200()
{
  return sub_10004721C();
}

uint64_t sub_10004721C()
{
  uint64_t v0;
  NSObject *v1;

  if (off_100985570)
  {
    v0 = off_100985570();
    if (!(_DWORD)v0)
      return v0;
  }
  else
  {
    v0 = 3601;
  }
  if (sub_10005549C())
  {
    sub_100054530("VSC failed %!", v0);
    v1 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  return v0;
}

uint64_t sub_1000472A4(__int16 a1, char a2, char a3, uint64_t (*a4)())
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  result = sub_10004BC7C(&v16);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v17))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6520, "OI_STATUS _BCM_AdvBufMatchControl(uint16_t, uint8_t, uint8_t, BT_VSC_ADVBUF_MATCH_CONTROL_CB)");
    }
    else
    {
      v12 = WORD2(v17);
      if (WORD1(v17) > WORD2(v17) && BYTE6(v17) == 2)
      {
        ++WORD2(v17);
        *(_BYTE *)(v16 + v12) = 7;
        if (HIBYTE(v17))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6521, "OI_STATUS _BCM_AdvBufMatchControl(uint16_t, uint8_t, uint8_t, BT_VSC_ADVBUF_MATCH_CONTROL_CB)");
        }
        else if (WORD1(v17) - WORD2(v17) > 1 && BYTE6(v17) == 2)
        {
          *(_WORD *)(v16 + WORD2(v17)) = a1;
          v13 = WORD2(v17);
          v14 = WORD2(v17) + 2;
          WORD2(v17) += 2;
          if (HIBYTE(v17))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6522, "OI_STATUS _BCM_AdvBufMatchControl(uint16_t, uint8_t, uint8_t, BT_VSC_ADVBUF_MATCH_CONTROL_CB)");
          }
          else if (WORD1(v17) > v14 && BYTE6(v17) == 2)
          {
            WORD2(v17) = v13 + 3;
            *(_BYTE *)(v16 + v14) = a2;
            if (HIBYTE(v17))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6523, "OI_STATUS _BCM_AdvBufMatchControl(uint16_t, uint8_t, uint8_t, BT_VSC_ADVBUF_MATCH_CONTROL_CB)");
            }
            else
            {
              v15 = WORD2(v17);
              if (WORD1(v17) > WORD2(v17) && BYTE6(v17) == 2)
              {
                ++WORD2(v17);
                *(_BYTE *)(v16 + v15) = a3;
                return sub_10004C8A0(556, v16, BYTE4(v17), a4, (uint64_t)sub_1000561A8, v9, v10, v11);
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
  return result;
}

uint64_t sub_100047508(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t next_slot;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  _QWORD v56[2];
  kevent eventlist;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char __dst[3];
  int v63;

  v63 = 0;
  if (a1 && *a1 && *((_DWORD *)a1 + 3) != -1)
  {
    v55 = (uint64_t)a1 + 17;
    v9 = strncpy(__dst, (const char *)a1 + 17, 3uLL);
    __strcat_chk(v9, "_rx", 7);
    sub_100253320((uint64_t)"launching %s\n", v10, v11, v12, v13, v14, v15, v16, (uint64_t)__dst);
    sub_10011EC38(__dst);
    v17 = *a1;
    v18 = *((_DWORD *)a1 + 3);
    v19 = os_channel_ring_id(*a1, 2);
    v20 = os_channel_rx_ring(v17, v19);
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    memset(&eventlist, 0, sizeof(eventlist));
    if (kevent(v18, 0, 0, &eventlist, 1, 0) == -1 || (unsigned __int16)eventlist.filter != 0xFFFF)
    {
LABEL_24:
      sub_100253320((uint64_t)"%s: kevent error on sw_kq_read\n", v21, v22, v23, v24, v25, v26, v27, (uint64_t)"skywalk_read_loop");
    }
    else
    {
      while (1)
      {
        if ((byte_10097BB98 & 1) == 0)
          sub_1000477B8();
        if (!*a1)
          break;
        v28 = os_channel_available_slot_count(v20);
        next_slot = os_channel_get_next_slot(v20, 0, &v58);
        if (v28 && next_slot)
        {
          v30 = 1;
          do
          {
            v31 = next_slot;
            if (!byte_10097BB99)
            {
              if ((byte_10097BB98 & 1) != 0)
              {
                sub_10004A360();
              }
              else
              {
                v56[0] = 0;
                v56[1] = 0;
                v32 = sub_1000478F0(*((unsigned __int8 *)a1 + 16), (unsigned __int8 *)v59, WORD1(v58), (uint64_t)v56);
                sub_100047AB0(*((unsigned __int8 *)a1 + 16), (unsigned __int8 *)v59, v32, (uint64_t)v56);
              }
            }
            next_slot = os_channel_get_next_slot(v20, v31, &v58);
            if (v30 >= v28)
              break;
            ++v30;
          }
          while (next_slot);
          if (os_channel_advance_slot(v20, v31))
          {
            sub_100253320((uint64_t)"%s: failed to advance slot - %d\n", v33, v34, v35, v36, v37, v38, v39, (uint64_t)"skywalk_read_loop");
            break;
          }
          if (os_channel_sync(v17, 1))
          {
            sub_100253320((uint64_t)"%s: os_channel_sync rx failed - %d\n", v40, v41, v42, v43, v44, v45, v46, (uint64_t)"skywalk_read_loop");
            break;
          }
        }
        if ((byte_10097BB98 & 1) == 0)
          sub_1000478A0();
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        memset(&eventlist, 0, sizeof(eventlist));
        if (kevent(v18, 0, 0, &eventlist, 1, 0) == -1 || (unsigned __int16)eventlist.filter != 0xFFFF)
          goto LABEL_24;
      }
      sub_1000478A0();
    }
    sub_100253320((uint64_t)"exiting skywalk_read_loop for %s\n", v47, v48, v49, v50, v51, v52, v53, v55);
  }
  else
  {
    sub_100253320((uint64_t)"%s: invalid input parameter\n", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"skywalk_read_loop");
  }
  return 0;
}

void sub_1000477B8()
{
  _opaque_pthread_t *v0;
  const char *label;
  unsigned int v2;
  NSObject *v3;
  dispatch_time_t v4;
  NSObject *v5;

  pthread_mutex_lock(&stru_10097FA88);
  v0 = pthread_self();
  pthread_getname_np(v0, &byte_10097FAC8, 0x40uLL);
  if (!byte_10097FAC8)
  {
    label = dispatch_queue_get_label(0);
    __strlcpy_chk(&byte_10097FAC8, label, 64, 64);
    strtok(&byte_10097FAC8, "-");
  }
  do
    v2 = __ldxr((unsigned int *)&dword_10097FBD4);
  while (__stxr(v2 + 1, (unsigned int *)&dword_10097FBD4));
  if (!v2)
  {
    v3 = qword_10097FBD8;
    v4 = dispatch_time(0, 10000000000);
    dispatch_source_set_timer(v3, v4, 0x2540BE400uLL, 0x3B9ACA00uLL);
    v5 = qword_10097FBD8;
    *(_QWORD *)dispatch_get_context((dispatch_object_t)qword_10097FBD8) = 0;
    dispatch_resume(v5);
  }
}

uint64_t sub_1000478A0()
{
  _BOOL4 v0;
  uint64_t result;

  v0 = sub_1000478DC();
  result = pthread_mutex_unlock(&stru_10097FA88);
  if (v0)
    return sub_1001F28DC();
  return result;
}

BOOL sub_1000478DC()
{
  return dword_100984D7C == 2;
}

uint64_t sub_1000478F0(int a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  signed __int8 v18;
  uint64_t v19;

  *(_QWORD *)a4 = mach_continuous_time();
  *(_BYTE *)(a4 + 8) = 0;
  v8 = sub_100047A1C(a1, a2, a3);
  if (a3 > v8)
  {
    v16 = v8;
    if ((_DWORD)v8 + 8 == (_DWORD)a3)
    {
      v17 = &a2[v8];
      v18 = v17[2];
      if (v18 < 0)
      {
        *(_BYTE *)(a4 + 8) = 1;
        if ((v18 & 0x40) == 0)
          goto LABEL_5;
      }
      else if ((v17[2] & 0x40) == 0)
      {
LABEL_5:
        if ((v18 & 0x80) == 0 && (v18 & 0x60) == 0x20)
        {
          *(_BYTE *)(a4 + 9) = 1;
          *(_DWORD *)(a4 + 12) = *(_DWORD *)&a2[(unsigned __int16)(v8 + 3)];
        }
        goto LABEL_11;
      }
      v19 = mach_continuous_time();
      *(_QWORD *)a4 = v19
                    - MillisecondsToUpTicks((v17[6] << 24) | ((unint64_t)v17[5] << 16) | ((unint64_t)v17[4] << 8) | v17[3]);
LABEL_11:
      sub_10004A360();
      return v16;
    }
    sub_100253320((uint64_t)"%s: invalid packet length received\n", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"pcie_transport_decode_hci_packet_attrs_from_footer");
  }
  return a3;
}

uint64_t sub_100047A1C(int a1, unsigned __int8 *a2, unsigned int a3)
{
  __int16 v3;

  switch(a1)
  {
    case 2:
    case 6:
      goto LABEL_5;
    case 3:
      if (a3 >= 3)
        LOWORD(a3) = a2[2] + 3;
      return (unsigned __int16)a3;
    case 4:
      if (a3 >= 2)
        LOWORD(a3) = a2[1] + 2;
      return (unsigned __int16)a3;
    case 5:
      if (a3 < 4)
        return (unsigned __int16)a3;
      v3 = a2[2] | ((a2[3] & 0xF) << 8);
      goto LABEL_11;
    case 7:
      if (a3)
        LOWORD(a3) = *a2 + 1;
      return (unsigned __int16)a3;
    default:
      if (a1 != 243)
        return (unsigned __int16)a3;
LABEL_5:
      if (a3 < 4)
        return (unsigned __int16)a3;
      v3 = *((_WORD *)a2 + 1);
LABEL_11:
      LOWORD(a3) = v3 + 4;
      return (unsigned __int16)a3;
  }
}

void sub_100047AB0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, NSObject *, unsigned __int8 *, uint64_t);
  uint64_t v18;
  NSObject *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  char __str[16];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;

  v5 = a3;
  if (DWORD2(xmmword_1009991F8))
  {
    v4 = a4;
    byte_100984730 = a1;
    if ((_DWORD)a3)
    {
      if (a3 >= 4)
        a3 = 4;
      else
        a3 = a3;
      __memmove_chk(&unk_100984731, a2, a3, 4);
    }
    sub_10004A360();
    if ((sub_100048064() & 1) == 0)
    {
      switch((int)a1)
      {
        case 1:
          if (sub_10005549C())
          {
            sub_100054530("OI_HCIIfc_DataReceived, invalid dataType %d, NumBytes %d", 1, (_DWORD)v5);
            v9 = sub_1000544A0(0x2Eu);
            if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
              goto LABEL_26;
          }
          goto LABEL_27;
        case 2:
        case 6:
          ++dword_100984724;
          if (dword_100998FC8 == 2)
          {
            sub_10019FB98((unsigned __int16 *)a2, v5, a1, v4);
            return;
          }
          if (sub_10005549C())
          {
            sub_100054530("OI_HCIIfc_DataReceived, HCI not initialized - discarding ACL packet State %d, Numbytes %d", dword_100998FC8, (_DWORD)v5);
            v29 = sub_1000544A0(0x2Eu);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
              goto LABEL_43;
          }
          return;
        case 3:
          goto LABEL_19;
        case 4:
          if (*(_BYTE *)(v4 + 8))
          {
            v40 = 0;
            v38 = 0u;
            v39 = 0u;
            v36 = 0u;
            v37 = 0u;
            *(_OWORD *)__str = 0u;
            v35 = 0u;
            snprintf(__str, 0x64uLL, "BT Controller HCI_EVENT wakeupCause (eventCode=0x%x paramLen=%d)", *a2, a2[1]);
            sub_100253320((uint64_t)"OI_HCIIfc_DataReceived: %s", v10, v11, v12, v13, v14, v15, v16, (uint64_t)__str);
            sub_10011D280(__str);
          }
          if (v5 < 3)
          {
            if (sub_10005549C())
            {
              sub_100054530("Short event, numBytes = %d", (_DWORD)v5);
              v31 = sub_1000544A0(0x2Eu);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                sub_1006CE7A4();
            }
          }
          else
          {
            ++dword_10098471C;
            v17 = (void (*)(uint64_t, uint64_t, NSObject *, unsigned __int8 *, uint64_t))off_100999028;
            v18 = *a2;
            if (off_100999028)
            {
              v19 = a2[1];
              v20 = a2 + 2;
              v21 = 4;
              goto LABEL_40;
            }
            if ((_DWORD)v18 == 19)
            {
              sub_1001A1340((uint64_t)a2, v5, v4);
LABEL_61:
              sub_100049AD8();
              return;
            }
            if (!off_100999050 || off_100999050(a2, v5, v4))
            {
              sub_100048238(a2, (uint64_t)v5, v4);
              goto LABEL_61;
            }
          }
          return;
        case 5:
          goto LABEL_21;
        case 7:
          if (*(_BYTE *)(v4 + 8))
          {
            v40 = 0;
            v38 = 0u;
            v39 = 0u;
            v36 = 0u;
            v37 = 0u;
            *(_OWORD *)__str = 0u;
            v35 = 0u;
            snprintf(__str, 0x64uLL, "BT Controller HCI_LMP wakeupCause (len=0x%x)", *a2);
            sub_100253320((uint64_t)"OI_HCIIfc_DataReceived: %s", v22, v23, v24, v25, v26, v27, v28, (uint64_t)__str);
            sub_10011D280(__str);
          }
          if (dword_100998FC8 == 2)
          {
            v18 = *a2;
            if ((_DWORD)v5 - 1 == (_DWORD)v18)
            {
              v17 = (void (*)(uint64_t, uint64_t, NSObject *, unsigned __int8 *, uint64_t))off_100999028;
              if (off_100999028)
              {
                v20 = a2 + 1;
                v21 = 7;
                v19 = v5;
LABEL_40:
                v17(v21, v18, v19, v20, v4);
              }
              return;
            }
            if (!sub_10005549C())
              return;
            sub_100054530("OI_HCIIfc_DataReceived, Got incorrect packet on LMP channel: expected %d gotfirst 3 bytes %d %d %d", (_DWORD)v5, *a2, a2[1], a2[2]);
            v33 = sub_1000544A0(0x2Eu);
            if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
              return;
          }
          else
          {
            if (!sub_10005549C())
              return;
            sub_100054530("OI_HCIIfc_DataReceived, HCI not initialized - discarding ACI packet State %d, Numbytes %d", dword_100998FC8, (_DWORD)v5);
            v32 = sub_1000544A0(0x2Eu);
            if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
              return;
          }
          sub_1006CEEC0();
          return;
        default:
          goto LABEL_18;
      }
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("OI_HCIIfc_DataReceived, HCI not initialized - discarding data Type %d, NumBytes %d", a1, (_DWORD)v5);
      v5 = sub_1000544A0(0x2Eu);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    if ((_DWORD)a1 == 4 && a2 && *a2 == 16)
    {
      sub_100112D60(650);
LABEL_18:
      if ((_DWORD)a1 == 243)
      {
LABEL_19:
        ++dword_10098472C;
        if (dword_100998FC8 == 2)
        {
          sub_10019FFC4((unsigned __int16 *)a2, (uint64_t)v5, v4);
        }
        else if (sub_10005549C())
        {
          sub_100054530("OI_HCIIfc_DataReceived, HCI not initialized - discarding SCO packet State %d, Numbytes %d", dword_100998FC8, (_DWORD)v5);
          v30 = sub_1000544A0(0x2Eu);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
LABEL_43:
            sub_1006CEEC0();
        }
      }
      else
      {
LABEL_21:
        if (sub_10005549C())
        {
          sub_100054530("OI_HCIIfc_DataReceived, unknown dataType %d, state %d", a1, dword_100998FC8);
          v8 = sub_1000544A0(0x2Eu);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
LABEL_26:
            sub_1006CEEC0();
        }
LABEL_27:
        sub_100253460();
      }
    }
  }
}

uint64_t sub_100048064()
{
  return byte_100983FFA;
}

void sub_100048070(const void *a1, signed int a2, signed int a3, unsigned int a4)
{
  signed int v7;
  int v8;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  void *v14;
  int v15;
  unsigned int v16;
  __int16 v17;
  __int16 v18;
  _QWORD block[6];
  __int16 v20;
  __int16 v21;

  if (a3)
    v7 = a3;
  else
    v7 = a2;
  v8 = sub_10011CDE8();
  if (dword_100978B00 == -1)
    v9 = v8;
  else
    v9 = 1;
  v10 = qword_1009815C0;
  if ((v9 & 1) != 0 || qword_1009815C0)
  {
    v11 = malloc_type_malloc((v7 + 13), 0xA8085C5EuLL);
    if (v11)
    {
      v12 = v11;
      v13 = malloc_type_malloc((a2 + 13), 0xCAF3830FuLL);
      if (v13)
      {
        v14 = v13;
        v15 = sub_10011C9E4(v13, (unsigned __int16)(a2 + 13), a1, a2, a4);
        v16 = sub_10011C9E4(v12, (unsigned __int16)(v7 + 13), a1, v7, a4);
        if (!(v15 | v16))
          goto LABEL_20;
        v17 = v16;
        if (v10)
        {
          v18 = word_1009815C8;
          if ((unsigned __int16)word_1009815C8 + v16 <= 0x800)
          {
            memcpy((void *)(qword_1009815C0 + (unsigned __int16)word_1009815C8), v12, v16);
            word_1009815C8 = v18 + v17;
          }
        }
        if (v9)
        {
          if (qword_100981638 != -1)
            dispatch_once(&qword_100981638, &stru_10091AF10);
          block[0] = _NSConcreteStackBlock;
          block[1] = 0x40000000;
          block[2] = sub_10011DF44;
          block[3] = &unk_10091AFD0;
          block[4] = v12;
          block[5] = v14;
          v20 = v17;
          v21 = v15;
          dispatch_async((dispatch_queue_t)qword_100981630, block);
        }
        else
        {
LABEL_20:
          free(v12);
          free(v14);
        }
      }
      else
      {
        free(v12);
      }
    }
  }
}

void sub_100048238(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  NSObject *v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  __n128 v21;
  NSObject *v22;
  int v23;
  unsigned int v24;
  NSObject *v25;
  NSObject *v26;
  int v27;
  int v28;
  _BYTE *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  NSObject *v44;
  uint64_t v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  NSObject *v58;
  char *v59;
  int v60;
  int v61;
  unsigned int v62;
  NSObject *v63;
  NSObject *v64;
  int v65;
  unsigned __int8 *v66;
  NSObject *v67;
  uint64_t v68;
  int v69;
  NSObject *v70;
  NSObject *v71;
  NSObject *v72;
  NSObject *v73;
  char *v74;
  uint64_t v75;
  __int128 *v76;
  __int128 *v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  NSObject *v87;
  unsigned int v88;
  uint64_t v89;
  NSObject *v90;
  int v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  int v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  NSObject *v110;
  NSObject *v111;
  NSObject *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  NSObject *v119;
  __int128 *v120;
  NSObject *v121;
  int v122;
  const char *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  char *v126;
  int v127;
  int v128;
  _OWORD v129[4];
  uint64_t v130;
  uint8_t buf[16];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint8_t v152[16];
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;

  v124 = 0;
  v125 = 0;
  if (a2 > 1)
  {
    if (!a1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c");
    v124 = a1;
    LOWORD(v125) = a2;
    BYTE6(v125) = 1;
    WORD1(v125) = a2;
    v7 = *a1;
    WORD2(v125) = 2;
    v8 = a1[1];
    v9 = sub_1000499C8(v7);
    if (!v9)
    {
      if (sub_10005549C())
      {
        sub_100054530("%! (%d)", 607, v7);
        v18 = sub_1000544A0(0x2Eu);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      v16 = (void (*)(uint64_t, uint64_t))off_100984748;
      if (off_100984748)
      {
        v17 = 607;
        goto LABEL_18;
      }
      sub_100112D60(607);
      goto LABEL_277;
    }
    v14 = v9;
    if ((int)a2 - 2 < (int)v8)
    {
      if (sub_10005549C())
      {
        sub_100054530("event data underrun, paramTotalLen: %d, bytesAvail: %d, eventId: %d", v8, a2 - 2, *v14);
        v15 = sub_1000544A0(0x2Eu);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      v16 = (void (*)(uint64_t, uint64_t))off_100984748;
      if (off_100984748)
      {
        v17 = 651;
LABEL_18:
        v16(v17, v7);
        return;
      }
LABEL_277:
      sub_100112D60(651);
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c", 1886, "OI_STATUS _handle_ReturnLinkKeys(OI_BYTE_STREAM *, const HCI_EVENT_DESCRIPTOR *, uint8_t, _Bool)");
      goto LABEL_278;
    }
    if (dword_100998FC8 <= 6)
    {
      if (((1 << dword_100998FC8) & 0x33) != 0)
      {
        if ((v7 > 0x15 || ((1 << v7) & 0x20C000) == 0) && (_DWORD)v7 != 255)
        {
          if (sub_10005549C())
          {
            sub_100054530("HCI Device initialization in progress, ignoring event %@", a1, a2);
            v19 = sub_1000544A0(0x2Eu);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              goto LABEL_4;
          }
          return;
        }
      }
      else if (((1 << dword_100998FC8) & 0x48) != 0)
      {
        if (sub_10005549C())
        {
          sub_100054530("HCI device initialation/reset failed, ignoring event %@", a1, a2);
          v20 = sub_1000544A0(0x2Eu);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            goto LABEL_4;
        }
        return;
      }
    }
    if (!v9[1])
    {
      LOWORD(v126) = 0;
      WORD2(v129[0]) = 0;
      LODWORD(v129[0]) = 0;
      *(_QWORD *)&v135 = 0;
      v133 = 0u;
      v134 = 0u;
      *(_OWORD *)buf = 0u;
      v132 = 0u;
      if (*(_BYTE *)(a3 + 8))
      {
        if (sub_10005549C())
        {
          sub_100054530("_genericEventHandler: wakeupCause HCI_EVENT Packet from BT Controller (id=0x%02x paramLen=%d)\n", *v14, v8);
          v26 = sub_1000544A0(0x2Eu);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v152 = 136446210;
            *(_QWORD *)&v152[4] = sub_100054494();
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, " %{public}s", v152, 0xCu);
          }
        }
      }
      v27 = sub_10019E240((uint64_t)buf, (uint64_t)v14, (uint64_t *)&v124, v8, &v126, (uint64_t)v129);
      if (v27)
      {
        v28 = v27;
        sub_10019EB18(v14);
        v29 = (_BYTE *)*((_QWORD *)v14 + 1);
        if (!v29 || *v29 != 115)
          return;
        *(_DWORD *)buf = v28;
      }
      else
      {
        sub_10019EBAC(v14, (unsigned __int16)v126, (uint64_t)v129, 1);
      }
      v32 = *v14;
      v33 = *(unsigned __int8 *)(a3 + 8);
      v34 = *(_QWORD *)a3;
      v35 = (uint64_t *)buf;
LABEL_180:
      sub_10019D5A8(v32, v35, v33, v34, v10, v11, v12, v13, v21);
      return;
    }
    v130 = 0;
    v21 = 0uLL;
    memset(v129, 0, sizeof(v129));
    if (*(_BYTE *)(a3 + 8))
    {
      if (sub_10005549C())
      {
        sub_100054530("_specialEventHandler: wakeupCause HCI_EVENT Packet from BT Controller (id=0x%02x paramLen=%d)\n", *v14, v8);
        v22 = sub_1000544A0(0x2Eu);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = sub_100054494();
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
    }
    v23 = *(unsigned __int8 *)(a3 + 8);
    v24 = *v14;
    if (v24 > 0x21)
    {
      if (*v14 > 0x3Du)
      {
        if (v24 == 62)
        {
          *(_DWORD *)buf = 0;
          if (sub_10004AF24(62, buf))
          {
            v55 = sub_10019F090(*(int *)buf);
            if ((_DWORD)v55)
            {
              v56 = v55;
              if (sub_10005549C())
              {
                sub_100054530("%! (%d)", v56, 0);
                v57 = sub_1000544A0(0x2Eu);
                if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
                  sub_1006CE7A4();
              }
            }
          }
          sub_10004AF78((uint64_t)&v124, (uint64_t)v14, v8, v23 != 0);
          return;
        }
        if (v24 != 254)
        {
          if (v24 == 255)
            sub_10018666C((uint64_t)v124, (unsigned __int16)v125, v23 != 0);
          return;
        }
LABEL_68:
        v33 = v23 != 0;
        *(_QWORD *)&v129[0] = &v124[WORD2(v125)];
        DWORD2(v129[0]) = v8;
        v35 = (uint64_t *)v129;
        goto LABEL_179;
      }
      switch(v24)
      {
        case '"':
          v30 = v8;
          v31 = 1;
          break;
        case ',':
          goto LABEL_69;
        case '/':
          v30 = v8;
          v31 = 2;
          break;
        default:
          return;
      }
    }
    else
    {
      if (*v14 > 0xDu)
      {
        switch(*v14)
        {
          case 0xEu:
            *(_OWORD *)v152 = 0u;
            v153 = 0u;
            if (v8 <= 2)
            {
              if (sub_10005549C())
              {
                sub_100054530("bad parm length: expected at least 3, got %d; eventId %d", v8, *v14);
                v25 = sub_1000544A0(0x2Eu);
                if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
LABEL_208:
                  sub_1006CE7A4();
              }
LABEL_273:
              if (!byte_100999059)
                return;
              goto LABEL_274;
            }
            if (WORD1(v125) - WORD2(v125) < (int)v8)
            {
              if (sub_10005549C())
              {
                sub_100054530("%! (%d)", 605, *v14);
                v78 = sub_1000544A0(0x2Eu);
                if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
                  goto LABEL_208;
              }
              goto LABEL_273;
            }
            v79 = WORD2(v125);
            if (WORD1(v125) <= WORD2(v125) || BYTE6(v125) != 1)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c");
            ++WORD2(v125);
            byte_100999059 = v124[v79];
            if (WORD1(v125) - ((int)v79 + 1) <= 1)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c");
            v80 = *(unsigned __int16 *)&v124[v79 + 1];
            WORD2(v125) = v79 + 3;
            if (!(_DWORD)v80)
              goto LABEL_273;
            if (WORD1(v125) <= (unsigned __int16)(v79 + 3))
            {
              if (sub_10005549C())
              {
                sub_100054530("handle_CommandComplete bad parm length: no status byte");
                v87 = sub_1000544A0(0x2Eu);
                if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
                  goto LABEL_208;
              }
              goto LABEL_273;
            }
            WORD2(v125) = v79 + 4;
            v81 = sub_100049F2C(v124[(unsigned __int16)(v79 + 3)]);
            if (sub_100049F50())
              sub_1001867E8(v80, (_DWORD)v81 == 712);
            if (sub_100049F58((uint64_t)&v124, v80, v152))
            {
              if (*(unsigned __int16 *)&v152[4] == 1026)
              {
                *(_OWORD *)buf = 0u;
                v132 = 0u;
                if ((sub_10019F024(1, (uint64_t)&v124, 1025, buf) & 1) == 0)
                  sub_10019F024(15, (uint64_t)&v124, 1025, buf);
              }
              ((void (*)(uint64_t, _QWORD, unsigned __int8 **))v153)(v81, *((_QWORD *)&v153 + 1), &v124);
              goto LABEL_273;
            }
            if (sub_10019F010((uint64_t)&v124, v80, v152))
            {
              if ((_DWORD)v81)
                v105 = v81;
              else
                v105 = 769;
              sub_10019D010((uint64_t)v152, v105);
              goto LABEL_273;
            }
            if ((~(_DWORD)v80 & 0xFC00) == 0)
            {
              sub_10018666C((uint64_t)v124, (unsigned __int16)v125, v23 != 0);
              goto LABEL_273;
            }
            if (sub_10005549C())
            {
              sub_100054530("Command Complete, orphan event, opcode: %x, status %!\n", v80, v81);
              v112 = sub_1000544A0(0x2Eu);
              if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
                sub_1006CE7A4();
            }
            if (sub_100049F50())
            {
              v145 = 0u;
              v146 = 0u;
              v143 = 0u;
              v144 = 0u;
              v141 = 0u;
              v142 = 0u;
              v139 = 0u;
              v140 = 0u;
              v137 = 0u;
              v138 = 0u;
              v135 = 0u;
              v136 = 0u;
              v133 = 0u;
              v134 = 0u;
              *(_OWORD *)buf = 0u;
              v132 = 0u;
              if (sub_10002825C())
              {
                sub_1002532F8((uint64_t)buf, 256, (uint64_t)"Bluetooth error - simulated { build=internal, reason=%d, description=\"%!\", context=\"%d\" }", v113, v114, v115, v116, v117, 635);
                sub_10011D44C((const char *)buf);
                if (!sub_10005549C())
                  goto LABEL_273;
                sub_100054530("Bluetooth error - simulated { build=internal, reason=%d, description=\"%!\", context=\"%d\" }", 635, 635, *v14);
                v118 = sub_1000544A0(0x2Eu);
                if (!os_log_type_enabled(v118, OS_LOG_TYPE_FAULT))
                  goto LABEL_273;
              }
              else
              {
                sub_1002532F8((uint64_t)buf, 256, (uint64_t)"Bluetooth error - simulated { build=release, reason=%d, context=\"%d\" }", v113, v114, v115, v116, v117, 635);
                sub_10011D44C((const char *)buf);
                if (!sub_10005549C())
                  goto LABEL_273;
                sub_100054530("Bluetooth error - simulated { build=release, reason=%d, context=\"%d\" }", 635, *v14);
                v119 = sub_1000544A0(0x2Eu);
                if (!os_log_type_enabled(v119, OS_LOG_TYPE_FAULT))
                  goto LABEL_273;
              }
              sub_1006D2EC4();
              goto LABEL_273;
            }
            if (off_100984748)
            {
              off_100984748(635, v80);
              goto LABEL_273;
            }
            v122 = v80;
            goto LABEL_292;
          case 0xFu:
            *(_OWORD *)buf = 0u;
            v132 = 0u;
            if ((_DWORD)v8 != 4)
            {
              if (sub_10005549C())
              {
                sub_100054530("handle_CommandStatus bad parm length: expected 4, got %d", v8);
                v63 = sub_1000544A0(0x2Eu);
                if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                  sub_1006CE7A4();
              }
              goto LABEL_140;
            }
            v48 = WORD2(v125);
            if (WORD1(v125) <= WORD2(v125) || BYTE6(v125) != 1)
              goto LABEL_285;
            ++WORD2(v125);
            v49 = sub_100049F2C(v124[v48]);
            v50 = WORD2(v125);
            if (WORD1(v125) <= WORD2(v125) || BYTE6(v125) != 1)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c");
            ++WORD2(v125);
            byte_100999059 = v124[v50];
            if (WORD1(v125) - ((int)v50 + 1) <= 1)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c");
            v51 = v49;
            v52 = *(unsigned __int16 *)&v124[v50 + 1];
            WORD2(v125) = v50 + 3;
            if (sub_100049F50())
              sub_1001867E8(v52, (_DWORD)v51 == 712);
            if (!(_DWORD)v52)
              goto LABEL_140;
            v53 = v52 & 0xFC00;
            if (dword_100998FC8 != 2 && !(_DWORD)v51 && v53 != 64512)
            {
              if (!sub_10005549C())
                return;
              sub_100054530("HCI not initialized, ignoring event: %16@", v124, WORD1(v125));
              v54 = sub_1000544A0(0x2Eu);
              if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                return;
LABEL_167:
              sub_1006CE7A4();
              return;
            }
            if (sub_10019F010((uint64_t)&v124, v52, buf))
            {
              if ((_DWORD)v51)
              {
                sub_10019D010((uint64_t)buf, v51);
                goto LABEL_140;
              }
              v106 = sub_100052DE8(*(unsigned __int16 *)&buf[6]);
              if (v106)
              {
                if ((_DWORD)v52 != 8205 && (_DWORD)v52 != 8259 && (_DWORD)v52 != 8325)
                {
                  *(_WORD *)&buf[8] = *((_WORD *)v106 + 10);
                  v107 = sub_100053ADC((uint64_t)buf, 0);
                  if ((_DWORD)v107)
                  {
                    v108 = v107;
                    if (sub_10005549C())
                    {
                      sub_100054530("Unable to add opcode 0x%x to expected event queue with status %!", v52, v108);
                      v109 = sub_1000544A0(0x2Eu);
                      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
                        sub_1006CEEC0();
                    }
                    if (!off_100984748)
                    {
                      v122 = v52;
LABEL_292:
                      v123 = sub_1001D8754(v122);
                      sub_1001131F8(635, v123);
                    }
                    off_100984748(635, v52);
                  }
                }
                goto LABEL_140;
              }
              if (!sub_10005549C())
                goto LABEL_140;
              sub_100054530("%! (%d)", 620, v52);
              v111 = sub_1000544A0(0x2Eu);
              if (!os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
                goto LABEL_140;
            }
            else
            {
              if (sub_100049F58((uint64_t)&v124, v52, buf))
              {
                v88 = 769;
                if (v53 == 64512 && off_100984740)
                {
                  if (off_100984740(v51, v52, 255))
                    v88 = 0;
                  else
                    v88 = 769;
                }
                if ((_DWORD)v51)
                  v89 = v51;
                else
                  v89 = v88;
                ((void (*)(uint64_t, _QWORD, unsigned __int8 **))v132)(v89, *((_QWORD *)&v132 + 1), &v124);
                goto LABEL_140;
              }
              if (v53 == 64512)
              {
                sub_10018666C((uint64_t)v124, (unsigned __int16)v125, v23 != 0);
                goto LABEL_140;
              }
              if (!sub_10005549C()
                || (sub_100054530("Command Status, orphan event, opcode: %x, status %!", v52, v51),
                    v110 = sub_1000544A0(0x2Eu),
                    !os_log_type_enabled(v110, OS_LOG_TYPE_ERROR)))
              {
LABEL_140:
                if (!byte_100999059)
                  return;
LABEL_274:
                sub_10004AE90((uint64_t)sub_10004AE60, 0, 0);
                return;
              }
            }
            sub_1006CE7A4();
            goto LABEL_140;
          case 0x13u:
            if (sub_10005549C())
            {
              sub_100054530("Numcompleted packets should be handled by HCI flow");
              v44 = sub_1000544A0(0x2Eu);
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
                goto LABEL_167;
            }
            return;
          case 0x15u:
            *(_WORD *)&v152[4] = 0;
            *(_DWORD *)v152 = 0;
            memset(buf, 0, sizeof(buf));
            if ((_DWORD)v8)
            {
              v45 = WORD2(v125);
              if (WORD1(v125) <= WORD2(v125) || BYTE6(v125) != 1)
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c");
              ++WORD2(v125);
              v46 = v124[v45];
              if (((22 * v46) | 1) == (_DWORD)v8)
              {
                if (!v124[v45])
                  return;
                while (WORD1(v125) - WORD2(v125) > 5 && BYTE6(v125) == 1)
                {
                  sub_10004C878((uint64_t)v152, (uint64_t)&v124[WORD2(v125)], 6uLL);
                  v47 = WORD2(v125);
                  WORD2(v125) += 6;
                  if (WORD1(v125) - (unint64_t)WORD2(v125) <= 0xF)
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c");
                  *(_OWORD *)buf = *(_OWORD *)&v124[WORD2(v125)];
                  WORD2(v125) = v47 + 22;
                  nullsub_90(v152, buf);
                  if (!--v46)
                    return;
                }
LABEL_278:
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c");
              }
              if (!sub_10005549C())
                return;
              sub_100054530("handle_ReturnLinkKeys bad parm length: expected %d, got %d", (22 * v46) | 1, v8);
              v72 = sub_1000544A0(0x2Eu);
              if (!os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
                return;
            }
            else
            {
              if (!sub_10005549C())
                return;
              sub_100054530("handle_ReturnLinkKeys bad parm length: expected at least 1, got %d", 0);
              v64 = sub_1000544A0(0x2Eu);
              if (!os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
                return;
            }
            goto LABEL_167;
          case 0x19u:
            goto LABEL_68;
          default:
            return;
        }
      }
      if (v24 != 2)
      {
        if (v24 != 3)
        {
          if (v24 != 5)
            return;
          v36 = *(_QWORD *)a3;
          LOWORD(v126) = 0;
          *(_WORD *)&v152[4] = 0;
          *(_DWORD *)v152 = 0;
          *(_QWORD *)&v135 = 0;
          v133 = 0u;
          v134 = 0u;
          *(_OWORD *)buf = 0u;
          v132 = 0u;
          v37 = sub_10019E240((uint64_t)buf, (uint64_t)v14, (uint64_t *)&v124, v8, &v126, (uint64_t)v152);
          if (v37)
          {
            v38 = v37;
            sub_10019EB18(v14);
            *(_DWORD *)buf = v38;
          }
          else
          {
            v65 = (unsigned __int16)v126;
            sub_10019EBAC(v14, (unsigned __int16)v126, (uint64_t)v152, 1);
            v66 = sub_1000499C8(6u);
            sub_10019EBAC(v66, v65, (uint64_t)v152, 1);
            if (!(*(_DWORD *)buf | v132))
            {
              if (sub_10005549C())
              {
                sub_100054530("Status and Reason both SUCCESS for disconnect");
                v67 = sub_1000544A0(0x2Eu);
                if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
                  sub_1006CE7A4();
              }
              LODWORD(v132) = 105;
            }
          }
          v68 = *(_QWORD *)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            switch(*(_BYTE *)(*(_QWORD *)&buf[8] + 2))
            {
              case 0:
                *(_BYTE *)(*(_QWORD *)&buf[8] + 54) = 7;
                v69 = *(_DWORD *)(v68 + 148);
                break;
              case 1:
                v69 = 0;
                *(_BYTE *)(*(_QWORD *)&buf[8] + 56) = 1;
                break;
              case 4:
                goto LABEL_203;
              case 5:
                v69 = 0;
                *(_BYTE *)(*(_QWORD *)&buf[8] + 48) = 7;
                break;
              default:
                sub_100253460();
LABEL_203:
                *(_BYTE *)(v68 + 124) = 7;
                v69 = *(_DWORD *)(v68 + 204);
                break;
            }
            sub_1001A1B78(v68);
            sub_10019D5A8(5, (uint64_t *)buf, v23 != 0, v36, v82, v83, v84, v85, v86);
            if (!v69)
              sub_10019B934((unsigned __int16 *)v68);
            return;
          }
          if (!sub_10005549C())
            return;
          sub_100054530("Disconnect complete event for a connection we didn't know about %d\n", (unsigned __int16)v126);
          v70 = sub_1000544A0(0x2Eu);
          if (!os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
            return;
          goto LABEL_155;
        }
LABEL_69:
        v127 = 0;
        v128 = 0;
        v156 = 0;
        v154 = 0u;
        v155 = 0u;
        *(_OWORD *)v152 = 0u;
        v153 = 0u;
        v126 = 0;
        v39 = sub_10019E240((uint64_t)v152, (uint64_t)v14, (uint64_t *)&v124, v8, (_WORD *)&v128 + 1, (uint64_t)&v127);
        if (v39)
        {
          v40 = v39;
          sub_10019EB18(v14);
          *(_DWORD *)v152 = v40;
        }
        else
        {
          v60 = HIWORD(v128);
          v61 = sub_10019EBAC(v14, HIWORD(v128), (uint64_t)&v127, 1);
          if (v61)
          {
            if (v24 == 3)
              v62 = 44;
            else
              v62 = 3;
            v14 = sub_1000499C8(v62);
            v61 = sub_10019EBAC(v14, v60, (uint64_t)&v127, 1);
          }
          if (v24 == 3 && !v61)
          {
            if (*(_DWORD *)v152)
            {
              if (!sub_10019EBAC(v14, v60, (uint64_t)&v127, 0))
                return;
            }
            else
            {
              while (!sub_10019EBAC(v14, v60, (uint64_t)&v127, 1))
                ;
            }
          }
        }
        v41 = DWORD2(v153);
        v42 = (unsigned __int16 *)sub_10019AEA4((uint64_t)&v127);
        v43 = v42;
        if (v41 > 0xEFu)
        {
          if (v41 - 240 > 1)
          {
LABEL_156:
            if (sub_10005549C())
            {
              sub_100054530("OI_HCIFlow_ConnectionComplete, unknown link type %d", v41);
              v71 = sub_1000544A0(0x2Eu);
              if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
                sub_1006CE7A4();
            }
            goto LABEL_159;
          }
        }
        else
        {
          if (!(_BYTE)v41)
            goto LABEL_75;
          if (v41 != 1)
          {
            if (v41 == 2)
            {
LABEL_75:
              v126 = 0;
              if (sub_10019C4B4((uint64_t *)&v126))
              {
                while ((*((unsigned __int16 **)v126 + 6) != v43 || *(__int16 *)v126 != -1)
                     && sub_10019C4B4((uint64_t *)&v126))
                  ;
              }
LABEL_123:
              v59 = v126;
              goto LABEL_160;
            }
            goto LABEL_156;
          }
        }
        if (v42 && (__int16)*v42 != -1)
        {
          v126 = 0;
          if (sub_10005549C())
          {
            sub_100054530("ConnectComplete RXed for existing remote device: %d - %d", HIWORD(v128), *v43);
            v58 = sub_1000544A0(0x2Eu);
            if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
          goto LABEL_123;
        }
LABEL_159:
        v126 = (char *)v43;
        v59 = (char *)v43;
LABEL_160:
        if (v59)
        {
          *(_QWORD *)&v152[8] = v59;
          if (*(_DWORD *)v152)
          {
LABEL_178:
            v33 = v23 != 0;
            v35 = (uint64_t *)v152;
LABEL_179:
            v32 = v24;
            v34 = 0;
            goto LABEL_180;
          }
LABEL_176:
          v75 = HIWORD(v128);
          v76 = sub_10019ACEC(HIWORD(v128));
          if (v76)
          {
            v120 = v76;
            if (sub_10005549C())
            {
              sub_100054530("Duplicate LM handle 0x%x was already in use %:", v75, v120 + 3);
              v121 = sub_1000544A0(0x2Eu);
              if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
                sub_1006CE7A4();
            }
            sub_100112D60(649);
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c", 1720, "OI_STATUS _handle_CommandStatus(OI_BYTE_STREAM *, const HCI_EVENT_DESCRIPTOR *, uint8_t, _Bool)");
LABEL_285:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c");
          }
          v77 = (__int128 *)v126;
          *(_WORD *)v126 = v75;
          sub_1001A1AF0(v77);
          goto LABEL_178;
        }
        if (*(_DWORD *)v152)
        {
          sub_100180A54(*(unsigned int *)v152, 0, (uint64_t)&v127, v41, 0, v11, v12, v13);
          return;
        }
        if (v41 - 240 < 2 || v41 == 1)
        {
          if (sub_10005549C())
          {
            sub_100054530("HCI Connection Completed event - unknown ACL connection (%:)", &v127);
            v73 = sub_1000544A0(0x2Eu);
            if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
          v74 = (char *)sub_10019B1F4((uint64_t)&v127, 2);
          v126 = v74;
        }
        else
        {
          if (sub_10005549C())
          {
            sub_100054530("HCI Connection Completed event - unknown SCO connection (%:)", &v127);
            v90 = sub_1000544A0(0x2Eu);
            if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
          v126 = sub_10019B558((uint64_t)&v127);
          if (!v126)
            goto LABEL_225;
          v91 = sub_10018007C((uint64_t)v43);
          v74 = v126;
          if (!v91)
          {
            *((_QWORD *)v126 + 6) = v43;
            goto LABEL_175;
          }
        }
        if (v74)
        {
LABEL_175:
          *(_QWORD *)&v152[8] = v74;
          goto LABEL_176;
        }
LABEL_225:
        v92 = 0;
        v150 = 0u;
        v151 = 0u;
        v148 = 0u;
        v149 = 0u;
        v146 = 0u;
        v147 = 0u;
        v144 = 0u;
        v145 = 0u;
        v142 = 0u;
        v143 = 0u;
        v140 = 0u;
        v141 = 0u;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v134 = 0u;
        v135 = 0u;
        v132 = 0u;
        v133 = 0u;
        *(_OWORD *)buf = 0u;
        if (v41 != 1 && v41 != 240)
          v92 = v41 != 241;
        buf[2] = v92;
        *(_WORD *)buf = HIWORD(v128);
        if (sub_10005549C())
        {
          sub_100054530("HCI Connection Completed unable to allocate connection for %: disconnecting", &v127);
          v100 = sub_1000544A0(0x2Eu);
          if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        v101 = sub_100196768(5u, v93, v94, v95, v96, v97, v98, v99, (uint64_t)buf);
        v102 = sub_1001A1F70((uint64_t)buf, v101);
        if (!(_DWORD)v102)
          return;
        v103 = v102;
        if (!sub_10005549C())
          return;
        sub_100054530("OI_HCICMD_Disconnect failed: %!", v103, 20);
        v104 = sub_1000544A0(0x2Eu);
        if (!os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
          return;
LABEL_155:
        sub_1006CE7A4();
        return;
      }
      v30 = v8;
      v31 = 0;
    }
    sub_10019DCC8((uint64_t *)&v124, v30, v31);
    return;
  }
  if (sub_10005549C())
  {
    sub_100054530("Short event, numBytes = %d", a2);
    v4 = sub_1000544A0(0x2Eu);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
LABEL_4:
      sub_1006CE7A4();
  }
}

unsigned __int8 *sub_1000499C8(unsigned int a1)
{
  char v2;
  unsigned __int8 v3;
  unsigned __int8 *result;
  NSObject *v5;

  if (a1 < 0x24)
  {
    v3 = a1 - 1;
    goto LABEL_12;
  }
  if (a1 < 0x37)
  {
    v3 = a1 - 9;
    goto LABEL_19;
  }
  if (a1 < 0x3A)
  {
    v3 = a1 - 10;
    goto LABEL_19;
  }
  if (a1 < 0x3F)
  {
    v3 = a1 - 11;
    goto LABEL_19;
  }
  if (a1 < 0x49)
  {
    v3 = a1 - 19;
    goto LABEL_19;
  }
  if (a1 < 0x58)
  {
    v3 = a1 - 33;
LABEL_19:
    result = (unsigned __int8 *)&unk_10091E628 + 24 * v3;
    if (*result == a1)
      return result;
    goto LABEL_20;
  }
  if (a1 <= 0x59)
    v2 = -34;
  else
    v2 = 58;
  v3 = v2 + a1;
LABEL_12:
  if (v3 <= 0x39u)
    goto LABEL_19;
LABEL_20:
  if (sub_10005549C())
  {
    sub_100054530("Unrecognized Event (%d) index is %d\n", a1, v3);
    v5 = sub_1000544A0(0x2Eu);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CEF28(v5);
  }
  return 0;
}

uint64_t sub_100049AD8()
{
  uint64_t result;

  if (byte_1009919B0 != 1 && byte_1009919B8 != 0)
  {
    do
    {
      byte_1009919B8 = 0;
      result = sub_10004A810();
    }
    while ((byte_1009919B8 & 1) != 0);
  }
  return result;
}

uint64_t sub_100049B1C(int a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;

  if (!word_100984750)
    return 0;
  v7 = 0;
  v8 = 0;
  v9 = a3 >> 10;
  while (1)
  {
    v10 = qword_100984760;
    v11 = qword_100984760 + v7;
    if ((*(unsigned __int8 *)(qword_100984760 + v7 + 8) == a1 || *(unsigned __int8 *)(v11 + 9) == a1)
      && *(unsigned __int16 *)(v11 + 4) == (_DWORD)a3
      && (v9 < 0x3F
       || !off_100984768
       || ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))off_100984768)(a2, a3, *(unsigned __int8 *)(qword_100984760 + v7 + 10), *(unsigned __int8 *)(qword_100984760 + v7 + 11))))
    {
      break;
    }
    ++v8;
    v7 += 32;
    if (v8 >= (unsigned __int16)word_100984750)
      return 0;
  }
  v13 = *(_OWORD *)(v10 + v7 + 16);
  *a4 = *(_OWORD *)(v10 + v7);
  a4[1] = v13;
  byte_100984758 = 0;
  sub_100049DF8(v8);
  sub_100049C28();
  return 1;
}

void sub_100049C28()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  v14 = 0;
  if (dword_100984754)
  {
    sub_100049F6C(dword_100984754);
    dword_100984754 = 0;
    if ((_DWORD)v0)
    {
      v1 = v0;
      if (sub_10005549C())
      {
        sub_100054530("%! (%d)", v1, 364);
        v2 = sub_1000544A0(0x2Eu);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
  }
  if (word_100984750)
  {
    sub_10004AD30((uint64_t)&v14);
    v3 = (unsigned __int16)word_100984750;
    if (word_100984750)
    {
      v4 = v14;
      v5 = qword_100984760;
      v6 = 32 * (unsigned __int16)word_100984750 - 32;
      v7 = -1;
      do
      {
        v8 = *(_DWORD *)(v5 + v6);
        v9 = v8 >= v4;
        v10 = v8 - v4;
        if (v10 != 0 && v9)
        {
          if (v10 < v7)
            v7 = v10;
        }
        else
        {
          v16 = v5 + v6;
          LOWORD(v15) = 32;
          ++byte_100984758;
          sub_10004AE90((uint64_t)sub_10019F118, &v15, 0);
          sub_100049DF8(v3 - 1);
          v5 = qword_100984760;
        }
        --v3;
        v6 -= 32;
      }
      while ((unint64_t)(v3 + 1) > 1);
      if (word_100984750)
      {
        v11 = sub_10004A9EC((uint64_t)sub_10019F1A0, 0, (unsigned __int16)(10 * v7) | 1u, &dword_100984754);
        if ((_DWORD)v11)
        {
          v12 = v11;
          if (sub_10005549C())
          {
            sub_100054530("%! (%d)", v12, 426);
            v13 = sub_1000544A0(0x2Eu);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
        }
      }
    }
  }
}

uint64_t sub_100049DF8(int a1)
{
  int v2;
  unsigned __int16 v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;

  v2 = (unsigned __int16)word_100984750;
  if ((unsigned __int16)word_100984750 <= a1)
  {
    sub_100253460();
    v2 = (unsigned __int16)word_100984750;
  }
  if (!v2)
  {
    sub_100253460();
    v2 = (unsigned __int16)word_100984750;
  }
  if (v2 <= a1)
    return 640;
  v3 = v2 - 1;
  word_100984750 = v3;
  if (a1 < v3)
  {
    v4 = v3;
    v5 = (_OWORD *)(qword_100984760 + 32 * a1 + 32);
    v6 = v4 - a1;
    do
    {
      v7 = v5[1];
      *(v5 - 2) = *v5;
      *(v5 - 1) = v7;
      v5 += 2;
      --v6;
    }
    while (v6);
  }
  return 0;
}

BOOL sub_100049E8C(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 != 64803 && a2 != 64745)
    return 1;
  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 802, "_Bool _BCM_SubOpcodeChecker(OI_BYTE_STREAM *, uint16_t, uint8_t, uint8_t)");
    return 1;
  }
  v3 = *((unsigned __int16 *)a1 + 6);
  if (*((unsigned __int16 *)a1 + 5) <= v3)
    return 1;
  if (*((_BYTE *)a1 + 14) != 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  v4 = *a1;
  *((_WORD *)a1 + 6) = v3 + 1;
  return *(unsigned __int8 *)(v4 + v3) == a3;
}

uint64_t sub_100049F2C(unsigned int a1)
{
  if (a1 > 0x42)
    return 769;
  else
    return dword_10073AABC[(char)a1];
}

uint64_t sub_100049F50()
{
  return 0;
}

uint64_t sub_100049F58(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  return sub_100049B1C(14, a1, a2, a3);
}

void sub_100049F6C(uint64_t a1)
{
  int v2;

  if (sub_10004A088(a1))
  {
    if (*(uint64_t (**)(uint64_t))(qword_1009919D0 + 24 * WORD1(a1) + 8) == sub_100253848)
    {
      v2 = sub_100112D60(a1);
      sub_100049FD4(v2);
    }
    else
    {
      sub_100049FD4((int)a1 >> 16);
    }
  }
}

void sub_100049FD4(int a1)
{
  __int16 v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  v2 = qword_1009919D0 + 24 * a1;
  if (*(_QWORD *)(v2 + 8))
  {
    if (*(unsigned __int16 *)(qword_1009919D0 + 24 * a1 + 6) >= 9u)
    {
      v3 = *(void **)(qword_1009919D0 + 24 * a1 + 16);
      if (v3)
        sub_100053298(v3);
    }
  }
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)v2 = 0;
  if (word_1009919C0 == v1 && (word_1009919C0 & 0x80000000) == 0)
  {
    do
    {
      if (*(_QWORD *)(qword_1009919D0 + 24 * v1 + 8))
        break;
      word_1009919C0 = --v1;
    }
    while ((v1 & 0x8000) == 0);
  }
}

BOOL sub_10004A088(unsigned int a1)
{
  unsigned __int16 v1;
  unsigned int v2;

  v1 = a1;
  v2 = HIWORD(a1);
  if (!qword_1009919D0)
    sub_100253460();
  return v2 < (unsigned __int16)word_1009919C4
      && *(unsigned __int8 *)(qword_1009919D0 + 24 * v2) >= 2u
      && *(unsigned __int16 *)(qword_1009919D0 + 24 * v2 + 4) == v1;
}

void sub_10004A104()
{
  unsigned int v0;
  _WORD *v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  _WORD *v6;
  unsigned int v7;
  int v8;
  unsigned __int16 v9;
  uint64_t v10;
  unsigned int v11;
  __int16 v12;
  __int16 v13;

  v0 = __chkstk_darwin();
  if (!v1)
    return;
  v4 = v3;
  v5 = v2;
  v6 = v1;
  v7 = v0;
  bzero(&v12, 0x20006uLL);
  if ((_DWORD)v4 != 4 || byte_10098147C)
  {
    if ((_DWORD)v4 == 1 && !byte_10098147D)
    {
      v8 = sub_10004A75C(v6, v5);
      goto LABEL_11;
    }
    v12 = v7;
    switch((_DWORD)v4)
    {
      case 0xF3:
        v13 = v5;
        v10 = 4;
        if (!byte_100981478)
        {
          v9 = 4;
LABEL_31:
          v11 = sub_10004A638(v4, 1);
          sub_100048070(&v12, v9, 0, v11);
          return;
        }
        v9 = v5 + 4;
        v8 = -1;
        goto LABEL_27;
      case 5:
        v13 = v5;
        if (!byte_100981478)
        {
          v10 = 4;
          if (((v7 >> 8) & 0x40) != 0)
            LODWORD(v5) = 8;
          else
            LODWORD(v5) = 4;
          if (((v7 >> 8) & 0x40) != 0)
            v9 = 12;
          else
            v9 = 8;
          v8 = -1;
          goto LABEL_28;
        }
        break;
      case 2:
        v13 = v5;
        if (v5 >= 4 && !byte_100981478 && word_100981490 && word_100981490 == v6[1])
        {
          v8 = -1;
          LODWORD(v5) = 21;
          v9 = 25;
          v10 = 4;
LABEL_28:
          memcpy((char *)&v12 + v10, v6, v5);
LABEL_29:
          if (v8 >= 1)
            bzero((char *)&v12 + v10 + v8, (int)v5 - v8);
          goto LABEL_31;
        }
        break;
      default:
        v8 = -1;
        goto LABEL_12;
    }
    v9 = v5 + 4;
    v8 = -1;
    v10 = 4;
    goto LABEL_27;
  }
  if ((v5 & 0xFC) == 0 || *(unsigned __int8 *)v6 != 255 || *((unsigned __int8 *)v6 + 2) != 181)
  {
    v8 = -1;
LABEL_11:
    v12 = v7;
LABEL_12:
    LOBYTE(v13) = v5;
    v9 = v5 + 3;
    v10 = 3;
    if ((_DWORD)v4 == 3 && !byte_100981478)
    {
      LODWORD(v5) = 0;
      v9 = 3;
      goto LABEL_29;
    }
LABEL_27:
    if (!(_DWORD)v5)
      goto LABEL_29;
    goto LABEL_28;
  }
}

void sub_10004A360()
{
  unsigned __int8 *v0;
  size_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  unsigned __int8 *v5;
  signed int v6;
  _BOOL4 v7;
  int v8;
  int v9;
  unsigned __int16 v10;
  unsigned int v11;
  unsigned int v12;
  _BYTE v13[131078];

  v0 = (unsigned __int8 *)__chkstk_darwin();
  v3 = v2;
  v4 = v1;
  v5 = v0;
  if ((_DWORD)v2 != 3 || byte_100981478)
  {
    if ((_DWORD)v2 == 243 && !byte_100981478)
    {
      if (v1 >= 4)
      {
        v6 = 0;
        LODWORD(v4) = 4;
        goto LABEL_45;
      }
      return;
    }
    if ((_DWORD)v2 == 5 && !byte_100981478)
    {
      if (v1 < 0xD)
      {
        if (v1 >= 9)
        {
          if ((v0[1] & 0x40) != 0)
            LODWORD(v4) = v1;
          else
            LODWORD(v4) = 8;
        }
      }
      else
      {
        if ((v0[1] & 0x40) != 0)
        {
          v6 = 0;
          LODWORD(v4) = 12;
          goto LABEL_45;
        }
        LODWORD(v4) = 8;
      }
      v6 = 0;
LABEL_45:
      v12 = sub_10004A638(v3, 0);
      sub_100048070(v5, v4, v6, v12);
      return;
    }
    v6 = 0;
    v7 = v2 == 2;
    if ((_DWORD)v2 == 2 && !byte_100981479)
    {
      if (v1 >= 0xB && sub_10011D3C0(v0, 1))
      {
        v6 = 11;
        goto LABEL_36;
      }
      v6 = 0;
      v7 = 1;
      if ((v4 - 8) >= 2u && (v5[8] & 0xFC) == 0xA0)
      {
        v8 = v5[9];
        if (v8 == 17)
        {
          if ((v4 - 8) == 3 && (v5[10] & 0xEF) == 0)
            goto LABEL_46;
        }
        else if (v8 == 1 && (v4 & 0xFE) == 0x12 && !v5[11])
        {
LABEL_46:
          if (v4 < 8)
            return;
          v6 = 8;
          goto LABEL_36;
        }
        v6 = 0;
      }
    }
    if (!v7)
    {
LABEL_40:
      if ((_DWORD)v3 != 4)
        goto LABEL_45;
      if (byte_10098147D)
        goto LABEL_45;
      v9 = sub_10004A75C(v5, v4);
      if (v9 < 1)
        goto LABEL_45;
      v10 = v9;
      bzero(v13, 0x20006uLL);
      __memcpy_chk(v13, v5, v10, 131078);
      v11 = sub_10004A638(4, 0);
      sub_100048070(v13, v4, 0, v11);
      return;
    }
LABEL_36:
    if (v4 >= 8 && !byte_10098147F && sub_10011D3C0(v5, 2))
      v6 = 8;
    goto LABEL_40;
  }
  if (v1 >= 3)
  {
    v6 = 0;
    LODWORD(v4) = 3;
    goto LABEL_45;
  }
}

uint64_t sub_10004A638(uint64_t result, int a2)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;

  if (!(_DWORD)result && (a2 & 1) != 0)
    return 255;
  v2 = a2;
  if ((_DWORD)result != 1)
    v2 = 0;
  if ((v2 & 1) != 0)
    return 0;
  if ((_DWORD)result == 1 && !a2)
    return 1;
  v3 = a2;
  if ((_DWORD)result != 2)
    v3 = 0;
  if ((v3 & 1) != 0)
    return 2;
  if ((_DWORD)result == 2 && !a2)
    return 3;
  v4 = a2;
  if ((_DWORD)result != 3)
    v4 = 0;
  if ((v4 & 1) != 0)
    return 8;
  if ((_DWORD)result == 3 && !a2)
    return 9;
  v5 = a2;
  if ((_DWORD)result != 243)
    v5 = 0;
  if ((v5 & 1) != 0)
    return 24;
  if ((_DWORD)result == 243 && !a2)
    return 25;
  if ((_DWORD)result == 4)
    return 1;
  v6 = a2;
  if ((_DWORD)result != 5)
    v6 = 0;
  if ((v6 & 1) != 0)
    return 12;
  if ((_DWORD)result == 5 && !a2)
    return 13;
  if ((_DWORD)result == 7)
    return 10;
  if ((_DWORD)result != 32)
  {
    if ((_DWORD)result == 8 && (a2 & 1) == 0)
      return 11;
    return 255;
  }
  return result;
}

uint64_t sub_10004A75C(void *a1, size_t __n)
{
  __int16 v2;
  _QWORD *v4;
  void *v5;
  unsigned __int16 v6;

  v2 = __n;
  v4 = memchr(a1, 3, __n);
  if (!v4)
    return -1;
  v5 = a1;
  while ((unsigned __int16)((_WORD)a1 - (_WORD)v4 + v2) < 8u)
  {
    if (!((_WORD)a1 - (_WORD)v4 + v2))
    {
      v6 = 0;
      goto LABEL_8;
    }
LABEL_7:
    v5 = (char *)v4 + 1;
    v6 = (_WORD)a1 - (_WORD)v4 + v2 - 1;
LABEL_8:
    v4 = memchr(v5, 3, v6);
    if (!v4)
      return -1;
  }
  if (*v4 != 0xFD6F1617FD6F0303)
    goto LABEL_7;
  return (__int16)(8 - ((_WORD)a1 - (_WORD)v4));
}

uint64_t sub_10004A810()
{
  __int16 v0;
  __int16 v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void (*v7)(uint64_t *);
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int16 v14;
  __int16 v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  if (!qword_1009919D0)
    sub_100253460();
  if (byte_1009919B0 == 1)
    sub_100253460();
  v17 = 0;
  v18 = 0;
  byte_1009919B0 = 1;
  v19 = 0;
  sub_10004AD30((uint64_t)&v19);
  v0 = word_1009919C0;
  if (word_1009919C0 < 0)
  {
    byte_1009919B0 = 0;
LABEL_28:
    v1 = 0;
    byte_1009919B8 = 0;
    return v1;
  }
  v1 = 0;
  LOWORD(v2) = 0;
  v3 = (SWORD2(v19) + 99) / 100 + 10 * v19;
  v4 = qword_1009919D0;
  do
  {
    v5 = (__int16)v2;
    v6 = v4 + 24 * (__int16)v2;
    v7 = *(void (**)(uint64_t *))(v6 + 8);
    if (v7 && (__int16)(*(_WORD *)(v4 + 24 * v5 + 2) - v3) <= 0)
    {
      *(_BYTE *)v6 = 1;
      v8 = v4 + 24 * v5;
      v9 = *(__int16 *)(v8 + 6);
      if (*(_WORD *)(v8 + 6))
      {
        LOWORD(v17) = *(_WORD *)(v8 + 6);
        v10 = (_QWORD *)(v4 + 24 * v5 + 16);
        if (v9 >= 9)
          v10 = (_QWORD *)*v10;
        v18 = v10;
        v11 = &v17;
      }
      else
      {
        v11 = 0;
      }
      v7(v11);
      ++v1;
      sub_100049FD4(v5);
      v4 = qword_1009919D0;
      v0 = word_1009919C0;
    }
    v2 = (__int16)(v5 + 1);
  }
  while (v2 <= v0);
  if ((v0 & 0x8000) == 0)
  {
    v12 = (unsigned __int16)(v0 + 1);
    v13 = (_QWORD *)(qword_1009919D0 + 8);
    v14 = -1;
    do
    {
      if (*v13)
      {
        v15 = *((_WORD *)v13 - 3);
        if ((unsigned __int16)(v15 - v3) < v14)
        {
          word_1009919C8 = *((_WORD *)v13 - 3);
          v14 = v15 - v3;
        }
      }
      v13 += 3;
      --v12;
    }
    while (v12);
    if (v14 != 0xFFFF && off_1009919D8)
      off_1009919D8(100 * v14);
  }
  byte_1009919B0 = 0;
  if (!v1)
    goto LABEL_28;
  return v1;
}

uint64_t sub_10004A9EC(uint64_t a1, const void **a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned __int16 v21;
  BOOL v22;
  NSObject *v23;
  int v24;
  uint64_t v25;
  void *v26;

  if (qword_1009919D0)
  {
    if (a1)
      goto LABEL_3;
LABEL_15:
    sub_100253460();
    if ((a3 & 0x8000) == 0)
      goto LABEL_4;
LABEL_16:
    sub_100253460();
    return 101;
  }
  sub_100253460();
  if (!a1)
    goto LABEL_15;
LABEL_3:
  if ((a3 & 0x8000) != 0)
    goto LABEL_16;
LABEL_4:
  result = 101;
  if (a1)
  {
    v9 = qword_1009919D0;
    if (qword_1009919D0)
    {
      if (!a3)
        byte_1009919B8 = 1;
      v10 = (unsigned __int16)word_1009919C4;
      if (word_1009919C4)
      {
        v11 = (uint64_t *)(qword_1009919D0 + 8);
        if (*(_QWORD *)(qword_1009919D0 + 8))
        {
          v12 = 0;
          v13 = 0;
          while (1)
          {
            v14 = ++v13;
            if (v13 >= (int)(unsigned __int16)word_1009919C4)
              break;
            v12 = v13;
            v15 = qword_1009919D0 + 24 * v13;
            v16 = *(_QWORD *)(v15 + 8);
            v11 = (uint64_t *)(v15 + 8);
            if (!v16)
              goto LABEL_19;
          }
          v18 = 0;
          v17 = qword_1009919D0 + 24 * v12;
        }
        else
        {
          v14 = 0;
          v13 = 0;
          LODWORD(v12) = 0;
LABEL_19:
          v17 = qword_1009919D0 + 24 * (int)v12;
          if (word_1009919C0 < v13)
          {
            word_1009919C0 = v13;
            if (dword_1009919E0 < v14)
              dword_1009919E0 = v14;
          }
          sub_10004AC7C(qword_1009919D0 + 24 * (int)v12, a3);
          *(_BYTE *)v17 = 2;
          *v11 = a1;
          v19 = v9 + 24 * (int)v12;
          v20 = *(unsigned __int16 *)(v19 + 4);
          if (((v20 + 1) & 0x10000) != 0)
            v21 = v20 + 2;
          else
            v21 = v20 + 1;
          *(_WORD *)(v19 + 4) = v21;
          v18 = v21 | ((unsigned __int16)v14 << 16);
          v10 = (unsigned __int16)word_1009919C4;
        }
      }
      else
      {
        v13 = 0;
        v14 = 0;
        v17 = 0;
        v18 = 0;
      }
      if (v14 >= v10)
      {
        sub_100253460();
        v10 = (unsigned __int16)word_1009919C4;
      }
      if (v17)
        v22 = v14 == v10;
      else
        v22 = 1;
      if (v22)
      {
        if (sub_10005549C())
        {
          sub_100054530("Dispatch table of size %d overflow: timeout %d, cbFunc0x %x", (unsigned __int16)word_1009919C4, a3, a1);
          v23 = sub_1000544A0(0x2Au);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        sub_100253460();
        return 1002;
      }
      else
      {
        if (a2)
        {
          v24 = *(__int16 *)a2;
          if (v24 > 8)
          {
            v26 = sub_100052DC0(*(unsigned __int16 *)a2);
            *(_QWORD *)(v17 + 16) = v26;
            if (!v26)
            {
              sub_100049FD4(v13);
              return 106;
            }
            memmove(v26, a2[1], *(__int16 *)a2);
            LOWORD(v24) = *(_WORD *)a2;
          }
          else if (v24 >= 1)
          {
            v25 = 0;
            do
            {
              *(_BYTE *)(v17 + 16 + v25) = *((_BYTE *)a2[1] + v25);
              ++v25;
            }
            while (v25 < *(__int16 *)a2);
            LOWORD(v24) = *(_WORD *)a2;
          }
        }
        else
        {
          LOWORD(v24) = 0;
        }
        *(_WORD *)(v17 + 6) = v24;
        result = 0;
        if (a4)
          *a4 = v18;
      }
    }
  }
  return result;
}

void sub_10004AC7C(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;

  v5 = 0;
  sub_10004AD30((uint64_t)&v5);
  v4 = (SWORD2(v5) + 99) / 100 + 10 * v5;
  if (!a1)
    sub_100253460();
  *(_WORD *)(a1 + 2) = v4 + a2;
  if (!word_1009919C0 || a2 <= (__int16)(word_1009919C8 - v4))
  {
    word_1009919C8 = v4 + a2;
    if (off_1009919D8)
      off_1009919D8((100 * a2));
  }
}

uint64_t sub_10004AD30(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t result;
  unint64_t v10;

  if (!dword_10098029C)
  {
    mach_timebase_info((mach_timebase_info_t)&dword_100980298);
    v2 = dword_10098029C;
    v3 = dword_10098029C;
    v4 = dword_100980298;
    while ((_DWORD)v4)
    {
      if (v4 > v3)
      {
        v5 = v4 % v3;
        v4 = v3;
        v3 = v5;
      }
      v6 = v3;
      v3 = v4;
      v7 = (_DWORD)v6 == (_DWORD)v4;
      v4 = v6;
      if (v7)
      {
        LODWORD(v3) = 1;
        break;
      }
    }
    v8 = dword_10098029C / v3;
    dword_100980298 /= v3;
    dword_10098029C /= v3;
    if ((v2 / v3) >> 1 >= 0x863)
    {
      sub_100253460();
      v8 = dword_10098029C;
    }
    dword_10098029C = 1000000 * v8;
  }
  result = mach_absolute_time();
  v10 = result * dword_100980298 / dword_10098029C;
  *(_WORD *)(a1 + 4) = v10 % 0x3E8;
  *(_DWORD *)a1 = v10 / 0x3E8;
  return result;
}

uint64_t sub_10004AE1C(int a1)
{
  pthread_mutex_lock(&stru_10097FB88);
  dword_10097FB50 = a1;
  pthread_cond_signal(&stru_10097FB58);
  return pthread_mutex_unlock(&stru_10097FB88);
}

uint64_t sub_10004AE60()
{
  BOOL v0;
  uint64_t result;

  if (dword_1009843F4)
  {
    if (byte_1009843F0)
      v0 = byte_100999059 == 0;
    else
      v0 = 1;
    if (!v0)
      return sub_100052F94();
  }
  return result;
}

uint64_t sub_10004AE90(uint64_t a1, const void **a2, int *a3)
{
  return sub_10004A9EC(a1, a2, 0, a3);
}

void sub_10004AE9C(uint64_t a1, void (*a2)(uint64_t))
{
  NSObject *v4;

  if ((_DWORD)a1
    && sub_10005549C()
    && (sub_100054530("status %d, hlCb 0x%x", a1, (_DWORD)a2),
        v4 = sub_1000544A0(0x54u),
        os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)))
  {
    sub_1006CEEC0();
    if (!a2)
      return;
  }
  else if (!a2)
  {
    return;
  }
  a2(a1);
}

uint64_t sub_10004AF24(int a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  if (!word_100984750)
    return 0;
  v3 = 0;
  for (result = qword_100984760;
        *(unsigned __int8 *)(result + 8) != a1 && *(unsigned __int8 *)(result + 9) != a1;
        result += 32)
  {
    if (++v3 >= (unint64_t)(unsigned __int16)word_100984750)
      return 0;
  }
  *a2 = v3;
  return result;
}

void sub_10004AF78(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;

  if (*(_BYTE *)(a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c", 1556, "void LE_HCIEventHandler(OI_BYTE_STREAM *, const HCI_EVENT_DESCRIPTOR *, uint8_t, _Bool)");
  }
  else
  {
    v5 = *(unsigned __int16 *)(a1 + 10);
    v6 = *(unsigned __int16 *)(a1 + 12);
    if (v5 != (_DWORD)v6)
    {
      if (*(_BYTE *)(a1 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c");
      if (v5 <= v6)
      {
        *(_BYTE *)(a1 + 15) = 1;
        if (sub_10005549C())
        {
          sub_100054530("Error retreiving the subevent code.");
          v10 = sub_1000544A0(0x42u);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            goto LABEL_6;
        }
      }
      else
      {
        v8 = *(_QWORD *)a1;
        *(_WORD *)(a1 + 12) = v6 + 1;
        v9 = *(unsigned __int8 *)(v8 + v6);
        switch(*(_BYTE *)(v8 + v6))
        {
          case 1:
            sub_100218C58((uint64_t *)a1, a4);
            return;
          case 2:
            sub_10021914C((uint64_t *)a1, a4);
            return;
          case 3:
            sub_100219720((uint64_t *)a1);
            return;
          case 4:
            sub_1002199F8((uint64_t *)a1);
            return;
          case 5:
            sub_100219C48((uint64_t *)a1);
            return;
          case 6:
            sub_100219E44(a1);
            return;
          case 7:
            sub_10021A094((uint64_t *)a1);
            return;
          case 0xA:
            v15 = 1;
            goto LABEL_48;
          case 0xC:
            sub_10021A260((uint64_t *)a1);
            return;
          case 0xD:
            sub_10004BD18((uint64_t *)a1, a4);
            return;
          case 0xE:
            v11 = 1;
            goto LABEL_23;
          case 0xF:
            v12 = 1;
            goto LABEL_46;
          case 0x10:
            sub_10021BCC8(a1);
            return;
          case 0x12:
            sub_10021A5C0((uint64_t *)a1);
            return;
          case 0x14:
            sub_10021A414((uint64_t *)a1);
            return;
          case 0x18:
            v13 = 1;
            goto LABEL_43;
          case 0x21:
            sub_10021C554((uint64_t *)a1);
            return;
          case 0x23:
            sub_10021E4C0((uint64_t *)a1);
            return;
          case 0x24:
            v11 = 2;
LABEL_23:
            sub_10021AFB8(v11, (uint64_t *)a1);
            break;
          case 0x25:
            v12 = 2;
LABEL_46:
            sub_10021B64C(v12, (uint64_t *)a1);
            break;
          case 0x26:
            v13 = 2;
LABEL_43:
            sub_10021BDB4(v13, (uint64_t *)a1);
            break;
          case 0x27:
            sub_10021E84C((uint64_t *)a1);
            break;
          case 0x28:
            sub_10021EA40((uint64_t *)a1);
            break;
          case 0x29:
            v15 = 2;
LABEL_48:
            sub_10021A844(v15, (uint64_t *)a1, a4);
            break;
          case 0x2D:
            sub_10021C8BC((uint64_t *)a1);
            break;
          case 0x2E:
            sub_10021CF6C((uint64_t *)a1);
            break;
          case 0x2F:
          case 0x34:
            sub_10021CD98((uint64_t *)a1);
            break;
          case 0x30:
            sub_10021D0D0((uint64_t *)a1);
            break;
          case 0x31:
            sub_10021D5E0((uint64_t *)a1);
            break;
          case 0x32:
            sub_10021DE28((uint64_t *)a1);
            break;
          case 0x33:
            return;
          default:
            if (sub_10005549C())
            {
              sub_100054530("Unknown LE event code 0x%x", v9);
              v14 = sub_1000544A0(0x42u);
              if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
                goto LABEL_6;
            }
            break;
        }
      }
      return;
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("Error, the LE command is %d bytes.", 0);
    v7 = sub_1000544A0(0x42u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
LABEL_6:
      sub_1006CE7A4();
  }
}

void sub_10004B33C(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  if (!(_DWORD)a1)
  {
    if (*((_BYTE *)a3 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 102, "void _BCM_U8_U8_U8EventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    }
    else
    {
      v9 = *((unsigned __int16 *)a3 + 5);
      v10 = *((unsigned __int16 *)a3 + 6);
      if (v9 > v10 && *((_BYTE *)a3 + 14) == 1)
      {
        v11 = *a3;
        *((_WORD *)a3 + 6) = v10 + 1;
        if (v9 <= (int)v10 + 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
        v6 = *(unsigned __int8 *)(v11 + v10);
        *((_WORD *)a3 + 6) = v10 + 2;
        if (v9 <= (int)v10 + 2)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
        v7 = *(unsigned __int8 *)(v11 + v10 + 1);
        *((_WORD *)a3 + 6) = v10 + 3;
        v8 = *(unsigned __int8 *)(v11 + v10 + 2);
        if (a2)
          goto LABEL_6;
        return;
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
  if (sub_10005549C())
  {
    sub_100054530("status %d,  Byte 0x%x, Byte1 0x%x, Byte2 0x%x, hlCb 0x%x", a1, 0, 0, 0, (_DWORD)a2);
    v5 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  if (a2)
LABEL_6:
    a2(a1, v6, v7, v8);
}

uint64_t sub_10004B4B0(int a1, char a2, char a3, char a4)
{
  uint64_t v6;

  LOBYTE(xmmword_100991B70) = a2;
  BYTE1(xmmword_100991B70) = a3;
  v6 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 3552))(v6))
    BYTE2(xmmword_100991B70) = a4;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xDBu);
}

uint64_t sub_10004B52C(const void *a1, int a2, const void *a3, int a4, char a5, char a6, int a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14, __int16 a15, char a16, char a17, char a18, uint64_t (*a19)())
{
  uint64_t result;
  unsigned int v28;
  char v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  int v33;
  unsigned __int16 v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned __int16 v38;
  uint64_t v39;
  int v40;
  unsigned __int16 v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[6];
  uint64_t v54;
  uint64_t v55;

  v54 = 0;
  v55 = 0;
  result = sub_10004BC7C(&v54);
  if (!(_DWORD)result)
  {
    if (a7)
    {
      if (HIBYTE(v55))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3845, "OI_STATUS _BCM_LEMetaAdvMatchingRuleEnhancedV2(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_MATCH_RULE_ENHANCED_CB)");
      }
      else
      {
        v28 = WORD2(v55);
        if (WORD1(v55) > WORD2(v55) && BYTE6(v55) == 2)
        {
          v29 = 55;
          goto LABEL_11;
        }
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
    }
    if (HIBYTE(v55))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3847, "OI_STATUS _BCM_LEMetaAdvMatchingRuleEnhancedV2(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_MATCH_RULE_ENHANCED_CB)");
    }
    else
    {
      v28 = WORD2(v55);
      if (WORD1(v55) > WORD2(v55) && BYTE6(v55) == 2)
      {
        v29 = 56;
LABEL_11:
        WORD2(v55) = v28 + 1;
        *(_BYTE *)(v54 + v28) = v29;
        if (HIBYTE(v55))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3850, "OI_STATUS _BCM_LEMetaAdvMatchingRuleEnhancedV2(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_MATCH_RULE_ENHANCED_CB)");
        }
        else
        {
          v30 = WORD2(v55);
          if (WORD1(v55) > WORD2(v55) && BYTE6(v55) == 2)
          {
            ++WORD2(v55);
            *(_BYTE *)(v54 + v30) = a8;
            v53[0] = a14;
            v53[1] = a13;
            v53[2] = a12;
            v53[3] = a11;
            v53[4] = a10;
            v53[5] = a9;
            if (HIBYTE(v55))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3853, "OI_STATUS _BCM_LEMetaAdvMatchingRuleEnhancedV2(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_MATCH_RULE_ENHANCED_CB)");
            }
            else if (WORD1(v55) - WORD2(v55) > 5 && BYTE6(v55) == 2)
            {
              sub_10004C878(v54 + WORD2(v55), (uint64_t)v53, 6uLL);
              v31 = WORD2(v55) + 6;
              WORD2(v55) += 6;
              v32 = v54;
              if (HIBYTE(v55))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3854, "OI_STATUS _BCM_LEMetaAdvMatchingRuleEnhancedV2(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_MATCH_RULE_ENHANCED_CB)");
                v33 = 0;
              }
              else
              {
                v33 = WORD1(v55) - v31;
              }
              if (v33 < a2 || BYTE6(v55) != 2)
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
              memmove((void *)(v32 + v31), a1, a2);
              v34 = WORD2(v55) + a2;
              WORD2(v55) += a2;
              v35 = v54;
              if (HIBYTE(v55))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3855, "OI_STATUS _BCM_LEMetaAdvMatchingRuleEnhancedV2(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_MATCH_RULE_ENHANCED_CB)");
                v36 = 0;
              }
              else
              {
                v36 = WORD1(v55) - v34;
              }
              v37 = 22 - a2;
              if (v36 < v37 || BYTE6(v55) != 2)
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
              bzero((void *)(v35 + v34), v37);
              v38 = WORD2(v55) + v37;
              WORD2(v55) = v38;
              v39 = v54;
              if (HIBYTE(v55))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3856, "OI_STATUS _BCM_LEMetaAdvMatchingRuleEnhancedV2(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_MATCH_RULE_ENHANCED_CB)");
                v40 = 0;
              }
              else
              {
                v40 = WORD1(v55) - v38;
              }
              if (v40 < a4 || BYTE6(v55) != 2)
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
              memmove((void *)(v39 + v38), a3, a4);
              v41 = WORD2(v55) + a4;
              WORD2(v55) += a4;
              v42 = v54;
              if (HIBYTE(v55))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3857, "OI_STATUS _BCM_LEMetaAdvMatchingRuleEnhancedV2(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_MATCH_RULE_ENHANCED_CB)");
                v43 = 0;
              }
              else
              {
                v43 = WORD1(v55) - v41;
              }
              v44 = 22 - a4;
              if (v43 < v44 || BYTE6(v55) != 2)
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
              bzero((void *)(v42 + v41), v44);
              v48 = WORD2(v55) + v44;
              WORD2(v55) += v44;
              if (HIBYTE(v55))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3858, "OI_STATUS _BCM_LEMetaAdvMatchingRuleEnhancedV2(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_MATCH_RULE_ENHANCED_CB)");
              }
              else if (WORD1(v55) > v48 && BYTE6(v55) == 2)
              {
                WORD2(v55) = v48 + 1;
                *(_BYTE *)(v54 + v48) = a5;
                if (HIBYTE(v55))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3859, "OI_STATUS _BCM_LEMetaAdvMatchingRuleEnhancedV2(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_MATCH_RULE_ENHANCED_CB)");
                }
                else
                {
                  v49 = WORD2(v55);
                  if (WORD1(v55) > WORD2(v55) && BYTE6(v55) == 2)
                  {
                    ++WORD2(v55);
                    *(_BYTE *)(v54 + v49) = a6;
                    if (HIBYTE(v55))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3860, "OI_STATUS _BCM_LEMetaAdvMatchingRuleEnhancedV2(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_MATCH_RULE_ENHANCED_CB)");
                    }
                    else
                    {
                      v50 = WORD2(v55);
                      if (WORD1(v55) > WORD2(v55) && BYTE6(v55) == 2)
                      {
                        ++WORD2(v55);
                        *(_BYTE *)(v54 + v50) = a16;
                        if (HIBYTE(v55))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3861, "OI_STATUS _BCM_LEMetaAdvMatchingRuleEnhancedV2(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_MATCH_RULE_ENHANCED_CB)");
                        }
                        else
                        {
                          v51 = WORD2(v55);
                          if (WORD1(v55) > WORD2(v55) && BYTE6(v55) == 2)
                          {
                            ++WORD2(v55);
                            *(_BYTE *)(v54 + v51) = a17;
                            if (HIBYTE(v55))
                            {
                              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3862, "OI_STATUS _BCM_LEMetaAdvMatchingRuleEnhancedV2(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_MATCH_RULE_ENHANCED_CB)");
                            }
                            else
                            {
                              v52 = WORD2(v55);
                              if (WORD1(v55) > WORD2(v55) && BYTE6(v55) == 2)
                              {
                                ++WORD2(v55);
                                *(_BYTE *)(v54 + v52) = a18;
                                return sub_10004C8A0(233, v54, BYTE4(v55), a19, (uint64_t)sub_10004B33C, v45, v46, v47);
                              }
                            }
                            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
                          }
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
  return result;
}

uint64_t sub_10004BC7C(_QWORD *a1)
{
  NSObject *v1;
  uint64_t result;

  if (dword_100984F08)
  {
    if (sub_10005549C())
    {
      sub_100054530("VSC state %d, can not create command", dword_100984F08);
      v1 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    return 3600;
  }
  else
  {
    result = 0;
    *a1 = &unk_100984E04;
    a1[1] = 0x2000000FF00FFLL;
  }
  return result;
}

void sub_10004BD18(uint64_t *a1, char a2)
{
  int v2;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  void *v17;
  char v18;
  NSObject *v19;
  _BOOL4 v20;
  void *v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  void *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  _BYTE *v45;
  char v46;
  NSObject *v47;
  NSObject *v48;
  NSObject *v49;
  NSObject *v50;
  NSObject *v51;
  NSObject *v52;
  NSObject *v53;
  NSObject *v54;
  NSObject *v55;
  NSObject *v56;
  NSObject *v57;
  NSObject *v58;
  NSObject *v59;
  NSObject *v60;
  NSObject *v61;
  __int128 v62;
  void *ptr[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint8_t buf[4];
  void *v68;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c", 334, "void _HCIEventHandler_ExtendedAdvertisingReport(OI_BYTE_STREAM *, const HCI_EVENT_DESCRIPTOR *, uint8_t, _Bool)");
    v2 = 0;
    v65 = 0u;
    v66 = 0u;
    *(_OWORD *)ptr = 0u;
    v64 = 0u;
    v62 = 0u;
LABEL_4:
    if (!sub_10005549C())
      return;
    sub_100054530("Not enough data in the packet : %d, expecting at least %d", v2, 10);
    v6 = sub_1000544A0(0x42u);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_6;
  }
  v4 = *((unsigned __int16 *)a1 + 5);
  v5 = *((unsigned __int16 *)a1 + 6);
  v2 = v4 - v5;
  v65 = 0u;
  v66 = 0u;
  *(_OWORD *)ptr = 0u;
  v64 = 0u;
  v62 = 0u;
  if (v4 - v5 <= 9)
    goto LABEL_4;
  if (*((_BYTE *)a1 + 14) != 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c");
  if (v4 <= v5)
  {
    *((_BYTE *)a1 + 15) = 1;
    if (!sub_10005549C())
      return;
    sub_100054530("Could not get the number of reports of the LE extended advertising report event");
    v47 = sub_1000544A0(0x42u);
    if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      return;
LABEL_6:
    sub_1006CE7A4();
    return;
  }
  v7 = *a1;
  *((_WORD *)a1 + 6) = v5 + 1;
  v8 = *(unsigned __int8 *)(v7 + v5);
  BYTE1(ptr[1]) = a2;
  if (!v8)
    return;
  v9 = 0;
  while (1)
  {
    if (*((_BYTE *)a1 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c");
    if (*((_BYTE *)a1 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c", 351, "void _HCIEventHandler_ExtendedAdvertisingReport(OI_BYTE_STREAM *, const HCI_EVENT_DESCRIPTOR *, uint8_t, _Bool)");
LABEL_73:
      *((_BYTE *)a1 + 15) = 1;
      if (!sub_10005549C())
        return;
      sub_100054530("Could not get the event type of the LE extended advertising report event");
      v48 = sub_1000544A0(0x42u);
      if (!os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        return;
      goto LABEL_116;
    }
    v10 = *((unsigned __int16 *)a1 + 6);
    if (*((unsigned __int16 *)a1 + 5) - (int)v10 <= 1)
      goto LABEL_73;
    v11 = (unsigned __int8 *)(*a1 + v10);
    v12 = *v11;
    LODWORD(v11) = v11[1];
    *((_WORD *)a1 + 6) = v10 + 2;
    v13 = v12 & 0x1F;
    WORD1(ptr[1]) = v12 & 0x1F;
    BYTE4(ptr[1]) = (v12 >> 5) & 3;
    BYTE14(v64) = v12 >> 7;
    BYTE13(v64) = v11 & 0x3F;
    BYTE12(v64) = (v11 & 0x40) != 0;
    HIBYTE(v64) = v11 >> 7;
    v14 = (v12 & 0x1F) - 16;
    if (v14 >= 0xE)
      goto LABEL_17;
    if (((0x2C2Du >> v14) & 1) != 0)
    {
      v18 = byte_10073B1C8[v14];
    }
    else
    {
LABEL_17:
      BYTE11(v64) = 1;
      v15 = sub_10005549C();
      if ((v13 & 1) != 0)
      {
        if ((v13 & 4) != 0)
        {
          if (v15)
          {
            sub_100054530("legacy=false EXTENDED_ADVERTISING_EVENT_TYPE_CONNECTABLE & EXTENDED_ADVERTISING_EVENT_TYPE_DIRECTED_ADV");
            v24 = sub_1000544A0(0x42u);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              v25 = sub_100054494();
              *(_DWORD *)buf = 136446210;
              v68 = v25;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
          v18 = 1;
        }
        else
        {
          if (v15)
          {
            sub_100054530("legacy=false EXTENDED_ADVERTISING_EVENT_TYPE_CONNECTABLE");
            v19 = sub_1000544A0(0x42u);
            v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
            v18 = 0;
            if (!v20)
              goto LABEL_37;
            v21 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v68 = v21;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
          v18 = 0;
        }
      }
      else if ((v13 & 8) != 0)
      {
        if (v15)
        {
          sub_100054530("legacy=false EXTENDED_ADVERTISING_EVENT_TYPE_SCAN_RSP");
          v22 = sub_1000544A0(0x42u);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            v23 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v68 = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        v18 = 4;
      }
      else
      {
        if (v15)
        {
          sub_100054530("legacy=false LE_ADVERTISING_TYPE_NON_CONNECTABLE_UNDIRECTED");
          v16 = sub_1000544A0(0x42u);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            v17 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v68 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        v18 = 3;
      }
    }
LABEL_37:
    LOBYTE(v62) = (16 * BYTE13(v64) - 80) | v18;
    if (*((_BYTE *)a1 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c");
    if (*((_BYTE *)a1 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c", 401, "void _HCIEventHandler_ExtendedAdvertisingReport(OI_BYTE_STREAM *, const HCI_EVENT_DESCRIPTOR *, uint8_t, _Bool)");
LABEL_77:
      *((_BYTE *)a1 + 15) = 1;
      if (!sub_10005549C())
        return;
      sub_100054530("Could not get the address type of the LE extended advertising report event");
      v49 = sub_1000544A0(0x42u);
      if (!os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        return;
      goto LABEL_116;
    }
    v26 = *((unsigned __int16 *)a1 + 5);
    v27 = *((unsigned __int16 *)a1 + 6);
    if (v26 <= v27)
      goto LABEL_77;
    v28 = *a1;
    *((_WORD *)a1 + 6) = v27 + 1;
    BYTE1(v62) = *(_BYTE *)(v28 + v27);
    if ((int)(v26 - (v27 + 1)) <= 5)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c");
    sub_10004C878((uint64_t)&v62 + 2, v28 + v27 + 1, 6uLL);
    v29 = *((_WORD *)a1 + 6);
    *((_WORD *)a1 + 6) = v29 + 6;
    if (*((_BYTE *)a1 + 15))
      break;
    if (*((_BYTE *)a1 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c");
    v30 = *((unsigned __int16 *)a1 + 5);
    if (v30 <= (unsigned __int16)(v29 + 6))
    {
      *((_BYTE *)a1 + 15) = 1;
      if (!sub_10005549C())
        return;
      sub_100054530("Could not get the primary PHY  of the LE extended advertising report event");
      v51 = sub_1000544A0(0x42u);
      if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        return;
      goto LABEL_116;
    }
    v31 = *a1;
    *((_WORD *)a1 + 6) = v29 + 7;
    BYTE5(ptr[1]) = *(_BYTE *)(v31 + (unsigned __int16)(v29 + 6));
    LOBYTE(v65) = BYTE5(ptr[1]) >> 7;
    BYTE1(v65) = (BYTE5(ptr[1]) & 0x40) != 0;
    BYTE2(v65) = (BYTE5(ptr[1]) & 0x20) != 0;
    if (v30 <= (unsigned __int16)(v29 + 7))
    {
      *((_BYTE *)a1 + 15) = 1;
      if (!sub_10005549C())
        return;
      sub_100054530("Could not get the secondary PHY of the LE extended advertising report event");
      v52 = sub_1000544A0(0x42u);
      if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
        return;
      goto LABEL_116;
    }
    *((_WORD *)a1 + 6) = v29 + 8;
    BYTE6(ptr[1]) = *(_BYTE *)(v31 + (unsigned __int16)(v29 + 7));
    if (v30 <= (unsigned __int16)(v29 + 8))
    {
      *((_BYTE *)a1 + 15) = 1;
      if (!sub_10005549C())
        return;
      sub_100054530("Could not get the advertising SID of the LE extended advertising report event");
      v53 = sub_1000544A0(0x42u);
      if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        return;
      goto LABEL_116;
    }
    *((_WORD *)a1 + 6) = v29 + 9;
    HIBYTE(ptr[1]) = *(_BYTE *)(v31 + (unsigned __int16)(v29 + 8));
    if (v30 <= (unsigned __int16)(v29 + 9))
    {
      *((_BYTE *)a1 + 15) = 1;
      if (!sub_10005549C())
        return;
      sub_100054530("Could not get the advertising SID of the LE extended advertising report event");
      v54 = sub_1000544A0(0x42u);
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        return;
      goto LABEL_116;
    }
    *((_WORD *)a1 + 6) = v29 + 10;
    LOBYTE(v64) = *(_BYTE *)(v31 + (unsigned __int16)(v29 + 9));
    if (v30 <= (unsigned __int16)(v29 + 10))
    {
      *((_BYTE *)a1 + 15) = 1;
      if (!sub_10005549C())
        return;
      sub_100054530("Could not get the advertising SID of the LE extended advertising report event");
      v55 = sub_1000544A0(0x42u);
      if (!os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        return;
      goto LABEL_116;
    }
    *((_WORD *)a1 + 6) = v29 + 11;
    LOBYTE(ptr[1]) = *(_BYTE *)(v31 + (unsigned __int16)(v29 + 10));
    if ((int)(v30 - (unsigned __int16)(v29 + 11)) <= 1)
    {
      *((_BYTE *)a1 + 15) = 1;
      if (!sub_10005549C())
        return;
      sub_100054530("Could not get the periodic advertising interval of the LE extended advertising report event");
      v56 = sub_1000544A0(0x42u);
      if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        return;
      goto LABEL_116;
    }
    WORD1(v64) = *(_WORD *)(v31 + (unsigned __int16)(v29 + 11));
    v32 = v29 + 13;
    *((_WORD *)a1 + 6) = v29 + 13;
    if (v30 <= (unsigned __int16)(v29 + 13))
    {
      *((_BYTE *)a1 + 15) = 1;
      if (!sub_10005549C())
        return;
      sub_100054530("Could not get the direct address type of the LE extended advertising report event");
      v57 = sub_1000544A0(0x42u);
      if (!os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
        return;
      goto LABEL_116;
    }
    v33 = v29 + 14;
    *((_WORD *)a1 + 6) = v33;
    BYTE4(v64) = *(_BYTE *)(v31 + v32);
    if ((int)(v30 - v33) <= 5)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c");
    sub_10004C878((uint64_t)&v64 + 5, v31 + v33, 6uLL);
    v34 = *((_WORD *)a1 + 6);
    *((_WORD *)a1 + 6) = v34 + 6;
    if (*((_BYTE *)a1 + 15))
    {
      if (!sub_10005549C())
        return;
      sub_100054530("Could not get the direct address of the LE extended advertising report event");
      v58 = sub_1000544A0(0x42u);
      if (!os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        return;
      goto LABEL_116;
    }
    if (*((_BYTE *)a1 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c");
    if (*((unsigned __int16 *)a1 + 5) <= (unsigned __int16)(v34 + 6))
    {
      *((_BYTE *)a1 + 15) = 1;
      if (!sub_10005549C())
        return;
      sub_100054530("Could not get the dataLength of the LE extended advertising report event");
      v59 = sub_1000544A0(0x42u);
      if (!os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        return;
      goto LABEL_116;
    }
    v35 = *a1;
    *((_WORD *)a1 + 6) = v34 + 7;
    v36 = (unsigned __int16)(v34 + 6);
    v37 = *(unsigned __int8 *)(v35 + v36);
    WORD4(v62) = *(unsigned __int8 *)(v35 + v36);
    if (v37 >= 0xE6)
    {
      if (!sub_10005549C())
        return;
      sub_100054530("Too many data bytes in the LE extended advertising report event.");
      v60 = sub_1000544A0(0x42u);
      if (!os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
        return;
      goto LABEL_116;
    }
    v38 = sub_100052DC0(v37);
    ptr[0] = v38;
    if (!v38)
      goto LABEL_65;
    v39 = WORD4(v62);
    if (!WORD4(v62))
      goto LABEL_65;
    if (*((_BYTE *)a1 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c");
    v40 = v38;
    v41 = *a1;
    v42 = *((unsigned __int16 *)a1 + 6);
    if (*((_BYTE *)a1 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c", 449, "void _HCIEventHandler_ExtendedAdvertisingReport(OI_BYTE_STREAM *, const HCI_EVENT_DESCRIPTOR *, uint8_t, _Bool)");
      v43 = 0;
    }
    else
    {
      v43 = *((unsigned __int16 *)a1 + 5) - (_DWORD)v42;
    }
    if (v43 < WORD4(v62))
    {
      *((_BYTE *)a1 + 15) = 1;
LABEL_114:
      if (!sub_10005549C())
        return;
      sub_100054530("Could not get the dataLength of the LE extended advertising report event");
      v61 = sub_1000544A0(0x42u);
      if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        return;
LABEL_116:
      sub_1006CE7A4();
      return;
    }
    v44 = (char *)(v41 + v42);
    v45 = &v40[v39];
    do
    {
      v46 = *v44++;
      *v40++ = v46;
    }
    while (v40 < v45);
    *((_WORD *)a1 + 6) += WORD4(v62);
    if (*((_BYTE *)a1 + 15))
      goto LABEL_114;
LABEL_65:
    if (BYTE1(v62) >= 2u)
      BYTE1(v62) -= 2;
    sub_100053D00((unsigned __int16 *)&v62);
    sub_100053298(ptr[0]);
    if (++v9 == v8)
      return;
  }
  if (sub_10005549C())
  {
    sub_100054530("Could not get the address of the LE advertising report event");
    v50 = sub_1000544A0(0x42u);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      goto LABEL_116;
  }
}

uint64_t sub_10004C878(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  char *v4;
  char v5;

  if (a3)
  {
    v3 = 0;
    v4 = (char *)(a3 + a2 - 1);
    do
    {
      v5 = *v4--;
      *(_BYTE *)(result + v3++) = v5;
    }
    while (a3 > v3);
  }
  return result;
}

uint64_t sub_10004C8A0(__int16 a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  NSObject *v14;

  if (dword_100984F08)
    sub_100253460();
  if (!a2 && (_DWORD)a3)
    sub_100253460();
  dword_100984F08 = 1;
  v13 = sub_10004C988((unsigned __int16)a1 | 0xFC00u, a3, a2, a4, a5, a6, a7, a8);
  if ((_DWORD)v13)
  {
    if (sub_10005549C())
    {
      sub_100054530("OI_HCI_VendorCmd failed %d", v13);
      v14 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  else
  {
    word_100984F04 = a1;
  }
  dword_100984F08 = 0;
  return v13;
}

uint64_t sub_10004C988(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10004C9BC(272, a4, a3, (uint64_t)a4, a5, a6, a7, a8, a1);
}

uint64_t sub_10004C9BC(int a1, uint64_t (*a2)(), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  __int128 v20;
  uint64_t (*v21)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *);
  uint64_t (*v22)();
  uint64_t (*v23)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *);
  uint64_t v24;
  void *ptr;
  uint64_t v26;
  uint64_t *v27;

  if (!DWORD2(xmmword_1009991F8))
    return 103;
  if ((sub_100052F88() & 1) != 0)
    return 3704;
  if ((sub_100048064() & 1) != 0)
    return 0;
  if (dword_100998FC8 != 2 && byte_100998FCC == 0)
  {
    result = 627;
    if (a1 <= 161)
    {
      if (((a1 - 98) > 0x33 || ((1 << (a1 - 98)) & 0xBE00214100001) == 0)
        && (a1 - 54) >= 2)
      {
        return result;
      }
    }
    else if (((a1 - 162) > 0x3E || ((1 << (a1 + 94)) & 0x4000002C04002027) == 0)
           && ((a1 - 243) > 0x1D || ((1 << (a1 + 13)) & 0x20190083) == 0))
    {
      return result;
    }
  }
  ptr = 0;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  v27 = &a9;
  v13 = sub_100052DE8((unsigned __int16)a1);
  if (!v13)
    return 616;
  v14 = (uint64_t)v13;
  v15 = *((unsigned __int16 *)v13 + 2);
  if ((v15 & 0xC000) != 0 || (*((_BYTE *)&xmmword_100998FE8 + (v15 >> 8)) & v15) == 0)
    return 628;
  if (v13[17])
    sub_100253460();
  if (*(_BYTE *)(v14 + 16))
    result = sub_10004CC74((int *)v27, v14, (uint64_t *)&ptr, 0, 0, (uint64_t)&v23, 0);
  else
    result = sub_1001952FC(v27, v14, (uint64_t *)&ptr, 0, 0, 0, 0);
  if (!(_DWORD)result)
  {
    v21 = 0;
    *(_QWORD *)&v20 = 0;
    *((_QWORD *)&v20 + 1) = 14;
    WORD2(v20) = *(_WORD *)(v14 + 2);
    WORD3(v20) = a1;
    if (a2)
      v16 = a2;
    else
      v16 = nullsub_101;
    v22 = v16;
    if (a1 == 272)
    {
      if (!*(_BYTE *)(v14 + 16))
        sub_100253460();
      WORD5(v20) = WORD1(v24);
      WORD2(v20) = v24;
      if (v23)
        v21 = v23;
      else
        v21 = (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))nullsub_101;
    }
    else
    {
      v21 = sub_100196414(v14);
    }
    if (*(_BYTE *)(v14 + 22))
    {
      v17 = sub_1001A3D20((uint64_t)ptr, WORD1(v26));
      if ((_DWORD)v17)
      {
        v18 = v17;
        if (sub_10005549C())
        {
          sub_100054530("OI_HCIParmCache failed %!", v18, v20, v21, v22);
          v19 = sub_1000544A0(0x2Eu);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
      }
    }
    return sub_100052E64(ptr, SWORD1(v26), &v20);
  }
  return result;
}

uint64_t sub_10004CC74(int *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _WORD *a5, uint64_t a6, _BYTE *a7)
{
  int v13;
  _BYTE *v14;
  void *v15;
  _WORD *v16;
  int v17;
  _BYTE *v18;
  int *v19;
  int v20;
  int v21;
  char *v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  unsigned __int16 v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int *v34;
  int v35;
  int v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  char *v40;
  unsigned __int8 *v41;
  char *v42;
  int v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int *v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  char *v98;
  _BYTE *v99;
  _BYTE *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  _OWORD *v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int16 v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  int v130;
  int v131;
  uint64_t v132;
  char *v133;
  _BYTE *v134;
  char *v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  unsigned __int8 v147;
  int v148;
  int v149;
  int v150;
  char *v151;
  _BYTE *v152;
  _BYTE *v153;
  int v154;
  unsigned __int8 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int16 v168;
  char v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  unsigned __int8 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __int16 v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned __int16 v197;
  unsigned __int16 v198;
  unsigned __int16 v199;
  unsigned __int16 v200;
  unsigned __int16 v201;
  unsigned __int16 v202;
  unsigned __int16 v203;
  int *v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  uint64_t v215;
  char *v216;
  char *v217;
  _BYTE *v218;
  _BYTE *v219;
  _BYTE *v220;
  _BYTE *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  int *v226;
  int v227;
  uint64_t v228;
  _BYTE **v229;
  _BYTE **v230;
  int *v231;
  int v232;
  int v233;
  int v234;
  _OWORD *v235;
  int v236;
  int v237;
  int v238;
  uint64_t v239;
  char *v240;
  int *v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  size_t v248;
  const void *v249;
  int *v250;
  int v251;
  int v252;
  int v253;
  uint64_t v254;
  char *v255;
  char v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  unsigned __int8 v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  __int16 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unsigned __int16 v291;
  unsigned __int16 v292;
  unsigned __int16 v293;
  unsigned __int16 v294;
  unsigned __int16 v295;
  unsigned __int16 v296;
  unsigned __int16 v297;
  int v298;
  int *v299;
  int v300;
  int v301;
  int v302;
  int v303;
  char *v304;
  char *v305;
  __int128 *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  uint64_t v316;
  uint64_t v317;
  __int128 v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  char v325;
  uint64_t v326;
  uint64_t v327;
  __int16 v328;
  char v329;
  uint64_t v330;
  __int16 v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned __int16 v336;
  __int16 v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unsigned __int16 v344;
  __int16 v345;
  uint64_t v346;
  uint64_t v347;
  char v348;
  uint64_t v349;
  uint64_t v350;
  unsigned __int16 v351;
  __int16 v352;
  char v353;
  uint64_t v354;
  uint64_t v355;
  char v356;
  uint64_t v357;
  uint64_t v358;
  char v359;
  uint64_t v360;
  uint64_t v361;
  char v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unsigned __int16 v368;
  __int16 v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  __int16 v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  char v383;
  uint64_t v384;
  uint64_t v385;
  char v386;
  uint64_t v387;
  uint64_t v388;
  unsigned __int16 v389;
  unsigned __int16 v390;
  unsigned __int16 v391;
  __int16 v392;
  char v393;
  uint64_t v394;
  uint64_t v395;
  char v396;
  uint64_t v397;
  uint64_t v398;
  char v399;
  uint64_t v400;
  uint64_t v401;
  char v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unsigned __int16 v407;
  _BYTE *v408;
  _BYTE *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  __int16 v414;
  uint64_t v415;
  uint64_t v416;
  __int16 v417;
  uint64_t v418;
  uint64_t v419;
  __int16 v420;
  uint64_t v421;
  uint64_t v422;
  char v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  uint64_t v432;
  _BYTE *v433;
  char v434;
  uint64_t v435;
  uint64_t v436;
  char v437;
  uint64_t v438;
  uint64_t v439;
  char v440;
  uint64_t v441;
  uint64_t v442;
  int v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  size_t v448;
  __int16 v449;
  uint64_t v450;
  uint64_t v451;
  unsigned __int16 v452;
  __int16 v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  uint64_t v464;
  uint64_t v465;
  unsigned __int16 v466;
  __int16 v467;
  uint64_t v468;
  uint64_t v469;
  char v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  char v485;
  uint64_t v486;
  _BYTE *v487;
  uint64_t v488;
  uint64_t v489;
  _BYTE *v490;
  uint64_t v491;
  char v492;
  uint64_t v493;
  _WORD *v494;
  _BYTE *v495;
  _QWORD *v497;
  int *v498;
  int *v499;
  int *v500;
  int *v501;
  int *v502;
  char **v503;
  const void **v504;
  char **v505;
  const void **v506;

  v13 = *(unsigned __int16 *)(a2 + 6) + 4;
  v14 = sub_100052DC0(*(unsigned __int16 *)(a2 + 6) + 4);
  if (!v14)
    return 104;
  v15 = v14;
  *((_BYTE *)a3 + 15) = 0;
  *a3 = (uint64_t)v14;
  *((_WORD *)a3 + 4) = v13;
  *((_WORD *)a3 + 5) = v13;
  v16 = (_WORD *)a3 + 5;
  if (!(_WORD)v13)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
  *((_WORD *)a3 + 6) = 1;
  *((_BYTE *)a3 + 14) = 2;
  v494 = (_WORD *)a3 + 6;
  v495 = (char *)a3 + 14;
  *((_WORD *)a3 + 5) = v13;
  *v14 = 1;
  v17 = sub_100052E20(a2);
  if (v17 == 272)
  {
    v18 = (char *)a3 + 14;
    v19 = a1;
    v20 = *a1;
    v21 = a1[2];
    v497 = a1 + 6;
    v22 = (char *)*((_QWORD *)v19 + 2);
    v23 = (_WORD *)a3 + 6;
    if (a6)
    {
      *(_WORD *)(a6 + 8) = v20;
      *(_BYTE *)(a6 + 12) = v21;
      if (v22)
      {
        *(_BYTE *)(a6 + 10) = *v22;
      }
      else
      {
        sub_100253460();
        v23 = (_WORD *)a3 + 6;
        v18 = (char *)a3 + 14;
      }
      if ((v21 & 0xFE) != 0)
        *(_BYTE *)(a6 + 11) = v22[1];
      *(_QWORD *)a6 = *v497;
    }
    if ((~v20 & 0xFC00) == 0)
    {
      if (*((_BYTE *)a3 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1652, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
      }
      else
      {
        v51 = (unsigned __int16)*v23;
        if ((unsigned __int16)*v16 - (int)v51 > 1 && *v18 == 2)
        {
          *(_BYTE *)(*a3 + v51) = v20;
          *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v20);
          v52 = *((_WORD *)a3 + 6);
          *((_WORD *)a3 + 6) = v52 + 2;
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1655, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
          }
          else if ((unsigned __int16)*v16 > (unsigned __int16)(v52 + 2) && *v18 == 2)
          {
            v53 = *a3;
            *((_WORD *)a3 + 6) = v52 + 3;
            *(_BYTE *)(v53 + (unsigned __int16)(v52 + 2)) = v21;
            while ((_BYTE)v21)
            {
              if (*((_BYTE *)a3 + 15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1659, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_630:
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              v54 = (unsigned __int16)*v23;
              if ((unsigned __int16)*v16 <= v54 || *v18 != 2)
                goto LABEL_630;
              --v21;
              v55 = *v22++;
              v56 = *a3;
              *((_WORD *)a3 + 6) = v54 + 1;
              *(_BYTE *)(v56 + v54) = v55;
            }
LABEL_596:
            v86 = 0;
            goto LABEL_622;
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        }
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
    }
    v24 = 623;
    goto LABEL_61;
  }
  if (*((_BYTE *)a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1499, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
    goto LABEL_641;
  }
  v23 = (_WORD *)a3 + 6;
  v18 = (char *)a3 + 14;
  v25 = (unsigned __int16)*v494;
  if ((unsigned __int16)*v16 - (int)v25 <= 1 || *v495 != 2)
LABEL_641:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
  *(_BYTE *)(*a3 + v25) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(a2 + 3);
  v26 = *((_WORD *)a3 + 6);
  v27 = v26 + 2;
  *((_WORD *)a3 + 6) = v26 + 2;
  v24 = 615;
  if (v17 <= 204)
  {
    if (v17 > 99)
    {
      if ((v17 - 134) < 4)
      {
        v28 = *a1;
        if (*((_BYTE *)a3 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1683, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
        }
        else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
        {
          v29 = (char *)*((_QWORD *)a1 + 1);
          v30 = *a3;
          *((_WORD *)a3 + 6) = v26 + 3;
          *(_BYTE *)(v30 + (unsigned __int16)(v26 + 2)) = v28;
          while ((_BYTE)v28)
          {
            if (*((_BYTE *)a3 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1686, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_632:
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
            }
            v31 = (unsigned __int16)*v494;
            if ((unsigned __int16)*v16 <= v31 || *v495 != 2)
              goto LABEL_632;
            LOBYTE(v28) = v28 - 1;
            v32 = *v29++;
            v33 = *a3;
            *((_WORD *)a3 + 6) = v31 + 1;
            *(_BYTE *)(v33 + v31) = v32;
          }
          goto LABEL_596;
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      if (v17 == 100)
      {
        v122 = *a1;
        if (*((_BYTE *)a3 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1601, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
        }
        else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
        {
          v123 = *((_QWORD *)a1 + 1);
          v124 = *a3;
          *((_WORD *)a3 + 6) = v26 + 3;
          *(_BYTE *)(v124 + (unsigned __int16)(v26 + 2)) = 3 * v122 + 1;
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1604, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
          }
          else
          {
            v125 = (unsigned __int16)*v494;
            if ((unsigned __int16)*v16 > v125 && *v495 == 2)
            {
              v126 = *a3;
              *((_WORD *)a3 + 6) = v125 + 1;
              *(_BYTE *)(v126 + v125) = v122;
              v127 = v122;
              if ((_BYTE)v122)
              {
                while (!*((_BYTE *)a3 + 15))
                {
                  v128 = (unsigned __int16)*v494;
                  if ((unsigned __int16)*v16 - (int)v128 <= 2 || *v495 != 2)
                    goto LABEL_639;
                  v86 = 0;
                  *(_BYTE *)(*a3 + v128) = *(_DWORD *)v123;
                  *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(*(_DWORD *)v123);
                  *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 2) = *(_WORD *)(v123 + 2);
                  *((_WORD *)a3 + 6) += 3;
                  v123 += 4;
                  if (!--v127)
                    goto LABEL_622;
                }
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1607, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_639:
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              goto LABEL_596;
            }
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      if (v17 == 138)
      {
        v75 = *a1;
        v76 = a1[2];
        v77 = (_BYTE *)*((_QWORD *)a1 + 2);
        if (*((_BYTE *)a3 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1711, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
        }
        else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
        {
          v78 = (_BYTE *)*((_QWORD *)a1 + 3);
          v79 = *a3;
          *((_WORD *)a3 + 6) = v26 + 3;
          *(_BYTE *)(v79 + (unsigned __int16)(v26 + 2)) = v75;
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1712, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
          }
          else
          {
            v80 = (unsigned __int16)*v494;
            if ((unsigned __int16)*v16 > v80 && *v495 == 2)
            {
              v81 = *a3;
              *((_WORD *)a3 + 6) = v80 + 1;
              *(_BYTE *)(v81 + v80) = v76;
              v82 = v76;
              if ((_BYTE)v76)
              {
                v83 = v76;
                while (!*((_BYTE *)a3 + 15))
                {
                  v84 = (unsigned __int16)*v494;
                  if ((unsigned __int16)*v16 - (int)v84 <= 1 || *v495 != 2)
                    goto LABEL_635;
                  *(_BYTE *)(*a3 + v84) = *v77;
                  *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v77[1];
                  *((_WORD *)a3 + 6) += 2;
                  v77 += 2;
                  if (!--v83)
                  {
                    while (!*((_BYTE *)a3 + 15))
                    {
                      v85 = (unsigned __int16)*v494;
                      if ((unsigned __int16)*v16 - (int)v85 <= 1 || *v495 != 2)
                        goto LABEL_637;
                      v86 = 0;
                      *(_BYTE *)(*a3 + v85) = *v78;
                      *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v78[1];
                      *((_WORD *)a3 + 6) += 2;
                      v78 += 2;
                      if (!--v82)
                        goto LABEL_622;
                    }
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1719, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_637:
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                  }
                }
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1715, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_635:
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              goto LABEL_596;
            }
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
LABEL_61:
      sub_100053298(v15);
      return v24;
    }
    if (v17 != 56)
    {
      if (v17 != 62)
      {
        if (v17 != 95)
          goto LABEL_61;
        v43 = *a1;
        if (*((_BYTE *)a3 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1578, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
        }
        else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
        {
          v44 = a1[2];
          v45 = *(_BYTE *)(a2 + 6);
          v46 = *a3;
          *((_WORD *)a3 + 6) = v26 + 3;
          *(_BYTE *)(v46 + (unsigned __int16)(v26 + 2)) = v45;
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1580, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
          }
          else
          {
            v47 = (unsigned __int16)*v494;
            if ((unsigned __int16)*v16 > v47 && *v495 == 2)
            {
              v48 = *a3;
              *((_WORD *)a3 + 6) = v47 + 1;
              *(_BYTE *)(v48 + v47) = 1;
              if (*((_BYTE *)a3 + 15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1581, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
              }
              else
              {
                v49 = (unsigned __int16)*v494;
                if ((unsigned __int16)*v16 - (int)v49 > 1 && *v495 == 2)
                {
                  *(_BYTE *)(*a3 + v49) = v43;
                  *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v43);
                  v50 = *((_WORD *)a3 + 6) + 2;
                  *((_WORD *)a3 + 6) = v50;
                  if (*((_BYTE *)a3 + 15))
                  {
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1582, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                  }
                  else if ((unsigned __int16)*v16 - v50 > 1 && *v495 == 2)
                  {
                    *(_BYTE *)(*a3 + v50) = v44;
                    *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v44);
                    *((_WORD *)a3 + 6) += 2;
LABEL_126:
                    v86 = 1;
                    goto LABEL_622;
                  }
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                }
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
            }
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      v114 = *(_QWORD *)a1;
      if (*((_BYTE *)a3 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1554, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
      }
      else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
      {
        v115 = (_OWORD *)*((_QWORD *)a1 + 1);
        v116 = *(_BYTE *)(a2 + 6);
        v117 = *a3;
        *((_WORD *)a3 + 6) = v26 + 3;
        *(_BYTE *)(v117 + (unsigned __int16)(v26 + 2)) = v116;
        if (*((_BYTE *)a3 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1556, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
        }
        else
        {
          v118 = (unsigned __int16)*v494;
          if ((unsigned __int16)*v16 > v118 && *v495 == 2)
          {
            v119 = *a3;
            *((_WORD *)a3 + 6) = v118 + 1;
            *(_BYTE *)(v119 + v118) = 1;
            if (*((_BYTE *)a3 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1557, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            }
            else
            {
              v120 = (unsigned __int16)*v494;
              if ((unsigned __int16)*v16 - (int)v120 > 5 && *v495 == 2)
              {
                sub_10004C878(*a3 + v120, v114, 6uLL);
                v121 = *((_WORD *)a3 + 6) + 6;
                *((_WORD *)a3 + 6) = v121;
                if (*((_BYTE *)a3 + 15))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1558, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                }
                else
                {
                  v23 = (_WORD *)a3 + 6;
                  v18 = (char *)a3 + 14;
                  if ((unsigned __int16)*v16 - (unint64_t)v121 > 0xF && *v495 == 2)
                  {
                    *(_OWORD *)(*a3 + v121) = *v115;
                    *v494 += 16;
                    goto LABEL_126;
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
    }
    v105 = *a1;
    v106 = a1[2];
    v107 = a1[4];
    if (*((_BYTE *)a3 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1525, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
    }
    else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
    {
      v61 = (const void *)*((_QWORD *)a1 + 3);
      v108 = *a3;
      *((_WORD *)a3 + 6) = v26 + 3;
      *(_BYTE *)(v108 + (unsigned __int16)(v26 + 2)) = v107 + 2;
      if (*((_BYTE *)a3 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1528, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
      }
      else
      {
        v109 = (unsigned __int16)*v494;
        if ((unsigned __int16)*v16 > v109 && *v495 == 2)
        {
          v110 = *a3;
          *((_WORD *)a3 + 6) = v109 + 1;
          *(_BYTE *)(v110 + v109) = v105;
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1529, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
          }
          else
          {
            v111 = (unsigned __int16)*v494;
            if ((unsigned __int16)*v16 > v111 && *v495 == 2)
            {
              v70 = v107;
              v112 = *a3;
              *((_WORD *)a3 + 6) = v111 + 1;
              *(_BYTE *)(v112 + v111) = v106;
              v72 = *a3;
              v73 = *((unsigned __int16 *)a3 + 6);
              if (*((_BYTE *)a3 + 15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1530, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                v18 = (char *)a3 + 14;
                v113 = 0;
              }
              else
              {
                v113 = (unsigned __int16)*v16 - (_DWORD)v73;
              }
              if (v113 < (int)v70 || *v18 != 2)
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_350:
              memmove((void *)(v72 + v73), v61, v70);
              v86 = 0;
              v23 = (_WORD *)a3 + 6;
              v331 = *v494 + v70;
LABEL_620:
              *v23 = v331;
LABEL_621:
              v18 = (char *)a3 + 14;
              goto LABEL_622;
            }
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        }
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
  }
  switch(v17)
  {
    case 205:
    case 206:
      v57 = *a1;
      v58 = a1[2];
      v59 = a1[4];
      v60 = a1[6];
      if (*((_BYTE *)a3 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1841, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
      }
      else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
      {
        v61 = (const void *)*((_QWORD *)a1 + 4);
        v62 = *a3;
        *((_WORD *)a3 + 6) = v26 + 3;
        *(_BYTE *)(v62 + (unsigned __int16)(v26 + 2)) = v60 + 4;
        if (*((_BYTE *)a3 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1842, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
        }
        else
        {
          v63 = (unsigned __int16)*v494;
          if ((unsigned __int16)*v16 > v63 && *v495 == 2)
          {
            v64 = *a3;
            *((_WORD *)a3 + 6) = v63 + 1;
            *(_BYTE *)(v64 + v63) = v57;
            if (*((_BYTE *)a3 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1843, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            }
            else
            {
              v65 = (unsigned __int16)*v494;
              if ((unsigned __int16)*v16 > v65 && *v495 == 2)
              {
                v66 = *a3;
                *((_WORD *)a3 + 6) = v65 + 1;
                *(_BYTE *)(v66 + v65) = v58;
                if (*((_BYTE *)a3 + 15))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1844, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                }
                else
                {
                  v67 = (unsigned __int16)*v494;
                  if ((unsigned __int16)*v16 > v67 && *v495 == 2)
                  {
                    v68 = *a3;
                    *((_WORD *)a3 + 6) = v67 + 1;
                    *(_BYTE *)(v68 + v67) = v59;
                    if (*((_BYTE *)a3 + 15))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1845, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                    }
                    else
                    {
                      v69 = (unsigned __int16)*v494;
                      if ((unsigned __int16)*v16 > v69 && *v495 == 2)
                      {
                        v70 = v60;
                        v71 = *a3;
                        *((_WORD *)a3 + 6) = v69 + 1;
                        *(_BYTE *)(v71 + v69) = v60;
                        v72 = *a3;
                        v73 = *((unsigned __int16 *)a3 + 6);
                        if (*((_BYTE *)a3 + 15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1846, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                          v18 = (char *)a3 + 14;
                          v74 = 0;
                        }
                        else
                        {
                          v74 = (unsigned __int16)*v16 - (_DWORD)v73;
                        }
                        if (v74 < (int)v70)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        if (*v18 != 2)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        goto LABEL_350;
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
    case 207:
      v129 = a1;
      v130 = *a1;
      v500 = a1 + 4;
      v131 = v129[2];
      v132 = v131;
      if ((_BYTE)v131)
      {
        v133 = *(char **)v500;
        v134 = (_BYTE *)*((_QWORD *)v500 + 1);
        v135 = (char *)*((_QWORD *)v500 + 2);
      }
      else
      {
        v135 = 0;
        v134 = 0;
        v133 = 0;
      }
      if (*((_BYTE *)a3 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1752, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
      }
      else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
      {
        v319 = *a3;
        *((_WORD *)a3 + 6) = v26 + 3;
        *(_BYTE *)(v319 + (unsigned __int16)(v26 + 2)) = (4 * v131) | 2;
        if (*((_BYTE *)a3 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1753, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
        }
        else
        {
          v320 = (unsigned __int16)*v494;
          if ((unsigned __int16)*v16 > v320 && *v495 == 2)
          {
            v321 = *a3;
            *((_WORD *)a3 + 6) = v320 + 1;
            *(_BYTE *)(v321 + v320) = v130;
            if (*((_BYTE *)a3 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1754, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            }
            else
            {
              v322 = (unsigned __int16)*v494;
              if ((unsigned __int16)*v16 > v322 && *v495 == 2)
              {
                v323 = *a3;
                *((_WORD *)a3 + 6) = v322 + 1;
                *(_BYTE *)(v323 + v322) = v131;
                if ((_BYTE)v131)
                {
                  while (!*((_BYTE *)a3 + 15))
                  {
                    v324 = (unsigned __int16)*v494;
                    if ((unsigned __int16)*v16 <= v324 || *v495 != 2)
                      goto LABEL_649;
                    v325 = *v133;
                    v326 = *a3;
                    *((_WORD *)a3 + 6) = v324 + 1;
                    *(_BYTE *)(v326 + v324) = v325;
                    if (*((_BYTE *)a3 + 15))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1758, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_651:
                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                    }
                    v327 = (unsigned __int16)*v494;
                    if ((unsigned __int16)*v16 - (int)v327 <= 1 || *v495 != 2)
                      goto LABEL_651;
                    *(_BYTE *)(*a3 + v327) = *v134;
                    *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v134[1];
                    v328 = *((_WORD *)a3 + 6);
                    *((_WORD *)a3 + 6) = v328 + 2;
                    if (*((_BYTE *)a3 + 15))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1759, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_653:
                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                    }
                    if ((unsigned __int16)*v16 <= (unsigned __int16)(v328 + 2) || *v495 != 2)
                      goto LABEL_653;
                    v86 = 0;
                    v329 = *v135++;
                    v330 = *a3;
                    *((_WORD *)a3 + 6) = v328 + 3;
                    *(_BYTE *)(v330 + (unsigned __int16)(v328 + 2)) = v329;
                    v134 += 2;
                    ++v133;
                    if (!--v132)
                      goto LABEL_622;
                  }
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1757, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_649:
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                }
                goto LABEL_596;
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 214:
    case 216:
      goto LABEL_61;
    case 213:
      v136 = *a1;
      v137 = a1[2];
      v138 = a1[4];
      if (*((_BYTE *)a3 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1873, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
      }
      else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
      {
        v61 = (const void *)*((_QWORD *)a1 + 3);
        v139 = *a3;
        *((_WORD *)a3 + 6) = v26 + 3;
        *(_BYTE *)(v139 + (unsigned __int16)(v26 + 2)) = v138 + 3;
        if (*((_BYTE *)a3 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1874, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
        }
        else
        {
          v140 = (unsigned __int16)*v494;
          if ((unsigned __int16)*v16 > v140 && *v495 == 2)
          {
            v141 = *a3;
            *((_WORD *)a3 + 6) = v140 + 1;
            *(_BYTE *)(v141 + v140) = v136;
            if (*((_BYTE *)a3 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1875, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            }
            else
            {
              v142 = (unsigned __int16)*v494;
              if ((unsigned __int16)*v16 > v142 && *v495 == 2)
              {
                v143 = *a3;
                *((_WORD *)a3 + 6) = v142 + 1;
                *(_BYTE *)(v143 + v142) = v137;
                if (*((_BYTE *)a3 + 15))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1876, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                }
                else
                {
                  v144 = (unsigned __int16)*v494;
                  if ((unsigned __int16)*v16 > v144 && *v495 == 2)
                  {
                    v70 = v138;
                    v145 = *a3;
                    *((_WORD *)a3 + 6) = v144 + 1;
                    *(_BYTE *)(v145 + v144) = v138;
                    v72 = *a3;
                    v73 = *((unsigned __int16 *)a3 + 6);
                    if (*((_BYTE *)a3 + 15))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1877, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                      v18 = (char *)a3 + 14;
                      v146 = 0;
                    }
                    else
                    {
                      v146 = (unsigned __int16)*v16 - (_DWORD)v73;
                    }
                    if (v146 < (int)v70 || *v18 != 2)
                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                    goto LABEL_350;
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
    case 215:
      v147 = 0;
      v148 = *a1;
      v149 = a1[2];
      v150 = a1[4];
      v151 = (char *)*((_QWORD *)a1 + 3);
      v152 = (_BYTE *)*((_QWORD *)a1 + 4);
      v153 = (_BYTE *)*((_QWORD *)a1 + 5);
      v154 = 8;
      v155 = v150;
      do
      {
        v147 += v155 & 1;
        v155 >>= 1;
        --v154;
      }
      while (v154);
      if (*((_BYTE *)a3 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1800, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
      }
      else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
      {
        v156 = *a3;
        *((_WORD *)a3 + 6) = v26 + 3;
        *(_BYTE *)(v156 + (unsigned __int16)(v26 + 2)) = 5 * v147 + 4;
        if (*((_BYTE *)a3 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1801, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
        }
        else
        {
          v157 = (unsigned __int16)*v494;
          if ((unsigned __int16)*v16 > v157 && *v495 == 2)
          {
            v158 = *a3;
            *((_WORD *)a3 + 6) = v157 + 1;
            *(_BYTE *)(v158 + v157) = v148;
            if (*((_BYTE *)a3 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1802, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            }
            else
            {
              v159 = (unsigned __int16)*v494;
              if ((unsigned __int16)*v16 > v159 && *v495 == 2)
              {
                v160 = *a3;
                *((_WORD *)a3 + 6) = v159 + 1;
                *(_BYTE *)(v160 + v159) = v149;
                if (*((_BYTE *)a3 + 15))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1803, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                }
                else
                {
                  v161 = (unsigned __int16)*v494;
                  if ((unsigned __int16)*v16 > v161 && *v495 == 2)
                  {
                    v162 = *a3;
                    *((_WORD *)a3 + 6) = v161 + 1;
                    *(_BYTE *)(v162 + v161) = v150;
                    if (v147)
                    {
                      v163 = v147;
                      while (!*((_BYTE *)a3 + 15))
                      {
                        v164 = (unsigned __int16)*v494;
                        if ((unsigned __int16)*v16 <= v164 || *v495 != 2)
                          goto LABEL_643;
                        v165 = *v151;
                        v166 = *a3;
                        *((_WORD *)a3 + 6) = v164 + 1;
                        *(_BYTE *)(v166 + v164) = v165;
                        if (*((_BYTE *)a3 + 15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1808, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_645:
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        }
                        v167 = (unsigned __int16)*v494;
                        if ((unsigned __int16)*v16 - (int)v167 <= 1 || *v495 != 2)
                          goto LABEL_645;
                        *(_BYTE *)(*a3 + v167) = *v152;
                        *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v152[1];
                        v168 = *((_WORD *)a3 + 6) + 2;
                        *((_WORD *)a3 + 6) = v168;
                        if (*((_BYTE *)a3 + 15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1809, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_647:
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        }
                        if ((unsigned __int16)*v16 - v168 <= 1 || *v495 != 2)
                          goto LABEL_647;
                        v86 = 0;
                        *(_BYTE *)(*a3 + v168) = *v153;
                        *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v153[1];
                        *((_WORD *)a3 + 6) += 2;
                        v153 += 2;
                        v152 += 2;
                        ++v151;
                        if (!--v163)
                          goto LABEL_622;
                      }
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1807, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_643:
                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                    }
                    goto LABEL_596;
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
    case 217:
      v169 = 0;
      v170 = *a1;
      v171 = a1[2];
      v172 = a1[4];
      v173 = *((_QWORD *)a1 + 3);
      v174 = a1[8];
      v175 = *((_QWORD *)a1 + 5);
      v176 = *((_QWORD *)a1 + 6);
      v177 = *((_QWORD *)a1 + 7);
      v178 = *((_QWORD *)a1 + 8);
      v179 = *((_QWORD *)a1 + 9);
      v180 = *((_QWORD *)a1 + 10);
      v181 = *((_QWORD *)a1 + 11);
      v182 = *((_QWORD *)a1 + 12);
      v183 = 8;
      v184 = v174;
      do
      {
        v169 += v184 & 1;
        v184 >>= 1;
        --v183;
      }
      while (v183);
      if (*((_BYTE *)a3 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1942, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
      }
      else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
      {
        v185 = *a3;
        *((_WORD *)a3 + 6) = v26 + 3;
        *(_BYTE *)(v185 + (unsigned __int16)(v26 + 2)) = (16 * v169) | 0xA;
        if (*((_BYTE *)a3 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1943, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
        }
        else
        {
          v186 = (unsigned __int16)*v494;
          if ((unsigned __int16)*v16 > v186 && *v495 == 2)
          {
            v187 = *a3;
            *((_WORD *)a3 + 6) = v186 + 1;
            *(_BYTE *)(v187 + v186) = v170;
            if (*((_BYTE *)a3 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1944, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            }
            else
            {
              v188 = (unsigned __int16)*v494;
              if ((unsigned __int16)*v16 > v188 && *v495 == 2)
              {
                v189 = *a3;
                *((_WORD *)a3 + 6) = v188 + 1;
                *(_BYTE *)(v189 + v188) = v171;
                if (*((_BYTE *)a3 + 15))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1945, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                }
                else
                {
                  v190 = (unsigned __int16)*v494;
                  if ((unsigned __int16)*v16 > v190 && *v495 == 2)
                  {
                    v191 = *a3;
                    *((_WORD *)a3 + 6) = v190 + 1;
                    *(_BYTE *)(v191 + v190) = v172;
                    if (*((_BYTE *)a3 + 15))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1946, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                    }
                    else
                    {
                      v192 = (unsigned __int16)*v494;
                      if ((unsigned __int16)*v16 - (int)v192 > 5)
                      {
                        v488 = v181;
                        v491 = v180;
                        if (*v495 == 2)
                        {
                          sub_10004C878(*a3 + v192, v173, 6uLL);
                          v193 = *((_WORD *)a3 + 6);
                          *((_WORD *)a3 + 6) = v193 + 6;
                          if (*((_BYTE *)a3 + 15))
                          {
                            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1947, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                          }
                          else
                          {
                            v18 = (char *)a3 + 14;
                            if ((unsigned __int16)*v16 > (unsigned __int16)(v193 + 6))
                            {
                              v23 = (_WORD *)a3 + 6;
                              if (*v495 == 2)
                              {
                                v194 = 0;
                                v195 = *a3;
                                *((_WORD *)a3 + 6) = v193 + 7;
                                *(_BYTE *)(v195 + (unsigned __int16)(v193 + 6)) = v174;
                                while (1)
                                {
                                  if ((v174 & 1) != 0)
                                  {
                                    if (*((_BYTE *)a3 + 15))
                                    {
                                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1953, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_716:
                                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/"
                                                             "Stack/corestack/hci/hcicmdapi.c");
                                    }
                                    v196 = (unsigned __int16)*v494;
                                    if ((unsigned __int16)*v16 - (int)v196 <= 1 || *v495 != 2)
                                      goto LABEL_716;
                                    *(_BYTE *)(*a3 + v196) = *(_BYTE *)(v175 + v194);
                                    *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v175 + v194 + 1);
                                    v197 = *((_WORD *)a3 + 6) + 2;
                                    *((_WORD *)a3 + 6) = v197;
                                    if (*((_BYTE *)a3 + 15))
                                    {
                                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1954, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_718:
                                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/"
                                                             "Stack/corestack/hci/hcicmdapi.c");
                                    }
                                    if ((unsigned __int16)*v16 - v197 <= 1 || *v495 != 2)
                                      goto LABEL_718;
                                    *(_BYTE *)(*a3 + v197) = *(_BYTE *)(v176 + v194);
                                    *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v176 + v194 + 1);
                                    v198 = *((_WORD *)a3 + 6) + 2;
                                    *((_WORD *)a3 + 6) = v198;
                                    if (*((_BYTE *)a3 + 15))
                                    {
                                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1955, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_720:
                                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/"
                                                             "Stack/corestack/hci/hcicmdapi.c");
                                    }
                                    if ((unsigned __int16)*v16 - v198 <= 1 || *v495 != 2)
                                      goto LABEL_720;
                                    *(_BYTE *)(*a3 + v198) = *(_BYTE *)(v177 + v194);
                                    *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v177 + v194 + 1);
                                    v199 = *((_WORD *)a3 + 6) + 2;
                                    *((_WORD *)a3 + 6) = v199;
                                    if (*((_BYTE *)a3 + 15))
                                    {
                                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1956, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_722:
                                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/"
                                                             "Stack/corestack/hci/hcicmdapi.c");
                                    }
                                    if ((unsigned __int16)*v16 - v199 <= 1 || *v495 != 2)
                                      goto LABEL_722;
                                    *(_BYTE *)(*a3 + v199) = *(_BYTE *)(v178 + v194);
                                    *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v178 + v194 + 1);
                                    v200 = *((_WORD *)a3 + 6) + 2;
                                    *((_WORD *)a3 + 6) = v200;
                                    if (*((_BYTE *)a3 + 15))
                                    {
                                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1957, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_724:
                                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/"
                                                             "Stack/corestack/hci/hcicmdapi.c");
                                    }
                                    if ((unsigned __int16)*v16 - v200 <= 1 || *v495 != 2)
                                      goto LABEL_724;
                                    *(_BYTE *)(*a3 + v200) = *(_BYTE *)(v179 + v194);
                                    *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v179 + v194 + 1);
                                    v201 = *((_WORD *)a3 + 6) + 2;
                                    *((_WORD *)a3 + 6) = v201;
                                    if (*((_BYTE *)a3 + 15))
                                    {
                                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1958, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_726:
                                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/"
                                                             "Stack/corestack/hci/hcicmdapi.c");
                                    }
                                    if ((unsigned __int16)*v16 - v201 <= 1 || *v495 != 2)
                                      goto LABEL_726;
                                    *(_BYTE *)(*a3 + v201) = *(_BYTE *)(v491 + v194);
                                    *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v491 + v194 + 1);
                                    v202 = *((_WORD *)a3 + 6) + 2;
                                    *((_WORD *)a3 + 6) = v202;
                                    if (*((_BYTE *)a3 + 15))
                                    {
                                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1959, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_728:
                                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/"
                                                             "Stack/corestack/hci/hcicmdapi.c");
                                    }
                                    if ((unsigned __int16)*v16 - v202 <= 1 || *v495 != 2)
                                      goto LABEL_728;
                                    *(_BYTE *)(*a3 + v202) = *(_BYTE *)(v488 + v194);
                                    *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v488 + v194 + 1);
                                    v203 = *((_WORD *)a3 + 6) + 2;
                                    *((_WORD *)a3 + 6) = v203;
                                    if (*((_BYTE *)a3 + 15))
                                    {
                                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1960, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_730:
                                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/"
                                                             "Stack/corestack/hci/hcicmdapi.c");
                                    }
                                    if ((unsigned __int16)*v16 - v203 <= 1 || *v495 != 2)
                                      goto LABEL_730;
                                    *(_BYTE *)(*a3 + v203) = *(_BYTE *)(v182 + v194);
                                    *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v182 + v194 + 1);
                                    *((_WORD *)a3 + 6) += 2;
                                  }
                                  v86 = 0;
                                  LOBYTE(v174) = v174 >> 1;
                                  v194 += 2;
                                  if (v194 == 16)
                                    goto LABEL_622;
                                }
                              }
                            }
                          }
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        }
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
    default:
      switch(v17)
      {
        case 253:
          v34 = a1;
          v35 = *a1;
          v498 = a1 + 4;
          v36 = v34[2];
          v37 = v36;
          if ((_BYTE)v36)
          {
            v38 = *(_BYTE **)v498;
            v39 = (_BYTE *)*((_QWORD *)v498 + 1);
            v40 = (char *)*((_QWORD *)v498 + 2);
            v41 = (unsigned __int8 *)*((_QWORD *)v498 + 3);
            v42 = (char *)*((_QWORD *)v498 + 4);
          }
          else
          {
            v38 = 0;
            v39 = 0;
            v40 = 0;
            v41 = 0;
            v42 = 0;
          }
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2285, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
          }
          else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
          {
            v425 = *a3;
            v426 = (unsigned __int16)(v26 + 2);
            *((_WORD *)a3 + 6) = v26 + 3;
            *(_BYTE *)(v425 + v426) = (4 * v36) | 2;
            if (*((_BYTE *)a3 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2286, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            }
            else
            {
              v427 = (unsigned __int16)*v494;
              if ((unsigned __int16)*v16 > v427 && *v495 == 2)
              {
                v428 = *a3;
                *((_WORD *)a3 + 6) = v427 + 1;
                *(_BYTE *)(v428 + v427) = v35;
                if (*((_BYTE *)a3 + 15))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2287, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                }
                else
                {
                  v429 = (unsigned __int16)*v494;
                  if ((unsigned __int16)*v16 > v429 && *v495 == 2)
                  {
                    v481 = v426;
                    v483 = v425;
                    v485 = (4 * v36) | 2;
                    v430 = *a3;
                    *((_WORD *)a3 + 6) = v429 + 1;
                    *(_BYTE *)(v430 + v429) = v36;
                    v431 = 0;
                    if ((_BYTE)v36)
                    {
                      do
                      {
                        if (*((_BYTE *)a3 + 15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2290, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_705:
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        }
                        v432 = (unsigned __int16)*v23;
                        v433 = (char *)a3 + 14;
                        if ((unsigned __int16)*v16 <= v432 || *v495 != 2)
                          goto LABEL_705;
                        v434 = *v38;
                        v435 = *a3;
                        *((_WORD *)a3 + 6) = v432 + 1;
                        *(_BYTE *)(v435 + v432) = v434;
                        if (*((_BYTE *)a3 + 15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2291, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_707:
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        }
                        v436 = (unsigned __int16)*v23;
                        if ((unsigned __int16)*v16 <= v436 || *v495 != 2)
                          goto LABEL_707;
                        v437 = *v39;
                        v438 = *a3;
                        *((_WORD *)a3 + 6) = v436 + 1;
                        *(_BYTE *)(v438 + v436) = v437;
                        if (*((_BYTE *)a3 + 15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2292, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_709:
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        }
                        v439 = (unsigned __int16)*v23;
                        if ((unsigned __int16)*v16 <= v439 || *v495 != 2)
                          goto LABEL_709;
                        v440 = *v40;
                        v441 = *a3;
                        *((_WORD *)a3 + 6) = v439 + 1;
                        *(_BYTE *)(v441 + v439) = v440;
                        if (*((_BYTE *)a3 + 15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2294, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_711:
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        }
                        v442 = (unsigned __int16)*v23;
                        if ((unsigned __int16)*v16 <= v442 || *v495 != 2)
                          goto LABEL_711;
                        v487 = v39;
                        v490 = v38;
                        v493 = v37;
                        v443 = *v41;
                        v444 = *a3;
                        *((_WORD *)a3 + 6) = v442 + 1;
                        *(_BYTE *)(v444 + v442) = v443;
                        v445 = *a3;
                        v446 = *((unsigned __int16 *)a3 + 6);
                        if (*((_BYTE *)a3 + 15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2295, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                          v433 = (char *)a3 + 14;
                          v447 = 0;
                        }
                        else
                        {
                          v447 = (unsigned __int16)*v16 - (_DWORD)v446;
                        }
                        v448 = *v41;
                        if (v447 < (int)v448 || *v433 != 2)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        v431 += v443;
                        memmove((void *)(v445 + v446), v42, v448);
                        v449 = *v41++;
                        v23 = (_WORD *)a3 + 6;
                        v42 += v431;
                        *v494 += v449;
                        ++v40;
                        v39 = v487 + 1;
                        v38 = v490 + 1;
                        v37 = v493 - 1;
                      }
                      while (v493 != 1);
                    }
                    v86 = 0;
                    *(_BYTE *)(v483 + v481) = v431 + v485;
                    goto LABEL_621;
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        case 254:
          v241 = a1;
          v242 = *a1;
          v243 = a1[2];
          v244 = a1[4];
          v245 = a1[6];
          v246 = a1[8];
          v504 = (const void **)(a1 + 12);
          v247 = v241[10];
          v248 = v247;
          if ((_BYTE)v247)
            v249 = *v504;
          else
            v249 = 0;
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2332, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
          }
          else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
          {
            v450 = *a3;
            *((_WORD *)a3 + 6) = v26 + 3;
            *(_BYTE *)(v450 + (unsigned __int16)(v26 + 2)) = v247 + 8;
            if (*((_BYTE *)a3 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2333, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            }
            else
            {
              v451 = (unsigned __int16)*v494;
              if ((unsigned __int16)*v16 - (int)v451 > 1 && *v495 == 2)
              {
                *(_BYTE *)(*a3 + v451) = v242;
                *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v242);
                v452 = *((_WORD *)a3 + 6) + 2;
                *((_WORD *)a3 + 6) = v452;
                if (*((_BYTE *)a3 + 15))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2334, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                }
                else if ((unsigned __int16)*v16 - v452 > 1 && *v495 == 2)
                {
                  *(_BYTE *)(*a3 + v452) = v243;
                  *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v243);
                  v453 = *((_WORD *)a3 + 6);
                  *((_WORD *)a3 + 6) = v453 + 2;
                  if (*((_BYTE *)a3 + 15))
                  {
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2335, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                  }
                  else if ((unsigned __int16)*v16 > (unsigned __int16)(v453 + 2) && *v495 == 2)
                  {
                    v454 = *a3;
                    *((_WORD *)a3 + 6) = v453 + 3;
                    *(_BYTE *)(v454 + (unsigned __int16)(v453 + 2)) = v244;
                    if (*((_BYTE *)a3 + 15))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2336, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                    }
                    else
                    {
                      v455 = (unsigned __int16)*v494;
                      if ((unsigned __int16)*v16 > v455 && *v495 == 2)
                      {
                        v456 = *a3;
                        *((_WORD *)a3 + 6) = v455 + 1;
                        *(_BYTE *)(v456 + v455) = v245;
                        if (*((_BYTE *)a3 + 15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2337, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                        }
                        else
                        {
                          v457 = (unsigned __int16)*v494;
                          if ((unsigned __int16)*v16 > v457 && *v495 == 2)
                          {
                            v458 = *a3;
                            *((_WORD *)a3 + 6) = v457 + 1;
                            *(_BYTE *)(v458 + v457) = v246;
                            if (*((_BYTE *)a3 + 15))
                            {
                              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2338, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                            }
                            else
                            {
                              v459 = (unsigned __int16)*v494;
                              if ((unsigned __int16)*v16 > v459 && *v495 == 2)
                              {
                                v460 = *a3;
                                *((_WORD *)a3 + 6) = v459 + 1;
                                *(_BYTE *)(v460 + v459) = v247;
                                v461 = *a3;
                                v462 = *((unsigned __int16 *)a3 + 6);
                                if (*((_BYTE *)a3 + 15))
                                {
                                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2339, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                                  v18 = (char *)a3 + 14;
                                  v463 = 0;
                                }
                                else
                                {
                                  v463 = (unsigned __int16)*v16 - (_DWORD)v462;
                                }
                                if (v463 < (int)v248 || *v18 != 2)
                                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stac"
                                                         "k/corestack/hci/hcicmdapi.c");
LABEL_619:
                                memmove((void *)(v461 + v462), v249, v248);
                                v86 = 0;
                                v23 = (_WORD *)a3 + 6;
                                v331 = *v494 + v248;
                                goto LABEL_620;
                              }
                            }
                            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/core"
                                                   "stack/hci/hcicmdapi.c");
                          }
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestac"
                                               "k/hci/hcicmdapi.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                  }
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        case 255:
          v250 = a1;
          v251 = *a1;
          v252 = a1[2];
          v505 = (char **)(a1 + 6);
          v253 = v250[4];
          v254 = v253;
          if ((_BYTE)v253)
            v255 = *v505;
          else
            v255 = 0;
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2364, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
          }
          else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
          {
            v464 = *a3;
            *((_WORD *)a3 + 6) = v26 + 3;
            *(_BYTE *)(v464 + (unsigned __int16)(v26 + 2)) = v253 + 5;
            if (*((_BYTE *)a3 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2365, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            }
            else
            {
              v465 = (unsigned __int16)*v494;
              if ((unsigned __int16)*v16 - (int)v465 > 1 && *v495 == 2)
              {
                *(_BYTE *)(*a3 + v465) = v251;
                *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v251);
                v466 = *((_WORD *)a3 + 6) + 2;
                *((_WORD *)a3 + 6) = v466;
                if (*((_BYTE *)a3 + 15))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2366, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                }
                else if ((unsigned __int16)*v16 - v466 > 1 && *v495 == 2)
                {
                  *(_BYTE *)(*a3 + v466) = v252;
                  *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v252);
                  v467 = *((_WORD *)a3 + 6);
                  *((_WORD *)a3 + 6) = v467 + 2;
                  if (*((_BYTE *)a3 + 15))
                  {
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2367, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                  }
                  else if ((unsigned __int16)*v16 > (unsigned __int16)(v467 + 2) && *v495 == 2)
                  {
                    v468 = *a3;
                    *((_WORD *)a3 + 6) = v467 + 3;
                    *(_BYTE *)(v468 + (unsigned __int16)(v467 + 2)) = v253;
                    if ((_BYTE)v253)
                    {
                      while (!*((_BYTE *)a3 + 15))
                      {
                        v469 = (unsigned __int16)*v494;
                        if ((unsigned __int16)*v16 <= v469 || *v495 != 2)
                          goto LABEL_714;
                        v86 = 0;
                        v470 = *v255++;
                        v471 = *a3;
                        *((_WORD *)a3 + 6) = v469 + 1;
                        *(_BYTE *)(v471 + v469) = v470;
                        if (!--v254)
                          goto LABEL_622;
                      }
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2369, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_714:
                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                    }
                    goto LABEL_596;
                  }
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        case 256:
          v256 = 0;
          v257 = *a1;
          v258 = a1[2];
          v259 = a1[4];
          v260 = a1[6];
          v261 = a1[8];
          v262 = *((_QWORD *)a1 + 5);
          v263 = a1[12];
          v264 = *((_QWORD *)a1 + 7);
          v265 = *((_QWORD *)a1 + 8);
          v266 = *((_QWORD *)a1 + 9);
          v267 = *((_QWORD *)a1 + 10);
          v268 = *((_QWORD *)a1 + 11);
          v269 = *((_QWORD *)a1 + 12);
          v270 = *((_QWORD *)a1 + 13);
          v271 = *((_QWORD *)a1 + 14);
          v272 = 8;
          v273 = v263;
          do
          {
            v256 += v273 & 1;
            v273 >>= 1;
            --v272;
          }
          while (v272);
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2423, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            goto LABEL_820;
          }
          if ((unsigned __int16)*v16 <= v27 || *v495 != 2)
LABEL_820:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          v274 = *a3;
          *((_WORD *)a3 + 6) = v26 + 3;
          *(_BYTE *)(v274 + (unsigned __int16)(v26 + 2)) = (16 * v256) | 0xC;
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2424, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            goto LABEL_822;
          }
          v275 = (unsigned __int16)*v494;
          if ((unsigned __int16)*v16 <= v275 || *v495 != 2)
LABEL_822:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          v276 = *a3;
          *((_WORD *)a3 + 6) = v275 + 1;
          *(_BYTE *)(v276 + v275) = v257;
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2425, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            goto LABEL_824;
          }
          v277 = (unsigned __int16)*v494;
          if ((unsigned __int16)*v16 <= v277 || *v495 != 2)
LABEL_824:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          v278 = *a3;
          *((_WORD *)a3 + 6) = v277 + 1;
          *(_BYTE *)(v278 + v277) = v258;
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2426, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            goto LABEL_826;
          }
          v279 = (unsigned __int16)*v494;
          if ((unsigned __int16)*v16 <= v279 || *v495 != 2)
LABEL_826:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          v280 = *a3;
          *((_WORD *)a3 + 6) = v279 + 1;
          *(_BYTE *)(v280 + v279) = v259;
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2427, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            goto LABEL_828;
          }
          v281 = (unsigned __int16)*v494;
          if ((unsigned __int16)*v16 <= v281 || *v495 != 2)
LABEL_828:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          v282 = *a3;
          *((_WORD *)a3 + 6) = v281 + 1;
          *(_BYTE *)(v282 + v281) = v260;
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2428, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            goto LABEL_830;
          }
          v283 = (unsigned __int16)*v494;
          if ((unsigned __int16)*v16 <= v283 || *v495 != 2)
LABEL_830:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          v284 = *a3;
          *((_WORD *)a3 + 6) = v283 + 1;
          *(_BYTE *)(v284 + v283) = v261;
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2429, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            goto LABEL_832;
          }
          v285 = (unsigned __int16)*v494;
          if ((unsigned __int16)*v16 - (int)v285 <= 5
            || (v482 = v267, v484 = v266, v486 = v265, v489 = v264, v492 = v261, *v495 != 2))
          {
LABEL_832:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          v286 = v262;
          sub_10004C878(*a3 + v285, v262, 6uLL);
          v287 = *((_WORD *)a3 + 6);
          *((_WORD *)a3 + 6) = v287 + 6;
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2430, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_834:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          v18 = (char *)a3 + 14;
          if ((unsigned __int16)*v16 <= (unsigned __int16)(v287 + 6))
            goto LABEL_834;
          v23 = (_WORD *)a3 + 6;
          if (*v495 != 2)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          v288 = 0;
          v289 = *a3;
          *((_WORD *)a3 + 6) = v287 + 7;
          *(_BYTE *)(v289 + (unsigned __int16)(v287 + 6)) = v263;
          do
          {
            if ((v263 & 1) != 0)
            {
              if (*((_BYTE *)a3 + 15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2436, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_732:
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              v290 = (unsigned __int16)*v494;
              if ((unsigned __int16)*v16 - (int)v290 <= 1 || *v495 != 2)
                goto LABEL_732;
              *(_BYTE *)(*a3 + v290) = *(_BYTE *)(v489 + v288);
              *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v489 + v288 + 1);
              v291 = *((_WORD *)a3 + 6) + 2;
              *((_WORD *)a3 + 6) = v291;
              if (*((_BYTE *)a3 + 15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2437, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_734:
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              if ((unsigned __int16)*v16 - v291 <= 1 || *v495 != 2)
                goto LABEL_734;
              *(_BYTE *)(*a3 + v291) = *(_BYTE *)(v486 + v288);
              *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v486 + v288 + 1);
              v292 = *((_WORD *)a3 + 6) + 2;
              *((_WORD *)a3 + 6) = v292;
              if (*((_BYTE *)a3 + 15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2438, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_736:
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              if ((unsigned __int16)*v16 - v292 <= 1 || *v495 != 2)
                goto LABEL_736;
              *(_BYTE *)(*a3 + v292) = *(_BYTE *)(v484 + v288);
              *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v484 + v288 + 1);
              v293 = *((_WORD *)a3 + 6) + 2;
              *((_WORD *)a3 + 6) = v293;
              if (*((_BYTE *)a3 + 15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2439, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_738:
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              if ((unsigned __int16)*v16 - v293 <= 1 || *v495 != 2)
                goto LABEL_738;
              *(_BYTE *)(*a3 + v293) = *(_BYTE *)(v482 + v288);
              *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v482 + v288 + 1);
              v294 = *((_WORD *)a3 + 6) + 2;
              *((_WORD *)a3 + 6) = v294;
              if (*((_BYTE *)a3 + 15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2440, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_740:
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              if ((unsigned __int16)*v16 - v294 <= 1 || *v495 != 2)
                goto LABEL_740;
              *(_BYTE *)(*a3 + v294) = *(_BYTE *)(v268 + v288);
              *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v268 + v288 + 1);
              v295 = *((_WORD *)a3 + 6) + 2;
              *((_WORD *)a3 + 6) = v295;
              if (*((_BYTE *)a3 + 15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2441, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_742:
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              if ((unsigned __int16)*v16 - v295 <= 1 || *v495 != 2)
                goto LABEL_742;
              *(_BYTE *)(*a3 + v295) = *(_BYTE *)(v269 + v288);
              *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v269 + v288 + 1);
              v296 = *((_WORD *)a3 + 6) + 2;
              *((_WORD *)a3 + 6) = v296;
              if (*((_BYTE *)a3 + 15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2442, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_744:
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              if ((unsigned __int16)*v16 - v296 <= 1 || *v495 != 2)
                goto LABEL_744;
              *(_BYTE *)(*a3 + v296) = *(_BYTE *)(v270 + v288);
              *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v270 + v288 + 1);
              v297 = *((_WORD *)a3 + 6) + 2;
              *((_WORD *)a3 + 6) = v297;
              if (*((_BYTE *)a3 + 15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2443, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_746:
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              if ((unsigned __int16)*v16 - v297 <= 1 || *v495 != 2)
                goto LABEL_746;
              *(_BYTE *)(*a3 + v297) = *(_BYTE *)(v271 + v288);
              *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(_BYTE *)(v271 + v288 + 1);
              *((_WORD *)a3 + 6) += 2;
            }
            LOBYTE(v263) = v263 >> 1;
            v288 += 2;
          }
          while (v288 != 16);
          *(_BYTE *)a4 = v492;
          if (!v286)
            goto LABEL_596;
          v86 = 0;
          v298 = *(_DWORD *)v286;
          *(_WORD *)(a4 + 5) = *(_WORD *)(v286 + 4);
          *(_DWORD *)(a4 + 1) = v298;
LABEL_622:
          if (*v18 == 2)
            *v16 = *v23;
          *v18 = 15;
          if (v86 && v13 != (unsigned __int16)*v16)
            sub_100253460();
          return 0;
        case 257:
          v299 = a1;
          v300 = *a1;
          v301 = a1[2];
          v506 = (const void **)(a1 + 6);
          v302 = v299[4];
          v248 = v302;
          if ((_BYTE)v302)
            v249 = *v506;
          else
            v249 = 0;
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2477, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
          }
          else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
          {
            v472 = *a3;
            *((_WORD *)a3 + 6) = v26 + 3;
            *(_BYTE *)(v472 + (unsigned __int16)(v26 + 2)) = v302 + 3;
            if (*((_BYTE *)a3 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2478, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            }
            else
            {
              v473 = (unsigned __int16)*v494;
              if ((unsigned __int16)*v16 > v473 && *v495 == 2)
              {
                v474 = *a3;
                *((_WORD *)a3 + 6) = v473 + 1;
                *(_BYTE *)(v474 + v473) = v300;
                if (*((_BYTE *)a3 + 15))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2479, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                }
                else
                {
                  v475 = (unsigned __int16)*v494;
                  if ((unsigned __int16)*v16 > v475 && *v495 == 2)
                  {
                    v476 = *a3;
                    *((_WORD *)a3 + 6) = v475 + 1;
                    *(_BYTE *)(v476 + v475) = v301;
                    if (*((_BYTE *)a3 + 15))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2480, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                    }
                    else
                    {
                      v477 = (unsigned __int16)*v494;
                      if ((unsigned __int16)*v16 > v477 && *v495 == 2)
                      {
                        v478 = *a3;
                        *((_WORD *)a3 + 6) = v477 + 1;
                        *(_BYTE *)(v478 + v477) = v302;
                        v461 = *a3;
                        v462 = *((unsigned __int16 *)a3 + 6);
                        if (*((_BYTE *)a3 + 15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2481, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                          v18 = (char *)a3 + 14;
                          v479 = 0;
                        }
                        else
                        {
                          v479 = (unsigned __int16)*v16 - (_DWORD)v462;
                        }
                        if (v479 < (int)v248)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        if (*v18 != 2)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        goto LABEL_619;
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        case 258:
          v303 = *a1;
          v304 = (char *)*((_QWORD *)a1 + 1);
          v305 = (char *)*((_QWORD *)a1 + 2);
          if (*((_BYTE *)a3 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2504, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
          }
          else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
          {
            v306 = (__int128 *)*((_QWORD *)a1 + 3);
            v307 = *a3;
            *((_WORD *)a3 + 6) = v26 + 3;
            *(_BYTE *)(v307 + (unsigned __int16)(v26 + 2)) = (18 * v303) | 1;
            if (*((_BYTE *)a3 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2505, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
            }
            else
            {
              v308 = (unsigned __int16)*v494;
              if ((unsigned __int16)*v16 > v308 && *v495 == 2)
              {
                v309 = *a3;
                *((_WORD *)a3 + 6) = v308 + 1;
                *(_BYTE *)(v309 + v308) = v303;
                v310 = v303;
                if ((_BYTE)v303)
                {
                  while (!*((_BYTE *)a3 + 15))
                  {
                    v311 = (unsigned __int16)*v494;
                    if ((unsigned __int16)*v16 <= v311 || *v495 != 2)
                      goto LABEL_699;
                    v312 = *v304;
                    v313 = *a3;
                    *((_WORD *)a3 + 6) = v311 + 1;
                    *(_BYTE *)(v313 + v311) = v312;
                    if (*((_BYTE *)a3 + 15))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2509, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_701:
                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                    }
                    v314 = (unsigned __int16)*v494;
                    if ((unsigned __int16)*v16 <= v314 || *v495 != 2)
                      goto LABEL_701;
                    v315 = *v305;
                    v316 = *a3;
                    *((_WORD *)a3 + 6) = v314 + 1;
                    *(_BYTE *)(v316 + v314) = v315;
                    if (*((_BYTE *)a3 + 15))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2510, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_703:
                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                    }
                    v317 = *((unsigned __int16 *)a3 + 6);
                    if ((unsigned __int16)*v16 - (int)v317 <= 15 || *v495 != 2)
                      goto LABEL_703;
                    v86 = 0;
                    v318 = *v306++;
                    *(_OWORD *)(*a3 + v317) = v318;
                    *v494 += 16;
                    ++v305;
                    ++v304;
                    if (!--v310)
                      goto LABEL_622;
                  }
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2508, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_699:
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                }
                goto LABEL_596;
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        default:
          switch(v17)
          {
            case 230:
              v87 = a1;
              v88 = *a1;
              v89 = a1[2];
              v90 = a1[4];
              v91 = a1[6];
              v92 = a1[8];
              v93 = a1[10];
              v94 = a1[12];
              v95 = a1[14];
              v499 = a1 + 18;
              v96 = v87[16];
              v97 = v96;
              if ((_BYTE)v96)
              {
                v98 = *(char **)v499;
                v99 = (_BYTE *)*((_QWORD *)v499 + 1);
                v100 = (_BYTE *)*((_QWORD *)v499 + 2);
                v101 = (char *)*((_QWORD *)v499 + 3);
                v102 = (char *)*((_QWORD *)v499 + 4);
                v103 = (char *)*((_QWORD *)v499 + 5);
                v104 = (char *)*((_QWORD *)v499 + 6);
              }
              else
              {
                v98 = 0;
                v99 = 0;
                v100 = 0;
                v101 = 0;
                v102 = 0;
                v103 = 0;
                v104 = 0;
              }
              if (*((_BYTE *)a3 + 15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2033, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
              }
              else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
              {
                v332 = *a3;
                *((_WORD *)a3 + 6) = v26 + 3;
                *(_BYTE *)(v332 + (unsigned __int16)(v26 + 2)) = 9 * v96 + 16;
                if (*((_BYTE *)a3 + 15))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2034, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                }
                else
                {
                  v333 = (unsigned __int16)*v494;
                  if ((unsigned __int16)*v16 > v333 && *v495 == 2)
                  {
                    v334 = *a3;
                    *((_WORD *)a3 + 6) = v333 + 1;
                    *(_BYTE *)(v334 + v333) = v88;
                    if (*((_BYTE *)a3 + 15))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2035, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                    }
                    else
                    {
                      v335 = (unsigned __int16)*v494;
                      if ((unsigned __int16)*v16 - (int)v335 > 2)
                      {
                        if (*v495 != 2 || HIBYTE(v89))
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        *(_BYTE *)(*a3 + v335) = v89;
                        *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v89);
                        *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 2) = BYTE2(v89);
                        v336 = *((_WORD *)a3 + 6) + 3;
                        *((_WORD *)a3 + 6) = v336;
                        if (*((_BYTE *)a3 + 15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2036, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                        }
                        else if ((unsigned __int16)*v16 - v336 > 2 && *v495 == 2 && !HIBYTE(v90))
                        {
                          *(_BYTE *)(*a3 + v336) = v90;
                          *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v90);
                          *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 2) = BYTE2(v90);
                          v337 = *((_WORD *)a3 + 6);
                          *((_WORD *)a3 + 6) = v337 + 3;
                          if (*((_BYTE *)a3 + 15))
                          {
                            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2037, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                          }
                          else
                          {
                            v18 = (char *)a3 + 14;
                            if ((unsigned __int16)*v16 > (unsigned __int16)(v337 + 3) && *v495 == 2)
                            {
                              v338 = *a3;
                              *((_WORD *)a3 + 6) = v337 + 4;
                              *(_BYTE *)(v338 + (unsigned __int16)(v337 + 3)) = v91;
                              if (*((_BYTE *)a3 + 15))
                              {
                                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2038, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                              }
                              else
                              {
                                v339 = (unsigned __int16)*v494;
                                if ((unsigned __int16)*v16 > v339 && *v495 == 2)
                                {
                                  v340 = *a3;
                                  *((_WORD *)a3 + 6) = v339 + 1;
                                  *(_BYTE *)(v340 + v339) = v92;
                                  if (*((_BYTE *)a3 + 15))
                                  {
                                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2039, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                                  }
                                  else
                                  {
                                    v341 = (unsigned __int16)*v494;
                                    if ((unsigned __int16)*v16 > v341 && *v495 == 2)
                                    {
                                      v342 = *a3;
                                      *((_WORD *)a3 + 6) = v341 + 1;
                                      *(_BYTE *)(v342 + v341) = v93;
                                      if (*((_BYTE *)a3 + 15))
                                      {
                                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2040, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                                      }
                                      else
                                      {
                                        v343 = (unsigned __int16)*v494;
                                        if ((unsigned __int16)*v16 - (int)v343 > 1 && *v495 == 2)
                                        {
                                          *(_BYTE *)(*a3 + v343) = v94;
                                          *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v94);
                                          v344 = *((_WORD *)a3 + 6) + 2;
                                          *((_WORD *)a3 + 6) = v344;
                                          if (*((_BYTE *)a3 + 15))
                                          {
                                            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2041, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                                          }
                                          else if ((unsigned __int16)*v16 - v344 > 1 && *v495 == 2)
                                          {
                                            *(_BYTE *)(*a3 + v344) = v95;
                                            *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v95);
                                            v345 = *((_WORD *)a3 + 6);
                                            *((_WORD *)a3 + 6) = v345 + 2;
                                            if (*((_BYTE *)a3 + 15))
                                            {
                                              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2042, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                                            }
                                            else if ((unsigned __int16)*v16 > (unsigned __int16)(v345 + 2)
                                                   && *v495 == 2)
                                            {
                                              v346 = *a3;
                                              *((_WORD *)a3 + 6) = v345 + 3;
                                              *(_BYTE *)(v346 + (unsigned __int16)(v345 + 2)) = v96;
                                              if ((_BYTE)v96)
                                              {
                                                while (!*((_BYTE *)a3 + 15))
                                                {
                                                  v347 = (unsigned __int16)*v494;
                                                  if ((unsigned __int16)*v16 <= v347 || *v495 != 2)
                                                    goto LABEL_659;
                                                  v348 = *v98;
                                                  v349 = *a3;
                                                  *((_WORD *)a3 + 6) = v347 + 1;
                                                  *(_BYTE *)(v349 + v347) = v348;
                                                  if (*((_BYTE *)a3 + 15))
                                                  {
                                                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2046, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_661:
                                                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileB"
                                                                           "luetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                  }
                                                  v350 = (unsigned __int16)*v494;
                                                  if ((unsigned __int16)*v16 - (int)v350 <= 1 || *v495 != 2)
                                                    goto LABEL_661;
                                                  *(_BYTE *)(*a3 + v350) = *v99;
                                                  *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v99[1];
                                                  v351 = *((_WORD *)a3 + 6) + 2;
                                                  *((_WORD *)a3 + 6) = v351;
                                                  if (*((_BYTE *)a3 + 15))
                                                  {
                                                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2047, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_663:
                                                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileB"
                                                                           "luetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                  }
                                                  if ((unsigned __int16)*v16 - v351 <= 1 || *v495 != 2)
                                                    goto LABEL_663;
                                                  *(_BYTE *)(*a3 + v351) = *v100;
                                                  *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v100[1];
                                                  v352 = *((_WORD *)a3 + 6);
                                                  *((_WORD *)a3 + 6) = v352 + 2;
                                                  if (*((_BYTE *)a3 + 15))
                                                  {
                                                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2048, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_665:
                                                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileB"
                                                                           "luetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                  }
                                                  if ((unsigned __int16)*v16 <= (unsigned __int16)(v352 + 2)
                                                    || *v495 != 2)
                                                  {
                                                    goto LABEL_665;
                                                  }
                                                  v353 = *v101;
                                                  v354 = *a3;
                                                  *((_WORD *)a3 + 6) = v352 + 3;
                                                  *(_BYTE *)(v354 + (unsigned __int16)(v352 + 2)) = v353;
                                                  if (*((_BYTE *)a3 + 15))
                                                  {
                                                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2049, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_667:
                                                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileB"
                                                                           "luetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                  }
                                                  v355 = (unsigned __int16)*v494;
                                                  if ((unsigned __int16)*v16 <= v355 || *v495 != 2)
                                                    goto LABEL_667;
                                                  v356 = *v102;
                                                  v357 = *a3;
                                                  *((_WORD *)a3 + 6) = v355 + 1;
                                                  *(_BYTE *)(v357 + v355) = v356;
                                                  if (*((_BYTE *)a3 + 15))
                                                  {
                                                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2050, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_669:
                                                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileB"
                                                                           "luetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                  }
                                                  v358 = (unsigned __int16)*v494;
                                                  if ((unsigned __int16)*v16 <= v358 || *v495 != 2)
                                                    goto LABEL_669;
                                                  v359 = *v103;
                                                  v360 = *a3;
                                                  *((_WORD *)a3 + 6) = v358 + 1;
                                                  *(_BYTE *)(v360 + v358) = v359;
                                                  if (*((_BYTE *)a3 + 15))
                                                  {
                                                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2051, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_671:
                                                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileB"
                                                                           "luetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                  }
                                                  v361 = (unsigned __int16)*v494;
                                                  if ((unsigned __int16)*v16 <= v361 || *v495 != 2)
                                                    goto LABEL_671;
                                                  v86 = 0;
                                                  v362 = *v104++;
                                                  v363 = *a3;
                                                  *((_WORD *)a3 + 6) = v361 + 1;
                                                  *(_BYTE *)(v363 + v361) = v362;
                                                  ++v103;
                                                  ++v102;
                                                  ++v101;
                                                  v100 += 2;
                                                  v99 += 2;
                                                  ++v98;
                                                  if (!--v97)
                                                    goto LABEL_622;
                                                }
                                                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2045, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_659:
                                                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluet"
                                                                       "ooth_base/Stack/corestack/hci/hcicmdapi.c");
                                              }
                                              goto LABEL_596;
                                            }
                                            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth"
                                                                   "_base/Stack/corestack/hci/hcicmdapi.c");
                                          }
                                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_b"
                                                                 "ase/Stack/corestack/hci/hcicmdapi.c");
                                        }
                                      }
                                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/"
                                                             "Stack/corestack/hci/hcicmdapi.c");
                                    }
                                  }
                                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stac"
                                                         "k/corestack/hci/hcicmdapi.c");
                                }
                              }
                              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/co"
                                                     "restack/hci/hcicmdapi.c");
                            }
                          }
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestac"
                                               "k/hci/hcicmdapi.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
            case 231:
              v204 = a1;
              v205 = *a1;
              v206 = a1[2];
              v207 = a1[4];
              v208 = a1[6];
              v209 = a1[8];
              v210 = a1[10];
              v211 = a1[12];
              v212 = a1[14];
              v213 = a1[16];
              v501 = a1 + 20;
              v214 = v204[18];
              v215 = v214;
              if ((_BYTE)v214)
              {
                v216 = *(char **)v501;
                v217 = (char *)*((_QWORD *)v501 + 1);
                v218 = (_BYTE *)*((_QWORD *)v501 + 2);
                v219 = (_BYTE *)*((_QWORD *)v501 + 3);
                v220 = (_BYTE *)*((_QWORD *)v501 + 4);
                v221 = (_BYTE *)*((_QWORD *)v501 + 5);
                v222 = (char *)*((_QWORD *)v501 + 6);
                v223 = (char *)*((_QWORD *)v501 + 7);
                v224 = (char *)*((_QWORD *)v501 + 8);
                v225 = (char *)*((_QWORD *)v501 + 9);
              }
              else
              {
                v216 = 0;
                v217 = 0;
                v218 = 0;
                v219 = 0;
                v220 = 0;
                v221 = 0;
                v222 = 0;
                v223 = 0;
                v224 = 0;
                v225 = 0;
              }
              if (*((_BYTE *)a3 + 15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2132, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
              }
              else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
              {
                v364 = *a3;
                *((_WORD *)a3 + 6) = v26 + 3;
                *(_BYTE *)(v364 + (unsigned __int16)(v26 + 2)) = 14 * v214 + 16;
                if (*((_BYTE *)a3 + 15))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2133, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                }
                else
                {
                  v365 = (unsigned __int16)*v494;
                  if ((unsigned __int16)*v16 > v365 && *v495 == 2)
                  {
                    v366 = *a3;
                    *((_WORD *)a3 + 6) = v365 + 1;
                    *(_BYTE *)(v366 + v365) = v205;
                    if (*((_BYTE *)a3 + 15))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2134, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                    }
                    else
                    {
                      v367 = (unsigned __int16)*v494;
                      if ((unsigned __int16)*v16 - (int)v367 > 3 && *v495 == 2)
                      {
                        *(_BYTE *)(*a3 + v367) = v206;
                        *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v206);
                        *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 2) = BYTE2(v206);
                        *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 3) = HIBYTE(v206);
                        v368 = *((_WORD *)a3 + 6) + 4;
                        *((_WORD *)a3 + 6) = v368;
                        if (*((_BYTE *)a3 + 15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2135, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                        }
                        else if ((unsigned __int16)*v16 - v368 > 3 && *v495 == 2)
                        {
                          *(_BYTE *)(*a3 + v368) = v207;
                          *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v207);
                          *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 2) = BYTE2(v207);
                          *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 3) = HIBYTE(v207);
                          v369 = *((_WORD *)a3 + 6);
                          *((_WORD *)a3 + 6) = v369 + 4;
                          if (*((_BYTE *)a3 + 15))
                          {
                            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2136, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                          }
                          else if ((unsigned __int16)*v16 > (unsigned __int16)(v369 + 4) && *v495 == 2)
                          {
                            v370 = *a3;
                            *((_WORD *)a3 + 6) = v369 + 5;
                            *(_BYTE *)(v370 + (unsigned __int16)(v369 + 4)) = v208;
                            if (*((_BYTE *)a3 + 15))
                            {
                              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2137, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                            }
                            else
                            {
                              v371 = (unsigned __int16)*v494;
                              if ((unsigned __int16)*v16 > v371 && *v495 == 2)
                              {
                                v372 = *a3;
                                *((_WORD *)a3 + 6) = v371 + 1;
                                *(_BYTE *)(v372 + v371) = v209;
                                if (*((_BYTE *)a3 + 15))
                                {
                                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2138, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                                }
                                else
                                {
                                  v373 = (unsigned __int16)*v494;
                                  if ((unsigned __int16)*v16 - (int)v373 > 1 && *v495 == 2)
                                  {
                                    *(_BYTE *)(*a3 + v373) = v210;
                                    *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v210);
                                    v374 = *((_WORD *)a3 + 6);
                                    *((_WORD *)a3 + 6) = v374 + 2;
                                    if (*((_BYTE *)a3 + 15))
                                    {
                                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2139, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                                    }
                                    else if ((unsigned __int16)*v16 > (unsigned __int16)(v374 + 2)
                                           && *v495 == 2)
                                    {
                                      v375 = *a3;
                                      *((_WORD *)a3 + 6) = v374 + 3;
                                      *(_BYTE *)(v375 + (unsigned __int16)(v374 + 2)) = v211;
                                      if (*((_BYTE *)a3 + 15))
                                      {
                                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2140, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                                      }
                                      else
                                      {
                                        v376 = (unsigned __int16)*v494;
                                        v18 = (char *)a3 + 14;
                                        if ((unsigned __int16)*v16 > v376 && *v495 == 2)
                                        {
                                          v377 = *a3;
                                          *((_WORD *)a3 + 6) = v376 + 1;
                                          *(_BYTE *)(v377 + v376) = v212;
                                          if (*((_BYTE *)a3 + 15))
                                          {
                                            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2141, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                                          }
                                          else
                                          {
                                            v378 = (unsigned __int16)*v494;
                                            if ((unsigned __int16)*v16 > v378 && *v495 == 2)
                                            {
                                              v379 = *a3;
                                              *((_WORD *)a3 + 6) = v378 + 1;
                                              *(_BYTE *)(v379 + v378) = v213;
                                              if (*((_BYTE *)a3 + 15))
                                              {
                                                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2142, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                                              }
                                              else
                                              {
                                                v380 = (unsigned __int16)*v494;
                                                if ((unsigned __int16)*v16 > v380 && *v495 == 2)
                                                {
                                                  v381 = *a3;
                                                  *((_WORD *)a3 + 6) = v380 + 1;
                                                  *(_BYTE *)(v381 + v380) = v214;
                                                  if ((_BYTE)v214)
                                                  {
                                                    while (!*((_BYTE *)a3 + 15))
                                                    {
                                                      v382 = (unsigned __int16)*v494;
                                                      if ((unsigned __int16)*v16 <= v382 || *v495 != 2)
                                                        goto LABEL_673;
                                                      v383 = *v216;
                                                      v384 = *a3;
                                                      *((_WORD *)a3 + 6) = v382 + 1;
                                                      *(_BYTE *)(v384 + v382) = v383;
                                                      if (*((_BYTE *)a3 + 15))
                                                      {
                                                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2146, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_675:
                                                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mob"
                                                                               "ileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                      }
                                                      v385 = (unsigned __int16)*v494;
                                                      if ((unsigned __int16)*v16 <= v385 || *v495 != 2)
                                                        goto LABEL_675;
                                                      v386 = *v217;
                                                      v387 = *a3;
                                                      *((_WORD *)a3 + 6) = v385 + 1;
                                                      *(_BYTE *)(v387 + v385) = v386;
                                                      if (*((_BYTE *)a3 + 15))
                                                      {
                                                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2147, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_677:
                                                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mob"
                                                                               "ileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                      }
                                                      v388 = (unsigned __int16)*v494;
                                                      if ((unsigned __int16)*v16 - (int)v388 <= 1 || *v495 != 2)
                                                        goto LABEL_677;
                                                      *(_BYTE *)(*a3 + v388) = *v218;
                                                      *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v218[1];
                                                      v389 = *((_WORD *)a3 + 6) + 2;
                                                      *((_WORD *)a3 + 6) = v389;
                                                      if (*((_BYTE *)a3 + 15))
                                                      {
                                                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2148, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_679:
                                                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mob"
                                                                               "ileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                      }
                                                      if ((unsigned __int16)*v16 - v389 <= 1 || *v495 != 2)
                                                        goto LABEL_679;
                                                      *(_BYTE *)(*a3 + v389) = *v219;
                                                      *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v219[1];
                                                      v390 = *((_WORD *)a3 + 6) + 2;
                                                      *((_WORD *)a3 + 6) = v390;
                                                      if (*((_BYTE *)a3 + 15))
                                                      {
                                                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2149, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_681:
                                                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mob"
                                                                               "ileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                      }
                                                      if ((unsigned __int16)*v16 - v390 <= 1 || *v495 != 2)
                                                        goto LABEL_681;
                                                      *(_BYTE *)(*a3 + v390) = *v220;
                                                      *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v220[1];
                                                      v391 = *((_WORD *)a3 + 6) + 2;
                                                      *((_WORD *)a3 + 6) = v391;
                                                      if (*((_BYTE *)a3 + 15))
                                                      {
                                                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2150, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_683:
                                                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mob"
                                                                               "ileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                      }
                                                      if ((unsigned __int16)*v16 - v391 <= 1 || *v495 != 2)
                                                        goto LABEL_683;
                                                      *(_BYTE *)(*a3 + v391) = *v221;
                                                      *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v221[1];
                                                      v392 = *((_WORD *)a3 + 6);
                                                      *((_WORD *)a3 + 6) = v392 + 2;
                                                      if (*((_BYTE *)a3 + 15))
                                                      {
                                                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2151, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_685:
                                                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mob"
                                                                               "ileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                      }
                                                      if ((unsigned __int16)*v16 <= (unsigned __int16)(v392 + 2)
                                                        || *v495 != 2)
                                                      {
                                                        goto LABEL_685;
                                                      }
                                                      v393 = *v222;
                                                      v394 = *a3;
                                                      *((_WORD *)a3 + 6) = v392 + 3;
                                                      *(_BYTE *)(v394 + (unsigned __int16)(v392 + 2)) = v393;
                                                      if (*((_BYTE *)a3 + 15))
                                                      {
                                                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2152, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_687:
                                                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mob"
                                                                               "ileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                      }
                                                      v395 = (unsigned __int16)*v494;
                                                      if ((unsigned __int16)*v16 <= v395 || *v495 != 2)
                                                        goto LABEL_687;
                                                      v396 = *v223;
                                                      v397 = *a3;
                                                      *((_WORD *)a3 + 6) = v395 + 1;
                                                      *(_BYTE *)(v397 + v395) = v396;
                                                      if (*((_BYTE *)a3 + 15))
                                                      {
                                                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2153, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_689:
                                                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mob"
                                                                               "ileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                      }
                                                      v398 = (unsigned __int16)*v494;
                                                      if ((unsigned __int16)*v16 <= v398 || *v495 != 2)
                                                        goto LABEL_689;
                                                      v399 = *v224;
                                                      v400 = *a3;
                                                      *((_WORD *)a3 + 6) = v398 + 1;
                                                      *(_BYTE *)(v400 + v398) = v399;
                                                      if (*((_BYTE *)a3 + 15))
                                                      {
                                                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2154, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_691:
                                                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mob"
                                                                               "ileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                      }
                                                      v401 = (unsigned __int16)*v494;
                                                      if ((unsigned __int16)*v16 <= v401 || *v495 != 2)
                                                        goto LABEL_691;
                                                      v86 = 0;
                                                      v402 = *v225++;
                                                      *((_WORD *)a3 + 6) = v401 + 1;
                                                      *(_BYTE *)(*a3 + v401) = v402;
                                                      ++v224;
                                                      ++v223;
                                                      ++v222;
                                                      v221 += 2;
                                                      v220 += 2;
                                                      v219 += 2;
                                                      v218 += 2;
                                                      ++v217;
                                                      ++v216;
                                                      if (!--v215)
                                                        goto LABEL_622;
                                                    }
                                                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2145, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_673:
                                                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileB"
                                                                           "luetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                  }
                                                  goto LABEL_596;
                                                }
                                              }
                                              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetoo"
                                                                     "th_base/Stack/corestack/hci/hcicmdapi.c");
                                            }
                                          }
                                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_b"
                                                                 "ase/Stack/corestack/hci/hcicmdapi.c");
                                        }
                                      }
                                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/"
                                                             "Stack/corestack/hci/hcicmdapi.c");
                                    }
                                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/St"
                                                           "ack/corestack/hci/hcicmdapi.c");
                                  }
                                }
                                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/"
                                                       "corestack/hci/hcicmdapi.c");
                              }
                            }
                            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/core"
                                                   "stack/hci/hcicmdapi.c");
                          }
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestac"
                                               "k/hci/hcicmdapi.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
            case 232:
              v226 = a1;
              v502 = a1 + 2;
              v227 = *v226;
              v228 = *v226;
              if ((_DWORD)v228)
              {
                v229 = *(_BYTE ***)v502;
                v230 = (_BYTE **)*((_QWORD *)v502 + 1);
              }
              else
              {
                v229 = 0;
                v230 = 0;
              }
              if (*((_BYTE *)a3 + 15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2183, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
              }
              else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
              {
                v403 = *a3;
                *((_WORD *)a3 + 6) = v26 + 3;
                *(_BYTE *)(v403 + (unsigned __int16)(v26 + 2)) = (4 * v227) | 2;
                if (*((_BYTE *)a3 + 15))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2184, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                }
                else
                {
                  v404 = (unsigned __int16)*v494;
                  if ((unsigned __int16)*v16 > v404 && *v495 == 2)
                  {
                    v405 = *a3;
                    *((_WORD *)a3 + 6) = v404 + 1;
                    *(_BYTE *)(v405 + v404) = v227;
                    if ((_DWORD)v228)
                    {
                      while (!*((_BYTE *)a3 + 15))
                      {
                        v406 = (unsigned __int16)*v494;
                        if ((unsigned __int16)*v16 - (int)v406 <= 1 || *v495 != 2)
                          goto LABEL_693;
                        *(_BYTE *)(*a3 + v406) = **v229;
                        *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = (*v229)[1];
                        v407 = *((_WORD *)a3 + 6) + 2;
                        *((_WORD *)a3 + 6) = v407;
                        if (*((_BYTE *)a3 + 15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2188, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_695:
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        }
                        if ((unsigned __int16)*v16 - v407 <= 1 || *v495 != 2)
                          goto LABEL_695;
                        v86 = 0;
                        *(_BYTE *)(*a3 + v407) = **v230;
                        v408 = *v230++;
                        *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v408[1];
                        *((_WORD *)a3 + 6) += 2;
                        v409 = *v229++;
                        *a5++ = *(_WORD *)v409;
                        if (!--v228)
                          goto LABEL_622;
                      }
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2187, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_693:
                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                    }
                    goto LABEL_596;
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
            case 239:
              v231 = a1;
              v232 = *a1;
              v233 = a1[2];
              v234 = a1[4];
              v235 = (_OWORD *)*((_QWORD *)a1 + 3);
              v236 = a1[8];
              v237 = a1[10];
              v503 = (char **)(a1 + 14);
              v238 = v231[12];
              v239 = v238;
              if ((_BYTE)v238)
                v240 = *v503;
              else
                v240 = 0;
              if (*((_BYTE *)a3 + 15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2236, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
              }
              else if ((unsigned __int16)*v16 > v27 && *v495 == 2)
              {
                v410 = *a3;
                *((_WORD *)a3 + 6) = v26 + 3;
                *(_BYTE *)(v410 + (unsigned __int16)(v26 + 2)) = v238 + 25;
                if (*((_BYTE *)a3 + 15))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2237, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                }
                else
                {
                  v411 = (unsigned __int16)*v494;
                  if ((unsigned __int16)*v16 > v411 && *v495 == 2)
                  {
                    v412 = *a3;
                    *((_WORD *)a3 + 6) = v411 + 1;
                    *(_BYTE *)(v412 + v411) = v232;
                    if (*((_BYTE *)a3 + 15))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2238, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                    }
                    else
                    {
                      v413 = (unsigned __int16)*v494;
                      if ((unsigned __int16)*v16 - (int)v413 > 1 && *v495 == 2)
                      {
                        *(_BYTE *)(*a3 + v413) = v233;
                        *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v233);
                        v414 = *((_WORD *)a3 + 6);
                        *((_WORD *)a3 + 6) = v414 + 2;
                        if (*((_BYTE *)a3 + 15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2239, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                        }
                        else if ((unsigned __int16)*v16 > (unsigned __int16)(v414 + 2) && *v495 == 2)
                        {
                          v415 = *a3;
                          *((_WORD *)a3 + 6) = v414 + 3;
                          *(_BYTE *)(v415 + (unsigned __int16)(v414 + 2)) = v234;
                          if (*((_BYTE *)a3 + 15))
                          {
                            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2240, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                          }
                          else
                          {
                            v416 = *((unsigned __int16 *)a3 + 6);
                            if ((unint64_t)(unsigned __int16)*v16 - v416 > 0xF && *v495 == 2)
                            {
                              *(_OWORD *)(*a3 + v416) = *v235;
                              v417 = *((_WORD *)a3 + 6);
                              *((_WORD *)a3 + 6) = v417 + 16;
                              if (*((_BYTE *)a3 + 15))
                              {
                                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2241, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                              }
                              else if ((unsigned __int16)*v16 > (unsigned __int16)(v417 + 16)
                                     && *v495 == 2)
                              {
                                v418 = *a3;
                                *((_WORD *)a3 + 6) = v417 + 17;
                                *(_BYTE *)(v418 + (unsigned __int16)(v417 + 16)) = v236;
                                if (*((_BYTE *)a3 + 15))
                                {
                                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2242, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                                }
                                else
                                {
                                  v419 = (unsigned __int16)*v494;
                                  if ((unsigned __int16)*v16 - (int)v419 > 1 && *v495 == 2)
                                  {
                                    *(_BYTE *)(*a3 + v419) = v237;
                                    *(_BYTE *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v237);
                                    v420 = *((_WORD *)a3 + 6);
                                    *((_WORD *)a3 + 6) = v420 + 2;
                                    if (*((_BYTE *)a3 + 15))
                                    {
                                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2243, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
                                    }
                                    else if ((unsigned __int16)*v16 > (unsigned __int16)(v420 + 2)
                                           && *v495 == 2)
                                    {
                                      v421 = *a3;
                                      *((_WORD *)a3 + 6) = v420 + 3;
                                      *(_BYTE *)(v421 + (unsigned __int16)(v420 + 2)) = v238;
                                      if ((_BYTE)v238)
                                      {
                                        while (!*((_BYTE *)a3 + 15))
                                        {
                                          v422 = (unsigned __int16)*v494;
                                          if ((unsigned __int16)*v16 <= v422 || *v495 != 2)
                                            goto LABEL_697;
                                          v423 = *v240++;
                                          v424 = *a3;
                                          *((_WORD *)a3 + 6) = v422 + 1;
                                          *(_BYTE *)(v424 + v422) = v423;
                                          if (!--v239)
                                            goto LABEL_521;
                                        }
                                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2246, "OI_STATUS specialCommandFormatter(va_list, const HCI_COMMAND_DESCRIPTOR *, OI_BYTE_STREAM *, OI_HCI_CONNECTION_HANDLE *, OI_BD_ADDR *, LE_Address *, OI_HCI_LM_HANDLE *, HCI_VSC_COMMAND_DESCRIPTOR *, uint8_t *)");
LABEL_697:
                                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_bas"
                                                               "e/Stack/corestack/hci/hcicmdapi.c");
                                      }
LABEL_521:
                                      if (!a7)
                                        goto LABEL_596;
                                      v86 = 0;
                                      *a7 = v232;
                                      goto LABEL_622;
                                    }
                                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/St"
                                                           "ack/corestack/hci/hcicmdapi.c");
                                  }
                                }
                                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/"
                                                       "corestack/hci/hcicmdapi.c");
                              }
                              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/co"
                                                     "restack/hci/hcicmdapi.c");
                            }
                          }
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestac"
                                               "k/hci/hcicmdapi.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
            default:
              goto LABEL_61;
          }
      }
  }
}

void *sub_100052DC0(size_t size)
{
  if (HIDWORD(size))
    return 0;
  else
    return malloc_type_zone_malloc((malloc_zone_t *)qword_1009802D0, size, 0x946A8EB9uLL);
}

char *sub_100052DE8(unsigned int a1)
{
  if (a1 >= 0x111)
    sub_100253460();
  return (char *)&unk_100978E48 + 24 * a1;
}

unint64_t sub_100052E20(int a1)
{
  unsigned int v1;

  v1 = a1 - &unk_100978E48;
  if (v1 >> 3 >= 0x333)
    sub_100253460();
  return v1 / 0x18uLL;
}

uint64_t sub_100052E64(void *ptr, __int16 a2, _OWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  _BYTE v10[38];

  *(_OWORD *)&v10[6] = *a3;
  *(_WORD *)&v10[4] = 0;
  *(_DWORD *)v10 = 0;
  *(_OWORD *)&v10[22] = a3[1];
  v5 = dword_1009843F4;
  v6 = *(unsigned __int8 *)(qword_100998FC0 + 2);
  if (dword_1009843F4 > v6)
  {
    sub_100253460();
    v5 = dword_1009843F4;
    v6 = *(unsigned __int8 *)(qword_100998FC0 + 2);
  }
  if (v5 == v6)
  {
    sub_100053298(ptr);
    return 611;
  }
  else
  {
    v8 = qword_100984400 + 48 * v5;
    *(_OWORD *)(v8 + 10) = *(_OWORD *)v10;
    *(_QWORD *)v8 = ptr;
    *(_WORD *)(v8 + 8) = a2;
    *(_OWORD *)(v8 + 26) = *(_OWORD *)&v10[16];
    *(_QWORD *)(v8 + 40) = *(_QWORD *)&v10[30];
    v9 = v5 + 1;
    dword_1009843F4 = v9;
    if (v9 > dword_1009843F8)
      dword_1009843F8 = v9;
    result = 0;
    if (byte_1009843F0)
    {
      if (byte_100999059)
      {
        sub_100052F94();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100052F88()
{
  return byte_1009802DC;
}

void sub_100052F94()
{
  _WORD *v0;
  BOOL v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  _BYTE *v9;
  unsigned __int16 v10;
  int v11;
  uint64_t v12;
  char v14;
  unsigned int v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  int v19;
  _OWORD v20[7];

  if (!dword_1009843F4 || dword_1009843F4 > *(unsigned __int8 *)(qword_100998FC0 + 2))
    sub_100253460();
  v0 = (_WORD *)qword_100984400;
  if (byte_1009843F0)
    v1 = byte_100999059 == 0;
  else
    v1 = 1;
  if (v1)
    sub_100253460();
  v19 = 0;
  v2 = (unsigned __int16)v0[10];
  if (v2 != 3125)
  {
    v3 = sub_100053ADC((uint64_t)(v0 + 8), (unsigned int *)&v19);
    if ((_DWORD)v3)
    {
      v16 = v3;
      if (sub_10005549C())
      {
        sub_100054530("Unable to add opcode 0x%x to expected event queue with status %!", (unsigned __int16)v0[10], v16);
        v17 = sub_1000544A0(0x2Eu);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          sub_1006D1FB0(v17);
      }
      v18 = sub_1001D8754((unsigned __int16)v0[10]);
      sub_1001131F8(635, v18);
    }
  }
  if (off_100999028)
  {
    v4 = 629;
LABEL_14:
    if (v2 != 3125)
    {
      v5 = sub_10019F090(v19);
      if ((_DWORD)v5)
      {
        v6 = v5;
        if (sub_10005549C())
        {
          sub_100054530("OI_HCIExpEvQ_RemoveEvent failed: %!", v6);
          v7 = sub_1000544A0(0x2Eu);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
            sub_1006D2C78();
        }
      }
      if (sub_10005549C())
      {
        sub_100054530("OI_HCIIfc_SendHciCommand failed");
        v8 = sub_1000544A0(0x2Eu);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          sub_1006D2DEC();
      }
    }
LABEL_39:
    sub_10019CCBC(v4, qword_100984400 + 16);
    goto LABEL_40;
  }
  memset(v20, 0, sizeof(v20));
  v9 = *(_BYTE **)v0;
  if (**(_BYTE **)v0 != 1)
  {
    sub_100253460();
    v9 = *(_BYTE **)v0;
  }
  v10 = *(_WORD *)(v9 + 1);
  v11 = (unsigned __int16)v0[10];
  if (v11 != 64512 && v11 != v10)
    sub_100253460();
  sub_1000532A8((uint64_t)v20, 1u);
  sub_10005336C((unsigned __int8 *)v20, (char *)(*(_QWORD *)v0 + 4), (unsigned __int16)(v0[4] - 4), 2u);
  v12 = sub_10005347C(1, v10, (uint64_t)v20, (unsigned __int16)(v0[4] - 4));
  v4 = v12;
  if ((_DWORD)v12 != 625 && (_DWORD)v12 != 0)
    goto LABEL_14;
  if (v0[10] != 3125)
  {
    v14 = byte_100999059;
    if (!byte_100999059)
    {
      sub_100253460();
      v14 = byte_100999059;
    }
    byte_100999059 = v14 - 1;
  }
  if ((_DWORD)v4 != 625)
  {
    if (!(_DWORD)v4)
    {
      byte_1009843F0 = 0;
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if (dword_1009843F4 && byte_1009843F0 && byte_100999059)
    sub_10004AE90((uint64_t)sub_10004AE60, 0, 0);
LABEL_40:
  sub_100053298(*(void **)qword_100984400);
  v15 = dword_1009843F4 - 1;
  dword_1009843F4 = v15;
  if (v15)
    memmove((void *)qword_100984400, (const void *)(qword_100984400 + 48), 48 * v15);
}

void sub_100053298(void *ptr)
{
  malloc_zone_free((malloc_zone_t *)qword_1009802D0, ptr);
}

uint64_t sub_1000532A8(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  NSObject *v3;

  if (!a1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c");
  if (!a2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c");
  if (a2 < 5)
  {
    v2 = 0;
    *(_BYTE *)a1 = a2;
    *(_WORD *)(a1 + 1) = 0;
    *(_DWORD *)(a1 + 4) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    return v2;
  }
  if (!sub_10005549C())
    return 124;
  v2 = 124;
  sub_100054530("OI_MBUF_Init %!", 124);
  v3 = sub_1000544A0(0x30u);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    sub_1006CE7A4();
    return 124;
  }
  return v2;
}

uint64_t sub_10005336C(unsigned __int8 *a1, char *a2, size_t size, unsigned int a4)
{
  uint64_t result;
  __int16 v6;
  NSObject *v7;

  if (!a1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c");
  if (*((_WORD *)a1 + 3))
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c");
  if (a4 > 2)
    return 101;
  v6 = size;
  if (!(_DWORD)size)
    return 0;
  if (a1[2] >= *a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("MBUF Append overflow: alloc %d", *a1);
      v7 = sub_1000544A0(0x30u);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 124;
  }
  else
  {
    result = sub_100053C48((uint64_t)&a1[24 * a1[2] + 16], a2, size, a4);
    if (!(_DWORD)result)
    {
      ++a1[2];
      *((_WORD *)a1 + 2) += v6;
    }
  }
  return result;
}

uint64_t sub_10005347C(char a1, __int16 a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;

  qword_1009843B0 = a3;
  qword_1009843B8 = 0;
  word_1009843CC = a4;
  byte_1009843C0 = a1;
  word_1009843C8 = a2;
  if (*(unsigned __int16 *)(a3 + 4) < a4)
    sub_100253460();
  if ((sub_100048064() & 1) != 0)
    return 0;
  v4 = sub_100053ACC();
  if (qword_1009843B0)
  {
    qword_1009843B0 = 0;
    if (qword_1009843B8)
    {
      sub_100053298((void *)qword_1009843B8);
      qword_1009843B8 = 0;
    }
  }
  return v4;
}

uint64_t sub_10005352C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t next_slot;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  kevent eventlist;
  __int128 v64;
  void *__dst[2];
  __int128 v66;
  __int128 v67;

  v8 = a3;
  if ((int)a1 > 2)
  {
    if ((_DWORD)a1 != 3)
    {
      if ((_DWORD)a1 == 243)
      {
        v10 = &qword_10097BC00;
        byte_10097BC10 = -13;
        goto LABEL_8;
      }
LABEL_19:
      sub_100253320((uint64_t)"PCIe default packet type: 0x%x\n", a2, a3, a4, a5, a6, a7, a8, a1);
      off_10097BBA0("PCIe bad packet type", 1);
      return 101;
    }
    v10 = &qword_10097BC00;
  }
  else
  {
    if ((_DWORD)a1 != 1)
    {
      if ((_DWORD)a1 == 2)
      {
        v10 = &qword_10097BBE8;
LABEL_8:
        v11 = &dword_100000004;
        goto LABEL_12;
      }
      goto LABEL_19;
    }
    v10 = &qword_10097BBD0;
  }
  v11 = &_mh_execute_header.magic + 3;
LABEL_12:
  v12 = &unk_10097C000;
  if (byte_10097CC18)
  {
    sub_100253460();
    return 118;
  }
  *((_BYTE *)&word_10097BC18 + &stru_100000FF8.dylib) = 1;
  word_10097BC18 = a2;
  byte_10097BC1A = a3;
  if ((_DWORD)a1 == 243 || (_DWORD)a1 == 2)
    byte_10097BC1B = BYTE1(a3);
  if ((_DWORD)a3)
    sub_100053868((char *)&word_10097BC18 + v11);
  else
    sub_10004A104();
  v21 = *v10;
  if (!*v10 || (v22 = *((_DWORD *)v10 + 2), v22 == -1))
  {
    sub_100253320((uint64_t)"%s: invalid input parameter\n", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"skywalk_write_channel");
  }
  else
  {
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    *(_OWORD *)__dst = 0u;
    v23 = os_channel_ring_id(v21, 0);
    v24 = os_channel_tx_ring(v21, v23);
    next_slot = os_channel_get_next_slot(v24, 0, &v64);
    if (next_slot)
    {
LABEL_28:
      v41 = v11 + v8;
      if (v41 <= WORD1(v64))
      {
        memcpy(__dst[0], &word_10097BC18, v41);
        WORD1(v64) = v41;
        os_channel_set_slot_properties(v24, next_slot, &v64);
        if (os_channel_advance_slot(v24, next_slot))
        {
          sub_100253320((uint64_t)"%s: failed to advance slot - %d\n", v49, v50, v51, v52, v53, v54, v55, (uint64_t)"skywalk_write_channel");
        }
        else
        {
          if (!os_channel_sync(v21, 0))
          {
            byte_10097CC18 = 0;
            return 625;
          }
          sub_100253320((uint64_t)"%s: os_channel_sync tx failed\n", v56, v57, v58, v59, v60, v61, v62, (uint64_t)"skywalk_write_channel");
        }
      }
      else
      {
        sub_100253320((uint64_t)"%s: slot_len: %u, size_in: %zu\n", v25, v26, v27, v28, v29, v30, v31, (uint64_t)"skywalk_write_channel");
      }
    }
    else
    {
      while (1)
      {
        sub_100253320((uint64_t)"%s: empty slot. waiting for slot to become available\n", v25, v26, v27, v28, v29, v30, v31, (uint64_t)"skywalk_write_channel");
        memset(&eventlist, 0, sizeof(eventlist));
        if (kevent(v22, 0, 0, &eventlist, 1, 0) == -1 || (unsigned __int16)eventlist.filter != 65534)
          break;
        v40 = os_channel_get_next_slot(v24, 0, &v64);
        if (v40)
        {
          next_slot = v40;
          v12 = &unk_10097C000;
          goto LABEL_28;
        }
      }
      sub_100253320((uint64_t)"%s: kevent error on sw_kq_write\n", v33, v34, v35, v36, v37, v38, v39, (uint64_t)"skywalk_write_channel");
      v12 = (_BYTE *)&unk_10097C000;
    }
  }
  v12[3096] = 0;
  if (!byte_10097BB99)
  {
    sub_100253320((uint64_t)"PCIe Skywalk write failed: type %u\n", v42, v43, v44, v45, v46, v47, v48, a1);
    off_10097BBA0("PCIe Skywalk write failed", 1);
  }
  return 1205;
}

void sub_100053868(char *a1)
{
  NSObject *v1;

  if (qword_1009843B0)
  {
    sub_100053900(a1, qword_1009843B0, (unsigned __int16)word_1009843CC);
    sub_10004A104();
  }
  else if (sub_10005549C())
  {
    sub_100054530("OI_HciIfc_CopyPayload: OI_HCIIfc_Send_Req not in progress");
    v1 = sub_1000544A0(0x2Eu);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

uint64_t sub_100053900(char *a1, uint64_t a2, unsigned int a3)
{
  char *v4;
  unsigned __int16 v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int16 v8;
  int v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned __int16 v12;
  unsigned int v13;
  char *v14;
  unsigned __int8 v15;
  __int16 v16;

  if (!a1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c");
  if (!a2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c");
  if (!a3)
    return 0;
  v4 = a1;
  v5 = *(_WORD *)(a2 + 6);
  if (*(unsigned __int16 *)(a2 + 4) >= a3)
    v6 = a3;
  else
    v6 = *(unsigned __int16 *)(a2 + 4);
  v7 = (_QWORD *)(a2 + 24 * *(unsigned __int8 *)(a2 + 1) + 24);
  v8 = v6;
  while (1)
  {
    v9 = *((unsigned __int8 *)v7 - 8);
    v10 = v7;
    if (v9 == 3)
      break;
    if (v9 != 4)
    {
      v10 = (_QWORD *)*v7;
      break;
    }
    if (v5)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c");
    v11 = sub_100053900(v4, *v7, v8);
    if (v11 > v8)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c");
    v12 = v11;
    if (v11 == v8)
    {
      v16 = 0;
      goto LABEL_22;
    }
LABEL_18:
    v15 = *(_BYTE *)(a2 + 1) + 1;
    *(_BYTE *)(a2 + 1) = v15;
    if (*(unsigned __int8 *)(a2 + 2) <= v15)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c");
    v5 = 0;
    v8 -= v12;
    v7 += 3;
    v4 += v12;
  }
  v13 = *((unsigned __int16 *)v7 - 3);
  if (v13 < v5)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c");
  v14 = (char *)v10 + v5;
  v12 = v13 - v5;
  if ((unsigned __int16)(v13 - v5) < v8)
  {
    memmove(v4, v14, (unsigned __int16)(v13 - v5));
    goto LABEL_18;
  }
  memmove(v4, v14, v8);
  v16 = v5 + v8;
LABEL_22:
  *(_WORD *)(a2 + 6) = v16;
  *(_WORD *)(a2 + 4) -= v6;
  return v6;
}

uint64_t sub_100053ACC()
{
  return (*((uint64_t (__cdecl **)())off_100978DB8 + 6))();
}

uint64_t sub_100053ADC(uint64_t a1, unsigned int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v14;
  _OWORD *v15;
  uint64_t v16;

  v16 = 0;
  sub_10004AD30((uint64_t)&v16);
  v4 = v16;
  v5 = *(unsigned __int8 *)(a1 + 8);
  switch(v5)
  {
    case 1:
      v8 = byte_100999058;
      if (!byte_100999058)
      {
        sub_100253460();
        v8 = byte_100999058;
      }
      v7 = 5 * v8;
      v6 = qword_100998FC0;
      break;
    case 14:
      v9 = *(unsigned __int16 *)(a1 + 4);
      if (v9 >> 10 < 0x3F)
      {
        v6 = qword_100998FC0;
        v10 = v9 == 3108;
        v7 = *(unsigned __int8 *)(qword_100998FC0 + 3) / 3u;
        if (!v10)
          v7 = *(unsigned __int8 *)(qword_100998FC0 + 3);
      }
      else
      {
        v6 = qword_100998FC0;
        v7 = *(unsigned __int8 *)(qword_100998FC0 + 6);
      }
      break;
    case 15:
      v6 = qword_100998FC0;
      v7 = *(unsigned __int8 *)(qword_100998FC0 + 4);
      break;
    default:
      v6 = qword_100998FC0;
      v7 = *(unsigned __int8 *)(qword_100998FC0 + 5);
      break;
  }
  *(_DWORD *)a1 = v7 + v4;
  v11 = (unsigned __int16)word_100984750;
  v12 = *(unsigned __int8 *)(v6 + 2);
  if ((unsigned __int16)word_100984750 > v12)
  {
    sub_100253460();
    v11 = (unsigned __int16)word_100984750;
    v12 = *(unsigned __int8 *)(qword_100998FC0 + 2);
  }
  if (v11 == v12)
    return 603;
  v14 = *(_OWORD *)(a1 + 16);
  v15 = (_OWORD *)(qword_100984760 + 32 * v11);
  *v15 = *(_OWORD *)a1;
  v15[1] = v14;
  if (a2)
    *a2 = v11;
  word_100984750 = v11 + 1;
  sub_100049C28();
  return 0;
}

uint64_t sub_100053C48(uint64_t a1, char *a2, size_t size, int a4)
{
  unsigned int v4;
  _BYTE *v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  char *v11;
  char *v12;

  v4 = size;
  if (a4)
    goto LABEL_2;
  if (size <= 8)
  {
    if ((_DWORD)size)
    {
      v7 = (_BYTE *)(a1 + 8);
      v8 = size;
      do
      {
        v9 = *a2++;
        *v7++ = v9;
        --v8;
      }
      while (v8);
    }
    LOBYTE(a4) = 3;
    goto LABEL_8;
  }
  v11 = (char *)sub_100052DC0(size);
  if (v11)
  {
    v12 = v11;
    memmove(v11, a2, v4);
    LOBYTE(a4) = 0;
    a2 = v12;
LABEL_2:
    *(_QWORD *)(a1 + 8) = a2;
LABEL_8:
    result = 0;
    *(_BYTE *)a1 = a4;
    *(_WORD *)(a1 + 2) = v4;
    return result;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 2) = 0;
  *(_BYTE *)a1 = 2;
  return 106;
}

void sub_100053D00(unsigned __int16 *a1)
{
  uint64_t v1;
  void (*v2)(unsigned __int16 *, uint64_t);
  int v3;
  _DWORD *v4;
  BOOL v5;
  int v7;
  char v8;
  int v9;
  int v10;
  unsigned int v11;
  int *v12;
  int v13;
  int v14;
  unsigned int v15;
  _BOOL4 v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  unsigned __int16 *v21;
  size_t v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  unsigned __int16 *v26;
  NSObject *v27;
  NSObject *v28;
  _BYTE v29[7];
  char v30;
  void *ptr[2];

  v1 = qword_10098FA10;
  v2 = (void (*)(unsigned __int16 *, uint64_t))off_10098FA00;
  v4 = (_DWORD *)((char *)a1 + 1);
  v3 = *(_DWORD *)((char *)a1 + 1);
  memset(ptr, 0, 15);
  if (v3)
    v5 = 0;
  else
    v5 = *((_DWORD *)a1 + 1) == 0;
  if (v5)
    return;
  if (!*((_BYTE *)a1 + 58))
    goto LABEL_9;
  v7 = *(unsigned __int8 *)v4;
  if (v7 == 255)
  {
    *v4 = *(_DWORD *)((char *)a1 + 51);
    *((_DWORD *)a1 + 1) = *(_DWORD *)(a1 + 27);
LABEL_9:
    v8 = *(_BYTE *)v4;
    goto LABEL_10;
  }
  v8 = v7 - 2;
  *(_BYTE *)v4 = v8;
LABEL_10:
  if (v8 == 1 && (a1[1] & 0xC0) == 0x40)
  {
    v30 = 0;
    memset(v29, 0, sizeof(v29));
    if (!sub_100054280((_BYTE *)a1 + 1, (uint64_t)v29, &v30))
    {
      if (v30)
      {
        *v4 = *(_DWORD *)v29;
        *(_DWORD *)((char *)v4 + 3) = *(_DWORD *)&v29[3];
      }
    }
  }
  v9 = *((char *)a1 + 24);
  if (v9 <= 27)
  {
    if (v9 <= -40)
    {
      if (v9 >= 0xFFFFFFA1)
        v10 = (int)((double)(-40 - v9) / 5.0);
      else
        v10 = 10;
    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v10 = 11;
  }
  v11 = *((unsigned __int8 *)a1 + 44);
  if (v11 <= 3)
  {
    v12 = (int *)&xmmword_10098F998 + v10;
    if (v11 == 1)
    {
      v13 = *v12;
    }
    else
    {
      v14 = v12[12];
      v12 += 12;
      v13 = v14;
    }
    if (v13 != -1)
      *v12 = v13 + 1;
  }
  v15 = *((unsigned __int8 *)a1 + 28);
  v16 = v15 < 3;
  if (v15 >= 3)
  {
    if (sub_10005549C())
    {
      sub_100054530("Invalid packet status:%d", *((unsigned __int8 *)a1 + 28));
      v17 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_100253460();
  }
  if (sub_100056080(qword_10098FA38)
    && (v18 = (void *)sub_100251684(qword_10098FA38), (ptr[0] = v18) != 0))
  {
    while (1)
    {
      v19 = sub_1002516A8((uint64_t)v18);
      if (*v4 == *(_DWORD *)(v19 + 1) && *(_DWORD *)((char *)v4 + 3) == *(_DWORD *)(v19 + 4))
        break;
      sub_10025168C((uint64_t)ptr);
      v18 = ptr[0];
      if (!ptr[0])
        goto LABEL_40;
    }
    v21 = (unsigned __int16 *)v19;
    sub_1002516FC(qword_10098FA38, (_QWORD *)ptr[0], 0);
    if (*((_BYTE *)v21 + 28) != 1)
      sub_100253460();
  }
  else
  {
LABEL_40:
    if (*((_BYTE *)a1 + 28) != 1)
    {
      v21 = 0;
      goto LABEL_47;
    }
    v21 = (unsigned __int16 *)sub_100052DC0(0x50uLL);
    *(_OWORD *)v21 = 0u;
    *((_OWORD *)v21 + 1) = 0u;
    *((_OWORD *)v21 + 2) = 0u;
    *((_OWORD *)v21 + 3) = 0u;
    *((_OWORD *)v21 + 4) = 0u;
    v16 = 0;
    *((_QWORD *)v21 + 2) = sub_100052DC0(0x672uLL);
  }
  v22 = a1[4];
  if (v22 > 0x671 || (v23 = v21[4], v24 = v23 + v22, (unsigned __int16)(v23 + v22) > 0x672u))
  {
    if (sub_10005549C())
    {
      sub_100054530("Total advertising data length %d is larger than max advertising length %d", v21[4] + a1[4], 1650);
      v27 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_100253460();
    goto LABEL_63;
  }
  memmove((void *)(*((_QWORD *)v21 + 2) + v23), *((const void **)a1 + 2), v22);
  v25 = *((_QWORD *)v21 + 2);
  memmove(v21, a1, 0x50uLL);
  *((_QWORD *)v21 + 2) = v25;
  v21[4] = v24;
  if (*((_BYTE *)a1 + 28) == 1)
  {
    sub_10025142C(qword_10098FA38, (uint64_t)v21, 80);
    return;
  }
LABEL_47:
  if (!v16)
    goto LABEL_62;
  if (!v2)
  {
    if (sub_10005549C())
    {
      sub_100054530("Error : got a found event when scan is stopped");
      v28 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        sub_1006CE7A4();
        if (!v21)
          return;
        goto LABEL_63;
      }
    }
LABEL_62:
    if (!v21)
      return;
    goto LABEL_63;
  }
  if (v21)
    v26 = v21;
  else
    v26 = a1;
  v2(v26, v1);
  if (v21)
  {
LABEL_63:
    sub_100053298(*((void **)v21 + 2));
    sub_100053298(v21);
  }
}

void sub_1000540E8(uint64_t a1, uint64_t a2)
{
  uint8x8_t v4;
  int16x8_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  void *v9;
  _BYTE v10[6024];

  bzero(v10, 0x1788uLL);
  if (off_10098AC48)
  {
    if (sub_1000554A4((unsigned __int8 *)a1, (uint64_t)v10, v4, v5))
      return;
    if (a1 && *(_WORD *)(a1 + 8) && *(_QWORD *)(a1 + 16))
    {
      if (byte_10098AC58 == 1 && (v10[16] & 1) == 0)
        return;
LABEL_16:
      off_10098AC48(v10, a2);
      return;
    }
    if (sub_10005549C())
    {
      sub_100054530("Response is empty.");
      v7 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = 136446210;
        v9 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, " %{public}s", (uint8_t *)&v8, 0xCu);
      }
    }
    if (byte_10098AC58 != 1)
      goto LABEL_16;
  }
  else if (sub_10005549C())
  {
    sub_100054530("No callbacks defined.");
    v6 = sub_1000544A0(0x42u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

uint64_t sub_100054280(_BYTE *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  __int16 v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t result;
  NSObject *v13;
  int v14;
  void *v15;

  if (!a1 || !a2 || !a3)
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Invalid parameter pointer specified");
    v10 = sub_1000544A0(0x43u);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return 101;
LABEL_19:
    sub_1006CE7A4();
    return 101;
  }
  if (*a1 != 1 || (a1[1] & 0xC0) != 0x40)
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Cannot resolve a non-resolvable address.");
    v11 = sub_1000544A0(0x43u);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      return 101;
    goto LABEL_19;
  }
  if (qword_10098FC20 && word_10098FC28)
  {
    v6 = 0;
    v7 = 0;
    *a3 = 0;
    do
    {
      if (sub_10022DD00((uint64_t)a1, (__int128 *)(qword_10098FC20 + v6 + 7)) && !*a3)
      {
        v8 = *(_DWORD *)(qword_10098FC20 + v6);
        v9 = *(_WORD *)(qword_10098FC20 + v6 + 4);
        *(_BYTE *)(a2 + 6) = *(_BYTE *)(qword_10098FC20 + v6 + 6);
        *(_WORD *)(a2 + 4) = v9;
        *(_DWORD *)a2 = v8;
        *a3 = 1;
      }
      ++v7;
      v6 += 24;
    }
    while (v7 < (unsigned __int16)word_10098FC28);
    return 0;
  }
  result = sub_10005549C();
  if ((_DWORD)result)
  {
    sub_100054530("No resolving cache defined.");
    v13 = sub_1000544A0(0x43u);
    result = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
    if ((_DWORD)result)
    {
      v14 = 136446210;
      v15 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, " %{public}s", (uint8_t *)&v14, 0xCu);
      return 0;
    }
  }
  return result;
}

void *sub_100054494()
{
  return &unk_1009901A0;
}

uint64_t sub_1000544A0(unsigned int a1)
{
  int v2;
  _QWORD block[4];
  char v5;

  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000E9158;
  block[3] = &unk_10091A470;
  v5 = a1;
  if (qword_10097CC60 != -1)
    dispatch_once(&qword_10097CC60, block);
  if (a1 >= 0x5C)
    v2 = 92;
  else
    v2 = a1;
  return qword_10097CC68[v2];
}

uint64_t sub_100054530(char *a1, ...)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  va_list va;

  va_start(va, a1);
  v9 = unk_10091F930;
  bzero(&unk_1009901A0, 0x1000uLL);
  result = sub_1000545AC((uint64_t)&v9, (unsigned __int8 *)a1, (char **)va);
  if ((_DWORD)result)
  {
    WORD2(v9) = 0;
    return sub_1002596F4((uint64_t)&v9, (uint64_t)"Bad format string in debug output (error %d): \"%s\"", v3, v4, v5, v6, v7, v8, result);
  }
  return result;
}

uint64_t sub_1000545AC(uint64_t a1, unsigned __int8 *a2, char **a3)
{
  int v3;
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  char v8;
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  char **v14;
  char *v15;
  char *v16;
  char **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t *v26;
  BOOL v27;
  char **v28;
  char *v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int i;
  int v38;
  unsigned int v39;
  unsigned __int8 *v40;
  int v41;
  unsigned int v42;
  unsigned __int8 *v43;
  _BYTE *v44;
  unsigned __int8 *v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t *v59;
  unsigned __int16 **v60;
  unsigned __int16 *v61;
  char **v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 **v71;
  unsigned __int8 *v72;
  unint64_t v73;
  unsigned int v74;
  int v75;
  char *v76;
  char **v77;
  char *j;
  int v79;
  int v80;
  char **v81;
  char *v82;
  uint64_t k;
  unsigned int v84;
  int v85;
  uint64_t *v86;
  char **v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  uint64_t *v93;
  char **v94;
  char **v95;
  char *v96;
  int v97;
  unint64_t v98;
  const char *v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  int *v103;
  int v104;
  uint64_t *v105;
  char **v106;
  char *v107;
  char **v108;
  int v109;
  char **v110;
  int v111;
  int *v112;
  char **v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  int v117;
  const char *v118;
  char *v119;
  unint64_t v120;
  unsigned int v121;
  BOOL v122;
  unsigned int v123;
  char **v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  char **v129;
  char *v130;
  char **v131;
  int v132;
  uint64_t v133;
  unsigned int v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned __int16 v141;
  unsigned int v142;
  char v143;
  uint64_t v144;
  char v145;
  char v146;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char v151;

  v3 = *a2;
  if (!*a2)
    return 0;
  v4 = a2;
  while (1)
  {
    if (!*(_WORD *)(a1 + 2) || *(unsigned __int16 *)(a1 + 2) - 1 <= *(unsigned __int16 *)(a1 + 4))
    {
      if (!*(_BYTE *)a1)
        return 0;
      if (!sub_1002591C0(a1))
        return 106;
      v3 = *v4;
    }
    if (v3 == 37)
      break;
    v136 = *(_QWORD *)(a1 + 8);
    v137 = *(unsigned __int16 *)(a1 + 4);
    *(_WORD *)(a1 + 4) = v137 + 1;
    *(_BYTE *)(v136 + v137) = v3;
LABEL_277:
    v138 = *++v4;
    v3 = v138;
    if (!v138)
      return 0;
  }
  v6 = 0;
  v144 = 0;
  v143 = 0;
  v7 = 0;
  v8 = 1;
  v145 = 1;
  v146 = 0;
  while (1)
  {
    if ((v8 & 1) == 0)
      goto LABEL_277;
    v10 = v4 + 1;
    v9 = v4[1];
    result = 115;
    if (v9 <= 0x6B)
      break;
    switch(v4[1])
    {
      case 'p':
        v17 = a3++;
        v150 = *v17;
        v18 = *(_QWORD *)(a1 + 8);
        v19 = *(unsigned __int16 *)(a1 + 4);
        *(_WORD *)(a1 + 4) = v19 + 1;
        *(_BYTE *)(v18 + v19) = 48;
        v20 = *(_QWORD *)(a1 + 8);
        v21 = *(unsigned __int16 *)(a1 + 4);
        *(_WORD *)(a1 + 4) = v21 + 1;
        *(_BYTE *)(v20 + v21) = 120;
        v22 = 7;
        do
        {
          v23 = v22;
          v24 = *((unsigned __int8 *)&v150 + v22);
          LOBYTE(v149) = 0;
          v148 = 0;
          v25 = -2;
          v26 = &v149;
          do
          {
            *((_BYTE *)v26 - 1) = a0123456789abcd_0[v24 & 0xF];
            v26 = (uint64_t *)((char *)v26 - 1);
            v24 >>= 4;
            v27 = __CFADD__(v25++, 1);
          }
          while (!v27);
          sub_1000729B4(a1, v26);
          v22 = v23 - 1;
        }
        while (v23);
        goto LABEL_272;
      case 'q':
      case 'r':
      case 't':
      case 'v':
      case 'w':
        return result;
      case 's':
        if ((v144 & 0x100000000) != 0)
        {
LABEL_87:
          v60 = (unsigned __int16 **)a3++;
          v61 = *v60;
          if ((v146 & 1) != 0)
          {
            v62 = a3++;
            if (v61)
            {
              v63 = *(_DWORD *)v62;
              if ((_WORD)v63)
              {
                v64 = (unsigned __int16)v63;
                v65 = a1;
LABEL_206:
                sub_100259630(v65, v61, v64);
                goto LABEL_254;
              }
              v127 = a1;
              v128 = "(empty)";
              goto LABEL_253;
            }
          }
          else if (v61)
          {
            v65 = a1;
            v64 = 0xFFFF;
            goto LABEL_206;
          }
          v127 = a1;
          v128 = "(null)";
LABEL_253:
          sub_1000729B4(v127, v128);
LABEL_254:
          v146 = 0;
LABEL_272:
          v8 = 0;
          goto LABEL_273;
        }
        v129 = a3++;
        v130 = *v129;
        if ((v146 & 1) != 0)
        {
          v131 = a3++;
          if (v130)
          {
            v132 = *(_DWORD *)v131;
            if ((_WORD)v132)
            {
              sub_100259120(a1, v130, (unsigned __int16)v132);
LABEL_259:
              v146 = 0;
              v8 = 0;
              BYTE4(v144) = 0;
LABEL_273:
              v13 = v6;
              goto LABEL_274;
            }
            v133 = a1;
            v130 = "(empty)";
LABEL_258:
            sub_1000729B4(v133, v130);
            goto LABEL_259;
          }
        }
        else if (v130)
        {
          v133 = a1;
          goto LABEL_258;
        }
        v133 = a1;
        v130 = "(null)";
        goto LABEL_258;
      case 'u':
        if ((v144 & 0x100000000) != 0 || (v143 & 1) == 0)
        {
          v124 = a3++;
          v67 = *(unsigned int *)v124;
        }
        else
        {
          v66 = (unint64_t *)a3++;
          v67 = *v66;
        }
        if ((__int16)v7 >= 1)
        {
          v125 = (unsigned __int16)v7;
          v126 = v67;
          do
          {
            --v125;
            v122 = v126 > 9;
            v126 /= 0xAuLL;
          }
          while (v122);
          if (v125 >= 1)
            sub_100259414(a1, v125);
        }
        sub_1002595A0(a1, v67);
        goto LABEL_272;
      case 'x':
        if (!(_WORD)v7)
          v7 = 8;
        v68 = (unsigned int *)a3++;
        sub_100072A40(a1, *v68, (__int16)v7);
        goto LABEL_272;
      default:
        if (v9 == 108)
        {
          v123 = v4[2] - 98;
          if (v123 > 0x16)
            return result;
          if (((1 << v123) & 0x4A0007) != 0)
          {
            v8 = 1;
            v13 = v6;
          }
          else
          {
            if (v4[2] != 108 || v4[3] != 117)
              return result;
            v8 = 1;
            v13 = v6;
            v143 = 1;
          }
          BYTE4(v144) = 1;
          goto LABEL_274;
        }
        if (v9 != 126)
          return result;
        v28 = a3;
        v29 = *a3;
        a3 += 2;
        if (v29)
        {
          v30 = *((_DWORD *)v28 + 2);
          if (v30 <= 3)
          {
            v31 = *((_DWORD *)v29 + 2);
            if (v31)
            {
              if (!*(_QWORD *)v29)
              {
                sub_100253460();
                v31 = *((_DWORD *)v29 + 2);
              }
              if (v31 <= 0)
              {
                sub_100253460();
                LOWORD(v31) = *((_WORD *)v29 + 4);
              }
              v32 = *(_QWORD *)v29;
              v142 = (unsigned __int16)v31;
              if (v32)
                v33 = (unsigned __int16)v31 == 0;
              else
                v33 = 1;
              if (v33)
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/suppor"
                                       "t/oi_varstring.c");
              if ((_WORD)v31)
              {
                v34 = 0;
                v35 = 0;
                v140 = v30;
                v141 = v31;
                while (1)
                {
                  switch(v30)
                  {
                    case 0u:
                      sub_100253460();
                      goto LABEL_67;
                    case 1u:
                      if (v142 <= (unsigned __int16)v35)
                        sub_100253460();
                      v36 = v35 + 1;
                      v34 = *(unsigned __int8 *)(v32 + (unsigned __int16)v35);
                      if (v34 < 0xC0)
                      {
                        ++v35;
                        goto LABEL_67;
                      }
                      if (v34 <= 0xFC)
                      {
                        v38 = 5;
                        for (i = 252; i >= v34; i = (2 * i) & 0xF8)
                          --v38;
                      }
                      else
                      {
                        i = 252;
                        v38 = 5;
                      }
                      if (v38 + (unsigned __int16)v36 > (int)v142)
                      {
                        v139 = v36;
                        sub_100253460();
                        v36 = v139;
                      }
                      v34 &= ~i;
                      if (!v38)
                      {
                        v35 = v36;
                        goto LABEL_57;
                      }
                      v49 = v38;
                      v50 = v36;
                      v30 = v140;
                      do
                      {
                        v51 = (unsigned __int16)v50++;
                        v34 = *(_BYTE *)(v32 + v51) & 0x3F | (v34 << 6);
                        --v49;
                      }
                      while (v49);
                      v35 = v36 + v38;
                      goto LABEL_67;
                    case 2u:
                      v39 = (unsigned __int16)v35 + 2;
                      if (v39 > v142)
                        sub_100253460();
                      v40 = (unsigned __int8 *)(v32 + (unsigned __int16)v35);
                      v41 = *v40;
                      LODWORD(v40) = v40[1];
                      v34 = v41 | ((_DWORD)v40 << 8);
                      if ((v40 & 0xFC) != 0xD8)
                        goto LABEL_56;
                      v42 = (unsigned __int16)(v35 + 2);
                      v35 = v42 + 2;
                      if (v42 + 2 > v142)
                        sub_100253460();
                      v43 = (unsigned __int8 *)(v32 + v42);
                      v44 = v43 + 1;
                      goto LABEL_55;
                    case 3u:
                      v39 = (unsigned __int16)v35 + 2;
                      if (v39 > v142)
                        sub_100253460();
                      v45 = (unsigned __int8 *)(v32 + (unsigned __int16)v35);
                      v46 = v45[1];
                      LODWORD(v45) = *v45;
                      v34 = v46 | ((_DWORD)v45 << 8);
                      if ((v45 & 0xFC) == 0xD8)
                      {
                        v47 = (unsigned __int16)(v35 + 2);
                        v35 = v47 + 2;
                        if (v47 + 2 > v142)
                          sub_100253460();
                        v44 = (_BYTE *)(v32 + v47);
                        v43 = v44 + 1;
LABEL_55:
                        v34 = (*v43 | ((*v44 & 3) << 8) & 0x3FF | ((v34 & 0x3FF) << 10)) + 0x10000;
                        v48 = *(unsigned __int16 *)(a1 + 2);
                        v30 = v140;
                      }
                      else
                      {
LABEL_56:
                        v35 = v39;
LABEL_57:
                        v30 = v140;
LABEL_67:
                        v48 = *(unsigned __int16 *)(a1 + 2);
                        if (v34 <= 0xFE)
                        {
                          if (!*(_WORD *)(a1 + 2) || (v52 = *(unsigned __int16 *)(a1 + 4), v48 - 1 <= v52))
                          {
                            v8 = *(_BYTE *)a1;
                            if (!*(_BYTE *)a1)
                              goto LABEL_231;
                            if (!sub_1002591C0(a1))
                              goto LABEL_230;
                            v52 = *(unsigned __int16 *)(a1 + 4);
                          }
                          v53 = *(_QWORD *)(a1 + 8);
                          *(_WORD *)(a1 + 4) = v52 + 1;
                          *(_BYTE *)(v53 + v52) = v34;
                          goto LABEL_83;
                        }
                      }
                      v54 = v48 - 7;
                      if (v48 < 7 || (v55 = *(unsigned __int16 *)(a1 + 4), v54 <= v55))
                      {
                        v8 = *(_BYTE *)a1;
                        if (!*(_BYTE *)a1)
                          goto LABEL_231;
                        if (!sub_1002591C0(a1))
                          goto LABEL_230;
                        v55 = *(unsigned __int16 *)(a1 + 4);
                      }
                      v56 = *(_QWORD *)(a1 + 8);
                      *(_WORD *)(a1 + 4) = v55 + 1;
                      *(_BYTE *)(v56 + v55) = 92;
                      LOBYTE(v149) = 0;
                      v148 = 0;
                      v57 = -6;
                      v58 = v34;
                      v59 = &v149;
                      do
                      {
                        *((_BYTE *)v59 - 1) = a0123456789abcd_0[v58 & 0xF];
                        v59 = (uint64_t *)((char *)v59 - 1);
                        v58 >>= 4;
                        v27 = __CFADD__(v57++, 1);
                      }
                      while (!v27);
                      if (sub_1000729B4(a1, v59))
                        goto LABEL_230;
LABEL_83:
                      if ((unsigned __int16)v35 == v141)
                        goto LABEL_230;
                      break;
                    default:
                      goto LABEL_67;
                  }
                }
              }
            }
          }
        }
        else
        {
          sub_1000729B4(a1, "(null)");
        }
LABEL_240:
        v8 = 0;
        v13 = v6;
LABEL_274:
        v6 = v13;
        v4 = v10;
        if ((__int16)v7 > 32)
          return 115;
        break;
    }
  }
  v12 = v9 - 33;
  v13 = 1;
  v8 = 1;
  switch(v12)
  {
    case 0u:
      v14 = a3++;
      sub_100255B10(*(unsigned int *)v14);
      v16 = v15;
      goto LABEL_271;
    case 2u:
      sub_1000729B4(a1, "0x");
      goto LABEL_128;
    case 4u:
      v8 = 0;
      v69 = *(_QWORD *)(a1 + 8);
      v70 = *(unsigned __int16 *)(a1 + 4);
      *(_WORD *)(a1 + 4) = v70 + 1;
      *(_BYTE *)(v69 + v70) = 37;
      goto LABEL_273;
    case 9u:
      v71 = (unsigned __int8 **)a3++;
      v72 = *v71;
      if (!*v71)
        goto LABEL_168;
      v148 = 0;
      v149 = 0;
      sub_100072C50(&v148, v72, 0);
      if (*v72)
      {
        v73 = 0;
        do
        {
          v74 = *((unsigned __int8 *)&v148 + v73);
          v151 = 0;
          v75 = -2;
          v76 = &v151;
          v150 = 0;
          do
          {
            *--v76 = a0123456789abcd_0[v74 & 0xF];
            v74 >>= 4;
            v27 = __CFADD__(v75++, 1);
          }
          while (!v27);
          sub_1000729B4(a1, v76);
          ++v73;
        }
        while (v73 < *v72);
      }
      goto LABEL_240;
    case 0xAu:
      goto LABEL_274;
    case 0xCu:
      v145 = 0;
      goto LABEL_273;
    case 0xEu:
      v77 = a3++;
      v16 = *v77;
      if (*v77)
      {
        for (j = v16 + 1; ; ++j)
        {
          v79 = *(j - 1);
          if (v79 == 47 || v79 == 92)
          {
            v16 = j;
          }
          else if (!*(j - 1))
          {
            goto LABEL_271;
          }
        }
      }
      sub_1000729B4(a1, "(null)");
      v16 = 0;
      goto LABEL_271;
    case 0xFu:
      LOBYTE(v144) = ((__int16)v7 < 1) | v144;
      if ((__int16)v7 >= 1)
        v7 *= 10;
      goto LABEL_128;
    case 0x10u:
      v7 = (10 * v7) | 1;
      goto LABEL_273;
    case 0x11u:
      v80 = 2;
      goto LABEL_127;
    case 0x12u:
      v80 = 3;
      goto LABEL_127;
    case 0x13u:
      v80 = 4;
      goto LABEL_127;
    case 0x14u:
      v80 = 5;
      goto LABEL_127;
    case 0x15u:
      v80 = 6;
      goto LABEL_127;
    case 0x16u:
      v80 = 7;
      goto LABEL_127;
    case 0x17u:
      v80 = 8;
      goto LABEL_127;
    case 0x18u:
      v80 = 9;
LABEL_127:
      v7 = v80 + 10 * v7;
LABEL_128:
      v8 = 1;
      goto LABEL_273;
    case 0x19u:
      v81 = a3++;
      v82 = *v81;
      if (!*v81)
        goto LABEL_168;
      for (k = 0; k != 6; ++k)
      {
        if (k)
          sub_1000729B4(a1, ":");
        v84 = v82[k];
        LOBYTE(v149) = 0;
        v85 = -2;
        v86 = &v149;
        v148 = 0;
        do
        {
          *((_BYTE *)v86 - 1) = a0123456789abcd_0[v84 & 0xF];
          v86 = (uint64_t *)((char *)v86 - 1);
          v84 >>= 4;
          v27 = __CFADD__(v85++, 1);
        }
        while (!v27);
        sub_1000729B4(a1, v86);
      }
      goto LABEL_240;
    case 0x1Eu:
      v146 = 1;
      goto LABEL_273;
    case 0x1Fu:
      v87 = a3;
      v88 = *a3;
      a3 += 2;
      if (!v88)
        goto LABEL_168;
      v89 = *((unsigned int *)v87 + 2);
      if (v89 <= 0x8000)
      {
        if (!(_WORD)v7)
          v7 = 16;
        if ((_DWORD)v89)
        {
          v90 = 0;
          while (v90 != 160)
          {
            v91 = v88[v90];
            LOBYTE(v149) = 0;
            v92 = -2;
            v93 = &v149;
            v148 = 0;
            do
            {
              *((_BYTE *)v93 - 1) = a0123456789abcd_0[v91 & 0xF];
              v93 = (uint64_t *)((char *)v93 - 1);
              v91 >>= 4;
              v27 = __CFADD__(v92++, 1);
            }
            while (!v27);
            sub_1000729B4(a1, v93);
            if (((v90 != (_DWORD)v89 - 1) & v145) == 1)
              sub_100259414(a1, 1);
            if (++v90 == v89)
              goto LABEL_230;
          }
          sub_1000729B4(a1, " ...");
LABEL_230:
          v8 = 0;
LABEL_231:
          v13 = v6;
          goto LABEL_274;
        }
        goto LABEL_240;
      }
      result = 101;
      break;
    case 0x21u:
      v94 = a3++;
      if (*(_DWORD *)v94)
        v16 = "TRUE";
      else
        v16 = "FALSE";
      goto LABEL_271;
    case 0x32u:
      goto LABEL_87;
    case 0x33u:
      v95 = a3++;
      v96 = *v95;
      v148 = 0;
      if (!v96)
      {
        v96 = (char *)&v148;
        sub_10004AD30((uint64_t)&v148);
      }
      v97 = *(_DWORD *)v96;
      v98 = *((__int16 *)v96 + 2);
      v99 = ".";
      if (v98 < 0x64)
        v99 = ".0";
      if (v98 >= 0xA)
        v100 = (char *)v99;
      else
        v100 = ".00";
      sub_1002595A0(a1, v97 & 0x1FFF);
      sub_1000729B4(a1, v100);
      v101 = v98;
      v102 = a1;
      goto LABEL_226;
    case 0x3Au:
      v103 = (int *)a3++;
      v104 = *v103;
      if (v104 > 88)
      {
        switch(v104)
        {
          case 'b':
            v16 = "\x1B[0;34m";
            break;
          case 'c':
            v16 = "\x1B[0;36m";
            break;
          case 'd':
LABEL_255:
            v16 = "\x1B[1;30m";
            break;
          case 'e':
          case 'f':
          case 'h':
          case 'i':
          case 'j':
          case 'k':
          case 'n':
          case 'o':
          case 'p':
          case 'q':
            goto LABEL_260;
          case 'g':
            v16 = "\x1B[0;32m";
            break;
          case 'l':
LABEL_256:
            v16 = "\x1B[0;37m";
            break;
          case 'm':
            v16 = "\x1B[0;35m";
            break;
          case 'r':
            v16 = "\x1B[0;31m";
            break;
          default:
            if (v104 == 89)
            {
              v16 = "\x1B[1;33m";
            }
            else if (v104 == 121)
            {
              v16 = "\x1B[0;33m";
            }
            else
            {
LABEL_260:
              v16 = "\x1B[0;39;49m";
            }
            break;
        }
      }
      else
      {
        switch(v104)
        {
          case 'B':
            v16 = "\x1B[1;34m";
            goto LABEL_271;
          case 'C':
            v16 = "\x1B[1;36m";
            goto LABEL_271;
          case 'D':
            goto LABEL_255;
          case 'E':
          case 'F':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
          case 'N':
          case 'O':
          case 'P':
          case 'Q':
            goto LABEL_260;
          case 'G':
            v16 = "\x1B[1;32m";
            goto LABEL_271;
          case 'L':
            goto LABEL_256;
          case 'M':
            v16 = "\x1B[1;35m";
            goto LABEL_271;
          case 'R':
            v16 = "\x1B[1;31m";
            goto LABEL_271;
          default:
            if (v104 == 48)
            {
              v16 = "\x1B[0;30m";
            }
            else
            {
              if (v104 != 87)
                goto LABEL_260;
              v16 = "\x1B[1;37m";
            }
            break;
        }
      }
      goto LABEL_271;
    case 0x3Du:
      v105 = (uint64_t *)a3++;
      if (*v105)
      {
        sub_10017CAA0(a1, *v105, 0);
      }
      else
      {
LABEL_168:
        v16 = "(null)";
LABEL_271:
        sub_1000729B4(a1, v16);
      }
      goto LABEL_272;
    case 0x40u:
      v106 = a3++;
      v107 = *v106;
      if ((v146 & 1) == 0)
      {
        if (v107)
        {
          sub_100259250(a1, v107);
          goto LABEL_254;
        }
LABEL_221:
        v128 = "(null)";
        goto LABEL_252;
      }
      v108 = a3++;
      if (!v107)
        goto LABEL_221;
      v109 = *(_DWORD *)v108;
      if ((_WORD)v109)
      {
        sub_100259320(a1, v107, (unsigned __int16)v109);
        goto LABEL_254;
      }
      v128 = "(empty)";
LABEL_252:
      v127 = a1;
      goto LABEL_253;
    case 0x41u:
      v110 = a3++;
      v111 = *(_DWORD *)v110;
      if ((v146 & 1) != 0)
      {
        v112 = (int *)a3++;
        v7 = *v112;
        if (*v112 << 16 > 0x200000)
          return result;
      }
      else if (!(_WORD)v7)
      {
        v7 = 32;
        goto LABEL_234;
      }
      if ((__int16)v7 < 1)
        goto LABEL_254;
LABEL_234:
      v134 = 0x80000000 >> -(char)v7;
      do
      {
        if ((v134 & v111) != 0)
          v135 = "1";
        else
          v135 = "0";
        sub_1000729B4(a1, v135);
        v27 = v134 >= 2;
        v134 >>= 1;
      }
      while (v27);
      v146 = 0;
      goto LABEL_240;
    case 0x42u:
      v8 = 0;
      v113 = a3++;
      LODWORD(v113) = *(_DWORD *)v113;
      v114 = *(_QWORD *)(a1 + 8);
      v115 = *(unsigned __int16 *)(a1 + 4);
      *(_WORD *)(a1 + 4) = v115 + 1;
      *(_BYTE *)(v114 + v115) = (_BYTE)v113;
      goto LABEL_273;
    case 0x43u:
      v116 = (int *)a3++;
      v117 = *v116;
      v118 = "+";
      if ((v6 & 1) == 0)
        v118 = 0;
      if (v117 >= 0)
        v119 = (char *)v118;
      else
        v119 = "-";
      if (v117 >= 0)
        v120 = v117;
      else
        v120 = -v117;
      LOWORD(v7) = v7 - ((v117 < 0) | v6 & 1);
      v121 = v120;
      do
      {
        v7 = (__int16)(v7 - 1);
        v122 = v7 >= 1 && v121 > 9;
        v121 /= 0xAu;
      }
      while (v122);
      if (v7 < 1)
        goto LABEL_224;
      if ((v144 & 1) != 0)
      {
        sub_1000729B4(a1, v119);
        sub_100259120(a1, "000000000000000", (unsigned __int16)v7);
      }
      else
      {
        sub_100259414(a1, v7);
LABEL_224:
        sub_1000729B4(a1, v119);
      }
      v102 = a1;
      v101 = v120;
LABEL_226:
      sub_1002595A0(v102, v101);
      goto LABEL_240;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10005549C()
{
  return 1;
}

uint64_t sub_1000554A4(unsigned __int8 *a1, uint64_t a2, uint8x8_t a3, int16x8_t a4)
{
  unsigned __int8 *v5;
  unsigned int v6;
  int16x4_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  NSObject *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  NSObject *v29;
  int8x16_t *v30;
  unsigned int v31;
  unsigned int v32;
  int *v33;
  int v34;
  __int16 v35;
  const char *v36;
  const char *v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  NSObject *v43;
  void *v44;
  int *v45;
  int v46;
  size_t v47;
  char v48;
  NSObject *v49;
  void *v50;
  int v51;
  NSObject *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  NSObject *v58;
  NSObject *v60;
  NSObject *v61;
  void *v62;
  NSObject *log;
  os_log_t loga;
  void *v65;
  uint64_t v66;
  void *__dst;
  uint64_t v68;
  void *v69;
  unsigned __int8 *v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  unsigned int v74;
  uint8_t buf[4];
  void *v76;
  __int16 v77;
  int v78;

  if (!a1)
    goto LABEL_125;
  v5 = (unsigned __int8 *)(a2 + 5884);
  v6 = *a1;
  *(_BYTE *)a2 = v6 & 0xF;
  *(_QWORD *)(a2 + 8) = a1 + 1;
  *(_BYTE *)(a2 + 2555) = a1[24];
  *(_BYTE *)(a2 + 5946) = v6 >> 4;
  *(_WORD *)(a2 + 5968) = *((_WORD *)a1 + 13);
  *(_DWORD *)(a2 + 5970) = *((_DWORD *)a1 + 7);
  *(_BYTE *)(a2 + 5974) = a1[43];
  *(_BYTE *)(a2 + 5981) = a1[44];
  a3.i32[0] = *(_DWORD *)(a1 + 45);
  v7 = (int16x4_t)vmovl_u8(a3).u64[0];
  *(int16x4_t *)a4.i8 = vrev32_s16(v7);
  a4.i32[0] = v7.i32[0];
  *(_DWORD *)(a2 + 5982) = vmovn_s16(a4).u32[0];
  *(_WORD *)(a2 + 5986) = *(_WORD *)(a1 + 49);
  *(_BYTE *)(a2 + 2556) = a1[25];
  *(_QWORD *)(a2 + 5992) = a1 + 51;
  v8 = *((unsigned __int16 *)a1 + 4);
  *(_WORD *)(a2 + 6022) = v8;
  if (!(_DWORD)v8 || (v9 = *((_QWORD *)a1 + 2)) == 0)
  {
LABEL_125:
    if (sub_10005549C())
    {
      sub_100054530("Response is empty.");
      v58 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446210;
        v76 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, " %{public}s", buf, 0xCu);
      }
    }
    return 0;
  }
  v10 = 0;
  if (v8 >= 0x672)
    v11 = 1650;
  else
    v11 = v8;
  v74 = v11;
  v66 = a2 + 6016;
  v68 = a2 + 5907;
  v65 = (void *)(a2 + 5914);
  __dst = (void *)(a2 + 5633);
  v70 = (unsigned __int8 *)(a2 + 5068);
  v71 = a2 + 2568;
  v69 = (void *)(a2 + 2521);
  v72 = (unsigned __int8 *)(a2 + 2520);
  v73 = a2 + 20;
  while (2)
  {
    if (v8 <= (unsigned __int16)v10)
      goto LABEL_112;
    v12 = *(unsigned __int8 *)(v9 + (unsigned __int16)v10);
    if (!*(_BYTE *)(v9 + (unsigned __int16)v10))
      goto LABEL_112;
    v13 = (unsigned __int16)v10 + 1;
    v14 = v12 - 1;
    if ((_DWORD)v12 == 1 || v12 + (unsigned __int16)(v10 + 1) > v74)
    {
      if (sub_10005549C())
      {
        sub_100054530("parseADResponse Error [%@] Invalid advertising response data size (%u + %u)", v9, v8, (unsigned __int16)v13, v12);
        v60 = sub_1000544A0(0x42u);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
          sub_1006D3A68();
      }
      v18 = 4059;
      goto LABEL_109;
    }
    v16 = (unsigned __int16)v10 + 2;
    v17 = v16 + v14;
    v18 = 0;
    switch(*(_BYTE *)(v9 + v13))
    {
      case 1:
        v18 = 0;
        *(_BYTE *)(a2 + 16) = *(_BYTE *)(v9 + v16);
        goto LABEL_76;
      case 2:
      case 3:
        v19 = v9 + (unsigned __int16)v16;
        v20 = (v12 - 1);
        v21 = 2;
        goto LABEL_18;
      case 4:
      case 5:
        v19 = v9 + (unsigned __int16)v16;
        v20 = (v12 - 1);
        v21 = 4;
        goto LABEL_18;
      case 6:
      case 7:
        v19 = v9 + (unsigned __int16)v16;
        v20 = (v12 - 1);
        v21 = 16;
LABEL_18:
        v23 = v72;
        v22 = v73;
        goto LABEL_55;
      case 8:
        if ((v12 - 1) < 0x1Fu)
        {
          v47 = (v12 - 1);
          v48 = 1;
          goto LABEL_70;
        }
        if (sub_10005549C())
        {
          sub_100054530("parseADResponse Error [%@] Invalid size %d for LE_ADV_RESPONSE_FORMAT_PARTIAL_NAME)", v9, v8, (v12 - 1));
          v27 = sub_1000544A0(0x42u);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            goto LABEL_33;
        }
        goto LABEL_75;
      case 9:
        if ((v12 - 1) < 0x1Fu)
        {
          v47 = (v12 - 1);
          v48 = 2;
LABEL_70:
          *(_BYTE *)(a2 + 2552) = v48;
          memmove(v69, (const void *)(v9 + (unsigned __int16)v16), v47);
          v18 = 0;
          *(_BYTE *)(a2 + v14 + 2521) = 0;
          goto LABEL_76;
        }
        if (sub_10005549C())
        {
          sub_100054530("parseADResponse Error [%@] Invalid size %d for LE_ADV_RESPONSE_FORMAT_COMPLETE_NAME)", v9, v8, (v12 - 1));
          v27 = sub_1000544A0(0x42u);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
LABEL_33:
            v28 = sub_100054494();
            *(_DWORD *)buf = 136446466;
            v76 = v28;
            v77 = 1024;
            v78 = 0;
            v29 = v27;
            goto LABEL_65;
          }
        }
        goto LABEL_75;
      case 0xA:
        v18 = 0;
        *(_BYTE *)(a2 + 2553) = *(_BYTE *)(v9 + v16);
        *(_BYTE *)(a2 + 2554) = 1;
        goto LABEL_76;
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x11:
      case 0x13:
      case 0x17:
      case 0x18:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
        goto LABEL_28;
      case 0x10:
        goto LABEL_76;
      case 0x12:
        v18 = 0;
        *(_WORD *)(a2 + 2562) = *(_WORD *)(v9 + v16);
        *(_WORD *)(a2 + 2564) = *(_WORD *)(v9 + v16 + 2);
        goto LABEL_76;
      case 0x14:
        v19 = v9 + (unsigned __int16)v16;
        v20 = (v12 - 1);
        v21 = 2;
        goto LABEL_54;
      case 0x15:
        v19 = v9 + (unsigned __int16)v16;
        v20 = (v12 - 1);
        v21 = 16;
        goto LABEL_54;
      case 0x16:
        v30 = (int8x16_t *)(v9 + (unsigned __int16)v16);
        v31 = (v12 - 1);
        v32 = 2;
        goto LABEL_58;
      case 0x19:
        v18 = 0;
        *(_WORD *)(a2 + 2560) = *(_WORD *)(v9 + v16);
        goto LABEL_76;
      case 0x1A:
        v18 = 0;
        *(_WORD *)(a2 + 2558) = *(_WORD *)(v9 + v16);
        goto LABEL_76;
      case 0x1B:
        if ((v12 - 1) == 7)
        {
          v33 = (int *)(v9 + (unsigned __int16)v16);
          v34 = *v33;
          v35 = *((_WORD *)v33 + 2);
          *(_BYTE *)(v68 + 6) = *((_BYTE *)v33 + 6);
          *(_WORD *)(v68 + 4) = v35;
          *(_DWORD *)v68 = v34;
          v5[22] = 1;
          v18 = 0;
          if (sub_10005549C())
          {
            v36 = "Unknown";
            if (!v5[29])
              v36 = "Public";
            v37 = "Random";
            if (v5[29] != 1)
              v37 = v36;
            sub_100054530("AD Response Parsing: LE BT Device Address %: Type %s", v68, v37);
            v38 = sub_1000544A0(0x42u);
            v18 = 0;
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            {
              v39 = sub_100054494();
              *(_DWORD *)buf = 136446210;
              v76 = v39;
              v40 = v38;
              v41 = OS_LOG_TYPE_DEFAULT;
LABEL_74:
              _os_log_impl((void *)&_mh_execute_header, v40, v41, " %{public}s", buf, 0xCu);
              goto LABEL_75;
            }
          }
          goto LABEL_76;
        }
        if (sub_10005549C())
        {
          sub_100054530("AD Response Parsing: size of LE BT Address %u in advertisement is not compliant with specification.", v12);
          v49 = sub_1000544A0(0x42u);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
          {
            v50 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v76 = v50;
            v40 = v49;
            v41 = OS_LOG_TYPE_INFO;
            goto LABEL_74;
          }
        }
        goto LABEL_75;
      case 0x1F:
        v19 = v9 + (unsigned __int16)v16;
        v20 = (v12 - 1);
        v21 = 4;
LABEL_54:
        v23 = v70;
        v22 = v71;
LABEL_55:
        v42 = sub_100225BC0(v19, v20, v21, v22, v23);
        goto LABEL_59;
      case 0x20:
        v30 = (int8x16_t *)(v9 + (unsigned __int16)v16);
        v31 = (v12 - 1);
        v32 = 4;
        goto LABEL_58;
      case 0x21:
        v30 = (int8x16_t *)(v9 + (unsigned __int16)v16);
        v31 = (v12 - 1);
        v32 = 16;
LABEL_58:
        v42 = sub_100225D40(v30, v31, v32, a2);
LABEL_59:
        v18 = v42;
        if ((_DWORD)v42)
          goto LABEL_108;
        goto LABEL_76;
      case 0x26:
        if ((v12 - 1) < 0x20u)
        {
          memmove(v65, (const void *)(v9 + (unsigned __int16)v16), (v12 - 1));
          v18 = 0;
          v5[61] = v14;
          goto LABEL_76;
        }
        if (sub_10005549C())
        {
          sub_100054530("Invalid size %d for LE_ADV_RESPONSE_FORMAT_TDS)", (v12 - 1));
          v43 = sub_1000544A0(0x42u);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            v44 = sub_100054494();
            *(_DWORD *)buf = 136446466;
            v76 = v44;
            v77 = 1024;
            v78 = 0xFFFF;
            v29 = v43;
LABEL_65:
            _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
          }
        }
        goto LABEL_75;
      case 0x2E:
        if ((v12 - 1) != 6)
          goto LABEL_75;
        v18 = 0;
        v45 = (int *)(v9 + (unsigned __int16)v16);
        v46 = *v45;
        *(_WORD *)(v66 + 4) = *((_WORD *)v45 + 2);
        *(_DWORD *)v66 = v46;
        goto LABEL_76;
      default:
        if (*(unsigned __int8 *)(v9 + v13) == 255)
        {
          if ((v12 - 1) >= 0xFCu)
          {
            if (!sub_10005549C())
            {
LABEL_122:
              v18 = 162;
              goto LABEL_109;
            }
            sub_100054530("parseADResponse Error [%@] Invalid size %d for LE_ADV_RESPONSE_FORMAT_MANUFACTURER", v9, v8, (v12 - 1));
            v57 = sub_1000544A0(0x42u);
            v18 = 162;
            if (!os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
            {
LABEL_109:
              if (sub_10005549C())
              {
                sub_100054530("Failed to parse AD response with error %!", v18);
                v61 = sub_1000544A0(0x42u);
                if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                  sub_1006CE7A4();
              }
              return v18;
            }
          }
          else
          {
            if ((unsigned __int16)v10 + 3 >= v8)
            {
LABEL_27:
              memmove(__dst, (const void *)(v9 + v16), v14);
              v18 = 0;
              *v5 = v14;
              goto LABEL_76;
            }
            v24 = *(unsigned __int16 *)(v9 + v16);
            if (v24 != 76)
            {
              if (v24 == 196)
              {
                if (sub_10005549C())
                {
                  sub_100054530("AD Response parsing: Manufacturer Data vendor 0x%4x", 196);
                  v25 = sub_1000544A0(0x42u);
                  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
                  {
                    v26 = sub_100054494();
                    *(_DWORD *)buf = 136446210;
                    v76 = v26;
                    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                  }
                }
              }
              goto LABEL_27;
            }
            v51 = v10 + 4;
            while (1)
            {
              if ((unsigned __int16)v51 >= (unsigned __int16)v17)
                goto LABEL_27;
              v52 = *(unsigned __int8 *)(v9 + (unsigned __int16)v51);
              if ((unsigned __int16)(v51 + 1) >= (unsigned __int16)v17)
              {
                if (!sub_10005549C())
                  goto LABEL_122;
                sub_100054530("parseADResponse Error [%@] Invalid position %d for Apple type %d)", v9, v8, (unsigned __int16)(v51 + 1), v52);
                v57 = sub_1000544A0(0x42u);
                v18 = 162;
                if (!os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
                  goto LABEL_109;
                goto LABEL_121;
              }
              v53 = v5[21];
              if (v53 <= 0x13)
              {
                v5[21] = v53 + 1;
                *(_BYTE *)(a2 + v53 + 5885) = (_BYTE)v52;
              }
              if ((_DWORD)v52 == 18)
                v5[96] = 1;
              if ((qword_100999108 & (1 << (char)v52)) != 0)
              {
                if (sub_10005549C())
                {
                  sub_100054530("found MFGR packet %d, holding power assertion", (_DWORD)v52);
                  log = sub_1000544A0(0x42u);
                  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
                  {
                    v54 = sub_100054494();
                    *(_DWORD *)buf = 136446210;
                    v76 = v54;
                    _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                  }
                }
                qword_10098EE10 = sub_100113398();
                if (!dword_10098EE08)
                {
                  sub_10011404C();
                  sub_10004A9EC((uint64_t)sub_100225F5C, 0, 10, &dword_10098EE08);
                }
              }
              loga = v52;
              v55 = (unsigned __int16)v51 + 2;
              if ((unsigned __int16)(v51 + 2) >= (unsigned __int16)v17)
                break;
              v56 = *(_BYTE *)(v9 + (unsigned __int16)v51 + 1) & 0x1F;
              if ((_DWORD)v56 == 31)
              {
                v56 = *(unsigned __int8 *)(v9 + v55) + 31;
                LODWORD(v55) = v51 + 3;
              }
              v51 = v55 + v56;
              if ((unsigned __int16)(v55 + v56) > (unsigned __int16)v17)
              {
                if (!sub_10005549C())
                  goto LABEL_122;
                sub_100054530("parseADResponse Error [%@] Invalid length %d for Apple type %d)", v9, v8, v56, loga);
                v57 = sub_1000544A0(0x42u);
                v18 = 162;
                if (!os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
                  goto LABEL_109;
                goto LABEL_121;
              }
            }
            if (!sub_10005549C())
              goto LABEL_122;
            sub_100054530("parseADResponse Error [%@] Invalid position %d for Apple type %d)", v9, v8, (unsigned __int16)(v51 + 2), loga);
            v57 = sub_1000544A0(0x42u);
            v18 = 162;
            if (!os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
              goto LABEL_109;
          }
LABEL_121:
          v62 = sub_100054494();
          *(_DWORD *)buf = 136446466;
          v76 = v62;
          v77 = 1024;
          v78 = 162;
          _os_log_error_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
          goto LABEL_109;
        }
LABEL_28:
        sub_100253460();
LABEL_75:
        v18 = 0;
LABEL_76:
        v10 = v17;
        if ((unsigned __int16)v17 < 0x672u)
          continue;
LABEL_108:
        if ((_DWORD)v18)
          goto LABEL_109;
LABEL_112:
        v18 = 0;
        *(_BYTE *)(a2 + 2557) = sub_1000560D4(*(unsigned __int8 *)(a2 + 16));
        return v18;
    }
  }
}

uint64_t sub_100056080(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_100056088(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xC9u);
}

BOOL sub_1000560D4(int a1)
{
  NSObject *v2;
  uint8_t buf[4];
  void *v5;

  if ((a1 & 0x1C) == 0)
  {
    if (sub_10005549C())
    {
      sub_100054530("Invalid Dual mode support indication in AD flags 0x%x.", a1);
      v2 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446210;
        v5 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, " %{public}s", buf, 0xCu);
      }
    }
  }
  return (~a1 & 0x18) == 0;
}

void sub_1000561A8(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("status %!", a1);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v6 = 255;
    goto LABEL_10;
  }
  if (*((_BYTE *)a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 505, "void _BCM_AdvBufMatchControlEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v7 = *((unsigned __int16 *)a3 + 6);
  if (*((unsigned __int16 *)a3 + 5) <= v7 || *((_BYTE *)a3 + 14) != 1)
LABEL_18:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  v8 = *a3;
  *((_WORD *)a3 + 6) = v7 + 1;
  v6 = *(unsigned __int8 *)(v8 + v7);
  if ((_DWORD)v6 == 7)
    goto LABEL_12;
LABEL_10:
  if (!sub_10005549C()
    || (sub_100054530("SubOpcode Incorrect %!", a1),
        v9 = sub_1000544A0(0x54u),
        !os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)))
  {
LABEL_12:
    if (!a2)
      return;
    goto LABEL_13;
  }
  sub_1006CEEC0();
  if (a2)
LABEL_13:
    a2(a1, v6);
}

uint64_t sub_100056304(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x6Fu);
}

void sub_100056350(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  __int128 v31;
  _QWORD v32[5];
  int v33;
  uuid_t dst;
  _BYTE buf[24];
  _QWORD *(*v36)(_QWORD *, _QWORD *);
  void (*v37)(uint64_t);
  void *v38;
  _QWORD **v39;
  _QWORD *v40[3];

  if (*(_DWORD *)(a1 + 1960))
  {
    if ((_DWORD)a2)
    {
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
        sub_100717B00();
      v30 = sub_100027F68();
      sub_100091AE8(&v31, "");
      sub_1005756F0(v30, a2, &v31, 1);
    }
    v33 = 0;
    v4 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 568))(v4))
    {
      v5 = sub_1000438A4();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v5 + 1032))(v5, &v33);
    }
    v6 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 2096);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v33;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Scanning stopped successfully.  %llu Advertising Events, %u dropped pkts", buf, 0x12u);
    }
    v8 = *(_DWORD *)(a1 + 1964);
    if (*(_BYTE *)(a1 + 1840) || v8 == 1)
    {
      if (*(_BYTE *)(a1 + 1840))
        v9 = v8 == 1;
      else
        v9 = 1;
      v10 = v9;
      sub_10000F4E0((_BYTE *)a1, v10);
    }
    *(_DWORD *)(a1 + 1960) = 1;
    v11 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(int *)(a1 + 1964);
      if (v12 > 3)
        v13 = "UNKNOWN";
      else
        v13 = off_10093F678[v12];
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "Idle";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "handleScanStoppedEvent state=%{public}s observerState=%{public}s", buf, 0x16u);
    }
    v15 = *(unsigned __int8 **)(a1 + 2064);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4812000000;
    v36 = sub_100062784;
    v37 = sub_100062440;
    v40[0] = 0;
    v40[1] = 0;
    v38 = &unk_10083E079;
    v39 = v40;
    if (v15 != (unsigned __int8 *)(a1 + 2072))
    {
      v16 = (_QWORD *)(a1 + 2048);
      do
      {
        memset(dst, 0, sizeof(dst));
        uuid_copy(dst, v15 + 32);
        v17 = *(_QWORD **)(a1 + 2040);
        if (v17 == v16)
        {
LABEL_41:
          sub_10005682C((uint64_t **)(*(_QWORD *)&buf[8] + 48), dst, dst);
          v25 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
          v26 = v15;
          if (v25)
          {
            do
            {
              v24 = (unsigned __int8 **)v25;
              v25 = *(unsigned __int8 **)v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v24 = (unsigned __int8 **)*((_QWORD *)v26 + 2);
              v9 = *v24 == v26;
              v26 = (unsigned __int8 *)v24;
            }
            while (!v9);
          }
          sub_1000040CC((uint64_t **)(a1 + 2064), (uint64_t *)v15);
          sub_100685F18((_QWORD *)v15 + 4);
          operator delete(v15);
        }
        else
        {
          v18 = 0;
          while (1)
          {
            v19 = v17[5];
            v20 = sub_10000C5B8(v19 + 104, dst);
            if (v19 + 112 != v20)
              break;
            v21 = (_QWORD *)v17[1];
            if (v21)
            {
              do
              {
                v22 = v21;
                v21 = (_QWORD *)*v21;
              }
              while (v21);
            }
            else
            {
              do
              {
                v22 = (_QWORD *)v17[2];
                v9 = *v22 == (_QWORD)v17;
                v17 = v22;
              }
              while (!v9);
            }
            v18 |= v19 + 112 != v20;
            v17 = v22;
            if (v22 == v16)
            {
              if ((v18 & 1) == 0)
                goto LABEL_41;
              break;
            }
          }
          v23 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
          if (v23)
          {
            do
            {
              v24 = (unsigned __int8 **)v23;
              v23 = *(unsigned __int8 **)v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = (unsigned __int8 **)*((_QWORD *)v15 + 2);
              v9 = *v24 == v15;
              v15 = (unsigned __int8 *)v24;
            }
            while (!v9);
          }
        }
        v15 = (unsigned __int8 *)v24;
      }
      while (v24 != (unsigned __int8 **)(a1 + 2072));
    }
    v27 = sub_1000419F4();
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_10001F610;
    v32[3] = &unk_1009193E8;
    v32[4] = buf;
    sub_100041A34(v27, v32);
    v28 = *(_DWORD *)(a1 + 1964);
    if (v28 == 3)
    {
      v29 = 0;
    }
    else
    {
      if (v28 != 1)
      {
        sub_10005B0B8(a1, 0);
        goto LABEL_54;
      }
      v29 = 2;
    }
    sub_1006798F0((os_unfair_lock_s *)a1, v29);
LABEL_54:
    _Block_object_dispose(buf, 8);
    sub_10001A82C((uint64_t)&v39, v40[0]);
    return;
  }
  v14 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Ignoring late scan stopped event", buf, 2u);
  }
}

void sub_1000567B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100056808(uint64_t a1)
{
  sub_1000569B8(a1);
  operator delete();
}

uint64_t *sub_10005682C(uint64_t **a1, unsigned __int8 *uu1, const unsigned __int8 *a3)
{
  uint64_t **v5;
  uint64_t *result;
  unsigned __int8 *v7[3];
  uint64_t v8;

  v8 = 0;
  v5 = (uint64_t **)sub_100056928((uint64_t)a1, &v8, uu1);
  result = *v5;
  if (!*v5)
  {
    memset(v7, 0, sizeof(v7));
    sub_1000568B4((uint64_t)a1, a3, v7);
    sub_100004078(a1, v8, v5, (uint64_t *)v7[0]);
    return (uint64_t *)v7[0];
  }
  return result;
}

void sub_1000568B4(uint64_t a1@<X0>, const unsigned __int8 *a2@<X1>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x30uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 25, a2);
  *((_BYTE *)a3 + 16) = 1;
}

void sub_100056910(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_100056928(uint64_t a1, _QWORD *a2, unsigned __int8 *uu1)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  const unsigned __int8 *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (const unsigned __int8 *)(v4 + 25);
        if ((uuid_compare(uu1, (const unsigned __int8 *)(v4 + 25)) & 0x80000000) == 0)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((uuid_compare(v8, uu1) & 0x80000000) == 0)
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_1000569B8(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  void *v8;
  void *v9;
  unsigned int *v10;

  *(_QWORD *)a1 = &off_10093CBE0;
  *(_QWORD *)(a1 + 448) = &off_100918258;
  v2 = *(unsigned int **)(a1 + 456);
  if (v2)
    sub_100056AAC(v2);
  sub_100056BAC(a1 + 416, *(char **)(a1 + 424));

  *(_QWORD *)(a1 + 288) = &off_100918258;
  v3 = *(unsigned int **)(a1 + 296);
  if (v3)
    sub_100056AAC(v3);
  *(_QWORD *)(a1 + 272) = &off_100918258;
  v4 = *(unsigned int **)(a1 + 280);
  if (v4)
    sub_100056AAC(v4);
  *(_QWORD *)(a1 + 224) = &off_100918258;
  v5 = *(unsigned int **)(a1 + 232);
  if (v5)
    sub_100056AAC(v5);
  *(_QWORD *)(a1 + 152) = &off_100918258;
  v6 = *(unsigned int **)(a1 + 160);
  if (v6)
    sub_100056AAC(v6);
  *(_QWORD *)(a1 + 136) = &off_100918258;
  v7 = *(unsigned int **)(a1 + 144);
  if (v7)
    sub_100056AAC(v7);
  sub_100056B54(a1 + 112, *(_QWORD **)(a1 + 120));
  v8 = *(void **)(a1 + 88);
  if (v8)
  {
    *(_QWORD *)(a1 + 96) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 64);
  if (v9)
  {
    *(_QWORD *)(a1 + 72) = v9;
    operator delete(v9);
  }
  *(_QWORD *)(a1 + 48) = &off_100918258;
  v10 = *(unsigned int **)(a1 + 56);
  if (v10)
    sub_100056AAC(v10);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_100056AAC(unsigned int *a1)
{
  unsigned int *v1;
  signed int v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = a1 + 2;
  do
    v2 = __ldxr(v1);
  while (__stxr(v2, v1));
  if (v2 <= 0x3FFFFFFF)
  {
    do
      v3 = __ldxr(v1);
    while (__stxr(v3 - 1, v1));
    if (v3 <= 0)
    {
      v4 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
        sub_1006E0538(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    else if (a1)
    {
      if (v3 == 1)
        (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 8))(a1);
    }
  }
}

void sub_100056B40()
{
  operator delete();
}

void sub_100056B54(uint64_t a1, _QWORD *a2)
{
  unsigned int *v4;

  if (a2)
  {
    sub_100056B54(a1, *a2);
    sub_100056B54(a1, a2[1]);
    a2[7] = &off_100918258;
    v4 = (unsigned int *)a2[8];
    if (v4)
      sub_100056AAC(v4);
    operator delete(a2);
  }
}

void sub_100056BAC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_100056BAC(a1, *(_QWORD *)a2);
    sub_100056BAC(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_100056BFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  char v17;
  NSObject *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 v35;
  uint64_t v36;
  __int128 v37;
  id v38;
  void *v39;
  NSObject *v40;
  uint8_t *v41;
  id v42;
  id v43;
  uint64_t v44;
  void *i;
  NSObject *v46;
  uint8_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int16 v51;
  uint64_t v52;
  __int128 v53;
  id v54;
  void *v55;
  NSObject *v56;
  uint8_t *v57;
  id v58;
  id v59;
  uint64_t v60;
  void *j;
  NSObject *v62;
  uint8_t *v63;
  NSObject *v64;
  int v65;
  _BYTE *v66;
  _QWORD *v67;
  _BYTE *v68;
  uint64_t v69;
  NSObject *v70;
  int v71;
  _BYTE *v72;
  _QWORD *v73;
  _BYTE *v74;
  uint64_t v75;
  id v76;
  void *v77;
  void *v78;
  id v79;
  void *v80;
  id v81;
  id v82;
  uint64_t v83;
  void *v84;
  void *v85;
  NSObject *v86;
  uint8_t *v87;
  id v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  id v106;
  void *v107;
  id v108;
  id v109;
  void *v110;
  id v111;
  id v112;
  void *v113;
  uint64_t v114;
  unsigned __int8 v115;
  id v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  void *v119;
  unsigned __int8 v120;
  void *v121;
  unsigned __int8 v122;
  void *v123;
  int v124;
  NSObject *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  id v133;
  id v134;
  uint64_t v135;
  void *k;
  void *v137;
  id v138;
  int8x16_t *v139;
  void *v140;
  uint64_t v141;
  void *v142;
  id v143;
  id v144;
  id v145;
  int v146;
  uint64_t v147;
  _BYTE *v148;
  int v149;
  id obj;
  uint64_t v151;
  id v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  unsigned __int8 v159;
  signed __int8 v160;
  unsigned __int16 v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  unsigned __int16 v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  char v190;
  char v191[15];
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t *v196;
  _QWORD *v197;
  unint64_t v198;
  uint64_t *v199;
  _QWORD *v200;
  uint64_t v201;
  __int128 v202;
  int v203;
  _BYTE v204[128];
  __int128 v205;
  int v206;
  _BYTE v207[128];
  _BYTE v208[128];
  __int128 v209;
  int v210;
  _BYTE v211[128];
  _BYTE v212[128];
  __int128 v213;
  int v214;
  uint8_t __dst[32];
  _BYTE __p[22];
  char v217;
  uint8_t buf[24];
  _BYTE v219[128];

  v148 = (_BYTE *)(a1 + 4296);
  v149 = *(unsigned __int8 *)(a1 + 4382);
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
    sub_10071826C();
  if (v148[85])
  {
    v1 = sub_1000438A4();
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 632))(v1);
    v2 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 416))(v2, 1);
    v3 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 408))(v3, 1);
    v4 = sub_1000438A4();
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 648))(v4);
    v5 = sub_1000438A4();
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 792))(v5);
  }
  sub_10001A7AC(a1);
  *v148 = 1;
  v201 = 0;
  v200 = 0;
  v199 = (uint64_t *)&v200;
  v198 = 0;
  v197 = 0;
  v196 = (uint64_t *)&v197;
  v6 = *(_QWORD **)(a1 + 2040);
  v166 = (_QWORD *)(a1 + 2048);
  if (v6 == (_QWORD *)(a1 + 2048))
    goto LABEL_233;
  do
  {
    v7 = v6[5];
    memset(__dst, 0, 24);
    v163 = v7;
    sub_1000B6A6C(__dst, *(_QWORD *)(*(_QWORD *)(v7 + 8) + 64), *(_QWORD *)(*(_QWORD *)(v7 + 8) + 72), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(v7 + 8) + 64)) >> 5));
    v8 = *(_QWORD *)__dst;
    if (*(_QWORD *)__dst == *(_QWORD *)&__dst[8])
    {
      LOBYTE(v11) = 0;
    }
    else
    {
      do
      {
        v9 = *(id *)(v8 + 56);
        v192 = 0u;
        v193 = 0u;
        v194 = 0u;
        v195 = 0u;
        v10 = v9;
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v192, v219, 16);
        if (v11)
        {
          v12 = *(_QWORD *)v193;
          while (2)
          {
            v13 = 0;
            do
            {
              if (*(_QWORD *)v193 != v12)
                objc_enumerationMutation(v10);
              v14 = *(void **)(*((_QWORD *)&v192 + 1) + 8 * (_QWORD)v13);
              *(_QWORD *)__p = 0;
              if (qword_1009778C8 != -1)
                dispatch_once(&qword_1009778C8, &stru_10093F4F8);
              *(_QWORD *)__p = sub_1000589DC((uint64_t)off_1009778C0, v14, 0);
              if (*(_QWORD *)__p)
              {
                sub_10000F7A0(&v196, (unint64_t *)__p, (uint64_t *)__p);
                if (v198 >= 0x1F)
                {
                  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
                    sub_100718240(&v190, v191);
                  LOBYTE(v11) = 1;
                  goto LABEL_25;
                }
              }
              else
              {
                v15 = qword_100999828;
                if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Tried to add device to matching list that was not present", buf, 2u);
                }
              }
              v13 = (char *)v13 + 1;
            }
            while (v11 != v13);
            v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v192, v219, 16);
            if (v11)
              continue;
            break;
          }
        }
LABEL_25:

        v8 += 96;
        if (v8 == *(_QWORD *)&__dst[8])
          v17 = 1;
        else
          v17 = (char)v11;
      }
      while ((v17 & 1) == 0);
    }
    v18 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
    {
      v23 = sub_100686E64((_QWORD *)(*(_QWORD *)(v163 + 8) + 208));
      sub_1000340DC(v6[4], (uint64_t)__p);
      v24 = __p;
      if (v217 < 0)
        v24 = *(_BYTE **)__p;
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = v23;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v24;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "bypassFilterDuplicateTable 0x%0256llx  %{public}s", buf, 0x16u);
      if (v217 < 0)
        operator delete(*(void **)__p);
    }
    *(_QWORD *)__p = __dst;
    sub_1000B6134((void ***)__p);
    v19 = (_QWORD *)v6[1];
    if (v19)
    {
      do
      {
        v20 = v19;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        v20 = (_QWORD *)v6[2];
        v21 = *v20 == (_QWORD)v6;
        v6 = v20;
      }
      while (!v21);
    }
    if (v20 == v166)
      v22 = 1;
    else
      v22 = (char)v11;
    v6 = v20;
  }
  while ((v22 & 1) == 0);
  if ((v11 & 1) == 0)
  {
LABEL_233:
    if (!v149 || v148[85])
    {
      v25 = v196;
      if (v196 != (uint64_t *)&v197)
      {
        do
        {
          v26 = sub_1000438A4();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 776))(v26, v25[4]);
          v27 = (uint64_t *)v25[1];
          if (v27)
          {
            do
            {
              v28 = v27;
              v27 = (uint64_t *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v28 = (uint64_t *)v25[2];
              v21 = *v28 == (_QWORD)v25;
              v25 = v28;
            }
            while (!v21);
          }
          v25 = v28;
        }
        while (v28 != (uint64_t *)&v197);
      }
    }
    if ((uint64_t **)(a1 + 4304) != &v196)
      sub_100067698((uint64_t **)(a1 + 4304), v196, &v197);
    v164 = 0;
  }
  else
  {
    v164 = 1;
  }
  v29 = *(_QWORD **)(a1 + 2040);
  if (v29 != v166)
  {
    do
    {
      v30 = v29[5];
      if (!sub_100038A28(v30))
        goto LABEL_160;
      v31 = *(unsigned __int8 *)(v30 + 81);
      if (v31 > 0x20)
        goto LABEL_160;
      if (((1 << v31) & 0x114) != 0)
      {
        if (!sub_10003F24C(v30))
          goto LABEL_160;
        if (!*(_BYTE *)(v30 + 224))
          goto LABEL_160;
        v32 = (uint64_t *)sub_1000587C8(v30);
        v33 = *v32;
        v34 = v32[1];
        if (*v32 == v34)
          goto LABEL_160;
        v35 = 0;
        while (1)
        {
          v36 = *(_QWORD *)(v30 + 8);
          if (*(_BYTE *)(v36 + 143) && !*(_QWORD *)(a1 + 2344))
          {
            v46 = qword_100999948;
            if (os_log_type_enabled((os_log_t)qword_100999948, OS_LOG_TYPE_DEFAULT))
            {
              sub_10006887C(v33, __dst);
              v47 = __dst;
              if ((__dst[23] & 0x80u) != 0)
                v47 = *(uint8_t **)__dst;
              *(_DWORD *)__p = 136446210;
              *(_QWORD *)&__p[4] = v47;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "skipping adding %{public}s to filters", __p, 0xCu);
              if ((char)__dst[23] < 0)
                operator delete(*(void **)__dst);
            }
          }
          else
          {
            if (*(unsigned __int8 *)(v36 + 203) < ++v35)
            {
              v64 = qword_100999828;
              if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
              {
                sub_1000340DC(v29[4], (uint64_t)__p);
                v65 = v217;
                v66 = *(_BYTE **)__p;
                v67 = (_QWORD *)sub_1000587C8(v30);
                v68 = __p;
                if (v65 < 0)
                  v68 = v66;
                v69 = (uint64_t)(v67[1] - *v67) >> 2;
                *(_DWORD *)__dst = 136446722;
                *(_QWORD *)&__dst[4] = v68;
                *(_WORD *)&__dst[12] = 1024;
                *(_DWORD *)&__dst[14] = v35;
                *(_WORD *)&__dst[18] = 2048;
                *(_QWORD *)&__dst[20] = 0xCCCCCCCCCCCCCCCDLL * v69;
                _os_log_error_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "\"%{public}s\" asked to scan for more than %d (%ld) UUID's.", __dst, 0x1Cu);
                if (v217 < 0)
                  operator delete(*(void **)__p);
              }
              goto LABEL_160;
            }
            v37 = *(_OWORD *)v33;
            v210 = *(_DWORD *)(v33 + 16);
            v209 = v37;
            v38 = sub_100687160(v30, (unsigned __int8 *)&v209);
            v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
            v40 = qword_100999828;
            if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
            {
              sub_10006887C(v33, __dst);
              v41 = __dst;
              if ((__dst[23] & 0x80u) != 0)
                v41 = *(uint8_t **)__dst;
              *(_DWORD *)__p = 136315394;
              *(_QWORD *)&__p[4] = v41;
              *(_WORD *)&__p[12] = 2112;
              *(_QWORD *)&__p[14] = v39;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "addFilters aUUID:%s enhancedRules:%@", __p, 0x16u);
              if ((char)__dst[23] < 0)
                operator delete(*(void **)__dst);
            }
            if (objc_msgSend(v39, "count"))
            {
              v180 = 0u;
              v181 = 0u;
              v178 = 0u;
              v179 = 0u;
              v42 = v39;
              v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v178, v208, 16);
              if (v43)
              {
                v44 = *(_QWORD *)v179;
                do
                {
                  for (i = 0; i != v43; i = (char *)i + 1)
                  {
                    if (*(_QWORD *)v179 != v44)
                      objc_enumerationMutation(v42);
                    sub_10067B0F8(a1, *(void **)(*((_QWORD *)&v178 + 1) + 8 * (_QWORD)i));
                  }
                  v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v178, v208, 16);
                }
                while (v43);
              }

            }
            else
            {
              sub_10000BED0(&v199, (unsigned __int8 *)v33, v33);
            }

          }
          v33 += 20;
          if (v33 == v34)
            goto LABEL_160;
        }
      }
      if (((1 << v31) & 0x100010000) == 0)
        goto LABEL_160;
      *(_BYTE *)(a1 + 1849) |= sub_1000589B8(v30);
      *(_BYTE *)(a1 + 1850) |= sub_1000589A4(v30);
      if (!sub_100058920(v30))
      {
        if (*(_BYTE *)(v30 + 224))
        {
          v48 = (uint64_t *)sub_1000587C8(v30);
          v49 = *v48;
          v50 = v48[1];
          if (*v48 != v50)
          {
            v51 = 0;
            do
            {
              v52 = *(_QWORD *)(v30 + 8);
              if (*(_BYTE *)(v52 + 143) && !*(_QWORD *)(a1 + 2344))
              {
                v62 = qword_100999948;
                if (os_log_type_enabled((os_log_t)qword_100999948, OS_LOG_TYPE_INFO))
                {
                  sub_10006887C(v49, __dst);
                  v63 = __dst;
                  if ((__dst[23] & 0x80u) != 0)
                    v63 = *(uint8_t **)__dst;
                  *(_DWORD *)__p = 136446210;
                  *(_QWORD *)&__p[4] = v63;
                  _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "skipping adding %{public}s to filters", __p, 0xCu);
                  if ((char)__dst[23] < 0)
                    operator delete(*(void **)__dst);
                }
              }
              else
              {
                if (*(unsigned __int8 *)(v52 + 203) < ++v51)
                {
                  v70 = qword_100999828;
                  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
                  {
                    sub_1000340DC(v29[4], (uint64_t)__p);
                    v71 = v217;
                    v72 = *(_BYTE **)__p;
                    v73 = (_QWORD *)sub_1000587C8(v30);
                    v74 = __p;
                    if (v71 < 0)
                      v74 = v72;
                    v75 = (uint64_t)(v73[1] - *v73) >> 2;
                    *(_DWORD *)__dst = 136446722;
                    *(_QWORD *)&__dst[4] = v74;
                    *(_WORD *)&__dst[12] = 1024;
                    *(_DWORD *)&__dst[14] = v51;
                    *(_WORD *)&__dst[18] = 2048;
                    *(_QWORD *)&__dst[20] = 0xCCCCCCCCCCCCCCCDLL * v75;
                    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_INFO, "\"%{public}s\" asked to scan for more than %d (%ld) UUID's.", __dst, 0x1Cu);
                    if (v217 < 0)
                      operator delete(*(void **)__p);
                  }
                  break;
                }
                v53 = *(_OWORD *)v49;
                v214 = *(_DWORD *)(v49 + 16);
                v213 = v53;
                v54 = sub_100687160(v30, (unsigned __int8 *)&v213);
                v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
                v56 = qword_100999828;
                if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
                {
                  sub_10006887C(v49, __dst);
                  v57 = __dst;
                  if ((__dst[23] & 0x80u) != 0)
                    v57 = *(uint8_t **)__dst;
                  *(_DWORD *)__p = 136315394;
                  *(_QWORD *)&__p[4] = v57;
                  *(_WORD *)&__p[12] = 2112;
                  *(_QWORD *)&__p[14] = v55;
                  _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "addFilters aUUID:%s enhancedRules:%@", __p, 0x16u);
                  if ((char)__dst[23] < 0)
                    operator delete(*(void **)__dst);
                }
                if (objc_msgSend(v55, "count"))
                {
                  v188 = 0u;
                  v189 = 0u;
                  v186 = 0u;
                  v187 = 0u;
                  v58 = v55;
                  v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v186, v212, 16);
                  if (v59)
                  {
                    v60 = *(_QWORD *)v187;
                    do
                    {
                      for (j = 0; j != v59; j = (char *)j + 1)
                      {
                        if (*(_QWORD *)v187 != v60)
                          objc_enumerationMutation(v58);
                        sub_10067B0F8(a1, *(void **)(*((_QWORD *)&v186 + 1) + 8 * (_QWORD)j));
                      }
                      v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v186, v212, 16);
                    }
                    while (v59);
                  }

                }
                else
                {
                  sub_10000BED0(&v199, (unsigned __int8 *)v49, v49);
                }

              }
              v49 += 20;
            }
            while (v49 != v50);
          }
        }
      }
      if (*(_BYTE *)(a1 + 1843))
      {
        if (!v149 || v148[85])
          sub_10068A844(v30);
        v76 = sub_10068B830(v30);
        v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
        v78 = v77;
        if (v77 && objc_msgSend(v77, "count"))
          objc_msgSend(*(id *)(a1 + 4368), "addObjectsFromArray:", v78);

      }
      v79 = sub_100046A04(v30, v164, (_DWORD *)(a1 + 4376));
      v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
      v184 = 0u;
      v185 = 0u;
      v182 = 0u;
      v183 = 0u;
      v81 = v80;
      v82 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v182, v211, 16);
      if (v82)
      {
        v83 = *(_QWORD *)v183;
        do
        {
          v84 = 0;
          do
          {
            if (*(_QWORD *)v183 != v83)
              objc_enumerationMutation(v81);
            v85 = *(void **)(*((_QWORD *)&v182 + 1) + 8 * (_QWORD)v84);
            v86 = qword_100999828;
            if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
            {
              if (*(char *)(v30 + 255) < 0)
              {
                sub_10003430C(__dst, *(void **)(v30 + 232), *(_QWORD *)(v30 + 240));
              }
              else
              {
                *(_OWORD *)__dst = *(_OWORD *)(v30 + 232);
                *(_QWORD *)&__dst[16] = *(_QWORD *)(v30 + 248);
              }
              v87 = __dst;
              if ((__dst[23] & 0x80u) != 0)
                v87 = *(uint8_t **)__dst;
              *(_DWORD *)__p = 136315394;
              *(_QWORD *)&__p[4] = v87;
              *(_WORD *)&__p[12] = 2112;
              *(_QWORD *)&__p[14] = v85;
              _os_log_debug_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "addUniqueRulesToDictionary: %s rule %@", __p, 0x16u);
              if ((char)__dst[23] < 0)
                operator delete(*(void **)__dst);
            }
            sub_10067B5FC(a1, v85);
            v84 = (char *)v84 + 1;
          }
          while (v82 != v84);
          v88 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v182, v211, 16);
          v82 = v88;
        }
        while (v88);
      }

LABEL_160:
      v89 = (_QWORD *)v29[1];
      if (v89)
      {
        do
        {
          v90 = v89;
          v89 = (_QWORD *)*v89;
        }
        while (v89);
      }
      else
      {
        do
        {
          v90 = (_QWORD *)v29[2];
          v21 = *v90 == (_QWORD)v29;
          v29 = v90;
        }
        while (!v21);
      }
      v29 = v90;
    }
    while (v90 != v166);
  }
  if (!objc_msgSend(*(id *)(a1 + 4352), "count"))
  {
    memset(__dst, 0, 22);
    v91 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v91 + 616))(v91))
      v92 = 3;
    else
      v92 = 1;
    v93 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)__p = 0xFF04000200;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = -87;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "Adding bogus rule for type %d and RSSI %d", __p, 0xEu);
    }
    v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", __dst, 22));
    objc_msgSend(v94, "setObject:forKeyedSubscript:", v95, CFSTR("data"));

    v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", __dst, 22));
    objc_msgSend(v94, "setObject:forKeyedSubscript:", v96, CFSTR("mask"));

    v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", 169));
    objc_msgSend(v94, "setObject:forKeyedSubscript:", v97, CFSTR("rssi"));

    v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", 255));
    objc_msgSend(v94, "setObject:forKeyedSubscript:", v98, CFSTR("puckType"));

    v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", 2));
    objc_msgSend(v94, "setObject:forKeyedSubscript:", v99, CFSTR("matchAllDevices"));

    v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", 0));
    objc_msgSend(v94, "setObject:forKeyedSubscript:", v100, CFSTR("address"));

    v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0));
    objc_msgSend(v94, "setObject:forKeyedSubscript:", v101, CFSTR("bypassFilterDuplicate"));

    v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v92));
    objc_msgSend(v94, "setObject:forKeyedSubscript:", v102, CFSTR("targetCore"));

    v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", 1));
    objc_msgSend(v94, "setObject:forKeyedSubscript:", v103, CFSTR("rssithresholdOrder"));

    v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    objc_msgSend(v94, "setObject:forKeyedSubscript:", v104, CFSTR("report127dBm"));

    v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
    objc_msgSend(v94, "setObject:forKeyedSubscript:", v105, CFSTR("report27dBm"));

    sub_10067B5FC(a1, v94);
    *(_BYTE *)(a1 + 1850) = 1;

  }
  if (!v149 || v148[85])
  {
    v176 = 0u;
    v177 = 0u;
    v174 = 0u;
    v175 = 0u;
    obj = *(id *)(a1 + 4352);
    v106 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v174, v207, 16);
    if (v106)
    {
      v151 = *(_QWORD *)v175;
LABEL_177:
      v168 = 0;
      v152 = v106;
      while (1)
      {
        if (*(_QWORD *)v175 != v151)
          objc_enumerationMutation(obj);
        v107 = *(void **)(*((_QWORD *)&v174 + 1) + 8 * v168);
        *(_QWORD *)&__dst[8] = 0;
        *(_QWORD *)__dst = 0;
        v108 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectForKeyedSubscript:", CFSTR("data"))));
        v109 = objc_msgSend(v108, "bytes");
        v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectForKeyedSubscript:", CFSTR("data")));
        sub_10003994C(__dst, v109, (size_t)objc_msgSend(v110, "length"));

        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)__p = 0;
        v111 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectForKeyedSubscript:", CFSTR("mask"))));
        v112 = objc_msgSend(v111, "bytes");
        v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectForKeyedSubscript:", CFSTR("mask")));
        sub_10003994C(__p, v112, (size_t)objc_msgSend(v113, "length"));

        v114 = sub_1000438A4();
        v167 = sub_10003EB18((uint64_t)__dst);
        v165 = sub_10003F8C4((uint64_t)__dst);
        v162 = sub_10003EB18((uint64_t)__p);
        v161 = sub_10003F8C4((uint64_t)__p);
        v158 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectForKeyedSubscript:", CFSTR("rssi")));
        v160 = objc_msgSend(v158, "intValue");
        v157 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectForKeyedSubscript:", CFSTR("puckType")));
        v159 = objc_msgSend(v157, "unsignedIntValue");
        v156 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectForKeyedSubscript:", CFSTR("matchAllDevices")));
        v115 = objc_msgSend(v156, "unsignedIntValue");
        v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectForKeyedSubscript:", CFSTR("address")));
        v116 = objc_msgSend(v155, "unsignedLongLongValue");
        v154 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectForKeyedSubscript:", CFSTR("bypassFilterDuplicate")));
        v117 = objc_msgSend(v154, "unsignedIntValue");
        v153 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectForKeyedSubscript:", CFSTR("targetCore")));
        v118 = objc_msgSend(v153, "unsignedIntValue");
        v119 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectForKeyedSubscript:", CFSTR("rssithresholdOrder")));
        v120 = objc_msgSend(v119, "unsignedIntValue");
        v121 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectForKeyedSubscript:", CFSTR("report127dBm")));
        v122 = objc_msgSend(v121, "unsignedIntValue");
        v123 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "objectForKeyedSubscript:", CFSTR("report27dBm")));
        BYTE4(v147) = objc_msgSend(v123, "unsignedIntValue");
        BYTE3(v147) = v122;
        BYTE2(v147) = v120;
        BYTE1(v147) = v118;
        LOBYTE(v147) = v117;
        v124 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, id, uint64_t))(*(_QWORD *)v114 + 688))(v114, v167, v165, v162, v161, v160, v159, v115, v116, v147);

        if (v124)
        {
          v125 = qword_100999828;
          if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v124;
            _os_log_error_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_ERROR, "Failed to add rule with result %d", buf, 8u);
          }
        }
        *(_QWORD *)__p = &off_100918258;
        if (*(_QWORD *)&__p[8])
          sub_100056AAC(*(unsigned int **)&__p[8]);
        *(_QWORD *)__dst = &off_100918258;
        if (*(_QWORD *)&__dst[8])
          sub_100056AAC(*(unsigned int **)&__dst[8]);
        if (v124)
          break;
        if (v152 == (id)++v168)
        {
          v106 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v174, v207, 16);
          if (v106)
            goto LABEL_177;
          break;
        }
      }
    }

    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
      sub_1007181DC();
    v126 = sub_1000438A4();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v126 + 760))(v126, *(unsigned int *)(a1 + 4376));
    if (*(_BYTE *)(a1 + 1849) && (!v149 || v148[85]))
    {
      v127 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v127 + 640))(v127, 1);
    }
  }
  if (!v201 && !objc_msgSend(*(id *)(a1 + 4360), "count"))
  {
    sub_100069B04((uint64_t)__dst, &xmmword_1007434E7, 16);
    sub_10000BED0(&v199, __dst, (uint64_t)__dst);
  }
  if (!v149 || v148[85])
  {
    v128 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v128 + 408))(v128, 1);
    v129 = v199;
    if (v199 != (uint64_t *)&v200)
    {
      while (1)
      {
        v130 = sub_1000438A4();
        v205 = *(_OWORD *)((char *)v129 + 28);
        v206 = *((_DWORD *)v129 + 11);
        if ((*(unsigned int (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v130 + 424))(v130, &v205, 0, 169, 1, 1))
        {
          break;
        }
        v131 = (uint64_t *)v129[1];
        if (v131)
        {
          do
          {
            v132 = v131;
            v131 = (uint64_t *)*v131;
          }
          while (v131);
        }
        else
        {
          do
          {
            v132 = (uint64_t *)v129[2];
            v21 = *v132 == (_QWORD)v129;
            v129 = v132;
          }
          while (!v21);
        }
        v129 = v132;
        if (v132 == (uint64_t *)&v200)
          goto LABEL_212;
      }
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
      {
        sub_10006887C((uint64_t)v129 + 28, __dst);
        sub_100718190();
      }
    }
LABEL_212:
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v133 = *(id *)(a1 + 4360);
    v134 = objc_msgSend(v133, "countByEnumeratingWithState:objects:count:", &v170, v204, 16);
    if (v134)
    {
      v135 = *(_QWORD *)v171;
      while (2)
      {
        for (k = 0; k != v134; k = (char *)k + 1)
        {
          if (*(_QWORD *)v171 != v135)
            objc_enumerationMutation(v133);
          v137 = *(void **)(*((_QWORD *)&v170 + 1) + 8 * (_QWORD)k);
          memset(buf, 0, 20);
          v138 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "objectForKeyedSubscript:", CFSTR("uuid"))));
          v139 = (int8x16_t *)objc_msgSend(v138, "bytes");
          v140 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "objectForKeyedSubscript:", CFSTR("uuid")));
          sub_100069B04((uint64_t)buf, v139, objc_msgSend(v140, "length"));

          v141 = sub_1000438A4();
          v202 = *(_OWORD *)buf;
          v203 = *(_DWORD *)&buf[16];
          v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "objectForKeyedSubscript:", CFSTR("data")));
          LOBYTE(v140) = objc_msgSend(v142, "length");
          v143 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "objectForKeyedSubscript:", CFSTR("data"))));
          v144 = objc_msgSend(v143, "bytes");
          v145 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v137, "objectForKeyedSubscript:", CFSTR("mask"))));
          LOBYTE(v146) = 1;
          LODWORD(v140) = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t, _QWORD, id, id, int))(*(_QWORD *)v141 + 432))(v141, &v202, 0, 169, 1, v140, v144, objc_msgSend(v145, "bytes"), v146);

          if ((_DWORD)v140)
          {
            if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
            {
              sub_10006887C((uint64_t)buf, __p);
              sub_100718144();
            }
            goto LABEL_223;
          }
        }
        v134 = objc_msgSend(v133, "countByEnumeratingWithState:objects:count:", &v170, v204, 16);
        if (v134)
          continue;
        break;
      }
    }
LABEL_223:

  }
  if ((uint64_t **)(a1 + 4328) != &v199)
    sub_100068320((uint64_t **)(a1 + 4328), v199, &v200);
  *(_BYTE *)(a1 + 1848) = 1;
  if (v149 || v148[85])
    sub_10006DFA0(a1, *(_BYTE *)(a1 + 1843));
  else
    *v148 = 0;
  *(_BYTE *)(a1 + 1847) = 0;
  *(_DWORD *)(a1 + 1843) = 0;
  sub_10001A82C((uint64_t)&v196, v197);
  sub_10001A82C((uint64_t)&v199, v200);
}

void sub_10005848C(_Unwind_Exception *a1)
{
  sub_10001A82C((uint64_t)&STACK[0x280], (_QWORD *)STACK[0x288]);
  sub_10001A82C((uint64_t)&STACK[0x298], (_QWORD *)STACK[0x2A0]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000587C8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 8;
}

uint64_t sub_1000587D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = sub_100058844(v4 + v7, a2 + v7);
      v7 += 96;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(_QWORD *)(v3 + 8) = v4;
  return result;
}

void sub_10005883C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100058844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)a1 = *(id *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_100918258;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    sub_10003C37C(v4);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &off_100918258;
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
    sub_10003C37C(v5);
  v6 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = *(id *)(a2 + 56);
  v7 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 68) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = *(id *)(a2 + 72);
  v8 = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = v8;
  return a1;
}

void sub_1000588F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;

  *(_QWORD *)(v1 + 16) = v2;
  v4 = *(unsigned int **)(v1 + 24);
  if (v4)
    sub_100056AAC(v4);

  _Unwind_Resume(a1);
}

BOOL sub_100058920(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 81) == 32)
  {
    if (*(_BYTE *)(v1 + 1))
    {
      if (*(_QWORD *)(v1 + 8) == *(_QWORD *)(v1 + 16))
      {
        if (objc_msgSend(*(id *)(v1 + 88), "count"))
          return 0;
        v1 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v1 + 64) != *(_QWORD *)(v1 + 72))
          return 0;
      }
    }
  }
  if (*(_QWORD *)(v1 + 8) == *(_QWORD *)(v1 + 16))
    return 1;
  return *(_QWORD *)(v1 + 32) != *(_QWORD *)(v1 + 40);
}

BOOL sub_1000589A4(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) != *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
}

BOOL sub_1000589B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 88), "count") != 0;
}

uint64_t sub_1000589DC(uint64_t a1, void *a2, int a3)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  NSObject *v8;
  id v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[2];
  _BYTE v14[24];

  v5 = a2;
  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  v7 = v6;
  if (v6)
  {
    if (!v6[2])
    {
      v8 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
      {
        v9 = sub_100021770(0);
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        sub_100715504(v10, (uint64_t)v14, v8);
      }
    }
    if (a3 || (v11 = v7[3]) == 0)
      v11 = v7[2];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      sub_1007154A0();
    v11 = 0;
  }
  sub_100034234((uint64_t)v13);

  return v11;
}

void sub_100058AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100058B1C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  id v29;
  int v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  unsigned __int8 v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  unsigned __int8 v45;
  void *v46;
  unsigned __int8 v47;
  void *v48;
  id v49;
  void *v50;
  unsigned int v51;
  BOOL v52;
  void *v53;
  unsigned int v54;
  BOOL v55;
  unsigned __int8 *v56;
  const void *v57;
  size_t v58;
  signed __int8 v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int16 v62;
  uint64_t v63;
  unsigned __int16 v64;
  int v65;
  const void *v66;
  unsigned __int8 v67;
  size_t v68;
  char *v69;
  char v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  NSObject *v83;
  id v84;
  void *i;
  void *v86;
  id v87;
  int8x16_t *v88;
  void *v89;
  NSObject *v90;
  uint64_t v91;
  void *v92;
  unsigned __int8 v93;
  void *v94;
  unsigned __int8 v95;
  id v96;
  id v97;
  id v98;
  int v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  id v104;
  char *v105;
  int v106;
  uint64_t v107;
  id obj;
  id obja;
  id objb;
  unsigned __int8 v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  char v121;
  char v122[15];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint8_t buf[32];
  __int128 v132;
  int v133;
  __int128 v134;
  int v135;
  _BYTE v136[128];
  __int128 v137;
  int v138;
  _BYTE v139[128];
  _BYTE v140[128];

  v107 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v107 + 2248))
  {
    v2 = sub_1000438A4();
    v101 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2784))(v2);
  }
  else
  {
    v101 = 0;
  }
  if (objc_msgSend(*(id *)(v107 + 4368), "count") && *(_BYTE *)(a1 + 40))
  {
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
      sub_1007187DC();
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    obj = *(id *)(v107 + 4368);
    v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v127, v140, 16);
    if (v3)
    {
      v4 = *(_QWORD *)v128;
LABEL_10:
      v5 = 0;
      while (1)
      {
        if (*(_QWORD *)v128 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v127 + 1) + 8 * v5);
        v7 = sub_1000438A4();
        v8 = objc_retainAutorelease(v6);
        if ((*(unsigned int (**)(uint64_t, id, _QWORD, uint64_t))(*(_QWORD *)v7 + 616))(v7, objc_msgSend(v8, "bytes"), (unsigned __int16)objc_msgSend(v8, "length"), 240))
        {
          break;
        }
        if (v3 == (id)++v5)
        {
          v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v127, v140, 16);
          if (v3)
            goto LABEL_10;
          break;
        }
      }
    }

    v9 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 640))(v9, 1);
    v10 = 1;
  }
  else
  {
    v10 = 0;
  }
  v11 = *(_QWORD *)(v107 + 4320);
  if (v11)
  {
    v12 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
      sub_100718774(v11, v12, v13);
    if (v101)
      v14 = malloc_type_malloc(8 * *(_QWORD *)(v107 + 4320), 0x100004000313F17uLL);
    else
      v14 = 0;
    v15 = *(_QWORD **)(v107 + 4304);
    if (v15 != (_QWORD *)(v107 + 4312))
    {
      v16 = 0;
      if (v14)
        v17 = v101;
      else
        v17 = 0;
      do
      {
        if (v17)
        {
          v14[v16++] = v15[4];
        }
        else
        {
          v18 = sub_1000438A4();
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 776))(v18, v15[4]);
        }
        v19 = (_QWORD *)v15[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v15[2];
            v21 = *v20 == (_QWORD)v15;
            v15 = v20;
          }
          while (!v21);
        }
        v15 = v20;
      }
      while (v20 != (_QWORD *)(v107 + 4312));
    }
    v22 = v101;
    if (!v14)
      v22 = 0;
    if (v22 == 1)
    {
      v23 = *(_QWORD *)(v107 + 4320);
      if (v23)
      {
        v24 = 0;
        v25 = 0;
        do
        {
          v26 = v23 - v25;
          if (v26 >= 25)
            v27 = 25;
          else
            v27 = v26;
          v28 = sub_1000438A4();
          (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v28 + 800))(v28, v27, &v14[v24]);
          v25 += v27;
          v24 = v25;
          v23 = *(_QWORD *)(v107 + 4320);
        }
        while (v23 > v25);
      }
      free(v14);
    }
    v10 = 1;
  }
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
    sub_10071870C();
  if (objc_msgSend(*(id *)(v107 + 4352), "count"))
  {
    if (v101)
      v105 = (char *)malloc_type_malloc(62 * (_QWORD)objc_msgSend(*(id *)(v107 + 4352), "count"), 0x1000040A55EBD55uLL);
    else
      v105 = 0;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    obja = *(id *)(v107 + 4352);
    v29 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v123, v139, 16);
    if (v29)
    {
      v106 = 0;
      v30 = v101;
      if (!v105)
        v30 = 0;
      v102 = v30;
      v103 = *(_QWORD *)v124;
LABEL_58:
      v31 = 0;
      v104 = v29;
      while (1)
      {
        if (*(_QWORD *)v124 != v103)
          objc_enumerationMutation(obja);
        v115 = v31;
        v32 = *(void **)(*((_QWORD *)&v123 + 1) + 8 * v31);
        *(_OWORD *)buf = 0uLL;
        v33 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("data"))));
        v34 = objc_msgSend(v33, "bytes");
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("data")));
        sub_10003994C(buf, v34, (size_t)objc_msgSend(v35, "length"));

        v134 = 0uLL;
        v36 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("mask"))));
        v37 = objc_msgSend(v36, "bytes");
        v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("mask")));
        sub_10003994C(&v134, v37, (size_t)objc_msgSend(v38, "length"));

        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("rssi")));
        v40 = objc_msgSend(v39, "intValue");

        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("puckType")));
        v113 = objc_msgSend(v41, "unsignedIntValue");

        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("bypassFilterDuplicate")));
        v112 = objc_msgSend(v42, "unsignedIntValue");

        v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("targetCore")));
        v111 = objc_msgSend(v43, "unsignedIntValue");

        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("rssithresholdOrder")));
        v45 = objc_msgSend(v44, "unsignedIntValue");

        v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("matchAllDevices")));
        v47 = objc_msgSend(v46, "unsignedIntValue");

        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("address")));
        v49 = objc_msgSend(v48, "unsignedLongLongValue");

        v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("report127dBm")));
        v51 = objc_msgSend(v50, "unsignedIntValue");
        v52 = v51 != 0;

        v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("report27dBm")));
        v54 = objc_msgSend(v53, "unsignedIntValue");
        v55 = v54 != 0;

        if (v102)
        {
          v56 = (unsigned __int8 *)&v105[62 * v106];
          *(_OWORD *)(v56 + 7) = 0u;
          *(_WORD *)(v56 + 55) = 0;
          *(_OWORD *)(v56 + 39) = 0u;
          *(_OWORD *)(v56 + 23) = 0u;
          v57 = (const void *)sub_10003EB18((uint64_t)&v134);
          if ((unint64_t)sub_10003F8C4((uint64_t)&v134) <= 0x19)
            v58 = sub_10003F8C4((uint64_t)&v134);
          else
            v58 = 25;
          memcpy(v56 + 32, v57, v58);
          v66 = (const void *)sub_10003EB18((uint64_t)buf);
          if ((unint64_t)sub_10003F8C4((uint64_t)buf) <= 0x19)
          {
            v68 = sub_10003F8C4((uint64_t)buf);
            v67 = v40;
          }
          else
          {
            v67 = v40;
            v68 = 25;
          }
          memcpy(v56 + 7, v66, v68);
          *v56 = v47;
          v69 = &v105[62 * v106];
          *(_DWORD *)(v69 + 1) = 0;
          *(_WORD *)(v69 + 5) = 0;
          v69[57] = v113;
          v69[58] = v67;
          v69[59] = v112;
          v69[60] = v111;
          v70 = v45 | 2;
          if (v51)
            v70 = v45;
          if (!v54)
            v70 |= 4u;
          v69[61] = v70;
          ++v106;
          v65 = 9;
        }
        else
        {
          v59 = v40;
          v60 = sub_1000438A4();
          v61 = sub_10003EB18((uint64_t)buf);
          v62 = sub_10003F8C4((uint64_t)buf);
          v63 = sub_10003EB18((uint64_t)&v134);
          v64 = sub_10003F8C4((uint64_t)&v134);
          BYTE4(v100) = v55;
          BYTE3(v100) = v52;
          BYTE2(v100) = v45;
          BYTE1(v100) = v111;
          LOBYTE(v100) = v112;
          if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, id, uint64_t))(*(_QWORD *)v60 + 688))(v60, v61, v62, v63, v64, v59, v113, v47, v49, v100))
          {
            if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
              sub_1007186E0(&v121, v122);
            v65 = 8;
          }
          else
          {
            v65 = 0;
          }
        }
        *(_QWORD *)&v134 = &off_100918258;
        if (*((_QWORD *)&v134 + 1))
          sub_100056AAC(*((unsigned int **)&v134 + 1));
        *(_QWORD *)buf = &off_100918258;
        if (*(_QWORD *)&buf[8])
          sub_100056AAC(*(unsigned int **)&buf[8]);
        if (v65 != 9 && v65)
          break;
        v31 = v115 + 1;
        if (v104 == (id)(v115 + 1))
        {
          v29 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v123, v139, 16);
          if (v29)
            goto LABEL_58;
          break;
        }
      }
    }

    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
      sub_1007181DC();
    v71 = sub_1000438A4();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 760))(v71, *(unsigned int *)(v107 + 4376));
    v72 = v101;
    if (!v105)
      v72 = 0;
    if (v72 == 1)
    {
      if (objc_msgSend(*(id *)(v107 + 4352), "count"))
      {
        v73 = 0;
        v74 = 0;
        do
        {
          if ((int)(objc_msgSend(*(id *)(v107 + 4352), "count") - v74) <= 4)
            v75 = objc_msgSend(*(id *)(v107 + 4352), "count") - v74;
          else
            v75 = 4;
          v76 = sub_1000438A4();
          (*(void (**)(uint64_t, _QWORD, uint64_t, char *))(*(_QWORD *)v76 + 696))(v76, v75, 25, &v105[62 * v73]);
          v74 += v75;
          v73 = v74;
        }
        while ((unint64_t)objc_msgSend(*(id *)(v107 + 4352), "count") > v74);
      }
      free(v105);
    }
    v10 = 1;
  }
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
    sub_100718678();
  if (*(_QWORD *)(v107 + 4344) || objc_msgSend(*(id *)(v107 + 4360), "count"))
  {
    v77 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v77 + 408))(v77, 1);
    v78 = *(_QWORD **)(v107 + 4328);
    v116 = (_QWORD *)(v107 + 4336);
    if (v78 != (_QWORD *)(v107 + 4336))
    {
      while (1)
      {
        v79 = sub_1000438A4();
        v80 = (uint64_t)v78 + 28;
        v137 = *(_OWORD *)((char *)v78 + 28);
        v138 = *((_DWORD *)v78 + 11);
        if ((*(unsigned int (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v79 + 424))(v79, &v137, 0, 169, 1, 1))
        {
          break;
        }
        v81 = (_QWORD *)v78[1];
        if (v81)
        {
          do
          {
            v82 = v81;
            v81 = (_QWORD *)*v81;
          }
          while (v81);
        }
        else
        {
          do
          {
            v82 = (_QWORD *)v78[2];
            v21 = *v82 == (_QWORD)v78;
            v78 = v82;
          }
          while (!v21);
        }
        v78 = v82;
        if (v82 == v116)
          goto LABEL_114;
      }
      v83 = qword_100999828;
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
        sub_1007185CC(v80, v83);
    }
LABEL_114:
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    objb = *(id *)(v107 + 4360);
    v84 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v117, v136, 16);
    if (v84)
    {
      v114 = *(_QWORD *)v118;
      while (2)
      {
        for (i = 0; i != v84; i = (char *)i + 1)
        {
          if (*(_QWORD *)v118 != v114)
            objc_enumerationMutation(objb);
          v86 = *(void **)(*((_QWORD *)&v117 + 1) + 8 * (_QWORD)i);
          v134 = 0uLL;
          v135 = 0;
          v87 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "objectForKeyedSubscript:", CFSTR("uuid"))));
          v88 = (int8x16_t *)objc_msgSend(v87, "bytes");
          v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "objectForKeyedSubscript:", CFSTR("uuid")));
          sub_100069B04((uint64_t)&v134, v88, objc_msgSend(v89, "length"));

          if (v116 == (_QWORD *)sub_100068488(v107 + 4328, (unsigned __int8 *)&v134))
          {
            v91 = sub_1000438A4();
            v132 = v134;
            v133 = v135;
            v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "objectForKeyedSubscript:", CFSTR("rssi")));
            v93 = objc_msgSend(v92, "intValue");
            v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "objectForKeyedSubscript:", CFSTR("data")));
            v95 = objc_msgSend(v94, "length");
            v96 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "objectForKeyedSubscript:", CFSTR("data"))));
            v97 = objc_msgSend(v96, "bytes");
            v98 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "objectForKeyedSubscript:", CFSTR("mask"))));
            LOBYTE(v99) = 1;
            LODWORD(v97) = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, _QWORD, uint64_t, _QWORD, id, id, int))(*(_QWORD *)v91 + 432))(v91, &v132, 0, v93, 1, v95, v97, objc_msgSend(v98, "bytes"), v99);

            if ((_DWORD)v97)
            {
              if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
              {
                sub_10006887C((uint64_t)&v134, buf);
                sub_100718144();
              }
              goto LABEL_128;
            }
          }
          else
          {
            v90 = qword_100999828;
            if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v86;
              _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_INFO, "Skip adding %@ as its uuid was already added without blob/mask", buf, 0xCu);
            }
          }
        }
        v84 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v117, v136, 16);
        if (v84)
          continue;
        break;
      }
    }
LABEL_128:

    v10 = 1;
  }
  sub_10006DF04(v107, v10);
}

void sub_10005986C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100059A04(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  unsigned __int16 v4;
  void *v5;
  unsigned __int16 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  void *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  id v20;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("data")));
  v4 = (unsigned __int16)objc_msgSend(v3, "length");

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("mask")));
  v6 = (unsigned __int16)objc_msgSend(v5, "length");

  v7 = sub_1000438A4();
  v8 = v4;
  if (v4 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 3536))(v7)
    && (v9 = sub_1000438A4(), v6 <= (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 3536))(v9)))
  {
    v11 = 1;
  }
  else
  {
    v10 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("puckType")));
      v14[0] = 67109890;
      v14[1] = v8;
      v15 = 1024;
      v16 = v6;
      v17 = 2112;
      v18 = v13;
      v19 = 2112;
      v20 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "The blobLen(%d) and maskLen(%d) are not support for this rule type %@, %@ ", (uint8_t *)v14, 0x22u);

    }
    v11 = 0;
  }

  return v11;
}

void sub_100059B8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100059BBC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, int a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14)
{
  unsigned int v14;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  size_t v23;
  size_t v24;
  unsigned int v25;
  size_t v26;
  size_t v27;
  __int16 __dst;
  char v38;
  __int16 v39;
  char v40;
  char v41;

  v14 = a5;
  v41 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 3552))(a1))
  {
    if (a3 >= 0x16)
      v17 = 22;
    else
      v17 = a3;
    if (v14 >= 0x16)
      v14 = 22;
  }
  else
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 3536))(a1);
    if (v18 >= a3)
      v17 = a3;
    else
      v17 = v18;
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 3536))(a1);
    if (v19 < v14)
      v14 = v19;
  }
  v20 = sub_100059E30(a1, a2, v17, a4, v14, a6, a7, a8, a9, a10, a11, a12, a13, a14, (uint64_t)&v41);
  if (!(_DWORD)v20)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 3552))(a1))
      return 0;
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 3536))(a1);
    v20 = 0;
    if (a5 < 0x17 || a3 < 0x17 || v21 < 0x17)
      return v20;
    v22 = (unsigned __int16)(a3 - v17);
    v23 = v22 >= 3 ? 3 : (unsigned __int16)(a3 - v17);
    v24 = v22 <= 2 ? v23 ^ 3 : 0;
    bzero((char *)&__dst + v23, v24);
    memcpy(&__dst, (const void *)(a2 + 22), v23);
    v25 = (unsigned __int16)(a5 - v14);
    v26 = v25 >= 3 ? 3 : (unsigned __int16)(a5 - v14);
    v27 = v25 <= 2 ? v26 ^ 3 : 0;
    bzero((char *)&v39 + v26, v27);
    memcpy(&v39, (const void *)(a4 + 22), v26);
    if (!v39 && v40 == 0 && !__dst && v38 == 0)
      return 0;
    v20 = sub_1003049AC(a1, v41, (uint64_t)&__dst, 3, (uint64_t)&v39, 3);
    if ((_DWORD)v20 && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006DF1C4();
  }
  return v20;
}

uint64_t sub_100059E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, int a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, uint64_t a15)
{
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v31[5];
  _QWORD v32[7];
  __int16 v33;
  __int16 v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  _QWORD v41[6];
  _QWORD v42[7];
  __int16 v43;
  __int16 v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v21 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 592))(v21) & 1) == 0)
  {
    v22 = sub_10003BE44();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 384))(v22)
      || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 3528))(a1))
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, BOOL, uint64_t))(*(_QWORD *)a1 + 656))(a1, a2, a3, a4, a5, a6, a7, a8 == 2, a9);
    }
  }
  v23 = a12 | 2;
  if (a13)
    v23 = a12;
  if (a14)
    LOBYTE(v24) = v23;
  else
    LOBYTE(v24) = v23 | 4;
  if ((_DWORD)a7 == 19 && *(_BYTE *)(a1 + 1446))
    v24 = *(_DWORD *)(a1 + 1448);
  v25 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 3552))(v25))
  {
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_100046708;
    v42[3] = &unk_1009265B8;
    v43 = a3;
    v42[4] = a2;
    v42[5] = a4;
    v44 = a5;
    v45 = a6;
    v46 = a7;
    v47 = a8;
    v42[6] = a9;
    v48 = a10;
    v49 = a11;
    v50 = v24;
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_1000466C8;
    v41[3] = &unk_100918090;
    v41[4] = a1;
    v41[5] = a15;
    v26 = v42;
    v27 = v41;
  }
  else
  {
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_100304AA4;
    v32[3] = &unk_1009265B8;
    v33 = a3;
    v32[4] = a2;
    v32[5] = a4;
    v34 = a5;
    v35 = a6;
    v36 = a7;
    v37 = a8;
    v32[6] = a9;
    v38 = a10;
    v39 = a11;
    v40 = v24;
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_100304B04;
    v31[3] = &unk_100917378;
    v31[4] = a1;
    v26 = v32;
    v27 = v31;
  }
  return sub_100042FD0(a1, 219, 1, v26, v27);
}

id sub_10005A0A4(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  void *v7;
  unsigned __int8 v8;
  void *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  _BOOL8 v14;
  unsigned __int8 v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  unsigned int v24;
  id v25;
  _QWORD v27[3];
  char v28;

  v4 = a2;
  v5 = a3;
  v6 = objc_msgSend(v4, "mutableCopy");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("bypassFilterDuplicate")));
  v8 = objc_msgSend(v7, "unsignedIntValue");

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("bypassFilterDuplicate")));
  LOBYTE(v7) = objc_msgSend(v9, "unsignedIntValue");

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("rssi")));
  v11 = objc_msgSend(v10, "intValue");

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("rssi")));
  v13 = objc_msgSend(v12, "intValue");

  v14 = (v8 | v7) != 0;
  if ((int)(v11 << 24) >= (int)(v13 << 24))
    v15 = v13;
  else
    v15 = v11;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v14));
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v16, CFSTR("bypassFilterDuplicate"));

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v15));
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v17, CFSTR("rssi"));

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("mask")));
  v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("mask")));
  v20 = (void *)v19;
  memset(v27, 0, sizeof(v27));
  v28 = 0;
  if (!v18)
    goto LABEL_12;
  if (!v19)
    goto LABEL_12;
  v21 = objc_msgSend(v18, "length");
  if (v21 != objc_msgSend(v20, "length") || !objc_msgSend(v18, "length") || !objc_msgSend(v20, "length"))
    goto LABEL_12;
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v27, objc_msgSend(v18, "length")));
  if (objc_msgSend(v18, "isEqual:", v22))
  {

LABEL_12:
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, CFSTR("mask"));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, CFSTR("data"));
    goto LABEL_13;
  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v27, objc_msgSend(v20, "length")));
  v24 = objc_msgSend(v20, "isEqual:", v23);

  if (v24)
    goto LABEL_12;
LABEL_13:
  v25 = objc_msgSend(v6, "copy");

  return v25;
}

void sub_10005A36C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_10005A674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10005ACAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  void *v46;
  void *v47;
  void *v48;

  _Unwind_Resume(a1);
}

void sub_10005ADE0(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;

  v5 = a2;
  v6 = a3;
  v7 = objc_retainAutorelease(v5);
  *(_QWORD *)(a1[5] + 8 * *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24)) = objc_msgSend(v7, "UTF8String");
  *(_QWORD *)(a1[6] + 8 * (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))++) = sub_10005AE90(v6);

}

void sub_10005AE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_10005AE90(void *a1)
{
  id v1;
  double v2;
  xpc_object_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned __int8 uuid[8];
  uint64_t v12;

  v1 = a1;
  if (objc_msgSend(v1, "isNSNumber"))
  {
    if (CFNumberIsFloatType((CFNumberRef)v1))
    {
      objc_msgSend(v1, "doubleValue");
      v3 = xpc_double_create(v2);
    }
    else
    {
      v3 = xpc_int64_create((int64_t)objc_msgSend(v1, "longLongValue"));
    }
  }
  else if (objc_msgSend(v1, "isNSString"))
  {
    v3 = xpc_string_create((const char *)objc_msgSend(objc_retainAutorelease(v1), "UTF8String"));
  }
  else if (objc_msgSend(v1, "isNSData"))
  {
    v4 = objc_retainAutorelease(v1);
    v3 = xpc_data_create(objc_msgSend(v4, "bytes"), (size_t)objc_msgSend(v4, "length"));
  }
  else
  {
    v5 = objc_opt_class(NSUUID);
    if ((objc_opt_isKindOfClass(v1, v5) & 1) != 0)
    {
      *(_QWORD *)uuid = 0;
      v12 = 0;
      objc_msgSend(v1, "getUUIDBytes:", uuid);
      v3 = xpc_uuid_create(uuid);
    }
    else if (objc_msgSend(v1, "isNSArray"))
    {
      v3 = sub_1004B10A8(v1);
    }
    else if (objc_msgSend(v1, "isNSDictionary"))
    {
      v3 = (xpc_object_t)sub_10005DF9C(v1);
    }
    else
    {
      v8 = objc_opt_class(BTUUID);
      if ((objc_opt_isKindOfClass(v1, v8) & 1) != 0)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "data"));
        v6 = sub_10005AE90();

        if (v6)
          goto LABEL_17;
        goto LABEL_16;
      }
      v10 = objc_opt_class(NSNull);
      if ((objc_opt_isKindOfClass(v1, v10) & 1) == 0)
      {
LABEL_16:
        +[NSException raise:format:](NSException, "raise:format:", CFSTR("Invalid Object"), CFSTR("Object %@ is invalid"), v1);
        v6 = 0;
        goto LABEL_17;
      }
      v3 = xpc_null_create();
    }
  }
  v6 = (uint64_t)v3;
  if (!v3)
    goto LABEL_16;
LABEL_17:

  return v6;
}

void sub_10005B074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10005B0B8(uint64_t a1, char a2)
{
  int v4;
  os_log_t *v5;
  NSObject *v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t result;
  const char *v10;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v15;
  _BOOL4 v16;
  NSObject *v17;
  const char *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  BOOL v24;
  BOOL v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  NSObject *v29;
  _BYTE *v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BOOL4 v34;
  int v35;
  NSObject *v36;
  unint64_t v37;
  NSObject *v38;
  const char *v39;
  int v40;
  const char *v41;
  _BYTE *v42;
  BOOL v43;
  int v44;
  NSObject *v45;
  const char *v46;
  int v47;
  int v48;
  int v49;
  const char *v50;
  const char *v51;
  const char *v52;
  NSObject *v53;
  char v54;
  dispatch_time_t v55;
  NSObject *v56;
  double Current;
  double v58;
  double v59;
  BOOL v60;
  double v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  NSObject *v67;
  dispatch_time_t v68;
  NSObject *v69;
  double v70;
  double v71;
  double v72;
  BOOL v73;
  double v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  NSObject *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  _QWORD *v91;
  _QWORD *v92;
  char *v93;
  __int128 *v94;
  os_log_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  __int128 *v105;
  __int128 v106;
  uint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  void **v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  int v116;
  char *v117;
  char *v118;
  void *v119;
  __int128 *v120;
  char *i;
  NSObject *v122;
  uint64_t v123;
  int v124;
  CFAbsoluteTime v125;
  int v126;
  uint64_t v127;
  int v128;
  NSObject *v129;
  const char *v130;
  const char *v131;
  const char *v132;
  uint64_t v133;
  const char *v134;
  const char *v135;
  const char *v136;
  const char *v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  const char *v141;
  int v142;
  _QWORD *v143;
  uint64_t *v144[3];
  _QWORD v145[5];
  void *__p[2];
  char v147;
  char *v148;
  char *v149;
  unint64_t v150;
  uint64_t *v151;
  _QWORD *v152[2];
  __int128 v153[2];
  __int128 v154;
  void (*v155)(int);
  __int128 __str;
  __int128 v157;
  uint8_t buf[80];
  __int128 v159;
  uint64_t v160;

  v154 = *(_OWORD *)&off_10093F218;
  v155 = sub_10006E7EC;
  memset(v153, 0, 26);
  v4 = *(_DWORD *)(a1 + 1960);
  v5 = (os_log_t *)&qword_100999828;
  if ((v4 & 0xFFFFFFFD) == 1)
    goto LABEL_4;
  v6 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "isInSettledState()";
    _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
    if (*(_DWORD *)(a1 + 1960))
      goto LABEL_4;
    return 105;
  }
  if (!v4)
    return 105;
LABEL_4:
  if (*(_BYTE *)(a1 + 4296))
  {
    v7 = qword_100999828;
    v8 = os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v8)
      return result;
    *(_WORD *)buf = 0;
    v10 = "Configuring controller, will try again later";
    goto LABEL_10;
  }
  if (*(_BYTE *)(a1 + 4383))
  {
    v7 = qword_100999828;
    v11 = os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v11)
      return result;
    *(_WORD *)buf = 0;
    v10 = "Configuring controller scan RX Thresholds, will try again later";
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
    return 0;
  }
  v12 = sub_10005CD1C(a1);
  if (v12)
    v13 = *(_DWORD *)(a1 + 1964) == 0;
  else
    v13 = 0;
  v14 = sub_10005CA60(a1);
  v15 = *(int *)(a1 + 1964);
  if ((_DWORD)v15)
  {
    v13 = sub_10067BF6C(a1);
    v16 = v13;
  }
  else
  {
    v16 = 0;
  }
  v17 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
  {
    if (v15 > 3)
      v18 = "UNKNOWN";
    else
      v18 = off_10093F678[v15];
    v19 = *(unsigned __int8 *)(a1 + 1840);
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&buf[4] = v13;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v12;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v16;
    *(_WORD *)&buf[20] = 2082;
    *(_QWORD *)&buf[22] = v18;
    *(_WORD *)&buf[30] = 1024;
    *(_DWORD *)&buf[32] = v14;
    *(_WORD *)&buf[36] = 1024;
    *(_DWORD *)&buf[38] = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "ShouldScan=%d AnyValidScanRequests=%d anyValidScanRequestInPaused=%d fObserverState=%{public}s ClientScanPowerAssertRequired=%d fScanFiltersNeedUpdagint=%d", buf, 0x2Au);
  }
  if (v14 && v13)
    sub_10066E204(a1);
  else
    sub_10005D1C4(a1);
  sub_10005D2A0(a1);
  sub_10005C80C((unsigned __int8 *)a1);
  sub_10005CE28(a1);
  sub_10005CACC((unsigned __int8 *)a1);
  if (!v13)
  {
    if (*(_DWORD *)(a1 + 1960) == 3)
    {
      v29 = qword_100999828;
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Stopping scan as there are no remaining scan agents permitted to scan", buf, 2u);
      }
      LOBYTE(__str) = 0;
      v30 = sub_100043758(&__str);
      if (sub_1000738D8(v30))
      {
        if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
          sub_10071764C();
      }
      else
      {
        *(_DWORD *)(a1 + 1960) = 4;
        v55 = dispatch_time(0, 3000000000);
        *(_QWORD *)(a1 + 2024) = v55;
        v56 = qword_100999828;
        if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v55;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "Setting the zone lost timeout to %lld", buf, 0xCu);
        }
        Current = CFAbsoluteTimeGetCurrent();
        v58 = 0.0;
        if (Current > 0.0)
        {
          v59 = *(double *)(a1 + 3208);
          v60 = Current <= v59 || v59 <= 0.0;
          v61 = Current - v59;
          if (v60)
            v58 = 0.0;
          else
            v58 = v61;
        }
        v62 = *(_DWORD *)(a1 + 3220);
        v63 = *(unsigned __int8 *)(a1 + 3224);
        v64 = *(unsigned int *)(a1 + 3216);
        v65 = a1 + 48 * v62 + 24 * *(unsigned __int8 *)(a1 + 3224) + 8 * v64;
        v66 = v58 + *(double *)(v65 + 2800);
        *(double *)(v65 + 2800) = v66;
        v67 = qword_100999828;
        if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
        {
          if (v62 > 6)
            v130 = "Unknown Duty Cycle Type";
          else
            v130 = off_10093F600[v62];
          v131 = "active";
          if (!v63)
            v131 = "passive";
          if (v64 > 2)
            v132 = "Unknown Scan Agent Type";
          else
            v132 = off_10093F638[(int)v64];
          v133 = *(_QWORD *)(a1 + 3208);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = v130;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v131;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = v132;
          *(_WORD *)&buf[32] = 2048;
          *(double *)&buf[34] = v58;
          *(_WORD *)&buf[42] = 2048;
          *(double *)&buf[44] = v66;
          *(_WORD *)&buf[52] = 2048;
          *(_QWORD *)&buf[54] = v133;
          _os_log_debug_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "BLEScanStat: Scan stops with duty cycle %{public}s scan type %{public}s agent %{public}s duration %f sec totalScanTime %f sec prev start at %f sec", buf, 0x3Eu);
        }
      }
      sub_100043728(&__str);
    }
    else
    {
      sub_10005D5E4(a1);
    }
    return 0;
  }
  v152[0] = 0;
  v152[1] = 0;
  v151 = (uint64_t *)v152;
  v20 = *(_QWORD **)(a1 + 2040);
  v143 = (_QWORD *)(a1 + 2048);
  if (v20 != (_QWORD *)(a1 + 2048))
  {
    do
    {
      LODWORD(v148) = *(_DWORD *)(*(_QWORD *)(v20[5] + 8) + 168);
      v160 = 0;
      v159 = 0u;
      memset(buf, 0, sizeof(buf));
      v21 = sub_100039224(a1, v20[5]);
      v22 = *(_OWORD *)v21;
      v23 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)&buf[28] = *(_OWORD *)(v21 + 28);
      *(_OWORD *)buf = v22;
      *(_OWORD *)&buf[16] = v23;
      memset(&buf[48], 0, 24);
      sub_100685584(&buf[48], *(_QWORD *)(v21 + 48), *(_QWORD *)(v21 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v21 + 56) - *(_QWORD *)(v21 + 48)) >> 5));
      *(_QWORD *)&buf[72] = 0;
      v159 = 0uLL;
      sub_1000B61B8((char *)&buf[72], *(__int128 **)(v21 + 72), *(__int128 **)(v21 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v21 + 80) - *(_QWORD *)(v21 + 72)) >> 2));
      LOBYTE(v160) = *(_BYTE *)(v21 + 96);
      if (buf[8] && !buf[5] && !buf[4])
        sub_10005C754(&v151, (unsigned int *)&v148, &v148);
      v24 = (sub_10005C5EC(*(_QWORD *)(v20[5] + 8), 0x16u) & 1) != 0 || *(_BYTE *)(a1 + 2721) != 0;
      *(_BYTE *)(a1 + 2721) = v24;
      v25 = (sub_10005C480(*(_QWORD *)(v20[5] + 8), 2u) & 1) != 0 || *(_BYTE *)(a1 + 2722) != 0;
      *(_BYTE *)(a1 + 2722) = v25;
      if (*(_QWORD *)&buf[72])
      {
        *(_QWORD *)&v159 = *(_QWORD *)&buf[72];
        operator delete(*(void **)&buf[72]);
      }
      *(_QWORD *)&__str = &buf[48];
      sub_1000B5524((void ***)&__str);
      v26 = (_QWORD *)v20[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v20[2];
          v33 = *v27 == (_QWORD)v20;
          v20 = v27;
        }
        while (!v33);
      }
      v20 = v27;
    }
    while (v27 != v143);
  }
  v28 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 384))(v28))
    sub_10067DC34(a1, (uint64_t)v153);
  else
    sub_100030F10(a1, (unsigned __int8 *)v153);
  v31 = *(_QWORD *)(a1 + 1968) ^ *(_QWORD *)&v153[0] | *(_QWORD *)(a1 + 1976) ^ *((_QWORD *)&v153[0] + 1) | *(_QWORD *)(a1 + 1984) ^ *(_QWORD *)&v153[1] | (unsigned __int16)(*(_WORD *)(a1 + 1992) ^ WORD4(v153[1]));
  *(_BYTE *)(a1 + 1841) = v31 != 0;
  if ((a2 & 1) != 0)
  {
    v32 = 1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 1840))
      v33 = 0;
    else
      v33 = v31 == 0;
    v32 = !v33;
  }
  v34 = v31 != 0;
  if (*(_DWORD *)(a1 + 1964) == 2)
    v35 = v34;
  else
    v35 = v32;
  v36 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v35;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "needToRestart=%d", buf, 8u);
  }
  if (*(_DWORD *)(a1 + 1960) == 3)
  {
    if (v35)
    {
      __str = 0u;
      v157 = 0u;
      LOWORD(v37) = *(_WORD *)(a1 + 1974);
      snprintf((char *)&__str, 0x20uLL, "%.2fms/%.2fms", (double)*(unsigned __int16 *)(a1 + 1972) * 0.625, (double)v37 * 0.625);
      sub_10005D7FC(a1);
      v38 = qword_100999828;
      if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
      {
        if (*(_BYTE *)(a1 + 1968))
          v39 = "passive";
        else
          v39 = "active";
        v40 = *(unsigned __int8 *)(a1 + 1971);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v39;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = &__str;
        if (v40)
          v41 = "no ";
        else
          v41 = "";
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v41;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "Currently in %{public}s scan (%{public}s) with %{public}sduplicates - stopping scan...", buf, 0x20u);
      }
      LOBYTE(v148) = 0;
      v42 = sub_100043758(&v148);
      if (sub_1000738D8(v42))
      {
        if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
          sub_10071764C();
      }
      else
      {
        *(_DWORD *)(a1 + 1960) = 4;
        v68 = dispatch_time(0, 3000000000);
        *(_QWORD *)(a1 + 2024) = v68;
        v69 = qword_100999828;
        if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v68;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_INFO, "Setting the zone lost timeout to %lld", buf, 0xCu);
        }
        v70 = CFAbsoluteTimeGetCurrent();
        v71 = 0.0;
        if (v70 > 0.0)
        {
          v72 = *(double *)(a1 + 3208);
          v73 = v70 <= v72 || v72 <= 0.0;
          v74 = v70 - v72;
          if (v73)
            v71 = 0.0;
          else
            v71 = v74;
        }
        v75 = *(_DWORD *)(a1 + 3220);
        v76 = *(unsigned __int8 *)(a1 + 3224);
        v77 = *(unsigned int *)(a1 + 3216);
        v78 = a1 + 48 * v75 + 24 * *(unsigned __int8 *)(a1 + 3224) + 8 * v77;
        v79 = v71 + *(double *)(v78 + 2800);
        *(double *)(v78 + 2800) = v79;
        v80 = qword_100999828;
        if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
        {
          if (v75 > 6)
            v134 = "Unknown Duty Cycle Type";
          else
            v134 = off_10093F600[v75];
          v136 = "active";
          if (!v76)
            v136 = "passive";
          if (v77 > 2)
            v137 = "Unknown Scan Agent Type";
          else
            v137 = off_10093F638[(int)v77];
          v138 = *(_QWORD *)(a1 + 3208);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = v134;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v136;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = v137;
          *(_WORD *)&buf[32] = 2048;
          *(double *)&buf[34] = v71;
          *(_WORD *)&buf[42] = 2048;
          *(double *)&buf[44] = v79;
          *(_WORD *)&buf[52] = 2048;
          *(_QWORD *)&buf[54] = v138;
          _os_log_debug_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "BLEScanStat: Scan stops with duty cycle %{public}s scan type %{public}s agent %{public}s duration %f sec totalScanTime %f sec prev start at %f sec", buf, 0x3Eu);
        }
      }
      sub_100043728(&v148);
    }
    else
    {
      sub_10005D5E4(a1);
    }
    goto LABEL_208;
  }
  __str = 0u;
  v157 = 0u;
  LOWORD(v37) = WORD3(v153[0]);
  snprintf((char *)&__str, 0x20uLL, "%.2fms/%.2fms", (double)WORD2(v153[0]) * 0.625, (double)v37 * 0.625);
  if (*(_QWORD *)((char *)v153 + 6))
    v43 = WORD2(v153[0]) == 0;
  else
    v43 = 1;
  v44 = !v43;
  v45 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
  {
    v46 = "Not ";
    v47 = *(unsigned __int8 *)(a1 + 1840);
    if (v44)
      v46 = "";
    v48 = *(_DWORD *)(a1 + 1964);
    v49 = *(unsigned __int8 *)(a1 + 2352);
    if (LOBYTE(v153[0]))
      v50 = "passive";
    else
      v50 = "active";
    *(_DWORD *)buf = 136448002;
    *(_QWORD *)&buf[4] = v46;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v50;
    if (BYTE3(v153[0]))
      v51 = "enabled";
    else
      v51 = "disabled";
    *(_WORD *)&buf[22] = 2082;
    v52 = "YES";
    *(_QWORD *)&buf[24] = &__str;
    *(_WORD *)&buf[32] = 2082;
    if (!v47)
      v52 = "NO";
    *(_QWORD *)&buf[34] = v51;
    *(_WORD *)&buf[42] = 1024;
    *(_DWORD *)&buf[44] = v47;
    *(_WORD *)&buf[48] = 1024;
    *(_DWORD *)&buf[50] = v48;
    *(_WORD *)&buf[54] = 1024;
    *(_DWORD *)&buf[56] = v49;
    *(_WORD *)&buf[60] = 2082;
    *(_QWORD *)&buf[62] = v52;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "%{public}sStarting %{public}s scan (%{public}s) with duplicate filter %{public}s scNeed=%d stateO=%d, retainDups=%d fScanFiltersNeedUpdating=%{public}s", buf, 0x46u);
  }
  *(_OWORD *)(a1 + 1968) = v153[0];
  *(_OWORD *)(a1 + 1978) = *(__int128 *)((char *)v153 + 10);
  if (v44)
    sub_10005D7FC(a1);
  if (*(_DWORD *)(a1 + 1964) == 2)
  {
    sub_10000F4E0((_BYTE *)a1, 1);
  }
  else
  {
    if (*(_BYTE *)(a1 + 1840) || *(_BYTE *)(a1 + 1843))
    {
      *(_BYTE *)(a1 + 1840) = 0;
      if ((*(_BYTE *)(a1 + 4382) || *(_BYTE *)(a1 + 4381)) && *(_BYTE *)(a1 + 1842))
        sub_10000F4E0((_BYTE *)a1, 0);
      if (!LOBYTE(v153[0]) || (sub_10067BFD8(a1) & 1) != 0 || (sub_10067C058(a1) & 1) != 0)
      {
        v53 = qword_100999828;
        if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "Skip addFilters", buf, 2u);
        }
      }
      else
      {
        sub_100056BFC(a1);
        if (*(_BYTE *)(a1 + 4382) || *(_BYTE *)(a1 + 4381))
          goto LABEL_208;
      }
    }
    if (LOBYTE(v153[0]))
      v54 = sub_10005DAD0(a1);
    else
      v54 = 0;
    BYTE3(v153[0]) |= v54;
  }
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v81 = *(_QWORD **)(a1 + 2040);
  if (v81 == v143)
  {
    *(_BYTE *)(a1 + 4383) = 0;
    goto LABEL_195;
  }
  v142 = v44;
  do
  {
    v83 = v81[4];
    v82 = v81[5];
    v84 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
    {
      sub_1000340DC(v83, (uint64_t)__p);
      v111 = __p;
      if (v147 < 0)
        v111 = (void **)__p[0];
      v112 = *(_QWORD *)(v82 + 8);
      v113 = *(unsigned __int8 *)(v112 + 196);
      v115 = *(_DWORD *)(v112 + 188);
      v114 = *(_DWORD *)(v112 + 192);
      if (v115)
        v116 = 120000;
      else
        v116 = 0;
      if (!v114)
        v114 = v116;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v111;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v113;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v115;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v114;
      _os_log_debug_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "session %s scanRxThresholdConfigured:%d getScanRxThresholdRequirement:%d getScanTimeoutRequirement:%d", buf, 0x1Eu);
      if (v147 < 0)
        operator delete(__p[0]);
    }
    v85 = *(_QWORD *)(v82 + 8);
    if (!*(_BYTE *)(v85 + 196))
    {
      v87 = *(_DWORD *)(v85 + 188);
      v86 = *(_DWORD *)(v85 + 192);
      v88 = 120000;
      if (!v87)
      {
        if (!v86)
          goto LABEL_170;
        v88 = 0;
      }
      v89 = *(_DWORD *)(v85 + 168);
      if (v86)
        v90 = *(_DWORD *)(v85 + 192);
      else
        v90 = v88;
      v145[0] = _NSConcreteStackBlock;
      v145[1] = 3221225472;
      v145[2] = sub_100680DA0;
      v145[3] = &unk_10093EF58;
      v145[4] = a1;
      v91 = objc_retainBlock(v145);
      v92 = v91;
      v93 = v149;
      if ((unint64_t)v149 >= v150)
      {
        v95 = v5;
        v96 = 0xCCCCCCCCCCCCCCCDLL * ((v149 - v148) >> 3);
        v97 = v96 + 1;
        if (v96 + 1 > 0x666666666666666)
          abort();
        if (0x999999999999999ALL * ((uint64_t)(v150 - (_QWORD)v148) >> 3) > v97)
          v97 = 0x999999999999999ALL * ((uint64_t)(v150 - (_QWORD)v148) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v150 - (_QWORD)v148) >> 3) >= 0x333333333333333)
          v98 = 0x666666666666666;
        else
          v98 = v97;
        *(_QWORD *)&buf[32] = &v150;
        v99 = (char *)sub_100261D70((uint64_t)&v150, v98);
        v101 = &v99[40 * v96];
        *(_QWORD *)v101 = v83;
        *((_DWORD *)v101 + 2) = v87;
        *((_DWORD *)v101 + 3) = v87;
        *((_DWORD *)v101 + 4) = v90;
        *((_DWORD *)v101 + 5) = 7;
        *((_DWORD *)v101 + 6) = v89;
        *((_QWORD *)v101 + 4) = v92;
        v103 = v148;
        v102 = v149;
        if (v149 == v148)
        {
          v103 = v149;
          v105 = (__int128 *)&v99[40 * v96];
          v5 = v95;
        }
        else
        {
          v104 = v149;
          v105 = (__int128 *)&v99[40 * v96];
          v5 = v95;
          do
          {
            v106 = *(_OWORD *)(v104 - 40);
            *(__int128 *)((char *)v105 - 28) = *(_OWORD *)(v104 - 28);
            *(__int128 *)((char *)v105 - 40) = v106;
            v107 = *((_QWORD *)v104 - 1);
            *((_QWORD *)v104 - 1) = 0;
            *((_QWORD *)v105 - 1) = v107;
            v105 = (__int128 *)((char *)v105 - 40);
            v104 -= 40;
          }
          while (v104 != v103);
        }
        v94 = (__int128 *)(v101 + 40);
        v148 = (char *)v105;
        v149 = v101 + 40;
        v108 = v150;
        v150 = (unint64_t)&v99[40 * v100];
        *(_QWORD *)&buf[16] = v102;
        *(_QWORD *)&buf[24] = v108;
        *(_QWORD *)buf = v103;
        *(_QWORD *)&buf[8] = v103;
        sub_10006858C((uint64_t)buf);
      }
      else
      {
        *(_QWORD *)v149 = v83;
        *((_DWORD *)v93 + 2) = v87;
        *((_DWORD *)v93 + 3) = v87;
        *((_DWORD *)v93 + 4) = v90;
        *((_DWORD *)v93 + 5) = 7;
        *((_DWORD *)v93 + 6) = v89;
        v94 = (__int128 *)(v93 + 40);
        *((_QWORD *)v93 + 4) = v91;
      }
      v149 = (char *)v94;
      *(_BYTE *)(*(_QWORD *)(v82 + 8) + 196) = 1;
    }
LABEL_170:
    v109 = (_QWORD *)v81[1];
    if (v109)
    {
      do
      {
        v110 = v109;
        v109 = (_QWORD *)*v109;
      }
      while (v109);
    }
    else
    {
      do
      {
        v110 = (_QWORD *)v81[2];
        v33 = *v110 == (_QWORD)v81;
        v81 = v110;
      }
      while (!v33);
    }
    v81 = v110;
  }
  while (v110 != v143);
  v117 = v148;
  v118 = v149;
  *(_BYTE *)(a1 + 4383) = 0;
  v44 = v142;
  if (v117 != v118)
  {
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_10093F498);
    v119 = off_100977B38;
    memset(v144, 0, sizeof(v144));
    sub_1006865A8(v144, (__int128 *)v148, (__int128 *)v149, 0xCCCCCCCCCCCCCCCDLL * ((v149 - v148) >> 3));
    sub_10001021C((uint64_t)v119, v144);
    *(_QWORD *)buf = v144;
    sub_100686534((void ***)buf);
    v120 = (__int128 *)v148;
    for (i = v149; i != (char *)v120; i -= 40)

    v149 = (char *)v120;
    v122 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_INFO, "Configuring RX Threshold, waiting for completion", buf, 2u);
    }
    goto LABEL_207;
  }
LABEL_195:
  if (v44)
  {
    v123 = sub_1000438A4();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v123 + 1088))(v123, *(unsigned __int8 *)(a1 + 2352));
    *(_BYTE *)(a1 + 2352) = 0;
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    v124 = sub_1000738DC((uint64_t)v153, (uint64_t)&v154, a1);
    sub_10004339C(__p);
    if (v124)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        sub_1007176AC();
    }
    else
    {
      sub_10005D6DC(a1);
      *(_DWORD *)(a1 + 1960) = 2;
      v125 = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 3208) = v125;
      v126 = LOBYTE(v153[0]) ^ 1;
      *(_BYTE *)(a1 + 3224) = LOBYTE(v153[0]) ^ 1;
      v128 = sub_10006E440(v127, WORD2(v153[0]), WORD3(v153[0]));
      *(_DWORD *)(a1 + 3220) = v128;
      v129 = *v5;
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
      {
        if (v128 == 7)
          v135 = "Unknown Duty Cycle Type";
        else
          v135 = off_10093F600[v128];
        v139 = "active";
        if (!v126)
          v139 = "passive";
        v140 = *(int *)(a1 + 3216);
        if (v140 > 2)
          v141 = "Unknown Scan Agent Type";
        else
          v141 = off_10093F638[v140];
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = v135;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v139;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v141;
        *(_WORD *)&buf[32] = 2048;
        *(CFAbsoluteTime *)&buf[34] = v125;
        _os_log_debug_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEBUG, "BLEScanStat: Scan started with duty cycle %{public}s scan type %{public}s agent %{public}s start at %f sec", buf, 0x2Au);
      }
      if (qword_100977B40 != -1)
        dispatch_once(&qword_100977B40, &stru_10093F498);
      sub_10001F6F4((uint64_t)off_100977B38, v153, 1, (uint64_t)&v151);
    }
    sub_100043728(__p);
  }
  else
  {
    sub_10005D5E4(a1);
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_10093F498);
    sub_10001F6F4((uint64_t)off_100977B38, v153, 0, (uint64_t)&v151);
  }
LABEL_207:
  *(_QWORD *)buf = &v148;
  sub_100686534((void ***)buf);
LABEL_208:
  sub_10001A82C((uint64_t)&v151, v152[0]);
  return 0;
}

void sub_10005C3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,_QWORD *a33)
{
  sub_100043728(&a29);
  sub_10001A82C((uint64_t)&a32, a33);
  _Unwind_Resume(a1);
}

uint64_t sub_10005C480(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  void *v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  BOOL v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  if (*(unsigned __int16 *)(a1 + 170) == a2)
    return 1;
  v3 = *(void **)(a1 + 176);
  if (!v3)
    return 0;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = v3;
  v2 = (uint64_t)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v2)
  {
    v6 = *(_QWORD *)v13;
    v7 = a2;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v5);
        v9 = *(id *)(*((_QWORD *)&v12 + 1) + 8 * i);
        v10 = v7 == objc_msgSend(v9, "longLongValue", (_QWORD)v12) >> 16;

        if (v10)
        {
          v2 = 1;
          goto LABEL_14;
        }
      }
      v2 = (uint64_t)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_14:

  return v2;
}

void sub_10005C5C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10005C5EC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  void *v3;
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  id v9;
  BOOL v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  if (*(_DWORD *)(a1 + 168) == a2)
    return 1;
  v3 = *(void **)(a1 + 176);
  if (!v3)
    return 0;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = v3;
  v2 = (uint64_t)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v2)
  {
    v6 = *(_QWORD *)v13;
    v7 = a2;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v5);
        v9 = *(id *)(*((_QWORD *)&v12 + 1) + 8 * i);
        v10 = objc_msgSend(v9, "longLongValue", (_QWORD)v12) == (id)v7;

        if (v10)
        {
          v2 = 1;
          goto LABEL_14;
        }
      }
      v2 = (uint64_t)objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_14:

  return v2;
}

void sub_10005C728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **sub_10005C754(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_100004078(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_10005C80C(unsigned __int8 *a1)
{
  NSObject *v2;
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;

  v2 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
  {
    v3 = sub_10003C5EC((uint64_t)a1);
    v4 = a1[144];
    v15 = 67109376;
    v16 = v3;
    v17 = 1024;
    v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "enableObjectDiscoveryADVBuffersIfNeeded objectDiscoveryHwAdvBufferOnly:%d fScreenState:%d", (uint8_t *)&v15, 0xEu);
  }
  if (sub_10003C5EC((uint64_t)a1) && !a1[144])
  {
    v5 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      v6 = a1[172];
      v7 = a1[167];
      v8 = a1[168];
      v15 = 67109632;
      v16 = v6;
      v17 = 1024;
      v18 = v7;
      v19 = 1024;
      v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "exptectedEntries:%d created:%d enabled:%d", (uint8_t *)&v15, 0x14u);
    }
    if (a1[172] == 255 && a1[167] && !a1[168])
    {
      v9 = sub_100671BC4((uint64_t)a1, 0, 1);
      if (v9)
      {
        v10 = v9;
        v11 = qword_100999828;
        if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
        {
          v15 = 67109120;
          v16 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "enableADVBuffering(Wild) failed with result %d", (uint8_t *)&v15, 8u);
        }
      }
      else
      {
        sub_100673CFC((uint64_t)a1);
      }
    }
    if (a1[716] == 255 && a1[711] && !a1[712])
    {
      v12 = sub_100671BC4((uint64_t)a1, 1, 1);
      if (v12)
      {
        v13 = v12;
        v14 = qword_100999828;
        if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
        {
          v15 = 67109120;
          v16 = v13;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "enableADVBuffering(NO) failed with result %d", (uint8_t *)&v15, 8u);
        }
      }
      else
      {
        sub_100673CFC((uint64_t)a1);
      }
    }
  }
}

BOOL sub_10005CA60(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _BOOL8 result;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v1 = *(_QWORD **)(a1 + 2040);
  v2 = (_QWORD *)(a1 + 2048);
  if (v1 == (_QWORD *)(a1 + 2048))
    return 0;
  do
  {
    result = *(_BYTE *)(*(_QWORD *)(v1[5] + 8) + 142) != 0;
    if (*(_BYTE *)(*(_QWORD *)(v1[5] + 8) + 142))
      break;
    v4 = (_QWORD *)v1[1];
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (_QWORD *)v1[2];
        v6 = *v5 == (_QWORD)v1;
        v1 = v5;
      }
      while (!v6);
    }
    v1 = v5;
  }
  while (v5 != v2);
  return result;
}

void sub_10005CACC(unsigned __int8 *a1)
{
  NSObject *v2;
  _BOOL4 v3;
  int v4;
  int v5;
  int v6;
  _DWORD v7[2];
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;

  v2 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO))
  {
    v3 = sub_10005CCAC((uint64_t)a1);
    v4 = a1[144];
    v5 = a1[1854];
    v6 = a1[1864];
    v7[0] = 67109888;
    v7[1] = v3;
    v8 = 1024;
    v9 = v4;
    v10 = 1024;
    v11 = v5;
    v12 = 1024;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "enableAOPBTBuffersIfNeeded haveAnyHwAOPBTBufferRequests:%d fScreenState:%d fAOPBTBufferReadInProgress:%d fAOPBTProxCtxBufferReadInProgress:%d", (uint8_t *)v7, 0x1Au);
  }
  if (sub_10005CCAC((uint64_t)a1))
  {
    if (sub_100674ED0((uint64_t)a1) && !a1[1854])
    {
      if (sub_10067472C((uint64_t)a1, 22, 1))
      {
        if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
          sub_100716388();
      }
      else
      {
        sub_100674FCC((uint64_t)a1);
      }
    }
    if (sub_10067465C((uint64_t)a1)
      && !a1[1864]
      && sub_10067472C((uint64_t)a1, 0, 1)
      && os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
    {
      sub_100716328();
    }
    if (sub_1006746C4((uint64_t)a1)
      && !a1[1864]
      && !a1[144]
      && sub_10067472C((uint64_t)a1, 7, 1)
      && os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
    {
      sub_1007162C8();
    }
  }
}

BOOL sub_10005CCAC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unsigned int v3;
  _BOOL8 result;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v1 = *(_QWORD **)(a1 + 2040);
  v2 = (_QWORD *)(a1 + 2048);
  if (v1 == (_QWORD *)(a1 + 2048))
    return 0;
  do
  {
    v3 = *(unsigned __int16 *)(*(_QWORD *)(v1[5] + 8) + 124) - 1;
    result = v3 < 0xFF;
    if (v3 < 0xFF)
      break;
    v5 = (_QWORD *)v1[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v1[2];
        v7 = *v6 == (_QWORD)v1;
        v1 = v6;
      }
      while (!v7);
    }
    v1 = v6;
  }
  while (v6 != v2);
  return result;
}

uint64_t sub_10005CD1C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v1 = *(_QWORD **)(a1 + 2040);
  v2 = (_QWORD *)(a1 + 2048);
  if (v1 != (_QWORD *)(a1 + 2048))
  {
    do
    {
      v4 = v1[5];
      if (sub_100038A28(v4))
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (*(_BYTE *)(v5 + 143) || *(_BYTE *)(v5 + 122) || *(_WORD *)(v5 + 124))
          return 1;
        if (!sub_100038A1C(v4) || *(_BYTE *)(a1 + 144))
        {
          v6 = *(unsigned __int8 *)(v4 + 81);
          if (v6 <= 0x20)
          {
            if (((1 << v6) & 0x114) != 0)
            {
              if (sub_10003F24C(v4))
                return 1;
            }
            else if (((1 << v6) & 0x100010000) != 0)
            {
              return 1;
            }
          }
        }
      }
      v7 = (_QWORD *)v1[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v1[2];
          v9 = *v8 == (_QWORD)v1;
          v1 = v8;
        }
        while (!v9);
      }
      v1 = v8;
    }
    while (v8 != v2);
  }
  return 0;
}

uint64_t sub_10005CE28(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned __int8 v13;
  char v14;
  char v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  NSObject *v19;
  uint64_t v20;
  _DWORD v22[2];
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  v2 = *(_QWORD **)(a1 + 1816);
  if (v2 == (_QWORD *)(a1 + 1824))
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      v4 = *((unsigned __int8 *)v2 + 28);
      v5 = v3 | 2;
      if (!*((_WORD *)v2 + 16))
        v5 = v3;
      v6 = v3 | 4;
      if (!*((_WORD *)v2 + 16))
        v6 = v3;
      v7 = v3 | (*((_WORD *)v2 + 16) != 0);
      if (v4 != 22)
        v7 = v3;
      if (v4 == 7)
        v7 = v6;
      if (*((_BYTE *)v2 + 28))
        v3 = v7;
      else
        v3 = v5;
      v8 = (_QWORD *)v2[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v2[2];
          v10 = *v9 == (_QWORD)v2;
          v2 = v9;
        }
        while (!v10);
      }
      v2 = v9;
    }
    while (v9 != (_QWORD *)(a1 + 1824));
  }
  v11 = *(_QWORD **)(a1 + 2040);
  v12 = (_QWORD *)(a1 + 2048);
  if (v11 == (_QWORD *)(a1 + 2048))
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = sub_10005D1B4(v11[5]);
      if (sub_100687570(v11[5]))
        v15 = 2;
      else
        v15 = 0;
      if (sub_100687580(v11[5]))
        v16 = 4;
      else
        v16 = 0;
      v17 = (_QWORD *)v11[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v11[2];
          v10 = *v18 == (_QWORD)v11;
          v11 = v18;
        }
        while (!v10);
      }
      v13 |= v14 | v15 | v16;
      v11 = v18;
    }
    while (v18 != v12);
  }
  v19 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
  {
    v22[0] = 67109632;
    v22[1] = v3;
    v23 = 1024;
    v24 = v13;
    v25 = 1024;
    v26 = (v13 ^ v3);
    _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "AOPBTBUFF config current:%d new:%d configChanged:%d", (uint8_t *)v22, 0x14u);
  }
  if (v13 == v3)
    return 0;
  if (((v13 ^ v3) & 1) == 0)
  {
    v20 = 0;
    if (((v13 ^ v3) & 2) == 0)
      goto LABEL_60;
LABEL_53:
    if ((v13 & 2) != 0)
    {
      v20 = sub_10066F994(a1, 0);
      if ((_DWORD)v20 && os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
        sub_100718024();
    }
    else
    {
      v20 = sub_10000D558(a1, 0);
      if ((_DWORD)v20 && os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
        sub_100717FC4();
    }
    goto LABEL_60;
  }
  if ((v13 & 1) == 0)
  {
    v20 = sub_10000D558(a1, 22);
    if ((_DWORD)v20 && os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
    {
      sub_100718084();
      if (((v13 ^ v3) & 2) != 0)
        goto LABEL_53;
      goto LABEL_60;
    }
LABEL_52:
    if (((v13 ^ v3) & 2) == 0)
      goto LABEL_60;
    goto LABEL_53;
  }
  v20 = sub_10066F994(a1, 22);
  if (!(_DWORD)v20 || !os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
    goto LABEL_52;
  sub_1007180E4();
  if (((v13 ^ v3) & 2) != 0)
    goto LABEL_53;
LABEL_60:
  if (((v13 ^ v3) & 4) != 0)
  {
    if ((v13 & 4) != 0)
    {
      v20 = sub_10066F994(a1, 7);
      if ((_DWORD)v20 && os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
        sub_100717F64();
    }
    else
    {
      v20 = sub_10000D558(a1, 7);
      if ((_DWORD)v20 && os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
        sub_100717F04();
    }
  }
  return v20;
}

uint64_t sub_10005D1B4(uint64_t a1)
{
  return *(_WORD *)(*(_QWORD *)(a1 + 8) + 124) & 1;
}

void sub_10005D1C4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 2200);
  if (v1)
  {
    v3 = qword_1009998D8;
    if (!os_log_type_enabled((os_log_t)qword_1009998D8, OS_LOG_TYPE_DEFAULT)
      || (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1),
          v5 = 136446210,
          v6 = v4,
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Destroying %{public}s", (uint8_t *)&v5, 0xCu), (v1 = *(_QWORD *)(a1 + 2200)) != 0))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    }
    *(_QWORD *)(a1 + 2200) = 0;
  }
}

uint64_t sub_10005D2A0(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  NSObject *v10;
  int v12;
  unsigned __int16 v13;
  NSObject *v14;
  uint64_t v15;
  _DWORD v16[2];
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;

  if ((_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures") & 1) != 0)
  {
    v2 = *(unsigned __int8 *)(a1 + 711) | (2 * *(unsigned __int8 *)(a1 + 167));
    v3 = *(_QWORD **)(a1 + 2040);
    if (v3 == (_QWORD *)(a1 + 2048))
    {
      LOWORD(v4) = 0;
    }
    else
    {
      v4 = 0;
      do
      {
        v5 = v3[5];
        if (*(_DWORD *)(*(_QWORD *)(v5 + 8) + 168))
        {
          if (sub_10005D584(v5))
            v6 = 2;
          else
            v6 = 0;
          v4 |= v6 | sub_10005D594(v3[5]);
        }
        v7 = (_QWORD *)v3[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v3[2];
            v9 = *v8 == (_QWORD)v3;
            v3 = v8;
          }
          while (!v9);
        }
        v3 = v8;
      }
      while (v8 != (_QWORD *)(a1 + 2048));
    }
    v12 = (unsigned __int16)v4;
    v13 = v4 ^ v2;
    v14 = qword_100999828;
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
    {
      v16[0] = 67109632;
      v16[1] = v2;
      v17 = 1024;
      v18 = v12;
      v19 = 1024;
      v20 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "updateADVBufferConfig current:%02x new:%02x configChanged:%02x", (uint8_t *)v16, 0x14u);
    }
    if (!v13)
      return 0;
    if ((v13 & 2) != 0)
    {
      if ((v12 & 2) == 0)
      {
        sub_10066D748(a1, 0);
        if ((v13 & 1) == 0)
          goto LABEL_39;
        goto LABEL_30;
      }
      *(_BYTE *)(a1 + 170) = 0;
      if (sub_100677D5C(a1, 0) && os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
      {
        sub_100716FF0();
        if ((v13 & 1) == 0)
        {
LABEL_39:
          if (!*(_BYTE *)(a1 + 167) && !*(_BYTE *)(a1 + 711))
            sub_100673C68(a1);
          return 0;
        }
LABEL_30:
        if ((v12 & 1) != 0)
        {
          if ((v12 & 2) != 0
            && (v15 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 704))(v15) < 2))
          {
            if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
              sub_100716FC4();
          }
          else
          {
            *(_BYTE *)(a1 + 714) = 0;
            if (sub_100677D5C(a1, 1)
              && os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_ERROR))
            {
              sub_100716F64();
            }
          }
        }
        else
        {
          sub_10066D748(a1, 1);
        }
        goto LABEL_39;
      }
    }
    if ((v13 & 1) == 0)
      goto LABEL_39;
    goto LABEL_30;
  }
  v10 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v16[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "ADVBUFF cannot update ADV Buffer config when in Legacy mode", (uint8_t *)v16, 2u);
  }
  return 12;
}

uint64_t sub_10005D584(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 8) + 122) & 1;
}

uint64_t sub_10005D594(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 122) >> 1) & 1;
}

uint64_t sub_10005D5A4()
{
  if (qword_100991F48 != -1)
    dispatch_once(&qword_100991F48, &stru_100929678);
  return qword_100991F40;
}

void sub_10005D5E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 3480))(v2))
  {
    v3 = *(_QWORD *)(a1 + 2208);
    if (v3)
    {
      v4 = qword_1009998D8;
      if (!os_log_type_enabled((os_log_t)qword_1009998D8, OS_LOG_TYPE_DEFAULT)
        || (v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3),
            v6 = 136446210,
            v7 = v5,
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Destroying %{public}s", (uint8_t *)&v6, 0xCu), (v3 = *(_QWORD *)(a1 + 2208)) != 0))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      }
      *(_QWORD *)(a1 + 2208) = 0;
    }
  }
  sub_10005D6DC(a1);
}

void sub_10005D6DC(uint64_t a1)
{
  double Current;
  double v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __int16 v9;
  unsigned int v10;

  if (*(double *)(a1 + 2712) != 0.0)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v3 = *(double *)(a1 + 2712);
    if (Current <= v3)
      v4 = 0;
    else
      v4 = ((Current - v3) * 1000.0);
    v5 = *(unsigned __int8 *)(a1 + 2720);
    if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
      sub_100716070();
    v6 = a1 + 176 * v5;
    v7 = v4 / 0xA;
    if (v4 > 0xC7)
      v7 = 19;
    v8 = v6 + 4 * v7;
    v9 = v4;
    v10 = *(unsigned __int16 *)(v6 + 2492);
    if (v10 >= (unsigned __int16)v4)
      LOWORD(v10) = v4;
    *(_WORD *)(v6 + 2492) = v10;
    if (*(unsigned __int16 *)(v6 + 2494) > (unsigned __int16)v4)
      v9 = *(_WORD *)(v6 + 2494);
    *(_WORD *)(v6 + 2494) = v9;
    ++*(_DWORD *)(v8 + 2368);
    if (*(_BYTE *)(a1 + 2721))
      *(_DWORD *)(a1 + 176 * v5 + 2512) += v4;
    if (*(_BYTE *)(a1 + 2722))
      *(_DWORD *)(a1 + 176 * v5 + 2524) += v4;
    *(_DWORD *)(a1 + 2719) = 0;
    *(_QWORD *)(a1 + 2712) = 0;
  }
}

void sub_10005D7FC(uint64_t a1)
{
  uint64_t v2;

  if (qword_1009940E0 != -1)
    dispatch_once(&qword_1009940E0, &stru_10093EE10);
  v2 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 3480))(v2) && !*(_QWORD *)(a1 + 2208))
    sub_10034FFF8();
  sub_10005D948(a1);
}

BOOL sub_10005D924()
{
  return (*(_DWORD *)(sub_1000438A4() + 712) - 1) < 0x12;
}

void sub_10005D948(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  _DWORD *v4;

  if (*(double *)(a1 + 2712) == 0.0)
  {
    *(CFAbsoluteTime *)(a1 + 2712) = CFAbsoluteTimeGetCurrent();
    v2 = *(unsigned __int8 *)(a1 + 144);
    *(_BYTE *)(a1 + 2720) = v2;
    ++*(_DWORD *)(a1 + 176 * v2 + 2448);
    if (*(_BYTE *)(a1 + 1841))
    {
      v3 = a1 + 176 * v2;
      ++*(_DWORD *)(v3 + 2452);
      v4 = (_DWORD *)(v3 + 2456);
    }
    else
    {
      v4 = (_DWORD *)(a1 + 176 * v2 + 2464);
    }
    ++*v4;
    if (*(_BYTE *)(a1 + 1843))
      ++*(_DWORD *)(a1 + 176 * v2 + 2472);
    if (*(_BYTE *)(a1 + 1844))
      ++*(_DWORD *)(a1 + 176 * v2 + 2480);
    if (*(_BYTE *)(a1 + 1845))
      ++*(_DWORD *)(a1 + 176 * v2 + 2484);
    if (*(_BYTE *)(a1 + 1846))
      ++*(_DWORD *)(a1 + 176 * v2 + 2476);
    if (*(_BYTE *)(a1 + 1847))
      ++*(_DWORD *)(a1 + 176 * v2 + 2488);
    if (*(_BYTE *)(a1 + 2721))
      ++*(_DWORD *)(a1 + 176 * v2 + 2508);
    if (*(_BYTE *)(a1 + 2722))
      ++*(_DWORD *)(a1 + 176 * v2 + 2520);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
  {
    sub_100716040();
  }
}

BOOL sub_10005DABC()
{
  return &_PLLogRegisteredEvent != 0;
}

uint64_t sub_10005DAD0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  char v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  NSObject *v12;
  _DWORD v14[2];

  v2 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 592))(v2))
  {
    v3 = *(_QWORD **)(a1 + 2040);
    if (v3 != (_QWORD *)(a1 + 2048))
    {
      v4 = 0;
      while (1)
      {
        if (sub_100038A28(v3[5]) && !sub_1000340C8(v3[5]))
        {
          v5 = v3[5];
          if (!*(_BYTE *)(*(_QWORD *)(v5 + 8) + 143) || !*(_BYTE *)(a1 + 1255))
            break;
        }
LABEL_16:
        v8 = (_QWORD *)v3[1];
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v3[2];
            v10 = *v9 == (_QWORD)v3;
            v3 = v9;
          }
          while (!v10);
        }
        v3 = v9;
        if (v9 == (_QWORD *)(a1 + 2048))
          goto LABEL_25;
      }
      v6 = *(unsigned __int8 *)(v5 + 81);
      if (v6 != 16 && v6 != 32)
      {
        if (!sub_10003F24C(v5))
        {
LABEL_14:
          if (*(_BYTE *)(*(_QWORD *)(v3[5] + 8) + 272))
            v4 = 1;
          goto LABEL_16;
        }
        v5 = v3[5];
      }
      v7 = (_QWORD *)sub_1000587C8(v5);
      if (v7[1] != *v7 && (sub_100038A04(v3[5]) & 1) != 0)
        goto LABEL_24;
      goto LABEL_14;
    }
LABEL_24:
    v4 = 0;
LABEL_25:
    v11 = v4 & 1;
  }
  else
  {
    v11 = 0;
  }
  v12 = qword_100999828;
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEFAULT))
  {
    v14[0] = 67109120;
    v14[1] = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "overrideEnableGlobalDupFilter:%d", (uint8_t *)v14, 8u);
  }
  return v11;
}

uint64_t sub_10005DC70(_QWORD *a1, int64_t a2, void *a3)
{
  id v5;
  int v6;
  uint64_t v7;
  BTQueuedMessage *v8;
  BTQueuedMessage *v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  id v16;
  __int16 v17;
  uint64_t v18;

  v5 = a3;
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v7 = a1[15];
  if (v6 == 3)
  {
    if (v7)
    {
      if (!sub_10005DEDC((uint64_t)a1))
      {
        sub_10005DF3C(v7, a2, v5);
        goto LABEL_17;
      }
LABEL_7:
      v8 = -[BTQueuedMessage initWithMsg:arguments:]([BTQueuedMessage alloc], "initWithMsg:arguments:", a2, v5);
      sub_1003FC964((uint64_t)a1, v8);
      sub_1000690EC(a1);

LABEL_17:
      v13 = 1;
      goto LABEL_18;
    }
  }
  else if (v7)
  {
    if (!sub_10005DEDC((uint64_t)a1))
    {
      sub_10005DF3C(v7 - 144, a2, v5);
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  v9 = -[BTQueuedMessage initWithMsg:arguments:]([BTQueuedMessage alloc], "initWithMsg:arguments:", a2, v5);
  sub_1003FC964((uint64_t)a1, v9);
  v10 = sub_10005DEDC((uint64_t)a1);
  if (v10)
  {
    v11 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v12 = a1[11];
      v15 = 134218242;
      v16 = v10;
      v17 = 2114;
      v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "(CBSR) Queued message available: %lu. Try and ressurrectApp: %{public}@", (uint8_t *)&v15, 0x16u);
    }
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10092DE88);
    sub_1002EF308((uint64_t)off_100978168, (void *)a1[11]);
  }

  v13 = 0;
LABEL_18:

  return v13;
}

void sub_10005DE90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_10005DEDC(uint64_t a1)
{
  id v2;
  id v3;

  v2 = *(id *)(a1 + 112);
  objc_sync_enter(v2);
  v3 = objc_msgSend(*(id *)(a1 + 112), "count");
  objc_sync_exit(v2);

  return v3;
}

void sub_10005DF24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_10005DF3C(uint64_t a1, int64_t a2, void *a3)
{
  xpc_object_t v5;
  id v6;

  v6 = a3;
  v5 = sub_10005DF9C(v6);
  sub_10005E138(a1, a2, v5, 1);

}

void sub_10005DF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

xpc_object_t sub_10005DF9C(void *a1)
{
  id v1;
  size_t v2;
  char *v3;
  xpc_object_t *v4;
  xpc_object_t i;
  _QWORD v7[7];
  _QWORD v8[4];

  v1 = a1;
  v2 = (size_t)objc_msgSend(v1, "count");
  __chkstk_darwin();
  v3 = (char *)v7 - ((8 * v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v3, 8 * v2);
  __chkstk_darwin();
  v4 = (xpc_object_t *)v3;
  bzero(v3, 8 * v2);
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2020000000;
  v8[3] = 0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10005ADE0;
  v7[3] = &unk_1009324F8;
  v7[4] = v8;
  v7[5] = v3;
  v7[6] = v3;
  objc_msgSend(v1, "enumerateKeysAndObjectsUsingBlock:", v7);
  for (i = xpc_dictionary_create((const char *const *)v3, (xpc_object_t *)v3, v2); v2; --v2)
    xpc_release(*v4++);
  _Block_object_dispose(v8, 8);

  return i;
}

void sub_10005E104(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 88), 8);

  _Unwind_Resume(a1);
}

void sub_10005E138(uint64_t a1, int64_t value, void *a3, int a4)
{
  int v6;
  NSObject *v8;
  size_t v9;
  xpc_object_t v10;
  _xpc_connection_s *v11;
  NSObject *v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  xpc_object_t values[2];
  char *keys[2];

  v6 = value;
  *(_OWORD *)keys = *(_OWORD *)off_1009324B8;
  values[0] = xpc_int64_create(value);
  values[1] = a3;
  if (((v6 - 56) > 0x1C || ((1 << (v6 - 56)) & 0x10000081) == 0) && v6 != 196)
  {
    v8 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
      sub_1006F8848((char *)a1, v6, v8);
  }
  if (a3)
    v9 = 2;
  else
    v9 = 1;
  v10 = xpc_dictionary_create((const char *const *)keys, values, v9);
  sub_1004B11DC((char *)a1, v10);
  v11 = *(_xpc_connection_s **)(a1 + 16);
  if (v11)
  {
    xpc_connection_send_message(v11, v10);
  }
  else
  {
    v12 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v13 = (_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        v13 = (_QWORD *)*v13;
      v14 = 136446210;
      v15 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Invalid Connection on session \"%{public}s\", ignored.", (uint8_t *)&v14, 0xCu);
    }
  }
  xpc_release(v10);
  xpc_release(values[0]);
  if (a3)
  {
    if (a4)
      xpc_release(a3);
  }
}

void sub_10005E5FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10005E8A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_10005E8FC(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  char v9;
  uint64_t v10;
  void *i;
  void *v12;
  id v13;
  _DWORD *v14;
  unsigned int v15;
  unsigned int v16;
  id v17;
  void *v18;
  void *v19;
  id result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
  if (!v2)
  {
    v3 = objc_alloc_init((Class)NSMutableDictionary);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 56);
    *(_QWORD *)(v4 + 56) = v3;

    v2 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", *(_QWORD *)(a1 + 40)));

  if (!v6)
  {
    v17 = objc_alloc_init((Class)NSMutableArray);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "setObject:forKeyedSubscript:", v17, *(_QWORD *)(a1 + 40));

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    objc_msgSend(v18, "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));

    goto LABEL_25;
  }
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (!v8)
  {

LABEL_24:
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    objc_msgSend(v19, "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));

    goto LABEL_25;
  }
  v9 = 0;
  v10 = *(_QWORD *)v22;
  do
  {
    for (i = 0; i != v8; i = (char *)i + 1)
    {
      if (*(_QWORD *)v22 != v10)
        objc_enumerationMutation(v7);
      v12 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
      v13 = objc_msgSend(v12, "discoveryFlags");
      if (v13 == objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "discoveryFlags"))
      {
        v14 = objc_msgSend(v12, "discoveryTypesPtr");
        if (*v14 == *(_DWORD *)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "discoveryTypesPtr"))
        {
          v15 = objc_msgSend(v12, "scanRateScreenOn");
          if (v15 == objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "scanRateScreenOn"))
          {
            v16 = objc_msgSend(v12, "scanRateScreenOff");
            if (v16 == objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "scanRateScreenOff"))
            {
              if (objc_msgSend(*(id *)(a1 + 48), "isEqual:", CFSTR("agsN")))
              {
                objc_msgSend(v12, "setScanScreenOnCount:", (char *)objc_msgSend(v12, "scanScreenOnCount") + 1);
              }
              else if (objc_msgSend(*(id *)(a1 + 48), "isEqual:", CFSTR("agsF")))
              {
                objc_msgSend(v12, "setScanScreenOffCount:", (char *)objc_msgSend(v12, "scanScreenOffCount") + 1);
              }
              objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v12);
              v9 = 1;
            }
          }
        }
      }
    }
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  }
  while (v8);

  if ((v9 & 1) == 0)
    goto LABEL_24;
LABEL_25:
  result = objc_msgSend(*(id *)(a1 + 32), "_setupAggressiveScanMetricExportTimer");
  if (dword_100977C38 <= 20)
  {
    if (dword_100977C38 != -1)
      return (id)LogPrintF_safe(&dword_100977C38, "-[CBMetricsDaemon reportAggressiveScan:action:]_block_invoke", 20, "Aggressive Scan Metrics Event reported: appID %@, action %@, screenOnCount %llu, screenOffCount %llu, client %@", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "scanScreenOnCount"), objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "scanScreenOffCount"), *(_QWORD *)(a1 + 56));
    result = (id)_LogCategory_Initialize(&dword_100977C38, 20);
    if ((_DWORD)result)
      return (id)LogPrintF_safe(&dword_100977C38, "-[CBMetricsDaemon reportAggressiveScan:action:]_block_invoke", 20, "Aggressive Scan Metrics Event reported: appID %@, action %@, screenOnCount %llu, screenOffCount %llu, client %@", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "scanScreenOnCount"), objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "scanScreenOffCount"), *(_QWORD *)(a1 + 56));
  }
  return result;
}

void sub_10005EC6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10005F50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  void *v28;
  void *v29;
  void *v30;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10005F5E4(uint64_t a1, __int16 a2)
{
  __int16 v4;
  __int128 v5;
  int v6;

  v4 = a2;
  sub_10005F660((int8x16_t *)&v4, 2, 1, (uint64_t)&v5);
  *(_OWORD *)a1 = v5;
  *(_DWORD *)(a1 + 16) = v6;
  return a1;
}

void sub_10005F660(int8x16_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v6;
  int8x16_t v7;
  int8x16_t v8;
  unsigned int v9;
  NSObject *v10;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  *(_BYTE *)a4 = a2;
  switch(a2)
  {
    case 16:
      if (a3 == 1)
      {
        v7 = vrev64q_s8(*a1);
        v8 = vextq_s8(v7, v7, 8uLL);
      }
      else
      {
        v8 = *a1;
      }
      *(int8x16_t *)(a4 + 4) = v8;
      break;
    case 4:
      if (a3 == 1)
        v9 = a1->i32[0];
      else
        v9 = bswap32(a1->i32[0]);
      *(_DWORD *)(a4 + 4) = v9;
      break;
    case 2:
      if (a3 == 1)
        LOWORD(v6) = a1->i16[0];
      else
        v6 = bswap32(a1->u16[0]) >> 16;
      *(_WORD *)(a4 + 4) = v6;
      break;
    default:
      if (sub_10005549C())
      {
        sub_100054530("Invalid UUID length of %d when converting to LE_UUID", a2);
        v10 = sub_1000544A0(0x42u);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      *(_BYTE *)a4 = 16;
      break;
  }
}

uint64_t sub_10005F764(uint64_t a1)
{
  uint64_t result;

  result = sub_10005F7EC();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2472))(a1);
  return result;
}

unint64_t sub_10005F7A0(uint64_t a1)
{
  int v2;

  if ((*(_DWORD *)(a1 + 712) - 19) < 0x7BD)
    return 1;
  v2 = sub_10005F864();
  if ((v2 - 154) <= 0x3C)
    return (0x1E7FE1E1E0000003uLL >> (v2 + 102)) & 1;
  else
    return 0;
}

uint64_t sub_10005F7EC()
{
  uint64_t v0;
  unsigned int v1;

  v0 = 1;
  v1 = sub_10005F864();
  switch(v1)
  {
    case 0x90u:
    case 0x9Au:
    case 0x9Bu:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
      return v0;
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xD1u:
      goto LABEL_5;
    default:
      if (v1 > 0x32 || ((1 << v1) & 0x7FFDFE0700000) == 0)
LABEL_5:
        v0 = 0;
      break;
  }
  return v0;
}

uint64_t sub_10005F864()
{
  int v0;
  __int128 v2;
  int v3;

  v2 = xmmword_100740158;
  v3 = -1403227947;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 0;
LABEL_235:
    dword_10097B050 = v0;
    return dword_10097B050;
  }
  v3 = -489993439;
  v2 = xmmword_10074016C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 2;
    goto LABEL_235;
  }
  v3 = 729118884;
  v2 = xmmword_100740180;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 1;
    goto LABEL_235;
  }
  v3 = 886875686;
  v2 = xmmword_100740194;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 3;
    goto LABEL_235;
  }
  v3 = 1046806126;
  v2 = xmmword_1007401A8;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 4;
    goto LABEL_235;
  }
  v3 = -188760945;
  v2 = xmmword_1007401BC;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 5;
    goto LABEL_235;
  }
  v3 = -350584140;
  v2 = xmmword_1007401D0;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 6;
    goto LABEL_235;
  }
  v3 = -1418383976;
  v2 = xmmword_1007401E4;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 8;
    goto LABEL_235;
  }
  v3 = 368778837;
  v2 = xmmword_1007401F8;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 7;
    goto LABEL_235;
  }
  v3 = -1213485500;
  v2 = xmmword_10074020C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 9;
    goto LABEL_235;
  }
  v3 = 414393924;
  v2 = xmmword_100740220;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 10;
    goto LABEL_235;
  }
  v3 = 897736383;
  v2 = xmmword_100740234;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 11;
    goto LABEL_235;
  }
  v3 = -996295886;
  v2 = xmmword_100740248;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 12;
    goto LABEL_235;
  }
  v3 = -453987047;
  v2 = xmmword_10074025C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 13;
    goto LABEL_235;
  }
  v3 = -337121064;
  v2 = xmmword_100740270;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 14;
    goto LABEL_235;
  }
  v3 = 450980336;
  v2 = xmmword_100740284;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 15;
    goto LABEL_235;
  }
  v3 = -232427879;
  v2 = xmmword_100740298;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 16;
    goto LABEL_235;
  }
  v3 = -427474227;
  v2 = xmmword_1007402AC;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 17;
    goto LABEL_235;
  }
  v3 = 1477534141;
  v2 = xmmword_1007402C0;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 18;
    goto LABEL_235;
  }
  v3 = -1843102369;
  v2 = xmmword_1007402D4;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 19;
    goto LABEL_235;
  }
  v3 = -121925081;
  v2 = xmmword_1007402E8;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 28;
    goto LABEL_235;
  }
  v3 = -61007701;
  v2 = xmmword_1007402FC;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 21;
    goto LABEL_235;
  }
  v3 = -235416490;
  v2 = xmmword_100740310;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 22;
    goto LABEL_235;
  }
  v3 = -820493242;
  v2 = xmmword_100740324;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 20;
    goto LABEL_235;
  }
  v3 = 1071957977;
  v2 = xmmword_100740338;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 29;
    goto LABEL_235;
  }
  v3 = 438437663;
  v2 = xmmword_10074034C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 30;
    goto LABEL_235;
  }
  v3 = -382792827;
  v2 = xmmword_100740360;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 31;
    goto LABEL_235;
  }
  v3 = 1575123478;
  v2 = xmmword_100740374;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 32;
    goto LABEL_235;
  }
  v3 = 123138233;
  v2 = xmmword_100740388;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 33;
    goto LABEL_235;
  }
  v3 = 681511593;
  v2 = xmmword_10074039C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 34;
    goto LABEL_235;
  }
  v3 = 713503427;
  v2 = xmmword_1007403B0;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 35;
    goto LABEL_235;
  }
  v3 = -1632750650;
  v2 = xmmword_1007403C4;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 36;
    goto LABEL_235;
  }
  v3 = -1431778695;
  v2 = xmmword_1007403D8;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 37;
    goto LABEL_235;
  }
  v3 = 533419158;
  v2 = xmmword_1007403EC;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 38;
    goto LABEL_235;
  }
  v3 = 1106979518;
  v2 = xmmword_100740400;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 39;
    goto LABEL_235;
  }
  v3 = -1820426635;
  v2 = xmmword_100740414;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 40;
    goto LABEL_235;
  }
  v3 = -937652876;
  v2 = xmmword_100740428;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 41;
    goto LABEL_235;
  }
  v3 = -609570151;
  v2 = xmmword_10074043C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 42;
    goto LABEL_235;
  }
  v3 = -874769875;
  v2 = xmmword_100740450;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 43;
    goto LABEL_235;
  }
  v3 = 1874287171;
  v2 = xmmword_100740464;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 44;
    goto LABEL_235;
  }
  v3 = -781324731;
  v2 = xmmword_100740478;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 45;
    goto LABEL_235;
  }
  v3 = 1223847566;
  v2 = xmmword_10074048C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 46;
    goto LABEL_235;
  }
  v3 = 185580364;
  v2 = xmmword_1007404A0;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 47;
    goto LABEL_235;
  }
  v3 = 1214880059;
  v2 = xmmword_1007404B4;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 48;
    goto LABEL_235;
  }
  v3 = 426359977;
  v2 = xmmword_1007404C8;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 49;
    goto LABEL_235;
  }
  v3 = -1022451852;
  v2 = xmmword_1007404DC;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 57;
    goto LABEL_235;
  }
  v3 = 1729782187;
  v2 = xmmword_1007404F0;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 58;
    goto LABEL_235;
  }
  v3 = 996646949;
  v2 = xmmword_100740504;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 61;
    goto LABEL_235;
  }
  v3 = -563086000;
  v2 = xmmword_100740518;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 62;
    goto LABEL_235;
  }
  v3 = -199226823;
  v2 = xmmword_10074052C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 75;
    goto LABEL_235;
  }
  v3 = -1283070668;
  v2 = xmmword_100740540;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 76;
    goto LABEL_235;
  }
  v3 = 1412427398;
  v2 = xmmword_100740554;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 77;
    goto LABEL_235;
  }
  v3 = 160260070;
  v2 = xmmword_100740568;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 78;
    goto LABEL_235;
  }
  v3 = 317289457;
  v2 = xmmword_10074057C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 79;
    goto LABEL_235;
  }
  v3 = 401945557;
  v2 = xmmword_100740590;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 80;
    goto LABEL_235;
  }
  v3 = -1157300313;
  v2 = xmmword_1007405A4;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 81;
    goto LABEL_235;
  }
  v3 = -2132668294;
  v2 = xmmword_1007405B8;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 82;
    goto LABEL_235;
  }
  v3 = 372777383;
  v2 = xmmword_1007405CC;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 103;
    goto LABEL_235;
  }
  v3 = -858079590;
  v2 = xmmword_1007405E0;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 104;
    goto LABEL_235;
  }
  v3 = -212523443;
  v2 = xmmword_1007405F4;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 109;
    goto LABEL_235;
  }
  v3 = 646100384;
  v2 = xmmword_100740608;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 110;
    goto LABEL_235;
  }
  v3 = -1527788847;
  v2 = xmmword_10074061C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 59;
    goto LABEL_235;
  }
  v3 = 1532898719;
  v2 = xmmword_100740630;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 60;
    goto LABEL_235;
  }
  v3 = 1275676051;
  v2 = xmmword_100740644;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 55;
    goto LABEL_235;
  }
  v3 = 1908474541;
  v2 = xmmword_100740658;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 56;
    goto LABEL_235;
  }
  v3 = 1032708406;
  v2 = xmmword_10074066C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 53;
    goto LABEL_235;
  }
  v3 = 729903963;
  v2 = xmmword_100740680;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 54;
    goto LABEL_235;
  }
  v3 = -1639077591;
  v2 = xmmword_100740694;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 51;
    goto LABEL_235;
  }
  v3 = 338555555;
  v2 = xmmword_1007406A8;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 52;
    goto LABEL_235;
  }
  v3 = 1126727276;
  v2 = xmmword_1007406BC;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 89;
    goto LABEL_235;
  }
  v3 = 300130091;
  v2 = xmmword_1007406D0;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 90;
    goto LABEL_235;
  }
  v3 = 343814884;
  v2 = xmmword_1007406E4;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 91;
    goto LABEL_235;
  }
  v3 = -1675932945;
  v2 = xmmword_1007406F8;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 92;
    goto LABEL_235;
  }
  v3 = 345196535;
  v2 = xmmword_10074070C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 93;
    goto LABEL_235;
  }
  v3 = 440949464;
  v2 = xmmword_100740720;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 94;
    goto LABEL_235;
  }
  v3 = -695298128;
  v2 = xmmword_100740734;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 95;
    goto LABEL_235;
  }
  v3 = 1614584579;
  v2 = xmmword_100740748;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 97;
    goto LABEL_235;
  }
  v3 = 460218192;
  v2 = xmmword_10074075C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 99;
    goto LABEL_235;
  }
  v3 = 127894440;
  v2 = xmmword_100740770;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 101;
    goto LABEL_235;
  }
  v3 = 804488105;
  v2 = xmmword_100740784;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 96;
    goto LABEL_235;
  }
  v3 = 324288768;
  v2 = xmmword_100740798;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 98;
    goto LABEL_235;
  }
  v3 = 2144905009;
  v2 = xmmword_1007407AC;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 100;
    goto LABEL_235;
  }
  v3 = 1070997468;
  v2 = xmmword_1007407C0;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 102;
    goto LABEL_235;
  }
  v3 = 1737149739;
  v2 = xmmword_1007407D4;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 26;
    goto LABEL_235;
  }
  v3 = -1918230744;
  v2 = xmmword_1007407E8;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 27;
    goto LABEL_235;
  }
  v3 = -2114570942;
  v2 = xmmword_1007407FC;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 134;
    goto LABEL_235;
  }
  v3 = -2098731532;
  v2 = xmmword_100740810;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 143;
    goto LABEL_235;
  }
  v3 = -340360463;
  v2 = xmmword_100740824;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 116;
    goto LABEL_235;
  }
  v3 = 1605231531;
  v2 = xmmword_100740838;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 117;
    goto LABEL_235;
  }
  v3 = 1878025452;
  v2 = xmmword_10074084C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 112;
    goto LABEL_235;
  }
  v3 = 1725957070;
  v2 = xmmword_100740860;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 113;
    goto LABEL_235;
  }
  v3 = 538967431;
  v2 = xmmword_100740874;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 114;
    goto LABEL_235;
  }
  v3 = 2060712151;
  v2 = xmmword_100740888;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 115;
    goto LABEL_235;
  }
  v3 = 802516499;
  v2 = xmmword_10074089C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 125;
    goto LABEL_235;
  }
  v3 = -1919324456;
  v2 = xmmword_1007408B0;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 126;
    goto LABEL_235;
  }
  v3 = 1127969586;
  v2 = xmmword_1007408C4;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 127;
    goto LABEL_235;
  }
  v3 = 1292009573;
  v2 = xmmword_1007408D8;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 128;
    goto LABEL_235;
  }
  v3 = 2030516999;
  v2 = xmmword_1007408EC;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 67;
    goto LABEL_235;
  }
  v3 = -762483149;
  v2 = xmmword_100740900;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 69;
    goto LABEL_235;
  }
  v3 = -1902732724;
  v2 = xmmword_100740914;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 71;
    goto LABEL_235;
  }
  v3 = 300442574;
  v2 = xmmword_100740928;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 73;
    goto LABEL_235;
  }
  v3 = -1276010597;
  v2 = xmmword_10074093C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 68;
    goto LABEL_235;
  }
  v3 = -1926937532;
  v2 = xmmword_100740950;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 70;
    goto LABEL_235;
  }
  v3 = -342357580;
  v2 = xmmword_100740964;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 72;
    goto LABEL_235;
  }
  v3 = -1294188889;
  v2 = xmmword_100740978;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 74;
    goto LABEL_235;
  }
  v3 = 1278131292;
  v2 = xmmword_10074098C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 83;
    goto LABEL_235;
  }
  v3 = -1841712216;
  v2 = xmmword_1007409A0;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 84;
    goto LABEL_235;
  }
  v3 = 659506830;
  v2 = xmmword_1007409B4;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 85;
    goto LABEL_235;
  }
  v3 = 213746202;
  v2 = xmmword_1007409C8;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 86;
    goto LABEL_235;
  }
  v3 = 688565114;
  v2 = xmmword_1007409DC;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 105;
    goto LABEL_235;
  }
  v3 = -493418906;
  v2 = xmmword_1007409F0;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 106;
    goto LABEL_235;
  }
  v3 = -545612308;
  v2 = xmmword_100740A04;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 107;
    goto LABEL_235;
  }
  v3 = 1178062702;
  v2 = xmmword_100740A18;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 108;
    goto LABEL_235;
  }
  v3 = 958549802;
  v2 = xmmword_100740A2C;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 119;
    goto LABEL_235;
  }
  v3 = -12497897;
  v2 = xmmword_100740A40;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 120;
    goto LABEL_235;
  }
  v3 = 1377540371;
  v2 = xmmword_100740A54;
  if ((MGIsDeviceOfType(&v2) & 1) != 0)
  {
    v0 = 121;
    goto LABEL_235;
  }
  v3 = -518121279;
  v2 = xmmword_100740A68;
  if (MGIsDeviceOfType(&v2))
  {
    v0 = 122;
    goto LABEL_235;
  }
  return dword_10097B050;
}

uint64_t sub_100060EA8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v10;

  v2 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;

  v3 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;

  v10 = (void **)(a1 + 440);
  sub_100091BF8(&v10);
  v4 = *(void **)(a1 + 416);
  if (v4)
  {
    *(_QWORD *)(a1 + 424) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 392);
  if (v5)
  {
    *(_QWORD *)(a1 + 400) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 352);
  if (v6)
  {
    *(_QWORD *)(a1 + 360) = v6;
    operator delete(v6);
  }
  v10 = (void **)(a1 + 328);
  sub_1000B5524(&v10);

  v10 = (void **)(a1 + 96);
  sub_1000B55B4(&v10);

  v10 = (void **)(a1 + 64);
  sub_1000B6134(&v10);

  v7 = *(void **)(a1 + 32);
  if (v7)
  {
    *(_QWORD *)(a1 + 40) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 8);
  if (v8)
  {
    *(_QWORD *)(a1 + 16) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_100060FA0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_WORD *)(a1 + 124) = 0;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 119) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 139) = 1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  *(_WORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_WORD *)(a1 + 197) = 257;
  *(_DWORD *)(a1 + 199) = 0;
  *(_BYTE *)(a1 + 203) = 8;
  *(_WORD *)(a1 + 280) = 256;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_WORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 282) = 0;
  *(_BYTE *)(a1 + 286) = 1;
  *(_DWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 287) = 0;
  *(_WORD *)(a1 + 291) = 0;
  *(_QWORD *)(a1 + 309) = 0;
  *(_QWORD *)(a1 + 294) = 0;
  *(_QWORD *)(a1 + 302) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_BYTE *)(a1 + 376) = 1;
  *(_DWORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_QWORD *)(a1 + 456) = 0;
  v2 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v3 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v2;

  *(_BYTE *)(a1 + 4) = 0;
  v4 = objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
  v5 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v4;

  return a1;
}

void sub_1000610F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void **v13;
  void **v14;
  void **v15;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v15 = v11;
  a10 = v15;
  sub_100091BF8(&a10);
  v17 = *(void **)(v10 + 416);
  if (v17)
  {
    *(_QWORD *)(v10 + 424) = v17;
    operator delete(v17);
  }
  v18 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v10 + 400) = v18;
    operator delete(v18);
  }
  sub_1000B54DC(v12);

  sub_1000B55B4(&a10);
  sub_1000B6134(&a10);

  v19 = *(void **)(v10 + 32);
  if (v19)
  {
    *(_QWORD *)(v10 + 40) = v19;
    operator delete(v19);
  }
  v20 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v10 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_100061BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;

  _Unwind_Resume(a1);
}

void sub_100061DF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100062040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100062214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_100062254(uint64_t a1, void *a2)
{
  sub_100024068(*(_QWORD *)(a1 + 32), a2);
}

void sub_10006225C(uint64_t a1)
{
  unsigned int *v1;

  *(_QWORD *)(a1 + 40) = &off_100918298;
  v1 = *(unsigned int **)(a1 + 48);
  if (v1)
    sub_100056AAC(v1);
}

void sub_100062278(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = &off_100918298;
  *(_QWORD *)(a1 + 48) = v3;
  if (v3)
    sub_10003C37C(v3);
}

void sub_100062298(id a1)
{
  mach_timebase_info((mach_timebase_info_t)&dword_1009940F8);
}

id sub_1000622A4(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "hasPrefix:", a2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_1000622E8(uint64_t a1)
{

}

void sub_1000622F0(uint64_t a1)
{

}

void sub_1000622F8(uint64_t a1)
{

}

void sub_100062300(uint64_t a1)
{

}

void sub_100062308(uint64_t a1)
{

}

void sub_100062310(uint64_t a1)
{

}

void sub_100062318(uint64_t a1)
{

}

void sub_100062320(uint64_t a1)
{

}

void sub_100062328(uint64_t a1)
{

}

void sub_100062330(uint64_t a1)
{

}

void sub_100062338(uint64_t a1)
{

}

void sub_100062340(uint64_t a1)
{

}

void sub_100062348(uint64_t a1)
{

}

void sub_100062350(uint64_t a1)
{

}

void sub_100062358(uint64_t a1)
{

}

void sub_100062360(uint64_t a1)
{

}

void sub_100062370(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  sub_100091BF8(&v1);
}

void sub_100062398(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  sub_100349FC0(&v1);
}

void sub_1000623C0(uint64_t a1)
{
  sub_10035940C((void **)(a1 + 48));
}

void sub_1000623CC(uint64_t a1)
{

}

void sub_1000623D8(uint64_t a1)
{

}

void sub_1000623E0(uint64_t a1)
{

}

void sub_1000623E8(uint64_t a1)
{

}

void sub_1000623F4(uint64_t a1)
{

}

void sub_1000623FC(uint64_t a1)
{

}

void sub_100062408(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_10006241C(uint64_t a1)
{
  sub_10001A82C(a1 + 48, *(_QWORD **)(a1 + 56));
}

void sub_100062430(uint64_t a1)
{
  sub_10066A2D8(a1 + 48, *(_QWORD **)(a1 + 56));
}

void sub_100062440(uint64_t a1)
{
  sub_10001A82C(a1 + 48, *(_QWORD **)(a1 + 56));
}

void sub_100062454(uint64_t a1)
{

}

uint64_t sub_10006245C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10006246C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10006247C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10006248C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10006249C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000624AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000624BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000624CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000624DC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000624EC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000624FC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10006250C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10006251C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10006252C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10006253C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10006254C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10006255C(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 51) = *(_DWORD *)(a2 + 51);
  *(_DWORD *)(result + 48) = v2;
  return result;
}

__n128 sub_100062570(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

__n128 sub_10006257C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

__n128 sub_1000625A0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t sub_1000625C4(uint64_t *a1, uint64_t a2)
{
  a1[6] = (uint64_t)(a1 + 6);
  a1[7] = (uint64_t)(a1 + 6);
  a1[8] = 0;
  return sub_100359B74((uint64_t)(a1 + 6), a1 + 6, (_QWORD *)(a2 + 48));
}

void sub_1000625F8(_Unwind_Exception *a1)
{
  void **v1;

  sub_10035940C(v1);
  _Unwind_Resume(a1);
}

__n128 sub_10006260C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_100062620(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100062630(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 51) = *(_DWORD *)(a2 + 51);
  *(_DWORD *)(result + 48) = v2;
  return result;
}

uint64_t sub_100062644(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100062654(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100062664(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

__n128 sub_100062674(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  v3 = *(_OWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  v6 = *(_OWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v7;
  result = *(__n128 *)(a2 + 208);
  v10 = *(_OWORD *)(a2 + 224);
  v11 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 255) = *(_OWORD *)(a2 + 255);
  *(_OWORD *)(a1 + 224) = v10;
  *(_OWORD *)(a1 + 240) = v11;
  *(__n128 *)(a1 + 208) = result;
  return result;
}

uint64_t sub_1000626B8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000626C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000626D8(uint64_t a1, uint64_t a2)
{
  uuid_copy((unsigned __int8 *)(a1 + 48), (const unsigned __int8 *)(a2 + 48));
}

__n128 sub_1000626E4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

_QWORD *sub_100062700(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

__n128 sub_10006273C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

_QWORD *sub_100062748(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

_QWORD *sub_100062784(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

__n128 sub_1000627C0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  result = *(__n128 *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 112) = v5;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_1000627E4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000627F4(uint64_t a1, int *a2)
{
  int v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  unsigned int *v111;
  unsigned int *v112;
  uint64_t v113;
  void *v114;
  void *v115;
  unsigned int *v116;
  unsigned int *v117;
  uint64_t v118;
  void *v119;
  void *v120;
  BOOL v121;
  void *v122;
  uint64_t v123;
  id v124;
  void *v125;
  unsigned __int8 *v126;
  uint64_t v127;
  unsigned __int16 v128;
  id v129;
  char **v130;
  id v131;
  _QWORD *v132;
  id v133;
  char *v134;
  char **v135;
  uint64_t v136;
  int *v137;
  uint64_t v138;
  _BYTE *v139;
  int v140;
  const char *v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double Current;
  double v148;
  void *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  void *v155;
  int v156;
  uint64_t v157;
  const __CFString *v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  double v167;
  uint64_t v168;
  id v169;
  void *v170;
  __CFString *v171;
  __CFString *v172;
  void *v173;
  uint64_t v174;
  void *v175;
  void *v176;
  _BOOL4 v177;
  void *v178;
  uint64_t v179;
  const __CFString *v180;
  void *v181;
  _QWORD *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  NSObject *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  void *v201;
  int v202;
  void *v203;
  unsigned __int16 v204;
  unsigned int v205;
  void *v206;
  void *v207;
  id v208;
  __CFString *v209;
  unsigned int v210;
  void *v211;
  __CFString *v212;
  int *v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  id v220;
  char **v221;
  char *v222[2];
  _BYTE __p[22];
  __int16 v224;
  double v225;
  _QWORD v226[18];
  _QWORD v227[6];
  uint64_t v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  void *v233;
  id v234;
  __CFString *v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  _QWORD v240[18];
  _QWORD v241[18];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[8];
  _QWORD v245[8];
  _QWORD v246[3];
  _QWORD v247[3];
  _QWORD v248[8];
  _QWORD v249[8];
  _QWORD v250[8];
  _QWORD v251[8];
  _QWORD v252[8];
  _QWORD v253[8];
  _QWORD v254[2];
  _QWORD v255[2];

  if ((sub_10006540C() & 1) != 0)
  {
    v3 = *a2;
    v214 = a2;
    switch(*a2)
    {
      case 13:
        v242[0] = CFSTR("AvgRSSI");
        v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[1]));
        v243[0] = v4;
        v242[1] = CFSTR("AvgPER");
        v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[2]));
        v243[1] = v5;
        v242[2] = CFSTR("RecentRSSI");
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[3]));
        v243[2] = v6;
        v242[3] = CFSTR("RecentPER");
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[4]));
        v243[3] = v7;
        v242[4] = CFSTR("PID");
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[5]));
        v243[4] = v8;
        v242[5] = CFSTR("VID");
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[6]));
        v243[5] = v9;
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v243, v242, 6));

        sub_100015CC8(a1, 0x5Fu, v10);
        goto LABEL_44;
      case 14:
        v254[0] = CFSTR("LastDisconnectedTime");
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 1)));
        v254[1] = CFSTR("Version");
        v255[0] = v23;
        v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)a2 + 4)));
        v255[1] = v24;
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v255, v254, 2));

        sub_100015CC8(a1, 0x69u, v25);
        goto LABEL_44;
      case 15:
        v250[0] = CFSTR("Version");
        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)a2 + 4)));
        v251[0] = v26;
        v250[1] = CFSTR("Reason");
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[2]));
        v251[1] = v27;
        v250[2] = CFSTR("StartTime");
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 2)));
        v251[2] = v28;
        v250[3] = CFSTR("StopTime");
        v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 3)));
        v251[3] = v29;
        v250[4] = CFSTR("Duration");
        v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 4)));
        v251[4] = v30;
        v250[5] = CFSTR("UpgradeCount");
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[10]));
        v251[5] = v31;
        v250[6] = CFSTR("UpgradeDuration");
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 6)));
        v251[6] = v32;
        v250[7] = CFSTR("TimeBetweenUpgrades");
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 7)));
        v251[7] = v33;
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v251, v250, 8));

        sub_100015CC8(a1, 0x6Au, v34);
        goto LABEL_44;
      case 16:
        v248[0] = CFSTR("Reason");
        v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 1)));
        v249[0] = v35;
        v248[1] = CFSTR("Tech");
        v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)a2 + 16)));
        v249[1] = v36;
        v248[2] = CFSTR("StartTime");
        v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 3)));
        v249[2] = v37;
        v248[3] = CFSTR("StopTime");
        v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 4)));
        v249[3] = v38;
        v248[4] = CFSTR("Duration");
        v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 5)));
        v249[4] = v39;
        v248[5] = CFSTR("AverageThroughput");
        v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[12]));
        v249[5] = v40;
        v248[6] = CFSTR("PayloadSize");
        v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 7)));
        v249[6] = v41;
        v248[7] = CFSTR("UpgradeTime");
        v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 8)));
        v249[7] = v42;
        v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v249, v248, 8));

        sub_100015CC8(a1, 0x6Bu, v43);
        goto LABEL_44;
      case 17:
        v246[0] = CFSTR("Module");
        v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[1]));
        v247[0] = v44;
        v246[1] = CFSTR("Line");
        v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[2]));
        v247[1] = v45;
        v246[2] = CFSTR("Error");
        v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[3]));
        v247[2] = v46;
        v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v247, v246, 3));

        sub_100015CC8(a1, 0x6Cu, v47);
        goto LABEL_44;
      case 18:
        v244[0] = CFSTR("Connected");
        v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a2 + 4)));
        v245[0] = v48;
        v244[1] = CFSTR("StartTime");
        v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 1)));
        v245[1] = v49;
        v244[2] = CFSTR("StopTime");
        v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 2)));
        v245[2] = v50;
        v244[3] = CFSTR("Duration");
        v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 3)));
        v245[3] = v51;
        v244[4] = CFSTR("UpgradeCount");
        v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[8]));
        v245[4] = v52;
        v244[5] = CFSTR("UpgradeDuration");
        v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 5)));
        v245[5] = v53;
        v244[6] = CFSTR("TimeBetweenUpgrades");
        v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((_QWORD *)a2 + 6)));
        v245[6] = v54;
        v244[7] = CFSTR("RSSI");
        v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *((_QWORD *)a2 + 7)));
        v245[7] = v55;
        v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v245, v244, 8));

        sub_100015CC8(a1, 0x6Du, v56);
        goto LABEL_44;
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
        goto LABEL_45;
      case 24:
        v57 = objc_alloc_init((Class)NSMutableDictionary);
        v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[1]));
        objc_msgSend(v57, "setObject:forKey:", v58, CFSTR("LEPhyType"));

        v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[5]));
        objc_msgSend(v57, "setObject:forKey:", v59, CFSTR("LeCoexDenials"));

        v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[4]));
        objc_msgSend(v57, "setObject:forKey:", v60, CFSTR("LeDurationInMs"));

        v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[2]));
        objc_msgSend(v57, "setObject:forKey:", v61, CFSTR("CumulativeLeTxBytes"));

        v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[3]));
        objc_msgSend(v57, "setObject:forKey:", v62, CFSTR("CumulativeLeRxBytes"));

        v63 = *((_QWORD *)a2 + 3);
        v216 = *((_QWORD *)a2 + 4);
        if (v63 != v216)
        {
          v64 = 0;
          v65 = 0;
          do
          {
            v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("LETxPerVsRssi_PER_%02lu"), v65));
            v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("LETxPerVsRssi_PER_%02lu"), v65));
            v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("LETxPerVsRssi_PER_%02lu"), v65));
            v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", **(unsigned int **)(v63 + 8 * v65)));
            objc_msgSend(v57, "setObject:forKey:", v66, v69);

            v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(v63 + 8 * v65) + 4)));
            objc_msgSend(v57, "setObject:forKey:", v67, v70);

            v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(v63 + 8 * v65) + 8)));
            objc_msgSend(v57, "setObject:forKey:", v68, v71);

            ++v65;
            v64 += 8;
          }
          while (v63 + v64 != v216);
        }
        v72 = *((_QWORD *)v214 + 6);
        v217 = *((_QWORD *)v214 + 7);
        if (v72 != v217)
        {
          v73 = 0;
          v74 = 0;
          do
          {
            v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("LERxPerVsRssi_PER_%02lu"), v74));
            v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("LERxPerVsRssi_PER_%02lu"), v74));
            v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("LERxPerVsRssi_PER_%02lu"), v74));
            v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", **(unsigned int **)(v72 + 8 * v74)));
            objc_msgSend(v57, "setObject:forKey:", v75, v78);

            v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(v72 + 8 * v74) + 4)));
            objc_msgSend(v57, "setObject:forKey:", v76, v79);

            v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(v72 + 8 * v74) + 8)));
            objc_msgSend(v57, "setObject:forKey:", v77, v80);

            ++v74;
            v73 += 8;
          }
          while (v72 + v73 != v217);
        }
        v81 = *((_QWORD *)v214 + 18);
        v218 = *((_QWORD *)v214 + 19);
        if (v81 != v218)
        {
          v82 = 0;
          v83 = 0;
          do
          {
            v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ClTxPerVsRssi_PER_%02lu"), v83));
            v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ClTxPerVsRssi_PER_%02lu"), v83));
            v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ClTxPerVsRssi_PER_%02lu"), v83));
            v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", **(unsigned int **)(v81 + 8 * v83)));
            objc_msgSend(v57, "setObject:forKey:", v84, v87);

            v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(v81 + 8 * v83) + 4)));
            objc_msgSend(v57, "setObject:forKey:", v85, v88);

            v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(v81 + 8 * v83) + 8)));
            objc_msgSend(v57, "setObject:forKey:", v86, v89);

            ++v83;
            v82 += 8;
          }
          while (v81 + v82 != v218);
        }
        v90 = *((_QWORD *)v214 + 21);
        v219 = *((_QWORD *)v214 + 22);
        if (v90 != v219)
        {
          v91 = 0;
          v92 = 0;
          do
          {
            v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ClRxPerVsRssi_PER_%02lu"), v92));
            v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ClRxPerVsRssi_PER_%02lu"), v92));
            v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("ClRxPerVsRssi_PER_%02lu"), v92));
            v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", **(unsigned int **)(v90 + 8 * v92)));
            objc_msgSend(v57, "setObject:forKey:", v93, v96);

            v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(v90 + 8 * v92) + 4)));
            objc_msgSend(v57, "setObject:forKey:", v94, v97);

            v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(v90 + 8 * v92) + 8)));
            objc_msgSend(v57, "setObject:forKey:", v95, v98);

            ++v92;
            v91 += 8;
          }
          while (v90 + v91 != v219);
        }
        v99 = *((_QWORD *)v214 + 9);
        v100 = *((_QWORD *)v214 + 10);
        if (v99 != v100)
        {
          v101 = 0;
          v102 = 0;
          do
          {
            v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("DisconnectDetailsLeCoexDenials_%02lu"), v102));
            v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v99 + 4 * v102)));
            objc_msgSend(v57, "setObject:forKey:", v103, v104);

            ++v102;
            v101 += 4;
          }
          while (v99 + v101 != v100);
        }
        v105 = *((_QWORD *)v214 + 12);
        v106 = *((_QWORD *)v214 + 13);
        if (v105 != v106)
        {
          v107 = 0;
          v108 = 0;
          do
          {
            v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("DisconnectDetailsLeRSSI_%02lu"), v108));
            v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v105 + 4 * v108)));
            objc_msgSend(v57, "setObject:forKey:", v109, v110);

            ++v108;
            v107 += 4;
          }
          while (v105 + v107 != v106);
        }
        v111 = (unsigned int *)*((_QWORD *)v214 + 24);
        v112 = (unsigned int *)*((_QWORD *)v214 + 25);
        if (v111 != v112)
        {
          v113 = 0;
          do
          {
            v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("DisconnectDetailsClCoexDenials_%02d"), v113));
            v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v111));
            objc_msgSend(v57, "setObject:forKey:", v114, v115);

            v113 = (v113 + 1);
            ++v111;
          }
          while (v111 != v112);
        }
        v116 = (unsigned int *)*((_QWORD *)v214 + 27);
        v117 = (unsigned int *)*((_QWORD *)v214 + 28);
        if (v116 != v117)
        {
          v118 = 0;
          do
          {
            v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("DisconnectDetailsClRssi_%02d"), v118));
            v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v116));
            objc_msgSend(v57, "setObject:forKey:", v119, v120);

            v118 = (v118 + 1);
            ++v116;
          }
          while (v116 != v117);
        }
        sub_100015CC8(a1, 0x6Eu, v57);

        goto LABEL_44;
      default:
        if (v3 != 4)
          goto LABEL_45;
        v252[0] = CFSTR("ActivityType");
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)a2 + 36)));
        v253[0] = v11;
        v252[1] = CFSTR("AllowDups");
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a2 + 34)));
        v253[1] = v12;
        v252[2] = CFSTR("AppExecutionState");
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)a2 + 32)));
        v253[2] = v13;
        v252[3] = CFSTR("BundleIdentifier");
        v14 = a2 + 2;
        if (*((char *)a2 + 31) < 0)
          v14 = (_QWORD *)*v14;
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
        v253[3] = v15;
        v252[4] = CFSTR("ExtensionPointTarget");
        v16 = a2 + 10;
        if (*((char *)a2 + 63) < 0)
          v16 = (_QWORD *)*v16;
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16));
        v253[4] = v17;
        v252[5] = CFSTR("IsGeneralDiscoveryScan");
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a2 + 33)));
        v253[5] = v18;
        v252[6] = CFSTR("ParentBundleIdentifier");
        v19 = a2 + 16;
        if (*((char *)a2 + 87) < 0)
          v19 = (_QWORD *)*v19;
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19));
        v253[6] = v20;
        v252[7] = CFSTR("SupportBackground");
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a2 + 35)));
        v253[7] = v21;
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v253, v252, 8));

        sub_100015CC8(a1, 0x66u, v22);
LABEL_44:
        a2 = v214;
        v3 = *v214;
LABEL_45:
        v121 = v3 == 8 || v3 == 6;
        if (!v121)
          return;
        v220 = *((id *)a2 + 5);
        if (qword_1009778A8 != -1)
          dispatch_once(&qword_1009778A8, &stru_10092A530);
        v122 = off_1009778A0;
        sub_100030BCC(__p, v220);
        v123 = sub_1006249C4((uint64_t)v122, __p);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092A570);
        v210 = sub_100661A98((uint64_t)off_1009778C0, v220);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092A570);
        v124 = sub_10065F76C((uint64_t)off_1009778C0, v220);
        v125 = (void *)objc_claimAutoreleasedReturnValue(v124);
        v208 = v125;
        if (v125 && (unint64_t)objc_msgSend(v125, "length") >= 5)
        {
          v126 = (unsigned __int8 *)objc_msgSend(objc_retainAutorelease(v208), "bytes");
          v127 = *v126;
          v128 = *(_WORD *)(v126 + 1);
          v205 = *(unsigned __int16 *)(v126 + 3);
        }
        else
        {
          v205 = 0;
          v128 = 0;
          v127 = 0;
        }
        v221 = 0;
        v222[0] = 0;
        v222[1] = 0;
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092A570);
        sub_100658D7C((uint64_t)off_1009778C0, v220, (uint64_t *)&v221);
        v204 = v128;
        v129 = objc_alloc_init((Class)NSMutableString);
        v130 = v221;
        if (v221 != v222)
        {
          do
          {
            if (objc_msgSend(v129, "length"))
              objc_msgSend(v129, "appendString:", CFSTR(","));
            v131 = objc_alloc((Class)NSString);
            v132 = v130 + 4;
            if (*((char *)v130 + 55) < 0)
              v132 = (_QWORD *)*v132;
            v133 = objc_msgSend(v131, "initWithUTF8String:", v132);
            objc_msgSend(v129, "appendString:", v133);

            v134 = v130[1];
            if (v134)
            {
              do
              {
                v135 = (char **)v134;
                v134 = *(char **)v134;
              }
              while (v134);
            }
            else
            {
              do
              {
                v135 = (char **)v130[2];
                v121 = *v135 == (char *)v130;
                v130 = v135;
              }
              while (!v121);
            }
            v130 = v135;
          }
          while (v135 != v222);
        }
        v136 = sub_100027F68();
        v137 = v214;
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136))
        {
          v209 = CFSTR("NA");
          goto LABEL_91;
        }
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092A570);
        sub_10000602C((uint64_t)off_1009778C0, v220, (uint64_t)__p);
        if (v224 >= 0)
          v138 = HIBYTE(v224);
        else
          v138 = *(_QWORD *)&__p[8];
        if (SHIBYTE(v224) < 0)
        {
          operator delete(*(void **)__p);
          if (v138)
          {
LABEL_81:
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10092A570);
            sub_10000602C((uint64_t)off_1009778C0, v220, (uint64_t)__p);
            if (v224 >= 0)
              v139 = __p;
            else
              v139 = *(_BYTE **)__p;
            v209 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v139));
            v137 = v214;
            if (SHIBYTE(v224) < 0)
              operator delete(*(void **)__p);
LABEL_91:
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10092A570);
            v140 = sub_1006589A8((uint64_t)off_1009778C0, v220);
            v202 = v140;
            if (v140 >= 0x20000)
            {
              if (v140 >= 327680)
              {
                if (v140 >= 589824)
                {
                  if (v140 <= 2147418111)
                  {
                    switch(v140)
                    {
                      case 589824:
                        v141 = "FindNearbyRemote";
                        break;
                      case 589825:
                        v141 = "FindNearbyPencil";
                        break;
                      case 655360:
                        v141 = "AccessDigitalHomeKey";
                        break;
                      default:
LABEL_206:
                        v141 = "?";
                        break;
                    }
                  }
                  else
                  {
                    switch(v140)
                    {
                      case 2147418112:
                        v141 = "InternalTestNoLockScan";
                        break;
                      case 2147418113:
                        v141 = "InternalTestNoScreenOffScan";
                        break;
                      case 2147418114:
                        v141 = "InternalTestScanWithNoDups";
                        break;
                      case 2147418115:
                        v141 = "InternalTestScanWithDups";
                        break;
                      case 2147418116:
                        v141 = "InternalTestScanFor20Seconds";
                        break;
                      case 2147418117:
                        v141 = "InternalTestActiveScan";
                        break;
                      case 2147418118:
                        v141 = "InternalTestUUIDScan";
                        break;
                      case 2147418119:
                        v141 = "InternalTestScanFor10ClockSeconds";
                        break;
                      case 2147418120:
                        v141 = "InternalTestScanBoost";
                        break;
                      default:
                        goto LABEL_206;
                    }
                  }
                }
                else if (v140 > 458752)
                {
                  switch(v140)
                  {
                    case 524288:
                      v141 = "ADPD";
                      break;
                    case 524289:
                      v141 = "ADPDBuffer";
                      break;
                    case 524290:
                      v141 = "MicroLocation";
                      break;
                    case 524291:
                      v141 = "MicroLocationLeech";
                      break;
                    default:
                      if (v140 == 458753)
                      {
                        v141 = "PrecisionFindingFindee";
                      }
                      else
                      {
                        if (v140 != 458754)
                          goto LABEL_206;
                        v141 = "PrecisionFindingFindeeHighPriority";
                      }
                      break;
                  }
                }
                else
                {
                  switch(v140)
                  {
                    case 393216:
                      v141 = "CaptiveNetworkJoin";
                      break;
                    case 393217:
                      v141 = "UseCaseSIMTransfer";
                      break;
                    case 393218:
                      v141 = "MacSetup";
                      break;
                    case 393219:
                      v141 = "AppleIDSignIn";
                      break;
                    case 393220:
                      v141 = "AppleIDSignInSettings";
                      break;
                    default:
                      if (v140 == 327680)
                      {
                        v141 = "RapportThirdParty";
                      }
                      else
                      {
                        if (v140 != 458752)
                          goto LABEL_206;
                        v141 = "PrecisionFindingFinder";
                      }
                      break;
                  }
                }
              }
              else
              {
                switch(v140)
                {
                  case 131072:
                    v141 = "SharingDefault";
                    break;
                  case 131073:
                    v141 = "SharingPhoneAutoUnlock";
                    break;
                  case 131074:
                    v141 = "SharingSiriWatchAuth";
                    break;
                  case 131075:
                    v141 = "SharingMacAutoUnlock";
                    break;
                  case 131076:
                    v141 = "SharingEDTScreenOn";
                    break;
                  case 131077:
                    v141 = "SharingEDTWiFiDisabled";
                    break;
                  case 131078:
                    v141 = "SharingEDTWombatEligibleAsDefaultCamera";
                    break;
                  case 131079:
                    v141 = "SharingEDTWombatCameraPicker";
                    break;
                  case 131080:
                    v141 = "SharingWombatBackground";
                    break;
                  case 131081:
                    v141 = "SharingUniversalControl";
                    break;
                  case 131082:
                    v141 = "SharingPeopleProximity";
                    break;
                  case 131083:
                    v141 = "SharingEDTEnsembleOpenDisplayPrefs";
                    break;
                  case 131084:
                    v141 = "SharingEDTNearbydMotionStopped";
                    break;
                  case 131085:
                    v141 = "SharingDoubleBoostGenericScan";
                    break;
                  case 131086:
                    v141 = "SharingEDTIncomingAdvertisement ";
                    break;
                  case 131087:
                    v141 = "SharingEDTWombatStreamStart";
                    break;
                  case 131088:
                    v141 = "SharingOYAutoUnlock";
                    break;
                  case 131089:
                    goto LABEL_206;
                  case 131090:
                    v141 = "SharingAirDrop";
                    break;
                  case 131091:
                    v141 = "SharingNearbyInvitationHost";
                    break;
                  case 131092:
                    v141 = "SharingNearbyInvitationParticipant";
                    break;
                  case 131093:
                    v141 = "SharingAirDropAskToAirDrop";
                    break;
                  case 131094:
                    v141 = "SharingAirDropTempIdentity";
                    break;
                  case 131095:
                    v141 = "SharingAirDropNeedsCLink";
                    break;
                  case 131096:
                    v141 = "SharingRemoteWidgetUpdate";
                    break;
                  case 131097:
                    v141 = "SharingCountryCodeUpdate";
                    break;
                  case 131098:
                    v141 = "SharingMacPhoneAutoUnlock";
                    break;
                  case 131099:
                    v141 = "SharingVisionProDiscovery";
                    break;
                  case 131100:
                    v141 = "SharingVisionProStateChange";
                    break;
                  case 131101:
                    v141 = "SharingContinuityScreen";
                    break;
                  case 131102:
                    v141 = "SharingEDTRemoteDisplay";
                    break;
                  default:
                    if (v140 == 196608)
                    {
                      v141 = "DigitalIDTSA";
                    }
                    else
                    {
                      if (v140 != 0x40000)
                        goto LABEL_206;
                      v141 = "DigitalCarKeyThirdParty";
                    }
                    break;
                }
              }
            }
            else
            {
              v141 = "Unspecified";
              switch(v140)
              {
                case 0:
                  break;
                case 1:
                  v141 = "HealthKit";
                  break;
                case 2:
                  v141 = "HomeKit";
                  break;
                case 3:
                  v141 = "FindMyObjectConnection";
                  break;
                case 4:
                  v141 = "FindMyObjectConnectionTransient";
                  break;
                case 5:
                  v141 = "MIDI";
                  break;
                case 6:
                  v141 = "Continuity";
                  break;
                case 7:
                  v141 = "InstantHotSpot";
                  break;
                case 8:
                  v141 = "NearBy";
                  break;
                case 9:
                  v141 = "Sharing";
                  break;
                case 10:
                  v141 = "HearingSupport";
                  break;
                case 11:
                  v141 = "Magnet";
                  break;
                case 12:
                  v141 = "HID";
                  break;
                case 13:
                  v141 = "LEA";
                  break;
                case 14:
                  v141 = "External";
                  break;
                case 15:
                  v141 = "ExternalMedical";
                  break;
                case 16:
                  v141 = "ExternalLock";
                  break;
                case 17:
                  v141 = "ExternalWatch";
                  break;
                case 18:
                  v141 = "SmartRouting";
                  break;
                case 19:
                  v141 = "DigitalID";
                  break;
                case 20:
                  v141 = "DigitalKey";
                  break;
                case 21:
                  v141 = "DigitalCarKey";
                  break;
                case 22:
                  v141 = "HeySiri";
                  break;
                case 23:
                  v141 = "ThirdPartyApp";
                  break;
                case 24:
                  v141 = "CNJ";
                  break;
                default:
                  switch(v140)
                  {
                    case 256:
                      v141 = "DevicePresenceDetection";
                      break;
                    case 257:
                      v141 = "AudioBox";
                      break;
                    case 258:
                      v141 = "SIMTransfer";
                      break;
                    case 259:
                      v141 = "ProximityScreenOnLeechScan";
                      break;
                    case 260:
                      v141 = "MacMigrate";
                      break;
                    case 263:
                      v141 = "HIDUARTService";
                      break;
                    case 264:
                      v141 = "AccessibilitySwitchControlPairing";
                      break;
                    case 265:
                      v141 = "BaseBandFastConnect";
                      break;
                    case 266:
                      v141 = "SafetyAlerts";
                      break;
                    case 267:
                      v141 = "LECarPlay";
                      break;
                    case 268:
                      v141 = "TCCBluetooth";
                      break;
                    case 269:
                      v141 = "AOPBufferLeech";
                      break;
                    default:
                      goto LABEL_206;
                  }
                  break;
              }
            }
            v212 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v141));
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10092A570);
            v142 = sub_100656DF8((uint64_t)off_1009778C0, v220);
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10092A570);
            v143 = sub_100656F10((uint64_t)off_1009778C0, v220);
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10092A570);
            v144 = sub_100656FA0((uint64_t)off_1009778C0, v220);
            if (v143 <= v142)
              v145 = 0.0;
            else
              v145 = v143 - v142;
            if (v144 <= v142)
              v146 = 0.0;
            else
              v146 = v144 - v142;
            Current = CFAbsoluteTimeGetCurrent();
            if (Current <= v144)
              v148 = 0.0;
            else
              v148 = Current - v144;
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_10092A530);
            v149 = off_1009778A0;
            sub_100030BCC(__p, v220);
            v150 = sub_100624B58((uint64_t)v149, __p);
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_10092A530);
            v151 = off_1009778A0;
            sub_100030BCC(__p, v220);
            v152 = sub_100624C04((uint64_t)v151, __p);
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_10092A530);
            v153 = off_1009778A0;
            sub_100030BCC(__p, v220);
            v154 = sub_100624A78((uint64_t)v153, __p);
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_10092A530);
            v155 = off_1009778A0;
            sub_100030BCC(__p, v220);
            v156 = sub_100069F78((uint64_t)v155, __p);
            if (*v137 == 8)
            {
              v240[0] = CFSTR("AppState");
              v203 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v137 + 32)));
              v241[0] = v203;
              v240[1] = CFSTR("ConnectionIntervalInSlots");
              v200 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v123));
              v241[1] = v200;
              v240[2] = CFSTR("ConnectionSetupDurationInSec");
              v198 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v146));
              v241[2] = v198;
              v240[3] = CFSTR("ConnectionDurationInSec");
              v157 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v148));
              v158 = &stru_100941758;
              if (v209)
                v158 = v209;
              v196 = (void *)v157;
              v241[3] = v157;
              v241[4] = v158;
              v240[4] = CFSTR("DeviceName");
              v240[5] = CFSTR("IsAppleDevice");
              v194 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v210));
              v241[5] = v194;
              v240[6] = CFSTR("IsCentral");
              v192 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v156 == 0));
              v241[6] = v192;
              v240[7] = CFSTR("MaxCE");
              v191 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v154));
              v241[7] = v191;
              v240[8] = CFSTR("PeripheralLatency");
              v190 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v150));
              v241[8] = v190;
              v240[9] = CFSTR("PID");
              v159 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v205));
              v241[9] = v159;
              v240[10] = CFSTR("Result");
              v160 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v137[12]));
              v241[10] = v160;
              v240[11] = CFSTR("SessionID");
              v161 = v137 + 2;
              if (*((char *)v137 + 31) < 0)
                v161 = (_QWORD *)*v161;
              v162 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v161));
              v241[11] = v162;
              v240[12] = CFSTR("SupervisionTimeout");
              v163 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v152));
              v241[12] = v163;
              v241[13] = v129;
              v240[13] = CFSTR("Tags");
              v240[14] = CFSTR("UseCase");
              v241[14] = v212;
              v240[15] = CFSTR("VID");
              v164 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v204));
              v241[15] = v164;
              v240[16] = CFSTR("VendorIDSource");
              v165 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v127));
              v241[16] = v165;
              v240[17] = CFSTR("ConnectionScanCompleteDurationInSec");
              v166 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v145));
              v241[17] = v166;
              v206 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v241, v240, 18));

              v167 = CFAbsoluteTimeGetCurrent();
              if (qword_1009778C8 != -1)
                dispatch_once(&qword_1009778C8, &stru_10092A570);
              v168 = sub_1000589DC((uint64_t)off_1009778C0, *((void **)v214 + 5), 0);
              v169 = sub_100649588(v168);
              v170 = (void *)objc_claimAutoreleasedReturnValue(v169);
              v171 = CFSTR("isAppleDevice");
              if (!v210)
                v171 = v212;
              v172 = v171;
              *(_QWORD *)__p = 0;
              *(_QWORD *)&__p[8] = 0;
              sub_10003415C((uint64_t)__p, a1 + 176);
              v173 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v167 - v142));
              v174 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObjects:](NSMutableArray, "arrayWithObjects:", v172, v173, 0));
              v175 = *(void **)(a1 + 328);
              *(_QWORD *)(a1 + 328) = v174;

              v176 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 312), "objectForKey:", v170));
              v177 = v176 == 0;

              if (v177)
                objc_msgSend(*(id *)(a1 + 312), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 328), v170);
              if (v210)
              {
                if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 512))(a1, *((_QWORD *)v214 + 5)))
                {
                  ++*(_WORD *)(a1 + 132);
                }
              }
              sub_100034264((uint64_t)__p);
              sub_100015CC8(a1, 0x62u, v206);
              sub_100034234((uint64_t)__p);

              v178 = v206;
            }
            else
            {
              v226[0] = CFSTR("AppState");
              v215 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v137 + 32)));
              v227[0] = v215;
              v226[1] = CFSTR("ConnectionIntervalInSlots");
              v201 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v123));
              v227[1] = v201;
              v226[2] = CFSTR("ConnectionSetupDurationInSec");
              v179 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v146));
              v180 = &stru_100941758;
              if (v209)
                v180 = v209;
              v199 = (void *)v179;
              v227[2] = v179;
              v227[3] = v180;
              v226[3] = CFSTR("DeviceName");
              v226[4] = CFSTR("IsAppleDevice");
              v211 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v210));
              v227[4] = v211;
              v226[5] = CFSTR("IsCentral");
              v197 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v156 == 0));
              v227[5] = v197;
              v226[6] = CFSTR("MaxCE");
              v228 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v154));
              v226[7] = CFSTR("PeripheralLatency");
              v195 = (void *)v228;
              v193 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v150));
              v229 = v193;
              v226[8] = CFSTR("PID");
              v207 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v205));
              v230 = v207;
              v226[9] = CFSTR("Result");
              v181 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v137[13]));
              v231 = v181;
              v226[10] = CFSTR("SessionID");
              v182 = v137 + 2;
              if (*((char *)v137 + 31) < 0)
                v182 = (_QWORD *)*v182;
              v183 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v182));
              v232 = v183;
              v226[11] = CFSTR("SupervisionTimeout");
              v184 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v152));
              v233 = v184;
              v234 = v129;
              v226[12] = CFSTR("Tags");
              v226[13] = CFSTR("UseCase");
              v235 = v212;
              v226[14] = CFSTR("VID");
              v185 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v204));
              v236 = v185;
              v226[15] = CFSTR("VendorIDSource");
              v186 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v127));
              v237 = v186;
              v226[16] = CFSTR("NumberOfPendingLEConnectionsForBundleID");
              v187 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v137[12]));
              v238 = v187;
              v226[17] = CFSTR("ConnectionScanCompleteDurationInSec");
              v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v145));
              v239 = v188;
              v178 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v227, v226, 18));

              if ((v202 & 0xFFFF0000) == 0x10000)
              {
                v189 = (id)qword_1009997E8;
                if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__p = 138412802;
                  *(_QWORD *)&__p[4] = v212;
                  *(_WORD *)&__p[12] = 2048;
                  *(double *)&__p[14] = v145;
                  v224 = 2048;
                  v225 = v146;
                  _os_log_impl((void *)&_mh_execute_header, v189, OS_LOG_TYPE_DEFAULT, "LE Connection Perf for %@ connection scan complete: %.3f (sec) connection set-up: %.3f (sec)", __p, 0x20u);
                }

              }
              sub_100015CC8(a1, 0x60u, v178);
            }

            sub_100056BAC((uint64_t)&v221, v222[0]);
            return;
          }
        }
        else if (v138)
        {
          goto LABEL_81;
        }
        v209 = CFSTR("NA");
        v137 = v214;
        goto LABEL_91;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006E2ED8();
}

void sub_100064DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_Unwind_Exception *exception_object,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;

  _Unwind_Resume(a1);
}

void sub_1000653D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29)
{
  void *v29;
  void *v30;

  sub_100056BAC(&a28, a29);
  JUMPOUT(0x1000653CCLL);
}

uint64_t sub_10006540C()
{
  if (qword_100993260 != -1)
    dispatch_once(&qword_100993260, &stru_100934410);
  return byte_100993268;
}

uint64_t sub_10006544C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_100065478();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a2);
}

uint64_t sub_100065478()
{
  if (qword_100991EC8 != -1)
    dispatch_once(&qword_100991EC8, &stru_100929578);
  return qword_100991EC0;
}

void sub_1000654B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  int v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int16 v25;
  char v26;
  unsigned __int8 v27[8];

  v8 = a1;
  v10 = (void (*)(uint64_t, uint64_t))qword_10098FA08;
  v9 = qword_10098FA10;
  *(_DWORD *)&v27[3] = 0;
  *(_DWORD *)v27 = 0;
  v26 = xmmword_10098FA18;
  v11 = WORD1(xmmword_10098FA18);
  v25 = WORD1(xmmword_10098FA18);
  v12 = WORD3(xmmword_10098FA18);
  v24 = WORD3(xmmword_10098FA18);
  if (!(_DWORD)a1)
  {
    if (!byte_10098FA44 || !byte_10098FA45)
    {
      sub_100065F98(0, a2, a3, a4, a5, a6, a7, a8);
      return;
    }
    sub_100073B84((uint64_t)v27);
    if (byte_10098FA46)
      v21 = 2;
    else
      v21 = 1;
    byte_10098FA28 = v21;
    if (byte_10098FA48)
    {
      if (WORD3(xmmword_10098FA18))
      {
        v22 = v27[0];
        v23 = BYTE13(xmmword_10098FA18);
        goto LABEL_20;
      }
      if (WORD4(xmmword_10098FA18) | WORD5(xmmword_10098FA18))
      {
        sub_1000656DC(0, v14, v15, v16, v17, v18, v19, v20);
        return;
      }
    }
    else if (v11 && v12)
    {
      v22 = v27[0];
      v23 = BYTE13(xmmword_10098FA18);
LABEL_20:
      v8 = sub_10000B608(v22, v23, 1, (uint64_t)&v26, (uint64_t)&v25, (uint64_t)&v24, v21, 2u);
      if (!(_DWORD)v8)
        return;
      goto LABEL_2;
    }
    sub_100065F98(0, v14, v15, v16, v17, v18, v19, v20);
    return;
  }
LABEL_2:
  if (sub_10005549C())
  {
    sub_100054530("Could not start LE scan (leScanParamsLPCoreCb): %!", v8);
    v13 = sub_1000544A0(0x42u);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  xmmword_10098FA18 = 0u;
  *(_OWORD *)&byte_10098FA28 = 0u;
  *(_OWORD *)&qword_10098F9F8 = 0u;
  *(_OWORD *)&qword_10098FA08 = 0u;
  byte_10098FA42 = 0;
  if (v10)
    v10(v8, v9);
  else
    sub_100253460();
}

void sub_1000656DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  __int16 v11;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  unsigned int v22;
  NSObject *v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  char v27;
  unsigned __int8 v28[8];

  v8 = a1;
  v10 = (void (*)(uint64_t, uint64_t))qword_10098FA08;
  v9 = qword_10098FA10;
  v27 = xmmword_10098FA18;
  v26 = WORD1(xmmword_10098FA18);
  v11 = WORD5(xmmword_10098FA18);
  if (WORD5(xmmword_10098FA18) | WORD4(xmmword_10098FA18))
    v12 = WORD1(xmmword_10098FA18) == 0;
  else
    v12 = 1;
  if (v12 || byte_10098FA48 == 0)
    goto LABEL_9;
  *(_DWORD *)&v28[3] = 0;
  *(_DWORD *)v28 = 0;
  if (WORD5(xmmword_10098FA18) && WORD4(xmmword_10098FA18))
  {
    if (sub_10005549C())
    {
      sub_100054530("ELNAOn and ELNAByass cannot be used with ScanCore together leScanWindowScanCoreELNAOn=%d leScanWindowScanCoreELNABypass=%d", WORD3(xmmword_10098FA18), WORD5(xmmword_10098FA18));
      v21 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_100065F98(v8, v14, v15, v16, v17, v18, v19, v20);
    return;
  }
  if (WORD4(xmmword_10098FA18))
  {
    v11 = WORD4(xmmword_10098FA18);
    v22 = 4;
  }
  else
  {
    v22 = 8;
  }
  v25 = v11;
  if (!(_DWORD)a1)
  {
    if (byte_10098FA45)
    {
      sub_100073B84((uint64_t)v28);
      if (byte_10098FA46)
        v24 = 2;
      else
        v24 = 1;
      byte_10098FA28 = v24;
      sub_10000B608(v28[0], BYTE13(xmmword_10098FA18), 1, (uint64_t)&v27, (uint64_t)&v26, (uint64_t)&v25, v24, v22);
      return;
    }
    a1 = 0;
LABEL_9:
    sub_100065F98(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (sub_10005549C())
  {
    sub_100054530("Could not start LE scan (leScanParamsScanCoreCb): %!", v8);
    v23 = sub_1000544A0(0x42u);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  xmmword_10098FA18 = 0u;
  *(_OWORD *)&byte_10098FA28 = 0u;
  *(_OWORD *)&qword_10098F9F8 = 0u;
  *(_OWORD *)&qword_10098FA08 = 0u;
  byte_10098FA42 = 0;
  if (v10)
    v10(v8, v9);
  else
    sub_100253460();
}

id sub_10006591C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "xpcReceivedMessage:", a2);
}

void sub_100065928(uint64_t a1)
{
  const char *v2;
  int v3;
  int v4;
  uint64_t v5;
  void *v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 40))
  {
    if (dword_100977ED8 <= 30
      && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
    {
      if (*(_BYTE *)(a1 + 56))
      {
        if (*(_BYTE *)(a1 + 57))
          v2 = "rescan";
        else
          v2 = "update";
      }
      else
      {
        v2 = "initial";
      }
      LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack _activate:]_block_invoke", 30, "Scan start: %s, %@", v2, *(_QWORD *)(a1 + 32));
    }
  }
  else if (*(_BYTE *)(a1 + 56)
         && dword_100977ED8 <= 30
         && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
  {
    LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack _activate:]_block_invoke", 30, "Scan stop: %@", *(_QWORD *)(a1 + 32));
  }
  if (*(_BYTE *)(a1 + 56))
  {
    if (qword_100977FB0 != -1)
      dispatch_once(&qword_100977FB0, &stru_100918A80);
    v3 = sub_100012EF4((uint64_t)off_100977FA8, *(_QWORD *)(a1 + 48), 1, 1, 0);
    if (v3)
    {
      if (dword_100977ED8 <= 90)
      {
        v4 = v3;
        if (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 90))
        {
          v5 = CUPrintErrorCode((v4 + 310000));
          v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
          LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack _activate:]_block_invoke", 90, "### Stop scan failed: %@", v6);

        }
      }
    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    if (qword_100977FB0 != -1)
      dispatch_once(&qword_100977FB0, &stru_100918A80);
    v7 = sub_10001ABD0((uint64_t)off_100977FA8, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
    if (v7)
    {
      if (dword_100977ED8 <= 90)
      {
        v8 = v7;
        if (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 90))
        {
          v9 = CUPrintErrorCode((v8 + 310000));
          v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
          LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack _activate:]_block_invoke", 90, "### Scan start failed: %@, %@", v10, *(_QWORD *)(a1 + 32));

        }
      }
      v11 = *(_QWORD *)(a1 + 40);
      if (v11)
      {
        sub_100060EA8(v11);
        operator delete();
      }
    }
  }
}

void sub_100065BE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100065C54(uint64_t a1)
{
  unsigned int v1;

  if ((_DWORD)a1)
  {
    v1 = 3;
LABEL_5:
    sub_10022BC8C(a1, v1);
    return;
  }
  if (byte_10098FA49)
  {
    a1 = sub_1001F7628();
    v1 = 2;
    goto LABEL_5;
  }
  sub_10006638C(0);
}

void sub_100065CA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  NSObject *v17;
  void (*v18)(uint64_t, uint64_t);
  __int16 v19;
  __int16 v20;
  char v21;
  unsigned __int8 v22[8];

  v2 = qword_10098FA10;
  v18 = (void (*)(uint64_t, uint64_t))qword_10098FA08;
  v3 = qword_10098FA38;
  if (qword_10098FA38)
  {
    while (sub_100056080(v3))
    {
      v4 = (void **)sub_10025155C(qword_10098FA38);
      sub_100251574(qword_10098FA38, 0);
      sub_100053298(v4[2]);
      sub_100053298(v4);
      v3 = qword_10098FA38;
    }
  }
  if (byte_10098FA47 == 1)
  {
    *(_DWORD *)&v22[3] = 0;
    *(_DWORD *)v22 = 0;
    sub_100073B84((uint64_t)v22);
    v21 = xmmword_10098FA18;
    v19 = WORD2(xmmword_10098FA18);
    v20 = WORD1(xmmword_10098FA18);
    if (byte_10098FA44)
      v12 = byte_10098FA45 == 0;
    else
      v12 = 1;
    v13 = v12;
    if (!byte_10098FA43 && (v13 & 1) != 0)
    {
      if (byte_10098FA46)
        v14 = sub_10004C9BC(215, (uint64_t (*)())sub_100065F98, v6, v7, v8, v9, v10, v11, v22[0]);
      else
        v14 = sub_10004C9BC(171, (uint64_t (*)())sub_100065F98, v6, v7, v8, v9, v10, v11, xmmword_10098FA18);
LABEL_29:
      v16 = v14;
      if ((_DWORD)v14)
      {
LABEL_30:
        if (sub_10005549C())
        {
          sub_100054530("Could not restart a LE scan %!", v16);
          v17 = sub_1000544A0(0x42u);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        xmmword_10098FA18 = 0u;
        *(_OWORD *)&byte_10098FA28 = 0u;
        *(_OWORD *)&qword_10098F9F8 = 0u;
        *(_OWORD *)&qword_10098FA08 = 0u;
        goto LABEL_35;
      }
      goto LABEL_35;
    }
    if (byte_10098FA46)
      v15 = 2;
    else
      v15 = 1;
    byte_10098FA28 = v15;
    if (byte_10098FA48)
    {
      if (!WORD2(xmmword_10098FA18))
      {
        if (!WORD3(xmmword_10098FA18))
        {
          if (!(WORD4(xmmword_10098FA18) | WORD5(xmmword_10098FA18)))
          {
            v16 = 101;
            goto LABEL_30;
          }
          sub_1000656DC(0, v5, v6, v7, v8, v9, v10, v11);
LABEL_35:
          byte_10098FA47 = 0;
          byte_10098FA40 = 0;
          return;
        }
LABEL_34:
        sub_1000654B8(0, v5, v6, v7, v8, v9, v10, v11);
        goto LABEL_35;
      }
    }
    else if (!WORD1(xmmword_10098FA18) || !WORD2(xmmword_10098FA18))
    {
      goto LABEL_34;
    }
    v14 = sub_10000B608(v22[0], BYTE13(xmmword_10098FA18), 1, (uint64_t)&v21, (uint64_t)&v20, (uint64_t)&v19, v15, 1u);
    goto LABEL_29;
  }
  xmmword_10098FA18 = 0u;
  *(_OWORD *)&byte_10098FA28 = 0u;
  *(_OWORD *)&qword_10098F9F8 = 0u;
  *(_OWORD *)&qword_10098FA08 = 0u;
  byte_10098FA40 = 0;
  if (v18)
    v18(a1, v2);
}

uint64_t sub_100065F84()
{
  uint64_t result;

  if (qword_10098AC40)
    return qword_10098AC40();
  return result;
}

void sub_100065F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  char v11;
  char v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  NSObject *v17;
  unsigned __int8 v18;
  NSObject *v19;

  v8 = a1;
  v10 = (void (*)(uint64_t, uint64_t))qword_10098FA08;
  v9 = qword_10098FA10;
  if ((_DWORD)a1)
    goto LABEL_48;
  if (!byte_10098FA45)
  {
    if (byte_10098FA46)
      v13 = sub_10004C9BC(216, (uint64_t (*)())sub_100065C54, a3, a4, a5, a6, a7, a8, 1);
    else
      v13 = sub_10004C9BC(172, (uint64_t (*)())sub_100065C54, a3, a4, a5, a6, a7, a8, 1);
LABEL_45:
    v8 = v13;
    if (!(_DWORD)v13)
      return;
    goto LABEL_48;
  }
  if (byte_10098FA46)
    v11 = 2;
  else
    v11 = 1;
  byte_10098FA28 = v11;
  if (byte_10098FA44)
  {
    byte_10098FA29 = WORD2(xmmword_10098FA18) != 0;
    if (WORD3(xmmword_10098FA18))
      byte_10098FA29 = (WORD2(xmmword_10098FA18) != 0) | 2;
  }
  if (byte_10098FA48)
  {
    if (WORD5(xmmword_10098FA18))
    {
      v12 = 8;
      goto LABEL_16;
    }
    if (WORD4(xmmword_10098FA18))
    {
      v12 = 4;
LABEL_16:
      byte_10098FA29 |= v12;
      if (byte_10098FA2E)
        v14 = WORD2(xmmword_10098FA18) == 0;
      else
        v14 = 1;
      if (v14)
        v15 = 1;
      else
        v15 = 5;
      if (byte_10098FA32)
      {
        v16 = v15 | 8;
        switch(word_10098FA36)
        {
          case 0:
            goto LABEL_33;
          case 1:
            v16 = v15 | 0x18;
            break;
          case 2:
            v16 = v15 | 0x28;
            break;
          case 4:
            v16 = v15 | 0x38;
            break;
          default:
            if (sub_10005549C())
            {
              sub_100054530("Unexpected scancore coex query interval %d", (unsigned __int16)word_10098FA36);
              v17 = sub_1000544A0(0x42u);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
                sub_1006CE7A4();
            }
            break;
        }
      }
      else
      {
        v16 = v15;
      }
      goto LABEL_33;
    }
  }
  v16 = 1;
LABEL_33:
  if (byte_10098FA4B)
  {
    if (byte_10098FA30 && byte_10098FA31)
    {
      v16 |= 0x80u;
    }
    else
    {
      if (byte_10098FA31)
        v18 = v16 | 0xC0;
      else
        v18 = v16;
      if (byte_10098FA30)
        v16 |= 0x40u;
      else
        v16 = v18;
    }
  }
  if (byte_10098FA29)
  {
    v13 = sub_100006870(v16, byte_10098FA28, BYTE14(xmmword_10098FA18), HIBYTE(xmmword_10098FA18), byte_10098FA29);
    goto LABEL_45;
  }
  v8 = 408;
LABEL_48:
  if (sub_10005549C())
  {
    sub_100054530("Could not start LE scan (leScanParamsCb): %!", v8);
    v19 = sub_1000544A0(0x42u);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  xmmword_10098FA18 = 0u;
  *(_OWORD *)&byte_10098FA28 = 0u;
  *(_OWORD *)&qword_10098F9F8 = 0u;
  *(_OWORD *)&qword_10098FA08 = 0u;
  byte_10098FA42 = 0;
  if (v10)
    v10(v8, v9);
  else
    sub_100253460();
}

void sub_100066278(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t, uint64_t);
  NSObject *v5;
  int v6;
  void *v7;

  v4 = (void (*)(uint64_t, uint64_t))off_10098AC50;
  qword_10098AC40 = 0;
  off_10098AC48 = 0;
  off_10098AC50 = 0;
  byte_10098AC58 = 0;
  if (!byte_10098EDFA && byte_10098EDFB == 1)
  {
    if (sub_10005549C())
    {
      sub_100054530("scan complete, we need to update our own address now");
      v5 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = 136446210;
        v7 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)&v6, 0xCu);
      }
    }
    sub_10021FDB8();
  }
  if (v4)
    v4(a1, a2);
}

void sub_10006638C(uint64_t a1)
{
  unsigned int v1;

  if ((_DWORD)a1)
  {
    v1 = 1;
LABEL_3:
    sub_10022BC8C(a1, v1);
    return;
  }
  if (byte_10098FA44 && (byte_10098FA4A & 1) == 0)
  {
    a1 = sub_1001F77E4();
    byte_10098FA4A = 1;
    v1 = 0;
    goto LABEL_3;
  }
  byte_10098FA42 = 0;
  if (qword_10098F9F8)
    qword_10098F9F8(0, qword_10098FA10);
}

void sub_100066420(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t sub_100066430(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_100066454(uint64_t a1, void *a2)
{
  sub_100068F78(*(os_unfair_lock_s **)(a1 + 32), a2, *(const char **)(a1 + 40));
}

uint64_t sub_100066460(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_100066478(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (os_log_type_enabled((os_log_t)qword_100999970, OS_LOG_TYPE_DEBUG))
    sub_1006F4880();
  *(_QWORD *)(v1 + 56) = 0;
  sub_100014C6C((uint64_t **)(v1 + 32), *(_QWORD **)(v1 + 8), (_QWORD *)(v1 + 16));
  return sub_1000107AC(v1);
}

void sub_1000664D8(uint64_t a1, void *a2)
{
  sub_10006A67C(*(os_unfair_lock_s **)(a1 + 32), a2);
}

uint64_t sub_1000664E0(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 166));
}

void sub_1000664FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[4];
      if (v5)
        sub_1002D76B8(v5, a1[6]);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_100066588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10009F88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int sub_10006659C(id a1)
{
  return sub_100073F70();
}

uint64_t sub_1000665A8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  _QWORD v5[2];

  v1 = *(_BYTE **)(a1 + 32);
  if (!v1[1176])
    return 114;
  v5[0] = 0;
  v5[1] = 0;
  v3 = sub_1000689E4((unsigned __int8 *)(a1 + 56), v5);
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v1 + 2456))(v1))
    return sub_100014314((uint64_t)v5, v3);
  if (!(*(unsigned int (**)(_BYTE *))(*(_QWORD *)v1 + 2448))(v1))
    return sub_1001F6FA0((uint64_t)v5);
  if ((*(_BYTE *)(a1 + 79) || *(_QWORD *)(a1 + 40) || *(_QWORD *)(a1 + 48))
    && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006DF160();
  }
  return sub_1001F7034((uint64_t)v5);
}

uint64_t sub_10006672C()
{
  return sub_100073BB8();
}

uint64_t sub_10006673C()
{
  return sub_100074080();
}

uint64_t sub_10006674C(uint64_t result)
{
  **(_DWORD **)(result + 32) = dword_100991B68;
  return result;
}

int sub_100066760(id a1)
{
  return sub_100073C40();
}

uint64_t sub_10006676C(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 1180) &= ~0x40000u;
  return result;
}

int sub_100066780(id a1)
{
  return sub_100073FF8();
}

uint64_t sub_10006678C()
{
  return sub_100073CC8();
}

void sub_1000667AC(uint64_t a1)
{
  os_unfair_lock_s *v1;
  unsigned __int8 v2;

  v1 = *(os_unfair_lock_s **)(a1 + 32);
  v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, unsigned __int8 *))(*(_QWORD *)&v1->_os_unfair_lock_opaque
                                                                              + 128))(v1, &v2))sub_100009E90(v1, v2);
}

uint64_t sub_1000667F8(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t sub_100066814(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
    sub_1007188C0();
  sub_10001A7AC(v2);
  *(_BYTE *)(v2 + 4296) = 0;
  *(_BYTE *)(v2 + 1842) = *(_BYTE *)(a1 + 40);
  return sub_100004AE4(v2, 1);
}

uint64_t sub_10006688C(uint64_t a1)
{
  return sub_100004AE4(*(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_100066898(uint64_t a1)
{
  return sub_100004AE4(*(_QWORD *)(a1 + 32), 0);
}

void sub_1000668A4(uint64_t a1)
{
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10093F438);
  sub_100056350((uint64_t)off_100977FA8, *(unsigned int *)(a1 + 32));
}

void sub_1000668F4(uint64_t a1)
{
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10093F438);
  sub_10000A824((uint64_t)off_100977FA8, *(_DWORD *)(a1 + 32));
}

void sub_100066944(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  NSObject *v10;
  __int16 v11[8];

  v1 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(v1 + 232);
  v2 = (_QWORD *)(v1 + 232);
  v3 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = v2;
  do
  {
    v7 = v3[4];
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = v3;
    else
      v9 = v3 + 1;
    if (v8)
      v6 = v3;
    v3 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != v2 && v5 >= v6[4])
  {
    sub_1000690EC(*(_QWORD **)(a1 + 48));
  }
  else
  {
LABEL_12:
    v10 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Dropping enqueued messages as session has been terminated", (uint8_t *)v11, 2u);
    }
  }
}

uint64_t sub_100066A00(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_100937840);
  sub_10006A01C(qword_10097AA58, *(_QWORD *)(v1 + 128));
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  return sub_100019A7C((uint64_t)off_100978168, *(_QWORD *)(v1 + 128), 0);
}

void sub_100066A8C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_100009F90((uint64_t)off_100978168, *(_QWORD *)(v1 + 128));
}

void sub_100066ADC(uint64_t a1)
{
  uint64_t v1;
  id v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  NSObject *v25;
  const char *v26;
  BOOL v27;
  int v28;
  _BYTE v29[10];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v1 + 128))
    return;
  if (!sub_100070BF0())
  {
LABEL_15:
    sub_100070458((unint64_t *)v1);
    return;
  }
  v2 = *(id *)(v1 + 96);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  v3 = (_QWORD *)(v1 + 56);
  if (*(char *)(v1 + 79) < 0)
    v3 = (_QWORD *)*v3;
  v4 = off_100978168;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3));
  sub_10001A86C((uint64_t)v4, v5, v2);

  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  v6 = sub_10006F6F4((uint64_t)off_100978168, *(_QWORD *)(v1 + 128));
  v7 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v1 + 175);
    v9 = *(unsigned __int8 *)(v1 + 176);
    v10 = *(unsigned __int8 *)(v1 + 177);
    v11 = *(unsigned __int8 *)(v1 + 178);
    v28 = 67110144;
    *(_DWORD *)v29 = v8;
    *(_WORD *)&v29[4] = 1024;
    *(_DWORD *)&v29[6] = v9;
    v30 = 1024;
    v31 = v10;
    v32 = 1024;
    v33 = v11;
    v34 = 1024;
    v35 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "handleTCCDone fDeviceAccessForMediaSession:%d fDeviceAccessForMediaExtension:%d fDeviceAccessPerAccessorySession:%d fDeviceAccessPerAccessoryExtension:%d sessionType:%d", (uint8_t *)&v28, 0x20u);
  }
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  v12 = sub_10006F6A4((uint64_t)off_100978168, *(_QWORD *)(v1 + 128));
  if (*(int *)(v1 + 80) > 0 || *(_BYTE *)(v1 + 185) || (_DWORD)v12 == 32)
    goto LABEL_14;
  if (*(_BYTE *)(v1 + 175) || *(_BYTE *)(v1 + 176) && !v6 || *(_BYTE *)(v1 + 177))
  {
    v13 = 1;
  }
  else
  {
    v27 = *(_BYTE *)(v1 + 178) && v6 == 0;
    v13 = v27;
  }
  if (((sub_10000BFEC(v12, v2) | v13) & 1) != 0 || *(_BYTE *)(v1 + 88))
  {
    v14 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v28 = 138412290;
      *(_QWORD *)v29 = v2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Overriding TCC for bundleIdentifier %@", (uint8_t *)&v28, 0xCu);
    }
    v15 = 1;
  }
  else
  {
    v24 = sub_100551C64(v1);
    v25 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v26 = "unknown";
      if (v24 == 1)
        v26 = "denied";
      if (!v24)
        v26 = "granted";
      v28 = 136315138;
      *(_QWORD *)v29 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Bluetooth user permission alwaysAuth: %s", (uint8_t *)&v28, 0xCu);
    }
    v15 = sub_100551E58((_QWORD *)v1);
  }
  v16 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(unsigned __int8 *)(v1 + 194);
    v18 = *(unsigned __int8 *)(v1 + 195);
    v19 = *(unsigned __int8 *)(v1 + 175);
    v20 = *(unsigned __int8 *)(v1 + 176);
    v21 = *(unsigned __int8 *)(v1 + 177);
    v22 = *(unsigned __int8 *)(v1 + 178);
    v28 = 67111168;
    *(_DWORD *)v29 = v15;
    *(_WORD *)&v29[4] = 1024;
    *(_DWORD *)&v29[6] = v17;
    v30 = 1024;
    v31 = v18;
    v32 = 1024;
    v33 = v13;
    v34 = 1024;
    v35 = v19;
    v36 = 1024;
    v37 = v20;
    v38 = 1024;
    v39 = v21;
    v40 = 1024;
    v41 = v22;
    v42 = 1024;
    v43 = v6;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "BluetoothUserPrivacy: alwaysAccess: %d, isCBPrivacySupported: %d, medicalDeviceOrStateRestorationAppPendingTCC:%d deviceAccessExempt:%d fDeviceAccessForMediaSession:%d fDeviceAccessForMediaExtension:%d fDeviceAccessPerAccessorySession:%d fDeviceAccessPerAccessoryExtension:%d sessionType:%d", (uint8_t *)&v28, 0x38u);
  }
  *(_BYTE *)(v1 + 195) = 0;
  *(_BYTE *)(v1 + 193) = v15;
  if ((v15 & 1) != 0)
  {
LABEL_14:

    goto LABEL_15;
  }
  if (*(_BYTE *)(v1 + 194))
    v23 = 3;
  else
    v23 = 4;
  sub_10007069C(v1, v23);

}

void sub_100066ECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_100066F04(uint64_t a1, uint64_t a2, void *a3)
{
  int v5;
  int v6;
  _QWORD *v7;
  unsigned __int8 *i;
  unint64_t v9;
  __int128 v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v24;
  int v25;

  v24 = 0uLL;
  v25 = 0;
  sub_100069AFC(&v24);
  sub_100070A48(a3, (uint64_t)&v24);
  v6 = v5;
  if (!v5)
  {
    v7 = *(_QWORD **)(a1 + 32);
    for (i = (unsigned __int8 *)*v7; i != (unsigned __int8 *)v7[1]; i += 20)
    {
      if (sub_100072DF0(i, (unsigned __int8 *)&v24))
        return v6 == 0;
      v7 = *(_QWORD **)(a1 + 32);
    }
    v9 = v7[2];
    if ((unint64_t)i >= v9)
    {
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&i[-*v7] >> 2);
      if (v12 + 1 > 0xCCCCCCCCCCCCCCCLL)
        abort();
      v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - *v7) >> 2);
      v14 = 2 * v13;
      if (2 * v13 <= v12 + 1)
        v14 = v12 + 1;
      if (v13 >= 0x666666666666666)
        v15 = 0xCCCCCCCCCCCCCCCLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)sub_1000B58EC((uint64_t)(v7 + 2), v15);
      else
        v16 = 0;
      v17 = &v16[20 * v12];
      v18 = &v16[20 * v15];
      v19 = v24;
      *((_DWORD *)v17 + 4) = v25;
      *(_OWORD *)v17 = v19;
      v11 = v17 + 20;
      v21 = (char *)*v7;
      v20 = (char *)v7[1];
      if (v20 != (char *)*v7)
      {
        do
        {
          v22 = *(_OWORD *)(v20 - 20);
          *((_DWORD *)v17 - 1) = *((_DWORD *)v20 - 1);
          *(_OWORD *)(v17 - 20) = v22;
          v17 -= 20;
          v20 -= 20;
        }
        while (v20 != v21);
        v20 = (char *)*v7;
      }
      *v7 = v17;
      v7[1] = v11;
      v7[2] = v18;
      if (v20)
        operator delete(v20);
    }
    else
    {
      v10 = v24;
      *((_DWORD *)i + 4) = v25;
      *(_OWORD *)i = v10;
      v11 = (char *)(i + 20);
    }
    v7[1] = v11;
  }
  return v6 == 0;
}

void sub_1000670BC(uint64_t a1)
{
  unsigned __int8 v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  if (objc_msgSend(v3, "isApp"))
  {
    if (*(_BYTE *)(a1 + 56))
      v2 = objc_msgSend(v3, "supportsBackgroundedCentrals");
    else
      v2 = objc_msgSend(v3, "supportsBackgroundedPeripherals");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v2;
  }

}

void sub_100067128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10006713C(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_100067144(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_10006714C(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 32);
  if (v1)
    free(v1);
}

id sub_10006715C(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBDiscoveryUpdate:]_block_invoke", 90, "### Discovery Update failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_100067224(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  unsigned int v8;
  const char *v9;
  const char *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "objectForKey:", *(_QWORD *)(a1 + 40)));
  if (!v2)
  {
    v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "applicationStateForApplication:", *(_QWORD *)(a1 + 40));
    v4 = v3 != 0;
    v5 = *(void **)(a1 + 40);
    if (v5 && !v3)
    {
      if (objc_msgSend(v5, "containsString:", CFSTR(".")))
        v4 = objc_msgSend(*(id *)(a1 + 40), "hasPrefix:", CFSTR("com.apple")) ^ 1;
      else
        v4 = 0;
    }
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[AppInfo appInfoWithPID:isApp:](AppInfo, "appInfoWithPID:isApp:", *(unsigned int *)(a1 + 48), v4));
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = objc_msgSend(v2, "isAlive");
      v9 = "";
      if ((_DWORD)v4)
        v9 = " This is an application.";
      *(_DWORD *)buf = 138412802;
      v18 = v7;
      v19 = 2080;
      v20 = v9;
      if (v8)
        v10 = "true";
      else
        v10 = "false";
      v21 = 2080;
      v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Registered application - %@%s, isAlive: %s", buf, 0x20u);
    }
    if (v2 && *(_QWORD *)(a1 + 40))
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "setObject:forKey:", v2);
    if ((_DWORD)v4)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "interestedBundleIDs"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v11));

      if (*(_QWORD *)(a1 + 40))
        objc_msgSend(v12, "addObject:");
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "updateInterestedBundleIDs:states:", v12, 15);
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "bundleInfoValueForKey:PID:", CFSTR("UIBackgroundModes"), *(unsigned int *)(a1 + 48)));
      if (v13)
      {
        v14 = objc_opt_class(NSArray);
        if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
        {
          v15[0] = _NSConcreteStackBlock;
          v15[1] = 3221225472;
          v15[2] = sub_1006AE2B8;
          v15[3] = &unk_1009400C0;
          v16 = v2;
          objc_msgSend(v13, "enumerateObjectsUsingBlock:", v15);

        }
      }

    }
  }

}

void sub_1000674C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id sub_100067524(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 48), "applicationInfoForPID:completion:", *(unsigned int *)(a1 + 40), &stru_100940130);
}

_BYTE *sub_100067540(uint64_t a1)
{
  _BYTE *result;

  result = *(_BYTE **)(a1 + 32);
  if (result[353])
    return objc_msgSend(result, "_update");
  return result;
}

id sub_100067554(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_triggerPendingExtension");
}

id sub_10006755C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_xpcListenerEvent:", a2);
}

uint64_t sub_100067568(uint64_t a1, unint64_t a2)
{
  return sub_1000694F0(a1 - 8, a2);
}

uint64_t sub_100067574(uint64_t a1, uint64_t a2)
{
  return sub_1000111FC((_QWORD *)(a1 - 8), a2);
}

uint64_t sub_100067588(uint64_t a1, uint64_t a2)
{
  return sub_10006B17C(a1 - 8, a2);
}

uint64_t sub_10006759C(uint64_t a1, unint64_t a2)
{
  return sub_10000D224((_QWORD *)(a1 - 8), a2);
}

uint64_t sub_1000675A8(uint64_t a1, uint64_t a2)
{
  return sub_10006D694(a1 - 8, a2);
}

void sub_1000675B4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_10000A988(a1 - 8, a2, a3);
}

void sub_1000675BC(uint64_t a1, uint64_t a2)
{
  sub_10006AB90((_QWORD *)(a1 - 88), a2);
}

uint64_t sub_1000675C4(uint64_t a1, const void **a2, char a3)
{
  return sub_10006CF04(a1 - 88, a2, a3);
}

uint64_t sub_1000675CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 1152))(v3, a2);
}

void sub_1000675F8(uint64_t a1)
{
  sub_100016C40(a1 - 32);
}

void sub_100067600(uint64_t a1)
{
  sub_100004CA0(a1 - 32);
}

uint64_t sub_100067614(uint64_t a1, uint64_t a2)
{
  return sub_10006C924(a1 - 24, a2);
}

uint64_t sub_100067620(uint64_t a1, uint64_t a2)
{
  return sub_100020E7C((_QWORD *)(a1 - 24), a2);
}

uint64_t sub_10006762C(uint64_t a1, int a2)
{
  return sub_100016B88(a1 - 16, a2);
}

uint64_t sub_100067634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 != a3)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = a2;
    if (a3 != v3)
    {
      v5 = 32 * ((a3 - a2) >> 5);
      v4 = a2;
      do
      {
        *(_OWORD *)v4 = *(_OWORD *)(v4 + v5);
        *(_DWORD *)(v4 + 16) = *(_DWORD *)(v4 + v5 + 16);
        *(_QWORD *)(v4 + 24) = *(_QWORD *)(v4 + v5 + 24);
        v4 += 32;
      }
      while (v4 + v5 != v3);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a2;
}

uint64_t **sub_100067698(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_10001FD34((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v8[4] = v9[4];
          sub_1002D36B4(v5, v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_10001FD34((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_1002C6244((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_100014DCC(v5, a2 + 4);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1000677E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002C6244((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000677F8(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, _BYTE *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v10 = 0;
  v11 = 0;
  v6 = sub_100067938(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_BYTE *)v7 + 25) = *a4;
    sub_100004078(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t **sub_100067880(uint64_t **a1, unsigned __int8 *a2, _BYTE *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((unsigned __int8 *)v5 + 25);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_BYTE *)v10 + 25) = *a3;
    sub_100004078(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *sub_100067938(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int8 *)a2 + 25), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int8 *)v10 + 25) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int8 *)(v16 + 25);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 25))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int8 *)(v20 + 25);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_100067AE0(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    memset(v11, 0, sizeof(v11));
    sub_100067BA0(a1, a4, v11);
    sub_100004078((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    return v11[0];
  }
  return (uint64_t *)v8;
}

void sub_100067BA0(uint64_t a1@<X0>, _QWORD **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  void *v6;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  *((_QWORD *)v6 + 4) = **a2;
  uuid_clear((unsigned __int8 *)v6 + 40);
  *((_BYTE *)a3 + 16) = 1;
}

void sub_100067C04(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t **sub_100067C1C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[8] = **a4;
    v11[10] = 0;
    *((_QWORD *)v11 + 6) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_100067CE0(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD v14[2];
  uint64_t v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v15 = 0;
    v12 = (char *)operator new(0x78uLL);
    v14[1] = v7;
    *((_QWORD *)v12 + 4) = **a4;
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    LOBYTE(v15) = 1;
    sub_100004078(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_1004BCA44((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

uint64_t *sub_100067DDC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10001F574((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100009DE0((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

_BYTE *sub_100067E7C@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_10003430C(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100067F00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002D3510(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100067F18(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100067F18(a1, *a2);
    sub_100067F18(a1, a2[1]);

    operator delete(a2);
  }
}

void sub_100067F60(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100067F60(a1, *a2);
    sub_100067F60(a1, a2[1]);
    sub_10068BED8(a2 + 6);
    operator delete(a2);
  }
}

void sub_100067FA8(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x80uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((_QWORD *)v6 + 6) = &off_100918298;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 8) = &off_100918298;
  *((_QWORD *)v6 + 9) = 0;
  *((_QWORD *)v6 + 10) = &off_100918298;
  *((_QWORD *)v6 + 11) = 0;
  *((_QWORD *)v6 + 12) = &off_100918298;
  *((_QWORD *)v6 + 13) = 0;
  *((_QWORD *)v6 + 14) = &off_100918298;
  *((_QWORD *)v6 + 15) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_100068020(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100686618(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100068038(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100068038(a1, *a2);
    sub_100068038(a1, a2[1]);
    sub_10001A82C((uint64_t)(a2 + 6), (_QWORD *)a2[7]);
    operator delete(a2);
  }
}

uint64_t *sub_100068084(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10000DC28((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_10068C000((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

uint64_t *sub_100068124(uint64_t **a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v8;
  void *__p;
  _QWORD v10[2];

  __p = 0;
  v10[0] = 0;
  v10[1] = 0;
  sub_1000681D8((uint64_t)a1, a2, a3, &__p);
  v8 = 0;
  v4 = (uint64_t **)sub_10000DC28((uint64_t)a1, &v8, (unsigned __int8 *)__p + 32);
  v5 = *v4;
  if (*v4)
  {
    v6 = __p;
    __p = 0;
    if (v6)
      sub_10068BFAC((uint64_t)v10, v6);
  }
  else
  {
    sub_100004078(a1, v8, v4, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v5;
}

void sub_1000681B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_10068BFAC((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000681D8@<X0>(uint64_t a1@<X0>, const unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t result;

  v7 = a1 + 8;
  *a4 = 0;
  a4[2] = 0;
  a4[1] = 0;
  v8 = a4 + 1;
  v9 = operator new(0x40uLL);
  *a4 = v9;
  *v8 = v7;
  *((_BYTE *)a4 + 16) = 0;
  result = sub_10068BF6C((uint64_t)v9 + 32, a2, a3);
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_100068250(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  *v1 = 0;
  sub_10068BFAC(v2, v3);
  _Unwind_Resume(a1);
}

char *sub_10006826C(uint64_t **a1, uint64_t a2)
{
  char *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;

  v4 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v4 + 28) = *(_OWORD *)a2;
  *((_DWORD *)v4 + 11) = *(_DWORD *)(a2 + 16);
  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        if (!sub_100068844((unsigned __int8 *)v4 + 28, (unsigned __int8 *)v5 + 28))
          break;
        v5 = *v6;
        v7 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v5 = v6[1];
    }
    while (v5);
    v7 = v6 + 1;
  }
  else
  {
    v7 = a1 + 1;
  }
LABEL_8:
  sub_100004078(a1, (uint64_t)v6, v7, (uint64_t *)v4);
  return v4;
}

void sub_10006830C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_100068320(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  __int128 v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = sub_10001FD34((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v10 = *(_OWORD *)((char *)v9 + 28);
          *((_DWORD *)v8 + 11) = *((_DWORD *)v9 + 11);
          *(_OWORD *)((char *)v8 + 28) = v10;
          sub_1005E7BA0(v5, (uint64_t)v8);
          v8 = v16;
          v17 = v16;
          if (v16)
            v16 = sub_10001FD34((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_1002C6244((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_10006826C(v5, (uint64_t)a2 + 28);
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_100068474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002C6244((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100068488(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = sub_100068844((unsigned __int8 *)(v3 + 28), a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || sub_100068844(a2, (unsigned __int8 *)(v5 + 28)))
    return v2;
  return v5;
}

uint64_t *sub_100068500(uint64_t **a1, unsigned int *a2)
{
  uint64_t *v4;
  unsigned int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x20uLL);
  v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_100004078(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t sub_10006858C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *sub_1000685DC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  uint64_t *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v29;

  v7 = sub_10039B518((uint64_t)&v29, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v17 = a2;
        v15 = *(uint64_t **)a2;
        v16 = *(_QWORD *)(v17 + 8);
        do
        {
          v18 = *((_QWORD *)v14 + 1);
          if (v18 == v8)
          {
            if (*((_QWORD *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16))
              return v14;
          }
          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9)
                v18 %= v9;
            }
            else
            {
              v18 &= v9 - 1;
            }
            if (v18 != v12)
              break;
          }
          v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((_QWORD *)v14 + 4) = 0;
  *((_QWORD *)v14 + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_1000B678C(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v26)
  {
    *(_QWORD *)v14 = *v26;
LABEL_40:
    *v26 = v14;
    goto LABEL_41;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v25 + 8 * v12) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_100068830(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100068844(unsigned __int8 *a1, unsigned __int8 *a2)
{
  size_t v2;
  unsigned int v3;

  v2 = *a1;
  v3 = *a2;
  if ((_DWORD)v2 == v3)
    return memcmp(a1 + 4, a2 + 4, v2) >> 31;
  else
    return v2 < v3;
}

_QWORD *sub_10006887C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char __str[16];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  *(_OWORD *)__str = 0u;
  v23 = 0u;
  switch((*(_BYTE *)a1 >> 1) | (*(_BYTE *)a1 << 7))
  {
    case 0:
      strcpy(__str, "(empty)");
      return sub_100091AE8(a2, __str);
    case 1:
      v6 = *(unsigned __int16 *)(a1 + 4);
      v3 = "0x%04X";
      goto LABEL_6;
    case 2:
      v6 = *(unsigned int *)(a1 + 4);
      v3 = "0x%08X";
LABEL_6:
      snprintf(__str, 0x80uLL, v3, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,
        *(_QWORD *)__str,
        *(_QWORD *)&__str[8],
        v23,
        v24,
        v25,
        v26,
        v27,
        v28,
        v29);
      break;
    case 8:
      snprintf(__str, 0x80uLL, "%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X", *(unsigned __int8 *)(a1 + 4), *(unsigned __int8 *)(a1 + 5), *(unsigned __int8 *)(a1 + 6), *(unsigned __int8 *)(a1 + 7), *(unsigned __int8 *)(a1 + 8), *(unsigned __int8 *)(a1 + 9));
      break;
    default:
      v5 = sub_100027F68();
      sub_100576500(v5, 0);
  }
  return sub_100091AE8(a2, __str);
}

uint64_t sub_1000689E4(unsigned __int8 *a1, _BYTE *a2)
{
  if (!*a1)
    return 0;
  sub_100072C50(a2, a1, 0);
  return *a1;
}

_BYTE *(*sub_100068A24())(_BYTE *result)
{
  return sub_100475FA4;
}

uint64_t sub_100068A30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  BOOL v18;

  if (*(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12))
    return 0;
  v2 = a2;
  if (*(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13))
    return 0;
  v4 = *(unsigned __int8 *)(a1 + 39);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 39);
  else
    v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a2 + 39);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 24);
  if (v5 != v6)
    return 0;
  v8 = (const void **)(a1 + 16);
  if (v7 >= 0)
    v9 = (unsigned __int8 *)(a2 + 16);
  else
    v9 = *(unsigned __int8 **)(a2 + 16);
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 24)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  if (*(unsigned __int16 *)(a1 + 40) != *(unsigned __int16 *)(v2 + 40)
    || *(unsigned __int8 *)(a1 + 42) != *(unsigned __int8 *)(v2 + 42)
    || *(_BYTE *)(a1 + 42) && *(unsigned __int8 *)(a1 + 43) != *(unsigned __int8 *)(v2 + 43)
    || !sub_100068EA0(a1 + 48, v2 + 48)
    || !sub_100068EA0(a1 + 224, v2 + 224)
    || !sub_1005F5C70((unsigned __int8 **)(a1 + 64), v2 + 64)
    || !sub_1005F5C70((unsigned __int8 **)(a1 + 88), v2 + 88)
    || *(_QWORD *)(a1 + 128) != *(_QWORD *)(v2 + 128)
    || !sub_100068EA0(a1 + 136, v2 + 136)
    || !sub_100068EA0(a1 + 152, v2 + 152)
    || !sub_100068EA0(a1 + 448, v2 + 448))
  {
    return 0;
  }
  v10 = *(unsigned __int8 **)(a1 + 112);
  v11 = (unsigned __int8 *)(a1 + 120);
  if (v10 == (unsigned __int8 *)(a1 + 120))
    return 1;
  v12 = v2 + 112;
  v13 = v2 + 120;
  LODWORD(v2) = 1;
  do
  {
    v14 = sub_100042F58(v12, v10 + 32);
    v15 = v13 != v14 && sub_100068EA0((uint64_t)(v10 + 56), v14 + 56);
    v16 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
    if (v16)
    {
      do
      {
        v17 = v16;
        v16 = *(unsigned __int8 **)v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        v17 = (unsigned __int8 *)*((_QWORD *)v10 + 2);
        v18 = *(_QWORD *)v17 == (_QWORD)v10;
        v10 = v17;
      }
      while (!v18);
    }
    v2 = v2 & v15;
    v10 = v17;
  }
  while (v17 != v11);
  return v2;
}

uint64_t sub_100068C48(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AE84C;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992228 != -1)
    dispatch_once(&qword_100992228, block);
  return byte_100992220;
}

uint64_t sub_100068CBC()
{
  if (qword_100992248 != -1)
    dispatch_once(&qword_100992248, &stru_10092BBD0);
  return byte_100992240;
}

uint64_t sub_100068CFC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AA438;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992080 != -1)
    dispatch_once(&qword_100992080, block);
  return byte_100992078;
}

uint64_t sub_100068D70(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003ADFD0;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_1009921F8 != -1)
    dispatch_once(&qword_1009921F8, block);
  return byte_1009921F0;
}

uint64_t sub_100068DE4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AA190;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992070 != -1)
    dispatch_once(&qword_100992070, block);
  return byte_100992068;
}

uint64_t sub_100068E58()
{
  if (qword_1009922B0 != -1)
    dispatch_once(&qword_1009922B0, &stru_10092BC30);
  return byte_1009922A8;
}

BOOL sub_100068E98(uint64_t a1)
{
  return sub_100010198(*(_QWORD *)(a1 + 8));
}

BOOL sub_100068EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  size_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v3 = *(_QWORD *)(v2 + 16);
  else
    v3 = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    v5 = *(_QWORD *)(v4 + 16);
  else
    v5 = 0;
  if (v3 != v5)
    return 0;
  if (v2)
    v6 = (const void *)(v2 + 24);
  else
    v6 = 0;
  if (v4)
    v7 = (const void *)(v4 + 24);
  else
    v7 = 0;
  if (v2)
    v8 = *(_QWORD *)(v2 + 16);
  else
    v8 = 0;
  return memcmp(v6, v7, v8) == 0;
}

void sub_100068F1C(uint64_t a1, int a2)
{
  NSObject *v2;
  _QWORD v3[5];
  int v4;

  v2 = *(NSObject **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100007D80;
  v3[3] = &unk_1009173C0;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100068F78(os_unfair_lock_s *a1, xpc_object_t object, const char *a3)
{
  xpc_type_t type;
  NSObject *v7;
  const char *string;
  NSObject *v9;

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    sub_10000D044(a1, (_xpc_connection_s *)object, a3);
  }
  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    string = xpc_dictionary_get_string(object, _xpc_error_key_description);
    v9 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100709CA4((uint64_t)a3, (uint64_t)string, v9);
  }
  else
  {
    v7 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100709D14((uint64_t)a3, (uint64_t)object, v7);
  }
}

void sub_100069060(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  int64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8)
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    *(_QWORD *)(a1 + 16) = &v5[v6];
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1000690EC(_QWORD *a1)
{
  int v2;
  void *v3;
  __int128 v4;
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  uint64_t v10;
  id v11;
  void *v12;
  NSObject *v13;
  char *v14;
  uint64_t v15;
  id v16;
  __int128 v17;
  uint8_t buf[4];
  char *v19;
  __int16 v20;
  uint64_t v21;

  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v3 = 0;
  *(_QWORD *)&v4 = 134218242;
  v17 = v4;
  while (1)
  {
    v5 = sub_100069324((uint64_t)a1);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    if (!v6)
      break;
    v7 = a1[15];
    v3 = v6;
    if (v2 == 3)
    {
      if (v7)
      {
        v8 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          v9 = (char *)sub_10005DEDC((uint64_t)a1);
          v10 = a1[11];
          *(_DWORD *)buf = v17;
          v19 = v9 + 1;
          v20 = 2114;
          v21 = v10;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "(CBSR) Sending classic %lu queued messages to application %{public}@", buf, 0x16u);
        }
        v11 = objc_msgSend(v6, "msgId", v17);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "arguments"));
        sub_10005DF3C(v7, (int64_t)v11, v12);
        goto LABEL_12;
      }
    }
    else if (v7)
    {
      v13 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        v14 = (char *)sub_10005DEDC((uint64_t)a1);
        v15 = a1[11];
        *(_DWORD *)buf = v17;
        v19 = v14 + 1;
        v20 = 2114;
        v21 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "(CBSR) Sending %lu queued messages to application %{public}@", buf, 0x16u);
      }
      v16 = objc_msgSend(v6, "msgId", v17);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "arguments"));
      sub_10005DF3C(v7 - 144, (int64_t)v16, v12);
LABEL_12:

      v3 = v6;
    }
  }
}

void sub_1000692DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100069324(uint64_t a1)
{
  id v2;
  void *v3;

  v2 = *(id *)(a1 + 112);
  objc_sync_enter(v2);
  if (objc_msgSend(*(id *)(a1 + 112), "count"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 112), "objectAtIndex:", 0));
    objc_msgSend(*(id *)(a1 + 112), "removeObjectAtIndex:", 0);
  }
  else
  {
    v3 = 0;
  }
  objc_sync_exit(v2);

  return v3;
}

void sub_1000693A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

uint64_t sub_1000693C4(uint64_t a1, void *a2, uint64_t a3)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 172) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 83) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 158) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 234) = 0;
  *(_BYTE *)(a1 + 238) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = &_mh_execute_header;
  *(_WORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 356) = 3;
  *(_DWORD *)(a1 + 364) = 0;
  *(_QWORD *)(a1 + 357) = 0;
  *(_BYTE *)(a1 + 368) = 1;
  *(_QWORD *)(a1 + 372) = 0;
  *(_QWORD *)(a1 + 379) = 0;
  *(_BYTE *)(a1 + 396) = 0;
  *(_QWORD *)(a1 + 388) = 0;
  *(_OWORD *)(a1 + 460) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_BYTE *)(a1 + 476) = 127;
  *(_QWORD *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 532) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 527) = 0;
  *(_QWORD *)(a1 + 569) = 0;
  *(_QWORD *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 607) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  return a1;
}

uint64_t sub_1000694F0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void **v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25[2];
  void *__p[2];
  char v27;
  _BYTE buf[22];

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100933058);
  v4 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
  v5 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5))
  {
    v6 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
    {
      if (v4)
      {
        sub_1000340DC(v4, (uint64_t)__p);
        if (v27 >= 0)
          v7 = __p;
        else
          v7 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "sessionDetached";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s - session %{public}s is detaching", buf, 0x16u);
        if (v27 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "sessionDetached";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "(NULL)";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s - session %{public}s is detaching", buf, 0x16u);
      }
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003415C((uint64_t)__p, a1 + 192);
  v8 = *(uint64_t **)(a1 + 256);
  if (v8 != (uint64_t *)(a1 + 264))
  {
    do
    {
      v9 = v8[4];
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_100933058);
      if (sub_100021398(qword_100977B48, v9) == a2)
      {
        v13 = v8[6];
        *(_QWORD *)buf = v8[5];
        *(_QWORD *)&buf[8] = v13;
        if (v13)
        {
          v14 = (unint64_t *)(v13 + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        sub_1000040CC((uint64_t **)(a1 + 256), v8);
        sub_10009F88C((uint64_t)(v8 + 5));
        operator delete(v8);
        v11 = *(uint64_t **)(a1 + 256);
        v16 = *(std::__shared_weak_count **)&buf[8];
        v25[0] = *(_QWORD *)buf;
        v25[1] = *(_QWORD *)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        sub_1004C153C((_QWORD *)a1, v25);
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_100933058);
        sub_10050ABD0(qword_100977B48, v9);
        v21 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        v10 = (uint64_t *)v8[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (uint64_t *)v8[2];
            v12 = *v11 == (_QWORD)v8;
            v8 = v11;
          }
          while (!v12);
        }
      }
      v8 = v11;
    }
    while (v11 != (uint64_t *)(a1 + 264));
  }
  return sub_100034234((uint64_t)__p);
}

void sub_100069854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100069890(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1);
  sub_100034234((uint64_t)v3);
  sub_10001A82C(a1 + 104, *(_QWORD **)(a1 + 112));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  return sub_100069BDC(a1);
}

void sub_1000698F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1 + 104, *(_QWORD **)(v1 + 112));
  if (*(char *)(v1 + 103) < 0)
    operator delete(*(void **)(v1 + 80));
  sub_100069BDC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100069924(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v6 = sub_1000160D0(a1);
  *(_QWORD *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 72) = 0;
  v7 = v6 + 80;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C((_BYTE *)v7, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = a3;
  return a1;
}

void sub_1000699A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100069BDC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000699B8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD v6[2];
  unint64_t v7;
  unint64_t *v8;

  v6[1] = 0;
  v7 = a2;
  v6[0] = 0;
  sub_10003415C((uint64_t)v6, a1);
  v8 = &v7;
  sub_10002252C((uint64_t **)(a1 + 104), &v7, (uint64_t)&unk_100740F58, (uint64_t **)&v8)[5] = a3;
  return sub_100034234((uint64_t)v6);
}

void sub_100069A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100069A38(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1);
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 137) = 0;
  return sub_100034234((uint64_t)v3);
}

uint64_t sub_100069A84(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_QWORD *)(a1 + 64) = a2;
  sub_100034264((uint64_t)v5);
  return sub_100034234((uint64_t)v5);
}

void sub_100069AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100069AE4(uint64_t a1, void *a2)
{
  sub_100015CC8(a1, 0x63u, a2);
}

void sub_100069AF0(uint64_t a1, void *a2)
{
  sub_100015CC8(a1, 0x43u, a2);
}

_BYTE *sub_100069AFC(_BYTE *result)
{
  *result = 0;
  return result;
}

uint64_t sub_100069B04(uint64_t a1, int8x16_t *a2, int a3)
{
  __int128 v5;
  int v6;

  sub_10005F660(a2, a3, 0, (uint64_t)&v5);
  *(_OWORD *)a1 = v5;
  *(_DWORD *)(a1 + 16) = v6;
  return a1;
}

pthread_mutex_t *sub_100069B7C(pthread_mutex_t *a1)
{
  if (pthread_mutex_destroy(a1) && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    sub_1006D9A04();
  return a1;
}

uint64_t sub_100069BE0(uint64_t a1, __int128 *a2, char a3)
{
  uint64_t v5;
  __int128 v6;

  *(_DWORD *)a1 = 1;
  v5 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C((_BYTE *)v5, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
  }
  *(_BYTE *)(a1 + 32) = a3;
  return a1;
}

uint64_t sub_100069C38(uint64_t a1, __int128 *a2, char a3, uint64_t a4, char a5, char a6)
{
  uint64_t v11;
  __int128 v12;

  *(_DWORD *)a1 = 2;
  v11 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C((_BYTE *)v11, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v12 = *a2;
    *(_QWORD *)(v11 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  *(_BYTE *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_BYTE *)(a1 + 48) = a5;
  *(_BYTE *)(a1 + 49) = a6;
  return a1;
}

uint64_t sub_100069CBC(uint64_t a1, __int128 *a2, char a3, char a4)
{
  uint64_t v7;
  __int128 v8;

  *(_DWORD *)a1 = 0;
  v7 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C((_BYTE *)v7, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
  }
  *(_BYTE *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 33) = a4;
  return a1;
}

uint64_t sub_100069D20()
{
  if (qword_100991F08 != -1)
    dispatch_once(&qword_100991F08, &stru_1009295F8);
  return qword_100991F00;
}

uint64_t sub_100069D64(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 120);
  v4 = sub_10000C5B8(a1 + 376, a2);
  if (a1 + 384 == v4)
  {
    v5 = 0;
  }
  else
  {
    v7 = 0;
    sub_100043758(&v7);
    v5 = sub_10022D980(*(_QWORD *)(v4 + 48));
    sub_100043728(&v7);
  }
  sub_100034234((uint64_t)v8);
  return v5;
}

void sub_100069DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
  sub_100043728(&a13);
  sub_100034234((uint64_t)&a14);
  _Unwind_Resume(a1);
}

id sub_100069E14(uint64_t a1)
{
  void *v2;
  const unsigned __int8 *v3;
  const unsigned __int8 **v4;
  id v5;
  void *v6;
  unsigned __int8 *v7;
  const unsigned __int8 **v8;
  BOOL v9;
  _QWORD v11[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 120);
  v3 = *(const unsigned __int8 **)(a1 + 376);
  v4 = (const unsigned __int8 **)(a1 + 384);
  if (v3 != (const unsigned __int8 *)(a1 + 384))
  {
    do
    {
      v5 = sub_100030DF4(v3 + 32);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      objc_msgSend(v2, "addObject:", v6);

      v7 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
      if (v7)
      {
        do
        {
          v8 = (const unsigned __int8 **)v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const unsigned __int8 **)*((_QWORD *)v3 + 2);
          v9 = *v8 == v3;
          v3 = (const unsigned __int8 *)v8;
        }
        while (!v9);
      }
      v3 = (const unsigned __int8 *)v8;
    }
    while (v8 != v4);
  }
  sub_100034234((uint64_t)v11);
  return v2;
}

void sub_100069ED8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_100069F08(uint64_t a1, unsigned __int8 *a2)
{
  _BOOL8 v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 120);
  v4 = a1 + 384 != sub_10000C5B8(a1 + 376, a2);
  sub_100034234((uint64_t)v6);
  return v4;
}

void sub_100069F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100069F78(uint64_t a1, unsigned __int8 *a2)
{
  void *v3;
  id v4;
  void *v5;
  _BOOL8 v6;

  if (a1 + 384 == sub_10000C5B8(a1 + 376, a2))
    return 255;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v3 = off_1009778C0;
  v4 = sub_100030DF4(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = !sub_10065BD74((uint64_t)v3, v5);

  return v6;
}

void sub_10006A00C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10006A01C(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  if (!a2 && os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_FAULT))
    sub_1006EA6FC();
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
  {
    v5 = (uint64_t *)(a1 + 24);
    do
    {
      v6 = v4[4];
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (v7)
        v5 = v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != (uint64_t *)(a1 + 24) && v5[4] <= a2)
    {
      v9 = v5[5];
      *(_BYTE *)(v9 + 32) = 1;
      v10 = *(uint64_t **)(v9 + 8);
      if (*(uint64_t **)(v9 + 16) == v10)
      {
LABEL_60:
        sub_1000040CC((uint64_t **)(a1 + 16), v5);
        operator delete(v5);
        sub_1003D7824(v9);
        operator delete();
      }
      while (1)
      {
        v11 = *v10;
        if (*(_BYTE *)(*v10 + 4))
        {
          v13 = *(_QWORD *)(v11 + 120);
          v12 = *(_QWORD *)(v11 + 128);
          if (v13 == v12)
            goto LABEL_34;
          do
          {
            if (*(_BYTE *)(v13 + 18) == 1)
            {
              sub_1003D3578(a1, a2, *(unsigned __int16 *)(v11 + 2), (unsigned __int8 *)(v13 + 2));
              v12 = *(_QWORD *)(v11 + 128);
            }
            v13 += 26;
          }
          while (v13 != v12);
          if (v12 == *(_QWORD *)(v11 + 120))
          {
LABEL_34:
            v24 = *(uint64_t **)(v9 + 16);
            v25 = (char *)v24 - (char *)(v10 + 1);
            if (v24 != v10 + 1)
              memmove(v10, v10 + 1, (char *)v24 - (char *)(v10 + 1));
            *(_QWORD *)(v9 + 16) = (char *)v10 + v25;
            v26 = *(void **)(v11 + 120);
            if (v26)
            {
              *(_QWORD *)(v11 + 128) = v26;
              operator delete(v26);
            }
            operator delete();
          }
          v15 = *(_QWORD **)(a1 + 96);
          v14 = *(_QWORD *)(a1 + 104);
          if ((unint64_t)v15 >= v14)
          {
            v16 = *(_QWORD *)(a1 + 88);
            v17 = ((uint64_t)v15 - v16) >> 3;
            if ((unint64_t)(v17 + 1) >> 61)
              goto LABEL_62;
            v18 = v14 - v16;
            v19 = v18 >> 2;
            if (v18 >> 2 <= (unint64_t)(v17 + 1))
              v19 = v17 + 1;
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
              v20 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v20 = v19;
            if (v20)
              v21 = (char *)sub_10007ABA0(a1 + 104, v20);
            else
              v21 = 0;
            v31 = &v21[8 * v17];
            *(_QWORD *)v31 = v11;
            v23 = v31 + 8;
            v33 = *(char **)(a1 + 88);
            v32 = *(char **)(a1 + 96);
            if (v32 != v33)
            {
              do
              {
                v34 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v31 - 1) = v34;
                v31 -= 8;
              }
              while (v32 != v33);
              goto LABEL_54;
            }
            goto LABEL_55;
          }
        }
        else
        {
          if (sub_1003D1CFC(a1, *v10) != 10)
            goto LABEL_34;
          v15 = *(_QWORD **)(a1 + 96);
          v22 = *(_QWORD *)(a1 + 104);
          if ((unint64_t)v15 >= v22)
          {
            v27 = *(_QWORD *)(a1 + 88);
            v28 = ((uint64_t)v15 - v27) >> 3;
            if ((unint64_t)(v28 + 1) >> 61)
LABEL_62:
              abort();
            v29 = v22 - v27;
            v30 = v29 >> 2;
            if (v29 >> 2 <= (unint64_t)(v28 + 1))
              v30 = v28 + 1;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
              v20 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v20 = v30;
            if (v20)
              v21 = (char *)sub_10007ABA0(a1 + 104, v20);
            else
              v21 = 0;
            v31 = &v21[8 * v28];
            *(_QWORD *)v31 = v11;
            v23 = v31 + 8;
            v35 = *(char **)(a1 + 88);
            v32 = *(char **)(a1 + 96);
            if (v32 != v35)
            {
              do
              {
                v36 = *((_QWORD *)v32 - 1);
                v32 -= 8;
                *((_QWORD *)v31 - 1) = v36;
                v31 -= 8;
              }
              while (v32 != v35);
LABEL_54:
              v32 = *(char **)(a1 + 88);
            }
LABEL_55:
            *(_QWORD *)(a1 + 88) = v31;
            *(_QWORD *)(a1 + 96) = v23;
            *(_QWORD *)(a1 + 104) = &v21[8 * v20];
            if (v32)
              operator delete(v32);
            goto LABEL_57;
          }
        }
        *v15 = v11;
        v23 = v15 + 1;
LABEL_57:
        *(_QWORD *)(a1 + 96) = v23;
        v37 = *(uint64_t **)(v9 + 16);
        v38 = (char *)v37 - (char *)(v10 + 1);
        if (v37 != v10 + 1)
          memmove(v10, v10 + 1, (char *)v37 - (char *)(v10 + 1));
        *(_QWORD *)(v9 + 16) = (char *)v10 + v38;
        if (v10 == (uint64_t *)((char *)v10 + v38))
          goto LABEL_60;
      }
    }
  }
}

BOOL sub_10006A32C(uint64_t a1)
{
  return *(_WORD *)(a1 + 160) == 2
      && (*(_WORD *)(a1 + 166) & 1) != 0
      && *(_DWORD *)(a1 + 456) == 1
      && *(_BYTE *)(a1 + 452) != 0;
}

uint64_t sub_10006A364(os_unfair_lock_s *a1, void *a2)
{
  uint64_t uint64;
  uint64_t v5;
  NSObject *v7;
  unsigned __int8 v8;
  uint64_t v9;
  _QWORD v10[2];
  uint8_t buf[4];
  uint64_t v12;

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, (uint64_t)&a1[20]);
  uint64 = xpc_dictionary_get_uint64(a2, "kMessageId");
  v5 = uint64;
  switch(uint64)
  {
    case 0x578uLL:
    case 0x579uLL:
    case 0x57AuLL:
    case 0x581uLL:
      return sub_100034234((uint64_t)v10);
    case 0x57BuLL:
    case 0x57CuLL:
    case 0x57DuLL:
    case 0x588uLL:
    case 0x58BuLL:
    case 0x58CuLL:
    case 0x595uLL:
    case 0x596uLL:
    case 0x597uLL:
      goto LABEL_6;
    case 0x57EuLL:
      sub_1006C511C(uint64, a2);
      break;
    case 0x57FuLL:
      sub_1006C51A4(uint64, a2);
      break;
    case 0x580uLL:
      sub_1006C52A8(uint64, a2);
      break;
    case 0x582uLL:
      sub_1006C58FC(uint64, a2);
      break;
    case 0x583uLL:
      sub_1006C5A80(uint64, a2);
      break;
    case 0x584uLL:
      sub_1006C5D24(uint64, a2);
      break;
    case 0x585uLL:
      sub_1006C5F0C(uint64, a2);
      break;
    case 0x586uLL:
      sub_1006C5F84(uint64, a2);
      break;
    case 0x587uLL:
      xpc_dictionary_get_string(a2, "kMessageArgs");
      break;
    case 0x589uLL:
      sub_1006C6010((uint64_t)a1, a2);
      break;
    case 0x58AuLL:
      sub_1006C6274(uint64, a2);
      break;
    case 0x58DuLL:
      sub_1006C6354((uint64_t)a1, a2);
      break;
    case 0x58EuLL:
      sub_1006C6610(uint64, a2);
      break;
    case 0x58FuLL:
      sub_1006C563C(uint64, a2);
      break;
    case 0x590uLL:
      sub_1006C67C8(uint64, a2);
      break;
    case 0x591uLL:
      sub_1006C53F8(uint64, a2);
      break;
    case 0x592uLL:
      sub_1006C7034((uint64_t)a1, a2);
      break;
    case 0x593uLL:
      v8 = xpc_dictionary_get_uint64(a2, "kMessageArgs");
      v9 = sub_1000438A4();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 1800))(v9, v8);
      break;
    case 0x594uLL:
      sub_1006C716C((uint64_t)a1, a2);
      break;
    case 0x598uLL:
      sub_1006C74AC((uint64_t)a1, a2);
      break;
    case 0x599uLL:
      sub_1006C7A90((uint64_t)a1, a2);
      break;
    case 0x59AuLL:
      sub_1006C7BA4((uint64_t)a1, a2);
      break;
    case 0x59BuLL:
      sub_1006C797C((uint64_t)a1, a2);
      break;
    case 0x59CuLL:
      sub_1006C6EF8(a1, a2);
      break;
    case 0x59DuLL:
      sub_1006C68CC(a1, a2);
      break;
    case 0x59EuLL:
      sub_1006C6DBC(a1, a2);
      break;
    case 0x59FuLL:
      sub_1006C6B44(a1, a2);
      break;
    case 0x5A0uLL:
      sub_1006C6C80(a1, a2);
      break;
    case 0x5A1uLL:
      sub_1006C7F38(a1, a2);
      break;
    case 0x5A2uLL:
      sub_1006C6A08(a1, a2);
      break;
    default:
      if (uint64 == 106)
      {
        sub_1006C7328((uint64_t)a1, a2);
      }
      else if (uint64 == 107)
      {
        sub_100021CE0((uint64_t)a1, a2);
      }
      else
      {
LABEL_6:
        v7 = qword_1009997F0;
        if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          v12 = v5;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received unknown event %llu from WCM/UCM", buf, 0xCu);
        }
      }
      break;
  }
  return sub_100034234((uint64_t)v10);
}

void sub_10006A660(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_10006A67C(os_unfair_lock_s *a1, xpc_object_t object)
{
  xpc_type_t type;
  char *v5;
  NSObject *v6;

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    sub_10006A364(a1, object);
  }
  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    if (object == &_xpc_error_connection_interrupted)
    {
      sub_1006C4B3C((uint64_t)a1);
    }
    else
    {
      v6 = qword_1009997F0;
      if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_ERROR))
        sub_10071BC4C(object, v6);
    }
  }
  else
  {
    v5 = xpc_copy_description(object);
    if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_ERROR))
      sub_10071BCCC();
    free(v5);
  }
}

id sub_10006A768(uint64_t a1)
{
  void *v2;
  const unsigned __int8 *v3;
  id v4;
  void *v5;
  _BOOL4 v6;
  id v7;
  void *v8;
  unsigned __int8 *v9;
  const unsigned __int8 **v10;
  BOOL v11;
  _QWORD v13[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 48);
  v3 = *(const unsigned __int8 **)(a1 + 440);
  if (v3 != (const unsigned __int8 *)(a1 + 448))
  {
    do
    {
      v4 = sub_100030DF4(v3 + 32);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      v6 = sub_100030864(a1, v5);

      if (v6)
      {
        v7 = sub_100030DF4(v3 + 32);
        v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
        objc_msgSend(v2, "addObject:", v8);

      }
      v9 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
      if (v9)
      {
        do
        {
          v10 = (const unsigned __int8 **)v9;
          v9 = *(unsigned __int8 **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (const unsigned __int8 **)*((_QWORD *)v3 + 2);
          v11 = *v10 == v3;
          v3 = (const unsigned __int8 *)v10;
        }
        while (!v11);
      }
      v3 = (const unsigned __int8 *)v10;
    }
    while (v10 != (const unsigned __int8 **)(a1 + 448));
  }
  sub_100034234((uint64_t)v13);
  return v2;
}

void sub_10006A868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10006A8A0(uint64_t a1, void **a2)
{
  _QWORD *i;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD v21[2];

  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 56);
  v5 = *(_QWORD **)(a1 + 120);
  for (i = *(_QWORD **)(a1 + 128); v5 != i; ++v5)
  {
    v6 = (_DWORD *)*v5;
    if (*(_DWORD *)*v5 == 2 || v6[6])
    {
      v7 = *((_QWORD *)v6 + 1);
      v9 = a2[1];
      v8 = (unint64_t)a2[2];
      if ((unint64_t)v9 >= v8)
      {
        v11 = ((char *)v9 - (_BYTE *)*a2) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          abort();
        v12 = v8 - (_QWORD)*a2;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)sub_10007ABA0((uint64_t)(a2 + 2), v14);
        else
          v15 = 0;
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = v7;
        v10 = v16 + 8;
        v18 = (char *)*a2;
        v17 = (char *)a2[1];
        if (v17 != *a2)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          v17 = (char *)*a2;
        }
        *a2 = v16;
        a2[1] = v10;
        a2[2] = &v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v9 = v7;
        v10 = v9 + 1;
      }
      a2[1] = v10;
      i = *(_QWORD **)(a1 + 128);
    }
  }
  return sub_100034234((uint64_t)v21);
}

void sub_10006A9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10006A9FC(uint64_t a1)
{
  sub_100011E94(a1);
  operator delete();
}

id sub_10006AA24(uint64_t a1, unint64_t a2)
{
  *(_BYTE *)(a1 + 381) = 0;
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10092DEC8);
  sub_100012EF4((uint64_t)off_100977FA8, a2, 1, 1, 0);
  *(_BYTE *)(a1 + 304) = 0;
  return objc_msgSend(*(id *)(a1 + 344), "removeAllObjects");
}

uint64_t sub_10006AA94(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;

  if ((*(_BYTE *)(a1 + 506)
     || _os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit") && *(_QWORD *)(a1 + 496))
    && !_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
  {
    return 1;
  }
  if (!*(_QWORD *)(a1 + 224))
    return 1;
  v6 = a2;
  v4 = *a2;
  v5 = v6[1];
  if (v5 == v4)
    return 1;
  do
  {
    result = sub_10040835C(a1, v4);
    if ((result & 1) != 0)
      break;
    v4 += 20;
  }
  while (v4 != v5);
  return result;
}

uint64_t sub_10006AB38(uint64_t a1)
{
  uint64_t result;

  result = _os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit");
  if ((_DWORD)result)
    return *(_QWORD *)(a1 + 496) != 0;
  return result;
}

id sub_10006AB78(uint64_t a1, unsigned int a2)
{
  id result;

  *(_BYTE *)(a1 + 129) = a2;
  result = *(id *)(a1 + 400);
  if (result)
    return sub_10034A728((uint64_t)result, (a2 >> 4) & 1);
  return result;
}

void sub_10006AB90(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  NSObject *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD block[5];
  std::__shared_weak_count *v10;
  uint64_t v11;

  v2 = a1[111];
  v3 = (std::__shared_weak_count *)a1[112];
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  v6 = a1[31];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1000664FC;
  block[3] = &unk_100935988;
  block[4] = v2;
  v10 = v3;
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v11 = a2;
  dispatch_async(v6, block);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t sub_10006AC40(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  NSObject *v8;
  uint64_t v9;
  char v11[24];
  _QWORD v12[2];
  _BYTE v13[24];

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092E880);
  v4 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
  if (!a2)
    return 0;
  v5 = v4;
  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 56);
  v7 = *(_QWORD **)(a1 + 232);
  v6 = *(_QWORD **)(a1 + 240);
  if (v7 != v6)
  {
    while (*v7 != a2)
    {
      if (++v7 == v6)
      {
        v7 = *(_QWORD **)(a1 + 240);
        break;
      }
    }
  }
  if (v7 == v6)
  {
    v8 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    {
      if (v5)
      {
        sub_1000340DC(v5, (uint64_t)v11);
        sub_1006F00DC(v11, (uint64_t)v13, v8);
      }
      else
      {
        sub_1006F009C((uint64_t)v13, v8, v9);
      }
    }
    a1 = 0;
  }
  sub_100034234((uint64_t)v12);
  return a1;
}

void sub_10006AD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006AD9C(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  unint64_t v8;
  _QWORD *v9;
  __int128 v10;
  BOOL v11;
  BOOL v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, (uint64_t)(a1 + 7));
  v9 = (_QWORD *)a1[32];
  v8 = a1[33];
  v10 = a3[1];
  v24 = *a3;
  v25 = v10;
  if (v9 != (_QWORD *)v8)
  {
    while (1)
    {
      if (*v9 == a2)
      {
        v11 = (_QWORD)v24 == v9[1] && *((_QWORD *)&v24 + 1) == v9[2];
        v12 = v11 && (_QWORD)v25 == v9[3];
        if (v12 && *((_QWORD *)&v25 + 1) == v9[4])
          break;
      }
      v9 += 7;
      if (v9 == (_QWORD *)v8)
        goto LABEL_16;
    }
  }
  if (v9 == (_QWORD *)v8)
  {
LABEL_16:
    v14 = a3[1];
    v20 = *a3;
    v21 = v14;
    v19 = a2;
    v22 = -1;
    v23 = a4;
    if (v8 >= a1[34])
    {
      v16 = sub_1004240A4(a1 + 32, (uint64_t)&v19);
    }
    else
    {
      *(_QWORD *)v8 = a2;
      v15 = v20;
      *(_OWORD *)(v8 + 24) = v21;
      *(_OWORD *)(v8 + 8) = v15;
      *(_DWORD *)(v8 + 40) = -1;
      *(_QWORD *)(v8 + 48) = a4;
      v16 = v8 + 56;
    }
    a1[33] = v16;
  }
  sub_100034234((uint64_t)v18);
  return 0;
}

void sub_10006AEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10006AEC0(_QWORD *a1, char **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD v41[2];

  v41[0] = 0;
  v41[1] = 0;
  sub_10003415C((uint64_t)v41, (uint64_t)(a1 + 3));
  v4 = (_QWORD *)a1[16];
  v5 = a1 + 17;
  if (v4 != a1 + 17)
  {
    v6 = a2 + 2;
    v7 = a2[1];
    do
    {
      v8 = v4[5];
      if ((unint64_t)v7 >= *v6)
      {
        v9 = (v7 - *a2) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          abort();
        v10 = *v6 - (_QWORD)*a2;
        v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v13 = (char *)sub_10007ABA0((uint64_t)(a2 + 2), v12);
        else
          v13 = 0;
        v14 = &v13[8 * v9];
        *(_QWORD *)v14 = v8;
        v7 = v14 + 8;
        v16 = *a2;
        v15 = a2[1];
        if (v15 != *a2)
        {
          do
          {
            v17 = *((_QWORD *)v15 - 1);
            v15 -= 8;
            *((_QWORD *)v14 - 1) = v17;
            v14 -= 8;
          }
          while (v15 != v16);
          v15 = *a2;
        }
        *a2 = v14;
        a2[1] = v7;
        a2[2] = &v13[8 * v12];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v7 = v8;
        v7 += 8;
      }
      a2[1] = v7;
      v18 = (_QWORD *)v4[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v4[2];
          v20 = *v19 == (_QWORD)v4;
          v4 = v19;
        }
        while (!v20);
      }
      v4 = v19;
    }
    while (v19 != v5);
  }
  v21 = (_QWORD *)a1[19];
  if (v21 != a1 + 20)
  {
    do
    {
      v22 = v21[5];
      v23 = (_QWORD *)*v5;
      if (*v5)
      {
        v24 = v21[4];
        do
        {
          v25 = v23[4];
          if (v24 >= v25)
          {
            if (v25 >= v24)
              goto LABEL_49;
            ++v23;
          }
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      v27 = a2[1];
      v26 = (unint64_t)a2[2];
      if ((unint64_t)v27 >= v26)
      {
        v29 = (v27 - *a2) >> 3;
        if ((unint64_t)(v29 + 1) >> 61)
          abort();
        v30 = v26 - (_QWORD)*a2;
        v31 = v30 >> 2;
        if (v30 >> 2 <= (unint64_t)(v29 + 1))
          v31 = v29 + 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
          v33 = (char *)sub_10007ABA0((uint64_t)(a2 + 2), v32);
        else
          v33 = 0;
        v34 = &v33[8 * v29];
        *(_QWORD *)v34 = v22;
        v28 = v34 + 8;
        v36 = *a2;
        v35 = a2[1];
        if (v35 != *a2)
        {
          do
          {
            v37 = *((_QWORD *)v35 - 1);
            v35 -= 8;
            *((_QWORD *)v34 - 1) = v37;
            v34 -= 8;
          }
          while (v35 != v36);
          v35 = *a2;
        }
        *a2 = v34;
        a2[1] = v28;
        a2[2] = &v33[8 * v32];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_QWORD *)v27 = v22;
        v28 = v27 + 8;
      }
      a2[1] = v28;
LABEL_49:
      v38 = (_QWORD *)v21[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v21[2];
          v20 = *v39 == (_QWORD)v21;
          v21 = v39;
        }
        while (!v20);
      }
      v21 = v39;
    }
    while (v39 != a1 + 20);
  }
  sub_100034234((uint64_t)v41);
  return 0;
}

void sub_10006B154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10006B174(uint64_t a1)
{
  sub_10000768C(*(_QWORD *)(a1 + 248));
}

uint64_t sub_10006B17C(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  BOOL v11;
  uint64_t *v12;
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 88);
  v6 = *(uint64_t **)(a1 + 224);
  v4 = (uint64_t **)(a1 + 224);
  v5 = v6;
  if (v6 != (uint64_t *)(v4 + 1))
  {
    do
    {
      v7 = v5[4];
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10093E8B0);
      v8 = sub_100021398(qword_100977B48, v7);
      v9 = (uint64_t *)v5[1];
      if (v8 == a2)
      {
        v12 = v5;
        if (v9)
        {
          do
          {
            v10 = (uint64_t **)v9;
            v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (uint64_t **)v12[2];
            v11 = *v10 == v12;
            v12 = (uint64_t *)v10;
          }
          while (!v11);
        }
        sub_1000040CC(v4, v5);
        operator delete(v5);
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_10093E8B0);
        sub_10050ABD0(qword_100977B48, v7);
      }
      else if (v9)
      {
        do
        {
          v10 = (uint64_t **)v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (uint64_t **)v5[2];
          v11 = *v10 == v5;
          v5 = (uint64_t *)v10;
        }
        while (!v11);
      }
      v5 = (uint64_t *)v10;
    }
    while (v10 != v4 + 1);
  }
  return sub_100034234((uint64_t)v14);
}

void sub_10006B2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10006B2F8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xDAu);
}

uint64_t sub_10006B344(uint64_t a1)
{
  return sub_100042FD0(a1, 218, 1, &stru_1009266F8, 0);
}

uint64_t sub_10006B35C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xC1u);
}

uint64_t sub_10006B3A8(uint64_t a1, int a2)
{
  _QWORD v3[4];
  int v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100305F64;
  v3[3] = &unk_100926678;
  v4 = a2;
  return sub_100042FD0(a1, 173, 1, v3, 0);
}

uint64_t sub_10006B404(uint64_t a1, __int128 *a2, char a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  _QWORD v10[7];
  __int128 v11;
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;
  unsigned __int8 v17;

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000665A8;
  v10[3] = &unk_100926478;
  v11 = *a2;
  v12 = *((_DWORD *)a2 + 4);
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v10[4] = a1;
  v10[5] = a7;
  v10[6] = a8;
  v17 = a9;
  return sub_100042FD0(a1, 201, a9, v10, 0);
}

BOOL sub_10006B4B8(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 712);
  if (!v1)
    return 0;
  if (v1 <= 0x7CF)
  {
    if (v1 <= 0x13)
      return 0;
    return *(_BYTE *)(a1 + 1208) == 0;
  }
  v2 = 0;
  if (v1 <= 0xF9F && v1 != 2000)
    return *(_BYTE *)(a1 + 1208) == 0;
  return v2;
}

uint64_t sub_10006B500(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10006672C;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 193, 1, v3, 0);
}

uint64_t sub_10006B55C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xDAu);
}

BOOL sub_10006B5A8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

uint64_t sub_10006B5BC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10006673C;
  v3[3] = &unk_100926538;
  v3[4] = a2;
  return sub_100042FD0(a1, 218, 1, v3, 0);
}

uint64_t sub_10006B618(int a1, int a2)
{
  dword_100991B68 = a2;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xB8u);
}

uint64_t sub_10006B66C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xC8u);
}

uint64_t sub_10006B6B8(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10006674C;
  v3[3] = &unk_100917378;
  v3[4] = a2;
  return sub_100042FD0(a1, 184, 1, &stru_1009267B8, v3);
}

uint64_t sub_10006B718(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xC8u);
}

uint64_t sub_10006B764(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xD0u);
}

BOOL sub_10006B7B0(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 712);
  if (!v1)
    return 0;
  if (v1 <= 0x7CF)
    return v1 > 0x15;
  return v1 < 0xFA0 && v1 != 2000;
}

uint64_t sub_10006B7EC(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10006676C;
  v2[3] = &unk_100917378;
  v2[4] = a1;
  return sub_100042FD0(a1, 208, 1, &stru_1009266D8, v2);
}

uint64_t sub_10006B84C(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1003116A4;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 24, 1, v3, 0);
}

uint64_t sub_10006B8A8()
{
  return 1;
}

uint64_t sub_10006B8B0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  __int128 v8;
  int v9;

  v8 = *a2;
  v9 = *((_DWORD *)a2 + 4);
  return (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char))(*(_QWORD *)a1 + 432))(a1, &v8, a3, a4, a5, 0, 0, 0, a6);
}

uint64_t sub_10006B924(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x73u);
}

uint64_t sub_10006B970(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x6Au);
}

uint64_t sub_10006B9BC(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xC4u);
}

uint64_t sub_10006BA08(uint64_t a1, __int16 a2, char a3, char a4, uint64_t a5)
{
  _QWORD v11[5];
  __int16 v12;
  char v13;
  char v14;

  if (!sub_10005F7EC())
    return 2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10006678C;
  v11[3] = &unk_100926798;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v11[4] = a5;
  return sub_100042FD0(a1, 115, 1, v11, 0);
}

uint64_t sub_10006BAB0(uint64_t a1, int a2)
{
  _QWORD v3[5];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10000F288;
  v3[3] = &unk_1009263D8;
  v3[4] = a1;
  v4 = a2;
  return sub_100042FD0(a1, 196, a2, v3, 0);
}

BOOL sub_10006BB10(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v2);
  }
  else if (a2 && a2[8])
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 8))(a2);
  }
  return v2 != 0;
}

uint64_t sub_10006BB6C()
{
  if (qword_100992BF8 != -1)
    dispatch_once(&qword_100992BF8, &stru_1009302E8);
  return qword_100992BF0;
}

uint64_t sub_10006BBAC()
{
  if (qword_100992C18 != -1)
    dispatch_once(&qword_100992C18, &stru_100930328);
  return qword_100992C10;
}

uint64_t sub_10006BBEC()
{
  if (qword_100992BA8 != -1)
    dispatch_once(&qword_100992BA8, &stru_100930248);
  return qword_100992BA0;
}

uint64_t sub_10006BC2C(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  NSObject *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  NSObject *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void **p_dst;
  __int128 v20;
  uint64_t v21;
  __int128 __dst;
  uint64_t v23;
  void *__p[2];
  char v25;
  uint8_t buf[4];
  void **v27;

  if (*(_BYTE *)(a4 + 1))
  {
    v7 = qword_1009999E0;
    if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
    {
      sub_100017BFC((unsigned __int8 *)a4);
      v8 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s was cancelled , notifying", buf, 0xCu);
      if (v25 < 0)
        operator delete(__p[0]);
    }
    v9 = *(_QWORD *)(a4 + 64);
    if (v9)
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(v9 + 16))(v9, a2, *(unsigned int *)(a4 + 16), *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 28), 2);
    v10 = *(_QWORD *)(a4 + 72);
    if (!v10)
      return 1;
    if (*((char *)a3 + 23) < 0)
    {
      sub_10003430C(&__dst, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      __dst = *a3;
      v23 = *((_QWORD *)a3 + 2);
    }
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD, _QWORD, uint64_t))(v10 + 16))(v10, &__dst, *(unsigned int *)(a4 + 16), *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 28), 2);
    if ((SHIBYTE(v23) & 0x80000000) == 0)
      return 1;
    p_dst = (void **)&__dst;
    goto LABEL_37;
  }
  v11 = *(_DWORD *)(a4 + 8);
  if (!v11 || v11 > *(_DWORD *)(a4 + 16))
  {
    v12 = *(_DWORD *)(a4 + 12);
    if (!v12 || v12 > *(_DWORD *)(a4 + 20))
    {
      v13 = *(_DWORD *)(a4 + 24);
      if (!v13 || v13 > *(_DWORD *)(a4 + 28))
        return 0;
    }
  }
  v15 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
  {
    sub_100017BFC((unsigned __int8 *)a4);
    v16 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v27 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s has completed, notifying", buf, 0xCu);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  v17 = *(_QWORD *)(a4 + 64);
  if (v17)
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(v17 + 16))(v17, a2, *(unsigned int *)(a4 + 16), *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 28), 1);
  v18 = *(_QWORD *)(a4 + 72);
  if (v18)
  {
    if (*((char *)a3 + 23) < 0)
    {
      sub_10003430C(&v20, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v20 = *a3;
      v21 = *((_QWORD *)a3 + 2);
    }
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD, _QWORD, uint64_t))(v18 + 16))(v18, &v20, *(unsigned int *)(a4 + 16), *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 28), 1);
    if (SHIBYTE(v21) < 0)
    {
      p_dst = (void **)&v20;
LABEL_37:
      operator delete(*p_dst);
    }
  }
  return 1;
}

void sub_10006BEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_10006BF1C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  unint64_t v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[7];
  _DWORD v26[2];
  _BYTE buf[12];
  __int16 v28;
  uint64_t v29;

  *(_QWORD *)buf = 0;
  sub_10004AD30((uint64_t)buf);
  v4 = *(int *)buf;
  v5 = *(__int16 *)&buf[4];
  v6 = *(_QWORD *)(a1 + 288);
  v7 = *(_QWORD *)(a1 + 296);
  *(_WORD *)&buf[6] = 0;
  v26[0] = v6;
  v26[1] = (unsigned __int16)v7;
  if ((sub_100072ACC((uint64_t)buf, (uint64_t)v26) & 0x80000000) != 0 || (v8 = v5 - v7 + 1000 * (v4 - v6), HIDWORD(v8)))
  {
    v9 = qword_1009999E0;
    if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
    {
      v24 = *(_QWORD *)(a1 + 296) + 1000 * *(_QWORD *)(a1 + 288);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v5 + 1000 * (int)v4;
      v28 = 2048;
      v29 = v24;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "readControllerStats: currentTime %llu fSetRxThresholdVSCTime %llu", buf, 0x16u);
    }
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v10 = v8 / 0x3E8;
    v11 = v8 % 0x3E8;
  }
  sub_1000065FC(a1);
  if ((a2 & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 320) && (*(_QWORD *)(a1 + 240) || *(_QWORD *)(a1 + 264)))
    {
      v12 = qword_1009999E0;
      if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "readScanStatsWithThreshold", buf, 2u);
      }
      v13 = sub_1000438A4();
      v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 3584))(v13, 0, 1);
      if ((_DWORD)v14)
      {
        v15 = qword_1009999E0;
        if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
          sub_1006F9070(v14, v15, v16, v17, v18, v19, v20, v21);
      }
    }
    else
    {
      v22 = qword_1009999E0;
      if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v11 + 1000 * v10;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Host generates scanRxThresholdVSE with values %llu", buf, 0xCu);
      }
      v23 = sub_10006BBEC();
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3321888768;
      v25[2] = sub_1004BB1D8;
      v25[3] = &unk_1009329E8;
      v25[4] = a1;
      v25[5] = v10;
      v25[6] = v11;
      sub_100041A34(v23, v25);
    }
  }
  else
  {
    sub_1000064E0(a1);
  }
}

BOOL sub_10006C1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v6;
  int v7;
  uint64_t v8;
  _OWORD v9[3];
  __int128 v10;
  void *__p[2];
  __int128 v12;
  uint64_t v13;
  void **v14;

  if (*(_BYTE *)(a1 + 376))
    return 1;
  if (*(_DWORD *)(a2 + 4))
    v6 = *(_QWORD *)(a2 + 64) == 0;
  else
    v6 = 1;
  if (v6)
    goto LABEL_13;
  v13 = 0;
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  v10 = 0u;
  memset(v9, 0, sizeof(v9));
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_100932C58);
  sub_1000399BC((uint64_t)off_100977FA8, *(_DWORD *)(a2 + 4), (uint64_t)v9);
  v7 = BYTE8(v9[0]);
  v2 = BYTE7(v9[0]) != 0;
  if (__p[1])
  {
    *(void **)&v12 = __p[1];
    operator delete(__p[1]);
  }
  v14 = (void **)&v10;
  sub_1000B5524(&v14);
  if (!v7)
  {
LABEL_13:
    switch(*(_DWORD *)(a2 + 56))
    {
      case 1:
        goto LABEL_32;
      case 2:
        goto LABEL_37;
      case 3:
        if (*(_BYTE *)(a1 + 197) || *(_BYTE *)(a1 + 198) || *(_BYTE *)(a1 + 200))
          return 1;
        return *(_BYTE *)(a1 + 204) != 0;
      case 4:
        if (!*(_BYTE *)(a1 + 197) && !*(_BYTE *)(a1 + 198) && !*(_BYTE *)(a1 + 200) && !*(_BYTE *)(a1 + 204))
          goto LABEL_27;
        goto LABEL_32;
      case 5:
        if (!*(_BYTE *)(a1 + 197) && !*(_BYTE *)(a1 + 198) && !*(_BYTE *)(a1 + 200) && !*(_BYTE *)(a1 + 204))
          goto LABEL_27;
        goto LABEL_37;
      case 6:
        if (*(_BYTE *)(a1 + 197) || *(_BYTE *)(a1 + 198) || *(_BYTE *)(a1 + 200) || *(_BYTE *)(a1 + 204))
          return 1;
LABEL_32:
        v2 = *(_DWORD *)(a1 + 276) == 1;
        break;
      case 7:
        if (*(_BYTE *)(a1 + 197) || *(_BYTE *)(a1 + 198) || *(_BYTE *)(a1 + 200) || *(_BYTE *)(a1 + 204))
          return 1;
LABEL_37:
        v8 = sub_100016B48();
        v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
        break;
      default:
LABEL_27:
        v2 = 0;
        break;
    }
  }
  return v2;
}

uint64_t sub_10006C3AC(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  uint64_t state64;

  state64 = 0;
  result = notify_get_state(*(_DWORD *)(a1 + 1356), &state64);
  if ((_DWORD)result)
    return 1;
  *a2 = state64 & 1;
  return result;
}

uint64_t sub_10006C3F8(uint64_t a1, unint64_t a2, int a3, int a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v17;
  uint64_t *v18[3];
  _QWORD v19[2];
  unint64_t v20;

  v19[1] = 0;
  v20 = a2;
  v19[0] = 0;
  sub_10003415C((uint64_t)v19, a1 + 40);
  v10 = *(_QWORD **)(a1 + 224);
  v9 = (_QWORD *)(a1 + 224);
  v8 = v10;
  if (!v10)
    goto LABEL_12;
  v11 = v9;
  do
  {
    v12 = v8[4];
    v13 = v12 >= a2;
    if (v12 >= a2)
      v14 = v8;
    else
      v14 = v8 + 1;
    if (v13)
      v11 = v8;
    v8 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 != v9 && v11[4] <= a2)
  {
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100935048);
    v17 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
    if (v17 && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      sub_1000340DC(v17, (uint64_t)v18);
      sub_1006FE300();
    }
  }
  else
  {
LABEL_12:
    v18[0] = (uint64_t *)&v20;
    v15 = sub_10002252C((uint64_t **)v9 - 1, &v20, (uint64_t)&unk_100740F58, v18);
    *((_DWORD *)v15 + 10) = a3;
    *((_DWORD *)v15 + 11) = a4;
  }
  return sub_100034234((uint64_t)v19);
}

void sub_10006C558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10006C57C(_QWORD *a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;

  if (a2)
  {
    v4 = a1 + 19;
    v3 = (_QWORD *)a1[19];
    if (v3)
    {
      v6 = (uint64_t **)(a1 + 18);
      v7 = a1 + 19;
      do
      {
        v8 = v3[4];
        v9 = v8 >= a2;
        if (v8 >= a2)
          v10 = v3;
        else
          v10 = v3 + 1;
        if (v9)
          v7 = v3;
        v3 = (_QWORD *)*v10;
      }
      while (*v10);
      if (v7 != v4 && v7[4] <= a2)
      {
        sub_1000040CC((uint64_t **)a1 + 18, v7);
        operator delete(v7);
        v11 = *v6;
        if (*v6 != v4)
        {
          do
          {
            if (v11[5] == a2)
              v11[5] = 0;
            v12 = (uint64_t *)v11[1];
            if (v12)
            {
              do
              {
                v13 = v12;
                v12 = (uint64_t *)*v12;
              }
              while (v12);
            }
            else
            {
              do
              {
                v13 = (uint64_t *)v11[2];
                v14 = *v13 == (_QWORD)v11;
                v11 = v13;
              }
              while (!v14);
            }
            v11 = v13;
          }
          while (v13 != v4);
        }
        v17 = (_QWORD *)a1[22];
        v16 = a1 + 22;
        v15 = v17;
        if (!v17)
          goto LABEL_34;
        v18 = v16;
        do
        {
          v19 = v15[4];
          v20 = v19 >= a2;
          if (v19 >= a2)
            v21 = v15;
          else
            v21 = v15 + 1;
          if (v20)
            v18 = v15;
          v15 = (_QWORD *)*v21;
        }
        while (*v21);
        if (v18 == v16 || v18[4] > a2)
LABEL_34:
          v18 = v16;
        sub_1000040CC((uint64_t **)v16 - 1, v18);
        operator delete(v18);
      }
    }
  }
}

unint64_t sub_10006C6C0(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  _QWORD *v5;
  __int16 v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  NSObject *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;

  v3 = HIBYTE(*(unsigned __int16 *)(a1 + 104));
  v4 = *(_WORD *)(a1 + 104);
  v5 = (_QWORD *)(a1 + 152);
  v6 = *(_WORD *)(a1 + 106);
  v7 = 1;
  while (1)
  {
    if (v6 == -2)
      v6 = 0;
    else
      ++v6;
    *(_WORD *)(a1 + 106) = v6;
    v8 = *(char *)(a2 + 23) >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    v9 = *v8;
    if (*v8)
    {
      v10 = v8 + 1;
      v11 = 5381;
      do
      {
        v11 = 33 * v11 + v9;
        v12 = *v10++;
        v9 = v12;
      }
      while (v12);
    }
    else
    {
      v11 = 5381;
    }
    v13 = 33 * (33 * (33 * (v3 + 33 * v11) + v4) + ((unsigned __int16)(v6 & 0xFF00) >> 8)) + v6;
    if ((unsigned __int16)(v13 - 1) <= 0xFFFCu)
    {
      v14 = (unint64_t)(unsigned __int16)v13 << 16;
      v15 = (_QWORD *)*v5;
      if (!*v5)
        break;
      v16 = v5;
      do
      {
        v17 = v15[4];
        v18 = v17 >= v14;
        if (v17 >= v14)
          v19 = v15;
        else
          v19 = v15 + 1;
        if (v18)
          v16 = v15;
        v15 = (_QWORD *)*v19;
      }
      while (*v19);
      if (v16 == v5 || v16[4] > v14)
        break;
    }
    v18 = v7++ >= 0xFF;
    if (v18)
      goto LABEL_30;
  }
  v24 = (unint64_t)(unsigned __int16)v13 << 16;
  if ((_WORD)v13)
  {
    v23 = (unint64_t)(unsigned __int16)v13 << 16;
    v25 = &v23;
    sub_10002252C((uint64_t **)(a1 + 144), &v23, (uint64_t)&unk_100740F58, (uint64_t **)&v25)[5] = v14;
    v25 = &v24;
    sub_10002252C((uint64_t **)(a1 + 168), &v24, (uint64_t)&unk_100740F58, (uint64_t **)&v25)[5] = v14;
    return v24;
  }
LABEL_30:
  v21 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006FE0E4((uint64_t)v8, v21, v22);
  return 0;
}

BOOL sub_10006C874(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _BOOL8 v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD v12[2];

  if (!a2)
    return 0;
  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 40);
  v4 = *(_QWORD **)(a1 + 120);
  v5 = (_QWORD *)(a1 + 128);
  if (v4 == (_QWORD *)(a1 + 128))
  {
    v7 = 0;
  }
  else
  {
    do
    {
      v6 = v4[7];
      v7 = v6 == a2;
      if (v6 == a2)
        break;
      v8 = (_QWORD *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v4[2];
          v10 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != v5);
  }
  sub_100034234((uint64_t)v12);
  return v7;
}

uint64_t sub_10006C924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 320);
  v4 = sub_10049C96C(*(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392), a2);
  sub_100067634(a1 + 384, v4, *(_QWORD *)(a1 + 392));
  return sub_100034234((uint64_t)v6);
}

void sub_10006C980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10006C994(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, (uint64_t)(a1 + 40));
  v11 = (_QWORD *)a1[48];
  v10 = a1[49];
  v16 = a3;
  if (v11 != (_QWORD *)v10)
  {
    while (*v11 != a2 || v16 != v11[1])
    {
      v11 += 4;
      if (v11 == (_QWORD *)v10)
        goto LABEL_7;
    }
  }
  if (v11 == (_QWORD *)v10)
  {
LABEL_7:
    v15 = a2;
    v16 = a3;
    v17 = a4;
    v18 = a5;
    if (v10 >= a1[50])
    {
      v12 = sub_10049C9D4(a1 + 48, (uint64_t)&v15);
    }
    else
    {
      *(_QWORD *)v10 = a2;
      *(_QWORD *)(v10 + 8) = a3;
      *(_DWORD *)(v10 + 16) = a4;
      v12 = v10 + 32;
      *(_QWORD *)(v10 + 24) = a5;
    }
    a1[49] = v12;
  }
  sub_100034234((uint64_t)v14);
  return 0;
}

void sub_10006CA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10006CA88(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  NSObject *v27;
  _BYTE *v28;
  void *v30[2];
  char v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  uint8_t buf[4];
  _BYTE *v36;
  _BYTE __p[12];
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10093AF78);
  v4 = sub_10006AEC0(off_100978158, (char **)&v32);
  if ((_DWORD)v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_1007096F0();
  }
  else
  {
    v5 = (uint64_t *)v32;
    v6 = v33;
    if (v32 != v33)
    {
      do
      {
        v7 = *v5;
        buf[0] = 0;
        v8 = sub_10034D650();
        sub_100091AE8(__p, "HasTS");
        v9 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint8_t *))(*(_QWORD *)v8 + 784))(v8, v7, __p, buf);
        if (SHIBYTE(v41) < 0)
          operator delete(*(void **)__p);
        v10 = qword_100999850;
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEBUG))
        {
          sub_10043E5F8(v7, v30);
          v23 = v30;
          if (v31 < 0)
            v23 = (void **)v30[0];
          *(_DWORD *)__p = 136446722;
          *(_QWORD *)&__p[4] = v23;
          v38 = 1024;
          v39 = buf[0];
          v40 = 1024;
          v41 = v9;
          _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%{public}s hasTS: %d, res: %d", __p, 0x18u);
          if (v31 < 0)
            operator delete(v30[0]);
        }
        if (!buf[0])
        {
          v12 = a2[1];
          v11 = (unint64_t)a2[2];
          if ((unint64_t)v12 >= v11)
          {
            v14 = v12 - *a2;
            if ((unint64_t)(v14 + 1) >> 61)
              abort();
            v15 = v11 - (_QWORD)*a2;
            v16 = v15 >> 2;
            if (v15 >> 2 <= (unint64_t)(v14 + 1))
              v16 = v14 + 1;
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
              v17 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v17 = v16;
            if (v17)
              v18 = (char *)sub_10007ABA0((uint64_t)(a2 + 2), v17);
            else
              v18 = 0;
            v19 = (uint64_t *)&v18[8 * v14];
            *v19 = v7;
            v13 = v19 + 1;
            v21 = (char *)*a2;
            v20 = (char *)a2[1];
            if (v20 != (char *)*a2)
            {
              do
              {
                v22 = *((_QWORD *)v20 - 1);
                v20 -= 8;
                *--v19 = v22;
              }
              while (v20 != v21);
              v20 = (char *)*a2;
            }
            *a2 = v19;
            a2[1] = v13;
            a2[2] = (uint64_t *)&v18[8 * v17];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v12 = v7;
            v13 = v12 + 1;
          }
          a2[1] = v13;
        }
        ++v5;
      }
      while (v5 != v6);
    }
    v30[0] = 0;
    v30[1] = 0;
    sub_10003415C((uint64_t)v30, a1 + 536);
    if (*(_QWORD *)(a1 + 600))
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10093AF38);
      v24 = sub_10006D488((uint64_t)off_1009778E0, *(_QWORD *)(a1 + 600), 0);
      sub_100034264((uint64_t)v30);
      if (v24)
      {
        v25 = (char *)a2[1];
        v26 = *a2;
        if (*a2 != (uint64_t *)v25)
        {
          while (*v26 != v24)
          {
            if (++v26 == (uint64_t *)v25)
            {
              v26 = a2[1];
              break;
            }
          }
        }
        if (v26 != (uint64_t *)v25)
        {
          v27 = qword_100999850;
          if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v24, __p);
            if (v41 >= 0)
              v28 = __p;
            else
              v28 = *(_BYTE **)__p;
            *(_DWORD *)buf = 136446210;
            v36 = v28;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Currently unpairing device %{public}s. Don't send it as part of the paired devices list", buf, 0xCu);
            if (SHIBYTE(v41) < 0)
              operator delete(*(void **)__p);
            v25 = (char *)a2[1];
          }
          if (v25 != (char *)(v26 + 1))
            memmove(v26, v26 + 1, v25 - (char *)(v26 + 1));
          a2[1] = (uint64_t *)(v25 - 8);
        }
      }
    }
    sub_100034234((uint64_t)v30);
  }
  if (v32)
  {
    v33 = (uint64_t *)v32;
    operator delete(v32);
  }
  return v4;
}

void sub_10006CEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_100034234((uint64_t)&a13);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10006CF04(uint64_t a1, const void **a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD v15[6];
  char v16;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 8);
  v6 = sub_10001F2AC(a1 + 96, a2);
  if (a1 + 104 != v6)
  {
    if (*(_QWORD *)(a1 + 72))
    {
      v7 = *(_QWORD **)(v6 + 56);
      v8 = (_QWORD *)(v6 + 64);
      if (v7 != (_QWORD *)(v6 + 64))
      {
        do
        {
          v9 = v7[4];
          v10 = sub_1000419F4();
          v15[0] = _NSConcreteStackBlock;
          v15[1] = 3221225472;
          v15[2] = sub_1000667F8;
          v15[3] = &unk_10091FF68;
          v15[4] = a1;
          v15[5] = v9;
          v16 = a3;
          sub_100041A34(v10, v15);
          v11 = (_QWORD *)v7[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v7[2];
              v13 = *v12 == (_QWORD)v7;
              v7 = v12;
            }
            while (!v13);
          }
          v7 = v12;
        }
        while (v12 != v8);
      }
    }
  }
  return sub_100034234((uint64_t)v17);
}

void sub_10006D014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10006D02C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  id *v5;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  if (v2 != v3)
  {
    v5 = (id *)(a1 + 160);
    do
    {
      if (*(unsigned __int8 *)(v2 + 8) == a2)
        objc_storeStrong(v5, *(id *)v2);
      v2 += 96;
    }
    while (v2 != v3);
  }
}

void sub_10006D084(uint64_t a1)
{
  unsigned int v2;
  int v3;
  uint64_t v5;
  uint64_t i;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *j;
  unsigned int v12;
  BOOL v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(_DWORD *)(a1 + 128);
    v3 = *(_DWORD *)(a1 + 132);
    if (v2 && v3 != 0 && 100 * v3 / v2 >= 0x1F)
    {
      v5 = *(_QWORD *)(a1 + 64);
      for (i = *(_QWORD *)(a1 + 72); v5 != i; v5 += 96)
      {
        if (*(unsigned __int8 *)(v5 + 8) - 15 <= 1)
        {
          v7 = *(id *)(v5 + 72);
          v14 = 0u;
          v15 = 0u;
          v16 = 0u;
          v17 = 0u;
          v8 = v7;
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
          if (v9)
          {
            v10 = *(_QWORD *)v15;
            do
            {
              for (j = 0; j != v9; j = (char *)j + 1)
              {
                if (*(_QWORD *)v15 != v10)
                  objc_enumerationMutation(v8);
                v12 = objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)j), "longLongValue");
                v13 = v12 - 131078 > 9 || ((1 << (v12 - 6)) & 0x203) == 0;
                if (!v13
                  && ((*(_DWORD *)(v5 + 84) - 1) < 0x12B
                   || (*(_DWORD *)(v5 + 88) - 1) <= 0x12A))
                {
                  *(_BYTE *)(a1 + 200) = 1;
                }
              }
              v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
            }
            while (v9);
          }

        }
      }
    }
  }
}

void sub_10006D228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10006D250(uint64_t a1, unint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];
  _BYTE v17[24];
  _QWORD v18[2];

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 56);
  v6 = *(_QWORD **)(a1 + 16832);
  if (v6)
  {
    v7 = a1 + 16832;
    do
    {
      v8 = v6[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v6;
      else
        v10 = v6 + 1;
      if (v9)
        v7 = (uint64_t)v6;
      v6 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != a1 + 16832 && *(_QWORD *)(v7 + 32) <= a2 && *(_BYTE *)(a1 + 41))
    {
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_10093CEE0);
      v11 = sub_10006EB5C((uint64_t)off_100978168, a2);
      v12 = os_log_type_enabled((os_log_t)qword_1009998C0, OS_LOG_TYPE_DEBUG);
      if (v11)
      {
        if (v12)
        {
          sub_1000340DC(a2, (uint64_t)v17);
          sub_10070F7C0();
        }
        v13 = *(_QWORD *)(v7 + 48);
        if (v13)
          sub_10003C37C(*(_QWORD *)(v7 + 48));
        *(_BYTE *)(v13 + 336) |= a3 == 16;
        if (a3 == 8 || a3 == 4)
          sub_1005FE304(a1, a2);
        else
          sub_1005FE810((_QWORD *)a1, a2);
        sub_100056AAC((unsigned int *)v13);
      }
      else
      {
        if (v12)
        {
          sub_1000340DC(a2, (uint64_t)v17);
          sub_10070F818();
        }
        v14 = *(_QWORD *)(a1 + 48);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        v16[2] = sub_100604918;
        v16[3] = &unk_100917378;
        v16[4] = a1;
        sub_100041A34(v14, v16);
      }
    }
  }
  return sub_100034234((uint64_t)v18);
}

void sub_10006D450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10006D488(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *i;
  uint64_t v15;
  _QWORD v17[2];

  if (!a2)
  {
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006F4184(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 168);
  for (i = *(uint64_t **)(a1 + 144); i != *(uint64_t **)(a1 + 152); ++i)
  {
    v15 = *i;
    if ((((unint64_t)*(unsigned __int8 *)(*i + 128) << 40) | ((unint64_t)*(unsigned __int8 *)(*i + 129) << 32) | ((unint64_t)*(unsigned __int8 *)(*i + 130) << 24) | ((unint64_t)*(unsigned __int8 *)(*i + 131) << 16) | ((unint64_t)*(unsigned __int8 *)(*i + 132) << 8) | *(unsigned __int8 *)(*i + 133)) == a2)
      goto LABEL_11;
  }
  if (a3)
    operator new();
  v15 = 0;
LABEL_11:
  sub_100034234((uint64_t)v17);
  return v15;
}

void sub_10006D660()
{
  operator delete();
}

uint64_t sub_10006D694(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  BOOL v11;
  uint64_t *v12;
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 48);
  v6 = *(uint64_t **)(a1 + 112);
  v4 = (uint64_t **)(a1 + 112);
  v5 = v6;
  if (v6 != (uint64_t *)(v4 + 1))
  {
    do
    {
      v7 = v5[4];
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092FEE8);
      v8 = sub_100021398(qword_100977B48, v7);
      v9 = (uint64_t *)v5[1];
      if (v8 == a2)
      {
        v12 = v5;
        if (v9)
        {
          do
          {
            v10 = (uint64_t **)v9;
            v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (uint64_t **)v12[2];
            v11 = *v10 == v12;
            v12 = (uint64_t *)v10;
          }
          while (!v11);
        }
        sub_1000040CC(v4, v5);
        operator delete(v5);
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_10092FEE8);
        sub_10050ABD0(qword_100977B48, v7);
      }
      else if (v9)
      {
        do
        {
          v10 = (uint64_t **)v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (uint64_t **)v5[2];
          v11 = *v10 == v5;
          v5 = (uint64_t *)v10;
        }
        while (!v11);
      }
      v5 = (uint64_t *)v10;
    }
    while (v10 != v4 + 1);
  }
  return sub_100034234((uint64_t)v14);
}

void sub_10006D7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_10006D80C(uint64_t a1, unsigned __int8 *a2)
{
  return sub_100072C28(a2, a1);
}

void sub_10006D81C(_BYTE *a1)
{
  *a1 = 1;
  sub_1000477B8();
}

uint64_t sub_10006D828(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

uint64_t sub_10006D830(uint64_t a1, void **a2)
{
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_100930780);
  sub_10006A8A0((uint64_t)off_100978188, a2);
  return 0;
}

uint64_t sub_10006D888(uint64_t a1, uint64_t **a2)
{
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_1009307A0);
  return sub_10006CA88((uint64_t)off_100978148, a2);
}

uint64_t sub_10006D8D8(uint64_t a1, _BYTE *a2)
{
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_1009307C0);
  *a2 = sub_10006D828((uint64_t)off_100978128);
  return 0;
}

uint64_t sub_10006D930(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  unint64_t v8;
  _QWORD *v9;
  BOOL v10;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, (uint64_t)(a1 + 52));
  v9 = (_QWORD *)a1[60];
  v8 = a1[61];
  v21 = *a3;
  v22 = *((_QWORD *)a3 + 2);
  if (v9 != (_QWORD *)v8)
  {
    while (1)
    {
      if (*v9 == a2)
      {
        v10 = (_QWORD)v21 == v9[1] && *((_QWORD *)&v21 + 1) == v9[2];
        if (v10 && v22 == v9[3])
          break;
      }
      v9 += 6;
      if (v9 == (_QWORD *)v8)
        goto LABEL_13;
    }
  }
  if (v9 == (_QWORD *)v8)
  {
LABEL_13:
    v17 = *a3;
    v18 = *((_QWORD *)a3 + 2);
    v16 = a2;
    v19 = -1;
    v20 = a4;
    if (v8 >= a1[62])
    {
      v13 = sub_10047BBFC(a1 + 60, (uint64_t)&v16);
    }
    else
    {
      *(_QWORD *)v8 = a2;
      v12 = v17;
      *(_QWORD *)(v8 + 24) = v18;
      *(_OWORD *)(v8 + 8) = v12;
      *(_DWORD *)(v8 + 32) = -1;
      *(_QWORD *)(v8 + 40) = a4;
      v13 = v8 + 48;
    }
    a1[61] = v13;
  }
  sub_100034234((uint64_t)v15);
  return 0;
}

void sub_10006DA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10006DA5C(uint64_t a1)
{
  sub_1000206C4(a1);
  operator delete();
}

uint64_t sub_10006DA84(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;

  result = sub_1000063DC();
  v3 = result - *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = result;
  *(_QWORD *)(a1 + 56) += v3;
  v4 = *(unsigned __int8 *)(a1 + 81);
  if (v4 <= 0x20)
  {
    if (((1 << v4) & 0x100010002) != 0)
    {
      v5 = (_QWORD *)(a1 + 48);
    }
    else
    {
      if (((1 << v4) & 0x110) == 0)
        return result;
      v5 = (_QWORD *)(a1 + 40);
    }
    *v5 += v3;
  }
  return result;
}

uint64_t sub_10006DB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)v4 || objc_msgSend(*(id *)(v4 + 88), "count"))
    return 1;
  else
    return sub_100068A30(*(_QWORD *)(a3 + 8), *(_QWORD *)(a4 + 8)) ^ 1;
}

BOOL sub_10006DB60(uint64_t a1)
{
  _BYTE *v1;
  int v2;
  int v4;

  v1 = *(_BYTE **)(a1 + 8);
  if (v1[288])
  {
    v2 = v1[283];
    return v2 != 0;
  }
  v4 = *(unsigned __int8 *)(a1 + 81);
  if (v4 != 16)
  {
    if (v4 != 32)
      return 0;
    if (v1[1] && v1[120])
    {
      v2 = v1[136];
      return v2 != 0;
    }
  }
  return *(int *)(a1 + 96) < 4;
}

uint64_t sub_10006DBC4(uint64_t result, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;

  v10 = a2;
  v2 = *(_QWORD **)(result + 192);
  v9 = (_QWORD *)(result + 200);
  if (v2 != (_QWORD *)(result + 200))
  {
    do
    {
      v3 = (_QWORD *)v2[20];
      if (v3 != v2 + 21)
      {
        do
        {
          result = sub_100015ECC((uint64_t)(v3 + 5), &v10);
          if (!v3[7])
            operator new();
          v4 = (_QWORD *)v3[1];
          if (v4)
          {
            do
            {
              v5 = v4;
              v4 = (_QWORD *)*v4;
            }
            while (v4);
          }
          else
          {
            do
            {
              v5 = (_QWORD *)v3[2];
              v6 = *v5 == (_QWORD)v3;
              v3 = v5;
            }
            while (!v6);
          }
          v3 = v5;
        }
        while (v5 != v2 + 21);
      }
      v7 = (_QWORD *)v2[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v2[2];
          v6 = *v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v6);
      }
      v2 = v8;
    }
    while (v8 != v9);
  }
  return result;
}

void sub_10006DD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1005E7324((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_10006DDEC(_QWORD *a1, NSObject *a2)
{
  dispatch_time_t v4;
  void (__cdecl *v5)(void *);

  v4 = dispatch_time(0, 1000000 * a1[2]);
  v5 = (void (__cdecl *)(void *))(*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  dispatch_after_f(v4, a2, a1, v5);
}

double *sub_10006DE50(double *result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];

  if (a2 == 22)
  {
    v9[3] = v3;
    v9[4] = v4;
    v5 = result;
    v6 = result[232];
    if (a3)
    {
      if (v6 == 0.0)
      {
        result = (double *)+[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
        *((_QWORD *)v5 + 232) = v7;
      }
    }
    else if (v6 > 0.0)
    {
      v9[0] = 0;
      if (qword_100977FD0 != -1)
        dispatch_once(&qword_100977FD0, &stru_10093F4D8);
      sub_10039F78C(qword_100977FC8, 0x16u, (_DWORD *)v9 + 1, v9);
      v8 = sub_100065478();
      result = (double *)(*(uint64_t (**)(uint64_t, double, float, float))(*(_QWORD *)v8 + 448))(v8, v5[232], *((float *)v9 + 1), *(float *)v9);
      v5[232] = 0.0;
    }
  }
  return result;
}

void sub_10006DF04(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
    sub_100718844();
  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100066814;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_10006DFA0(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  if (os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_DEBUG))
    sub_100718308();
  v4 = sub_10006BB6C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100058B1C;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

BOOL sub_10006E040(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _BOOL8 result;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v1 = *(_QWORD **)(a1 + 2040);
  v2 = (_QWORD *)(a1 + 2048);
  if (v1 == (_QWORD *)(a1 + 2048))
    return 0;
  do
  {
    result = *(_BYTE *)(*(_QWORD *)(v1[5] + 8) + 122) != 0;
    if (*(_BYTE *)(*(_QWORD *)(v1[5] + 8) + 122))
      break;
    v4 = (_QWORD *)v1[1];
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (_QWORD *)v1[2];
        v6 = *v5 == (_QWORD)v1;
        v1 = v5;
      }
      while (!v6);
    }
    v1 = v5;
  }
  while (v5 != v2);
  return result;
}

uint64_t sub_10006E0AC(uint64_t a1, uint64_t *a2, int a3)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;

  if (*((char *)a2 + 23) < 0)
  {
    v3 = a2[1];
    if (!v3)
      return 3;
    a2 = (uint64_t *)*a2;
  }
  else
  {
    v3 = *((unsigned __int8 *)a2 + 23);
    if (!*((_BYTE *)a2 + 23))
      return 3;
  }
  if (v3 >= 9)
    v3 = 9;
  v4 = (uint64_t *)((char *)a2 + v3);
  v5 = a2;
  v6 = v4;
  do
  {
    if (*(_BYTE *)v5 == 99)
    {
      v7 = &_mh_execute_header.magic + 1;
      while (v7 != 9)
      {
        if ((uint64_t *)((char *)v5 + v7) == v4)
          return (v6 == v4 || v6 != a2) && a3 != 32;
        v8 = *((unsigned __int8 *)v5 + v7);
        v9 = aComApple_0[v7++];
        if (v8 != v9)
          goto LABEL_10;
      }
      v6 = v5;
    }
LABEL_10:
    v5 = (uint64_t *)((char *)v5 + 1);
  }
  while (v5 != v4);
  return (v6 == v4 || v6 != a2) && a3 != 32;
}

void sub_10006E160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  v4 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 384))(v4) & 1) == 0)
  {
    v5 = *(_QWORD *)(a3 + 8);
    if (!*(_BYTE *)(v5 + 137))
    {
      if (!*(_BYTE *)(v5 + 143))
        operator new();
      v6 = qword_100999948;
      if (os_log_type_enabled((os_log_t)qword_100999948, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "ExposureNotification client does not have a decay timer", v7, 2u);
      }
    }
  }
}

uint64_t sub_10006E268(uint64_t result, unint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  _BOOL8 v14;
  void **v15;
  void **v16;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  void **v20;

  v3 = *(_QWORD **)(result + 2048);
  if (v3)
  {
    v6 = result;
    v7 = result + 2048;
    do
    {
      v8 = v3[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v3;
      else
        v10 = v3 + 1;
      if (v9)
        v7 = (uint64_t)v3;
      v3 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != result + 2048 && *(_QWORD *)(v7 + 32) <= a2)
    {
      v11 = *(_QWORD *)(v7 + 40);
      sub_10006DA84(v11);
      *(_BYTE *)(v11 + 81) = a3;
      if (a3 == 16)
      {
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 8) + 143);
        v13 = qword_100999828;
        v14 = os_log_type_enabled((os_log_t)qword_100999828, OS_LOG_TYPE_INFO);
        if (v12)
        {
          if (v14)
          {
            sub_1000340DC(*(_QWORD *)(v7 + 32), (uint64_t)__p);
            if (v18 >= 0)
              v15 = __p;
            else
              v15 = (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            v20 = v15;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Session \"%{public}s\" does not need a scan level bump since its doing ContactTracing", buf, 0xCu);
            if (v18 < 0)
              operator delete(__p[0]);
          }
        }
        else
        {
          if (v14)
          {
            sub_1000340DC(a2, (uint64_t)__p);
            v16 = v18 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            v20 = v16;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is now back at scan level 1", buf, 0xCu);
            if (v18 < 0)
              operator delete(__p[0]);
          }
          *(_DWORD *)(v11 + 96) = 1;
        }
        sub_10006E160(v14, a2, v11);
      }
      return sub_100004AE4(v6, 0);
    }
  }
  return result;
}

uint64_t sub_10006E440(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t result;
  unsigned int v4;

  result = 7;
  if (a2 && a3)
  {
    v4 = 100 * a3 / a2;
    if (v4 <= 0x4B)
    {
      if (v4 <= 0x32)
      {
        if (v4 <= 0x22)
        {
          if (v4 <= 0xA)
          {
            if (v4 <= 4)
            {
              if (v4 > 1)
                return 5;
              else
                return 6;
            }
            else
            {
              return 4;
            }
          }
          else
          {
            return 3;
          }
        }
        else
        {
          return 2;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10006E4B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  __int128 *v4;
  char v5;
  __int128 v6;
  unsigned __int8 v7;
  void *v8;
  void **v9;
  char v10;
  void **v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  void **v18;
  uint64_t v19;
  char *v20;
  BOOL v21;
  char v22;
  __int128 *v23;
  __int128 v24;
  unsigned __int8 v25;
  void *v26;
  char *v27;
  char v28;
  void **v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  char *v38;
  void *v40;
  __int128 *v42;
  __int128 *v43;
  void *v44;
  uint64_t v45;
  unsigned __int8 v46;
  void *__p[2];
  uint64_t v48;

  v2 = a2;
  v3 = *(unsigned __int8 *)(a1 + 2168);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      v4 = *(__int128 **)(a1 + 2176);
      v42 = *(__int128 **)(a1 + 2184);
      if (v4 == v42)
      {
        v22 = 1;
        return v22 & 1;
      }
      v5 = 0;
      while (1)
      {
        __p[1] = 0;
        v48 = 0;
        __p[0] = 0;
        if (*((char *)v4 + 23) < 0)
        {
          sub_10003430C(__p, *(void **)v4, *((_QWORD *)v4 + 1));
        }
        else
        {
          v6 = *v4;
          v48 = *((_QWORD *)v4 + 2);
          *(_OWORD *)__p = v6;
        }
        sub_1000340DC(v2, (uint64_t)&v44);
        v7 = v46;
        v8 = v44;
        v9 = (v46 & 0x80u) == 0 ? &v44 : (void **)v44;
        v10 = HIBYTE(v48);
        v11 = v48 >= 0 ? __p : (void **)__p[0];
        v12 = v48 >= 0 ? (void *)HIBYTE(v48) : __p[1];
        if (v12)
          break;
        v16 = 0;
        if ((v46 & 0x80) != 0)
          goto LABEL_36;
LABEL_37:
        v21 = v16 != -1;
        if (v10 < 0)
          operator delete(__p[0]);
        v5 |= v21;
        v4 = (__int128 *)((char *)v4 + 24);
        if (v4 == v42)
        {
          v22 = v5 ^ 1;
          return v22 & 1;
        }
      }
      if ((v46 & 0x80u) == 0)
        v13 = v46;
      else
        v13 = v45;
      v14 = (char *)v9 + v13;
      if (v13 >= (uint64_t)v12)
      {
        v40 = v44;
        v17 = *(unsigned __int8 *)v11;
        v18 = v9;
        do
        {
          v19 = v13 - (_QWORD)v12;
          if (v19 == -1)
            break;
          v20 = (char *)memchr(v18, v17, v19 + 1);
          if (!v20)
            break;
          v15 = v20;
          if (!memcmp(v20, v11, (size_t)v12))
            goto LABEL_31;
          v18 = (void **)(v15 + 1);
          v13 = v14 - (v15 + 1);
        }
        while (v13 >= (uint64_t)v12);
        v15 = v14;
LABEL_31:
        v8 = v40;
        v2 = a2;
      }
      else
      {
        v15 = (char *)v9 + v13;
      }
      if (v15 == v14)
        v16 = -1;
      else
        v16 = v15 - (char *)v9;
      if ((v7 & 0x80) == 0)
        goto LABEL_37;
LABEL_36:
      operator delete(v8);
      v10 = HIBYTE(v48);
      goto LABEL_37;
    }
LABEL_78:
    v22 = 0;
    return v22 & 1;
  }
  v23 = *(__int128 **)(a1 + 2176);
  v43 = *(__int128 **)(a1 + 2184);
  if (v23 == v43)
    goto LABEL_78;
  do
  {
    __p[1] = 0;
    v48 = 0;
    __p[0] = 0;
    if (*((char *)v23 + 23) < 0)
    {
      sub_10003430C(__p, *(void **)v23, *((_QWORD *)v23 + 1));
    }
    else
    {
      v24 = *v23;
      v48 = *((_QWORD *)v23 + 2);
      *(_OWORD *)__p = v24;
    }
    sub_1000340DC(v2, (uint64_t)&v44);
    v25 = v46;
    v26 = v44;
    if ((v46 & 0x80u) == 0)
      v27 = (char *)&v44;
    else
      v27 = (char *)v44;
    v28 = HIBYTE(v48);
    if (v48 >= 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    if (v48 >= 0)
      v30 = HIBYTE(v48);
    else
      v30 = (int64_t)__p[1];
    if (v30)
    {
      if ((v46 & 0x80u) == 0)
        v31 = v46;
      else
        v31 = v45;
      v32 = &v27[v31];
      if (v31 >= v30)
      {
        v35 = *(unsigned __int8 *)v29;
        v36 = v27;
        do
        {
          v37 = v31 - v30;
          if (v37 == -1)
            break;
          v38 = (char *)memchr(v36, v35, v37 + 1);
          if (!v38)
            break;
          v33 = v38;
          if (!memcmp(v38, v29, v30))
            goto LABEL_67;
          v36 = v33 + 1;
          v31 = v32 - (v33 + 1);
        }
        while (v31 >= v30);
        v33 = v32;
LABEL_67:
        v2 = a2;
      }
      else
      {
        v33 = &v27[v31];
      }
      if (v33 == v32)
        v34 = -1;
      else
        v34 = v33 - v27;
    }
    else
    {
      v34 = 0;
    }
    v22 = v34 != -1;
    if ((v25 & 0x80) != 0)
    {
      operator delete(v26);
      if (v48 < 0)
LABEL_77:
        operator delete(__p[0]);
    }
    else if (v28 < 0)
    {
      goto LABEL_77;
    }
    if (v34 != -1)
      break;
    v23 = (__int128 *)((char *)v23 + 24);
  }
  while (v23 != v43);
  return v22 & 1;
}

void sub_10006E7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10006E7EC(int a1)
{
  uint64_t v2;
  _QWORD v3[4];
  int v4;

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000668A4;
  v3[3] = &unk_100918130;
  v4 = a1;
  sub_100041A34(v2, v3);
}

void sub_10006E84C(int a1)
{
  uint64_t v2;
  _QWORD v3[4];
  int v4;

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000668F4;
  v3[3] = &unk_100918130;
  v4 = a1;
  sub_100041A34(v2, v3);
}

BOOL sub_10006E8AC(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = *(_QWORD **)(a1 + 232);
  v2 = (_QWORD *)(a1 + 232);
  v3 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == v2 || v5[4] > a2)
LABEL_12:
    v5 = v2;
  return v5 != v2;
}

uint64_t sub_10006E8F8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  sub_10000A0C8(15, a2);
  v6 = sub_10000A1A4(a1, a2, 0);
  if (!v6)
    return 12;
  v7 = v6;
  result = sub_1000052D0(v6, a2, a3);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(v7 + 24))
    {
      if (*(_QWORD *)(v7 + 96))
        sub_10006F07C(a1);
    }
    return 0;
  }
  return result;
}

BOOL sub_10006E978(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = *(_QWORD **)(a1 + 232);
  v2 = (_QWORD *)(a1 + 232);
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && *(_BYTE *)(v5[5] + 25) != 0;
}

uint64_t sub_10006E9D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v11;
  uint64_t v12;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
    return 0;
  v3 = sub_10006AB38(a2);
  if ((_DWORD)v3)
  {
    v4 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a2 + 88);
      v11 = 138412290;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Overriding TCC requirement for %@ (DeviceAccess CBManager)", (uint8_t *)&v11, 0xCu);
    }
  }
  if (*(_BYTE *)(a2 + 505))
  {
    v6 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a2 + 88);
      v11 = 138412290;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Overriding TCC requirement for %@ (DeviceAccess for Media extension)", (uint8_t *)&v11, 0xCu);
    }
    v3 = 1;
  }
  if (*(_BYTE *)(a2 + 506))
  {
    v8 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a2 + 88);
      v11 = 138412290;
      v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding TCC requirement for %@ (DeviceAccess Per Accessory extension)", (uint8_t *)&v11, 0xCu);
    }
    return 1;
  }
  return v3;
}

BOOL sub_10006EB5C(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = *(_QWORD **)(a1 + 232);
  v2 = (_QWORD *)(a1 + 232);
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && *(_BYTE *)(v5[5] + 24) != 0;
}

uint64_t sub_10006EBB4(uint64_t a1, unint64_t a2, _DWORD *a3, _BYTE *a4)
{
  _QWORD *v4;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;

  *a3 = 0;
  v4 = *(_QWORD **)(a1 + 232);
  if (v4)
  {
    v8 = (_QWORD *)(a1 + 232);
    do
    {
      v9 = v4[4];
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = v4;
      else
        v11 = v4 + 1;
      if (v10)
        v8 = v4;
      v4 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != (_QWORD *)(a1 + 232) && v8[4] <= a2)
    {
      v12 = (_BYTE *)v8[5];
      *a4 = 0;
      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v12 + 16))(v12)
        || !sub_10006AB38((uint64_t)v12))
      {
        if (!v12[36])
          goto LABEL_31;
        if (qword_100978130 != -1)
          dispatch_once(&qword_100978130, &stru_100924BF0);
        v13 = sub_10002527C((uint64_t)off_100978128);
        if (v13 == 1)
        {
          *a4 = *(_BYTE *)(a1 + 179);
        }
        else
        {
LABEL_31:
          if (v12[37] || !*(_BYTE *)(a1 + 179))
          {
            if (qword_100978130 != -1)
              dispatch_once(&qword_100978130, &stru_100924BF0);
            v13 = sub_10002527C((uint64_t)off_100978128);
          }
          else
          {
            v13 = 0;
          }
        }
      }
      else
      {
        v13 = sub_100408E08((uint64_t)v12);
        if (v13)
          v13 = *(unsigned __int8 *)(a1 + 179) ^ 1;
      }
      *a3 = v13;
    }
  }
  return 0;
}

void sub_10006ED08(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;

  v5 = *(_QWORD **)(a1 + 232);
  v3 = (_QWORD *)(a1 + 232);
  v4 = v5;
  if (!v5)
    goto LABEL_36;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v8)
      v6 = v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != v3 && v6[4] <= a2)
  {
    v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v6[5] + 16))(v6[5]);
    v11 = v6[5];
    if (v10 == 3)
    {
      if (v11 && *(_QWORD *)(v11 + 224))
      {
        if (qword_100978150 != -1)
          dispatch_once(&qword_100978150, &stru_100924D50);
        sub_1005B2CE0(off_100978148, *(_QWORD *)(v11 + 224));
        *(_QWORD *)(v11 + 224) = 0;
      }
      else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      {
        sub_1006DD0E0();
      }
    }
    else if (*(_DWORD *)(v11 + 32))
    {
      v12 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(a2, (uint64_t)__p);
        if (v15 >= 0)
          v13 = __p;
        else
          v13 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v17 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Unregistering pairing agent for session \"%{public}s\"", buf, 0xCu);
        if (v15 < 0)
          operator delete(__p[0]);
        v11 = v6[5];
      }
      *(_DWORD *)(v11 + 32) = 0;
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_100924C90);
      sub_100697958(qword_1009778B0, a2);
    }
  }
  else
  {
LABEL_36:
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_FAULT))
      sub_1006DD068(a2);
  }
}

void sub_10006EF24(uint64_t a1, unint64_t a2)
{
  if (sub_10000A1A4(a1, a2, 0))
  {
    if (qword_100977FC0 != -1)
      dispatch_once(&qword_100977FC0, &stru_100924E50);
    sub_100014F60(qword_100977FB8, a2);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006DD010();
  }
}

BOOL sub_10006EFB4(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD **)(a1 + 232);
  v2 = (_QWORD *)(a1 + 232);
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && (v9 = v5[5]) != 0 && *(_QWORD *)(v9 + 496) != 0;
}

uint64_t sub_10006F010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;

  if (!*(_QWORD *)(a2 + 120))
    return 0;
  result = 0;
  if (a3)
  {
    if (*(_BYTE *)(a2 + 24))
    {
      v9 = sub_100069D20();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, a3, a4, a5);
      return 1;
    }
  }
  return result;
}

void sub_10006F07C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  id v16;
  NSObject *v17;
  _BOOL4 v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  uint8_t buf[4];
  void *v30;

  if (*(_BYTE *)(a1 + 178))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v5 = *(_QWORD **)(a1 + 224);
    if (v5 != (_QWORD *)(a1 + 232))
    {
      do
      {
        v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v5[5] + 16))(v5[5]);
        v7 = v5[5];
        if (v6)
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v7 + 16))(v5[5]) == 1)
          {
            v8 = (_QWORD *)v5[5];
            if (*((_BYTE *)v8 + 24))
            {
              if (v8[12] && (*(unsigned int (**)(_QWORD))(*v8 + 40))(v5[5]))
              {
                v9 = (*(uint64_t (**)(_QWORD *))(*v8 + 48))(v8);
                v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
                if (v10)
                {
                  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ - %@"), v8[11], v8[12]));
                  objc_msgSend(v4, "setObject:forKey:", v10, v11);
                  goto LABEL_15;
                }
                goto LABEL_16;
              }
            }
          }
        }
        else if (*(_BYTE *)(v7 + 24)
               && *(_QWORD *)(v7 + 96)
               && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v7 + 40))(v5[5]))
        {
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
          v10 = (void *)objc_claimAutoreleasedReturnValue(v12);
          if (v10)
          {
            v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ - %@"), *(_QWORD *)(v7 + 88), *(_QWORD *)(v7 + 96)));
            objc_msgSend(v3, "setObject:forKey:", v10, v11);
LABEL_15:

          }
LABEL_16:

        }
        v13 = (_QWORD *)v5[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v5[2];
            v15 = *v14 == (_QWORD)v5;
            v5 = v14;
          }
          while (!v15);
        }
        v5 = v14;
      }
      while (v14 != (_QWORD *)(a1 + 232));
    }
    if (objc_msgSend(v3, "count"))
      objc_msgSend(v2, "setObject:forKey:", v3, CFSTR("centralSessions"));
    if (objc_msgSend(v4, "count"))
      objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("peripheralSessions"));
    v16 = objc_msgSend(v2, "count");
    v17 = qword_1009998F0;
    v18 = os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      if (v18)
      {
        v19 = sub_1002E6B5C();
        v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "absoluteString"));
        *(_DWORD *)buf = 138412290;
        v30 = v21;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Writing restoration data to %@", buf, 0xCu);

      }
      v22 = sub_1002E6B5C();
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      objc_msgSend(v2, "writeToURL:error:", v23, 0);
    }
    else
    {
      if (v18)
      {
        v24 = sub_1002E6B5C();
        v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "absoluteString"));
        *(_DWORD *)buf = 138412290;
        v30 = v26;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "No more restorable session data, removing restoration data at %@", buf, 0xCu);

      }
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
      v27 = sub_1002E6B5C();
      v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      objc_msgSend(v23, "removeItemAtURL:error:", v28, 0);

    }
  }
}

void sub_10006F410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10006F498(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD v12[7];
  char v13;
  int v14;
  uint64_t buf;

  v14 = 0;
  sub_10006EBB4(a1, a2, &v14, &v13);
  if (v14)
  {
    v4 = *(_QWORD **)(a1 + 232);
    if (v4)
    {
      v5 = a1 + 232;
      do
      {
        v6 = v4[4];
        v7 = v6 >= a2;
        if (v6 >= a2)
          v8 = v4;
        else
          v8 = v4 + 1;
        if (v7)
          v5 = (uint64_t)v4;
        v4 = (_QWORD *)*v8;
      }
      while (*v8);
      if (v5 != a1 + 232 && *(_QWORD *)(v5 + 32) <= a2)
      {
        v9 = *(_QWORD *)(v5 + 40);
        v10 = sub_1000419F4();
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_100066944;
        v12[3] = &unk_1009210D8;
        v12[4] = a1;
        v12[5] = a2;
        v12[6] = v9;
        sub_100041A34(v10, v12);
      }
    }
  }
  else
  {
    v11 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      buf = 67109120;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Not sending enqueued messages. powerState :%d", (uint8_t *)&buf, 8u);
    }
  }
}

BOOL sub_10006F5E4(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD **)(a1 + 232);
  v2 = (_QWORD *)(a1 + 232);
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && (v9 = v5[5]) != 0 && *(_BYTE *)(v9 + 24) && *(_QWORD *)(v9 + 96) != 0;
}

BOOL sub_10006F648(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD **)(a1 + 232);
  v2 = (_QWORD *)(a1 + 232);
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && (v9 = v5[5]) != 0 && *(_BYTE *)(v9 + 73) != 0;
}

uint64_t sub_10006F6A4(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = *(_QWORD **)(a1 + 232);
  v2 = (_QWORD *)(a1 + 232);
  v3 = v4;
  if (!v4)
    return 1;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != v2 && v5[4] <= a2)
    return *(unsigned __int8 *)(v5[5] + 129);
  else
    return 1;
}

uint64_t sub_10006F6F4(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = *(_QWORD **)(a1 + 232);
  v2 = (_QWORD *)(a1 + 232);
  v3 = v4;
  if (!v4)
    return 4;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != v2 && v5[4] <= a2)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v5[5] + 16))(v5[5]);
  else
    return 4;
}

uint64_t sub_10006F748(uint64_t a1, unint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  id v10;
  void *v11;

  v2 = *(_DWORD *)(a2 + 140) - 1;
  if (v2 < 5 && ((0x17u >> v2) & 1) != 0)
    return 1;
  v5 = *(_QWORD **)(a1 + 232);
  v3 = (_QWORD *)(a1 + 232);
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v8)
      v6 = v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || v6[4] > a2)
    return 0;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v6[5] + 88), "lowercaseString"));
  v10 = objc_msgSend(v11, "hasPrefix:", CFSTR("com.apple."));

  return (uint64_t)v10;
}

void sub_10006F7F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_10006F808(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = sub_100015FDC(a1, a2);
  *v3 = &off_10092B4E0;
  v3[12] = 0;
  v3[11] = 0;
  v3[10] = v3 + 11;
  *((_BYTE *)v3 + 104) = 0;
  *((_BYTE *)v3 + 106) = 0;
  if (qword_100991FB0 != -1)
    dispatch_once(&qword_100991FB0, &stru_10092B500);
  return a1;
}

_QWORD *sub_10006F87C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = sub_100015FDC(a1, a2);
  *v3 = &off_100933370;
  v3[12] = 0;
  v3[11] = 0;
  v3[10] = v3 + 11;
  if (qword_1009931E8 != -1)
    dispatch_once(&qword_1009931E8, &stru_100933390);
  return a1;
}

_QWORD *sub_10006F8E8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = sub_100015FDC(a1, a2);
  *v3 = &off_100939BE8;
  v3[11] = 0;
  v3[12] = 0;
  v3[10] = v3 + 11;
  *((_WORD *)v3 + 52) = 0;
  if (qword_100993430 != -1)
    dispatch_once(&qword_100993430, &stru_100939C08);
  return a1;
}

_QWORD *sub_10006F958(_QWORD *a1, uint64_t a2)
{
  *sub_100015FDC(a1, a2) = &off_10092B220;
  if (qword_100991FA8 != -1)
    dispatch_once(&qword_100991FA8, &stru_10092B240);
  return a1;
}

void sub_10006F9B4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10007265C((void *)&_mh_execute_header, a1, a3, "Failed to retrieve signing ID. ManagedConfigOverride state is false.", a5, a6, a7, a8, 0);
  sub_10007266C();
}

_QWORD *sub_10006F9E4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = sub_100015FDC(a1, a2);
  *v3 = &off_100931538;
  v3[12] = 0;
  v3[11] = 0;
  v3[10] = v3 + 11;
  if (qword_100992C90 != -1)
    dispatch_once(&qword_100992C90, &stru_100931558);
  return a1;
}

uint64_t sub_10006FA50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void **v16;

  *(_QWORD *)a1 = off_100936BC0;
  *(_QWORD *)(a1 + 160) = &off_100936EE8;
  v2 = a1 + 160;
  *(_QWORD *)(a1 + 144) = off_100936D80;
  *(_QWORD *)(a1 + 152) = off_100936EB8;
  v3 = a1 + 200;
  v4 = *(_QWORD **)(a1 + 200);
  v5 = (_QWORD *)(a1 + 208);
  if (v4 != (_QWORD *)(a1 + 208))
  {
    do
    {
      v6 = (_QWORD *)v4[6];
      if (v6 != v4 + 7)
      {
        do
        {
          v7 = v6[4];
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          v8 = (_QWORD *)v6[1];
          if (v8)
          {
            do
            {
              v9 = v8;
              v8 = (_QWORD *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = (_QWORD *)v6[2];
              v10 = *v9 == (_QWORD)v6;
              v6 = v9;
            }
            while (!v10);
          }
          v6 = v9;
        }
        while (v9 != v4 + 7);
      }
      v11 = (_QWORD *)v4[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v4[2];
          v10 = *v12 == (_QWORD)v4;
          v4 = v12;
        }
        while (!v10);
      }
      v4 = v12;
    }
    while (v12 != v5);
  }
  if (qword_10097B180 != -1)
    dispatch_once(&qword_10097B180, &stru_1009377C0);
  sub_100069060((uint64_t)off_10097B178 + 176, v2);
  v16 = (void **)(a1 + 280);
  sub_100091BF8(&v16);
  v13 = *(void **)(a1 + 256);
  if (v13)
  {
    *(_QWORD *)(a1 + 264) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 232);
  if (v14)
  {
    *(_QWORD *)(a1 + 240) = v14;
    operator delete(v14);
  }

  sub_100068038(v3, *(_QWORD **)(a1 + 208));
  return sub_100008708(a1);
}

void sub_10006FBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void *v13;

  a10 = (void **)(v10 + 280);
  sub_100091BF8(&a10);
  v13 = *(void **)(v10 + 256);
  if (v13)
  {
    *(_QWORD *)(v10 + 264) = v13;
    operator delete(v13);
  }
  sub_10070014C(v10);

  sub_100068038(v11, *(_QWORD **)(v10 + 208));
  sub_100008708(v10);
  _Unwind_Resume(a1);
}

void sub_10006FC30(uint64_t a1)
{
  sub_10006FA50(a1);
  operator delete();
}

void sub_10006FC58(uint64_t a1)
{
  xpc_object_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;

  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 480))(v3))
    xpc_dictionary_set_BOOL(v2, "kCBMsgArgSupportsExtendedAdvertising", 1);
  v4 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 568))(v4))
  {
    v5 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 576))(v5))
      xpc_dictionary_set_BOOL(v2, "kCBMsgArgSupportsExtendedScanAndConnect", 1);
  }
  v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_value(v6, "kCBMsgArgSupportedFeatures", v2);
  sub_10005E138(a1, 29, v6, 1);
  xpc_release(v2);
}

void sub_10006FD30(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[5];
  uint8_t buf[4];
  _QWORD *v7;

  if (*(_BYTE *)(a1 + 89))
  {
    v2 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v3 = (_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136446210;
      v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "On-Demand-Install app XPC ended: %{public}s", buf, 0xCu);
    }
  }
  if (*(_QWORD *)(a1 + 128))
  {
    v4 = sub_1000419F4();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100066A00;
    v5[3] = &unk_100917378;
    v5[4] = a1;
    sub_100023D84(v4, v5);
    *(_QWORD *)(a1 + 128) = 0;
  }
}

BOOL sub_10006FE30(uint64_t a1, unsigned int a2)
{
  _BOOL8 result;

  result = 1;
  if (a2 > 0x29 || ((1 << a2) & 0x20000000300) == 0)
    return a2 == 208;
  return result;
}

uint64_t sub_10006FE68(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  NSObject *v7;
  unsigned __int8 *v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t *v12;
  __int128 v13;
  int v14;
  __int128 v15;
  int v16;
  uint8_t buf[16];
  int v18;
  char v19;
  uint8_t v20[4];
  uint64_t v21;
  __int16 v22;
  uint8_t *v23;

  if (*(int *)(a1 + 80) <= 1)
  {
    v4 = *a2;
    v5 = a2[1];
    if (*a2 == v5)
    {
      v6 = *a2;
    }
    else
    {
      while (1)
      {
        *(_OWORD *)buf = xmmword_10073B558;
        v18 = 0;
        if (sub_100072DF0(v4, buf))
          break;
        v4 += 20;
        if (v4 == v5)
        {
          v4 = v5;
          break;
        }
      }
      v6 = v4;
      v4 = a2[1];
    }
    if (v6 != v4)
    {
      v7 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Contact tracing UUID scanning is not allowed.", buf, 2u);
      }
      return 3;
    }
    v9 = *a2;
    if (v9 != v4)
    {
      while (1)
      {
        if (qword_1009778F8 != -1)
          dispatch_once(&qword_1009778F8, &stru_1009377E0);
        if ((sub_1005E084C(qword_1009778F0, v9, *(unsigned __int8 *)(a1 + 183), *(unsigned int *)(a1 + 196), 0) & 1) == 0)
        {
          v10 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
          {
            v11 = *(_QWORD *)(a1 + 96);
            sub_10006887C((uint64_t)v9, buf);
            v12 = buf;
            if (v19 < 0)
              v12 = *(uint8_t **)buf;
            *(_DWORD *)v20 = 138412546;
            v21 = v11;
            v22 = 2080;
            v23 = v12;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@ wants to scan for restricted service (%s)", v20, 0x16u);
            if (v19 < 0)
              operator delete(*(void **)buf);
          }
          v15 = xmmword_10073B530;
          v16 = -1171415960;
          if (sub_100072DF0(v9, (unsigned __int8 *)&v15))
            break;
          v13 = xmmword_10073B688;
          v14 = 0;
          if (sub_100072DF0(v9, (unsigned __int8 *)&v13))
            break;
        }
        v9 += 20;
        if (v9 == v4)
          return 0;
      }
      return 3;
    }
  }
  return 0;
}

void sub_1000700E0(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;
  BOOL v17;
  _DWORD v18[2];
  __int16 v19;
  unsigned int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  switch(a3)
  {
    case 0:
      v5 = 4;
      break;
    case 1:
      v5 = 5;
      break;
    case 2:
    case 4:
      v5 = *(_DWORD *)(a1 + 136);
      break;
    case 3:
      v5 = 2;
      break;
    default:
      v5 = 0;
      break;
  }
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  v6 = sub_10006F6A4((uint64_t)off_100978168, *(_QWORD *)(a1 + 128));
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  v7 = sub_10006F6F4((uint64_t)off_100978168, *(_QWORD *)(a1 + 128));
  v8 = *(unsigned __int8 *)(a1 + 175);
  if (*(_BYTE *)(a1 + 175) || *(_BYTE *)(a1 + 176) && !v7 || *(_BYTE *)(a1 + 177))
  {
    v9 = 1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 178))
      v17 = v7 == 0;
    else
      v17 = 0;
    v9 = v17;
  }
  v10 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(unsigned __int8 *)(a1 + 193);
    v12 = *(unsigned __int8 *)(a1 + 195);
    v13 = *(unsigned __int8 *)(a1 + 176);
    v14 = *(unsigned __int8 *)(a1 + 177);
    v15 = *(unsigned __int8 *)(a1 + 178);
    v18[0] = 67111424;
    v18[1] = a3;
    v19 = 1024;
    v20 = v5;
    v21 = 1024;
    v22 = v11;
    v23 = 1024;
    v24 = v12;
    v25 = 1024;
    v26 = v8;
    v27 = 1024;
    v28 = v13;
    v29 = 1024;
    v30 = v14;
    v31 = 1024;
    v32 = v15;
    v33 = 1024;
    v34 = v6;
    v35 = 1024;
    v36 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Power state changed. PowerState:%d managerState:%d fUserAuthorization: %d\t medicalDeviceorStateRestorationAppPendingTCC:%d fDeviceAccessForMediaSession:%d fDeviceAccessForMediaExtension:%d fDeviceAccessPerAccessorySession:%d fDeviceAccessPerAccessoryExtension:%d appState:%02X deviceAccessExempt:%d", (uint8_t *)v18, 0x3Eu);
  }
  if (*(int *)(a1 + 80) <= 0 && !*(_BYTE *)(a1 + 185) && v6 != 32 && !*(_BYTE *)(a1 + 193))
  {
    v16 = *(_BYTE *)(a1 + 195) ? 1 : v9;
    if ((v16 & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007038DC();
      if (*(_BYTE *)(a1 + 194))
        v5 = 3;
      else
        v5 = 4;
    }
  }
  sub_10007069C(a1, v5);
  if (a3 == 1)
  {
    sub_10006FC58(a1);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100937820);
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, *(_QWORD *)(a1 + 128), *((_QWORD *)off_1009778A0 + 36), *((_QWORD *)off_1009778A0 + 37));
  }
}

void sub_1000703BC(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 1);
  sub_10005E138(a1, 5, 0, 0);
}

void sub_1000703F8(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100066ADC;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_100070458(unint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];
  _QWORD v6[5];
  unsigned __int8 v7;
  unsigned int v8;

  v8 = 0;
  v7 = 0;
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  sub_10006EBB4((uint64_t)off_100978168, a1[16], &v8, &v7);
  v2 = a1[16];
  if (*((_BYTE *)a1 + 186) && v8 == 1)
    (*(void (**)(unint64_t *, unint64_t, _QWORD))(*a1 + 312))(a1, v2, v7);
  else
    (*(void (**)(unint64_t *, unint64_t, _QWORD))(*a1 + 304))(a1, v2, v8);
  if (v8 == 1 || v7)
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100937820);
    (*(void (**)(unint64_t *, unint64_t, _QWORD, _QWORD))(*a1 + 176))(a1, a1[16], *((_QWORD *)off_1009778A0 + 36), *((_QWORD *)off_1009778A0 + 37));
    if (*((_BYTE *)a1 + 169))
    {
      v3 = sub_1000419F4();
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_10055209C;
      v6[3] = &unk_100917378;
      v6[4] = a1;
      sub_100041A34(v3, v6);
    }
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    sub_10006F498((uint64_t)off_100978168, a1[16]);
    if (*((_BYTE *)a1 + 104))
    {
      v4 = sub_1000419F4();
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_1005520EC;
      v5[3] = &unk_100917378;
      v5[4] = a1;
      sub_100041A34(v4, v5);
    }
  }
}

uint64_t sub_100070614(uint64_t a1, uint64_t a2, _xpc_connection_s *a3, uint64_t a4)
{
  uint64_t v5;

  v5 = sub_10001C578(a1, a2, a3, a4);
  *(_QWORD *)v5 = off_100932478;
  *(_QWORD *)(v5 + 128) = 0;
  *(_DWORD *)(v5 + 136) = 0;
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_100932538);
  *(_DWORD *)(a1 + 140) = sub_10002527C((uint64_t)off_100978128);
  return a1;
}

void sub_100070684(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008708(v1);
  _Unwind_Resume(a1);
}

void sub_10007069C(uint64_t a1, unsigned int a2)
{
  int v2;
  xpc_object_t v6;
  NSObject *v7;
  const char *v8;
  _QWORD *v9;
  int v10;
  const char *v11;
  __int16 v12;
  _QWORD *v13;

  v2 = *(_DWORD *)(a1 + 136);
  if (v2 != 2 && v2 != a2)
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    v7 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 - 1 > 9)
        v8 = "Unknown";
      else
        v8 = off_100932578[a2 - 1];
      v9 = (_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        v9 = (_QWORD *)*v9;
      v10 = 136446466;
      v11 = v8;
      v12 = 2082;
      v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending 'state updated' event with state \"%{public}s\" to session \"%{public}s\"", (uint8_t *)&v10, 0x16u);
    }
    *(_DWORD *)(a1 + 136) = a2;
    xpc_dictionary_set_int64(v6, "kCBMsgArgState", a2);
    sub_10005E138(a1, 6, v6, 1);
  }
}

_QWORD *sub_1000707D8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = sub_100015FDC(a1, a2);
  *v3 = &off_10092C5E8;
  v3[11] = 0;
  v3[12] = 0;
  v3[10] = v3 + 11;
  *((_BYTE *)v3 + 104) = 0;
  if (qword_1009923F8 != -1)
    dispatch_once(&qword_1009923F8, &stru_10092C608);
  return a1;
}

_QWORD *sub_100070848(_QWORD *a1, uint64_t a2)
{
  *sub_100015FDC(a1, a2) = &off_10093CAF0;
  if (qword_100993468 != -1)
    dispatch_once(&qword_100993468, &stru_10093CB10);
  return a1;
}

uint64_t sub_1000708A4(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

id sub_1000708B8(void *a1, const char *a2)
{
  xpc_object_t value;
  id v3;
  void *v4;
  size_t i;
  xpc_object_t v6;
  void *v7;
  id v8;

  value = xpc_dictionary_get_value(a1, a2);
  v3 = value;
  if (value)
  {
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      for (i = 0; ; ++i)
      {
        if (i >= xpc_array_get_count(v3))
        {
          v3 = v4;
          goto LABEL_16;
        }
        v6 = xpc_array_get_value(v3, i);
        v7 = v6;
        if (!v6)
          break;
        if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_uuid)
          break;
        v8 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", xpc_uuid_get_bytes(v7));
        if (!v8)
          break;
        objc_msgSend(v4, "addObject:", v8);

      }
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006DBB74();
      v3 = 0;
LABEL_16:

    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006DBBA0();
      v3 = 0;
    }
  }
  return v3;
}

void sub_100070A10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_100070A30(uint64_t a1)
{
  return sub_10001CB50(a1);
}

uint64_t sub_100070A3C(uint64_t a1, _QWORD *a2)
{
  *a2 = a1;
  return 0;
}

double sub_100070A48(void *a1, uint64_t a2)
{
  NSObject *v4;
  double result;
  int8x16_t *bytes_ptr;
  unsigned __int8 length;
  __int128 v8;
  int v9;

  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_data)
  {
    bytes_ptr = (int8x16_t *)xpc_data_get_bytes_ptr(a1);
    length = xpc_data_get_length(a1);
    sub_100069B04((uint64_t)&v8, bytes_ptr, length);
    result = *(double *)&v8;
    *(_OWORD *)a2 = v8;
    *(_DWORD *)(a2 + 16) = v9;
  }
  else
  {
    v4 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1006DB968(a1, v4);
  }
  return result;
}

uint64_t sub_100070B24(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 56) = 0;
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

uint64_t sub_100070B64(uint64_t a1, __int128 *a2, dispatch_object_t object)
{
  uint64_t v5;
  __int128 v6;

  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  v5 = a1 + 32;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C((_BYTE *)v5, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)(a1 + 56) = 0;
  if (object)
  {
    dispatch_retain(object);
    *(_QWORD *)(a1 + 56) = object;
  }
  return a1;
}

BOOL sub_100070BDC()
{
  return &_ct_green_tea_logger_create != 0;
}

BOOL sub_100070BF0()
{
  return &TCCAccessRequest != 0;
}

uint64_t sub_100070C04(char *__s)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  char v6;

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100934EC8);
  v2 = qword_100977B48;
  sub_100091AE8(__p, __s);
  v3 = sub_10000A378(v2, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_100070C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100070CB8(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = sub_10004BC7C(&v10);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v11))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6251, "OI_STATUS _BCM_OlympicRetainDuplicatesOnLeScanStart(_Bool, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v11) - WORD2(v11) > 3 && BYTE6(v11) == 2)
    {
      *(_BYTE *)(v10 + WORD2(v11)) = 54;
      *(_WORD *)(v10 + WORD2(v11) + 1) = 0;
      *(_BYTE *)(v10 + WORD2(v11) + 3) = 0;
      v8 = WORD2(v11);
      v9 = WORD2(v11) + 4;
      WORD2(v11) += 4;
      if (HIBYTE(v11))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6252, "OI_STATUS _BCM_OlympicRetainDuplicatesOnLeScanStart(_Bool, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v11) > v9 && BYTE6(v11) == 2)
      {
        WORD2(v11) = v8 + 5;
        *(_BYTE *)(v10 + v9) = a1;
        return sub_10004C8A0(226, v10, BYTE4(v11), a2, (uint64_t)sub_1000723AC, v5, v6, v7);
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
  return result;
}

uint64_t sub_100070E38(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  result = sub_10004BC7C(&v6);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v7))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6184, "OI_STATUS _BCM_OlympicGetExtendedAdvNumDropped(BT_VSC_GET_EXT_ADV_NUM_DROPPED_CB)");
    }
    else if (WORD1(v7) - WORD2(v7) > 3 && BYTE6(v7) == 2)
    {
      *(_BYTE *)(v6 + WORD2(v7)) = 45;
      *(_WORD *)(v6 + WORD2(v7) + 1) = 0;
      *(_BYTE *)(v6 + WORD2(v7) + 3) = 0;
      WORD2(v7) += 4;
      return sub_10004C8A0(226, v6, BYTE4(v7), a1, (uint64_t)sub_1000722A0, v3, v4, v5);
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
  return result;
}

void sub_100070F3C(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("status %!", a1);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v6 = 255;
    goto LABEL_10;
  }
  if (*((_BYTE *)a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 564, "void _BCM_MatchTableParamsEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v7 = *((unsigned __int16 *)a3 + 6);
  if (*((unsigned __int16 *)a3 + 5) <= v7 || *((_BYTE *)a3 + 14) != 1)
LABEL_18:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  v8 = *a3;
  *((_WORD *)a3 + 6) = v7 + 1;
  v6 = *(unsigned __int8 *)(v8 + v7);
  if ((_DWORD)v6 == 4)
    goto LABEL_12;
LABEL_10:
  if (!sub_10005549C()
    || (sub_100054530("SubOpcode Incorrect %!", a1),
        v9 = sub_1000544A0(0x54u),
        !os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)))
  {
LABEL_12:
    if (!a2)
      return;
    goto LABEL_13;
  }
  sub_1006CEEC0();
  if (a2)
LABEL_13:
    a2(a1, v6);
}

void sub_100071098(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("status %!", a1);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v6 = 255;
    goto LABEL_10;
  }
  if (*((_BYTE *)a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 463, "void _BCM_MatchTableConfigEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v7 = *((unsigned __int16 *)a3 + 6);
  if (*((unsigned __int16 *)a3 + 5) <= v7 || *((_BYTE *)a3 + 14) != 1)
LABEL_18:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  v8 = *a3;
  *((_WORD *)a3 + 6) = v7 + 1;
  v6 = *(unsigned __int8 *)(v8 + v7);
  if ((_DWORD)v6 == 3)
    goto LABEL_12;
LABEL_10:
  if (!sub_10005549C()
    || (sub_100054530("SubOpcode Incorrect %!", a1),
        v9 = sub_1000544A0(0x54u),
        !os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)))
  {
LABEL_12:
    if (!a2)
      return;
    goto LABEL_13;
  }
  sub_1006CEEC0();
  if (a2)
LABEL_13:
    a2(a1, v6);
}

uint64_t sub_1000711F4(__int16 a1, char a2, char a3, __int16 a4, char a5, char a6, char a7, uint64_t (*a8)())
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  unsigned __int16 v22;
  uint64_t v23;
  __int16 v24;
  unsigned __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = 0;
  v29 = 0;
  result = sub_10004BC7C(&v28);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v29))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6428, "OI_STATUS _BCM_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
    }
    else
    {
      v20 = WORD2(v29);
      if (WORD1(v29) > WORD2(v29) && BYTE6(v29) == 2)
      {
        ++WORD2(v29);
        *(_BYTE *)(v28 + v20) = 3;
        if (HIBYTE(v29))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6429, "OI_STATUS _BCM_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
        }
        else if (WORD1(v29) - WORD2(v29) > 1 && BYTE6(v29) == 2)
        {
          *(_WORD *)(v28 + WORD2(v29)) = a1;
          v21 = WORD2(v29);
          v22 = WORD2(v29) + 2;
          WORD2(v29) += 2;
          if (HIBYTE(v29))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6430, "OI_STATUS _BCM_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
          }
          else if (WORD1(v29) > v22 && BYTE6(v29) == 2)
          {
            WORD2(v29) = v21 + 3;
            *(_BYTE *)(v28 + v22) = a2;
            if (HIBYTE(v29))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6431, "OI_STATUS _BCM_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
            }
            else
            {
              v23 = WORD2(v29);
              if (WORD1(v29) > WORD2(v29) && BYTE6(v29) == 2)
              {
                ++WORD2(v29);
                *(_BYTE *)(v28 + v23) = a3;
                if (HIBYTE(v29))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6432, "OI_STATUS _BCM_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
                }
                else if (WORD1(v29) - WORD2(v29) > 1 && BYTE6(v29) == 2)
                {
                  *(_WORD *)(v28 + WORD2(v29)) = a4;
                  v24 = WORD2(v29);
                  v25 = WORD2(v29) + 2;
                  WORD2(v29) += 2;
                  if (HIBYTE(v29))
                  {
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6433, "OI_STATUS _BCM_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
                  }
                  else if (WORD1(v29) > v25 && BYTE6(v29) == 2)
                  {
                    WORD2(v29) = v24 + 3;
                    *(_BYTE *)(v28 + v25) = a5;
                    if (HIBYTE(v29))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6434, "OI_STATUS _BCM_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
                    }
                    else
                    {
                      v26 = WORD2(v29);
                      if (WORD1(v29) > WORD2(v29) && BYTE6(v29) == 2)
                      {
                        ++WORD2(v29);
                        *(_BYTE *)(v28 + v26) = a6;
                        if (HIBYTE(v29))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6435, "OI_STATUS _BCM_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
                        }
                        else
                        {
                          v27 = WORD2(v29);
                          if (WORD1(v29) > WORD2(v29) && BYTE6(v29) == 2)
                          {
                            ++WORD2(v29);
                            *(_BYTE *)(v28 + v27) = a7;
                            return sub_10004C8A0(556, v28, BYTE4(v29), a8, (uint64_t)sub_100071098, v17, v18, v19);
                          }
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
                  }
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
  return result;
}

uint64_t sub_100071674(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  result = sub_10004BC7C(&v14);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3185, "OI_STATUS _BCM_LEMetaPCFServiceUUID(BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v6 = WORD2(v15);
      if (WORD1(v15) > WORD2(v15) && BYTE6(v15) == 2)
      {
        ++WORD2(v15);
        *(_BYTE *)(v14 + v6) = 5;
        if (HIBYTE(v15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3186, "OI_STATUS _BCM_LEMetaPCFServiceUUID(BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v7 = WORD2(v15);
          if (WORD1(v15) > WORD2(v15) && BYTE6(v15) == 2)
          {
            ++WORD2(v15);
            *(_BYTE *)(v14 + v7) = 0;
            if (HIBYTE(v15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3187, "OI_STATUS _BCM_LEMetaPCFServiceUUID(BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v15) - WORD2(v15) > 5 && BYTE6(v15) == 2)
            {
              v8 = v14 + WORD2(v15);
              *(_WORD *)(v8 + 4) = 0;
              *(_DWORD *)v8 = 0;
              v9 = WORD2(v15);
              v10 = WORD2(v15) + 6;
              WORD2(v15) += 6;
              if (HIBYTE(v15))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3188, "OI_STATUS _BCM_LEMetaPCFServiceUUID(BT_VSC_COMPLETE_CB)");
              }
              else if (WORD1(v15) > v10 && BYTE6(v15) == 2)
              {
                WORD2(v15) = v9 + 7;
                *(_BYTE *)(v14 + v10) = 2;
                if (HIBYTE(v15))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3189, "OI_STATUS _BCM_LEMetaPCFServiceUUID(BT_VSC_COMPLETE_CB)");
                }
                else
                {
                  v11 = WORD2(v15);
                  if (WORD1(v15) > WORD2(v15) && BYTE6(v15) == 2)
                  {
                    ++WORD2(v15);
                    *(_BYTE *)(v14 + v11) = 4;
                    if (HIBYTE(v15))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3190, "OI_STATUS _BCM_LEMetaPCFServiceUUID(BT_VSC_COMPLETE_CB)");
                    }
                    else
                    {
                      v12 = WORD2(v15);
                      if (WORD1(v15) > WORD2(v15) && BYTE6(v15) == 2)
                      {
                        ++WORD2(v15);
                        *(_BYTE *)(v14 + v12) = 0;
                        if (HIBYTE(v15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3191, "OI_STATUS _BCM_LEMetaPCFServiceUUID(BT_VSC_COMPLETE_CB)");
                        }
                        else if (WORD1(v15) - WORD2(v15) > 2 && BYTE6(v15) == 2)
                        {
                          v13 = v14 + WORD2(v15);
                          *(_BYTE *)(v13 + 2) = 0;
                          *(_WORD *)v13 = 0;
                          WORD2(v15) += 3;
                          return sub_10004C8A0(233, v14, BYTE4(v15), a1, (uint64_t)sub_10004AE9C, v3, v4, v5);
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
  return result;
}

uint64_t sub_100071A38(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  result = sub_10004BC7C(&v11);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v12))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3205, "OI_STATUS _BCM_LEMetaPCFDisableServiceUUID(BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v6 = WORD2(v12);
      if (WORD1(v12) > WORD2(v12) && BYTE6(v12) == 2)
      {
        ++WORD2(v12);
        *(_BYTE *)(v11 + v6) = 5;
        if (HIBYTE(v12))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3206, "OI_STATUS _BCM_LEMetaPCFDisableServiceUUID(BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v7 = WORD2(v12);
          if (WORD1(v12) > WORD2(v12) && BYTE6(v12) == 2)
          {
            ++WORD2(v12);
            *(_BYTE *)(v11 + v7) = 2;
            if (HIBYTE(v12))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3207, "OI_STATUS _BCM_LEMetaPCFDisableServiceUUID(BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v12) - WORD2(v12) > 5 && BYTE6(v12) == 2)
            {
              v8 = v11 + WORD2(v12);
              *(_WORD *)(v8 + 4) = 0;
              *(_DWORD *)v8 = 0;
              v9 = WORD2(v12);
              v10 = WORD2(v12) + 6;
              WORD2(v12) += 6;
              if (HIBYTE(v12))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3208, "OI_STATUS _BCM_LEMetaPCFDisableServiceUUID(BT_VSC_COMPLETE_CB)");
              }
              else if (WORD1(v12) > v10 && BYTE6(v12) == 2)
              {
                WORD2(v12) = v9 + 7;
                *(_BYTE *)(v11 + v10) = 2;
                return sub_10004C8A0(233, v11, BYTE4(v12), a1, (uint64_t)sub_10004AE9C, v3, v4, v5);
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
  return result;
}

uint64_t sub_100071C84(int a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3120, "OI_STATUS _BCM_LEMetaEnableFeatures(uint32_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = 1;
        if (HIBYTE(v10))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3121, "OI_STATUS _BCM_LEMetaEnableFeatures(uint32_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v10) - WORD2(v10) > 3 && BYTE6(v10) == 2)
        {
          *(_WORD *)(v9 + WORD2(v10)) = a1;
          *(_BYTE *)(v9 + WORD2(v10) + 2) = BYTE2(a1);
          *(_BYTE *)(v9 + WORD2(v10) + 3) = HIBYTE(a1);
          WORD2(v10) += 4;
          return sub_10004C8A0(233, v9, BYTE4(v10), a2, (uint64_t)sub_10004AE9C, v5, v6, v7);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
  return result;
}

uint64_t sub_100071E10(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  result = sub_10004BC7C(&v8);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v9))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3796, "OI_STATUS _BCM_LEMetaClearDevicesFromMatchingAddressList(BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v6 = WORD2(v9);
      if (WORD1(v9) > WORD2(v9) && BYTE6(v9) == 2)
      {
        ++WORD2(v9);
        *(_BYTE *)(v8 + v6) = 53;
        if (HIBYTE(v9))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3797, "OI_STATUS _BCM_LEMetaClearDevicesFromMatchingAddressList(BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v7 = WORD2(v9);
          if (WORD1(v9) > WORD2(v9) && BYTE6(v9) == 2)
          {
            ++WORD2(v9);
            *(_BYTE *)(v8 + v7) = 2;
            return sub_10004C8A0(233, v8, BYTE4(v9), a1, (uint64_t)sub_10004AE9C, v3, v4, v5);
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
  return result;
}

uint64_t sub_100071F58(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = sub_10004BC7C(&v7);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v8))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3717, "OI_STATUS _BCM_LEMetaClearAllMatchingRules(BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v6 = WORD2(v8);
      if (WORD1(v8) > WORD2(v8) && BYTE6(v8) == 2)
      {
        ++WORD2(v8);
        *(_BYTE *)(v7 + v6) = 30;
        return sub_10004C8A0(233, v7, BYTE4(v8), a1, (uint64_t)sub_10004AE9C, v3, v4, v5);
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
  return result;
}

uint64_t sub_100072024(uint64_t a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[6];
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  result = sub_10004BC7C(&v12);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v13))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3754, "OI_STATUS _BCM_LEMetaAddDeviceToMatchingAddressList(const BTAddress, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v5 = WORD2(v13);
      if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
      {
        ++WORD2(v13);
        *(_BYTE *)(v12 + v5) = 53;
        if (HIBYTE(v13))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3755, "OI_STATUS _BCM_LEMetaAddDeviceToMatchingAddressList(const BTAddress, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v6 = WORD2(v13);
          if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
          {
            ++WORD2(v13);
            *(_BYTE *)(v12 + v6) = 0;
            if (HIBYTE(v13))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3756, "OI_STATUS _BCM_LEMetaAddDeviceToMatchingAddressList(const BTAddress, BT_VSC_COMPLETE_CB)");
            }
            else
            {
              v7 = WORD2(v13);
              if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
              {
                ++WORD2(v13);
                *(_BYTE *)(v12 + v7) = BYTE6(a1);
                v11[0] = BYTE5(a1);
                v11[1] = BYTE4(a1);
                v11[2] = BYTE3(a1);
                v11[3] = BYTE2(a1);
                v11[4] = BYTE1(a1);
                v11[5] = a1;
                if (HIBYTE(v13))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 3760, "OI_STATUS _BCM_LEMetaAddDeviceToMatchingAddressList(const BTAddress, BT_VSC_COMPLETE_CB)");
                }
                else if (WORD1(v13) - WORD2(v13) > 5 && BYTE6(v13) == 2)
                {
                  sub_10004C878(v12 + WORD2(v13), (uint64_t)v11, 6uLL);
                  WORD2(v13) += 6;
                  return sub_10004C8A0(233, v12, BYTE4(v13), a2, (uint64_t)sub_10004AE9C, v8, v9, v10);
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  }
  return result;
}

void sub_1000722A0(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("status %!", a1);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v6 = 0;
    if (a2)
      goto LABEL_6;
    return;
  }
  if (*(_BYTE *)(a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 844, "void _BCM_GetExtendedAdvNumDroppedEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_14;
  }
  v7 = *(unsigned __int16 *)(a3 + 12);
  if (*(unsigned __int16 *)(a3 + 10) - (int)v7 <= 3 || *(_BYTE *)(a3 + 14) != 1)
LABEL_14:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
  v6 = *(unsigned int *)(*(_QWORD *)a3 + v7);
  *(_WORD *)(a3 + 12) = v7 + 4;
  if (a2)
LABEL_6:
    a2(a1, v6);
}

void sub_1000723AC(uint64_t a1, void (*a2)(uint64_t, uint64_t, _QWORD), uint64_t a3)
{
  int v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;

  if (*(_BYTE *)(a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 756, "void _BCM_ByteStreamEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_4;
  }
  if (*(unsigned __int16 *)(a3 + 10) - *(unsigned __int16 *)(a3 + 12) <= 1)
  {
LABEL_4:
    if (sub_10005549C())
    {
      if (*(_BYTE *)(a3 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 757, "void _BCM_ByteStreamEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
        v4 = 0;
      }
      else
      {
        v4 = *(unsigned __int16 *)(a3 + 10) - *(unsigned __int16 *)(a3 + 12);
      }
      sub_100054530("Invalid data size %d", v4);
      v10 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return;
  }
  if ((_DWORD)a1
    && sub_10005549C()
    && ((v7 = *(unsigned __int16 *)(a3 + 12), v8 = *(_QWORD *)a3 + v7, !*(_BYTE *)(a3 + 15))
      ? (v9 = *(unsigned __int16 *)(a3 + 10) - v7)
      : (sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 762, "void _BCM_ByteStreamEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)"), v9 = 0), sub_100054530("hlCb 0x%x, data %@", a2, v8, v9), v11 = sub_1000544A0(0x54u), os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)))
  {
    sub_1006CEEC0();
    if (!a2)
      return;
  }
  else if (!a2)
  {
    return;
  }
  v12 = *(unsigned __int16 *)(a3 + 12);
  v13 = *(_QWORD *)a3 + v12;
  if (*(_BYTE *)(a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 765, "void _BCM_ByteStreamEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    v14 = 0;
  }
  else
  {
    v14 = *(_BYTE *)(a3 + 10) - v12;
  }
  a2(a1, v13, v14);
}

uint64_t sub_10007256C(int *a1)
{
  uint64_t result;
  int v3;
  _BYTE v4[128];

  result = pthread_mutex_trylock(&stru_10097FA88);
  v3 = *a1;
  if ((_DWORD)result)
  {
    if (v3 == dword_10097FBD4)
    {
      if (*((_BYTE *)a1 + 4))
        sub_1006D1848((uint64_t)v4);
      *((_BYTE *)a1 + 4) = 1;
    }
    else
    {
      *a1 = dword_10097FBD4;
      *((_BYTE *)a1 + 4) = 0;
    }
  }
  else
  {
    if (v3 == dword_10097FBD4)
    {
      dispatch_suspend((dispatch_object_t)qword_10097FBD8);
      dword_10097FBD4 = 0;
    }
    else
    {
      *a1 = dword_10097FBD4;
      *((_BYTE *)a1 + 4) = 0;
    }
    return pthread_mutex_unlock(&stru_10097FA88);
  }
  return result;
}

void sub_10007265C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_100072674(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

void sub_100072684(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1000726A8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1000726B8(void **a1)
{
  operator delete(*a1);
}

void sub_1000726C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  bzero(va, 0x98uLL);
}

BOOL sub_1000726CC()
{
  uint64_t v0;

  return sub_1000DE1FC(v0);
}

uint64_t sub_1000726D4()
{
  return 0;
}

void sub_1000726FC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_100072710(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_100072720(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100072734(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x18u);
}

void sub_100072744(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_100072750(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_10007275C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void sub_100072784(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 8u);
}

uint64_t sub_100072794(uint64_t result, _QWORD *a2, uint64_t a3, float a4)
{
  int v4;
  _QWORD *v5;

  if (v4 >= 0)
    v5 = a2;
  else
    v5 = (_QWORD *)*a2;
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2082;
  *(_QWORD *)(a3 + 14) = v5;
  return result;
}

void sub_1000727B8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_1000727FC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_10007280C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_100072838(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_error_impl(a1, v13, OS_LOG_TYPE_ERROR, a4, &buf, 0xCu);
}

_QWORD *sub_10007284C(_QWORD *result, uint64_t a2, int a3, float a4)
{
  int v4;
  _QWORD *v5;

  if (v4 >= 0)
    v5 = result;
  else
    v5 = (_QWORD *)*result;
  *(float *)a2 = a4;
  *(_QWORD *)(a2 + 4) = v5;
  *(_WORD *)(a2 + 12) = 1024;
  *(_DWORD *)(a2 + 14) = a3;
  return result;
}

void sub_100072880(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_100072894(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_1000728A4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x12u);
}

void sub_1000728E8(uuid_t out, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;

  if (a3)
  {
    v6 = xmmword_1009802E5;
    __memcpy_chk(&v6, a2, a3, 16);
    if (sub_100004F50(&xmmword_1009802F5, 0x10uLL, &v6, 0x10u, out, 0x10u))
    {
      v4 = sub_100112D60(105);
      sub_1000729B4(v4, v5);
    }
  }
  else
  {
    uuid_generate(out);
  }
}

uint64_t sub_1000729B4(uint64_t a1, _BYTE *a2)
{
  char v2;
  unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  if (!a2)
    return 0;
  v2 = *a2;
  if (!*a2)
    return 0;
  v4 = a2 + 1;
  while (1)
  {
    if (*(_WORD *)(a1 + 2))
    {
      v5 = *(unsigned __int16 *)(a1 + 4);
      if (*(unsigned __int16 *)(a1 + 2) - 1 > v5)
        goto LABEL_9;
    }
    if (!*(_BYTE *)a1)
      return 0;
    if (!sub_1002591C0(a1))
      return 106;
    v2 = *(v4 - 1);
    v5 = *(unsigned __int16 *)(a1 + 4);
LABEL_9:
    v6 = *(_QWORD *)(a1 + 8);
    *(_WORD *)(a1 + 4) = v5 + 1;
    *(_BYTE *)(v6 + v5) = v2;
    v7 = *v4++;
    v2 = v7;
    if (!v7)
      return 0;
  }
}

uint64_t sub_100072A40(uint64_t a1, unsigned int a2, int a3)
{
  int v3;
  char *v4;
  uint64_t v6;
  char v7;

  if ((a3 - 9) >= 0xFFFFFFF8)
    v3 = a3;
  else
    v3 = 8;
  v4 = &v7;
  v7 = 0;
  HIBYTE(v6) = 0;
  do
  {
    *--v4 = a0123456789abcd_0[a2 & 0xF];
    a2 >>= 4;
    --v3;
  }
  while (v3);
  return sub_1000729B4(a1, v4);
}

uint64_t sub_100072ACC(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  int v5;
  int v6;
  BOOL v7;

  if (!a1 || !a2)
    sub_100253460();
  if (*(_DWORD *)a1 >= *(_DWORD *)a2)
  {
    if (*(_DWORD *)a1 <= *(_DWORD *)a2)
    {
      v5 = *(__int16 *)(a1 + 4);
      v6 = *(__int16 *)(a2 + 4);
      v7 = v5 < v6;
      v4 = v5 > v6;
      if (v7)
        return -1;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return -1;
  }
  return v4;
}

unsigned __int8 *sub_100072B38(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int8 *i;
  int v3;
  uint64_t j;
  int v5;
  char v6;
  int v7;
  char v8;
  unsigned __int8 *v9;
  int v10;

  if (!a1 || !a2)
    return a1;
  for (i = a1; ; ++i)
  {
    v3 = *i;
    if (v3 != 9 && v3 != 32)
      break;
  }
  for (j = 0; j != 6; ++j)
  {
    v5 = *i;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 97) >= 6)
      {
        if ((v5 - 65) > 5)
          return a1;
        v6 = -55;
      }
      else
      {
        v6 = -87;
      }
    }
    else
    {
      v6 = -48;
    }
    v7 = i[1];
    if ((v7 - 48) >= 0xA)
    {
      if ((v7 - 97) >= 6)
      {
        if ((v7 - 65) > 5)
          return a1;
        v8 = -55;
      }
      else
      {
        v8 = -87;
      }
    }
    else
    {
      v8 = -48;
    }
    *(_BYTE *)(a2 + j) = v7 + 16 * (v6 + v5) + v8;
    v9 = i + 2;
    v10 = i[2];
    if (v10 == 58 || v10 == 45)
      v9 = i + 3;
    i = v9;
  }
  return v9;
}

BOOL sub_100072C28(unsigned __int8 *a1, uint64_t a2)
{
  return sub_100072B38(a1, a2) != a1;
}

void sub_100072C50(_BYTE *a1, unsigned __int8 *a2, int a3)
{
  int v4;
  __int16 v5;
  unsigned __int8 v6;
  int v7;
  NSObject *v8;

  v4 = *a2;
  switch(v4)
  {
    case 16:
      if (a3 == 1)
      {
        *a1 = a2[19];
        a1[1] = a2[18];
        a1[2] = a2[17];
        a1[3] = a2[16];
        a1[4] = a2[15];
        a1[5] = a2[14];
        a1[6] = a2[13];
        a1[7] = a2[12];
        a1[8] = a2[11];
        a1[9] = a2[10];
        a1[10] = a2[9];
        a1[11] = a2[8];
        a1[12] = a2[7];
        a1[13] = a2[6];
        a1[14] = a2[5];
        a1[15] = a2[4];
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)(a2 + 4);
      }
      break;
    case 4:
      v7 = *((_DWORD *)a2 + 1);
      if (a3 == 1)
      {
        *a1 = v7;
        a1[1] = BYTE1(*((_DWORD *)a2 + 1));
        a1[2] = *((_WORD *)a2 + 3);
        a1[3] = a2[7];
      }
      else
      {
        a1[3] = v7;
        a1[2] = BYTE1(*((_DWORD *)a2 + 1));
        a1[1] = *((_WORD *)a2 + 3);
        *a1 = a2[7];
      }
      break;
    case 2:
      v5 = *((_WORD *)a2 + 2);
      if (a3 == 1)
      {
        *a1 = v5;
        v6 = a2[5];
      }
      else
      {
        *a1 = HIBYTE(v5);
        v6 = a2[4];
      }
      a1[1] = v6;
      break;
    default:
      if (sub_10005549C())
      {
        sub_100054530("Invalid UUID length of %d when copying to array", *a2);
        v8 = sub_1000544A0(0x42u);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      break;
  }
}

BOOL sub_100072DF0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  size_t v2;
  int v3;
  _BYTE v7[20];
  _BYTE v8[20];

  if (a1 == a2)
    return 1;
  v2 = *a1;
  v3 = *a2;
  if ((_DWORD)v2 == v3)
  {
    return memcmp(a1 + 4, a2 + 4, v2) == 0;
  }
  else
  {
    *(_DWORD *)v8 = 0;
    *(_DWORD *)v7 = 0;
    if ((_DWORD)v2 == 4)
    {
      v8[0] = 16;
      *(_OWORD *)&v8[4] = *(_OWORD *)algn_10073B23A;
      *(_DWORD *)&v8[4] = bswap32(*((_DWORD *)a1 + 1));
    }
    else if ((_DWORD)v2 == 2)
    {
      v8[0] = 16;
      *(_OWORD *)&v8[4] = *(_OWORD *)algn_10073B23A;
      *(_WORD *)&v8[6] = bswap32(*((unsigned __int16 *)a1 + 2)) >> 16;
    }
    else
    {
      *(_OWORD *)v8 = *(_OWORD *)a1;
      *(_DWORD *)&v8[16] = *((_DWORD *)a1 + 4);
    }
    if (v3 == 4)
    {
      v7[0] = 16;
      *(_OWORD *)&v7[4] = *(_OWORD *)algn_10073B23A;
      *(_DWORD *)&v7[4] = bswap32(*((_DWORD *)a2 + 1));
    }
    else if (v3 == 2)
    {
      v7[0] = 16;
      *(_OWORD *)&v7[4] = *(_OWORD *)algn_10073B23A;
      *(_WORD *)&v7[6] = bswap32(*((unsigned __int16 *)a2 + 2)) >> 16;
    }
    else
    {
      *(_OWORD *)v7 = *(_OWORD *)a2;
      *(_DWORD *)&v7[16] = *((_DWORD *)a2 + 4);
    }
    return *(_QWORD *)v8 == *(_QWORD *)v7
        && *(_QWORD *)&v8[8] == *(_QWORD *)&v7[8]
        && *(unsigned int *)&v8[16] == (unint64_t)*(unsigned int *)&v7[16];
  }
}

uint64_t sub_100072F80()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned int v9;
  uint64_t v10;
  NSObject *v11;

  if (byte_10098FA40 == 1)
  {
    v0 = 0;
    byte_10098FA47 = 0;
  }
  else if (byte_10098FA42 == 1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Scan is starting, can't stop it.");
      v1 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 118;
  }
  else if (!memcmp(&qword_10098F9F8, &unk_10073B708, 0x40uLL))
  {
    return 0;
  }
  else
  {
    if (byte_10098FA45)
    {
      if (byte_10098FA46)
        v8 = 2;
      else
        v8 = 1;
      byte_10098FA28 = v8;
      if (!byte_10098FA44 || byte_10098FA48)
      {
        v9 = byte_10098FA29;
      }
      else
      {
        v9 = 3;
        byte_10098FA29 = 3;
      }
      v10 = sub_100006870(0, v8, BYTE14(xmmword_10098FA18), HIBYTE(xmmword_10098FA18), v9);
    }
    else if (byte_10098FA46)
    {
      v10 = sub_10004C9BC(216, (uint64_t (*)())sub_100065CA0, v2, v3, v4, v5, v6, v7, 0);
    }
    else
    {
      v10 = sub_10004C9BC(172, (uint64_t (*)())sub_100065CA0, v2, v3, v4, v5, v6, v7, 0);
    }
    v0 = v10;
    if ((_DWORD)v10)
    {
      if (sub_10005549C())
      {
        sub_100054530("Could not stop the LE scan : %!", v0);
        v11 = sub_1000544A0(0x42u);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
    else
    {
      byte_10098FA47 = 0;
      byte_10098FA40 = 1;
    }
  }
  return v0;
}

uint64_t sub_10007315C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned __int8 a9, char a10, char a11, char a12, __int16 a13, __int16 a14, char a15, char a16, uint64_t (*a17)(_QWORD, _QWORD), void *a18, uint64_t a19, uint64_t a20)
{
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int16 v53;
  BOOL v54;
  char v55;
  uint64_t v56;
  unsigned __int8 v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  __int16 v62;
  _WORD v63[3];
  _WORD v64[3];
  _BYTE v65[3];
  unsigned __int8 v66[16];

  *(_DWORD *)&v66[3] = 0;
  *(_DWORD *)v66 = 0;
  if (memcmp(&qword_10098F9F8, &unk_10073B708, 0x40uLL))
  {
    if (sub_10005549C())
    {
      sub_100054530("LE scan already in progress.");
      v28 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 118;
  }
  if (byte_10098FA40 == 1)
    sub_100253460();
  if (!a18 || !a17 || !a19)
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Invalid callback functions");
    v31 = sub_1000544A0(0x42u);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      return 101;
LABEL_64:
    sub_1006CE7A4();
    return 101;
  }
  if (!(a4 | a3 | a5 | a6))
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Cannot start scan when both main and LP cores window is set to 0");
    v32 = sub_1000544A0(0x42u);
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      return 101;
    goto LABEL_64;
  }
  if (a1 >= 2)
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Invalid scan type parameters : %d", a1);
    v30 = sub_1000544A0(0x42u);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      return 101;
    goto LABEL_64;
  }
  if ((_DWORD)a2 && (a2 - 16385) <= 0xFFFFC002)
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Invalid scan interval parameters : %d", a2);
    v33 = sub_1000544A0(0x42u);
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      return 101;
    goto LABEL_64;
  }
  if ((_DWORD)a3 && (a3 - 16385) <= 0xFFFFC002)
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Invalid scan interval parameters : %d", a3);
    v34 = sub_1000544A0(0x42u);
    if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      return 101;
    goto LABEL_64;
  }
  if (a4 && (a4 - 4) >= 0x3FFD)
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Invalid scan window parameters for leScanWindowLPCore : %d", a4);
    v35 = sub_1000544A0(0x42u);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      return 101;
    goto LABEL_64;
  }
  if (a5 && (a5 - 16385) <= 0xFFFFC002)
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Invalid scan window parameters for leScanWindowScanCoreELNAOn : %d", a5);
    v36 = sub_1000544A0(0x42u);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      return 101;
    goto LABEL_64;
  }
  if (a6 && (a6 - 16385) <= 0xFFFFC002)
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Invalid scan window parameters for leScanWindowScanCoreELNABypass : %d", a6);
    v37 = sub_1000544A0(0x42u);
    if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      return 101;
    goto LABEL_64;
  }
  if (a5 && a6)
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Invalid scan window parameters for leScanWindowScanCoreELNAOn : %d and leScanWindowScanCoreELNABypass : %d. Both cannot be used at the same time.", a5, a6);
    v38 = sub_1000544A0(0x42u);
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      return 101;
    goto LABEL_64;
  }
  if (a7 >= 2)
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Invalid scan filter : %d", a7);
    v39 = sub_1000544A0(0x42u);
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      return 101;
    goto LABEL_64;
  }
  if (a8 >= 2)
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Invalid scan filter duplicate setting : %d", a8);
    v40 = sub_1000544A0(0x42u);
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      return 101;
    goto LABEL_64;
  }
  if (a9 >= 2u && !byte_10098FA41)
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Invalid scan phy setting : %d", a9);
    v41 = sub_1000544A0(0x42u);
    if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      return 101;
    goto LABEL_64;
  }
  sub_100073B84((uint64_t)v66);
  v50 = 0;
  byte_10098FA42 = 1;
  qword_10098F9F8 = a17;
  off_10098FA00 = a18;
  qword_10098FA08 = a19;
  qword_10098FA10 = a20;
  LOBYTE(xmmword_10098FA18) = a1;
  WORD1(xmmword_10098FA18) = a2;
  WORD2(xmmword_10098FA18) = a3;
  WORD3(xmmword_10098FA18) = a4;
  WORD4(xmmword_10098FA18) = a5;
  WORD5(xmmword_10098FA18) = a6;
  BYTE12(xmmword_10098FA18) = a9;
  BYTE13(xmmword_10098FA18) = a7;
  BYTE14(xmmword_10098FA18) = a8;
  *(_WORD *)((char *)&xmmword_10098FA18 + 15) = 258;
  byte_10098FA29 = 1;
  byte_10098FA2E = a10;
  v51 = byte_10098FA43;
  if (!byte_10098FA43)
    a11 = 0;
  byte_10098FA2F = a11;
  byte_10098FA32 = a12;
  word_10098FA34 = a13;
  word_10098FA36 = a14;
  byte_10098FA30 = a15;
  byte_10098FA31 = a16;
  v65[0] = a1;
  v65[1] = a1;
  v65[2] = a1;
  v64[0] = a2;
  v64[1] = a2;
  v64[2] = a2;
  v63[0] = a3;
  v63[1] = a3;
  v63[2] = a3;
  v62 = 0;
  if (a12)
    v53 = a13;
  else
    v53 = 30;
  v61 = 0;
  do
  {
    *(_WORD *)((char *)&v61 + v50) = v53;
    v50 += 2;
  }
  while (v50 != 6);
  if (byte_10098FA44)
    v54 = byte_10098FA45 == 0;
  else
    v54 = 1;
  v55 = v54;
  if (v51 || (v55 & 1) == 0)
  {
    if (byte_10098FA46)
      v57 = 2;
    else
      v57 = 1;
    byte_10098FA28 = v57;
    if (!(_DWORD)a2 || !(_DWORD)a3)
    {
      sub_1000654B8(0, v43, v44, v45, v46, v47, v48, v49);
      return 0;
    }
    v60 = (uint64_t)sub_1000654B8;
    LOBYTE(v59) = a11;
    v56 = sub_10000B608(v66[0], a7, a9, (uint64_t)v65, (uint64_t)v64, (uint64_t)v63, v57, 1u);
  }
  else if (byte_10098FA46)
  {
    v60 = 1;
    v59 = a7;
    v56 = sub_10004C9BC(215, (uint64_t (*)())sub_1000654B8, v44, v45, v46, v47, v48, v49, v66[0]);
  }
  else
  {
    v59 = a2;
    v60 = a3;
    v56 = sub_10004C9BC(171, (uint64_t (*)())sub_1000654B8, v44, v45, v46, v47, v48, v49, a1);
  }
  v29 = v56;
  if ((_DWORD)v56)
  {
    if (sub_10005549C())
    {
      sub_100054530("Could not start a LE scan %!", v29, v59, v60);
      v58 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    xmmword_10098FA18 = 0u;
    *(_OWORD *)&byte_10098FA28 = 0u;
    *(_OWORD *)&qword_10098F9F8 = 0u;
    *(_OWORD *)&qword_10098FA08 = 0u;
    byte_10098FA42 = 0;
  }
  return v29;
}

uint64_t sub_1000738DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t result;
  unsigned __int16 v8;
  uint64_t v9;
  char v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;

  if (!dword_100999250)
    return 103;
  if ((qword_10098AC30 & 0x20) == 0)
  {
    if (sub_10005549C())
    {
      sub_100054530("Local device does not support active scanning.");
      v3 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 1330;
  }
  if (!a1)
  {
    sub_100253460();
    if (a2)
      goto LABEL_10;
LABEL_30:
    sub_100253460();
    goto LABEL_31;
  }
  if (!a2)
    goto LABEL_30;
LABEL_10:
  if (*(_QWORD *)a2 && *(_QWORD *)(a2 + 8) && a1 && *(_QWORD *)(a2 + 16))
  {
    if ((byte_10098AC38 & 0xA) != 0)
    {
      if (qword_10098AC40 || off_10098AC50 || off_10098AC48)
      {
        if (sub_10005549C())
        {
          sub_100054530("We are already scanning.");
          v14 = sub_1000544A0(0x42u);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        return 4060;
      }
      else
      {
        v8 = *(_WORD *)(a1 + 4);
        if (!v8)
          v8 = *(unsigned __int8 *)(a1 + 1) << 11;
        v9 = *(unsigned __int16 *)(a1 + 6);
        if (!*(_WORD *)(a1 + 6))
        {
          if (*(_BYTE *)(a1 + 1))
            v9 = 18;
          else
            v9 = 0;
        }
        result = sub_10007315C(*(_BYTE *)a1 ^ 1u, v8, v9, *(unsigned __int16 *)(a1 + 8), *(unsigned __int16 *)(a1 + 12), *(unsigned __int16 *)(a1 + 10), *(unsigned __int8 *)(a1 + 2), *(unsigned __int8 *)(a1 + 3), *(_BYTE *)(a1 + 15), *(_BYTE *)(a1 + 14), *(_BYTE *)(a1 + 17), *(_BYTE *)(a1 + 18), *(_DWORD *)(a1 + 20), HIWORD(*(_DWORD *)(a1 + 20)), *(_WORD *)(a1 + 24), HIBYTE(*(_WORD *)(a1 + 24)), (uint64_t (*)(_QWORD, _QWORD))sub_100065F84, sub_1000540E8, (uint64_t)sub_100066278,
                   a3);
        if (!(_DWORD)result)
        {
          if (*(_BYTE *)(a1 + 1))
            v10 = 1;
          else
            v10 = 2;
          byte_10098AC58 = v10;
          v11 = *(void **)(a2 + 16);
          *(_OWORD *)&qword_10098AC40 = *(_OWORD *)a2;
          off_10098AC50 = v11;
        }
      }
    }
    else
    {
      if (sub_10005549C())
      {
        sub_100054530("We can only scan in Central or Obeserver mode.");
        v13 = sub_1000544A0(0x42u);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 132;
    }
    return result;
  }
LABEL_31:
  if (sub_10005549C())
  {
    sub_100054530("Invalid parameters");
    v12 = sub_1000544A0(0x42u);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  return 101;
}

uint64_t sub_100073B84(uint64_t result)
{
  char *v1;
  char v2;
  __int16 v3;

  v1 = (char *)&dword_10098EDAE[2 * byte_10098EDAD] - byte_10098EDAD;
  v2 = v1[6];
  v3 = *((_WORD *)v1 + 2);
  *(_DWORD *)result = *(_DWORD *)v1;
  *(_WORD *)(result + 4) = v3;
  *(_BYTE *)(result + 6) = v2;
  return result;
}

uint64_t sub_100073BB8()
{
  uint64_t v0;
  NSObject *v1;

  if (off_100985070)
  {
    v0 = off_100985070();
    if (!(_DWORD)v0)
      return v0;
  }
  else
  {
    v0 = 3601;
  }
  if (sub_10005549C())
  {
    sub_100054530("VSC failed %!", v0);
    v1 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  return v0;
}

uint64_t sub_100073C40()
{
  uint64_t v0;
  NSObject *v1;

  if (off_100985028)
  {
    v0 = off_100985028();
    if (!(_DWORD)v0)
      return v0;
  }
  else
  {
    v0 = 3601;
  }
  if (sub_10005549C())
  {
    sub_100054530("VSC failed %!", v0);
    v1 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  return v0;
}

uint64_t sub_100073CC8()
{
  uint64_t v0;
  NSObject *v1;

  if (off_100985590)
  {
    v0 = off_100985590();
    if (!(_DWORD)v0)
      return v0;
  }
  else
  {
    v0 = 3601;
  }
  if (sub_10005549C())
  {
    sub_100054530("VSC failed %!", v0);
    v1 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  return v0;
}

uint64_t sub_100073D50()
{
  uint64_t v0;
  NSObject *v1;

  if (off_100985548)
  {
    v0 = off_100985548();
    if (!(_DWORD)v0)
      return v0;
  }
  else
  {
    v0 = 3601;
  }
  if (sub_10005549C())
  {
    sub_100054530("VSC failed %!", v0);
    v1 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  return v0;
}

uint64_t sub_100073DD8()
{
  uint64_t v0;
  NSObject *v1;

  if (off_1009850C0)
  {
    v0 = off_1009850C0();
    if (!(_DWORD)v0)
      return v0;
  }
  else
  {
    v0 = 3601;
  }
  if (sub_10005549C())
  {
    sub_100054530("VSC failed %!", v0);
    v1 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  return v0;
}

uint64_t sub_100073E60()
{
  uint64_t v0;
  NSObject *v1;

  if (off_1009850C8)
  {
    v0 = off_1009850C8();
    if (!(_DWORD)v0)
      return v0;
  }
  else
  {
    v0 = 3601;
  }
  if (sub_10005549C())
  {
    sub_100054530("VSC failed %!", v0);
    v1 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  return v0;
}

uint64_t sub_100073EE8()
{
  uint64_t v0;
  NSObject *v1;

  if (off_100985090)
  {
    v0 = off_100985090();
    if (!(_DWORD)v0)
      return v0;
  }
  else
  {
    v0 = 3601;
  }
  if (sub_10005549C())
  {
    sub_100054530("VSC failed %!", v0);
    v1 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  return v0;
}

uint64_t sub_100073F70()
{
  uint64_t v0;
  NSObject *v1;

  if (off_100985150)
  {
    v0 = off_100985150();
    if (!(_DWORD)v0)
      return v0;
  }
  else
  {
    v0 = 3601;
  }
  if (sub_10005549C())
  {
    sub_100054530("VSC failed %!", v0);
    v1 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  return v0;
}

uint64_t sub_100073FF8()
{
  uint64_t v0;
  NSObject *v1;

  if (off_100985120)
  {
    v0 = off_100985120();
    if (!(_DWORD)v0)
      return v0;
  }
  else
  {
    v0 = 3601;
  }
  if (sub_10005549C())
  {
    sub_100054530("VSC failed %!", v0);
    v1 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  return v0;
}

uint64_t sub_100074080()
{
  uint64_t v0;
  NSObject *v1;

  if (off_100985138)
  {
    v0 = off_100985138();
    if (!(_DWORD)v0)
      return v0;
  }
  else
  {
    v0 = 3601;
  }
  if (sub_10005549C())
  {
    sub_100054530("VSC failed %!", v0);
    v1 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  return v0;
}

uint64_t sub_100074108(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_10092F010);
  return sub_10006C994((uint64_t *)off_100977A70, a1, a2, a3, a4);
}

uint64_t sub_100074178(unint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  void *__p;
  char *v19;
  uint64_t v20;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v8 = sub_100025158((uint64_t)off_100977890, a1);
  if (!v8)
    return 7;
  __p = 0;
  v19 = 0;
  v20 = 0;
  v9 = sub_10006D888(v8, (uint64_t **)&__p);
  if (!(_DWORD)v9)
  {
    v10 = 0;
    if (a4 && __p != v19)
    {
      v11 = (char *)__p + 8;
      v12 = 1;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        if (qword_1009778E8 != -1)
          dispatch_once(&qword_1009778E8, &stru_10092F170);
        v14 = sub_10046F750((uint64_t)off_1009778E0, a1, v13);
        if (!v14)
        {
          v9 = 7;
          goto LABEL_19;
        }
        *a2++ = v14;
        v15 = v12 + 1;
        if (v12 >= a4)
          break;
        ++v12;
        v16 = v11 == v19;
        v11 += 8;
      }
      while (!v16);
      v10 = v15 - 1;
    }
    v9 = 0;
    *a3 = v10;
  }
LABEL_19:
  if (__p)
  {
    v19 = (char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_1000742DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000742FC(unint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  NSObject *v7;
  uint8_t v8[24];

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092F130);
  v4 = sub_1000229D8((_QWORD *)qword_100977B48, a1);
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v5 = sub_100020C54(off_100977890, a1);
  *a2 = v5;
  if (v5)
    return 0;
  v7 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    if (v4)
      sub_1006F19D4(v4, (uint64_t)v8, v7);
    else
      sub_1006F198C(v8, v7);
  }
  return 7;
}

uint64_t sub_100074424(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v4 = sub_100025158((uint64_t)off_100977890, a1);
  if (!v4)
    return 7;
  v6 = 0;
  result = sub_10006D8D8(v4, &v6);
  if ((_DWORD)result)
    return 1;
  *a2 = -v6;
  return result;
}

uint64_t sub_1000744B4(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v6;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092F150);
  v6 = (uint64_t *)sub_100025158((uint64_t)off_100977890, a1);
  if (v6)
    return sub_10006D930(v6, a1, a2, a3);
  else
    return 7;
}

uint64_t sub_10007453C(unint64_t a1, int *a2, unint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v11;
  int v12;
  __int16 v13;

  if (!a2)
    return 8;
  v12 = *a2;
  v13 = *((_WORD *)a2 + 2);
  if (!(_BYTE)v12)
  {
    v9 = 1;
    while (v9 != 6)
    {
      if (*((unsigned __int8 *)&v12 + v9++))
      {
        if ((unint64_t)(v9 - 2) <= 4)
          goto LABEL_3;
        return 8;
      }
    }
    return 8;
  }
LABEL_3:
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
  v5 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v12, 1);
  if (!v5)
    return 8;
  v6 = v5;
  if (qword_1009778E8 != -1)
  {
    v11 = v5;
    dispatch_once(&qword_1009778E8, &stru_10092EF90);
    v6 = v11;
  }
  v7 = sub_10046F750((uint64_t)off_1009778E0, a1, v6);
  *a3 = v7;
  if (v7)
    return 0;
  else
    return 7;
}

uint64_t sub_10007464C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  __int16 v5;

  v5 = 0;
  v4 = 0;
  if (!sub_10006D80C((uint64_t)&v4, a1))
    return 8;
  result = 0;
  *(_DWORD *)a2 = v4;
  *(_WORD *)(a2 + 4) = v5;
  return result;
}

uint64_t sub_1000746A4(unint64_t a1)
{
  return (a1 << 32) & 0xFF0000000000 | (a1 << 48) | (a1 << 16) & 0xFF00000000 | a1 & 0xFF000000 | (a1 >> 16) & 0xFF0000 | WORD2(a1) & 0xFF00 | BYTE6(a1);
}

uint64_t sub_1000746D0(unint64_t a1, unint64_t *a2)
{
  unint64_t v4;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v4 = sub_1000121E0(off_1009778D0, a1);
  *a2 = v4;
  if (v4)
    return 0;
  else
    return 7;
}

uint64_t sub_100074738(unint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v6;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092EA00);
  v6 = (uint64_t *)sub_10006AC40((uint64_t)off_1009778D0, a1);
  if (v6)
    return sub_10006AD9C(v6, a1, a2, a3);
  else
    return 7;
}

void sub_100074B50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100074EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100074ECC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "triggeredDeviceMap"));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += objc_msgSend(v4, "count");

}

void sub_100074F1C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  id v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v11 = *(id *)(v4 + 40);
  v5 = *(unsigned int *)(a1 + 40);
  v6 = a3;
  v7 = CUDescriptionWithLevel(v6, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  NSAppendPrintF_safe(&v11, "%@\n", v8);
  objc_storeStrong((id *)(v4 + 40), v11);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "triggeredDeviceMap"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100074FF0;
  v10[3] = &unk_100917008;
  v10[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v10);

}

void sub_100074FF0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  id *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;
  void *v13;
  id obj;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v3 + 40);
  v4 = (id *)(v3 + 40);
  obj = v5;
  v6 = a3;
  v7 = mach_absolute_time();
  v8 = UpTicksToSecondsF(v7 - (_QWORD)objc_msgSend(v6, "triggerTicks"));
  v9 = CUPrintDurationDouble(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = "yes";
  if (objc_msgSend(v6, "present"))
    v12 = "yes";
  else
    v12 = "no";
  if (!objc_msgSend(v6, "uiTicks"))
    v11 = "no";
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "device"));

  NSAppendPrintF_safe(&obj, "Triggered %@ ago, present %s, UI %s, %@\n", v10, v12, v11, v13);
  objc_storeStrong(v4, obj);

}

_QWORD *sub_100075354(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v2 == result[5])
    return objc_msgSend(result, "_findExtensionsStart");
  return result;
}

id sub_10007536C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_screenLockedChanged");
}

id sub_100075374(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_screenOnChanged");
}

id sub_10007537C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_triggerPendingExtension");
}

void sub_1000754D0(id a1, NSString *a2, CBExtension *a3, BOOL *a4)
{
  CBExtension *v5;
  NSString *v6;

  v6 = a2;
  v5 = a3;
  if (dword_100977690 <= 30 && (dword_100977690 != -1 || _LogCategory_Initialize(&dword_100977690, 30)))
    LogPrintF_safe(&dword_100977690, "-[CBExtensionsDaemon invalidate]_block_invoke", 30, "CBExtension: invaliate %@", v6);
  -[CBExtension invalidate](v5, "invalidate");

}

void sub_100075998(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = a3;
  if (objc_msgSend(a2, "rangeOfString:options:", *(_QWORD *)(a1 + 32), 9) != (id)0x7FFFFFFFFFFFFFFFLL)
    objc_msgSend(v5, "reset");

}

void sub_100075B64(id a1, NSString *a2, CBExtension *a3, BOOL *a4)
{
  -[CBExtension reset](a3, "reset");
}

id sub_100075BF4(uint64_t a1)
{
  if (dword_100977690 <= 30 && (dword_100977690 != -1 || _LogCategory_Initialize(&dword_100977690, 30)))
    LogPrintF_safe(&dword_100977690, "-[CBExtensionsDaemon _appRegistrationNotification:]_block_invoke", 30, "App registration notification");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "trigger");
}

void sub_100075DCC(uint64_t a1)
{
  __objc2_class *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  int isa;
  int v14;
  int v15;
  CFTypeID TypeID;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *i;
  CFTypeID v22;
  uint64_t v23;
  id v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  int v32;
  void *v33;
  _QWORD block[6];
  _QWORD v35[6];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t);
  id v45;
  const __CFString *v46;
  void *v47;
  _BYTE v48[128];

  v32 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 27);
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationRecord enumeratorWithOptions:](LSApplicationRecord, "enumeratorWithOptions:", 1));
  objc_msgSend(v33, "setErrorHandler:", &stru_100917228);
  v40 = 0;
  v41 = &v40;
  v42 = 0x3032000000;
  v43 = sub_10006245C;
  v44 = sub_1000622E8;
  v45 = 0;
  v1 = &OBJC_METACLASS___BTVCLinkAdvertiseSet;
  do
  {
    v2 = objc_autoreleasePoolPush();
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "nextObject"));
    v4 = v3;
    if (v3)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleIdentifier"));
      if (v5
        && (v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "entitlements")),
            v7 = objc_msgSend(v6, "objectForKey:ofClass:", CFSTR("com.apple.bluetooth.discovery"), objc_opt_class(NSDictionary)), v8 = (void *)objc_claimAutoreleasedReturnValue(v7), v6, v8))
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "entitlements"));
        v10 = objc_msgSend(v9, "objectForKey:ofClass:", CFSTR("com.apple.bluetooth.system"), objc_opt_class(NSNumber));
        v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

        if ((objc_msgSend(v11, "BOOLValue") & 1) != 0)
        {
          if (v32)
          {
            v12 = 0;
            while ((objc_msgSend(v5, "isEqual:", off_100916F90[v12]) & 1) == 0)
            {
              if (++v12 == 9)
              {
                isa = (int)v1[42].isa;
                if (isa <= 90 && (isa != -1 || _LogCategory_Initialize(&dword_100977690, 90)))
                  LogPrintF_safe(&dword_100977690, "CBExtensionMap * _Nullable _findExtensionsOffQueue(BOOL)", 90, "### CBExtension: app not approved, %@", v5);
                goto LABEL_37;
              }
            }
          }
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          TypeID = CFStringGetTypeID();
          v17 = (void *)CFPrefs_CopyTypedValue(CFSTR("com.apple.bluetooth"), CFSTR("disabledExtensions"), TypeID, 0);
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "componentsSeparatedByString:", CFSTR(",")));

          v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v36, v48, 16);
          if (v19)
          {
            v20 = *(_QWORD *)v37;
            while (2)
            {
              for (i = 0; i != v19; i = (char *)i + 1)
              {
                if (*(_QWORD *)v37 != v20)
                  objc_enumerationMutation(v18);
                if ((objc_msgSend(*(id *)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i), "isEqual:", v5) & 1) != 0)
                {

                  v1 = &OBJC_METACLASS___BTVCLinkAdvertiseSet;
                  if (dword_100977690 <= 30
                    && (dword_100977690 != -1 || _LogCategory_Initialize(&dword_100977690, 30)))
                  {
                    LogPrintF_safe(&dword_100977690, "CBExtensionMap * _Nullable _findExtensionsOffQueue(BOOL)", 30, "CBExtension: disabled, %@", v5);
                  }
                  goto LABEL_37;
                }
              }
              v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v36, v48, 16);
              if (v19)
                continue;
              break;
            }
          }

          v1 = &OBJC_METACLASS___BTVCLinkAdvertiseSet;
          v22 = CFArrayGetTypeID();
          if (CFDictionaryGetTypedValue(v8, CFSTR("discoveryFlags"), v22, 0))
          {
            v46 = CFSTR("legacy");
            v47 = v8;
            v23 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1));

            v8 = (void *)v23;
          }
          v35[0] = _NSConcreteStackBlock;
          v35[1] = 3221225472;
          v35[2] = sub_1000785FC;
          v35[3] = &unk_100917250;
          v35[4] = v5;
          v35[5] = &v40;
          objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v35);
          v14 = 0;
        }
        else
        {
          v15 = (int)v1[42].isa;
          if (v15 <= 90 && (v15 != -1 || _LogCategory_Initialize(&dword_100977690, 90)))
            LogPrintF_safe(&dword_100977690, "CBExtensionMap * _Nullable _findExtensionsOffQueue(BOOL)", 90, "### CBExtension: app not entitled, %@", v5);
LABEL_37:
          v14 = 3;
        }

      }
      else
      {
        v14 = 3;
      }

    }
    else
    {
      v14 = 2;
    }

    objc_autoreleasePoolPop(v2);
  }
  while (v14 != 2);
  v24 = (id)v41[5];
  _Block_object_dispose(&v40, 8);

  v25 = (int)v1[42].isa;
  if (v25 <= 30 && (v25 != -1 || _LogCategory_Initialize(&dword_100977690, 30)))
  {
    v26 = objc_msgSend(v24, "count");
    v27 = mach_absolute_time();
    v28 = UpTicksToMilliseconds(v27 - *(_QWORD *)(a1 + 40));
    LogPrintF_safe(&dword_100977690, "-[CBExtensionsDaemon _findExtensionsStart]_block_invoke", 30, "FindExtensions: completed: extensions %d, %llu ms", v26, v28);
  }
  v29 = *(_QWORD *)(a1 + 32);
  v30 = *(NSObject **)(v29 + 64);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100076350;
  block[3] = &unk_100917058;
  block[4] = v29;
  block[5] = v24;
  dispatch_async(v30, block);

}

void sub_100076308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

_BYTE *sub_100076350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  _BYTE *result;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 25) = 0;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(v4 + 24);
  *(_BYTE *)(v4 + 24) = 0;
  result = *(_BYTE **)(a1 + 32);
  if (!result[26])
  {
    if (v5)
    {
      if (dword_100977690 <= 30
        && (dword_100977690 != -1 || _LogCategory_Initialize(&dword_100977690, 30)))
      {
        LogPrintF_safe(&dword_100977690, "-[CBExtensionsDaemon _findExtensionsStart]_block_invoke_2", 30, "FindExtensions: restart after deferred");
      }
      return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "trigger", a3);
    }
    else
    {
      return objc_msgSend(result, "_updateExtensions:", *(_QWORD *)(a1 + 40));
    }
  }
  return result;
}

void sub_1000769F0(id a1, NSString *a2, CBExtension *a3, BOOL *a4)
{
  -[CBExtension setPresent:](a3, "setPresent:", 0, a4);
}

_QWORD *sub_100076EA4(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;

  v1 = result;
  v2 = result[4];
  v3 = *(_QWORD *)(result[5] + 32);
  if (dword_100977690 <= 30)
  {
    if (dword_100977690 != -1 || (result = (_QWORD *)_LogCategory_Initialize(&dword_100977690, 30), (_DWORD)result))
    {
      v4 = ": unknown";
      if (v2 == v3)
        v4 = "";
      result = (_QWORD *)LogPrintF_safe(&dword_100977690, "-[CBExtensionsDaemon remoteAlertHandleDidActivate:]_block_invoke", 30, "Remote alert activated%s", v4);
    }
  }
  if (v2 == v3)
  {
    *(_BYTE *)(v1[5] + 48) = 1;
    return objc_msgSend(*(id *)(v1[5] + 56), "setSystemFlags:mask:", 1, 1);
  }
  return result;
}

_QWORD *sub_100076FF8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;

  v1 = result;
  v2 = result[4];
  v3 = *(_QWORD *)(result[5] + 32);
  if (dword_100977690 <= 30)
  {
    if (dword_100977690 != -1 || (result = (_QWORD *)_LogCategory_Initialize(&dword_100977690, 30), (_DWORD)result))
    {
      v4 = ": unknown";
      if (v2 == v3)
        v4 = "";
      result = (_QWORD *)LogPrintF_safe(&dword_100977690, "-[CBExtensionsDaemon remoteAlertHandleDidDeactivate:]_block_invoke", 30, "Remote alert deactivated%s", v4);
    }
  }
  if (v2 == v3)
  {
    *(_BYTE *)(v1[5] + 48) = 0;
    return objc_msgSend(*(id *)(v1[5] + 56), "setSystemFlags:mask:", 0, 1);
  }
  return result;
}

id sub_100077148(uint64_t a1)
{
  const char *v2;
  _QWORD *v3;
  void *v4;

  if (dword_100977690 <= 30 && (dword_100977690 != -1 || _LogCategory_Initialize(&dword_100977690, 30)))
  {
    if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32))
      v2 = "";
    else
      v2 = ": unknown";
    LogPrintF_safe(&dword_100977690, "-[CBExtensionsDaemon remoteAlertHandle:didInvalidateWithError:]_block_invoke", 30, "Remote alert invalidated%s", v2);
  }
  v4 = *(void **)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 40);
  if (v4 == (void *)v3[4])
  {
    v3[4] = 0;

    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 48) = 0;
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 56), "setSystemFlags:mask:", 0, 1);
    v3 = *(_QWORD **)(a1 + 40);
  }
  return objc_msgSend(v3, "_triggerPendingExtension");
}

void sub_100077748(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  unsigned __int8 v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  __CFString *v16;

  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "device"));
  if (v7 && objc_msgSend(v6, "present") && !objc_msgSend(v6, "uiTicks"))
  {
    v16 = CFSTR("unknown");
    if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "remoteAlertAllowedAndReturnReason:extension:", &v16) & 1) != 0)
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(void **)(v8 + 56);
      v15 = 0;
      v10 = objc_msgSend(v9, "remoteAlertStartWithCBExtension:device:error:", v8, v7, &v15);
      v11 = v15;
      if ((v10 & 1) != 0)
      {
        objc_msgSend(v6, "setUiTicks:", mach_absolute_time());
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
        *(_BYTE *)(*(_QWORD *)(a1 + 32) + 11) = 1;
        *a4 = 1;
      }
      else if (dword_100977690 <= 90
             && (dword_100977690 != -1 || _LogCategory_Initialize(&dword_100977690, 90)))
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
        v13 = CUPrintNSError(v11);
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        LogPrintF_safe(&dword_100977690, "-[CBExtension triggerIfPending]_block_invoke", 90, "### CBExtension: UI start failed: %@, %@", v12, v14);

      }
    }
    else
    {
      if (dword_100977690 <= 30
        && (dword_100977690 != -1 || _LogCategory_Initialize(&dword_100977690, 30)))
      {
        LogPrintF_safe(&dword_100977690, "-[CBExtension triggerIfPending]_block_invoke", 30, "CBExtension: UI start not allowed: %@, %@, %@", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), v16, v7);
      }
      *a4 = 1;
    }

  }
}

_QWORD *sub_100077BE4(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[4])
    return objc_msgSend(result, "_deviceFound:", a2);
  return result;
}

_QWORD *sub_100077C00(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[4])
    return objc_msgSend(result, "_deviceLost:", a2);
  return result;
}

void sub_100077C1C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int v12;
  id v13;

  v3 = a2;
  v4 = v3;
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (v6 == *(_QWORD *)(v5 + 32))
  {
    if (v3)
    {
      v13 = v3;
      if (dword_100977690 <= 90)
      {
        if (dword_100977690 == -1)
        {
          if (!_LogCategory_Initialize(&dword_100977690, 90))
            goto LABEL_10;
          v5 = *(_QWORD *)(a1 + 40);
          v3 = v13;
        }
        v7 = *(_QWORD *)(v5 + 64);
        v8 = CUPrintNSError(v3);
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        LogPrintF_safe(&dword_100977690, "-[CBExtension updateWithXPCDiscoveryInfo:]_block_invoke_3", 90, "### CBExtension: discovery start failed: %@, %@", v7, v9);

      }
LABEL_10:
      objc_msgSend(*(id *)(a1 + 32), "invalidate");
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(void **)(v10 + 32);
      *(_QWORD *)(v10 + 32) = 0;

LABEL_11:
      v4 = v13;
      goto LABEL_12;
    }
    if (dword_100977690 <= 30)
    {
      v13 = 0;
      if (dword_100977690 == -1)
      {
        v12 = _LogCategory_Initialize(&dword_100977690, 30);
        v4 = 0;
        if (!v12)
          goto LABEL_12;
        v6 = *(_QWORD *)(a1 + 32);
        v5 = *(_QWORD *)(a1 + 40);
      }
      LogPrintF_safe(&dword_100977690, "-[CBExtension updateWithXPCDiscoveryInfo:]_block_invoke_3", 30, "CBExtension: discovery started: %@, %@", *(_QWORD *)(v5 + 64), v6);
      goto LABEL_11;
    }
  }
LABEL_12:

}

void sub_100078560(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  uint64_t v4;
  void *v5;
  int v6;
  NSError *v7;

  v2 = a2;
  v3 = v2;
  if (dword_100977690 <= 90)
  {
    v7 = v2;
    if (dword_100977690 != -1 || (v6 = _LogCategory_Initialize(&dword_100977690, 90), v3 = v7, v6))
    {
      v4 = CUPrintNSError(v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977690, "CBExtensionMap * _Nullable _findExtensionsOffQueue(BOOL)_block_invoke", 90, "### Update extensions enumerate error: %@", v5);

      v3 = v7;
    }
  }

}

void sub_1000785FC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  CBExtension *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;

  v16 = a3;
  v5 = a2;
  v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%@.%@"), *(_QWORD *)(a1 + 32), v5);

  v7 = (void *)_CFXPCCreateXPCObjectFromCFObject(v16);
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "objectForKeyedSubscript:", v6));

    if (v8)
    {
      if (dword_100977690 <= 90
        && (dword_100977690 != -1 || _LogCategory_Initialize(&dword_100977690, 90)))
      {
        LogPrintF_safe(&dword_100977690, "CBExtensionMap * _Nullable _findExtensionsOffQueue(BOOL)_block_invoke_2", 90, "### CBExtension: duplicate, %@", v6);
      }
    }
    else
    {
      v11 = objc_alloc_init(CBExtension);
      -[CBExtension setBundleID:](v11, "setBundleID:", *(_QWORD *)(a1 + 32));
      -[CBExtension setDiscoveryInfo:](v11, "setDiscoveryInfo:", v16);
      -[CBExtension setXpcDiscoveryInfo:](v11, "setXpcDiscoveryInfo:", v7);
      v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      if (!v12)
      {
        v13 = objc_alloc_init((Class)NSMutableDictionary);
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v15 = *(void **)(v14 + 40);
        *(_QWORD *)(v14 + 40) = v13;

        v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      }
      objc_msgSend(v12, "setObject:forKeyedSubscript:", v11, v6);

    }
  }
  else if (dword_100977690 <= 90
         && (dword_100977690 != -1 || _LogCategory_Initialize(&dword_100977690, 90)))
  {
    v9 = CUPrintNSObjectOneLine(v16);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    LogPrintF_safe(&dword_100977690, "CBExtensionMap * _Nullable _findExtensionsOffQueue(BOOL)_block_invoke_2", 90, "### CBExtension: Convert XPC->CF failed, %@, %@", v6, v10);

  }
}

void sub_100078A04(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100078A50(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id obj;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v6 + 40);
  v7 = CUDescriptionWithLevel(a3, 30);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  NSAppendPrintF_safe(&obj, "%@\n", v8);
  objc_storeStrong((id *)(v6 + 40), obj);

  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (*(int *)(a1 + 48) >= 11 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) >= 0x32uLL)
    *a4 = 1;
}

void sub_100078B04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100078B14(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 56);
  v7 = v3;
  if (!v4)
  {
    v5 = objc_alloc_init((Class)NSMutableSet);
    v6 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v5;

    v4 = *(void **)(a1 + 56);
    v3 = v7;
  }
  objc_msgSend(v4, "addObject:", v3);
  if (!*(_BYTE *)(a1 + 64))
  {
    if (dword_1009777C0 <= 30
      && (dword_1009777C0 != -1 || _LogCategory_Initialize(&dword_1009777C0, 30)))
    {
      LogPrintF_safe(&dword_1009777C0, "void CBStackDeviceMonitorCPP::addMonitor(CBStackDeviceMonitorBTStack * _Nonnull __strong)", 30, "Add listeners");
    }
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_1009176B0);
    sub_10041E160(off_1009778D0, a1);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_1009176D0);
    sub_10007A76C((uint64_t)off_1009778E0 + 240, a1 + 8);
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_100917630);
    sub_10007ABE0((uint64_t)off_100977890 + 64, a1 + 16);
    if (qword_1009778F8 != -1)
      dispatch_once(&qword_1009778F8, &stru_1009176F0);
    sub_10007AEA4(qword_1009778F0 + 40, a1 + 24);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100917650);
    sub_10061F358((uint64_t)off_1009778A0, a1 + 32, 0);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100917690);
    sub_100668DE4((uint64_t)off_1009778C0, a1 + 40);
    if (qword_100977908 != -1)
      dispatch_once(&qword_100977908, &stru_100917710);
    sub_10007B168(qword_100977900 + 392, a1 + 48);
    *(_BYTE *)(a1 + 64) = 1;
  }

}

void sub_100078D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_100078D88(uint64_t a1)
{
  if (dword_1009777C0 <= 30 && (dword_1009777C0 != -1 || _LogCategory_Initialize(&dword_1009777C0, 30)))
    LogPrintF_safe(&dword_1009777C0, "-[CBStackDeviceMonitorBTStack activate]_block_invoke", 30, "Accessory power changed (coalesced)");
  return objc_msgSend(*(id *)(a1 + 32), "updateDevices");
}

id sub_100078DF8(uint64_t a1)
{
  if (dword_1009777C0 <= 20 && (dword_1009777C0 != -1 || _LogCategory_Initialize(&dword_1009777C0, 20)))
    LogPrintF_safe(&dword_1009777C0, "-[CBStackDeviceMonitorBTStack activate]_block_invoke_2", 20, "Accessory power changed (raw)");
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "trigger");
}

void sub_100078F64(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 56), "removeObject:");
  if (*(_BYTE *)(a1 + 64) && !objc_msgSend(*(id *)(a1 + 56), "count"))
  {
    if (dword_1009777C0 <= 30
      && (dword_1009777C0 != -1 || _LogCategory_Initialize(&dword_1009777C0, 30)))
    {
      LogPrintF_safe(&dword_1009777C0, "void CBStackDeviceMonitorCPP::removeMonitor(CBStackDeviceMonitorBTStack * _Nonnull __strong)", 30, "Remove listeners");
    }
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_1009176B0);
    sub_10041E298((uint64_t)off_1009778D0, a1);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_1009176D0);
    sub_100069060((uint64_t)off_1009778E0 + 240, a1 + 8);
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_100917630);
    sub_100069060((uint64_t)off_100977890 + 64, a1 + 16);
    if (qword_1009778F8 != -1)
      dispatch_once(&qword_1009778F8, &stru_1009176F0);
    sub_100069060(qword_1009778F0 + 40, a1 + 24);
    if (qword_100977908 != -1)
      dispatch_once(&qword_100977908, &stru_100917710);
    sub_100069060(qword_100977900 + 392, a1 + 48);
    *(_BYTE *)(a1 + 64) = 0;
  }

}

void sub_100079130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100079220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100079314(id a1, NSString *a2, CBDevice *a3, BOOL *a4)
{
  CBDevice *v4;

  v4 = a3;
  -[CBDevice setChangeFlags:](v4, "setChangeFlags:", 0);
  -[CBDevice setOldDiscoveryFlags:](v4, "setOldDiscoveryFlags:", -[CBDevice discoveryFlags](v4, "discoveryFlags"));
  -[CBDevice setDiscoveryFlags:](v4, "setDiscoveryFlags:", (unint64_t)-[CBDevice discoveryFlags](v4, "discoveryFlags") & 0xFFFFFFFFFF5FFFFFLL);

}

void sub_100079374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100079388(uint64_t a1, void *a2, void *a3)
{
  id v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  v6 = (unint64_t)objc_msgSend(v5, "changeFlags");
  v7 = (unint64_t)objc_msgSend(v5, "oldDiscoveryFlags");
  v8 = (unint64_t)objc_msgSend(v5, "discoveryFlags") ^ v7;
  if (v8)
    v6 |= 0x800000000uLL;
  v9 = v6 | v8;
  objc_msgSend(v5, "setChangeFlags:", (unint64_t)objc_msgSend(v5, "changeFlags") | v9);
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) & v9) != 0
    && (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) & (unint64_t)objc_msgSend(v5, "discoveryFlags")) != 0)
  {
    if (dword_1009777C0 <= 30
      && (dword_1009777C0 != -1 || _LogCategory_Initialize(&dword_1009777C0, 30)))
    {
      LogPrintF_safe(&dword_1009777C0, "-[CBStackDeviceMonitorBTStack updateDevices]_block_invoke_2", 30, "Device found: %@", v5, v12);
    }
    v10 = objc_retainBlock(*(id *)(*(_QWORD *)(a1 + 32) + 48));
    v11 = v10;
    if (v10)
      (*((void (**)(id, id))v10 + 2))(v10, v5);

  }
  else if (dword_1009777C0 <= 10
         && (dword_1009777C0 != -1 || _LogCategory_Initialize(&dword_1009777C0, 10)))
  {
    LogPrintF_safe(&dword_1009777C0, "-[CBStackDeviceMonitorBTStack updateDevices]_block_invoke_2", 10, "Device found: %@, unchanged", v5, v12);
  }

}

void sub_100079510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1000796F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007972C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  if (!v2)
    v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v2;
  return result;
}

void sub_100079974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000799A8(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_100079A5C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  if (dword_1009777C0 <= 30 && (dword_1009777C0 != -1 || _LogCategory_Initialize(&dword_1009777C0, 30)))
    LogPrintF_safe(&dword_1009777C0, "virtual void CBStackDeviceMonitorCPP::accessoryInEarStateChanged(BT::Device * _Nonnull)", 30, "Device placement changed");
  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10007A4F0;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_100079B0C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  _QWORD v6[5];

  if (dword_1009777C0 <= 30 && (dword_1009777C0 != -1 || _LogCategory_Initialize(&dword_1009777C0, 30)))
    LogPrintF_safe(&dword_1009777C0, "virtual void CBStackDeviceMonitorCPP::accessoryStreamStateChanged(BT::Device * _Nonnull, uint8_t)", 30, "Audio stream state changed: %u", a3);
  v5 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10007A4F0;
  v6[3] = &unk_100917378;
  v6[4] = a1;
  sub_100041A34(v5, v6);
}

void sub_100079BC8(uint64_t a1, uint64_t a2, int a3)
{
  void **v6;
  uint64_t v7;
  void *__p[2];
  void (*v9)(uint64_t);
  void *v10;
  uint64_t v11;

  if (dword_1009777C0 <= 30 && (dword_1009777C0 != -1 || _LogCategory_Initialize(&dword_1009777C0, 30)))
  {
    sub_10043E5F8(a2, __p);
    if (SHIBYTE(v9) >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    LogPrintF_safe(&dword_1009777C0, "virtual void CBStackDeviceMonitorCPP::aclConnected(BT::Device * _Nonnull, BTResult)", 30, "ACL connected: %s, result %d", (const char *)v6, a3);
    if (SHIBYTE(v9) < 0)
      operator delete(__p[0]);
  }
  v7 = sub_1000419F4();
  __p[0] = _NSConcreteStackBlock;
  __p[1] = (void *)3221225472;
  v9 = sub_10007A4F0;
  v10 = &unk_100917378;
  v11 = a1;
  sub_100041A34(v7, __p);
}

void sub_100079CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100079CD8(uint64_t a1, uint64_t a2, int a3)
{
  sub_100079BC8(a1 - 8, a2, a3);
}

void sub_100079CE0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  void **v8;
  uint64_t v9;
  void *__p[2];
  void (*v11)(uint64_t);
  void *v12;
  uint64_t v13;

  if (dword_1009777C0 <= 30 && (dword_1009777C0 != -1 || _LogCategory_Initialize(&dword_1009777C0, 30)))
  {
    sub_10043E5F8(a2, __p);
    if (SHIBYTE(v11) >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    LogPrintF_safe(&dword_1009777C0, "virtual void CBStackDeviceMonitorCPP::aclDisconnected(BT::Device * _Nonnull, BTResult, BTResult)", 30, "ACL disconnected: %s, result %d, reason %d", (const char *)v8, a3, a4);
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
  }
  v9 = sub_1000419F4();
  __p[0] = _NSConcreteStackBlock;
  __p[1] = (void *)3221225472;
  v11 = sub_10007A4F0;
  v12 = &unk_100917378;
  v13 = a1;
  sub_100041A34(v9, __p);
}

void sub_100079DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100079E00(uint64_t a1, uint64_t a2, int a3, int a4)
{
  sub_100079CE0(a1 - 8, a2, a3, a4);
}

void sub_100079E08(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  _QWORD v6[5];

  if (dword_1009777C0 <= 30 && (dword_1009777C0 != -1 || _LogCategory_Initialize(&dword_1009777C0, 30)))
    LogPrintF_safe(&dword_1009777C0, "virtual void CBStackDeviceMonitorCPP::deviceInfoChanged(BT::Device * _Nonnull, BT::DEVICE_INFO_CHANGED_TYPE)", 30, "Device info changed: 0x%X", a3);
  v5 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10007A4F0;
  v6[3] = &unk_100917378;
  v6[4] = a1;
  sub_100041A34(v5, v6);
}

void sub_100079EC0(uint64_t a1, uint64_t a2, int a3)
{
  sub_100079E08(a1 - 8, a2, a3);
}

void sub_100079EC8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[5];

  v3 = a2;
  if (dword_1009777C0 <= 30 && (dword_1009777C0 != -1 || _LogCategory_Initialize(&dword_1009777C0, 30)))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));
    LogPrintF_safe(&dword_1009777C0, "virtual void CBStackDeviceMonitorCPP::gapNameUpdated(NSUUID * _Nonnull __strong)", 30, "GAP named updated: Device %@", v4);

  }
  v5 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10007A4F0;
  v6[3] = &unk_100917378;
  v6[4] = a1;
  sub_100041A34(v5, v6);

}

void sub_100079FA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100079FC0(uint64_t a1, void *a2)
{
  sub_100079EC8(a1 - 24, a2);
}

void sub_100079FC8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[5];

  v3 = a2;
  if (dword_1009777C0 <= 30 && (dword_1009777C0 != -1 || _LogCategory_Initialize(&dword_1009777C0, 30)))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));
    LogPrintF_safe(&dword_1009777C0, "virtual void CBStackDeviceMonitorCPP::leDeviceInfoChanged(NSUUID * _Nonnull __strong, BT::LE_DEVICE_INFO_CHANGED_TYPE)", 30, "leDeviceInfoChanged: Device %@", v4);

  }
  v5 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10007A4F0;
  v6[3] = &unk_100917378;
  v6[4] = a1;
  sub_100041A34(v5, v6);

}

void sub_10007A0A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10007A0C0(uint64_t a1, void *a2)
{
  sub_100079FC8(a1 - 40, a2);
}

void sub_10007A0C8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[5];

  v3 = a2;
  if (dword_1009777C0 <= 30 && (dword_1009777C0 != -1 || _LogCategory_Initialize(&dword_1009777C0, 30)))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));
    LogPrintF_safe(&dword_1009777C0, "virtual void CBStackDeviceMonitorCPP::gattDeviceInitCompleted(NSUUID * _Nonnull __strong)", 30, "GATT device init completed: Device %@", v4);

  }
  v5 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10007A4F0;
  v6[3] = &unk_100917378;
  v6[4] = a1;
  sub_100041A34(v5, v6);

}

void sub_10007A1A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10007A1C0(uint64_t a1, void *a2)
{
  sub_10007A0C8(a1 - 24, a2);
}

void sub_10007A1C8(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  if (dword_1009777C0 <= 30 && (dword_1009777C0 != -1 || _LogCategory_Initialize(&dword_1009777C0, 30)))
    LogPrintF_safe(&dword_1009777C0, "virtual void CBStackDeviceMonitorCPP::leaDeviceCountChanged(const std::map<int, int>)", 30, "Number of connected Apple LEA devices changed");
  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10007A4F0;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_10007A278(uint64_t a1)
{
  sub_10007A1C8(a1 - 48);
}

void sub_10007A280(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10007A2E8;
  v5[3] = &unk_1009173C0;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_10007A2E8(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  NSObject *v8;
  _QWORD v9[5];
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v2 = *(_QWORD *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BAA0);
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = *(id *)(v2 + 56);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dispatchQueue"));
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3221225472;
        v9[2] = sub_10007A478;
        v9[3] = &unk_1009173A0;
        v9[4] = v7;
        v10 = *(_DWORD *)(a1 + 40);
        dispatch_async(v8, v9);

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BAA0);
}

void sub_10007A458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10007A478(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "localDeviceEvent:", *(unsigned int *)(a1 + 40));
}

void sub_10007A488(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  v3 = a1 - 16;
  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10007A2E8;
  v5[3] = &unk_1009173C0;
  v5[4] = v3;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_10007A4F0(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  NSObject *v7;
  _QWORD block[5];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v1 = *(_QWORD *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BAA0);
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(v1 + 56);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
        v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dispatchQueue"));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10007A674;
        block[3] = &unk_1009172A0;
        block[4] = v6;
        dispatch_async(v7, block);

      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BAA0);
}

void sub_10007A654(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10007A674(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateDevices");
}

uint64_t sub_10007A67C(uint64_t a1)
{

  return a1;
}

void sub_10007A6A4(uint64_t a1)
{

  operator delete();
}

void sub_10007A76C(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_10007A7F4(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10007A7F4(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_10007A9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007AA30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)sub_10007ABA0(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        v4 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

char *sub_10007AADC(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void *sub_10007ABA0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_10007ABD4();
  return operator new(8 * a2);
}

void sub_10007ABD4()
{
  abort();
}

void sub_10007ABE0(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_10007AC68(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10007AC68(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_10007AE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007AEA4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_10007AF2C(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10007AF2C(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_10007B130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007B168(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_10007B1F0(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10007B1F0(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_10007B3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10007B42C(id a1)
{
  operator new();
}

void sub_10007B46C()
{
  operator delete();
}

void sub_10007B490(id a1)
{
  operator new();
}

void sub_10007B4D0()
{
  operator delete();
}

void sub_10007B4F4(id a1)
{
  operator new();
}

void sub_10007B534()
{
  operator delete();
}

void sub_10007B558(id a1)
{
  operator new();
}

void sub_10007B598()
{
  operator delete();
}

void sub_10007B5BC(id a1)
{
  operator new();
}

void sub_10007B5FC()
{
  operator delete();
}

void sub_10007B620(id a1)
{
  operator new();
}

void sub_10007B660()
{
  operator delete();
}

void sub_10007B684(id a1)
{
  operator new();
}

void sub_10007B6C4()
{
  operator delete();
}

void sub_10007B6E8(id a1)
{
  operator new();
}

void sub_10007B728()
{
  operator delete();
}

void sub_10007B92C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10007B944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id obj;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v3 + 40);
  v4 = CUDescriptionWithLevel(a3, *(unsigned int *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  NSAppendPrintF_safe(&obj, "%@\n", v5);
  objc_storeStrong((id *)(v3 + 40), obj);

}

id sub_10007BAF0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_screenOnChanged");
}

id sub_10007BAF8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_screenOnChanged");
}

uint64_t sub_10007C2C0(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (objc_msgSend(v1, "caseInsensitiveCompare:", CFSTR("Charging")))
  {
    if (objc_msgSend(v1, "caseInsensitiveCompare:", CFSTR("Discharging")))
    {
      if (objc_msgSend(v1, "caseInsensitiveCompare:", CFSTR("FullyCharged")))
        v2 = 4 * (objc_msgSend(v1, "caseInsensitiveCompare:", CFSTR("OBC")) == 0);
      else
        v2 = 3;
    }
    else
    {
      v2 = 2;
    }
  }
  else
  {
    v2 = 1;
  }

  return v2;
}

_QWORD *sub_10007CDEC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[1])
    return objc_msgSend(result, "_accessoryDiscoveryFoundDevice:", a2);
  return result;
}

void sub_10007CE08(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = a2;
  if (v3 && *(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8))
  {
    v8 = v3;
    if (dword_100977910 <= 90
      && (dword_100977910 != -1 || _LogCategory_Initialize(&dword_100977910, 90)))
    {
      v4 = CUPrintNSError(v8);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977910, "-[CBAccessoryDaemon _accessoryDiscoveryEnsureStarted]_block_invoke_2", 90, "### Accessory discovery start failed: %@", v5);

    }
    objc_msgSend(*(id *)(a1 + 32), "invalidate");
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(void **)(v6 + 8);
    *(_QWORD *)(v6 + 8) = 0;

    v3 = v8;
  }

}

void sub_10007CF78(id a1, NSString *a2, CBAccessoryInfo *a3, BOOL *a4)
{
  -[CBAccessoryInfo invalidate](a3, "invalidate");
}

void sub_10007D274(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  void *v7;
  unsigned int v8;
  void *v9;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40))
  {
    v9 = v3;
    v5 = (unsigned __int16)objc_msgSend(v3, "deviceFlags");
    v4 = v9;
    if ((v5 & 0x4000) != 0 || (v6 = objc_msgSend(v9, "deviceFlags"), v4 = v9, (v6 & 2) != 0))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[CBProductInfo productInfoWithProductID:](CBProductInfo, "productInfoWithProductID:", objc_msgSend(v4, "productID")));
      v8 = objc_msgSend(v7, "flags");

      if ((v8 & 0x100000) != 0)
        objc_msgSend(*(id *)(a1 + 40), "_update");
      objc_msgSend(*(id *)(a1 + 40), "_connectionMonitorFoundDevice:", v9);
      v4 = v9;
    }
  }

}

void sub_10007D328(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  void *v7;
  unsigned int v8;
  void *v9;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40))
  {
    v9 = v3;
    v5 = (unsigned __int16)objc_msgSend(v3, "deviceFlags");
    v4 = v9;
    if ((v5 & 0x4000) == 0)
    {
      v6 = objc_msgSend(v9, "deviceFlags");
      v4 = v9;
      if ((v6 & 2) == 0)
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[CBProductInfo productInfoWithProductID:](CBProductInfo, "productInfoWithProductID:", objc_msgSend(v9, "productID")));
        v8 = objc_msgSend(v7, "flags");

        v4 = v9;
        if ((v8 & 0x100000) != 0)
        {
          objc_msgSend(*(id *)(a1 + 40), "_update");
          v4 = v9;
        }
      }
    }
  }

}

void sub_10007D3D4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = a2;
  if (v3 && *(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40))
  {
    v8 = v3;
    if (dword_100977910 <= 90
      && (dword_100977910 != -1 || _LogCategory_Initialize(&dword_100977910, 90)))
    {
      v4 = CUPrintNSError(v8);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977910, "-[CBAccessoryDaemon _connectionMonitorEnsureStarted]_block_invoke_3", 90, "### Connection monitor: start failed: %@", v5);

    }
    objc_msgSend(*(id *)(a1 + 32), "invalidate");
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = 0;

    v3 = v8;
  }

}

void sub_10007D974(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  if (v10)
  {
    if (dword_100977910 <= 90
      && (dword_100977910 != -1 || _LogCategory_Initialize(&dword_100977910, 90)))
    {
      v3 = CUPrintNSError(v10);
      v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
      LogPrintF_safe(&dword_100977910, "-[CBAccessoryDaemon _connectionMonitorFoundDevice:]_block_invoke", 90, "### Connection monitor: connect failed %@ for %@", v4, *(_QWORD *)(a1 + 32));

    }
    objc_msgSend(*(id *)(a1 + 40), "invalidate");
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 32), "setObject:forKeyedSubscript:", 0, *(_QWORD *)(a1 + 56));
  }
  else
  {
    if (dword_100977910 <= 30
      && (dword_100977910 != -1 || _LogCategory_Initialize(&dword_100977910, 30)))
    {
      LogPrintF_safe(&dword_100977910, "-[CBAccessoryDaemon _connectionMonitorFoundDevice:]_block_invoke", 30, "Connection monitor: connect completed %@", *(_QWORD *)(a1 + 32));
    }
    v5 = objc_msgSend(*(id *)(a1 + 64), "mutableCopy");
    v6 = v5;
    if (v5)
      v7 = v5;
    else
      v7 = objc_alloc_init((Class)NSMutableDictionary);
    v8 = v7;

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 72)));
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v9, *(_QWORD *)(a1 + 56));

    CFPrefs_SetValue(CFSTR("com.apple.bluetooth"), CFSTR("accessoryDaemonConnectTimes"), v8);
    objc_msgSend(*(id *)(a1 + 48), "_connectionMonitorUpdate");

  }
}

_QWORD *sub_10007DFF0(_QWORD *result)
{
  _QWORD *v1;

  if (result[4] == *(_QWORD *)(result[5] + 72))
  {
    v1 = result;
    if (dword_100977910 <= 30
      && (dword_100977910 != -1 || _LogCategory_Initialize(&dword_100977910, 30)))
    {
      LogPrintF_safe(&dword_100977910, "-[CBAccessoryDaemon _connectionMonitorUpdate]_block_invoke", 30, "Connection monitor: periodic timer fired");
    }
    return objc_msgSend((id)v1[5], "_connectionMonitorUpdate");
  }
  return result;
}

id sub_10007F530()
{
  if (qword_10097BAC8 != -1)
    dispatch_once(&qword_10097BAC8, &stru_100917E10);
  return (id)qword_10097BAB0;
}

void sub_10007F570(id a1, NSString *a2, BOOL *a3)
{
  NSString *v3;
  id v4;
  NSObject *v5;
  int v6;
  NSString *v7;

  v3 = a2;
  v4 = sub_10007F530();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&v6, 0xCu);
  }

}

void sub_100080924(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x340], 8);
  _Unwind_Resume(a1);
}

void sub_1000809E4(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  id obj;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v6 + 40);
  v7 = CUDescriptionWithLevel(a3, *(unsigned int *)(a1 + 48));
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  NSAppendPrintF_safe(&obj, "%@\n", v8);
  objc_storeStrong((id *)(v6 + 40), obj);

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(_QWORD *)(v9 + 24) + 1;
  *(_QWORD *)(v9 + 24) = v10;
  if (v10 >= 0x14 && *(int *)(a1 + 52) >= 6)
    *a4 = 1;
}

void sub_100080A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id obj;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v2 + 40);
  v3 = CUDescriptionWithLevel(a2, *(unsigned int *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  NSAppendPrintF_safe(&obj, "%@\n", v4);
  objc_storeStrong((id *)(v2 + 40), obj);

}

_QWORD *sub_100080B50(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[4];
  if (!*(_BYTE *)(v1 + 8))
  {
    v2 = result;
    *(_BYTE *)(v1 + 8) = 1;
    if (dword_100977980 <= 30
      && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
    {
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer activate]_block_invoke", 30, "Activate");
    }
    return objc_msgSend((id)v2[4], "_activate");
  }
  return result;
}

id sub_10008135C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(a1 + 32), "_xpcPublisherConnectionsAction:token:info:", a2, a3, a4);
}

void sub_100081370(id a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  if (dword_100977980 <= 90)
  {
    v2 = *(_QWORD *)&a2;
    if (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 90))
    {
      v3 = CUPrintErrorCode(v2);
      v4 = (id)objc_claimAutoreleasedReturnValue(v3);
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _activate]_block_invoke_3", 90, "### XPC publisher error: connections, %@", v4);

    }
  }
}

id sub_100081404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(a1 + 32), "_xpcPublisherDiscoveryAction:token:info:", a2, a3, a4);
}

void sub_100081418(id a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  if (dword_100977980 <= 90)
  {
    v2 = *(_QWORD *)&a2;
    if (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 90))
    {
      v3 = CUPrintErrorCode(v2);
      v4 = (id)objc_claimAutoreleasedReturnValue(v3);
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _activate]_block_invoke_5", 90, "### XPC publisher error: discovery, %@", v4);

    }
  }
}

id sub_1000814AC(uint64_t a1)
{
  if (dword_100977980 <= 30 && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _activate]_block_invoke_6", 30, "Prefs changed");
  return objc_msgSend(*(id *)(a1 + 32), "_prefsChanged");
}

id sub_10008151C(uint64_t a1)
{
  if (dword_100977980 <= 15 && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 15)))
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _activate]_block_invoke_7", 15, "Screen Dimmed");
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 232) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "scheduleUpdateImmediate:", 1);
}

id sub_100081598(uint64_t a1)
{
  if (dword_100977980 <= 15 && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 15)))
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _activate]_block_invoke_8", 15, "Screen undimmed");
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 232) = 1;
  return objc_msgSend(*(id *)(a1 + 32), "scheduleUpdateImmediate:", 1);
}

NSObject *sub_100081618(uint64_t a1)
{
  NSObject *result;
  uintptr_t data;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;

  result = *(NSObject **)(a1 + 32);
  if (result == *(NSObject **)(*(_QWORD *)(a1 + 40) + 144))
  {
    data = dispatch_source_get_data(result);
    if (dword_100977980 <= 30
      && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
    {
      v4 = CUPrintFlags32(data, &unk_1007378E2);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _activate]_block_invoke_9", 30, "Memory pressure changed: %@", v5);

    }
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_DWORD *)(v6 + 168);
    if (!v7)
      LOBYTE(v7) = data;
    *(_DWORD *)(v6 + 140) = v7 & 6;
    return objc_msgSend(*(id *)(a1 + 40), "_updateMemoryPressure");
  }
  return result;
}

id sub_100081700(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_100081708(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "scheduleSpatialUpdateImmediate:", 0);
}

id sub_100081714(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "scheduleSpatialUpdateImmediate:", 0);
}

id sub_100081720(uint64_t a1)
{
  void *v2;
  unsigned int v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BLSBacklight sharedBacklight](BLSBacklight, "sharedBacklight"));
  v3 = objc_msgSend(v2, "isAlwaysOnEnabled");
  if (v3)
    v3 = objc_msgSend(*(id *)(a1 + 40), "screenOn");
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 232) = v3;

  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

uint64_t sub_100081770(uint64_t a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t state64;

  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 156);
  state64 = 0;
  result = notify_get_state(v2, &state64);
  v4 = state64;
  v5 = state64 != 0;
  if (dword_100977980 <= 30)
  {
    if (dword_100977980 != -1 || (result = _LogCategory_Initialize(&dword_100977980, 30), (_DWORD)result))
    {
      v6 = "yes";
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 152))
        v7 = "yes";
      else
        v7 = "no";
      if (!v4)
        v6 = "no";
      result = LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _activate]_block_invoke_14", 30, "Odeon changed: %s -> %s", v7, v6);
    }
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int8 *)(v8 + 152) != v5)
  {
    *(_BYTE *)(v8 + 152) = v5;
    return (uint64_t)objc_msgSend(*(id *)(a1 + 32), "scheduleSpatialUpdateImmediate:", 0);
  }
  return result;
}

id sub_100081858(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateUserControllerCloudDevices");
}

id sub_100081860(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateUserControllerCloudDevices");
}

uint64_t sub_100081868(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "descriptionInternalDebug");
  return CUStateDumpWithObject("CBDaemon", *(_QWORD *)(a1 + 32), &dword_100977980);
}

id sub_1000818A0(uint64_t a1)
{
  unsigned int v2;
  const char *v3;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 81) = 20;
  if (dword_100977980 <= 30 && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
  {
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 81);
    if (v2 > 9)
    {
      if (v2 == 10)
      {
        v3 = "NotStarted";
        goto LABEL_15;
      }
      if (v2 == 20)
      {
        v3 = "Complete";
        goto LABEL_15;
      }
    }
    else
    {
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 81))
      {
        v3 = "Unknown";
        goto LABEL_15;
      }
      if (v2 == 1)
      {
        v3 = "FrameworkUnavailable";
LABEL_15:
        LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _activate]_block_invoke_18", 30, "Device setup %s", v3);
        return objc_msgSend(*(id *)(a1 + 32), "_update");
      }
    }
    v3 = "?";
    goto LABEL_15;
  }
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1000819E4(uint64_t a1)
{
  if (dword_100977980 <= 30 && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer invalidate]_block_invoke", 30, "Invalidate");
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

id sub_100082974(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateMemoryPressure");
}

void sub_100082E70(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void (**v10)(_QWORD, _QWORD);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "object"));
  if (dword_100977980 <= 30 && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _tipiChanged:]_block_invoke", 30, "Tipi changed: %@", v2);
  v3 = objc_opt_class(CBDevice);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v4 = *(id *)(*(_QWORD *)(a1 + 40) + 520);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v4);
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i), "activatedController"));
          v10 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "tipiChangedHandler"));

          if (v10)
            ((void (**)(_QWORD, void *))v10)[2](v10, v2);

        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v6);
    }

  }
}

void sub_10008384C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  _QWORD v5[5];

  if (!a2)
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = *(void **)(v2 + 496);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000838BC;
    v5[3] = &unk_100917978;
    v5[4] = v2;
    v4 = v3;
    objc_msgSend(v4, "getCloudPairedDevicesWithCompletionHandler:", v5);

  }
}

void sub_1000838BC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (v5)
  {
    if (dword_100977980 <= 90
      && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 90)))
    {
      v6 = CUPrintNSError(v5);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _updateUserControllerCloudDevices]_block_invoke_2", 90, "Error fetching cloud paired device metadata due to %@", v7);

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_userControllerCloudUpdateWithDevices:", v8);
    objc_msgSend(*(id *)(a1 + 32), "_userControllerUploadLocalControllerInfo");
  }

}

void sub_100083A14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100083A28(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[52])
  {
    objc_msgSend(result, "_bleAdvertiserAddressChanged:", 0);
    return objc_msgSend(*(id *)(a1 + 40), "_updateSelfAuthTag");
  }
  return result;
}

_QWORD *sub_100083A98(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v2 == result[3])
    return objc_msgSend(result, "_update");
  return result;
}

void sub_100083AB0(int8x16_t *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  dispatch_source_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  id v15;
  int8x16_t v16;
  _QWORD handler[5];
  int8x16_t v18;

  v3 = a2;
  v4 = v3;
  v5 = a1[2].i64[0];
  if (v5 != *(_QWORD *)(a1[2].i64[1] + 24))
    goto LABEL_21;
  if (v3)
  {
    if (dword_100977980 <= 30
      && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
    {
      v6 = CUPrintNSError(v4);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _bleAdvertiserEnsureStarted]_block_invoke_2", 30, "### BLE advertiser failed: %@", v7);

    }
    objc_msgSend((id)a1[2].i64[0], "invalidate");
    v9 = a1[2].i64[1];
    v10 = *(void **)(v9 + 24);
    *(_QWORD *)(v9 + 24) = 0;

    goto LABEL_21;
  }
  if (dword_100977980 <= 30)
  {
    if (dword_100977980 == -1)
    {
      if (!_LogCategory_Initialize(&dword_100977980, 30))
        goto LABEL_15;
      v5 = a1[2].i64[0];
    }
    if (a1[3].i8[0])
      v8 = "yes";
    else
      v8 = "no";
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _bleAdvertiserEnsureStarted]_block_invoke_2", 30, "BLE advertiser activated: %@, restart %s", v5, v8);
  }
LABEL_15:
  if (a1[3].i8[0])
  {
    if (dword_100977980 <= 30
      && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
    {
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _bleAdvertiserEnsureStarted]_block_invoke_2", 30, "BLE advertiser forced update schedule: %@", a1[2].i64[0]);
    }
    v11 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1[2].i64[1] + 88));
    v12 = a1[2].i64[1];
    v13 = *(void **)(v12 + 48);
    *(_QWORD *)(v12 + 48) = v11;
    v14 = v11;

    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100083CFC;
    handler[3] = &unk_1009179C8;
    handler[4] = v14;
    v16 = a1[2];
    v15 = (id)v16.i64[0];
    v18 = vextq_s8(v16, v16, 8uLL);
    dispatch_source_set_event_handler(v14, handler);
    CUDispatchTimerSet(v14, 1.0, -1.0, 1.0);
    dispatch_activate(v14);

  }
LABEL_21:

}

_QWORD *sub_100083CFC(_QWORD *result)
{
  _QWORD *v1;
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;

  if (result[4] == *(_QWORD *)(result[5] + 48))
  {
    v1 = result;
    if (dword_100977980 <= 30
      && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
    {
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _bleAdvertiserEnsureStarted]_block_invoke_3", 30, "BLE advertiser forced update fired: %@", v1[6]);
    }
    v2 = *(void **)(v1[5] + 48);
    if (v2)
    {
      v3 = v2;
      dispatch_source_cancel(v3);
      v4 = v1[5];
      v5 = *(void **)(v4 + 48);
      *(_QWORD *)(v4 + 48) = 0;

    }
    return objc_msgSend(*(id *)(v1[5] + 416), "forceNonConnectableAddressReadAndUpdate");
  }
  return result;
}

id sub_1000840A8(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;

  if (dword_100977980 <= 30 && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _bleAdvertiserUpdateSpatialInteraction]_block_invoke", 30, "BLE advertiser: spatial linger end");
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 40);
  if (v2)
  {
    v3 = v2;
    dispatch_source_cancel(v3);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = 0;

  }
  return objc_msgSend(*(id *)(a1 + 32), "scheduleSpatialUpdateImmediate:", 0);
}

void sub_10008419C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000841B0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  void *v15;
  void *v16;
  unsigned __int16 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v7 = a3;
  v8 = a4;
  v9 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(v9 + 264))
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v10 = *(id *)(v9 + 520);
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v13)
            objc_enumerationMutation(v10);
          v15 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "activatedController", (_QWORD)v18));
          v17 = (unsigned __int16)objc_msgSend(v16, "internalFlags");

          if ((v17 & 0x2000) != 0)
            objc_msgSend(v15, "xpcReceivedAudioAccessoryEventType:messageData:sourceDevice:", a2, v7, v8);
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v12);
    }

  }
}

void sub_10008430C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  void *v10;
  void *v11;
  unsigned __int16 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(v4 + 264))
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v5 = *(id *)(v4 + 520);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v14;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v14 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "activatedController", (_QWORD)v13));
          v12 = (unsigned __int16)objc_msgSend(v11, "internalFlags");

          if ((v12 & 0x2000) != 0)
            objc_msgSend(v10, "xpcReceivedAudioAccessoryDeviceInfoChange:", v3);
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v7);
    }

  }
}

_QWORD *sub_1000844DC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[57])
    return objc_msgSend(result, "_stackBLEScannerDeviceLost:", a2);
  return result;
}

_QWORD *sub_1000844F8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[57])
    return objc_msgSend(result, "_stackBLEScannerDevicesBuffered:", a2);
  return result;
}

id sub_1000849AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_reportDeviceLostIfNeeded:", *(_QWORD *)(a1 + 40));
}

_QWORD *sub_100084F24(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[37])
    return objc_msgSend(result, "_stackClassicScannerDeviceFound:", a2);
  return result;
}

_QWORD *sub_100084F40(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[37])
    return objc_msgSend(result, "_stackClassicScannerDeviceLost:", a2);
  return result;
}

_QWORD *sub_1000852A8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v2 == result[58])
    return objc_msgSend(result, "_updateUserControllerCloudDevices");
  return result;
}

_QWORD *sub_1000852C0(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void (**v9)(_QWORD);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v1 = result[5];
  if (result[4] == *(_QWORD *)(v1 + 464))
  {
    v2 = result;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v3 = *(id *)(v1 + 520);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v11;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v3);
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7), "activatedController", (_QWORD)v10));
          v9 = (void (**)(_QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "discoverableStateChangedHandler"));

          if (v9)
            v9[2](v9);

          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v5);
    }

    return objc_msgSend((id)v2[5], "scheduleUpdateImmediate:", 0);
  }
  return result;
}

_QWORD *sub_1000853FC(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void (**v9)(_QWORD);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v1 = result[5];
  if (result[4] == *(_QWORD *)(v1 + 464))
  {
    v2 = result;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v3 = *(id *)(v1 + 520);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v11;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v3);
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7), "activatedController", (_QWORD)v10));
          v9 = (void (**)(_QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "inquiryStateChangedHandler"));

          if (v9)
            v9[2](v9);

          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v5);
    }

    return objc_msgSend((id)v2[5], "scheduleUpdateImmediate:", 0);
  }
  return result;
}

_QWORD *sub_100085538(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void (**v10)(_QWORD);
  void *v11;
  void (**v12)(_QWORD);
  void *v13;
  void (**v14)(_QWORD);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v1 = result[5];
  if (result[4] == *(_QWORD *)(v1 + 464))
  {
    v2 = result;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v3 = *(id *)(v1 + 520);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v16 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "activatedController", (_QWORD)v15));
          v10 = (void (**)(_QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bluetoothStateChangedHandler"));

          if (v10)
            v10[2](v10);

          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "activatedDiscovery"));
          v12 = (void (**)(_QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "bluetoothStateChangedHandler"));

          if (v12)
            v12[2](v12);

          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "activatedSpatialInteractionSession"));
          v14 = (void (**)(_QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "bluetoothStateChangedHandler"));

          if (v14)
            v14[2](v14);

        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v5);
    }

    return objc_msgSend((id)v2[5], "scheduleUpdateImmediate:", 0);
  }
  return result;
}

void sub_1000856E8(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void (**v19)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v9 = a2;
  v10 = a3;
  v11 = a5;
  v12 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(v12 + 464))
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v13 = *(id *)(v12 + 520);
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v21;
      do
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v21 != v16)
            objc_enumerationMutation(v13);
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v17), "activatedController", (_QWORD)v20));
          v19 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "relayMessageHandler"));

          if (v19)
            ((void (**)(_QWORD, id, id, uint64_t, id))v19)[2](v19, v9, v10, a4, v11);

          v17 = (char *)v17 + 1;
        }
        while (v15 != v17);
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v15);
    }

  }
}

_QWORD *sub_1000858F0(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[38])
    return objc_msgSend(result, "_stackDeviceMonitorDeviceFound:", a2);
  return result;
}

_QWORD *sub_10008590C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[38])
    return objc_msgSend(result, "_stackDeviceMonitorDeviceLost:", a2);
  return result;
}

void sub_100085D48(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  int v6;
  __int16 v7;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100085DCC;
  v3[3] = &unk_100917AB8;
  v2 = *(void **)(a1 + 40);
  v4 = *(id *)(a1 + 32);
  v5 = v2;
  v7 = *(_WORD *)(a1 + 52);
  v6 = *(_DWORD *)(a1 + 48);
  objc_msgSend(v4, "_performUserControllerActionWithCompletion:", v3);

}

void sub_100085DCC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = *(id *)(*(_QWORD *)(a1 + 32) + 496);
  if (v6 || !v3)
  {
    if (dword_100977980 <= 90
      && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 90)))
    {
      v4 = CUPrintNSError(v6);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer recordEventWithDeviceIdentifier:initiator:starting:useCase:]_block_invoke_2", 90, "Unable to report biome device event: %@", v5);

    }
  }
  else
  {
    objc_msgSend(v3, "recordEventWithDeviceIdentifier:initiator:starting:useCase:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 52), *(unsigned __int8 *)(a1 + 53), *(unsigned int *)(a1 + 48));
  }

}

id sub_100085F90(uint64_t a1)
{
  if (dword_100977980 <= 30 && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _identitiesEnsureStarted]_block_invoke", 30, "Identities changed");
  return objc_msgSend(*(id *)(a1 + 32), "_identitiesGet");
}

void sub_1000861E0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *j;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 96) == -1)
    goto LABEL_47;
  if (v6)
  {
    if (dword_100977980 <= 90
      && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 90)))
    {
      v7 = CUPrintNSError(v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _identitiesGet]_block_invoke", 90, "### Identities get failed: %@", v8);

    }
    goto LABEL_47;
  }
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v9 = v5;
  v10 = (uint64_t)objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v36;
    while (2)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v36 != v11)
          objc_enumerationMutation(v9);
        v13 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
        v14 = objc_autoreleasePoolPush();
        if (objc_msgSend(v13, "type") == 1)
        {
          v15 = *(_QWORD *)(a1 + 40);
          v16 = *(void **)(v15 + 112);
          if (v16)
          {
            v10 = (uint64_t)objc_msgSend(v16, "compareWithRPIdentity:", v13);
            v15 = *(_QWORD *)(a1 + 40);
          }
          else
          {
            v10 = 2048;
          }
          objc_storeStrong((id *)(v15 + 112), v13);
          objc_autoreleasePoolPop(v14);
          goto LABEL_21;
        }
        objc_autoreleasePoolPop(v14);
      }
      v10 = (uint64_t)objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
      if (v10)
        continue;
      break;
    }
  }
LABEL_21:

  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112);
  if (!v17)
  {
    if (dword_100977980 <= 60
      && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 60)))
    {
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _identitiesGet]_block_invoke", 60, "### Self identity not found");
    }
    goto LABEL_31;
  }
  if (dword_100977980 <= 30)
  {
    if (dword_100977980 == -1)
    {
      if (!_LogCategory_Initialize(&dword_100977980, 30))
        goto LABEL_31;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112);
    }
    v18 = CUPrintFlags32(v10, &unk_100737CAB);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _identitiesGet]_block_invoke", 30, "Self identity: %@, %@", v17, v19);

  }
LABEL_31:
  if ((_DWORD)v10)
    objc_msgSend(*(id *)(a1 + 40), "_updateSelfAuthTag");
  v20 = objc_alloc_init((Class)NSMutableArray);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v21 = v9;
  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
  if (v22)
  {
    v23 = v22;
    v24 = *(_QWORD *)v32;
    do
    {
      for (j = 0; j != v23; j = (char *)j + 1)
      {
        if (*(_QWORD *)v32 != v24)
          objc_enumerationMutation(v21);
        v26 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)j);
        v27 = objc_autoreleasePoolPush();
        if (objc_msgSend(v26, "type") != 1)
          objc_msgSend(v20, "addObject:", v26);
        objc_autoreleasePoolPop(v27);
      }
      v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
    }
    while (v23);
  }

  v28 = objc_msgSend(v20, "copy");
  v29 = *(_QWORD *)(a1 + 40);
  v30 = *(void **)(v29 + 440);
  *(_QWORD *)(v29 + 440) = v28;

  if (dword_100977980 <= 30 && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _identitiesGet]_block_invoke", 30, "Identities get completed: %d total", objc_msgSend(v21, "count"));
  objc_msgSend(*(id *)(a1 + 40), "_identitiesReevaluateDevices");
  objc_msgSend(*(id *)(a1 + 40), "scheduleAdvertiserUpdateImmediate:", 0);
  objc_msgSend(*(id *)(a1 + 40), "scheduleSpatialUpdateImmediate:", 0);
  objc_msgSend(*(id *)(a1 + 40), "_updateUserControllerCloudDevices");

LABEL_47:
}

void sub_100086610(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;

  v11 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 528), "objectForKeyedSubscript:", v6));

    if (!v7)
    {

      goto LABEL_8;
    }
  }

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  if (!v9)
    goto LABEL_6;
  v10 = objc_msgSend(v9, "lastSeenTicks");
  if (v10 > objc_msgSend(v5, "lastSeenTicks"))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
LABEL_6:
    objc_storeStrong((id *)(v8 + 40), a3);
  }
LABEL_8:

}

void sub_1000867CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a2;
  v5 = a3;
  v6 = objc_autoreleasePoolPush();
  if ((objc_msgSend(v5, "internalFlags") & 2) != 0)
    objc_msgSend(*(id *)(a1 + 32), "_identitiesResolveNearbyDevice:", v5);
  objc_autoreleasePoolPop(v6);

}

void sub_100087160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  (*(void (**)(void))(a19 + 16))();
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v38 - 200), 8);
  _Block_object_dispose((const void *)(v38 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1000871DC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v2 = a1[4];
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40);
  if (v3 && dword_100977980 <= 90)
  {
    if (dword_100977980 == -1)
    {
      v4 = _LogCategory_Initialize(&dword_100977980, 90);
      v2 = a1[4];
      if (!v4)
        goto LABEL_6;
      v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40);
    }
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _verifyNearbyInfoV2IntegrityTag:rapportIdentity:]_block_invoke", 90, "IntegrityTag NearbyInfoV2 encrypted payload failed to decrypt with error: %@", v3);
    v2 = a1[4];
  }
LABEL_6:
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(a1[5] + 8) + 24);
  if (dword_100977980 <= 20 && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 20)))
  {
    v7 = "ResolvedDecryptionFailed";
    v8 = "Resolved";
    if (!v5)
      v7 = "Resolved";
    if (!v6)
      v8 = "NotResolved";
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _verifyNearbyInfoV2IntegrityTag:rapportIdentity:]_block_invoke", 20, "IntegrityTag %@ NearbyInfoV2 ATag: %s iTag: %s", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), v7, v8);
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[CBMetricsDaemon sharedCBMetricsDaemon](CBMetricsDaemon, "sharedCBMetricsDaemon"));
  v12 = v9;
  if (v5)
    v10 = 5;
  else
    v10 = 1;
  if (v6)
    v11 = 1;
  else
    v11 = 10;
  objc_msgSend(v9, "reportAuthTagType:authTagStatus:integrityTagStatus:resolutionWindow:", 2, v10, v11, *(char *)(*(_QWORD *)(a1[7] + 8) + 24));

}

void sub_100087800(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_100977980 <= 40 && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 40)))
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _remoteEnsureStarted]_block_invoke", 40, "Remote controller found: %@", v3);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 512), "remoteControllersChanged");

}

void sub_100087894(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_100977980 <= 40 && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 40)))
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _remoteEnsureStarted]_block_invoke_2", 40, "Remote controller lost: %@", v3);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 512), "remoteControllersChanged");
  objc_msgSend(*(id *)(a1 + 32), "_remoteInvalidateInactiveXPC");

}

void sub_100087930(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (dword_100977980 <= 40 && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 40)))
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _remoteEnsureStarted]_block_invoke_3", 40, "Remote controller changed: %@", v3);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 512), "remoteControllersChanged");

}

id sub_1000879C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "_remoteReceivedEvent:options:", a2, a3);
}

id sub_1000879D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(a1 + 32), "_remoteReceivedRequest:options:responseHandler:", a2, a3, a4);
}

void sub_1000879E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  id v10;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 184))
  {
    if (v3)
    {
      v10 = v3;
      if (dword_100977980 <= 90
        && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 90)))
      {
        v5 = CUPrintNSError(v10);
        v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
        LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _remoteEnsureStarted]_block_invoke_6", 90, "### Remote client failed: %@", v6);

      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 184), "invalidate");
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(void **)(v7 + 184);
      *(_QWORD *)(v7 + 184) = 0;

      *(_BYTE *)(*(_QWORD *)(a1 + 40) + 200) = 0;
      goto LABEL_11;
    }
    if (dword_100977980 <= 30)
    {
      v10 = 0;
      if (dword_100977980 != -1 || (v9 = _LogCategory_Initialize(&dword_100977980, 30), v4 = 0, v9))
      {
        LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _remoteEnsureStarted]_block_invoke_6", 30, "Remote client started");
LABEL_11:
        v4 = v10;
      }
    }
  }

}

void sub_100087B10(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 208) && dword_100977980 <= 90)
  {
    v8 = v3;
    if (dword_100977980 != -1 || (v7 = _LogCategory_Initialize(&dword_100977980, 90), v4 = v8, v7))
    {
      v5 = CUPrintNSError(v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _remoteEnsureStarted]_block_invoke_7", 90, "### Remote server error: %@", v6);

      v4 = v8;
    }
  }

}

void sub_100087C3C(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;
  uint64_t Int64Ranged;
  void *v6;
  void *v7;
  const __CFString *v8;
  void *v9;

  if (dword_100977980 <= 30 && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer coexChangeNotification:]_block_invoke", 30, "Coex Notification received");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.bluetooth.leconnection"));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
    Int64Ranged = CFDictionaryGetInt64Ranged(v4, CFSTR("NUMBER_OF_LE_CONNECTIONS"), 0xFFFFFFFF80000000, 0x7FFFFFFFLL, 0);

    if (dword_100977980 <= 30
      && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
    {
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer coexChangeNotification:]_block_invoke", 30, "Coex Notification Number of LE Connections:%d", Int64Ranged);
    }
    v8 = CFSTR("NUMBER_OF_LE_CONNECTIONS");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", Int64Ranged));
    v9 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));

    objc_msgSend(*(id *)(a1 + 40), "sendCoexUpdate:", v7);
  }
}

void sub_1000882F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008832C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40)
    && dword_100977980 <= 90
    && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 90)))
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = objc_msgSend(*(id *)(a1 + 40), "unsignedIntValue");
    v4 = CUPrintNSError(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
    v5 = (id)objc_claimAutoreleasedReturnValue(v4);
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _remoteReceivedEvent:options:]_block_invoke", 90, "### Remote event receive failed: Sender %@, CID 0x%X, %@", v2, v3, v5);

  }
}

void sub_1000887A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000887E4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 56) + 8) + 40))
  {
    v1 = result;
    if (dword_100977980 <= 90
      && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 90)))
    {
      v2 = *(_QWORD *)(v1 + 32);
      v3 = objc_msgSend(*(id *)(v1 + 40), "unsignedIntValue");
      v4 = CUPrintNSError(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8) + 40));
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _remoteReceivedRequest:options:responseHandler:]_block_invoke", 90, "### Remote request receive failed: Sender %@, CID 0x%X, %@", v2, v3, v5);

    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v1 + 48) + 16))();
  }
  return result;
}

_QWORD *sub_100088FEC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[64])
    return objc_msgSend(result, "_whbDiscoveryDeviceFound:", a2);
  return result;
}

_QWORD *sub_100089008(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[64])
    return objc_msgSend(result, "_whbDiscoveryDeviceLost:", a2);
  return result;
}

void sub_100089788(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  void *v13;
  unsigned __int8 v14;
  uint64_t v15;
  void *v16;
  id v17;

  v5 = a2;
  v6 = a3;
  if (!v6)
  {
    if (dword_100977980 <= 40
      && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 40)))
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = objc_msgSend(v5, "cloudSyncStatus");
      if (v11 > 3)
        v12 = "?";
      else
        v12 = off_100917E48[(char)v11];
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _userControllerCloudUpdateWithDevices:]_block_invoke", 40, "FastLEConnection: self device %@ sync status %s", v10, v12);
    }
    v13 = *(void **)(*(_QWORD *)(a1 + 40) + 464);
    v17 = 0;
    v14 = objc_msgSend(v13, "updateControllerInfo:error:", v5, &v17);
    v9 = v17;
    if ((v14 & 1) == 0
      && dword_100977980 <= 90
      && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 90)))
    {
      v15 = CUPrintNSError(v9);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _userControllerCloudUpdateWithDevices:]_block_invoke", 90, "FastLEConnection: error updating stack controller info: %@", v16);

    }
    goto LABEL_16;
  }
  if (dword_100977980 <= 90 && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 90)))
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = CUPrintNSError(v6);
    v9 = (id)objc_claimAutoreleasedReturnValue(v8);
    LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _userControllerCloudUpdateWithDevices:]_block_invoke", 90, "FastLEConnection: self device %@ error %@", v7, v9);
LABEL_16:

  }
}

void sub_100089A4C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  id v8;

  v3 = a2;
  v8 = v3;
  if (!v3)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 496), "storeControllerInfo:completion:", *(_QWORD *)(a1 + 40), &stru_100917D08);
LABEL_3:
    v4 = v8;
    goto LABEL_4;
  }
  v4 = v3;
  if (dword_100977980 <= 90)
  {
    if (dword_100977980 != -1 || (v7 = _LogCategory_Initialize(&dword_100977980, 90), v4 = v8, v7))
    {
      v5 = CUPrintNSError(v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _userControllerUploadLocalControllerInfo]_block_invoke", 90, "Error saving this device's controller info %@", v6);

      goto LABEL_3;
    }
  }
LABEL_4:

}

void sub_100089B08(id a1, NSError *a2)
{
  NSError *v2;
  NSError *v3;
  uint64_t v4;
  void *v5;
  int v6;
  NSError *v7;

  v2 = a2;
  v3 = v2;
  if (v2)
  {
    if (dword_100977980 <= 90)
    {
      v7 = v2;
      if (dword_100977980 != -1 || (v6 = _LogCategory_Initialize(&dword_100977980, 90), v3 = v7, v6))
      {
        v4 = CUPrintNSError(v3);
        v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
        LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _userControllerUploadLocalControllerInfo]_block_invoke_2", 90, "Error saving this device's controller info due to %@", v5);

        v3 = v7;
      }
    }
  }

}

id sub_100089C54(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activateCBAdvertiser:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_100089F74(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidateCBAdvertiser:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_10008A1E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activateCBController:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_10008A518(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidateCBController:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_10008A78C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activateCBDiscovery:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_10008AB10(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidateCBDiscovery:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_10008ADB0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activateCBSpatialInteractionSession:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_10008B0E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidateCBSpatialInteractionSession:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

id sub_10008B328(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_aopMessageReceived:", *(_QWORD *)(a1 + 40));
}

id sub_10008B61C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyConnectedDeviceUUID:name:servicesUUIDs:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_10008BB6C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 512), "localDeviceForStableId:", a1[5]));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10008BC50(_QWORD *a1)
{
  void *v2;
  void *v3;
  int v4;

  v4 = 0;
  v2 = *(void **)(a1[4] + 512);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "optimalHostIdForStableId:result:", a1[5], &v4));
  }
  else
  {
    v3 = 0;
    v4 = 1702;
  }
  (*(void (**)(void))(a1[6] + 16))();

}

void sub_10008BCC0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 496);
  *(_QWORD *)(v1 + 496) = 0;

}

void sub_10008BCD0(uint64_t a1, void *a2)
{
  void (*v3)(void);
  uint64_t v4;
  void *v5;
  id v6;

  v6 = a2;
  if (v6)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 496);
    *(_QWORD *)(v4 + 496) = 0;

    v3 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  else
  {
    if (dword_100977980 <= 30
      && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
    {
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _performUserControllerActionWithCompletion:]_block_invoke_2", 30, "Stack user controller started");
    }
    v3 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  v3();

}

void sub_10008C5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008C5E4(uint64_t a1, int a2, xpc_object_t xstring)
{
  const char *string_ptr;
  int v5;
  uint64_t result;

  string_ptr = xpc_string_get_string_ptr(xstring);
  if (!string_ptr)
    return 1;
  v5 = strcasecmp(string_ptr, *(const char **)(a1 + 40));
  result = 1;
  if (!v5)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return 0;
  }
  return result;
}

BOOL sub_10008C638(uint64_t a1, int a2, xpc_object_t xstring)
{
  const char *string_ptr;
  _BOOL8 result;

  string_ptr = xpc_string_get_string_ptr(xstring);
  if (!string_ptr)
    return 1;
  result = strcasecmp(string_ptr, *(const char **)(a1 + 40)) != 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_10008CB7C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  int v9;
  _BOOL8 v10;
  unsigned int v11;
  xpc_object_t v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;

  v21 = a2;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "activatedDiscovery"));

  v5 = v21;
  if (v3 == v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "identifier"));
    if (v6)
    {
      v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deviceMap"));
      if (!v7)
      {
        v7 = objc_alloc_init((Class)NSMutableDictionary);
        objc_msgSend(*(id *)(a1 + 40), "setDeviceMap:", v7);
      }
      objc_msgSend(v7, "setObject:forKeyedSubscript:", v21, v6);
      v8 = *(id *)(*(_QWORD *)(a1 + 48) + 392);
      if (v8)
      {
        if (objc_msgSend(*(id *)(a1 + 32), "keepAlive"))
        {
          v9 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 140);
          v10 = (v9 & ~objc_msgSend(*(id *)(a1 + 32), "memoryPressureFlags")) == 0;
        }
        else
        {
          v10 = 0;
        }
        v11 = xpc_event_publisher_set_subscriber_keepalive(v8, *(_QWORD *)(a1 + 56), v10);
        v12 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_string(v12, "eventType", "deviceFound");
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "xpcEventRepresentation"));
        xpc_dictionary_set_value(v12, "device", v13);

        v14 = xpc_event_publisher_fire(v8, *(_QWORD *)(a1 + 56), v12);
        if (dword_100977980 <= 30)
        {
          v15 = v14;
          if (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30))
          {
            v16 = *(_QWORD *)(a1 + 56);
            if (v10)
              v17 = "yes";
            else
              v17 = "no";
            if (v11)
              v18 = v11;
            else
              v18 = v15;
            v19 = CUPrintErrorCode(v18);
            v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
            LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _xpcPublisherDiscoveryAddToken:info:]_block_invoke", 30, "XPC subscriber found device: token %llu, keepAlive %s, %@, %@", v16, v17, v20, v21);

          }
        }

      }
    }

    v5 = v21;
  }

}

void sub_10008CD94(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  xpc_object_t v9;
  void *v10;
  unsigned int v11;
  int v12;
  _BOOL8 v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;

  v21 = a2;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "activatedDiscovery"));

  v5 = v21;
  if (v3 == v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "identifier"));
    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "deviceMap"));
      objc_msgSend(v7, "setObject:forKeyedSubscript:", 0, v6);
      v8 = *(id *)(*(_QWORD *)(a1 + 48) + 392);
      if (v8)
      {
        v9 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_string(v9, "eventType", "deviceLost");
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "xpcEventRepresentation"));
        xpc_dictionary_set_value(v9, "device", v10);

        v11 = xpc_event_publisher_fire(v8, *(_QWORD *)(a1 + 56), v9);
        if (objc_msgSend(*(id *)(a1 + 32), "keepAlive") && objc_msgSend(v7, "count"))
        {
          v12 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 140);
          v13 = (v12 & ~objc_msgSend(*(id *)(a1 + 32), "memoryPressureFlags")) == 0;
        }
        else
        {
          v13 = 0;
        }
        v14 = xpc_event_publisher_set_subscriber_keepalive(v8, *(_QWORD *)(a1 + 56), v13);
        if (dword_100977980 <= 30)
        {
          v15 = v14;
          if (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30))
          {
            v16 = *(_QWORD *)(a1 + 56);
            if (v13)
              v17 = "yes";
            else
              v17 = "no";
            if (v11)
              v18 = v11;
            else
              v18 = v15;
            v19 = CUPrintErrorCode(v18);
            v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
            LogPrintF_safe(&dword_100977980, "-[CBDaemonServer _xpcPublisherDiscoveryAddToken:info:]_block_invoke_2", 30, "XPC subscriber lost device: token %llu, keepAlive %s, %@, %@", v16, v17, v20, v21);

          }
        }

      }
    }

    v5 = v21;
  }

}

void sub_10008D18C(id a1)
{
  unsigned int DeviceClass;

  DeviceClass = GestaltGetDeviceClass(a1);
  byte_10097BAC0 = (DeviceClass < 8) & (0xC2u >> DeviceClass);
}

void sub_10008D238(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  dispatch_source_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD v12[6];

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 120);
  if (!v2)
  {
    v3 = objc_alloc_init((Class)NSMutableOrderedSet);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 120);
    *(_QWORD *)(v4 + 120) = v3;

    v2 = *(void **)(*(_QWORD *)(a1 + 32) + 120);
  }
  if ((unint64_t)objc_msgSend(v2, "count") >= 0x10)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "removeObjectAtIndex:", 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "addObject:", *(_QWORD *)(a1 + 40));
  v6 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v6 + 128))
  {
    v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v6 + 88));
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 128);
    *(_QWORD *)(v8 + 128) = v7;
    v10 = v7;

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10008D35C;
    v12[3] = &unk_100917058;
    v11 = *(_QWORD *)(a1 + 32);
    v12[4] = v10;
    v12[5] = v11;
    dispatch_source_set_event_handler(v10, v12);
    CUDispatchTimerSet(v10, 900.0, -1.0, 1.0);
    dispatch_activate(v10);

  }
}

void sub_10008D35C(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 128))
  {
    if (dword_100977980 <= 30
      && (dword_100977980 != -1 || _LogCategory_Initialize(&dword_100977980, 30)))
    {
      LogPrintF_safe(&dword_100977980, "-[CBDaemonServer addLostDeviceToLostCBSpatialDevicesIfNeeded:]_block_invoke_2", 30, "Wipe Lost Spatial Devices Array Fired: ");
    }
    v2 = *(void **)(*(_QWORD *)(a1 + 40) + 128);
    if (v2)
    {
      v3 = v2;
      dispatch_source_cancel(v3);
      v4 = *(_QWORD *)(a1 + 40);
      v5 = *(void **)(v4 + 128);
      *(_QWORD *)(v4 + 128) = 0;

    }
    v6 = objc_alloc_init((Class)NSMutableOrderedSet);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(void **)(v7 + 120);
    *(_QWORD *)(v7 + 120) = v6;

  }
}

void sub_10008D78C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.bluetooth", "CBDaemonServerStatedump");
  v2 = (void *)qword_10097BAB0;
  qword_10097BAB0 = (uint64_t)v1;

}

void sub_10008D9F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10008E5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a70;
  void *v70;
  void *v71;
  void *v72;
  id *v73;
  uint64_t v74;

  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a44, 8);

  _Block_object_dispose(&a50, 8);
  _Block_object_dispose(&a54, 8);

  _Block_object_dispose(&a60, 8);
  _Block_object_dispose(&a64, 8);

  _Block_object_dispose(&a70, 8);
  _Block_object_dispose(&STACK[0x208], 8);
  _Block_object_dispose(&STACK[0x228], 8);
  _Block_object_dispose(&STACK[0x248], 8);

  _Block_object_dispose(&STACK[0x278], 8);
  _Block_object_dispose(&STACK[0x298], 8);
  _Block_object_dispose((const void *)(v74 - 248), 8);
  _Block_object_dispose((const void *)(v74 - 216), 8);
  _Block_object_dispose((const void *)(v74 - 184), 8);
  _Block_object_dispose((const void *)(v74 - 152), 8);
  _Block_object_dispose((const void *)(v74 - 120), 8);

  _Unwind_Resume(a1);
}

void sub_10008E7C4(uint64_t a1, uint64_t a2)
{
  char v4;
  _OWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  void **v11;
  _QWORD *v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  char v22;
  void **v23;
  BOOL v24;
  void *v26;
  BOOL v27;
  _QWORD *v41;
  _QWORD *v42;
  char v43;
  void *v44[2];
  char v45;
  void *__dst[4];
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  void *__p[2];
  uint64_t v52;

  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_WORD *)(a2 + 392);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(_BYTE *)(a2 + 164);
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = *(_WORD *)(a2 + 32);
  v4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (v4)
    v4 = *(_BYTE *)(a2 + 232) != 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v4;
  v5 = (_OWORD *)(a2 + 208);
  if (*(char *)(a2 + 231) < 0)
  {
    sub_10003430C(__p, *(void **)(a2 + 208), *(_QWORD *)(a2 + 216));
  }
  else
  {
    *(_OWORD *)__p = *v5;
    v52 = *(_QWORD *)(a2 + 224);
  }
  if (SHIBYTE(v52) < 0)
  {
    v7 = __p[0];
    v6 = a1 + 72;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = __p[1] != 0;
    operator delete(v7);
  }
  else
  {
    v6 = a1 + 72;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = SHIBYTE(v52) != 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 8);
  v9 = *(unsigned __int8 *)(v8 + 24);
  if (*(_BYTE *)(v8 + 24))
  {
    if (*(char *)(a2 + 231) < 0)
    {
      sub_10003430C(__p, *(void **)(a2 + 208), *(_QWORD *)(a2 + 216));
    }
    else
    {
      *(_OWORD *)__p = *v5;
      v52 = *(_QWORD *)(a2 + 224);
    }
    if (v52 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
  }
  else
  {
    v10 = 0;
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), v10);
  if (v9)
  {

    if (SHIBYTE(v52) < 0)
      operator delete(__p[0]);
  }
  sub_100091AE8(v49, "IsHearingAid");
  v12 = (_QWORD *)(a2 + 176);
  v13 = (_QWORD *)(a2 + 184);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = a2 + 184 != sub_10001F2AC(a2 + 176, (const void **)v49);
  if (v50 < 0)
    operator delete(v49[0]);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = sub_10064DF68(a2);
  sub_100091AE8(v47, "IsPrimaryHearingAid");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = v13 != (_QWORD *)sub_10001F2AC(a2 + 176, (const void **)v47);
  if (v48 < 0)
    operator delete(v47[0]);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40), *(id *)(a2 + 304));
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100917EB0);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24) = sub_1000060F0((uint64_t)off_1009778C0, *(void **)(a1 + 32));
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100917EB0);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24) = sub_100662498((uint64_t)off_1009778C0, *(void **)(a1 + 32));
  if (*(char *)(a2 + 127) < 0)
  {
    sub_10003430C(__dst, *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a2 + 104);
    __dst[2] = *(void **)(a2 + 120);
  }
  if (SHIBYTE(__dst[2]) >= 0)
    v14 = __dst;
  else
    v14 = (void **)__dst[0];
  v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
  v17 = *(void **)(v16 + 40);
  *(_QWORD *)(v16 + 40) = v15;

  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8) + 24) = *(_BYTE *)(a2 + 160);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) + 40), *(id *)(a2 + 336));
  v18 = *(_DWORD *)(a2 + 464);
  if (v18)
    v18 = *(_DWORD *)(a2 + 468) / v18;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8) + 24) = v18;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100917EB0);
  v19 = off_1009778C0;
  v20 = *(void **)(a1 + 32);
  sub_100091AE8(v44, "_CTKD_");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 8) + 24) = sub_10000628C((uint64_t)v19, v20, (uint64_t)v44);
  if (v45 < 0)
    operator delete(v44[0]);
  v21 = (_QWORD *)*v12;
  if ((_QWORD *)*v12 == v13)
    return;
  while (1)
  {
    memset(__dst, 0, 24);
    if (*((char *)v21 + 55) < 0)
    {
      sub_10003430C(__dst, (void *)v21[4], v21[5]);
    }
    else
    {
      *(_OWORD *)__dst = *((_OWORD *)v21 + 2);
      __dst[2] = *((void **)v21 + 6);
    }
    v22 = HIBYTE(__dst[2]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
      v23 = __dst;
      switch(HIBYTE(__dst[2]))
      {
        case 9:
          goto LABEL_104;
        case 0xC:
          goto LABEL_120;
        case 0x10:
          goto LABEL_114;
        case 0x12:
          v24 = __dst[0] == (void *)0x4E41524145505041 && __dst[1] == (void *)0x50454D41475F4543;
          if (!v24 || LOWORD(__dst[2]) != 17473)
            goto LABEL_134;
          goto LABEL_144;
        case 0x13:
          if (__dst[0] == (void *)0x4E41524145505041
            && __dst[1] == (void *)0x5453594F4A5F4543
            && *(void **)((char *)&__dst[1] + 3) == (void *)0x4B43495453594F4ALL)
          {
            goto LABEL_143;
          }
          if (__dst[0] == (void *)0x4E41524145505041
            && __dst[1] == (void *)0x4F4259454B5F4543
            && *(void **)((char *)&__dst[1] + 3) == (void *)0x4452414F4259454BLL)
          {
            goto LABEL_145;
          }
          if ((HIBYTE(__dst[2]) & 0x80) != 0)
            goto LABEL_102;
          v23 = __dst;
          if (HIBYTE(__dst[2]) == 16)
            goto LABEL_114;
          if (HIBYTE(__dst[2]) == 12)
            goto LABEL_120;
          if (HIBYTE(__dst[2]) != 9)
            goto LABEL_134;
          goto LABEL_104;
        default:
          goto LABEL_134;
      }
    }
    v23 = (void **)__dst[0];
    v26 = __dst[1];
    if (__dst[1] == (void *)18)
    {
      v27 = *(_QWORD *)__dst[0] == 0x4E41524145505041 && *((_QWORD *)__dst[0] + 1) == 0x50454D41475F4543;
      if (v27 && *((_WORD *)__dst[0] + 8) == 17473)
      {
LABEL_144:
        v43 = 26;
        goto LABEL_146;
      }
    }
    if (__dst[1] == (void *)19)
      break;
LABEL_103:
    if (v26 != (void *)9)
      goto LABEL_113;
LABEL_104:
    if (*v23 == (void *)0x73756F4D454C7349 && *((_BYTE *)v23 + 8) == 101)
    {
LABEL_141:
      v43 = 25;
      goto LABEL_146;
    }
    if ((HIBYTE(__dst[2]) & 0x80) != 0)
    {
      v23 = (void **)__dst[0];
      v26 = __dst[1];
LABEL_113:
      if (v26 != (void *)16)
        goto LABEL_127;
      goto LABEL_114;
    }
    if (HIBYTE(__dst[2]) == 12)
      goto LABEL_120;
    if (HIBYTE(__dst[2]) != 16)
      goto LABEL_134;
    v23 = __dst;
LABEL_114:
    if (*v23 == (void *)0x4E41524145505041 && v23[1] == (void *)0x4553554F4D5F4543)
      goto LABEL_141;
    if ((HIBYTE(__dst[2]) & 0x80) == 0)
    {
      if (HIBYTE(__dst[2]) != 12)
        goto LABEL_134;
LABEL_120:
      if (__dst[0] == (void *)0x6E69726165487349 && LODWORD(__dst[1]) == 1684619623)
        goto LABEL_142;
      goto LABEL_134;
    }
    v23 = (void **)__dst[0];
    v26 = __dst[1];
LABEL_127:
    if (v26 != (void *)12)
      goto LABEL_133;
    if (*v23 == (void *)0x6E69726165487349 && *((_DWORD *)v23 + 2) == 1684619623)
    {
LABEL_142:
      v43 = 51;
      goto LABEL_146;
    }
    if ((HIBYTE(__dst[2]) & 0x80) != 0)
LABEL_133:
      operator delete(v23);
LABEL_134:
    v41 = (_QWORD *)v21[1];
    if (v41)
    {
      do
      {
        v42 = v41;
        v41 = (_QWORD *)*v41;
      }
      while (v41);
    }
    else
    {
      do
      {
        v42 = (_QWORD *)v21[2];
        v24 = *v42 == (_QWORD)v21;
        v21 = v42;
      }
      while (!v24);
    }
    v21 = v42;
    if (v42 == v13)
      return;
  }
  if (*(_QWORD *)__dst[0] == 0x4E41524145505041
    && *((_QWORD *)__dst[0] + 1) == 0x5453594F4A5F4543
    && *(_QWORD *)((char *)__dst[0] + 11) == 0x4B43495453594F4ALL)
  {
LABEL_143:
    v43 = 50;
    goto LABEL_146;
  }
  if (*(_QWORD *)__dst[0] != 0x4E41524145505041
    || *((_QWORD *)__dst[0] + 1) != 0x4F4259454B5F4543
    || *(_QWORD *)((char *)__dst[0] + 11) != 0x4452414F4259454BLL)
  {
LABEL_102:
    v23 = (void **)__dst[0];
    v26 = __dst[1];
    goto LABEL_103;
  }
LABEL_145:
  v43 = 24;
LABEL_146:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) + 24) = v43;
  if (v22 < 0)
    operator delete(__dst[0]);
}

void sub_10008EF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10008EFB0(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void *v4;

  if ((int)a1 <= 612)
  {
    if ((int)a1 <= 557)
    {
      if ((int)a1 > 521)
      {
        if ((_DWORD)a1 != 522 && (_DWORD)a1 != 556 && (_DWORD)a1 != 557)
          goto LABEL_55;
      }
      else
      {
        if (!(_DWORD)a1)
          return 0;
        if ((_DWORD)a1 != 520 && (_DWORD)a1 != 521)
          goto LABEL_55;
      }
    }
    else if ((int)a1 <= 570)
    {
      if ((_DWORD)a1 != 558 && (_DWORD)a1 != 569 && (_DWORD)a1 != 570)
        goto LABEL_55;
    }
    else if ((int)a1 > 597)
    {
      if ((_DWORD)a1 != 598 && (_DWORD)a1 != 599)
        goto LABEL_55;
    }
    else if ((_DWORD)a1 != 571 && (_DWORD)a1 != 597)
    {
      goto LABEL_55;
    }
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("apple_wireless_keyboard"), &stru_100941758, CFSTR("CBLocalizable")));
    goto LABEL_56;
  }
  if ((int)a1 > 776)
  {
    if ((int)a1 <= 8212)
    {
      switch((int)a1)
      {
        case 777:
          v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
          v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("apple_wireless_mouse"), &stru_100941758, CFSTR("CBLocalizable")));
          break;
        case 780:
          v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
          v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("apple_mighty_mouse"), &stru_100941758, CFSTR("CBLocalizable")));
          break;
        case 781:
LABEL_40:
          v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
          v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("apple_magic_mouse"), &stru_100941758, CFSTR("CBLocalizable")));
          break;
        case 782:
LABEL_5:
          v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
          v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("apple_magic_trackpad"), &stru_100941758, CFSTR("CBLocalizable")));
          break;
        default:
          goto LABEL_55;
      }
      goto LABEL_56;
    }
    if ((_DWORD)a1 == 8220 || (_DWORD)a1 == 8216 || (_DWORD)a1 == 8213)
    {
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
      v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("apple_airpods_case"), &stru_100941758, CFSTR("CBLocalizable")));
      goto LABEL_56;
    }
LABEL_55:
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[CBProductInfo productInfoWithProductID:](CBProductInfo, "productInfoWithProductID:", a1));
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "productName"));
    goto LABEL_56;
  }
  if ((int)a1 <= 665)
  {
    switch((int)a1)
    {
      case 613:
        goto LABEL_5;
      case 615:
        goto LABEL_39;
      case 617:
        goto LABEL_40;
      case 620:
        v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
        v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("apple_magic_keyboard_keypad"), &stru_100941758, CFSTR("CBLocalizable")));
        break;
      default:
        goto LABEL_55;
    }
    goto LABEL_56;
  }
  if ((_DWORD)a1 == 666)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("apple_magic_keyboard_touch"), &stru_100941758, CFSTR("CBLocalizable")));
    goto LABEL_56;
  }
  if ((_DWORD)a1 == 668)
  {
LABEL_39:
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("apple_magic_keyboard"), &stru_100941758, CFSTR("CBLocalizable")));
    goto LABEL_56;
  }
  if ((_DWORD)a1 != 671)
    goto LABEL_55;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithIdentifier:](NSBundle, "bundleWithIdentifier:", CFSTR("com.apple.CoreBluetooth")));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("apple_magic_keyboard_touch_keypad"), &stru_100941758, CFSTR("CBLocalizable")));
LABEL_56:
  v4 = (void *)v2;

  return v4;
}

void sub_10008F7A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000916A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;

  a39 = v52 - 120;
  sub_100091BF8((void ***)&a39);

  _Unwind_Resume(a1);
}

BOOL sub_100091A80(uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

_QWORD *sub_100091AE8(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_100091B94(id a1)
{
  operator new();
}

void sub_100091BD4()
{
  operator delete();
}

void sub_100091BF8(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100091C38((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100091C38(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void sub_100091C84(id a1)
{
  operator new();
}

void sub_100091CC4()
{
  operator delete();
}

void sub_100091CE8(id a1)
{
  operator new();
}

void sub_100091D28()
{
  operator delete();
}

void sub_100091D4C(id a1)
{
  operator new();
}

void sub_100091D8C()
{
  operator delete();
}

void sub_100091DB0(id a1)
{
  operator new();
}

void sub_100091DF0()
{
  operator delete();
}

void sub_100091E14(id a1)
{
  operator new();
}

void sub_100091E54()
{
  operator delete();
}

void sub_100091E78(id a1)
{
  operator new();
}

void sub_100091EB8()
{
  operator delete();
}

void sub_100091EDC(id a1)
{
  operator new();
}

void sub_100091F1C()
{
  operator delete();
}

void sub_100091F40(id a1)
{
  operator new();
}

void sub_100091F80()
{
  operator delete();
}

uint64_t sub_100092AC4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;

  v5 = a3;
  v6 = objc_msgSend(*(id *)(a1 + 32), "calculateMetricforDevice:onHost:", *(_QWORD *)(a1 + 40), a2);
  v7 = objc_msgSend(*(id *)(a1 + 32), "calculateMetricforDevice:onHost:", *(_QWORD *)(a1 + 40), v5);
  if (v6 == v7)
  {
    v8 = objc_msgSend(v5, "isEqual:", CFSTR("CBLocalHostID"));
  }
  else if (v6 < v7)
  {
    v8 = 1;
  }
  else
  {
    v8 = -1;
  }

  return v8;
}

void sub_100092C64(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;
  uint64_t Int64Ranged;
  void *v6;
  void *v7;
  const __CFString *v8;
  void *v9;

  if (dword_100977AA0 <= 30 && (dword_100977AA0 != -1 || _LogCategory_Initialize(&dword_100977AA0, 30)))
    LogPrintF_safe(&dword_100977AA0, "-[CBWHBRouter coexChangeNotification:]_block_invoke", 30, "Coex Notification received");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.bluetooth.leconnection"));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
    Int64Ranged = CFDictionaryGetInt64Ranged(v4, CFSTR("NUMBER_OF_LE_CONNECTIONS"), 0xFFFFFFFF80000000, 0x7FFFFFFFLL, 0);

    if (dword_100977AA0 <= 30
      && (dword_100977AA0 != -1 || _LogCategory_Initialize(&dword_100977AA0, 30)))
    {
      LogPrintF_safe(&dword_100977AA0, "-[CBWHBRouter coexChangeNotification:]_block_invoke", 30, "Coex Notification Number of LE Connections:%d", Int64Ranged);
    }
    v8 = CFSTR("NUMBER_OF_LE_CONNECTIONS");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", Int64Ranged));
    v9 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));

    objc_msgSend(*(id *)(a1 + 40), "updateCoexUpdate:whbHost:", v7, CFSTR("CBLocalHostID"));
  }
}

id sub_10009387C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeDeviceFromDeviceTable:value:", a2, *(_QWORD *)(a1 + 40));
}

void sub_10009432C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100094344(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  unsigned int v8;
  void *v9;
  id v10;

  v10 = a3;
  v8 = objc_msgSend(*(id *)(a1 + 32), "isEqual:", a2);
  v9 = v10;
  if (v8)
  {
    if (dword_100977AA0 <= 30
      && (dword_100977AA0 != -1 || _LogCategory_Initialize(&dword_100977AA0, 30)))
    {
      LogPrintF_safe(&dword_100977AA0, "-[CBWHBRouter getCBDeviceForStableId:onHost:]_block_invoke", 30, "Found CBDevice:%@ for stableIdentifier:%@ on WHBHost: %@", v10, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    }
    *a4 = 1;
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a3);
    v9 = v10;
  }

}

_WORD *sub_1000948E0(_WORD *result)
{
  *result = 256;
  return result;
}

void sub_1000948EC(_BYTE *a1, uint64_t a2)
{
  const mach_header_64 *v2;
  int v3;
  NSObject *v4;
  const char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  BOOL v11;
  int v12;
  const char *v13;

  v2 = (const mach_header_64 *)(a2 & 0xFFFFFFFF00000000);
  v3 = (a2 & 0xFFFFFFFF00000000) == (_QWORD)&_mh_execute_header;
  if (*a1 != v3)
  {
    *a1 = v3;
    v4 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "not associated";
      if (v2 == &_mh_execute_header)
        v5 = "associated";
      v12 = 136315138;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Latency WiFi is %s to 2.4GHz band", (uint8_t *)&v12, 0xCu);
    }
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_1009180D0);
    if (*((_QWORD *)off_100977A90 + 25))
    {
      v6 = (char *)*((_QWORD *)off_100977A90 + 23);
      v7 = (char *)off_100977A90 + 192;
      if (v6 != (char *)off_100977A90 + 192)
      {
        do
        {
          v8 = *((_QWORD *)v6 + 5);
          if (*(_WORD *)(v8 + 84))
          {
            if (qword_100977A98 != -1)
              dispatch_once(&qword_100977A98, &stru_1009180D0);
            sub_1000A1FAC(*((_QWORD *)off_100977A90 + 26), 0, *(unsigned __int16 *)(v8 + 84));
          }
          v9 = (char *)*((_QWORD *)v6 + 1);
          if (v9)
          {
            do
            {
              v10 = v9;
              v9 = *(char **)v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (char *)*((_QWORD *)v6 + 2);
              v11 = *(_QWORD *)v10 == (_QWORD)v6;
              v6 = v10;
            }
            while (!v11);
          }
          v6 = v10;
        }
        while (v10 != v7);
      }
    }
  }
}

uint64_t sub_100094AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = _os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming");
  if (a3)
  {
    if ((_DWORD)result)
    {
      result = sub_100094BB4(a1, a3);
      if ((_DWORD)result)
      {
        v7 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 328))(v7))
        {
          if (qword_100977A98 != -1)
            dispatch_once(&qword_100977A98, &stru_1009180D0);
          (*(void (**)(void *, uint64_t))(*(_QWORD *)off_100977A90 + 88))(off_100977A90, a2);
        }
        v8 = sub_10003BE44();
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 384))(v8);
        if ((_DWORD)result)
        {
          if (qword_100977A98 != -1)
            dispatch_once(&qword_100977A98, &stru_1009180D0);
          return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)off_100977A90 + 88))(off_100977A90, a2);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100094BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  int v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;

  v4 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 240))(v4)
    && *(_BYTE *)(a1 + 1)
    && (sub_100442118(a2, 49) & 1) != 0)
  {
    return 1;
  }
  v6 = qword_1009997E0;
  v7 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v7)
  {
    v8 = sub_10003BE44();
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 240))(v8);
    v10 = *(unsigned __int8 *)(a1 + 1);
    v11[0] = 67109632;
    v11[1] = v9;
    v12 = 1024;
    v13 = v10;
    v14 = 1024;
    v15 = sub_100442118(a2, 49);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Advanced Sniff not allowed %d %d %d", (uint8_t *)v11, 0x14u);
    return 0;
  }
  return result;
}

void sub_100094CD8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  int v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  uint64_t v11;
  _DWORD v12[2];

  v3 = sub_100094DE4(a1, a2);
  if (v3)
  {
    v4 = sub_100094DE4(v3, a2);
    ++*(_BYTE *)(v4 + 2);
    v5 = qword_1009997E0;
    v6 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
    if (!v6)
      return;
    v7 = *(unsigned __int8 *)(sub_100094DE4(v6, a2) + 2);
    v12[0] = 67109120;
    v12[1] = v7;
    v8 = "Advanced Sniff increased pending count %d";
    v9 = v5;
    v10 = 8;
  }
  else
  {
    v11 = qword_1009997E0;
    if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(v12[0]) = 0;
    v8 = "Advanced Sniff increase pending count for invalid device";
    v9 = v11;
    v10 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)v12, v10);
}

uint64_t sub_100094DE4(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  unint64_t v9;
  unint64_t *v10;

  v9 = a2;
  if (!a2)
    return 0;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_1009180D0);
  v3 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
  if (!v3)
    goto LABEL_15;
  v4 = (char *)off_100977A90 + 192;
  do
  {
    v5 = v3[4];
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v4 = (char *)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (char *)off_100977A90 + 192 || *((_QWORD *)v4 + 4) > a2)
LABEL_15:
    v4 = (char *)off_100977A90 + 192;
  if (v4 == (char *)off_100977A90 + 192)
    return 0;
  v10 = &v9;
  return *(_QWORD *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v9, (uint64_t)&unk_100737E44, (uint64_t **)&v10)[5]
                   + 48);
}

void sub_100094EC8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  int v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v13;
  _DWORD v14[2];

  v3 = sub_100094DE4(a1, a2);
  if (v3)
  {
    v4 = sub_100094DE4(v3, a2);
    v5 = *(unsigned __int8 *)(v4 + 2);
    v6 = sub_100094DE4(v4, a2);
    if (v5)
    {
      --*(_BYTE *)(v6 + 2);
      v7 = qword_1009997E0;
      v8 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
      if (!v8)
        return;
      v9 = *(unsigned __int8 *)(sub_100094DE4(v8, a2) + 2);
      v14[0] = 67109120;
      v14[1] = v9;
      v10 = "Advanced Sniff decreased pending count %d";
      v11 = v7;
      v12 = 8;
      goto LABEL_10;
    }
    *(_BYTE *)(v6 + 2) = 0;
    v13 = qword_1009997E0;
    if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(v14[0]) = 0;
    v10 = "Advanced Sniff pending count 0";
  }
  else
  {
    v13 = qword_1009997E0;
    if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(v14[0]) = 0;
    v10 = "Advanced Sniff decrease pending count for invalid device";
  }
  v11 = v13;
  v12 = 2;
LABEL_10:
  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)v14, v12);
}

void sub_10009501C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  NSObject *v15;
  _BOOL8 v16;
  int v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[6];
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;

  if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
  {
    v7 = ((unint64_t)*a3 << 40) | ((unint64_t)a3[1] << 32) | ((unint64_t)a3[2] << 24) | ((unint64_t)a3[3] << 16) | ((unint64_t)a3[4] << 8) | a3[5];
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_1009180F0);
    v8 = sub_10006D488((uint64_t)off_1009778E0, v7, 1);
    if (!v8)
      goto LABEL_29;
    v9 = v8;
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_1009180D0);
    v10 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
    if (!v10)
      goto LABEL_18;
    v11 = (char *)off_100977A90 + 192;
    do
    {
      v12 = v10[4];
      v13 = v12 >= v9;
      if (v12 >= v9)
        v14 = v10;
      else
        v14 = v10 + 1;
      if (v13)
        v11 = (char *)v10;
      v10 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v11 == (char *)off_100977A90 + 192 || v9 < *((_QWORD *)v11 + 4))
LABEL_18:
      v11 = (char *)off_100977A90 + 192;
    if (v11 == (char *)off_100977A90 + 192)
    {
LABEL_29:
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
        sub_1006CDCD8();
    }
    else
    {
      v15 = qword_1009997E0;
      v16 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
      if (v16)
      {
        v17 = *(unsigned __int8 *)sub_100094DE4(v16, v9);
        *(_DWORD *)buf = 67109376;
        v24 = v17;
        v25 = 1024;
        v26 = a4;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sniff/Active mode change: %d->%d", buf, 0xEu);
      }
      v18 = (_BYTE *)sub_100094DE4(v16, v9);
      *v18 = a4;
      v19 = (_BYTE *)sub_100094DE4((uint64_t)v18, v9);
      if (!*v19)
      {
        v20 = sub_100094DE4((uint64_t)v19, v9);
        if (*(_BYTE *)(v20 + 1))
        {
          *(_BYTE *)(sub_100094DE4(v20, v9) + 1) = 0;
          v21 = sub_1004759E0();
          v22[0] = _NSConcreteStackBlock;
          v22[1] = 3221225472;
          v22[2] = sub_100095290;
          v22[3] = &unk_100918090;
          v22[4] = a1;
          v22[5] = v9;
          sub_100041A34(v21, v22);
        }
      }
    }
  }
}

_BYTE *sub_100095290(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v11;
  _QWORD v12[6];
  _QWORD block[6];
  uint8_t buf[15];
  char v15;

  v2 = *(_QWORD *)(a1 + 32);
  v15 = 0;
  sub_100043758(&v15);
  v3 = (unsigned __int16 *)sub_10019AEA4(*(_QWORD *)(a1 + 40) + 128);
  sub_10004339C(&v15);
  v4 = qword_1009997E0;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Enter Advanced Sniff after unsniff", buf, 2u);
    }
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_1009180D0);
    v5 = *((_QWORD *)off_100977A90 + 31);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10009548C;
    block[3] = &unk_100918090;
    v6 = *(_QWORD *)(a1 + 40);
    block[4] = v2;
    block[5] = v6;
    dispatch_async(v5, block);
    v7 = sub_1000438A4();
    BYTE2(v11) = 1;
    LOWORD(v11) = 2;
    if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int))(*(_QWORD *)v7 + 1536))(v7, *v3, 24, 20, 8, 1, 0, 0, 0xFFFF00000001, v11))
    {
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_1009180D0);
      v8 = *((_QWORD *)off_100977A90 + 31);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_100095498;
      v12[3] = &unk_100918090;
      v9 = *(_QWORD *)(a1 + 40);
      v12[4] = v2;
      v12[5] = v9;
      dispatch_async(v8, v12);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006CDD04();
  }
  return sub_100043728(&v15);
}

void sub_100095474(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100043728((_BYTE *)(v1 - 81));
  _Unwind_Resume(a1);
}

void sub_10009548C(uint64_t a1)
{
  sub_100094CD8(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_100095498(uint64_t a1)
{
  sub_100094EC8(a1, *(_QWORD *)(a1 + 40));
}

id sub_1000954A0(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  const __CFString *v5;
  NSObject *v7;
  uint8_t v8[16];

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithFormat:](NSMutableString, "stringWithFormat:", &stru_100941758));
  v4 = v3;
  if (a2 > 239)
  {
    if (a2 == 240)
    {
      v5 = CFSTR("ADVANCEDSNIFF");
      goto LABEL_10;
    }
    if (a2 == 241)
    {
      v5 = CFSTR("SEMI-ADVANCEDSNIFF");
      goto LABEL_10;
    }
  }
  else
  {
    if (!a2)
    {
      v5 = CFSTR("ACTIVE");
      goto LABEL_10;
    }
    if (a2 == 2)
    {
      v5 = CFSTR("CLASSICSNIFF");
LABEL_10:
      objc_msgSend(v3, "appendString:", v5);
      return v4;
    }
  }
  objc_msgSend(v3, "appendString:", CFSTR("UNKNOWN"));
  v7 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Unknown Advanced Sniff mode", v8, 2u);
  }
  return v4;
}

void sub_100095594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000955A4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  BOOL v25;
  unsigned __int8 v26;
  NSObject *v27;
  _BOOL8 v28;
  unsigned __int8 *v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  unsigned int v34;
  NSObject *v35;
  int v36;
  char v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;

  v11 = ((unint64_t)*a3 << 40) | ((unint64_t)a3[1] << 32) | ((unint64_t)a3[2] << 24) | ((unint64_t)a3[3] << 16) | ((unint64_t)a3[4] << 8) | a3[5];
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_1009180F0);
  v12 = sub_10006D488((uint64_t)off_1009778E0, v11, 1);
  if (v12)
  {
    v13 = v12;
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_1009180D0);
    v14 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
    if (!v14)
      goto LABEL_17;
    v15 = (char *)off_100977A90 + 192;
    do
    {
      v16 = v14[4];
      v17 = v16 >= v13;
      if (v16 >= v13)
        v18 = v14;
      else
        v18 = v14 + 1;
      if (v17)
        v15 = (char *)v14;
      v14 = (_QWORD *)*v18;
    }
    while (*v18);
    if (v15 == (char *)off_100977A90 + 192 || v13 < *((_QWORD *)v15 + 4))
LABEL_17:
      v15 = (char *)off_100977A90 + 192;
    if (v15 != (char *)off_100977A90 + 192)
    {
      v37 = 0;
      sub_100043758(&v37);
      v19 = sub_10019AEA4(v13 + 128);
      v20 = sub_10004339C(&v37);
      if (!v19)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
          sub_1006CDD30();
        goto LABEL_60;
      }
      v21 = (unsigned __int8 *)sub_100094DE4(v20, v13);
      if (a7 && *v21 == a4)
      {
        v22 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
          sub_1006CDD5C(a7, a4, v22);
LABEL_60:
        sub_100043728(&v37);
        return;
      }
      v24 = sub_100094DE4((uint64_t)v21, v13);
      if (!*(_BYTE *)(v24 + 2))
      {
        v35 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Advanced Sniff mode change ignored, not for media", buf, 2u);
        }
        goto LABEL_60;
      }
      sub_100094EC8(v24, v13);
      if (a7)
        v25 = 0;
      else
        v25 = a4 == 240;
      if (v25)
        v26 = -15;
      else
        v26 = a4;
      v27 = qword_1009997E0;
      v28 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
      if (v28)
      {
        v29 = (unsigned __int8 *)sub_100094DE4(v28, v13);
        v30 = sub_1000954A0((uint64_t)v29, *v29);
        v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
        v32 = sub_1000954A0((uint64_t)v31, v26);
        v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
        *(_DWORD *)buf = 138413058;
        v39 = v31;
        v40 = 2112;
        v41 = v33;
        v42 = 1024;
        v43 = a7;
        v44 = 1024;
        v45 = a8;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Low Latency Game Advanced Sniff changed %@->%@, max_age:%d, maxRetry:%d", buf, 0x22u);

      }
      if (a7 || v26 != 241)
      {
        if (!a7 || v26 != 240)
        {
          if (!v26)
          {
            *(_BYTE *)sub_100094DE4(v28, v13) = 0;
            if (qword_100977A98 != -1)
              dispatch_once(&qword_100977A98, &stru_1009180D0);
            sub_100518ECC((uint64_t)off_100977A90, 0, v13);
          }
          v36 = 1;
          goto LABEL_55;
        }
        *(_BYTE *)sub_100094DE4(v28, v13) = -16;
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_1009180D0);
        v34 = 4;
      }
      else
      {
        *(_BYTE *)sub_100094DE4(v28, v13) = -15;
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_1009180D0);
        v34 = 3;
      }
      sub_100518ECC((uint64_t)off_100977A90, v34, v13);
      v36 = 2;
LABEL_55:
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_1009180D0);
      sub_100528008((uint64_t)off_100977A90, v13, v36);
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_1009180D0);
      sub_100527E34((uint64_t)off_100977A90, v13, v26);
      goto LABEL_60;
    }
  }
  v23 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Advanced Sniff mode change ignored: couldn't find the device", buf, 2u);
  }
}

void sub_100095A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void *v13;

  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_100095A90(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = _os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming");
  if ((_DWORD)v12)
    sub_1000955A4(v12, 0, a3, a4, v13, v14, a7, a8);
}

void sub_100095AFC(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  const char *v6;
  int v7;
  const char *v8;
  __int16 v9;
  const char *v10;

  v4 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "True";
    if (*(_BYTE *)(a1 + 1))
      v6 = "True";
    else
      v6 = "false";
    if (!a2)
      v5 = "false";
    v7 = 136315394;
    v8 = v6;
    v9 = 2080;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Advanced Sniff State changed %s->%s", (uint8_t *)&v7, 0x16u);
  }
  *(_BYTE *)(a1 + 1) = a2;
}

void sub_100095BDC(uint64_t a1, unint64_t a2)
{
  char v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  _QWORD v16[6];
  uint8_t buf[16];

  v4 = _os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming");
  if (!a2 || (v4 & 1) == 0)
  {
    v13 = qword_1009997E0;
    if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v14 = "Exit Advanced Sniff but feature flag off";
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 2u);
    return;
  }
  v5 = sub_100094BB4(a1, a2);
  if ((v5 & 1) == 0)
  {
    v13 = qword_1009997E0;
    if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v14 = "Exit Advanced Sniff but not allowed";
    goto LABEL_26;
  }
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_1009180D0);
  v6 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
  if (!v6)
    goto LABEL_17;
  v7 = (char *)off_100977A90 + 192;
  do
  {
    v8 = v6[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = (char *)v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == (char *)off_100977A90 + 192 || *((_QWORD *)v7 + 4) > a2)
LABEL_17:
    v7 = (char *)off_100977A90 + 192;
  if (v7 == (char *)off_100977A90 + 192)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006CDDE4();
  }
  else
  {
    v11 = (unsigned __int8 *)sub_100094DE4(v5, a2);
    if (*v11 == 240 || *(unsigned __int8 *)sub_100094DE4((uint64_t)v11, a2) == 241)
    {
      v12 = sub_1004759E0();
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100095DE4;
      v16[3] = &unk_100918090;
      v16[4] = a1;
      v16[5] = a2;
      sub_100041A34(v12, v16);
    }
    else
    {
      v15 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
        sub_1006CDE10(a2, v15);
    }
  }
}

_BYTE *sub_100095DE4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  unsigned __int16 *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD v11[6];
  _QWORD block[6];
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Exit Advanced Sniff...", buf, 2u);
  }
  buf[0] = 0;
  sub_100043758(buf);
  v4 = (unsigned __int16 *)sub_10019AEA4(*(_QWORD *)(a1 + 40) + 128);
  sub_10004339C(buf);
  if (v4)
  {
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_1009180D0);
    v5 = *((_QWORD *)off_100977A90 + 31);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100095FDC;
    block[3] = &unk_100918090;
    v6 = *(_QWORD *)(a1 + 40);
    block[4] = v2;
    block[5] = v6;
    dispatch_async(v5, block);
    v7 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 1544))(v7, *v4, 1))
    {
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_1009180D0);
      v8 = *((_QWORD *)off_100977A90 + 31);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100095FE8;
      v11[3] = &unk_100918090;
      v9 = *(_QWORD *)(a1 + 40);
      v11[4] = v2;
      v11[5] = v9;
      dispatch_async(v8, v11);
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
        sub_1006CDEB4();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006CDE88();
  }
  return sub_100043728(buf);
}

void sub_100095FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

void sub_100095FDC(uint64_t a1)
{
  sub_100094CD8(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_100095FE8(uint64_t a1)
{
  sub_100094EC8(a1, *(_QWORD *)(a1 + 40));
}

void sub_100095FF0(uint64_t a1, unint64_t a2, int a3)
{
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  int v12;
  _BYTE *v13;
  NSObject *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  NSObject *v18;
  _BOOL4 v19;
  _QWORD v20[6];
  int v21;
  _QWORD v22[5];
  uint8_t buf[16];

  if (!a2)
    goto LABEL_34;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_1009180D0);
  v6 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
  if (!v6)
    goto LABEL_15;
  v7 = (char *)off_100977A90 + 192;
  do
  {
    v8 = v6[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = (char *)v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == (char *)off_100977A90 + 192 || *((_QWORD *)v7 + 4) > a2)
LABEL_15:
    v7 = (char *)off_100977A90 + 192;
  if (v7 == (char *)off_100977A90 + 192)
  {
LABEL_34:
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006CDF18();
  }
  else
  {
    v11 = (unsigned __int8 *)sub_100094DE4(a1, a2);
    v12 = *v11;
    v13 = (_BYTE *)sub_100094DE4((uint64_t)v11, a2);
    if (v12 == 2)
    {
      v13[1] = 1;
      v14 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Enter Advanced Sniff on sniff link", buf, 2u);
      }
      v15 = sub_1004759E0();
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_100096210;
      v22[3] = &unk_100917378;
      v22[4] = a2;
      v16 = v22;
      goto LABEL_28;
    }
    if (*v13 != 2)
    {
      v15 = sub_1004759E0();
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1000962B4;
      v20[3] = &unk_1009180B0;
      v21 = a3;
      v20[4] = a1;
      v20[5] = a2;
      v16 = v20;
LABEL_28:
      sub_100041A34(v15, v16);
      return;
    }
    v17 = *(unsigned __int8 *)sub_100094DE4((uint64_t)v13, a2);
    v18 = qword_1009997E0;
    v19 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR);
    if (v17 == 240)
    {
      if (v19)
        sub_1006CDF44();
    }
    else if (v19)
    {
      sub_1006CDF70(a2, v18);
    }
  }
}

_BYTE *sub_100096210(uint64_t a1)
{
  NSObject *v2;
  char v4;
  uint8_t buf[16];

  v2 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Unsniffing for Advanced Sniff", buf, 2u);
  }
  v4 = 0;
  sub_100043758(&v4);
  sub_100187584(*(_QWORD *)(a1 + 32) + 128);
  sub_10004339C(&v4);
  return sub_100043728(&v4);
}

void sub_1000962A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

_BYTE *sub_1000962B4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  unsigned __int16 *v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD block[6];
  uint8_t buf[4];
  int v24;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67109120;
    v24 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Enter Advanced Sniff, send command for config: %d", buf, 8u);
  }
  buf[0] = 0;
  sub_100043758(buf);
  v5 = (unsigned __int16 *)sub_10019AEA4(*(_QWORD *)(a1 + 40) + 128);
  sub_10004339C(buf);
  if (v5)
  {
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_1009180D0);
    v6 = *((_QWORD *)off_100977A90 + 31);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100096664;
    block[3] = &unk_100918090;
    v7 = *(_QWORD *)(a1 + 40);
    block[4] = v2;
    block[5] = v7;
    dispatch_async(v6, block);
    v8 = *(_DWORD *)(a1 + 48);
    switch(v8)
    {
      case 3:
        v15 = sub_1000438A4();
        if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v15 + 1552))(v15, *v5, 0, 0xFFFFLL, 0, 0, 0, 1))
        {
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
            sub_1006CE014();
          if (qword_100977A98 != -1)
            dispatch_once(&qword_100977A98, &stru_1009180D0);
          v10 = *((_QWORD *)off_100977A90 + 31);
          v20[0] = _NSConcreteStackBlock;
          v20[1] = 3221225472;
          v20[2] = sub_10009667C;
          v20[3] = &unk_100918090;
          v16 = *(_QWORD *)(a1 + 40);
          v20[4] = v2;
          v20[5] = v16;
          v12 = v20;
          goto LABEL_27;
        }
        break;
      case 2:
        v13 = sub_1000438A4();
        if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v13 + 1552))(v13, *v5, 0, 0xFFFFLL, 0, 20, 0, 1))
        {
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
            sub_1006CE078();
          if (qword_100977A98 != -1)
            dispatch_once(&qword_100977A98, &stru_1009180D0);
          v10 = *((_QWORD *)off_100977A90 + 31);
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472;
          v19[2] = sub_100096728;
          v19[3] = &unk_100918090;
          v14 = *(_QWORD *)(a1 + 40);
          v19[4] = v2;
          v19[5] = v14;
          v12 = v19;
          goto LABEL_27;
        }
        break;
      case 1:
        v9 = sub_1000438A4();
        BYTE2(v18) = 1;
        LOWORD(v18) = 2;
        if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, int))(*(_QWORD *)v9 + 1536))(v9, *v5, 24, 0, 8, 1, 0, 0, 0xFFFF00000001, v18))
        {
          if (qword_100977A98 != -1)
            dispatch_once(&qword_100977A98, &stru_1009180D0);
          v10 = *((_QWORD *)off_100977A90 + 31);
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472;
          v21[2] = sub_100096670;
          v21[3] = &unk_100918090;
          v11 = *(_QWORD *)(a1 + 40);
          v21[4] = v2;
          v21[5] = v11;
          v12 = v21;
LABEL_27:
          dispatch_async(v10, v12);
        }
        break;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006CDFE8();
  }
  return sub_100043728(buf);
}

void sub_100096644(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100043728((_BYTE *)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_100096664(uint64_t a1)
{
  sub_100094CD8(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_100096670(uint64_t a1)
{
  sub_100094CD8(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_10009667C(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  uint8_t v5[16];

  v2 = qword_1009997E0;
  v3 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Reconfig failed, back to FTO", v5, 2u);
  }
  sub_100094EC8(v3, *(_QWORD *)(a1 + 40));
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_1009180D0);
  return sub_100518ECC(off_100977A90, 3, *(_QWORD *)(a1 + 40));
}

uint64_t sub_100096728(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  uint8_t v5[16];

  v2 = qword_1009997E0;
  v3 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Reconfig failed, back to FTO", v5, 2u);
  }
  sub_100094EC8(v3, *(_QWORD *)(a1 + 40));
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_1009180D0);
  return sub_100518ECC(off_100977A90, 3, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1000967D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

void sub_1000967DC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  void *v6;
  unsigned int v7;
  _DWORD v8[2];

  if (a2)
  {
    v3 = sub_100094DE4(a1, a2);
    v4 = qword_1009997E0;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(unsigned __int8 *)(a2 + 1365);
        v8[0] = 67109120;
        v8[1] = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Advanced Sniff band switched %d", (uint8_t *)v8, 8u);
      }
      if (*(_BYTE *)(a2 + 1365))
      {
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_1009180D0);
        v6 = off_100977A90;
        v7 = 6;
      }
      else
      {
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_1009180D0);
        v6 = off_100977A90;
        v7 = 5;
      }
      sub_100518ECC((uint64_t)v6, v7, a2);
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
    {
      sub_1006CE108();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006CE0DC();
  }
}

void sub_100096940(uint64_t a1, int a2, uint64_t a3)
{
  char v5;

  if (sub_10044D860(a3))
  {
    if (a2 == 2)
    {
      if (qword_100977B18 != -1)
        dispatch_once(&qword_100977B18, &stru_100918110);
      v5 = 1;
      goto LABEL_11;
    }
    if (a2 == 1)
    {
      if (qword_100977B18 != -1)
        dispatch_once(&qword_100977B18, &stru_100918110);
      v5 = 0;
LABEL_11:
      sub_1002BF080(qword_100977B10, v5, a3);
    }
  }
}

void sub_1000969F4(uint64_t a1, int a2, unint64_t a3)
{
  unint64_t v3;
  int v4;

  switch(a2)
  {
    case 0:
      sub_100095BDC(a1, a3);
      return;
    case 1:
      v3 = a3;
      v4 = 1;
      goto LABEL_4;
    case 2:
      v3 = a3;
      v4 = 2;
      goto LABEL_4;
    case 3:
      v3 = a3;
      v4 = 3;
LABEL_4:
      sub_100095FF0(a1, v3, v4);
      break;
    default:
      return;
  }
}

void sub_100096A48(uint64_t a1, int a2, unint64_t a3)
{
  NSObject *v5;
  _BOOL8 v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  int v12;
  const char *v13;

  v5 = qword_1009997E0;
  v6 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    v7 = "stopped";
    if (a2)
      v7 = "started";
    v12 = 136315138;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Bi StreamState %s", (uint8_t *)&v12, 0xCu);
  }
  if (a3 && (v8 = sub_100094DE4(v6, a3)) != 0)
  {
    v9 = sub_100094DE4(v8, a3);
    *(_BYTE *)(v9 + 3) = a2;
    if (a2)
      v10 = 2;
    else
      v10 = 1;
    sub_100096940(v9, v10, a3);
  }
  else
  {
    v11 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Bi StreamState update skipped, device gone", (uint8_t *)&v12, 2u);
    }
  }
}

uint64_t sub_100096B7C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_100094DE4(a1, a2);
  *(_WORD *)(v3 + 4) = 0;
  result = sub_100094DE4(v3, a2);
  *(_WORD *)(result + 6) = 0;
  return result;
}

void sub_100096BAC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL8 v8;
  const char *v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL8 v14;
  int v15;
  int v16;
  NSObject *v17;
  _BOOL8 v18;
  uint64_t v19;
  NSObject *v20;
  _BOOL8 v21;
  int v22;
  int v23;
  NSObject *v24;
  _BOOL8 v25;
  uint64_t v26;
  void *__p[2];
  char v28;
  int v29;
  _BYTE buf[14];
  char v31;

  if (a2 && *(_BYTE *)(sub_100094DE4(a1, a2) + 3))
  {
    v5 = sub_100027F68();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5))
      goto LABEL_9;
    v29 = 0;
    v6 = sub_100027F68();
    sub_100091AE8(buf, "BiAoS");
    sub_100091AE8(__p, "bypassHAoSMonitor");
    (*(void (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v6 + 88))(v6, buf, __p, &v29);
    if (v28 < 0)
      operator delete(__p[0]);
    if (v31 < 0)
      operator delete(*(void **)buf);
    if (!v29)
    {
LABEL_9:
      v7 = qword_1009997E0;
      v8 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
      if (v8)
      {
        if (*(_BYTE *)(a2 + 1365))
          v9 = "UBO";
        else
          v9 = "ISM";
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Bi monitor band: %s", buf, 0xCu);
      }
      v10 = *(_BYTE *)(a2 + 1365) == 0;
      v11 = *(char *)(a3 + 6);
      v12 = sub_100094DE4(v8, a2);
      if (v10)
      {
        if (v11 < -74)
        {
          *(_WORD *)(v12 + 6) = 0;
        }
        else
        {
          ++*(_WORD *)(v12 + 6);
          v20 = qword_1009997E0;
          v21 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
          if (v21)
          {
            v22 = *(char *)(a3 + 6);
            v23 = *(__int16 *)(sub_100094DE4(v21, a2) + 6);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v22;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v23;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Bi ISM RSSI %d over threshold %d times", buf, 0xEu);
          }
          if (*(__int16 *)(sub_100094DE4(v21, a2) + 6) >= 20)
          {
            v24 = qword_1009997E0;
            v25 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
            if (v25)
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Bi request UBO band", buf, 2u);
            }
            v26 = sub_100094DE4(v25, a2);
            *(_WORD *)(v26 + 6) = 0;
            sub_100096940(v26, 2, a2);
          }
        }
      }
      else if (v11 > -80)
      {
        *(_WORD *)(v12 + 4) = 0;
      }
      else
      {
        ++*(_WORD *)(v12 + 4);
        v13 = qword_1009997E0;
        v14 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
        if (v14)
        {
          v15 = *(char *)(a3 + 6);
          v16 = *(__int16 *)(sub_100094DE4(v14, a2) + 4);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v15;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v16;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Bi UBO RSSI %d under threshold %d times", buf, 0xEu);
        }
        if (*(__int16 *)(sub_100094DE4(v14, a2) + 4) >= 2)
        {
          v17 = qword_1009997E0;
          v18 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
          if (v18)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Bi request ISM band", buf, 2u);
          }
          v19 = sub_100094DE4(v18, a2);
          *(_WORD *)(v19 + 4) = 0;
          sub_100096940(v19, 1, a2);
        }
      }
    }
  }
}

void sub_100096F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100096F3C(id a1)
{
  operator new();
}

void sub_100096F7C()
{
  operator delete();
}

void sub_100096FA0(id a1)
{
  operator new();
}

void sub_100096FE0()
{
  operator delete();
}

uint64_t *sub_100097004(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_10009719C(id a1)
{
  operator new();
}

void sub_1000971DC()
{
  operator delete();
}

void sub_100097200(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

uint64_t sub_100097224(unint64_t a1)
{
  return sub_100094DE4(a1, a1);
}

CFPropertyListRef sub_10009723C()
{
  return (id)CFPreferencesCopyAppValue(CFSTR("SelfGeneratedLocalAddress"), CFSTR("com.apple.BTServer"));
}

void sub_100097260(void *a1)
{
  id v1;

  v1 = a1;
  CFPreferencesSetAppValue(CFSTR("SelfGeneratedLocalAddress"), v1, CFSTR("com.apple.BTServer"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.BTServer"));

}

void sub_1000972B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1000972C4()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v0 = objc_autoreleasePoolPush();
  v1 = (void *)CFPreferencesCopyAppValue(CFSTR("Daemon"), CFSTR("com.apple.MobileBluetooth.debug"));
  v2 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v1, v2) & 1) != 0)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKey:", CFSTR("DisableReadAddressFromIOREGForDebugging")));
    v4 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
    {
      v5 = v3;
      if ((objc_msgSend(v5, "isEqualToString:", CFSTR("TRUE")) & 1) != 0
        || (objc_msgSend(v5, "isEqualToString:", CFSTR("YES")) & 1) != 0)
      {
        v6 = 1;
      }
      else
      {
        if ((objc_msgSend(v5, "isEqualToString:", CFSTR("FALSE")) & 1) == 0)
          objc_msgSend(v5, "isEqualToString:", CFSTR("NO"));
        v6 = 0;
      }

    }
    else
    {
      v7 = objc_opt_class(NSNumber);
      if ((objc_opt_isKindOfClass(v3, v7) & 1) != 0)
        v6 = (uint64_t)objc_msgSend(v3, "BOOLValue");
      else
        v6 = 0;
    }

  }
  else
  {
    v6 = 0;
  }

  objc_autoreleasePoolPop(v0);
  return v6;
}

void sub_10009740C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t start()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;
  int *v3;
  FILE *v4;
  int *v5;
  NSObject *v6;
  int *v7;
  FILE *v8;
  int *v9;
  char *v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  const __CFDictionary *v19;
  io_service_t MatchingService;
  const __CFDictionary *v21;
  uint64_t j;
  int v23;
  dispatch_source_t v24;
  dispatch_object_t *v25;
  dispatch_object_t v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  int v31;
  NSObject *v32;
  int v33;
  NSObject *v34;
  char *v36;
  char *v37;
  char *v38;
  NSObject *v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  CFPropertyListRef v45;
  void *v46;
  void *v47;
  id v48;
  NSObject *v49;
  id v50;
  FILE *v51;
  id v52;
  uint64_t i;
  void *v54;
  NSObject *v55;
  void *context;
  size_t v57;
  _BYTE v58[16];
  char v59[1024];
  _BYTE v60[16];
  uint8_t v61[4];
  __int128 *v62;
  __int128 v63;
  __int16 v64;
  _BYTE buf[24];
  void *v66;
  int v67;

  context = objc_autoreleasePoolPush();
  v0 = getpid();
  proc_disable_wakemon(v0);
  pthread_set_qos_class_self_np(QOS_CLASS_USER_INITIATED, 0);
  v1 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "com.apple.server.bluetooth";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "%s: Bluetooth Super Server Robot Destroyer\n", buf, 0xCu);
  }
  fprintf(__stderrp, "%s: Bluetooth Super Server Robot Destroyer\n", "com.apple.server.bluetooth");
  if ((_set_user_dir_suffix("com.apple.bluetoothd") & 1) == 0)
  {
    v2 = (id)qword_1009997E8;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = __error();
      sub_1006CE2B0(v3, (uint64_t)v60, v2);
    }

    v4 = __stderrp;
    v5 = __error();
    fprintf(v4, "### _set_user_dir_suffix failed: %d", *v5);
  }
  bzero(v59, 0x400uLL);
  if (!confstr(65537, v59, 0x400uLL))
  {
    v6 = (id)qword_1009997E8;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = __error();
      sub_1006CE274(v7, (uint64_t)v58, v6);
    }

    v8 = __stderrp;
    v9 = __error();
    fprintf(v8, "### _CS_DARWIN_USER_TEMP_DIR failed: %d", *v9);
  }
  qword_10097BAF8 = (uint64_t)SCDynamicStoreCreate(kCFAllocatorDefault, CFSTR("com.apple.BTServer"), 0, 0);
  SCDynamicStoreSetDispatchQueue((SCDynamicStoreRef)qword_10097BAF8, (dispatch_queue_t)&_dispatch_main_q);
  SCDynamicStoreSetDisconnectCallBack(qword_10097BAF8, sub_100098490);
  SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10097BAF8, CFSTR("com.apple.MobileBluetooth"));
  word_10097BAE4 = 0;
  dword_10097BAE0 = 0;
  v10 = getenv("BT_DEVICE_ADDRESS");
  if (v10 && (v11 = v10, strlen(v10) == 17))
  {
    sscanf(v11, "%02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx", &dword_10097BAE0, (char *)&dword_10097BAE0 + 1, (char *)&dword_10097BAE0 + 2, (char *)&dword_10097BAE0 + 3, &word_10097BAE4, (char *)&word_10097BAE4 + 1);
    dword_10097BAE0 = 0;
    word_10097BAE4 = 0;
    v12 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Local address from ENV:%s\n", buf, 0xCu);
    }
    fprintf(__stderrp, "Local address from ENV:%s\n");
  }
  else
  {
    v13 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "could not find BT_DEVICE_ADDRESS env variable\n", buf, 2u);
    }
    fwrite("could not find BT_DEVICE_ADDRESS env variable\n", 0x2EuLL, 1uLL, __stderrp);
    if (sub_10009880C("marconi-bt") || sub_10009880C("bluetooth"))
    {
      v14 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress Deleting local address from plist\n", buf, 2u);
      }
      fwrite("FindLocalMacAddress Deleting local address from plist\n", 0x36uLL, 1uLL, __stderrp);
      CFPreferencesSetAppValue(CFSTR("SelfGeneratedLocalAddress"), 0, CFSTR("com.apple.BTServer"));
      CFPreferencesAppSynchronize(CFSTR("com.apple.BTServer"));
    }
    else
    {
      bzero(buf, 0x400uLL);
      v57 = 1024;
      v15 = sysctlbyname("kern.bootargs", buf, &v57, 0, 0);
      if (v15)
      {
        v16 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v63) = 67109120;
          DWORD1(v63) = v15;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress did not find bootargs, sysctlbyname returned %d", (uint8_t *)&v63, 8u);
        }
        fprintf(__stderrp, "FindLocalMacAddress did not find bootargs, sysctlbyname returned %d");
      }
      else
      {
        v36 = strtok(buf, " ");
        if (v36)
        {
          v37 = v36;
          while (!strstr(v37, "wlan.debug.generate-mac"))
          {
            if (strstr(v37, "wlan.factory"))
            {
              v38 = strchr(v37, 61);
              v39 = qword_1009997E8;
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v63) = 0;
                _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress found wlan.factory\n", (uint8_t *)&v63, 2u);
              }
              fwrite("FindLocalMacAddress found wlan.factory\n", 0x27uLL, 1uLL, __stderrp);
              v40 = strtol(v38 + 1, 0, 16);
              if ((v40 & 4) != 0)
              {
                v44 = qword_1009997E8;
                if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(v63) = 134217984;
                  *(_QWORD *)((char *)&v63 + 4) = v40;
                  _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress found wlan.factory with a value of %llu\n", (uint8_t *)&v63, 0xCu);
                }
                fprintf(__stderrp, "FindLocalMacAddress found wlan.factory with a value of %llu\n", v40);
                goto LABEL_78;
              }
            }
            v37 = strtok(0, " ");
            if (!v37)
              goto LABEL_63;
          }
          v43 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v63) = 0;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress found wlan.debug.generate-mac\n", (uint8_t *)&v63, 2u);
          }
          fwrite("FindLocalMacAddress found wlan.debug.generate-mac\n", 0x32uLL, 1uLL, __stderrp);
LABEL_78:
          v45 = sub_10009723C();
          v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
          v47 = v46;
          if (v46 && objc_msgSend(v46, "length"))
          {
            v48 = objc_retainAutorelease(v47);
            sscanf((const char *)objc_msgSend(v48, "UTF8String"), "%02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx", &dword_10097BAE0, (char *)&dword_10097BAE0 + 1, (char *)&dword_10097BAE0 + 2, (char *)&dword_10097BAE0 + 3, &word_10097BAE4, (char *)&word_10097BAE4 + 1);
            v49 = (id)qword_1009997E8;
            if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
            {
              v50 = objc_msgSend(objc_retainAutorelease(v48), "UTF8String");
              LODWORD(v63) = 136315138;
              *(_QWORD *)((char *)&v63 + 4) = v50;
              _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress Local address from plist:%s.\n", (uint8_t *)&v63, 0xCu);
            }

            v51 = __stderrp;
            v52 = objc_retainAutorelease(v48);
            fprintf(v51, "FindLocalMacAddress Local address from plist:%s.\n", (const char *)objc_msgSend(v52, "UTF8String"));
            setenv("BT_DEVICE_ADDRESS", (const char *)objc_msgSend(objc_retainAutorelease(v52), "UTF8String"), 1);
          }
          else
          {
            for (i = 0; i != 6; ++i)
              *((_BYTE *)&dword_10097BAE0 + i) = arc4random_uniform(0xFFu);
            v63 = 0uLL;
            v64 = 0;
            snprintf((char *)&v63, 0x12uLL, "%02x:%02x:%02x:%02x:%02x:%02x", dword_10097BAE0, BYTE1(dword_10097BAE0), BYTE2(dword_10097BAE0), HIBYTE(dword_10097BAE0), word_10097BAE4, HIBYTE(word_10097BAE4));
            v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", &v63));
            sub_100097260(v54);

            v55 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v61 = 136315138;
              v62 = &v63;
              _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress Storing local address to plist:%s.\n", v61, 0xCu);
            }
            fprintf(__stderrp, "FindLocalMacAddress Storing local address to plist:%s.\n", (const char *)&v63);
            setenv("BT_DEVICE_ADDRESS", (const char *)&v63, 1);
          }

        }
        else
        {
LABEL_63:
          v41 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v63) = 0;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress did not find bootargs for random address generation", (uint8_t *)&v63, 2u);
          }
          fwrite("FindLocalMacAddress did not find bootargs for random address generation", 0x47uLL, 1uLL, __stderrp);
          CFPreferencesSetAppValue(CFSTR("SelfGeneratedLocalAddress"), 0, CFSTR("com.apple.BTServer"));
          CFPreferencesAppSynchronize(CFSTR("com.apple.BTServer"));
        }
      }
    }
  }
  v17 = sub_100038E50();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 264))(v17))
  {
    WORD2(v63) = 0;
    LODWORD(v63) = 0;
    if (dword_10097BAE0 | (unsigned __int16)word_10097BAE4)
    {
      if (access("/dev/cu.bluetooth", 0) != -1 || access("/dev/uart.bluetooth", 0) != -1)
        goto LABEL_38;
      v19 = IOServiceNameMatching("marconi-bt");
      if (v19 && (MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v19)) != 0
        || (v21 = IOServiceNameMatching("bluetooth")) != 0
        && (MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v21)) != 0)
      {
        IOObjectRelease(MatchingService);
        goto LABEL_38;
      }
      sub_1006CE14C(buf);
    }
    else
    {
      sub_1006CE1E0(buf);
    }
    fprintf(__stderrp, *(const char **)buf, "com.apple.server.bluetooth");
    errx(0, "No bluetooth on this device.\n");
  }
  v18 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Bluetooth is running inside a Virtual Machine, so skipping check for Bluetooth available", buf, 2u);
  }
LABEL_38:
  for (j = 0; j != 3; ++j)
  {
    v23 = dword_100737E50[j];
    signal(v23, (void (__cdecl *)(int))1);
    v24 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, v23, 0, (dispatch_queue_t)&_dispatch_main_q);
    v25 = (dispatch_object_t *)((char *)&unk_10097BB00 + 8 * j);
    v26 = *v25;
    *v25 = v24;

    v27 = *v25;
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_100098B18;
    v66 = &unk_100918130;
    v67 = v23;
    dispatch_source_set_event_handler(v27, buf);
    dispatch_resume(*v25);
  }
  os_state_add_handler(&_dispatch_main_q, &stru_100918170);
  LODWORD(v63) = dword_10097BAE0;
  WORD2(v63) = word_10097BAE4;
  v28 = sub_10034D3CC();
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v28 + 40))(v28, &v63);
  v29 = sub_100070C04("com.apple.bluetoothd");
  if (v29)
  {
    v30 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "com.apple.server.bluetooth";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v29;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%s: Unable to attach local bluetooth session: %d\n", buf, 0x12u);
    }
    fprintf(__stderrp, "%s: Unable to attach local bluetooth session: %d\n");
LABEL_54:
    objc_autoreleasePoolPop(context);
    return 1;
  }
  v31 = sub_1000742FC(qword_10097BAE8, (unint64_t *)&qword_10097BAF0);
  if (v31)
  {
    v32 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "com.apple.server.bluetooth";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v31;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%s: Unable to get local device: %d\n", buf, 0x12u);
    }
    fprintf(__stderrp, "%s: Unable to get local device: %d\n");
    goto LABEL_54;
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_1009181B0);
  sub_10050B69C(qword_100977B48, qword_10097BAF0);
  v33 = sub_1000744B4(qword_10097BAF0, (__int128 *)off_100977B20, 0);
  if (v33)
  {
    v34 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "com.apple.server.bluetooth";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v33;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%s: Unable to attach local device callbacks: %d\n", buf, 0x12u);
    }
    fprintf(__stderrp, "%s: Unable to attach local device callbacks: %d\n");
    goto LABEL_54;
  }
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_100918190);
  if ((sub_1004B891C((uint64_t)off_100977B38) & 1) == 0)
    sub_1006CE134();
  v42 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "com.apple.server.bluetooth";
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "%s: Server attached, going into msg loop.\n", buf, 0xCu);
  }
  fprintf(__stderrp, "%s: Server attached, going into msg loop.\n", "com.apple.server.bluetooth");
  objc_autoreleasePoolPop(context);
  CFRunLoopRun();
  sub_100508DC0((unint64_t *)&qword_10097BAE8);
  return 0;
}

void sub_1000982D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100098320()
{
  CBStackAdaptorBTStack *v0;
  CBDaemonServer *v1;
  uint64_t v2;
  void *v3;
  id v4;
  dispatch_source_t v5;
  void *v6;
  NSObject *v7;
  id v8;
  void *v9;
  _QWORD handler[4];
  id v11;

  v0 = objc_alloc_init(CBStackAdaptorBTStack);
  v1 = -[CBDaemonServer initWithCBStackAdaptor:]([CBDaemonServer alloc], "initWithCBStackAdaptor:", v0);
  -[CBDaemonServer activate](v1, "activate");
  v2 = objc_opt_new(WPDaemonServer);
  v3 = (void *)qword_100994178;
  qword_100994178 = v2;

  objc_msgSend((id)qword_100994178, "startListening");
  v4 = (id)qword_100994178;
  signal(31, (void (__cdecl *)(int))1);
  v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0x1FuLL, 0, (dispatch_queue_t)&_dispatch_main_q);
  v6 = (void *)qword_10097BB18;
  qword_10097BB18 = (uint64_t)v5;

  v7 = qword_10097BB18;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100098D40;
  handler[3] = &unk_1009172A0;
  v11 = v4;
  v8 = v4;
  dispatch_source_set_event_handler(v7, handler);
  dispatch_resume((dispatch_object_t)qword_10097BB18);

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[ContactTracingDaemonBridge sharedDaemonBridge](ContactTracingDaemonBridge, "sharedDaemonBridge"));
  objc_msgSend(v9, "activate");

}

void sub_100098464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100098490()
{
  NSObject *v0;
  int v1;
  FILE *v2;
  int v3;
  int v4;
  _BYTE v5[8];

  v4 = 0;
  if (sub_100025024(qword_10097BAF0, 1, &v4))
  {
    v0 = (id)qword_1009997E8;
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    {
      v1 = sub_100025024(qword_10097BAF0, 1, &v4);
      sub_1006CE2EC((uint64_t)v5, v1, v0);
    }

    v2 = __stderrp;
    v3 = sub_100025024(qword_10097BAF0, 1, &v4);
    fprintf(v2, "Failed to update Dynamic Store. BTLocalDeviceGetModulePower returned %d", v3);
  }
  else
  {
    sub_100098590(v4);
  }
}

void sub_100098578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100098590(int a1)
{
  void **v2;
  NSObject *v3;
  const char *v4;
  const char *v5;
  CFDictionaryRef v6;
  int v7;
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  _BOOL4 v19;
  void *values;
  void *keys;

  keys = CFSTR("Powered");
  v2 = (void **)&kCFBooleanTrue;
  if (a1 != -1)
    v2 = (void **)&kCFBooleanFalse;
  values = *v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    switch(a1)
    {
      case -1:
        v4 = "On";
        break;
      case -889275714:
        v4 = "Transitioning";
        break;
      case -559038737:
        v4 = "Unknown";
        break;
      default:
        v4 = "Off";
        if (a1 == -1122640211)
          v4 = "Terminated";
        break;
    }
    *(_DWORD *)buf = 136315394;
    v17 = v4;
    v18 = 1024;
    v19 = a1 == -1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Update Dynamic Store with state %s\t value %d", buf, 0x12u);
  }
  switch(a1)
  {
    case -1:
      v5 = "On";
      break;
    case -889275714:
      v5 = "Transitioning";
      break;
    case -559038737:
      v5 = "Unknown";
      break;
    default:
      v5 = "Off";
      if (a1 == -1122640211)
        v5 = "Terminated";
      break;
  }
  fprintf(__stderrp, "Update Dynamic Store with state %s\t value %d", v5, a1 == -1);
  v6 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10097BAF8, CFSTR("com.apple.MobileBluetooth"), v6))
  {
    v7 = SCError();
    v8 = SCErrorString(v7);
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006CE324((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);
    fprintf(__stderrp, "Update Dynamic Store failed with error %s", v8);
  }
  CFRelease(v6);
}

BOOL sub_10009880C(const char *a1)
{
  NSObject *v2;
  const __CFDictionary *v3;
  io_service_t MatchingService;
  io_object_t v5;
  const __CFData *v6;
  _BOOL8 v7;
  const __CFData *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  char __str[8];
  uint64_t v24;
  __int16 v25;
  CFRange v26;

  if (sub_1000972C4())
  {
    v2 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v20 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s: read from IOREG is disabled for debugging\n", buf, 0xCu);
    }
    fprintf(__stderrp, "%s: read from IOREG is disabled for debugging\n");
    return 0;
  }
  v3 = IOServiceNameMatching(a1);
  if (!v3)
    goto LABEL_15;
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v3);
  if (!MatchingService)
  {
    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006CE38C((uint64_t)a1, v10, v11, v12, v13, v14, v15, v16);
    fprintf(__stderrp, "%s: Unable to match bluetooth service in device tree.\n", a1);
LABEL_15:
    v7 = 0;
    goto LABEL_16;
  }
  v5 = MatchingService;
  v6 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IODeviceTree", CFSTR("local-mac-address"), kCFAllocatorDefault, 1u);
  v7 = v6 != 0;
  if (v6)
  {
    v8 = v6;
    *(_QWORD *)__str = 0;
    v24 = 0;
    v25 = 0;
    v26.location = 0;
    v26.length = 6;
    CFDataGetBytes(v6, v26, (UInt8 *)&dword_10097BAE0);
    snprintf(__str, 0x12uLL, "%02x:%02x:%02x:%02x:%02x:%02x", dword_10097BAE0, BYTE1(dword_10097BAE0), BYTE2(dword_10097BAE0), HIBYTE(dword_10097BAE0), word_10097BAE4, HIBYTE(word_10097BAE4));
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v20 = a1;
      v21 = 2080;
      v22 = __str;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s: Got local-mac-address: %s\n", buf, 0x16u);
    }
    fprintf(__stderrp, "%s: Got local-mac-address: %s\n", a1, __str);
    setenv("BT_DEVICE_ADDRESS", __str, 1);
    CFRelease(v8);
  }
  IOObjectRelease(v5);
LABEL_16:
  *(_WORD *)&__str[4] = 0;
  *(_DWORD *)__str = 0;
  if (!(dword_10097BAE0 | (unsigned __int16)word_10097BAE4))
  {
    v17 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v20 = a1;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%s: Not a valid MAC address (all 00s).\n", buf, 0xCu);
    }
    fprintf(__stderrp, "%s: Not a valid MAC address (all 00s).\n");
    return 0;
  }
  return v7;
}

uint64_t sub_100098B18(uint64_t result)
{
  int v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_DWORD *)(result + 32);
  switch(v1)
  {
    case 31:
      v2 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v3 = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "-SIGUSR2 received -- triggering our statedump.", v3, 2u);
      }
      return sub_10042FFE0(qword_10097BAE8);
    case 30:
      return sub_10042FF6C(qword_10097BAE8);
    case 15:
      if (qword_100977B40 != -1)
        dispatch_once(&qword_100977B40, &stru_100918190);
      sub_1004BA6A4((uint64_t)off_100977B38, 1);
      return sub_100435ED0(qword_10097BAF0);
  }
  return result;
}

os_state_data_s *__cdecl sub_100098C0C(id a1, os_state_hints_s *a2)
{
  NSObject *v2;
  uint8_t v4[16];

  if (a2->var2 == 3)
  {
    v2 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "bluetoothd received OS_STATE_API_REQUEST (from sysdiagnose?) -- triggering our statedump.", v4, 2u);
    }
    sub_10042FFE0(qword_10097BAE8);
  }
  return 0;
}

void sub_100098C8C(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  void *v4;
  int v5;

  if (!(a3 | a2))
  {
    v5 = 0;
    if (!sub_100025024(qword_10097BAF0, 1, &v5))
    {
      sub_100098590(v5);
      if (v5 == -1)
      {
        if (qword_10097BAD0)
          return;
        v3 = os_transaction_create("PowerTransaction");
        v4 = (void *)qword_10097BAD0;
      }
      else
      {
        if (v5)
        {
          if (v5 == -1122640211)
            _exit(0);
          return;
        }
        v4 = (void *)qword_10097BAD0;
        if (!qword_10097BAD0)
          return;
        v3 = 0;
      }
      qword_10097BAD0 = v3;

    }
  }
}

void sub_100098D40(uint64_t a1)
{
  id v1;
  id v2;

  v1 = *(id *)(a1 + 32);
  v2 = v1;
  if (v1)
    objc_msgSend(v1, "dumpDaemonState");
  else
    fwrite("Invalid WPDaemonServer", 0x16uLL, 1uLL, __stderrp);

}

void sub_100098D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100098DB0(id a1)
{
  operator new();
}

void sub_100098EC8()
{
  operator delete();
}

void sub_100098EEC(id a1)
{
  operator new();
}

void sub_100098F2C()
{
  operator delete();
}

void sub_100098F50(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_DEFAULT, a4, &a9, 0xCu);
}

BOOL sub_100098F64()
{
  NSObject *v0;

  return os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT);
}

void sub_100098FE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000996D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009988C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100099A94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_BYTE *sub_100099AAC(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _BYTE *result;
  char v19;

  if (*(_QWORD *)(a1 + 40) && *(_BYTE *)(a1 + 72))
  {
    if (qword_100977C30 != -1)
      dispatch_once(&qword_100977C30, &stru_1009182A8);
    v2 = sub_1005FEF50((uint64_t)off_100977C28, *(_QWORD *)(a1 + 40));
    if (v2)
    {
      v3 = (v2 + 310000);
      if (v2 != -310000
        && dword_100977B58 <= 90
        && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
      {
        v4 = CUPrintErrorCode(v3);
        v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
        LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack invalidate]_block_invoke", 90, "### Advertising CA stop failed: %@", v5);

      }
    }
  }
  if (*(_QWORD *)(a1 + 48) && *(_BYTE *)(a1 + 73))
  {
    if (qword_100977C30 != -1)
      dispatch_once(&qword_100977C30, &stru_1009182A8);
    v6 = sub_1005FEF50((uint64_t)off_100977C28, *(_QWORD *)(a1 + 48));
    if (v6)
    {
      v7 = (v6 + 310000);
      if (v6 != -310000
        && dword_100977B58 <= 90
        && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
      {
        v8 = CUPrintErrorCode(v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack invalidate]_block_invoke", 90, "### Advertising NC stop failed: %@", v9);

      }
    }
  }
  if (*(_QWORD *)(a1 + 56) && *(_BYTE *)(a1 + 74))
  {
    if (qword_100977C30 != -1)
      dispatch_once(&qword_100977C30, &stru_1009182A8);
    v10 = sub_1005FEF50((uint64_t)off_100977C28, *(_QWORD *)(a1 + 56));
    if (v10)
    {
      v11 = (v10 + 310000);
      if (v10 != -310000
        && dword_100977B58 <= 90
        && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
      {
        v12 = CUPrintErrorCode(v11);
        v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack invalidate]_block_invoke", 90, "### Advertising NC 1 stop failed: %@", v13);

      }
    }
  }
  if (*(_QWORD *)(a1 + 64) && *(_BYTE *)(a1 + 75))
  {
    if (qword_100977C30 != -1)
      dispatch_once(&qword_100977C30, &stru_1009182A8);
    v14 = sub_1005FEF50((uint64_t)off_100977C28, *(_QWORD *)(a1 + 64));
    if (v14)
    {
      v15 = (v14 + 310000);
      if (v14 != -310000
        && dword_100977B58 <= 90
        && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
      {
        v16 = CUPrintErrorCode(v15);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack invalidate]_block_invoke", 90, "### Advertising NC Object Discovery stop failed: %@", v17);

      }
    }
  }
  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 136), "count");
  if (result)
  {
    v19 = 0;
    sub_100043758(&v19);
    sub_100224440(0);
    sub_10004339C(&v19);
    return sub_100043728(&v19);
  }
  return result;
}

void sub_100099E04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100099E30(unint64_t *a1)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;

  if (a1[4])
  {
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100918268);
    v2 = sub_10000B174(qword_100977B48, a1[4]);
    v3 = (v2 + 310000);
    if (v2)
      v4 = (_DWORD)v3 == 0;
    else
      v4 = 1;
    if (!v4
      && dword_100977B58 <= 90
      && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
    {
      v5 = CUPrintErrorCode(v3);
      v15 = (id)objc_claimAutoreleasedReturnValue(v5);
      LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack invalidate]_block_invoke_2", 90, "### Detach session CA failed: %@", v15);

    }
  }
  if (a1[5])
  {
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100918268);
    v6 = sub_10000B174(qword_100977B48, a1[5]);
    if (v6)
    {
      v7 = (v6 + 310000);
      if (v6 != -310000
        && dword_100977B58 <= 90
        && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
      {
        v8 = CUPrintErrorCode(v7);
        v16 = (id)objc_claimAutoreleasedReturnValue(v8);
        LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack invalidate]_block_invoke_2", 90, "### Detach session NC failed: %@", v16);

      }
    }
  }
  if (a1[6])
  {
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100918268);
    v9 = sub_10000B174(qword_100977B48, a1[6]);
    if (v9)
    {
      v10 = (v9 + 310000);
      if (v9 != -310000
        && dword_100977B58 <= 90
        && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
      {
        v11 = CUPrintErrorCode(v10);
        v17 = (id)objc_claimAutoreleasedReturnValue(v11);
        LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack invalidate]_block_invoke_2", 90, "### Detach session NC 1 failed: %@", v17);

      }
    }
  }
  if (a1[7])
  {
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100918268);
    v12 = sub_10000B174(qword_100977B48, a1[7]);
    if (v12)
    {
      v13 = (v12 + 310000);
      if (v12 != -310000
        && dword_100977B58 <= 90
        && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
      {
        v14 = CUPrintErrorCode(v13);
        v18 = (id)objc_claimAutoreleasedReturnValue(v14);
        LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack invalidate]_block_invoke_2", 90, "### Detach session NC ObjectDiscovery failed: %@", v18);

      }
    }
  }
}

void sub_10009A138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_10009A570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,unsigned int *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;

  if (a29 < 0)
    operator delete(__p);
  if (a21)
    sub_100056AAC(a21);

  _Unwind_Resume(a1);
}

void sub_10009AC08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10009AD14(uint64_t a1)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  id v6;

  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_1009182A8);
  v2 = sub_1005FEF50((uint64_t)off_100977C28, *(_QWORD *)(a1 + 32));
  v3 = (v2 + 310000);
  if (v2)
    v4 = (_DWORD)v3 == 0;
  else
    v4 = 1;
  if (!v4
    && dword_100977B58 <= 90
    && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
  {
    v5 = CUPrintErrorCode(v3);
    v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack _updateConnectable]_block_invoke", 90, "### Advertising stop failed: %@", v6);

  }
}

void sub_10009ADF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10009AE08(uint64_t a1)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  id v6;

  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_1009182A8);
  v2 = sub_1005FC670((uint64_t)off_100977C28, *(_QWORD *)(a1 + 32), a1 + 40, 1);
  v3 = (v2 + 310000);
  if (v2)
    v4 = (_DWORD)v3 == 0;
  else
    v4 = 1;
  if (!v4
    && dword_100977B58 <= 90
    && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
  {
    v5 = CUPrintErrorCode(v3);
    v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack _updateConnectable]_block_invoke_2", 90, "### Advertising start failed: %@", v6);

  }
}

void sub_10009AEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *sub_10009AF04(_QWORD *a1)
{
  unsigned int *v2;

  *a1 = &off_100918298;
  v2 = (unsigned int *)a1[1];
  if (v2)
    sub_100056AAC(v2);
  return a1;
}

void sub_10009B474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10009B554(uint64_t a1)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  id v6;

  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_1009182A8);
  v2 = sub_1005FEF50((uint64_t)off_100977C28, *(_QWORD *)(a1 + 32));
  v3 = (v2 + 310000);
  if (v2)
    v4 = (_DWORD)v3 == 0;
  else
    v4 = 1;
  if (!v4
    && dword_100977B58 <= 90
    && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
  {
    v5 = CUPrintErrorCode(v3);
    v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack _updateNonConnectable]_block_invoke", 90, "### Advertising NC stop failed: %@", v6);

  }
}

void sub_10009B634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10009B648(uint64_t a1)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  id v6;

  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_1009182A8);
  v2 = sub_1005FC670((uint64_t)off_100977C28, *(_QWORD *)(a1 + 32), a1 + 40, 1);
  v3 = (v2 + 310000);
  if (v2)
    v4 = (_DWORD)v3 == 0;
  else
    v4 = 1;
  if (!v4
    && dword_100977B58 <= 90
    && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
  {
    v5 = CUPrintErrorCode(v3);
    v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack _updateNonConnectable]_block_invoke_2", 90, "### Advertising NC start failed: %@", v6);

  }
}

void sub_10009B730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10009BAB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10009BB40(uint64_t a1)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  id v6;

  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_1009182A8);
  v2 = sub_1005FEF50((uint64_t)off_100977C28, *(_QWORD *)(a1 + 32));
  v3 = (v2 + 310000);
  if (v2)
    v4 = (_DWORD)v3 == 0;
  else
    v4 = 1;
  if (!v4
    && dword_100977B58 <= 90
    && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
  {
    v5 = CUPrintErrorCode(v3);
    v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack _updateNonConnectableContact]_block_invoke", 90, "### Advertising NC 1 stop failed: %@", v6);

  }
}

void sub_10009BC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10009BC34(uint64_t a1)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  id v6;

  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_1009182A8);
  v2 = sub_1005FC670((uint64_t)off_100977C28, *(_QWORD *)(a1 + 32), a1 + 40, 1);
  v3 = (v2 + 310000);
  if (v2)
    v4 = (_DWORD)v3 == 0;
  else
    v4 = 1;
  if (!v4
    && dword_100977B58 <= 90
    && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
  {
    v5 = CUPrintErrorCode(v3);
    v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack _updateNonConnectableContact]_block_invoke_2", 90, "### Advertising NC 1 start failed: %@", v6);

  }
}

void sub_10009BD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10009C0A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10009C12C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  id v6;

  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_1009182A8);
  v2 = sub_1005FEF50((uint64_t)off_100977C28, *(_QWORD *)(a1 + 32));
  v3 = (v2 + 310000);
  if (v2)
    v4 = (_DWORD)v3 == 0;
  else
    v4 = 1;
  if (!v4
    && dword_100977B58 <= 90
    && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
  {
    v5 = CUPrintErrorCode(v3);
    v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack _updateNonConnectableObjectDiscovery]_block_invoke", 90, "### Advertising NC Object Discovery stop failed: %@", v6);

  }
}

void sub_10009C20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10009C220(uint64_t a1)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  id v6;

  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_1009182A8);
  v2 = sub_1005FC670((uint64_t)off_100977C28, *(_QWORD *)(a1 + 32), a1 + 40, 1);
  v3 = (v2 + 310000);
  if (v2)
    v4 = (_DWORD)v3 == 0;
  else
    v4 = 1;
  if (!v4
    && dword_100977B58 <= 90
    && (dword_100977B58 != -1 || _LogCategory_Initialize(&dword_100977B58, 90)))
  {
    v5 = CUPrintErrorCode(v3);
    v6 = (id)objc_claimAutoreleasedReturnValue(v5);
    LogPrintF_safe(&dword_100977B58, "-[CBStackBLEAdvertiserBTStack _updateNonConnectableObjectDiscovery]_block_invoke_2", 90, "### Advertising NC Object Discovery start failed: %@", v6);

  }
}

void sub_10009C308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_OWORD *sub_10009C400(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  int v9;
  uint64_t v11;

  v11 = 0;
  v6 = (void **)sub_10009C49C((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v9 = *((_DWORD *)*a4 + 4);
    v7[2] = **a4;
    *((_DWORD *)v7 + 12) = v9;
    *((_QWORD *)v7 + 7) = &off_100918258;
    *((_QWORD *)v7 + 8) = 0;
    sub_100004078(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_10009C49C(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  unsigned __int8 *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (unsigned __int8 *)(v4 + 32);
        if (!sub_100068844(a3, (unsigned __int8 *)(v4 + 32)))
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_100068844(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_QWORD *sub_10009C52C(_QWORD *a1)
{
  unsigned int *v2;

  *a1 = &off_100918258;
  v2 = (unsigned int *)a1[1];
  if (v2)
    sub_100056AAC(v2);
  return a1;
}

void sub_10009C564(_QWORD *a1)
{
  unsigned int *v1;

  *a1 = &off_100918258;
  v1 = (unsigned int *)a1[1];
  if (v1)
    sub_100056AAC(v1);
  operator delete();
}

void sub_10009C5AC(id a1)
{
  operator new();
}

void sub_10009C5EC()
{
  operator delete();
}

void sub_10009C610(_QWORD *a1)
{
  unsigned int *v1;

  *a1 = &off_100918298;
  v1 = (unsigned int *)a1[1];
  if (v1)
    sub_100056AAC(v1);
  operator delete();
}

void sub_10009C658(id a1)
{
  operator new();
}

void sub_10009C698()
{
  operator delete();
}

void sub_10009C704(id a1)
{
  CBMetricsDaemon *v1;
  void *v2;

  v1 = objc_alloc_init(CBMetricsDaemon);
  v2 = (void *)qword_10097BB20;
  qword_10097BB20 = (uint64_t)v1;

}

void sub_10009C850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009CC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

id sub_10009CDAC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_reportEvents");
}

void sub_10009CDB4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  xpc_object_t v4;
  _QWORD handler[5];

  if (dword_100977C38 <= 30 && (dword_100977C38 != -1 || _LogCategory_Initialize(&dword_100977C38, 30)))
  {
    v2 = CUPrintDuration64(XPC_ACTIVITY_INTERVAL_15_MIN);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    LogPrintF_safe(&dword_100977C38, "-[CBMetricsDaemon _startIfNeeded]_block_invoke", 30, "XPC activity register: ID '%s', interval %@", "com.apple.bluetooth.CBMetrics", v3);

  }
  v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v4, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_BOOL(v4, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_int64(v4, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_15_MIN);
  xpc_dictionary_set_string(v4, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10009CF34;
  handler[3] = &unk_1009182F0;
  handler[4] = *(_QWORD *)(a1 + 32);
  xpc_activity_register("com.apple.bluetooth.CBMetrics", v4, handler);

}

void sub_10009CF1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009CF34(uint64_t a1, void *a2)
{
  _xpc_activity_s *activity;

  activity = a2;
  if (xpc_activity_should_defer(activity))
  {
    if (!xpc_activity_set_state(activity, 3)
      && dword_100977C38 <= 90
      && (dword_100977C38 != -1 || _LogCategory_Initialize(&dword_100977C38, 90)))
    {
      LogPrintF_safe(&dword_100977C38, "-[CBMetricsDaemon _startIfNeeded]_block_invoke_2", 90, "XPC activity defer failed");
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_reportEvents");
  }

}

void sub_10009CFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_10009D058(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_reportAuthTagType:authTagStatus:integrityTagStatus:resolutionWindow:", *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), *(unsigned __int8 *)(a1 + 42), *(char *)(a1 + 43));
}

void sub_10009D2AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_10009D2C8(_QWORD *result)
{
  void *v1;
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;

  v1 = (void *)result[4];
  if (v1 == *(void **)(result[5] + 64))
  {
    v2 = result;
    if (v1)
    {
      v3 = v1;
      dispatch_source_cancel(v3);
      v4 = v2[5];
      v5 = *(void **)(v4 + 64);
      *(_QWORD *)(v4 + 64) = 0;

    }
    return objc_msgSend((id)v2[5], "_reportAggressiveScanMetricEvents");
  }
  return result;
}

void sub_10009D4A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009D4C8(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *i;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id obj;
  uint64_t v18;
  unint64_t v20;
  id v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[8];
  _QWORD v28[8];
  _BYTE v29[128];

  v21 = a2;
  v16 = a3;
  v20 = +[CBDaemonXPCConnection indexForCBApprovedAppID:](CBDaemonXPCConnection, "indexForCBApprovedAppID:", v21);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  obj = v16;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
  if (v4)
  {
    v18 = *(_QWORD *)v24;
    do
    {
      v22 = v4;
      for (i = 0; i != v22; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v18)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        v28[0] = v21;
        v27[0] = CFSTR("apID");
        v27[1] = CFSTR("apIX");
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v20));
        v28[1] = v7;
        v27[2] = CFSTR("dsFl");
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v6, "discoveryFlags")));
        v28[2] = v8;
        v27[3] = CFSTR("dsTy");
        v9 = CBDiscoveryTypesEnumToString(objc_msgSend(v6, "discoveryTypesPtr"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        v28[3] = v10;
        v27[4] = CFSTR("scnR");
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v6, "scanRateScreenOn")));
        v28[4] = v11;
        v27[5] = CFSTR("sonC");
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v6, "scanScreenOnCount")));
        v28[5] = v12;
        v27[6] = CFSTR("srsO");
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v6, "scanRateScreenOff")));
        v28[6] = v13;
        v27[7] = CFSTR("sofC");
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v6, "scanScreenOffCount")));
        v28[7] = v14;
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v28, v27, 8));

        objc_msgSend(*(id *)(a1 + 32), "addObject:", v15);
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v29, 16);
    }
    while (v4);
  }

}

void sub_10009D7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

id sub_10009D8BC(uint64_t a1)
{
  id result;
  uint64_t v3;

  result = objc_msgSend(*(id *)(a1 + 32), "nearbyActionNoWakeType");
  if ((_DWORD)result)
  {
    v3 = sub_100065478();
    return (id)(*(uint64_t (**)(uint64_t, id))(*(_QWORD *)v3 + 408))(v3, objc_msgSend(*(id *)(a1 + 32), "nearbyActionNoWakeType"));
  }
  return result;
}

id sub_10009D98C(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "isEqual:", CFSTR("RSSILevelNoChange"));
  v3 = 80;
  if (v2)
    v3 = 72;
  ++*(_QWORD *)(*(_QWORD *)(a1 + 40) + v3);
  return objc_msgSend(*(id *)(a1 + 40), "_setupMetricExportTimer");
}

void sub_10009DB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

_QWORD *sub_10009DB18(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v2 == result[11])
    return objc_msgSend(result, "_whbMetricExportTimerFired");
  return result;
}

void sub_10009DCB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10009DDD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10009DDF0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100065478();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 240))(v2, *(_QWORD *)(a1 + 32));
}

void sub_10009E054(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10009E0A0(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id obj;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v6 + 40);
  v7 = CUDescriptionWithLevel(a3, 30);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  NSAppendPrintF_safe(&obj, "%@\n", v8);
  objc_storeStrong((id *)(v6 + 40), obj);

  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (*(int *)(a1 + 48) >= 11 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) >= 0x32uLL)
    *a4 = 1;
}

void sub_10009E154(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009E64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_10009F88C((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_10009E6BC(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5)
{
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  _QWORD block[6];
  unsigned int v15;
  int v16;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BB38);
  v9 = (void *)qword_10097BB30;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", a5));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BB38);
  if (v11)
  {
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "dispatchQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10009F7B4;
    block[3] = &unk_1009183A0;
    block[4] = v11;
    block[5] = a3;
    v15 = a2;
    v16 = a4;
    dispatch_async(v12, block);

  }
  else if (dword_100977CA8 <= 90
         && (dword_100977CA8 != -1 || _LogCategory_Initialize(&dword_100977CA8, 90)))
  {
    if (a2 > 3)
      v13 = "?";
    else
      v13 = off_100918458[a2];
    LogPrintF_safe(&dword_100977CA8, "void _statusCallback(BTDiscoveryAgent _Nonnull, BTDiscoveryStatus, BTDevice _Nonnull, BTResult, void * _Nonnull)", 90, "### Ignoring status callback after remove: %s", v13);
  }

}

void sub_10009E81C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009E838(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5)
{
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  const char *v13;
  _QWORD block[6];
  unsigned int v15;
  int v16;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BB38);
  v9 = (void *)qword_10097BB30;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", a5));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v10));

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BB38);
  if (v11)
  {
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "dispatchQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10009F7A4;
    block[3] = &unk_1009183A0;
    block[4] = v11;
    block[5] = a3;
    v15 = a2;
    v16 = a4;
    dispatch_async(v12, block);

  }
  else if (dword_100977CA8 <= 90
         && (dword_100977CA8 != -1 || _LogCategory_Initialize(&dword_100977CA8, 90)))
  {
    if (a2 > 2)
      v13 = "?";
    else
      v13 = off_100918440[a2];
    LogPrintF_safe(&dword_100977CA8, "void _discoveryCallback(BTDiscoveryAgent _Nonnull, BTDiscoveryEvent, BTDevice _Nonnull, BTDeviceAttributes, void * _Nonnull)", 90, "### Ignoring discovery callback after remove: %s", v13);
  }

}

void sub_10009E998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009EB74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10009EC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10009EEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_10009F028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_10009F2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  if (v13)
    sub_1006CE3F4((uint64_t)&a13);
  _Unwind_Resume(exception_object);
}

void sub_10009F6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10009F88C((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10009F7A4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_discoveryEvent:device:attributes:", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 52));
}

id sub_10009F7B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_statusEvent:device:result:", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 52));
}

void sub_10009F7C4(id a1)
{
  operator new();
}

void sub_10009F804()
{
  operator delete();
}

void sub_10009F828(id a1)
{
  operator new();
}

void sub_10009F868()
{
  operator delete();
}

uint64_t sub_10009F88C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_10009F8E4(id a1)
{
  operator new();
}

void sub_10009F924()
{
  operator delete();
}

void sub_10009F948(id a1)
{
  operator new();
}

void sub_10009F988()
{
  operator delete();
}

void sub_10009FC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10009FC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id obj;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v3 + 40);
  NSAppendPrintF_safe(&obj, "%@\n", a3);
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_10009FC98(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  id obj;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v6 + 40);
  NSAppendPrintF_safe(&obj, "%@\n", a3);
  objc_storeStrong((id *)(v6 + 40), obj);
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (*(int *)(a1 + 48) >= 11 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) >= 0x32uLL)
    *a4 = 1;
}

_QWORD *sub_1000A00C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v4 == result[11])
    return objc_msgSend(result, "_receivedWHBUpdateEvent:options:", a2, a3);
  return result;
}

void sub_1000A00E4(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24))
  {
    v3 = a2;
    v4 = objc_alloc_init((Class)CBDevice);
    objc_msgSend(v4, "updateWithCBDevice:", v3);

    objc_msgSend(*(id *)(a1 + 40), "deviceFound:remoteController:", v4, 0);
  }
}

_QWORD *sub_1000A0170(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[3])
    return objc_msgSend(result, "deviceLost:remoteController:", a2, 0);
  return result;
}

void sub_1000A0190(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  id v11;

  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 == *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24))
  {
    if (v3)
    {
      v11 = v3;
      if (dword_100977D88 <= 30
        && (dword_100977D88 != -1 || _LogCategory_Initialize(&dword_100977D88, 30)))
      {
        v6 = CUPrintNSError(v11);
        v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
        LogPrintF_safe(&dword_100977D88, "-[CBWHBDiscoveryDaemon activate]_block_invoke_4", 30, "### Local discovery activate failed: %@", v7);

      }
      objc_msgSend(*(id *)(a1 + 32), "invalidate");
      v8 = *(_QWORD *)(a1 + 40);
      v9 = *(void **)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;

LABEL_11:
      v4 = v11;
      goto LABEL_12;
    }
    if (dword_100977D88 <= 30)
    {
      v11 = 0;
      if (dword_100977D88 == -1)
      {
        v10 = _LogCategory_Initialize(&dword_100977D88, 30);
        v4 = 0;
        if (!v10)
          goto LABEL_12;
        v5 = *(_QWORD *)(a1 + 32);
      }
      LogPrintF_safe(&dword_100977D88, "-[CBWHBDiscoveryDaemon activate]_block_invoke_4", 30, "Local discovery activated: %@", v5);
      goto LABEL_11;
    }
  }
LABEL_12:

}

void sub_1000A0394(id a1, NSString *a2, CBWHBRemoteController *a3, BOOL *a4)
{
  -[CBWHBRemoteController invalidate](a3, "invalidate");
}

void sub_1000A08AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000A08CC(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "setDiscoveryFlags:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_1000A08E0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  CBWHBRemoteController *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "objectForKeyedSubscript:", v12));

  if (!v6)
  {
    v7 = objc_alloc_init(CBWHBRemoteController);
    -[CBWHBRemoteController setControllerID:](v7, "setControllerID:", v12);
    -[CBWHBRemoteController setDaemonServer:](v7, "setDaemonServer:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
    -[CBWHBRemoteController setDiscoveryFlags:](v7, "setDiscoveryFlags:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
    -[CBWHBRemoteController setDispatchQueue:](v7, "setDispatchQueue:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80));
    -[CBWHBRemoteController setRemoteDevice:](v7, "setRemoteDevice:", v5);
    -[CBWHBRemoteController setWhbDaemon:](v7, "setWhbDaemon:", *(_QWORD *)(a1 + 32));
    -[CBWHBRemoteController activate](v7, "activate");
    v8 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
    if (!v8)
    {
      v9 = objc_alloc_init((Class)NSMutableDictionary);
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(void **)(v10 + 32);
      *(_QWORD *)(v10 + 32) = v9;

      v8 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
    }
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, v12);
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

  }
}

void sub_1000A0EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000A0F20(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  id v9;

  v9 = a3;
  v5 = objc_msgSend(v9, "lastSeenTicks");
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(_QWORD *)(v6 + 40);
  v7 = (id *)(v6 + 40);
  if (!v8 || (unint64_t)v5 >= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    objc_storeStrong(v7, a3);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v5;
  }

}

id sub_1000A15D4(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "idsDeviceIdentifier"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "name"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "roomName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "model"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "sourceVersion"));

  v7 = NSPrintF_safe("ID %@, Name '%@', Room '%@', Model %@, Version %@", v2, v3, v4, v5, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  return v8;
}

_QWORD *sub_1000A1918(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = result[5];
  if (result[4] == *(_QWORD *)(v2 + 16))
    return objc_msgSend(*(id *)(v2 + 64), "deviceFound:remoteController:", a2);
  return result;
}

_QWORD *sub_1000A1938(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = result[5];
  if (result[4] == *(_QWORD *)(v2 + 16))
    return objc_msgSend(*(id *)(v2 + 64), "deviceLost:remoteController:", a2);
  return result;
}

void sub_1000A1958(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  uint64_t v13;
  void (**v14)(_QWORD, _QWORD);
  uint64_t v15;
  void *v16;
  unint64_t v17;
  dispatch_time_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  _QWORD block[5];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16))
    goto LABEL_2;
  if (!v3)
  {
    if (dword_100977D88 <= 40)
    {
      if (dword_100977D88 == -1)
      {
        if (!_LogCategory_Initialize(&dword_100977D88, 40))
          goto LABEL_24;
        v5 = *(_QWORD *)(a1 + 32);
      }
      LogPrintF_safe(&dword_100977D88, "-[CBWHBRemoteController activate]_block_invoke_3", 40, "Remote controller activated: %@", v5);
    }
LABEL_24:
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 72) = 0;
    goto LABEL_2;
  }
  if (dword_100977D88 <= 40 && (dword_100977D88 != -1 || _LogCategory_Initialize(&dword_100977D88, 40)))
  {
    v6 = CUPrintNSError(v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    LogPrintF_safe(&dword_100977D88, "-[CBWHBRemoteController activate]_block_invoke_3", 40, "### Remote controller activate failed: %@", v7);

  }
  ++*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72);
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "discoveredDevices"));
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v11)
          objc_enumerationMutation(v8);
        v13 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v14 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceLostHandler"));
        v14[2](v14, v13);

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v10);
  }

  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(void **)(v15 + 16);
  *(_QWORD *)(v15 + 16) = 0;

  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 72);
  if (v17 > 5)
  {
    if (dword_100977D88 <= 40
      && (dword_100977D88 != -1 || _LogCategory_Initialize(&dword_100977D88, 40)))
    {
      v21 = CUPrintNSError(v4);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      LogPrintF_safe(&dword_100977D88, "-[CBWHBRemoteController activate]_block_invoke_3", 40, "### Remote controller activate failed completely: %@", v22);

    }
  }
  else
  {
    v18 = dispatch_time(0, 5000000000 * v17);
    v19 = *(_QWORD *)(a1 + 40);
    v20 = *(NSObject **)(v19 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000A1C54;
    block[3] = &unk_100917080;
    block[4] = v19;
    dispatch_after(v18, v20, block);
  }
LABEL_2:

}

_QWORD *sub_1000A1C54(uint64_t a1)
{
  _QWORD *result;
  int v3;

  result = *(_QWORD **)(a1 + 32);
  if (!*((_BYTE *)result + 8))
  {
    if (dword_100977D88 <= 40)
    {
      if (dword_100977D88 != -1
        || (v3 = _LogCategory_Initialize(&dword_100977D88, 40), result = *(_QWORD **)(a1 + 32), v3))
      {
        LogPrintF_safe(&dword_100977D88, "-[CBWHBRemoteController activate]_block_invoke_4", 40, "### Remote controller activate retry attempt %llu:", result[9]);
        result = *(_QWORD **)(a1 + 32);
      }
    }
    return objc_msgSend(result, "activate");
  }
  return result;
}

uint64_t sub_1000A1EA4(uint64_t result)
{
  uint64_t v1;

  v1 = 0;
  *(_QWORD *)(result + 160) = "kLatencyStateMax";
  *(_OWORD *)(result + 112) = *(_OWORD *)off_1009185E8;
  *(_OWORD *)(result + 128) = *(_OWORD *)off_1009185F8;
  *(_OWORD *)(result + 144) = *(_OWORD *)off_100918608;
  *(_OWORD *)(result + 48) = *(_OWORD *)off_1009185A8;
  *(_OWORD *)(result + 64) = *(_OWORD *)off_1009185B8;
  *(_OWORD *)(result + 80) = *(_OWORD *)off_1009185C8;
  *(_OWORD *)(result + 96) = *(_OWORD *)off_1009185D8;
  *(_OWORD *)(result + 200) = *(_OWORD *)off_100918640;
  *(_OWORD *)(result + 184) = *(_OWORD *)off_100918630;
  *(_OWORD *)(result + 168) = *(_OWORD *)off_100918620;
  *(_QWORD *)(result + 264) = "kTriggerMax";
  *(_OWORD *)(result + 248) = *(_OWORD *)off_100918670;
  *(_OWORD *)(result + 232) = *(_OWORD *)off_100918660;
  *(_OWORD *)(result + 216) = *(_OWORD *)off_100918650;
  *(_DWORD *)(result + 5) = 0;
  *(_BYTE *)(result + 4) = 0;
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 12) = 100;
  *(_WORD *)(result + 16) = 150;
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 9) = 0;
  do
  {
    *(_WORD *)(result + v1 + 24) = -25444;
    v1 += 6;
  }
  while (v1 != 18);
  return result;
}

void sub_1000A1F54(unint64_t a1, unsigned int a2)
{
  uint64_t v4;

  *(_WORD *)(a1 + 7) = 0;
  *(_BYTE *)(a1 + 5) = 0;
  *(_BYTE *)(a1 + 3) = 0;
  *(_BYTE *)(a1 + 9) = 0;
  if (!*(_BYTE *)a1)
  {
    v4 = sub_100038E50();
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v4 + 152))(v4, a1);
  }
  sub_1000A1FAC(a1, 0, a2);
}

void sub_1000A1FAC(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _BYTE *v11;
  char **v12;
  char *v13;
  unsigned int v14;
  BOOL v15;
  char **v16;
  char *v17;
  _BOOL8 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  const char *v32;
  NSObject *v33;
  uint32_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  NSObject *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  NSObject *v55;
  _BOOL8 v56;
  unint64_t v57;
  uint8_t buf[8];
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  _BOOL4 v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;

  v4 = a2;
  v5 = (unsigned __int8 *)a1;
  v57 = a2;
  if (!a2)
  {
    a1 = sub_1000A2E04(a1, a3);
    v4 = a1;
    v57 = a1;
    if (!a1)
      goto LABEL_39;
  }
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v6 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
  if (!v6)
    goto LABEL_16;
  v7 = (char *)off_100977A90 + 192;
  do
  {
    v8 = v6[4];
    v9 = v8 >= v4;
    if (v8 >= v4)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = (char *)v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == (char *)off_100977A90 + 192 || v4 < *((_QWORD *)v7 + 4))
LABEL_16:
    v7 = (char *)off_100977A90 + 192;
  if (v7 == (char *)off_100977A90 + 192)
  {
LABEL_39:
    sub_1000A61B0(v5, v4, a3);
    goto LABEL_40;
  }
  v11 = (_BYTE *)sub_1000A47E4(a1, v4);
  if (*v11)
  {
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100918710);
    v12 = (char **)*((_QWORD *)off_100977A90 + 138);
    if (!v12)
      goto LABEL_32;
    v13 = (char *)off_100977A90 + 1104;
    do
    {
      v14 = *((unsigned __int16 *)v12 + 16);
      v15 = v14 >= a3;
      if (v14 >= a3)
        v16 = v12;
      else
        v16 = v12 + 1;
      if (v15)
        v13 = (char *)v12;
      v12 = (char **)*v16;
    }
    while (*v16);
    if (v13 == (char *)off_100977A90 + 1104 || *((unsigned __int16 *)v13 + 16) > a3)
LABEL_32:
      v13 = (char *)off_100977A90 + 1104;
    v17 = (char *)off_100977A90;
    if (*(_BYTE *)(sub_1000A47E4((uint64_t)v11, v4) + 1))
      goto LABEL_37;
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100918710);
    v18 = sub_10051F674((uint64_t)off_100977A90);
    if (v18)
    {
LABEL_37:
      v19 = (uint64_t)v5;
      v20 = 1000;
LABEL_38:
      sub_1000A5DF8(v19, v20, a3);
      return;
    }
    v36 = sub_1000A5F38(v18, a3);
    if ((_DWORD)v36)
    {
      v20 = v36;
      v19 = (uint64_t)v5;
      goto LABEL_38;
    }
    v37 = v17 + 1104;
    if (v13 != v37)
    {
      if (*(_DWORD *)(sub_1000A47E4(v36, v4) + 20) != 6)
      {
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_100918710);
        *(_QWORD *)buf = &v57;
        if (*(_DWORD *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v57, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]
                       + 76) == 2)
        {
          if (qword_100977E00 == -1)
            goto LABEL_54;
          goto LABEL_119;
        }
        goto LABEL_103;
      }
LABEL_40:
      v21 = qword_1009997E0;
      if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        return;
      v22 = v5[1];
      v23 = v5[3];
      v24 = v5[5];
      v25 = v5[2];
      v26 = v5[8];
      v27 = v5[7];
      v28 = *v5;
      v29 = v5[6];
      v30 = v5[9];
      v31 = v5[4];
      *(_DWORD *)buf = 67111424;
      *(_DWORD *)&buf[4] = v22;
      v59 = 1024;
      v60 = v23;
      v61 = 1024;
      v62 = v24;
      v63 = 1024;
      v64 = v25;
      v65 = 1024;
      v66 = v26;
      v67 = 1024;
      v68 = v27;
      v69 = 1024;
      v70 = v28;
      v71 = 1024;
      v72 = v29;
      v73 = 1024;
      v74 = v30;
      v75 = 1024;
      v76 = v31;
      v32 = "Dynamic Latency Trigger fKeyboardOn =%d, fVoiceOverOn=%d, fGameModeOn=%d, fGarageBandOn=%d, fSpatialVideoOn="
            "%d, fSpatialMusicOn=%d, fScreenOn =%d, fExpanseOn =%d, fAudioInputAggregateOn=%d, fConsoleGameModeOn=%d";
      v33 = v21;
      v34 = 62;
      goto LABEL_44;
    }
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100918710);
    *(_QWORD *)buf = &v57;
    if (**(unsigned __int8 **)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v57, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]+ 48) == 240)goto LABEL_63;
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100918710);
    *(_QWORD *)buf = &v57;
    v39 = sub_10002252C((uint64_t **)off_100977A90 + 23, &v57, (uint64_t)&unk_100738230, (uint64_t **)buf);
    if (**(unsigned __int8 **)(v39[5] + 48) == 241)
    {
LABEL_63:
      sub_1000A6038((uint64_t)v5, v57, a3);
      goto LABEL_40;
    }
    if (*v5
      || *(_DWORD *)(sub_1000A47E4((uint64_t)v39, v57) + 20) == 7
      || (v40 = sub_1000A4C40(v5, 0), (v40 & 1) != 0)
      || v5[8]
      || v5[7]
      || v5[6]
      || v5[9]
      || v5[4]
      || v5[5])
    {
      v41 = sub_10003BE44();
      v42 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 792))(v41, 5);
      if ((v42 & 1) == 0 && !v5[1] && !v5[3] && !v5[5] && !v5[2] && !v5[8] && !v5[7] && !v5[4]
        || !*v5
        || v5[6]
        || v5[9]
        || (v42 = sub_1000A6104(v42, v57), (v42 & 1) != 0))
      {
        if ((v5[1] || v5[3] || v5[5] || v5[2] || v5[8] || v5[7] || v5[4] || !*v5) && !v5[6] && !v5[9]
          || *(_DWORD *)(sub_1000A47E4(v42, v57) + 20) == 6)
        {
          goto LABEL_40;
        }
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_100918710);
        *(_QWORD *)buf = &v57;
        if (*(_DWORD *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v57, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]
                       + 76) != 2)
          goto LABEL_40;
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_100918710);
        *(_QWORD *)buf = &v57;
        if (*(_DWORD *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v57, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]
                       + 76) == 2)
        {
          if (qword_100977E00 == -1)
          {
LABEL_54:
            if (sub_1003E8A04(qword_100977DF8, a3) < 8)
            {
LABEL_55:
              v38 = 150;
LABEL_56:
              sub_1000A5DF8((uint64_t)v5, v38, a3);
              goto LABEL_40;
            }
            goto LABEL_103;
          }
LABEL_119:
          dispatch_once(&qword_100977E00, &stru_1009186F0);
          goto LABEL_54;
        }
LABEL_103:
        v43 = 6;
        goto LABEL_104;
      }
      if (*(_DWORD *)(sub_1000A47E4(v42, v57) + 20) == 6)
      {
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_100918710);
        *(_QWORD *)buf = &v57;
        if (*(_DWORD *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v57, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]
                       + 76) == 2)
        {
          if (qword_100977E00 != -1)
            dispatch_once(&qword_100977E00, &stru_1009186F0);
          if (sub_1003E8A04(qword_100977DF8, a3) < 8)
            goto LABEL_55;
        }
        v55 = qword_1009997E0;
        v56 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
        if (v56)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Adaptive Latency start with valid link", buf, 2u);
        }
        *(_WORD *)(sub_1000A47E4(v56, v57) + 44) = -1;
        *((_WORD *)v5 + 8) = 60;
        v43 = 1;
LABEL_104:
        v44 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          v45 = v5[1];
          v46 = v5[3];
          v47 = v5[5];
          v48 = v5[2];
          v49 = v5[8];
          v50 = v5[7];
          v51 = *v5;
          v52 = v5[6];
          v53 = v5[9];
          v54 = v5[4];
          *(_DWORD *)buf = 67111680;
          *(_DWORD *)&buf[4] = v45;
          v59 = 1024;
          v60 = v46;
          v61 = 1024;
          v62 = v47;
          v63 = 1024;
          v64 = v48;
          v65 = 1024;
          v66 = v49;
          v67 = 1024;
          v68 = v50;
          v69 = 1024;
          v70 = v13 != v37;
          v71 = 1024;
          v72 = v51;
          v73 = 1024;
          v74 = v52;
          v75 = 1024;
          v76 = v53;
          v77 = 1024;
          v78 = v54;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Dynamic Latency Trigger fKeyboardOn =%d, fVoiceOverOn=%d, fGameModeOn=%d, fGarageBandOn=%d, fSpatialVideoOn=%d, fSpatialMusicOn=%d, aggregated = %d, fScreenOn =%d, fExpanseOn =%d, fAudioInputAggregateOn =%d, fConsoleGameModeOn=%d", buf, 0x44u);
        }
        sub_1000A5AE0((uint64_t)v5, a3, v43);
        goto LABEL_40;
      }
    }
    else if (*(_DWORD *)(sub_1000A47E4(v40, v57) + 20) == 6)
    {
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100918710);
      *(_QWORD *)buf = &v57;
      if (*(_DWORD *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v57, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]
                     + 76) == 2)
      {
        if (qword_100977E00 != -1)
          dispatch_once(&qword_100977E00, &stru_1009186F0);
        if (sub_1003E8A04(qword_100977DF8, a3) < 8)
          goto LABEL_55;
      }
      v43 = 7;
      goto LABEL_104;
    }
    sub_1000A5AE0((uint64_t)v5, a3, 6);
    v38 = 2000;
    goto LABEL_56;
  }
  v35 = qword_1009997E0;
  if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    return;
  *(_WORD *)buf = 0;
  v32 = "Dynamic Latency defaults writes enabled don't allow screen off dynamic latency transition.";
  v33 = v35;
  v34 = 2;
LABEL_44:
  _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, v32, buf, v34);
}

void sub_1000A297C(_BYTE *a1, unsigned int a2, int a3)
{
  char v6;
  NSObject *v7;
  _BOOL4 v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint8_t buf[16];
  uint64_t v23;

  v6 = sub_1000A2D24((uint64_t)a1, a2);
  v7 = qword_1009997E0;
  v8 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
  if ((v6 & 1) != 0)
  {
    if (v8)
    {
      v9 = a1[7];
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Adaptive Latency a2dpSpatialMusicStateChanged:%d, %d", buf, 0xEu);
    }
    if (a1[7] != a3)
    {
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100918710);
      sub_10051AB38(off_100977A90, a3);
      a1[7] = a3;
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100918710);
      v10 = sub_100526DD8((uint64_t)off_100977A90);
      v11 = sub_1000A2E04(v10, a2);
      v20 = v11;
      if (v11)
      {
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_100918710);
        v12 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
        if (!v12)
          goto LABEL_23;
        v13 = (char *)off_100977A90 + 192;
        do
        {
          v14 = v12[4];
          v15 = v14 >= v11;
          if (v14 >= v11)
            v16 = v12;
          else
            v16 = v12 + 1;
          if (v15)
            v13 = (char *)v12;
          v12 = (_QWORD *)*v16;
        }
        while (*v16);
        if (v13 == (char *)off_100977A90 + 192 || v11 < *((_QWORD *)v13 + 4))
LABEL_23:
          v13 = (char *)off_100977A90 + 192;
        if (v13 != (char *)off_100977A90 + 192)
        {
          *(_QWORD *)buf = &v20;
          if (*(_QWORD *)sub_10002252C((uint64_t **)off_100977A90 + 23, &v20, (uint64_t)&unk_100738230, (uint64_t **)buf)[5])
          {
            if (qword_100977A98 != -1)
              dispatch_once(&qword_100977A98, &stru_100918710);
            sub_10051DFA8((uint64_t)off_100977A90, (uint64_t)buf);
            if (qword_100977A98 != -1)
              dispatch_once(&qword_100977A98, &stru_100918710);
            v21 = &v20;
            v17 = *(_QWORD *)sub_10002252C((uint64_t **)off_100977A90 + 23, &v20, (uint64_t)&unk_100738230, (uint64_t **)&v21)[5];
            v18 = v17 + 472;
            if (*(char *)(v17 + 495) < 0)
              operator delete(*(void **)v18);
            *(_OWORD *)v18 = *(_OWORD *)buf;
            *(_QWORD *)(v18 + 16) = v23;
            if (a1[7] && a1[5])
            {
              if (qword_100977A98 != -1)
                dispatch_once(&qword_100977A98, &stru_100918710);
              *(_QWORD *)buf = &v20;
              *(_BYTE *)(*(_QWORD *)sub_10002252C((uint64_t **)off_100977A90 + 23, &v20, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]+ 161) = 1;
            }
          }
        }
      }
      if (!*a1)
      {
        v19 = sub_100038E50();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 152))(v19, a1);
      }
      sub_1000A1FAC((unint64_t)a1, 0, a2);
    }
  }
  else if (v8)
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Adaptive Latency a2dpSpatialMusicStateChanged return a2dpHandle:%d", buf, 8u);
  }
}

void sub_1000A2D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A2D24(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  _BYTE *v12;
  uint64_t result;

  v3 = sub_10003BE44();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 792))(v3, 5);
  if (!(_DWORD)v4)
    return 1;
  v5 = sub_1000A2E04(v4, a2);
  if (!v5)
    return 1;
  v6 = v5;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v7 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
  if (!v7)
    goto LABEL_16;
  v8 = (char *)off_100977A90 + 192;
  do
  {
    v9 = v7[4];
    v10 = v9 >= v6;
    if (v9 >= v6)
      v11 = v7;
    else
      v11 = v7 + 1;
    if (v10)
      v8 = (char *)v7;
    v7 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 == (char *)off_100977A90 + 192 || v6 < *((_QWORD *)v8 + 4))
LABEL_16:
    v8 = (char *)off_100977A90 + 192;
  if (v8 == (char *)off_100977A90 + 192)
    return 1;
  v12 = (_BYTE *)sub_1000A47E4(v5, v6);
  result = 0;
  *v12 = 0;
  return result;
}

uint64_t sub_1000A2E04(uint64_t a1, int a2)
{
  _QWORD *v3;
  uint64_t result;
  int v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v3 = (_QWORD *)*((_QWORD *)off_100977A90 + 23);
  if (v3 == (_QWORD *)((char *)off_100977A90 + 192))
    return 0;
  result = 0;
  do
  {
    v5 = *(unsigned __int16 *)(v3[5] + 84);
    v6 = v5 != a2 || v5 == 0;
    if (!v6)
      result = v3[4];
    v7 = (_QWORD *)v3[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v3[2];
        v6 = *v8 == (_QWORD)v3;
        v3 = v8;
      }
      while (!v6);
    }
    v3 = v8;
  }
  while (v8 != (_QWORD *)((char *)off_100977A90 + 192));
  return result;
}

void sub_1000A2EB8(unint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  NSObject *v5;
  char *v6;
  char *v7;
  BOOL v8;
  uint8_t v9[16];

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  if (*((_QWORD *)off_100977A90 + 25))
  {
    v2 = (char *)*((_QWORD *)off_100977A90 + 23);
    v3 = (char *)off_100977A90 + 192;
    if (v2 != (char *)off_100977A90 + 192)
    {
      do
      {
        v4 = *((_QWORD *)v2 + 5);
        if (*(_WORD *)(v4 + 84) && sub_1000A2D24(a1, *(unsigned __int16 *)(v4 + 84)))
        {
          v5 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v9 = 0;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Dynamic Latency screen call decision for default logic", v9, 2u);
          }
          sub_1000A1FAC(a1, 0, *(unsigned __int16 *)(v4 + 84));
        }
        v6 = (char *)*((_QWORD *)v2 + 1);
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = *(char **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (char *)*((_QWORD *)v2 + 2);
            v8 = *(_QWORD *)v7 == (_QWORD)v2;
            v2 = v7;
          }
          while (!v8);
        }
        v2 = v7;
      }
      while (v7 != v3);
    }
  }
}

void sub_1000A2FEC(_BYTE *a1, unsigned int a2, int a3)
{
  NSObject *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _BYTE buf[24];

  if (sub_1000A2D24((uint64_t)a1, a2))
  {
    v6 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v7 = "on";
      if (a1[8])
        v8 = "on";
      else
        v8 = "off";
      if (!a3)
        v7 = "off";
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Adaptive Latency fSpatialVideoOn from %s -> %s", buf, 0x16u);
    }
    if (a1[8] != a3)
    {
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100918710);
      sub_10051AB38(off_100977A90, a3);
      a1[8] = a3;
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100918710);
      v9 = sub_100526DD8((uint64_t)off_100977A90);
      v10 = sub_1000A2E04(v9, a2);
      v19 = v10;
      if (v10)
      {
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_100918710);
        v11 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
        if (!v11)
          goto LABEL_28;
        v12 = (char *)off_100977A90 + 192;
        do
        {
          v13 = v11[4];
          v14 = v13 >= v10;
          if (v13 >= v10)
            v15 = v11;
          else
            v15 = v11 + 1;
          if (v14)
            v12 = (char *)v11;
          v11 = (_QWORD *)*v15;
        }
        while (*v15);
        if (v12 == (char *)off_100977A90 + 192 || v10 < *((_QWORD *)v12 + 4))
LABEL_28:
          v12 = (char *)off_100977A90 + 192;
        if (v12 != (char *)off_100977A90 + 192)
        {
          *(_QWORD *)buf = &v19;
          if (*(_QWORD *)sub_10002252C((uint64_t **)off_100977A90 + 23, &v19, (uint64_t)&unk_100738230, (uint64_t **)buf)[5])
          {
            if (a1[8])
            {
              if (qword_100977A98 != -1)
                dispatch_once(&qword_100977A98, &stru_100918710);
              sub_10051DFA8((uint64_t)off_100977A90, (uint64_t)buf);
              if (qword_100977A98 != -1)
                dispatch_once(&qword_100977A98, &stru_100918710);
              v20 = &v19;
              v16 = *(_QWORD *)sub_10002252C((uint64_t **)off_100977A90 + 23, &v19, (uint64_t)&unk_100738230, (uint64_t **)&v20)[5];
              v17 = v16 + 472;
              if (*(char *)(v16 + 495) < 0)
                operator delete(*(void **)v17);
              *(_OWORD *)v17 = *(_OWORD *)buf;
              *(_QWORD *)(v17 + 16) = *(_QWORD *)&buf[16];
              if (a1[8] && a1[5])
              {
                if (qword_100977A98 != -1)
                  dispatch_once(&qword_100977A98, &stru_100918710);
                *(_QWORD *)buf = &v19;
                *(_BYTE *)(*(_QWORD *)sub_10002252C((uint64_t **)off_100977A90 + 23, &v19, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]+ 162) = 1;
              }
            }
          }
        }
      }
      if (!*a1)
      {
        v18 = sub_100038E50();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v18 + 152))(v18, a1);
      }
      sub_1000A1FAC((unint64_t)a1, 0, a2);
    }
  }
}

void sub_1000A3358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000A337C(_BYTE *a1, unsigned int a2, int a3)
{
  NSObject *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE buf[12];
  __int16 v20;
  const char *v21;

  v6 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v7 = "on";
    if (a1[3])
      v8 = "on";
    else
      v8 = "off";
    if (!a3)
      v7 = "off";
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v8;
    v20 = 2080;
    v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Adaptive Latency fVoiceOverOn from %s -> %s", buf, 0x16u);
  }
  v9 = sub_1000A2D24((uint64_t)a1, a2);
  if ((_DWORD)v9)
  {
    a1[3] = a3;
    if (a3)
    {
      if (a1[5])
      {
        v10 = sub_1000A2E04(v9, a2);
        v18 = v10;
        if (v10)
        {
          v11 = v10;
          if (qword_100977A98 != -1)
            dispatch_once(&qword_100977A98, &stru_100918710);
          v12 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
          if (!v12)
            goto LABEL_25;
          v13 = (char *)off_100977A90 + 192;
          do
          {
            v14 = v12[4];
            v15 = v14 >= v11;
            if (v14 >= v11)
              v16 = v12;
            else
              v16 = v12 + 1;
            if (v15)
              v13 = (char *)v12;
            v12 = (_QWORD *)*v16;
          }
          while (*v16);
          if (v13 == (char *)off_100977A90 + 192 || v11 < *((_QWORD *)v13 + 4))
LABEL_25:
            v13 = (char *)off_100977A90 + 192;
          if (v13 != (char *)off_100977A90 + 192)
          {
            *(_QWORD *)buf = &v18;
            if (*(_QWORD *)sub_10002252C((uint64_t **)off_100977A90 + 23, &v18, (uint64_t)&unk_100738230, (uint64_t **)buf)[5])
            {
              if (qword_100977A98 != -1)
                dispatch_once(&qword_100977A98, &stru_100918710);
              *(_QWORD *)buf = &v18;
              *(_BYTE *)(*(_QWORD *)sub_10002252C((uint64_t **)off_100977A90 + 23, &v18, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]+ 164) = 1;
            }
          }
        }
      }
    }
    if (!*a1)
    {
      v17 = sub_100038E50();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v17 + 152))(v17, a1);
    }
    sub_1000A1FAC((unint64_t)a1, 0, a2);
  }
}

void sub_1000A35D4(_BYTE *a1, unsigned int a2, int a3)
{
  NSObject *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  __int16 v12;
  const char *v13;

  v6 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v7 = "on";
    if (a1[9])
      v8 = "on";
    else
      v8 = "off";
    if (!a3)
      v7 = "off";
    v10 = 136315394;
    v11 = v8;
    v12 = 2080;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Adaptive Latency A2dpAudioAndInputAggregationChanged from %s -> %s", (uint8_t *)&v10, 0x16u);
  }
  if (sub_1000A2D24((uint64_t)a1, a2))
  {
    a1[9] = a3;
    if (!*a1)
    {
      v9 = sub_100038E50();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 152))(v9, a1);
    }
    sub_1000A1FAC((unint64_t)a1, 0, a2);
  }
}

void sub_1000A36F4(unint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  BOOL v11;
  int v12;
  const char *v13;

  if (*(unsigned __int8 *)(a1 + 1) != a2)
  {
    *(_BYTE *)(a1 + 1) = a2;
    v4 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (a2)
        v5 = "enabled";
      v12 = 136315138;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Latency keyboard %s", (uint8_t *)&v12, 0xCu);
    }
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100918710);
    if (*((_QWORD *)off_100977A90 + 25))
    {
      v6 = (char *)*((_QWORD *)off_100977A90 + 23);
      v7 = (char *)off_100977A90 + 192;
      if (v6 != (char *)off_100977A90 + 192)
      {
        do
        {
          v8 = *((_QWORD *)v6 + 5);
          if (*(_WORD *)(v8 + 84))
            sub_1000A1FAC(a1, 0, *(unsigned __int16 *)(v8 + 84));
          v9 = (char *)*((_QWORD *)v6 + 1);
          if (v9)
          {
            do
            {
              v10 = v9;
              v9 = *(char **)v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (char *)*((_QWORD *)v6 + 2);
              v11 = *(_QWORD *)v10 == (_QWORD)v6;
              v6 = v10;
            }
            while (!v11);
          }
          v6 = v10;
        }
        while (v10 != v7);
      }
    }
  }
}

void sub_1000A3864(unint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  BOOL v17;
  unint64_t v18;
  _BYTE buf[24];

  if (*(unsigned __int8 *)(a1 + 2) != a2)
  {
    *(_BYTE *)(a1 + 2) = a2;
    v4 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (a2)
        v5 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Latency GarageBand %s", buf, 0xCu);
    }
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100918710);
    if (*((_QWORD *)off_100977A90 + 25))
    {
      v6 = (char *)*((_QWORD *)off_100977A90 + 23);
      v7 = (char *)off_100977A90 + 192;
      if (v6 != (char *)off_100977A90 + 192)
      {
        do
        {
          v8 = *((_QWORD *)v6 + 5);
          v9 = *(unsigned __int16 *)(v8 + 84);
          if (*(_WORD *)(v8 + 84))
          {
            if (*(_BYTE *)(a1 + 2) && *(_BYTE *)(a1 + 5))
            {
              v18 = 0;
              if (qword_100977A98 != -1)
                dispatch_once(&qword_100977A98, &stru_100918710);
              v18 = sub_10051CDE8((uint64_t)off_100977A90, *(unsigned __int16 *)(v8 + 84));
              if (v18)
              {
                if (qword_100977A98 != -1)
                  dispatch_once(&qword_100977A98, &stru_100918710);
                v10 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
                if (!v10)
                  goto LABEL_29;
                v11 = (char *)off_100977A90 + 192;
                do
                {
                  v12 = v10[4];
                  v13 = v12 >= v18;
                  if (v12 >= v18)
                    v14 = v10;
                  else
                    v14 = v10 + 1;
                  if (v13)
                    v11 = (char *)v10;
                  v10 = (_QWORD *)*v14;
                }
                while (*v14);
                if (v11 == (char *)off_100977A90 + 192 || v18 < *((_QWORD *)v11 + 4))
LABEL_29:
                  v11 = (char *)off_100977A90 + 192;
                if (v11 != (char *)off_100977A90 + 192)
                {
                  *(_QWORD *)buf = &v18;
                  if (*(_QWORD *)sub_10002252C((uint64_t **)off_100977A90 + 23, &v18, (uint64_t)&unk_100738230, (uint64_t **)buf)[5])
                  {
                    if (qword_100977A98 != -1)
                      dispatch_once(&qword_100977A98, &stru_100918710);
                    *(_QWORD *)buf = &v18;
                    *(_BYTE *)(*(_QWORD *)sub_10002252C((uint64_t **)off_100977A90 + 23, &v18, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]+ 165) = 1;
                  }
                }
              }
              v9 = *(unsigned __int16 *)(v8 + 84);
            }
            sub_1000A1FAC(a1, 0, v9);
          }
          v15 = (char *)*((_QWORD *)v6 + 1);
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = *(char **)v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (char *)*((_QWORD *)v6 + 2);
              v17 = *(_QWORD *)v16 == (_QWORD)v6;
              v6 = v16;
            }
            while (!v17);
          }
          v6 = v16;
        }
        while (v16 != v7);
      }
    }
  }
}

void sub_1000A3B44(unint64_t a1, int a2)
{
  int v2;
  _BOOL4 v4;
  NSObject *v5;
  _BOOL8 v6;
  const char *v7;
  int v8;
  const char *v9;
  const char *v10;
  const char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  int v18;
  NSObject *v19;
  _BOOL4 v20;
  char *v21;
  char *v22;
  BOOL v23;
  uint8_t buf[4];
  _BYTE v25[10];
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 4))
    v4 = 1;
  else
    v4 = *(_BYTE *)(a1 + 5) != 0;
  *(_BYTE *)(a1 + 4) = a2;
  v5 = qword_1009997E0;
  v6 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    v7 = "disabled";
    v8 = *(unsigned __int8 *)(a1 + 5);
    v9 = "enabled";
    *(_DWORD *)buf = 136316162;
    if (v2)
      v10 = "enabled";
    else
      v10 = "disabled";
    *(_QWORD *)v25 = v10;
    if (v4)
      v11 = "enabled";
    else
      v11 = "disabled";
    *(_WORD *)&v25[8] = 2080;
    v26 = v10;
    if (v8)
      v7 = "enabled";
    else
      v9 = v10;
    v27 = 2080;
    v28 = v7;
    v29 = 2080;
    v30 = v11;
    v31 = 2080;
    v32 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Low Latency Game console mode update, new mode: %s, fConsoleGameModeOn: %s, fGameModeOn: %s, fCombinedGameOn: %s->%s", buf, 0x34u);
    v2 = *(unsigned __int8 *)(a1 + 4);
  }
  if (v2)
  {
    if (v4)
      return;
  }
  else if (v4 == (*(_BYTE *)(a1 + 5) != 0))
  {
    return;
  }
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  if (*((_QWORD *)off_100977A90 + 25))
  {
    v12 = (char *)*((_QWORD *)off_100977A90 + 23);
    v13 = (char *)off_100977A90 + 192;
    if (v12 != (char *)off_100977A90 + 192)
    {
      do
      {
        v14 = *((_QWORD *)v12 + 5);
        if (*(_WORD *)(v14 + 84))
        {
          v15 = *((_QWORD *)v12 + 4);
          v16 = sub_1000A2E04(v6, *(unsigned __int16 *)(v14 + 84));
          if (!_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
            goto LABEL_31;
          if (qword_100977A98 != -1)
            dispatch_once(&qword_100977A98, &stru_100918710);
          if (*((_QWORD *)off_100977A90 + 27)
            && sub_100094BB4(*((_QWORD *)off_100977A90 + 27), v16)
            && !*(_BYTE *)(a1 + 4)
            && !*(_BYTE *)(a1 + 5))
          {
            if (qword_100977A98 != -1)
              dispatch_once(&qword_100977A98, &stru_100918710);
            sub_100518ECC((uint64_t)off_100977A90, 8u, v16);
            if (qword_100977A98 != -1)
              dispatch_once(&qword_100977A98, &stru_100918710);
            sub_1005261A4((uint64_t)off_100977A90, v16, 0);
          }
          else
          {
LABEL_31:
            sub_1000A1FAC(a1, 0, *(unsigned __int16 *)(v14 + 84));
          }
          if (*(_BYTE *)(a1 + 4))
            v17 = 1;
          else
            v17 = *(_BYTE *)(a1 + 5) != 0;
          if (qword_100977A98 != -1)
            dispatch_once(&qword_100977A98, &stru_100918710);
          v18 = sub_1000967D4(*((_QWORD *)off_100977A90 + 27));
          v19 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          {
            if (*(_BYTE *)(a1 + 4))
              v20 = 1;
            else
              v20 = *(_BYTE *)(a1 + 5) != 0;
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v25 = v20;
            *(_WORD *)&v25[4] = 1024;
            *(_DWORD *)&v25[6] = v18;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Low Latency Game console mode change, notify BTHAL low Latency Game: %d, HID: %d", buf, 0xEu);
          }
          if (qword_100977A98 != -1)
            dispatch_once(&qword_100977A98, &stru_100918710);
          sub_100527F24((uint64_t)off_100977A90, v15, *(unsigned __int16 *)(v14 + 84), v17 & v18);
        }
        v21 = (char *)*((_QWORD *)v12 + 1);
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = *(char **)v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (char *)*((_QWORD *)v12 + 2);
            v23 = *(_QWORD *)v22 == (_QWORD)v12;
            v12 = v22;
          }
          while (!v23);
        }
        v12 = v22;
      }
      while (v22 != v13);
    }
  }
}

void sub_1000A3F30(_BYTE *a1, unsigned int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  _DWORD v8[2];

  v6 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "a2dpExpanseStateChanged:%d", (uint8_t *)v8, 8u);
  }
  if (sub_1000A2D24((uint64_t)a1, a2))
  {
    a1[6] = a3;
    if (!*a1)
    {
      v7 = sub_100038E50();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 152))(v7, a1);
    }
    sub_1000A1FAC((unint64_t)a1, 0, a2);
  }
}

void sub_1000A4020(_BYTE *a1, uint64_t a2, int a3)
{
  _BOOL4 v6;
  NSObject *v7;
  int v8;
  const char *v9;
  const char *v10;
  BOOL v11;
  const char *v12;
  const char *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  _BOOL4 v20;
  NSObject *v21;
  const char *v22;
  int v23;
  int v24;
  NSObject *v25;
  int v26;
  unint64_t v27;
  _BYTE buf[14];
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;

  if (a1[4])
    v6 = 1;
  else
    v6 = a1[5] != 0;
  if (sub_1000A2D24((uint64_t)a1, a2))
  {
    a1[5] = a3;
    v7 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v8 = a1[4];
      if (a3)
        v9 = "enabled";
      else
        v9 = "disabled";
      *(_DWORD *)buf = 136315906;
      if (v6)
        v10 = "enabled";
      else
        v10 = "disabled";
      v11 = v8 == 0;
      if (v8)
        v12 = "enabled";
      else
        v12 = "disabled";
      *(_QWORD *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 2080;
      v29 = v9;
      if (v11)
        v13 = v9;
      else
        v13 = "enabled";
      v30 = 2080;
      v31 = v10;
      v32 = 2080;
      v33 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Game State (Ambience) Changed, fConsoleGameModeOn: %s, fGameModeOn: %s, fCombinedGameOn: %s->%s", buf, 0x2Au);
    }
    if (a1[4])
    {
      if (v6)
        return;
    }
    else if (v6 == (a1[5] != 0))
    {
      return;
    }
    v27 = 0;
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100918710);
    v27 = sub_10051CDE8((uint64_t)off_100977A90, a2);
    if (v27)
    {
      if (a1[4] || a1[5])
      {
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_100918710);
        v14 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
        if (!v14)
          goto LABEL_41;
        v15 = (char *)off_100977A90 + 192;
        do
        {
          v16 = v14[4];
          v17 = v16 >= v27;
          if (v16 >= v27)
            v18 = v14;
          else
            v18 = v14 + 1;
          if (v17)
            v15 = (char *)v14;
          v14 = (_QWORD *)*v18;
        }
        while (*v18);
        if (v15 == (char *)off_100977A90 + 192 || v27 < *((_QWORD *)v15 + 4))
LABEL_41:
          v15 = (char *)off_100977A90 + 192;
        if (v15 != (char *)off_100977A90 + 192)
        {
          *(_QWORD *)buf = &v27;
          if (*(_QWORD *)sub_10002252C((uint64_t **)off_100977A90 + 23, &v27, (uint64_t)&unk_100738230, (uint64_t **)buf)[5])
          {
            if (qword_100977A98 != -1)
              dispatch_once(&qword_100977A98, &stru_100918710);
            *(_QWORD *)buf = &v27;
            *(_BYTE *)(*(_QWORD *)sub_10002252C((uint64_t **)off_100977A90 + 23, &v27, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]+ 160) = 1;
            if (qword_100977A98 != -1)
              dispatch_once(&qword_100977A98, &stru_100918710);
            *(_QWORD *)buf = &v27;
            if (*(_BYTE *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v27, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]+ 72))
            {
              if (qword_100977A98 != -1)
                dispatch_once(&qword_100977A98, &stru_100918710);
              *(_QWORD *)buf = &v27;
              *(_BYTE *)(*(_QWORD *)sub_10002252C((uint64_t **)off_100977A90 + 23, &v27, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]+ 163) = 1;
            }
          }
        }
      }
      if (!*a1)
      {
        v19 = sub_100038E50();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v19 + 152))(v19, a1);
      }
      if (!_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming") || a1[4] || a1[5])
      {
        sub_1000A1FAC((unint64_t)a1, 0, a2);
      }
      else
      {
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_100918710);
        sub_100518ECC((uint64_t)off_100977A90, 8u, v27);
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_100918710);
        sub_1005261A4((uint64_t)off_100977A90, v27, 0);
      }
      if (a1[4])
        v20 = 1;
      else
        v20 = a1[5] != 0;
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100918710);
      v23 = sub_1000967D4(*((_QWORD *)off_100977A90 + 27));
      v24 = v20 & v23;
      v25 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        if (a1[4])
          v26 = 1;
        else
          v26 = a1[5];
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v26;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v23;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Game State (Ambience) notify BTHAL low Latency Game: %d, HID: %d", buf, 0xEu);
      }
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100918710);
      sub_100527F24((uint64_t)off_100977A90, v27, a2, v24);
    }
    else
    {
      v21 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        if (a1[5])
          v22 = "true";
        else
          v22 = "false";
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Couldn't trigger Game State change (%s) - couldn't find the device", buf, 0xCu);
      }
    }
  }
}

void sub_1000A45B0(uint64_t a1, int a2, int a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL8 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  uint8_t buf[4];
  int v21;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  if (*((_QWORD *)off_100977A90 + 25))
  {
    v5 = (char *)*((_QWORD *)off_100977A90 + 23);
    v6 = (char *)off_100977A90 + 192;
    if (v5 != (char *)off_100977A90 + 192)
    {
      do
      {
        v7 = *((_QWORD *)v5 + 5);
        if (*(unsigned __int16 *)(v7 + 84) == a2)
        {
          v8 = *((_QWORD *)v5 + 4);
          v9 = a3 ? mach_absolute_time() : 0;
          v10 = *(_QWORD *)(v7 + 40);
          *(_QWORD *)(v10 + 8) = v9;
          *(_BYTE *)(v10 + 1) = 0;
          if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
          {
            v11 = qword_1009997E0;
            v12 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
            if (v12)
            {
              v13 = *(_DWORD *)(sub_1000A47E4(v12, v8) + 20);
              *(_DWORD *)buf = 67109120;
              v21 = v13;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Low Latency Game a2dpDynamicLatencyTransitionCompleted new latencymode: %d", buf, 8u);
            }
            v14 = sub_1000A47E4(v12, v8);
            if (*(_DWORD *)(v14 + 20) == 1
              || (v15 = sub_1000A47E4(v14, v8), *(_DWORD *)(v15 + 20) == 2)
              || (v16 = sub_1000A47E4(v15, v8), *(_DWORD *)(v16 + 20) == 3)
              || *(_DWORD *)(sub_1000A47E4(v16, v8) + 20) == 10)
            {
              if (qword_100977A98 != -1)
                dispatch_once(&qword_100977A98, &stru_100918710);
              sub_100518ECC((uint64_t)off_100977A90, 0xAu, v8);
            }
          }
        }
        v17 = (char *)*((_QWORD *)v5 + 1);
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = *(char **)v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (char *)*((_QWORD *)v5 + 2);
            v19 = *(_QWORD *)v18 == (_QWORD)v5;
            v5 = v18;
          }
          while (!v19);
        }
        v5 = v18;
      }
      while (v18 != v6);
    }
  }
}

uint64_t sub_1000A47E4(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;

  v3 = a2;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v4 = &v3;
  return *(_QWORD *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v3, (uint64_t)&unk_100738230, (uint64_t **)&v4)[5] + 40);
}

uint64_t sub_1000A485C(uint64_t a1, int a2)
{
  _QWORD *v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  if (!*((_QWORD *)off_100977A90 + 25))
    return 0;
  v3 = (_QWORD *)*((_QWORD *)off_100977A90 + 23);
  if (v3 == (_QWORD *)((char *)off_100977A90 + 192))
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = v3[5];
      if (*(unsigned __int16 *)(v5 + 84) == a2 && *(_DWORD *)(*(_QWORD *)(v5 + 40) + 20) == 7)
        v4 = 1;
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != (_QWORD *)((char *)off_100977A90 + 192));
  }
  return v4 & 1;
}

uint64_t sub_1000A4934(uint64_t a1, int a2)
{
  _QWORD *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  if (!*((_QWORD *)off_100977A90 + 25))
    return 0;
  v3 = (_QWORD *)*((_QWORD *)off_100977A90 + 23);
  if (v3 == (_QWORD *)((char *)off_100977A90 + 192))
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = v3[5];
      if (*(unsigned __int16 *)(v5 + 84) == a2)
      {
        v6 = *(_QWORD *)(v5 + 40);
        if (*(_BYTE *)(v6 + 1) || (*(_DWORD *)(v6 + 20) - 1) <= 4)
          v4 = 1;
      }
      v7 = (_QWORD *)v3[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v3[2];
          v9 = *v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v9);
      }
      v3 = v8;
    }
    while (v8 != (_QWORD *)((char *)off_100977A90 + 192));
  }
  return v4 & 1;
}

BOOL sub_1000A4A1C(uint64_t a1, unint64_t a2)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  __int16 v8;
  uint8_t buf[2];

  v2 = *(unsigned __int16 *)(sub_1000A47E4(a1, a2) + 44);
  v3 = qword_1009997E0;
  v4 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
  if (v2 == 0xFFFF)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      v5 = "Adaptive Latency Streaming stopped";
      v6 = buf;
      goto LABEL_6;
    }
  }
  else if (v4)
  {
    v8 = 0;
    v5 = "Adaptive Latency Streaming started";
    v6 = (uint8_t *)&v8;
LABEL_6:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v5, v6, 2u);
  }
  return v2 != 0xFFFF;
}

uint64_t sub_1000A4AC0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  NSObject *v10;
  _DWORD v12[2];
  __int16 v13;
  int v14;

  v6 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 328))(v6) & 1) != 0)
  {
    if (!a4)
      return 0;
  }
  else
  {
    v8 = sub_10003BE44();
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 384))(v8);
    result = 0;
    if (!a4 || (v9 & 1) == 0)
      return result;
  }
  v10 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109376;
    v12[1] = a3;
    v13 = 1024;
    v14 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Dynamic Latency Coex notify check LLM enter or exit curr=%d,new=%d", (uint8_t *)v12, 0xEu);
  }
  if ((a4 - 1) > 4 || (result = 1, a3 <= 5) && a3)
  {
    if ((a4 & 0xFFFFFFFE) == 6 && a3 < 6)
      return 2;
    else
      return 0;
  }
  return result;
}

void sub_1000A4BE8(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  sub_1005194E4((uint64_t)off_100977A90, a2, a3);
}

uint64_t sub_1000A4C40(_BYTE *a1, int a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  NSObject *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _DWORD v23[2];
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  v4 = sub_10003BE44();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 792))(v4, 2);
  if ((_DWORD)result)
  {
    v6 = sub_10003BE44();
    v7 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 328))(v6)
      && a1[7]
      && !a1[6]
      && !a1[9]
      && !a1[4]
      && !a1[5];
    v8 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 384))(v8)
      && (a1[7] || a1[8])
      && !a1[6]
      && !a1[9]
      && !a1[4]
      && !a1[5])
    {
      v7 = 1;
    }
    v9 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 336))(v9) && a1[8] && !a1[9] && !a1[4] && !a1[5])
      v7 = 1;
    v10 = sub_10003BE44();
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 792))(v10, 5) ^ 1;
    if (v7)
      result = v11;
    else
      result = 0;
    if ((_DWORD)result == 1 && a2 != 0)
    {
      v13 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v14 = a1[7];
        v15 = a1[8];
        v16 = sub_100027F68();
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 592))(v16);
        v18 = a1[6];
        v19 = sub_100027F68();
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v21 = sub_10003BE44();
        v22 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 792))(v21, 0);
        v23[0] = 67110400;
        v23[1] = v14;
        v24 = 1024;
        v25 = v15;
        v26 = 1024;
        v27 = v17;
        v28 = 1024;
        v29 = v18;
        v30 = 1024;
        v31 = v20;
        v32 = 1024;
        v33 = v22;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Adaptive Latency Spatial:%d,%d,%d,%d,%d,%d", (uint8_t *)v23, 0x26u);
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_1000A4E78(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 16) = a2;
  return result;
}

void sub_1000A4E80(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  char **v20;
  char **v21;
  unsigned int v22;
  BOOL v23;
  char **v24;
  uint64_t v25;
  _BOOL4 v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  NSObject *v43;
  uint32_t v44;
  int v45;
  NSObject *v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  _BOOL4 v50;
  int v51;
  uint64_t v52;
  _BOOL4 v53;
  BOOL v54;
  NSObject *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint8_t buf[4];
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  unsigned int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;

  v10 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 792))(v10, 2))
    return;
  v11 = a4 ? *(unsigned __int8 *)(a4 + 6) : 0;
  v79 = 0;
  v12 = sub_1000A4C40((_BYTE *)a1, 1);
  if (!(_DWORD)v12)
    return;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v13 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
  if (!v13)
    goto LABEL_19;
  v14 = (char *)off_100977A90 + 192;
  do
  {
    v15 = v13[4];
    v16 = v15 >= a2;
    if (v15 >= a2)
      v17 = v13;
    else
      v17 = v13 + 1;
    if (v16)
      v14 = (char *)v13;
    v13 = (_QWORD *)*v17;
  }
  while (*v17);
  if (v14 == (char *)off_100977A90 + 192 || *((_QWORD *)v14 + 4) > a2)
LABEL_19:
    v14 = (char *)off_100977A90 + 192;
  if (v14 == (char *)off_100977A90 + 192)
  {
    v33 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006CE414(v33, v34, v35, v36, v37, v38, v39, v40);
    return;
  }
  v18 = sub_1000A574C(v12, a2);
  v19 = sub_1000A5890(a1, v18, &v79, 1);
  if (!(_DWORD)v19)
    return;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v20 = (char **)*((_QWORD *)off_100977A90 + 138);
  if (!v20)
    goto LABEL_35;
  v21 = (char **)((char *)off_100977A90 + 1104);
  do
  {
    v22 = *((unsigned __int16 *)v20 + 16);
    v23 = v22 >= v18;
    if (v22 >= v18)
      v24 = v20;
    else
      v24 = v20 + 1;
    if (v23)
      v21 = v20;
    v20 = (char **)*v24;
  }
  while (*v24);
  if (v21 == (char **)((char *)off_100977A90 + 1104) || v18 < *((unsigned __int16 *)v21 + 16))
LABEL_35:
    v21 = (char **)((char *)off_100977A90 + 1104);
  if (v21 != (char **)((char *)off_100977A90 + 1104))
    return;
  v25 = sub_1000A47E4(v19, a2);
  if (*(__int16 *)(v25 + 44) == -1)
  {
    sub_1000A5A2C(a1, a2);
    v41 = qword_1009997E0;
    if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v42 = "Adaptive Latency Reset on First Stats";
    v43 = v41;
    v44 = 2;
LABEL_103:
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, v42, buf, v44);
    return;
  }
  v26 = 0;
  v27 = 0;
  v28 = 0;
  if (a4 && (a5 & 1) == 0)
  {
    v29 = a1 + 24 + 6 * *(int *)(a1 + 20);
    v30 = *(_DWORD *)(a4 + 217);
    *(_WORD *)(v29 + 4) = *(_WORD *)(a4 + 221);
    *(_DWORD *)v29 = v30;
    *(_DWORD *)(a1 + 20) = (*(_DWORD *)(a1 + 20) + 1) % 3;
    LODWORD(v29) = *(char *)(a1 + 30) + *(char *)(a1 + 24) + *(char *)(a1 + 36);
    v27 = (__int16)v29 / 3;
    v28 = (__int16)(*(char *)(a1 + 31) + *(char *)(a1 + 25) + *(char *)(a1 + 37)) / 3;
    v26 = (int)v29 > -240 || *(char *)(a1 + 31) + *(char *)(a1 + 25) + *(char *)(a1 + 37) > -255;
  }
  if ((char)v11 <= -70)
  {
    if (v11 <= 0xB5)
    {
      if (v11 <= 0xB0)
        v32 = 8;
      else
        v32 = 6;
    }
    else
    {
      v32 = 4;
    }
  }
  else
  {
    v32 = 0;
  }
  v45 = *(_DWORD *)(a1 + 12);
  if (v45 == 100)
  {
    if (35 - v32 < a3)
    {
      v78 = v28;
      v47 = 60 - v32;
      v48 = 3;
      goto LABEL_66;
    }
  }
  else if (v45 != 80)
  {
    v46 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67110400;
      v81 = v45;
      v82 = 1024;
      v83 = v32;
      v84 = 1024;
      v85 = (char)v11;
      v86 = 1024;
      v87 = a3;
      v88 = 1024;
      v89 = v79;
      v90 = 1024;
      v91 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "Adaptive Latency wrong stats! cutoff:%d, step,%d, rssi,%u, reTx,%d, old,%d, score new, %d", buf, 0x26u);
    }
    return;
  }
  v78 = v28;
  if (20 - v32 >= a3)
  {
    v48 = 1;
    goto LABEL_69;
  }
  v47 = 35 - v32;
  v48 = 2;
LABEL_66:
  if (v47 <= a3)
  {
    v25 = sub_1000A47E4(v25, a2);
    ++*(_WORD *)(v25 + 46);
  }
LABEL_69:
  if ((a5 & 1) != 0)
    goto LABEL_70;
  v50 = (char)v11 < -74 && v26;
  if (v50 && (char)v11 >= -84)
  {
    v51 = *(_DWORD *)(a1 + 12);
    if (v51 == 80)
    {
      v48 = 6;
    }
    else if (v51 == 100)
    {
      v48 = 3;
    }
    v52 = sub_1000A47E4(v25, a2);
    *(_WORD *)(v52 + 46) = 0;
    v25 = sub_1000A47E4(v52, a2);
    *(_WORD *)(v25 + 44) = 0;
  }
  v25 = sub_1000A47E4(v25, a2);
  v53 = (char)v11 < -79 && v26;
  v54 = (char)v11 > -85 || v26;
  if (*(__int16 *)(v25 + 46) > 2 || v53 || !v54)
  {
LABEL_70:
    v49 = sub_1000A47E4(v25, a2);
    *(_WORD *)(v49 + 46) = 0;
    *(_WORD *)(sub_1000A47E4(v49, a2) + 44) = 0;
    v48 = 6;
  }
  v55 = qword_1009997E0;
  v56 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v56)
  {
    v57 = *(_DWORD *)(a1 + 12);
    v77 = v48;
    v58 = v79;
    v59 = sub_1000A47E4(v56, a2);
    v76 = v27;
    v60 = *(__int16 *)(v59 + 46);
    v61 = *(__int16 *)(sub_1000A47E4(v59, a2) + 44);
    *(_DWORD *)buf = 67111424;
    v81 = v57;
    v82 = 1024;
    v83 = v26;
    v84 = 1024;
    v85 = v58;
    v48 = v77;
    v86 = 1024;
    v87 = v77;
    v88 = 1024;
    v89 = v60;
    v90 = 1024;
    v91 = v61;
    v92 = 1024;
    v93 = a5;
    v94 = 1024;
    v95 = v76;
    v96 = 1024;
    v97 = v78;
    v98 = 1024;
    v99 = (char)v11;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Adaptive Latency cutoff:%d,congestRF:%d,old:%d,new:%d,cnt:%d,%d,fl:%u,nfavg:%d,%d,rssi:%d", buf, 0x3Eu);
  }
  if (!v79 || v79 == v48)
  {
    v67 = sub_1000A47E4(v56, a2);
    *(_WORD *)(v67 + 44) = 0;
    v68 = sub_1000A47E4(v67, a2);
    *(_WORD *)(v68 + 46) = 0;
    *(_WORD *)(a1 + 16) = sub_1000A5A80(v68, v48, a2);
    v66 = qword_1009997E0;
    if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 67109120;
    v81 = v48;
    v42 = "Adaptive Latency stay same :%d";
    goto LABEL_102;
  }
  if (v48 == 6 || v79 == 6)
  {
    if (v79 == 6)
    {
      if ((v56 = sub_1000A47E4(v56, a2), ++*(_WORD *)(v56 + 44), (char)v11 >= -59) && v48 == 1
        || (v56 = sub_1000A47E4(v56, a2), *(__int16 *)(v56 + 44) >= 3))
      {
        *(_WORD *)(a1 + 16) = sub_1000A5A80(v56, v48, a2);
        sub_1000A5AE0(a1, v18, v48);
        v70 = sub_1000A47E4(v69, a2);
        *(_WORD *)(v70 + 44) = 0;
        *(_WORD *)(sub_1000A47E4(v70, a2) + 46) = 0;
        v71 = qword_1009997E0;
        v56 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v56)
        {
          *(_DWORD *)buf = 67109120;
          v81 = v48;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Adaptive Latency exit flush :%d", buf, 8u);
        }
      }
    }
    if (v48 == 6)
    {
      *(_WORD *)(a1 + 16) = sub_1000A5A80(v56, 6, a2);
      sub_1000A5AE0(a1, v18, 6);
      v73 = sub_1000A47E4(v72, a2);
      *(_WORD *)(v73 + 44) = 0;
      *(_WORD *)(sub_1000A47E4(v73, a2) + 46) = 0;
      v66 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v81 = 6;
        v42 = "Adaptive Latency enter flush :%d";
        goto LABEL_102;
      }
    }
  }
  else if (v79 <= v48)
  {
    if (v79 < v48)
    {
      *(_WORD *)(a1 + 16) = sub_1000A5A80(v56, v48, a2);
      sub_1000A5AE0(a1, v18, v48);
      v75 = sub_1000A47E4(v74, a2);
      *(_WORD *)(v75 + 44) = 0;
      *(_WORD *)(sub_1000A47E4(v75, a2) + 46) = 0;
      v66 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v81 = v48;
        v42 = "Adaptive Latency downgrade to :%d";
        goto LABEL_102;
      }
    }
  }
  else
  {
    v62 = sub_1000A47E4(v56, a2);
    ++*(_WORD *)(v62 + 44);
    v63 = sub_1000A47E4(v62, a2);
    if (*(__int16 *)(v63 + 44) >= 3)
    {
      *(_WORD *)(a1 + 16) = sub_1000A5A80(v63, v48, a2);
      sub_1000A5AE0(a1, v18, v48);
      v65 = sub_1000A47E4(v64, a2);
      *(_WORD *)(v65 + 44) = 0;
      *(_WORD *)(sub_1000A47E4(v65, a2) + 46) = 0;
      v66 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v81 = v48;
        v42 = "Adaptive Latency upgrade to :%d";
LABEL_102:
        v43 = v66;
        v44 = 8;
        goto LABEL_103;
      }
    }
  }
}

uint64_t sub_1000A574C(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  unint64_t v9;
  unint64_t *v10;

  v9 = a2;
  if (!a2)
    return 0;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v3 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
  if (!v3)
    goto LABEL_15;
  v4 = (char *)off_100977A90 + 192;
  do
  {
    v5 = v3[4];
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6)
      v4 = (char *)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (char *)off_100977A90 + 192 || *((_QWORD *)v4 + 4) > a2)
LABEL_15:
    v4 = (char *)off_100977A90 + 192;
  if (v4 == (char *)off_100977A90 + 192)
    return 0;
  v10 = &v9;
  if (!*(_WORD *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v9, (uint64_t)&unk_100738230, (uint64_t **)&v10)[5] + 84))
    return 0;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v10 = &v9;
  return *(unsigned __int16 *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v9, (uint64_t)&unk_100738230, (uint64_t **)&v10)[5]+ 84);
}

uint64_t sub_1000A5890(uint64_t a1, int a2, _DWORD *a3, int a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  _DWORD v17[2];
  __int16 v18;
  int v19;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  if (!*((_QWORD *)off_100977A90 + 25))
    return 0;
  v7 = (_QWORD *)*((_QWORD *)off_100977A90 + 23);
  if (v7 == (_QWORD *)((char *)off_100977A90 + 192))
    return 0;
  while (1)
  {
    v8 = v7[5];
    if (*(unsigned __int16 *)(v8 + 84) == a2)
      break;
    v9 = (_QWORD *)v7[1];
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v7[2];
        v11 = *v10 == (_QWORD)v7;
        v7 = v10;
      }
      while (!v11);
    }
    v7 = v10;
    if (v10 == (_QWORD *)((char *)off_100977A90 + 192))
      return 0;
  }
  v12 = v7[4];
  if (v12)
  {
    if (sub_1000A70D0(a1, v12))
      return 0;
  }
  v13 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD *)(v8 + 40);
    v15 = *(_DWORD *)(v14 + 20);
    LODWORD(v14) = *(unsigned __int8 *)(v14 + 1);
    v17[0] = 67109376;
    v17[1] = v15;
    v18 = 1024;
    v19 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Adaptive Latency mode:%d, inTransition:%d", (uint8_t *)v17, 0xEu);
  }
  if (a4 && *(_BYTE *)(*(_QWORD *)(v8 + 40) + 1))
    return 0;
  if (a3)
    *a3 = *(_DWORD *)(*(_QWORD *)(v8 + 40) + 20);
  return 1;
}

uint64_t sub_1000A5A2C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = sub_1000A47E4(a1, a2);
  *(_WORD *)(v4 + 44) = 0;
  result = sub_1000A47E4(v4, a2);
  v6 = 0;
  *(_WORD *)(result + 46) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  do
  {
    *(_WORD *)(a1 + v6 + 24) = -25444;
    v6 += 6;
  }
  while (v6 != 18);
  return result;
}

uint64_t sub_1000A5A80(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  sub_100444BF0(a3, (_DWORD *)&v6 + 1, &v6, (_DWORD *)&v5 + 1, &v5);
  if ((a2 - 1) > 9)
    return 150;
  else
    return dword_100738234[a2 - 1];
}

void sub_1000A5AE0(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  NSObject *v13;
  _BOOL8 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  _QWORD v24[4];
  int v25;
  __int16 v26;
  uint64_t v27;
  uint8_t buf[8];
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;

  v6 = sub_1000A2E04(a1, a2);
  v27 = v6;
  if (v6)
  {
    v7 = v6;
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100918710);
    v8 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
    if (!v8)
      goto LABEL_15;
    v9 = (char *)off_100977A90 + 192;
    do
    {
      v10 = v8[4];
      v11 = v10 >= v7;
      if (v10 >= v7)
        v12 = v8;
      else
        v12 = v8 + 1;
      if (v11)
        v9 = (char *)v8;
      v8 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 == (char *)off_100977A90 + 192 || v7 < *((_QWORD *)v9 + 4))
LABEL_15:
      v9 = (char *)off_100977A90 + 192;
    if (v9 != (char *)off_100977A90 + 192)
    {
      v13 = qword_1009997E0;
      v14 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        v15 = *(_DWORD *)(sub_1000A47E4(v14, v7) + 20);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v15;
        v29 = 1024;
        v30 = a3;
        v31 = 1024;
        v32 = a2;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Dynamic Latency trying to change jitter buffer from = 0x%x to = 0x%x on handle = %x", buf, 0x14u);
      }
      v16 = sub_1000A47E4(v14, v7);
      v18 = sub_1000A4AC0(v16, v17, *(_DWORD *)(v16 + 20), a3);
      sub_1000A4BE8(v18, v7, v18);
      *(_DWORD *)(sub_1000A47E4(v19, v7) + 20) = a3;
      v20 = sub_10003BE44();
      v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 792))(v20, 2);
      if ((_DWORD)v21)
      {
        v22 = sub_1000A5A80(v21, a3, v7);
        sub_1000A8884(a1, v7, v22);
      }
      *(_BYTE *)(sub_1000A47E4(v21, v7) + 1) = 1;
      v23 = sub_1004759E0();
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_1000A8A88;
      v24[3] = &unk_1009186B0;
      v26 = a2;
      v25 = a3;
      sub_100041A34(v23, v24);
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100918710);
      *(_QWORD *)buf = &v27;
      if (*(_DWORD *)(sub_10002252C((uint64_t **)off_100977A90 + 23, (unint64_t *)&v27, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]+ 76) == 2)
      {
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_100918710);
        sub_100520C04((uint64_t *)off_100977A90, v27);
      }
    }
  }
}

uint64_t sub_1000A5D8C(uint64_t a1, int a2)
{
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;

  if (a2 == 300)
    v2 = 7;
  else
    v2 = 6;
  if (a2 == 100)
    v3 = 3;
  else
    v3 = v2;
  if (a2 == 80)
    v4 = 2;
  else
    v4 = 6;
  if (a2 == 60)
    v5 = 1;
  else
    v5 = v4;
  if (a2 <= 99)
    v3 = v5;
  if (a2 == 30)
    v6 = 10;
  else
    v6 = 6;
  if (a2 == 5)
    v6 = 5;
  if (a2 == 4)
    v6 = 4;
  if (a2 <= 59)
    return v6;
  else
    return v3;
}

void sub_1000A5DF8(uint64_t a1, int a2, __int16 a3)
{
  NSObject *v6;
  dispatch_time_t v7;
  NSObject *v8;
  _QWORD v9[5];
  __int16 v10;
  __int16 v11;
  uint8_t buf[4];
  int v13;

  v6 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Latency: Delay Latency State Decision by %d ", buf, 8u);
  }
  v7 = dispatch_time(0, 1000000 * a2);
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v8 = *((_QWORD *)off_100977A90 + 31);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000A897C;
  v9[3] = &unk_1009173C0;
  v9[4] = a1;
  v10 = a3;
  v11 = a3;
  dispatch_after(v7, v8, v9);
}

uint64_t sub_1000A5F38(uint64_t a1, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  float v10;
  unsigned int v11;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v3 = (_QWORD *)*((_QWORD *)off_100977A90 + 23);
  if (v3 == (_QWORD *)((char *)off_100977A90 + 192))
    return 0;
  while (1)
  {
    v4 = v3[5];
    if (*(unsigned __int16 *)(v4 + 84) == a2)
      break;
    v5 = (_QWORD *)v3[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v3[2];
        v7 = *v6 == (_QWORD)v3;
        v3 = v6;
      }
      while (!v7);
    }
    v3 = v6;
    if (v6 == (_QWORD *)((char *)off_100977A90 + 192))
      return 0;
  }
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8))
    return 0;
  v8 = off_100977A90;
  v9 = mach_absolute_time();
  v10 = sub_10051DF38((uint64_t)v8, v9 - *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8), 1);
  v11 = (float)(1000.0 - v10);
  if (v11 <= 0xA)
    v11 = 10;
  if (v10 >= 1000.0)
    return 0;
  else
    return v11;
}

void sub_1000A6038(uint64_t a1, unint64_t a2, unsigned int a3)
{
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = _os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming");
  if (!a2 || !v6)
    goto LABEL_7;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  if (sub_100094BB4(*((_QWORD *)off_100977A90 + 27), a2))
  {
    sub_1000A7468(a1, a2, a3);
  }
  else
  {
LABEL_7:
    v7 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006CE444(v7, v8, v9, v10, v11, v12, v13, v14);
  }
}

BOOL sub_1000A6104(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = sub_10003BE44();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 792))(v3, 2);
  v5 = v4;
  v6 = *(_DWORD *)(sub_1000A47E4(v4, a2) + 20);
  result = v6 == 1;
  if (v5)
    result = v6 == 1
          || (v8 = sub_1000A47E4(result, a2), *(_DWORD *)(v8 + 20) == 2)
          || (v9 = sub_1000A47E4(v8, a2), *(_DWORD *)(v9 + 20) == 3)
          || (v10 = sub_1000A47E4(v9, a2), *(_DWORD *)(v10 + 20) == 4)
          || *(_DWORD *)(sub_1000A47E4(v10, a2) + 20) == 5;
  return result;
}

void sub_1000A61B0(_BYTE *a1, unint64_t a2, unsigned int a3)
{
  char **v6;
  char **v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  char **v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  int v44;
  __int16 v45;
  unint64_t v46;
  uint8_t buf[8];
  __int16 v48;
  unsigned int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  _BOOL4 v61;
  __int16 v62;
  int v63;

  v46 = a2;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v6 = (char **)*((_QWORD *)off_100977A90 + 138);
  if (!v6)
    goto LABEL_14;
  v7 = (char **)((char *)off_100977A90 + 1104);
  do
  {
    v8 = *((unsigned __int16 *)v6 + 16);
    v9 = v8 >= a3;
    if (v8 >= a3)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = v6;
    v6 = (char **)*v10;
  }
  while (*v10);
  if (v7 == (char **)((char *)off_100977A90 + 1104) || *((unsigned __int16 *)v7 + 16) > a3)
LABEL_14:
    v7 = (char **)((char *)off_100977A90 + 1104);
  v11 = (char **)((char *)off_100977A90 + 1104);
  if (v7 == (char **)((char *)off_100977A90 + 1104))
  {
    if (a1[6] || a1[9])
    {
      v12 = 6;
    }
    else if (*a1)
    {
      if (a1[1] || a1[3] || a1[5] || a1[2] || a1[8] || a1[7])
      {
        v12 = 1;
      }
      else if (a1[4])
      {
        v12 = 1;
      }
      else
      {
        v12 = 6;
      }
    }
    else
    {
      v12 = 7;
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = sub_1000A2E04((uint64_t)a1, a3);
  if (v13 | a2)
  {
    if (!v13 && a2)
    {
      v14 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Dynamic Latency creating AudioLinkManager device for handle %d, ", buf, 8u);
      }
      operator new();
    }
    if (a2)
    {
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100918710);
      v15 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
      if (!v15)
        goto LABEL_40;
      v16 = (char *)off_100977A90 + 192;
      do
      {
        v17 = v15[4];
        v18 = v17 >= v46;
        if (v17 >= v46)
          v19 = v15;
        else
          v19 = v15 + 1;
        if (v18)
          v16 = (char *)v15;
        v15 = (_QWORD *)*v19;
      }
      while (*v19);
      if (v16 == (char *)off_100977A90 + 192 || v46 < *((_QWORD *)v16 + 4))
LABEL_40:
        v16 = (char *)off_100977A90 + 192;
      if (v16 != (char *)off_100977A90 + 192)
      {
        v20 = sub_1000A4C40(a1, 0);
        if ((_DWORD)v20)
        {
          *(_BYTE *)sub_1000A47E4(v20, v46) = 1;
        }
        else
        {
          v22 = sub_10003BE44();
          v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 792))(v22, 5);
          if ((_DWORD)v23)
          {
            *(_BYTE *)sub_1000A47E4(v23, v46) = 0;
            v12 = 1;
LABEL_49:
            v24 = qword_1009997E0;
            if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
            {
              v25 = a1[1];
              v26 = a1[3];
              v27 = a1[5];
              v28 = a1[2];
              v29 = a1[8];
              v30 = a1[7];
              v31 = a1[6];
              v32 = a1[4];
              *(_DWORD *)buf = 67111168;
              *(_DWORD *)&buf[4] = v25;
              v48 = 1024;
              v49 = v26;
              v50 = 1024;
              v51 = v27;
              v52 = 1024;
              v53 = v28;
              v54 = 1024;
              v55 = v29;
              v56 = 1024;
              v57 = v30;
              v58 = 1024;
              v59 = v31;
              v60 = 1024;
              v61 = v7 != v11;
              v62 = 1024;
              v63 = v32;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Dynamic Latency Non streaming Trigger fKeyboardOn = %d, fVoiceOverOn=%d, fGameModeOn=%d, fGarageBandOn=%d, fSpatialVideoOn=%d, fSpatialMusicOn=%d, fExpanseOn =%d, aggregated=%d fConsoleGameModeOn=%d", buf, 0x38u);
              v24 = qword_1009997E0;
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&buf[4] = v12;
              v48 = 1024;
              v49 = a3;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Dynamic Latency trying to initialize jitter buffer to = 0x%x on handle = %x", buf, 0xEu);
            }
            v33 = sub_10003BE44();
            v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 792))(v33, 2);
            if ((_DWORD)v34)
            {
              v35 = v46;
              v36 = sub_1000A5A80(v34, v12, v46);
              sub_1000A8884((uint64_t)a1, v35, v36);
            }
            if (qword_100977A98 != -1)
              dispatch_once(&qword_100977A98, &stru_100918710);
            *(_QWORD *)buf = &v46;
            v37 = sub_10002252C((uint64_t **)off_100977A90 + 23, &v46, (uint64_t)&unk_100738230, (uint64_t **)buf);
            if (v37[5])
            {
              v38 = v46;
              v39 = sub_1000A47E4((uint64_t)v37, v46);
              v41 = sub_1000A4AC0(v39, v40, *(_DWORD *)(v39 + 20), v12);
              sub_1000A4BE8(v41, v38, v41);
            }
            v42 = sub_1004759E0();
            v43[0] = _NSConcreteStackBlock;
            v43[1] = 3221225472;
            v43[2] = sub_1000A8928;
            v43[3] = &unk_1009186B0;
            v45 = a3;
            v44 = v12;
            sub_100041A34(v42, v43);
            return;
          }
        }
        if (v7 != v11)
          return;
        goto LABEL_49;
      }
    }
  }
  else
  {
    v21 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Dynamic Latency no valid device object passed / found", buf, 2u);
    }
  }
}

void sub_1000A6730()
{
  operator delete();
}

void sub_1000A675C(unint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  _BOOL8 v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  uint8_t buf[8];
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  v25 = a2;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  *(_QWORD *)buf = &v25;
  v3 = sub_10002252C((uint64_t **)off_100977A90 + 23, &v25, (uint64_t)&unk_100738230, (uint64_t **)buf);
  v4 = *(unsigned __int16 *)(v3[5] + 84);
  v5 = *(_DWORD *)(sub_1000A47E4((uint64_t)v3, v25) + 20);
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  *(_QWORD *)buf = &v25;
  v6 = *(_DWORD *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v25, (uint64_t)&unk_100738230, (uint64_t **)buf)[5] + 76);
  if (v6 == 2)
  {
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100918710);
    *(_QWORD *)buf = &v25;
    if (**(unsigned __int8 **)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v25, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]+ 48) == 240)goto LABEL_12;
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100918710);
    *(_QWORD *)buf = &v25;
    if (**(unsigned __int8 **)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v25, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]+ 48) == 241)
    {
LABEL_12:
      sub_1000A6038(a1, v25, v4);
      return;
    }
  }
  v7 = sub_10003BE44();
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 792))(v7, 5);
  if ((_DWORD)v8)
  {
    if (v4)
    {
      *(_BYTE *)sub_1000A47E4(v8, v25) = 0;
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100918710);
      *(_QWORD *)buf = &v25;
      if (*(__int16 *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v25, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]
                      + 62) == -1
        || v5 != 1)
      {
        if (v6 == 2)
        {
          if (qword_100977E00 != -1)
            dispatch_once(&qword_100977E00, &stru_1009186F0);
          if (sub_1003E8A04(qword_100977DF8, v4) <= 7)
          {
            *(_BYTE *)a1 = 1;
            v9 = qword_1009997E0;
            if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Constant Low Latency delay latency decision", buf, 2u);
            }
LABEL_51:
            sub_1000A5DF8(a1, 150, v4);
            return;
          }
        }
        v21 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Constant Low Latency overwrite latency with 60", buf, 2u);
        }
        goto LABEL_57;
      }
    }
  }
  else
  {
    v10 = sub_10003BE44();
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 328))(v10);
    if ((_DWORD)v11 && (v11 = sub_1000A4C40((_BYTE *)a1, 0), (_DWORD)v11))
    {
      v12 = *(unsigned __int16 *)(a1 + 16);
      v13 = qword_1009997E0;
      v14 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        v15 = sub_10003BE44();
        v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 792))(v15, 5);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v12;
        v27 = 1024;
        v28 = v5;
        v29 = 1024;
        v30 = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "check default latency %d, %d, %d", buf, 0x14u);
      }
      if (v4)
      {
        *(_BYTE *)sub_1000A47E4(v14, v25) = 1;
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_100918710);
        *(_QWORD *)buf = &v25;
        if (*(__int16 *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v25, (uint64_t)&unk_100738230, (uint64_t **)buf)[5]
                        + 62) == -1
          || (v12 != 60 || v5 != 1)
          && (v12 != 80 || v5 != 2)
          && (v12 != 100 || v5 != 3)
          && (v12 != 120 || v5 != 4)
          && (v12 != 140 || v5 != 5)
          && (v12 != 150 || v5 != 6))
        {
          v17 = qword_1009997E0;
          v18 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v18)
          {
            v19 = *(unsigned __int8 *)(sub_1000A47E4(v18, v25) + 1);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v12;
            v27 = 1024;
            v28 = v19;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Adaptive Latency overwritting with LLM JBL %d, tran:%d", buf, 0xEu);
          }
          if (v6 == 2)
          {
            if (qword_100977E00 != -1)
              dispatch_once(&qword_100977E00, &stru_1009186F0);
            v18 = sub_1003E8A04(qword_100977DF8, v4);
            if (v18 <= 7)
              goto LABEL_51;
          }
          if (!*(_BYTE *)(sub_1000A47E4(v18, v25) + 1))
          {
            if (v12 <= 99)
            {
              if (v12 == 60)
              {
LABEL_57:
                v22 = a1;
                v23 = v4;
                v24 = 1;
LABEL_58:
                sub_1000A5AE0(v22, v23, v24);
                return;
              }
              if (v12 == 80)
              {
                v22 = a1;
                v23 = v4;
                v24 = 2;
                goto LABEL_58;
              }
            }
            else
            {
              switch(v12)
              {
                case 100:
                  v22 = a1;
                  v23 = v4;
                  v24 = 3;
                  goto LABEL_58;
                case 120:
                  v22 = a1;
                  v23 = v4;
                  v24 = 4;
                  goto LABEL_58;
                case 140:
                  v22 = a1;
                  v23 = v4;
                  v24 = 5;
                  goto LABEL_58;
              }
            }
          }
        }
      }
    }
    else if (v4)
    {
      v20 = (_BYTE *)sub_1000A47E4(v11, v25);
      if (!*v20)
      {
        *(_BYTE *)sub_1000A47E4((uint64_t)v20, v25) = 1;
        sub_1000A1FAC(a1, v25, v4);
      }
    }
  }
}

uint64_t sub_1000A6DC4(uint64_t a1, int a2)
{
  uint64_t result;
  unint64_t v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  result = sub_1000A2E04(a1, a2);
  if (result)
  {
    v3 = result;
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100918710);
    v4 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
    if (!v4)
      goto LABEL_15;
    v5 = (char *)off_100977A90 + 192;
    do
    {
      v6 = v4[4];
      v7 = v6 >= v3;
      if (v6 >= v3)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (v7)
        v5 = (char *)v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 == (char *)off_100977A90 + 192 || v3 < *((_QWORD *)v5 + 4))
LABEL_15:
      v5 = (char *)off_100977A90 + 192;
    return v5 != (char *)off_100977A90 + 192 && *(_BYTE *)(sub_1000A47E4(result, v3) + 2) != 0;
  }
  return result;
}

uint64_t sub_1000A6E84(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v4 = *((_QWORD *)off_100977A90 + 31);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A6F50;
  block[3] = &unk_100918690;
  block[5] = a1;
  block[6] = a2;
  block[4] = &v8;
  dispatch_sync(v4, block);
  v5 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1000A6F50(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  char *v9;
  char *v10;
  BOOL v11;
  uint8_t buf[4];
  int v13;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v2 = (char *)*((_QWORD *)off_100977A90 + 23);
  v3 = (char *)off_100977A90 + 192;
  if (v2 != (char *)off_100977A90 + 192)
  {
    do
    {
      v4 = *((_QWORD *)v2 + 5);
      if (*(_DWORD *)(v4 + 76) == 2)
      {
        v5 = *(_QWORD *)(v4 + 40);
        if (*(_BYTE *)(v5 + 2))
        {
          v6 = *((_QWORD *)v2 + 4);
          v7 = *(unsigned __int16 *)(v5 + 16);
          **(_WORD **)(a1 + 48) = v7;
          v8 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            v13 = v7;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Returning currentJitterBuffer %u", buf, 8u);
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
        }
      }
      v9 = (char *)*((_QWORD *)v2 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (char *)*((_QWORD *)v2 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v2;
          v2 = v10;
        }
        while (!v11);
      }
      v2 = v10;
    }
    while (v10 != v3);
  }
}

BOOL sub_1000A70D0(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;

  v3 = sub_1000A47E4(a1, a2);
  result = 0;
  if (v3)
  {
    v4 = sub_1000A47E4(v3, a2);
    if (*(int *)(v4 + 24) >= 4 && *(int *)(sub_1000A47E4(v4, a2) + 24) < 14)
      return 1;
  }
  return result;
}

void sub_1000A7128(_BYTE *a1, unint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  __int16 v25;
  __int16 v26;

  if (!a2)
    goto LABEL_24;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v6 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
  if (!v6)
    goto LABEL_15;
  v7 = (char *)off_100977A90 + 192;
  do
  {
    v8 = v6[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = (char *)v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == (char *)off_100977A90 + 192 || *((_QWORD *)v7 + 4) > a2)
LABEL_15:
    v7 = (char *)off_100977A90 + 192;
  if (v7 == (char *)off_100977A90 + 192)
  {
LABEL_24:
    v16 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006CE474(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  else if (!a1[4] && !a1[5] && !sub_1000A70D0((uint64_t)a1, a2))
  {
    if (sub_1000A4C40(a1, 0))
    {
      v11 = sub_10003BE44();
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 328))(v11);
      if ((_DWORD)v12)
      {
        v13 = sub_1000A47E4(v12, a2);
        *(_WORD *)(v13 + 50) = a3;
        if (a3 <= 0x32)
        {
          v14 = sub_1000A574C(v13, a2);
          v15 = sub_1004759E0();
          v24[0] = _NSConcreteStackBlock;
          v24[1] = 3221225472;
          v24[2] = sub_1000A72AC;
          v24[3] = &unk_100918130;
          v25 = a3;
          v26 = v14;
          sub_100041A34(v15, v24);
        }
      }
    }
  }
}

void sub_1000A72AC(uint64_t a1)
{
  NSObject *v2;

  v2 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
    sub_1006CE4A4(a1, v2);
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_1009186F0);
  sub_1003E88C0(qword_100977DF8, *(unsigned __int16 *)(a1 + 34), 0x28u);
}

void sub_1000A7330(uint64_t a1, unint64_t a2, char a3)
{
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;

  v9 = a2;
  if ((a3 & 1) == 0)
  {
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100918710);
    v4 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
    if (!v4)
      goto LABEL_15;
    v5 = (char *)off_100977A90 + 192;
    do
    {
      v6 = v4[4];
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (v7)
        v5 = (char *)v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 == (char *)off_100977A90 + 192 || *((_QWORD *)v5 + 4) > a2)
LABEL_15:
      v5 = (char *)off_100977A90 + 192;
    if (v5 != (char *)off_100977A90 + 192)
    {
      v10 = &v9;
      *(_BYTE *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v9, (uint64_t)&unk_100738230, (uint64_t **)&v10)[5] + 72) = 0;
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100918710);
      v10 = &v9;
      *(_DWORD *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v9, (uint64_t)&unk_100738230, (uint64_t **)&v10)[5] + 76) = 0;
    }
  }
}

void sub_1000A7468(uint64_t a1, unint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  char *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _BOOL8 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  NSObject *v18;
  _BOOL8 v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  char v26;
  int v27;
  char v28;
  int v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  NSObject *v35;
  int v36;
  int v37;
  unint64_t v38;
  uint8_t buf[8];
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;

  v38 = a2;
  if (!a2)
    goto LABEL_23;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v6 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
  if (!v6)
    goto LABEL_15;
  v7 = (char *)off_100977A90 + 192;
  do
  {
    v8 = v6[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = (char *)v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == (char *)off_100977A90 + 192 || *((_QWORD *)v7 + 4) > a2)
LABEL_15:
    v7 = (char *)off_100977A90 + 192;
  if (v7 == (char *)off_100977A90 + 192)
  {
LABEL_23:
    v14 = qword_1009997E0;
    if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v15 = "Low Latency Game, LatencyHubDevice object doesn't exist";
    v16 = v14;
    v17 = 2;
    goto LABEL_25;
  }
  if (*(_BYTE *)(sub_1000A47E4(a1, a2) + 1))
    goto LABEL_21;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v11 = sub_10051F674((uint64_t)off_100977A90);
  if (v11)
  {
LABEL_21:
    v12 = a1;
    v13 = 1000;
LABEL_22:
    sub_1000A5DF8(v12, v13, a3);
    return;
  }
  v13 = sub_1000A5F38(v11, a3);
  if (v13)
  {
    v12 = a1;
    goto LABEL_22;
  }
  v18 = qword_1009997E0;
  v19 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
  if (v19)
  {
    v20 = sub_1000A47E4(v19, a2);
    v21 = *(_DWORD *)(v20 + 24);
    v22 = *(_DWORD *)(sub_1000A47E4(v20, a2) + 20);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v21;
    v40 = 1024;
    v41 = v22;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Low Latency Game, decideLowLatencyGameStateTransition %d, %d", buf, 0xEu);
  }
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  *(_QWORD *)buf = &v38;
  v23 = (uint64_t)sub_10002252C((uint64_t **)off_100977A90 + 23, &v38, (uint64_t)&unk_100738230, (uint64_t **)buf);
  if (*(_DWORD *)(*(_QWORD *)(v23 + 40) + 76) == 2)
  {
    if (qword_100977E00 != -1)
      dispatch_once(&qword_100977E00, &stru_1009186F0);
    v23 = sub_1003E8A04(qword_100977DF8, a3);
    if (v23 <= 7)
    {
      v24 = qword_1009997E0;
      v25 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v25)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Low Latency Game, Sink JBL not filled, wait 150ms", buf, 2u);
      }
      v26 = 0;
      v27 = 0;
      v28 = 1;
      v29 = 150;
      goto LABEL_60;
    }
  }
  v30 = sub_1000A47E4(v23, v38);
  if (*(_DWORD *)(v30 + 20) != 1
    && (v30 = sub_1000A47E4(v30, v38), *(_DWORD *)(v30 + 20) != 2)
    && (v30 = sub_1000A47E4(v30, v38), *(_DWORD *)(v30 + 20) != 3)
    || (v30 = sub_1000A47E4(v30, v38), *(_DWORD *)(v30 + 24) != 4))
  {
    if (*(_BYTE *)(a1 + 5)
      || *(_BYTE *)(a1 + 4)
      || (v30 = sub_1000A47E4(v30, v38), *(_DWORD *)(v30 + 24) != 7)
      || (v30 = sub_1000A47E4(v30, v38), *(_DWORD *)(v30 + 20) != 10))
    {
      v25 = sub_1000A47E4(v30, v38);
      if (*(_DWORD *)(v25 + 24) != 7 || (v25 = sub_1000A47E4(v25, v38), *(_DWORD *)(v25 + 20) != 10))
      {
        v29 = 0;
        v27 = 0;
        v26 = 1;
        v28 = 1;
        goto LABEL_60;
      }
      v32 = qword_1009997E0;
      v25 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v25)
      {
        *(_WORD *)buf = 0;
        v33 = "Low Latency Game, Jitter T -> 60ms";
        goto LABEL_57;
      }
    }
    else
    {
      v32 = qword_1009997E0;
      v25 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v25)
      {
        *(_WORD *)buf = 0;
        v33 = "Low Latency Game, Jitter -> 60ms";
LABEL_57:
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v33, buf, 2u);
      }
    }
    v29 = 0;
    v28 = 0;
    v26 = 1;
    v27 = 1;
    goto LABEL_60;
  }
  v31 = qword_1009997E0;
  v25 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v25)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Low Latency Game, Jitter -> 30ms", buf, 2u);
  }
  v29 = 0;
  v28 = 0;
  v27 = 10;
  v26 = 1;
LABEL_60:
  if (*(_DWORD *)(sub_1000A47E4(v25, v38) + 20) == v27)
  {
    v34 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 30;
      v15 = "Low Latency Game, Latency is already set to %d";
      v16 = v34;
      v17 = 8;
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
    }
  }
  else if ((v26 & 1) != 0)
  {
    if ((v28 & 1) == 0)
    {
      v35 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v36 = *(unsigned __int8 *)(a1 + 5);
        v37 = *(unsigned __int8 *)(a1 + 4);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v27;
        v40 = 1024;
        v41 = v36;
        v42 = 1024;
        v43 = v37;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Low Latency Game, Dynamic Latency for AoS %u, fGameModeOn %d, fConsoleGameModeOn %d", buf, 0x14u);
      }
      sub_1000A5AE0(a1, a3, v27);
    }
  }
  else
  {
    sub_1000A5DF8(a1, v29, a3);
  }
}

void sub_1000A7A34(uint64_t a1, unint64_t a2)
{
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  _BOOL8 v16;
  void *v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  NSObject *v21;
  _BOOL8 v22;
  int v23;
  NSObject *v24;
  void *__p[2];
  char v26;
  int v27;
  uint8_t buf[8];
  __int16 v29;
  double v30;
  char v31;

  if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
  {
    if (*(_BYTE *)(a1 + 4))
    {
      v4 = 1;
      if (!a2)
        return;
    }
    else
    {
      v4 = *(_BYTE *)(a1 + 5) != 0;
      if (!a2)
        return;
    }
    if (v4)
    {
      v5 = sub_100027F68();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5))
      {
        v27 = 0;
        v6 = sub_100027F68();
        sub_100091AE8(buf, "UniAoS");
        sub_100091AE8(__p, "ignoreFlush");
        v7 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v6 + 88))(v6, buf, __p, &v27);
        if (v26 < 0)
          operator delete(__p[0]);
        if (v31 < 0)
          operator delete(*(void **)buf);
        if (v27)
        {
          *(_BYTE *)(sub_1000A47E4(v7, a2) + 32) = 0;
          return;
        }
      }
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100918710);
      v8 = sub_100094BB4(*((_QWORD *)off_100977A90 + 27), a2);
      if ((_DWORD)v8)
      {
        v9 = sub_1000A47E4(v8, a2);
        if (*(int *)(v9 + 24) > 9 || *(int *)(sub_1000A47E4(v9, a2) + 24) <= 13)
        {
          v10 = mach_absolute_time();
          v11 = sub_1000A47E4(v10, a2);
          ++*(_BYTE *)(v11 + 32);
          v12 = sub_10044D860(a2);
          if (!v12 || !*(_BYTE *)(a2 + 1365))
          {
            v15 = qword_1009997E0;
            v16 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
            if (v16)
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Low Latency Game 2G flush, score->20", buf, 2u);
            }
            goto LABEL_26;
          }
          v13 = sub_1000A47E4(v12, a2);
          if (*(float *)(v13 + 40) == 0.0)
          {
            *(float *)(sub_1000A47E4(v13, a2) + 40) = (float)v10;
            v14 = qword_1009997E0;
            if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Low Latency Game 1st flush in one second", buf, 2u);
            }
            return;
          }
          if (qword_100977A98 != -1)
            dispatch_once(&qword_100977A98, &stru_100918710);
          v17 = off_100977A90;
          v18 = sub_1000A47E4(v13, a2);
          v19 = sub_10051DF38((uint64_t)v17, (unint64_t)(float)((float)v10 - *(float *)(v18 + 40)), 1);
          *(float *)(sub_1000A47E4(v20, a2) + 40) = (float)v10;
          v21 = qword_1009997E0;
          v22 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
          if (v22)
          {
            v23 = *(unsigned __int8 *)(sub_1000A47E4(v22, a2) + 32);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v23;
            v29 = 2048;
            v30 = v19;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Low Latency Game flush %d in a second, delta: %f", buf, 0x12u);
          }
          if (v19 <= 20.0)
          {
            *(_DWORD *)(sub_1000A47E4(v22, a2) + 28) = 20;
            v24 = qword_1009997E0;
            v16 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
            if (v16)
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Low Latency Game, 2inrow flush, score->20", buf, 2u);
            }
LABEL_26:
            *(_BYTE *)(sub_1000A47E4(v16, a2) + 32) = 4;
          }
        }
      }
    }
  }
}

void sub_1000A7DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A7E2C(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL8 v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  NSObject *v27;
  uint32_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  NSObject *v41;
  _BOOL8 v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  NSObject *v53;
  uint32_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  int v61;
  const char *v62;
  NSObject *v63;
  uint32_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  _BOOL8 v68;
  int v69;
  int v70;
  void *__p[2];
  char v72;
  int v73;
  int v74;
  uint8_t buf[8];
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;

  v73 = 20;
  v74 = 40;
  result = _os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming");
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 4))
    {
      v9 = 1;
      if (!a2)
        return result;
    }
    else
    {
      v9 = *(_BYTE *)(a1 + 5) != 0;
      if (!a2)
        return result;
    }
    if (v9)
    {
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100918710);
      result = sub_100094BB4(*((_QWORD *)off_100977A90 + 27), a2);
      if ((_DWORD)result)
      {
        v10 = sub_100027F68();
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        if ((_DWORD)v11)
        {
          v12 = sub_100027F68();
          sub_100091AE8(buf, "UniAoS");
          sub_100091AE8(__p, "ReTxThreshold");
          (*(void (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v12 + 88))(v12, buf, __p, &v74);
          if (v72 < 0)
            operator delete(__p[0]);
          if (SBYTE1(v81) < 0)
            operator delete(*(void **)buf);
          v13 = sub_100027F68();
          sub_100091AE8(buf, "UniAoS");
          sub_100091AE8(__p, "NakThreshold");
          v11 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v13 + 88))(v13, buf, __p, &v73);
          if (v72 < 0)
            operator delete(__p[0]);
          if (SBYTE1(v81) < 0)
            operator delete(*(void **)buf);
          if (!v74)
            v74 = 40;
          if (!v73)
            v73 = 20;
        }
        if (*(_WORD *)(a4 + 16))
          v14 = 100 * *(unsigned __int16 *)(a4 + 179) / *(unsigned __int16 *)(a4 + 16);
        else
          LOBYTE(v14) = 0;
        v15 = sub_1000A47E4(v11, a2);
        if (*(_DWORD *)(v15 + 24) == 1)
        {
          v16 = qword_1009997E0;
          v17 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
          if (v17)
          {
            v18 = v73;
            v19 = v74;
            v20 = *(_DWORD *)(sub_1000A47E4(v17, a2) + 28);
            *(_DWORD *)buf = 67110144;
            *(_DWORD *)&buf[4] = a3;
            v76 = 1024;
            v77 = v19;
            v78 = 1024;
            v79 = v14;
            v80 = 1024;
            v81 = v18;
            v82 = 1024;
            v83 = v20;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "pre Low Latency Game, reTx:%u / %u, nak:%u / %u, score:%u", buf, 0x20u);
          }
          if (v74 >= a3 && v73 >= v14)
          {
            v29 = sub_1000A47E4(v17, a2);
            if (*(_DWORD *)(v29 + 28))
            {
              v30 = sub_1000A47E4(v29, a2);
              --*(_DWORD *)(v30 + 28);
              v31 = qword_1009997E0;
              v29 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v29)
              {
                v32 = *(_DWORD *)(sub_1000A47E4(v29, a2) + 28);
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v32;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "pre Low Latency Game(out), decreased score %u", buf, 8u);
              }
            }
            v15 = sub_1000A47E4(v29, a2);
            if (!*(_DWORD *)(v15 + 28))
            {
              v33 = qword_1009997E0;
              if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "pre Low Latency Game, LLM promote to AoS, request UBO", buf, 2u);
              }
              if (qword_100977A98 != -1)
                dispatch_once(&qword_100977A98, &stru_100918710);
              v34 = sub_100518ECC((uint64_t)off_100977A90, 2u, a2);
              if (!(_DWORD)v34)
              {
                v38 = qword_1009997E0;
                v15 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
                if (!(_DWORD)v15)
                  goto LABEL_52;
                *(_WORD *)buf = 0;
                v26 = "pre Low Latency Game, transition busy delay 1 second";
                v27 = v38;
                v28 = 2;
                goto LABEL_34;
              }
              v35 = sub_1000A47E4(v34, a2);
              *(_DWORD *)(v35 + 36) = 20;
              *(_DWORD *)(sub_1000A47E4(v35, a2) + 28) = 0;
              if (*(_WORD *)(a4 + 16))
              {
                LOWORD(v36) = *(_WORD *)(a4 + 18);
                v37 = (int)(float)((float)((float)v36 * 100.0) / (float)*(unsigned __int16 *)(a4 + 16));
              }
              else
              {
                v37 = 0;
              }
              v39 = *(char *)(a4 + 6);
              if (qword_100977A98 != -1)
              {
                v70 = *(char *)(a4 + 6);
                dispatch_once(&qword_100977A98, &stru_100918710);
                v39 = v70;
              }
              sub_100525F0C((uint64_t)off_100977A90, a2, v37, v39, 0);
            }
          }
          else
          {
            v21 = sub_1000A47E4(v17, a2);
            v22 = *(_DWORD *)(v21 + 28);
            v15 = sub_1000A47E4(v21, a2);
            if (v22 < *(_DWORD *)(v15 + 36))
            {
              v23 = sub_1000A47E4(v15, a2);
              ++*(_DWORD *)(v23 + 28);
              v24 = qword_1009997E0;
              v15 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v15)
              {
                v25 = *(_DWORD *)(sub_1000A47E4(v15, a2) + 28);
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v25;
                v26 = "pre Low Latency Game, increased score %u";
                v27 = v24;
                v28 = 8;
LABEL_34:
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v26, buf, v28);
              }
            }
          }
        }
LABEL_52:
        v40 = sub_1000A47E4(v15, a2);
        if (*(int *)(v40 + 24) < 10)
          goto LABEL_80;
        v40 = sub_1000A47E4(v40, a2);
        if (*(int *)(v40 + 24) > 13)
          goto LABEL_80;
        v41 = qword_1009997E0;
        v42 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
        if (v42)
        {
          v43 = sub_1000A47E4(v42, a2);
          v44 = *(_DWORD *)(v43 + 24);
          v45 = v73;
          v46 = v74;
          v47 = *(_DWORD *)(sub_1000A47E4(v43, a2) + 28);
          *(_DWORD *)buf = 67110400;
          *(_DWORD *)&buf[4] = v44;
          v76 = 1024;
          v77 = a3;
          v78 = 1024;
          v79 = v46;
          v80 = 1024;
          v81 = v14;
          v82 = 1024;
          v83 = v45;
          v84 = 1024;
          v85 = v47;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "In Low Latency Game, State:%u, reTx:%u / %u, nak:%u / %u, score:%u", buf, 0x26u);
        }
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_100918710);
        sub_100525D2C((uint64_t)off_100977A90, a2, a3, *(_BYTE *)(a4 + 6));
        v49 = sub_1000A47E4(v48, a2);
        if (*(unsigned __int8 *)(v49 + 32) < 4u)
        {
          if (v74 >= a3 && v73 >= v14)
          {
            v51 = sub_1000A47E4(v49, a2);
            if (*(_DWORD *)(v51 + 28) >= 0xAu)
            {
              v67 = qword_1009997E0;
              v68 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
              if (v68)
              {
                v69 = *(_DWORD *)(sub_1000A47E4(v68, a2) + 28);
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v69;
                _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "In Low Latency Game, decreased score %u", buf, 8u);
              }
              v51 = sub_1000A47E4(v68, a2);
              *(_DWORD *)(v51 + 28) -= 10;
            }
LABEL_66:
            v40 = sub_1000A47E4(v51, a2);
            if (*(_DWORD *)(v40 + 28) >= 0x14u)
            {
              if (qword_100977A98 != -1)
                dispatch_once(&qword_100977A98, &stru_100918710);
              v58 = sub_100518ECC((uint64_t)off_100977A90, 8u, a2);
              if ((_DWORD)v58)
              {
                *(_DWORD *)(sub_1000A47E4(v58, a2) + 28) = 20;
                if (qword_100977A98 != -1)
                  dispatch_once(&qword_100977A98, &stru_100918710);
                sub_1005261A4((uint64_t)off_100977A90, a2, 1);
                v59 = sub_10044D860(a2);
                if (!v59 || !*(_BYTE *)(a2 + 1365))
                  *(_DWORD *)(sub_1000A47E4(v59, a2) + 28) = 3600;
                v60 = qword_1009997E0;
                v40 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
                if (!(_DWORD)v40)
                  goto LABEL_80;
                v61 = *(_DWORD *)(sub_1000A47E4(v40, a2) + 28);
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v61;
                v62 = "Low Latency Game, AoS demoted to LLM on ISM, score %u";
                v63 = v60;
                v64 = 8;
                goto LABEL_79;
              }
              v65 = qword_1009997E0;
              v40 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v40)
              {
                *(_WORD *)buf = 0;
                v62 = "In Low Latency Game, transition busy delay 1 second";
                v63 = v65;
                v64 = 2;
LABEL_79:
                _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, v62, buf, v64);
              }
            }
LABEL_80:
            v66 = sub_1000A47E4(v40, a2);
            *(_BYTE *)(v66 + 32) = 0;
            result = sub_1000A47E4(v66, a2);
            *(_DWORD *)(result + 40) = 0;
            return result;
          }
          v55 = sub_1000A47E4(v49, a2);
          *(_DWORD *)(v55 + 28) += 10;
          v56 = qword_1009997E0;
          v51 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
          if (!(_DWORD)v51)
            goto LABEL_66;
          v57 = *(_DWORD *)(sub_1000A47E4(v51, a2) + 28);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v57;
          v52 = "In Low Latency Game, increased score %u";
          v53 = v56;
          v54 = 8;
        }
        else
        {
          *(_DWORD *)(sub_1000A47E4(v49, a2) + 28) = 20;
          v50 = qword_1009997E0;
          v51 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
          if (!(_DWORD)v51)
            goto LABEL_66;
          *(_WORD *)buf = 0;
          v52 = "In Low Latency Game, per second flush count exceed";
          v53 = v50;
          v54 = 2;
        }
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, v52, buf, v54);
        goto LABEL_66;
      }
    }
  }
  return result;
}

void sub_1000A8738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A877C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = sub_1000A47E4(a1, a2);
  *(_BYTE *)(v3 + 32) = 0;
  v4 = sub_1000A47E4(v3, a2);
  *(_DWORD *)(v4 + 40) = 0;
  v5 = sub_1000A47E4(v4, a2);
  *(_DWORD *)(v5 + 28) = 2;
  result = sub_1000A47E4(v5, a2);
  *(_DWORD *)(result + 36) = 2;
  return result;
}

_BYTE *sub_1000A87C8(uint64_t a1, uint64_t a2)
{
  _BYTE *result;
  uint64_t v4;
  int v5;
  NSObject *v6;
  char v7;

  result = (_BYTE *)sub_100442118(a2, 13);
  if ((_DWORD)result)
  {
    v4 = sub_10003BE44();
    result = (_BYTE *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 792))(v4, 0);
    if ((_DWORD)result)
    {
      v7 = 0;
      sub_100043758(&v7);
      v5 = sub_1001829DC(a2 + 128);
      sub_10004339C(&v7);
      if (v5)
      {
        v6 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
          sub_1006CE518(v5, v6);
      }
      return sub_100043728(&v7);
    }
  }
  return result;
}

void sub_1000A8870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_1000A8884(uint64_t a1, uint64_t a2, __int16 a3)
{
  NSObject *v6;
  _QWORD block[6];
  __int16 v8;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v6 = *((_QWORD *)off_100977A90 + 31);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A8ADC;
  block[3] = &unk_1009186D0;
  block[4] = a1;
  block[5] = a2;
  v8 = a3;
  dispatch_async(v6, block);
}

uint64_t sub_1000A8928(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_1009186F0);
  return sub_1003E84B0(qword_100977DF8, *(unsigned __int16 *)(a1 + 36), *(_DWORD *)(a1 + 32));
}

void sub_1000A897C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_1000A2E04(a1, *(unsigned __int16 *)(a1 + 40));
  v10 = v3;
  if (v3)
  {
    v4 = v3;
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100918710);
    v5 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
    if (!v5)
      goto LABEL_15;
    v6 = (char *)off_100977A90 + 192;
    do
    {
      v7 = v5[4];
      v8 = v7 >= v4;
      if (v7 >= v4)
        v9 = v5;
      else
        v9 = v5 + 1;
      if (v8)
        v6 = (char *)v5;
      v5 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 == (char *)off_100977A90 + 192 || v4 < *((_QWORD *)v6 + 4))
LABEL_15:
      v6 = (char *)off_100977A90 + 192;
    if (v6 != (char *)off_100977A90 + 192)
    {
      v11 = &v10;
      if (*(_DWORD *)(sub_10002252C((uint64_t **)off_100977A90 + 23, &v10, (uint64_t)&unk_100738230, (uint64_t **)&v11)[5]
                     + 76) == 2)
        sub_1000A1FAC(v2, 0, *(unsigned __int16 *)(a1 + 42));
    }
  }
}

uint64_t sub_1000A8A88(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_1009186F0);
  return sub_1003E84B0(qword_100977DF8, *(unsigned __int16 *)(a1 + 36), *(_DWORD *)(a1 + 32));
}

void sub_1000A8ADC(uint64_t a1)
{
  unint64_t *v1;
  _QWORD *v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  _BOOL8 v12;
  int v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD v22[2];
  __int16 v23;
  int v24;

  v1 = (unint64_t *)(a1 + 40);
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_21;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100918710);
  v3 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
  if (!v3)
    goto LABEL_15;
  v4 = *v1;
  v5 = (char *)off_100977A90 + 192;
  do
  {
    v6 = v3[4];
    v7 = v6 >= v4;
    if (v6 >= v4)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 == (char *)off_100977A90 + 192 || v4 < *((_QWORD *)v5 + 4))
LABEL_15:
    v5 = (char *)off_100977A90 + 192;
  if (v5 == (char *)off_100977A90 + 192)
  {
LABEL_21:
    v15 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006CE598((uint64_t)v1, v15, v16, v17, v18, v19, v20, v21);
  }
  else
  {
    v9 = sub_1000A47E4(a1, *(_QWORD *)(a1 + 40));
    v10 = *(unsigned __int16 *)(a1 + 48);
    if (*(unsigned __int16 *)(v9 + 16) != v10)
    {
      v11 = qword_1009997E0;
      v12 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
      if (v12)
      {
        v13 = *(unsigned __int16 *)(sub_1000A47E4(v12, *(_QWORD *)(a1 + 40)) + 16);
        v14 = *(unsigned __int16 *)(a1 + 48);
        v22[0] = 67109376;
        v22[1] = v13;
        v23 = 1024;
        v24 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Updated currentJitterBuffer from %u to %u", (uint8_t *)v22, 0xEu);
        LOWORD(v10) = *(_WORD *)(a1 + 48);
      }
      *(_WORD *)(sub_1000A47E4(v12, *v1) + 16) = v10;
      notify_post("com.apple.bluetooth.AdaptiveJitterBufferChanged");
    }
  }
}

void sub_1000A8C94(uint64_t a1, char a2, __int16 a3, int a4)
{
  *(_BYTE *)(a1 + 56) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 58) = a3;
  *(_WORD *)(a1 + 60) = a3;
  *(_WORD *)(a1 + 62) = -1;
  *(_QWORD *)(a1 + 64) = 0xFFFF00000000;
  *(_BYTE *)(a1 + 72) = a2;
  *(_DWORD *)(a1 + 76) = a4;
  *(_WORD *)(a1 + 86) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 92) = 0;
  operator new();
}

void sub_1000A8D64(id a1)
{
  operator new();
}

void sub_1000A8DA4()
{
  operator delete();
}

void sub_1000A8DC8(id a1)
{
  operator new();
}

void sub_1000A8E08()
{
  operator delete();
}

const char *sub_1000A9624(int a1)
{
  if (a1 <= 39)
  {
    if (a1 > 19)
    {
      if (a1 != 20)
        return "270 ms";
      return "350 ms";
    }
    else
    {
      if (a1 != 10)
      {
        if (a1 == 15)
          return "1022.5 ms";
        return "270 ms";
      }
      return "2 seconds";
    }
  }
  else if (a1 <= 44)
  {
    if (a1 != 40)
    {
      if (a1 == 42)
        return "120 ms";
      return "270 ms";
    }
    return "181.25 ms";
  }
  else
  {
    switch(a1)
    {
      case '-':
        return "60 ms";
      case '2':
        return "30 ms";
      case '<':
        return "20 ms";
      default:
        return "270 ms";
    }
  }
}

BOOL sub_1000A976C(id a1)
{
  return 1;
}

BOOL sub_1000A97F0(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  _BOOL8 v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  uint64_t v9;
  id v10;

  v2 = *(void **)(*(_QWORD *)(a1 + 40) + 880);
  v3 = *(id *)(a1 + 32);
  v4 = v2;
  v5 = v3 != v4;
  if (v3 == v4)
  {

LABEL_8:
    return v5;
  }
  v6 = v4;
  if ((v3 == 0) == (v4 != 0))
  {

    goto LABEL_7;
  }
  v7 = objc_msgSend(v3, "isEqual:", v4);

  if ((v7 & 1) == 0)
  {
LABEL_7:
    v8 = *(void **)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = v8;
    v3 = *(id *)(v9 + 880);
    *(_QWORD *)(v9 + 880) = v10;
    goto LABEL_8;
  }
  return 0;
}

BOOL sub_1000A98F8(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;

  v1 = *(_DWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 860);
  if (v1 != v3)
  {
    *(_DWORD *)(v2 + 860) = v1;
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 808) = 1;
  }
  return v1 != v3;
}

BOOL sub_1000A997C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;

  v1 = *(unsigned __int8 *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(v2 + 857);
  if (v1 != v3)
    *(_BYTE *)(v2 + 857) = v1;
  return v1 != v3;
}

BOOL sub_1000A9A1C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  _BOOL8 v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  uint64_t v9;
  id v10;

  v2 = *(void **)(*(_QWORD *)(a1 + 40) + 920);
  v3 = *(id *)(a1 + 32);
  v4 = v2;
  v5 = v3 != v4;
  if (v3 == v4)
  {

LABEL_8:
    return v5;
  }
  v6 = v4;
  if ((v3 == 0) == (v4 != 0))
  {

    goto LABEL_7;
  }
  v7 = objc_msgSend(v3, "isEqual:", v4);

  if ((v7 & 1) == 0)
  {
LABEL_7:
    v8 = *(void **)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = v8;
    v3 = *(id *)(v9 + 920);
    *(_QWORD *)(v9 + 920) = v10;
    goto LABEL_8;
  }
  return 0;
}

BOOL sub_1000A9B4C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  _BOOL8 v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  uint64_t v9;
  id v10;

  v2 = *(void **)(*(_QWORD *)(a1 + 40) + 928);
  v3 = *(id *)(a1 + 32);
  v4 = v2;
  v5 = v3 != v4;
  if (v3 == v4)
  {

LABEL_8:
    return v5;
  }
  v6 = v4;
  if ((v3 == 0) == (v4 != 0))
  {

    goto LABEL_7;
  }
  v7 = objc_msgSend(v3, "isEqual:", v4);

  if ((v7 & 1) == 0)
  {
LABEL_7:
    v8 = *(void **)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = v8;
    v3 = *(id *)(v9 + 928);
    *(_QWORD *)(v9 + 928) = v10;
    goto LABEL_8;
  }
  return 0;
}

id sub_1000A9C98(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 1;
  return objc_msgSend(*(id *)(a1 + 32), "_activateWithCompletion:", *(_QWORD *)(a1 + 40));
}

_QWORD *sub_1000A9E9C(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[4];
  if (!*(_BYTE *)(v1 + 32))
  {
    v2 = result;
    *(_BYTE *)(v1 + 32) = 1;
    if (dword_100977E08 <= 30
      && (dword_100977E08 != -1 || _LogCategory_Initialize(&dword_100977E08, 30)))
    {
      LogPrintF_safe(&dword_100977E08, "-[CBAdvertiserDaemon invalidate]_block_invoke", 30, "Invalidate: CID 0x%X", *(_DWORD *)(v2[4] + 28));
    }
    return objc_msgSend((id)v2[4], "_invalidate");
  }
  return result;
}

id sub_1000AA310(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1000AAFA0(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 128) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 192) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 256) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 320) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 384) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 448) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 512) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 576) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 640) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 808) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 704) = 1;
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

_QWORD *sub_1000AB780(_QWORD *result)
{
  void *v1;
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;

  v1 = (void *)result[4];
  if (v1 == *(void **)(result[6] + 40))
  {
    v2 = result;
    if (v1)
    {
      v3 = v1;
      dispatch_source_cancel(v3);
      v4 = v2[6];
      v5 = *(void **)(v4 + 40);
      *(_QWORD *)(v4 + 40) = 0;

    }
    *(_BYTE *)(v2[5] + 24) = 1;
    return objc_msgSend((id)v2[5], "_update");
  }
  return result;
}

void sub_1000AFCC4(id *a1)
{

}

void sub_1000AFFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_1000AFFE8(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id obj;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v6 + 40);
  v7 = CUDescriptionWithLevel(a3, 30);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  NSAppendPrintF_safe(&obj, "%@\n", v8);
  objc_storeStrong((id *)(v6 + 40), obj);

  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (*(int *)(a1 + 48) >= 11 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) >= 0x32uLL)
    *a4 = 1;
}

void sub_1000B009C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B0244(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1000B0264(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD block[5];

  if (dword_100977ED8 <= 30 && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
    LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack invalidate]_block_invoke_2", 30, "Scan stop");
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_100918A80);
  sub_100012EF4((uint64_t)off_100977FA8, *(_QWORD *)(a1 + 40), 1, 1, 0);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B035C;
  block[3] = &unk_1009172A0;
  block[4] = v2;
  dispatch_async(v3, block);
}

id sub_1000B035C(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 96) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_invalidated");
}

void sub_1000B04CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1000B04DC(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32))
  {
    if (dword_100977ED8 <= 30
      && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
    {
      LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack _invalidated]_block_invoke", 30, "SensorTracking stop all");
    }
    if (qword_100977FC0 != -1)
      dispatch_once(&qword_100977FC0, &stru_100918AA0);
    sub_100014F60(qword_100977FB8, *(_QWORD *)(a1 + 32));
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100918A60);
  return sub_10000B174(qword_100977B48, *(_QWORD *)(a1 + 40));
}

void sub_1000B0700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1000B07F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000B0BF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000B0DAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1000B0E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000B1150(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B12F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1000B1328(uint64_t a1)
{
  if (dword_100977ED8 <= 30 && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
    LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack clearDuplicateFilterCache:]_block_invoke", 30, "clearDuplicateFilterCache for type %d ", *(unsigned __int8 *)(a1 + 40));
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_100918A80);
  return sub_100678AFC((uint64_t)off_100977FA8, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1000B14F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B1500(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  unsigned __int8 v10;
  id v11;
  void *v12;
  int v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[4];
  id v22;
  void *v23;
  id v24;
  char v25;

  v5 = a2;
  v6 = a3;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v5));
  v8 = v6;
  v9 = v8;
  if (v7 == v8)
  {

  }
  else
  {
    if ((v8 != 0) != (v7 == 0))
    {
      v10 = objc_msgSend(v7, "isEqual:", v8);

      if ((v10 & 1) != 0)
        goto LABEL_23;
    }
    else
    {

    }
    if (objc_msgSend(v5, "length") == (id)7)
      v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subdataWithRange:", 1, 6));
    else
      v11 = v5;
    v12 = v11;
    if (objc_msgSend(v5, "length") == (id)7)
      v13 = *(unsigned __int8 *)objc_msgSend(objc_retainAutorelease(v5), "bytes");
    else
      v13 = 0;
    if (dword_100977ED8 <= 30
      && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
    {
      v14 = "?";
      if (v13 == 1)
        v14 = "Random";
      if (v13)
        v15 = v14;
      else
        v15 = "Public";
      v16 = CUPrintNSDataAddress(v12);
      v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      v18 = CUPrintNSObjectMasked(v9);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack _oobKeysUpdate]_block_invoke", 30, "OOB key remove: Addr %s %@, IRK %@", v15, v17, v19);

    }
    v20 = sub_1000419F4();
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1000B17C0;
    v21[3] = &unk_1009188B0;
    v25 = v13;
    v22 = v5;
    v23 = v12;
    v24 = v9;
    sub_100041A34(v20, v21);
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

  }
LABEL_23:

}

void sub_1000B1754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1000B17C0(uint64_t a1)
{
  _WORD *v2;
  unint64_t v3;
  __int16 v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 v15[8];
  unsigned __int8 v16[16];

  if (objc_msgSend(*(id *)(a1 + 32), "length") == (id)6 || objc_msgSend(*(id *)(a1 + 32), "length") == (id)7)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "length") == (id)6)
    {
      *(_DWORD *)&v15[3] = 0;
      *(_DWORD *)v15 = 0;
      v2 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "bytes");
      v3 = 0;
      v4 = v2[2];
      *(_DWORD *)&v15[1] = *(_DWORD *)v2;
      *(_WORD *)&v15[5] = v4;
    }
    else
    {
      v5 = sub_100649EA8(*(void **)(a1 + 32));
      v6 = sub_1000746A4(v5);
      *(_DWORD *)v15 = v6;
      v15[6] = BYTE6(v6);
      *(_WORD *)&v15[4] = WORD2(v6);
      v3 = (unint64_t)v6 << 48;
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100918AC0);
    sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)v15[1] << 40) | ((unint64_t)v15[2] << 32) | ((unint64_t)v15[3] << 24) | ((unint64_t)v15[4] << 16) | ((unint64_t)v15[5] << 8) | v15[6] | v3, 0, 1u, 0, 0, v16);
    v7 = sub_100030DF4(v16);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_100918AE0);
    if (sub_100030864(qword_1009778B0, v8))
    {
      if (dword_100977ED8 <= 30
        && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
      {
        v9 = "?";
        if (*(_BYTE *)(a1 + 56) == 1)
          v9 = "Random";
        if (*(_BYTE *)(a1 + 56))
          v10 = v9;
        else
          v10 = "Public";
        v11 = CUPrintNSDataAddress(*(_QWORD *)(a1 + 40));
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        v13 = CUPrintNSObjectMasked(*(_QWORD *)(a1 + 48));
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack _oobKeysUpdate]_block_invoke_2", 30, "OOB key failed to remove(it was already paired): Addr %s %@, IRK %@", v10, v12, v14);

      }
    }
    else
    {
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_100918AE0);
      sub_10069E810(qword_1009778B0, v15);
    }

  }
}

void sub_1000B1A44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v1;

  _Unwind_Resume(a1);
}

void sub_1000B1A78(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  unsigned __int8 v10;
  id v11;
  void *v12;
  int v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[4];
  id v22;
  id v23;
  void *v24;
  char v25;

  v5 = a2;
  v6 = a3;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "objectForKeyedSubscript:", v5));
  v8 = v6;
  v9 = v8;
  if (v7 == v8)
  {

  }
  else
  {
    if ((v8 != 0) != (v7 == 0))
    {
      v10 = objc_msgSend(v7, "isEqual:", v8);

      if ((v10 & 1) != 0)
        goto LABEL_23;
    }
    else
    {

    }
    if (objc_msgSend(v5, "length") == (id)7)
      v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subdataWithRange:", 1, 6));
    else
      v11 = v5;
    v12 = v11;
    if (objc_msgSend(v5, "length") == (id)7)
      v13 = *(unsigned __int8 *)objc_msgSend(objc_retainAutorelease(v5), "bytes");
    else
      v13 = 0;
    if (dword_100977ED8 <= 30
      && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
    {
      v14 = "?";
      if (v13 == 1)
        v14 = "Random";
      if (v13)
        v15 = v14;
      else
        v15 = "Public";
      v16 = CUPrintNSDataAddress(v12);
      v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      v18 = CUPrintNSObjectMasked(v9);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack _oobKeysUpdate]_block_invoke_3", 30, "OOB key add: Addr %s %@, IRK %@", v15, v17, v19);

    }
    v20 = sub_1000419F4();
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1000B1D3C;
    v21[3] = &unk_1009188B0;
    v22 = v5;
    v25 = v13;
    v23 = v9;
    v24 = v12;
    sub_100041A34(v20, v21);
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

  }
LABEL_23:

}

void sub_1000B1CD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1000B1D3C(uint64_t a1)
{
  _WORD *v2;
  unint64_t v3;
  __int16 v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 v15[8];
  unsigned __int8 v16[16];

  if (objc_msgSend(*(id *)(a1 + 32), "length") == (id)6 || objc_msgSend(*(id *)(a1 + 32), "length") == (id)7)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "length") == (id)6)
    {
      *(_DWORD *)&v15[3] = 0;
      *(_DWORD *)v15 = 0;
      v2 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "bytes");
      v3 = 0;
      v4 = v2[2];
      *(_DWORD *)&v15[1] = *(_DWORD *)v2;
      *(_WORD *)&v15[5] = v4;
    }
    else
    {
      v5 = sub_100649EA8(*(void **)(a1 + 32));
      v6 = sub_1000746A4(v5);
      *(_DWORD *)v15 = v6;
      v15[6] = BYTE6(v6);
      *(_WORD *)&v15[4] = WORD2(v6);
      v3 = (unint64_t)v6 << 48;
    }
    if (objc_msgSend(*(id *)(a1 + 40), "length") == (id)16)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100918AC0);
      sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)v15[1] << 40) | ((unint64_t)v15[2] << 32) | ((unint64_t)v15[3] << 24) | ((unint64_t)v15[4] << 16) | ((unint64_t)v15[5] << 8) | v15[6] | v3, 0, 1u, 0, 0, v16);
      v7 = sub_100030DF4(v16);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_100918AE0);
      if (sub_100030864(qword_1009778B0, v8))
      {
        if (dword_100977ED8 <= 30
          && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
        {
          v9 = "?";
          if (*(_BYTE *)(a1 + 56) == 1)
            v9 = "Random";
          if (*(_BYTE *)(a1 + 56))
            v10 = v9;
          else
            v10 = "Public";
          v11 = CUPrintNSDataAddress(*(_QWORD *)(a1 + 48));
          v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
          v13 = CUPrintNSObjectMasked(*(_QWORD *)(a1 + 40));
          v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack _oobKeysUpdate]_block_invoke_4", 30, "OOB key failed to add(it was already paired): Addr %s %@, IRK %@", v10, v12, v14);

        }
      }
      else
      {
        if (qword_1009778B8 != -1)
          dispatch_once(&qword_1009778B8, &stru_100918AE0);
        sub_100694CF4(qword_1009778B0, v15, (uint64_t)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "bytes"));
      }

    }
  }
}

void sub_1000B1FE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v1;

  _Unwind_Resume(a1);
}

void sub_1000B2018(uint64_t a1)
{
  if (qword_100977FD0 != -1)
    dispatch_once(&qword_100977FD0, &stru_100918B00);
  sub_10039E68C(qword_100977FC8, *(void **)(a1 + 32));
}

void sub_1000B20FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000B210C(id a1, NSData *a2, NSData *a3, BOOL *a4)
{
  NSData *v5;
  NSData *v6;
  NSData *v7;
  NSData *v8;
  int v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSData *v17;
  NSData *v18;
  _QWORD v19[4];
  NSData *v20;
  NSData *v21;

  v5 = a2;
  v6 = a3;
  if ((id)-[NSData length](v5, "length") == (id)7)
    v7 = (NSData *)objc_claimAutoreleasedReturnValue(-[NSData subdataWithRange:](v5, "subdataWithRange:", 1, 6));
  else
    v7 = v5;
  v8 = v7;
  if ((id)-[NSData length](v5, "length") == (id)7)
    v9 = *(unsigned __int8 *)-[NSData bytes](objc_retainAutorelease(v5), "bytes");
  else
    v9 = 0;
  if (dword_100977ED8 <= 30 && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
  {
    v10 = "?";
    if (v9 == 1)
      v10 = "Random";
    if (v9)
      v11 = v10;
    else
      v11 = "Public";
    v12 = CUPrintNSDataAddress(v8);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v14 = CUPrintNSObjectMasked(v6);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack _oobKeysRemoveAll]_block_invoke", 30, "OOB key remove: Addr %s %@, IRK %@", v11, v13, v15);

  }
  v16 = sub_1000419F4();
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1000B2318;
  v19[3] = &unk_100918340;
  v17 = v5;
  v20 = v17;
  v18 = v6;
  v21 = v18;
  sub_100041A34(v16, v19);

}

void sub_1000B22C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1000B2318(uint64_t a1)
{
  _WORD *v2;
  __int16 v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  unsigned __int8 v10;
  int v11;
  __int16 v12;
  unsigned __int8 v13[16];

  if (objc_msgSend(*(id *)(a1 + 32), "length") == (id)6)
  {
    v10 = 0;
    v2 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "bytes");
    v3 = v2[2];
    v11 = *(_DWORD *)v2;
    v12 = v3;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100918AC0);
    sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)v11 << 40) | ((unint64_t)BYTE1(v11) << 32) | ((unint64_t)BYTE2(v11) << 24) | ((unint64_t)HIBYTE(v11) << 16) | ((unint64_t)v12 << 8) | HIBYTE(v12), 0, 1u, 0, 0, v13);
    v4 = sub_100030DF4(v13);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_100918AE0);
    if (sub_100030864(qword_1009778B0, v5))
    {
      if (dword_100977ED8 <= 30
        && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
      {
        v6 = CUPrintNSDataAddress(*(_QWORD *)(a1 + 32));
        v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
        v8 = CUPrintNSObjectMasked(*(_QWORD *)(a1 + 40));
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack _oobKeysRemoveAll]_block_invoke_2", 30, "OOB key failed to remove(it was already paired): Addr %@, IRK %@", v7, v9);

      }
    }
    else
    {
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_100918AE0);
      sub_10069E810(qword_1009778B0, &v10);
    }

  }
}

void sub_1000B2518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1000B2820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43)
{

  _Block_object_dispose(&a38, 8);
  _Unwind_Resume(a1);
}

void sub_1000B28C0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  __int16 v35;
  char v36;
  __int128 v37;

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "irkData"));
  v7 = objc_msgSend(v6, "length");

  if (v7 == (id)16 && objc_msgSend(v5, "keyType"))
  {
    v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "irkData"));
    v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v9));

    if (!v10)
    {
      v37 = 0uLL;
      v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "irkData")));
      v37 = *(_OWORD *)objc_msgSend(v19, "bytes");

      v20 = SipHash(&v37, objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "bytes"), 6);
      v35 = v20;
      v36 = BYTE2(v20);
      v21 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v35, 3);
      if ((objc_msgSend(*(id *)(a1 + 40), "isEqualToData:", v21) & 1) == 0)
      {

        v10 = 0;
LABEL_17:

        goto LABEL_18;
      }
      v10 = *(id *)(a1 + 40);
      v22 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      if (!v22)
      {
        v23 = objc_alloc_init((Class)NSMutableDictionary);
        v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v25 = *(void **)(v24 + 40);
        *(_QWORD *)(v24 + 40) = v23;

        v22 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      }
      v26 = *(_QWORD *)(a1 + 40);
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "irkData"));
      objc_msgSend(v22, "setObject:forKeyedSubscript:", v26, v27);

      if (!v10)
        goto LABEL_17;
    }
    if (dword_100977ED8 <= 20
      && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 20)))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "irkData"));
      v12 = CUPrintNSObjectMasked(v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "btAddressData"));
      v15 = CUPrintNSDataAddress(v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      v17 = CUPrintNSDataAddress(*(_QWORD *)(a1 + 32));
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack _proxyOOBKeysUpdateOnDeviceFound:]_block_invoke", 20, "ProxyAuthTag matched %@, changing oobKey's stored address from: %@ to %@", v13, v16, v18);

    }
    v28 = objc_msgSend(objc_alloc((Class)NSData), "initWithData:", *(_QWORD *)(a1 + 32));
    objc_msgSend(v5, "setBtAddressData:", v28);

    v29 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    if (!v29)
    {
      v30 = objc_alloc((Class)NSMutableArray);
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "oobKeys"));
      v32 = objc_msgSend(v30, "initWithArray:", v31);
      v33 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v34 = *(void **)(v33 + 40);
      *(_QWORD *)(v33 + 40) = v32;

      v29 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    }
    objc_msgSend(v29, "replaceObjectAtIndex:withObject:", a3, v5);
    goto LABEL_17;
  }
LABEL_18:

}

void sub_1000B2C00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1000B3014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1000B3078(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v2 == result[11])
    return objc_msgSend(result, "_rescanTimerFired");
  return result;
}

void sub_1000B3450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1000B34F4(uint64_t a1)
{
  if (qword_100977FD0 != -1)
    dispatch_once(&qword_100977FD0, &stru_100918B00);
  sub_10039F8C0(qword_100977FC8, *(void **)(a1 + 32));
}

void sub_1000B38B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1000B3950(_QWORD *a1, void *a2, void *a3, __int128 *a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14)
{
  id v17;
  id v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v42;
  int v43;
  __int128 v44[2];
  uint64_t (**v45)();
  unsigned int *v46;
  uint64_t (**v47)();
  unsigned int *v48;
  id v49;

  v17 = a2;
  v18 = a3;
  v42 = *a4;
  v43 = *((_DWORD *)a4 + 4);
  v19 = v18;
  sub_1000B5F8C((uint64_t)v44, v17, v18, (uint64_t)&v42, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, 1);
  v20 = a1[13];
  if (v20 >= a1[14])
  {
    v21 = sub_1000B5C50(a1 + 12, v44);
  }
  else
  {
    sub_1000B5D70((uint64_t)(a1 + 14), a1[13], v44);
    v21 = v20 + 104;
    a1[13] = v20 + 104;
  }
  a1[13] = v21;

  v47 = &off_100918258;
  if (v48)
    sub_100056AAC(v48);
  v45 = &off_100918258;
  if (v46)
    sub_100056AAC(v46);

  v22 = a1[3];
  v23 = a1[2];
  if (v23 >= v22)
  {
    v26 = a1[1];
    v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - v26) >> 2);
    v28 = v27 + 1;
    if (v27 + 1 > 0xCCCCCCCCCCCCCCCLL)
      abort();
    v29 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - v26) >> 2);
    if (2 * v29 > v28)
      v28 = 2 * v29;
    if (v29 >= 0x666666666666666)
      v30 = 0xCCCCCCCCCCCCCCCLL;
    else
      v30 = v28;
    if (v30)
      v31 = (char *)sub_1000B58EC((uint64_t)(a1 + 3), v30);
    else
      v31 = 0;
    v32 = &v31[20 * v27];
    v33 = &v31[20 * v30];
    v34 = *a4;
    *((_DWORD *)v32 + 4) = *((_DWORD *)a4 + 4);
    *(_OWORD *)v32 = v34;
    v25 = v32 + 20;
    v36 = (char *)a1[1];
    v35 = (char *)a1[2];
    if (v35 != v36)
    {
      do
      {
        v37 = *(_OWORD *)(v35 - 20);
        *((_DWORD *)v32 - 1) = *((_DWORD *)v35 - 1);
        *(_OWORD *)(v32 - 20) = v37;
        v32 -= 20;
        v35 -= 20;
      }
      while (v35 != v36);
      v35 = (char *)a1[1];
    }
    a1[1] = v32;
    a1[2] = v25;
    a1[3] = v33;
    if (v35)
      operator delete(v35);
  }
  else
  {
    v24 = *a4;
    *(_DWORD *)(v23 + 16) = *((_DWORD *)a4 + 4);
    *(_OWORD *)v23 = v24;
    v25 = (char *)(v23 + 20);
  }
  a1[2] = v25;

}

void sub_1000B3BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a8);
  sub_1000B5690((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1000B42C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_1000B43F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  char v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  void *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id obj;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "length") == (id)7)
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subdataWithRange:", 1, 6));
  else
    v7 = v5;
  v8 = v7;
  if (objc_msgSend(v5, "length") == (id)7)
    v9 = *(_BYTE *)objc_msgSend(objc_retainAutorelease(v5), "bytes");
  else
    v9 = 0;
  v10 = "?";
  if (v9 == 1)
    v10 = "Random";
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v14 = *(void **)(v12 + 40);
  v13 = (id *)(v12 + 40);
  obj = v14;
  if (v9)
    v15 = v10;
  else
    v15 = "Public";
  if (*(_BYTE *)(*(_QWORD *)(v11 + 8) + 24))
    v16 = "";
  else
    v16 = ", ";
  v17 = CUPrintNSDataAddress(v8);
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  v19 = CUPrintNSObjectMasked(v6);
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  NSAppendPrintF_safe(&obj, "%s{Addr %s %@, IRK %@}", v16, v15, v18, v20);
  objc_storeStrong(v13, obj);

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
}

void sub_1000B4564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1000B459C(uint64_t a1)
{
  if (qword_100977FC0 != -1)
    dispatch_once(&qword_100977FC0, &stru_100918AA0);
  sub_100584478(qword_100977FB8, *(_QWORD *)(a1 + 40), *(void **)(a1 + 32), 0);
}

void sub_1000B45F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;
  __int16 v13;
  __int16 v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  void *v22;
  unsigned __int8 v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  int v31;
  int v32;
  __int16 v33;
  __int16 v34;
  char v35;
  unsigned __int8 v36;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", objc_msgSend(v6, "bleRSSIThresholdHint")));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", objc_msgSend(v6, "bleSensorRssiIncreaseScanThreshold")));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v6, "bleSensorIncreaseScanRate")));
  v10 = objc_msgSend(v6, "bleSensorEnableRssiIncreaseScan");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v6, "bleSensorIncreaseScanTimeout")));
  v23 = v10;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v6, "bleSensorTimeoutBetweenIncreaseScan")));
  if (objc_msgSend(v9, "intValue") == 75)
  {
    v13 = 40;
LABEL_5:
    v14 = 30;
    goto LABEL_6;
  }
  if (objc_msgSend(v9, "intValue") == 50)
  {
    v13 = 60;
    goto LABEL_5;
  }
  if (objc_msgSend(v9, "intValue") == 10)
  {
    v13 = 30;
    v14 = 300;
  }
  else
  {
    v17 = objc_msgSend(v9, "intValue");
    if (v17 == 3)
      v14 = 966;
    else
      v14 = 0;
    if (v17 == 3)
      v13 = 30;
    else
      v13 = 0;
  }
LABEL_6:
  if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "containsObject:", v5) & 1) == 0)
  {
    v24 = v8;
    v21 = v7;
    v22 = v5;
    v15 = objc_msgSend(v7, "intValue");
    if (v15)
      v16 = v15;
    else
      v16 = 4294967169;
    if (dword_100977ED8 <= 30
      && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
    {
      LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack _sensorTrackingUpdate]_block_invoke_2", 30, "SensorTracking start %@, RSSI %d", v5, v16);
    }
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120);
    v19 = sub_1000419F4();
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1000B498C;
    v25[3] = &unk_100918990;
    v30 = v18;
    v5 = v22;
    v26 = v22;
    v35 = *(_BYTE *)(a1 + 52);
    v20 = *(_DWORD *)(a1 + 48);
    v31 = v16;
    v32 = v20;
    v36 = v23;
    v27 = v24;
    v33 = v14;
    v34 = v13;
    v28 = v11;
    v29 = v12;
    sub_100041A34(v19, v25);
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

    v7 = v21;
    v8 = v24;
  }

}

void sub_1000B48D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1000B498C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  unsigned __int8 v5;
  char v6;
  void *v7;
  char v8;
  int v9;
  unsigned __int16 v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  id v17;

  if (qword_100977FC0 != -1)
    dispatch_once(&qword_100977FC0, &stru_100918AA0);
  v2 = qword_100977FB8;
  v3 = *(_QWORD *)(a1 + 64);
  v16 = *(unsigned __int8 *)(a1 + 84);
  v4 = *(char *)(a1 + 72);
  v5 = *(_BYTE *)(a1 + 76);
  v6 = *(_BYTE *)(a1 + 85);
  v7 = *(void **)(a1 + 32);
  v8 = objc_msgSend(*(id *)(a1 + 40), "intValue");
  v9 = *(_DWORD *)(a1 + 80);
  v10 = (unsigned __int16)objc_msgSend(*(id *)(a1 + 48), "intValue");
  HIWORD(v15) = (unsigned __int16)objc_msgSend(*(id *)(a1 + 56), "intValue");
  LOWORD(v15) = v10;
  v11 = sub_100582D18(v2, v3, v7, 0, 0, v16, v4, v5, 0, 0, 0, 0, v6, v8, v9, v15);
  if (v11)
  {
    if (dword_100977ED8 <= 90)
    {
      v12 = v11;
      if (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 90))
      {
        v13 = *(_QWORD *)(a1 + 32);
        v14 = CUPrintErrorCode((v12 + 310000));
        v17 = (id)objc_claimAutoreleasedReturnValue(v14);
        LogPrintF_safe(&dword_100977ED8, "-[CBStackBLEScannerBTStack _sensorTrackingUpdate]_block_invoke_3", 90, "### SensorTracking start failed: %@, %@", v13, v17);

      }
    }
  }
}

void sub_1000B4B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1000B4D50(uint64_t a1, id a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v12;
  id v13;
  id v14;
  void *v15;
  char v16;
  NSObject *v17;
  _QWORD v18[5];
  char v19;

  v12 = a3;
  v13 = a8;
  v14 = *(id *)(a1 + 8);
  v15 = v14;
  if (!a2 || objc_msgSend(v14, "sessionHandle") == a2)
  {
    if (v12)
    {
      *(_BYTE *)(a1 + 24) = 1;
      sub_100042450(a1, v12, a4);
    }
    else
    {
      v16 = *(_BYTE *)(*(_QWORD *)(a4 + 8) + 305);
      v17 = *(NSObject **)(a1 + 16);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_1000B4E4C;
      v18[3] = &unk_1009189E0;
      v19 = v16;
      v18[4] = v15;
      dispatch_async(v17, v18);
    }
  }

}

void sub_1000B4E34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_1000B4E4C(uint64_t a1)
{
  int v1;
  void *v2;

  v1 = *(unsigned __int8 *)(a1 + 40);
  v2 = *(void **)(a1 + 32);
  if (v1)
    return objc_msgSend(v2, "_aopBTBufferDrained");
  else
    return objc_msgSend(v2, "_advBufferDrained");
}

void sub_1000B4E60()
{
  if (dword_100977ED8 <= 30 && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
    LogPrintF_safe(&dword_100977ED8, "virtual void CBStackBLEScannerCPP::leZoneLost(const BT::ByteBuffer &, const BT::ByteBuffer &)", 30, "Zone lost");
}

void sub_1000B4EC0()
{
  if (dword_100977ED8 <= 30 && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
    LogPrintF_safe(&dword_100977ED8, "virtual void CBStackBLEScannerCPP::leScansPaused()", 30, "Scans paused");
}

void sub_1000B4F20()
{
  if (dword_100977ED8 <= 30 && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
    LogPrintF_safe(&dword_100977ED8, "virtual void CBStackBLEScannerCPP::leScansResumed()", 30, "Scans resumed");
}

void sub_1000B4F80(uint64_t a1, void *a2, int a3)
{
  id v5;
  const char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  NSObject *v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  _QWORD block[6];
  _BYTE v17[6];

  v5 = a2;
  if (dword_100977ED8 <= 30 && (dword_100977ED8 != -1 || _LogCategory_Initialize(&dword_100977ED8, 30)))
  {
    if ((a3 - 1) > 2)
      v6 = "?";
    else
      v6 = off_100918B40[(char)(a3 - 1)];
    LogPrintF_safe(&dword_100977ED8, "virtual void CBStackBLEScannerCPP::leSensorStateChanged(NSUUID * _Nonnull __strong, LESensorState, BOOL)", 30, "SensorTracking state changed: device %@, state %s", v5, v6);
  }
  if ((a3 & 0xFFFFFFFD) == 1)
  {
    v7 = objc_alloc_init((Class)CBDevice);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "UUIDString"));
    objc_msgSend(v7, "setIdentifier:", v8);

    objc_msgSend(v7, "setDiscoveryFlags:", 0x20000000);
    objc_msgSend(v7, "setInternalFlags:", 2);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100918AC0);
    v9 = sub_1000589DC((uint64_t)off_1009778C0, v5, 0);
    if (v9)
    {
      v17[0] = BYTE5(v9);
      v17[1] = BYTE4(v9);
      v17[2] = BYTE3(v9);
      v17[3] = BYTE2(v9);
      v17[4] = BYTE1(v9);
      v17[5] = v9;
      v10 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v17, 6);
      objc_msgSend(v7, "setBtAddressData:", v10);

    }
    v11 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000B51F4;
    block[3] = &unk_100918868;
    block[4] = v7;
    block[5] = a1;
    dispatch_async(v11, block);
    goto LABEL_17;
  }
  if (a3 == 2)
  {
    v12 = *(NSObject **)(a1 + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000B5200;
    v13[3] = &unk_100918868;
    v15 = a1;
    v14 = v5;
    dispatch_async(v12, v13);
    v7 = v14;
LABEL_17:

  }
}

void sub_1000B51BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_1000B51F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "deviceFound:", *(_QWORD *)(a1 + 32));
}

id sub_1000B5200(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "deviceLost:", *(_QWORD *)(a1 + 32));
}

void sub_1000B5218(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_1000B52A0(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1000B52A0(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1000B54A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000B54DC(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 48);
  sub_1000B5524(&v4);
  return a1;
}

void sub_1000B5524(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1000B5564((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void sub_1000B5564(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 96)
  {

    v5 = *(void **)(i - 96);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_1000B55B4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        sub_1000B5638((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1000B5638(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;

  *(_QWORD *)(a2 + 56) = &off_100918258;
  v3 = *(unsigned int **)(a2 + 64);
  if (v3)
    sub_100056AAC(v3);
  *(_QWORD *)(a2 + 40) = &off_100918258;
  v4 = *(unsigned int **)(a2 + 48);
  if (v4)
    sub_100056AAC(v4);

}

uint64_t sub_1000B5690(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;

  *(_QWORD *)(a1 + 56) = &off_100918258;
  v2 = *(unsigned int **)(a1 + 64);
  if (v2)
    sub_100056AAC(v2);
  *(_QWORD *)(a1 + 40) = &off_100918258;
  v3 = *(unsigned int **)(a1 + 48);
  if (v3)
    sub_100056AAC(v3);

  return a1;
}

_DWORD *sub_1000B56F0(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  _DWORD *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  char *v15;
  __int128 v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  _DWORD *v24;
  __int128 v25;
  int64_t v26;
  _DWORD *v27;
  __int128 v28;

  v6 = a2;
  v8 = a1[2];
  result = (_DWORD *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)result) >> 2) < a4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xCCCCCCCCCCCCCCCLL)
      abort();
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x666666666666666)
      v12 = 0xCCCCCCCCCCCCCCCLL;
    else
      v12 = v11;
    sub_1000B58A0(a1, v12);
    v14 = (_DWORD *)a1[1];
    v13 = (_DWORD **)(a1 + 1);
    result = v14;
    v15 = (char *)v14;
    if (v6 != a3)
    {
      v15 = (char *)result;
      do
      {
        v16 = *v6;
        *((_DWORD *)v15 + 4) = *((_DWORD *)v6 + 4);
        *(_OWORD *)v15 = v16;
        v15 += 20;
        v6 = (__int128 *)((char *)v6 + 20);
      }
      while (v6 != a3);
    }
LABEL_26:
    v26 = v15 - (char *)result;
    goto LABEL_27;
  }
  v18 = (_DWORD *)a1[1];
  v13 = (_DWORD **)(a1 + 1);
  v17 = v18;
  v19 = 0xCCCCCCCCCCCCCCCDLL * (v18 - result);
  if (v19 >= a4)
  {
    v15 = (char *)result;
    if (a2 != a3)
    {
      v27 = result;
      do
      {
        v28 = *v6;
        v27[4] = *((_DWORD *)v6 + 4);
        *(_OWORD *)v27 = v28;
        v27 += 5;
        v6 = (__int128 *)((char *)v6 + 20);
        v15 += 20;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  v20 = (__int128 *)((char *)a2 + 20 * v19);
  if (v17 != result)
  {
    v21 = 20 * v19;
    do
    {
      v22 = *v6;
      result[4] = *((_DWORD *)v6 + 4);
      *(_OWORD *)result = v22;
      result += 5;
      v6 = (__int128 *)((char *)v6 + 20);
      v21 -= 20;
    }
    while (v21);
    result = *v13;
  }
  v23 = (char *)result;
  if (v20 != a3)
  {
    v23 = (char *)result;
    v24 = result;
    do
    {
      v25 = *v20;
      v24[4] = *((_DWORD *)v20 + 4);
      *(_OWORD *)v24 = v25;
      v24 += 5;
      v20 = (__int128 *)((char *)v20 + 20);
      v23 += 20;
    }
    while (v20 != a3);
  }
  v26 = v23 - (char *)result;
LABEL_27:
  *v13 = (_DWORD *)((char *)result + v26);
  return result;
}

char *sub_1000B58A0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    abort();
  result = (char *)sub_1000B58EC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

void *sub_1000B58EC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    sub_10007ABD4();
  return operator new(20 * a2);
}

uint64_t sub_1000B5930(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;

  *(_QWORD *)(a1 + 32) = &off_100918258;
  v2 = *(unsigned int **)(a1 + 40);
  if (v2)
    sub_100056AAC(v2);
  *(_QWORD *)(a1 + 16) = &off_100918258;
  v3 = *(unsigned int **)(a1 + 24);
  if (v3)
    sub_100056AAC(v3);

  return a1;
}

uint64_t sub_1000B5990(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    abort();
  v6 = (uint64_t)(a1 + 2);
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555)
    v7 = 0x2AAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_1000B5B70((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[96 * v2];
  v14 = &v8[96 * v7];
  sub_1000B5A98(v6, (uint64_t)v12, a2);
  v13 = v12 + 96;
  sub_1000470AC(a1, &v11);
  v9 = a1[1];
  sub_100047148(&v11);
  return v9;
}

void sub_1000B5A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100047148((void **)va);
  _Unwind_Resume(a1);
}

void sub_1000B5A98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v5;
  *(_WORD *)(a2 + 8) = *((_WORD *)a3 + 4);
  v6 = a3[3];
  *(_QWORD *)(a2 + 16) = &off_100918258;
  *(_QWORD *)(a2 + 24) = v6;
  if (v6)
    sub_10003C37C(v6);
  v7 = a3[5];
  *(_QWORD *)(a2 + 32) = &off_100918258;
  *(_QWORD *)(a2 + 40) = v7;
  if (v7)
    sub_10003C37C(v7);
  v8 = *((_DWORD *)a3 + 12);
  *(_BYTE *)(a2 + 52) = *((_BYTE *)a3 + 52);
  *(_DWORD *)(a2 + 48) = v8;
  v9 = a3[7];
  a3[7] = 0;
  *(_QWORD *)(a2 + 56) = v9;
  LODWORD(v9) = *((_DWORD *)a3 + 16);
  *(_BYTE *)(a2 + 68) = *((_BYTE *)a3 + 68);
  *(_DWORD *)(a2 + 64) = v9;
  v10 = a3[9];
  a3[9] = 0;
  *(_QWORD *)(a2 + 72) = v10;
  v11 = a3[10];
  *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
  *(_QWORD *)(a2 + 80) = v11;
}

void sub_1000B5B44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;

  *(_QWORD *)(v1 + 16) = v2;
  v4 = *(unsigned int **)(v1 + 24);
  if (v4)
    sub_100056AAC(v4);

  _Unwind_Resume(a1);
}

void *sub_1000B5B70(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    sub_10007ABD4();
  return operator new(96 * a2);
}

void sub_1000B5BB4(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    sub_1000B5BF8(v4, i - 96);
  }
}

void sub_1000B5BF8(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;

  *(_QWORD *)(a2 + 32) = &off_100918258;
  v3 = *(unsigned int **)(a2 + 40);
  if (v3)
    sub_100056AAC(v3);
  *(_QWORD *)(a2 + 16) = &off_100918258;
  v4 = *(unsigned int **)(a2 + 24);
  if (v4)
    sub_100056AAC(v4);

}

uint64_t sub_1000B5C50(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v2 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x276276276276276)
    abort();
  v6 = (uint64_t)(a1 + 2);
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL)
    v7 = 0x276276276276276;
  else
    v7 = v3;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_1000B5ED0((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[104 * v2];
  v14 = &v8[104 * v7];
  sub_1000B5D70(v6, (uint64_t)v12, a2);
  v13 = v12 + 104;
  sub_1000B5E34(a1, &v11);
  v9 = a1[1];
  sub_1000B5F18(&v11);
  return v9;
}

void sub_1000B5D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000B5F18((void **)va);
  _Unwind_Resume(a1);
}

void sub_1000B5D70(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_OWORD *)a2 = v5;
  v6 = *((_QWORD *)a3 + 4);
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = &off_100918258;
  v7 = *((_QWORD *)a3 + 6);
  *(_QWORD *)(a2 + 48) = v7;
  if (v7)
    sub_10003C37C(v7);
  v8 = *((_QWORD *)a3 + 8);
  *(_QWORD *)(a2 + 56) = &off_100918258;
  *(_QWORD *)(a2 + 64) = v8;
  if (v8)
    sub_10003C37C(v8);
  v9 = *((_QWORD *)a3 + 9);
  *(_DWORD *)(a2 + 80) = *((_DWORD *)a3 + 20);
  *(_QWORD *)(a2 + 72) = v9;
  v10 = *((_QWORD *)a3 + 11);
  *((_QWORD *)a3 + 11) = 0;
  *(_QWORD *)(a2 + 88) = v10;
  *(_DWORD *)(a2 + 96) = *((_DWORD *)a3 + 24);
}

void sub_1000B5E00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;

  *(_QWORD *)(v1 + 40) = v2;
  v4 = *(unsigned int **)(v1 + 48);
  if (v4)
    sub_100056AAC(v4);

  _Unwind_Resume(a1);
}

void sub_1000B5E34(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  v6 = a2[1];
  if (v4 != (__int128 *)*a1)
  {
    do
    {
      v6 -= 104;
      v4 = (__int128 *)((char *)v4 - 104);
      sub_1000B5D70((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *sub_1000B5ED0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    sub_10007ABD4();
  return operator new(104 * a2);
}

void **sub_1000B5F18(void **a1)
{
  sub_1000B5F48(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1000B5F48(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 104;
    sub_1000B5638(v4, i - 104);
  }
}

uint64_t sub_1000B5F8C(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14, char a15)
{
  id v22;
  id v23;
  id v24;
  id v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v22 = a2;
  v23 = a3;
  v24 = v22;
  *(_QWORD *)a1 = v24;
  v25 = v23;
  *(_QWORD *)(a1 + 8) = v25;
  *(_WORD *)(a1 + 16) = 0;
  v26 = *(_DWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 20) = *(_OWORD *)a4;
  *(_DWORD *)(a1 + 36) = v26;
  v27 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a1 + 40) = &off_100918258;
  *(_QWORD *)(a1 + 48) = v27;
  if (v27)
    sub_10003C37C(v27);
  v28 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(a1 + 56) = &off_100918258;
  *(_QWORD *)(a1 + 64) = v28;
  if (v28)
    sub_10003C37C(v28);
  *(_BYTE *)(a1 + 72) = a7;
  *(_BYTE *)(a1 + 73) = a8;
  *(_BYTE *)(a1 + 74) = a9;
  *(_BYTE *)(a1 + 75) = a10;
  *(_BYTE *)(a1 + 76) = a11;
  *(_BYTE *)(a1 + 77) = a13;
  *(_BYTE *)(a1 + 78) = a14;
  *(_BYTE *)(a1 + 79) = a15;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1;

  return a1;
}

void sub_1000B6094(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  unsigned int *v6;

  *(_QWORD *)(v1 + 40) = v4;
  v6 = *(unsigned int **)(v1 + 48);
  if (v6)
    sub_100056AAC(v6);

  _Unwind_Resume(a1);
}

void sub_1000B60D0(id a1)
{
  operator new();
}

void sub_1000B6110()
{
  operator delete();
}

void sub_1000B6134(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        sub_1000B5BF8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1000B61B8(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_1000B58A0(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
      *(_OWORD *)v7 = v8;
      v7 += 20;
      a2 = (__int128 *)((char *)a2 + 20);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1000B6218(id a1)
{
  operator new();
}

void sub_1000B6258()
{
  operator delete();
}

void sub_1000B627C(id a1)
{
  operator new();
}

void sub_1000B62BC()
{
  operator delete();
}

void sub_1000B62E0(id a1)
{
  operator new();
}

void sub_1000B6320()
{
  operator delete();
}

void sub_1000B6344(id a1)
{
  operator new();
}

void sub_1000B6384()
{
  operator delete();
}

void sub_1000B63A8(id a1)
{
  operator new();
}

void sub_1000B63E8()
{
  operator delete();
}

uint64_t sub_1000B640C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned __int8 v7;
  unsigned __int8 *v8;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  v2 = a1 + 128;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v3 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;

  atomic_store(0, (unsigned __int8 *)(a1 + 96));
  v7 = 7;
  v8 = &v7;
  v4 = sub_1000B655C(v2, &v7, (uint64_t)&unk_10073873C, &v8);
  *(_QWORD *)((char *)v4 + 20) = 3263299584;
  *((_BYTE *)v4 + 28) = 0;
  v4[4] = 0xC2340000C2820000;
  v7 = 22;
  v8 = &v7;
  v5 = sub_1000B655C(v2, &v7, (uint64_t)&unk_10073873C, &v8);
  *(_QWORD *)((char *)v5 + 20) = 3264217088;
  *((_BYTE *)v5 + 28) = 0;
  v5[4] = 0xC2700000C2A00000;
  return a1;
}

void sub_1000B6514(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  sub_1000B69C0(v2);

  v4 = *(void **)(v1 + 8);
  if (v4)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_1000B655C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = *a2;
      if (v7 <= v6)
        v9 = v6 % v7;
    }
    else
    {
      v9 = ((_DWORD)v7 - 1) & v6;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v6)
          {
            if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v6)
              return v11;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= v7)
                v12 %= v7;
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v6;
  *((_BYTE *)v11 + 16) = **a4;
  *((_DWORD *)v11 + 9) = 0;
  *(_QWORD *)((char *)v11 + 20) = 0;
  *(_QWORD *)((char *)v11 + 28) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_1000B678C(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v9 = v6 % v7;
      else
        v9 = v6;
    }
    else
    {
      v9 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v9) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1000B6778(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000B678C(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_1000B6868(a1, prime);
  }
}

void sub_1000B6868(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_10007ABD4();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_1000B69C0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_1000B6A08(id a1)
{
  operator new();
}

void sub_1000B6A48()
{
  operator delete();
}

_QWORD *sub_1000B6A6C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;

  if (a4)
  {
    v6 = (uint64_t)result;
    sub_1000B6ABC(result, a4);
    return (_QWORD *)sub_1000587D4(v6, a2, a3);
  }
  return result;
}

char *sub_1000B6ABC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    abort();
  result = (char *)sub_1000B5B70((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

uint64_t *sub_1000B6B08(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1000B6B5C(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_1000B6B44(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100056B54(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1000B6B5C(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1000B6BE0(v5, v6, v4 + 32, (uint64_t)(v4 + 32));
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1000B6BE0(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;
  unsigned __int8 *v10;

  v9 = 0;
  v10 = 0;
  v6 = (uint64_t **)sub_1000B6C6C(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1000B6DF0((uint64_t)a1, a4, v8);
    sub_100004078(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

unsigned __int8 *sub_1000B6C6C(_QWORD *a1, uint64_t *a2, unsigned __int8 **a3, uint64_t *a4, unsigned __int8 *a5)
{
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t *v16;
  BOOL v17;
  unsigned __int8 *v18;

  v9 = (unsigned __int8 *)(a1 + 1);
  if (a1 + 1 == a2 || sub_100068844(a5, (unsigned __int8 *)a2 + 32))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (unsigned __int8 *)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 8;
      }
      else
      {
        *a3 = (unsigned __int8 *)a2;
        return (unsigned __int8 *)a2;
      }
    }
    v11 = (unsigned __int8 *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (unsigned __int8 *)v16[2];
        v17 = *(_QWORD *)v12 == (_QWORD)v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (sub_100068844(v12 + 32, a5))
      goto LABEL_16;
    return (unsigned __int8 *)sub_10009C49C((uint64_t)a1, a3, a5);
  }
  if (sub_100068844((unsigned __int8 *)a2 + 32, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (unsigned __int8 *)a2[1];
      do
      {
        v15 = v14;
        v14 = *(unsigned __int8 **)v14;
      }
      while (v14);
    }
    else
    {
      v18 = (unsigned __int8 *)a2;
      do
      {
        v15 = (unsigned __int8 *)*((_QWORD *)v18 + 2);
        v17 = *(_QWORD *)v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_100068844(a5, v15 + 32))
        return (unsigned __int8 *)sub_10009C49C((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (unsigned __int8 *)a2;
    }
    return (unsigned __int8 *)a4;
  }
  *a3 = (unsigned __int8 *)a2;
  *a4 = (uint64_t)a2;
  return (unsigned __int8 *)a4;
}

void sub_1000B6DF0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _OWORD *v7;
  uint64_t v8;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = operator new(0x48uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  v7[2] = *(_OWORD *)a2;
  *((_DWORD *)v7 + 12) = *(_DWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)v7 + 7) = &off_100918258;
  *((_QWORD *)v7 + 8) = v8;
  if (v8)
    sub_10003C37C(v8);
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1000B6E7C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  *v1 = 0;
  sub_1000B6E98(v2, v3);
  _Unwind_Resume(a1);
}

void sub_1000B6E98(uint64_t a1, _QWORD *__p)
{
  unsigned int *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    __p[7] = &off_100918258;
    v3 = (unsigned int *)__p[8];
    if (v3)
      sub_100056AAC(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_1000B77E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1000B7844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id obj;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v3 + 40);
  NSAppendPrintF_safe(&obj, "        Matched: %@\n", a3);
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_1000B7890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id obj;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v3 + 40);
  NSAppendPrintF_safe(&obj, "        Unmatched: %@\n", a3);
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_1000B78DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id obj;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v3 + 40);
  NSAppendPrintF_safe(&obj, "        SpatialDeviceHistory: %@\n", a3);
  objc_storeStrong((id *)(v3 + 40), obj);
}

void sub_1000B80E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  id v9;
  void *v10;

  v3 = a2;
  v4 = v3;
  if (dword_100977FD8 <= 30)
  {
    v9 = v3;
    if (dword_100977FD8 != -1 || (v8 = _LogCategory_Initialize(&dword_100977FD8, 30), v4 = v9, v8))
    {
      v5 = *(unsigned int *)(a1 + 40);
      v6 = CUPrintNSError(v4);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _remoteInvalidate]_block_invoke", 30, "Remote invalidate sent: CID 0x%X, %@", v5, v7);

      v4 = v9;
    }
  }
  if (!*(_BYTE *)(a1 + 44))
  {
    v10 = v4;
    objc_msgSend(*(id *)(a1 + 32), "invalidate");
    v4 = v10;
  }

}

void sub_1000B8A90(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  int v9;
  id v10;

  v3 = a2;
  v4 = v3;
  if (a1[4] == *(_QWORD *)(a1[5] + 152))
  {
    if (v3)
    {
      if (dword_100977FD8 > 90)
        goto LABEL_2;
      v10 = v3;
      if (dword_100977FD8 == -1)
      {
        v8 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v4 = v10;
        if (!v8)
          goto LABEL_2;
      }
      v5 = a1[6];
      v6 = CUPrintNSError(v4);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcReceivedMessage:remoteDevice:]_block_invoke", 90, "### Remote client start failed: peer %@, %@", v5, v7);

    }
    else
    {
      if (dword_100977FD8 > 30)
        goto LABEL_2;
      v10 = 0;
      if (dword_100977FD8 == -1)
      {
        v9 = _LogCategory_Initialize(&dword_100977FD8, 30);
        v4 = 0;
        if (!v9)
          goto LABEL_2;
      }
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcReceivedMessage:remoteDevice:]_block_invoke", 30, "Remote client started: peer %@", a1[6]);
    }
    v4 = v10;
  }
LABEL_2:

}

void sub_1000B8BA8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t Reply;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  _QWORD applier[5];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (dword_100977FD8 <= 20 && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 20)))
  {
    v10 = CUPrintNSObjectOneLine(v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = CUPrintNSError(v9);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcReceivedMessage:remoteDevice:]_block_invoke_2", 20, "Remote request response: %@, %@", v11, v13);

  }
  v22 = v7;
  if (!v22 || v9)
  {
    v17 = *(void **)(a1 + 32);
    if (v9)
    {
      objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", v9, *(_QWORD *)(a1 + 40));
    }
    else
    {
      v20 = CBErrorF(4294960596, "No response, no error");
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      objc_msgSend(v17, "_xpcSendReplyError:request:", v21, *(_QWORD *)(a1 + 40));

    }
  }
  else
  {
    v14 = (void *)_CFXPCCreateXPCObjectFromCFObject(v22);
    if (v14)
    {
      Reply = CUXPCDictionaryCreateReply(*(_QWORD *)(a1 + 40));
      v16 = (void *)objc_claimAutoreleasedReturnValue(Reply);
      applier[0] = _NSConcreteStackBlock;
      applier[1] = 3221225472;
      applier[2] = sub_1000B8D88;
      applier[3] = &unk_1009190E8;
      applier[4] = v16;
      xpc_dictionary_apply(v14, applier);
      objc_msgSend(*(id *)(a1 + 32), "_xpcSendReply:", v16);
    }
    else
    {
      v18 = *(void **)(a1 + 32);
      v19 = CBErrorF(4294960579, "CF to XPC failed");
      v16 = (void *)objc_claimAutoreleasedReturnValue(v19);
      objc_msgSend(v18, "_xpcSendReplyError:request:", v16, *(_QWORD *)(a1 + 40));
    }

  }
}

uint64_t sub_1000B8D88(uint64_t a1, const char *a2, void *a3)
{
  xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), a2, a3);
  return 1;
}

void sub_1000B8DA4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  id v10;

  v3 = a2;
  v4 = v3;
  if (dword_100977FD8 <= 20)
  {
    v10 = v3;
    if (dword_100977FD8 != -1 || (v9 = _LogCategory_Initialize(&dword_100977FD8, 20), v4 = v10, v9))
    {
      v5 = CUPrintNSObjectOneLine(*(_QWORD *)(a1 + 32));
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v7 = CUPrintNSError(v10);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcReceivedMessage:remoteDevice:]_block_invoke_4", 20, "Remote event sent: %@, %@", v6, v8);

      v4 = v10;
    }
  }

}

void sub_1000B9028(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  id v10;

  v3 = a2;
  v4 = v3;
  if (dword_100977FD8 <= 20)
  {
    v10 = v3;
    if (dword_100977FD8 != -1 || (v9 = _LogCategory_Initialize(&dword_100977FD8, 20), v4 = v10, v9))
    {
      v5 = CUPrintNSObjectOneLine(*(_QWORD *)(a1 + 32));
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v7 = CUPrintNSError(v10);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcSendEvent:]_block_invoke", 20, "Remote event sent: %@, %@", v6, v8);

      v4 = v10;
    }
  }

}

id sub_1000B9848(id result)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)result + 5);
  if (*((_QWORD *)result + 4) == v1[9])
    return objc_msgSend(v1, "_xpcPowerStateChanged:", objc_msgSend(*((id *)result + 5), "_powerStateForClient"));
  return result;
}

void sub_1000B988C(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  unsigned __int8 v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  unsigned __int8 v15;
  id v16;

  v1 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(v1 + 72))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 136), "addressMonitor"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "connectableAddressData"));

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "advertisingAddressDataConnectable"));
    v16 = v4;
    v6 = v5;
    if (v16 == v6)
    {

    }
    else
    {
      if ((v16 == 0) == (v6 != 0))
      {

LABEL_9:
        objc_msgSend(*(id *)(a1 + 32), "setAdvertisingAddressDataConnectable:", v16);
        v8 = 1;
LABEL_10:
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 136), "addressMonitor"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "nonConnectableAddressData"));

        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "advertisingAddressDataNonConnectable"));
        v12 = v10;
        v13 = v11;
        if (v12 == v13)
        {

        }
        else
        {
          v14 = v13;
          if ((v12 == 0) == (v13 != 0))
          {

LABEL_18:
            objc_msgSend(*(id *)(a1 + 32), "setAdvertisingAddressDataNonConnectable:", v12);
LABEL_19:
            objc_msgSend(*(id *)(a1 + 40), "_xpcAdvertisingAddressChanged");
LABEL_20:

            return;
          }
          v15 = objc_msgSend(v12, "isEqual:", v13);

          if ((v15 & 1) == 0)
            goto LABEL_18;
        }
        if (!v8)
          goto LABEL_20;
        goto LABEL_19;
      }
      v7 = objc_msgSend(v16, "isEqual:", v6);

      if ((v7 & 1) == 0)
        goto LABEL_9;
    }
    v8 = 0;
    goto LABEL_10;
  }
}

void sub_1000B9CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  (*(void (**)(uint64_t))(v13 + 16))(v13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000B9D34(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBAdvertiserUpdate:]_block_invoke", 90, "### CBAdvertiser Update failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000BA298(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 152), 8);
  _Unwind_Resume(a1);
}

id sub_1000BA2E8(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBConnectionActivate:]_block_invoke", 90, "### CBConnection activate failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

_QWORD *sub_1000BA3B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v2 == result[10])
    return objc_msgSend(result, "_xpcCBConnection:pairingCompletedWithDevice:error:");
  return result;
}

_QWORD *sub_1000BA3D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v2 == result[10])
    return objc_msgSend(result, "_xpcCBConnection:pairingPromptWithPairingInfo:");
  return result;
}

_QWORD *sub_1000BA3EC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[10])
    return objc_msgSend(result, "_xpcSendEvent:", a2);
  return result;
}

void sub_1000BA408(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t Reply;
  void *v10;
  id v11;

  v3 = a2;
  v11 = v3;
  if (v3)
  {
    v4 = v3;
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 != -1 || (v8 = _LogCategory_Initialize(&dword_100977FD8, 90), v4 = v11, v8))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v6 = CUPrintNSError(v4);
        v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
        LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBConnectionActivate:]_block_invoke_5", 90, "### Activate failed: %@, %@", v5, v7);

        v4 = v11;
      }
    }
    objc_msgSend(*(id *)(a1 + 40), "_xpcSendReplyError:request:", v4, *(_QWORD *)(a1 + 48));
  }
  else
  {
    if (dword_100977FD8 <= 30
      && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 30)))
    {
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBConnectionActivate:]_block_invoke_5", 30, "Activated: %@", *(_QWORD *)(a1 + 32));
    }
    Reply = CUXPCDictionaryCreateReply(*(_QWORD *)(a1 + 48));
    v10 = (void *)objc_claimAutoreleasedReturnValue(Reply);
    objc_msgSend(*(id *)(a1 + 40), "_xpcSendReply:", v10);

  }
}

void sub_1000BA544(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t Reply;
  void *v10;
  id v11;

  v3 = a2;
  v11 = v3;
  if (v3)
  {
    v4 = v3;
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 != -1 || (v8 = _LogCategory_Initialize(&dword_100977FD8, 90), v4 = v11, v8))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v6 = CUPrintNSError(v4);
        v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
        LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBConnectionActivate:]_block_invoke_6", 90, "### Activate failed: %@, %@", v5, v7);

        v4 = v11;
      }
    }
    objc_msgSend(*(id *)(a1 + 40), "_xpcSendReplyError:request:", v4, *(_QWORD *)(a1 + 48));
  }
  else
  {
    if (dword_100977FD8 <= 30
      && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 30)))
    {
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBConnectionActivate:]_block_invoke_6", 30, "Activated: %@", *(_QWORD *)(a1 + 32));
    }
    Reply = CUXPCDictionaryCreateReply(*(_QWORD *)(a1 + 48));
    v10 = (void *)objc_claimAutoreleasedReturnValue(Reply);
    objc_msgSend(*(id *)(a1 + 40), "_xpcSendReply:", v10);

  }
}

void sub_1000BA964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  (*(void (**)(uint64_t))(v13 + 16))(v13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000BA9A8(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBConnectionDisconnect:]_block_invoke", 90, "### CBConnection disconnect failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000BAEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000BAEF0(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBConnectionPairingContinue:]_block_invoke", 90, "### CBConnection pairing continue failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

id sub_1000BB3A8(id result)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)result + 5);
  if (*((_QWORD *)result + 4) == v1[11])
    return objc_msgSend(v1, "_xpcPowerStateChanged:", objc_msgSend(*((id *)result + 5), "_powerStateForClient"));
  return result;
}

void sub_1000BB3EC(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(v1 + 88))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 136), "stackController"));
    objc_msgSend((id)v1, "_xpcDiscoverableStateChanged:", objc_msgSend(v2, "discoverableState"));

  }
}

void sub_1000BB450(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(v1 + 88))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 136), "stackController"));
    objc_msgSend((id)v1, "_xpcInquiryStateChanged:", objc_msgSend(v2, "inquiryState"));

  }
}

_QWORD *sub_1000BB4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v6 == result[11])
    return objc_msgSend(result, "_xpcReceivedRelayMessageType:messageData:conduitDevice:sourceDevice:", a4, a5, a2, a3);
  return result;
}

_QWORD *sub_1000BB4DC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[11])
    return objc_msgSend(result, "_xpcTipiChanged:", a2);
  return result;
}

void sub_1000BC1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  (*(void (**)(void))(a14 + 16))();
  _Block_object_dispose((const void *)(v14 - 136), 8);
  _Unwind_Resume(a1);
}

id sub_1000BC22C(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcModifyControllerSettings:]_block_invoke", 90, "### ModifyControllerSettings failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000BC5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  (*(void (**)(uint64_t))(v14 + 16))(v14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000BC5F0(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcGetDevices:]_block_invoke", 90, "### GetDevices failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000BC95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  (*(void (**)(uint64_t))(v13 + 16))(v13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000BC99C(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcDeleteDevice:]_block_invoke", 90, "### DeleteDevice failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000BD160(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 160), 8);
  _Unwind_Resume(a1);
}

id sub_1000BD1B4(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcModifyDevice:]_block_invoke", 90, "### ModifyDevice failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000BD27C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t Reply;
  void *v11;
  id v12;

  v3 = a2;
  v12 = v3;
  if (dword_100977FD8 <= 30)
  {
    if (dword_100977FD8 != -1 || (v9 = _LogCategory_Initialize(&dword_100977FD8, 30), v3 = v12, v9))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = CUPrintNSObjectOneLine(*(_QWORD *)(a1 + 40));
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v7 = CUPrintNSError(v12);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcModifyDevice:]_block_invoke_2", 30, "ModifyDevice CnxPri completed: %@, %@, %@", v4, v6, v8);

      v3 = v12;
    }
  }
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 48), "_xpcSendReplyError:request:", v3, *(_QWORD *)(a1 + 56));
  }
  else
  {
    Reply = CUXPCDictionaryCreateReply(*(_QWORD *)(a1 + 56));
    v11 = (void *)objc_claimAutoreleasedReturnValue(Reply);
    if (v11)
    {
      objc_msgSend(*(id *)(a1 + 48), "_xpcSendReply:", v11);
    }
    else if (dword_100977FD8 <= 90
           && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 90)))
    {
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcModifyDevice:]_block_invoke_2", 90, "### ModifyDevice create reply failed");
    }

  }
}

void sub_1000BD670(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

id sub_1000BD6A8(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcPerformDeviceRequest:]_block_invoke", 90, "### PerformDeviceRequest failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000BD770(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t Reply;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;

  v17 = a2;
  v5 = a3;
  if (dword_100977FD8 <= 30 && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 30)))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = CUPrintNSError(v5);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcPerformDeviceRequest:]_block_invoke_2", 30, "PerformDeviceRequest completed: %@, %@, %@", v6, v7, v9);

  }
  v10 = v5;
  if (v10)
  {
    objc_msgSend(*(id *)(a1 + 48), "_xpcSendReplyError:request:", v10, *(_QWORD *)(a1 + 56));
  }
  else if (v17)
  {
    Reply = CUXPCDictionaryCreateReply(*(_QWORD *)(a1 + 56));
    v12 = objc_claimAutoreleasedReturnValue(Reply);
    v13 = (void *)v12;
    if (v12)
    {
      CUXPCEncodeObject(v12, "dvRs", v17, 0);
      objc_msgSend(*(id *)(a1 + 48), "_xpcSendReply:", v13);
    }
    else if (dword_100977FD8 <= 90
           && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 90)))
    {
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcPerformDeviceRequest:]_block_invoke_2", 90, "### PerformDeviceRequest create reply failed");
    }

  }
  else
  {
    v14 = *(void **)(a1 + 48);
    v15 = CBErrorF(4294960534, "No error, but no response");
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    objc_msgSend(v14, "_xpcSendReplyError:request:", v16, *(_QWORD *)(a1 + 56));

  }
}

void sub_1000BF21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  (*(void (**)(void))(a17 + 16))();
  _Block_object_dispose(&STACK[0x2C0], 8);
  _Unwind_Resume(a1);
}

id sub_1000BF2CC(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcDiagnosticControl:]_block_invoke", 90, "### DiagnosticControl failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

uint64_t sub_1000BF600(uint64_t result)
{
  uint64_t v1;

  if (dword_100977FD8 <= 30)
  {
    v1 = result;
    if (dword_100977FD8 != -1)
      return LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcDiagnosticAdvertiser]_block_invoke", 30, "Diags: advertiser invalidated: %@", *(_QWORD *)(v1 + 32));
    result = _LogCategory_Initialize(&dword_100977FD8, 30);
    if ((_DWORD)result)
      return LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcDiagnosticAdvertiser]_block_invoke", 30, "Diags: advertiser invalidated: %@", *(_QWORD *)(v1 + 32));
  }
  return result;
}

void sub_1000BF67C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  id v9;

  v9 = a2;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 136), "testAdvertiser"));

  v5 = v9;
  if (v3 == v4)
  {
    if (v9)
    {
      if (dword_100977FD8 <= 30
        && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 30)))
      {
        v6 = CUPrintNSError(v9);
        v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
        LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcDiagnosticAdvertiser]_block_invoke_2", 30, "### Diags: advertiser failed: %@", v7);

      }
      objc_msgSend(*(id *)(a1 + 32), "invalidate");
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 136), "setTestAdvertiser:", 0);
      goto LABEL_11;
    }
    if (dword_100977FD8 <= 30)
    {
      if (dword_100977FD8 != -1 || (v8 = _LogCategory_Initialize(&dword_100977FD8, 30), v5 = 0, v8))
      {
        LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcDiagnosticAdvertiser]_block_invoke_2", 30, "Diags: advertiser activated: %@", *(_QWORD *)(a1 + 32));
LABEL_11:
        v5 = v9;
      }
    }
  }

}

void sub_1000BF930(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  id v9;

  v9 = a2;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 136), "testAssertion"));

  v5 = v9;
  if (v3 == v4)
  {
    if (v9)
    {
      if (dword_100977FD8 <= 30
        && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 30)))
      {
        v6 = CUPrintNSError(v9);
        v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
        LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcDiagnosticAssertion]_block_invoke", 30, "### Diags: assertion failed: %@", v7);

      }
      objc_msgSend(*(id *)(a1 + 32), "invalidate");
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 136), "setTestAssertion:", 0);
      goto LABEL_11;
    }
    if (dword_100977FD8 <= 30)
    {
      if (dword_100977FD8 != -1 || (v8 = _LogCategory_Initialize(&dword_100977FD8, 30), v5 = 0, v8))
      {
        LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcDiagnosticAssertion]_block_invoke", 30, "Diags: assertion activated: %@", *(_QWORD *)(a1 + 32));
LABEL_11:
        v5 = v9;
      }
    }
  }

}

void sub_1000BFC7C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 136), "testDiscovery"));

  if (v3 == v4
    && dword_100977FD8 <= 30
    && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 30)))
  {
    LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcDiagnosticDiscovery]_block_invoke", 30, "Diags: discovery found: %@", v5);
  }

}

void sub_1000BFD24(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 136), "testDiscovery"));

  if (v3 == v4
    && dword_100977FD8 <= 30
    && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 30)))
  {
    LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcDiagnosticDiscovery]_block_invoke_2", 30, "Diags: discovery lost: %@", v5);
  }

}

uint64_t sub_1000BFDCC(uint64_t result)
{
  uint64_t v1;

  if (dword_100977FD8 <= 30)
  {
    v1 = result;
    if (dword_100977FD8 != -1)
      return LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcDiagnosticDiscovery]_block_invoke_3", 30, "Diags: discovery invalidated: %@", *(_QWORD *)(v1 + 32));
    result = _LogCategory_Initialize(&dword_100977FD8, 30);
    if ((_DWORD)result)
      return LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcDiagnosticDiscovery]_block_invoke_3", 30, "Diags: discovery invalidated: %@", *(_QWORD *)(v1 + 32));
  }
  return result;
}

void sub_1000BFE48(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  id v9;

  v9 = a2;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 136), "testDiscovery"));

  v5 = v9;
  if (v3 == v4)
  {
    if (v9)
    {
      if (dword_100977FD8 <= 30
        && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 30)))
      {
        v6 = CUPrintNSError(v9);
        v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
        LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcDiagnosticDiscovery]_block_invoke_4", 30, "### Diags: discovery failed: %@", v7);

      }
      objc_msgSend(*(id *)(a1 + 32), "invalidate");
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 136), "setTestDiscovery:", 0);
      goto LABEL_11;
    }
    if (dword_100977FD8 <= 30)
    {
      if (dword_100977FD8 != -1 || (v8 = _LogCategory_Initialize(&dword_100977FD8, 30), v5 = 0, v8))
      {
        LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcDiagnosticDiscovery]_block_invoke_4", 30, "Diags: discovery activated: %@", *(_QWORD *)(a1 + 32));
LABEL_11:
        v5 = v9;
      }
    }
  }

}

void sub_1000C01F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000C0238(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcDiagnosticLog:]_block_invoke", 90, "### DiagnosticLog failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C09EC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  const char *v6;
  xpc_object_t reply;
  uint64_t v8;
  const char *v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;

  v3 = a2;
  v15 = v3;
  if (v3)
  {
    v4 = v3;
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 != -1 || (v10 = _LogCategory_Initialize(&dword_100977FD8, 90), v4 = v15, v10))
      {
        v5 = *(int *)(a1 + 48);
        if (v5 > 2)
          v6 = "?";
        else
          v6 = off_100919338[v5];
        v11 = CUPrintNSError(v4);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcSetLowPowerMode:]_block_invoke", 90, "### SetLowPowerMode failed: %s, %@", v6, v12);

        v4 = v15;
      }
    }
    objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", v4, *(_QWORD *)(a1 + 40));
  }
  else
  {
    reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 40));
    if (dword_100977FD8 <= 30
      && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 30)))
    {
      v8 = *(int *)(a1 + 48);
      if (v8 > 2)
        v9 = "?";
      else
        v9 = off_100919338[v8];
      v13 = CUPrintNSError(0);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcSetLowPowerMode:]_block_invoke", 30, "### SetLowPowerMode result: %s, %@", v9, v14);

    }
    if (reply)
    {
      objc_msgSend(*(id *)(a1 + 32), "_xpcSendReply:", reply);
    }
    else if (dword_100977FD8 <= 90
           && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 90)))
    {
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcSetLowPowerMode:]_block_invoke", 90, "### setLowPowerMode create reply failed");
    }

  }
}

void sub_1000C0FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000C0FF0(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcSetPowerState:]_block_invoke", 90, "### SetPowerState failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C16A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  (*(void (**)(void))(a10 + 16))();
  _Block_object_dispose(&a48, 8);
  _Unwind_Resume(a1);
}

id sub_1000C171C(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcReadPrefs:]_block_invoke", 90, "### ReadPrefs failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C1BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  (*(void (**)(uint64_t))(v13 + 16))(v13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000C1C2C(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcWritePref:]_block_invoke", 90, "### WritePrefs failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C2194(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 136), 8);
  _Unwind_Resume(a1);
}

id sub_1000C21D8(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcSendRelayMessage:]_block_invoke", 90, "### SendRelayMessage failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C25EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id sub_1000C262C(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcSendSmartRoutingInformation:]_block_invoke", 90, "### SendSmartRoutingInformation failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C2AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  (*(void (**)(uint64_t))(v26 + 16))(v26);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

id sub_1000C2B3C(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcSendAudioAccessoryEventMessage:]_block_invoke", 90, "## SendAudioAccessoryEventMessage failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C2EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000C2F08(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcSendAudioAccessoryConfigMessage:]_block_invoke", 90, "## SendAudioAccessoryConfigMessage failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C331C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id sub_1000C335C(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcSendConversationDetectMessage:]_block_invoke", 90, "### SendConversationDetectMessage failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C36B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000C36EC(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcResetCBExtension:]_block_invoke", 90, "### ResetCBExtension failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C3A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C3A8C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v10;
  void *v11;
  id obj;

  v5 = a3;
  v6 = objc_alloc((Class)CBDeviceIdentity);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v7 + 40);
  v8 = objc_msgSend(v6, "initWithXPCObject:error:", v5, &obj);

  objc_storeStrong((id *)(v7 + 40), obj);
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
  }
  else if (dword_100977FD8 <= 90
         && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 90)))
  {
    v10 = CUPrintNSError(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcUpdateIdentities:]_block_invoke", 90, "### CBDeviceIdentity init failed: index %zu, %@", a2, v11);

  }
  return 1;
}

void sub_1000C3B98(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  id v3;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (void *)v1[12];
  if (*(void **)(a1 + 40) == v2)
  {
    v3 = v2;
    objc_msgSend(v1, "_xpcPowerStateChanged:", objc_msgSend(v1, "_powerStateForClient"));

  }
}

_QWORD *sub_1000C3BF8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) == result[12])
    return objc_msgSend(result, "_xpcDeviceLost:", a2);
  return result;
}

_QWORD *sub_1000C3C1C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) == result[12])
    return objc_msgSend(result, "_xpcDevicesBuffered:", a2);
  return result;
}

_QWORD *sub_1000C3C40(uint64_t a1)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) == result[12])
    return objc_msgSend(result, "_xpcSystemOverrideChanged");
  return result;
}

void sub_1000C3C60(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  xpc_object_t v10;
  uint64_t v11;
  void *v12;
  xpc_object_t v13;
  id v14;

  v14 = a2;
  v5 = a3;
  if (objc_msgSend(v5, "discoveryTypesContainCBDiscovery:", a1[4]))
  {
    v6 = *(void **)(a1[5] + 128);
    if (!v6)
    {
      v7 = objc_alloc_init((Class)NSMutableDictionary);
      v8 = a1[5];
      v9 = *(void **)(v8 + 128);
      *(_QWORD *)(v8 + 128) = v7;

      v6 = *(void **)(a1[5] + 128);
    }
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, v14);
    if (!*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40))
    {
      v10 = xpc_array_create(0, 0);
      v11 = *(_QWORD *)(a1[6] + 8);
      v12 = *(void **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = v10;

    }
    v13 = xpc_dictionary_create(0, 0, 0);
    objc_msgSend(v5, "encodeWithXPCObject:", v13);
    xpc_array_append_value(*(xpc_object_t *)(*(_QWORD *)(a1[6] + 8) + 40), v13);

  }
}

void sub_1000C405C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000C4074(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  id v3;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (void *)v1[13];
  if (*(void **)(a1 + 40) == v2)
  {
    v3 = v2;
    objc_msgSend(v1, "_xpcPowerStateChanged:", objc_msgSend(v1, "_powerStateForClient"));

  }
}

_QWORD *sub_1000C40D4(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) == result[13])
    return objc_msgSend(result, "_xpcDeviceFound:", a2);
  return result;
}

_QWORD *sub_1000C40F8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) == result[13])
    return objc_msgSend(result, "_xpcDeviceLost:", a2);
  return result;
}

void sub_1000C411C(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  xpc_object_t v10;
  uint64_t v11;
  void *v12;
  xpc_object_t v13;
  id v14;

  v14 = a2;
  v5 = a3;
  if (objc_msgSend(v5, "discoveryTypesContainCBDiscovery:", a1[4]))
  {
    v6 = *(void **)(a1[5] + 128);
    if (!v6)
    {
      v7 = objc_alloc_init((Class)NSMutableDictionary);
      v8 = a1[5];
      v9 = *(void **)(v8 + 128);
      *(_QWORD *)(v8 + 128) = v7;

      v6 = *(void **)(a1[5] + 128);
    }
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, v14);
    if (!*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40))
    {
      v10 = xpc_array_create(0, 0);
      v11 = *(_QWORD *)(a1[6] + 8);
      v12 = *(void **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = v10;

    }
    v13 = xpc_dictionary_create(0, 0, 0);
    objc_msgSend(v5, "encodeWithXPCObject:", v13);
    xpc_array_append_value(*(xpc_object_t *)(*(_QWORD *)(a1[6] + 8) + 40), v13);

  }
}

void sub_1000C4550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  (*(void (**)(uint64_t))(v27 + 16))(v27);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

id sub_1000C4590(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBDiscoveryFinish:]_block_invoke", 90, "### Discovery Finish failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C4658(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t Reply;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (dword_100977FD8 <= 30 && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 30)))
    LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBDiscoveryFinish:]_block_invoke_2", 30, "Discovery Finish completed: CID 0x%X", objc_msgSend(*(id *)(a1 + 32), "clientID"));
  Reply = CUXPCDictionaryCreateReply(*(_QWORD *)(a1 + 40));
  v7 = (void *)objc_claimAutoreleasedReturnValue(Reply);
  if (v7)
  {
    if (v5)
      CUXPCEncodeNSError(v5, v7, "errO", "errC", "errD", "errM", "errO");
    CUXPCEncodeObject(v7, "dsSm", v8, 0);
    objc_msgSend(*(id *)(a1 + 48), "_xpcSendReply:", v7);
  }
  else if (dword_100977FD8 <= 90
         && (dword_100977FD8 != -1 || _LogCategory_Initialize(&dword_100977FD8, 90)))
  {
    LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBDiscoveryFinish:]_block_invoke_2", 90, "### Discovery Finish create reply failed");
  }

}

void sub_1000C4928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000C495C(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBDiscoveryClearDuplicateFilterCache:]_block_invoke", 90, "### Discovery Clear Duplicates Filter Cache failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C4CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  (*(void (**)(uint64_t))(v17 + 16))(v17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000C4CEC(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBDiscoveryGetDevices:]_block_invoke", 90, "### CBDiscoveryGetDevices failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C4DB4(uint64_t a1, uint64_t a2, void *a3)
{
  xpc_object_t v4;
  id v5;

  v5 = a3;
  if ((*(_QWORD *)(a1 + 40) & (unint64_t)objc_msgSend(v5, "discoveryFlags")) != 0)
  {
    v4 = xpc_dictionary_create(0, 0, 0);
    objc_msgSend(v5, "encodeWithXPCObject:", v4);
    xpc_array_append_value(*(xpc_object_t *)(a1 + 32), v4);

  }
}

void sub_1000C567C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

id sub_1000C56DC(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBSpatialInteractionSessionActivate:]_block_invoke", 90, "### Spatial Activate failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C57A4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  unsigned __int8 v9;
  id v10;

  v1 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(v1 + 112))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 136), "addressMonitor"));
    v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "nonConnectableAddressData"));

    v4 = v10;
    if (v10)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "advertisingAddressData"));
      v6 = v10;
      v7 = v5;
      if (v6 == v7)
      {

      }
      else
      {
        v8 = v7;
        if (v7)
        {
          v9 = objc_msgSend(v6, "isEqual:", v7);

          v4 = v10;
          if ((v9 & 1) != 0)
            goto LABEL_11;
        }
        else
        {

        }
        objc_msgSend(*(id *)(a1 + 32), "setAdvertisingAddressData:", v6);
        objc_msgSend(*(id *)(a1 + 40), "_xpcAdvertisingAddressChanged");
      }
      v4 = v10;
    }
LABEL_11:

  }
}

_QWORD *sub_1000C58A0(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[14])
    return objc_msgSend(result, "_xpcSpatialInteractionAOPDataReceived:", a2);
  return result;
}

id sub_1000C58BC(id result)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)result + 5);
  if (*((_QWORD *)result + 4) == v1[14])
    return objc_msgSend(v1, "_xpcPowerStateChanged:", objc_msgSend(*((id *)result + 5), "_powerStateForClient"));
  return result;
}

_QWORD *sub_1000C5900(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[14])
    return objc_msgSend(result, "_xpcDeviceFound:", a2);
  return result;
}

_QWORD *sub_1000C591C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[14])
    return objc_msgSend(result, "_xpcDeviceLost:", a2);
  return result;
}

_QWORD *sub_1000C5938(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[12])
    return objc_msgSend(result, "_spatialInteractionDeviceFound:checkOnly:", a2, 0);
  return result;
}

_QWORD *sub_1000C5958(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v3 == result[12])
    return objc_msgSend(result, "_spatialInteractionDeviceLost:removeUnmatched:reason:", a2, 1, "BLE lost");
  return result;
}

void sub_1000C5980(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  _QWORD block[5];

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  if (v2 == *(_QWORD *)(v1 + 96))
  {
    if (*(_BYTE *)(v1 + 10))
    {
      objc_msgSend((id)v1, "_xpcSystemOverrideChanged");
    }
    else
    {
      v3 = *(NSObject **)(v1 + 144);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000C5A00;
      block[3] = &unk_100917080;
      block[4] = v1;
      dispatch_async(v3, block);
    }
  }
}

id sub_1000C5A00(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_xpcSystemOverrideChanged");
}

void sub_1000C5A08(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  if ((objc_msgSend(v4, "discoveryFlags") & 0x40000) != 0)
    objc_msgSend(*(id *)(a1 + 32), "_spatialInteractionDeviceFound:checkOnly:", v4, 0);

}

void sub_1000C5D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  (*(void (**)(uint64_t))(v13 + 16))(v13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000C5DB4(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBSpatialInteractionSessionUpdate:]_block_invoke", 90, "### Spatial Update failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C6344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  (*(void (**)(void))(a16 + 16))();
  _Block_object_dispose((const void *)(v16 - 160), 8);
  _Unwind_Resume(a1);
}

id sub_1000C63A0(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBSpatialInteractionSessionAddPeerToken:]_block_invoke", 90, "### Spatial AddPeerToken failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_1000C6468(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  if (objc_msgSend(v4, "spatialInteractionPeerID") == *(_DWORD *)(a1 + 32))
    objc_msgSend(v4, "setSpatialInteractionPeerID:", *(unsigned int *)(a1 + 36));

}

void sub_1000C6910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  (*(void (**)(void))(a18 + 16))();
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

id sub_1000C697C(uint64_t a1)
{
  uint64_t v2;
  id result;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 48);
  result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_100977FD8 <= 90)
    {
      if (dword_100977FD8 == -1)
      {
        v6 = _LogCategory_Initialize(&dword_100977FD8, 90);
        v2 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
        result = *(id *)(*(_QWORD *)(v2 + 8) + 40);
      }
      v4 = CUPrintNSError(result);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LogPrintF_safe(&dword_100977FD8, "-[CBDaemonXPCConnection _xpcCBSpatialInteractionSessionRemovePeerToken:]_block_invoke", 90, "### Spatial RemovePeerToken failed: %@", v5);

      v2 = *(_QWORD *)(a1 + 48);
    }
    return objc_msgSend(*(id *)(a1 + 32), "_xpcSendReplyError:request:", *(_QWORD *)(*(_QWORD *)(v2 + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  return result;
}

id sub_1000C78AC()
{
  if (qword_10097BB48 != -1)
    dispatch_once(&qword_10097BB48, &stru_1009192E0);
  return (id)qword_10097BB40;
}

void sub_1000C8114(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  NSObject *v20;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v2, "timeIntervalSince1970");
  v4 = v3;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 112), "clientID")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "getSpatialInteractionDeviceTimestampArrayForClientID:", v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastObject"));
  v8 = v7;
  if (v7
    && objc_msgSend(v7, "reason") == *(unsigned __int8 *)(a1 + 48)
    && (objc_msgSend(v8, "timestamp"), v9 * -1000.0 + v4 * 1000.0 < 1500.0))
  {
    objc_msgSend(v8, "setDuplicateCount:", (objc_msgSend(v8, "duplicateCount") + 1));
  }
  else
  {
    v10 = objc_alloc_init((Class)CBSpatialInteractionDeviceTimestampInfo);
    objc_msgSend(v10, "setTimestamp:", v4);
    objc_msgSend(v10, "setReason:", *(unsigned __int8 *)(a1 + 48));
    objc_msgSend(v10, "setDuplicateCount:", 0);
    if ((unint64_t)objc_msgSend(v6, "count") >= 9)
      objc_msgSend(v6, "removeObjectAtIndex:", 0);
    objc_msgSend(v6, "addObject:", v10);

  }
  objc_msgSend(*(id *)(a1 + 40), "setSpatialInteractionDeviceTimestampArrayForClientID:clientID:", v6, v5);
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "spatialInteractionDeviceTimestampArrayClientIDs"));
  if (v11)
  {
    v12 = (void *)v11;
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "spatialInteractionDeviceTimestampArrayDictionary"));
    if (v13)
    {
      v14 = (void *)v13;
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "spatialInteractionDeviceTimestampArrayClientIDs"));
      v16 = objc_msgSend(v15, "count");
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "spatialInteractionDeviceTimestampArrayDictionary"));
      v18 = objc_msgSend(v17, "count");

      if (v16 == v18)
        goto LABEL_16;
    }
    else
    {

    }
  }
  v19 = sub_1000C78AC();
  v20 = objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    sub_1006CE748(v20);

  objc_msgSend(*(id *)(a1 + 40), "setSpatialInteractionDeviceTimestampArrayDictionary:", 0);
  objc_msgSend(*(id *)(a1 + 40), "setSpatialInteractionDeviceTimestampArrayClientIDs:", 0);
LABEL_16:

}

_QWORD *sub_1000C8D4C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 40);
  if (v2 == result[7])
    return objc_msgSend(result, "_whbTimerFired");
  return result;
}

void sub_1000C9240(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.bluetooth", "CBDaemonXPCConnection");
  v2 = (void *)qword_10097BB40;
  qword_10097BB40 = (uint64_t)v1;

}

void sub_1000C95FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000C9D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1000CA1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;
  void (**v23)(_QWORD);
  void *v24;
  void *v25;
  void *v26;

  v23[2](v23);
  _Block_object_dispose(&a22, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1000CA264(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
  {
    v1 = result;
    if (dword_100978048 <= 90
      && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 90)))
    {
      LogPrintF_safe(&dword_100978048, "-[CBStackControllerBTStack addDiscoverableController:error:]_block_invoke", 90, "### addDiscoverableController failed");
    }
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100919860);
    return sub_10000B174(qword_100977B48, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24));
  }
  return result;
}

void sub_1000CA45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1000CA800(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  NSObject *v6;
  id v7;
  _QWORD block[4];
  id v9;
  id v10;
  id v11;

  v2 = *(void **)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 48);
  v11 = 0;
  objc_msgSend(v2, "setLowPowerModeWithReason:error:", v3, &v11);
  v4 = v11;
  v5 = *(void **)(a1 + 40);
  v6 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 112);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000CA8A8;
  block[3] = &unk_100919410;
  v9 = v4;
  v10 = v5;
  v7 = v4;
  dispatch_async(v6, block);

}

uint64_t sub_1000CA8A8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1000CABF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CAC54(uint64_t a1)
{
  NSNumber *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  _QWORD v9[3];
  _QWORD v10[3];

  if (qword_100978140 != -1)
    dispatch_once(&qword_100978140, &stru_100919920);
  sub_10025B764((uint64_t)off_100978138);
  if (dword_100978048 <= 90 && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 90)))
    LogPrintF_safe(&dword_100978048, "-[CBStackControllerBTStack setLowPowerModeWithReason:error:]_block_invoke", 90, "### LPM entry timeout");
  v9[0] = CFSTR("errorCode");
  v9[1] = CFSTR("errorCount");
  v10[0] = &off_100960568;
  v10[1] = &off_100960580;
  v9[2] = CFSTR("timeToEnter");
  v2 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", sub_100113398() - *(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v10[2] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 3));

  v5 = sub_100027F68();
  sub_100091AE8(__p, "LPM entry timeout");
  sub_100576534(v5, (uint64_t *)__p, 3172327085);
  if (v8 < 0)
    operator delete(__p[0]);
  v6 = sub_100065478();
  (*(void (**)(uint64_t, void *))(*(_QWORD *)v6 + 216))(v6, v4);

}

void sub_1000CAE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1000CAEE8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  if (qword_100978140 != -1)
    dispatch_once(&qword_100978140, &stru_100919920);
  result = sub_1002605D0((uint64_t)off_100978138, *(void **)(a1 + 32));
  if ((_DWORD)result)
  {
    if (dword_100978048 <= 90)
    {
      if (dword_100978048 != -1)
        return LogPrintF_safe(&dword_100978048, "-[CBStackControllerBTStack setOfflineAdvertisingParams:]_block_invoke", 90, "setOfflineAdvertisingParams failed with error %d", result);
      v3 = result;
      v4 = _LogCategory_Initialize(&dword_100978048, 90);
      result = v3;
      if (v4)
        return LogPrintF_safe(&dword_100978048, "-[CBStackControllerBTStack setOfflineAdvertisingParams:]_block_invoke", 90, "setOfflineAdvertisingParams failed with error %d", result);
    }
  }
  return result;
}

void sub_1000CB558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;

  v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1000CB8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1000CB910(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  v7 = v3;
  if (!v4)
  {
    v5 = objc_alloc_init((Class)NSMutableSet);
    v6 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v5;

    v4 = *(void **)(a1 + 40);
    v3 = v7;
  }
  objc_msgSend(v4, "addObject:", v3);
  if (!*(_BYTE *)(a1 + 48))
  {
    if (dword_100978048 <= 30
      && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 30)))
    {
      LogPrintF_safe(&dword_100978048, "void CBStackControllerCPP::addController(CBStackControllerBTStack * _Nonnull __strong)", 30, "Add listeners");
    }
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_100919A60);
    sub_10041E160(off_1009778D0, a1);
    if (qword_100978190 != -1)
      dispatch_once(&qword_100978190, &stru_100919AE0);
    sub_1000D96F8((uint64_t)off_100978188 + 24, a1 + 8);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_1009199E0);
    sub_10061F358((uint64_t)off_1009778A0, a1 + 16, 0);
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_1009198E0);
    sub_10007ABE0((uint64_t)off_100977890 + 64, a1 + 24);
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_1009198C0);
    sub_100494088(off_100977A70, a1 + 32);
    *(_BYTE *)(a1 + 48) = 1;
  }

}

void sub_1000CBAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000CBFA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CC00C(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 40), "removeObject:");
  if (*(_BYTE *)(a1 + 48) && !objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    if (dword_100978048 <= 30
      && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 30)))
    {
      LogPrintF_safe(&dword_100978048, "void CBStackControllerCPP::removeController(CBStackControllerBTStack * _Nonnull __strong)", 30, "Remove listeners");
    }
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_100919A60);
    sub_10041E298((uint64_t)off_1009778D0, a1);
    if (qword_100978190 != -1)
      dispatch_once(&qword_100978190, &stru_100919AE0);
    sub_100069060((uint64_t)off_100978188 + 24, a1 + 8);
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_1009198E0);
    sub_100069060((uint64_t)off_100977890 + 64, a1 + 24);
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_1009198C0);
    sub_100494190((uint64_t)off_100977A70, a1 + 32);
    *(_BYTE *)(a1 + 48) = 0;
  }

}

void sub_1000CC198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000CC340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000CC41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1000CC6A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000CC890(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CCB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1000CD0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void (**a12)(void), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  void *v35;
  void *v36;
  uint64_t v37;

  a12[2]();
  _Block_object_dispose((const void *)(v37 - 152), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1000CD1CC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  void *v4;

  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (result)
  {
    if (dword_100978048 <= 90)
    {
      if (dword_100978048 == -1)
      {
        if (!_LogCategory_Initialize(&dword_100978048, 90))
          return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
        result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      }
      v3 = CUPrintNSError(result);
      v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
      LogPrintF_safe(&dword_100978048, "-[CBStackControllerBTStack connectWithCBConnection:completionHandler:]_block_invoke", 90, "### ConnectDevice start failed: %@", v4);

    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  return result;
}

void sub_1000CD298(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000CD2A8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "timer"));

  if (v2 == v3)
  {
    v6 = a1 + 40;
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(void **)(v6 + 8);
    v7 = CBErrorF(4294960574, "Timed out");
    v8 = (id)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v5, "_connectDeviceCompleteRequest:error:", v4);

  }
}

void sub_1000CD334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000CD4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1000CD6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1000CE054(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 105) < 0)
    operator delete(*(void **)(v2 - 128));

  _Unwind_Resume(a1);
}

void sub_1000CE2AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000CE6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  void *v20;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1000CEB78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000CED18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000CF1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  void *v40;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1000CF23C(uint64_t a1, uint64_t a2)
{
  void *v3;
  __int128 v4;
  uint64_t v5;

  if (*(char *)(a2 + 231) < 0)
  {
    sub_10003430C(&v4, *(void **)(a2 + 208), *(_QWORD *)(a2 + 216));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 208);
    v5 = *(_QWORD *)(a2 + 224);
  }
  if (SHIBYTE(v5) < 0)
  {
    v3 = (void *)v4;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *((_QWORD *)&v4 + 1) != 0;
    operator delete(v3);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = SHIBYTE(v5) != 0;
  }
}

void sub_1000CF2CC(uint64_t a1)
{
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100919A20);
  sub_100699674(qword_1009778B0, *(void **)(a1 + 32));
}

void sub_1000CF610(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1000CF654(uint64_t a1)
{
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100919A20);
  sub_100699674(qword_1009778B0, *(void **)(a1 + 32));
}

void sub_1000D0000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1000D01FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *__p[2];
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
    v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  if (*(char *)(a2 + 127) < 0)
  {
    sub_10003430C(__p, *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 104);
    v9 = *(_QWORD *)(a2 + 120);
  }
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  v5 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4, __p[0], __p[1], v9));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
}

void sub_1000D02B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000D0668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1000D0788(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000D0C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void (**a12)(_QWORD), void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id a44)
{
  void *v44;
  void *v45;

  a12[2](a12);
  _Block_object_dispose(&a39, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1000D0D68(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  void *v4;

  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (result)
  {
    if (dword_100978048 <= 90)
    {
      if (dword_100978048 == -1)
      {
        if (!_LogCategory_Initialize(&dword_100978048, 90))
          return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
        result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      }
      v3 = CUPrintNSError(result);
      v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
      LogPrintF_safe(&dword_100978048, "-[CBStackControllerBTStack modifyDevice:connectionPriorityDevices:timeoutSeconds:completionHandler:]_block_invoke", 90, "### ModifyDevice CnxPri failed: %@", v4);

    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  return result;
}

void sub_1000D0E34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

