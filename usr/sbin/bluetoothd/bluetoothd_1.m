void sub_1000D0E44(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "timer"));

  if (v2 == v3)
  {
    v6 = a1 + 40;
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(void **)(v6 + 8);
    v7 = CBErrorF(4294960574, "Timed out");
    v8 = (id)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v5, "_modifyDeviceCompleteRequest:error:", v4);

  }
}

void sub_1000D0ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000D108C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000D14C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  _Block_object_dispose((const void *)(v5 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000D156C()
{
  JUMPOUT(0x1000D155CLL);
}

void sub_1000D1574(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id obj;

  v3 = (void *)a1[4];
  v2 = a1[5];
  v4 = a1[6];
  v5 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v5 + 40);
  objc_msgSend(v3, "modifyDevice:leDevice:settings:error:", v2, a2, v4, &obj);
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_1000D15C4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id obj;

  v3 = (void *)a1[4];
  v2 = a1[5];
  v4 = a1[6];
  v5 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v5 + 40);
  objc_msgSend(v3, "modifyDevice:leDevice:settings:error:", v2, a2, v4, &obj);
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_1000D2C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

void sub_1000D3338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;

  _Unwind_Resume(a1);
}

void sub_1000D3480(uint64_t a1)
{
  char *v2;
  void *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  void *v9[2];
  unsigned __int8 v10[16];

  v2 = (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String");
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100919940);
  v3 = off_1009778C0;
  sub_100030BCC(v9, *(_QWORD *)(a1 + 40));
  sub_100091AE8(__p, v2);
  sub_10065354C((uint64_t)v3, (unsigned __int8 *)v9, (uint64_t)__p, 3);
  if (v8 < 0)
    operator delete(__p[0]);
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_100919A80);
  sub_1005E4F84((os_unfair_lock_s *)qword_1009778F0, *(void **)(a1 + 40));
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_100919A80);
  v4 = qword_1009778F0;
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100919AA0);
  if (off_100978168)
    v5 = (char *)off_100978168 + 48;
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 48);
  sub_100030BCC(v10, *(_QWORD *)(a1 + 40));
  sub_100091AE8(v9, v2);
  sub_1005E2EB4(v4, (uint64_t)v5, v6, v10, (uint64_t *)v9);
}

void sub_1000D363C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000D3674(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100919940);
  sub_100661FF0((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(void **)(a1 + 40), 2);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100919940);
  v2 = off_1009778C0;
  v3 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "controllerInfo"));
  sub_1006622D0((uint64_t)v2, v3, (int)objc_msgSend(v4, "fastLEConnectionAllowed"));

}

void sub_1000D3734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000D3748(uint64_t a1)
{
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100919940);
  sub_10066236C((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1000D38CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1000D4550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,id a55)
{
  void *v55;
  void *v56;
  void *v57;
  void (**v58)(_QWORD);

  v58[2](v58);
  _Block_object_dispose(&a50, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1000D46E8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  void *v4;

  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (result)
  {
    if (dword_100978048 <= 20)
    {
      if (dword_100978048 == -1)
      {
        if (!_LogCategory_Initialize(&dword_100978048, 20))
          return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
        result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      }
      v3 = CUPrintNSError(result);
      v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
      LogPrintF_safe(&dword_100978048, "-[CBStackControllerBTStack performDeviceRequest:device:completionHandler:]_block_invoke", 20, "### PerformDeviceRequest start failed: %@", v4);

    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  return result;
}

void sub_1000D47B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1000D47C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_QWORD *)(a2 + 16);
  return result;
}

void sub_1000D47DC(int a1, uint64_t a2, char a3)
{
  id v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD block[6];
  int v10;
  char v11;

  v6 = (id)qword_10097BB50;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dispatchQueue"));
  v8 = v7;
  if (v7)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000D962C;
    block[3] = &unk_1009197C8;
    block[4] = v6;
    block[5] = a2;
    v10 = a1;
    v11 = a3;
    dispatch_async(v7, block);
  }

}

void sub_1000D4884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000D4894(int a1, uint64_t a2, char a3)
{
  id v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD block[6];
  int v10;
  char v11;

  v6 = (id)qword_10097BB50;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dispatchQueue"));
  v8 = v7;
  if (v7)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000D9640;
    block[3] = &unk_1009197C8;
    v10 = a1;
    block[4] = v6;
    block[5] = a2;
    v11 = a3;
    dispatch_async(v7, block);
  }

}

void sub_1000D493C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000D494C(int a1, uint64_t a2, char a3)
{
  id v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD block[6];
  int v10;
  char v11;

  v6 = (id)qword_10097BB50;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dispatchQueue"));
  v8 = v7;
  if (v7)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000D9658;
    block[3] = &unk_1009197C8;
    v10 = a1;
    block[4] = v6;
    block[5] = a2;
    v11 = a3;
    dispatch_async(v7, block);
  }

}

void sub_1000D49F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000D4A04(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "timer"));

  if (v2 == v3)
  {
    v6 = a1 + 40;
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(void **)(v6 + 8);
    v7 = CBErrorF(4294960574, "Timed out");
    v8 = (id)objc_claimAutoreleasedReturnValue(v7);
    objc_msgSend(v5, "_completePerformDeviceRequest:error:", v4);

  }
}

void sub_1000D4A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000D4C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1000D4EC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000D5190(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000D53F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1000D560C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000D5808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000D5BC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1000D5FA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000D6060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000D6184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000D639C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000D66A4(_Unwind_Exception *a1)
{
  void *v1;
  void (**v2)(_QWORD);
  uint64_t v3;

  v2[2](v2);

  _Block_object_dispose((const void *)(v3 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000D66F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v2)
  {
    if (dword_100978048 > 90)
      goto LABEL_6;
    if (dword_100978048 == -1)
    {
      if (!_LogCategory_Initialize(&dword_100978048, 90))
      {
LABEL_6:
        if (*(_QWORD *)(a1 + 40))
          **(_QWORD **)(a1 + 40) = objc_retainAutorelease(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
        return;
      }
      v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    }
    v3 = CUPrintNSError(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    LogPrintF_safe(&dword_100978048, "-[CBStackControllerBTStack addPairingClient:error:]_block_invoke", 90, "### AddPairingClient failed: %@", v4);

    goto LABEL_6;
  }
}

void sub_1000D67BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000D67CC(uint64_t a1, unsigned int a2, unint64_t a3, int a4)
{
  unint64_t v5;
  uint64_t v7;
  const char *v8;
  void **v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD block[6];
  int v16;
  void *__p[2];
  char v18;

  v5 = a3;
  if (a3)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100919960);
    v5 = sub_10046F6C0((uint64_t)off_1009778E0, v5);
  }
  if (a4)
    v7 = (a4 + 310000);
  else
    v7 = 0;
  if (dword_100978048 > 30 || dword_100978048 == -1 && !_LogCategory_Initialize(&dword_100978048, 30))
    goto LABEL_22;
  if (a2 > 3)
  {
    v8 = "?";
    if (v5)
    {
LABEL_12:
      sub_10043E5F8(v5, __p);
      if (v18 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      goto LABEL_19;
    }
  }
  else
  {
    v8 = off_100919CC8[a2];
    if (v5)
      goto LABEL_12;
  }
  v9 = (void **)"NULL";
LABEL_19:
  v10 = CUPrintErrorCode(v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  LogPrintF_safe(&dword_100978048, "void _pairingStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResult, void * _Nonnull)", 30, "Pairing agent event: %s, device %s, result %@", v8, v9, v11);

  if (!v5)
  {
    if (a2 != 3)
      return;
    goto LABEL_29;
  }
  if (v18 < 0)
    operator delete(__p[0]);
LABEL_22:
  if (a2 != 3)
    return;
  if (v5)
  {
    v12 = (id)qword_10097BB50;
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dispatchQueue"));
    v14 = v13;
    if (v13)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000D96C4;
      block[3] = &unk_100919818;
      block[4] = v12;
      block[5] = v5;
      v16 = v7;
      dispatch_async(v13, block);

    }
    return;
  }
LABEL_29:
  if (dword_100978048 <= 90 && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 90)))
    LogPrintF_safe(&dword_100978048, "void _pairingStatusCallback(BTPairingAgent _Nonnull, BTPairingEvent, BTDevice _Nonnull, BTResult, void * _Nonnull)", 90, "### No device for status callback");
}

void sub_1000D69FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  void *v13;
  va_list va;

  va_start(va, a12);

  if (v12)
    sub_1006CE788((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1000D6A2C(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  const char *v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  _QWORD block[7];
  char v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19[17];
  void *__p[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  LODWORD(v3) = a3;
  v4 = a2;
  if (a2)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100919960);
    v4 = sub_10046F6C0((uint64_t)off_1009778E0, v4);
  }
  if (dword_100978048 <= 30 && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 30)))
  {
    if (v4)
    {
      sub_10043E5F8(v4, __p);
      if ((SBYTE7(v21) & 0x80u) == 0)
        v6 = (const char *)__p;
      else
        v6 = (const char *)__p[0];
    }
    else
    {
      v6 = "NULL";
    }
    LogPrintF_safe(&dword_100978048, "void _pairingPincodeCallback(BTPairingAgent _Nonnull, BTDevice _Nonnull, uint8_t, void * _Nonnull)", 30, "Pairing agent pincode callback: device %s, minLen %d", v6, v3);
    if (v4)
    {
      if (SBYTE7(v21) < 0)
        operator delete(__p[0]);
      goto LABEL_13;
    }
  }
  else if (v4)
  {
LABEL_13:
    if (qword_100978150 != -1)
      dispatch_once(&qword_100978150, &stru_100919A00);
    v7 = sub_1005B2FB8(off_100978148, a1);
    if (v7)
    {
      v8 = sub_10043F854(v4);
      if (v8 <= 0x18 && (v9 = 1, ((1 << v8) & 0x1001980) != 0))
        LODWORD(v3) = 6;
      else
        v9 = 0;
      v34 = 0u;
      v35 = 0u;
      if (v3 <= 4)
        v3 = 4;
      else
        v3 = v3;
      v32 = 0uLL;
      v33 = 0uLL;
      v30 = 0uLL;
      v31 = 0uLL;
      v28 = 0uLL;
      v29 = 0uLL;
      v26 = 0uLL;
      v27 = 0uLL;
      v24 = 0uLL;
      v25 = 0uLL;
      v22 = 0uLL;
      v23 = 0uLL;
      *(_OWORD *)__p = 0uLL;
      v21 = 0uLL;
      v18 = 0;
      v17 = 0;
      v16 = 0;
      sub_100444BF0(v4, &v18, (_DWORD *)&v17 + 1, &v17, &v16);
      if ((HIDWORD(v17) == 1452 || HIDWORD(v17) == 76) && (v17 - 780) <= 2)
      {
        if (dword_100978048 <= 50
          && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 50)))
        {
          LogPrintF_safe(&dword_100978048, "void _pairingPincodeCallback(BTPairingAgent _Nonnull, BTDevice _Nonnull, uint8_t, void * _Nonnull)", 50, "Pairing agent pincode callback: overriding pincode to 0000");
        }
        strcpy((char *)__p, "0000");
        sub_1005BCD34(v19, (char *)__p);
        sub_1005B04B4(v7, v4);
      }
      if ((v9 & 1) != 0)
      {
        RandomString("0123456789", 10, v3, v3, __p);
        sub_1005BCD34(v19, (char *)__p);
        sub_1005B04B4(v7, v4);
      }
      strcpy((char *)__p, "0000");
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __p));
      v11 = (id)qword_10097BB50;
      v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "dispatchQueue"));
      v13 = v12;
      if (v12)
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000D96A0;
        block[3] = &unk_1009197F0;
        block[5] = v10;
        block[6] = v4;
        v15 = v9;
        block[4] = v11;
        dispatch_async(v12, block);
      }

    }
    else if (dword_100978048 <= 90
           && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 90)))
    {
      LogPrintF_safe(&dword_100978048, "void _pairingPincodeCallback(BTPairingAgent _Nonnull, BTDevice _Nonnull, uint8_t, void * _Nonnull)", 90, "### No pairing agent for pincode request");
    }
    return;
  }
  if (dword_100978048 <= 90 && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 90)))
    LogPrintF_safe(&dword_100978048, "void _pairingPincodeCallback(BTPairingAgent _Nonnull, BTDevice _Nonnull, uint8_t, void * _Nonnull)", 90, "### No device for pincode request");
}

void sub_1000D6F48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000D6FA8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  const char *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  _QWORD block[6];
  void *v12[2];
  char v13;

  v4 = a2;
  if (a2)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100919960);
    v4 = sub_10046F6C0((uint64_t)off_1009778E0, v4);
  }
  if (dword_100978048 <= 30 && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 30)))
  {
    if (v4)
    {
      v5 = (const char *)v12;
      sub_10043E5F8(v4, v12);
      if (v13 < 0)
        v5 = (const char *)v12[0];
    }
    else
    {
      v5 = "NULL";
    }
    v9 = CUPrintFlags32(a3, &unk_10073897A);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    LogPrintF_safe(&dword_100978048, "void _pairingAuthCallback(BTPairingAgent _Nonnull, BTDevice _Nonnull, BTServiceMask, void * _Nonnull)", 30, "Pairing agent auth callback: device %s, services %@", v5, v10);

    if (v4)
    {
      if (v13 < 0)
        operator delete(v12[0]);
      goto LABEL_13;
    }
  }
  else if (v4)
  {
LABEL_13:
    v6 = (id)qword_10097BB50;
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dispatchQueue"));
    v8 = v7;
    if (v7)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000D9670;
      block[3] = &unk_100918868;
      block[4] = v6;
      block[5] = v4;
      dispatch_async(v7, block);
    }

    return;
  }
  if (dword_100978048 <= 90 && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 90)))
    LogPrintF_safe(&dword_100978048, "void _pairingAuthCallback(BTPairingAgent _Nonnull, BTDevice _Nonnull, BTServiceMask, void * _Nonnull)", 90, "### No device for auth callback");
}

void sub_1000D7184(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  if (v1)
    sub_1006CE788(v3 - 56);
  _Unwind_Resume(a1);
}

void sub_1000D71B4(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v6;
  const char *v7;
  id v8;
  id v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  _QWORD block[7];
  int v14;
  void *v15[2];
  char v16;

  v6 = a2;
  if (a2)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100919960);
    v6 = sub_10046F6C0((uint64_t)off_1009778E0, v6);
  }
  if (dword_100978048 <= 30 && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 30)))
  {
    if (v6)
    {
      sub_10043E5F8(v6, v15);
      if (v16 >= 0)
        v7 = (const char *)v15;
      else
        v7 = (const char *)v15[0];
    }
    else
    {
      v7 = "NULL";
    }
    v12 = "yes";
    if (!a4)
      v12 = "no";
    LogPrintF_safe(&dword_100978048, "void _pairingUserConfirmCallback(BTPairingAgent _Nonnull, BTDevice _Nonnull, uint32_t, BTBool, void * _Nonnull)", 30, "Pairing agent user confirm callback: device %s, value %u, mitm %s", v7, a3, v12);
    if (v6)
    {
      if (v16 < 0)
        operator delete(v15[0]);
      goto LABEL_13;
    }
  }
  else if (v6)
  {
LABEL_13:
    v8 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%06d"), a3);
    v9 = (id)qword_10097BB50;
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dispatchQueue"));
    v11 = v10;
    if (v10)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000D96D4;
      block[3] = &unk_100919840;
      v14 = a4;
      block[5] = v8;
      block[6] = v6;
      block[4] = v9;
      dispatch_async(v10, block);
    }

    return;
  }
  if (dword_100978048 <= 90 && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 90)))
    LogPrintF_safe(&dword_100978048, "void _pairingUserConfirmCallback(BTPairingAgent _Nonnull, BTDevice _Nonnull, uint32_t, BTBool, void * _Nonnull)", 90, "### No device for user confirm");
}

void sub_1000D73C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v1)
    sub_1006CE788(v2 - 72);
  _Unwind_Resume(exception_object);
}

void sub_1000D73F0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  const char *v5;
  id v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD block[7];
  void *v11[2];
  char v12;

  v4 = a2;
  if (a2)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100919960);
    v4 = sub_10046F6C0((uint64_t)off_1009778E0, v4);
  }
  if (dword_100978048 <= 30 && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 30)))
  {
    if (v4)
    {
      sub_10043E5F8(v4, v11);
      if (v12 >= 0)
        v5 = (const char *)v11;
      else
        v5 = (const char *)v11[0];
    }
    else
    {
      v5 = "NULL";
    }
    LogPrintF_safe(&dword_100978048, "void _pairingPassKeyDisplayCallback(BTPairingAgent _Nonnull, BTDevice _Nonnull, uint32_t, void * _Nonnull)", 30, "Pairing agent pass key display callback: device %s, value %u", v5, a3);
    if (v4)
    {
      if (v12 < 0)
        operator delete(v11[0]);
      goto LABEL_13;
    }
  }
  else if (v4)
  {
LABEL_13:
    v6 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%u"), a3);
    v7 = (id)qword_10097BB50;
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dispatchQueue"));
    v9 = v8;
    if (v8)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000D9688;
      block[3] = &unk_100919500;
      block[5] = v6;
      block[6] = v4;
      block[4] = v7;
      dispatch_async(v8, block);
    }

    return;
  }
  if (dword_100978048 <= 90 && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 90)))
    LogPrintF_safe(&dword_100978048, "void _pairingPassKeyDisplayCallback(BTPairingAgent _Nonnull, BTDevice _Nonnull, uint32_t, void * _Nonnull)", 90, "### No device for passkey callback");
}

void sub_1000D75D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v1)
    sub_1006CE788(v2 - 56);
  _Unwind_Resume(exception_object);
}

void sub_1000D7600()
{
  if (dword_100978048 <= 30 && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 30)))
    LogPrintF_safe(&dword_100978048, "void _pairingOOBDataReadyCallback(BTPairingAgent _Nonnull, BTData _Nonnull, BTData _Nonnull, BTData _Nonnull, BTData _Nonnull, void * _Nonnull)", 30, "Pairing agent local OOB data ready callback");
}

void sub_1000D7710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000D79F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1000D7CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1000D7FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1000D81E8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[6];
  int v15;
  __int16 v16;
  __int16 v17;
  id v18;

  v18 = 0;
  v9 = objc_msgSend(objc_alloc((Class)CBDevice), "initWithBTStackDevice:error:", a2, &v18);
  v10 = v18;
  if (v9)
  {
    if (dword_100978048 <= 30
      && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 30)))
    {
      LogPrintF_safe(&dword_100978048, "virtual void CBStackControllerCPP::accessoryCommandStatus(BT::Device * _Nonnull, BTAccessoryCmdReqType, uint16_t, uint16_t)", 30, "AccessoryCommandStatus: %@, type %d, result %u, reason %u", v9, a3, a4, a5);
    }
    v13 = sub_1000419F4();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1000D8394;
    v14[3] = &unk_1009183A0;
    v14[4] = v9;
    v14[5] = a1;
    v15 = a3;
    v16 = a4;
    v17 = a5;
    sub_100041A34(v13, v14);
  }
  else if (dword_100978048 <= 90
         && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 90)))
  {
    v11 = CUPrintNSError(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    LogPrintF_safe(&dword_100978048, "virtual void CBStackControllerCPP::accessoryCommandStatus(BT::Device * _Nonnull, BTAccessoryCmdReqType, uint16_t, uint16_t)", 90, "### AccessoryCommandStatus init device failed: %@", v12);

  }
}

void sub_1000D8370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000D8394(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  _QWORD block[6];
  int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v2 = *(_QWORD *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BB58);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = *(id *)(v2 + 40);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dispatchQueue"));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000D8528;
        block[3] = &unk_100919500;
        v9 = *(_QWORD *)(a1 + 32);
        block[4] = v7;
        block[5] = v9;
        v10 = *(_DWORD *)(a1 + 52);
        v12 = *(_DWORD *)(a1 + 48);
        v13 = v10;
        dispatch_async(v8, block);

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v4);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BB58);
}

void sub_1000D8508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000D8528(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_accessoryCommandStatusWithDevice:type:result:reason:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52), *(unsigned __int16 *)(a1 + 54));
}

void sub_1000D8540(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, uint64_t a6)
{
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[8];
  char v26;
  id v27;
  int v28;
  __int16 v29;

  v28 = a3;
  v29 = WORD2(a3);
  v27 = 0;
  v10 = objc_msgSend(objc_alloc((Class)CBDevice), "initWithBTStackDevice:error:", a2, &v27);
  v11 = v27;
  if (v10)
  {
    v12 = objc_alloc_init((Class)CBDevice);
    v13 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", &v28, 6);
    objc_msgSend(v12, "setBtAddressData:", v13);

    v14 = CUPrintAddress(&v28, 6, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    objc_msgSend(v12, "setIdentifier:", v15);

    v16 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a6, a5);
    v17 = a4;
    if (dword_100978048 <= 30
      && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 30)))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "identifier"));
      v19 = CUPrintNSDataHex(v16, 300, 0);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      v21 = (void *)v20;
      v22 = "?";
      if (v17 == 1)
        v22 = "AudioArbitration";
      if (!v17)
        v22 = "Invalid";
      LogPrintF_safe(&dword_100978048, "virtual void CBStackControllerCPP::accessoryRelayMsgReceived(BT::Device * _Nonnull, BTDeviceAddress, BTAccessoryRelayMsgType, uint16_t, const uint8_t * _Nonnull)", 30, "Relay message received: conduit %@, source %@, type %s, data <%@>", v10, v18, v22, v20);

    }
    v23 = sub_1000419F4();
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1000D881C;
    v25[3] = &unk_1009195A8;
    v26 = v17;
    v25[4] = v16;
    v25[5] = v10;
    v25[6] = v12;
    v25[7] = a1;
    sub_100041A34(v23, v25);

    goto LABEL_11;
  }
  if (dword_100978048 <= 90 && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 90)))
  {
    v24 = CUPrintNSError(v11);
    v12 = (id)objc_claimAutoreleasedReturnValue(v24);
    LogPrintF_safe(&dword_100978048, "virtual void CBStackControllerCPP::accessoryRelayMsgReceived(BT::Device * _Nonnull, BTDeviceAddress, BTAccessoryRelayMsgType, uint16_t, const uint8_t * _Nonnull)", 90, "### AccessoryCommandStatus init device failed: %@", v12);
LABEL_11:

  }
}

void sub_1000D87B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000D881C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  NSObject *v8;
  _QWORD block[5];
  __int128 v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v2 = *(_QWORD *)(a1 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BB58);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = *(id *)(v2 + 40);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dispatchQueue"));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000D89BC;
        block[3] = &unk_100919580;
        block[4] = v7;
        v12 = *(_BYTE *)(a1 + 64);
        v10 = *(_OWORD *)(a1 + 32);
        v11 = *(_QWORD *)(a1 + 48);
        dispatch_async(v8, block);

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v4);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BB58);
}

void sub_1000D899C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000D89BC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_accessoryReceivedRelayMessageType:messageData:conduitDevice:sourceDevice:", *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1000D89D0(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  _QWORD block[6];
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  id v26;
  _BYTE v27[128];

  v26 = 0;
  v19 = objc_msgSend(objc_alloc((Class)CBDevice), "initWithBTStackDevice:error:", a2, &v26);
  v18 = v26;
  if (v19)
  {
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_1009198C0);
    v6 = off_100977A70;
    objc_msgSend(v19, "setConnectedServices:", sub_100496DBC((uint64_t)off_100977A70, a2));
    if (sub_100444790(a2))
      v7 = sub_100498AC8((uint64_t)v6, a2);
    else
      v7 = 0xFFFFFFFFLL;
    objc_msgSend(v19, "setSupportedServices:", v7);
    objc_msgSend(v19, "setSupportedServices:", (unint64_t)objc_msgSend(v19, "supportedServices") & 0xFFEFFFFF);
    if (dword_100978048 <= 30
      && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 30)))
    {
      v8 = CUPrintErrorCode((a3 + 310000));
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      LogPrintF_safe(&dword_100978048, "virtual void CBStackControllerCPP::deviceConnected(BT::Device * _Nonnull, BTResult)", 30, "DeviceConnected: %@, result %@", v19, v9);

    }
    os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BB58);
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v10 = *(id *)(a1 + 40);
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v23;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v23 != v12)
            objc_enumerationMutation(v10);
          v14 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
          v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "dispatchQueue"));
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000D8D40;
          block[3] = &unk_1009195D0;
          block[4] = v14;
          block[5] = v19;
          v21 = a3;
          dispatch_async(v15, block);

        }
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
      }
      while (v11);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BB58);
  }
  else if (dword_100978048 <= 90
         && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 90)))
  {
    v16 = CUPrintNSError(v18);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    LogPrintF_safe(&dword_100978048, "virtual void CBStackControllerCPP::deviceConnected(BT::Device * _Nonnull, BTResult)", 90, "### DeviceConnected init device failed: %@", v17);

  }
}

void sub_1000D8CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

id sub_1000D8D40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_connectDeviceUpdateRequests:btResult:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

void sub_1000D8D50(uint64_t a1, uint64_t a2, int a3)
{
  sub_1000D89D0(a1 - 8, a2, a3);
}

void sub_1000D8D58(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  NSObject *v10;
  id obj;
  _QWORD block[5];
  id v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v5 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BB58);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  obj = *(id *)(a1 + 40);
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dispatchQueue"));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000D8F18;
        block[3] = &unk_1009195F8;
        block[4] = v9;
        v13 = v5;
        v14 = a2;
        dispatch_async(v10, block);

      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BB58);
}

void sub_1000D8EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1000D8F18(uint64_t a1)
{
  void (**v2)(void);

  objc_msgSend(*(id *)(a1 + 32), "setFastLEConnectionInfoData:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "setFastLEConnectionInfoVersion:", *(unsigned __int8 *)(a1 + 48));
  if (dword_100978048 <= 30 && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 30)))
    LogPrintF_safe(&dword_100978048, "virtual void CBStackControllerCPP::leFastControllerDataAvailble(CBFastLEConnectionInfoVersion, NSData * _Nonnull __strong)_block_invoke", 30, "Fast LE connection v%d available", *(unsigned __int8 *)(a1 + 48));
  v2 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "controllerDataChangedHandler"));
  if (v2)
    v2[2]();

}

void sub_1000D8FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000D8FE0(uint64_t a1, char a2, void *a3)
{
  sub_1000D8D58(a1 - 16, a2, a3);
}

void sub_1000D8FE8(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000D9050;
  v5[3] = &unk_1009173C0;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_1000D9050(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  NSObject *v8;
  _QWORD v9[5];
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v2 = *(_QWORD *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BB58);
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = *(id *)(v2 + 40);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v3);
        v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dispatchQueue"));
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3221225472;
        v9[2] = sub_1000D91E0;
        v9[3] = &unk_1009173A0;
        v9[4] = v7;
        v10 = *(_DWORD *)(a1 + 40);
        dispatch_async(v8, v9);

      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BB58);
}

void sub_1000D91C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000D91E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "localDeviceEvent:", *(unsigned int *)(a1 + 40));
}

void sub_1000D91F0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  v3 = a1 - 24;
  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000D9050;
  v5[3] = &unk_1009173C0;
  v5[4] = v3;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_1000D9258(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  NSObject *v13;
  id obj;
  _QWORD block[6];
  int v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  if (a4 == 11 && (a3 + 1) <= 1 && a5)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BB58);
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    obj = *(id *)(a1 + 40);
    v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v10)
            objc_enumerationMutation(obj);
          v12 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
          v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dispatchQueue"));
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000D940C;
          block[3] = &unk_1009183A0;
          v16 = a3;
          v17 = a5;
          block[4] = v12;
          block[5] = a2;
          dispatch_async(v13, block);

        }
        v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v9);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BB58);
  }
}

void sub_1000D93E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_1000D940C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;

  v2 = objc_alloc((Class)CBDevice);
  v3 = *(_QWORD *)(a1 + 40);
  v11 = 0;
  v4 = objc_msgSend(v2, "initWithBTStackDevice:error:", v3, &v11);
  v5 = v11;
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "btAddressData"));
    if (dword_100978048 <= 30
      && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 30)))
    {
      v7 = *(unsigned int *)(a1 + 48);
      v8 = CUPrintErrorCode((*(_DWORD *)(a1 + 52) + 310000));
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      LogPrintF_safe(&dword_100978048, "virtual void CBStackControllerCPP::serviceEvent(BT::Device * _Nonnull, BTServiceID, BTServiceSpecificEvent, BTResult)_block_invoke", 30, "service event - service:%d, connection: %@, result %@", v7, v6, v9);

    }
    objc_msgSend(*(id *)(a1 + 32), "_connectDeviceUpdateRequests:btResult:", v4, *(unsigned int *)(a1 + 52));
    goto LABEL_7;
  }
  if (dword_100978048 <= 90 && (dword_100978048 != -1 || _LogCategory_Initialize(&dword_100978048, 90)))
  {
    v10 = CUPrintNSError(v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v10);
    LogPrintF_safe(&dword_100978048, "virtual void CBStackControllerCPP::serviceEvent(BT::Device * _Nonnull, BTServiceID, BTServiceSpecificEvent, BTResult)_block_invoke", 90, "### serviceEvent init device failed: %@", v6);
LABEL_7:

  }
}

void sub_1000D9578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000D95AC(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  sub_1000D9258(a1 - 32, a2, a3, a4, a5);
}

uint64_t sub_1000D95B4(uint64_t a1)
{

  return a1;
}

void sub_1000D95DC(uint64_t a1)
{

  operator delete();
}

id sub_1000D962C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_readRSSIWithConnectionHandle:status:rssi:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(char *)(a1 + 52));
}

id sub_1000D9640(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_readTxPowerWithFlags:status:connectionHandle:txPowerLevel:", 2, *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40), *(char *)(a1 + 52));
}

id sub_1000D9658(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_readTxPowerWithFlags:status:connectionHandle:txPowerLevel:", 4, *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40), *(char *)(a1 + 52));
}

id sub_1000D9670(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_pairingPromptWithBTDevice:pairingType:pinString:flags:", *(_QWORD *)(a1 + 40), 0, 0, 0);
}

id sub_1000D9688(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_pairingPromptWithBTDevice:pairingType:pinString:flags:", *(_QWORD *)(a1 + 48), 1, *(_QWORD *)(a1 + 40), 0);
}

id sub_1000D96A0(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(a1 + 56))
    v1 = 1;
  else
    v1 = 2;
  return objc_msgSend(*(id *)(a1 + 32), "_pairingPromptWithBTDevice:pairingType:pinString:flags:", *(_QWORD *)(a1 + 48), v1, *(_QWORD *)(a1 + 40), 0);
}

id sub_1000D96C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_pairingCompletedWithBTDevice:result:", *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

id sub_1000D96D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_pairingPromptWithBTDevice:pairingType:pinString:flags:", *(_QWORD *)(a1 + 48), 4 * (*(_DWORD *)(a1 + 56) != 0), *(_QWORD *)(a1 + 40), 0);
}

void sub_1000D96F8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_1000D9780(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1000D9780(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1000D9984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000D99BC(id a1)
{
  operator new();
}

void sub_1000D99FC()
{
  operator delete();
}

void sub_1000D9A20(id a1)
{
  operator new();
}

void sub_1000D9A60()
{
  operator delete();
}

void sub_1000D9A84(id a1)
{
  operator new();
}

void sub_1000D9AD4()
{
  operator delete();
}

void sub_1000D9AF8(id a1)
{
  operator new();
}

void sub_1000D9B38()
{
  operator delete();
}

void sub_1000D9B5C(id a1)
{
  operator new();
}

void sub_1000D9B9C()
{
  operator delete();
}

void sub_1000D9BC0(id a1)
{
  operator new();
}

void sub_1000D9C00()
{
  operator delete();
}

void sub_1000D9C24(id a1)
{
  operator new();
}

void sub_1000D9C64()
{
  operator delete();
}

void sub_1000D9C88(id a1)
{
  operator new();
}

void sub_1000D9CC8()
{
  operator delete();
}

void sub_1000D9CEC(id a1)
{
  operator new();
}

void sub_1000D9D2C()
{
  operator delete();
}

void sub_1000D9D50(id a1)
{
  operator new();
}

void sub_1000D9D90()
{
  operator delete();
}

void sub_1000D9DB4(id a1)
{
  operator new();
}

void sub_1000D9DF4()
{
  operator delete();
}

void sub_1000D9E18(id a1)
{
  operator new();
}

void sub_1000D9E58()
{
  operator delete();
}

void sub_1000D9E7C(id a1)
{
  operator new();
}

void sub_1000D9EBC()
{
  operator delete();
}

void sub_1000D9EE0(id a1)
{
  operator new();
}

void sub_1000D9F20()
{
  operator delete();
}

void sub_1000D9F44(id a1)
{
  operator new();
}

void sub_1000D9F84()
{
  operator delete();
}

void sub_1000D9FA8(id a1)
{
  operator new();
}

void sub_1000D9FE8()
{
  operator delete();
}

void sub_1000DA00C(id a1)
{
  operator new();
}

void sub_1000DA04C()
{
  operator delete();
}

void sub_1000DA070(id a1)
{
  operator new();
}

void sub_1000DA0B0()
{
  operator delete();
}

void sub_1000DA0D4(id a1)
{
  operator new();
}

void sub_1000DA114()
{
  operator delete();
}

void sub_1000DA138(id a1)
{
  operator new();
}

void sub_1000DA178()
{
  operator delete();
}

void sub_1000DA19C(id a1)
{
  operator new();
}

void sub_1000DA1DC()
{
  operator delete();
}

void sub_1000DA404(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DA43C()
{
  void *v0;

  JUMPOUT(0x1000DA42CLL);
}

void sub_1000DA954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  objc_sync_exit(v20);

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1000DA980(uint64_t a1, void *a2, void *a3)
{
  id v5;
  xpc_object_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
  {
    v6 = xpc_array_create(0, 0);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "xpcObjectRepresentation"));
  xpc_array_append_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v9);

}

void sub_1000DAA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000DAB7C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 24);
  v7 = v3;
  if (!v4)
  {
    v5 = objc_alloc_init((Class)NSMutableSet);
    v6 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v5;

    v4 = *(void **)(a1 + 24);
    v3 = v7;
  }
  objc_msgSend(v4, "addObject:", v3);
  if (!*(_BYTE *)(a1 + 32))
  {
    if (dword_100978198 <= 30
      && (dword_100978198 != -1 || _LogCategory_Initialize(&dword_100978198, 30)))
    {
      LogPrintF_safe(&dword_100978198, "void CBStackAccessoryMonitorCPP::addMonitor(CBStackAccessoryMonitorBTStack * _Nonnull __strong)", 30, "Add listeners");
    }
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_100919E68);
    sub_10041E160(off_1009778D0, a1);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100919E88);
    sub_10007A76C((uint64_t)off_1009778E0 + 240, a1 + 8);
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_100919E48);
    sub_10007ABE0((uint64_t)off_100977890 + 64, a1 + 16);
    *(_BYTE *)(a1 + 32) = 1;
  }

}

void sub_1000DACF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000DADD0(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 24), "removeObject:");
  if (*(_BYTE *)(a1 + 32) && !objc_msgSend(*(id *)(a1 + 24), "count"))
  {
    if (dword_100978198 <= 30
      && (dword_100978198 != -1 || _LogCategory_Initialize(&dword_100978198, 30)))
    {
      LogPrintF_safe(&dword_100978198, "void CBStackAccessoryMonitorCPP::removeMonitor(CBStackAccessoryMonitorBTStack * _Nonnull __strong)", 30, "Remove listeners");
    }
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_100919E68);
    sub_10041E298((uint64_t)off_1009778D0, a1);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100919E88);
    sub_100069060((uint64_t)off_1009778E0 + 240, a1 + 8);
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_100919E48);
    sub_100069060((uint64_t)off_100977890 + 64, a1 + 16);
    *(_BYTE *)(a1 + 32) = 0;
  }

}

void sub_1000DAF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000DB014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000DB128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1000DB1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1000DB248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1000DB498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000DB514(id a1, NSString *a2, AudioAccessoryDeviceInfo *a3, BOOL *a4)
{
  AudioAccessoryDeviceInfo *v4;

  v4 = a3;
  -[AudioAccessoryDeviceInfo setChangeFlags:](v4, "setChangeFlags:", 0);
  -[AudioAccessoryDeviceInfo setDiscoveryFlags:](v4, "setDiscoveryFlags:", -[AudioAccessoryDeviceInfo discoveryFlags](v4, "discoveryFlags") & 0xFFFFFFFFFFDFFFFFLL);

}

void sub_1000DB55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000DB570(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  void (**v7)(id, void *);
  void *v8;
  id v9;

  v9 = a3;
  v4 = objc_msgSend(v9, "changeFlags");
  v5 = objc_msgSend(v9, "discoveryFlags");
  if (v4 && v5)
  {
    if (dword_100978198 <= 30
      && (dword_100978198 != -1 || _LogCategory_Initialize(&dword_100978198, 30)))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
      LogPrintF_safe(&dword_100978198, "-[CBStackAccessoryMonitorBTStack updateAccessoryInfo]_block_invoke_2", 30, "Audio Accessory Device Info Changed: %@", v6);

    }
    v7 = (void (**)(id, void *))objc_retainBlock(*(id *)(*(_QWORD *)(a1 + 32) + 48));
    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "xpcObjectRepresentation"));
      v7[2](v7, v8);

    }
    goto LABEL_12;
  }
  if (dword_100978198 <= 10 && (dword_100978198 != -1 || _LogCategory_Initialize(&dword_100978198, 10)))
  {
    v7 = (void (**)(id, void *))objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
    LogPrintF_safe(&dword_100978198, "-[CBStackAccessoryMonitorBTStack updateAccessoryInfo]_block_invoke_2", 10, "Audio Accessory Device: %@ unchanged", v7);
LABEL_12:

  }
}

void sub_1000DB6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1000DB820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1000DB9F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000DBAD4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  id v16;
  _QWORD block[7];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  id v22;
  _BYTE v23[128];

  v22 = 0;
  v16 = objc_msgSend(objc_alloc((Class)CBDevice), "initWithBTStackDevice:error:", a2, &v22);
  v15 = v22;
  if (v16)
  {
    v7 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a4, a3);
    if (dword_100978198 <= 30
      && (dword_100978198 != -1 || _LogCategory_Initialize(&dword_100978198, 30)))
    {
      LogPrintF_safe(&dword_100978198, "virtual void CBStackAccessoryMonitorCPP::accessoryConversationDetectMsgReceived(BT::Device * _Nonnull, uint16_t, BTData _Nonnull)", 30, "Conversation Detect message received for device %@", v16, v15);
    }
    os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BB68);
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v8 = *(id *)(a1 + 24);
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
          v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dispatchQueue"));
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000DBDC4;
          block[3] = &unk_100919488;
          block[4] = v12;
          block[5] = v7;
          block[6] = v16;
          dispatch_async(v13, block);

        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
      }
      while (v9);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BB68);
    goto LABEL_14;
  }
  if (dword_100978198 <= 90 && (dword_100978198 != -1 || _LogCategory_Initialize(&dword_100978198, 90)))
  {
    v14 = CUPrintNSError(v15);
    v7 = (id)objc_claimAutoreleasedReturnValue(v14);
    LogPrintF_safe(&dword_100978198, "virtual void CBStackAccessoryMonitorCPP::accessoryConversationDetectMsgReceived(BT::Device * _Nonnull, uint16_t, BTData _Nonnull)", 90, "### AccessoryConversationDetectMsg init device failed: %@", v7);
LABEL_14:

  }
}

void sub_1000DBD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

id sub_1000DBDC4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_accessoryConversationDetectMessageData:device:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1000DBDD4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  id v16;
  _QWORD block[7];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  id v22;
  _BYTE v23[128];

  v22 = 0;
  v16 = objc_msgSend(objc_alloc((Class)CBDevice), "initWithBTStackDevice:error:", a2, &v22);
  v15 = v22;
  if (v16)
  {
    v7 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a4, a3);
    if (dword_100978198 <= 30
      && (dword_100978198 != -1 || _LogCategory_Initialize(&dword_100978198, 30)))
    {
      LogPrintF_safe(&dword_100978198, "virtual void CBStackAccessoryMonitorCPP::accessoryContextMsgReceived(BT::Device * _Nonnull, uint16_t, BTData _Nonnull)", 30, "Multimodal context message received for device %@", v16, v15);
    }
    os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BB68);
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v8 = *(id *)(a1 + 24);
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
          v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dispatchQueue"));
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000DC0C4;
          block[3] = &unk_100919488;
          block[4] = v12;
          block[5] = v7;
          block[6] = v16;
          dispatch_async(v13, block);

        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
      }
      while (v9);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BB68);
    goto LABEL_14;
  }
  if (dword_100978198 <= 90 && (dword_100978198 != -1 || _LogCategory_Initialize(&dword_100978198, 90)))
  {
    v14 = CUPrintNSError(v15);
    v7 = (id)objc_claimAutoreleasedReturnValue(v14);
    LogPrintF_safe(&dword_100978198, "virtual void CBStackAccessoryMonitorCPP::accessoryContextMsgReceived(BT::Device * _Nonnull, uint16_t, BTData _Nonnull)", 90, "### AccessoryMultimodalContextMsg init device failed: %@", v7);
LABEL_14:

  }
}

void sub_1000DC070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

id sub_1000DC0C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_accessoryContextMessageData:device:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1000DC0D4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  id v16;
  _QWORD block[7];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  id v22;
  _BYTE v23[128];

  v22 = 0;
  v16 = objc_msgSend(objc_alloc((Class)CBDevice), "initWithBTStackDevice:error:", a2, &v22);
  v15 = v22;
  if (v16)
  {
    v7 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a4, a3);
    if (dword_100978198 <= 30
      && (dword_100978198 != -1 || _LogCategory_Initialize(&dword_100978198, 30)))
    {
      LogPrintF_safe(&dword_100978198, "virtual void CBStackAccessoryMonitorCPP::accessoryPMEConfigMsgReceived(BT::Device * _Nonnull, uint16_t, BTData _Nonnull)", 30, "PME Config received for device %@", v16, v15);
    }
    os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BB68);
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v8 = *(id *)(a1 + 24);
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v10)
            objc_enumerationMutation(v8);
          v12 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
          v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "dispatchQueue"));
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000DC3C4;
          block[3] = &unk_100919488;
          block[4] = v12;
          block[5] = v7;
          block[6] = v16;
          dispatch_async(v13, block);

        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
      }
      while (v9);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BB68);
    goto LABEL_14;
  }
  if (dword_100978198 <= 90 && (dword_100978198 != -1 || _LogCategory_Initialize(&dword_100978198, 90)))
  {
    v14 = CUPrintNSError(v15);
    v7 = (id)objc_claimAutoreleasedReturnValue(v14);
    LogPrintF_safe(&dword_100978198, "virtual void CBStackAccessoryMonitorCPP::accessoryPMEConfigMsgReceived(BT::Device * _Nonnull, uint16_t, BTData _Nonnull)", 90, "### AccessoryPMEConfigMsg init device failed: %@", v7);
LABEL_14:

  }
}

void sub_1000DC370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

id sub_1000DC3C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_accessoryPMEConfigData:device:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1000DC3D4(uint64_t a1, uint64_t a2, int a3)
{
  if (dword_100978198 <= 30 && (dword_100978198 != -1 || _LogCategory_Initialize(&dword_100978198, 30)))
    LogPrintF_safe(&dword_100978198, "virtual void CBStackAccessoryMonitorCPP::deviceInfoChanged(BT::Device * _Nonnull, BT::DEVICE_INFO_CHANGED_TYPE)", 30, "Device info changed: 0x%X", a3);
  sub_1000DC454(a1);
}

void sub_1000DC454(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  NSObject *v7;
  _QWORD block[5];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BB68);
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(a1 + 24);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
        v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dispatchQueue"));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000DC784;
        block[3] = &unk_1009172A0;
        block[4] = v6;
        dispatch_async(v7, block);

      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BB68);
}

void sub_1000DC5B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1000DC5D8(uint64_t a1, uint64_t a2, int a3)
{
  sub_1000DC3D4(a1 - 8, a2, a3);
}

void sub_1000DC5E0(uint64_t a1, int a2)
{
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  NSObject *v9;
  _QWORD v10[5];
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BB68);
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = *(id *)(a1 + 24);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dispatchQueue"));
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        v10[2] = sub_1000DC76C;
        v10[3] = &unk_1009173A0;
        v10[4] = v8;
        v11 = a2;
        dispatch_async(v9, v10);

      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BB68);
}

void sub_1000DC74C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000DC76C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "localDeviceEvent:", *(unsigned int *)(a1 + 40));
}

void sub_1000DC77C(uint64_t a1, int a2)
{
  sub_1000DC5E0(a1 - 16, a2);
}

id sub_1000DC784(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateAccessoryInfo");
}

uint64_t sub_1000DC78C(uint64_t a1)
{

  return a1;
}

void sub_1000DC7B4(uint64_t a1)
{

  operator delete();
}

void sub_1000DC7F4(id a1)
{
  operator new();
}

void sub_1000DC834()
{
  operator delete();
}

void sub_1000DC858(id a1)
{
  operator new();
}

void sub_1000DC898()
{
  operator delete();
}

void sub_1000DC8BC(id a1)
{
  operator new();
}

void sub_1000DC8FC()
{
  operator delete();
}

void sub_1000DC9D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000DCAB8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 8);
  v7 = v3;
  if (!v4)
  {
    v5 = objc_alloc_init((Class)NSMutableSet);
    v6 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;

    v4 = *(void **)(a1 + 8);
    v3 = v7;
  }
  objc_msgSend(v4, "addObject:", v3);
  if (!*(_BYTE *)(a1 + 16))
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100919F58);
    sub_10061F358((uint64_t)off_1009778A0, a1, 0);
    *(_BYTE *)(a1 + 16) = 1;
  }

}

void sub_1000DCB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000DCC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000DCC30(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 8), "removeObject:");
  if (*(_BYTE *)(a1 + 16) && !objc_msgSend(*(id *)(a1 + 8), "count"))
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100919F58);
    sub_10061F45C((uint64_t)off_1009778A0, a1);
    *(_BYTE *)(a1 + 16) = 0;
  }

}

void sub_1000DCCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1000DCF04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1000DD06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

unint64_t sub_1000DD094()
{
  unint64_t v0;
  unsigned __int8 v2[8];

  os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BB78);
  if (qword_10097BB80)
  {
    *(_DWORD *)&v2[3] = 0;
    *(_DWORD *)v2 = 0;
    sub_10022467C(1u, (uint64_t)v2);
    v0 = ((unint64_t)v2[1] << 40) | ((unint64_t)v2[2] << 32) | ((unint64_t)v2[3] << 24) | ((unint64_t)v2[4] << 16) | ((unint64_t)v2[5] << 8) | v2[6] | ((unint64_t)v2[0] << 48);
  }
  else
  {
    v0 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BB78);
  return v0;
}

void sub_1000DD23C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000DD29C;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_1000DD29C(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  NSObject *v7;
  _QWORD block[5];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v1 = *(_QWORD *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_10097BB78);
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(v1 + 8);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
        v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "dispatchQueue"));
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000DD420;
        block[3] = &unk_1009172A0;
        block[4] = v6;
        dispatch_async(v7, block);

      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v3);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10097BB78);
}

void sub_1000DD400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1000DD420(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addressChanged:", 0);
}

void sub_1000DD430(id a1)
{
  operator new();
}

void sub_1000DD470()
{
  operator delete();
}

void IOBTDebug::create(IOBTDebug *this)
{
  operator new();
}

uint64_t IOBTDebug::init(IOBTDebug *this)
{
  const __CFDictionary *v2;
  io_service_t MatchingService;
  kern_return_t v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  const char *v24;

  std::mutex::lock((std::mutex *)this);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v23 = 136315138;
    v24 = "init";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "IOBTDebug::%s: \n", (uint8_t *)&v23, 0xCu);
  }
  v2 = IOServiceMatching("BTDebug");
  if (v2)
  {
    MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v2);
    *((_DWORD *)this + 16) = MatchingService;
    if (MatchingService)
    {
      v4 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)this + 17);
      if (!v4)
      {
        v21 = 1;
        goto LABEL_13;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_1000DDF6C(v4);
    }
    else
    {
      v13 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
      if (v13)
        sub_1000DDEF8(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  else
  {
    v5 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v5)
      sub_1000DDE84(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  v21 = 0;
LABEL_13:
  std::mutex::unlock((std::mutex *)this);
  return v21;
}

void sub_1000DD678(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void IOBTDebug::~IOBTDebug(IOBTDebug *this)
{
  io_connect_t v2;
  io_object_t v3;
  NSObject *v4;
  const char *v5;
  int v6;
  _QWORD block[5];
  uint8_t buf[4];
  const char *v9;

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v9 = "~IOBTDebug";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "IOBTDebug::%s: \n", buf, 0xCu);
  }
  v2 = *((_DWORD *)this + 17);
  if (v2)
  {
    IOServiceClose(v2);
    *((_DWORD *)this + 17) = 0;
  }
  v3 = *((_DWORD *)this + 16);
  if (v3)
  {
    IOObjectRelease(v3);
    *((_DWORD *)this + 16) = 0;
  }
  v4 = *((_QWORD *)this + 9);
  if (*((_QWORD *)this + 10))
  {
    if (v4)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = sub_1000DD858;
      block[3] = &unk_100919F78;
      block[4] = this;
      dispatch_sync(v4, block);
      dispatch_release(*((dispatch_object_t *)this + 9));
      *((_QWORD *)this + 9) = 0;
      goto LABEL_11;
    }
    v5 = "fQueue";
    v6 = 65;
LABEL_16:
    __assert_rtn("~IOBTDebug", "IOBTDebug.cpp", v6, v5);
  }
  if (v4)
  {
    v5 = "!fQueue";
    v6 = 78;
    goto LABEL_16;
  }
LABEL_11:
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v9 = "~IOBTDebug";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "IOBTDebug::%s: --done\n", buf, 0xCu);
  }
  std::mutex::~mutex((std::mutex *)this);
}

void sub_1000DD84C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1000799A8(a1);
}

void sub_1000DD858(uint64_t a1)
{
  uint64_t v1;
  IONotificationPort *v2;

  v1 = *(_QWORD *)(a1 + 32);
  std::mutex::lock((std::mutex *)v1);
  v2 = *(IONotificationPort **)(v1 + 80);
  if (v2)
  {
    IONotificationPortDestroy(v2);
    *(_QWORD *)(v1 + 80) = 0;
  }
  std::mutex::unlock((std::mutex *)v1);
}

void sub_1000DD890(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void IOBTDebug::setNotificationPort(IOBTDebug *this)
{
  NSObject *v2;
  dispatch_queue_t v3;
  IONotificationPort *v4;

  if (!*((_QWORD *)this + 10))
  {
    if (*((_QWORD *)this + 9))
      sub_1000DE048();
    v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
    v3 = dispatch_queue_create("com.apple.BTDebug.IOBTDebug", v2);
    *((_QWORD *)this + 9) = v3;
    if (!v3)
      sub_1000DDFF8();
    v4 = IONotificationPortCreate(kIOMainPortDefault);
    *((_QWORD *)this + 10) = v4;
    if (!v4)
      sub_1000DE020();
    IONotificationPortSetDispatchQueue(v4, *((dispatch_queue_t *)this + 9));
  }
}

uint64_t IOBTDebug::coreDump(std::mutex *this, uint64_t a2, const char *a3, void (*a4)(void *, int), void *a5)
{
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  IONotificationPort *v18;
  mach_port_t sig_high;
  mach_port_t MachPort;
  size_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  int v35;
  uint64_t input;
  uint64_t reference[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v39 = 0u;
  v40 = 0u;
  *(_OWORD *)reference = 0u;
  v38 = 0u;
  std::mutex::lock(this);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v33 = "coreDump";
    v34 = 1024;
    v35 = a2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "IOBTDebug::%s: size %u\n", buf, 0x12u);
  }
  if (!a4)
  {
    v10 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v10)
      sub_1000DE0E4(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  IOBTDebug::setNotificationPort((IOBTDebug *)this);
  v18 = *(IONotificationPort **)&this[1].__m_.__opaque[8];
  if (v18)
  {
    input = a2;
    reference[1] = (uint64_t)a4;
    *(_QWORD *)&v38 = a5;
    sig_high = HIDWORD(this[1].__m_.__sig);
    MachPort = IONotificationPortGetMachPort(v18);
    v21 = strlen(a3);
    v22 = IOConnectCallAsyncMethod(sig_high, 0, MachPort, reference, 3u, &input, 1u, a3, v21 + 1, 0, 0, 0, 0);
  }
  else
  {
    v22 = 3758097112;
    v23 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v23)
      sub_1000DE070(v23, v24, v25, v26, v27, v28, v29, v30);
  }
  std::mutex::unlock(this);
  return v22;
}

void sub_1000DDAC0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t IOBTDebug::enableLogging(uint64_t a1, unsigned int a2, unsigned int a3, int *a4, int *a5, unsigned int a6)
{
  uint64_t v6;
  int *v7;
  int *v9;
  std::mutex *v13;
  uint64_t v14;
  uint8_t *v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;
  unsigned int v29;
  uint64_t input[2];

  v6 = 3758097090;
  if (a4)
  {
    v7 = a5;
    if (a5)
    {
      if (a6 - 1 <= 2)
      {
        v9 = a4;
        v13 = (std::mutex *)__chkstk_darwin();
        v15 = &buf[-v14];
        std::mutex::lock(v13);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          v23 = "enableLogging";
          v24 = 1024;
          v25 = a2;
          v26 = 1024;
          v27 = a3;
          v28 = 1024;
          v29 = a6;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "IOBTDebug::%s: bufferSize %u, numReads %u, numLogs %u\n", buf, 0x1Eu);
        }
        input[0] = a2;
        input[1] = a3;
        v16 = v15 + 4;
        v17 = a6;
        do
        {
          v19 = *v7++;
          v18 = v19;
          v20 = *v9++;
          *(v16 - 1) = v20;
          *v16 = v18;
          v16 += 2;
          --v17;
        }
        while (v17);
        v6 = IOConnectCallMethod(*(_DWORD *)(a1 + 68), 1u, input, 2u, v15, 8 * a6, 0, 0, 0, 0);
        std::mutex::unlock((std::mutex *)a1);
      }
    }
  }
  return v6;
}

void sub_1000DDC88(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t IOBTDebug::disableLogging(IOBTDebug *this)
{
  uint64_t v2;
  int v4;
  const char *v5;

  std::mutex::lock((std::mutex *)this);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315138;
    v5 = "disableLogging";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "IOBTDebug::%s: \n", (uint8_t *)&v4, 0xCu);
  }
  v2 = IOConnectCallScalarMethod(*((_DWORD *)this + 17), 2u, 0, 0, 0, 0);
  std::mutex::unlock((std::mutex *)this);
  return v2;
}

void sub_1000DDD70(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t IOBTDebug::dumpLogs(IOBTDebug *this, const char *a2)
{
  size_t v4;
  uint64_t v5;
  int v7;
  const char *v8;

  std::mutex::lock((std::mutex *)this);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315138;
    v8 = "dumpLogs";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "IOBTDebug::%s: \n", (uint8_t *)&v7, 0xCu);
  }
  v4 = strlen(a2);
  v5 = IOConnectCallStructMethod(*((_DWORD *)this + 17), 3u, a2, v4 + 1, 0, 0);
  std::mutex::unlock((std::mutex *)this);
  return v5;
}

void sub_1000DDE70(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000DDE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100072684((void *)&_mh_execute_header, &_os_log_default, a3, "IOBTDebug::%s: could not create matching dictionary\n", a5, a6, a7, a8, 2u);
  sub_1000726A0();
}

void sub_1000DDEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100072684((void *)&_mh_execute_header, &_os_log_default, a3, "IOBTDebug::%s: could not get matching service\n", a5, a6, a7, a8, 2u);
  sub_1000726A0();
}

void sub_1000DDF6C(int a1)
{
  int v1;
  const char *v2;
  __int16 v3;
  int v4;

  v1 = 136315394;
  v2 = "init";
  v3 = 1024;
  v4 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "IOBTDebug::%s: could not open service: 0x%x\n", (uint8_t *)&v1, 0x12u);
  sub_1000726A0();
}

void sub_1000DDFF8()
{
  __assert_rtn("setNotificationPort", "IOBTDebug.cpp", 132, "fQueue");
}

void sub_1000DE020()
{
  __assert_rtn("setNotificationPort", "IOBTDebug.cpp", 135, "fNotificationPort != MACH_PORT_NULL");
}

void sub_1000DE048()
{
  __assert_rtn("setNotificationPort", "IOBTDebug.cpp", 130, "!fQueue");
}

void sub_1000DE070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100072684((void *)&_mh_execute_header, &_os_log_default, a3, "IOBTDebug::%s: no async port\n", a5, a6, a7, a8, 2u);
  sub_1000726A0();
}

void sub_1000DE0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100072684((void *)&_mh_execute_header, &_os_log_default, a3, "IOBTDebug::%s: no callback\n", a5, a6, a7, a8, 2u);
  sub_1000726A0();
}

void sub_1000DE158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000726C0(a1, a2, a3, a4, a5);
  v6 = sub_1000DE1AC(v5);
  sub_1000DE194(v6, (uint64_t)&off_10091A120, v7);
  sub_1000DE1A0();
}

void sub_1000DE194(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_1000DEE48((uint64_t)va, a2, (uint64_t)va1);
}

uint64_t sub_1000DE1AC(uint64_t a1, ...)
{
  unsigned int v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return sub_1000DE720(v2, v1, (uint64_t *)va);
}

BOOL sub_1000DE1BC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  memset(a1, 0, 0x40uLL);
  *a1 = a2;
  a1[1] = a3;
  return sub_1000DE1FC((uint64_t)a1);
}

BOOL sub_1000DE1FC(uint64_t a1)
{
  unsigned int v1;
  uint64_t *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v1 = *(unsigned __int16 *)(a1 + 16);
  v2 = *(uint64_t **)a1;
  v3 = *(unsigned __int16 *)(*(_QWORD *)a1 + 32);
  if (v1 < v3)
  {
    v4 = *v2;
    v5 = *(unsigned __int16 *)(a1 + 18);
    v6 = *(_DWORD *)(*v2 + 4 * v5);
    *(_BYTE *)(a1 + 30) = BYTE1(v6);
    if ((v6 & 3) == 2)
    {
      LODWORD(v7) = *(_DWORD *)(v4 + 4 * (v5 + 1));
      v8 = *(_DWORD *)(v4 + 4 * (v5 + 2));
      v9 = *(_DWORD *)(v4 + 4 * (v5 + 3));
      *(_WORD *)(a1 + 28) = HIWORD(v6);
      *(_WORD *)(a1 + 24) = (v7 >> 2) & 0xFFC0 | (v6 >> 2);
    }
    else if ((v6 & 3) == 1)
    {
      v10 = *(_DWORD *)(v4 + 4 * v5 + 4);
      *(_WORD *)(a1 + 28) = HIWORD(v6) & 0xFFF;
      *(_WORD *)(a1 + 24) = (v10 >> 22) & 0x3C0 | (v6 >> 2);
      LODWORD(v7) = v6 >> 28;
      v8 = (unsigned __int16)v10;
      v9 = HIWORD(v10) & 0xFFF;
    }
    else if ((v6 & 3) != 0)
    {
      v7 = (_DWORD *)(v4 + 4 * v5);
      v11 = v7[1];
      v8 = v7[2];
      v9 = v7[3];
      *(_WORD *)(a1 + 28) = v7[4];
      *(_WORD *)(a1 + 24) = (v11 >> 2) & 0xFFC0 | (v6 >> 2);
      LOBYTE(v7) = v11;
    }
    else
    {
      *(_WORD *)(a1 + 28) = 1;
      *(_WORD *)(a1 + 24) = v6 >> 2;
      LODWORD(v7) = HIBYTE(v6) & 0xF;
      v8 = BYTE2(v6);
      v9 = v6 >> 28;
    }
    v12 = BYTE1(v6);
    *(_WORD *)(a1 + 26) = v9;
    v13 = *(_QWORD *)(a1 + 8);
    if (v13)
    {
      v14 = (_QWORD *)(v13 + v8);
      v15 = v6 & 0x3000;
      v16 = (char *)(a1 + 28);
      if ((v12 & 0x40 | 0x80) != 0x80)
        v16 = 0;
      *(_QWORD *)(a1 + 32) = v14;
      if (v15 == 0x2000)
        v17 = v16;
      else
        v17 = 0;
      if ((_BYTE)v7)
        v17 = (char *)v14 - (char)v7;
      *(_QWORD *)(a1 + 48) = v17;
      if ((v12 & 0xC0) == 0x80)
        *(_QWORD *)(a1 + 40) = *v14;
      else
        *(_QWORD *)(a1 + 40) = v14;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 48) = 0;
    }
    if ((v12 & 0xE) == 8)
      v18 = *(_QWORD *)(v2[1] + 8 * *(unsigned __int16 *)(a1 + 22));
    else
      v18 = 0;
    *(_QWORD *)(a1 + 56) = v18;
  }
  return v1 < v3;
}

void sub_1000DE384(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _DWORD **v5;

  v4 = a2 + 1;
  v5 = *(_DWORD ***)(*a2 + 16);
  if ((**v5 & 0xC000) != 0x8000)
    v4 = (_QWORD *)*v4;
  sub_1000DE1BC(a1, (uint64_t)v5, (uint64_t)v4);
  a1[6] = a2 + 3;
  sub_1000DE5DC();
}

void sub_1000DE3D4(_WORD *a1)
{
  sub_1000DE400(a1);
  sub_1000726CC();
  sub_1000DE5DC();
}

double sub_1000DE400(_WORD *a1)
{
  unsigned __int16 v1;
  uint64_t v2;
  int v3;
  __int16 v4;
  __int16 v5;
  double result;

  v1 = a1[8] + 1;
  a1[8] = v1;
  if (*(unsigned __int16 *)(*(_QWORD *)a1 + 32) <= v1)
  {
    result = 0.0;
    *((_QWORD *)a1 + 2) = 0;
  }
  else
  {
    v2 = (unsigned __int16)a1[9];
    v3 = *(_DWORD *)(**(_QWORD **)a1 + 4 * v2);
    a1[9] = v2 + (1 << (v3 & 3));
    v4 = a1[10];
    if ((v3 & 0x3000) == 0)
      ++v4;
    a1[10] = v4;
    if ((v3 & 0xE00) == 0x800)
      v5 = a1[11] + 1;
    else
      v5 = a1[11];
    a1[11] = v5;
  }
  return result;
}

uint64_t sub_1000DE470(unsigned __int16 *a1, unsigned int a2)
{
  unsigned int v2;
  int v6;
  unsigned int v7;

  v2 = a1[12];
  if (v2 == a2)
    return 1;
  if (*(unsigned __int16 *)(*(_QWORD *)a1 + 36) >= a2)
  {
    v6 = a1[8];
    if (v2 > a2)
      a1[8] = *(_WORD *)(*(_QWORD *)a1 + 32);
    while (1)
    {
      sub_1000DE400(a1);
      sub_1000DE5E4();
      if (((a2 ^ (v7 >> 2)) & 0x3F) == 0)
      {
        sub_1000726CC();
        if (a1[12] == a2 && (a1[15] & 0xF) != 0xA)
          break;
      }
      if (a1[8] == v6)
      {
        sub_1000726CC();
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

void sub_1000DE51C(uint64_t a1)
{
  int v2;
  __int16 v3;

  if ((*(_BYTE *)(a1 + 30) & 0xF) == 0xA)
  {
LABEL_6:
    sub_1000DE5DC();
  }
  else
  {
    v2 = *(unsigned __int16 *)(a1 + 16);
    while (1)
    {
      sub_1000DE400((_WORD *)a1);
      sub_1000DE5E4();
      if ((v3 & 0xF00) == 0xA00)
        break;
      if (*(unsigned __int16 *)(a1 + 16) == v2)
      {
        sub_1000726CC();
        goto LABEL_6;
      }
    }
    sub_1000DE1FC(a1);
  }
}

uint64_t sub_1000DE58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (**v3)(uint64_t, uint64_t, _QWORD);
  uint64_t (*v4)(uint64_t, uint64_t, _QWORD);
  uint64_t (**v5)(_QWORD, _QWORD, _QWORD);

  if (*(_WORD *)(a3 + 26) == 16)
  {
    v3 = *(uint64_t (***)(uint64_t, uint64_t, _QWORD))(a3 + 40);
    if (v3)
    {
      if (a1)
      {
        v4 = *v3;
        if (*v3)
        {
          v5 = v3 + 1;
          return v4(a1, a3, v5);
        }
      }
      if (a2)
      {
        v4 = *v3;
        if (*v3)
        {
          v5 = v3 + 1;
          a1 = a2;
          return v4(a1, a3, v5);
        }
      }
    }
  }
  return 1;
}

void sub_1000DE5F8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  _BYTE v6[16];

  if (a3)
  {
    v3 = a3;
    if (a2 || *(uint64_t (**)(uint64_t, _BYTE *, uint64_t))a1 == sub_1000DE6F4)
    {
      if (*(_QWORD *)(a1 + 16) >= a3 && ((*(uint64_t (**)(uint64_t))a1)(a1) & 1) != 0)
      {
        *(_QWORD *)(a1 + 16) -= v3;
      }
      else
      {
        sub_1000726D4();
        sub_1000DF8B4();
        *(_QWORD *)(a1 + 24) = v5;
      }
    }
    else
    {
      while (v3 >= 0x11)
      {
        if (!sub_1000DE5F8(a1, v6, 16))
          return;
        v3 -= 16;
      }
      sub_1000DE5F8(a1, v6, v3);
    }
  }
}

uint64_t sub_1000DE6F4(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  char *v3;
  char v4;

  v3 = *(char **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = &v3[a3];
  if (a2 && a3)
  {
    do
    {
      v4 = *v3++;
      *a2++ = v4;
      --a3;
    }
    while (a3);
  }
  return 1;
}

uint64_t sub_1000DE720@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = sub_1000DE6F4;
  a3[1] = result;
  a3[2] = a2;
  a3[3] = 0;
  return result;
}

void sub_1000DE734(uint64_t a1, uint64_t a2)
{
  sub_1000DE73C(a1, a2, 0);
}

void sub_1000DE73C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  int *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  int v17;
  int v18;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[7];
  unsigned __int8 v24;

  sub_1000DF948();
  sub_1000DE8C4(v6, (uint64_t)&v24);
  if ((v7 & 1) != 0)
  {
    v15 = v24;
    if ((char)v24 < 0)
    {
      v15 = v24 & 0x7F;
      v16 = 7;
      while (1)
      {
        sub_1000DF93C(v7, v8, v9, v10, v11, v12, v13, v14, v22, *(int *)v23, *(__int16 *)&v23[4], v23[6], v24);
        if (!(_DWORD)v7)
          break;
        v17 = v16;
        if (v16 < 0x20u)
        {
          v15 |= (v24 & 0x7F) << v16;
        }
        else
        {
          if (v16 >= 0x3Fu)
            v18 = 1;
          else
            v18 = 255;
          v20 = v15 < 0 && v18 == v24;
          if ((v24 & 0x7F) == 0)
            v20 = 1;
          if (v16 > 0x3Fu || !v20)
            goto LABEL_28;
        }
        v16 += 7;
        if ((v24 & 0x80) == 0)
        {
          if (v17 == 28 && (v24 & 0x70) != 0)
          {
LABEL_28:
            sub_1000726D4();
            sub_1000DF8B4();
            *(_QWORD *)(v3 + 24) = v21;
            return;
          }
          goto LABEL_3;
        }
      }
    }
    else
    {
LABEL_3:
      *v4 = v15;
    }
  }
  else if (a3 && !*(_QWORD *)(v3 + 16))
  {
    *a3 = 1;
  }
}

void sub_1000DE844()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1000DF948();
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v12 = v10;
    if (v10 >= 0x40u)
      break;
    sub_1000DF93C(v2, v3, v4, v5, v6, v7, v8, v9, v14, v15, SWORD2(v15), SBYTE6(v15), SHIBYTE(v15));
    if (!(_DWORD)v2)
      return;
    v11 |= (unint64_t)(HIBYTE(v15) & 0x7F) << v12;
    v10 = v12 + 7;
    if ((v15 & 0x8000000000000000) == 0)
    {
      *v1 = v11;
      return;
    }
  }
  sub_1000726D4();
  sub_1000DF8B4();
  *(_QWORD *)(v0 + 24) = v13;
}

void sub_1000DE8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)(a1 + 16) && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1)(a1, a2, 1) & 1) != 0)
  {
    --*(_QWORD *)(a1 + 16);
  }
  else
  {
    sub_1000726D4();
    sub_1000DF8B4();
    *(_QWORD *)(a1 + 24) = v3;
  }
}

void sub_1000DE934(uint64_t a1, int *a2, unsigned int *a3, _BYTE *a4)
{
  int v6;
  char v7;
  unsigned int v8;

  *a4 = 0;
  *a2 = 0;
  *a3 = 0;
  sub_1000DE73C(a1, (uint64_t)&v8, a4);
  if (v6)
  {
    v7 = v8;
    *a3 = v8 >> 3;
    *a2 = v7 & 7;
  }
  sub_100097218();
}

void sub_1000DE984(uint64_t a1, int a2)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  unsigned int v7;

  switch(a2)
  {
    case 0:
      do
        sub_1000DF918(a1, (uint64_t)&v6);
      while ((_DWORD)a1 && v6 < 0);
      goto LABEL_9;
    case 1:
      v3 = 8;
      goto LABEL_11;
    case 2:
      sub_1000DE734(a1, (uint64_t)&v7);
      if (v4)
        sub_1000DE5F8(a1, 0, v7);
      goto LABEL_9;
    case 5:
      v3 = 4;
LABEL_11:
      sub_1000DE5F8(a1, 0, v3);
      break;
    default:
      sub_1000726D4();
      sub_1000DF8B4();
      *(_QWORD *)(a1 + 24) = v5;
LABEL_9:
      sub_100097218();
      break;
  }
}

void sub_1000DEA40()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  sub_1000DF948();
  sub_1000DE734(v2, (uint64_t)&v7);
  if (v3)
  {
    v4 = *(_OWORD *)(v0 + 16);
    *v1 = *(_OWORD *)v0;
    v1[1] = v4;
    v5 = v7;
    if (*((_QWORD *)v1 + 2) >= (unint64_t)v7)
    {
      *((_QWORD *)v1 + 2) = v7;
      *(_QWORD *)(v0 + 16) -= v5;
    }
    else
    {
      sub_1000726D4();
      sub_1000DF8B4();
      *(_QWORD *)(v0 + 24) = v6;
    }
  }
  sub_100097218();
}

void sub_1000DEAAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;

  sub_1000DF948();
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3 || (sub_1000DE5F8(v1, 0, v3), v4))
  {
    *(_QWORD *)(v0 + 8) = *(_QWORD *)(v1 + 8);
    *(_QWORD *)(v0 + 24) = *(_QWORD *)(v1 + 24);
  }
}

void sub_1000DEAF4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD **v15;
  unsigned int v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD **v29;
  uint64_t (*v30)(uint64_t, _QWORD **, uint64_t, uint64_t);
  char v31;
  int v32;
  uint64_t v33;
  unsigned int v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  char v43;
  unsigned int v44;
  unsigned int v45;
  unsigned __int16 v46[8];
  unsigned __int16 v47;
  unsigned __int16 v48;
  unsigned __int16 v49;
  unsigned __int16 v50;
  char v51;
  _QWORD *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  unsigned __int16 v55;
  _QWORD v56[3];
  unsigned __int16 v57;

  v55 = 0;
  v54 = 0;
  v6 = sub_1000DE1BC(v46, a2, a3);
  if ((a4 & 1) == 0 && v6)
  {
    sub_1000DEF2C((uint64_t)v46, v7, v8, v9, v10, v11, v12, v13);
    if ((v14 & 1) == 0)
    {
      sub_1000726D4();
LABEL_74:
      sub_1000DF8B4();
      *(_QWORD *)(a1 + 24) = v41;
      return;
    }
  }
  v42 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0xFFFF;
  while (*(_QWORD *)(a1 + 16))
  {
    sub_1000DE934(a1, (int *)&v44, &v45, &v43);
    if ((v18 & 1) == 0)
    {
      if (!v43)
        return;
      break;
    }
    v19 = v45;
    if (!v45)
    {
      if ((a4 & 4) == 0)
      {
LABEL_55:
        sub_1000DF8B4();
        *(_QWORD *)(a1 + 24) = v33;
        return;
      }
      break;
    }
    if (sub_1000DE470(v46, v45) && (v51 & 0xF) != 0xA)
    {
      if ((v51 & 0x30) == 0x20 && v53 == &v50)
      {
        if (v17 != v47)
        {
          if (v17 != 0xFFFF && v55 != v42)
            goto LABEL_55;
          v55 = 0;
          v42 = v50;
          v17 = v47;
        }
        v53 = &v55;
      }
      if ((v51 & 0x30) == 0 && v48 <= 0x3Fu)
        *(_DWORD *)((char *)&v54 + (((unint64_t)v48 >> 3) & 0x1FFC)) |= 1 << v48;
      sub_1000DF0C8(a1, v44, (unsigned __int8 *)v46);
      if ((v24 & 1) == 0)
        return;
    }
    else
    {
      if (!v16)
      {
        sub_1000DE51C((uint64_t)v46);
        if (v20)
        {
          v15 = (_QWORD **)*v52;
          v21 = v49;
        }
        else
        {
          v21 = 0;
        }
        if (v15)
          v16 = v21;
        else
          v16 = -1;
      }
      v25 = v44;
      if (v19 < v16)
        goto LABEL_36;
      v27 = *(_QWORD *)(a1 + 16);
      v28 = v27;
      v29 = v15;
      if (v15)
      {
        while (v27 == v28)
        {
          v30 = (uint64_t (*)(uint64_t, _QWORD **, uint64_t, uint64_t))**v29;
          if (v30)
          {
            if ((v30(a1, v29, v19, v25) & 1) == 0)
              return;
          }
          else
          {
            sub_1000DE384(v56, v29);
            if ((v31 & 1) == 0)
              goto LABEL_55;
            if ((_DWORD)v19 == v57)
            {
              if (v56[1])
              {
                *((_BYTE *)v29 + 24) = 1;
                sub_1000DF0C8(a1, v25, (unsigned __int8 *)v56);
                if (!v32)
                  return;
              }
            }
          }
          v29 = (_QWORD **)v29[2];
          v28 = *(_QWORD *)(a1 + 16);
          if (!v29)
            break;
        }
      }
      if (v27 == v28)
      {
        LODWORD(v25) = v44;
LABEL_36:
        sub_1000DE984(a1, v25);
        if ((v26 & 1) == 0)
          return;
      }
    }
  }
  if (v17 != 0xFFFF && v55 != v42)
    goto LABEL_73;
  if (*(_WORD *)(*(_QWORD *)v46 + 34))
  {
    v35 = *(unsigned __int16 *)(*(_QWORD *)v46 + 34) >= 0x40u ? 64 : *(unsigned __int16 *)(*(_QWORD *)v46 + 34);
    v36 = v35 >> 5;
    v37 = (int *)&v54;
    v38 = v36;
    while (v38)
    {
      v39 = *v37++;
      --v38;
      if (v39 != -1)
        goto LABEL_73;
    }
    v40 = v35 & 0x1F;
    if (v40)
    {
      if (*((_DWORD *)&v54 + v36) != 0xFFFFFFFF >> -(char)v40)
      {
LABEL_73:
        sub_1000726D4();
        goto LABEL_74;
      }
    }
  }
}

void sub_1000DEE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000DEAF4(a1, a2, a3, 0);
}

void sub_1000DEE50(uint64_t a1, BOOL *a2)
{
  int v3;
  int v4;

  sub_1000DE734(a1, (uint64_t)&v4);
  if (v3)
    *a2 = v4 != 0;
  sub_100097218();
}

void sub_1000DEE88(uint64_t a1, unint64_t *a2)
{
  int v3;
  unint64_t v4;

  sub_1000DE844();
  if (v3)
    *a2 = -(uint64_t)(v4 & 1) ^ (v4 >> 1);
  sub_100097218();
}

void sub_1000DEEC4(uint64_t a1, _DWORD *a2)
{
  int v3;
  int v4;

  sub_1000DE5F8(a1, (uint64_t)&v4, 4uLL);
  if (v3)
    *a2 = v4;
  sub_100097218();
}

void sub_1000DEEF8(uint64_t a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;

  sub_1000DE5F8(a1, (uint64_t)&v4, 8uLL);
  if (v3)
    *a2 = v4;
  sub_100097218();
}

void sub_1000DEF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  char v10;
  uint64_t v11;
  int v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[8];

  v29 = 0u;
  v30 = 0u;
  v28 = 0;
  if (*(_QWORD *)(*(_QWORD *)a1 + 16))
  {
    *((_QWORD *)&v29 + 1) = *(_QWORD *)(*(_QWORD *)a1 + 16);
    v30 = 0xFFFFFFFFFFFFFFFFLL;
    sub_1000DF8E4(a1, a2, a3, a4, a5, a6, a7, a8, v27, SWORD2(v27), SBYTE6(v27), SHIBYTE(v27), 0, 0, (char)sub_1000DE6F4);
    if (!v9)
      return;
  }
  while (1)
  {
    v10 = *(_BYTE *)(a1 + 30);
    if ((v10 & 0xF) == 0xA)
      break;
    if ((v10 & 0xC0) == 0x80)
    {
      **(_QWORD **)(a1 + 32) = 0;
      if ((v10 & 0x20) != 0)
        goto LABEL_24;
    }
    else if ((*(_BYTE *)(a1 + 30) & 0xC0) == 0)
    {
      v13 = v10 & 0x30;
      if (v13 == 48 || v13 == 32)
      {
LABEL_24:
        **(_WORD **)(a1 + 48) = 0;
        goto LABEL_25;
      }
      if (v13 == 16)
      {
        v14 = *(_BYTE **)(a1 + 48);
        if (v14)
          *v14 = 0;
      }
      if ((v10 & 0xE) == 8
        && ((v15 = *(_QWORD *)(a1 + 56), *(_QWORD *)(v15 + 16)) || *(_QWORD *)(v15 + 24) || **(_QWORD **)(v15 + 8)))
      {
        if (sub_1000DE1BC(v31, v15, *(_QWORD *)(a1 + 40)) && !sub_1000DEF2C(v31))
          return;
      }
      else
      {
        memset(*(void **)(a1 + 40), 0, *(unsigned __int16 *)(a1 + 26));
      }
    }
LABEL_25:
    if (HIDWORD(v28) && HIDWORD(v28) == *(unsigned __int16 *)(a1 + 24))
    {
      sub_1000DF0C8((uint64_t)&v29, v28, (unsigned __int8 *)a1);
      if (!(_DWORD)v16)
        return;
      sub_1000DF8E4(v16, v17, v18, v19, v20, v21, v22, v23, v27, SWORD2(v27), SBYTE6(v27), SHIBYTE(v27), v28, HIDWORD(v28), v29);
      if (!v24)
        return;
      v25 = *(_BYTE **)(a1 + 48);
      if (v25)
        *v25 = 0;
    }
    sub_1000DE3D4((_WORD *)a1);
    if ((v26 & 1) == 0)
      return;
  }
  v11 = **(_QWORD **)(a1 + 40);
  if (!v11)
    goto LABEL_25;
  while (1)
  {
    sub_1000DE384(v31, (_QWORD *)v11);
    if (v12)
    {
      *(_BYTE *)(v11 + 24) = 0;
      if (!sub_1000DEF2C(v31))
        break;
    }
    v11 = *(_QWORD *)(v11 + 16);
    if (!v11)
      goto LABEL_25;
  }
}

void sub_1000DF0C8(uint64_t a1, int a2, unsigned __int8 *a3)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  _BYTE v12[10];

  v4 = a3[30];
  if ((v4 & 0xC0) == 0x80)
    goto LABEL_17;
  if ((v4 & 0xC0) != 0x40)
  {
    if ((v4 & 0xC0) == 0)
      __asm { BR              X11 }
    goto LABEL_17;
  }
  if (!*(_QWORD *)(*(_QWORD *)a3 + 24))
  {
    sub_1000DE984(a1, a2);
    return;
  }
  switch(a2)
  {
    case 2:
      sub_1000DF900();
      if (!(_DWORD)v5)
        return;
      v6 = v11;
      while (1)
      {
        v5 = sub_1000DF8C0(v5);
        if ((v5 & 1) == 0)
          break;
        if (v11)
          v7 = v11 >= v6;
        else
          v7 = 1;
        v6 = v11;
        if (v7)
        {
          sub_1000DF8F8();
          return;
        }
      }
      goto LABEL_17;
    case 5:
      sub_1000DE5F8(a1, (uint64_t)v12, 4uLL);
      if ((a1 & 1) != 0)
        goto LABEL_33;
      break;
    case 1:
      sub_1000DE5F8(a1, (uint64_t)v12, 8uLL);
      if ((_DWORD)a1)
LABEL_33:
        sub_1000DF8C0(a1);
      break;
    case 0:
      v9 = 0;
      while (v9 != 10)
      {
        sub_1000DF918(a1, (uint64_t)&v12[v9]);
        if (!(_DWORD)a1)
          return;
        v10 = (char)v12[v9++];
        if ((v10 & 0x80000000) == 0)
          goto LABEL_33;
      }
      sub_1000726D4();
      goto LABEL_18;
    default:
LABEL_17:
      sub_1000726D4();
LABEL_18:
      sub_1000DF8B4();
      *(_QWORD *)(a1 + 24) = v8;
      return;
  }
}

void sub_1000DF47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *, uint64_t, uint64_t);
  int v13;
  int v14;
  unint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  _DWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD v37[4];

  v4 = *(_BYTE *)(a3 + 30) & 0xF;
  switch(*(_BYTE *)(a3 + 30) & 0xF)
  {
    case 0:
      if ((_DWORD)a2 && (_DWORD)a2 != 255)
        goto LABEL_38;
      sub_1000DEE50(a1, *(BOOL **)(a3 + 40));
      return;
    case 1:
    case 2:
    case 3:
      if ((_DWORD)a2 && (_DWORD)a2 != 255)
        goto LABEL_38;
      if (v4 != 2)
      {
        if (v4 == 3)
        {
          sub_1000DEE88(a1, &v36);
          if (!v22)
            return;
          v23 = *(unsigned __int16 *)(a3 + 26);
        }
        else
        {
          sub_1000DF930();
          if (!v24)
            return;
          v23 = *(unsigned __int16 *)(a3 + 26);
          v25 = v37[0];
          if (v23 == 8)
          {
LABEL_78:
            **(_QWORD **)(a3 + 40) = v25;
            return;
          }
          v36 = SLODWORD(v37[0]);
        }
        switch(v23)
        {
          case 1:
            v7 = v36;
            **(_BYTE **)(a3 + 40) = v36;
            v9 = (char)v7;
            goto LABEL_75;
          case 2:
            v7 = v36;
            **(_WORD **)(a3 + 40) = v36;
            v9 = (__int16)v7;
            goto LABEL_75;
          case 4:
            v7 = v36;
            **(_DWORD **)(a3 + 40) = v36;
            v9 = (int)v7;
LABEL_75:
            if (v9 != v7)
              goto LABEL_76;
            return;
          case 8:
            v25 = v36;
            goto LABEL_78;
          default:
LABEL_76:
            sub_1000726D4();
            break;
        }
        goto LABEL_39;
      }
      sub_1000DF930();
      if (v6)
      {
        switch(*(_WORD *)(a3 + 26))
        {
          case 1:
            sub_1000DF924();
            *v8 = v7;
            v9 = v7;
            goto LABEL_75;
          case 2:
            sub_1000DF924();
            *v32 = v7;
            v9 = (unsigned __int16)v7;
            goto LABEL_75;
          case 4:
            sub_1000DF924();
            *v33 = v7;
            v9 = v7;
            goto LABEL_75;
          case 8:
            sub_1000DF924();
            *v35 = v34;
            break;
          default:
            goto LABEL_76;
        }
      }
      return;
    case 4:
      if ((_DWORD)a2 != 5 && (_DWORD)a2 != 255)
        goto LABEL_38;
      sub_1000DEEC4(a1, *(_DWORD **)(a3 + 40));
      return;
    case 5:
      if ((_DWORD)a2 != 1 && (_DWORD)a2 != 255)
        goto LABEL_38;
      sub_1000DEEF8(a1, *(_QWORD **)(a3 + 40));
      return;
    case 6:
      if ((_DWORD)a2 != 2)
        goto LABEL_38;
      sub_1000DF8D8(a1, a2);
      if (!v14)
        return;
      v15 = LODWORD(v37[0]);
      if (LODWORD(v37[0]) >= 0x10000
        || (*(_BYTE *)(a3 + 30) & 0xC0) == 0x80
        || (unint64_t)LODWORD(v37[0]) + 2 > *(unsigned __int16 *)(a3 + 26))
      {
        goto LABEL_38;
      }
      v16 = *(_WORD **)(a3 + 40);
      *v16 = v37[0];
      v17 = (uint64_t)(v16 + 1);
      goto LABEL_65;
    case 7:
      if ((_DWORD)a2 != 2)
        goto LABEL_38;
      v18 = *(_QWORD *)(a3 + 40);
      sub_1000DF8D8(a1, a2);
      if (!v19)
        return;
      v15 = LODWORD(v37[0]);
      if (LODWORD(v37[0]) == -1
        || (*(_BYTE *)(a3 + 30) & 0xC0) == 0x80
        || LODWORD(v37[0]) >= *(unsigned __int16 *)(a3 + 26))
      {
        goto LABEL_38;
      }
      *(_BYTE *)(v18 + LODWORD(v37[0])) = 0;
      v31 = a1;
      v17 = v18;
      goto LABEL_72;
    case 8:
    case 9:
      if ((_DWORD)a2 != 2)
        goto LABEL_38;
      sub_1000DF900();
      if (!v10)
        return;
      if (!*(_QWORD *)(a3 + 56))
        goto LABEL_38;
      if ((*(_BYTE *)(a3 + 30) & 0xF) == 9 && (v11 = *(_QWORD *)(a3 + 48)) != 0)
      {
        v12 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v11 - 16);
        if (v12)
        {
          v13 = v12(v37, a3, v11 - 8);
          LOBYTE(v12) = v37[2] == 0;
          goto LABEL_51;
        }
      }
      else
      {
        LOBYTE(v12) = 0;
      }
      v13 = 1;
LABEL_51:
      if ((v12 & 1) == 0 && v13)
      {
        v26 = *(unsigned __int8 *)(a3 + 30);
        v27 = v26 >= 0x40;
        v28 = v26 & 0x30;
        v30 = !v27 && v28 != 32;
        sub_1000DEAF4(v37, *(_QWORD *)(a3 + 56), *(_QWORD *)(a3 + 40), v30);
      }
      sub_1000DF8F8();
      return;
    case 0xB:
      if ((_DWORD)a2 != 2)
        goto LABEL_38;
      sub_1000DF8D8(a1, a2);
      if (!v20)
        return;
      if (LODWORD(v37[0]) >= 0x10000)
        goto LABEL_38;
      if (LODWORD(v37[0]))
      {
        v15 = *(unsigned __int16 *)(a3 + 26);
        if (LODWORD(v37[0]) == (_DWORD)v15)
        {
          v17 = *(_QWORD *)(a3 + 40);
LABEL_65:
          v31 = a1;
LABEL_72:
          sub_1000DE5F8(v31, v17, v15);
        }
        else
        {
LABEL_38:
          sub_1000726D4();
LABEL_39:
          sub_1000DF8B4();
          *(_QWORD *)(a1 + 24) = v21;
        }
      }
      else
      {
        sub_1000DF908();
      }
      return;
    default:
      goto LABEL_38;
  }
}

uint64_t sub_1000DF8C0(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)v1 + 24))(va, 0, v1);
}

void sub_1000DF8D8(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1000DE734(v2, (uint64_t)va);
}

void sub_1000DF8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, int a13, unsigned int a14, char a15)
{
  sub_1000DE934((uint64_t)&a15, &a13, &a14, &a12);
}

void sub_1000DF8F8()
{
  sub_1000DEAAC();
}

void sub_1000DF900()
{
  sub_1000DEA40();
}

void *sub_1000DF908()
{
  uint64_t v0;

  return memset(*(void **)(v0 + 40), 0, *(unsigned __int16 *)(v0 + 26));
}

void sub_1000DF918(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000DE5F8(v2, a2, 1uLL);
}

void sub_1000DF930()
{
  sub_1000DE844();
}

void sub_1000DF93C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;

  sub_1000DE8C4(v13, (uint64_t)&a13);
}

void sub_1000DF954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_100253320((uint64_t)"%s: [START]", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"pcie_dump_state");
  if (qword_10097BB88)
  {
    sub_100253320((uint64_t)"HCI/SCO Pool Info:", v8, v9, v10, v11, v12, v13, v14, v15);
    sub_10019A184(qword_10097BB88);
  }
  if (qword_10097BB90)
  {
    sub_100253320((uint64_t)"ACL Pool Info:", v8, v9, v10, v11, v12, v13, v14, v15);
    sub_10019A184(qword_10097BB90);
  }
  sub_100253320((uint64_t)"%s: [END]", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"pcie_dump_state");
}

uint64_t sub_1000DF9DC()
{
  if (qword_10097BBB0 != -1)
    dispatch_once(&qword_10097BBB0, &stru_10091A1A8);
  if (qword_10097BBA8)
    return 0;
  else
    return 114;
}

uint64_t sub_1000DFA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  __int16 v9;
  void *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  int v34;

  v8 = a3;
  v9 = a2;
  if ((int)a1 > 2)
  {
    if ((_DWORD)a1 == 3)
    {
      v11 = sub_1000E07A8;
      v12 = 3;
    }
    else
    {
      if ((_DWORD)a1 != 243)
        goto LABEL_25;
      v11 = sub_1000E07A8;
      v12 = 4;
    }
    v13 = &qword_10097BB88;
    v14 = &qword_10097BBC8;
  }
  else
  {
    if ((_DWORD)a1 != 1)
    {
      if ((_DWORD)a1 == 2)
      {
        v11 = sub_1000E07B8;
        v12 = 4;
        v13 = &qword_10097BB90;
        v14 = &qword_10097BBC0;
        goto LABEL_11;
      }
LABEL_25:
      sub_100253320((uint64_t)"PCIe default packet type: 0x%x\n", a2, a3, a4, a5, a6, a7, a8, a1);
      off_10097BBA0("PCIe bad packet type", 1);
      return 101;
    }
    v11 = sub_1000E07A8;
    v12 = 3;
    v13 = &qword_10097BB88;
    v14 = &qword_10097BBB8;
  }
LABEL_11:
  v15 = *v14;
  v16 = sub_10019A5E8(*v13);
  if (!v16)
  {
    v17 = malloc_type_malloc(v12 + (unint64_t)v8, 0xB25B399EuLL);
    if (!v17)
    {
      sub_100253320((uint64_t)"failed to allocate memory for tx_buff", v18, v19, v20, v21, v22, v23, v24, v33);
      off_10097BBA0("PCIe memory allocation failure", 1);
      return 106;
    }
    v16 = (uint64_t)v17;
    v11 = j__free;
  }
  *(_WORD *)v16 = v9;
  *(_BYTE *)(v16 + 2) = v8;
  if ((_DWORD)a1 == 243 || (_DWORD)a1 == 2)
    *(_BYTE *)(v16 + 3) = BYTE1(v8);
  if (v8)
    sub_100053868((char *)(v16 + v12));
  else
    sub_10004A104();
  v34 = 0;
  if ((AppleConvergedTransportWrite(v15, v16, v12 + v8, &v34, 0xFFFFFFFFLL, v11) & 1) != 0)
    return 625;
  if (!byte_10097BB99)
  {
    sub_100253320((uint64_t)"PCIe write failed: type %u\n", v25, v26, v27, v28, v29, v30, v31, a1);
    off_10097BBA0("PCIe write failed", 1);
  }
  return 1205;
}

uint64_t sub_1000DFC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v8;
  io_service_t MatchingService;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  io_connect_t connect;

  sub_100253320((uint64_t)"PCIe FLR\n", a2, a3, a4, a5, a6, a7, a8, v34);
  v8 = IOServiceMatching("AppleBluetoothModule");
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v8);
  if (MatchingService)
  {
    connect = 0;
    v17 = IOServiceOpen(MatchingService, mach_task_self_, 0, &connect);
    if ((_DWORD)v17)
    {
      sub_100253320((uint64_t)"PCIe could not open AppleBluetoothModule service: %#x\n", v18, v19, v20, v21, v22, v23, v24, v17);
    }
    else
    {
      v26 = IOConnectCallScalarMethod(connect, 5u, 0, 0, 0, 0);
      if (!(_DWORD)v26)
      {
        IOServiceClose(connect);
        return 0;
      }
      sub_100253320((uint64_t)"PCIe FLR failed: %#x\n", v27, v28, v29, v30, v31, v32, v33, v26);
      IOServiceClose(connect);
    }
  }
  else
  {
    sub_100253320((uint64_t)"PCIe could not find AppleBluetoothModule service\n", v10, v11, v12, v13, v14, v15, v16, v35);
  }
  return 1205;
}

uint64_t sub_1000DFD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v33 = 0u;
  v31 = 0;
  v32 = 0;
  sub_100253320((uint64_t)"PCIe Download Firmware, size = %d\n", a2, a3, a4, a5, a6, a7, a8, a1);
  AppleConvergedTransportInitParameters(&v33);
  LODWORD(v33) = 1;
  DWORD2(v34) = 5000;
  LODWORD(v38) = 25;
  *(_QWORD *)&v34 = &stru_10091A428;
  v17 = 1205;
  if (AppleConvergedTransportCreate(&v33, &v32))
  {
    v18 = AppleConvergedTransportSendImage(v32, a2, a1, (char *)&v31 + 4, 2000, &v31, 0);
    v19 = v18 == 0;
    if (v18)
      v20 = "PCIe Download Firmware -- Done\n";
    else
      v20 = "PCIe failed to send image\n";
    if (v19)
      v17 = 1205;
    else
      v17 = 0;
  }
  else
  {
    v20 = "PCIe failed to create BTI transport\n";
  }
  sub_100253320((uint64_t)v20, v10, v11, v12, v13, v14, v15, v16, v29);
  if (AppleConvergedTransportIsValid(v32) && (AppleConvergedTransportFree(&v32) & 1) == 0)
    sub_100253320((uint64_t)"PCIe free BTI transport failed\n", v21, v22, v23, v24, v25, v26, v27, v30);
  return v17;
}

uint64_t sub_1000DFE30(uint64_t (*a1)(_QWORD, _QWORD), uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  const char *v25;
  uint64_t v26[6];

  if (a1 && (v8 = a2) != 0 && a3)
  {
    if (qword_10097BBB0 != -1)
      dispatch_once(&qword_10097BBB0, &stru_10091A1A8);
    a2 = qword_10097BBA8;
    if (qword_10097BBA8)
    {
      v26[0] = (uint64_t)_NSConcreteStackBlock;
      v26[1] = 0x40000000;
      v26[2] = (uint64_t)sub_1000DFF58;
      v26[3] = (uint64_t)&unk_10091A148;
      v26[4] = (uint64_t)a1;
      v26[5] = v8;
      off_10097BBA0 = a1;
      if (!AppleConvergedTransportRegisterEventBlockQ(v26))
      {
        sub_100253320((uint64_t)"PCIe failed to register event listener\n", v11, v12, v13, v14, v15, v16, v17, v26[0]);
        result = 0;
        off_10097BBA0 = 0;
        return result;
      }
      sub_100253320((uint64_t)"PCIe registered event listener successfully\n", v11, v12, v13, v14, v15, v16, v17, v26[0]);
      if ((sub_100259794(qword_10097BBA8, a3, v18, v19, v20, v21, v22, v23) & 1) != 0)
      {
        sub_100253320((uint64_t)"Registered ABTM listener successfully\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, v26[0]);
        return 1;
      }
      v25 = "Failed to register ABTM listener\n";
    }
    else
    {
      v25 = "Initialization failed\n";
    }
  }
  else
  {
    v25 = "Bad argument\n";
  }
  sub_100253320((uint64_t)v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v26[0]);
  return 0;
}

uint64_t sub_1000DFF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if ((_DWORD)a2 == 2)
  {
    sub_100253320((uint64_t)"PCIe detected controller is resetting", a2, a3, a4, a5, a6, a7, a8, v15);
    return (*(uint64_t (**)(uint64_t, char *))(a1 + 40))(a3, &byte_10097BB99);
  }
  else
  {
    if ((_DWORD)a2)
    {
      sub_100253320((uint64_t)"Non-fatal event: %s\n", a2, a3, a4, a5, a6, a7, a8, a3);
      v11 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
      v12 = a3;
      v13 = 0;
    }
    else
    {
      v10 = a4;
      byte_10097BB99 = 1;
      sub_100253320((uint64_t)"Fatal event: %s\n", a2, a3, a4, a5, a6, a7, a8, a3);
      usleep(1000 * v10);
      v11 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
      v12 = a3;
      v13 = 1;
    }
    return v11(v12, v13);
  }
}

uint64_t sub_1000E001C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v10;
  uint64_t v11;
  _QWORD v12[5];

  if (a1)
  {
    if (qword_10097BBB0 != -1)
      dispatch_once(&qword_10097BBB0, &stru_10091A1A8);
    a2 = qword_10097BBA8;
    if (qword_10097BBA8)
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 0x40000000;
      v12[2] = sub_1000E00F0;
      v12[3] = &unk_10091A168;
      v12[4] = a1;
      if (AppleConvergedTransportRegisterTimeSyncEventBlockQ(v12))
      {
        sub_100253320((uint64_t)"PCIe registered time sync listener successfully\n", a2, a3, a4, a5, a6, a7, a8, v11);
        return 1;
      }
      v10 = "PCIe failed to register time sync listener\n";
    }
    else
    {
      v10 = "Initialization failed\n";
    }
  }
  else
  {
    v10 = "Bad argument\n";
  }
  sub_100253320((uint64_t)v10, a2, a3, a4, a5, a6, a7, a8, v11);
  return 0;
}

uint64_t sub_1000E00F0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

void sub_1000E00FC(id a1)
{
  NSObject *v1;

  v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  qword_10097BBA8 = (uint64_t)dispatch_queue_create("com.apple.bluetoothd.pcie-event", v1);
}

uint64_t sub_1000E0134()
{
  return 0;
}

uint64_t sub_1000E013C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  qword_10097BB88 = (uint64_t)sub_10019A3B0(16, 0x200uLL, a3, a4, a5, a6, a7, a8);
  if (qword_10097BB88)
  {
    qword_10097BB90 = (uint64_t)sub_10019A3B0(16, 0x1000uLL, v8, v9, v10, v11, v12, v13);
    if (qword_10097BB90)
    {
      if ((AppleConvergedTransportIsValid(qword_10097BBB8) & 1) != 0
        || (AppleConvergedTransportIsValid(qword_10097BBC0) & 1) != 0
        || AppleConvergedTransportIsValid(qword_10097BBC8))
      {
        sub_100253460();
      }
      v28 = 0;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v23 = 0u;
      byte_10097BB99 = 0;
      AppleConvergedTransportInitParameters(&v23);
      LODWORD(v23) = 2;
      DWORD2(v24) = 5000;
      LODWORD(v25) = v25 | 0xC;
      *(_QWORD *)((char *)&v25 + 4) = 0x10200000020;
      LODWORD(v28) = 25;
      *(_QWORD *)&v24 = &stru_10091A1E8;
      *(_QWORD *)&v26 = &stru_10091A228;
      *((_QWORD *)&v26 + 1) = &stru_10091A268;
      if (AppleConvergedTransportCreate(&v23, &qword_10097BBB8))
      {
        AppleConvergedTransportInitParameters(&v23);
        LODWORD(v23) = 3;
        DWORD2(v24) = 5000;
        LODWORD(v25) = v25 | 4;
        *(_QWORD *)((char *)&v25 + 4) = 0xA2200000020;
        LODWORD(v28) = 33;
        *(_QWORD *)&v24 = &stru_10091A2A8;
        *(_QWORD *)&v26 = &stru_10091A2E8;
        *((_QWORD *)&v26 + 1) = &stru_10091A328;
        if (AppleConvergedTransportCreate(&v23, &qword_10097BBC0))
        {
          AppleConvergedTransportInitParameters(&v23);
          LODWORD(v23) = 4;
          DWORD2(v24) = 5000;
          LODWORD(v25) = v25 | 4;
          *(_QWORD *)((char *)&v25 + 4) = 0x10200000020;
          LODWORD(v28) = 33;
          *(_QWORD *)&v24 = &stru_10091A368;
          *(_QWORD *)&v26 = &stru_10091A3A8;
          *((_QWORD *)&v26 + 1) = &stru_10091A3E8;
          if ((AppleConvergedTransportCreate(&v23, &qword_10097BBC8) & 1) != 0)
            return 0;
          v22 = "PCIe failed to create SCO transport\n";
        }
        else
        {
          v22 = "PCIe failed to create ACL transport\n";
        }
      }
      else
      {
        v22 = "PCIe failed to create HCI transport\n";
      }
      sub_100253320((uint64_t)v22, v14, v15, v16, v17, v18, v19, v20, v23);
      sub_1000E0644();
      sub_1000E0724();
      off_10097BBA0("PCIe transport creation failed", 1);
    }
    else
    {
      sub_10019A328((pthread_mutex_t *)qword_10097BB88);
      off_10097BBA0("acl mempool allocation failure", 1);
    }
  }
  else
  {
    off_10097BBA0("hci-sco mempool allocation failure", 1);
  }
  return 633;
}

void sub_1000E0398(id a1, int a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100253320((uint64_t)"PCIe HCI got status %u with args %p and %p", *(uint64_t *)&a2, (uint64_t)a3, (uint64_t)a4, v4, v5, v6, v7, *(uint64_t *)&a2);
}

void sub_1000E03C4(id a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000E03CC(4, *(uint64_t *)&a2, (unsigned __int8 *)a3, *(uint64_t *)&a4, v4, v5, v6, v7);
}

void sub_1000E03CC(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v10;
  uint64_t v11;
  _QWORD v12[2];

  if (!(_DWORD)a2)
  {
    if (!byte_10097BB99)
    {
      v10 = a4;
      if ((byte_10097BB98 & 1) == 0)
      {
        sub_1000477B8();
        v12[0] = 0;
        v12[1] = 0;
        v11 = sub_1000478F0(a1, a3, v10, (uint64_t)v12);
        sub_100047AB0(a1, a3, v11, (uint64_t)v12);
        sub_1000478A0();
        if (!a3)
          return;
LABEL_8:
        free(a3);
        return;
      }
      sub_10004A360();
    }
    if (!a3)
      return;
    goto LABEL_8;
  }
  if (!byte_10097BB99)
  {
    sub_100253320((uint64_t)"PCIe read failed: type %u, status 0x%x\n", a2, (uint64_t)a3, a4, a5, a6, a7, a8, a1);
    sleep(0xC8u);
    off_10097BBA0("PCIe read failed", 1);
  }
}

void sub_1000E04BC(id a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    if (!byte_10097BB99)
    {
      sub_100253320((uint64_t)"PCIe HCI write failed: 0x%x\n", *(uint64_t *)&a2, (uint64_t)a3, *(uint64_t *)&a4, v4, v5, v6, v7, *(uint64_t *)&a2);
      sleep(0xC8u);
      off_10097BBA0("PCIe HCI write failed", 1);
    }
  }
}

void sub_1000E051C(id a1, int a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100253320((uint64_t)"PCIe ACL got status %u with args %p and %p", *(uint64_t *)&a2, (uint64_t)a3, (uint64_t)a4, v4, v5, v6, v7, *(uint64_t *)&a2);
}

void sub_1000E0548(id a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000E03CC(2, *(uint64_t *)&a2, (unsigned __int8 *)a3, *(uint64_t *)&a4, v4, v5, v6, v7);
}

void sub_1000E0550(id a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    if (!byte_10097BB99)
    {
      sub_100253320((uint64_t)"PCIe ACL write failed: 0x%x\n", *(uint64_t *)&a2, (uint64_t)a3, *(uint64_t *)&a4, v4, v5, v6, v7, *(uint64_t *)&a2);
      sleep(0xC8u);
      off_10097BBA0("PCIe ACL write failed", 1);
    }
  }
}

void sub_1000E05B0(id a1, int a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100253320((uint64_t)"PCIe SCO got status %u with args %p and %p", *(uint64_t *)&a2, (uint64_t)a3, (uint64_t)a4, v4, v5, v6, v7, *(uint64_t *)&a2);
}

void sub_1000E05DC(id a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_1000E03CC(3, *(uint64_t *)&a2, (unsigned __int8 *)a3, *(uint64_t *)&a4, v4, v5, v6, v7);
}

void sub_1000E05E4(id a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    if (!byte_10097BB99)
    {
      sub_100253320((uint64_t)"PCIe SCO write failed: 0x%x\n", *(uint64_t *)&a2, (uint64_t)a3, *(uint64_t *)&a4, v4, v5, v6, v7, *(uint64_t *)&a2);
      sleep(0xC8u);
      off_10097BBA0("PCIe SCO write failed", 1);
    }
  }
}

uint64_t sub_1000E0644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t vars0;

  if (AppleConvergedTransportIsValid(qword_10097BBB8)
    && (AppleConvergedTransportFree(&qword_10097BBB8) & 1) == 0)
  {
    sub_100253320((uint64_t)"PCIe free HCI transport failed\n", v0, v1, v2, v3, v4, v5, v6, vars0);
    off_10097BBA0("PCIe free HCI transport failed", 1);
  }
  if (AppleConvergedTransportIsValid(qword_10097BBC0)
    && (AppleConvergedTransportFree(&qword_10097BBC0) & 1) == 0)
  {
    sub_100253320((uint64_t)"PCIe free ACL transport failed\n", v7, v8, v9, v10, v11, v12, v13, vars0);
    off_10097BBA0("PCIe free ACL transport failed", 1);
  }
  result = AppleConvergedTransportIsValid(qword_10097BBC8);
  if ((_DWORD)result)
  {
    result = AppleConvergedTransportFree(&qword_10097BBC8);
    if ((result & 1) == 0)
    {
      sub_100253320((uint64_t)"PCIe free SCO transport failed\n", v15, v16, v17, v18, v19, v20, v21, vars0);
      return off_10097BBA0("PCIe free SCO transport failed", 1);
    }
  }
  return result;
}

void sub_1000E0724()
{
  if (qword_10097BB88)
  {
    sub_10019A544(qword_10097BB88);
    sub_10019A328((pthread_mutex_t *)qword_10097BB88);
    qword_10097BB88 = 0;
  }
  if (qword_10097BB90)
  {
    sub_10019A544(qword_10097BB90);
    sub_10019A328((pthread_mutex_t *)qword_10097BB90);
    qword_10097BB90 = 0;
  }
}

uint64_t sub_1000E0774()
{
  return 0;
}

uint64_t sub_1000E077C()
{
  sub_1000478A0();
  sub_1000E0644();
  sub_1000E0724();
  sub_1000477B8();
  return 0;
}

uint64_t sub_1000E07A0()
{
  return 2594;
}

uint64_t sub_1000E07A8(unint64_t a1)
{
  return sub_10019A690(qword_10097BB88, a1);
}

uint64_t sub_1000E07B8(unint64_t a1)
{
  return sub_10019A690(qword_10097BB90, a1);
}

uint64_t sub_1000E07CC()
{
  return 0;
}

uint64_t sub_1000E07D4()
{
  return 0;
}

void sub_1000E07DC()
{
  byte_10097BB99 = 1;
}

void sub_1000E07EC()
{
  byte_10097BB98 = 1;
}

uint64_t sub_1000E07FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFDictionary *v7;
  io_service_t MatchingService;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  io_connect_t connect;

  if (!sub_10018327C())
    return 114;
  sub_100253320((uint64_t)"pcie_force_doorbell_flush AppleConvergedIPCOLYBTControl\n", v0, v1, v2, v3, v4, v5, v6, v40);
  v7 = IOServiceMatching("AppleConvergedIPCOLYBTControl");
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v7);
  if (MatchingService)
  {
    connect = 0;
    v16 = IOServiceOpen(MatchingService, mach_task_self_, 0, &connect);
    if ((_DWORD)v16)
    {
      sub_100253320((uint64_t)"PCIe could not open AppleConvergedIPCOLYBTControl service: %#x\n", v17, v18, v19, v20, v21, v22, v23, v16);
    }
    else
    {
      v25 = IOConnectCallScalarMethod(connect, 4u, 0, 0, 0, 0);
      if (!(_DWORD)v25)
      {
        IOServiceClose(connect);
        sub_100253320((uint64_t)"pcie_force_doorbell_flush completed successfully\n", v33, v34, v35, v36, v37, v38, v39, v41);
        return 0;
      }
      sub_100253320((uint64_t)"PCIe doorbell flush failed: %#x\n", v26, v27, v28, v29, v30, v31, v32, v25);
      IOServiceClose(connect);
    }
  }
  else
  {
    sub_100253320((uint64_t)"PCIe could not find AppleConvergedIPCOLYBTControl service\n", v9, v10, v11, v12, v13, v14, v15, v41);
  }
  return 1205;
}

void sub_1000E08F8(id a1, int a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100253320((uint64_t)"PCIe BTI got status %u with args %p and %p", *(uint64_t *)&a2, (uint64_t)a3, (uint64_t)a4, v4, v5, v6, v7, *(uint64_t *)&a2);
}

uint64_t sub_1000E0924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  qword_10097BBD0 = 0;
  qword_10097BBD8 = -1;
  qword_10097BBE8 = 0;
  qword_10097BBF0 = -1;
  unk_10097BBF9 = 0;
  unk_10097BBE1 = 0;
  qword_10097BC00 = 0;
  qword_10097BC08 = -1;
  unk_10097BC11 = 0;
  byte_10097BB99 = 0;
  if ((sub_1000E0B20("hci", (uint64_t)&qword_10097BBD0, a3, a4, a5, a6, a7, a8) & 0x80000000) != 0)
  {
    v15 = "PCIe Skywalk failed to create HCI transport\n";
    goto LABEL_5;
  }
  byte_10097BBE0 = 4;
  unk_10097BBE1 = 25448;
  byte_10097BBE3 = 105;
  if (pthread_create((pthread_t *)&qword_100994180, 0, (void *(__cdecl *)(void *))sub_100047508, &qword_10097BBD0))
  {
    v15 = "failed to create hci rx thread\n";
LABEL_5:
    sub_100253320((uint64_t)v15, v8, v9, v10, v11, v12, v13, v14, v37);
    sub_1000E1114(v16, v17, v18, v19, v20, v21, v22, v23);
    off_10097BBA0("PCIe Skywalk transport creation failed", 1);
    return 633;
  }
  sub_10011EB64((_opaque_pthread_t *)qword_100994180, 63);
  if ((sub_1000E0B20("acl", (uint64_t)&qword_10097BBE8, v25, v26, v27, v28, v29, v30) & 0x80000000) != 0)
  {
    v15 = "PCIe Skywalk failed to create ACL transport\n";
    goto LABEL_5;
  }
  byte_10097BBF8 = 2;
  unk_10097BBF9 = 25441;
  byte_10097BBFB = 108;
  if (pthread_create((pthread_t *)&qword_100994188, 0, (void *(__cdecl *)(void *))sub_100047508, &qword_10097BBE8))
  {
    v15 = "failed to create acl rx thread\n";
    goto LABEL_5;
  }
  sub_10011EB64((_opaque_pthread_t *)qword_100994188, 63);
  if ((sub_1000E0B20("sco", (uint64_t)&qword_10097BC00, v31, v32, v33, v34, v35, v36) & 0x80000000) != 0)
  {
    v15 = "PCIe Skywalk failed to create SCO transport\n";
    goto LABEL_5;
  }
  byte_10097BC10 = 3;
  unk_10097BC11 = 25459;
  byte_10097BC13 = 111;
  if (pthread_create((pthread_t *)&qword_100994190, 0, (void *(__cdecl *)(void *))sub_100047508, &qword_10097BC00))
  {
    v15 = "failed to create sco rx thread\n";
    goto LABEL_5;
  }
  sub_10011EB64((_opaque_pthread_t *)qword_100994190, 63);
  result = 0;
  byte_10097CC18 = 0;
  return result;
}

uint64_t sub_1000E0B20(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  IONotificationPort *v10;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Current;
  CFMutableDictionaryRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFMutableDictionaryRef v21;
  CFStringRef v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFStringRef v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  io_object_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  io_registry_entry_t v47;
  BOOL v48;
  uint64_t v49;
  io_object_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const __CFString *v59;
  const __CFString *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unint64_t v92;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const __CFString *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const __CFString *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  io_iterator_t notification[2];
  kevent changelist;
  uuid_t uu;
  char buffer[8];
  uint64_t v132;
  char in[16];
  _BYTE v134[21];

  if (!a1 || !a2)
  {
    sub_100253320((uint64_t)"%s: invalid input. protocol/channel_data null\n", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"start_channel");
    return 0xFFFFFFFFLL;
  }
  memset(&changelist, 0, sizeof(changelist));
  memset(uu, 0, sizeof(uu));
  sub_100253320((uint64_t)"retrieving uuid for %s\n", a2, a3, a4, a5, a6, a7, a8, (uint64_t)a1);
  notification[0] = 0;
  *(_OWORD *)in = 0u;
  memset(v134, 0, sizeof(v134));
  v10 = IONotificationPortCreate(kIOMainPortDefault);
  RunLoopSource = IONotificationPortGetRunLoopSource(v10);
  Current = CFRunLoopGetCurrent();
  CFRunLoopAddSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
  v13 = IOServiceMatching("AppleConvergedIPCInterface");
  if (!v13)
  {
    sub_100253320((uint64_t)"%s: could not create matching dictionary", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"get_uuid");
    goto LABEL_28;
  }
  v21 = v13;
  v22 = CFStringCreateWithCString(kCFAllocatorDefault, a1, 0x600u);
  if (!v22)
  {
    sub_100253320((uint64_t)"%s: failed to create stringRef", v23, v24, v25, v26, v27, v28, v29, (uint64_t)"get_uuid");
    CFRelease(v21);
    goto LABEL_28;
  }
  v30 = v22;
  CFDictionarySetValue(v21, CFSTR("ACIPCInterfaceProtocol"), v22);
  CFRelease(v30);
  v31 = IOServiceAddMatchingNotification(v10, "IOServiceFirstMatch", v21, (IOServiceMatchingCallback)sub_1000E10E8, Current, notification);
  if (!(_DWORD)v31)
  {
    v39 = IOIteratorNext(notification[0]);
    if (v39)
    {
      v47 = v39;
      v48 = 0;
      v49 = 0xFFFFLL;
    }
    else
    {
      do
      {
        sub_100253320((uint64_t)"ACIPCInterface not found, waiting for it to appear", v40, v41, v42, v43, v44, v45, v46, v126);
        v49 = CFRunLoopRunInMode(kCFRunLoopDefaultMode, 5.0, 0);
        v50 = IOIteratorNext(notification[0]);
        v48 = v50 == 0;
        if (v50)
          v51 = 1;
        else
          v51 = (_DWORD)v49 == 3;
      }
      while (!v51);
      v47 = v50;
    }
    CFRunLoopRemoveSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
    IONotificationPortDestroy(v10);
    IOObjectRelease(notification[0]);
    if (!v48 && ((_DWORD)v49 == 0xFFFF || (_DWORD)v49 == 2))
    {
      v59 = (const __CFString *)IORegistryEntrySearchCFProperty(v47, "IOService", CFSTR("ACIPCInterfaceTransport"), kCFAllocatorDefault, 1u);
      if (v59)
      {
        v60 = v59;
        *(_QWORD *)buffer = 0;
        v132 = 0;
        if (CFStringGetCString(v59, buffer, 16, 0x600u))
        {
          sub_100253320((uint64_t)"ACIPCInterfaceTransport \"%s\"\n", v61, v62, v63, v64, v65, v66, v67, (uint64_t)buffer);
          if (*(_QWORD *)buffer == 0x6B6C6177796B73)
          {
            v102 = 0;
            while (1)
            {
              v103 = (const __CFString *)IORegistryEntrySearchCFProperty(v47, "IOService", CFSTR("IOSkywalkNexusUUID"), kCFAllocatorDefault, 1u);
              if (v103)
                break;
              usleep(0x30D40u);
              sub_100253320((uint64_t)"Retry: %d - trying to find ACIPCInterfaceTransport + IOSkywalkNexusUUID\n", v104, v105, v106, v107, v108, v109, v110, v102);
              v102 = (v102 + 1);
              if ((_DWORD)v102 == 25)
                goto LABEL_48;
            }
            v111 = v103;
            if (CFStringGetCString(v103, in, 37, 0x600u))
            {
              sub_100253320((uint64_t)"protocol: %s, uuidstr: %s\n", v112, v113, v114, v115, v116, v117, v118, (uint64_t)a1);
              uuid_parse(in, uu);
            }
            else
            {
              sub_100253320((uint64_t)"protocol: %s, failed to get uuid CString\n", v112, v113, v114, v115, v116, v117, v118, (uint64_t)a1);
            }
            sub_100253320((uint64_t)"ACIPCInterfaceTransport + IOSkywalkNexusUUID found\n", v119, v120, v121, v122, v123, v124, v125, v127);
            CFRelease(v111);
LABEL_48:
            CFRelease(v60);
            if (!v47)
              goto LABEL_28;
            goto LABEL_27;
          }
          v68 = "ACIPCInterfaceTransport is not skywalk\n";
        }
        else
        {
          v68 = "failed to get cstring property";
        }
        sub_100253320((uint64_t)v68, v61, v62, v63, v64, v65, v66, v67, v126);
        goto LABEL_48;
      }
      v69 = "ACIPCInterface found, ACIPCInterfaceTransport property not found";
    }
    else
    {
      v126 = v49;
      v69 = "ACIPCInterface not found after 5 second -- runLoopResult = 0x%02x";
    }
    sub_100253320((uint64_t)v69, v52, v53, v54, v55, v56, v57, v58, v126);
    if (!v47)
      goto LABEL_28;
LABEL_27:
    IOObjectRelease(v47);
    goto LABEL_28;
  }
  sub_100253320((uint64_t)"IOServiceAddMatchingNotification returned 0x%08x", v32, v33, v34, v35, v36, v37, v38, v31);
  CFRunLoopRemoveSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
  IONotificationPortDestroy(v10);
LABEL_28:
  v70 = os_channel_create(uu, 0);
  if (v70)
  {
    v78 = v70;
    *(_QWORD *)a2 = v70;
    v79 = os_channel_attr_create();
    if (v79)
    {
      v80 = v79;
      if (!os_channel_read_attr(v78, v79))
      {
        *(_QWORD *)in = 0;
        *(_QWORD *)buffer = 0;
        *(_QWORD *)notification = 0;
        os_channel_attr_get(v80, 4, in);
        os_channel_attr_get(v80, 3, buffer);
        os_channel_attr_get(v80, 2, notification);
        sub_100253320((uint64_t)"(%s) skywalk channel slotlen: %llu, rxslots: %llu, txslots: %llu\n", v81, v82, v83, v84, v85, v86, v87, (uint64_t)a1);
      }
      os_channel_attr_destroy(v80);
    }
    v88 = kqueue();
    if (v88 == -1)
    {
      v94 = "(%s) failed to create write kqueue\n";
    }
    else
    {
      v89 = v88;
      *(_DWORD *)(a2 + 8) = v88;
      changelist.ident = (int)os_channel_get_fd(v78);
      *(_DWORD *)&changelist.filter = 393214;
      memset(&changelist.fflags, 0, 20);
      if (kevent(v89, &changelist, 1, 0, 0, 0) == -1)
      {
        v94 = "(%s) write kevent registration failed\n";
      }
      else
      {
        v90 = kqueue();
        if (v90 == -1)
        {
          v94 = "(%s) failed to create read kqueue\n";
        }
        else
        {
          v91 = v90;
          v92 = (unint64_t)&changelist | 0xC;
          *(_DWORD *)(a2 + 12) = v90;
          changelist.ident = (int)os_channel_get_fd(v78);
          *(_DWORD *)&changelist.filter = 393215;
          *(_QWORD *)v92 = 0;
          *(_QWORD *)(v92 + 8) = 0;
          *(_DWORD *)(v92 + 16) = 0;
          if (kevent(v91, &changelist, 1, 0, 0, 0) != -1)
          {
            sub_100253320((uint64_t)"(%s) channel created successfully\n", v71, v72, v73, v74, v75, v76, v77, (uint64_t)a1);
            return 0;
          }
          v94 = "(%s) read kevent registration failed\n";
        }
      }
    }
  }
  else
  {
    v94 = "(%s) failed to create channel\n";
  }
  sub_100253320((uint64_t)v94, v71, v72, v73, v74, v75, v76, v77, (uint64_t)a1);
  sub_100253320((uint64_t)"(%s) failed to create channel\n", v95, v96, v97, v98, v99, v100, v101, (uint64_t)a1);
  return 0xFFFFFFFFLL;
}

void sub_1000E10E8(__CFRunLoop *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  sub_100253320((uint64_t)"ACIPCInterface found, releasing waiting thread", a2, a3, a4, a5, a6, a7, a8, v9);
  CFRunLoopStop(a1);
}

uint64_t sub_1000E1114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t vars0;
  uint64_t vars0a;
  uint64_t vars0b;

  sub_100253320((uint64_t)"closing hci channel\n", a2, a3, a4, a5, a6, a7, a8, vars0);
  sub_1000E1168((uint64_t)&qword_10097BBD0);
  sub_100253320((uint64_t)"closing acl channel\n", v8, v9, v10, v11, v12, v13, v14, vars0a);
  sub_1000E1168((uint64_t)&qword_10097BBE8);
  sub_100253320((uint64_t)"closing sco channel\n", v15, v16, v17, v18, v19, v20, v21, vars0b);
  return sub_1000E1168((uint64_t)&qword_10097BC00);
}

uint64_t sub_1000E1168(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;

  if (result)
  {
    v1 = result;
    v2 = *(_DWORD *)(result + 8);
    if (v2 != -1)
    {
      close(v2);
      *(_DWORD *)(v1 + 8) = -1;
    }
    v3 = *(_DWORD *)(v1 + 12);
    if (v3 != -1)
    {
      close(v3);
      *(_DWORD *)(v1 + 12) = -1;
    }
    result = *(_QWORD *)v1;
    if (*(_QWORD *)v1)
    {
      result = os_channel_destroy();
      *(_QWORD *)v1 = 0;
    }
  }
  return result;
}

uint64_t sub_1000E11C8()
{
  return 0;
}

uint64_t sub_1000E11D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_1000E1114(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1000478A0();
  v8 = pthread_join((pthread_t)qword_100994180, 0);
  if ((_DWORD)v8)
    sub_100253320((uint64_t)"hci thread join failed: %d\n", v9, v10, v11, v12, v13, v14, v15, v8);
  sub_100253320((uint64_t)"hci thread joined\n", v9, v10, v11, v12, v13, v14, v15, v33);
  v16 = pthread_join((pthread_t)qword_100994188, 0);
  if ((_DWORD)v16)
    sub_100253320((uint64_t)"acl thread join failed: %d\n", v17, v18, v19, v20, v21, v22, v23, v16);
  sub_100253320((uint64_t)"acl thread joined\n", v17, v18, v19, v20, v21, v22, v23, v34);
  v24 = pthread_join((pthread_t)qword_100994190, 0);
  if ((_DWORD)v24)
    sub_100253320((uint64_t)"sco thread join failed: %d\n", v25, v26, v27, v28, v29, v30, v31, v24);
  sub_100253320((uint64_t)"sco thread joined\n", v25, v26, v27, v28, v29, v30, v31, v35);
  sub_1000477B8();
  return 0;
}

uint64_t sub_1000E1288()
{
  return 2594;
}

uint64_t sub_1000E1290()
{
  return 0;
}

uint64_t sub_1000E1298()
{
  return 0;
}

void sub_1000E12A0()
{
  byte_10097BB99 = 1;
}

void sub_1000E12B0()
{
  byte_10097BB98 = 1;
}

uint64_t sub_1000E12C0(uint64_t a1)
{
  _QWORD v3[3];

  if (a1)
  {
    if (*(_QWORD *)(a1 + 8) || (sub_100253460(), *(_QWORD *)(a1 + 8)))
    {
      if (*(_QWORD *)(a1 + 16) || (sub_100253460(), *(_QWORD *)(a1 + 16)))
      {
        qword_100994198 = a1;
        v3[2] = 0;
        v3[1] = 0x200010004;
        v3[0] = off_10091A448;
        return sub_100115B80((uint64_t)v3);
      }
    }
  }
  else
  {
    sub_100253460();
  }
  return 101;
}

uint64_t sub_1000E137C(unsigned __int8 *a1, uint64_t a2)
{
  NSObject *v4;
  _BYTE *v5;
  _BYTE *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  __int128 buf;
  uint64_t v20;

  if (sub_10005549C())
  {
    sub_100054530("AACP_CLIENT_Connect(addr=%:)", a1);
    v4 = sub_1000544A0(0x53u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)&buf, 0xCu);
    }
  }
  if (!a2)
  {
    sub_100253460();
    return 101;
  }
  if (!*(_QWORD *)(a2 + 8))
  {
    sub_100253460();
    if (!*(_QWORD *)(a2 + 8))
      return 101;
  }
  if (!*(_QWORD *)(a2 + 16))
  {
    sub_100253460();
    if (!*(_QWORD *)(a2 + 16))
      return 101;
  }
  v5 = (_BYTE *)qword_10097CC20;
  if (qword_10097CC20 || (v5 = sub_100114588(0xF8uLL), (qword_10097CC20 = (uint64_t)v5) != 0))
  {
    v6 = (_BYTE *)sub_1000E16AC(a1);
    if (v6 && *v6)
    {
      if (sub_10005549C())
      {
        sub_100054530("Aready connected/connection in progress");
        v7 = sub_1000544A0(0x53u);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 133;
    }
    else
    {
      v10 = 8;
      while (v5[v10] != 1)
      {
        v10 += 48;
        if (v10 == 248)
        {
          v11 = sub_1000E1738();
          if (v11)
          {
            v12 = (_OWORD *)v11;
            *(_QWORD *)(v11 + 24) = a2;
            *(_QWORD *)(v11 + 8) = 0;
            v13 = *(_DWORD *)a1;
            *(_WORD *)(v11 + 5) = *((_WORD *)a1 + 2);
            *(_DWORD *)(v11 + 1) = v13;
            *(_BYTE *)v11 = 1;
            v20 = 0;
            *((_QWORD *)&buf + 1) = 4;
            *(_DWORD *)(v11 + 32) = 0;
            *(_QWORD *)&buf = off_10091A448;
            *(_DWORD *)((char *)&buf + 10) = 131073;
            v14 = sub_100116940(v11 + 1, (uint64_t)&buf);
            v8 = v14;
            if ((_DWORD)v14 && (_DWORD)v14 != 133)
            {
              if (sub_10005549C())
              {
                sub_100054530("AAP Client Connect failure %u", v8);
                v15 = sub_1000544A0(0x53u);
                if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
                  sub_1006CE7A4();
              }
              sub_1000E1790(v12);
            }
          }
          else
          {
            if (sub_10005549C())
            {
              sub_100054530("No free AACP connection slot ");
              v18 = sub_1000544A0(0x53u);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
                sub_1006CE7A4();
            }
            return 104;
          }
          return v8;
        }
      }
      if (sub_10005549C())
      {
        sub_100054530("Another AACP connection in progress");
        v16 = sub_1000544A0(0x53u);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 118;
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("init failed..!");
      v17 = sub_1000544A0(0x53u);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 106;
  }
}

uint64_t sub_1000E16AC(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;

  v1 = 0;
  if (a1 && qword_10097CC20)
  {
    v2 = 0;
    v5 = *a1;
    v3 = a1 + 1;
    v4 = v5;
    for (i = qword_10097CC20 + 10; ; i += 48)
    {
      if (*(unsigned __int8 *)(qword_10097CC20 + 48 * v2 + 9) == v4)
      {
        v7 = 0;
        do
        {
          v8 = v7;
          if (v7 == 5)
            break;
          v9 = *(unsigned __int8 *)(i + v7);
          v10 = v3[v7++];
        }
        while (v9 == v10);
        if (v8 >= 5)
          break;
      }
      if (++v2 == 5)
        return 0;
    }
    return qword_10097CC20 + 48 * v2 + 8;
  }
  return v1;
}

uint64_t sub_1000E1738()
{
  char *v0;
  uint64_t v1;

  v0 = (char *)qword_10097CC20;
  if (!qword_10097CC20)
  {
    v0 = (char *)sub_100114588(0xF8uLL);
    qword_10097CC20 = (uint64_t)v0;
  }
  v1 = 0;
  while (*(_QWORD *)&v0[v1 + 32])
  {
    v1 += 48;
    if (v1 == 240)
      return 0;
  }
  return (uint64_t)&v0[v1 + 8];
}

void sub_1000E1790(_OWORD *a1)
{
  uint64_t v1;

  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  if (qword_10097CC20)
  {
    v1 = 32;
    while (!*(_QWORD *)(qword_10097CC20 + v1))
    {
      v1 += 48;
      if (v1 == 272)
      {
        sub_100053298((void *)qword_10097CC20);
        qword_10097CC20 = 0;
        return;
      }
    }
  }
}

uint64_t sub_1000E17E0(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t result;
  NSObject *v3;

  v1 = sub_1000E16AC(a1);
  if (v1 && *(_BYTE *)v1 == 2)
  {
    result = *(unsigned int *)(v1 + 8);
    if ((_DWORD)result)
    {
      sub_100115DC0(result);
      return 0;
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("No active connection");
      v3 = sub_1000544A0(0x53u);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 408;
  }
  return result;
}

uint64_t sub_1000E1864(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t v6;
  int *v7;
  _DWORD *v8;
  int v9;
  int *v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v13;
  NSObject *v14;
  void *v15;
  const void *v16[2];

  v6 = sub_1000E16AC(a1);
  if (!v6)
    return 122;
  v7 = (int *)v6;
  if (!*(_DWORD *)(v6 + 8))
    return 122;
  v16[0] = 0;
  if (*(_BYTE *)v6 != 2)
    return 408;
  v8 = malloc_type_malloc(0xAuLL, 0x100004001E4F5AEuLL);
  v15 = v8;
  if (v8)
  {
    v9 = *(_DWORD *)a1;
    *((_WORD *)v8 + 2) = *((_WORD *)a1 + 2);
    *v8 = v9;
    *((_BYTE *)v8 + 6) = a2;
    *((_WORD *)v8 + 4) = a3;
    v16[1] = &v15;
    LOWORD(v16[0]) = 8;
    switch(a2)
    {
      case 2:
        v10 = v7 + 10;
        v11 = sub_1000E1B00;
        goto LABEL_17;
      case 1:
        v10 = v7 + 9;
        v11 = sub_1000E1A94;
        goto LABEL_17;
      case 0:
        v10 = v7 + 8;
        v11 = sub_1000E19FC;
LABEL_17:
        sub_10004A9EC((uint64_t)v11, v16, a3, v10);
        return 0;
    }
    if (sub_10005549C())
    {
      sub_100054530("Invalid type for Request Periodically");
      v14 = sub_1000544A0(0x53u);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    free(v15);
    return 117;
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("Memory allocation failure for AACP_PERIODICAL_REQUEST_ARG");
      v13 = sub_1000544A0(0x53u);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 106;
  }
}

uint64_t sub_1000E19FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _DWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  timeval v8;

  v8.tv_sec = 0;
  *(_QWORD *)&v8.tv_usec = 0;
  v6 = 0;
  gettimeofday(&v8, 0);
  v5[0] = v8.tv_sec;
  v5[1] = v8.tv_usec;
  v7 = 0;
  v2 = **(_QWORD **)(a1 + 8);
  result = sub_1000E2638((unsigned __int8 *)v2, (uint64_t)v5);
  if (!(_DWORD)result)
  {
    v4 = sub_1000E16AC((unsigned __int8 *)v2);
    return sub_10004A9EC((uint64_t)sub_1000E19FC, (const void **)a1, *(unsigned __int16 *)(v2 + 8), (int *)(v4 + 4 * *(unsigned __int8 *)(v2 + 6) + 32));
  }
  return result;
}

uint64_t sub_1000E1A94(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = **(_QWORD **)(a1 + 8);
  result = sub_1000E2430((unsigned __int8 *)v2, 0x20u, 0, 0);
  if (!(_DWORD)result)
  {
    v4 = sub_1000E16AC((unsigned __int8 *)v2);
    return sub_10004A9EC((uint64_t)sub_1000E1A94, (const void **)a1, *(unsigned __int16 *)(v2 + 8), (int *)(v4 + 4 * *(unsigned __int8 *)(v2 + 6) + 32));
  }
  return result;
}

uint64_t sub_1000E1B00(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned __int8 v5[8];

  *(_DWORD *)&v5[3] = 6;
  *(_DWORD *)v5 = 100684801;
  v2 = **(_QWORD **)(a1 + 8);
  result = sub_1000E2430((unsigned __int8 *)v2, 4u, 7u, v5);
  if (!(_DWORD)result)
  {
    v4 = sub_1000E16AC((unsigned __int8 *)v2);
    return sub_10004A9EC((uint64_t)sub_1000E1B00, (const void **)a1, *(unsigned __int16 *)(v2 + 8), (int *)(v4 + 4 * *(unsigned __int8 *)(v2 + 6) + 32));
  }
  return result;
}

uint64_t sub_1000E1B80(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  NSObject *v6;

  v3 = sub_1000E16AC(a1);
  if (!v3 || !*(_DWORD *)(v3 + 8))
    return 122;
  if (*(_BYTE *)v3 != 2)
    return 408;
  if (a2 > 1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Invalid type for Cancel Request Periodically");
      v6 = sub_1000544A0(0x53u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 117;
  }
  else
  {
    v4 = v3 + 4 * a2;
    sub_100049F6C(*(unsigned int *)(v4 + 32));
    result = 0;
    *(_DWORD *)(v4 + 32) = 0;
  }
  return result;
}

uint64_t sub_1000E1C2C(unsigned __int8 *a1, void *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v14;

  v6 = sub_1000E16AC(a1);
  if (v6 && (v7 = v6, *(_DWORD *)(v6 + 8)))
  {
    if (*(_BYTE *)v6 == 2)
    {
      v14 = 0;
      v8 = sub_100182588((uint64_t)a1, &v14);
      if ((_DWORD)v8)
      {
        v9 = v8;
        if (sub_10005549C())
        {
          sub_100054530("BT_AACP_CLIENT_SendData: Unable to retrieve ACL handle, status: %u", v9);
          v10 = sub_1000544A0(0x53u);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        goto LABEL_22;
      }
      if (*(_BYTE *)(v14 + 278) && *(unsigned __int16 *)(v7 + 14) >= 0xA12u)
      {
        if (a3 >= 0xA13)
        {
          if (!sub_10005549C())
            goto LABEL_20;
          sub_100054530("BT_AACP_CLIENT_SendData: Attempting to send too much data, dataLen: %u, MTU: %u", a3, 2578);
          v11 = sub_1000544A0(0x53u);
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            goto LABEL_20;
          goto LABEL_19;
        }
      }
      else if (a3 >= 0x3F4)
      {
        if (!sub_10005549C())
          goto LABEL_20;
        sub_100054530("BT_AACP_CLIENT_SendData: Attempting to send too much data, dataLen: %u, MTU: %u", a3, 1011);
        v12 = sub_1000544A0(0x53u);
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          goto LABEL_20;
LABEL_19:
        sub_1006CE7A4();
LABEL_20:
        v9 = 142;
LABEL_22:
        sub_100053298(a2);
        return v9;
      }
      v9 = sub_1001170E0(*(_DWORD *)(v7 + 8), (char *)a2, a3);
      if ((_DWORD)v9)
        goto LABEL_22;
    }
    else
    {
      sub_100053298(a2);
      return 408;
    }
  }
  else
  {
    sub_100053298(a2);
    return 122;
  }
  return v9;
}

uint64_t sub_1000E1DE0(unsigned __int8 *a1, char a2)
{
  _BYTE *v4;

  v4 = sub_100052DC0(4uLL);
  if (!v4)
    return 106;
  *(_WORD *)v4 = 1;
  v4[2] = a2;
  return sub_1000E1C2C(a1, v4, 3uLL);
}

uint64_t sub_1000E1E34(unsigned __int8 *a1, char a2)
{
  _BYTE *v4;

  v4 = sub_100052DC0(3uLL);
  if (!v4)
    return 106;
  *(_WORD *)v4 = 3;
  v4[2] = a2;
  return sub_1000E1C2C(a1, v4, 3uLL);
}

uint64_t sub_1000E1E94(unsigned __int8 *a1)
{
  _WORD *v2;

  v2 = sub_100052DC0(2uLL);
  if (!v2)
    return 106;
  *v2 = 5;
  return sub_1000E1C2C(a1, v2, 2uLL);
}

uint64_t sub_1000E1EE0(unsigned __int8 *a1)
{
  _WORD *v2;

  v2 = sub_100052DC0(2uLL);
  if (!v2)
    return 106;
  *v2 = 7;
  return sub_1000E1C2C(a1, v2, 2uLL);
}

uint64_t sub_1000E1F2C(unsigned __int8 *a1, char a2, int a3)
{
  char *v6;

  v6 = (char *)sub_100052DC0(7uLL);
  if (!v6)
    return 106;
  *(_WORD *)v6 = 9;
  v6[2] = a2;
  *(_DWORD *)(v6 + 3) = a3;
  return sub_1000E1C2C(a1, v6, 7uLL);
}

uint64_t sub_1000E1FAC(unsigned __int8 *a1)
{
  _WORD *v2;

  v2 = sub_100052DC0(2uLL);
  if (!v2)
    return 106;
  *v2 = 13;
  return sub_1000E1C2C(a1, v2, 2uLL);
}

uint64_t sub_1000E1FF8(unsigned __int8 *a1, __int16 a2, __int16 a3)
{
  _WORD *v6;

  v6 = sub_100052DC0(6uLL);
  if (!v6)
    return 106;
  *v6 = 15;
  v6[1] = a2;
  v6[2] = a3;
  return sub_1000E1C2C(a1, v6, 6uLL);
}

uint64_t sub_1000E2070(unsigned __int8 *a1, uint64_t a2, unsigned int a3, const void *a4)
{
  unsigned __int16 v8;
  _WORD *v9;
  _WORD *v10;

  v8 = a3 + 10;
  v9 = sub_100052DC0(a3 + 10);
  if (!v9)
    return 106;
  if (v8 == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (!v8)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v10 = v9;
  *v9 = 16;
  if (v8 <= 7u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  sub_10004C878((uint64_t)(v9 + 1), a2, 6uLL);
  if (v8 <= 9u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v10[4] = a3;
  if (v8 - 10 < a3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  memmove(v10 + 5, a4, a3);
  return sub_1000E1C2C(a1, v10, v8);
}

uint64_t sub_1000E21BC(unsigned __int8 *a1, uint64_t a2, unsigned int a3, const void *a4)
{
  size_t v8;
  _WORD *v9;
  _BYTE *v10;

  v8 = a3 + 9;
  v9 = sub_100052DC0(v8);
  if (!v9)
    return 106;
  v10 = v9;
  *v9 = 18;
  sub_10004C878((uint64_t)(v9 + 1), a2, 6uLL);
  v10[8] = a3;
  if (a3)
    memmove(v10 + 9, a4, a3);
  else
    v8 = 9;
  return sub_1000E1C2C(a1, v10, v8);
}

uint64_t sub_1000E2260(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  int v6;
  _WORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;

  v6 = 6 * a2;
  v7 = sub_100052DC0(6 * a2 + 3);
  if (!v7)
    return 106;
  v8 = v7;
  *v7 = 20;
  *((_BYTE *)v7 + 2) = a2;
  if (a2)
  {
    v9 = 0;
    v10 = v6 - 2;
    v11 = 6 * a2;
    do
    {
      if (v9 + 3 >= v10)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      sub_10004C878((uint64_t)v8 + v9 + 3, a3 + v9, 6uLL);
      v9 += 6;
    }
    while (v11 != v9);
    v12 = v9 + 3;
  }
  else
  {
    v12 = 3;
  }
  return sub_1000E1C2C(a1, v8, v12);
}

uint64_t sub_1000E2350(unsigned __int8 *a1, uint64_t a2)
{
  _WORD *v4;
  void *v5;

  v4 = sub_100052DC0(8uLL);
  if (!v4)
    return 106;
  v5 = v4;
  *v4 = 21;
  sub_10004C878((uint64_t)(v4 + 1), a2, 6uLL);
  return sub_1000E1C2C(a1, v5, 8uLL);
}

uint64_t sub_1000E23BC(unsigned __int8 *a1, uint64_t a2, char a3)
{
  _WORD *v6;
  _BYTE *v7;

  v6 = sub_100052DC0(9uLL);
  if (!v6)
    return 106;
  v7 = v6;
  *v6 = 22;
  sub_10004C878((uint64_t)(v6 + 1), a2, 6uLL);
  v7[8] = a3;
  return sub_1000E1C2C(a1, v7, 9uLL);
}

uint64_t sub_1000E2430(unsigned __int8 *a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned __int16 v11;
  _WORD *v12;
  void *v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v20;

  v8 = sub_1000E16AC(a1);
  if (!v8)
    return 122;
  v9 = *(_DWORD *)(v8 + 16);
  if (v9 >= 0x10002)
    v10 = 8;
  else
    v10 = 6;
  if (a2 == 4 && a3 >= 2 && *a4 - 1 > 1)
    return 101;
  v11 = v10 + a3;
  v12 = sub_100052DC0(v10 + a3);
  if (!v12)
    return 106;
  if (v11 == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (!v11)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v13 = v12;
  *v12 = 23;
  if (v9 > 0x10001)
  {
    if (v11 <= 5u)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    v18 = HIWORD(a2);
    v12[1] = a2;
    v14 = 3;
    v15 = 24;
    v16 = 5;
    v17 = 2;
  }
  else
  {
    if (v11 <= 3u)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    v14 = 2;
    v15 = 8;
    v16 = 3;
    v17 = 1;
    LOBYTE(v18) = a2;
  }
  LOBYTE(v12[v17]) = v18;
  *((_BYTE *)v12 + v16) = a2 >> v15;
  if ((int)(v11 - v14 * 2) <= 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v12[v14] = a3;
  v20 = v14 * 2 + 2;
  if (a3)
  {
    if ((int)(v11 - v20) < (int)a3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    memmove((char *)v12 + v20, a4, a3);
    LOWORD(v20) = v20 + a3;
  }
  return sub_1000E1C2C(a1, v13, (unsigned __int16)v20);
}

uint64_t sub_1000E2638(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int16 v4;
  char *v5;
  void *v6;
  size_t v7;

  v4 = *(_WORD *)(a2 + 8) + 12;
  v5 = (char *)sub_100052DC0(*(unsigned __int16 *)(a2 + 8) + 12);
  if (!v5)
    return 106;
  if (v4 == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (!v4)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v6 = v5;
  *(_WORD *)v5 = 27;
  if (v4 <= 5u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  *((_WORD *)v5 + 1) = *(_DWORD *)a2;
  v5[4] = *(_WORD *)(a2 + 2);
  v5[5] = *(_BYTE *)(a2 + 3);
  if (v4 <= 9u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  *((_WORD *)v5 + 3) = *(_DWORD *)(a2 + 4);
  v5[8] = *(_WORD *)(a2 + 6);
  v5[9] = *(_BYTE *)(a2 + 7);
  if (v4 <= 0xBu)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v5[10] = *(_BYTE *)(a2 + 8);
  v5[11] = *(_BYTE *)(a2 + 9);
  v7 = *(unsigned __int16 *)(a2 + 8);
  if (v4 - 12 < v7)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  memmove(v5 + 12, *(const void **)(a2 + 16), v7);
  return sub_1000E1C2C(a1, v6, (unsigned __int16)(*(_WORD *)(a2 + 8) + 12));
}

uint64_t sub_1000E27D4(unsigned __int8 *a1, char a2, unsigned int a3, const void *a4)
{
  unsigned __int16 v8;
  char *v9;
  void *v10;

  v8 = a3 + 5;
  v9 = (char *)sub_100052DC0(a3 + 5);
  if (!v9)
    return 106;
  if (v8 == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (!v8)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v10 = v9;
  *(_WORD *)v9 = 26;
  if (v8 <= 2u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v9[2] = a2;
  if (v8 <= 4u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  *(_WORD *)(v9 + 3) = a3;
  if (a3)
  {
    if (v8 - 5 < a3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    memmove(v9 + 5, a4, a3);
  }
  else
  {
    v8 = 5;
  }
  return sub_1000E1C2C(a1, v10, v8);
}

uint64_t sub_1000E2914(unsigned __int8 *a1, unsigned int a2, char a3)
{
  char v5;
  _BYTE *v7;

  if (a2 > 0x1F)
    return 101;
  v5 = a2;
  v7 = sub_100052DC0(4uLL);
  if (!v7)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  *(_WORD *)v7 = 30;
  v7[2] = a3;
  v7[3] = (4 * v5) | 0x80;
  return sub_1000E1C2C(a1, v7, 4uLL);
}

uint64_t sub_1000E29A4(unsigned __int8 *a1, unsigned int a2, unsigned int a3, const void *a4)
{
  __int16 v6;
  unsigned __int16 v8;
  char *v9;
  void *v10;

  if (a2 > 0x1F || !a4)
    return 101;
  v6 = a2;
  v8 = a3 + 4;
  v9 = (char *)sub_100052DC0(a3 + 4);
  if (!v9)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (v8 == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (!v8)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v10 = v9;
  *(_WORD *)v9 = 30;
  if (v8 <= 3u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v9[2] = a3;
  v9[3] = (unsigned __int16)((v6 << 10) | a3) >> 8;
  if (v8 - 4 < a3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  memmove(v9 + 4, a4, a3);
  return sub_1000E1C2C(a1, v10, v8);
}

uint64_t sub_1000E2AE8(unsigned __int8 *a1, char a2, int a3)
{
  char *v6;

  v6 = (char *)sub_100052DC0(7uLL);
  if (!v6)
    return 106;
  *(_WORD *)v6 = 31;
  v6[2] = a2;
  *(_DWORD *)(v6 + 3) = a3;
  return sub_1000E1C2C(a1, v6, 7uLL);
}

uint64_t sub_1000E2B68(unsigned __int8 *a1, unsigned int a2, const void *a3)
{
  unsigned __int16 v6;
  _WORD *v7;
  void *v8;

  if (!a2 || !a3)
    return 101;
  v6 = a2 + 4;
  v7 = sub_100052DC0(a2 + 4);
  if (!v7)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (v6 == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (!v6)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v8 = v7;
  *v7 = 32;
  if (v6 <= 3u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v7[1] = a2;
  if (v6 - 4 < a2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  memmove(v7 + 2, a3, a2);
  return sub_1000E1C2C(a1, v8, v6);
}

uint64_t sub_1000E2C94(unsigned __int8 *a1, char a2, char a3, unsigned int a4, const void *a5)
{
  unsigned __int16 v10;
  char *v11;
  void *v12;

  v10 = a4 + 6;
  v11 = (char *)sub_100052DC0(a4 + 6);
  if (!v11)
    return 106;
  if (v10 == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (!v10)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v12 = v11;
  *(_WORD *)v11 = 33;
  if (v10 <= 2u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v11[2] = a2;
  if (v10 == 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v11[3] = a3;
  if (v10 <= 5u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  *((_WORD *)v11 + 2) = a4;
  if (a4)
  {
    if (v10 - 6 < a4)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    memmove(v11 + 6, a5, a4);
  }
  else
  {
    v10 = 6;
  }
  return sub_1000E1C2C(a1, v12, v10);
}

uint64_t sub_1000E2E08(unsigned __int8 *a1)
{
  _WORD *v2;

  v2 = sub_100052DC0(2uLL);
  if (!v2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  *v2 = 34;
  return sub_1000E1C2C(a1, v2, 2uLL);
}

uint64_t sub_1000E2E5C(unsigned __int8 *a1, __int16 a2, unsigned int a3, const void *a4)
{
  unsigned __int16 v8;
  _WORD *v9;
  void *v10;

  v8 = a3 + 6;
  v9 = sub_100052DC0(a3 + 6);
  if (!v9)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (v8 == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (!v8)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v10 = v9;
  *v9 = 36;
  if (v8 <= 3u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v9[1] = a2;
  if (v8 <= 5u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v9[2] = a3;
  if (a3)
  {
    if (v8 - 6 < a3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    memmove(v9 + 3, a4, a3);
  }
  else
  {
    v8 = 6;
  }
  return sub_1000E1C2C(a1, v10, v8);
}

uint64_t sub_1000E2F9C(unsigned __int8 *a1, int a2)
{
  uint64_t result;
  __int16 v4;
  _WORD *v5;

  result = 101;
  if (a1)
  {
    v4 = a2;
    if (a2)
    {
      v5 = sub_100052DC0(4uLL);
      if (v5)
      {
        *v5 = 48;
        v5[1] = v4;
        return sub_1000E1C2C(a1, v5, 4uLL);
      }
      else
      {
        return 106;
      }
    }
  }
  return result;
}

uint64_t sub_1000E3004(unsigned __int8 *a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v5;
  char v6;
  uint64_t v8;
  __int16 *v9;
  unsigned __int16 v10;
  uint64_t v11;
  __int16 v12;
  char *v13;
  char *v14;
  char v15;
  int v16;
  char *v17;
  char *v18;
  int v19;
  size_t v20;

  if (!a2)
    return 101;
  v5 = a3;
  v6 = a2;
  v8 = a2;
  v9 = (__int16 *)(a3 + 2);
  v10 = 3;
  v11 = a2;
  do
  {
    v12 = *v9;
    v9 += 8;
    v10 += v12 + 4;
    --v11;
  }
  while (v11);
  if (!a1)
    return 101;
  v13 = (char *)sub_100052DC0(v10);
  if (!v13)
    return 106;
  if (v10 == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (!v10)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v14 = v13;
  if (a4)
    v15 = 49;
  else
    v15 = 50;
  *v13 = v15;
  v13[1] = 0;
  if (v10 <= 2u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v13[2] = v6;
  v16 = 3;
  do
  {
    if ((unsigned __int16)(v10 - 1) <= (unsigned __int16)v16)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    v17 = &v14[(unsigned __int16)v16];
    *v17 = *(_BYTE *)v5;
    v17[1] = *(_BYTE *)(v5 + 1);
    if ((unsigned __int16)(v10 - 1) <= (unsigned __int16)(v16 + 2))
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    v18 = &v14[(unsigned __int16)(v16 + 2)];
    *v18 = *(_BYTE *)(v5 + 2);
    v18[1] = *(_BYTE *)(v5 + 3);
    v19 = v16 + 4;
    v20 = *(unsigned __int16 *)(v5 + 2);
    if (v10 - (unsigned __int16)(v16 + 4) < (int)v20)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    memmove(&v14[(unsigned __int16)v19], *(const void **)(v5 + 8), v20);
    v16 = *(unsigned __int16 *)(v5 + 2) + v19;
    v5 += 16;
    --v8;
  }
  while (v8);
  return sub_1000E1C2C(a1, v14, (unsigned __int16)v16);
}

uint64_t sub_1000E31F0(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  return sub_1000E3004(a1, a2, a3, 1);
}

uint64_t sub_1000E31F8(uint64_t a1, int a2, uint64_t a3, unsigned __int16 *a4)
{
  _BYTE *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  __int16 v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD v21[3];

  if (!a3)
  {
    sub_100253460();
    return 101;
  }
  if (!*(_QWORD *)(a3 + 8))
  {
    sub_100253460();
    if (!*(_QWORD *)(a3 + 8))
      return 101;
  }
  if (!*(_QWORD *)(a3 + 16))
  {
    sub_100253460();
    if (!*(_QWORD *)(a3 + 16))
      return 101;
  }
  if (qword_10097CC20 || (qword_10097CC20 = (uint64_t)sub_100114588(0xF8uLL)) != 0)
  {
    v8 = (_BYTE *)sub_1000E16AC((unsigned __int8 *)a1);
    if (v8 && *v8)
    {
      if (sub_10005549C())
      {
        sub_100054530("BT_AACP_CLIENT_fastConnectCreateChannel Aready connected/connection in progress");
        v9 = sub_1000544A0(0x53u);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 133;
    }
    else
    {
      v12 = sub_1000E1738();
      if (v12)
      {
        v13 = v12;
        *(_QWORD *)(v12 + 24) = a3;
        *(_QWORD *)(v12 + 8) = 0;
        v14 = (int *)(v12 + 8);
        v15 = *(_WORD *)(a1 + 4);
        *(_DWORD *)(v12 + 1) = *(_DWORD *)a1;
        v16 = v12 + 1;
        *(_WORD *)(v16 + 4) = v15;
        *(_DWORD *)(v16 + 31) = 0;
        if (a2)
        {
          v21[2] = 0;
          v21[1] = 0x200010004;
          v21[0] = off_10091A448;
          *(_WORD *)(v13 + 12) = a2;
          v10 = sub_100117804(v16, a2, (uint64_t)v21, a4, v14);
          if ((_DWORD)v10)
          {
            if (sub_10005549C())
            {
              sub_100054530("BT_AACP_CLIENT_fastConnectCreateChannel: Error creating AAP");
              v17 = sub_1000544A0(0x53u);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
                sub_1006CE80C();
            }
          }
          else
          {
            *(_BYTE *)v13 = 2;
          }
        }
        else
        {
          if (sub_10005549C())
          {
            sub_100054530("BT_AACP_CLIENT_fastConnectCreateChannel invalid PSM");
            v20 = sub_1000544A0(0x53u);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
          return 131;
        }
      }
      else
      {
        if (sub_10005549C())
        {
          sub_100054530("BT_AACP_CLIENT_fastConnectCreateChannel No free AACP connection slot ");
          v18 = sub_1000544A0(0x53u);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        return 104;
      }
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("init failed..!");
      v19 = sub_1000544A0(0x53u);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 106;
  }
  return v10;
}

void sub_1000E34AC(unsigned __int8 *a1, unsigned int a2)
{
  _OWORD *v4;

  v4 = (_OWORD *)sub_1000E16AC(a1);
  if (v4)
    sub_1000E1790(v4);
  sub_100117BA4((uint64_t)a1, a2);
}

uint64_t sub_1000E34E0(int a1, int a2, __int16 a3, unsigned __int8 *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = sub_1000E16AC(a4);
  if (!v7)
    return 114;
  v8 = v7;
  result = 0;
  *(_WORD *)(v8 + 14) = a3;
  *(_DWORD *)(v8 + 16) = a1 | (a2 << 16);
  return result;
}

uint64_t sub_1000E3534(unsigned __int8 *a1, const void *a2, unsigned int a3)
{
  size_t v6;
  _WORD *v7;
  void *v8;

  if (!a2)
    return 101;
  v6 = a3 + 2;
  v7 = sub_100052DC0(v6);
  if (!v7)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v8 = v7;
  *v7 = 41;
  memmove(v7 + 1, a2, a3);
  return sub_1000E1C2C(a1, v8, v6);
}

uint64_t sub_1000E35D0(unsigned __int8 *a1)
{
  _WORD *v2;

  v2 = sub_100052DC0(2uLL);
  if (!v2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  *v2 = 38;
  return sub_1000E1C2C(a1, v2, 2uLL);
}

uint64_t sub_1000E3624(unsigned __int8 *a1)
{
  _WORD *v2;

  v2 = sub_100052DC0(2uLL);
  if (!v2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  *v2 = 45;
  return sub_1000E1C2C(a1, v2, 2uLL);
}

uint64_t sub_1000E3678(unsigned __int8 *a1, const void *a2, unsigned int a3, char a4)
{
  unsigned __int16 v8;
  char *v9;
  void *v10;
  NSObject *v12;

  if (a2 && a3)
  {
    v8 = a3 + 6;
    v9 = (char *)sub_100052DC0(a3 + 6);
    if (!v9)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    if (v8 == 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    if (!v8)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    v10 = v9;
    *(_WORD *)v9 = 44;
    if (v8 <= 2u)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    v9[2] = a4;
    if (v8 == 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    v9[3] = 1;
    if (v8 <= 5u)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    *((_WORD *)v9 + 2) = a3;
    if (v8 - 6 < a3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    memmove(v9 + 6, a2, a3);
    return sub_1000E1C2C(a1, v10, (unsigned __int16)(a3 + 6));
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("BT_AACP_CLIENT_GAPASendChallenge: Invalid data or len (%u)", a3);
      v12 = sub_1000544A0(0x53u);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 101;
  }
}

uint64_t sub_1000E3848(unsigned __int8 *a1, const void *a2, unsigned int a3)
{
  unsigned __int16 v6;
  _WORD *v7;
  void *v8;

  if (!a1 || !a2 || !a3)
    return 101;
  v6 = a3 + 4;
  v7 = sub_100052DC0(a3 + 4);
  if (!v7)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (v6 == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (!v6)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v8 = v7;
  *v7 = 68;
  if (v6 <= 3u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v7[1] = a3;
  if (v6 - 4 < a3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  memmove(v7 + 2, a2, a3);
  return sub_1000E1C2C(a1, v8, (unsigned __int16)(a3 + 4));
}

uint64_t sub_1000E397C(unsigned __int8 *a1, const void *a2, unsigned int a3)
{
  unsigned __int16 v6;
  _WORD *v7;
  void *v8;

  if (!a1 || !a2 || !a3)
    return 101;
  v6 = a3 + 4;
  v7 = sub_100052DC0(a3 + 4);
  if (!v7)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (v6 == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (!v6)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v8 = v7;
  *v7 = 75;
  if (v6 <= 3u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v7[1] = a3;
  if (v6 - 4 < a3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  memmove(v7 + 2, a2, a3);
  return sub_1000E1C2C(a1, v8, (unsigned __int16)(a3 + 4));
}

uint64_t sub_1000E3AB0(unsigned __int8 *a1)
{
  _WORD *v2;

  if (!a1)
    return 101;
  v2 = sub_100052DC0(2uLL);
  if (!v2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  *v2 = 69;
  return sub_1000E1C2C(a1, v2, 2uLL);
}

uint64_t sub_1000E3B18(unsigned __int8 *a1, int a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;

  if (!a1)
    return 101;
  v4 = (char *)sub_100052DC0(6uLL);
  if (!v4)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v5 = v4;
  *(_WORD *)v4 = 72;
  *(_DWORD *)(v4 + 2) = a2;
  v6 = sub_1000E16AC(a1);
  if (v6 && (v7 = (_BYTE *)v6, (v8 = *(_DWORD *)(v6 + 8)) != 0))
  {
    if (*v7 == 2)
    {
      v9 = sub_100117374(v8, v5, 6uLL);
      if (!(_DWORD)v9)
        return v9;
    }
    else
    {
      v9 = 408;
    }
  }
  else
  {
    v9 = 122;
  }
  sub_100053298(v5);
  return v9;
}

uint64_t sub_1000E3BEC(unsigned __int8 *a1)
{
  _WORD *v2;

  if (!a1)
    return 101;
  v2 = sub_100052DC0(2uLL);
  if (!v2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  *v2 = 74;
  return sub_1000E1C2C(a1, v2, 2uLL);
}

uint64_t sub_1000E3C54(unsigned __int8 *a1, unsigned int a2, const void *a3)
{
  unsigned __int16 v6;
  _WORD *v7;
  void *v8;

  if (!a2 || !a1 || !a3)
    return 101;
  v6 = a2 + 5;
  v7 = sub_100052DC0(a2 + 5);
  if (!v7)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (v6 == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  if (!v6)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v8 = v7;
  *v7 = 76;
  if (v6 <= 3u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v7[1] = a2;
  if (v6 - 4 < a2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  memmove(v7 + 2, a3, a2);
  return sub_1000E1C2C(a1, v8, (unsigned __int16)(a2 + 4));
}

uint64_t sub_1000E3D88(unsigned __int8 *a1, unsigned int a2, const void *a3)
{
  uint64_t result;
  unsigned __int16 v7;
  _WORD *v8;
  void *v9;
  NSObject *v10;

  result = 101;
  if (a2 && a1 && a3)
  {
    v7 = a2 + 4;
    v8 = sub_100052DC0(a2 + 4);
    if (v8)
    {
      if (v7 == 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      if (!v7)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v9 = v8;
      *v8 = 79;
      if (v7 <= 3u)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v8[1] = a2;
      if (v7 - 4 < a2)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      memmove(v8 + 2, a3, a2);
      return sub_1000E1C2C(a1, v9, (unsigned __int16)(a2 + 4));
    }
    else
    {
      if (sub_10005549C())
      {
        sub_100054530("BT_AACP_CLIENT_SendUARPData - failed to allocate memory");
        v10 = sub_1000544A0(0x53u);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 106;
    }
  }
  return result;
}

uint64_t sub_1000E3EE8(unsigned __int8 *a1, uint64_t a2)
{
  char *v4;

  if (!a1)
    return 101;
  v4 = (char *)sub_100052DC0(0xAuLL);
  if (!v4)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  *(_WORD *)v4 = 77;
  *(_QWORD *)(v4 + 2) = a2;
  return sub_1000E1C2C(a1, v4, 0xAuLL);
}

uint64_t sub_1000E3F90(unsigned __int8 *a1, uint64_t a2)
{
  char *v4;

  if (!a1)
    return 101;
  v4 = (char *)sub_100052DC0(0xAuLL);
  if (!v4)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  *(_WORD *)v4 = 78;
  *(_QWORD *)(v4 + 2) = a2;
  return sub_1000E1C2C(a1, v4, 0xAuLL);
}

uint64_t sub_1000E4038(unsigned __int8 *a1, unsigned int a2, const void *a3)
{
  uint64_t result;
  unsigned __int16 v7;
  _WORD *v8;
  void *v9;
  NSObject *v10;

  result = 101;
  if (a2 && a1 && a3)
  {
    v7 = a2 + 4;
    v8 = sub_100052DC0(a2 + 4);
    if (v8)
    {
      if (v7 == 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      if (!v7)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v9 = v8;
      *v8 = 82;
      if (v7 <= 3u)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v8[1] = a2;
      if (v7 - 4 < a2)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      memmove(v8 + 2, a3, a2);
      return sub_1000E1C2C(a1, v9, (unsigned __int16)(a2 + 4));
    }
    else
    {
      if (sub_10005549C())
      {
        sub_100054530("BT_AACP_CLIENT_SendSourceContextMessage - failed to allocate memory");
        v10 = sub_1000544A0(0x53u);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 106;
    }
  }
  return result;
}

uint64_t sub_1000E4198(unsigned __int8 *a1, unsigned int a2, const void *a3)
{
  uint64_t result;
  unsigned __int16 v7;
  _WORD *v8;
  void *v9;
  NSObject *v10;

  result = 101;
  if (a2 && a1 && a3)
  {
    v7 = a2 + 4;
    v8 = sub_100052DC0(a2 + 4);
    if (v8)
    {
      if (v7 == 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      if (!v7)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v9 = v8;
      *v8 = 83;
      if (v7 <= 3u)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v8[1] = a2;
      if (v7 - 4 < a2)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      memmove(v8 + 2, a3, a2);
      return sub_1000E1C2C(a1, v9, (unsigned __int16)(a2 + 4));
    }
    else
    {
      if (sub_10005549C())
      {
        sub_100054530("BT_AACP_CLIENT_SendPMEConfig - failed to allocate memory");
        v10 = sub_1000544A0(0x53u);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 106;
    }
  }
  return result;
}

uint64_t sub_1000E42F8(unsigned __int8 *a1, unsigned int a2)
{
  _BYTE *v4;
  NSObject *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t (**v8)(int *);
  int v9;
  NSObject *v10;
  NSObject *v11;

  v4 = (_BYTE *)qword_10097CC20;
  if (!qword_10097CC20)
  {
    v4 = sub_100114588(0xF8uLL);
    qword_10097CC20 = (uint64_t)v4;
  }
  if (sub_1000E16AC(a1))
  {
    if (!sub_10005549C())
      return sub_1001DEB7C(a2, 436);
    sub_100054530("address already connected");
    v5 = sub_1000544A0(0x53u);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      return sub_1001DEB7C(a2, 436);
    goto LABEL_6;
  }
  if (v4)
  {
    v7 = 8;
    while (v4[v7] != 1)
    {
      v7 += 48;
      if (v7 == 248)
        goto LABEL_13;
    }
    if (!sub_10005549C())
      return sub_1001DEB7C(a2, 436);
    sub_100054530("Another AACP connection in progress");
    v10 = sub_1000544A0(0x53u);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return sub_1001DEB7C(a2, 436);
LABEL_6:
    sub_1006CE7A4();
    return sub_1001DEB7C(a2, 436);
  }
LABEL_13:
  result = sub_1000E1738();
  if (!result)
  {
    if (!sub_10005549C())
      return sub_1001DEB7C(a2, 436);
    sub_100054530("No free AACP connection slot ");
    v11 = sub_1000544A0(0x53u);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      return sub_1001DEB7C(a2, 436);
    goto LABEL_6;
  }
  v8 = (uint64_t (**)(int *))qword_100994198;
  *(_QWORD *)(result + 24) = qword_100994198;
  *(_QWORD *)(result + 8) = 0;
  v9 = *(_DWORD *)a1;
  *(_WORD *)(result + 5) = *((_WORD *)a1 + 2);
  *(_DWORD *)(result + 1) = v9;
  *(_DWORD *)(result + 32) = 0;
  if (v8 && *v8)
    return (*v8)((int *)a1);
  return result;
}

void sub_1000E4480(unsigned __int8 *a1, uint64_t a2, int a3, __int16 a4, int a5, int a6)
{
  uint64_t v11;
  NSObject *v12;
  int v13;
  __int16 v14;
  int v15;
  NSObject *v16;
  uint8_t buf[4];
  void *v18;

  v11 = sub_1000E16AC(a1);
  if (sub_10005549C())
  {
    sub_100054530("AACP: aapConnectCb  result = %d", a2);
    v12 = sub_1000544A0(0x53u);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v18 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (v11)
  {
    v13 = a6 | (a5 << 16);
    if ((_DWORD)a2)
      v14 = 0;
    else
      v14 = a4;
    if ((_DWORD)a2)
      v15 = 0;
    else
      v15 = a3;
    *(_WORD *)(v11 + 14) = v14;
    if ((_DWORD)a2)
      v13 = 0;
    *(_DWORD *)(v11 + 8) = v15;
    *(_DWORD *)(v11 + 16) = v13;
    sub_1000E7338(a2, v15);
  }
  else if (sub_10005549C())
  {
    sub_100054530("No connection associated with address");
    v16 = sub_1000544A0(0x53u);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

void sub_1000E45E0(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t i;
  uint64_t v8;
  NSObject *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = qword_10097CC20;
  if (qword_10097CC20)
  {
    v3 = 0;
    while (*(_DWORD *)(qword_10097CC20 + v3 + 16) != a1)
    {
      v3 += 48;
      if (v3 == 240)
      {
        v4 = 8;
        while (*(_BYTE *)(qword_10097CC20 + v4) != 1)
        {
          v4 += 48;
          if (v4 == 248)
            goto LABEL_8;
        }
        goto LABEL_20;
      }
    }
    v6 = *(unsigned __int8 *)(qword_10097CC20 + v3 + 8);
    if (v6 == 1)
    {
LABEL_20:
      sub_1000E7338(3570, a1);
      return;
    }
    if (v6 != 2)
      return;
    for (i = 0; i != 240; i += 48)
    {
      v8 = qword_10097CC20 + i;
      if (*(_DWORD *)(qword_10097CC20 + i + 16) == a1)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(v8 + 32) + 16))(v8 + 9);
        v10 = (_DWORD *)(v8 + 40);
        v11 = 4;
        do
        {
          v12 = *v10;
          if ((_DWORD)v12)
          {
            sub_100049F6C(v12);
            *v10 = 0;
          }
          ++v10;
          --v11;
        }
        while (v11);
        sub_1000E1790((_OWORD *)(v2 + i + 8));
        return;
      }
    }
    if (!sub_10005549C())
      return;
    sub_100054530("AAP Handle %d is not valid!\n", a1);
    v9 = sub_1000544A0(0x53u);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_18;
  }
LABEL_8:
  if (sub_10005549C())
  {
    sub_100054530("No connection associated with handle (%d)!\n", a1);
    v5 = sub_1000544A0(0x53u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
LABEL_18:
      sub_1006CE7A4();
  }
}

void sub_1000E477C(int a1, void *ptr)
{
  uint64_t v4;
  NSObject *v5;
  void (*v6)(uint64_t, void *);

  if (qword_10097CC20)
  {
    v4 = 0;
    while (*(_DWORD *)(qword_10097CC20 + v4 + 16) != a1)
    {
      v4 += 48;
      if (v4 == 240)
        goto LABEL_5;
    }
    v6 = *(void (**)(uint64_t, void *))(*(_QWORD *)(qword_10097CC20 + v4 + 32) + 24);
    if (v6)
      v6(qword_10097CC20 + v4 + 9, ptr);
    sub_100053298(ptr);
  }
  else
  {
LABEL_5:
    if (sub_10005549C())
    {
      sub_100054530("No connection associated with handle (%d)", a1);
      v5 = sub_1000544A0(0x53u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
}

void sub_1000E4844(int a1, unsigned __int16 *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v7;
  NSObject *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  void **v17;
  char *v18;
  unsigned __int16 *v19;
  unsigned int v20;
  _BYTE *v21;
  uint64_t v22;
  signed int v23;
  signed int v24;
  char *v25;
  _BYTE *v26;
  char v27;
  NSObject *v28;
  void (*v29)(uint64_t, uint64_t, void **, BOOL);
  NSObject *v30;
  int v32;
  unsigned __int16 *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, _DWORD *);
  void (*v47)(uint64_t, _QWORD, _QWORD);
  uint64_t v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  unsigned __int16 v52;
  signed int v53;
  uint64_t v54;
  char v55;
  uint64_t v57;
  uint64_t v58;
  unsigned __int16 *v59;
  size_t v60;
  void **v61;
  NSObject *v62;
  uint64_t v63;
  void (*v64)(uint64_t, _DWORD *, uint64_t);
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  size_t v69;
  char *v70;
  void *v71;
  uint64_t v72;
  unsigned int v73;
  size_t v76;
  void **v77;
  NSObject *v78;
  size_t v80;
  void **v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v87;
  void *v88;
  uint64_t v89;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  void **v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unsigned __int16 v101;
  void **v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  void **v110;
  NSObject *v111;
  uint64_t v112;
  size_t v114;
  void **v115;
  NSObject *v116;
  uint64_t v117;
  unsigned __int16 *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  int v125;
  NSObject *v126;
  uint64_t v127;
  size_t v129;
  void **v130;
  char *v131;
  char *v132;
  char v133;
  void (*v134)(uint64_t, uint64_t, size_t, void **);
  uint64_t v135;
  uint64_t v136;
  size_t v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t);
  void (*v140)(uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v141;
  NSObject *v142;
  size_t v144;
  char *v145;
  void *v146;
  uint64_t v147;
  void (*v148)(uint64_t, _QWORD);
  unsigned int v149;
  unsigned __int16 *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v155;
  uint64_t v156;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  size_t v162;
  char *v163;
  _BYTE *v164;
  uint64_t v165;
  uint64_t v166;
  void *v168;
  void *v169;
  uint64_t i;
  NSObject *v171;
  NSObject *v173;
  char *v174;
  _DWORD *v175;
  uint64_t v176;
  char v177;
  unsigned int v178;
  int v179;
  void (*v180)(uint64_t, _QWORD, _BYTE *);
  uint64_t v183;
  char *v184;
  uint64_t v185;
  NSObject *v186;
  void (*v187)(uint64_t, size_t, void **);
  uint64_t v188;
  NSObject *v189;
  uint64_t v190;
  void (*v191)(uint64_t, size_t, void *);
  void (*v192)(uint64_t, uint64_t, size_t, _BYTE *);
  uint64_t v193;
  void (*v194)(uint64_t, uint64_t, size_t, void *);
  uint64_t v195;
  void (*v196)(uint64_t, _DWORD *, uint64_t, uint64_t);
  void (*v197)(uint64_t, uint64_t, uint64_t, uint64_t, void *);
  char *v198;
  char *v199;
  char v200;
  void (*v201)(uint64_t, void **, size_t, uint64_t);
  char *v202;
  char *v203;
  char v204;
  unsigned __int16 *v205;
  size_t v206;
  char *v207;
  NSObject *v208;
  void **v209;
  void (*v210)(uint64_t, _DWORD *);
  NSObject *v211;
  void (*v212)(uint64_t, uint64_t, uint64_t, void **);
  void **v213;
  void *v214;
  char *v215;
  char v216;
  void (*v217)(uint64_t, uint64_t, uint64_t, uint64_t, char *);
  uint64_t v218;
  int v220;
  size_t v222;
  void **v223;
  NSObject *v224;
  char *v225;
  char *v226;
  char v227;
  void (*v228)(uint64_t, _DWORD *, size_t, void **);
  char *v229;
  char *v230;
  char v231;
  void (*v232)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, void **, size_t, char *);
  NSObject *v233;
  void *v234;
  uint64_t j;
  void *v236;
  uint64_t k;
  void *v238;
  uint64_t m;
  void (*v240)(uint64_t, uint64_t, void *);
  void (*v241)(uint64_t, uint64_t, _BYTE *);
  NSObject *v242;
  char *v243;
  char *v244;
  char v245;
  char *v248;
  _BYTE *v249;
  char v250;
  char *v251;
  char *v252;
  char v253;
  unsigned __int16 v254;
  unsigned int v255;
  NSObject *v256;
  NSObject *v257;
  uint64_t v258;
  void (*v259)(uint64_t, void **, size_t, uint64_t, uint64_t);
  NSObject *v260;
  int v261;
  unsigned int v262;
  unsigned __int16 *v263;
  unsigned __int16 *v264;
  int v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int v268;
  int v269;
  _BYTE *v270;
  _DWORD buf[10];

  v4 = qword_10097CC20;
  if (!qword_10097CC20)
  {
LABEL_5:
    if (!sub_10005549C())
      return;
    sub_100054530("No connection associated with handle (%d)", a1);
    v8 = sub_1000544A0(0x53u);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      return;
LABEL_539:
    sub_1006CE7A4();
    return;
  }
  v7 = 0;
  while (*(_DWORD *)(qword_10097CC20 + v7 + 16) != a1)
  {
    v7 += 48;
    if (v7 == 240)
      goto LABEL_5;
  }
  if (!a2)
    goto LABEL_575;
  if (a3 == 1)
  {
    v9 = 0;
LABEL_35:
    if (sub_10005549C())
    {
      sub_100054530("Unknown AACP opcode: 0x%04x (AAP len %u)", v9, a3 + 4);
      v28 = sub_1000544A0(0x53u);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        buf[0] = 136446210;
        *(_QWORD *)&buf[1] = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)buf, 0xCu);
      }
    }
    return;
  }
  if (!a3)
LABEL_575:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
  v9 = *a2;
  v10 = 1;
  switch(*a2)
  {
    case 2u:
      if (a3 < 3)
      {
        v33 = a2;
        v34 = 0;
        v32 = 1;
        v35 = 2;
      }
      else
      {
        v32 = 0;
        v33 = a2;
        v34 = *((unsigned __int8 *)a2 + 2);
        v35 = 3;
      }
      v174 = (char *)sub_100114588(5 * v34);
      if (v174)
      {
        v270 = v174;
        if (!v34)
        {
LABEL_370:
          v180 = *(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)(v4 + v7 + 32) + 32);
          if (v180)
            v180(v4 + v7 + 9, v34, v270);
          goto LABEL_372;
        }
        v175 = v174 + 1;
        v176 = v34;
        while (!v32)
        {
          if (a3 <= (unsigned __int16)v35)
            goto LABEL_273;
          v32 = 0;
          *((_BYTE *)v175 - 1) = *((_BYTE *)v33 + (unsigned __int16)v35);
          v177 = 1;
          ++v35;
LABEL_274:
          v178 = *((unsigned __int8 *)v175 - 1);
          if (v178 <= 0x4F)
          {
            switch(*((_BYTE *)v175 - 1))
            {
              case 1:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 423;
                goto LABEL_367;
              case 2:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 426;
                goto LABEL_367;
              case 3:
                if ((v177 & 1) != 0)
                  goto LABEL_348;
                v179 = 479;
                goto LABEL_367;
              case 4:
                if ((v177 & 1) != 0)
                  goto LABEL_348;
                v179 = 429;
                goto LABEL_367;
              case 5:
                if ((v177 & 1) != 0)
                  goto LABEL_348;
                v179 = 483;
                goto LABEL_367;
              case 6:
                if ((v177 & 1) != 0)
                  goto LABEL_348;
                v179 = 487;
                goto LABEL_367;
              case 7:
                if ((v177 & 1) != 0)
                  goto LABEL_348;
                v179 = 490;
                goto LABEL_367;
              case 8:
                if ((v177 & 1) != 0)
                  goto LABEL_348;
                v179 = 432;
                goto LABEL_367;
              case 9:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 435;
                goto LABEL_367;
              case 0xA:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 438;
                goto LABEL_367;
              case 0xB:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 441;
                goto LABEL_367;
              case 0xC:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 444;
                goto LABEL_367;
              case 0xD:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 448;
                goto LABEL_367;
              case 0xF:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 498;
                goto LABEL_367;
              case 0x10:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 451;
                goto LABEL_367;
              case 0x11:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 454;
                goto LABEL_367;
              case 0x12:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 457;
                goto LABEL_367;
              case 0x13:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 553;
                goto LABEL_367;
              case 0x14:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 460;
                goto LABEL_367;
              case 0x15:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 539;
                goto LABEL_367;
              case 0x16:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 542;
                goto LABEL_367;
              case 0x17:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 545;
                goto LABEL_367;
              case 0x18:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 557;
                goto LABEL_367;
              case 0x20:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 463;
                goto LABEL_367;
              case 0x30:
                if ((v177 & 1) == 0)
                {
                  v179 = 495;
                  goto LABEL_367;
                }
LABEL_348:
                if ((int)(a3 - 3) <= (unsigned __int16)v35)
                  goto LABEL_368;
                v32 = 0;
                *v175 = *(_DWORD *)((char *)v33 + (unsigned __int16)v35);
                v35 += 4;
                break;
              case 0x40:
                if ((v177 & 1) != 0)
                  goto LABEL_363;
                v179 = 466;
                goto LABEL_367;
              default:
                goto LABEL_369;
            }
            goto LABEL_369;
          }
          if (*((unsigned __int8 *)v175 - 1) > 0xAFu)
          {
            if (*((unsigned __int8 *)v175 - 1) <= 0xCFu)
            {
              if (v178 == 176)
              {
                if ((v177 & 1) == 0)
                {
                  v179 = 508;
                  goto LABEL_367;
                }
              }
              else
              {
                if (v178 != 192)
                  goto LABEL_369;
                if ((v177 & 1) == 0)
                {
                  v179 = 525;
                  goto LABEL_367;
                }
              }
            }
            else
            {
              switch(v178)
              {
                case 0xD0u:
                  if ((v177 & 1) == 0)
                  {
                    v179 = 529;
                    goto LABEL_367;
                  }
                  break;
                case 0xE0u:
                  if ((v177 & 1) == 0)
                  {
                    v179 = 533;
                    goto LABEL_367;
                  }
                  break;
                case 0xF0u:
                  if ((v177 & 1) == 0)
                  {
                    v179 = 536;
                    goto LABEL_367;
                  }
                  break;
                default:
                  goto LABEL_369;
              }
            }
          }
          else if (*((unsigned __int8 *)v175 - 1) <= 0x7Fu)
          {
            if (v178 == 80)
            {
              if ((v177 & 1) == 0)
              {
                v179 = 469;
                goto LABEL_367;
              }
            }
            else
            {
              if (v178 != 96)
                goto LABEL_369;
              if ((v177 & 1) == 0)
              {
                v179 = 472;
                goto LABEL_367;
              }
            }
          }
          else
          {
            switch(v178)
            {
              case 0x80u:
                if ((v177 & 1) == 0)
                {
                  v179 = 475;
                  goto LABEL_367;
                }
                break;
              case 0x90u:
                if ((v177 & 1) == 0)
                {
                  v179 = 502;
                  goto LABEL_367;
                }
                break;
              case 0xA0u:
                if ((v177 & 1) == 0)
                {
                  v179 = 505;
LABEL_367:
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", v179, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
LABEL_368:
                  v32 = 1;
                  goto LABEL_369;
                }
                break;
              default:
                goto LABEL_369;
            }
          }
LABEL_363:
          if (a3 <= (unsigned __int16)v35)
            goto LABEL_368;
          v32 = 0;
          *(_BYTE *)v175 = *((_BYTE *)v33 + (unsigned __int16)v35++);
LABEL_369:
          v175 = (_DWORD *)((char *)v175 + 5);
          if (!--v176)
            goto LABEL_370;
        }
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 420, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
LABEL_273:
        v177 = 0;
        v32 = 1;
        goto LABEL_274;
      }
      if (!sub_10005549C())
        return;
      sub_100054530("AACP_MSG_CAPABILITIES_RESP Could not allocate %d bytes", 5 * v34);
      v211 = sub_1000544A0(0x53u);
      if (!os_log_type_enabled(v211, OS_LOG_TYPE_ERROR))
        return;
      goto LABEL_539;
    case 4u:
      if (a3 >= 3 && (v36 = *((unsigned __int8 *)a2 + 2), *((_BYTE *)a2 + 2)))
      {
        v37 = 5 * v36;
        v270 = sub_100114588(5 * v36);
        if (v270)
        {
          v266 = v36;
          v38 = a3;
          v39 = 0;
          v40 = 0;
          v41 = 3;
          while (!v40)
          {
            if (v38 <= (unsigned __int16)v41)
              goto LABEL_57;
            v42 = (unsigned __int16)v41 + 1;
            v270[v39] = *((_BYTE *)a2 + (unsigned __int16)v41);
            if (v38 <= (unsigned __int16)(v41 + 1))
              goto LABEL_58;
            v43 = (unsigned __int16)v41 + 2;
            v270[v39 + 1] = *((_BYTE *)a2 + v42);
            v42 = v43;
            if (v38 <= (unsigned __int16)v43)
              goto LABEL_59;
            v44 = (unsigned __int16)v41 + 3;
            v270[v39 + 2] = *((_BYTE *)a2 + v43);
            v42 = v44;
            if (v38 > (unsigned __int16)v44)
            {
              v42 = (unsigned __int16)v41 + 4;
              v270[v39 + 3] = *((_BYTE *)a2 + v44);
              if (v38 <= (unsigned __int16)v42)
              {
                v40 = 1;
              }
              else
              {
                v40 = 0;
                v270[v39 + 4] = *((_BYTE *)a2 + v42);
                v42 = (v41 + 5);
              }
              goto LABEL_61;
            }
LABEL_60:
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 591, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
            v40 = 1;
LABEL_61:
            v39 += 5;
            v41 = v42;
            if (v37 == v39)
            {
              v241 = *(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)(v4 + v7 + 32) + 40);
              if (v241)
                v241(v4 + v7 + 9, v266, v270);
LABEL_372:
              sub_100053298(v270);
              return;
            }
          }
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 587, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
LABEL_57:
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 588, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
          v42 = v41;
LABEL_58:
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 589, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
LABEL_59:
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 590, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
          goto LABEL_60;
        }
        if (!sub_10005549C())
          return;
        sub_100054530("BATT_INFO_MSG_BATT_INFO Could not allocate %d bytes", 5 * v36);
        v256 = sub_1000544A0(0x53u);
        if (!os_log_type_enabled(v256, OS_LOG_TYPE_ERROR))
          return;
      }
      else
      {
        if (!sub_10005549C())
          return;
        sub_100054530("BATT_INFO_MSG_BATT_INFO: count = 0");
        v171 = sub_1000544A0(0x53u);
        if (!os_log_type_enabled(v171, OS_LOG_TYPE_ERROR))
          return;
      }
      goto LABEL_539;
    case 6u:
      LOWORD(buf[0]) = 0;
      if ((a3 & 0xFFFE) != 2)
        LOWORD(buf[0]) = a2[1];
      v45 = qword_10097CC20 + v7;
      v46 = *(void (**)(uint64_t, _DWORD *))(*(_QWORD *)(qword_10097CC20 + v7 + 32) + 48);
      if (!v46)
        return;
      goto LABEL_377;
    case 8u:
      buf[0] = 0;
      if (a3 <= 2)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 614, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
      }
      else
      {
        LOBYTE(buf[0]) = *((_BYTE *)a2 + 2);
        if (a3 != 3)
        {
          BYTE1(buf[0]) = *((_BYTE *)a2 + 3);
          if (a3 > 4)
          {
            BYTE2(buf[0]) = *((_BYTE *)a2 + 4);
            if (a3 != 5)
              HIBYTE(buf[0]) = *((_BYTE *)a2 + 5);
LABEL_376:
            v45 = v4 + v7;
            v46 = *(void (**)(uint64_t, _DWORD *))(*(_QWORD *)(v4 + v7 + 32) + 56);
            if (v46)
LABEL_377:
              v46(v45 + 9, buf);
            return;
          }
LABEL_375:
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 616, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
          goto LABEL_376;
        }
      }
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 615, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
      goto LABEL_375;
    case 9u:
      if (a3 <= 2)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      if (a3 <= 6)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v47 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(qword_10097CC20 + v7 + 32) + 160);
      if (v47)
        v47(qword_10097CC20 + v7 + 9, *((unsigned __int8 *)a2 + 2), *(unsigned int *)((char *)a2 + 3));
      return;
    case 0xBu:
      if (a3 <= 2)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      if (a3 == 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v48 = *((unsigned __int8 *)a2 + 2);
      v264 = a2;
      v49 = *((unsigned __int8 *)a2 + 3);
      if (v49)
      {
        v267 = v48;
        v50 = (void **)sub_100114588(6 * v49);
        v51 = 0;
        v52 = 4;
        while (1)
        {
          v53 = v52;
          v54 = -6 * v51;
          v55 = 1;
          while (1)
          {
            if ((v55 & 1) == 0)
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 632, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
              goto LABEL_86;
            }
            if ((int)(a3 - 5) > v53)
              break;
LABEL_86:
            v55 = 0;
            ++v51;
            v54 -= 6;
            if (v49 == v51)
            {
              if (!sub_10005549C())
                goto LABEL_507;
              sub_100054530("AACP_MSG_DEV_LIST error initializing device list");
              v173 = sub_1000544A0(0x53u);
              if (!os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
                goto LABEL_507;
              goto LABEL_574;
            }
          }
          sub_10004C878((uint64_t)v50 - v54, (uint64_t)v264 + v53, 6uLL);
          v52 = v53 + 6;
          if (v49 - 1 == v51++)
          {
            v48 = v267;
            goto LABEL_472;
          }
        }
      }
      v50 = 0;
LABEL_472:
      v212 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)(v4 + v7 + 32) + 64);
      if (v212)
        v212(v4 + v7 + 9, v48, v49, v50);
      if (!v50)
        return;
      goto LABEL_475;
    case 0xCu:
      LOWORD(buf[1]) = 0;
      buf[0] = 0;
      if (a3 <= 7)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      sub_10004C878((uint64_t)buf, (uint64_t)(a2 + 1), 6uLL);
      if (a3 == 8)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 654, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
        v57 = 0;
      }
      else
      {
        v57 = *((unsigned __int8 *)a2 + 8);
        if (a3 >= 0xA)
        {
          v195 = *((unsigned __int8 *)a2 + 9);
          goto LABEL_431;
        }
      }
      v195 = 0;
LABEL_431:
      v196 = *(void (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 + v7 + 32) + 72);
      if (v196)
        v196(v4 + v7 + 9, buf, v57, v195);
      return;
    case 0xEu:
      LOWORD(buf[1]) = 0;
      buf[0] = 0;
      if (a3 <= 7)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      sub_10004C878((uint64_t)buf, (uint64_t)(a2 + 1), 6uLL);
      if (a3 == 8)
        v58 = 0;
      else
        v58 = *((unsigned __int8 *)a2 + 8);
      v63 = v4 + v7;
      v64 = *(void (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)(v4 + v7 + 32) + 80);
      if (v64)
        goto LABEL_435;
      return;
    case 0x11u:
      LOWORD(buf[1]) = 0;
      buf[0] = 0;
      if (a3 <= 7)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      sub_10004C878((uint64_t)buf, (uint64_t)(a2 + 1), 6uLL);
      if (a3 <= 9)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v59 = a2;
      v60 = a2[4];
      v61 = (void **)sub_100114588(v60);
      v50 = v61;
      if (!v61 || !(_DWORD)v60)
        goto LABEL_504;
      if ((int)(a3 - 10) < (int)v60)
      {
        if (sub_10005549C())
        {
          sub_100054530("AACP_MSG_RELAY_MSG_INDICATION, error initializing relayData");
          v62 = sub_1000544A0(0x53u);
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        goto LABEL_507;
      }
      v225 = (char *)(v59 + 5);
      v226 = (char *)v61;
      do
      {
        v227 = *v225++;
        *v226++ = v227;
      }
      while (v226 < (char *)v61 + v60);
LABEL_504:
      v228 = *(void (**)(uint64_t, _DWORD *, size_t, void **))(*(_QWORD *)(v4 + v7 + 32) + 88);
      if (v228)
        v228(v4 + v7 + 9, buf, v60, v61);
      goto LABEL_506;
    case 0x13u:
      LOWORD(buf[1]) = 0;
      buf[0] = 0;
      if (a3 <= 7)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      sub_10004C878((uint64_t)buf, (uint64_t)(a2 + 1), 6uLL);
      if (a3 == 8)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v63 = v4 + v7;
      v64 = *(void (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)(v4 + v7 + 32) + 96);
      if (!v64)
        return;
      goto LABEL_115;
    case 0x15u:
      LOWORD(buf[1]) = 0;
      buf[0] = 0;
      if (a3 <= 7)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      sub_10004C878((uint64_t)buf, (uint64_t)(a2 + 1), 6uLL);
      v45 = v4 + v7;
      v46 = *(void (**)(uint64_t, _DWORD *))(*(_QWORD *)(v4 + v7 + 32) + 104);
      if (!v46)
        return;
      goto LABEL_377;
    case 0x16u:
      LOWORD(buf[1]) = 0;
      buf[0] = 0;
      if (a3 <= 7)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      sub_10004C878((uint64_t)buf, (uint64_t)(a2 + 1), 6uLL);
      if (a3 == 8)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v63 = v4 + v7;
      v64 = *(void (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)(v4 + v7 + 32) + 112);
      if (v64)
      {
LABEL_115:
        v58 = *((unsigned __int8 *)a2 + 8);
LABEL_435:
        v64(v63 + 9, buf, v58);
      }
      return;
    case 0x17u:
      if (*(_DWORD *)(qword_10097CC20 + v7 + 24) > 0x10001u)
      {
        if (a3 >= 6)
        {
          v65 = *(unsigned int *)(a2 + 1);
          v66 = 3;
LABEL_380:
          if ((int)(a3 - v66 * 2) > 1)
          {
            v69 = a2[v66];
            v183 = v66 * 2 + 2;
            v184 = (char *)sub_100114588(v69);
            v71 = v184;
            if ((int)(a3 - v183) >= (int)v69 && (_DWORD)v69)
            {
              v185 = 0;
              do
              {
                v184[v185] = *((_BYTE *)a2 + v183 + v185);
                ++v185;
              }
              while (&v184[v185] < &v184[v69]);
            }
LABEL_426:
            v193 = v4 + v7;
            v194 = *(void (**)(uint64_t, uint64_t, size_t, void *))(*(_QWORD *)(v4 + v7 + 32) + 120);
            if (v194)
LABEL_438:
              v194(v193 + 9, v65, v69, v71);
LABEL_439:
            sub_100053298(v71);
            return;
          }
LABEL_425:
          v71 = sub_100114588(0);
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 742, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
          v69 = 0;
          goto LABEL_426;
        }
      }
      else if (a3 >= 4)
      {
        v65 = a2[1];
        v66 = 2;
        goto LABEL_380;
      }
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 740, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
      v65 = 0;
      goto LABEL_425;
    case 0x1Cu:
      if (a3 < 6)
        v67 = 0;
      else
        v67 = *(unsigned int *)(a2 + 1);
      v138 = qword_10097CC20 + v7;
      v139 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(qword_10097CC20 + v7 + 32) + 152);
      if (v139)
        goto LABEL_388;
      return;
    case 0x1Du:
      if (a3 <= 2)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v65 = *((unsigned __int8 *)a2 + 2);
      if (a3 <= 4)
      {
        v71 = sub_100114588(0);
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 765, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
        v69 = 0;
      }
      else
      {
        v69 = *(unsigned __int16 *)((char *)a2 + 3);
        v70 = (char *)sub_100114588(v69);
        v71 = v70;
        if ((int)(a3 - 5) >= (int)v69 && (_DWORD)v69)
        {
          v72 = 0;
          do
          {
            v70[v72] = *((_BYTE *)a2 + v72 + 5);
            ++v72;
          }
          while (&v70[v72] < &v70[v69]);
        }
      }
      v193 = v4 + v7;
      v194 = *(void (**)(uint64_t, uint64_t, size_t, void *))(*(_QWORD *)(v4 + v7 + 32) + 168);
      if (v194)
        goto LABEL_438;
      goto LABEL_439;
    case 0x1Eu:
      if (a3 <= 3)
      {
        if (!sub_10005549C())
          return;
        sub_100054530("AACP_MSG_EA_SESSION_DOWNLOAD, invalid PDU");
        v186 = sub_1000544A0(0x53u);
        if (!os_log_type_enabled(v186, OS_LOG_TYPE_ERROR))
          return;
        goto LABEL_539;
      }
      v73 = *((char *)a2 + 3);
      if ((v73 & 0x80000000) != 0)
      {
        if (!sub_10005549C())
          return;
        sub_100054530("AACP_MSG_EA_SESSION_DOWNLOAD received unsupported control message");
        v242 = sub_1000544A0(0x53u);
        if (!os_log_type_enabled(v242, OS_LOG_TYPE_ERROR))
          return;
        goto LABEL_539;
      }
      v76 = (*((unsigned __int8 *)a2 + 2) | (unsigned __int16)(*((unsigned __int8 *)a2 + 3) << 8)) & 0x3FF;
      v77 = (void **)sub_100052DC0(v76);
      v50 = v77;
      if ((int)(a3 - 4) >= (int)v76)
      {
        if ((_DWORD)v76)
        {
          v243 = (char *)(a2 + 2);
          v244 = (char *)v77;
          do
          {
            v245 = *v243++;
            *v244++ = v245;
          }
          while (v244 < (char *)v77 + v76);
        }
        v134 = *(void (**)(uint64_t, uint64_t, size_t, void **))(*(_QWORD *)(v4 + v7 + 32) + 176);
        if (v134)
        {
          v136 = (v73 >> 2) & 0x1F;
          v135 = v4 + v7 + 9;
          goto LABEL_399;
        }
        goto LABEL_475;
      }
      if (!sub_10005549C())
        goto LABEL_507;
      sub_100054530("AACP_MSG_EA_SESSION_DOWNLOAD, invalid PDU");
      v78 = sub_1000544A0(0x53u);
      if (!os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
        goto LABEL_507;
      goto LABEL_574;
    case 0x20u:
      if (a3 <= 3)
      {
        v50 = (void **)sub_100114588(0);
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 809, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
        v80 = 0;
      }
      else
      {
        v80 = a2[1];
        v81 = (void **)sub_100114588(v80);
        v50 = v81;
        if ((int)(a3 - 4) >= (int)v80 && (_DWORD)v80)
        {
          v82 = 0;
          do
          {
            *((_BYTE *)v81 + v82) = *((_BYTE *)a2 + v82 + 4);
            ++v82;
          }
          while ((char *)v81 + v82 < (char *)v81 + v80);
        }
      }
      v187 = *(void (**)(uint64_t, size_t, void **))(*(_QWORD *)(v4 + v7 + 32) + 184);
      if (v187)
        v187(v4 + v7 + 9, v80, v50);
      goto LABEL_475;
    case 0x21u:
      if (a3 <= 2)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      if (a3 == 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v83 = *((unsigned __int8 *)a2 + 2);
      v84 = *((unsigned __int8 *)a2 + 3);
      if (a3 < 6)
      {
        v85 = 0;
      }
      else
      {
        v85 = a2[2];
        if (a2[2])
        {
          v87 = (char *)sub_100114588(a2[2]);
          v88 = v87;
          if ((int)(a3 - 6) >= (int)v85)
          {
            v89 = 0;
            do
            {
              v87[v89] = *((_BYTE *)a2 + v89 + 6);
              ++v89;
            }
            while (&v87[v89] < &v87[v85]);
          }
LABEL_442:
          v197 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)(v4 + v7 + 32) + 192);
          if (v197)
            v197(v4 + v7 + 9, v83, v84, v85, v88);
          if (v88)
            sub_100053298(v88);
          return;
        }
      }
      v88 = 0;
      goto LABEL_442;
    case 0x23u:
      memset((char *)&buf[2] + 2, 0, 20);
      if (a3 <= 2)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 851, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
      }
      else
      {
        v91 = *((unsigned __int8 *)a2 + 2);
        LOBYTE(buf[0]) = *((_BYTE *)a2 + 2);
        if (a3 > 4)
        {
          *(_WORD *)((char *)buf + 1) = *(unsigned __int16 *)((char *)a2 + 3);
          if (a3 > 8)
          {
            *(_DWORD *)((char *)buf + 3) = *(_DWORD *)((char *)a2 + 5);
            if (a3 > 0xA)
            {
              *(_WORD *)((char *)&buf[1] + 3) = *(unsigned __int16 *)((char *)a2 + 9);
              if (a3 != 11)
              {
                BYTE1(buf[2]) = *((_BYTE *)a2 + 11);
                if (a3 <= 0xD)
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 860, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
                  v92 = 0;
                }
                else
                {
                  v92 = a2[6];
                  *(_QWORD *)((char *)&buf[2] + 2) = v92;
                  if (a3 != 14)
                  {
                    v93 = *((unsigned __int8 *)a2 + 14);
                    v95 = v93 + 1;
                    v96 = (void **)sub_100114588(v93 + 1);
                    v50 = v96;
                    *(_QWORD *)((char *)&buf[5] + 2) = v96;
                    if ((int)(a3 - 15) > (int)v93)
                    {
                      v97 = 0;
                      do
                      {
                        *((_BYTE *)v96 + v97) = *((_BYTE *)a2 + v97 + 15);
                        ++v97;
                      }
                      while ((char *)v96 + v97 < (char *)v96 + v95);
                      if (v91 <= 1)
                      {
LABEL_466:
                        v210 = *(void (**)(uint64_t, _DWORD *))(*(_QWORD *)(v4 + v7 + 32) + 200);
                        if (v210)
                        {
                          v210(v4 + v7 + 9, buf);
                          v50 = *(void ***)((char *)&buf[5] + 2);
                        }
LABEL_506:
                        if (!v50)
                          return;
LABEL_507:
                        v209 = v50;
                        goto LABEL_508;
                      }
                      v98 = v95 + 15;
                      if ((int)(a3 - v98) > 1)
                      {
                        v99 = ((unint64_t)*((unsigned __int8 *)a2 + v98) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + v98 + 1) << 24);
                        if ((int)(a3 - (v93 + 18)) > 3)
                        {
                          v100 = v95 + 21;
                          *(_QWORD *)((char *)&buf[2] + 2) = v92 | ((unint64_t)*(unsigned int *)((char *)a2 + v95 + 17) << 32) | v99;
                          if ((int)(a3 - v100) >= 4)
                            *(_DWORD *)((char *)&buf[4] + 2) = *(_DWORD *)((char *)a2 + v100);
                          goto LABEL_466;
                        }
                        goto LABEL_465;
                      }
LABEL_464:
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 869, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
                      v99 = 0;
LABEL_465:
                      *(_QWORD *)((char *)&buf[2] + 2) = v92 | v99;
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 872, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
                      goto LABEL_466;
                    }
LABEL_462:
                    if (v91 <= 1)
                      goto LABEL_466;
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 868, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
                    goto LABEL_464;
                  }
                }
                v50 = (void **)sub_100114588(1uLL);
                *(_QWORD *)((char *)&buf[5] + 2) = v50;
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 862, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
                goto LABEL_462;
              }
LABEL_597:
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
            }
LABEL_596:
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 854, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
            goto LABEL_597;
          }
LABEL_595:
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 853, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
          goto LABEL_596;
        }
      }
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 852, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
      goto LABEL_595;
    case 0x24u:
      if (a3 <= 3)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1136, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
        v101 = 0;
      }
      else
      {
        v101 = a2[1];
        if (a3 > 5)
        {
          v76 = a2[2];
          v104 = (void **)sub_100114588(v76);
          v50 = v104;
          if ((int)(a3 - 6) >= (int)v76 && (_DWORD)v76)
          {
            v105 = 0;
            do
            {
              *((_BYTE *)v104 + v105) = *((_BYTE *)a2 + v105 + 6);
              ++v105;
            }
            while ((char *)v104 + v105 < (char *)v104 + v76);
          }
LABEL_397:
          v134 = *(void (**)(uint64_t, uint64_t, size_t, void **))(*(_QWORD *)(v4 + v7 + 32) + 208);
          if (v134)
          {
            v135 = v4 + v7 + 9;
            v136 = v101;
LABEL_399:
            v137 = v76;
LABEL_400:
            v134(v135, v136, v137, v50);
          }
LABEL_475:
          sub_100053298(v50);
          return;
        }
      }
      v50 = (void **)sub_100114588(0);
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1138, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
      v76 = 0;
      goto LABEL_397;
    case 0x27u:
      if (a3 <= 2)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      if (a3 == 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      if (a3 <= 4)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      if (a3 == 5)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v106 = *((unsigned __int8 *)a2 + 2);
      v107 = *((unsigned __int8 *)a2 + 3);
      v108 = *((unsigned __int8 *)a2 + 4);
      v109 = *((unsigned __int8 *)a2 + 5);
      v110 = (void **)sub_100114588(v109 + 1);
      v50 = v110;
      if ((int)(a3 - 6) < (int)v109)
      {
        if (!sub_10005549C())
          goto LABEL_507;
        sub_100054530("AACP_MSG_GET_CERTIFICATES_RESP error reading serialNumber");
        v111 = sub_1000544A0(0x53u);
        if (!os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
          goto LABEL_507;
        goto LABEL_574;
      }
      if ((_DWORD)v109)
      {
        v202 = (char *)(a2 + 3);
        v203 = (char *)v110;
        do
        {
          v204 = *v202++;
          *v203++ = v204;
        }
        while (v203 < (char *)v110 + v109);
      }
      v268 = v108;
      if ((int)(a3 - (v109 + 6)) <= 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v205 = a2;
      v206 = *(unsigned __int16 *)((char *)a2 + v109 + 6);
      v207 = (char *)sub_100114588(v206);
      v71 = v207;
      if ((int)(a3 - (v109 + 8)) < (int)v206)
      {
        if (sub_10005549C())
        {
          sub_100054530("AACP_MSG_GET_CERTIFICATES_RESP error reading certificateData");
          v208 = sub_1000544A0(0x53u);
          if (os_log_type_enabled(v208, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        sub_100053298(v50);
        v209 = (void **)v71;
        goto LABEL_508;
      }
      if ((_DWORD)v206)
      {
        v229 = (char *)v205 + v109 + 8;
        v230 = v207;
        do
        {
          v231 = *v229++;
          *v230++ = v231;
        }
        while (v230 < &v207[v206]);
      }
      v232 = *(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, void **, size_t, char *))(*(_QWORD *)(v4 + v7 + 32) + 216);
      if (v232)
        v232(v4 + v7 + 9, v106, v107, v268, v109, v50, v206, v207);
      sub_100053298(v50);
      goto LABEL_439;
    case 0x28u:
      if (a3 <= 2)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      if (a3 <= 4)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v112 = *((unsigned __int8 *)a2 + 2);
      v114 = *(unsigned __int16 *)((char *)a2 + 3);
      v115 = (void **)sub_100114588(v114);
      v50 = v115;
      if ((int)(a3 - 5) >= (int)v114)
      {
        if ((_DWORD)v114)
        {
          v198 = (char *)a2 + 5;
          v199 = (char *)v115;
          do
          {
            v200 = *v198++;
            *v199++ = v200;
          }
          while (v199 < (char *)v115 + v114);
        }
        v201 = *(void (**)(uint64_t, void **, size_t, uint64_t))(*(_QWORD *)(v4 + v7 + 32) + 224);
        if (v201)
          v201(v4 + v7 + 9, v115, v114, v112);
        goto LABEL_475;
      }
      if (!sub_10005549C())
        goto LABEL_507;
      sub_100054530("AACP_MSG_GYRO_INFO, invalid gyroInfoData");
      v116 = sub_1000544A0(0x53u);
      if (!os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
        goto LABEL_507;
      goto LABEL_574;
    case 0x2Bu:
      if (a3 <= 2)
      {
        v119 = a2;
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1061, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
        v117 = 0;
        v188 = 2;
      }
      else
      {
        v117 = *((unsigned __int8 *)a2 + 2);
        if (a3 > 4)
        {
          v119 = a2;
          v120 = *(unsigned __int16 *)((char *)a2 + 3);
          if (a3 > 8)
          {
            v121 = *(unsigned int *)((char *)a2 + 5);
            if (a3 > 0xC)
            {
              v121 |= (unint64_t)*(unsigned int *)((char *)a2 + 9) << 32;
              v122 = (char *)malloc_type_calloc(*(unsigned __int16 *)((char *)a2 + 3), 1uLL, 0x100004077774924uLL);
              v123 = (char *)v119 + 13;
              v124 = &v122[v120];
              v125 = a3 - 13;
              goto LABEL_491;
            }
            v188 = 9;
LABEL_490:
            v122 = (char *)malloc_type_calloc(v120, 1uLL, 0x100004077774924uLL);
            v123 = (char *)v119 + v188;
            v124 = &v122[v120];
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1070, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
            v125 = 0;
LABEL_491:
            if (v125 >= (int)v120 && (_DWORD)v120)
            {
              v215 = v122;
              do
              {
                v216 = *v123++;
                *v215++ = v216;
              }
              while (v215 < v124);
            }
            v217 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)(v4 + v7 + 32) + 232);
            if (v217)
              v217(v4 + v7 + 9, v117, v121, v120, v122);
            free(v122);
            return;
          }
          v188 = 5;
LABEL_489:
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1066, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
          v121 = 0;
          goto LABEL_490;
        }
        v119 = a2;
        v188 = 3;
      }
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1065, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
      v120 = 0;
      goto LABEL_489;
    case 0x2Cu:
      if (a3 <= 5)
      {
        if (!sub_10005549C())
          return;
        sub_100054530("Invalid length=%d for GAPA message", a3);
        v126 = sub_1000544A0(0x53u);
        if (!os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
          return;
        goto LABEL_539;
      }
      if ((a3 & 0xFFFE) == 4)
      {
        v50 = (void **)sub_100114588(0);
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 976, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
LABEL_499:
        if (!sub_10005549C())
          goto LABEL_507;
        sub_100054530("AACP_MSG_GAPA, invalid gapaData");
        v224 = sub_1000544A0(0x53u);
        if (!os_log_type_enabled(v224, OS_LOG_TYPE_ERROR))
          goto LABEL_507;
        goto LABEL_574;
      }
      v218 = *((unsigned __int8 *)a2 + 2);
      v220 = *((unsigned __int8 *)a2 + 3);
      v222 = a2[2];
      v223 = (void **)sub_100114588(v222);
      v50 = v223;
      if (a3 - 6 < v222)
        goto LABEL_499;
      if ((_DWORD)v222)
      {
        v251 = (char *)(a2 + 3);
        v252 = (char *)v223;
        do
        {
          v253 = *v251++;
          *v252++ = v253;
        }
        while (v252 < (char *)v223 + v222);
        v254 = v222 + 6;
        v255 = v222 + 7;
      }
      else
      {
        v255 = 7;
        v254 = 6;
      }
      if ((_DWORD)v218 != 2)
        goto LABEL_568;
      if (v255 <= a3)
      {
        if (a3 > v254)
        {
          v258 = *((unsigned __int8 *)a2 + v254);
LABEL_569:
          if (v220 == 2)
          {
            v259 = *(void (**)(uint64_t, void **, size_t, uint64_t, uint64_t))(*(_QWORD *)(v4 + v7 + 32) + 248);
            if (v259)
              v259(v4 + v7 + 9, v50, v222, v218, v258);
            goto LABEL_507;
          }
          if (!sub_10005549C())
            goto LABEL_507;
          sub_100054530("Unknown GAPA message type %d", v220);
          v260 = sub_1000544A0(0x53u);
          if (!os_log_type_enabled(v260, OS_LOG_TYPE_ERROR))
            goto LABEL_507;
LABEL_574:
          sub_1006CE7A4();
          goto LABEL_507;
        }
      }
      else if (sub_10005549C())
      {
        sub_100054530("Invalid length=%d for GAPA version=%d message", a3, 2);
        v257 = sub_1000544A0(0x53u);
        if (os_log_type_enabled(v257, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
LABEL_568:
      v258 = 0;
      goto LABEL_569;
    case 0x2Eu:
      if (a3 <= 2)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1087, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
      }
      else if (a3 != 3)
      {
        if (a3 > 4)
        {
          v127 = *((unsigned __int8 *)a2 + 3);
          v129 = *((unsigned __int8 *)a2 + 4);
          v130 = (void **)sub_100114588(8 * v129);
          v50 = v130;
          if ((int)(a3 - 5) >= 8 * (int)v129)
          {
            if ((_DWORD)v129)
            {
              v131 = (char *)a2 + 5;
              v132 = (char *)v130;
              do
              {
                v133 = *v131++;
                *v132++ = v133;
              }
              while (v132 < (char *)&v130[v129]);
            }
            v134 = *(void (**)(uint64_t, uint64_t, size_t, void **))(*(_QWORD *)(v4 + v7 + 32) + 240);
            if (v134)
            {
              v135 = v4 + v7 + 9;
              v136 = v127;
              v137 = v129;
              goto LABEL_400;
            }
            goto LABEL_475;
          }
LABEL_407:
          if (!sub_10005549C())
            goto LABEL_507;
          sub_100054530("AACP_MSG_TIPI_TABLE, error initializing tipiTable");
          v189 = sub_1000544A0(0x53u);
          if (!os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
            goto LABEL_507;
          goto LABEL_574;
        }
LABEL_406:
        v50 = (void **)sub_100114588(0);
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1092, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
        goto LABEL_407;
      }
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1088, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
      goto LABEL_406;
    case 0x30u:
      if (a3 <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v138 = qword_10097CC20 + v7;
      v139 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(qword_10097CC20 + v7 + 32) + 128);
      if (!v139)
        return;
      v67 = a2[1];
LABEL_388:
      v139(v138 + 9, v67);
      return;
    case 0x31u:
    case 0x32u:
      if (a3 <= 2)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v11 = *((unsigned __int8 *)a2 + 2);
      v12 = (void **)sub_100114588(16 * v11);
      if (!v11)
      {
        v29 = *(void (**)(uint64_t, uint64_t, void **, BOOL))(*(_QWORD *)(v4 + v7 + 32) + 136);
        if (!v29)
          goto LABEL_486;
        goto LABEL_482;
      }
      v261 = v9;
      v262 = a3;
      v263 = a2;
      v13 = 0;
      v14 = 0;
      v265 = a3 - 1;
      v15 = 3;
      break;
    case 0x40u:
      if (a3 <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      if (a3 <= 5)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      if (a3 <= 7)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v140 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(qword_10097CC20 + v7 + 32) + 144);
      if (v140 && a2[1])
        v140(qword_10097CC20 + v7 + 9, a2[1], a2[2], a2[3]);
      return;
    case 0x47u:
      sub_1001124FC((unsigned __int8 *)(qword_10097CC20 + v7 + 9));
      return;
    case 0x49u:
      sub_100112B30(qword_10097CC20 + v7 + 9);
      return;
    case 0x4Bu:
      if (!*(_QWORD *)(*(_QWORD *)(qword_10097CC20 + v7 + 32) + 256))
        return;
      if (a3 >= 4)
      {
        v141 = a2[1];
        if (v141 > 1)
        {
          v164 = malloc_type_malloc(a2[1], 0x3418A0C6uLL);
          if (!v164)
            sub_100253460();
          if ((int)(a3 - 4) >= (int)v141)
          {
            v248 = (char *)(a2 + 2);
            v249 = v164;
            do
            {
              v250 = *v248++;
              *v249++ = v250;
            }
            while (v249 < &v164[v141]);
          }
          (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v4 + v7 + 32) + 256))(v4 + v7 + 9, v164, v141);
          goto LABEL_423;
        }
      }
      if (!sub_10005549C())
        return;
      sub_100054530("CD message data length cannot be less than 2 bytes");
      v142 = sub_1000544A0(0x53u);
      if (!os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
        return;
      goto LABEL_539;
    case 0x4Cu:
      if (a3 <= 3)
      {
        v146 = malloc_type_malloc(0, 0x6660EB2DuLL);
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1195, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
        v144 = 0;
      }
      else
      {
        v144 = a2[1];
        v145 = (char *)malloc_type_malloc(v144, 0x6660EB2DuLL);
        v146 = v145;
        if ((int)(a3 - 4) >= (int)v144 && (_DWORD)v144)
        {
          v147 = 0;
          do
          {
            v145[v147] = *((_BYTE *)a2 + v147 + 4);
            ++v147;
          }
          while (&v145[v147] < &v145[v144]);
        }
      }
      v190 = v4 + v7;
      v191 = *(void (**)(uint64_t, size_t, void *))(*(_QWORD *)(v4 + v7 + 32) + 264);
      if (!v191)
        goto LABEL_480;
      goto LABEL_479;
    case 0x4Eu:
      v148 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(qword_10097CC20 + v7 + 32) + 272);
      if (!v148)
        return;
      if (a3 < 0xA)
      {
        v148(qword_10097CC20 + v7 + 9, 0);
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1217, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
      }
      else
      {
        v148(qword_10097CC20 + v7 + 9, *(_QWORD *)(a2 + 1));
        v10 = 5;
LABEL_228:
        if ((int)(a3 - v10 * 2) > 1)
        {
          v149 = a3;
          v150 = a2;
          v144 = a2[v10];
          v151 = v10 * 2 + 2;
          v152 = (char *)malloc_type_malloc(v144, 0x4EA369F6uLL);
          v146 = v152;
          if ((int)(v149 - v151) >= (int)v144 && (_DWORD)v144)
          {
            v153 = 0;
            do
            {
              v152[v153] = *((_BYTE *)v150 + v151 + v153);
              ++v153;
            }
            while (&v152[v153] < &v152[v144]);
          }
LABEL_478:
          v190 = v4 + v7;
          v191 = *(void (**)(uint64_t, size_t, void *))(*(_QWORD *)(v4 + v7 + 32) + 280);
          if (v191)
LABEL_479:
            v191(v190 + 9, v144, v146);
LABEL_480:
          free(v146);
          return;
        }
      }
      v146 = malloc_type_malloc(0, 0x4EA369F6uLL);
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1220, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
      v144 = 0;
      goto LABEL_478;
    case 0x4Fu:
      goto LABEL_228;
    case 0x50u:
      if (a3 <= 2)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      v166 = *((unsigned __int8 *)a2 + 2);
      switch(*((_BYTE *)a2 + 2))
      {
        case 0:
          v168 = malloc_type_malloc(9uLL, 0x10000408EEE02DCuLL);
          v169 = v168;
          if (a3 - 12 <= 0xFFFFFFF6)
          {
            for (i = 0; i != 9; ++i)
              *((_BYTE *)v168 + i) = *((_BYTE *)a2 + i + 3);
          }
          break;
        case 1:
          v234 = malloc_type_malloc(0xBuLL, 0x10000403B807CB7uLL);
          v169 = v234;
          if (a3 - 14 <= 0xFFFFFFF4)
          {
            for (j = 0; j != 11; ++j)
              *((_BYTE *)v234 + j) = *((_BYTE *)a2 + j + 3);
          }
          break;
        case 2:
          v236 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
          v169 = v236;
          if (a3 - 11 <= 0xFFFFFFF7)
          {
            for (k = 0; k != 8; ++k)
              *((_BYTE *)v236 + k) = *((_BYTE *)a2 + k + 3);
          }
          break;
        case 3:
          v238 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
          v169 = v238;
          if (a3 - 11 <= 0xFFFFFFF7)
          {
            for (m = 0; m != 8; ++m)
              *((_BYTE *)v238 + m) = *((_BYTE *)a2 + m + 3);
          }
          break;
        default:
          if (sub_10005549C())
          {
            sub_100054530("PerfStats: subtype %d not found", v166);
            v233 = sub_1000544A0(0x53u);
            if (os_log_type_enabled(v233, OS_LOG_TYPE_DEFAULT))
            {
              buf[0] = 136446210;
              *(_QWORD *)&buf[1] = sub_100054494();
              _os_log_impl((void *)&_mh_execute_header, v233, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)buf, 0xCu);
            }
          }
          v169 = 0;
          break;
      }
      v240 = *(void (**)(uint64_t, uint64_t, void *))(*(_QWORD *)(v4 + v7 + 32) + 288);
      if (v240)
        v240(v4 + v7 + 9, v166, v169);
      free(v169);
      return;
    case 0x52u:
      if (a3 <= 3)
      {
        v146 = malloc_type_malloc(0, 0x92CFC020uLL);
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1316, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
        v144 = 0;
      }
      else
      {
        v144 = a2[1];
        v155 = (char *)malloc_type_malloc(v144, 0x92CFC020uLL);
        v146 = v155;
        if ((int)(a3 - 4) >= (int)v144 && (_DWORD)v144)
        {
          v156 = 0;
          do
          {
            v155[v156] = *((_BYTE *)a2 + v156 + 4);
            ++v156;
          }
          while (&v155[v156] < &v155[v144]);
        }
      }
      v190 = v4 + v7;
      v191 = *(void (**)(uint64_t, size_t, void *))(*(_QWORD *)(v4 + v7 + 32) + 296);
      if (!v191)
        goto LABEL_480;
      goto LABEL_479;
    case 0x53u:
      if (a3 <= 3)
      {
        v146 = malloc_type_malloc(0, 0x3F0D6E75uLL);
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1330, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
        v144 = 0;
      }
      else
      {
        v144 = a2[1];
        v158 = (char *)malloc_type_malloc(v144, 0x3F0D6E75uLL);
        v146 = v158;
        if ((int)(a3 - 4) >= (int)v144 && (_DWORD)v144)
        {
          v159 = 0;
          do
          {
            v158[v159] = *((_BYTE *)a2 + v159 + 4);
            ++v159;
          }
          while (&v158[v159] < &v158[v144]);
        }
      }
      v190 = v4 + v7;
      v191 = *(void (**)(uint64_t, size_t, void *))(*(_QWORD *)(v4 + v7 + 32) + 304);
      if (!v191)
        goto LABEL_480;
      goto LABEL_479;
    case 0x55u:
      if (a3 <= 2)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1344, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
        v160 = 0;
      }
      else
      {
        v160 = *((unsigned __int8 *)a2 + 2);
        if (a3 > 4)
        {
          v162 = *(unsigned __int16 *)((char *)a2 + 3);
          v163 = (char *)malloc_type_malloc(v162, 0x586C5573uLL);
          v164 = v163;
          if ((int)(a3 - 5) >= (int)v162 && (_DWORD)v162)
          {
            v165 = 0;
            do
            {
              v163[v165] = *((_BYTE *)a2 + v165 + 5);
              ++v165;
            }
            while (&v163[v165] < &v163[v162]);
          }
LABEL_421:
          v192 = *(void (**)(uint64_t, uint64_t, size_t, _BYTE *))(*(_QWORD *)(v4 + v7 + 32) + 312);
          if (v192)
            v192(v4 + v7 + 9, v160, v162, v164);
LABEL_423:
          free(v164);
          return;
        }
      }
      v164 = malloc_type_malloc(0, 0x586C5573uLL);
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1347, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
      v162 = 0;
      goto LABEL_421;
    default:
      goto LABEL_35;
  }
  do
  {
    if (v14)
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1034, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
    }
    else if (v265 > (unsigned __int16)v15)
    {
      LOWORD(v12[2 * v13]) = *(unsigned __int16 *)((char *)v263 + (unsigned __int16)v15);
      if (v265 <= (unsigned __int16)(v15 + 2))
      {
        v16 = 0;
        v269 = 1;
        v15 += 2;
      }
      else
      {
        v269 = 0;
        WORD1(v12[2 * v13]) = *(unsigned __int16 *)((char *)v263 + (unsigned __int16)(v15 + 2));
        v15 += 4;
        v16 = 1;
      }
      goto LABEL_21;
    }
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1035, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
    v16 = 0;
    v269 = 1;
LABEL_21:
    v17 = v12;
    v18 = (char *)&v12[2 * v13];
    v20 = *((unsigned __int16 *)v18 + 1);
    v19 = (unsigned __int16 *)(v18 + 2);
    v21 = sub_100114588(v20);
    *(_QWORD *)(v19 + 3) = v21;
    v22 = *v19;
    if ((v16 & 1) != 0)
    {
      v23 = v262 - (unsigned __int16)v15;
    }
    else
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1037, "void aapDataRecv(BT_AAP_HANDLE, uint8_t *, uint16_t)");
      v23 = 0;
    }
    v24 = *v19;
    if (v23 >= v24)
    {
      if ((_DWORD)v22)
      {
        v25 = (char *)v263 + (unsigned __int16)v15;
        v26 = &v21[v22];
        do
        {
          v27 = *v25++;
          *v21++ = v27;
        }
        while (v21 < v26);
        v24 = *v19;
      }
      v15 += v24;
      v14 = v269;
    }
    else
    {
      v14 = 1;
    }
    ++v13;
    v12 = v17;
  }
  while (v13 != v11);
  v29 = *(void (**)(uint64_t, uint64_t, void **, BOOL))(*(_QWORD *)(v4 + v7 + 32) + 136);
  if (!v29)
    goto LABEL_483;
  if (!v14)
  {
    v9 = v261;
LABEL_482:
    v29(v4 + v7 + 9, v11, v12, v9 != 49);
    goto LABEL_483;
  }
  if (sub_10005549C())
  {
    sub_100054530("AACP_MSG_DELETE_KEYS, error getting keys");
    v30 = sub_1000544A0(0x53u);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
LABEL_483:
  if ((_DWORD)v11)
  {
    v213 = v12 + 1;
    do
    {
      v214 = *v213;
      v213 += 2;
      sub_100053298(v214);
      --v11;
    }
    while (v11);
  }
LABEL_486:
  v209 = v12;
LABEL_508:
  sub_100053298(v209);
}

void sub_1000E7338(uint64_t a1, int a2)
{
  int v3;
  uint64_t i;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;

  if (qword_10097CC20)
  {
    v3 = a1;
    for (i = 0; i != 240; i += 48)
    {
      if (*(_DWORD *)(qword_10097CC20 + i + 16) == a2)
      {
        v7 = qword_10097CC20 + i + 8;
        goto LABEL_13;
      }
    }
    v5 = 8;
    while (*(_BYTE *)(qword_10097CC20 + v5) != 1)
    {
      v5 += 48;
      if (v5 == 248)
        goto LABEL_8;
    }
    v7 = qword_10097CC20 + v5;
LABEL_13:
    v8 = *(_DWORD *)(v7 + 8);
    if ((_DWORD)a1)
    {
      if (v8)
      {
        if (sub_10005549C())
        {
          sub_100054530("ConnectComplete result %d handle %u -- disconnecting AAP", v3, a2);
          v9 = sub_1000544A0(0x53u);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        sub_100115DC0(*(_DWORD *)(v7 + 8));
      }
      else
      {
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 + 24) + 8))(v7 + 1, *(unsigned __int16 *)(v7 + 14), a1);
        sub_1000E1790((_OWORD *)v7);
      }
    }
    else if (v8)
    {
      *(_BYTE *)v7 = 2;
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v7 + 24) + 8))(v7 + 1, *(unsigned __int16 *)(v7 + 14), 0);
    }
  }
  else
  {
LABEL_8:
    if (sub_10005549C())
    {
      sub_100054530("Not a valid Connection complete event!\n");
      v6 = sub_1000544A0(0x53u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
}

void *sub_1000E74BC()
{
  return sub_100054494();
}

uint64_t sub_1000E74C4(void *a1)
{
  off_10097CC28 = a1;
  return 0;
}

uint64_t sub_1000E74D4(void *a1)
{
  off_10097CC30 = a1;
  return 0;
}

uint64_t sub_1000E74E4(_BYTE *a1)
{
  _BOOL8 v2;
  uint64_t v3;
  size_t v4;
  int *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  __int128 v31;
  int v32;
  int v33;
  _BYTE *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  uint64_t v43;
  int *v44;
  NSObject *v46;
  NSObject *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  char *v54;
  unsigned __int16 *v55;
  char *v56;
  int v57;
  _BYTE *v58;
  int v59;
  NSObject *v60;
  NSObject *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned __int16 v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  __int16 v68;
  unsigned __int16 v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  NSObject *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned __int8 *v77;
  unsigned __int8 v78;
  unsigned __int16 v79;
  __int128 *v80;
  uint64_t v81;
  unsigned __int8 *v82;
  uint64_t v83;
  NSObject *v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  NSObject *v94;
  unsigned __int16 v95;
  int v96;
  int v97;
  unsigned int v98;
  int v99;
  const char *v100;
  NSObject *v101;
  _BOOL4 v102;
  NSObject *v103;
  NSObject *v105;
  int v106;
  NSObject *v107;
  NSObject *v108;
  NSObject *v109;
  NSObject *v110;
  _BOOL4 v111;
  NSObject *v112;
  NSObject *v113;
  NSObject *v114;
  NSObject *v115;
  NSObject *v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[10];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  unint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  unint64_t v141;
  size_t v142;
  uint8_t v143[4];
  int v144;
  int v145;
  __int128 *v146;
  __int128 v147;
  int v148;
  __int16 v149;
  int v150;
  _OWORD v151[64];
  _QWORD outputStruct[6];
  _DWORD inputStruct[2];
  uint64_t v154;
  int v155;
  int v156;
  char *v157;
  int v158;
  int v159;
  char *v160;
  int v161;
  int v162;
  char *v163;
  int v164;
  int v165;
  char *v166;
  int v167;
  int v168;
  char *v169;

  v2 = sub_10011EC38("applebt_rx_main");
  if (!a1 || !a1[19])
  {
    sub_100253460();
    v41 = sub_1000544A0(0x3Au);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      sub_1006CE8B4();
    sub_100253460();
    v42 = sub_1000544A0(0x3Au);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      sub_1006CE888();
    goto LABEL_111;
  }
  v137 = v124;
  v138 = (*(int *)(*(_QWORD *)a1 + 20) + 4) * *(int *)(*(_QWORD *)a1 + 64);
  __chkstk_darwin(v2, v138);
  v140 = (uint64_t)v124 - v3;
  bzero((char *)v124 - v3, v4);
  v139 = a1;
  v5 = *(int **)a1;
  v6 = (*(int *)(*(_QWORD *)a1 + 24) + 4) * *(int *)(*(_QWORD *)a1 + 68);
  __chkstk_darwin(v7, v8);
  v141 = (unint64_t)v124 - v9;
  bzero((char *)v124 - v9, v6);
  v10 = (v5[7] + 4) * v5[18];
  __chkstk_darwin(v11, v12);
  v14 = (char *)v124 - v13;
  bzero((char *)v124 - v13, v10);
  v15 = (v5[8] + 4) * v5[19];
  __chkstk_darwin(v16, v17);
  v19 = (char *)v124 - v18;
  bzero((char *)v124 - v18, v15);
  v20 = (v5[9] + 4) * v5[20];
  __chkstk_darwin(v21, v22);
  v24 = (char *)v124 - v23;
  bzero((char *)v124 - v23, v20);
  v25 = v5[10] + 4;
  __chkstk_darwin(v26, v27);
  v29 = (char *)v124 - ((v28 + 19) & 0xFFFFFFFFFFFFFFF0);
  bzero(v29, v25);
  inputStruct[0] = 65285;
  v155 = 65287;
  v158 = 65289;
  v161 = 65288;
  v164 = 65286;
  inputStruct[1] = v138;
  v154 = v140;
  v156 = v10;
  v157 = v14;
  v159 = v20;
  v160 = v24;
  v162 = v15;
  v163 = v19;
  v165 = v6;
  v166 = (char *)v141;
  v167 = 266;
  v168 = v25;
  v169 = v29;
  memset(outputStruct, 0, sizeof(outputStruct));
  v30 = sub_1001A384C(6, inputStruct, outputStruct);
  if (!v30)
  {
    v43 = 0;
    v33 = 0;
    v136 = (unint64_t)&v144;
    *(_QWORD *)&v31 = 67109376;
    v135 = v31;
    *(_QWORD *)&v31 = 67109632;
    v134 = v31;
    *(_QWORD *)&v31 = 67109634;
    v133 = v31;
    v34 = v139;
    while (1)
    {
      do
      {
        v44 = (int *)&outputStruct[v43];
        if (*v44 != -536870160 && *v44 != 0)
        {
          sub_100253460();
          v46 = sub_1000544A0(0x3Au);
          v33 = -536870167;
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            v98 = LOBYTE(inputStruct[4 * v43]);
            v99 = *v44;
            v100 = sub_1001A2DD4(v99);
            *(_QWORD *)&v151[0] = __PAIR64__(v98, v133);
            WORD4(v151[0]) = 1024;
            *(_DWORD *)((char *)v151 + 10) = v99;
            HIWORD(v151[0]) = 2080;
            *(_QWORD *)&v151[1] = v100;
            _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "applebt_rx_main: after applebt_hci_read, pipe %d returned status (0x%08X, %s)\n", (uint8_t *)v151, 0x18u);
          }
        }
        ++v43;
      }
      while (v43 != 6);
      if (v33)
      {
        v32 = 0;
        goto LABEL_5;
      }
      if (!v34[32])
        break;
      v47 = sub_1000544A0(0x3Au);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v151[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: rx route is suspended before terminate - dropping packets\n", (uint8_t *)v151, 2u);
      }
LABEL_42:
      v48 = sub_1001A384C(6, inputStruct, outputStruct);
      v33 = 0;
      v43 = 0;
      if (v48)
      {
        v32 = v48;
        goto LABEL_5;
      }
    }
    v49 = 0;
    while (1)
    {
      v138 = v49;
      v50 = (unint64_t)&outputStruct[v49];
      if (*(_BYTE *)(v50 + 4))
        break;
LABEL_96:
      v49 = v138 + 1;
      if (v138 == 5)
        goto LABEL_42;
    }
    v51 = 0;
    v52 = v50 | 4;
    v53 = (unsigned __int8 *)&inputStruct[4 * v138];
    v54 = (char *)*v53;
    v55 = (unsigned __int16 *)*((_QWORD *)v53 + 1);
    v140 = v52;
    v141 = (unint64_t)v54;
    v56 = &v54[(_QWORD)v34 + 8];
    while (1)
    {
      v58 = v55 + 1;
      v57 = *((unsigned __int8 *)v55 + 2);
      v59 = *v56;
      *v56 = v59 + 1;
      if (v57 != v59)
      {
        sub_100253460();
        v60 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
        {
          v96 = *v56 - 1;
          v97 = *v58;
          *(_QWORD *)&v151[0] = __PAIR64__(v141, 67109888);
          WORD4(v151[0]) = 1024;
          *(_DWORD *)((char *)v151 + 10) = v51;
          HIWORD(v151[0]) = 1024;
          LODWORD(v151[1]) = v96;
          WORD2(v151[1]) = 1024;
          *(_DWORD *)((char *)&v151[1] + 6) = v97;
          _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "applebt_rx_main: seq_num[pipe=%d,item=%d] mismatch, expected %d received %d\n", (uint8_t *)v151, 0x1Au);
        }
        sub_100253460();
        v61 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          sub_1006CEC7C(v143, (unsigned __int8 *)v55 + 2, (int *)v136, v61);
        *v56 = *v58 + 1;
      }
      v62 = *v55;
      sub_1000477B8();
      if (!v34[19])
        goto LABEL_110;
      if ((_DWORD)v141 == 10)
      {
        v63 = *v55;
        if (*v55)
        {
          v64 = 0;
          v65 = (unsigned __int8 *)(v55 + 2);
          do
          {
            v66 = *(unsigned int *)v65;
            v67 = v65 + 4;
            v68 = *((_WORD *)v65 + 3);
            v69 = v68 + 4;
            v64 += v68 + 8;
            v151[0] = 0uLL;
            v70 = mach_continuous_time();
            v71 = v70 & 0xFFFFFFF000000000 | (16 * v66);
            if (v70 - v71 > 0x800000000)
              v71 -= 0x1000000000;
            *(_QWORD *)&v151[0] = v71;
            v72 = v69;
            if (v63 - v64 == 1)
            {
              sub_1000E8ACC(&v67[v69], 1u, (uint64_t)v151);
              v80 = v151;
              v81 = 6;
              v82 = v67;
              v83 = v69;
              goto LABEL_94;
            }
            v73 = v64;
            sub_100047AB0(6, v67, v72, (uint64_t)v151);
            v65 = &v67[v72];
          }
          while (v64 < v63);
          v34 = v139;
          if (v73 != v63)
          {
            sub_100253460();
            v74 = sub_1000544A0(0x3Au);
            if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
            {
              *(_QWORD *)&v151[0] = __PAIR64__(v73, v135);
              WORD4(v151[0]) = 1024;
              *(_DWORD *)((char *)v151 + 10) = v63;
              _os_log_error_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "packet buffering: current_item_size != packet_len current_item_size: %u, packet_len: %u", (uint8_t *)v151, 0xEu);
            }
          }
        }
        goto LABEL_95;
      }
      v75 = v62 - 1;
      v76 = *((unsigned __int8 *)v55 + 4);
      v77 = (unsigned __int8 *)v55 + 5;
      if (v76 == 7)
      {
        v78 = *v77 + 1;
        v147 = 0uLL;
        *(_QWORD *)&v147 = mach_continuous_time();
        BYTE8(v147) = 0;
        if ((int)v75 <= v78)
        {
          if (v62 <= v78)
          {
            sub_100253460();
            v84 = sub_1000544A0(0x3Au);
            if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v151[0]) = v135;
              DWORD1(v151[0]) = v78;
              WORD4(v151[0]) = 1024;
              *(_DWORD *)((char *)v151 + 10) = v75;
              _os_log_error_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "applebt_rx_main: WARNING! LMP packet length(%d) is larger than actual packet length(%d) - truncating!", (uint8_t *)v151, 0xEu);
            }
            v78 = v75;
          }
        }
        else
        {
          sub_1000E8ACC((_BYTE *)v55 + v78 + 5, v75 - v78, (uint64_t)&v147);
        }
        v85 = sub_1001D8730();
        v83 = v78;
        if (!v85)
        {
          sub_10004A360();
          v34 = v139;
          if (BYTE8(v147))
          {
            memset(v151, 0, 100);
            snprintf((char *)v151, 0x64uLL, "BT Controller HCI_LMP wakeupCause (len=0x%hhX)", *v77);
            sub_100253320((uint64_t)"applebt_rx_main: %s", v86, v87, v88, v89, v90, v91, v92, (uint64_t)v151);
            sub_10011D280((const char *)v151);
          }
          goto LABEL_95;
        }
        v81 = *((unsigned __int8 *)v55 + 4);
        v80 = &v147;
        v82 = (unsigned __int8 *)v55 + 5;
      }
      else
      {
        switch(v76)
        {
          case 4u:
            v79 = v62 - 1;
            if (v75 >= 2)
              v79 = *((unsigned __int8 *)v55 + 6) + 2;
            break;
          case 3u:
            v79 = v62 - 1;
            if (v75 >= 3)
              v79 = *((unsigned __int8 *)v55 + 7) + 3;
            break;
          case 2u:
            v79 = v62 - 1;
            if (v75 >= 4)
              v79 = *(unsigned __int16 *)((char *)v55 + 7) + 4;
            break;
          default:
            sub_100253460();
            v93 = sub_1000544A0(0x3Au);
            v79 = v75;
            if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
            {
              *(_QWORD *)&v151[0] = __PAIR64__(v76, v135);
              WORD4(v151[0]) = 1024;
              *(_DWORD *)((char *)v151 + 10) = v75;
              _os_log_error_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_ERROR, "applebt_get_hci_packet_length: Unknown HCI packet type=%d, length=%d", (uint8_t *)v151, 0xEu);
              v79 = v75;
            }
            break;
        }
        if (v75 >= v79)
        {
          v95 = v79;
        }
        else
        {
          sub_100253460();
          v94 = sub_1000544A0(0x3Au);
          v95 = v75;
          if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
          {
            *(_QWORD *)&v151[0] = __PAIR64__(v76, v134);
            WORD4(v151[0]) = 1024;
            *(_DWORD *)((char *)v151 + 10) = v79;
            HIWORD(v151[0]) = 1024;
            LODWORD(v151[1]) = v75;
            _os_log_error_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_ERROR, "applebt_get_hci_packet_length: WARNING! HCI packet length (type=%d, length=%d) is larger than actual packet length(%d) - truncating!", (uint8_t *)v151, 0x14u);
            v95 = v75;
          }
        }
        v151[0] = 0uLL;
        *(_QWORD *)&v151[0] = mach_continuous_time();
        BYTE8(v151[0]) = 0;
        if ((int)v75 > v95)
          sub_1000E8ACC((_BYTE *)v55 + v95 + 5, v75 - v95, (uint64_t)v151);
        v81 = *((unsigned __int8 *)v55 + 4);
        v80 = v151;
        v82 = (unsigned __int8 *)v55 + 5;
        v83 = v95;
      }
LABEL_94:
      sub_100047AB0(v81, v82, v83, (uint64_t)v80);
      v34 = v139;
LABEL_95:
      sub_1000478A0();
      v55 = (unsigned __int16 *)((char *)v55 + *v55 + 4);
      if (++v51 >= *(unsigned __int8 *)v140)
        goto LABEL_96;
    }
  }
  v32 = v30;
  v33 = 0;
  v34 = v139;
LABEL_5:
  sub_100253460();
  v35 = sub_1000544A0(0x3Au);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    sub_1006CEBD0(v32, v33, v35);
  if (v32 != -536870195 && v34[19])
  {
    bzero(v151, 0x400uLL);
    sub_1000477B8();
    sub_1001926C4(1205);
    sub_1000478A0();
    sub_100253460();
    v36 = sub_1000544A0(0x3Au);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      sub_1006CEB54();
    if (v32 == -536870167)
    {
      v142 = 2048;
      if (sub_100150648(&byte_1009941B8, &v142))
      {
        sub_100253460();
        v37 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          sub_1006CEAF4();
      }
      else if (v142 == 1024)
      {
        sub_100253460();
        v112 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
          sub_1006CEA90();
        memcpy(v151, &byte_1009941B8, sizeof(v151));
        v113 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v147) = 67109120;
          DWORD1(v147) = DWORD1(v151[12]);
          _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: ID !! applebt_read_crash_data succeeded.(ID %d)\n", (uint8_t *)&v147, 8u);
        }
        v114 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v147) = 67109120;
          DWORD1(v147) = DWORD2(v151[13]);
          _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: PC !! applebt_read_crash_data succeeded.(PC 0x%08X)\n", (uint8_t *)&v147, 8u);
        }
        v115 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)&v147 = __PAIR64__(HIDWORD(v151[13]), 67109888);
          WORD4(v147) = 1024;
          *(_DWORD *)((char *)&v147 + 10) = v151[14];
          HIWORD(v147) = 1024;
          v148 = DWORD1(v151[14]);
          v149 = 1024;
          v150 = DWORD2(v151[14]);
          _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: LR !! applebt_read_crash_data succeeded.(LR0 0x%08X, LR1 0x%08X, LR2 0x%08X, LR3 0x%08X)\n", (uint8_t *)&v147, 0x1Au);
        }
        v116 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v147) = 136315138;
          *(_QWORD *)((char *)&v147 + 4) = &v151[32];
          _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: STR !! applebt_read_crash_data succeeded.(%s)\n", (uint8_t *)&v147, 0xCu);
        }
        bzero(&byte_1009941B8, 0x800uLL);
        dword_1009941DD[0] = DWORD1(v151[12]);
        *(_OWORD *)word_1009941CD = *(_OWORD *)((char *)&v151[12] + 8);
        *(_OWORD *)&dword_1009941F1 = *(_OWORD *)((char *)&v151[13] + 8);
        dword_1009941F5[3] = DWORD2(v151[14]);
      }
      else if (v142 == 2048)
      {
        sub_100253460();
        v105 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
          sub_1006CEA2C();
        v106 = dword_1009941DD[0];
        DWORD1(v151[12]) = dword_1009941DD[0];
        bzero(&v147, 0x400uLL);
        v141 = byte_1009941B8;
        v140 = byte_1009941BD;
        v138 = byte_1009941BE;
        v136 = byte_1009941BF;
        *(_QWORD *)&v135 = byte_1009941C0;
        snprintf((char *)&v147, 0x400uLL, "abort %d;version=%d;bin_id=%u;uuid=%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X;BT:%d."
          "%d.%d.%d;PHY:%u.%u.%u.%u;ID=%d;p1=0x%X;p2=0x%X; p3=0x%X;p4=0x%X;EOS",
          v106,
          byte_1009941B8,
          unk_1009941B9,
          byte_1009941BD,
          byte_1009941BE,
          byte_1009941BF,
          byte_1009941C0,
          byte_1009941C1,
          byte_1009941C2,
          byte_1009941C3,
          byte_1009941C4,
          byte_1009941C5,
          byte_1009941C6,
          byte_1009941C7,
          byte_1009941C8,
          byte_1009941C9,
          byte_1009941CA,
          byte_1009941CB,
          byte_1009941CC,
          word_1009941CD[0],
          word_1009941CD[1],
          word_1009941CD[2],
          word_1009941CD[3],
          unk_1009941D5,
          unk_1009941D7,
          unk_1009941D9,
          unk_1009941DB,
          v106,
          dword_1009941DD[1],
          dword_1009941DD[2],
          dword_1009941DD[3],
          dword_1009941DD[4]);
        v107 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
        {
          v145 = 136315138;
          v146 = &v147;
          _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: BT-MAC-ABORT-STR1!!(%s)\n", (uint8_t *)&v145, 0xCu);
        }
        *(_QWORD *)&v134 = *(_QWORD *)&dword_1009941F5[22];
        v129 = byte_100994271;
        v127 = byte_100994272;
        v125 = byte_100994273;
        v124[3] = byte_1009942B0;
        v141 = dword_1009941DD[0];
        v140 = dword_1009941F1;
        v138 = dword_1009941F5[0];
        v136 = dword_1009941F5[1];
        *(_QWORD *)&v135 = dword_1009941F5[2];
        v132 = *(_QWORD *)&dword_1009941F5[24];
        *(_QWORD *)&v133 = dword_1009941F5[3];
        v131 = dword_1009941F5[4];
        v130 = dword_1009941F5[5];
        v128 = dword_1009941F5[6];
        v126 = dword_1009941F5[7];
        v124[9] = dword_1009941F5[8];
        v124[8] = dword_1009941F5[9];
        v124[7] = dword_1009941F5[10];
        v124[6] = dword_1009941F5[11];
        v124[5] = dword_1009941F5[12];
        v124[4] = dword_1009941F5[13];
        v124[2] = dword_1009941F5[14];
        v124[1] = dword_1009941F5[15];
        v124[0] = dword_1009941F5[16];
        snprintf((char *)&v147, 0x400uLL, "abort %d;PC=0x%x;LR1=0x%x;LR2=0x%x;LR3=0x%x;LR4=0x%x;LR5=0x%x;cpsr=0x%x;dfar=0x%x;dfsr=0x%x;ifar=0x%x;ifsr=0x%"
          "x;vic0_vicrawintr=0x%X;vic1_vicrawintr=0x%X;vic2_vicrawintr=0x%X;irq_vic_0=0x%X;irq_vic_1=0x%X;irq_vic_2=0x%X;"
          "fiq_vic_0=0x%X;fiq_vic_1=0x%X;fiq_vic_2=0x%X;vic3_vicrawintr=0x%X;irq_vic_3=0x%X;fiq_vic_3=0x%X;raw_irq_status"
          "=0x%llx;prev_raw_irq_status=0x%llx;local_bt_clk=0x%X;coex_activity_bits=0x%X;coex_envelop_bits=0x%X;top_semaph"
          "ores_lock_status_hw=0x%X;top_semaphores_lock_status_fw=0x%X;context=0x%X;abort_counter=0x%X;unhandled_exceptio"
          "n_counter=0x%X;syndrome0=0x%X;far0=0x%X;pc0=0x%X;lr0=0x%X;psr0=0x%X;syndrome1=0x%X;far1=0x%X;pc1=0x%X;lr1=0x%X"
          ";psr1=0x%X;syndrome2=0x%X;far2=0x%X;pc2=0x%X;lr2=0x%X;psr2=0x%X;system_exit_status=0x%X;EOS",
          dword_1009941DD[0],
          dword_1009941F1,
          dword_1009941F5[0],
          dword_1009941F5[1],
          dword_1009941F5[2],
          dword_1009941F5[3],
          dword_1009941F5[4],
          dword_1009941F5[5],
          dword_1009941F5[6],
          dword_1009941F5[7],
          dword_1009941F5[8],
          dword_1009941F5[9],
          dword_1009941F5[10],
          dword_1009941F5[11],
          dword_1009941F5[12],
          dword_1009941F5[13],
          dword_1009941F5[14],
          dword_1009941F5[15],
          dword_1009941F5[16],
          dword_1009941F5[17],
          dword_1009941F5[18],
          dword_1009941F5[19],
          dword_1009941F5[20],
          dword_1009941F5[21],
          *(_QWORD *)&dword_1009941F5[22],
          *(_QWORD *)&dword_1009941F5[24],
          dword_1009941F5[26],
          dword_1009941F5[27],
          dword_1009941F5[28],
          dword_1009941F5[29],
          dword_1009941F5[30],
          byte_100994271,
          byte_100994272,
          byte_100994273,
          dword_100994274,
          unk_100994278,
          dword_10099427C,
          unk_100994280,
          dword_100994284,
          unk_100994288,
          dword_10099428C,
          unk_100994290,
          dword_100994294,
          unk_100994298,
          dword_10099429C,
          unk_1009942A0,
          dword_1009942A4,
          unk_1009942A8,
          dword_1009942AC,
          byte_1009942B0);
        v108 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
        {
          v145 = 136315138;
          v146 = &v147;
          _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: BT-MAC-ABORT-STR2!!(%s)\n", (uint8_t *)&v145, 0xCu);
        }
        v141 = unk_1009942B5;
        v140 = byte_1009942B7;
        v138 = byte_1009942B8;
        v136 = byte_1009942B9;
        *(_QWORD *)&v135 = (unsigned __int16)word_1009942BA;
        *(_QWORD *)&v134 = byte_1009942BC;
        *(_QWORD *)&v133 = byte_1009942BD;
        v132 = byte_1009942BE;
        v131 = byte_1009942BF;
        v130 = byte_1009942C0;
        v129 = byte_1009942C1;
        v128 = byte_1009942C2;
        v127 = byte_1009942C3;
        v126 = byte_1009942C4;
        v125 = unk_1009942DF;
        snprintf((char *)&v147, 0x400uLL, "abort %d;rx_header_status=0x%x;tx_header_status=0x%x;sync_valid=0x%x;hw_machine_sig=0x%x;general_status=0x%x;e"
          "sco_tx_en_state=0x%x;sch_current_mrl=0x%x;rx_data_type=0x%x;tx_data_type=0x%x;rx_packet_length=0x%x;tx_packet_"
          "length=0x%x;total_rx_tx_length=0x%X;rx_watchdog_timer_counter=0x%X;rx_watchdog_occured=0x%X;dbl_buf_index=0x%X"
          ";last_scheduled_btclk=0x%X;prev_scheduled_btclk=0x%X;prev_activity_type=0x%X;bt_clk_freeze0=0x%X;bt_clk_freeze"
          "1=0x%X;bt_clk_freeze2=0x%X;pt_freeze0=0x%X;pt_freeze1=0x%X;pt_freeze2=0x%X;sm_clk_freeze=0x%X;max_dram_wakeup_"
          "duration=0x%X;dram_protection_mode=0x%X;dram_access_allowed=0x%X;dram_is_enable=0x%X;force_dram_awake_bit=0x%X"
          ";etm_etb_enabled=0x%X;trx_timers_supported=0x%X;dart_error_occurred=0x%X;syncrhonous_external_abort_occured=0x"
          "%X;init_state=0x%X;recovery_state=0x%X;sleep_wakeup_state=0x%X;sleep_go_to_deep_sleep_state=0x%X;rtkit_assert_"
          "state=0x%X;rtkit_power_off_state=0x%X;EOS",
          dword_1009941DD[0],
          unk_1009942B1,
          unk_1009942B5,
          byte_1009942B7,
          byte_1009942B8,
          byte_1009942B9,
          (unsigned __int16)word_1009942BA,
          byte_1009942BC,
          byte_1009942BD,
          byte_1009942BE,
          byte_1009942BF,
          byte_1009942C0,
          byte_1009942C1,
          byte_1009942C2,
          byte_1009942C3,
          byte_1009942C4,
          unk_1009942C9,
          unk_1009942CD,
          byte_1009942D1,
          unk_1009942D3,
          unk_1009942D7,
          unk_1009942DB,
          unk_1009942DF,
          unk_1009942E1,
          unk_1009942E3,
          unk_1009942E5,
          unk_1009942E9,
          byte_1009942EB,
          byte_1009942EC & 1,
          (byte_1009942EC >> 1) & 1,
          (byte_1009942EC >> 2) & 1,
          (byte_1009942EC >> 3) & 1,
          (byte_1009942EC >> 4) & 1,
          (byte_1009942EC >> 5) & 1,
          (byte_1009942EC >> 6) & 1,
          byte_1009942ED,
          byte_1009942EE,
          byte_1009942EF,
          byte_1009942F0,
          byte_1009942F1,
          byte_1009942F2);
        v109 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
        {
          v145 = 136315138;
          v146 = &v147;
          _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: BT-MAC-ABORT-STR3!!(%s)\n", (uint8_t *)&v145, 0xCu);
        }
        snprintf((char *)&v151[32], 0x200uLL, "abort %d p1=0x%X p2=0x%X p3=0x%X p4=0x%X;ID:%d;BT:%d.%d.%d.%d;PHY:%u.%u.%u.%u;PC:0x%x;LR1:0x%x;LR2:0x%x;LR3:0x%x;LR4:0x%x;EOS",
          dword_1009941DD[0],
          dword_1009941DD[1],
          dword_1009941DD[2],
          dword_1009941DD[3],
          dword_1009941DD[4],
          dword_1009941DD[0],
          word_1009941CD[0],
          word_1009941CD[1],
          word_1009941CD[2],
          word_1009941CD[3],
          unk_1009941D5,
          unk_1009941D7,
          unk_1009941D9,
          unk_1009941DB,
          dword_1009941F1,
          dword_1009941F5[0],
          dword_1009941F5[1],
          dword_1009941F5[2],
          dword_1009941F5[3]);
        memcpy(&unk_1009949B8, &v151[32], 0x200uLL);
        v110 = sub_1000544A0(0x3Au);
        v111 = os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT);
        v34 = v139;
        if (v111)
        {
          v145 = 136315138;
          v146 = &v151[32];
          _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: BT-MAC-ABORT-STR4!!(%s)\n", (uint8_t *)&v145, 0xCu);
        }
      }
      else
      {
        sub_100253460();
        v117 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
          sub_1006CE9C4((uint64_t)&v142, v117, v118, v119, v120, v121, v122, v123);
      }
    }
    if (sub_1001A2F80())
    {
      sub_100253460();
      v38 = sub_1000544A0(0x3Au);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        sub_1006CE964();
    }
    sub_1000477B8();
    if (v32 == -536870167)
    {
      sub_100253460();
      v39 = sub_1000544A0(0x3Au);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        sub_1006CE8E0();
      if (v34[33])
        sub_1002534F4();
      if (off_10097CC28)
        off_10097CC28(7, DWORD1(v151[12]) | ((unint64_t)dword_1009941F1 << 32), &v151[32]);
      v40 = 1214;
    }
    else
    {
      sub_100253460();
      v101 = sub_1000544A0(0x3Au);
      v102 = os_log_type_enabled(v101, OS_LOG_TYPE_ERROR);
      if (v32 == -536870211)
      {
        if (v102)
          sub_1006CE90C();
        if (off_10097CC30)
          off_10097CC30(0);
        v40 = 1206;
      }
      else
      {
        if (v102)
          sub_1006CE938();
        if (off_10097CC30)
          off_10097CC30(1);
        v40 = 1205;
      }
    }
    sync();
    sub_10019272C(v40);
LABEL_110:
    sub_1000478A0();
  }
LABEL_111:
  v103 = sub_1000544A0(0x3Au);
  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v151[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: Exiting rx thread\n", (uint8_t *)v151, 2u);
  }
  return 0;
}

void sub_1000E8ACC(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v3 = 2147483649;
  memset(v16, 0, 9);
  if (a1)
  {
    if (!a2)
      return;
    v5 = a1;
    while (1)
    {
      v6 = *v5;
      v7 = v6;
      if ((_DWORD)v6 != 1)
      {
        if ((_DWORD)v6 != 2)
        {
          if (*v5)
          {
            v3 = 2147483650;
            goto LABEL_16;
          }
          return;
        }
        v7 = 9;
      }
      v8 = a2;
      if (v7 > a2)
        goto LABEL_16;
      __memcpy_chk((char *)v16 + 1, v5 + 1, v7 - 1, 8);
      if ((_DWORD)v6 == 2)
        *(_QWORD *)a3 = *(_QWORD *)((char *)v16 + 1);
      else
        *(_BYTE *)(a3 + 8) = 1;
      v5 += v7;
      a2 = v8 - v7;
      if (v8 == (_DWORD)v7)
        return;
    }
  }
  v3 = 2147483651;
LABEL_16:
  sub_100253460();
  v9 = sub_1000544A0(0x3Au);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    sub_1006CECCC(v3, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_1000E8BE0()
{
  return 0;
}

uint64_t sub_1000E8BF8(int a1)
{
  int v1;
  unsigned int v2;

  v1 = sub_1001502D4(a1);
  if (v1 == -536870201)
    v2 = 102;
  else
    v2 = 105;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t sub_1000E8C2C(char a1)
{
  byte_10097CC59 = a1;
  return 0;
}

uint64_t sub_1000E8C3C(unsigned __int16 a1, const void *a2, unsigned int a3)
{
  return sub_100150444(a1, a2, a3);
}

uint64_t sub_1000E8C44(int a1)
{
  _OWORD v2[2];

  memset(v2, 0, sizeof(v2));
  if (a1)
    *(_QWORD *)&v2[0] = 1;
  return sub_10014FE4C((uint64_t *)v2);
}

uint64_t sub_1000E8CA4(int a1, uint64_t a2, int a3)
{
  __int16 v4;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  uint8_t *v14;
  size_t v15;
  unsigned __int8 v16;
  int v18;
  uint8_t buf[8];
  uint8_t *v20;
  int v21;

  if (!byte_10097CC4B)
    return 1205;
  v4 = a2;
  if (a1 == 1)
  {
    v8 = 0;
  }
  else if (a1 == 3)
  {
    v8 = &_mh_execute_header.magic + 2;
  }
  else
  {
    if (a1 != 2)
      return 1214;
    v6 = sub_10019FA70(a2);
    if (v6 == 2)
      v7 = 4;
    else
      v7 = 1;
    if (v6 == 1)
      v8 = 3;
    else
      v8 = v7;
  }
  if (a1 == 2)
    v10 = 5;
  else
    v10 = 4;
  v11 = v10 + a3;
  if (v10 + a3 > *(_DWORD *)(qword_10097CC38 + 4 * v8))
  {
    sub_100253460();
    v12 = sub_1000544A0(0x3Au);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_DWORD *)(qword_10097CC38 + 4 * v8);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v10 + a3;
      LOWORD(v20) = 1024;
      *(_DWORD *)((char *)&v20 + 2) = v8;
      HIWORD(v20) = 1024;
      v21 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "applebt_transport_send_request: headerBytes + length (%d) is greater than pipe[%d] size (%d)\n", buf, 0x14u);
    }
    if (v11 > *(_DWORD *)(qword_10097CC38 + 4 * v8))
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/applebt_transport.c");
  }
  __chkstk_darwin();
  v14 = &buf[-v13];
  bzero(&buf[-v13], v15);
  v14[4] = a1;
  *(_WORD *)(v14 + 5) = v4;
  v14[7] = a3;
  if (a1 == 2)
    v14[8] = BYTE1(a3);
  if (a3)
    sub_100053868((char *)&v14[v10 + 4]);
  else
    sub_10004A104();
  *(_WORD *)v14 = v11;
  v16 = *((_BYTE *)&qword_10097CC38 + v8 + 8);
  *((_BYTE *)&qword_10097CC38 + v8 + 8) = v16 + 1;
  *((_WORD *)v14 + 1) = v16;
  v20 = v14;
  *(_DWORD *)buf = v8;
  buf[1] = 1;
  *(_DWORD *)&buf[4] = (unsigned __int16)v11 + 4;
  if (!sub_1001A33CC(1, buf))
    return 625;
  v9 = 1205;
  sub_1001926C4(1205);
  return v9;
}

uint64_t sub_1000E8F34()
{
  return 0;
}

uint64_t sub_1000E8F3C()
{
  uint64_t v0;

  if (byte_10097CC4B)
    return 1205;
  v0 = sub_1001A2908();
  if (!(_DWORD)v0)
  {
    v0 = sub_1001A31DC();
    if ((_DWORD)v0)
    {
      sync();
      sub_10019272C(1205);
    }
    qword_10097CC38 = (uint64_t)sub_1001003AC();
    if (!qword_10097CC38)
    {
      sync();
      sub_10019272C(1218);
    }
    byte_10097CC58 = 0;
    byte_10097CC4B = 1;
    if (pthread_create((pthread_t *)&qword_10097CC50, 0, (void *(__cdecl *)(void *))sub_1000E74E4, &qword_10097CC38))
    {
      sync();
      sub_10019272C(1218);
    }
    else
    {
      sub_10011EB64((_opaque_pthread_t *)qword_10097CC50, 63);
    }
  }
  return v0;
}

uint64_t sub_1000E8FF8()
{
  return 0;
}

uint64_t sub_1000E9000()
{
  NSObject *v0;
  uint64_t v1;
  NSObject *v2;

  if (!byte_10097CC4B)
    return 1205;
  byte_10097CC4B = 0;
  if (sub_1001A2F80())
  {
    sub_100253460();
    v0 = sub_1000544A0(0x3Au);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
      sub_1006CED90();
  }
  sub_1000478A0();
  v1 = pthread_join((pthread_t)qword_10097CC50, 0);
  sub_1000477B8();
  if ((_DWORD)v1)
  {
    sub_100253460();
    v2 = sub_1000544A0(0x3Au);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1006CED30();
  }
  return v1;
}

uint64_t sub_1000E90B4()
{
  if (!byte_10097CC4B)
  {
    sync();
    sub_10019272C(1205);
  }
  return (unsigned __int16)(*(_WORD *)(qword_10097CC38 + 4) - 1);
}

uint64_t sub_1000E90F0()
{
  return 0;
}

uint64_t sub_1000E90F8()
{
  return 0;
}

void sub_1000E9100()
{
  byte_10097CC58 = 1;
}

uint64_t sub_1000E9110()
{
  uint64_t result;

  result = sub_1000E9000();
  if (!(_DWORD)result)
    return sub_1000E8F3C();
  return result;
}

void sub_1000E9130(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

os_log_t sub_1000E9158(uint64_t a1)
{
  uint64_t i;
  char *v3;
  char *v4;
  os_log_t result;
  char __str[16];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  for (i = 0; i != 93; ++i)
  {
    if (*(_BYTE *)(a1 + 32) == 91)
    {
      v3 = "Stack.ALL";
    }
    else
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v10 = 0u;
      v11 = 0u;
      v8 = 0u;
      v9 = 0u;
      *(_OWORD *)__str = 0u;
      v7 = 0u;
      v4 = sub_100253014(i);
      snprintf(__str, 0x100uLL, "Stack.%s", v4);
      v3 = __str;
    }
    result = os_log_create("com.apple.bluetooth", v3);
    qword_10097CC68[i] = result;
  }
  return result;
}

void sub_1000E9258()
{
  NSObject *v0;

  if (dword_100978628 == -1)
  {
    dword_100978628 = open("/dev/btwake", 0);
    if (dword_100978628 == -1)
    {
      if (sub_10005549C())
      {
        sub_100054530("Unable to turn on BT)_WAKE signal");
        v0 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
  }
}

uint64_t sub_1000E92DC()
{
  uint64_t result;

  result = dword_100978628;
  if (dword_100978628 != -1)
  {
    result = close(dword_100978628);
    dword_100978628 = -1;
  }
  return result;
}

uint64_t sub_1000E9310(int a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char *v6;
  const char *v7;
  char *v8;
  int *v9;
  char *v10;
  NSObject *v11;
  int *v12;
  char *v13;
  NSObject *v14;
  tcflag_t v16;
  tcflag_t v17;
  int *v18;
  char *v19;
  NSObject *v20;
  int *v21;
  char *v22;
  NSObject *v23;
  int *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  char *v29;
  NSObject *v30;
  int *v31;
  char *v32;
  NSObject *v33;
  int *v34;
  char *v35;
  NSObject *v36;
  int *v37;
  char *v38;
  NSObject *v39;
  int *v40;
  char *v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  socklen_t v50;
  sockaddr v51;
  __int128 v52;
  char __str[16];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  kevent changelist;
  int *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char out[48];
  unsigned __int8 uu[8];
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  int v84;
  termios v85;

  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  *(_OWORD *)__str = 0u;
  v54 = 0u;
  v4 = sub_100170208();
  if (v4)
    v5 = v4;
  else
    v5 = 2400000;
  if (a2 && (__strlcpy_chk(__str, a2, 256, 256), HIBYTE(v68) = 0, (v6 = strtok(__str, ",")) != 0))
  {
    v7 = v6;
    v8 = strtok(0, ",");
    if (v8)
      v5 = strtoul(v8, 0, 0);
  }
  else
  {
    v7 = "com.apple.uart.sk.bluetooth";
  }
  memset(&v85, 0, sizeof(v85));
  v51 = (sockaddr)0;
  v52 = 0u;
  v84 = 0;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v50 = 0;
  dword_1009786B0 = socket(32, 1, 2);
  if (dword_1009786B0 < 0)
  {
    if (sub_10005549C())
    {
      v12 = __error();
      v13 = strerror(*v12);
      sub_100054530("socket failed (error = %s)\n", v13);
      v14 = sub_1000544A0(0x3Au);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 1201;
  }
  *(_DWORD *)&v51.sa_len = 139296;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0;
  __strlcpy_chk((char *)&v78 + 4, v7, 96, 96);
  if (ioctl(dword_1009786B0, 0xC0644E03uLL, &v78))
  {
    if (sub_10005549C())
    {
      v9 = __error();
      v10 = strerror(*v9);
      sub_100054530("ioctl(CTLIOCGINFO, %s) failed (error = %s)\n", v7, v10);
      v11 = sub_1000544A0(0x3Au);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    goto LABEL_14;
  }
  *(_DWORD *)&v51.sa_data[2] = v78;
  *(_DWORD *)&v51.sa_data[6] = 0;
  if (connect(dword_1009786B0, &v51, 0x20u) == -1)
  {
    if (sub_10005549C())
    {
      v18 = __error();
      v19 = strerror(*v18);
      sub_100054530("connect(%s) failed (error = %s)\n", v7, v19);
      v20 = sub_1000544A0(0x3Au);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    goto LABEL_14;
  }
  if (!strcmp(v7, "com.apple.uart.sk.bluetooth"))
  {
    *(_QWORD *)uu = 0;
    v77 = 0;
    memset(out, 0, 37);
    v49 = 63;
    v48 = 0x3F00000400;
    if (setsockopt(dword_1009786B0, 2, -2146675692, &v48, 0xCu) == -1)
    {
      if (!sub_10005549C())
        goto LABEL_14;
      v28 = __error();
      v29 = strerror(*v28);
      sub_100054530("set IOAOSSKYSETCHANNELSPEC (on %s) failed (error = %s)\n", v7, v29);
      v30 = sub_1000544A0(0x3Au);
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        goto LABEL_14;
    }
    else
    {
      v50 = 16;
      if (getsockopt(dword_1009786B0, 2, 1074811922, uu, &v50) == -1)
      {
        if (!sub_10005549C())
          goto LABEL_14;
        v31 = __error();
        v32 = strerror(*v31);
        sub_100054530("get IOAOSSKYGETCHANNELUUID (on %s) failed (error = %s)\n", v7, v32);
        v33 = sub_1000544A0(0x3Au);
        if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          goto LABEL_14;
      }
      else
      {
        uuid_unparse_upper(uu, out);
        qword_10097DF50 = os_channel_create(uu, 0);
        if (qword_10097DF50)
        {
          dword_1009786B4 = kqueue();
          if (dword_1009786B4 == -1)
          {
            if (sub_10005549C())
            {
              v21 = __error();
              v22 = strerror(*v21);
              sub_100054530("creating write kqueue failed (error = %s)\n", v22);
              v23 = sub_1000544A0(0x3Au);
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
                sub_1006CE7A4();
            }
          }
          changelist.ident = (int)os_channel_get_fd(qword_10097DF50);
          memset(&changelist.fflags, 0, 20);
          *(_DWORD *)&changelist.filter = 393214;
          v70 = &dword_10097DF58;
          v73 = 0;
          v72 = 0;
          v71 = 393206;
          v74 = 0;
          if (kevent(dword_1009786B4, &changelist, 2, 0, 0, 0) == -1)
          {
            close(dword_1009786B4);
            dword_1009786B4 = -1;
            os_channel_destroy(qword_10097DF50);
            qword_10097DF50 = 0;
            close(dword_1009786B0);
            dword_1009786B0 = -1;
            if (!sub_10005549C())
              return 1201;
            v37 = __error();
            v38 = strerror(*v37);
            sub_100054530("creating write kevent (on %s) failed (error = %s)\n", v7, v38);
            v39 = sub_1000544A0(0x3Au);
            if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
              return 1201;
          }
          else
          {
            dword_1009786B8 = kqueue();
            if (dword_1009786B8 == -1)
            {
              if (sub_10005549C())
              {
                v24 = __error();
                v25 = strerror(*v24);
                sub_100054530("creating read kqueue failed (error = %s)\n", v25);
                v44 = sub_1000544A0(0x3Au);
                if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
                  sub_1006CE7A4();
              }
            }
            changelist.ident = (int)os_channel_get_fd(qword_10097DF50);
            *(_DWORD *)&changelist.filter = 393215;
            memset(&changelist.fflags, 0, 20);
            v70 = &dword_10097DF58;
            v71 = 393206;
            v72 = 0;
            v73 = 0;
            v74 = 0;
            if (kevent(dword_1009786B8, &changelist, 2, 0, 0, 0) != -1)
            {
              v26 = os_channel_attr_create();
              if (v26)
              {
                v27 = v26;
                if (!os_channel_read_attr(qword_10097DF50, v26))
                {
                  v46 = 0;
                  v47 = 0;
                  v45 = 0;
                  os_channel_attr_get(v27, 4, &v47);
                  os_channel_attr_get(v27, 3, &v46);
                  os_channel_attr_get(v27, 2, &v45);
                }
                os_channel_attr_destroy(v27);
              }
              goto LABEL_21;
            }
            close(dword_1009786B8);
            dword_1009786B8 = -1;
            close(dword_1009786B4);
            dword_1009786B4 = -1;
            os_channel_destroy(qword_10097DF50);
            qword_10097DF50 = 0;
            close(dword_1009786B0);
            dword_1009786B0 = -1;
            if (!sub_10005549C())
              return 1201;
            v40 = __error();
            v41 = strerror(*v40);
            sub_100054530("creating read kevent (on %s) failed (error = %s)\n", v7, v41);
            v42 = sub_1000544A0(0x3Au);
            if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
              return 1201;
          }
          sub_1006CE7A4();
          return 1201;
        }
        if (!sub_10005549C()
          || (v34 = __error(),
              v35 = strerror(*v34),
              sub_100054530("os_channel_create (on %s) failed (error = %s)\n", v7, v35),
              v36 = sub_1000544A0(0x3Au),
              !os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)))
        {
LABEL_14:
          close(dword_1009786B0);
          dword_1009786B0 = -1;
          return 1201;
        }
      }
    }
    sub_1006CE7A4();
    goto LABEL_14;
  }
LABEL_21:
  v50 = 72;
  getsockopt(dword_1009786B0, 2, 1078490131, &v85, &v50);
  cfmakeraw(&v85);
  cfsetspeed(&v85, v5);
  if (a1 == 2 || a1 == 1)
  {
    v16 = v85.c_iflag | 0x10;
    v17 = v85.c_cflag & 0xFFFFFFFFFFFCCFFFLL | 0x1000;
  }
  else
  {
    if (a1)
      return 101;
    v16 = v85.c_iflag | 4;
    v17 = 232192;
  }
  v85.c_iflag = v16;
  v85.c_cflag = v17;
  setsockopt(dword_1009786B0, 2, -2142735340, &v85, 0x48u);
  dword_10097DF58 = 0;
  dword_10097DF5C = 0;
  sub_10011EC54(&stru_10097DF60);
  if (sub_10011EAC8((pthread_t *)&qword_10097DF90, (void *(__cdecl *)(void *))sub_1000E9FCC, 0))
  {
    sub_10011EB64((_opaque_pthread_t *)qword_10097DF90, 63);
    sub_10016F6A8();
    return 0;
  }
  else
  {
    v43 = sub_100112D60(104);
    return sub_1000E9B94(v43);
  }
}

uint64_t sub_1000E9B94()
{
  int v0;
  kevent v3;

  v0 = dword_1009786B0;
  if (dword_1009786B0 != -1)
  {
    dword_10097DF58 = 1;
    if (dword_1009786B4 != -1 || dword_1009786B8 != -1)
    {
      v3.ident = (uintptr_t)&dword_10097DF58;
      *(_QWORD *)&v3.filter = 0x10000000000FFF6;
      v3.data = 0;
      v3.udata = 0;
      kevent(dword_1009786B4, &v3, 1, 0, 0, 0);
      kevent(dword_1009786B8, &v3, 1, 0, 0, 0);
      v0 = dword_1009786B0;
    }
    close(v0);
    while (!dword_10097DF5C)
      sub_10010B3A4(&stru_10097DF60);
    if (qword_10097DF50)
    {
      os_channel_destroy(qword_10097DF50);
      qword_10097DF50 = 0;
    }
    if (dword_1009786B4 != -1)
    {
      close(dword_1009786B4);
      dword_1009786B4 = -1;
    }
    if (dword_1009786B8 != -1)
    {
      close(dword_1009786B8);
      dword_1009786B8 = -1;
    }
    sub_10011EC78(&stru_10097DF60);
    dword_1009786B0 = -1;
  }
  return 0;
}

uint64_t sub_1000E9CD4(char *__buf, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t next_slot;
  uint64_t v7;
  unsigned __int16 v8;
  int *v9;
  char *v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v15;
  size_t v16;
  int *v17;
  char *v18;
  NSObject *v19;
  int *v21;
  char *v22;
  NSObject *v23;
  kevent eventlist;
  __int128 v25;
  void *__dst[2];
  __int128 v27;
  __int128 v28;

  v2 = a2;
  if (!qword_10097DF50)
  {
    if (a2)
    {
      while (1)
      {
        v12 = write(dword_1009786B0, __buf, (unsigned __int16)v2);
        if ((v12 & 0x80000000) != 0)
          break;
        __buf += v12;
        LOWORD(v2) = v2 - v12;
        if (!(_WORD)v2)
          return 625;
      }
      if (sub_10005549C())
      {
        v17 = __error();
        v18 = strerror(*v17);
        sub_100054530("BM3UART write failed: %s", v18);
        v19 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 1205;
    }
    return 625;
  }
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  *(_OWORD *)__dst = 0u;
  v4 = os_channel_ring_id(qword_10097DF50, 0);
  v5 = os_channel_tx_ring(qword_10097DF50, v4);
  next_slot = os_channel_get_next_slot(v5, 0, &v25);
  if (__buf != (char *)&unk_10097CF50)
    sub_100253460();
  if (v2 > 0x1000)
  {
    sub_100253460();
  }
  else if (!v2)
  {
    v7 = 0;
    v8 = 0;
LABEL_7:
    if (v2 != v8)
      sub_100253460();
    if (v7)
    {
      os_channel_advance_slot(v5, v7);
      if (os_channel_sync(qword_10097DF50, 0) == -1)
      {
        if (!sub_10005549C())
          return 1205;
        v9 = __error();
        v10 = strerror(*v9);
        sub_100054530("BM3UART os_channel_sync tx failed: %s", v10);
        v11 = sub_1000544A0(0x3Au);
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          return 1205;
        goto LABEL_13;
      }
    }
    return 625;
  }
  v8 = 0;
  v7 = 0;
  while (!v7 || next_slot)
  {
    if (!next_slot)
    {
LABEL_25:
      while (1)
      {
        memset(&eventlist, 0, sizeof(eventlist));
        if (kevent(dword_1009786B4, 0, 0, &eventlist, 1, 0) == -1 || (unsigned __int16)eventlist.filter != 65534)
          return 1205;
        v15 = os_channel_get_next_slot(v5, 0, &v25);
        if (v15)
        {
          next_slot = v15;
          break;
        }
      }
    }
    v7 = next_slot;
    if (WORD1(v25) >= (unsigned __int16)(v2 - v8))
      v16 = (unsigned __int16)(v2 - v8);
    else
      v16 = WORD1(v25);
    memmove(__dst[0], &__buf[v8], v16);
    WORD1(v25) = v16;
    os_channel_set_slot_properties(v5, v7, &v25);
    v8 += v16;
    next_slot = os_channel_get_next_slot(v5, v7, &v25);
    if (v2 <= v8)
      goto LABEL_7;
  }
  os_channel_advance_slot(v5, v7);
  if (os_channel_sync(qword_10097DF50, 0) != -1)
    goto LABEL_25;
  if (!sub_10005549C())
    return 1205;
  v21 = __error();
  v22 = strerror(*v21);
  sub_100054530("BM3UART os_channel_sync tx partial failed: %s", v22);
  v23 = sub_1000544A0(0x3Au);
  if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    return 1205;
LABEL_13:
  sub_1006CE7A4();
  return 1205;
}

uint64_t sub_1000E9FCC()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t next_slot;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int *v14;
  char *v15;
  NSObject *v16;
  kevent eventlist;
  _OWORD v19[4];
  _OWORD v20[8];

  sub_10011EC38("RxLoop");
  memset(v20, 0, sizeof(v20));
  v0 = dword_1009786B0;
  if (__darwin_check_fd_set_overflow(dword_1009786B0, v20, 0))
    *(_DWORD *)((char *)v20 + (((unint64_t)v0 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v0;
  if (qword_10097DF50)
  {
    v1 = os_channel_ring_id(qword_10097DF50, 2);
    v2 = os_channel_rx_ring(qword_10097DF50, v1);
    v3 = 4096;
    do
    {
      memset(v19, 0, sizeof(v19));
      memset(&eventlist, 0, sizeof(eventlist));
      v4 = kevent(dword_1009786B8, 0, 0, &eventlist, 1, 0);
      if (eventlist.filter != -1)
        break;
      v5 = v4;
      sub_1000477B8();
      next_slot = os_channel_get_next_slot(v2, 0, v19);
      if (next_slot)
      {
        do
        {
          v7 = next_slot;
          v8 = WORD1(v19[0]);
          if (WORD1(v19[0]))
          {
            v9 = 0;
            do
            {
              v10 = v8 - v9;
              if (v3 >= v10)
                v11 = v10;
              else
                v11 = v3;
              v3 = sub_10016F6B8();
              v9 += v11;
              v8 = WORD1(v19[0]);
            }
            while (v9 < WORD1(v19[0]));
          }
          else
          {
            v9 = 0;
          }
          if (v9 != v8)
            sub_100253460();
          next_slot = os_channel_get_next_slot(v2, v7, v19);
        }
        while (next_slot);
        os_channel_advance_slot(v2, v7);
      }
      sub_1000478A0();
      if (v5 < 1)
        break;
    }
    while (!dword_10097DF58);
  }
  else
  {
    v12 = 4096;
    do
    {
      if (v12 >= 4096)
        v13 = 4096;
      else
        v13 = v12;
      if ((int)read(dword_1009786B0, &unk_10097DF98, v13) < 1)
        break;
      sub_1000477B8();
      v12 = sub_10016F6B8();
      sub_1000478A0();
    }
    while (!dword_10097DF58);
  }
  if (dword_10097DF58)
  {
    sub_1000477B8();
    dword_10097DF5C = 1;
    j__pthread_cond_signal(&stru_10097DF60);
    sub_1000478A0();
  }
  else if (sub_10005549C())
  {
    v14 = __error();
    v15 = strerror(*v14);
    sub_100054530("BM3UART read failed: %s\n", v15);
    v16 = sub_1000544A0(0x3Au);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  return 0;
}

uint64_t sub_1000EA254(uint64_t result)
{
  byte_10097EF98 = result;
  return result;
}

void *sub_1000EA260()
{
  if (byte_10097EF98)
    return &unk_1009786C0;
  else
    return &unk_1009786E0;
}

void *sub_1000EA284()
{
  return &unk_100978700;
}

uint64_t sub_1000EA290(unsigned __int16 *a1)
{
  NSObject *v2;
  uint64_t result;
  NSObject *v4;
  uint8_t buf[4];
  void *v6;

  if (sub_10005549C())
  {
    sub_100054530("deInitChannelQueue channel %x cid=%d", (_DWORD)a1, *a1);
    v2 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v6 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
    goto LABEL_5;
  }
  if (a1)
  {
LABEL_5:
    sub_1002512C0(*((_QWORD **)a1 + 1));
    *((_QWORD *)a1 + 1) = 0;
    sub_1002512C0(*((_QWORD **)a1 + 2));
    result = 0;
    *((_QWORD *)a1 + 2) = 0;
    return result;
  }
  if (sub_10005549C())
  {
    sub_100054530("channel can not be null");
    v4 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  return 101;
}

_OWORD *sub_1000EA3C0(__int16 a1, __int16 a2, int *a3, int a4, __int16 a5)
{
  _OWORD *result;
  int v11;

  result = sub_100052DC0(0xA8uLL);
  *result = 0u;
  result[1] = 0u;
  result[2] = 0u;
  result[3] = 0u;
  result[4] = 0u;
  result[5] = 0u;
  result[6] = 0u;
  result[7] = 0u;
  result[8] = 0u;
  result[9] = 0u;
  *((_QWORD *)result + 20) = 0;
  *((_WORD *)result + 1) = a1;
  *(_WORD *)result = a2;
  v11 = *a3;
  *((_WORD *)result + 4) = *((_WORD *)a3 + 2);
  *((_DWORD *)result + 1) = v11;
  *((_WORD *)result + 5) = a4;
  *((_WORD *)result + 64) = a5;
  *((_BYTE *)result + 144) = a4 != 4;
  return result;
}

void sub_1000EA44C(void *a1)
{
  NSObject *v2;

  if (a1)
  {
    sub_100253FD8((uint64_t)a1 + 16);
    sub_100053298(a1);
  }
  else if (sub_10005549C())
  {
    sub_100054530("cannot free a null pointer");
    v2 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

uint64_t sub_1000EA4C4(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v3;
  __int128 *v4;

  v3 = (uint64_t)(a1 + 8);
  *((_QWORD *)a1 + 3) = a1;
  *((_QWORD *)a1 + 20) = a2;
  *((_DWORD *)a1 + 6) = 626;
  v4 = (__int128 *)sub_10019AEA4((uint64_t)(a1 + 2));
  return sub_1001DBC18(0, *a1, v4, v3, 0);
}

uint64_t sub_1000EA510(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;

  *(_QWORD *)(a1 + 24) = a1;
  *(_QWORD *)(a1 + 160) = a2;
  v3 = *(unsigned __int8 *)(a1 + 144);
  if (v3 >= 3)
  {
    if (sub_10005549C())
    {
      sub_100054530("Priority %d is out of range (max=%d). using default priority", *(unsigned __int8 *)(a1 + 144), 2);
      v4 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    v3 = 0;
    *(_BYTE *)(a1 + 144) = 0;
  }
  v5 = *(_QWORD *)(a1 + 152);
  if (v5)
  {
    v6 = v5 + 8;
    if (sub_100056080(*(_QWORD *)(v5 + 8 + 8 * v3)) < 0x15)
    {
      sub_10025142C(*(_QWORD *)(v6 + 8 * *(unsigned __int8 *)(a1 + 144)), a1, 168);
      sub_1000EA6BC(*(_QWORD *)(a1 + 152));
      return 0;
    }
    if (sub_10005549C())
    {
      sub_100054530("Queue size exceeded MAX(%d)", 20);
      v7 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    v8 = 410;
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("channel can not be null");
      v9 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    v8 = 101;
  }
  sub_100053298((void *)a1);
  if (sub_10005549C())
  {
    sub_100054530("pushPacketToChannelQueue failed with result %!", v8);
    v10 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  return v8;
}

void sub_1000EA6BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  unsigned __int16 *v5;
  __int128 *v6;
  NSObject *v7;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 3))
    {
      v1 = 0;
      v2 = a1 + 8;
      v3 = 1;
      do
      {
        v4 = sub_100251574(*(_QWORD *)(v2 + 8 * v1), 0);
        v5 = (unsigned __int16 *)v4;
        if ((v3 & 1) == 0)
          break;
        v3 = 0;
        v1 = 1;
      }
      while (!v4);
      if (v4)
      {
        v6 = (__int128 *)sub_10019AEA4(v4 + 4);
        if (!sub_1001DBC18((uint64_t)sub_1000EA968, *v5, v6, (uint64_t)(v5 + 8), 0))
          *(_BYTE *)(*((_QWORD *)v5 + 19) + 3) = 0;
      }
    }
  }
  else if (sub_10005549C())
  {
    sub_100054530("sendNextPacket NULL channel");
    v7 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

uint64_t sub_1000EA78C(unsigned __int16 *a1, unsigned int a2, unsigned __int16 a3, char a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  uint64_t result;
  unsigned __int16 *v10;
  _QWORD *v11;

  if (!a1)
    return 101;
  if (!a2)
  {
    v5 = 0;
LABEL_12:
    v10 = &a1[12 * v5];
    *v10 = a3;
    *((_BYTE *)v10 + 2) = a4;
    *((_BYTE *)v10 + 3) = 1;
    *((_QWORD *)v10 + 1) = sub_100251288(0, 0);
    v11 = sub_100251288(0, 0);
    result = 0;
    *((_QWORD *)v10 + 2) = v11;
    return result;
  }
  v4 = 0;
  v5 = a2;
  v6 = a1;
  while (1)
  {
    v8 = *v6;
    v6 += 12;
    v7 = v8;
    if (a2 <= 0xFF && !v7)
      break;
    if (a2 == ++v4)
      goto LABEL_11;
  }
  v5 = v4;
LABEL_11:
  if (v5 <= 0x1D)
    goto LABEL_12;
  return 0;
}

uint64_t sub_1000EA840(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v5;
  uint64_t i;
  uint64_t result;
  uint8_t buf[4];
  void *v9;

  if ((sub_10005549C() & 1) != 0)
  {
    sub_100054530("removeL2capConnection(%d)", a3);
    v5 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v9 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  for (i = 0; i != 720; i += 24)
  {
    result = a1 + i;
    if (*(unsigned __int16 *)(a1 + i) == a3)
    {
      *(_WORD *)result = 0;
      *(_BYTE *)(result + 3) = 0;
      result = sub_1000EA290((unsigned __int16 *)result);
    }
  }
  return result;
}

uint64_t sub_1000EA93C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;

  v3 = 0;
  while (*(unsigned __int16 *)(a1 + v3) != a3)
  {
    v3 += 24;
    if (v3 == 720)
      return 0;
  }
  return a1 + v3;
}

uint64_t sub_1000EA968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  if (!a2)
    sub_100253460();
  v8 = *(_QWORD **)(a2 + 8);
  if (!v8)
    sub_100253460();
  v10 = v8[19];
  v9 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8[20];
  *(_BYTE *)(v10 + 3) = 1;
  if (v9)
  {
    v9(a1, a2, a3, a4);
    v10 = v8[19];
  }
  sub_1000EA44C(v8);
  return sub_1000EA6BC(v10);
}

void sub_1000EA9E8(uint64_t a1, __int16 a2, int a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t *v14;
  uint64_t v15;

  qword_10097EFA0 = a1;
  word_10097EFB8 = a2;
  if (a3 != 1216)
  {
    if ((byte_10097EFC4 & 1) == 0)
      sub_100253460();
    v14 = 0;
    v15 = 0;
    v13 = 0;
    byte_10097EFC4 = 0;
    if (!a3 && (v4 = (unsigned __int16)word_10097EFC0, word_10097EFC0))
    {
LABEL_18:
      if (v4 >= (unsigned __int16)word_10097EFB8)
        v11 = (unsigned __int16)word_10097EFB8;
      else
        v11 = v4;
      v12 = qword_10097EFB0;
      memmove((void *)qword_10097EFA0, (const void *)qword_10097EFB0, v11);
      qword_10097EFB0 = v12 + v11;
      word_10097EFC0 -= v11;
      byte_10097EFC4 = sub_10016F698() == 0;
    }
    else
    {
      LODWORD(v15) = a3;
      BYTE4(v15) = byte_10097EFC8;
      v14 = &v15;
      LOWORD(v13) = 8;
      v5 = sub_10004AE90((uint64_t)sub_1000EABB0, &v13, 0);
      if ((_DWORD)v5)
      {
        v6 = v5;
        if (sub_10005549C())
        {
          sub_100054530("OI_Dispatch_RegisterFunc failed %!", v6);
          v7 = sub_1000544A0(0x3Au);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
      }
      if (qword_10097EFA8)
      {
        sub_100053298((void *)qword_10097EFA8);
        qword_10097EFA8 = 0;
        word_10097EFC0 = 0;
      }
      v8 = 0;
      LOBYTE(v4) = 1;
      do
      {
        v9 = v4;
        v4 = *((unsigned __int16 *)&dword_10097EFD8 + v8);
        if (*((_WORD *)&dword_10097EFD8 + v8))
        {
          v10 = qword_10097EFE0[v8];
          byte_10097EFC8 = *((_BYTE *)&word_10097EFDC + v8);
          qword_10097EFA8 = v10;
          qword_10097EFB0 = v10;
          word_10097EFC0 = v4;
          *((_WORD *)&dword_10097EFD8 + v8) = 0;
          goto LABEL_18;
        }
        v8 = &_mh_execute_header.magic + 1;
      }
      while ((v9 & 1) != 0);
      v4 = (unsigned __int16)word_10097EFC0;
      if (word_10097EFC0)
        goto LABEL_18;
    }
  }
}

void sub_1000EABB0(uint64_t a1)
{
  if (!*(_BYTE *)(qword_10097EFD0 + 2048))
    sub_10019CB24(*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 4), **(unsigned int **)(a1 + 8));
}

uint64_t sub_1000EABD4()
{
  uint64_t result;
  _DWORD *v1;

  qword_10097EFE0[0] = 0;
  *(_QWORD *)algn_10097EFE8 = 0;
  word_10097EFDC = 0;
  dword_10097EFD8 = 0;
  result = sub_10016F630();
  if (!(_DWORD)result)
  {
    v1 = sub_100114588(0x804uLL);
    qword_10097EFD0 = (uint64_t)v1;
    v1[511] = 4;
    *((_BYTE *)v1 + 2048) = 0;
    sub_1000EB3E4(5);
    return 109;
  }
  return result;
}

uint64_t sub_1000EAC34()
{
  if (*(_DWORD *)(qword_10097EFD0 + 2044) == 4)
    return 109;
  else
    return 0;
}

uint64_t sub_1000EAC54()
{
  return 2032;
}

uint64_t sub_1000EAC5C(int a1, __int16 a2, int a3)
{
  uint64_t result;
  unsigned __int16 v7;
  uint64_t v8;
  char v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int16 v13;
  char *v14;
  NSObject *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;

  if (*(_BYTE *)(qword_10097EFD0 + 2048))
    return 129;
  if (a1 == 2)
    v7 = 5;
  else
    v7 = 4;
  if (byte_10097EFC4 == 1)
  {
    v8 = 0;
    v9 = 1;
    while (1)
    {
      v10 = v9;
      if (!*((_WORD *)&dword_10097EFD8 + v8))
        break;
      v9 = 0;
      v8 = &_mh_execute_header.magic + 1;
      if ((v10 & 1) == 0)
        goto LABEL_24;
    }
    if (byte_10097EFC8 == a1)
    {
LABEL_24:
      if (sub_10005549C())
      {
        sub_100054530("OI_HCIIfc_Send_Req, busy fail");
        v15 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      sub_100253460();
      return 118;
    }
    v16 = a3 + v7;
    v17 = (char *)sub_100052DC0(a3 + v7);
    v18 = (uint64_t)v17;
    *v17 = a1;
    *(_WORD *)(v17 + 1) = a2;
    v17[3] = a3;
    if (a1 == 2)
      v17[4] = BYTE1(a3);
    if (a3)
      sub_100053868(&v17[v7]);
    result = 0;
    *((_BYTE *)&word_10097EFDC + v8) = a1;
    *((_WORD *)&dword_10097EFD8 + v8) = v16;
    qword_10097EFE0[v8] = v18;
  }
  else
  {
    if (!qword_10097EFA0)
      sub_100253460();
    v11 = (unsigned __int16)word_10097EFB8;
    if (!word_10097EFB8)
    {
      sub_100253460();
      v11 = (unsigned __int16)word_10097EFB8;
    }
    v12 = qword_10097EFA0;
    result = 105;
    if (qword_10097EFA0 && v11)
    {
      if (a3 + v7 <= v11)
      {
        *(_BYTE *)qword_10097EFA0 = a1;
        *(_WORD *)(v12 + 1) = a2;
        *(_WORD *)(v12 + 3) = a3;
        if (a3)
          sub_100053868((char *)(v12 + v7));
        qword_10097EFB0 = 0;
        word_10097EFC0 = 0;
      }
      else
      {
        v13 = v7 - 1;
        word_10097EFC0 = v13 + a3;
        *(_BYTE *)qword_10097EFA0 = a1;
        v14 = (char *)sub_100052DC0((unsigned __int16)(v13 + a3));
        qword_10097EFA8 = (uint64_t)v14;
        if (!v14)
        {
          if (sub_10005549C())
          {
            sub_100054530("OI_Malloc failed, unable to segment packet");
            v19 = sub_1000544A0(0x3Au);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
          return 106;
        }
        qword_10097EFB0 = (uint64_t)v14;
        *(_WORD *)v14 = a2;
        *((_WORD *)v14 + 1) = a3;
        if (a3)
          sub_100053868(&v14[v13]);
      }
      byte_10097EFC8 = a1;
      byte_10097EFC4 = 1;
      result = sub_10016F698();
      if ((_DWORD)result)
        byte_10097EFC4 = 0;
    }
  }
  return result;
}

uint64_t sub_1000EAEF8(char *__src, int a2)
{
  int v2;
  uint64_t v4;
  int v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  char *v13;
  char v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  int v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  __int16 v22;
  NSObject *v23;
  uint64_t v24;
  unsigned __int16 v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint8_t v32[4];
  uint64_t v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  int v37;

  if (a2)
  {
    v2 = a2;
    do
    {
      v4 = qword_10097EFD0;
      switch(*(_DWORD *)(qword_10097EFD0 + 2044))
      {
        case 0:
        case 4:
          goto LABEL_50;
        case 1:
          v5 = *__src;
          if ((v5 - 1) >= 4u)
          {
            if (sub_10005549C())
            {
              sub_100054530("unknown packet type received %d", v5);
              v20 = sub_1000544A0(0x3Au);
              if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
              {
                v28 = sub_100054494();
                *(_DWORD *)buf = 136446466;
                v35 = v28;
                v36 = 1024;
                v37 = 0xFFFF;
                _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
              }
            }
            v21 = qword_10097EFD0;
            *(_DWORD *)(qword_10097EFD0 + 2044) = 4;
            *(_BYTE *)(v21 + 2048) = 1;
            v6 = 5;
          }
          else
          {
            *(_WORD *)(qword_10097EFD0 + 4) = 0x2000300040003uLL >> (16 * (v5 - 1));
            *(_BYTE *)(v4 + 2042) = v5;
            *(_WORD *)(v4 + 6) = 0;
            *(_DWORD *)(v4 + 2044) = 2;
            v6 = 10;
          }
          sub_1000EB3E4(v6);
          if (*(_DWORD *)(qword_10097EFD0 + 2044) == 2)
          {
            ++__src;
            --v2;
          }
          continue;
        case 2:
          v9 = 0;
          v10 = *(unsigned __int16 *)(qword_10097EFD0 + 4);
          if (v10 >= (unsigned __int16)(v2 - 1))
            v11 = (unsigned __int16)(v2 - 1);
          else
            v11 = *(unsigned __int16 *)(qword_10097EFD0 + 4);
          v12 = v11 + 1;
          v13 = __src;
          break;
        case 3:
          if ((unsigned __int16)v2 >= *(unsigned __int16 *)(qword_10097EFD0 + 4))
            v16 = *(unsigned __int16 *)(qword_10097EFD0 + 4);
          else
            v16 = (unsigned __int16)v2;
          memmove((void *)(qword_10097EFD0 + *(unsigned __int16 *)(qword_10097EFD0 + 6) + 10), __src, v16);
          v17 = qword_10097EFD0;
          v18 = *(unsigned __int16 *)(qword_10097EFD0 + 4);
          v2 -= v16;
          *(_WORD *)(qword_10097EFD0 + 6) += v16;
          __src += v16;
          v19 = v18 - v16;
          *(_WORD *)(v17 + 4) = v19;
          if (v19)
            continue;
          goto LABEL_46;
        default:
          if (sub_10005549C())
          {
            sub_100054530("Invalid receive state %d", *(_DWORD *)(qword_10097EFD0 + 2044));
            v7 = sub_1000544A0(0x3Au);
            if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
              sub_1006CEDF0(v32, &v33, v7);
          }
          v8 = qword_10097EFD0;
          *(_DWORD *)(qword_10097EFD0 + 2044) = 4;
          *(_BYTE *)(v8 + 2048) = 1;
          sub_1000EB3E4(5);
          sub_100253460();
          continue;
      }
      while ((_WORD)v10)
      {
        v14 = *v13++;
        v15 = *(unsigned __int16 *)(v4 + 6);
        *(_WORD *)(v4 + 6) = v15 + 1;
        *(_BYTE *)(v4 + v15 + 10) = v14;
        LOWORD(v10) = v10 - 1;
        *(_WORD *)(v4 + 4) = v10;
        if ((unsigned __int16)++v9 >= (unsigned __int16)v2)
        {
          if ((_WORD)v10)
          {
            v11 = v2;
            if ((unsigned __int16)v12 != (unsigned __int16)v2)
            {
              sub_100253460();
              v11 = v12;
            }
            goto LABEL_45;
          }
          ++v11;
          break;
        }
      }
      *(_DWORD *)(v4 + 2044) = 3;
      switch(*(_BYTE *)(v4 + 2042))
      {
        case 1:
        case 3:
          v22 = *(unsigned __int8 *)(v4 + 12);
          goto LABEL_40;
        case 2:
          v22 = *(_WORD *)(v4 + 12);
          goto LABEL_40;
        case 4:
          v22 = *(unsigned __int8 *)(v4 + 11);
LABEL_40:
          *(_WORD *)(v4 + 4) = v22;
          v25 = *(_WORD *)(v4 + 6) + v22;
          *(_WORD *)(v4 + 8) = v25;
          if (v25 >= 0x7F1u)
          {
            if (sub_10005549C())
            {
              sub_100054530("RxPacketHeader - bogus packet length (%d)", *(unsigned __int16 *)(qword_10097EFD0 + 8));
              v26 = sub_1000544A0(0x3Au);
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              {
                v29 = sub_100054494();
                *(_DWORD *)buf = 136446466;
                v35 = v29;
                v36 = 1024;
                v37 = 0xFFFF;
                _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
              }
            }
            v27 = qword_10097EFD0;
            *(_DWORD *)(qword_10097EFD0 + 2044) = 4;
            *(_BYTE *)(v27 + 2048) = 1;
            sub_1000EB3E4(5);
          }
          break;
        default:
          if (sub_10005549C())
          {
            sub_100054530("Invalid packet type %d", *(unsigned __int8 *)(qword_10097EFD0 + 2042));
            v23 = sub_1000544A0(0x3Au);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              v30 = sub_100054494();
              *(_DWORD *)buf = 136446466;
              v35 = v30;
              v36 = 1024;
              v37 = 0xFFFF;
              _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
            }
          }
          v24 = qword_10097EFD0;
          *(_DWORD *)(qword_10097EFD0 + 2044) = 4;
          *(_BYTE *)(v24 + 2048) = 1;
          sub_1000EB3E4(5);
          sub_100253460();
          v11 = 0;
          break;
      }
LABEL_45:
      __src += (unsigned __int16)v11;
      v2 -= v11;
      v17 = qword_10097EFD0;
      if (!*(_WORD *)(qword_10097EFD0 + 4))
      {
LABEL_46:
        if (*(_BYTE *)(v17 + 2048))
          sub_1000EB6A8();
        else
          sub_1000EB758();
      }
    }
    while ((_WORD)v2);
  }
LABEL_50:
  if (*(_WORD *)(qword_10097EFD0 + 4))
    return *(unsigned __int16 *)(qword_10097EFD0 + 4);
  else
    return 5;
}

uint64_t sub_1000EB3E4(int a1)
{
  if (sub_10004A088(*(_DWORD *)qword_10097EFD0))
    return sub_1002537E8(*(_DWORD *)qword_10097EFD0, a1);
  else
    return sub_10004A9EC((uint64_t)sub_1000EB43C, 0, a1, (int *)qword_10097EFD0);
}

void sub_1000EB43C()
{
  uint64_t v0;
  unsigned int v1;
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;

  v0 = qword_10097EFD0;
  v1 = *(_DWORD *)(qword_10097EFD0 + 2044);
  if (v1 < 2)
  {
    if (*(_BYTE *)(qword_10097EFD0 + 2048))
    {
      if (sub_10005549C())
      {
        sub_100054530("timed out waiting for reset response");
        v4 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      goto LABEL_14;
    }
LABEL_20:
    sub_1000EB3E4(0x7FFFLL);
    return;
  }
  if (v1 - 2 < 2)
  {
    if (sub_10005549C())
    {
      sub_100054530("Timed out while receiving a packet");
      v2 = sub_1000544A0(0x3Au);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    v3 = qword_10097EFD0;
    *(_DWORD *)(qword_10097EFD0 + 2044) = 4;
    *(_BYTE *)(v3 + 2048) = 1;
    sub_1000EB3E4(5);
    return;
  }
  if (v1 == 4)
  {
    if (*(_BYTE *)(qword_10097EFD0 + 2048))
    {
LABEL_14:
      sub_1000EB5D8();
      return;
    }
    *(_DWORD *)(qword_10097EFD0 + 2044) = 1;
    *(_WORD *)(v0 + 4) = 5;
    goto LABEL_20;
  }
  if (sub_10005549C())
  {
    sub_100054530("Invalid receive state %d", *(_DWORD *)(qword_10097EFD0 + 2044));
    v5 = sub_1000544A0(0x3Au);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  v6 = qword_10097EFD0;
  *(_DWORD *)(qword_10097EFD0 + 2044) = 4;
  *(_BYTE *)(v6 + 2048) = 1;
  sub_1000EB3E4(5);
  sub_100253460();
}

uint64_t sub_1000EB5D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v4;

  *(_BYTE *)(qword_10097EFD0 + 2048) = 0;
  v0 = sub_100053ACC();
  v1 = qword_10097EFD0;
  *(_BYTE *)(qword_10097EFD0 + 2048) = 1;
  if ((_DWORD)v0 && (v2 = v0, (_DWORD)v0 != 625))
  {
    if (sub_10005549C())
    {
      sub_100054530("startResynchronize, OI_HCIIfc_Send failed %!", v2);
      v4 = sub_1000544A0(0x3Au);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return sub_1000EB3E4(5);
  }
  else
  {
    *(_DWORD *)(v1 + 2044) = 1;
    *(_WORD *)(v1 + 4) = 5;
    return sub_1000EB3E4(20);
  }
}

void sub_1000EB6A8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char *v3;
  int v4;
  int v5;

  v0 = qword_10097EFD0;
  if (*(_BYTE *)(qword_10097EFD0 + 2042) != 4 || *(_WORD *)(qword_10097EFD0 + 8) != 6)
    goto LABEL_8;
  v1 = 0;
  v2 = 1;
  v3 = &byte_100738D27;
  do
  {
    v4 = (*(v3 - 1) & *(_BYTE *)(qword_10097EFD0 + 10 + v1));
    v5 = *v3;
    v3 += 2;
    if (v4 != v5)
      v2 = 0;
    ++v1;
  }
  while (v1 != 6);
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)(qword_10097EFD0 + 2048) = 0;
    *(_DWORD *)(v0 + 2044) = 1;
    *(_WORD *)(v0 + 4) = 5;
    sub_1000EB3E4(0x7FFF);
    sub_100192340();
  }
  else
  {
LABEL_8:
    sub_1000EB3E4(5);
    *(_DWORD *)(qword_10097EFD0 + 2044) = 4;
  }
}

uint64_t sub_1000EB758()
{
  uint64_t v0;
  _QWORD v2[2];

  if (*(unsigned __int16 *)(qword_10097EFD0 + 8) >= 0x7F1u)
    sub_100253460();
  v2[1] = 0;
  v2[0] = mach_continuous_time();
  sub_100047AB0(*(unsigned __int8 *)(qword_10097EFD0 + 2042), (unsigned __int8 *)(qword_10097EFD0 + 10), *(unsigned __int16 *)(qword_10097EFD0 + 8), (uint64_t)v2);
  v0 = qword_10097EFD0;
  *(_DWORD *)(qword_10097EFD0 + 2044) = 1;
  *(_WORD *)(v0 + 4) = 5;
  return sub_1000EB3E4(0x7FFF);
}

uint64_t sub_1000EB7D4()
{
  return 0;
}

void sub_1000EB7DC(uint64_t a1, __int16 a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const void *v7[2];
  _DWORD v8[2];

  qword_10097EFF0 = a1;
  word_10097EFF8 = a2;
  if (a3 != 1216)
  {
    if ((byte_10097EFFC & 1) == 0)
      sub_100253460();
    v7[0] = (const void *)8;
    byte_10097EFFC = 0;
    sub_10004AD30((uint64_t)&unk_10097F004);
    v8[0] = a3;
    v8[1] = byte_10097F000;
    v7[1] = v8;
    v4 = sub_10004AE90((uint64_t)sub_1000EB8C0, v7, 0);
    if ((_DWORD)v4)
    {
      v5 = v4;
      if (sub_10005549C())
      {
        sub_100054530("OI_Dispatch_RegisterFunc failed %!", v5);
        v6 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
  }
}

void sub_1000EB8C0(uint64_t a1)
{
  sub_10019CB24(*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 4), **(unsigned int **)(a1 + 8));
}

uint64_t sub_1000EB8D0()
{
  uint64_t result;
  _DWORD *v1;

  result = sub_10016F630();
  if (!(_DWORD)result)
  {
    v1 = sub_100114588(0x810uLL);
    qword_10097F010 = (uint64_t)v1;
    v1[509] = 4;
    *((_BYTE *)v1 + 2060) = 0;
    if (*((_BYTE *)v1 + 2040))
      *((_BYTE *)v1 + 2040) = 0;
    qword_10097F020 = 0;
    byte_10097F018 = 0;
    sub_10004AD30((uint64_t)&unk_10097F004);
    byte_10097F01C = 0;
    *(_BYTE *)(qword_10097F010 + 2049) = 0;
    sub_1000EC2E8(5);
    sub_1000E9258();
    return 109;
  }
  return result;
}

uint64_t sub_1000EB95C()
{
  if (*(_DWORD *)(qword_10097F010 + 2036) == 4)
    return 109;
  else
    return 0;
}

uint64_t sub_1000EB978()
{
  sub_1000E92DC();
  if (dword_10097F030)
  {
    sub_100049F6C(dword_10097F030);
    dword_10097F030 = 0;
  }
  return sub_10016F688();
}

uint64_t sub_1000EB9A8()
{
  return 2032;
}

uint64_t sub_1000EB9B0(int a1, __int16 a2, int a3)
{
  char v5;
  uint64_t v6;
  __int16 v7;
  unsigned __int16 v8;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v5 = a1;
  if (a1 != 1 && *(_BYTE *)(qword_10097F010 + 2040))
    return 129;
  if (a1 == 2)
    v7 = 5;
  else
    v7 = 4;
  if (a1 == 7)
    v8 = 3;
  else
    v8 = v7;
  if (byte_10097EFFC == 1)
  {
    sub_100253460();
    return 118;
  }
  else
  {
    if (!qword_10097EFF0)
      sub_100253460();
    v10 = (unsigned __int16)word_10097EFF8;
    if (!word_10097EFF8)
    {
      sub_100253460();
      v10 = (unsigned __int16)word_10097EFF8;
    }
    v11 = qword_10097EFF0;
    v6 = 105;
    if (qword_10097EFF0 && v10)
    {
      if (a3 + v8 <= v10)
      {
        *(_BYTE *)qword_10097EFF0 = v5;
        *(_WORD *)(v11 + 1) = a2;
        *(_WORD *)(v11 + 3) = a3;
        if (a3)
          sub_100053868((char *)(v11 + v8));
        else
          sub_10004A104();
        byte_10097F000 = v5;
        byte_10097EFFC = 1;
        v12 = byte_10097F018;
        sub_1000EC66C();
        if ((v12 & 1) == 0)
          j__usleep(0x32u);
        v6 = sub_10016F698();
        if ((_DWORD)v6)
        {
          sub_10004AD30((uint64_t)dword_10097F004);
          byte_10097EFFC = 0;
        }
        v13 = qword_10097F010;
        if (*(_BYTE *)(qword_10097F010 + 2040) && *(_DWORD *)(qword_10097F010 + 2036) == 4)
        {
          *(_BYTE *)(qword_10097F010 + 2049) = 0;
          *(_DWORD *)(v13 + 2036) = 1;
          *(_WORD *)(v13 + 2042) = 5;
          sub_1000EC2E8(0x7FFF);
        }
      }
      else
      {
        sub_100253460();
        return 105;
      }
    }
  }
  return v6;
}

uint64_t sub_1000EBB4C(char *__src, int a2)
{
  int v2;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  __int16 v30;
  char *v31;
  char v32;
  uint64_t v33;
  __int16 v34;
  size_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  unsigned __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v61;
  uint8_t v62[4];
  uint64_t v63;
  _BYTE buf[12];
  __int16 v65;
  int v66;

  if (a2)
  {
    v2 = a2;
    do
    {
      v4 = qword_10097F010;
      if (*(_BYTE *)(qword_10097F010 + 2040))
      {
        *(_QWORD *)buf = 0;
        v61 = 0;
        sub_1001135CC(&v61);
        sub_10011362C(v61, qword_10097F020, &stru_10097F028, buf, v5, v6, v7);
        if ((_DWORD)v8)
        {
          v9 = v8;
          if (sub_10005549C())
          {
            sub_100054530("OI_AbsoluteTime_Diff returned %!", v9);
            v10 = sub_1000544A0(0x3Au);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
              sub_1006CEDF0(v62, &v63, v10);
          }
        }
        if ((*(unsigned int *)&buf[4] | ((unint64_t)*(unsigned int *)buf << 32)) >= 0x12A153440)
          sub_100112D60(1217);
        j__usleep(0);
        v4 = qword_10097F010;
      }
      switch(*(_DWORD *)(v4 + 2036))
      {
        case 0:
        case 4:
          goto LABEL_57;
        case 1:
          v11 = *__src;
          v12 = v11 - 1;
          if ((v11 - 1) < 7 && ((0x4Fu >> v12) & 1) != 0)
          {
            *(_WORD *)(v4 + 2042) = word_100738D50[v12];
            *(_BYTE *)(v4 + 2048) = v11;
            *(_WORD *)(v4 + 2044) = 0;
            *(_DWORD *)(v4 + 2036) = 2;
            sub_1000EC2E8(20);
          }
          else
          {
            if (sub_10005549C())
            {
              sub_100054530("unknown packet type received %d", v11);
              v20 = sub_1000544A0(0x3Au);
              if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
              {
                v57 = sub_100054494();
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v57;
                v65 = 1024;
                v66 = 0xFFFF;
                _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
              }
            }
            sub_100253320((uint64_t)"UART: unknown packet type received %d\n", v13, v14, v15, v16, v17, v18, v19, v11);
            sub_1000EC4E8(240);
          }
          if (*(_DWORD *)(qword_10097F010 + 2036) == 2)
          {
            ++__src;
            --v2;
          }
          continue;
        case 2:
          v29 = 0;
          v30 = *(_WORD *)(v4 + 2042);
          v31 = __src;
          break;
        case 3:
          if ((unsigned __int16)v2 >= *(unsigned __int16 *)(v4 + 2042))
            v35 = *(unsigned __int16 *)(v4 + 2042);
          else
            v35 = (unsigned __int16)v2;
          memmove((void *)(v4 + *(unsigned __int16 *)(v4 + 2044) + 4), __src, v35);
          v36 = qword_10097F010;
          v37 = *(unsigned __int16 *)(qword_10097F010 + 2042);
          v2 -= v35;
          *(_WORD *)(qword_10097F010 + 2044) += v35;
          __src += v35;
          v38 = v37 - v35;
          *(_WORD *)(v36 + 2042) = v38;
          if (v38)
            continue;
          goto LABEL_51;
        default:
          if (sub_10005549C())
          {
            sub_100054530("Invalid receive state %d", *(_DWORD *)(qword_10097F010 + 2036));
            v28 = sub_1000544A0(0x3Au);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              v56 = sub_100054494();
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = v56;
              v65 = 1024;
              v66 = 0xFFFF;
              _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
            }
          }
          sub_100253320((uint64_t)"UART: Invalid receive state %d\n", v21, v22, v23, v24, v25, v26, v27, *(unsigned int *)(qword_10097F010 + 2036));
          sub_1000EC4E8(242);
          sub_100253460();
          continue;
      }
      while (v30)
      {
        v32 = *v31++;
        v33 = *(unsigned __int16 *)(v4 + 2044);
        *(_WORD *)(v4 + 2044) = v33 + 1;
        *(_BYTE *)(v4 + v33 + 4) = v32;
        v30 = *(_WORD *)(v4 + 2042) - 1;
        *(_WORD *)(v4 + 2042) = v30;
        if ((unsigned __int16)++v29 >= (unsigned __int16)v2)
        {
          v29 = v2;
          if (v30)
            goto LABEL_50;
          break;
        }
      }
      *(_DWORD *)(v4 + 2036) = 3;
      switch(*(_BYTE *)(v4 + 2048))
      {
        case 1:
        case 3:
          v34 = *(unsigned __int8 *)(v4 + 6);
          goto LABEL_45;
        case 2:
          v34 = *(_WORD *)(v4 + 6);
          goto LABEL_45;
        case 4:
          v34 = *(unsigned __int8 *)(v4 + 5);
          goto LABEL_45;
        case 7:
          if (*(_BYTE *)(v4 + 4) == 1)
            *(_BYTE *)(v4 + 2048) = 8;
          v34 = 62;
LABEL_45:
          *(_WORD *)(v4 + 2042) = v34;
          v47 = *(_WORD *)(v4 + 2044) + v34;
          *(_WORD *)(v4 + 2046) = v47;
          if (v47 >= 0x7F1u)
          {
            if (sub_10005549C())
            {
              sub_100054530("RxPacketHeader - bogus packet length (%d)", *(unsigned __int16 *)(qword_10097F010 + 2046));
              v55 = sub_1000544A0(0x3Au);
              if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
              {
                v58 = sub_100054494();
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v58;
                v65 = 1024;
                v66 = 0xFFFF;
                _os_log_error_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
              }
            }
            sub_100253320((uint64_t)"UART: RxPacketHeader - bogus packet length (%d)\n", v48, v49, v50, v51, v52, v53, v54, *(unsigned __int16 *)(qword_10097F010 + 2046));
            sub_1000EC4E8(244);
          }
          break;
        default:
          if (sub_10005549C())
          {
            sub_100054530("Invalid packet type %d", *(unsigned __int8 *)(qword_10097F010 + 2048));
            v46 = sub_1000544A0(0x3Au);
            if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
            {
              v59 = sub_100054494();
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = v59;
              v65 = 1024;
              v66 = 0xFFFF;
              _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
            }
          }
          sub_100253320((uint64_t)"UART: Invalid packet type %d\n", v39, v40, v41, v42, v43, v44, v45, *(unsigned __int8 *)(qword_10097F010 + 2048));
          sub_1000EC4E8(240);
          sub_100253460();
          v29 = 0;
          break;
      }
LABEL_50:
      __src += (unsigned __int16)v29;
      v2 -= v29;
      v36 = qword_10097F010;
      if (!*(_WORD *)(qword_10097F010 + 2042))
      {
LABEL_51:
        if (*(_BYTE *)(v36 + 2040))
        {
          sub_1000EC788();
        }
        else
        {
          if (*(unsigned __int16 *)(v36 + 2046) >= 0x7F1u)
            sub_100253460();
          sub_1000EC804();
        }
      }
    }
    while ((_WORD)v2);
  }
LABEL_57:
  if (*(_WORD *)(qword_10097F010 + 2042))
    return *(unsigned __int16 *)(qword_10097F010 + 2042);
  else
    return 5;
}

uint64_t sub_1000EC150(int a1, __int16 a2, size_t __len, void *__src)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1;
  if (a1 != 1 && *(_BYTE *)(qword_10097F010 + 2040))
    return 129;
  v6 = 4;
  if (a1 == 2)
    v6 = 5;
  if (byte_10097EFFC == 1)
  {
    sub_100253460();
    return 118;
  }
  else
  {
    v7 = qword_10097EFF0;
    if (qword_10097EFF0)
      v8 = word_10097EFF8 == 0;
    else
      v8 = 1;
    if (v8)
    {
      return 105;
    }
    else
    {
      *(_BYTE *)qword_10097EFF0 = a1;
      *(_WORD *)(v7 + 1) = a2;
      *(_WORD *)(v7 + 3) = __len;
      memmove((void *)(v7 + v6), __src, __len);
      byte_10097F000 = v4;
      byte_10097EFFC = 1;
      sub_1000EC66C();
      v9 = sub_10016F698();
      v5 = v9;
      if ((_DWORD)v9)
      {
        sub_10004AD30((uint64_t)dword_10097F004);
        byte_10097EFFC = 0;
      }
      v10 = qword_10097F010;
      if (*(_BYTE *)(qword_10097F010 + 2040) && *(_DWORD *)(qword_10097F010 + 2036) == 4)
      {
        *(_BYTE *)(qword_10097F010 + 2049) = 0;
        *(_DWORD *)(v10 + 2036) = 1;
        *(_WORD *)(v10 + 2042) = 5;
        sub_1000EC2E8(0x7FFF);
      }
    }
  }
  return v5;
}

void sub_1000EC28C(int a1)
{
  if (a1)
  {
    if (!*(_BYTE *)(qword_10097F010 + 2040))
    {
      *(_BYTE *)(qword_10097F010 + 2040) = 1;
      sub_1001135CC(&qword_10097F020);
      sub_1001135F4(&stru_10097F028);
    }
  }
  else
  {
    if (*(_BYTE *)(qword_10097F010 + 2040))
      *(_BYTE *)(qword_10097F010 + 2040) = 0;
    qword_10097F020 = 0;
  }
}

uint64_t sub_1000EC2E8(int a1)
{
  if (sub_10004A088(*(_DWORD *)qword_10097F010))
    return sub_1002537E8(*(_DWORD *)qword_10097F010, a1);
  else
    return sub_10004A9EC((uint64_t)sub_1000EC340, 0, a1, (int *)qword_10097F010);
}

void sub_1000EC340()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;

  v0 = qword_10097F010;
  v1 = *(_DWORD *)(qword_10097F010 + 2036);
  if (v1 < 2)
  {
    if (!*(_BYTE *)(qword_10097F010 + 2040))
    {
LABEL_14:
      sub_1000EC2E8(0x7FFFLL);
      return;
    }
    if (sub_10005549C())
    {
      sub_100054530("timed out waiting for reset response %d", *(_DWORD *)(qword_10097F010 + 2036));
      v10 = sub_1000544A0(0x3Au);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1006CEE54();
    }
  }
  else
  {
    if (v1 - 2 < 2)
    {
      if (sub_10005549C())
      {
        sub_100054530("Timed out while receiving a packet. Current state:%d", *(_DWORD *)(qword_10097F010 + 2036));
        v9 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          sub_1006CEE54();
      }
      sub_100253320((uint64_t)"UART: Timed out while receiving a packet. Current state:%d\n", v2, v3, v4, v5, v6, v7, v8, *(unsigned int *)(qword_10097F010 + 2036));
      sub_1000EC4E8(241);
      return;
    }
    if (v1 == 4)
    {
      if (*(_BYTE *)(qword_10097F010 + 2040))
        return;
      *(_BYTE *)(qword_10097F010 + 2049) = 0;
      *(_DWORD *)(v0 + 2036) = 1;
      *(_WORD *)(v0 + 2042) = 5;
      goto LABEL_14;
    }
    if (sub_10005549C())
    {
      sub_100054530("Invalid receive state %d", *(_DWORD *)(qword_10097F010 + 2036));
      v18 = sub_1000544A0(0x3Au);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_100253320((uint64_t)"UART: Invalid receive state %d\n", v11, v12, v13, v14, v15, v16, v17, *(unsigned int *)(qword_10097F010 + 2036));
    sub_1000EC4E8(243);
    sub_100253460();
  }
}

uint64_t sub_1000EC4E8(int a1)
{
  NSObject *v2;
  uint64_t v3;

  if (sub_10005549C())
  {
    sub_100054530("RxErrorDetected:%d", a1);
    v2 = sub_1000544A0(0x3Au);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1006CE80C();
  }
  v3 = qword_10097F010;
  if (!*(_BYTE *)(qword_10097F010 + 2040))
  {
    *(_WORD *)(qword_10097F010 + 4) = 272;
    *(_BYTE *)(v3 + 6) = a1;
    *(_WORD *)(v3 + 2046) = 3;
    *(_BYTE *)(v3 + 2048) = 4;
    sub_1000EC5A4();
    v3 = qword_10097F010;
  }
  *(_DWORD *)(v3 + 2036) = 4;
  sub_1000EC28C(1);
  return sub_1000EC2E8(5);
}

void sub_1000EC5A4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v2[2];

  v0 = qword_10097F010;
  if (*(unsigned __int16 *)(qword_10097F010 + 2046) >= 0x7F1u)
  {
    sub_100253460();
    v0 = qword_10097F010;
  }
  if ((*(_BYTE *)(v0 + 2048) - 7) > 1u)
  {
    *(_BYTE *)(v0 + 2049) = 0;
    *(_DWORD *)(v0 + 2036) = 1;
    *(_WORD *)(v0 + 2042) = 5;
    sub_1000EC2E8(0x7FFFLL);
    v2[1] = 0;
    v2[0] = mach_continuous_time();
    sub_100047AB0(*(unsigned __int8 *)(qword_10097F010 + 2048), (unsigned __int8 *)(qword_10097F010 + 4), *(unsigned __int16 *)(qword_10097F010 + 2046), (uint64_t)v2);
  }
  else
  {
    sub_10004A360();
    v1 = qword_10097F010;
    *(_BYTE *)(qword_10097F010 + 2049) = 0;
    *(_DWORD *)(v1 + 2036) = 1;
    *(_WORD *)(v1 + 2042) = 5;
    sub_1000EC2E8(0x7FFFLL);
  }
}

void sub_1000EC66C()
{
  if (byte_10097F01C == 1)
  {
    do
      j__usleep(0);
    while ((byte_10097F01C & 1) != 0);
  }
  if ((byte_10097F018 & 1) == 0)
  {
    sub_10004A9EC((uint64_t)sub_1000EC6E4, 0, 2, &dword_10097F030);
    sub_10011D280("H4 wake");
    sub_1000E9258();
    byte_10097F018 = 1;
  }
}

void sub_1000EC6E4()
{
  uint64_t v0;

  v0 = 0;
  sub_10004AD30((uint64_t)&v0);
  if (sub_100258A4C(dword_10097F004, (int *)&v0) < 0xC8)
    goto LABEL_4;
  byte_10097F01C = 1;
  byte_10097F018 = 0;
  if (byte_10097EFFC == 1)
  {
    byte_10097F018 = 1;
    byte_10097F01C = 0;
LABEL_4:
    sub_10004A9EC((uint64_t)sub_1000EC6E4, 0, 2, &dword_10097F030);
    return;
  }
  sub_1000E92DC();
  sub_10011D280("H4 sleep");
  byte_10097F01C = 0;
}

void sub_1000EC788()
{
  uint64_t v0;
  char v1;
  char *v2;
  int v3;
  int v4;

  if (*(_BYTE *)(qword_10097F010 + 2048) == 4 && *(_WORD *)(qword_10097F010 + 2046) == 6)
  {
    v0 = 0;
    v1 = 1;
    v2 = &byte_100738D44;
    do
    {
      v3 = (*(v2 - 1) & *(_BYTE *)(qword_10097F010 + 4 + v0));
      v4 = *v2;
      v2 += 2;
      if (v3 != v4)
        v1 = 0;
      ++v0;
    }
    while (v0 != 6);
    if ((v1 & 1) != 0)
    {
      if (*(_BYTE *)(qword_10097F010 + 2040))
        *(_BYTE *)(qword_10097F010 + 2040) = 0;
      qword_10097F020 = 0;
      sub_1000EC5A4();
    }
  }
}

void sub_1000EC804()
{
  uint64_t v0;
  _QWORD v1[2];

  v0 = qword_10097F010;
  if (*(unsigned __int16 *)(qword_10097F010 + 2046) >= 0x7F1u)
  {
    sub_100253460();
    v0 = qword_10097F010;
  }
  if (*(_BYTE *)(v0 + 2060))
    goto LABEL_6;
  if ((*(_BYTE *)(v0 + 2048) - 7) <= 1u)
  {
    sub_10004A360();
    v0 = qword_10097F010;
LABEL_6:
    *(_BYTE *)(v0 + 2049) = 0;
    *(_DWORD *)(v0 + 2036) = 1;
    *(_WORD *)(v0 + 2042) = 5;
    sub_1000EC2E8(0x7FFF);
    return;
  }
  *(_BYTE *)(v0 + 2049) = 0;
  *(_DWORD *)(v0 + 2036) = 1;
  *(_WORD *)(v0 + 2042) = 5;
  sub_1000EC2E8(0x7FFF);
  v1[1] = 0;
  v1[0] = mach_continuous_time();
  sub_100047AB0(*(unsigned __int8 *)(qword_10097F010 + 2048), (unsigned __int8 *)(qword_10097F010 + 4), *(unsigned __int16 *)(qword_10097F010 + 2046), (uint64_t)v1);
}

uint64_t sub_1000EC8D8()
{
  unsigned int v0;
  uint64_t v2;

  if (sub_100114A4C() && byte_10097F018 == 1)
  {
    v2 = 0;
    sub_10004AD30((uint64_t)&v2);
    v0 = sub_100258A4C(dword_10097F004, (int *)&v2);
    if (v0 <= 0xC8)
      j__usleep(1000 * (201 - v0));
    byte_10097F01C = 1;
    byte_10097F018 = 0;
    sub_1000E92DC();
    sub_10011D280("H4/AP sleep");
    byte_10097F01C = 0;
  }
  return 0;
}

void sub_1000EC970()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;

  if (byte_10097F018 == 1)
  {
    if (dword_10097F030)
    {
      sub_100049F6C(dword_10097F030);
      dword_10097F030 = 0;
    }
    v2 = 0;
    sub_10004AD30((uint64_t)&v2);
    if (byte_10097EFFC == 1)
    {
      while (1)
      {
        v1 = 0;
        sub_10004AD30((uint64_t)&v1);
        j__usleep(1u);
        if (sub_100258A4C((int *)&v2, (int *)&v1) >= 0x3E8)
          break;
        if ((byte_10097EFFC & 1) == 0)
          goto LABEL_7;
      }
      if (sub_10005549C())
      {
        sub_100054530("transportBusy for too long! (more than %dms)", 1000);
        v0 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      sub_100112D60(1217);
      sub_1000ECA7C();
    }
    else
    {
LABEL_7:
      byte_10097F01C = 1;
      byte_10097F018 = 0;
      j__usleep(0x9C40u);
      sub_1000E92DC();
      sub_10011D280("H4/AP sleep now");
      byte_10097F01C = 0;
    }
  }
}

void sub_1000ECA7C()
{
  *(_BYTE *)(qword_10097F010 + 2060) = 1;
}

uint64_t sub_1000ECA90(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t *i;

  if (!dword_100994BF4)
    return 414;
  v2 = 0;
  for (i = qword_100994C30; !a1 || *i != a1; i += 134)
  {
    if (dword_100994BF4 == ++v2)
      return 414;
  }
  *((_BYTE *)i + 444) = a2;
  sub_1000ECAFC(4u, 0, (unsigned __int16)v2);
  return 0;
}

void sub_1000ECAFC(unsigned int a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  unsigned int *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t *v23;
  unsigned int *v24;
  int v25;
  int v26;
  unsigned int v27;
  NSObject *v28;
  int v29;
  unsigned int v30;
  uint64_t *v31;
  unsigned int *v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  NSObject *v48;
  void *v49;
  char v50;
  unsigned int v51;
  uint64_t *v52;
  int v53;
  unsigned int v54;
  NSObject *v55;
  void *v56;
  uint64_t *v57;
  uint64_t *v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  uint64_t *v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  uint64_t *v68;
  unsigned int v69;
  NSObject *v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t *v74;
  char *v75;
  uint64_t *v76;
  uint64_t v77;
  const char *v78;
  const char *v79;
  const char *v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  void *v86;
  uint64_t *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t *v95;
  _DWORD *v96;
  int v97;
  unsigned int v98;
  _BOOL4 v99;
  uint64_t *v100;
  char v101;
  uint64_t *v102;
  _DWORD *v103;
  int v104;
  char v105;
  uint64_t *v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  const char *v112;
  int v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  const void *v122;
  unsigned __int16 *v123;
  uint64_t v124;
  int v125;
  unsigned __int16 v126;
  uint8_t buf[4];
  void *v128;

  v126 = a3;
  v125 = 0;
  v6 = a3;
  v7 = (unsigned int *)&qword_100994C30[134 * a3];
  v8 = 274877907 * v7[55];
  v9 = 274877907 * v7[54];
  v123 = 0;
  v124 = 0;
  v122 = 0;
  sub_10004AD30((uint64_t)&v124);
  v10 = v7[57];
  if (!v10)
    v10 = 0x3E8u / LODWORD(qword_100994C30[134 * v6 + 28]);
  v11 = v8 >> 38;
  v12 = v9 >> 38;
  if (BYTE2(qword_100994C30[134 * v6 + 1]) && (v13 = LODWORD(qword_100994C30[134 * v6 + 9]), (_DWORD)v13))
  {
    v14 = 0;
    v15 = &qword_100994C30[134 * v6];
    v16 = v15[8];
    v17 = *((unsigned __int8 *)v15 + 76);
    v18 = (unsigned __int8 *)(v16 + 1);
    while (1)
    {
      v19 = *v18;
      v18 += 64;
      if (v19 == v17)
        break;
      if (v13 == ++v14)
        goto LABEL_8;
    }
    v20 = v14;
  }
  else
  {
LABEL_8:
    v20 = 0;
  }
  v118 = v8 >> 38;
  v120 = v20;
  if (a1 - 1 >= 3)
  {
    if (!a1)
    {
      v23 = &qword_100994C30[134 * v6];
      v26 = *((_DWORD *)v23 + 25);
      v24 = (unsigned int *)v23 + 25;
      v25 = v26;
      if (v26)
        v27 = (5 * v25 + a2) / 6;
      else
        v27 = a2;
      *v24 = v27;
      if (HIDWORD(qword_100994C30[134 * v6 + 13]))
      {
        v29 = sub_100258988((uint64_t)&v124);
        v30 = v29 - sub_100258988((uint64_t)&qword_100994C30[134 * v126 + 17]);
        v6 = v126;
        v31 = &qword_100994C30[134 * v126];
        v33 = *((_DWORD *)v31 + 26);
        v32 = (unsigned int *)(v31 + 13);
        v34 = (5 * v33 + v30) / 6;
        v117 = v30;
        if (v33)
          v35 = v34;
        else
          v35 = v30;
        *v32 = v35;
      }
      else
      {
        v117 = 0;
      }
      qword_100994C30[134 * v6 + 17] = v124;
      goto LABEL_32;
    }
    if (a1 != 4)
    {
      if (sub_10005549C())
      {
        sub_100054530("TS inputType %d", a1);
        v28 = sub_1000544A0(0x57u);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
      sub_100253460();
      v117 = 0;
      v6 = v126;
      goto LABEL_32;
    }
    if (BYTE4(qword_100994C30[134 * v6 + 55]))
    {
      v117 = 0;
      v22 = 0;
      v21 = 1;
      goto LABEL_64;
    }
  }
  if (HIDWORD(qword_100994C30[134 * v6 + 13]) <= 0xA)
  {
    v21 = sub_1000EE908(a3, (int)v12 + (int)v11, v10, v10, v20, &v125);
    v117 = 0;
    v22 = 0;
    goto LABEL_64;
  }
  v117 = 0;
LABEL_32:
  v123 = &v126;
  LOWORD(v122) = 2;
  v36 = sub_10004A088(qword_100994C30[134 * v6 + 55]);
  v37 = (unsigned int *)&qword_100994C30[134 * v126 + 55];
  if (v36)
    v38 = sub_1002537E8(*v37, 30);
  else
    v38 = sub_10004A9EC((uint64_t)sub_1000EEB94, &v122, 30, (int *)v37);
  v39 = v38;
  if ((_DWORD)v38)
  {
    if (sub_10005549C())
    {
      sub_100054530("Transport timer registration failed with status %!", v39);
      v40 = sub_1000544A0(0x57u);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    sub_100253460();
  }
  v41 = v126;
  if (LODWORD(qword_100994C30[134 * v126 + 6]) != 6)
  {
    v22 = 0;
LABEL_65:
    v50 = 1;
    v119 = v20;
    goto LABEL_78;
  }
  if (HIDWORD(qword_100994C30[134 * v126 + 13]) < 0xB)
  {
    v22 = 0;
LABEL_46:
    v21 = v20;
    goto LABEL_59;
  }
  v42 = qword_100994C30[134 * v126 + 13];
  if (v42)
    v43 = HIDWORD(qword_100994C30[134 * v126 + 12]) * (0x3E8 / v42) / 0x3E8;
  else
    v43 = HIDWORD(qword_100994C30[134 * v126 + 12]);
  v22 = 8 * v43;
  if ((int)v12 + (int)v11 <= 8 * v43)
    v44 = 8 * v43;
  else
    v44 = v12 + v11;
  if (v10 >= v42)
    v45 = qword_100994C30[134 * v126 + 13];
  else
    v45 = v10;
  if (v10)
    v46 = v45;
  else
    v46 = qword_100994C30[134 * v126 + 13];
  v21 = sub_1000EE908(v126, v44, v46, v10, v20, &v125);
  v41 = v126;
  if ((a1 & 0xFFFFFFFD) == 1 || BYTE4(qword_100994C30[134 * v126 + 55]))
    goto LABEL_59;
  v90 = sub_100258988((uint64_t)&v124);
  v91 = sub_100258988((uint64_t)&qword_100994C30[134 * v126 + 16]);
  v92 = v126;
  v93 = v90 - v91;
  if (v90 == v91)
    v94 = 0;
  else
    v94 = 8 * HIDWORD(qword_100994C30[134 * v126 + 11]) / v93;
  if (HIDWORD(qword_100994C30[134 * v126 + 15]) == 1
    && (v93 < 0x1389
     || v93 <= 0x2710
     && v21 < v20
     && v94 > *(_DWORD *)(qword_100994C30[134 * v126 + 8] + ((unint64_t)v21 << 6) + 4)))
  {
    v125 = 8;
    v21 = v20;
    goto LABEL_135;
  }
  if (v21 <= v20)
  {
    if (v21 < v20)
    {
      v102 = &qword_100994C30[134 * v126];
      v104 = *((_DWORD *)v102 + 30);
      v103 = v102 + 15;
      if (v104 == 1)
        v105 = 0;
      else
        v105 = BYTE6(qword_100994C30[134 * v126 + 9]);
      *v103 = 2;
      v101 = v105 + 1;
      BYTE6(qword_100994C30[134 * v92 + 9]) = v105 + 1;
      goto LABEL_138;
    }
LABEL_135:
    v101 = 0;
    v106 = &qword_100994C30[134 * v126];
    *((_BYTE *)v106 + 78) = 0;
    *((_DWORD *)v106 + 30) = 0;
    goto LABEL_138;
  }
  v95 = &qword_100994C30[134 * v126];
  v97 = *((_DWORD *)v95 + 30);
  v96 = v95 + 15;
  if (v97 == 2)
    BYTE6(qword_100994C30[134 * v126 + 9]) = 0;
  *v96 = 1;
  v98 = sub_1001F4E24();
  v92 = v126;
  if (v98 <= 0xE && !BYTE6(qword_100994C30[134 * v126 + 9]))
  {
    v99 = sub_10019AC00(qword_100994C30[134 * v126]);
    v92 = v126;
    if (v99)
    {
      sub_100192918((uint64_t)sub_1000EEE6C);
      v92 = v126;
    }
  }
  v100 = &qword_100994C30[134 * v92];
  v101 = *((_BYTE *)v100 + 78) + 1;
  *((_BYTE *)v100 + 78) = v101;
LABEL_138:
  if (!v125)
  {
    v41 = v92;
    goto LABEL_46;
  }
  if ((v101 & 0xFC) == 0)
    v21 = v20;
  v41 = v92;
LABEL_59:
  if (!LOBYTE(qword_100994C30[134 * v41 + 133]))
  {
LABEL_64:
    if (v21 == (_DWORD)v20)
      goto LABEL_65;
    v51 = v126;
    v52 = &qword_100994C30[134 * v126];
    *((_BYTE *)v52 + 78) = 0;
    *((_DWORD *)v52 + 29) = v21;
    *((_DWORD *)v52 + 30) = 0;
    v53 = v125;
    if (a1 == 2)
      v53 = v125 | 0x40;
    v119 = v21;
    *((_DWORD *)v52 + 28) = v53;
    if (*((_DWORD *)v52 + 40) != *((_DWORD *)v52 + 48)
      && WORD2(qword_100994C30[134 * v51 + 20]) != WORD2(qword_100994C30[134 * v51 + 24]))
    {
      v121 = 0;
      sub_100113518((uint64_t)&v121);
      v54 = 1000 * (v121 - LODWORD(qword_100994C30[134 * v126 + 20]))
          - SWORD2(qword_100994C30[134 * v126 + 20])
          + SWORD2(v121);
      if (v54 >> 2 < 0x465)
      {
LABEL_76:
        v50 = 0;
        goto LABEL_78;
      }
      if (sub_10005549C())
      {
        sub_100054530("TS connection timeout detected %d mseconds ago, allowing transport switch", v54);
        v55 = sub_1000544A0(0x57u);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          v56 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          v128 = v56;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      v57 = &qword_100994C30[134 * dword_100994BF4];
      v58 = &qword_100994C30[134 * v126];
      *((_DWORD *)v58 + 40) = *((_DWORD *)v57 + 48);
      *((_WORD *)v58 + 82) = *((_WORD *)v57 + 98);
    }
    sub_10004AE90((uint64_t)sub_1000EDB64, 0, 0);
    goto LABEL_76;
  }
  if (sub_10005549C())
  {
    v47 = v22;
    sub_100054530("Disabling upgrade due to failed security authentication, we'll retry later");
    v48 = sub_1000544A0(0x57u);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      v49 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v128 = v49;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
    v50 = 1;
    v119 = v20;
    v22 = v47;
  }
  else
  {
    v50 = 1;
    v119 = v20;
  }
LABEL_78:
  v59 = sub_100258988((uint64_t)&v124);
  v60 = sub_100258988((uint64_t)&qword_100994C30[134 * v126 + 18]);
  v61 = v126;
  if (!a1)
  {
    ++LODWORD(qword_100994C30[134 * v126 + 23]);
    LODWORD(qword_100994C30[134 * v126 + 21]) += sub_1001A240C(0);
    v62 = sub_1001A240C(2);
    v61 = v126;
    v63 = &qword_100994C30[134 * v126];
    v64 = *((_DWORD *)v63 + 43) + v62;
    v65 = *((_DWORD *)v63 + 46);
    v66 = *((_DWORD *)v63 + 42) / v65;
    *((_DWORD *)v63 + 43) = v64;
    *((_DWORD *)v63 + 44) = v66;
    *((_DWORD *)v63 + 45) = v64 / v65;
  }
  v67 = v61;
  v68 = &qword_100994C30[134 * v61];
  if (!*((_DWORD *)v68 + 18) || !qword_100994C30[134 * v61 + 8])
  {
    if (!sub_10005549C())
      goto LABEL_108;
    sub_100054530("Caps is null while upgrade request: lTsPeers[peerIndex].caps=%d.  peerIndex=%d Handle=0x%s", qword_100994C30[134 * v126 + 8], v126, (const char *)qword_100994C30[134 * v126]);
    v70 = sub_1000544A0(0x57u);
    if (!os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
      goto LABEL_108;
    goto LABEL_107;
  }
  v69 = v59 - v60;
  if ((v50 & 1) != 0)
  {
    if (a1)
      goto LABEL_93;
  }
  else
  {
    if (sub_1000F0414(*v68))
      goto LABEL_93;
    if (a1)
      goto LABEL_93;
    v67 = v126;
    if (LODWORD(qword_100994C30[134 * v126 + 10]) != *(unsigned __int8 *)(qword_100994C30[134 * v126 + 8]
                                                                         + ((unint64_t)v119 << 6)
                                                                         + 1))
      goto LABEL_93;
  }
  if (v69 <= 0xF9F && !byte_10097F041)
    goto LABEL_110;
LABEL_93:
  if (sub_1001F4E24() <= 0xE && v69 >= 0xFA0)
  {
    v71 = sub_100192918((uint64_t)sub_1000EEE6C);
    if ((_DWORD)v71)
    {
      v72 = v71;
      if (sub_10005549C())
      {
        sub_100054530("Read RSSI failed with status %!", v72);
        v73 = sub_1000544A0(0x57u);
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
    }
  }
  sub_10004AD30((uint64_t)&qword_100994C30[134 * v126 + 18]);
  if (!sub_10005549C())
    goto LABEL_108;
  v74 = &qword_100994C30[134 * v126];
  v75 = a1 > 4 ? "" : off_10091A490[a1];
  v112 = v75;
  v113 = *((_DWORD *)v74 + 27);
  v111 = *((_DWORD *)v74 + 29);
  v76 = &qword_100994C30[134 * v126];
  v110 = *((_DWORD *)v76 + 26);
  v109 = *((_DWORD *)v76 + 25);
  v108 = v125;
  v107 = *((unsigned __int8 *)v76 + 78);
  v77 = *((int *)v76 + 30);
  v115 = v10;
  v116 = a2;
  v114 = v22;
  v78 = v77 > 2 ? "" : off_10091A4B8[v77];
  v79 = sub_100173660(qword_100994C30[134 * v126 + 10]);
  v80 = sub_100173660(HIDWORD(qword_100994C30[134 * v126 + 10]));
  v81 = sub_1001DBA20();
  v82 = qword_100994C30[134 * v126 + 11];
  v83 = sub_1001DB9D8();
  v84 = sub_1001A240C(0);
  v85 = sub_1001A240C(2);
  sub_100054530("TS Assess [%d]: t {%d->%d, %d}, in {%s, %d, %d}, ewma {g %d, l %d, t %d}, req {%d, %d, %d}, rsn 0x%2x, cfm {%d, %s}, preq {%s, %s}, B {Tx %d TxQ %d, Rx %d}, Cav {%d, %d}, r %d, f %d, p %d, s %d", v113, v120, v119, v111, v112, v117, v116, v110, v109, v114, v12, v118, v115, v108, v107, v78, v79,
    v80,
    v81,
    v82,
    v83,
    v84,
    v85,
    HIDWORD(qword_100994C30[134 * v126 + 23]),
    BYTE4(qword_100994C30[134 * v126 + 55]),
    byte_10097F040,
    LOBYTE(qword_100994C30[134 * v126 + 133]));
  v70 = sub_1000544A0(0x57u);
  if (!os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
    goto LABEL_108;
LABEL_107:
  v86 = sub_100054494();
  *(_DWORD *)buf = 136446210;
  v128 = v86;
  _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
LABEL_108:
  if (a1)
    return;
  v67 = v126;
LABEL_110:
  v87 = &qword_100994C30[134 * v67];
  v88 = *((_DWORD *)v87 + 27);
  if (v88 == -2)
    v89 = 10;
  else
    v89 = v88 + 1;
  *((_DWORD *)v87 + 27) = v89;
}

uint64_t sub_1000ED770(uint64_t result, int a2, int a3)
{
  dword_10097F034 = a2;
  dword_10097F038 = a3;
  dword_10097F03C = result;
  return result;
}

void sub_1000ED78C(uint64_t a1, int a2, int a3, int a4, int a5)
{
  NSObject *v10;
  uint64_t v11;
  unsigned __int16 v12;
  int v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int16 *v24;
  NSObject *v25;
  uint8_t buf[4];
  void *v27;

  if (sub_10005549C())
  {
    sub_100054530("Setting link requirement hint for peer to %d pps, %d Bps input, %d Bps output, clientHighPowerAssertion set to %d", a2, a3, a4, a5);
    v10 = sub_1000544A0(0x57u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v27 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (dword_100994BF4)
  {
    v11 = 0;
    v12 = 0;
    while (qword_100994C30[v11] != a1)
    {
      ++v12;
      v11 += 134;
      if (134 * dword_100994BF4 == v11)
        return;
    }
    v13 = dword_10097F03C;
    v14 = dword_10097F034;
    if (dword_10097F03C | dword_10097F034 | dword_10097F038)
    {
      v15 = dword_10097F038;
    }
    else
    {
      v13 = a2;
      v14 = a3;
      v15 = a4;
    }
    v16 = &qword_100994C30[v11];
    *((_DWORD *)v16 + 55) = v15;
    *((_DWORD *)v16 + 56) = v13;
    *((_DWORD *)v16 + 54) = v14;
    if ((((HIBYTE(qword_100994C30[v11 + 55]) == 0) ^ a5) & 1) == 0)
    {
      *((_BYTE *)v16 + 447) = a5;
      if (!*((_BYTE *)v16 + 10))
        goto LABEL_22;
      v17 = &qword_100994C30[v11];
      v18 = LODWORD(qword_100994C30[v11 + 9]);
      if (!(_DWORD)v18)
        goto LABEL_22;
      v19 = 0;
      v20 = v17[8];
      v21 = *((unsigned __int8 *)v17 + 76);
      v22 = (unsigned __int8 *)(v20 + 1);
      while (1)
      {
        v23 = *v22;
        v22 += 64;
        if (v23 == v21)
          break;
        if (v18 == ++v19)
          goto LABEL_22;
      }
      if (v19 == 2)
      {
        v24 = (unsigned __int16 *)sub_100173DA4((uint64_t)&qword_100994C30[v11]);
        if (sub_10019AB28((uint64_t)v24))
        {
          sub_10017354C(*((_BYTE *)v16 + 447) != 0, v24);
          BYTE6(qword_100994C30[v11 + 55]) = 0;
        }
        else if (sub_10005549C())
        {
          sub_100054530("Invalid connection handle");
          v25 = sub_1000544A0(0x57u);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            sub_1006CEEC0();
        }
      }
      else
      {
LABEL_22:
        BYTE6(qword_100994C30[v11 + 55]) = 1;
      }
    }
    sub_1000ECAFC(1u, 0, v12);
  }
}

uint64_t sub_1000ED9F4(uint64_t result)
{
  int v1;
  int v2;
  BOOL v3;
  uint64_t *v5;

  v1 = dword_10097F03C;
  v2 = dword_10097F034;
  if (dword_10097F03C)
    v3 = 0;
  else
    v3 = dword_10097F034 == 0;
  if (!v3 || dword_10097F038 != 0)
  {
    v5 = &qword_100994C30[134 * result];
    *((_DWORD *)v5 + 55) = dword_10097F038;
    *((_DWORD *)v5 + 56) = v1;
    *((_DWORD *)v5 + 54) = v2;
  }
  return result;
}

void sub_1000EDA38(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v4;
  int *i;
  int v6;
  int v7;
  BOOL v8;

  if (dword_100994BF4)
  {
    v4 = 0;
    for (i = &dword_100994D14; *(_QWORD *)(i - 57) != a1; i += 268)
    {
      if (dword_100994BF4 == ++v4)
        return;
    }
    v6 = dword_10097F034;
    v7 = dword_10097F038;
    if (dword_10097F03C)
      v8 = 0;
    else
      v8 = dword_10097F034 == 0;
    if (v8 && dword_10097F038 == 0)
    {
      *i = a2;
    }
    else
    {
      *(i - 1) = dword_10097F03C;
      a3 = v6;
      a4 = v7;
    }
    *(i - 3) = a3;
    *(i - 2) = a4;
    sub_1000ECAFC(1u, 0, (unsigned __int16)v4);
  }
}

void sub_1000EDAC8()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t *v2;

  v0 = dword_100994BF4;
  if (dword_100994BF4)
  {
    v1 = 0;
    v2 = qword_100994C30;
    do
    {
      *((_WORD *)v2 + 223) = 0;
      v2[27] = 0;
      v2[28] = 0;
      if (*v2)
      {
        sub_1000ECAFC(1u, 0, (unsigned __int16)v1);
        v0 = dword_100994BF4;
      }
      ++v1;
      v2 += 134;
    }
    while (v1 < v0);
  }
}

uint64_t sub_1000EDB38(uint64_t result)
{
  byte_10097F040 = result;
  return result;
}

uint64_t sub_1000EDB44(uint64_t result)
{
  byte_10097F041 = result;
  return result;
}

uint64_t sub_1000EDB50()
{
  return sub_10004AE90((uint64_t)sub_1000EDB64, 0, 0);
}

void sub_1000EDB64()
{
  unint64_t i;
  uint64_t *v1;
  unsigned int *v2;
  uint64_t *v3;
  int v4;
  int *v5;
  int v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  void (*v33)(_QWORD);
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  NSObject *v38;
  const char *v39;
  NSObject *v40;
  int v41;
  int v42;
  const char *v43;
  void *v44;
  void *v45;
  const char *v46;
  NSObject *v47;
  void *v48;
  uint8_t buf[4];
  void *v50;

  if (dword_100994BF4)
  {
    for (i = 0; i < dword_100994BF4; ++i)
    {
      v1 = &qword_100994C30[134 * i];
      v2 = (unsigned int *)(v1 + 9);
      if (*((_DWORD *)v1 + 18))
      {
        v3 = &qword_100994C30[134 * i];
        v6 = *((_DWORD *)v3 + 12);
        v5 = (int *)(v3 + 6);
        v4 = v6;
        if (v6 == 11)
        {
          v7 = (unsigned __int16 *)sub_100173DA4((uint64_t)&qword_100994C30[134 * i]);
          if (sub_10019AB28((uint64_t)v7)
            || sub_10019ABD0((uint64_t)v7)
            || sub_10019AC00((uint64_t)v7)
            || sub_10019AC30((uint64_t)v7))
          {
            if (!sub_1001A12A8((uint64_t)v7))
            {
              if (sub_1000F0414(*v1))
              {
                sub_10017264C((unsigned __int16 *)*v1, qword_100994C30[134 * i + 14]);
              }
              else
              {
                if (sub_10019AC30((uint64_t)v7) && byte_100994BF0)
                {
                  v8 = 0;
                  v9 = 1;
                  while (*((_DWORD *)v7 + 14) != *(unsigned __int8 *)(qword_100994BE8 + v8))
                  {
                    if (sub_10019AC30((uint64_t)v7))
                    {
                      v8 += 64;
                      if (v9++ < byte_100994BF0)
                        continue;
                    }
                    goto LABEL_46;
                  }
                  v33 = *(void (**)(_QWORD))(qword_100994BE8 + v8 + 48);
                  if (v33)
                    v33(*v7);
                }
LABEL_46:
                sub_100175AF0((unsigned __int16 *)*v1, 0, (uint64_t)v7);
              }
            }
            continue;
          }
          if (off_100994C20)
            off_100994C20(v7, 81, 779, 408);
          *v5 = 6;
          sub_100253460();
          v4 = *v5;
        }
        if (v4 == 6)
        {
          if (BYTE2(qword_100994C30[134 * i + 1]) && (v11 = *v2, (_DWORD)v11))
          {
            v12 = 0;
            v13 = &qword_100994C30[134 * i];
            v14 = v13[8];
            v15 = *((unsigned __int8 *)v13 + 76);
            v16 = (unsigned __int8 *)(v14 + 1);
            while (1)
            {
              v17 = *v16;
              v16 += 64;
              if (v17 == v15)
                break;
              if (v11 == ++v12)
                goto LABEL_29;
            }
          }
          else
          {
LABEL_29:
            LODWORD(v12) = 0;
          }
          v18 = &qword_100994C30[134 * i];
          v20 = *((_DWORD *)v18 + 20);
          v19 = v18 + 10;
          v21 = v19[9];
          v22 = v19 - 4;
          v23 = *(unsigned __int8 *)(*((_QWORD *)v19 - 2) + (v21 << 6) + 1);
          if (v20 == v23)
          {
            if (!sub_1000F0414(*v1))
              continue;
          }
          else
          {
            *v19 = v23;
          }
          if (sub_1000F0414(*v1))
          {
            v24 = *(unsigned __int8 *)(*v22 + (v21 << 6) + 1);
            v25 = HIDWORD(qword_100994C30[134 * i + 10]);
            if (v25 != v24)
            {
              v26 = *v2;
              if ((_DWORD)v26)
              {
                v27 = 0;
                v28 = 0;
                v29 = 0;
                v30 = (unsigned __int8 *)(*v22 + 1);
                do
                {
                  v32 = *v30;
                  v30 += 64;
                  v31 = v32;
                  if (v32 == v24)
                    v29 = v27;
                  if (v25 == v31)
                    v28 = v27;
                  ++v27;
                }
                while (v26 != v27);
              }
              else
              {
                v29 = 0;
                v28 = 0;
              }
              if (v29 <= v28)
                v34 = v28;
              else
                v34 = v29;
              if (v34 > v21)
                LODWORD(v21) = v34;
            }
          }
          if ((_DWORD)v12 != (_DWORD)v21)
          {
            if (*(_BYTE *)(*v22 + ((unint64_t)v12 << 6) + 1) == 1)
            {
              if ((sub_10005549C() & 1) != 0)
              {
                v35 = v21;
                v39 = sub_100173660(*(unsigned __int8 *)(*v22 + ((unint64_t)v21 << 6) + 1));
                sub_100054530("Upgrade requested to tech %s", v39);
                v40 = sub_1000544A0(0x57u);
                if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_70;
              }
              else
              {
                v35 = v21;
              }
LABEL_72:
              sub_100171A04((unsigned __int16 *)*v1, *(unsigned __int8 *)(*v22 + (v35 << 6) + 1), qword_100994C30[134 * i + 14]);
              continue;
            }
            v41 = *(unsigned __int8 *)(*v22 + ((unint64_t)v21 << 6) + 1);
            v42 = sub_10005549C();
            if (v41 != 1)
            {
              if (v42)
              {
                v46 = sub_100173660(*(unsigned __int8 *)(*v22 + ((unint64_t)v21 << 6) + 1));
                sub_100054530("Downgrade to upgrade requested to tech %s", v46);
                v47 = sub_1000544A0(0x57u);
                if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
                {
                  v48 = sub_100054494();
                  *(_DWORD *)buf = 136446210;
                  v50 = v48;
                  _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                }
              }
              sub_100172A7C((unsigned __int16 *)*v1, *(_BYTE *)(*v22 + ((unint64_t)v21 << 6) + 1), qword_100994C30[134 * i + 14]);
              continue;
            }
            if (v42)
            {
              v43 = sub_100173660(*(unsigned __int8 *)(*v22 + ((unint64_t)v21 << 6) + 1));
              sub_100054530("Downgrade requested to tech %s", v43);
              v38 = sub_1000544A0(0x57u);
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              {
LABEL_66:
                v44 = sub_100054494();
                *(_DWORD *)buf = 136446210;
                v50 = v44;
                _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
              }
            }
LABEL_67:
            sub_100172358((unsigned __int16 *)*v1, qword_100994C30[134 * i + 14]);
            continue;
          }
          if (!sub_1000F0414(*v1))
          {
            v35 = v12;
            v36 = *(unsigned __int8 *)(*v22 + ((unint64_t)v12 << 6) + 1);
            v37 = sub_10005549C();
            if (v36 != 1)
            {
              if (v37)
              {
                sub_100054530("Peripheral %i send central wish upgrade", i);
                v40 = sub_1000544A0(0x57u);
                if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
                {
LABEL_70:
                  v45 = sub_100054494();
                  *(_DWORD *)buf = 136446210;
                  v50 = v45;
                  _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                }
              }
              goto LABEL_72;
            }
            if (v37)
            {
              sub_100054530("Peripheral %i send central wish downgrade", i);
              v38 = sub_1000544A0(0x57u);
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                goto LABEL_66;
            }
            goto LABEL_67;
          }
        }
      }
    }
  }
}

void sub_1000EE138()
{
  unint64_t v0;
  unsigned int *v1;

  if (dword_100994BF4)
  {
    v0 = 0;
    v1 = (unsigned int *)&dword_100994DE8;
    do
    {
      if (sub_10004A088(*v1))
        sub_100049F6C(*v1);
      ++v0;
      v1 += 268;
    }
    while (v0 < dword_100994BF4);
  }
}

BOOL sub_1000EE1A0(unsigned int a1, unsigned int a2)
{
  return *(_DWORD *)(qword_100994C30[134 * a1 + 8] + ((unint64_t)a2 << 6) + 20) < SHIDWORD(qword_100994C30[134 * a1 + 23]);
}

void sub_1000EE1D0(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v3;
  uint64_t *i;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;

  if (dword_100994BF4)
  {
    v3 = 0;
    for (i = &qword_100994C40; ; i += 134)
    {
      v5 = v3;
      v6 = qword_100994C30[134 * v3];
      if (v6 == a1)
        break;
      v7 = BYTE2(qword_100994C30[134 * v5 + 1]);
      v8 = i;
      if (BYTE2(qword_100994C30[134 * v5 + 1]))
      {
        while (*v8 != a1)
        {
          v8 += 2;
          if (!--v7)
            goto LABEL_9;
        }
        if (v6)
          goto LABEL_12;
      }
LABEL_9:
      v3 = v5 + 1;
      if (v5 + 1 == dword_100994BF4)
        return;
    }
    if (!a1)
      return;
LABEL_12:
    v9 = &qword_100994C30[134 * v5 + 12];
    if (a3)
      v10 = *(_DWORD *)v9 + 1;
    else
      v10 = 0;
    *(_DWORD *)v9 = v10;
    if (a2)
      qword_100994C30[134 * v5 + 11] = (uint64_t)vadd_s32((int32x2_t)qword_100994C30[134 * v5 + 11], vdup_n_s32(a2));
    sub_1000ECAFC(0, a2, (unsigned __int16)v5);
  }
}

void sub_1000EE2A0(unsigned __int16 *a1)
{
  unsigned int v1;
  uint64_t *i;
  unsigned int v3;
  unsigned __int16 **v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  NSObject *v11;
  uint8_t buf[4];
  void *v13;

  if (dword_100994BF4)
  {
    v1 = 0;
    for (i = &qword_100994C40; ; i += 134)
    {
      v3 = v1;
      v4 = (unsigned __int16 **)&qword_100994C30[134 * v1];
      v5 = *v4;
      if (*v4 == a1)
        break;
      v6 = BYTE2(qword_100994C30[134 * v3 + 1]);
      v7 = i;
      if (BYTE2(qword_100994C30[134 * v3 + 1]))
      {
        while ((unsigned __int16 *)*v7 != a1)
        {
          v7 += 2;
          if (!--v6)
            goto LABEL_9;
        }
        if (v5)
          goto LABEL_12;
      }
LABEL_9:
      v1 = v3 + 1;
      if (v3 + 1 == dword_100994BF4)
        return;
    }
    if (!a1)
      return;
LABEL_12:
    if (LODWORD(qword_100994C30[134 * v3 + 9]))
    {
      v8 = &qword_100994C30[134 * v3];
      v10 = v8[8];
      v9 = v8 + 8;
      if (!v10)
      {
        sub_100253460();
        v5 = *v4;
      }
      if (!v5)
        sub_100253460();
      if (sub_10005549C())
      {
        sub_100054530("Updating TS LE throughput: index %d handle 0x%x throughput %d -> %d", v3, **v4, *(_DWORD *)(*v9 + 4), *((_DWORD *)*v4 + 53));
        v11 = sub_1000544A0(0x57u);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v13 = sub_100054494();
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      *(_DWORD *)(*v9 + 4) = *((_DWORD *)*v4 + 53);
    }
  }
}

void sub_1000EE43C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  NSObject *v11;
  uint8_t buf[4];
  void *v13;

  if (dword_100994BF4)
  {
    v1 = a1;
    v2 = 0;
    for (i = &qword_100994C40; ; i += 134)
    {
      v4 = &qword_100994C30[134 * v2];
      v5 = *v4;
      if (*v4 == a1)
        break;
      v6 = BYTE2(qword_100994C30[134 * v2 + 1]);
      v7 = i;
      if (BYTE2(qword_100994C30[134 * v2 + 1]))
      {
        while (*v7 != a1)
        {
          v7 += 2;
          if (!--v6)
            goto LABEL_9;
        }
        if (v5)
        {
          v1 = *v4;
          goto LABEL_14;
        }
      }
LABEL_9:
      if (++v2 == dword_100994BF4)
        return;
    }
    if (!a1)
      return;
LABEL_14:
    if (LODWORD(qword_100994C30[134 * v2 + 9]))
    {
      v8 = &qword_100994C30[134 * v2];
      v10 = v8[8];
      v9 = v8 + 8;
      if (!v10)
      {
        sub_100253460();
        v5 = *v4;
      }
      if (!v5)
        sub_100253460();
      if (sub_1000F3F50(v1))
      {
        if (sub_10005549C())
        {
          sub_100054530("Updating TS HDR throughput: index %d throughput %d -> 4500", dword_100994BF4, *(_DWORD *)(*v9 + 68));
          v11 = sub_1000544A0(0x57u);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446210;
            v13 = sub_100054494();
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        *(_DWORD *)(*v9 + 68) = 4500;
      }
    }
  }
}

void sub_1000EE5DC(uint64_t a1)
{
  unsigned int v2;
  NSObject *v3;
  const void *v4[2];
  unsigned int v5;
  uint8_t v6[4];
  uint64_t v7;

  v5 = 0;
  if (dword_100994BF4)
  {
    v2 = 0;
    v4[0] = 0;
    do
    {
      if (qword_100994C30[134 * v2] == a1)
      {
        v4[1] = &v5;
        LOWORD(v4[0]) = 4;
        if (sub_10004A9EC((uint64_t)sub_1000EE740, v4, 20, (int *)&qword_100994C30[134 * v2 + 133] + 1))
        {
          if (sub_10005549C())
          {
            sub_100054530("TS disable upgrade timer registration failed");
            v3 = sub_1000544A0(0x57u);
            if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
              sub_1006CEDF0(v6, &v7, v3);
          }
        }
        else
        {
          LOBYTE(qword_100994C30[134 * v5 + 133]) = 1;
        }
      }
      v2 = v5 + 1;
      v5 = v2;
    }
    while (v2 < dword_100994BF4);
  }
}

void sub_1000EE740(uint64_t a1)
{
  unsigned int v1;
  NSObject *v2;
  uint64_t *v3;
  int v4;
  int v5;
  NSObject *v6;
  void *v7;
  uint8_t buf[4];
  void *v9;

  if (a1)
  {
    v1 = **(unsigned __int16 **)(a1 + 8);
    if ((sub_10005549C() & 1) != 0)
    {
      sub_100054530("Re-Enabling TS upgrades for peer %d", v1);
      v2 = sub_1000544A0(0x57u);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v9 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    v3 = &qword_100994C30[134 * v1];
    *((_BYTE *)v3 + 1064) = 0;
    *((_DWORD *)v3 + 267) = 0;
  }
  else
  {
    if (dword_100994BF4)
    {
      v4 = 0;
      v5 = 0;
      do
      {
        if (sub_10005549C())
        {
          sub_100054530("Re-Enabling TS upgrades for peer %d because we can't find peer.", v4);
          v6 = sub_1000544A0(0x57u);
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            v7 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v9 = v7;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        LOBYTE(qword_100994C30[134 * (unsigned __int16)v5++ + 133]) = 0;
        v4 = (unsigned __int16)v5;
      }
      while (dword_100994BF4 > (unsigned __int16)v5);
    }
    sub_100253460();
  }
}

uint64_t sub_1000EE908(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unint64_t a5, int *a6)
{
  int *v6;
  uint64_t *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  unsigned int v43;
  _BOOL4 v44;
  int v46;
  int *v47;

  v6 = a6;
  if (!a6)
    sub_100253460();
  v12 = &qword_100994C30[134 * a1];
  v14 = (unsigned int *)(v12 + 9);
  v13 = *((_DWORD *)v12 + 18);
  if (v13 < a5)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_TS_Switching.c");
  v15 = a1;
  if (BYTE4(qword_100994C30[134 * a1 + 55]))
    return 1;
  if (!v13)
  {
    v27 = 16;
    v16 = a5;
    goto LABEL_26;
  }
  v47 = v6;
  v17 = a5;
  v18 = 0;
  v16 = 0;
  v19 = &qword_100994C30[134 * a1];
  v20 = v19 + 8;
  v21 = v19 + 13;
  v46 = v17;
  v22 = v17;
  while (!sub_1000EEEE4(a1, v16))
  {
LABEL_21:
    ++v16;
    v18 += 64;
    if (v16 >= *v14)
    {
      v27 = 16;
      v16 = v22;
      goto LABEL_25;
    }
  }
  v23 = *v20 + v18;
  v24 = *(_DWORD *)(v23 + 4);
  if (*(unsigned __int16 *)(v23 + 8) <= a3)
  {
    if (v24 >= a2)
      goto LABEL_24;
    goto LABEL_20;
  }
  if (*v21 - 1 >= a4 || v24 >> 1 <= a2 || v24 < a2)
  {
LABEL_20:
    v22 = v16;
    goto LABEL_21;
  }
LABEL_24:
  v27 = 3;
LABEL_25:
  v15 = a1;
  v6 = v47;
  v12 = &qword_100994C30[134 * a1];
  LODWORD(a5) = v46;
LABEL_26:
  v28 = qword_100994C30[134 * v15 + 12];
  if (v28)
  {
    if (v16 <= a5)
      a5 = a5;
    else
      a5 = v16;
    if (v28 >= 5)
    {
      v29 = v16 + 1;
      if (v29 < *v14)
      {
        v30 = v12;
        v31 = sub_1000EEEE4(a1, v29);
        v12 = v30;
        if (v31)
          a5 = v29;
        else
          a5 = a5;
      }
    }
    v27 |= 4u;
    v16 = a5;
  }
  if (sub_1000F0414(*v12))
  {
    v32 = *v14;
    if ((_DWORD)v32)
    {
      v33 = qword_100994C30[134 * v15 + 8];
      if (v33)
      {
        v34 = *(unsigned __int8 *)(v33 + ((unint64_t)v16 << 6) + 1);
        v35 = HIDWORD(qword_100994C30[134 * v15 + 10]);
        if (v35 != v34)
        {
          v36 = v15;
          v37 = 0;
          v38 = 0;
          v39 = 0;
          v40 = (unsigned __int8 *)(v33 + 1);
          do
          {
            v42 = *v40;
            v40 += 64;
            v41 = v42;
            if (v42 == v34)
              v39 = v37;
            if (v35 == v41)
              v38 = v37;
            ++v37;
          }
          while (v32 != v37);
          if (v39 <= v38)
            v43 = v38;
          else
            v43 = v39;
          if (v43 > v16)
          {
            v44 = sub_1000EEEE4(a1, v43);
            if (v44)
              v16 = v43;
            else
              v16 = v16;
            if (v44)
              v27 = 32;
          }
          v15 = v36;
        }
      }
    }
  }
  HIDWORD(qword_100994C30[134 * v15 + 14]) = v16;
  *v6 = v27;
  return v16;
}

void sub_1000EEB94(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t *v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t *v14;
  _DWORD *v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  int v19;
  NSObject *v20;
  const void *v21[2];
  unsigned __int16 v22;
  uint8_t buf[4];
  void *v24;

  if (a1)
  {
    v21[0] = 0;
    v22 = **(_WORD **)(a1 + 8);
    v1 = v22;
    if (BYTE2(qword_100994C30[134 * v22 + 1]) && (v2 = LODWORD(qword_100994C30[134 * v22 + 9]), (_DWORD)v2))
    {
      v3 = 0;
      v4 = &qword_100994C30[134 * v22];
      v5 = v4[8];
      v6 = *((unsigned __int8 *)v4 + 76);
      v7 = (unsigned __int8 *)(v5 + 1);
      while (1)
      {
        v8 = *v7;
        v7 += 64;
        if (v8 == v6)
          break;
        if (v2 == ++v3)
          goto LABEL_7;
      }
    }
    else
    {
LABEL_7:
      LODWORD(v3) = 0;
    }
    v9 = &qword_100994C30[134 * v22];
    v9[13] = 0;
    *((_DWORD *)v9 + 25) = 0;
    v10 = sub_10005549C();
    if ((_DWORD)v3)
    {
      if (v10)
      {
        sub_100054530("Restarting TS Idle timer peer %d due to currentTransport %d", v1, v3);
        v11 = sub_1000544A0(0x57u);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v24 = sub_100054494();
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      v21[1] = &v22;
      LOWORD(v21[0]) = 2;
      if (sub_10004A9EC((uint64_t)sub_1000EEB94, v21, 30, (int *)&qword_100994C30[134 * v1 + 55]))
      {
        if (sub_10005549C())
        {
          sub_100054530("TS Idle timer registration failed");
          v12 = sub_1000544A0(0x57u);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            sub_1006CEEC0();
        }
      }
      v13 = BYTE2(qword_100994C30[134 * v22 + 1]);
      if (BYTE2(qword_100994C30[134 * v22 + 1]))
      {
        v14 = &qword_100994C30[134 * v22];
        v15 = v14 + 12;
        v16 = v14 + 3;
        do
        {
          if (*v16 != 1)
          {
            v17 = *((_QWORD *)v16 - 1);
            if (v17)
            {
              if (*(unsigned __int16 *)(v17 + 16) <= 1u)
                *v15 = 0;
            }
          }
          v16 += 16;
          --v13;
        }
        while (v13);
      }
      sub_1000ECAFC(2, 0);
    }
    else if (v10)
    {
      v18 = sub_1001A240C(0);
      v19 = sub_1001A240C(2);
      sub_100054530("TS idle expiration for peer %d with transport %d, avail [acl %d, le %d]", v1, 0, v18, v19);
      v20 = sub_1000544A0(0x57u);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v24 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
  }
  else
  {
    sub_100253460();
  }
}

void sub_1000EEE6C(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v4;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Read RSSI CB signaling failed with status %!", a1);
      v4 = sub_1000544A0(0x57u);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  else
  {
    sub_100172C38(a2, a3);
  }
}

BOOL sub_1000EEEE4(unsigned int a1, unsigned int a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  _BOOL4 v7;
  unsigned __int8 *v8;
  int v9;
  _BOOL8 result;

  if (LODWORD(qword_100994C30[134 * a1 + 9]) <= a2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_TS_Switching.c");
  v3 = qword_100994C30[134 * a1 + 8];
  v4 = v3 + ((unint64_t)a2 << 6);
  if (!*(_BYTE *)(v4 + 2) || !byte_100994BF0)
    return 0;
  v5 = *(unsigned __int8 *)(v4 + 1);
  if (*(unsigned __int8 *)(qword_100994BE8 + 1) != v5)
  {
    v6 = 0;
    v8 = (unsigned __int8 *)(qword_100994BE8 + 65);
    while (byte_100994BF0 - 1 != v6)
    {
      v9 = *v8;
      v8 += 64;
      ++v6;
      if (v9 == v5)
      {
        v7 = v6 < byte_100994BF0;
        goto LABEL_10;
      }
    }
    return 0;
  }
  v6 = 0;
  v7 = 1;
LABEL_10:
  result = 0;
  if (v7)
  {
    if (*(_BYTE *)(qword_100994BE8 + (v6 << 6) + 2))
      return *(_DWORD *)(v3 + ((unint64_t)a2 << 6) + 20) <= SHIDWORD(qword_100994C30[134 * a1 + 23]);
  }
  return result;
}

uint64_t sub_1000EEFF0()
{
  dword_10097F044 = 0;
  return sub_1000EF000(0);
}

void sub_1000EF000(int a1)
{
  int v1;
  NSObject *v2;

  switch(dword_10097F044)
  {
    case 0:
      if (dword_10097F04C)
        dword_10097F04C = 0;
      sub_1000FC0B8(&dword_10097F050);
      sub_1000FC0B8((unsigned int *)&dword_10097F054);
      sub_1000FC0B8(&dword_10097F058);
      sub_1000FB940(0);
      byte_10097F049 = 0;
      byte_10097F048 = 0;
LABEL_5:
      sub_1000FC09C(6);
      v1 = 2;
      goto LABEL_6;
    case 1:
      if (dword_10097F04C != 1)
        dword_10097F04C = 1;
      switch(a1)
      {
        case 1:
          sub_1000FC0B8((unsigned int *)&dword_10097F054);
          goto LABEL_38;
        case 3:
          sub_1000FC0B8((unsigned int *)&dword_10097F054);
          goto LABEL_55;
        case 6:
          goto LABEL_5;
        case 9:
          sub_1000FC0B8((unsigned int *)&dword_10097F054);
          goto LABEL_5;
        default:
          return;
      }
      return;
    case 2:
      if (dword_10097F04C != 2)
        dword_10097F04C = 2;
      if (a1 == 3)
      {
        sub_1000FC09C(7);
        goto LABEL_55;
      }
      if (a1 == 1)
        goto LABEL_15;
      return;
    case 3:
      if (dword_10097F04C != 3)
        dword_10097F04C = 3;
      switch(a1)
      {
        case 2:
          sub_1000FC09C(5);
          sub_1000FC0B8(&dword_10097F050);
          byte_10097F049 = 0;
          sub_1000FC0B8(&dword_10097F058);
          sub_10004A9EC((uint64_t)sub_1000EF4CC, 0, 3, (int *)&dword_10097F058);
          dword_10097F044 = 5;
          break;
        case 5:
          if ((unsigned __int16)word_10097F05C >= 0x32u)
          {
            sub_1000FB940(1);
            sub_1000FB558();
            sub_1000FC09C(6);
            v1 = 4;
            goto LABEL_6;
          }
          sub_1000FBF9C();
          sub_10004A9EC((uint64_t)sub_1000EF4BC, 0, 3, (int *)&dword_10097F050);
          ++word_10097F05C;
          break;
        case 3:
          goto LABEL_56;
      }
      return;
    case 4:
      if (dword_10097F04C != 4)
      {
        dword_10097F04C = 4;
        if (sub_10005549C())
        {
          sub_100054530("H4DS has entered the PEER IDLE state, CSR chip not responding, bailing out");
          v2 = sub_1000544A0(0x3Au);
          if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
            sub_1006CEF28(v2);
        }
        sub_100112D60(632);
        sub_1000EF48C();
        return;
      }
      if (a1 != 8)
        return;
      sub_1000FB940(0);
      sub_1000FB56C();
LABEL_15:
      sub_1000FC09C(7);
      goto LABEL_38;
    case 5:
      if (dword_10097F04C != 5)
        dword_10097F04C = 5;
      switch(a1)
      {
        case 7:
          if ((byte_10097F049 & 1) != 0)
            goto LABEL_51;
          sub_1000FC040();
          v1 = 6;
          goto LABEL_6;
        case 4:
          v1 = 7;
          goto LABEL_6;
        case 3:
          sub_1000FC038();
          sub_1000FC0B8(&dword_10097F058);
          sub_10004A9EC((uint64_t)sub_1000EF4CC, 0, 3, (int *)&dword_10097F058);
          break;
      }
      break;
    case 6:
      if (dword_10097F04C != 6)
        dword_10097F04C = 6;
      switch(a1)
      {
        case 4:
          sub_1000EF5D8();
          break;
        case 3:
LABEL_55:
          sub_1000FBF9C();
          sub_10004A9EC((uint64_t)sub_1000EF4BC, 0, 3, (int *)&dword_10097F050);
          word_10097F05C = 1;
          dword_10097F044 = 3;
LABEL_56:
          sub_1000FC038();
          break;
        case 1:
LABEL_38:
          sub_1000FBF9C();
          sub_10004A9EC((uint64_t)sub_1000EF4BC, 0, 3, (int *)&dword_10097F050);
          word_10097F05C = 1;
          dword_10097F044 = 3;
          break;
      }
      return;
    case 7:
      if (dword_10097F04C != 7)
        dword_10097F04C = 7;
      if (a1 == 7)
      {
        if ((byte_10097F049 & 1) != 0)
        {
LABEL_51:
          byte_10097F049 = 0;
          sub_1000EF59C();
        }
        else
        {
          sub_1000EF5D8();
          sub_1000FC040();
        }
      }
      else if (a1 == 3)
      {
        sub_1000FC038();
        sub_1000FC0B8(&dword_10097F058);
        sub_10004A9EC((uint64_t)sub_1000EF4CC, 0, 3, (int *)&dword_10097F058);
        v1 = 5;
LABEL_6:
        dword_10097F044 = v1;
      }
      break;
    default:
      sub_1000FC0F0("DS state machine invalid state");
      return;
  }
}

void sub_1000EF48C()
{
  dword_10097F044 = 6;
}

uint64_t sub_1000EF49C()
{
  return sub_1000EF000(1);
}

void sub_1000EF4A4()
{
  sub_1000EF000(3);
}

void sub_1000EF4AC()
{
  sub_1000EF000(2);
}

void sub_1000EF4B4()
{
  sub_1000EF000(4);
}

uint64_t sub_1000EF4BC()
{
  return sub_1000EF000(5);
}

uint64_t sub_1000EF4C4()
{
  return sub_1000EF000(6);
}

uint64_t sub_1000EF4CC()
{
  return sub_1000EF000(7);
}

void sub_1000EF4D4()
{
  sub_1000EF000(8);
}

uint64_t sub_1000EF4DC()
{
  uint64_t result;

  result = sub_1000FC048();
  if ((_DWORD)result)
    return sub_1000EF000(9);
  byte_10097F048 = 1;
  return result;
}

uint64_t sub_1000EF50C()
{
  uint64_t result;

  if (byte_10097F048 == 1)
  {
    byte_10097F048 = 0;
    return sub_10004A9EC((uint64_t)sub_1000EF4DC, 0, 1, 0);
  }
  return result;
}

void sub_1000EF53C()
{
  byte_10097F049 = 1;
}

BOOL sub_1000EF54C()
{
  return (dword_10097F044 & 0xFFFFFFFD) == 5;
}

BOOL sub_1000EF564()
{
  return dword_10097F044 == 3 || (dword_10097F044 - 5) < 2;
}

BOOL sub_1000EF580()
{
  return (dword_10097F044 & 0xFFFFFFFE) == 2;
}

uint64_t sub_1000EF59C()
{
  sub_1000FC0B8(&dword_10097F058);
  return sub_10004A9EC((uint64_t)sub_1000EF4CC, 0, 3, (int *)&dword_10097F058);
}

uint64_t sub_1000EF5D8()
{
  uint64_t result;

  byte_10097F048 = 0;
  sub_10004A9EC((uint64_t)sub_1000EF4DC, 0, 1, 0);
  result = sub_10004A9EC((uint64_t)sub_1000EF4C4, 0, 2, &dword_10097F054);
  dword_10097F044 = 1;
  return result;
}

uint64_t sub_1000EF638(uint64_t a1, uint64_t a2)
{
  char v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;

  v2 = byte_10097F060;
  if (byte_10097F060)
  {
    if (byte_10097F060 == 10)
    {
      if (sub_10005549C())
      {
        sub_100054530("Can't add anymore Incoming Raw Data callbacks.");
        v3 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 104;
    }
    else
    {
      v5 = qword_10097F068;
      v6 = byte_10097F060;
      while (*v5 != a1)
      {
        v5 += 2;
        if (!--v6)
          goto LABEL_10;
      }
      return 0;
    }
  }
  else
  {
LABEL_10:
    v4 = 0;
    v7 = &qword_10097F068[2 * byte_10097F060];
    *v7 = a1;
    v7[1] = a2;
    byte_10097F060 = v2 + 1;
  }
  return v4;
}

uint64_t sub_1000EF6F8(uint64_t a1)
{
  char v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = byte_10097F108;
  if (byte_10097F108)
  {
    if (byte_10097F108 == 10)
    {
      if (sub_10005549C())
      {
        sub_100054530("Can't add anymore CL Ready callbacks.");
        v2 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 104;
    }
    else
    {
      v4 = qword_10097F110;
      v5 = byte_10097F108;
      while (*v4 != a1)
      {
        ++v4;
        if (!--v5)
          goto LABEL_10;
      }
      return 0;
    }
  }
  else
  {
LABEL_10:
    v3 = 0;
    qword_10097F110[byte_10097F108] = a1;
    byte_10097F108 = v1 + 1;
  }
  return v3;
}

uint64_t sub_1000EF7B4(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  size_t v12;
  uint64_t *v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint8_t v24[4];
  void *v25;
  uint8_t buf[16];
  __int128 v27;
  char v28;

  v5 = *a3;
  *a3 = 0;
  if (sub_10005549C())
  {
    sub_100054530("Searching for LE Only pipes:");
    v6 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!word_10097F162)
    return 0;
  v7 = 0;
  while (1)
  {
    v8 = *((_QWORD *)&xmmword_10097F168 + v7);
    if (*(_QWORD *)v8 == a1)
      break;
    if ((unsigned __int16)word_10097F162 == ++v7)
      return 0;
  }
  if (!*(_DWORD *)(v8 + 16))
    return 0;
  v9 = 0;
  while (1)
  {
    v28 = 0;
    *(_OWORD *)buf = 0u;
    v27 = 0u;
    __memcpy_chk(buf, *(_QWORD *)(v8 + 8) + 88 * v9, *(unsigned int *)(*(_QWORD *)(v8 + 8) + 88 * v9 + 32), 33);
    v10 = (unsigned __int16)word_10097F1E8;
    if (word_10097F1E8)
    {
      v11 = (unsigned int *)(*(_QWORD *)(v8 + 8) + 88 * v9);
      v12 = v11[8];
      v13 = qword_10097F1F0;
      while ((_DWORD)v12 != *((unsigned __int8 *)v13 + 8) || memcmp((const void *)*v13, v11, v12))
      {
        v13 += 9;
        if (!--v10)
          goto LABEL_16;
      }
      v14 = *((_BYTE *)v13 + 26) != 0;
    }
    else
    {
LABEL_16:
      v14 = 0;
    }
    if (sub_10005549C())
    {
      v15 = *((_QWORD *)&xmmword_10097F168 + v7);
      v16 = *(_QWORD *)(v15 + 8);
      v17 = *(_QWORD *)(v16 + 88 * v9 + 64);
      if (v17)
        LODWORD(v17) = *(unsigned __int16 *)(v17 + 4);
      sub_100054530("    peerID:%d channelID=0x%04x CID:0x%04x stayOnLe=%d name:%s priority:%d serviceID:%d peerSupportsLeOnlyPipes:%d listSize:%d(%d)", v7, v9, v17, v14, (const char *)buf, *(unsigned __int8 *)(v16 + 88 * v9 + 54), *(_DWORD *)(v16 + 88 * v9 + 40), *(_DWORD *)(v15 + 52) & 0x1000, *a3, v5);
      v18 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v19 = sub_100054494();
        *(_DWORD *)v24 = 136446210;
        v25 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, " %{public}s", v24, 0xCu);
      }
    }
    v8 = *((_QWORD *)&xmmword_10097F168 + v7);
    if (v14)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 88 * v9 + 64);
      if (v20)
      {
        if ((*(_BYTE *)(v8 + 53) & 0x10) != 0)
        {
          v21 = *a3;
          *(_WORD *)(a2 + 2 * *a3) = *(_WORD *)(v20 + 4);
          *a3 = v21 + 1;
          if (v21 + 1 > v5)
            return 106;
        }
      }
    }
    if (++v9 >= (unint64_t)*(unsigned int *)(v8 + 16))
      return 0;
  }
}

uint64_t sub_1000EFA88(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  int v11;
  NSObject *v12;
  NSObject *v14;
  int v15;
  void *v16;

  byte_10097F8B0 = a1;
  v3 = sub_10021F6A8((uint64_t)off_10091A4D0);
  if ((_DWORD)v3)
  {
    v4 = v3;
    if (sub_10005549C())
    {
      sub_100054530("Failed to register LE GAP");
      v5 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return v4;
  }
  if (sub_1001DC46C(58, 2, 16, 8u, &qword_10097F8B8, (uint64_t)sub_1000EFDF4))
  {
    if (sub_10005549C())
    {
      sub_100054530("Failed to register L2CAP fixed channel");
      v6 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_10021F838((uint64_t)off_10091A4D0);
  }
  byte_10097F8C0 = 0;
  qword_10097F8C8 = (uint64_t)sub_100251288((uint64_t)sub_1000F0310, (uint64_t)sub_1000F0318);
  sub_10022D270((__n128 *)off_10091A500);
  v4 = v7;
  if ((_DWORD)v7)
  {
    if (sub_10005549C())
    {
      sub_100054530("Failed to register CL security.");
      v8 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_100253460();
  }
  byte_10097F8D0 = a2;
  byte_10097F8D1 = 1;
  dword_10097F8D4 = 4129;
  if (dword_10097F8D8 == 42)
  {
    if (sub_10005549C())
    {
      sub_100054530("This is a watch");
      v12 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v15 = 136446210;
        v16 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)&v15, 0xCu);
      }
    }
    v10 = dword_10097F8D4;
    v11 = 2176;
  }
  else
  {
    if (dword_10097F8D8 != 12)
    {
      if (sub_10005549C())
      {
        sub_100054530("This is a generic device");
        v14 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          v15 = 136446210;
          v16 = sub_100054494();
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)&v15, 0xCu);
        }
      }
      goto LABEL_26;
    }
    if (sub_10005549C())
    {
      sub_100054530("This is a phone");
      v9 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v15 = 136446210;
        v16 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)&v15, 0xCu);
      }
    }
    v10 = dword_10097F8D4;
    v11 = 1280;
  }
  dword_10097F8D4 = v10 | v11;
LABEL_26:
  if (sub_10018297C())
    dword_10097F8D4 |= 2u;
  if (sub_10018298C())
    dword_10097F8D4 |= 0x10u;
  return v4;
}

void sub_1000EFDF4(__int128 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  NSObject *v12;
  unsigned int v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  __int16 v18;
  char v19;

  if (!a1)
    return;
  v8 = sub_1000F0968((uint64_t)a1);
  if (!a2 || a3 <= 1)
  {
    if (!sub_10005549C())
      return;
    sub_100054530("Ignoring PDU size of %d", a3);
    v12 = sub_1000544A0(0x51u);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_35;
  }
  v9 = v8;
  v10 = *a2;
  if ((_DWORD)a4 && v10 != 145 && off_100994C28)
    off_100994C28(a1, (unsigned __int16)v8, a3);
  if ((v10 & 0xFE) == 8)
  {
    v9 = a2[1];
    if ((_DWORD)a3 - 2 == v9)
    {
      v11 = 2;
      goto LABEL_25;
    }
    if (!sub_10005549C())
      return;
    sub_100054530("Ignoring PDU opcode %d with invalid length (%d expected, %d actual)", v10, v9, a3 - 2);
    v14 = sub_1000544A0(0x51u);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      return;
LABEL_35:
    sub_1006CE7A4();
    return;
  }
  if (v9 == -1)
  {
    if (!sub_10005549C())
      return;
    sub_100054530("Could not locate peer from handle %p with PDU opcode 0x%x", a1, -1);
    v15 = sub_1000544A0(0x51u);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_35;
  }
  v13 = *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v9) + 48);
  LOWORD(v9) = a2[1];
  if (v13 < 8)
  {
    v11 = 2;
  }
  else
  {
    LOWORD(v9) = v9 | (a2[2] << 8);
    v11 = 3;
  }
  if ((_DWORD)a3 - v11 != (unsigned __int16)v9)
  {
    if (!sub_10005549C())
      return;
    sub_100054530("Ignoring PDU opcode %d with invalid length (%d expected, %d actual) dataLength %d, expectedHeaderSize %d", v10, *(unsigned __int16 *)(a2 + 1), a3 - 3, (unsigned __int16)v9, v11);
    v16 = sub_1000544A0(0x51u);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_35;
  }
LABEL_25:
  if (v10 > 112)
  {
    if (v10 > 144)
    {
      if ((v10 - 147) < 2)
        return;
      if (v10 == 145)
      {
        sub_1000F9890((uint64_t)a1, (uint64_t)&a2[v11], (unsigned __int16)v9, a4);
        return;
      }
    }
    else
    {
      switch(v10)
      {
        case 113:
          sub_1000F9398((uint64_t)a1, (uint64_t)&a2[v11], (unsigned __int16)v9);
          return;
        case 114:
          sub_1000F9594((uint64_t)a1, (double *)&a2[v11], (unsigned __int16)v9);
          return;
        case 144:
          sub_1000F99D8(a1, (unsigned __int16 *)&a2[v11], (unsigned __int16)v9);
          return;
      }
    }
LABEL_43:
    if (sub_10005549C())
    {
      sub_100054530("Unknown CL Opcode of 0x%x with data size %d", v10, a3);
      v17 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v18 = 264;
    v19 = 2;
    sub_1000F0AF8(a1, &v18, 3u, 0);
  }
  else
  {
    switch(v10)
    {
      case 1:
        sub_1000F64B8((uint64_t)a1, &a2[v11], (unsigned __int16)v9);
        break;
      case 2:
        sub_1000F6E2C((uint64_t)a1, &a2[v11], (unsigned __int16)v9);
        break;
      case 3:
        sub_1000F7620(a1, (unsigned __int16 *)&a2[v11], (unsigned __int16)v9);
        break;
      case 4:
        sub_1000F793C(a1, &a2[v11], (unsigned __int16)v9);
        break;
      case 5:
        sub_1000F7BD8(a1, (unsigned __int16 *)&a2[v11], (unsigned __int16)v9);
        break;
      case 6:
        sub_1000F8028(a1, (unsigned __int16 *)&a2[v11], (unsigned __int16)v9);
        break;
      case 7:
        sub_1000F85F8((uint64_t)a1, (unsigned __int16 *)&a2[v11], (unsigned __int16)v9);
        break;
      case 8:
        sub_1000F8E74(a1, (uint64_t)&a2[v11]);
        break;
      case 9:
        sub_1000F5F54((uint64_t)a1, &a2[v11], (unsigned __int16)v9);
        break;
      default:
        if (v10 != 112)
          goto LABEL_43;
        sub_1000F9004((unsigned __int16 *)a1);
        break;
    }
  }
}

void *sub_1000F0310(void *a1, const void *a2, size_t __len)
{
  return memmove(a1, a2, __len);
}

uint64_t sub_1000F031C(uint64_t a1)
{
  uint64_t v1;
  __int128 *i;

  v1 = (unsigned __int16)word_10097F162;
  if (!word_10097F162)
    return 0;
  for (i = &xmmword_10097F168; **(_QWORD **)i != a1; i = (__int128 *)((char *)i + 8))
  {
    if (!--v1)
      return 0;
  }
  return (*(unsigned __int8 *)(*(_QWORD *)i + 52) >> 3) & 1;
}

void sub_1000F0360()
{
  unint64_t v0;
  void **v1;
  void *v2;

  if (qword_10097F8B8)
    sub_1001DC658(qword_10097F8B8);
  sub_10021F838((uint64_t)off_10091A4D0);
  word_10097F162 = 0;
  xmmword_10097F168 = 0u;
  unk_10097F178 = 0u;
  xmmword_10097F188 = 0u;
  unk_10097F198 = 0u;
  xmmword_10097F1A8 = 0u;
  unk_10097F1B8 = 0u;
  xmmword_10097F1C8 = 0u;
  unk_10097F1D8 = 0u;
  if (word_10097F1E8)
  {
    v0 = 0;
    v1 = (void **)qword_10097F1F0;
    do
    {
      v2 = *v1;
      v1 += 9;
      sub_100053298(v2);
      ++v0;
    }
    while (v0 < (unsigned __int16)word_10097F1E8);
  }
  bzero(qword_10097F1F0, 0x6C0uLL);
  word_10097F1E8 = 0;
}

void sub_1000F0404()
{
  byte_10097F8DC = 1;
}

BOOL sub_1000F0414(uint64_t a1)
{
  _BOOL8 result;

  if (sub_10019AC00(a1))
    return !sub_100221568(a1);
  result = sub_10019AB28(a1);
  if (result)
    return *(_BYTE *)(a1 + 144) == 0;
  return result;
}

uint64_t sub_1000F0460(uint64_t a1)
{
  uint64_t result;

  if (sub_10019AC00(a1))
    return sub_10022D980(a1);
  result = sub_10019AB28(a1);
  if ((_DWORD)result)
    return sub_10024B768(a1);
  return result;
}

uint64_t sub_1000F04B0(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    return sub_10019AC00(result) || sub_10019AB28(v1);
  }
  return result;
}

uint64_t sub_1000F04EC(int a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  uint64_t result;

  if (!word_10097F162)
    return 120;
  v3 = 0;
  while (1)
  {
    v4 = *((_QWORD *)&xmmword_10097F168 + v3);
    v5 = *(unsigned int *)(v4 + 16);
    if ((_DWORD)v5)
      break;
LABEL_7:
    if (++v3 == (unsigned __int16)word_10097F162)
      return 120;
  }
  v6 = 0;
  v7 = (unsigned __int16 *)(*(_QWORD *)(v4 + 8) + 52);
  while (1)
  {
    v8 = *v7;
    v7 += 44;
    if (v8 == a1)
      break;
    if (v5 == ++v6)
      goto LABEL_7;
  }
  result = 0;
  *a2 = v3;
  *a3 = v6;
  return result;
}

void sub_1000F0558(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;

  if (!word_10097F162)
    goto LABEL_17;
  v2 = 0;
  while (1)
  {
    v3 = *((_QWORD *)&xmmword_10097F168 + v2);
    v4 = *(unsigned int *)(v3 + 16);
    if ((_DWORD)v4)
      break;
LABEL_7:
    if (++v2 == (unsigned __int16)word_10097F162)
      goto LABEL_17;
  }
  v5 = (unsigned __int16 *)(*(_QWORD *)(v3 + 8) + 52);
  while (1)
  {
    v6 = *v5;
    v5 += 44;
    if (v6 == a1)
      break;
    if (!--v4)
      goto LABEL_7;
  }
  v7 = *(_QWORD *)v3;
  if (*(_QWORD *)v3)
  {
    if (sub_10005549C())
    {
      sub_100054530("Queue CID %d stalled, disconnecting", a1);
      v8 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    sub_100253508(3702);
    v9 = sub_10021F3D0(v7);
    if ((_DWORD)v9)
    {
      v10 = v9;
      if (sub_10005549C())
      {
        sub_100054530("Stall Monitor LE disconnect failed with status %!", v10);
        v11 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_17:
    if (sub_10005549C())
    {
      sub_100054530("Queue CID %d stalled disconnecting, but connection handle is no longer valid", a1);
      v12 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
LABEL_19:
        sub_1006CEEC0();
    }
  }
}

uint64_t sub_1000F06C0(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v11;
  NSObject *v12;
  unsigned int v13;
  unsigned __int16 v14;
  size_t v15;
  _BYTE *v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  _BYTE *v22;
  unsigned __int16 v23;
  unsigned __int16 v24;
  int v25;
  uint8_t buf[4];
  void *v27;

  v6 = sub_1000F0968((uint64_t)a1);
  if ((_DWORD)v6 == -1)
  {
    if (!sub_10005549C())
      return 414;
    sub_100054530("SendTimeSyncRequest peerID is invalid");
    v9 = sub_1000544A0(0x51u);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      return 414;
LABEL_8:
    sub_1006CE7A4();
    return 414;
  }
  v7 = v6;
  if (sub_1000F0414((uint64_t)a1))
  {
    if (!sub_10005549C())
      return 414;
    sub_100054530("Time sync should only be initiated by the peripheral.");
    v8 = sub_1000544A0(0x51u);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      return 414;
    goto LABEL_8;
  }
  v11 = *((_QWORD *)&xmmword_10097F168 + v7);
  if (*(_QWORD *)(v11 + 56))
  {
    if (sub_10005549C())
    {
      sub_100054530("Time update already pending.");
      v12 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 116;
  }
  else
  {
    v13 = *(unsigned __int8 *)(v11 + 48);
    if (v13 <= 7)
      v14 = 2;
    else
      v14 = 3;
    if (v13 <= 7)
      v15 = 2;
    else
      v15 = 3;
    v16 = sub_100052DC0(v15);
    if (v16)
    {
      v17 = v16;
      v22 = v16;
      v23 = v14;
      v24 = v14;
      v25 = 131073;
      *v16 = 112;
      sub_1000F09C4(v7, (uint64_t *)&v22, 0);
      if (HIBYTE(v25))
      {
        if (sub_10005549C())
        {
          sub_100054530("Error creating CLDeviceID PDU");
          v18 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        return 131;
      }
      else
      {
        v19 = *((_QWORD *)&xmmword_10097F168 + v7);
        *(_QWORD *)(v19 + 56) = a2;
        *(_QWORD *)(v19 + 64) = a3;
        if (sub_10005549C())
        {
          sub_100054530("Requesting time sync");
          v20 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            v21 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v27 = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        return sub_1000F0AF8(a1, v17, v14, 1);
      }
    }
    else
    {
      return 106;
    }
  }
}

uint64_t sub_1000F0968(uint64_t a1)
{
  uint64_t result;

  if (!sub_1000F04B0(a1) || !word_10097F162)
    return 0xFFFFFFFFLL;
  result = 0;
  while (**((_QWORD **)&xmmword_10097F168 + result) != a1)
  {
    if ((unsigned __int16)word_10097F162 == ++result)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_1000F09C4(uint64_t result, uint64_t *a2, __int16 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + result) + 48) >= 8u)
  {
    if (*((_BYTE *)a2 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c", 1066, "void _setCLHeaderLengthByteStream(uint32_t, OI_BYTE_STREAM *, uint16_t)");
    }
    else
    {
      v3 = *((unsigned __int16 *)a2 + 6);
      if (*((unsigned __int16 *)a2 + 5) - (int)v3 > 1 && *((_BYTE *)a2 + 14) == 2)
      {
        *(_BYTE *)(*a2 + v3) = a3;
        *(_BYTE *)(*a2 + *((unsigned __int16 *)a2 + 6) + 1) = HIBYTE(a3);
        *((_WORD *)a2 + 6) += 2;
        return result;
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c");
  }
  if (*((_BYTE *)a2 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c", 1068, "void _setCLHeaderLengthByteStream(uint32_t, OI_BYTE_STREAM *, uint16_t)");
    goto LABEL_13;
  }
  v4 = *((unsigned __int16 *)a2 + 6);
  if (*((unsigned __int16 *)a2 + 5) <= v4 || *((_BYTE *)a2 + 14) != 2)
LABEL_13:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c");
  v5 = *a2;
  *((_WORD *)a2 + 6) = v4 + 1;
  *(_BYTE *)(v5 + v4) = a3;
  return result;
}

uint64_t sub_1000F0AF8(__int128 *a1, void *a2, unsigned int a3, int a4)
{
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  void *v13;
  NSObject *v15;
  __int128 *v16;
  void *v17;
  uint64_t v18;
  uint8_t buf[4];
  void *v20;

  if ((sub_1000F04B0((uint64_t)a1) & 1) != 0)
  {
    v8 = sub_1000F0968((uint64_t)a1);
    if (a3 >= 0x100)
    {
      v9 = v8;
      if (v8 != -1 && *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v8) + 48) <= 7u)
      {
        if (sub_10005549C())
        {
          sub_100054530("CL data will be dropped for peer %d datasize is %d version %d", v9, a3, *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v9) + 48));
          v10 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
      }
    }
    if (byte_10097F8C0 == 1)
    {
      v18 = 0;
      if (sub_10005549C())
      {
        v11 = sub_100056080(qword_10097F8C8);
        sub_100054530("CL L2CAP queue is full, queueing data, current Queue size is %d packets", v11);
        v12 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v20 = sub_100054494();
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      v16 = a1;
      LOWORD(v18) = a3;
      v13 = sub_100052DC0(a3);
      v17 = v13;
      if (v13)
      {
        memmove(v13, a2, a3);
        sub_10025142C(qword_10097F8C8, (uint64_t)&v16, 24);
      }
      if (a4)
        sub_100053298(a2);
      if (v17)
        return 0;
      else
        return 106;
    }
    else
    {
      return sub_1000F5C28(a1, (char *)a2, a3, a4);
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("Not valid LE connection handle");
      v15 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    sub_100053298(a2);
    return 5100;
  }
}

uint64_t sub_1000F0D40(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  NSObject *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  int v11;
  _BOOL4 v12;
  NSObject *v13;
  uint8_t buf[4];
  void *v15;

  if (!sub_1000F04B0(a1))
    return 414;
  if (sub_1000F0968(a1) != -1)
  {
    if (!sub_10005549C())
      return 408;
    sub_100054530("Peer ID already exists for this connection handle.");
    v2 = sub_1000544A0(0x51u);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      return 408;
    goto LABEL_5;
  }
  if (!*(_WORD *)(a1 + 20))
  {
    if (sub_10005549C())
    {
      sub_100054530("Could not find the remote manufacturer name, it is currently 0");
      v4 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  if (sub_1000F0414(a1) && ((v5 = *(unsigned __int16 *)(a1 + 20), v5 == 15) || v5 == 89 || v5 == 76))
  {
    v6 = sub_1000F0FD0(a1);
    if (v6 == -1)
    {
      if (!sub_10005549C())
        return 408;
      sub_100054530("Peer ID could not be found for connection handle (%x).", a1);
      v13 = sub_1000544A0(0x51u);
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        return 408;
LABEL_5:
      sub_1006CE7A4();
      return 408;
    }
    v7 = v6;
    sub_1000F104C((__int128 *)a1);
    *(_BYTE *)(*((_QWORD *)&xmmword_10097F168 + v7) + 74) = 1;
    v8 = sub_10005549C();
    result = 0;
    if (v8)
    {
      sub_100054530("CL is pending remote ver for (%x).", a1);
      v9 = sub_1000544A0(0x51u);
      v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v10)
        goto LABEL_23;
    }
  }
  else
  {
    v11 = sub_10005549C();
    result = 0;
    if (v11)
    {
      sub_100054530("CL is disabled for (%x) .", a1);
      v9 = sub_1000544A0(0x51u);
      v12 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v12)
      {
LABEL_23:
        *(_DWORD *)buf = 136446210;
        v15 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000F0FD0(uint64_t a1)
{
  _QWORD *v2;
  __int16 v3;

  if ((unsigned __int16)word_10097F162 >= 0x10u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c");
  v2 = sub_100114588(0x78uLL);
  v3 = word_10097F162;
  *((_QWORD *)&xmmword_10097F168 + (unsigned __int16)word_10097F162) = v2;
  if (!v2)
    return 0xFFFFFFFFLL;
  *v2 = a1;
  word_10097F162 = v3 + 1;
  return (unsigned __int16)(v3 + 1) - 1;
}

uint64_t sub_1000F104C(__int128 *a1)
{
  int v2;
  NSObject *v3;
  char v4;
  _BYTE buf[24];

  if (sub_10005549C())
  {
    v2 = 11;
    if (!byte_10097F8D1)
      v2 = 0;
    sub_100054530("Sending VersionInfo version=%04x features=%04x", v2, dword_10097F8D4);
    v3 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  *(_WORD *)buf = 1289;
  if (byte_10097F8D1)
    v4 = 11;
  else
    v4 = 0;
  buf[2] = v4;
  *(_WORD *)&buf[3] = dword_10097F8D4;
  *(_WORD *)&buf[5] = 0;
  return sub_1000F0AF8(a1, buf, 7u, 0);
}

BOOL sub_1000F1174(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __int128 *i;
  _QWORD *v6;
  _BOOL8 result;
  int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int32x2_t *v17;

  v2 = sub_1000063DC();
  v3 = (unsigned __int16)word_10097F162;
  if (!word_10097F162)
    return 0;
  v4 = v2;
  v17 = 0;
  for (i = &xmmword_10097F168; ; i = (__int128 *)((char *)i + 8))
  {
    v6 = *(_QWORD **)i;
    if (**(_QWORD **)i == a1)
      break;
    if (!--v3)
      return 0;
  }
  *((_DWORD *)v6 + 21) = 0;
  *((_DWORD *)v6 + 22) = 0;
  v8 = *((_DWORD *)v6 + 4);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = v6[1] + v9;
      v13 = *(_BYTE *)(v12 + 80) != 0;
      v14 = sub_1001DB044(*(unsigned __int16 *)(v12 + 52), (uint64_t *)&v17);
      v6 = *(_QWORD **)i;
      if (!v14)
        *(int32x2_t *)((char *)v6 + 84) = vadd_s32(*(int32x2_t *)((char *)v6 + 84), v17[10]);
      v11 |= v13;
      ++v10;
      v9 += 88;
    }
    while (v10 < *((unsigned int *)v6 + 4));
    v8 = *((_DWORD *)v6 + 21);
  }
  else
  {
    v11 = 0;
  }
  if (*((_DWORD *)v6 + 23) == v8)
  {
    v15 = *((_DWORD *)v6 + 24);
    v16 = *((_DWORD *)v6 + 22);
    if (v15 == v16)
    {
      result = (v11 & 1) == 0 && v4 > v6[14] + 60000;
      goto LABEL_19;
    }
  }
  else
  {
    v16 = *((_DWORD *)v6 + 22);
  }
  result = 0;
  v6[14] = v4;
  v15 = v16;
LABEL_19:
  *((_DWORD *)v6 + 23) = v8;
  *((_DWORD *)v6 + 24) = v15;
  return result;
}

uint64_t sub_1000F12B8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  unsigned int v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  NSObject *v29;
  void *v30;
  int v31;
  int v33;
  int v34;
  uint64_t v37;
  uint64_t v38;
  uint8_t buf[4];
  void *v40;

  v37 = 0;
  if (word_10097F162)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v38 = 0;
    do
    {
      v5 = *((_QWORD *)&xmmword_10097F168 + v2);
      if (*(_QWORD *)v5 && (*(_QWORD *)v5 == a1 || byte_10097F8DC == 1))
      {
        v33 = v4;
        v34 = v3;
        if (*(_DWORD *)(v5 + 16))
        {
          v6 = 0;
          v7 = 0;
          v8 = 0;
          v9 = 0;
          do
          {
            v10 = sub_1001DB044(*(unsigned __int16 *)(*(_QWORD *)(v5 + 8) + v6 + 52), &v38);
            v5 = *((_QWORD *)&xmmword_10097F168 + v2);
            if (!v10)
            {
              v11 = *(_QWORD *)(v5 + 8) + v6;
              v13 = *(_DWORD *)(v38 + 80);
              v12 = *(_DWORD *)(v38 + 84);
              v15 = *(_DWORD *)(v11 + 72);
              v14 = *(_DWORD *)(v11 + 76);
              v16 = v12 - v14;
              v17 = v13 - v15;
              if (v13 != v15 || v12 != v14)
              {
                sub_100172CA0(a1, (_DWORD *)&v37 + 1, &v37);
                if (sub_10005549C())
                {
                  v19 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v2) + 8) + v6;
                  v20 = *(unsigned __int16 *)(a2 + 2);
                  sub_100054530("Pipe[ 0x%4x, p %2d, le 0x%4x, cl 0x%4x] Tx[ %4d kbps, %7d B, %2d%% %3d, %2d%% %3d ] Rx[ %4d kbps, %7d B, %2d%% %3d, %2d%% %3d ] Cl[ r %3d, c %3d, t %3d ] Le[ r %3d, c %3d, t %3d ] av [ %d, %d ] vse %d le %d, cl %d", *(unsigned __int16 *)(v19 + 52), *(unsigned __int8 *)(v19 + 54), *(unsigned __int16 *)(a2 + 204), *(unsigned __int16 *)(a2 + 202), 8 * (v17 / v20), *(_DWORD *)(v38 + 80), 100* *(unsigned __int16 *)(a2 + 32)/ (*(unsigned __int16 *)(a2 + 30) + *(unsigned __int16 *)(a2 + 32)), *(unsigned __int16 *)(a2 + 30), 100* *(unsigned __int16 *)(a2 + 23)/ (*(unsigned __int16 *)(a2 + 21) + *(unsigned __int16 *)(a2 + 23)), *(unsigned __int16 *)(a2 + 21), 8 * (v16 / v20), *(_DWORD *)(v38 + 84), 100
                  * *(unsigned __int16 *)(a2 + 36)
                  / (*(unsigned __int16 *)(a2 + 34) + *(unsigned __int16 *)(a2 + 36)),
                    *(unsigned __int16 *)(a2 + 34),
                    100
                  * *(unsigned __int16 *)(a2 + 27)
                  / (*(unsigned __int16 *)(a2 + 25) + *(unsigned __int16 *)(a2 + 27)),
                    *(unsigned __int16 *)(a2 + 25),
                    *(__int16 *)(a2 + 16),
                    *(unsigned __int16 *)(a2 + 14),
                    *(unsigned __int16 *)(a2 + 6),
                    *(__int16 *)(a2 + 18),
                    *(unsigned __int16 *)(a2 + 12),
                    *(unsigned __int16 *)(a2 + 4),
                    HIDWORD(v37),
                    v37,
                    *(unsigned __int8 *)(a2 + 38),
                    *(unsigned __int8 *)(a2 + 20),
                    *(unsigned __int8 *)(a2 + 29));
                  v21 = sub_1000544A0(0x51u);
                  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
                  {
                    v22 = sub_100054494();
                    *(_DWORD *)buf = 136446210;
                    v40 = v22;
                    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                  }
                }
              }
              v9 += v17;
              v8 += v16;
              v5 = *((_QWORD *)&xmmword_10097F168 + v2);
              *(_QWORD *)(*(_QWORD *)(v5 + 8) + v6 + 72) = *(_QWORD *)(v38 + 80);
            }
            ++v7;
            v6 += 88;
          }
          while (v7 < *(unsigned int *)(v5 + 16));
        }
        else
        {
          v9 = 0;
          v8 = 0;
        }
        if (sub_1001F4E24() >= 0x13 && v9 | v8)
        {
          if (*(_WORD *)(a2 + 202))
          {
            if (*(unsigned __int16 *)(a2 + 202) != 0xFFFF)
            {
              if (sub_10005549C())
              {
                sub_100054530("LinkCl AvSNR [0x%4x] [ %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d ] ", *(unsigned __int16 *)(a2 + 202), *(char *)(a2 + 139), *(char *)(a2 + 140), *(char *)(a2 + 141), *(char *)(a2 + 142), *(char *)(a2 + 143), *(char *)(a2 + 144), *(char *)(a2 + 145), *(char *)(a2 + 146), *(char *)(a2 + 147), *(char *)(a2 + 148), *(char *)(a2 + 149), *(char *)(a2 + 150), *(char *)(a2 + 151), *(char *)(a2 + 152), *(char *)(a2 + 153), *(char *)(a2 + 154), *(char *)(a2 + 155),
                  *(char *)(a2 + 156),
                  *(char *)(a2 + 157),
                  *(char *)(a2 + 158));
                v23 = sub_1000544A0(0x51u);
                if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                {
                  v24 = sub_100054494();
                  *(_DWORD *)buf = 136446210;
                  v40 = v24;
                  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                }
              }
            }
          }
          if (sub_10005549C())
          {
            sub_100054530("LinkLe AvSNR [0x%4x] [ %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d ] minSNR [%3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d ]", *(unsigned __int16 *)(a2 + 204), *(char *)(a2 + 39), *(char *)(a2 + 41), *(char *)(a2 + 43), *(char *)(a2 + 45), *(char *)(a2 + 47), *(char *)(a2 + 49), *(char *)(a2 + 51), *(char *)(a2 + 53), *(char *)(a2 + 55), *(char *)(a2 + 57), *(char *)(a2 + 59), *(char *)(a2 + 61), *(char *)(a2 + 63), *(char *)(a2 + 65), *(char *)(a2 + 67), *(char *)(a2 + 69),
              *(char *)(a2 + 71),
              *(char *)(a2 + 73),
              *(char *)(a2 + 75),
              *(char *)(a2 + 77),
              *(char *)(a2 + 40),
              *(char *)(a2 + 42),
              *(char *)(a2 + 44),
              *(char *)(a2 + 46),
              *(char *)(a2 + 48),
              *(char *)(a2 + 49),
              *(char *)(a2 + 52),
              *(char *)(a2 + 54),
              *(char *)(a2 + 56),
              *(char *)(a2 + 58),
              *(char *)(a2 + 59),
              *(char *)(a2 + 62),
              *(char *)(a2 + 64),
              *(char *)(a2 + 66),
              *(char *)(a2 + 68),
              *(char *)(a2 + 69),
              *(char *)(a2 + 72),
              *(char *)(a2 + 74),
              *(char *)(a2 + 76),
              *(char *)(a2 + 78));
            v25 = sub_1000544A0(0x51u);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              v26 = sub_100054494();
              *(_DWORD *)buf = 136446210;
              v40 = v26;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
          if (sub_10005549C())
          {
            sub_100054530("LinkLe AvgRSSI [0x%4x] [ %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d ] LinkCl [0x%4x] AvgRSSI[ %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d %3d ]", *(unsigned __int16 *)(a2 + 204), *(char *)(a2 + 79), *(char *)(a2 + 80), *(char *)(a2 + 81), *(char *)(a2 + 82), *(char *)(a2 + 83), *(char *)(a2 + 84), *(char *)(a2 + 85), *(char *)(a2 + 86), *(char *)(a2 + 87), *(char *)(a2 + 88), *(char *)(a2 + 89), *(char *)(a2 + 90), *(char *)(a2 + 91), *(char *)(a2 + 92), *(char *)(a2 + 93), *(char *)(a2 + 94),
              *(char *)(a2 + 95),
              *(char *)(a2 + 96),
              *(char *)(a2 + 97),
              *(char *)(a2 + 98),
              *(unsigned __int16 *)(a2 + 202),
              *(char *)(a2 + 159),
              *(char *)(a2 + 160),
              *(char *)(a2 + 161),
              *(char *)(a2 + 162),
              *(char *)(a2 + 163),
              *(char *)(a2 + 164),
              *(char *)(a2 + 165),
              *(char *)(a2 + 166),
              *(char *)(a2 + 167),
              *(char *)(a2 + 168),
              *(char *)(a2 + 169),
              *(char *)(a2 + 170),
              *(char *)(a2 + 171),
              *(char *)(a2 + 172),
              *(char *)(a2 + 173),
              *(char *)(a2 + 174),
              *(char *)(a2 + 175),
              *(char *)(a2 + 176),
              *(char *)(a2 + 177),
              *(char *)(a2 + 178));
            v27 = sub_1000544A0(0x51u);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              v28 = sub_100054494();
              *(_DWORD *)buf = 136446210;
              v40 = v28;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
          if (sub_10005549C())
          {
            sub_100054530("LinkLe PktCnt [0x%4x] [ 1M %3d %3d, 2M %3d %3d ] LinkCl [0x%4x] PktCnt[ DH1 %3d %3d, DH3 %3d %3d, DH5 %3d %3d, 2/4DH1 %3d %3d, 2/4DH3 %3d %3d, 2/4DH5 %3d %3d, 3/8DH1 %3d %3d, 3/8DH3 %3d %3d, 3/8Dh5 %3d %3d ]", *(unsigned __int16 *)(a2 + 204), *(unsigned __int8 *)(a2 + 180), *(unsigned __int8 *)(a2 + 181), *(unsigned __int8 *)(a2 + 182), *(unsigned __int8 *)(a2 + 183), *(unsigned __int16 *)(a2 + 202), *(unsigned __int8 *)(a2 + 184), *(unsigned __int8 *)(a2 + 185), *(unsigned __int8 *)(a2 + 186), *(unsigned __int8 *)(a2 + 187), *(unsigned __int8 *)(a2 + 188), *(unsigned __int8 *)(a2 + 189), *(unsigned __int8 *)(a2 + 190), *(unsigned __int8 *)(a2 + 191), *(unsigned __int8 *)(a2 + 192), *(unsigned __int8 *)(a2 + 193), *(unsigned __int8 *)(a2 + 194),
              *(unsigned __int8 *)(a2 + 195),
              *(unsigned __int8 *)(a2 + 196),
              *(unsigned __int8 *)(a2 + 197),
              *(unsigned __int8 *)(a2 + 198),
              *(unsigned __int8 *)(a2 + 199),
              *(unsigned __int8 *)(a2 + 200),
              *(unsigned __int8 *)(a2 + 201));
            v29 = sub_1000544A0(0x51u);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              v30 = sub_100054494();
              *(_DWORD *)buf = 136446210;
              v40 = v30;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
        }
        v31 = v8;
        v3 = v9 + v34;
        v4 = v31 + v33;
        sub_100172CF4(a1, *(unsigned __int8 *)(a2 + 20), *(unsigned __int8 *)(a2 + 29), v9 + v34, v31 + v33, *(unsigned __int16 *)(a2 + 12), *(unsigned __int16 *)(a2 + 14), (100* *(unsigned __int16 *)(a2 + 23)/ (*(unsigned __int16 *)(a2 + 21) + *(unsigned __int16 *)(a2 + 23))), 100* *(unsigned __int16 *)(a2 + 27)/ (*(unsigned __int16 *)(a2 + 25) + *(unsigned __int16 *)(a2 + 27)), *(_BYTE *)(a2 + 18), 100* *(unsigned __int16 *)(a2 + 32)/ (*(unsigned __int16 *)(a2 + 30) + *(unsigned __int16 *)(a2 + 32)), 100* *(unsigned __int16 *)(a2 + 36)
        / (*(unsigned __int16 *)(a2 + 34) + *(unsigned __int16 *)(a2 + 36)),
          *(_BYTE *)(a2 + 16),
          0,
          *(_BYTE *)(a2 + 38));
      }
      ++v2;
    }
    while (v2 < (unsigned __int16)word_10097F162);
  }
  return 0;
}

void sub_1000F1C84(int a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  NSObject *v24;
  void *v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint8_t buf[4];
  void *v39;

  v36 = 0;
  v37 = 0;
  v35 = 0;
  v33 = 0;
  if (sub_1000F04EC(a1, &v33, &v34))
  {
    if (sub_10005549C())
    {
      sub_100054530("Can not find channel/peer ID for pipe ID %d", a1);
      v2 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  else
  {
    v3 = v33;
    v4 = **((_QWORD **)&xmmword_10097F168 + v33);
    sub_10004AD30((uint64_t)&v37);
    v5 = sub_100258988((uint64_t)&v37);
    v32 = v5 - sub_100258988(*((_QWORD *)&xmmword_10097F168 + v3) + 76);
    if (v32 >= 0x3E8)
    {
      sub_10004AD30(*((_QWORD *)&xmmword_10097F168 + v3) + 76);
      v6 = *((_QWORD *)&xmmword_10097F168 + v3);
      if (*(_DWORD *)(v6 + 16))
      {
        v7 = 0;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v30 = v4;
        do
        {
          v11 = sub_1001DB044(*(unsigned __int16 *)(*(_QWORD *)(v6 + 8) + v7 + 52), (uint64_t *)&v36);
          v6 = *((_QWORD *)&xmmword_10097F168 + v3);
          if (!v11)
          {
            v12 = *(_QWORD *)(v6 + 8) + v7;
            v13 = v36[20];
            v14 = v36[21];
            v15 = *(_DWORD *)(v12 + 72);
            v16 = *(_DWORD *)(v12 + 76);
            v17 = v13 - v15;
            if (v13 != v15 || v14 != v16)
            {
              sub_100172CA0(v4, (_DWORD *)&v35 + 1, &v35);
              if (sub_10005549C())
              {
                v19 = v14 - v16;
                v20 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v3) + 8) + v7;
                v31 = *(unsigned __int16 *)(v20 + 52);
                v21 = *(unsigned __int8 *)(v20 + 54);
                v22 = v36[22];
                v23 = sub_100172C70(0);
                v29 = v21;
                v4 = v30;
                sub_100054530("Pipe[ 0x%4x, p %d, f %d, r %d, d %d] \tTx[ %d kbps, %d B ] \tRx[ %d kbps, %d B ] \tav[ %d, %d ]", v31, v29, v22, v23, v32, 8 * (v17 / v32), v36[20], 8 * (v19 / v32), v36[21], HIDWORD(v35), v35);
                v24 = sub_1000544A0(0x51u);
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                {
                  v25 = sub_100054494();
                  *(_DWORD *)buf = 136446210;
                  v39 = v25;
                  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                }
              }
            }
            v26 = v36[20];
            v27 = v36[21];
            v10 += v26;
            v9 += v27;
            v6 = *((_QWORD *)&xmmword_10097F168 + v3);
            v28 = *(_QWORD *)(v6 + 8) + v7;
            *(_DWORD *)(v28 + 72) = v26;
            *(_DWORD *)(v28 + 76) = v27;
          }
          ++v8;
          v7 += 88;
        }
        while (v8 < *(unsigned int *)(v6 + 16));
      }
      else
      {
        v10 = 0;
        v9 = 0;
      }
      sub_10017312C(v4, v10, v9);
    }
  }
}

uint64_t sub_1000F1F44(uint64_t a1, __int128 *a2, unsigned int a3, char *a4, size_t a5, int a6)
{
  uint64_t v6;
  unsigned int v13;
  uint64_t v15;
  unsigned int v16;
  int v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  _OWORD v21[7];
  uint8_t buf[4];
  void *v23;

  v6 = 101;
  if (!a4 || !(_DWORD)a5)
    return v6;
  memset(v21, 0, sizeof(v21));
  if (sub_1000F0968((uint64_t)a2) != -1)
  {
    v6 = sub_1000532A8((uint64_t)v21, 1u);
    if (!(_DWORD)v6)
    {
      v13 = a6 ? 1 : 2;
      v6 = sub_10005336C((unsigned __int8 *)v21, a4, a5, v13);
      if (!(_DWORD)v6)
      {
        v6 = sub_1001DBC18(a1, a3, a2, (uint64_t)v21, 1);
        if (sub_10002825C() && sub_1001F4E24() <= 0xE)
          sub_1000F1C84(a3);
        if ((_DWORD)v6)
        {
          if ((_DWORD)v6 != 410)
          {
            if ((_DWORD)v6 != 412)
            {
              if (sub_10005549C())
              {
                sub_100054530("CL send error on pipeID %d data size %d", a3, a5);
                v20 = sub_1000544A0(0x51u);
                if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
                  sub_1006CEEC0();
              }
              goto LABEL_26;
            }
            v15 = (uint64_t)a2;
            v16 = a5;
            v17 = 0;
LABEL_25:
            sub_1000EE1D0(v15, v16, v17);
LABEL_26:
            sub_100253FD8((uint64_t)v21);
            return v6;
          }
          if (sub_10005549C())
          {
            sub_100054530("CL L2CAP pipe %d is already full, not enqueing data of %d", a3, a5);
            v18 = sub_1000544A0(0x51u);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              v19 = sub_100054494();
              *(_DWORD *)buf = 136446210;
              v23 = v19;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
          v15 = (uint64_t)a2;
          v16 = 0;
        }
        else
        {
          v15 = (uint64_t)a2;
          v16 = a5;
        }
        v17 = 1;
        goto LABEL_25;
      }
    }
  }
  if (a6)
    sub_100053298(a4);
  return v6;
}

uint64_t sub_1000F2184(__int128 *a1, const void *a2, unsigned int a3)
{
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  unsigned int v16;
  _BYTE *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  NSObject *v23;
  NSObject *v24;
  void *v25;
  _BYTE *v26;
  __int16 v27;
  unsigned __int16 v28;
  int v29;
  uint8_t buf[4];
  void *v31;

  result = 101;
  if (!a2 || !a3)
    return result;
  v7 = sub_1000F0968((uint64_t)a1);
  if (v7 == -1 || *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v7) + 48) < 7u)
    return 101;
  v8 = sub_1000F0968((uint64_t)a1);
  if ((_DWORD)v8 == -1)
  {
    if (sub_10005549C())
    {
      sub_100054530("invalid peer");
      v13 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    return 414;
  }
  v9 = v8;
  v10 = *((_QWORD *)&xmmword_10097F168 + v8);
  if (!v10)
  {
    if (sub_10005549C())
    {
      sub_100054530("Received peer ID before we are tracking connection handle %p", a1);
      v14 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 414;
  }
  v11 = *(unsigned __int8 *)(v10 + 48);
  if (v11 > 6)
  {
    if (v11 == 7)
      v15 = 2;
    else
      v15 = 3;
    v16 = v15 + a3;
    v17 = sub_100052DC0(v15 + a3);
    if (v17)
    {
      v18 = v17;
      v26 = v17;
      v27 = v15 + a3;
      v28 = v15 + a3;
      v29 = 131073;
      *v17 = -111;
      sub_1000F09C4(v9, (uint64_t *)&v26, a3);
      v19 = (uint64_t)v26;
      v20 = (unsigned __int16)v29;
      v21 = HIBYTE(v29);
      if (HIBYTE(v29))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c", 1752, "OI_STATUS sendRawData(OI_HCI_CONNECTION_HANDLE, const uint8_t *, uint8_t)");
        v22 = 0;
      }
      else
      {
        v22 = v28 - (unsigned __int16)v29;
      }
      if (v22 < (int)a3 || BYTE2(v29) != 2)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c");
      memmove((void *)(v19 + v20), a2, a3);
      if (v21)
      {
        if (sub_10005549C())
        {
          sub_100054530("Error creating rawData PDU");
          v23 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        sub_100053298(v18);
        return 131;
      }
      else
      {
        if (sub_10005549C())
        {
          sub_100054530("Sending cl data of length %d to %p headersize %d", a3, a1, v15);
          v24 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            v25 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v31 = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        return sub_1000F0AF8(a1, v18, v16, 1);
      }
    }
    else
    {
      return 106;
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("peer is version %d, and does not support this command", *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v9) + 48));
      v12 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 408;
  }
}

uint64_t sub_1000F2500(unint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  int v6;

  v3 = sub_10019AF68(a1);
  v4 = sub_1000F0968(v3);
  result = 414;
  if (v3 && v4 != -1)
  {
    v6 = *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v4) + 48);
    if (v6)
    {
      result = 0;
      *a2 = v6;
    }
    else
    {
      return 103;
    }
  }
  return result;
}

uint64_t sub_1000F2560()
{
  if (byte_10097F8D1)
    return 11;
  else
    return 0;
}

uint64_t sub_1000F2578(void *__s2, size_t size, int a3, int a4, char a5, int a6, char a7, char a8, __int128 *a9)
{
  int v13;
  char *v17;
  int v18;
  uint64_t v20;
  int *v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  char v28;
  char v29;
  char v30;
  char v31;
  __int16 *v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  __int128 v36;
  __int128 v37;
  int v38;
  char v39;
  NSObject *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  void *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  size_t __na;
  int v57;
  __int16 v58;
  uint8_t buf[4];
  void *v60;

  if ((size - 1) > 0x1F || __s2 == 0 || a9 == 0)
    return 101;
  v13 = a4;
  v17 = &byte_10097F000;
  v18 = (unsigned __int16)word_10097F1E8;
  if (word_10097F1E8)
  {
    v20 = (unsigned __int16)word_10097F1E8;
    v21 = &dword_10097F1FC;
    do
    {
      if (*v21 == a3
        && *((unsigned __int8 *)v21 - 4) == (_DWORD)size
        && !memcmp(*(const void **)(v21 - 3), __s2, size))
      {
        if (*((_BYTE *)v21 + 9))
          return 145;
        else
          return 119;
      }
      v21 += 18;
      --v20;
    }
    while (v20);
    v13 = a4;
    v17 = &byte_10097F000;
    if (v18 != 24)
      goto LABEL_20;
    if (sub_10005549C())
    {
      sub_100054530("Reached max local services!");
      v22 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 106;
  }
LABEL_20:
  v23 = sub_100052DC0(size);
  if (!v23)
    return 106;
  v24 = (uint64_t)v23;
  memmove(v23, __s2, size);
  v25 = *((unsigned __int16 *)v17 + 244);
  v26 = &qword_10097F1F0[9 * v25];
  *v26 = v24;
  *((_BYTE *)v26 + 8) = size;
  *((_DWORD *)v26 + 3) = a3;
  v27 = 1;
  if (v25)
  {
    v28 = a8;
    v29 = a7;
    v30 = a5;
    while (1)
    {
      v31 = 0;
      v32 = &word_10097F202;
      v33 = v25;
      do
      {
        v34 = (unsigned __int16)*v32;
        v32 += 36;
        v31 |= v34 == v27;
        --v33;
      }
      while (v33);
      if ((v31 & 1) == 0)
        break;
      if (++v27 == 0xFFFF)
      {
        LOWORD(v27) = -1;
        break;
      }
    }
  }
  else
  {
    v28 = a8;
    v29 = a7;
    v30 = a5;
  }
  v35 = &qword_10097F1F0[9 * v25];
  *((_WORD *)v35 + 9) = v27;
  *((_BYTE *)v35 + 20) = v13;
  v36 = *a9;
  v37 = a9[1];
  v35[8] = *((_QWORD *)a9 + 4);
  *((_OWORD *)v35 + 2) = v36;
  *((_OWORD *)v35 + 3) = v37;
  *((_BYTE *)v35 + 21) = 0;
  *((_BYTE *)v35 + 16) = v30;
  *((_BYTE *)v35 + 24) = a6;
  *((_BYTE *)v35 + 25) = v29;
  *((_BYTE *)v35 + 26) = v28;
  if (byte_10097F8DD)
    v38 = 0;
  else
    v38 = a6;
  if (v13 == 13 || v38)
  {
    if (v38)
    {
      if (sub_10005549C())
      {
        sub_100054530("Forcing ERTM enabled on a non-reliable pipe priority %d, disableReliable %d", v13, 1);
        v40 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
    v39 = 0;
    LODWORD(v25) = *((unsigned __int16 *)v17 + 244);
  }
  else
  {
    v39 = 1;
  }
  v41 = &qword_10097F1F0[9 * v25];
  *((_BYTE *)v41 + 22) = v39;
  *((_BYTE *)v41 + 23) = 0;
  *((_WORD *)v17 + 244) = v25 + 1;
  if (word_10097F162)
  {
    v42 = 0;
    if ((unsigned __int16)size >= 0xFu)
      v43 = 15;
    else
      v43 = (unsigned __int16)size;
    __na = v43;
    v57 = v13;
    do
    {
      if (sub_1000F04B0(**((_QWORD **)&xmmword_10097F168 + v42)))
      {
        v44 = *((_QWORD *)&xmmword_10097F168 + v42);
        if (!*(_BYTE *)(v44 + 74))
        {
          if (sub_1000F0414(*(_QWORD *)v44))
          {
            if (v57 == 13)
            {
              if (sub_1000ECA90(**((_QWORD **)&xmmword_10097F168 + v42), 1))
              {
                if (sub_10005549C())
                {
                  sub_100054530("Force upgrade TS not ready C");
                  v45 = sub_1000544A0(0x51u);
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                  {
                    v46 = sub_100054494();
                    *(_DWORD *)buf = 136446210;
                    v60 = v46;
                    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                  }
                }
              }
            }
            sub_1000F2A44(**((__int128 ***)&xmmword_10097F168 + v42), *((unsigned __int16 *)&qword_10097F1F0[9 * (unsigned __int16)word_10097F1E8 - 6] - 3), __s2, (unsigned __int16)size, a3, (unsigned __int16)(word_10097F1E8 - 1));
          }
          else
          {
            v47 = *((_QWORD *)&xmmword_10097F168 + v42);
            v48 = *(_DWORD *)(v47 + 16);
            if (v48)
            {
              v49 = 0;
              v50 = (byte_10097F160 | memcmp("com.apple.BT.TS", __s2, __na)) == 0;
              v51 = 88 * v48;
              while (1)
              {
                if (!v50)
                {
                  v52 = *(_QWORD *)(v47 + 8) + v49;
                  if (sub_1000F2CE0((_DWORD *)v52, __s2, size, a3))
                    break;
                }
                v49 += 88;
                if (v51 == v49)
                  goto LABEL_62;
              }
              v58 = *(_DWORD *)(v52 + 40);
              *(_BYTE *)(v52 + 54) = *((_BYTE *)&qword_10097F1F0[9 * (unsigned __int16)word_10097F1E8 - 6] - 4);
              sub_1000F2D54(*(__int128 **)v47, 1u, (uint64_t)&v58);
            }
          }
        }
      }
LABEL_62:
      ++v42;
    }
    while (v42 < (unsigned __int16)word_10097F162);
  }
  return 0;
}

uint64_t sub_1000F2A44(__int128 *a1, int a2, const void *a3, unsigned int a4, char a5, unsigned int a6)
{
  unsigned int v12;
  unsigned int v13;
  __int16 v14;
  __int16 v15;
  unsigned __int16 v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned int v19;
  NSObject *v20;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char v26;
  NSObject *v27;
  uint8_t buf[4];
  void *v29;
  _OWORD v30[2];
  char v31;

  v12 = sub_1000F0968((uint64_t)a1);
  if (v12 == -1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Can not send accept channel, peer is invalid for handle %p", a1);
      v20 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 414;
  }
  else
  {
    v13 = v12;
    if (sub_1000FA3CC(v12))
    {
      if (sub_1000FA550(v13, a3, a4, a1))
      {
        if (*(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v13) + 48) <= 7u)
          v14 = 2;
        else
          v14 = 3;
        v15 = a4 + 5;
        v16 = a4 + 5 + v14;
        v17 = sub_100052DC0(v16);
        if (v17)
        {
          v18 = v17;
          *v17 = 5;
          if (*(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v13) + 48) < 8u)
          {
            v19 = 2;
          }
          else
          {
            v17[2] = HIBYTE(v15);
            v19 = 3;
          }
          v17[1] = v15;
          v22 = &v17[v19];
          *(_WORD *)v22 = a2;
          v22[2] = a5;
          v23 = v19 | 4;
          v22[3] = a4;
          memmove(&v17[v23], a3, a4);
          v24 = v23 + a4;
          v18[v24] = 0;
          v25 = &qword_10097F1F0[9 * a6];
          v26 = *((_BYTE *)v25 + 22);
          v18[v24] = v26;
          v18[v24] = v26 | (2 * *((_BYTE *)v25 + 23));
          v31 = 0;
          memset(v30, 0, sizeof(v30));
          __memcpy_chk(v30, a3, a4, 33);
          *((_BYTE *)v30 + a4) = 0;
          if (sub_10005549C())
          {
            sub_100054530("Sending added service %d for %s to %p index %d", a2, (const char *)v30, a1, v23);
            v27 = sub_1000544A0(0x51u);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446210;
              v29 = sub_100054494();
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
          return sub_1000F0AF8(a1, v18, v16, 1);
        }
        else
        {
          return 106;
        }
      }
      else
      {
        return 153;
      }
    }
    else
    {
      return 152;
    }
  }
}

BOOL sub_1000F2CE0(_DWORD *a1, const void *a2, size_t __n, int a4)
{
  int v7;

  if (a1[8] != (_DWORD)__n || memcmp(a1, a2, __n))
    return 0;
  v7 = a1[9];
  if (a4 == 2 && v7 == 2 || a4 == 1 && !v7)
    return 1;
  return !a4 && v7 == 1;
}

void sub_1000F2D54(__int128 *a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint8_t *v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  NSObject *v18;
  __int128 *v19;
  uint8_t *v20;
  unsigned int v21;
  int v22;
  NSObject *v23;
  NSObject *v24;
  uint8_t buf[4];
  void *v26;

  if (byte_10097F8B0)
  {
    if (a2)
    {
      v6 = sub_1000F0968((uint64_t)a1);
      if (v6 == -1)
      {
        if (sub_10005549C())
        {
          sub_100054530("Can not send services, peer is invalid for handle %p", a1);
          v24 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
      }
      else
      {
        v7 = v6;
        if (sub_1000FA3CC(v6))
        {
          v8 = 2;
          if (*(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v7) + 48) <= 7u)
            v9 = 2;
          else
            v9 = 3;
          v10 = (2 * a2) | 1;
          v11 = v10 + v9;
          v12 = (uint8_t *)sub_100052DC0((v10 + v9));
          if (v12)
          {
            v13 = v12;
            v14 = a2;
            *v12 = 2;
            if (*(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v7) + 48) >= 8u)
            {
              v12[2] = (unsigned __int16)a2 >> 7;
              v8 = 3;
            }
            v15 = 0;
            v12[1] = v10;
            v12[v8] = a2;
            v16 = v8 + 2;
            do
            {
              v17 = a3 + 2 * v15;
              v12[v16 - 1] = *(_WORD *)v17;
              v12[v16] = *(_BYTE *)(v17 + 1);
              ++v15;
              v16 += 2;
            }
            while (v14 != v15);
            if (sub_10005549C())
            {
              sub_100054530("Sending %d services back to %p, index %d", v14, a1, v16 - 1);
              v18 = sub_1000544A0(0x51u);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136446210;
                v26 = sub_100054494();
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
              }
            }
            v19 = a1;
            v20 = v13;
            v21 = v11;
            v22 = 1;
          }
          else
          {
            *(_WORD *)buf = 264;
            buf[2] = 7;
            v20 = buf;
            v19 = a1;
            v21 = 3;
            v22 = 0;
          }
          sub_1000F0AF8(v19, v20, v21, v22);
        }
      }
    }
    else if (sub_10005549C())
    {
      sub_100054530("No common services found.");
      v23 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v26 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
  }
}

BOOL sub_1000F2FF4()
{
  char *v1;
  uint64_t v2;
  unint64_t v3;
  int v4;

  if (!word_10097F1E8)
    return 0;
  if (byte_10097F204 == 13)
    return 1;
  v1 = &byte_10097F24C;
  v2 = 1;
  do
  {
    v3 = v2;
    if ((unsigned __int16)word_10097F1E8 == v2)
      break;
    v4 = *v1;
    v1 += 72;
    ++v2;
  }
  while (v4 != 13);
  return v3 < (unsigned __int16)word_10097F1E8;
}

uint64_t sub_1000F3054(const void *a1, unsigned int a2, uint64_t a3, int a4)
{
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  char *i;
  unsigned __int16 v11;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t *v41;
  void (*v42)(const void *, size_t, uint64_t);
  NSObject *v43;
  uint64_t *v44;
  void (**v45)(_QWORD, uint64_t);
  unsigned __int8 *v46;
  unsigned __int16 *v47;
  uint8_t buf[4];
  void *v49;
  __int16 v50;
  int v51;
  _OWORD v52[2];
  char v53;

  v53 = 0;
  memset(v52, 0, sizeof(v52));
  if (a2 >= 0x20)
    v7 = 32;
  else
    v7 = a2;
  __memcpy_chk(v52, a1, v7, 33);
  *((_BYTE *)v52 + v7) = 0;
  v8 = (unsigned __int16)word_10097F1E8;
  if (word_10097F1E8)
  {
    v9 = 0;
    for (i = &byte_10097F205;
          *(_DWORD *)(i - 9) != (_DWORD)a3
       || (_DWORD)v7 != *(i - 13)
       || memcmp(*(const void **)(i - 21), a1, v7);
          i += 72)
    {
      if (v8 == ++v9)
        return 121;
    }
    if (*i)
    {
      if (sub_10005549C())
      {
        sub_100054530("Unregistering something pending unregistration");
        v40 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 121;
    }
    *i = 1;
    v11 = v9;
  }
  else
  {
    LODWORD(v9) = 0;
    v11 = 0;
  }
  if ((_DWORD)v9 == (_DWORD)v8)
    return 121;
  if (word_10097F162)
  {
    v13 = 0;
    v14 = &qword_10097F1F0[9 * v11];
    v47 = (unsigned __int16 *)v14 + 9;
    v45 = (void (**)(_QWORD, uint64_t))(v14 + 6);
    v46 = (unsigned __int8 *)(v14 + 1);
    do
    {
      if (sub_1000F04B0(**((_QWORD **)&xmmword_10097F168 + v13)))
      {
        v15 = *((_QWORD *)&xmmword_10097F168 + v13);
        if (!*(_BYTE *)(v15 + 74))
        {
          if (sub_1000F0414(*(_QWORD *)v15))
          {
            if (sub_10005549C())
            {
              sub_100054530("Central removing service %d named %s to %d with priority %d", *v47, (const char *)v52, v13, a4);
              v16 = sub_1000544A0(0x51u);
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                v17 = sub_100054494();
                *(_DWORD *)buf = 136446210;
                v49 = v17;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
              }
            }
            if (a4 == 13)
            {
              v18 = *((_QWORD *)&xmmword_10097F168 + v13);
              *(_BYTE *)(v18 + 75) = 0;
              if (sub_1000ECA90(*(_QWORD *)v18, 0))
              {
                if (sub_10005549C())
                {
                  sub_100054530("Force upgrade TS not ready D");
                  v19 = sub_1000544A0(0x51u);
                  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                  {
                    v20 = sub_100054494();
                    *(_DWORD *)buf = 136446210;
                    v49 = v20;
                    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                  }
                }
              }
            }
            sub_1000F36B4(v13, *v47, (const void *)qword_10097F1F0[9 * v11], *v46);
            v21 = *((_QWORD *)&xmmword_10097F168 + v13);
            v22 = *(_DWORD *)(v21 + 16);
            if (!v22)
              goto LABEL_44;
            v23 = 0;
            v24 = 0;
            v25 = *(_QWORD *)(v21 + 8);
            v26 = 88 * v22;
            while (!sub_1000F384C((_DWORD *)(v25 + v23), v11))
            {
              ++v24;
              v23 += 88;
              if (v26 == v23)
                goto LABEL_44;
            }
            *(_DWORD *)(v25 + v23 + 44) = 2;
            if (*v45)
            {
              (*v45)(*(unsigned __int16 *)(v25 + v23 + 52), 5102);
              v25 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v13) + 8);
            }
            v32 = *(_QWORD *)(v25 + v23 + 64);
            if (v32)
            {
              sub_1001DC658(v32);
              v25 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v13) + 8);
            }
            *(_QWORD *)(v25 + v23 + 64) = 0;
            if (*(_DWORD *)(*((_QWORD *)&xmmword_10097F168 + v13) + 16) == v24)
            {
LABEL_44:
              if (sub_10005549C())
              {
                sub_100054530("Pipe associated with service to unregister no longer exists");
                v33 = sub_1000544A0(0x51u);
                if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
                {
                  v34 = sub_100054494();
                  *(_DWORD *)buf = 136446466;
                  v49 = v34;
                  v50 = 1024;
                  v51 = 0xFFFF;
                  _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
                }
              }
            }
          }
          else
          {
            v27 = *((_QWORD *)&xmmword_10097F168 + v13);
            v28 = *(_DWORD *)(v27 + 16);
            if (v28)
            {
              v29 = 0;
              v30 = *(_QWORD *)(v27 + 8);
              v31 = 88 * v28;
              while (!sub_1000F38BC(v30 + v29, v11))
              {
                v29 += 88;
                if (v31 == v29)
                  goto LABEL_18;
              }
              if ((sub_10005549C() & 1) != 0)
              {
                sub_100054530("Peripheral removing service %d named %s to peer %d with priority %d", *v47, (const char *)v52, v13, a4);
                v35 = sub_1000544A0(0x51u);
                if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
                {
                  v36 = sub_100054494();
                  *(_DWORD *)buf = 136446210;
                  v49 = v36;
                  _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                }
              }
              v37 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v13) + 8) + v29;
              *(_DWORD *)(v37 + 44) = 2;
              sub_1000F36B4(v13, *(_DWORD *)(v37 + 40), (const void *)v37, *(unsigned __int16 *)(v37 + 32));
              if (*v45)
                (*v45)(*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v13) + 8) + v29 + 52), 5102);
              v38 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v13) + 8);
              v39 = *(_QWORD *)(v38 + v29 + 64);
              if (v39)
              {
                sub_1001DC658(v39);
                v38 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v13) + 8);
              }
              *(_QWORD *)(v38 + v29 + 64) = 0;
            }
          }
        }
      }
LABEL_18:
      ++v13;
    }
    while (v13 < (unsigned __int16)word_10097F162);
  }
  else
  {
    v41 = &qword_10097F1F0[9 * v9];
    v42 = (void (*)(const void *, size_t, uint64_t))v41[8];
    if (sub_10005549C())
    {
      sub_100054530("Unregistering service immediately because no peer is connected");
      v43 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v49 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    sub_100053298((void *)*v41);
    v44 = &qword_10097F1F0[9 * (unsigned __int16)--word_10097F1E8];
    memmove(v41, v44, 0x48uLL);
    *(_OWORD *)v44 = 0u;
    *((_OWORD *)v44 + 1) = 0u;
    *((_OWORD *)v44 + 2) = 0u;
    *((_OWORD *)v44 + 3) = 0u;
    v44[8] = 0;
    if (v42)
      v42(a1, v7, a3);
  }
  sub_1000FAF14();
  return 0;
}

uint64_t sub_1000F36B4(unsigned int a1, int a2, const void *a3, unsigned int a4)
{
  void *v8;
  uint64_t result;
  unsigned int v10;
  unsigned __int16 v11;
  size_t v12;
  void *v13;
  unsigned int v14;
  NSObject *v15;
  uint8_t buf[4];
  void *v17;

  v8 = (void *)**((_QWORD **)&xmmword_10097F168 + a1);
  result = sub_1000FA3CC(a1);
  if ((_DWORD)result)
  {
    result = sub_1000FA550(a1, a3, a4, v8);
    if ((_DWORD)result)
    {
      v10 = *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + a1) + 48);
      v11 = v10 <= 7 ? 4 : 5;
      v12 = v10 <= 7 ? 4 : 5;
      result = (uint64_t)sub_100052DC0(v12);
      if (result)
      {
        v13 = (void *)result;
        *(_BYTE *)result = 6;
        v14 = 2;
        if (*(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + a1) + 48) >= 8u)
        {
          *(_BYTE *)(result + 2) = 0;
          v14 = 3;
        }
        *(_BYTE *)(result + 1) = 2;
        *(_WORD *)(result + v14) = a2;
        if (sub_10005549C())
        {
          sub_100054530("Sending service removed for peerID %d serviceID %d index %d", a1, a2, v14 + 2);
          v15 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446210;
            v17 = sub_100054494();
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        return sub_1000F0AF8((__int128 *)v8, v13, v11, 1);
      }
    }
  }
  return result;
}

BOOL sub_1000F384C(_DWORD *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t *v3;
  size_t v4;

  v2 = a1[8];
  v3 = &qword_10097F1F0[9 * a2];
  if (v2 != *((unsigned __int8 *)v3 + 8) || a1[9] != HIDWORD(qword_10097F1F0[9 * a2 + 1]))
    return 0;
  if (v2 >= 0x20)
    v4 = 32;
  else
    v4 = v2;
  return memcmp(a1, (const void *)*v3, v4) == 0;
}

BOOL sub_1000F38BC(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t *v3;
  int v4;
  size_t v5;

  v2 = *(_DWORD *)(a1 + 32);
  v3 = &qword_10097F1F0[9 * a2];
  if (v2 != *((unsigned __int8 *)v3 + 8) || BYTE6(qword_10097F1F0[9 * a2 + 2]) != *(unsigned __int8 *)(a1 + 56))
    return 0;
  v4 = HIDWORD(qword_10097F1F0[9 * a2 + 1]);
  if (!v4)
  {
    if (*(_DWORD *)(a1 + 36) == 1)
      goto LABEL_9;
    return 0;
  }
  if (v4 == 1)
  {
    if (!*(_DWORD *)(a1 + 36))
      goto LABEL_9;
    return 0;
  }
  if (v4 != 2 || *(_DWORD *)(a1 + 36) != 2)
    return 0;
LABEL_9:
  if (v2 >= 0x20)
    v5 = 32;
  else
    v5 = v2;
  return memcmp((const void *)a1, (const void *)*v3, v5) == 0;
}

uint64_t sub_1000F3970(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  NSObject *v3;
  uint8_t buf[4];
  void *v6;

  v1 = sub_1000F0968(a1);
  if (v1 == -1)
    return 0;
  v2 = v1;
  if (!*(_BYTE *)(*((_QWORD *)&xmmword_10097F168 + v1) + 48))
    return 0;
  if (sub_10005549C())
  {
    sub_100054530("peerID=%d version=%d", v2, *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v2) + 48));
    v3 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v6 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  return 1;
}

void sub_1000F3A68(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;

  v4 = sub_1000F0968(a1);
  if (v4 == -1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Can not update flush, peer lookup was invalid");
      v14 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  else
  {
    v5 = *((_QWORD *)&xmmword_10097F168 + v4);
    if (*(_BYTE *)(v5 + 75) && *(_DWORD *)(v5 + 16))
    {
      v6 = 0;
      v7 = v4;
      v8 = 64;
      do
      {
        v9 = *(_QWORD *)(v5 + 8);
        if (v9 && *(_QWORD *)(v9 + v8) && *(_BYTE *)(v9 + v8 - 10) == 13)
        {
          if (a2)
          {
            v10 = sub_100175198(a1, 200);
            if ((_DWORD)v10)
            {
              v11 = v10;
              if (sub_10005549C())
              {
                sub_100054530("Flush status failed with %!", v11);
                v12 = sub_1000544A0(0x51u);
                if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
                  sub_1006CEFC0();
              }
            }
            else
            {
              *(_WORD *)(sub_1001E3CCC(*(int **)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v7) + 8) + v8)) + 38) = 200;
            }
          }
          else
          {
            if (sub_10005549C())
            {
              sub_100054530("We downgraded while servicing a reserved priority pipe");
              v13 = sub_1000544A0(0x51u);
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
                sub_1006CEFC0();
            }
            *(_WORD *)(sub_1001E3CCC(*(int **)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v7) + 8) + v8)) + 38) = -1;
          }
        }
        ++v6;
        v5 = *((_QWORD *)&xmmword_10097F168 + v7);
        v8 += 88;
      }
      while (v6 < *(unsigned int *)(v5 + 16));
    }
  }
}

void sub_1000F3C84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  unsigned __int16 *v12;
  unsigned int v13;
  unsigned int v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  int v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  char v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  char __s[16];
  __int128 v34;
  char v35;
  _BYTE v36[1024];

  if (word_10097F162)
  {
    bzero(v36, 0x400uLL);
    v7 = 0;
    v8 = 1;
    do
    {
      v9 = *((_QWORD *)&xmmword_10097F168 + v7);
      if (v9)
      {
        if (*(_QWORD *)(v9 + 8) && (v10 = *(_DWORD *)(v9 + 16)) != 0)
        {
          v11 = &v36[(unsigned __int16)v8];
          *v11 = v10;
          v11[1] = **(_BYTE **)v9;
          v11[2] = *(_BYTE *)(*(_QWORD *)v9 + 1);
          v12 = (unsigned __int16 *)sub_100173CF4(*(unsigned __int16 *)(*(_QWORD *)(v9 + 8) + 52));
          if (v12)
          {
            v13 = *v12;
            v14 = v13 >> 8;
          }
          else
          {
            LOBYTE(v13) = 0;
            LOBYTE(v14) = 0;
          }
          v15 = &v36[(unsigned __int16)v8 + 3];
          *v15 = v13;
          v15[1] = v14;
          v16 = v8 + 5;
          v17 = *((_QWORD *)&xmmword_10097F168 + v7);
          if (*(_DWORD *)(v17 + 16))
          {
            v18 = 0;
            v19 = 0;
            while ((unsigned __int16)v16 < 0x3DCu)
            {
              v35 = 0;
              *(_OWORD *)__s = 0u;
              v34 = 0u;
              v20 = *(_QWORD *)(v17 + 8) + v18;
              if (*(_BYTE *)v20 && (*(_DWORD *)(v20 + 32) - 1) <= 0x1F)
                __strncpy_chk(__s);
              else
                __strlcpy_chk(__s, "Invalid", 33, 33);
              v21 = strlen(__s);
              v22 = v21;
              v23 = *((_QWORD *)&xmmword_10097F168 + v7);
              v24 = &v36[(unsigned __int16)v16];
              *v24 = *(_BYTE *)(*(_QWORD *)(v23 + 8) + v18 + 52);
              v24[1] = *(_BYTE *)(*(_QWORD *)(v23 + 8) + v18 + 53);
              v25 = *(_QWORD *)(*(_QWORD *)(v23 + 8) + v18 + 64);
              if (v25)
                v26 = *(_BYTE *)(*(_QWORD *)(v25 + 112) + 8);
              else
                v26 = 0;
              v27 = &v36[(unsigned __int16)v16 + 2];
              *v27 = v26;
              v28 = *(_QWORD *)(*(_QWORD *)(v23 + 8) + v18 + 64);
              if (v28)
                LOBYTE(v28) = *(_BYTE *)(*(_QWORD *)(v28 + 112) + 9);
              v27[1] = v28;
              v29 = &v36[(unsigned __int16)v16];
              v30 = v16 + 5;
              v29[4] = v21;
              memmove(&v36[(unsigned __int16)v30], __s, v21);
              v16 = v30 + v22;
              ++v19;
              v17 = *((_QWORD *)&xmmword_10097F168 + v7);
              v18 += 88;
              if (v19 >= *(unsigned int *)(v17 + 16))
                goto LABEL_27;
            }
            if (sub_10005549C())
            {
              sub_100054530("PacketLogger magnet content exceeds MAX buffer size");
              v31 = sub_1000544A0(0x51u);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                sub_1006CEFC0();
            }
          }
LABEL_27:
          sub_10011D754(v36, (unsigned __int16)v16);
          v8 = 0;
        }
        else
        {
          sub_100253320((uint64_t)"\t\tNo Channels\n", v0, v1, v2, v3, v4, v5, v6, v32);
        }
      }
      ++v7;
    }
    while (v7 < (unsigned __int16)word_10097F162);
  }
}

uint64_t sub_1000F3F50(uint64_t a1)
{
  unsigned int v1;

  v1 = sub_1000F0968(a1);
  if (v1 == -1)
    return 0;
  else
    return (*(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v1) + 52) >> 4) & 1;
}

uint64_t sub_1000F3F88()
{
  return (dword_10097F8D4 >> 4) & 1;
}

uint64_t sub_1000F3F98(uint64_t result)
{
  byte_10097F8DD = result;
  return result;
}

uint64_t sub_1000F3FA4(uint64_t result, __int16 a2, __int16 a3, __int16 a4)
{
  word_10097F8DE = result;
  word_10097F8E0 = a2;
  word_10097F8E2 = a3;
  word_10097F8E4 = a4;
  return result;
}

uint64_t sub_1000F3FC8(const void *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t result;
  NSObject *v5;
  NSObject *v6;

  v2 = sub_1000F0968((uint64_t)a1);
  if (v2 == -1)
  {
    result = sub_10005549C();
    if (!(_DWORD)result)
      return result;
    sub_100054530("invalid peer");
    v5 = sub_1000544A0(0x51u);
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    sub_1006CEEC0();
    return 0;
  }
  v3 = *((_QWORD *)&xmmword_10097F168 + v2);
  if (v3)
    return *(unsigned __int8 *)(v3 + 52) >> 7;
  result = sub_10005549C();
  if ((_DWORD)result)
  {
    sub_100054530("Received peer ID before we are tracking connection handle %p", a1);
    v6 = sub_1000544A0(0x51u);
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      sub_1006CE7A4();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000F409C(const void *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t result;
  NSObject *v5;
  NSObject *v6;

  v2 = sub_1000F0968((uint64_t)a1);
  if (v2 == -1)
  {
    result = sub_10005549C();
    if (!(_DWORD)result)
      return result;
    sub_100054530("invalid peer");
    v5 = sub_1000544A0(0x51u);
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    sub_1006CEEC0();
    return 0;
  }
  v3 = *((_QWORD *)&xmmword_10097F168 + v2);
  if (v3)
    return *(_BYTE *)(v3 + 53) & 1;
  result = sub_10005549C();
  if ((_DWORD)result)
  {
    sub_100054530("Received peer ID before we are tracking connection handle %p", a1);
    v6 = sub_1000544A0(0x51u);
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      sub_1006CE7A4();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000F4170(const void *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t result;
  NSObject *v5;
  NSObject *v6;

  v2 = sub_1000F0968((uint64_t)a1);
  if (v2 == -1)
  {
    result = sub_10005549C();
    if (!(_DWORD)result)
      return result;
    sub_100054530("invalid peer");
    v5 = sub_1000544A0(0x51u);
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    sub_1006CEEC0();
    return 0;
  }
  v3 = *((_QWORD *)&xmmword_10097F168 + v2);
  if (!v3)
  {
    result = sub_10005549C();
    if (!(_DWORD)result)
      return result;
    sub_100054530("Received peer ID before we are tracking connection handle %p", a1);
    v6 = sub_1000544A0(0x51u);
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    sub_1006CE7A4();
    return 0;
  }
  return (dword_10097F8D4 & 0x100) != 0 && (*(_BYTE *)(v3 + 52) & 0x80) != 0
      || (dword_10097F8D4 & 0x80) != 0 && (*(_BYTE *)(v3 + 53) & 1) != 0;
}

uint64_t sub_1000F4260(const void *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t result;
  NSObject *v5;
  NSObject *v6;

  v2 = sub_1000F0968((uint64_t)a1);
  if (v2 == -1)
  {
    result = sub_10005549C();
    if (!(_DWORD)result)
      return result;
    sub_100054530("invalid peer");
    v5 = sub_1000544A0(0x51u);
    result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    sub_1006CEEC0();
    return 0;
  }
  v3 = *((_QWORD *)&xmmword_10097F168 + v2);
  if (!v3)
  {
    result = sub_10005549C();
    if (!(_DWORD)result)
      return result;
    sub_100054530("Received peer ID before we are tracking connection handle %p", a1);
    v6 = sub_1000544A0(0x51u);
    result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    sub_1006CE7A4();
    return 0;
  }
  return (dword_10097F8D4 & 0x100) != 0 && (*(_BYTE *)(v3 + 52) & 0x80) != 0;
}

uint64_t sub_1000F4344(uint64_t result)
{
  dword_10097F8D8 = result;
  return result;
}

void sub_1000F4350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[2];
  char v57;

  sub_100253320((uint64_t)"BT_CL Peers (lNbPeers=%d:\n", a2, a3, a4, a5, a6, a7, a8, (unsigned __int16)word_10097F162);
  v15 = qword_10097F8C8;
  if (qword_10097F8C8)
    v15 = sub_100056080(qword_10097F8C8);
  sub_100253320((uint64_t)"lPacketQueue size:%d", v8, v9, v10, v11, v12, v13, v14, v15);
  sub_100253320((uint64_t)"lCanSend=%B", v16, v17, v18, v19, v20, v21, v22, (byte_10097F8C0 & 1) == 0);
  if (word_10097F162)
  {
    v30 = 0;
    do
    {
      if (*((_QWORD *)&xmmword_10097F168 + v30))
      {
        sub_100253320((uint64_t)"\tPeer %d: channels=%d handle=%p m1=%d m2=%d t1=%d GMTdelta=%d version=%d supportedFeatures=%ld powerAssertHeld=%d active=%d centralPendingVersion=%d :\n", v23, v24, v25, v26, v27, v28, v29, v30);
        v31 = *((_QWORD *)&xmmword_10097F168 + v30);
        if (*(_QWORD *)(v31 + 8))
        {
          if (*(_DWORD *)(v31 + 16))
          {
            v32 = 0;
            v33 = 0;
            do
            {
              LOBYTE(v55) = 0;
              v53 = 0u;
              v54 = 0u;
              v34 = *(_QWORD *)(v31 + 8) + v32;
              if (*(_BYTE *)v34 && (*(_DWORD *)(v34 + 32) - 1) <= 0x1F)
                __strncpy_chk(&v53);
              else
                __strlcpy_chk(&v53, "Invalid", 33, 33);
              sub_100253320((uint64_t)"\t\tchannel %d: SvcName=%s svcType:%d svcID=%d pipeID=%d priority=%d pendingEnc=%d useErtm=%d useFCS=%d l2capChannel=%p bytesSent:%llu bytesReceived:%llu lastSeenActivity:%llu\n", v35, v36, v37, v38, v39, v40, v41, v33++);
              v31 = *((_QWORD *)&xmmword_10097F168 + v30);
              v32 += 88;
            }
            while (v33 < *(unsigned int *)(v31 + 16));
          }
        }
        else
        {
          sub_100253320((uint64_t)"\t\tNo Channels\n", v23, v24, v25, v26, v27, v28, v29, v52);
        }
      }
      ++v30;
    }
    while (v30 < (unsigned __int16)word_10097F162);
  }
  sub_100253320((uint64_t)"BT_CL LocalServices (lNbServices=%d:\n", v23, v24, v25, v26, v27, v28, v29, (unsigned __int16)word_10097F1E8);
  v42 = 0;
  v43 = &byte_10097F200;
  do
  {
    v57 = 0;
    memset(v56, 0, sizeof(v56));
    if (*((_QWORD *)v43 - 2) && *(v43 - 8) - 1 <= 0x1F)
      __strncpy_chk(v56);
    else
      __strlcpy_chk(v56, "Invalid", 33, 33);
    v51 = *((_OWORD *)v43 + 2);
    v53 = *((_OWORD *)v43 + 1);
    v54 = v51;
    v55 = *((_QWORD *)v43 + 6);
    sub_100253320((uint64_t)"\tLocalService %ld : name=%s serviceType=%d requiresEnc=%d serviceID=%d priority=%d unpublishing=%d useErtm=%d useFCS=%d callbacks=%p\n", v44, v45, v46, v47, v48, v49, v50, v42++);
    v43 += 72;
  }
  while (v42 != 24);
}

uint64_t sub_1000F4674(uint64_t result)
{
  dword_100978870 = result;
  return result;
}

uint64_t sub_1000F4680(uint64_t result)
{
  byte_10097F160 = result;
  return result;
}

void sub_1000F4690(unsigned __int16 *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint8_t buf[4];
  void *v16;

  v4 = sub_1000F0968((uint64_t)a1);
  if (v4 != -1)
  {
    v5 = v4;
    v6 = *((_QWORD *)&xmmword_10097F168 + v4);
    v7 = v4;
    if (*(_BYTE *)(v6 + 48) == 1 && byte_10097F8D1 != 0)
    {
      if (sub_10005549C())
      {
        sub_100054530("Disabling LE magnet TS workaround for peerID %d", v5);
        v9 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v16 = sub_100054494();
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      sub_1001F6070();
      v6 = *((_QWORD *)&xmmword_10097F168 + v7);
    }
    if (*(_DWORD *)(v6 + 16))
    {
      v10 = 0;
      do
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 88 * v10 + 64);
        if (v11)
          sub_1001DC658(v11);
        if (word_10097F1E8)
        {
          v12 = 0;
          v13 = &qword_10097F220;
          do
          {
            if (sub_1000F0414((uint64_t)a1)
              && (v14 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v7) + 8),
                  sub_1000F384C((_DWORD *)(v14 + 88 * v10), v12))
              || !sub_1000F0414((uint64_t)a1)
              && (v14 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v7) + 8),
                  sub_1000F38BC(v14 + 88 * v10, v12)))
            {
              if (*v13)
                ((void (*)(_QWORD, uint64_t))*v13)(*(unsigned __int16 *)(v14 + 88 * v10 + 52), a2);
            }
            ++v12;
            v13 += 9;
          }
          while (v12 < (unsigned __int16)word_10097F1E8);
        }
        ++v10;
        v6 = *((_QWORD *)&xmmword_10097F168 + v7);
      }
      while (v10 < *(unsigned int *)(v6 + 16));
    }
    if (*(_BYTE *)(v6 + 72))
      sub_1000F490C(a1);
    sub_1000F4A24(a1);
    sub_1000FAF14();
  }
}

void sub_1000F48A0(uint64_t a1)
{
  NSObject *v2;

  if ((_DWORD)a1 && sub_10005549C())
  {
    sub_100054530("_LE_MagnetSuspendEnable %!", a1);
    v2 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
}

void sub_1000F490C(unsigned __int16 *a1)
{
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t buf[4];
  void *v6;

  v2 = sub_1000F0968((uint64_t)a1);
  if (v2 == -1)
    sub_100253460();
  if (!*(_BYTE *)(*((_QWORD *)&xmmword_10097F168 + v2) + 72))
    sub_100253460();
  if (v2 != -1)
  {
    v3 = *((_QWORD *)&xmmword_10097F168 + v2);
    if (*(_BYTE *)(v3 + 72))
    {
      *(_BYTE *)(v3 + 72) = 0;
      if (sub_10005549C())
      {
        sub_100054530("DeassertPower for lm 0x%4x", *a1);
        v4 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v6 = sub_100054494();
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      sub_100113FC4();
    }
  }
}

void sub_1000F4A24(const void *a1)
{
  unsigned int v1;
  uint64_t v3;
  NSObject *v4;
  void **v5;
  uint8_t buf[4];
  void *v7;

  v1 = (unsigned __int16)word_10097F162;
  if (word_10097F162)
  {
    v3 = 0;
    while (**((const void ***)&xmmword_10097F168 + v3) != a1)
    {
      if ((unsigned __int16)word_10097F162 == ++v3)
        goto LABEL_12;
    }
    if (sub_10005549C())
    {
      sub_100054530("Removing peer ID %d for handle %p", v3, a1);
      v4 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v7 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    --word_10097F162;
    v5 = (void **)*((_QWORD *)&xmmword_10097F168 + v3);
    if (v5[1])
    {
      sub_100053298(v5[1]);
      v5 = (void **)*((_QWORD *)&xmmword_10097F168 + v3);
    }
    sub_100053298(v5);
    v1 = (unsigned __int16)word_10097F162;
    *((_QWORD *)&xmmword_10097F168 + v3) = *((_QWORD *)&xmmword_10097F168 + (unsigned __int16)word_10097F162);
  }
LABEL_12:
  if (!dword_100994BF4)
  {
    sub_1000EE138();
    v1 = (unsigned __int16)word_10097F162;
  }
  if (v1 >= 0x10)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c");
}

void sub_1000F4B90(uint64_t a1, int a2, int a3)
{
  unsigned int v4;
  unsigned int v5;
  NSObject *v6;
  int v7;
  void *v8;

  if (!a2)
  {
    if (a3)
    {
      v4 = sub_1000F0968(a1);
      if (v4 != -1)
      {
        v5 = v4;
        if (sub_1002307DC((_DWORD *)(a1 + 48)))
        {
          if (sub_10005549C())
          {
            sub_100054530("Got encrypted but pairing is still in progress, waiting for pairing completion");
            v6 = sub_1000544A0(0x51u);
            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
            {
              v7 = 136446210;
              v8 = sub_100054494();
              _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)&v7, 0xCu);
            }
          }
        }
        else
        {
          sub_1000F4CF0((__int128 *)a1, v5);
        }
      }
    }
  }
}

void sub_1000F4CA0(_DWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  __int128 *v5;
  unsigned int v6;

  v4 = sub_10019AFA0(a1);
  if (!a3)
  {
    v5 = (__int128 *)v4;
    if (v4)
    {
      v6 = sub_1000F0968(v4);
      if (v6 != -1)
        sub_1000F4CF0(v5, v6);
    }
  }
}

void sub_1000F4CF0(__int128 *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  _OWORD v16[12];
  _OWORD v17[3];

  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  v4 = a2;
  if (sub_1000F0414((uint64_t)a1))
  {
    if (*(_BYTE *)(*((_QWORD *)&xmmword_10097F168 + a2) + 74))
      return;
    v5 = (unsigned __int16)word_10097F1E8;
    if (word_10097F1E8)
    {
      v6 = 0;
      v7 = &dword_10097F1FC;
      do
      {
        if (!*((_BYTE *)v7 + 9) && *((_BYTE *)v7 + 4))
        {
          if (*((unsigned __int8 *)v7 - 4) >= 0x20u)
            v8 = 32;
          else
            v8 = *((unsigned __int8 *)v7 - 4);
          sub_1000F2A44(a1, *((unsigned __int16 *)v7 + 3), *(const void **)(v7 - 3), v8, *v7, (unsigned __int16)v6);
          v5 = (unsigned __int16)word_10097F1E8;
        }
        ++v6;
        v7 += 18;
      }
      while (v6 < v5);
    }
  }
  v9 = *((_QWORD *)&xmmword_10097F168 + v4);
  if (*(_DWORD *)(v9 + 16))
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(v9 + 8) + v10;
      if (*(_BYTE *)(v13 + 55))
      {
        *(_BYTE *)(v13 + 55) = 0;
        v14 = sub_1000F0414((uint64_t)a1);
        v9 = *((_QWORD *)&xmmword_10097F168 + v4);
        v15 = *(_QWORD *)(v9 + 8) + v10;
        if (v14)
          *((_QWORD *)v16 + v12) = v15;
        else
          *((_WORD *)v17 + v12) = *(_DWORD *)(v15 + 40);
        ++v12;
      }
      ++v11;
      v10 += 88;
    }
    while (v11 < *(unsigned int *)(v9 + 16));
  }
  else
  {
    v12 = 0;
  }
  if (*(unsigned __int8 *)(v9 + 48) >= 7u)
    sub_1000F4ECC(a1);
  if (sub_1000F0414((uint64_t)a1))
    sub_1000F528C(a1, v12, (uint64_t *)v16);
  else
    sub_1000F2D54(a1, v12, (uint64_t)v17);
}

void sub_1000F4ECC(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  __int16 v9;
  size_t v10;
  _BYTE *v11;
  void *v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  NSObject *v17;
  void *v18;
  _BYTE *v19;
  __int16 v20;
  unsigned __int16 v21;
  int v22;
  uint8_t buf[4];
  void *v24;

  v2 = sub_1000F0968((uint64_t)a1);
  if ((_DWORD)v2 == -1)
  {
    if (sub_10005549C())
    {
      sub_100054530("invalid peer");
      v7 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  else
  {
    v3 = v2;
    v4 = *((_QWORD *)&xmmword_10097F168 + v2);
    if (v4)
    {
      v5 = *(unsigned __int8 *)(v4 + 48);
      if (v5 > 6)
      {
        if (v5 == 7)
          v9 = 2;
        else
          v9 = 3;
        if (v5 == 7)
          v10 = 10;
        else
          v10 = 11;
        v11 = sub_100052DC0(v10);
        if (!v11)
          return;
        v12 = v11;
        v19 = v11;
        v20 = v10;
        v21 = v10;
        v22 = 131073;
        *v11 = -112;
        sub_1000F09C4(v3, (uint64_t *)&v19, v10 - v9);
        if (HIBYTE(v22))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c", 1700, "OI_STATUS sendDeviceID(OI_HCI_CONNECTION_HANDLE)");
        }
        else
        {
          v13 = v21;
          v14 = v22;
          if (v21 - (unsigned __int16)v22 > 1 && BYTE2(v22) == 2)
          {
            v15 = (uint64_t)v19;
            *(_WORD *)&v19[(unsigned __int16)v22] = word_10097F8DE;
            if (v13 - (unsigned __int16)(v14 + 2) <= 1)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c");
            *(_WORD *)(v15 + (unsigned __int16)(v14 + 2)) = word_10097F8E0;
            if (v13 - (unsigned __int16)(v14 + 4) <= 1)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c");
            *(_WORD *)(v15 + (unsigned __int16)(v14 + 4)) = word_10097F8E2;
            v16 = v14 + 6;
            if (v13 - v16 <= 1)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c");
            *(_WORD *)(v15 + v16) = word_10097F8E4;
            if (sub_10005549C())
            {
              sub_100054530("Sending Device ID with vendor 0x%x product 0x%x version 0x%x chip 0x%x to %p", (unsigned __int16)word_10097F8DE, (unsigned __int16)word_10097F8E0, (unsigned __int16)word_10097F8E2, (unsigned __int16)word_10097F8E4, a1);
              v17 = sub_1000544A0(0x51u);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                v18 = sub_100054494();
                *(_DWORD *)buf = 136446210;
                v24 = v18;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
              }
            }
            sub_1000F0AF8(a1, v12, (unsigned __int16)v10, 1);
            return;
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c");
      }
      if (sub_10005549C())
      {
        sub_100054530("peer is version %d, and does not support this command", *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v3) + 48));
        v6 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
LABEL_6:
          sub_1006CE7A4();
      }
    }
    else if (sub_10005549C())
    {
      sub_100054530("Received peer ID before we are tracking connection handle %p", a1);
      v8 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        goto LABEL_6;
    }
  }
}

void sub_1000F528C(__int128 *a1, unsigned int a2, uint64_t *a3)
{
  unsigned int v6;
  unsigned int v7;
  NSObject *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  unsigned int v17;
  __int128 *v18;
  char v19;
  size_t v20;
  _BYTE *v21;
  void *v22;
  __int128 *v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  _BYTE *v27;
  NSObject *v28;
  void *v29;
  NSObject *v30;
  unsigned int v31;
  uint8_t buf[4];
  void *v33;
  __int16 v34;
  int v35;

  v6 = sub_1000F0968((uint64_t)a1);
  if (v6 == -1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Can not send create channel, peer is invalid for handle %p", a1);
      v30 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  else
  {
    v7 = v6;
    if (sub_10005549C())
    {
      sub_100054530("Sending create channel for %d service to %p", a2, a1);
      v8 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v33 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    if (a2)
    {
      v9 = v7;
      v10 = &xmmword_10097F168;
      v11 = a2;
      v31 = v7;
      do
      {
        if ((dword_10097F8D4 & 0x10) != 0 && (*(_BYTE *)(*((_QWORD *)v10 + v9) + 52) & 0x10) != 0)
          v12 = 2576;
        else
          v12 = 2042;
        v13 = sub_1000F5680((uint64_t)a1, v7, *a3, 0, v12);
        if ((_DWORD)v13)
        {
          v14 = v13;
          if (sub_10005549C())
          {
            sub_100054530("Failed to create channel : %!", v14);
            v15 = sub_1000544A0(0x51u);
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              v16 = sub_100054494();
              *(_DWORD *)buf = 136446210;
              v33 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
        }
        else
        {
          v17 = *(unsigned __int8 *)(*((_QWORD *)v10 + v9) + 48);
          v18 = v10;
          if (v17 <= 7)
            v19 = 2;
          else
            v19 = 3;
          if (v17 <= 7)
            v20 = 6;
          else
            v20 = 7;
          v21 = sub_100052DC0(v20);
          if (v21)
          {
            v22 = v21;
            *v21 = 3;
            v23 = v18;
            if (*(unsigned __int8 *)(*((_QWORD *)v18 + v9) + 48) < 8u)
            {
              v24 = 2;
            }
            else
            {
              v21[2] = 0;
              v24 = 3;
            }
            v21[1] = v20 - v19;
            v27 = &v21[v24];
            *v27 = *(_BYTE *)(*(_QWORD *)(*a3 + 64) + 4);
            v27[1] = *(_BYTE *)(*(_QWORD *)(*a3 + 64) + 5);
            *((_WORD *)v27 + 1) = *(_DWORD *)(*a3 + 40);
            if (sub_10005549C())
            {
              sub_100054530("Sending create channel 0x%4x for service %d to %p index %d", *(unsigned __int16 *)(*(_QWORD *)(*a3 + 64) + 4), *(_DWORD *)(*a3 + 40), a1, v24 | 4);
              v28 = sub_1000544A0(0x51u);
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
              {
                v29 = sub_100054494();
                *(_DWORD *)buf = 136446210;
                v33 = v29;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
              }
            }
            sub_1000F0AF8(a1, v22, (unsigned __int16)v20, 1);
            v10 = v23;
            v7 = v31;
          }
          else
          {
            v10 = v18;
            if (sub_10005549C())
            {
              sub_100054530("Can not allocate memory for channel creation");
              v25 = sub_1000544A0(0x51u);
              if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              {
                v26 = sub_100054494();
                *(_DWORD *)buf = 136446466;
                v33 = v26;
                v34 = 1024;
                v35 = 0xFFFF;
                _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
              }
            }
          }
        }
        ++a3;
        --v11;
      }
      while (v11);
    }
  }
}

uint64_t sub_1000F5680(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned int a5)
{
  int **v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  int v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  int *v29;
  __int16 v30;
  int v31;
  NSObject *v32;
  void *v33;
  uint8_t buf[4];
  void *v36;

  v10 = (int **)(a3 + 64);
  v11 = sub_1001DC04C(4u, (uint64_t *)(a3 + 64), 0);
  if ((_DWORD)v11)
  {
    v12 = v11;
    if (off_100994C20)
      off_100994C20(a1, 81, 812, v11);
    if (sub_10005549C())
    {
      sub_100054530("createL2CAPChannel failed with error %!.  OI_ChanMan_AllocateChannel failed", v12);
      v13 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    return v12;
  }
  v14 = (unsigned __int16)word_10097F1E8;
  if (!word_10097F1E8)
    goto LABEL_16;
  v15 = 0;
  v16 = &qword_10097F228;
  while (a4)
  {
    if (sub_1000F38BC(a3, v15))
      goto LABEL_15;
LABEL_13:
    ++v15;
    v16 += 9;
    if (v14 == v15)
      goto LABEL_16;
  }
  if (!sub_1000F384C((_DWORD *)a3, v15))
    goto LABEL_13;
LABEL_15:
  *((_QWORD *)*v10 + 5) = *v16;
LABEL_16:
  if (*(unsigned __int8 *)(a3 + 54) <= 0xCu)
    v17 = 16;
  else
    v17 = 6;
  *(_BYTE *)(sub_1001E3CCC(*(int **)(a3 + 64)) + 24) = a4;
  v18 = *(_QWORD *)(a3 + 64);
  *(_WORD *)(v18 + 6) = 0;
  *(_QWORD *)(v18 + 64) = 0;
  *(_QWORD *)(sub_1001E3CCC((int *)v18) + 88) = 0;
  *(_QWORD *)(sub_1001E3CCC(*(int **)(a3 + 64)) + 96) = 0;
  *(_WORD *)(sub_1001E3CCC(*(int **)(a3 + 64)) + 36) = a5;
  *(_WORD *)(sub_1001E3CCC(*(int **)(a3 + 64)) + 32) = a5;
  *(_WORD *)(sub_1001E3CCC(*(int **)(a3 + 64)) + 34) = -1;
  *(_WORD *)(sub_1001E3CCC(*(int **)(a3 + 64)) + 40) = 3000;
  *(_BYTE *)(sub_1001E3CCC(*(int **)(a3 + 64)) + 26) = 3;
  *(_BYTE *)(sub_1001E3CCC(*(int **)(a3 + 64)) + 16) = 4;
  *(_QWORD *)sub_1001E3CCC(*(int **)(a3 + 64)) = a1;
  v19 = sub_100052DC0(a5);
  v20 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(v20 + 48) = v19;
  *(_BYTE *)(sub_1001E3CCC((int *)v20) + 30) = 0;
  *(_BYTE *)(sub_1001E3CCC(*(int **)(a3 + 64)) + 17) = 0;
  if (sub_10005549C())
  {
    sub_100054530("Creating L2CAP with priority %d", *(unsigned __int8 *)(a3 + 54));
    v21 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v36 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (*(_BYTE *)(a3 + 54) == 13)
  {
    if (sub_1000F0414(a1))
    {
      if (sub_1000ECA90(a1, 1))
      {
        if (sub_10005549C())
        {
          sub_100054530("Force upgrade TS not ready A");
          v22 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            v23 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v36 = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
      }
    }
    *(_BYTE *)(*((_QWORD *)&xmmword_10097F168 + a2) + 75) = 1;
    v24 = sub_100175198(a1, 200);
    v25 = sub_1001E3CCC(*v10);
    if (!v24)
    {
      *(_WORD *)(v25 + 38) = 200;
      goto LABEL_32;
    }
  }
  else
  {
    v25 = sub_1001E3CCC(*v10);
  }
  *(_WORD *)(v25 + 38) = -1;
LABEL_32:
  (*v10)[18] = 0;
  if (sub_10019AB28(a1))
  {
    v26 = sub_1001E3CCC(*v10);
    v27 = *(_WORD *)(a1 + 52);
    v28 = *(_DWORD *)(a1 + 48);
    goto LABEL_36;
  }
  if (sub_10019AC00(a1))
  {
    v26 = sub_1001E3CCC(*v10);
    v27 = *(_WORD *)(a1 + 53);
    v28 = *(_DWORD *)(a1 + 49);
LABEL_36:
    *(_DWORD *)(v26 + 10) = v28;
    *(_WORD *)(v26 + 14) = v27;
  }
  v29 = *(int **)(a3 + 64);
  if (!*(_BYTE *)(a3 + 56))
  {
    v12 = sub_1001EF3B0(v29, 0, 0);
    if (!(_DWORD)v12)
      goto LABEL_49;
    goto LABEL_56;
  }
  *(_BYTE *)(sub_1001E3CCC(v29) + 42) = 32;
  *(_BYTE *)(sub_1001E3CCC(*v10) + 43) = 32;
  *(_WORD *)(sub_1001E3CCC(*v10) + 44) = 10000;
  *(_WORD *)(sub_1001E3CCC(*v10) + 46) = 0;
  if ((dword_10097F8D4 & 0x10) != 0 && (*(_BYTE *)(*((_QWORD *)&xmmword_10097F168 + a2) + 52) & 0x10) != 0)
    v30 = 2576;
  else
    v30 = 2042;
  *(_WORD *)(sub_1001E3CCC(*v10) + 48) = v30;
  *(_WORD *)(sub_1001E3CCC(*v10) + 50) = 0;
  if (v17 + *(unsigned __int8 *)(sub_1001E3CCC(*v10) + 42) >= 0x3F)
    sub_100253460();
  if (*(_BYTE *)(a3 + 57))
    *(_BYTE *)(sub_1001E3CCC(*v10) + 78) = 1;
  v12 = sub_1001EF3B0(*v10, 3, 1);
  sub_1001EEC1C(*((unsigned __int16 *)*v10 + 2), 0);
  if ((_DWORD)v12)
  {
LABEL_56:
    sub_1001DC658((uint64_t)*v10);
    return v12;
  }
LABEL_49:
  if (*(_BYTE *)(a3 + 54) == 13)
    v31 = dword_100978870;
  else
    v31 = -1;
  *(_DWORD *)(*(_QWORD *)(a3 + 64) + 76) = v31;
  if (sub_10005549C())
  {
    sub_100054530("CL registering service ID %d with priority %d and cid 0x%4x. MaxLatency=%d", *(_DWORD *)(a3 + 40), *(unsigned __int8 *)(a3 + 54), *(unsigned __int16 *)(*(_QWORD *)(a3 + 64) + 4), *(_DWORD *)(*(_QWORD *)(a3 + 64) + 76));
    v32 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v33 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v36 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v12 = sub_1001F0E30(*(unsigned __int16 *)(*(_QWORD *)(a3 + 64) + 4), v17, *(unsigned __int8 *)(a3 + 54), (uint64_t)sub_1000F0558, (uint64_t *)(*(_QWORD *)(a3 + 64) + 96), *(_DWORD *)(*(_QWORD *)(a3 + 64) + 76));
  if ((_DWORD)v12)
    goto LABEL_56;
  sub_1001F37D8(a1);
  return v12;
}

uint64_t sub_1000F5C28(__int128 *a1, char *a2, unsigned __int16 a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  _OWORD v16[7];

  memset(v16, 0, sizeof(v16));
  v8 = sub_1000532A8((uint64_t)v16, 1u);
  if ((_DWORD)v8)
  {
    v9 = v8;
    if (sub_10005549C())
    {
      sub_100054530("CL failed to init an MBUF with error %!", v9);
      v10 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
LABEL_15:
        sub_1006CEEC0();
    }
  }
  else
  {
    v11 = sub_10005336C((unsigned __int8 *)v16, a2, a3, 0);
    if ((_DWORD)v11)
    {
      v9 = v11;
      if (sub_10005549C())
      {
        sub_100054530("CL failed to append to an MBUF with error %!", v9);
        v12 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
      }
    }
    else
    {
      v13 = sub_1001DBC18((uint64_t)sub_1000F5DDC, 0x3Au, a1, (uint64_t)v16, 0);
      if ((_DWORD)v13 == 412)
      {
        v9 = 0;
        goto LABEL_16;
      }
      v9 = v13;
      if (!(_DWORD)v13)
      {
        byte_10097F8C0 = 1;
        goto LABEL_16;
      }
      if (sub_10005549C())
      {
        sub_100054530("CL failed to write an MBUF with error %!", v9);
        v14 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          goto LABEL_15;
      }
    }
  }
LABEL_16:
  sub_100253FD8((uint64_t)v16);
  if (a4)
    sub_100053298(a2);
  return v9;
}

void sub_1000F5DDC(int a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v6;

  if (a1 == 58)
  {
    byte_10097F8C0 = 0;
    while (sub_100056080(qword_10097F8C8))
    {
      v1 = (_QWORD *)sub_100251574(qword_10097F8C8, 0);
      if (v1)
      {
        v2 = v1;
        v3 = sub_1000F5C28(*v1, v2[1], *((unsigned __int16 *)v2 + 8), 1);
        sub_100053298(v2);
        if ((_DWORD)v3 == 410)
        {
          sub_100253460();
        }
        else if (!(_DWORD)v3)
        {
          return;
        }
        if (sub_10005549C())
        {
          sub_100054530("Failed to send CL pdu with error %!.", v3);
          v4 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
            sub_1006CEFC0();
        }
      }
    }
  }
  else if (sub_10005549C())
  {
    sub_100054530("l2capWriteCb CID=%d, not BT_CL_SIGNAL_CID(%d)!!", a1, 58);
    v6 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

void sub_1000F5F54(uint64_t a1, _BYTE *a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD);
  uint64_t v32;
  NSObject *v33;
  uint8_t buf[4];
  void *v35;

  v6 = sub_1000F0968(a1);
  if (v6 == -1)
  {
    if (!sub_1000F0414(a1) && !byte_10097F8B0)
    {
      if (sub_10005549C())
      {
        sub_100054530("Received Version info as PERIPHERAL. PERIPHERAL CL is disabled. Ignoring.");
        v9 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
      return;
    }
    v6 = sub_1000F0FD0(a1);
    if (v6 == -1)
    {
      *(_WORD *)buf = 264;
      buf[2] = 1;
      sub_1000F0AF8((__int128 *)a1, buf, 3u, 0);
      v6 = -1;
    }
  }
  v7 = *((_QWORD *)&xmmword_10097F168 + v6);
  if (v7)
  {
    if (a3 <= 4)
    {
      if (sub_10005549C())
      {
        sub_100054530("Data size error %d", a3);
        v8 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
      *(_WORD *)buf = 264;
      buf[2] = 1;
      sub_1000F0AF8((__int128 *)a1, buf, 3u, 0);
      return;
    }
    if (!a2)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c");
    v11 = v6;
    v12 = a2[1];
    v13 = (a2[3] << 16) | (a2[2] << 8) | (a2[4] << 24) | v12;
    *(_BYTE *)(v7 + 48) = *a2;
    *(_DWORD *)(v7 + 52) = v13;
    if (sub_10005549C())
    {
      v14 = 11;
      if (!byte_10097F8D1)
        v14 = 0;
      sub_100054530("Received Version Info for peer %d: local [version %d features 0x%x], remote [version %d features 0x%x]", v11, v14, dword_10097F8D4, *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v11) + 48), *(_DWORD *)(*((_QWORD *)&xmmword_10097F168 + v11) + 52));
      v15 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = sub_100054494();
        *(_DWORD *)buf = 136446210;
        v35 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    if ((v12 & 0x20) != 0)
      *(_BYTE *)(a1 + 25) = sub_1001E4168();
    if ((dword_10097F8D4 & 0x10) != 0 && (*(_BYTE *)(*((_QWORD *)&xmmword_10097F168 + v11) + 52) & 0x10) != 0)
    {
      if (sub_10005549C())
      {
        sub_100054530("HDR Enabled for this link");
        v17 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v18 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          v35 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      *(_BYTE *)(a1 + 26) = 1;
    }
    v19 = sub_1001F4E24();
    v20 = *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v11) + 48);
    if (v19 == 15)
    {
      v21 = byte_10097F8D1;
      if (v20 <= 3 && (byte_10097F8D1 & 1) != 0)
      {
LABEL_42:
        if (sub_1000F0414(a1))
        {
          v23 = *((_QWORD *)&xmmword_10097F168 + v11);
          if (!*(_BYTE *)(v23 + 73) && *(_BYTE *)(v23 + 74))
          {
            sub_1000F9BF8((void *)a1);
            v23 = *((_QWORD *)&xmmword_10097F168 + v11);
          }
          *(_BYTE *)(v23 + 74) = 0;
        }
        else
        {
          sub_1000F104C((__int128 *)a1);
        }
        if (sub_10005549C())
        {
          sub_100054530("CL is active for (%x)", a1);
          v24 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            v25 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v35 = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        v26 = *((_QWORD *)&xmmword_10097F168 + v11);
        *(_BYTE *)(v26 + 73) = 1;
        if (byte_10097F8DC == 1)
        {
          sub_1001FD594((_BYTE *)a1, 1, 1);
          v26 = *((_QWORD *)&xmmword_10097F168 + v11);
        }
        if (*(unsigned __int8 *)(v26 + 48) >= 7u && sub_1000F0460(a1))
          sub_1000F4ECC((__int128 *)a1);
        v27 = sub_1000F0968(a1);
        if (v27 == -1)
        {
          if (sub_10005549C())
          {
            sub_100054530("Received DID Info for an unknown peer");
            v33 = sub_1000544A0(0x51u);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
              sub_1006CEEC0();
          }
        }
        else
        {
          v28 = byte_10097F108;
          if (byte_10097F108)
          {
            v29 = 0;
            v30 = v27;
            do
            {
              v31 = (void (*)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))qword_10097F110[v29];
              if (v31)
              {
                if (byte_10097F8D1)
                  v32 = 11;
                else
                  v32 = 0;
                v31(a1, *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v30) + 48), *(unsigned int *)(*((_QWORD *)&xmmword_10097F168 + v30) + 52), v32, dword_10097F8D4);
                v28 = byte_10097F108;
              }
              ++v29;
            }
            while (v29 < v28);
          }
        }
        return;
      }
    }
    else
    {
      v21 = byte_10097F8D1;
    }
    if (v20 == 1 && v21 != 0)
      sub_1001F6070();
    goto LABEL_42;
  }
  if (sub_10005549C())
  {
    sub_100054530("Received peer ID before we are tracking connection handle %p", (const void *)a1);
    v10 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

void sub_1000F64B8(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  __int128 *v5;
  NSObject *v6;
  unsigned int v7;
  NSObject *v8;
  unint64_t v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  char v13;
  int v14;
  NSObject *v15;
  _BOOL4 v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  _BYTE *v35;
  unint64_t v36;
  char *v37;
  NSObject *v38;
  void *v39;
  int v40;
  uint64_t v42;
  NSObject *v43;
  void *v44;
  NSObject *v45;
  void *v46;
  unsigned int v47;
  NSObject *v48;
  NSObject *v49;
  NSObject *v50;
  char v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  void *ptr;
  unsigned int v59;
  uint64_t v60;
  uint8_t buf[4];
  void *v62;

  v5 = (__int128 *)a1;
  if (sub_1000F0414(a1))
  {
    if (sub_10005549C())
    {
      sub_100054530("Received remote services from a peripheral !");
      v6 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v62 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    goto LABEL_31;
  }
  if (byte_10097F8B0 || sub_1000F0414((uint64_t)v5))
  {
    v7 = sub_1000F0968((uint64_t)v5);
    if (v7 == -1)
    {
      v7 = sub_1000F0FD0((uint64_t)v5);
      if (v7 == -1)
      {
LABEL_31:
        *(_WORD *)buf = 264;
        buf[2] = 1;
        sub_1000F0AF8(v5, buf, 3u, 0);
        return;
      }
    }
    if (!sub_1000FA3CC(v7))
      return;
    v60 = v7;
    *(_BYTE *)(*((_QWORD *)&xmmword_10097F168 + v7) + 73) = 1;
    if (a3 <= 3)
    {
      if (sub_10005549C())
      {
        sub_100054530("No services from remote peer.");
        v8 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v62 = sub_100054494();
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      LODWORD(v9) = 0;
      v10 = 0;
      ptr = 0;
      v57 = 0;
      v11 = 0;
      v12 = 0;
LABEL_15:
      if (v10 < a3 || (_DWORD)v9 != v12)
      {
        v13 = v11;
        v14 = sub_10005549C();
        v11 = v13;
        if (v14)
        {
          sub_100054530("Number of remote services don't match.");
          v15 = sub_1000544A0(0x51u);
          v16 = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
          v11 = v13;
          if (v16)
          {
            sub_1006CE7A4();
            v11 = v13;
          }
        }
      }
      if ((v11 & 1) != 0 && (byte_10097F8D0 || (*(_DWORD *)(*((_QWORD *)&xmmword_10097F168 + v60) + 52) & 1) == 0))
      {
        if (sub_10005549C())
        {
          sub_100054530("CL Asking to pair");
          v17 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            v18 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v62 = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        sub_1002380C4((uint64_t)v5, 1);
      }
      if (v57)
        sub_1000F2D54(v5, v57, (uint64_t)ptr);
      if (ptr)
        sub_100053298(ptr);
      return;
    }
    v12 = *a2;
    if (v12 >= 0x19)
    {
      if (sub_10005549C())
      {
        v12 = 24;
        sub_100054530("Too many services, capping to %d", 24);
        v20 = sub_1000544A0(0x51u);
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          goto LABEL_41;
        sub_1006CE7A4();
      }
      v12 = 24;
    }
LABEL_41:
    if (sub_10005549C())
    {
      sub_100054530("Received %d remote services from the remote central %p !", v12, v5);
      v21 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v62 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    *(_DWORD *)(*((_QWORD *)&xmmword_10097F168 + v60) + 16) = v12;
    v22 = sub_100114588(88 * v12);
    *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v60) + 8) = v22;
    if (!v22 || (v56 = v12, (ptr = sub_100052DC0(2 * v12)) == 0))
    {
      sub_1000F4A24(v5);
      return;
    }
    if (v12)
    {
      v9 = 0;
      v51 = 0;
      v57 = 0;
      v10 = 1;
      v53 = v12;
      v54 = a3;
      v55 = (uint64_t)v5;
      v52 = a2;
      while (1)
      {
        v23 = v10 + 5;
        if (v23 > a3)
          break;
        v24 = a2[v10];
        v25 = v10 + 1;
        if (a3 - v25 < v24)
        {
          if (sub_10005549C())
          {
            sub_100054530("Service size is larger than total data size !!");
            v49 = sub_1000544A0(0x51u);
            if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
          v10 = v25;
          goto LABEL_102;
        }
        v26 = &a2[v10];
        LODWORD(v27) = v26[4];
        if (v27 >= 0x20)
          v28 = 32;
        else
          v28 = v26[4];
        if ((int)v28 + 4 > v24)
        {
          if (sub_10005549C())
          {
            sub_100054530("Size mismatch (%d > %d || %d)", v23 + v28, a3, v24);
            v50 = sub_1000544A0(0x51u);
            if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
          v10 = v23;
LABEL_102:
          v11 = v51;
          goto LABEL_15;
        }
        v29 = v23 + v28;
        if ((int)v28 + 5 <= v24)
        {
          v30 = a2[v29];
          v59 = v29 + 1;
        }
        else
        {
          v59 = v23 + v28;
          v30 = 0;
        }
        v31 = a2[v25] | (v26[2] << 8);
        v32 = v26[3];
        v33 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v60) + 8) + 88 * v9;
        *(_DWORD *)(v33 + 36) = v32;
        *(_DWORD *)(v33 + 40) = v31;
        v34 = &a2[v23];
        *(_DWORD *)(v33 + 32) = v28;
        *(_QWORD *)(v33 + 44) = 0x100000001;
        memmove((void *)v33, v34, v28);
        v35 = (_BYTE *)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v60) + 8) + 88 * v9);
        v35[56] = v30 & 1;
        v35[57] = (v30 & 2) != 0;
        v35[55] = 0;
        if (word_10097F1E8)
        {
          v36 = 0;
          if (v27 >= 0xF)
            v27 = 15;
          else
            v27 = v27;
          v37 = &byte_10097F205;
          while (1)
          {
            if (sub_10005549C())
            {
              sub_100054530("Matching remote service %@ of len %d, type %d and ID %d with local service ID %d", v34, v28, v24, v32, v31, *(unsigned __int16 *)(v37 - 3));
              v38 = sub_1000544A0(0x51u);
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              {
                v39 = sub_100054494();
                *(_DWORD *)buf = 136446210;
                v62 = v39;
                _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
              }
            }
            v40 = memcmp("com.apple.BT.TS", v34, v27);
            if ((byte_10097F160 || v40 != 0) && !*v37)
            {
              v42 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v60) + 8);
              if (sub_1000F38BC(v42 + 88 * v9, v36))
                break;
            }
            ++v36;
            v37 += 72;
            if (v36 >= (unsigned __int16)word_10097F1E8)
            {
              a3 = v54;
              v5 = (__int128 *)v55;
              v12 = v53;
              goto LABEL_74;
            }
          }
          *(_BYTE *)(v42 + 88 * v9 + 54) = *(v37 - 1);
          v5 = (__int128 *)v55;
          if (*(v37 - 5) && !sub_1000F0460(v55))
          {
            v12 = v53;
            a3 = v54;
            a2 = v52;
            if (sub_10005549C())
            {
              sub_100054530("Match found but requires encryption");
              v45 = sub_1000544A0(0x51u);
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
              {
                v46 = sub_100054494();
                *(_DWORD *)buf = 136446210;
                v62 = v46;
                _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
              }
            }
            v51 = 1;
            *(_BYTE *)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v60) + 8) + 88 * v9 + 55) = 1;
          }
          else
          {
            v12 = v53;
            a3 = v54;
            a2 = v52;
            if (sub_10005549C())
            {
              sub_100054530("Match found - returning service");
              v43 = sub_1000544A0(0x51u);
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                v44 = sub_100054494();
                *(_DWORD *)buf = 136446210;
                v62 = v44;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
              }
            }
            *((_WORD *)ptr + v57++) = v31;
          }
        }
        else
        {
          a3 = v54;
          v5 = (__int128 *)v55;
          v12 = v53;
LABEL_74:
          a2 = v52;
        }
        ++v9;
        v10 = v59;
        if (v59 >= a3 || v9 >= v56)
          goto LABEL_102;
      }
      v47 = v10;
      if (sub_10005549C())
      {
        sub_100054530("Not enough data to get header");
        v48 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      v11 = v51;
      v10 = v47;
    }
    else
    {
      LODWORD(v9) = 0;
      v57 = 0;
      v11 = 0;
      v10 = 1;
    }
    goto LABEL_15;
  }
  if (sub_10005549C())
  {
    sub_100054530("Received remote services from a peer, but we're not supposed to have any services, so ignoring !");
    v19 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v62 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
}

void sub_1000F6E2C(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v6;
  unsigned int v7;
  NSObject *v8;
  unsigned int v9;
  NSObject *v10;
  NSObject *v11;
  unsigned int v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  const void *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  _BOOL4 v30;
  unint64_t v31;
  int *v32;
  int v33;
  NSObject *v34;
  unint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  size_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  void *v44;
  void *v45;
  BOOL v46;
  unsigned int v47;
  NSObject *v48;
  BOOL v49;
  NSObject *v50;
  int v51;
  NSObject *v52;
  void *v53;
  unsigned int v54;
  uint64_t *v55;
  BOOL v56;
  unsigned int v57;
  unint64_t v58;
  uint8_t buf[4];
  void *v60;
  __int16 v61;
  int v62;

  if (!sub_1000F0414(a1) || (v6 = sub_1000F0968(a1), v6 == -1))
  {
    *(_WORD *)buf = 264;
    buf[2] = 1;
    sub_1000F0AF8((__int128 *)a1, buf, 3u, 0);
    return;
  }
  v7 = v6;
  if (!sub_1000FA3CC(v6))
    return;
  *(_BYTE *)(*((_QWORD *)&xmmword_10097F168 + v7) + 73) = 1;
  if (a3 <= 2)
  {
    if (sub_10005549C())
    {
      sub_100054530("No services from remote peer.");
      v8 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v60 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    return;
  }
  v9 = *a2;
  if (sub_10005549C())
  {
    sub_100054530("Received %d common services from the remote peripheral %p", v9, (const void *)a1);
    v10 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v60 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (v9 >= 0x19)
  {
    if (sub_10005549C())
    {
      v9 = 24;
      sub_100054530("Too many services, capping to %d", 24);
      v11 = sub_1000544A0(0x51u);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        goto LABEL_18;
      sub_1006CE7A4();
    }
    v9 = 24;
  }
LABEL_18:
  v12 = a3 - 1;
  if (a3 - 1 != 2 * v9)
  {
    if (sub_10005549C())
    {
      sub_100054530("Service size mismatch, nbServices=%d, (dataSize-1)/2=%d capping to the lower value", v9, v12 >> 1);
      v13 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    if (v12 >> 1 < v9)
      LOBYTE(v9) = v12 >> 1;
  }
  v55 = (uint64_t *)sub_100052DC0(8 * v9);
  if (!v55)
    goto LABEL_69;
  v14 = v7;
  v15 = *(_DWORD *)(*((_QWORD *)&xmmword_10097F168 + v7) + 16);
  v16 = v15 + v9;
  if (v16 < 0x19)
    goto LABEL_30;
  v17 = v15 + v9;
  if (sub_10005549C())
  {
    v16 = 24;
    sub_100054530("Too many services + channels, nbServices=%d nbChannels=%d newNbChannels=%d max %d", v9, *(_DWORD *)(*((_QWORD *)&xmmword_10097F168 + v14) + 16), v17, 24);
    v18 = sub_1000544A0(0x51u);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    sub_1006CE7A4();
  }
  v16 = 24;
LABEL_30:
  v57 = v16;
  v19 = sub_100114588(88 * v16);
  if (!v19)
  {
LABEL_69:
    sub_1000F4A24((const void *)a1);
    return;
  }
  v20 = v19;
  v21 = *((_QWORD *)&xmmword_10097F168 + v14);
  v22 = *(_DWORD *)(v21 + 16);
  v23 = *(const void **)(v21 + 8);
  if (v23)
  {
    memmove(v19, v23, 88 * v22);
    sub_100053298(*(void **)(*((_QWORD *)&xmmword_10097F168 + v14) + 8));
    v21 = *((_QWORD *)&xmmword_10097F168 + v14);
  }
  *(_QWORD *)(v21 + 8) = v20;
  if (v22 >= v57)
  {
    v46 = 0;
    v47 = 0;
    goto LABEL_78;
  }
  v56 = 0;
  v54 = 0;
  v24 = a3;
  v25 = 1;
  v26 = v57;
  v58 = v24;
  do
  {
    v27 = v25 + 2;
    if (v25 + 2 > v24)
    {
      if (sub_10005549C())
      {
        sub_100054530("Size mismatch");
        v48 = sub_1000544A0(0x51u);
        v47 = v54;
        v46 = v56;
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
        goto LABEL_78;
      }
LABEL_77:
      v47 = v54;
      v46 = v56;
      goto LABEL_78;
    }
    v28 = *(unsigned __int16 *)&a2[v25];
    if (v22)
    {
      v29 = *(_QWORD *)(v21 + 8);
      if (*(_DWORD *)(v29 + 40) == v28)
      {
        v30 = 0;
LABEL_43:
        if (sub_10005549C())
        {
          sub_100054530("serviceID:%d already registered", v28);
          v34 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            v44 = sub_100054494();
            *(_DWORD *)buf = 136446466;
            v60 = v44;
            v61 = 1024;
            v62 = 0xFFFF;
            _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
          }
        }
        v24 = v58;
        if (!v30)
          goto LABEL_66;
      }
      else
      {
        v31 = 0;
        v32 = (int *)(v29 + 128);
        while (v22 - 1 != v31)
        {
          v33 = *v32;
          v32 += 22;
          ++v31;
          if (v33 == v28)
          {
            v30 = v31 >= v22;
            goto LABEL_43;
          }
        }
      }
    }
    if (word_10097F1E8)
    {
      v35 = 0;
      v36 = &byte_10097F207;
      while (*(unsigned __int16 *)(v36 - 5) != v28)
      {
        ++v35;
        v36 += 72;
        if (v35 >= (unsigned __int16)word_10097F1E8)
          goto LABEL_66;
      }
      v37 = *(v36 - 7) | v56;
      v56 = v37 != 0;
      v38 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v14) + 8) + 88 * v22;
      *(_DWORD *)(v38 + 40) = v28;
      v39 = *(v36 - 15);
      if (v39 >= 0x20)
        v40 = 32;
      else
        v40 = *(v36 - 15);
      *(_DWORD *)(v38 + 32) = v40;
      *(_DWORD *)(v38 + 36) = *(_DWORD *)(v36 - 11);
      *(_QWORD *)(v38 + 44) = 0x100000001;
      memmove((void *)v38, *(const void **)(v36 - 23), v39);
      v41 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v14) + 8);
      v42 = v41 + 88 * v22;
      *(_BYTE *)(v42 + 54) = *(v36 - 3);
      *(_BYTE *)(v42 + 55) = *(v36 - 7);
      *(_WORD *)(v42 + 56) = *(_WORD *)(v36 - 1);
      if (v37)
      {
        if (!sub_1000F0460(a1) || (sub_1002307DC((_DWORD *)(a1 + 48)) & 1) != 0)
        {
          v26 = v57;
          if (sub_10005549C())
          {
            sub_100054530("We require encryption on a common service - delaying connection to this service.");
            v43 = sub_1000544A0(0x51u);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            {
              v45 = sub_100054494();
              *(_DWORD *)buf = 136446466;
              v60 = v45;
              v61 = 1024;
              v62 = 0xFFFF;
              _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
            }
          }
          v24 = v58;
          goto LABEL_65;
        }
        v41 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v14) + 8);
      }
      v26 = v57;
      v24 = v58;
      v55[v54++] = v41 + 88 * v22;
LABEL_65:
      ++v22;
    }
LABEL_66:
    v21 = *((_QWORD *)&xmmword_10097F168 + v14);
    *(_DWORD *)(v21 + 16) = v22;
    if (v27 >= v24)
      break;
    v25 = v27;
  }
  while (v22 < v26);
  if (v27 < v24)
    goto LABEL_77;
  v49 = v22 == v26;
  v47 = v54;
  v46 = v56;
  if (v49)
    goto LABEL_80;
LABEL_78:
  if (sub_10005549C()
    && (sub_100054530("Number of common services don't match."),
        v50 = sub_1000544A0(0x51u),
        os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)))
  {
    if ((sub_1006CF008(v50, v46) & 1) != 0)
    {
LABEL_81:
      v51 = *(_DWORD *)(*((_QWORD *)&xmmword_10097F168 + v14) + 52);
      if ((sub_1000F0460(a1) & 1) == 0 && (byte_10097F8D0 || (v51 & 1) == 0))
      {
        if (sub_10005549C())
        {
          sub_100054530("CL Asking to pair");
          v52 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            v53 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v60 = v53;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        sub_1002380C4(a1, 1);
      }
    }
  }
  else
  {
LABEL_80:
    if (v46)
      goto LABEL_81;
  }
  sub_1000F528C((__int128 *)a1, v47, v55);
  sub_100053298(v55);
}

uint64_t sub_1000F7620(__int128 *a1, unsigned __int16 *a2, unsigned int a3)
{
  uint64_t result;
  int v5;
  int v6;
  NSObject *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  char v15;
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  int v21;
  _BYTE *v22;
  uint64_t (*v23)(__int128 *);
  uint64_t v24;
  uint8_t buf[4];
  void *v26;

  if (a3 <= 3)
  {
    *(_WORD *)buf = 264;
    buf[2] = 4;
    return sub_1000F0AF8(a1, buf, 3u, 0);
  }
  v5 = *a2;
  v6 = a2[1];
  if (sub_10005549C())
  {
    sub_100054530("Received create channel for service %d, CID = %d from %p !", v6, v5, a1);
    v7 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v26 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (sub_1000F0414((uint64_t)a1) || (v8 = sub_1000F0968((uint64_t)a1), v8 == -1))
  {
    v14 = a1;
    v15 = 1;
    return sub_1000FA86C(v14, v15, v6, v5, 0);
  }
  v9 = v8;
  v10 = *((_QWORD *)&xmmword_10097F168 + v8);
  v11 = *(_DWORD *)(v10 + 16);
  if (!v11)
    goto LABEL_18;
  v24 = v8;
  v12 = *(_QWORD *)(v10 + 8);
  v13 = 80;
  while (*(_DWORD *)(v12 + v13 - 40) != v6)
  {
    v13 += 88;
    if (!--v11)
      goto LABEL_18;
  }
  v16 = (unsigned __int16)word_10097F1E8;
  if (!word_10097F1E8)
  {
LABEL_18:
    v14 = a1;
    v15 = 5;
    return sub_1000FA86C(v14, v15, v6, v5, 0);
  }
  v17 = 0;
  v18 = v12 + v13 - 80;
  v19 = &byte_10097F204;
  while (!sub_1000F38BC(v18, v17))
  {
    ++v17;
    v19 += 72;
    if (v16 == v17)
      goto LABEL_18;
  }
  if (*(v19 - 4))
  {
    if (sub_1000F0460((uint64_t)a1))
    {
      v10 = *((_QWORD *)&xmmword_10097F168 + v24);
      goto LABEL_24;
    }
    v14 = a1;
    v15 = 3;
    return sub_1000FA86C(v14, v15, v6, v5, 0);
  }
LABEL_24:
  if ((dword_10097F8D4 & 0x10) != 0 && (*(_BYTE *)(v10 + 52) & 0x10) != 0)
    v20 = 2576;
  else
    v20 = 2042;
  if (sub_1000F5680((uint64_t)a1, v9, *(_QWORD *)(v10 + 8) + v13 - 80, 1, v20))
  {
    v14 = a1;
    v15 = 6;
    return sub_1000FA86C(v14, v15, v6, v5, 0);
  }
  *(_WORD *)(sub_1001E3CCC(*(int **)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v24) + 8) + v13 - 16)) + 8) = v5;
  v21 = sub_1000FA86C(a1, 0, v6, v5, *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v24) + 8) + v13 - 16) + 4));
  v22 = (_BYTE *)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v24) + 8) + v13);
  result = *((_QWORD *)v22 - 2);
  if (v21)
  {
    result = sub_1001DC658(result);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v24) + 8) + v13 - 16) = 0;
  }
  else
  {
    *((_WORD *)v22 - 14) = *(_WORD *)(result + 4);
    *v22 = v19[5];
    v23 = *(uint64_t (**)(__int128 *))(v19 + 20);
    if (v23)
      return v23(a1);
  }
  return result;
}

void sub_1000F793C(__int128 *a1, unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v6;
  unsigned int v7;
  uint8_t v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  char *i;
  void (*v23)(__int128 *);
  uint8_t buf[4];
  void *v25;

  v6 = sub_1000F0968((uint64_t)a1);
  if (v6 == -1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Unknown peer.");
      v9 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  else
  {
    v7 = v6;
    if (!sub_1000F0414((uint64_t)a1))
    {
      *(_WORD *)buf = 264;
      v8 = 1;
      goto LABEL_9;
    }
    if (a3 <= 4)
    {
      *(_WORD *)buf = 264;
      v8 = 4;
LABEL_9:
      buf[2] = v8;
      sub_1000F0AF8(a1, buf, 3u, 0);
      return;
    }
    v10 = *a2;
    v11 = *(unsigned __int16 *)(a2 + 1);
    v12 = *(unsigned __int16 *)(a2 + 3);
    if (sub_10005549C())
    {
      sub_100054530("Received accept channel for service %d, CID = %d from %p !", v11, v12, a1);
      v13 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v25 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    v14 = *((_QWORD *)&xmmword_10097F168 + v7);
    v15 = *(_DWORD *)(v14 + 16);
    if (v15)
    {
      v16 = 0;
      v17 = *(_QWORD *)(v14 + 8);
      v18 = &byte_10097F209;
      while (*(_DWORD *)(v17 + v16 + 40) != v11)
      {
        v18 += 72;
        v16 += 88;
        if (!--v15)
          return;
      }
      v19 = *(int **)(v17 + v16 + 64);
      if (v19)
      {
        if (v10)
        {
          sub_1001DC658((uint64_t)v19);
          *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v7) + 8) + v16 + 64) = 0;
        }
        else
        {
          *(_WORD *)(sub_1001E3CCC(v19) + 8) = v12;
          *(_BYTE *)(sub_1001E3CCC(*(int **)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v7) + 8) + v16 + 64)) + 16) = 4;
          v20 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v7) + 8) + v16;
          *(_BYTE *)(v20 + 80) = *v18;
          *(_WORD *)(v20 + 52) = *(_WORD *)(*(_QWORD *)(v20 + 64) + 4);
          v21 = (unsigned __int16)word_10097F1E8;
          if (word_10097F1E8)
          {
            for (i = &byte_10097F204; *((unsigned __int16 *)i - 1) != v11; i += 72)
            {
              if (!--v21)
                return;
            }
            v23 = *(void (**)(__int128 *))(i + 20);
            if (v23)
              v23(a1);
          }
        }
      }
    }
  }
}

void sub_1000F7BD8(__int128 *a1, unsigned __int16 *a2, unsigned int a3)
{
  unsigned int v6;
  unsigned int v7;
  uint8_t v8;
  int v9;
  size_t v10;
  NSObject *v11;
  const void *v12;
  char v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  const void *v23;
  char *v24;
  uint64_t v25;
  int v26;
  char *v27;
  int v28;
  size_t v29;
  int v30;
  int v31;
  BOOL v32;
  char *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  __int16 v37;
  uint8_t buf[4];
  void *v39;

  v6 = sub_1000F0968((uint64_t)a1);
  if (v6 == -1)
    goto LABEL_6;
  v7 = v6;
  if (!sub_1000FA3CC(v6))
    return;
  if (a3 <= 4)
  {
    *(_WORD *)buf = 264;
    v8 = 4;
LABEL_7:
    buf[2] = v8;
    sub_1000F0AF8(a1, buf, 3u, 0);
    return;
  }
  if (sub_1000F0414((uint64_t)a1))
  {
LABEL_6:
    *(_WORD *)buf = 264;
    v8 = 1;
    goto LABEL_7;
  }
  v9 = *a2;
  v37 = *a2;
  if (*((unsigned __int8 *)a2 + 3) >= 0x20u)
    v10 = 32;
  else
    v10 = *((unsigned __int8 *)a2 + 3);
  if (!(_DWORD)v10 || (int)v10 + 4 > a3)
  {
    if (sub_10005549C())
    {
      sub_100054530("Service name length (%d) doesn't match data size (%d).", v10, a3);
      v11 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return;
  }
  v12 = a2 + 2;
  if (a3 - (_DWORD)v10 == 4)
    v13 = 0;
  else
    v13 = *((_BYTE *)a2 + v10 + 4);
  v14 = *((unsigned __int8 *)a2 + 2);
  if (sub_10005549C())
  {
    sub_100054530("Received service added on lm 0x%4x with service ID %d, eRTM %d", *(unsigned __int16 *)a1, v9, v13 & 1);
    v15 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v39 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!sub_1000FA550(v7, v12, v10, a1))
  {
    if (!sub_10005549C())
      return;
    sub_100054530("Service ID %d is not supported. OI_STATUS_WATCH_TS_REMOTE_UNSUPPORTED", v9);
    v34 = sub_1000544A0(0x51u);
    if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      return;
LABEL_49:
    sub_1006CE7A4();
    return;
  }
  v16 = *((_QWORD *)&xmmword_10097F168 + v7);
  v17 = *(_DWORD *)(v16 + 16);
  if (v17)
  {
    v18 = *(_DWORD **)(v16 + 8);
    v19 = *(unsigned int *)(v16 + 16);
    while (v18[10] != v9)
    {
      if (sub_1000F2CE0(v18, v12, v10, v14))
      {
        if (!sub_10005549C())
          return;
        sub_100054530("Already have this service name for this peer !");
        v36 = sub_1000544A0(0x51u);
        if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          return;
        goto LABEL_49;
      }
      v18 += 22;
      if (!--v19)
        goto LABEL_29;
    }
    if (!sub_10005549C())
      return;
    sub_100054530("Already have this service ID for this peer !");
    v35 = sub_1000544A0(0x51u);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_49;
  }
LABEL_29:
  v20 = sub_100114588(88 * (v17 + 1));
  if (v20)
  {
    v21 = v20;
    v22 = *((_QWORD *)&xmmword_10097F168 + v7);
    v23 = *(const void **)(v22 + 8);
    if (v23)
    {
      memmove(v20, v23, 88 * *(unsigned int *)(v22 + 16));
      sub_100053298(*(void **)(*((_QWORD *)&xmmword_10097F168 + v7) + 8));
      v22 = *((_QWORD *)&xmmword_10097F168 + v7);
    }
    v24 = &v21[88 * *(unsigned int *)(v22 + 16)];
    *((_DWORD *)v24 + 8) = v10;
    *((_DWORD *)v24 + 9) = v14;
    *((_DWORD *)v24 + 10) = v9;
    *(_QWORD *)(v24 + 44) = 0x100000001;
    memmove(v24, v12, v10);
    v25 = *((_QWORD *)&xmmword_10097F168 + v7);
    v26 = *(_DWORD *)(v25 + 16);
    v27 = &v21[88 * v26];
    *((_QWORD *)v27 + 8) = 0;
    v27[56] = v13 & 1;
    v27[57] = (v13 & 2) != 0;
    *((_WORD *)v27 + 26) = 0;
    *(_QWORD *)(v25 + 8) = v21;
    *(_DWORD *)(v25 + 16) = v26 + 1;
    v28 = (unsigned __int16)word_10097F1E8;
    if (word_10097F1E8)
    {
      if (v10 >= 0xF)
        v29 = 15;
      else
        v29 = v10;
      v30 = memcmp("com.apple.BT.TS", v12, v29);
      v31 = 0;
      v32 = (byte_10097F160 | v30) == 0;
      v33 = &byte_10097F204;
      while (v32 || !sub_1000F38BC((uint64_t)&v21[88 * v26], v31))
      {
        ++v31;
        v33 += 72;
        if (v28 == v31)
          return;
      }
      v21[88 * v26 + 54] = *v33;
      sub_1000F2D54(a1, 1u, (uint64_t)&v37);
    }
  }
}

void sub_1000F8028(__int128 *a1, unsigned __int16 *a2, unsigned int a3)
{
  unsigned int v6;
  unsigned int v7;
  NSObject *v8;
  uint8_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  int v23;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  uint64_t v27;
  unsigned int v28;
  char *v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  unsigned int v35;
  NSObject *v36;
  void *v37;
  void (*v38)(_QWORD, uint64_t);
  uint64_t v39;
  uint64_t v40;
  void *v41;
  __int128 *v42;
  int v43;
  int v44;
  unsigned int v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t buf[4];
  void *v50;

  v6 = sub_1000F0968((uint64_t)a1);
  if (v6 == -1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Service removed error: Invalid peer");
      v10 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    *(_WORD *)buf = 264;
    v9 = 1;
    goto LABEL_12;
  }
  v7 = v6;
  if (!sub_1000FA3CC(v6))
    return;
  if (a3 <= 1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Service removed error  Invalid peer");
      v8 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    *(_WORD *)buf = 264;
    v9 = 4;
LABEL_12:
    buf[2] = v9;
    sub_1000F0AF8(a1, buf, 3u, 0);
    return;
  }
  v11 = *a2;
  v12 = *((_QWORD *)&xmmword_10097F168 + v7);
  v13 = *(_DWORD *)(v12 + 16);
  if (!v13)
  {
LABEL_17:
    if (sub_10005549C())
    {
      sub_100054530("Got a remove request but can't find a service to remove.");
      v18 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    goto LABEL_60;
  }
  v14 = 0;
  v15 = 0;
  v16 = v7;
  v17 = *(_QWORD *)(v12 + 8) + 40;
  while (*(_DWORD *)(v17 + v14) != v11)
  {
    ++v15;
    v14 += 88;
    if (v13 == v15)
      goto LABEL_17;
  }
  if (sub_10005549C())
  {
    v19 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v7) + 8);
    v20 = v19 + v14;
    v21 = *(int *)(v19 + v14 + 44);
    v22 = v21 > 2 ? "unknown CL service state" : off_10091A518[v21];
    v23 = *(_DWORD *)(v20 + 40);
    v24 = *(int *)(v20 + 48);
    v25 = v24 > 2 ? "unknown CL service state" : off_10091A518[v24];
    sub_100054530("Received service removed on peerID %d, channelID %d, serviceID %d, ServiceState [local %s, remote %s], channel 0x%x", v7, v15, v23, v22, v25, *(_QWORD *)(v19 + v14 + 64));
    v26 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v50 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v27 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v16) + 8) + v14;
  *(_DWORD *)(v27 + 48) = 2;
  if (!*(_QWORD *)(v27 + 64))
  {
    v30 = sub_1000F0414((uint64_t)a1);
    v31 = *((_QWORD *)&xmmword_10097F168 + v16);
    if (v30 && !*(_BYTE *)(*(_QWORD *)(v31 + 8) + v14 + 55))
    {
      sub_100253460();
      v31 = *((_QWORD *)&xmmword_10097F168 + v16);
    }
    v32 = *(_QWORD *)(v31 + 8);
    v33 = (void *)(v32 + v14);
    if (*(_DWORD *)(v32 + v14 + 44) == 2)
    {
      if (!sub_10005549C())
        goto LABEL_64;
      sub_100054530("Initiated service removal, but received service removed, delay channel removal until remove cfm is received");
      v34 = sub_1000544A0(0x51u);
      if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        goto LABEL_64;
LABEL_59:
      v41 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v50 = v41;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
LABEL_64:
      v42 = a1;
      v43 = v11;
      v44 = 0;
      goto LABEL_65;
    }
    v45 = *(_DWORD *)(v31 + 16) - 1;
    *(_DWORD *)(v31 + 16) = v45;
    v46 = (const void *)(v32 + 88 * v45);
LABEL_63:
    memmove(v33, v46, 0x58uLL);
    v48 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v16) + 8) + 88 * v45;
    *(_QWORD *)(v48 + 80) = 0;
    *(_OWORD *)(v48 + 48) = 0u;
    *(_OWORD *)(v48 + 64) = 0u;
    *(_OWORD *)(v48 + 16) = 0u;
    *(_OWORD *)(v48 + 32) = 0u;
    *(_OWORD *)v48 = 0u;
    goto LABEL_64;
  }
  if (!word_10097F1E8)
  {
    v28 = 0;
    goto LABEL_48;
  }
  v28 = 0;
  v29 = &byte_10097F205;
  while ((!sub_1000F0414((uint64_t)a1)
        || !sub_1000F384C((_DWORD *)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v16) + 8) + v14), v28))&& (sub_1000F0414((uint64_t)a1)|| !sub_1000F38BC(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v16) + 8) + v14, v28)))
  {
    ++v28;
    v29 += 72;
    if (v28 >= (unsigned __int16)word_10097F1E8)
      goto LABEL_48;
  }
  if (!*v29 || sub_1000F0414((uint64_t)a1))
  {
LABEL_48:
    if (v28 < (unsigned __int16)word_10097F1E8)
    {
      v35 = v28;
      if (BYTE4(qword_10097F1F0[9 * v28 + 2]) == 13)
      {
        *(_BYTE *)(*((_QWORD *)&xmmword_10097F168 + v16) + 75) = 0;
        if (sub_1000ECA90((uint64_t)a1, 0))
        {
          if (sub_10005549C())
          {
            sub_100054530("Force upgrade TS not ready B");
            v36 = sub_1000544A0(0x51u);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
            {
              v37 = sub_100054494();
              *(_DWORD *)buf = 136446210;
              v50 = v37;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
        }
      }
      v38 = (void (*)(_QWORD, uint64_t))qword_10097F1F0[9 * v35 + 6];
      v39 = *((_QWORD *)&xmmword_10097F168 + v16);
      if (v38)
      {
        v38(*(unsigned __int16 *)(*(_QWORD *)(v39 + 8) + v14 + 52), 5101);
        v39 = *((_QWORD *)&xmmword_10097F168 + v16);
      }
      v40 = *(_QWORD *)(v39 + 8) + v14;
      if (*(_DWORD *)(v40 + 44) == 2)
      {
        if (!sub_10005549C())
          goto LABEL_64;
        sub_100054530("Initiated service removal, but received service removed, delay channel removal until remove cfm is received");
        v34 = sub_1000544A0(0x51u);
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          goto LABEL_64;
        goto LABEL_59;
      }
      v45 = *(_DWORD *)(v39 + 16) - 1;
      *(_DWORD *)(v39 + 16) = v45;
      sub_1001DC658(*(_QWORD *)(v40 + 64));
      v47 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v16) + 8);
      v33 = (void *)(v47 + v14);
      v46 = (const void *)(v47 + 88 * v45);
      goto LABEL_63;
    }
LABEL_60:
    v42 = a1;
    v43 = v11;
    v44 = 5;
LABEL_65:
    sub_1000FAAB4(v42, v43, v44);
  }
}

void sub_1000F85F8(uint64_t a1, unsigned __int16 *a2, unsigned int a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  _BOOL4 v9;
  const char *v10;
  NSObject *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  size_t v22;
  NSObject *v23;
  void *v24;
  unsigned int v25;
  void *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  NSObject *v33;
  void *v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  void *v41;
  unint64_t v42;
  uint64_t *v43;
  NSObject *v44;
  void *v45;
  int v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  _BOOL4 v50;
  BOOL v51;
  void *v52;
  NSObject *v53;
  void (*v54)(void *, size_t, uint64_t);
  NSObject *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  size_t v59;
  void *v60;
  NSObject *v61;
  NSObject *v62;
  uint64_t *v63;
  int v64;
  int v65;
  size_t v66;
  _BOOL4 v67;
  uint8_t buf[4];
  void *v69;

  v6 = sub_1000F0968(a1);
  if (a3 < 3)
    return;
  v7 = v6;
  if (v6 == -1)
    return;
  v8 = *a2;
  if (sub_10005549C())
  {
    v9 = sub_1000F0414(a1);
    v10 = "Peripheral";
    if (v9)
      v10 = "Central";
    sub_100054530("%s received service remove confirmation for id %d", v10, v8);
    v11 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v69 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v12 = *((_QWORD *)&xmmword_10097F168 + v7);
  v13 = *(unsigned int *)(v12 + 16);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)(v12 + 8);
    if (*(_DWORD *)(v14 + 40) == v8)
    {
      v15 = 0;
      v67 = 0;
LABEL_15:
      v18 = v7;
      if (sub_10005549C())
      {
        v19 = *(int *)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v7) + 8) + 88 * v15 + 44);
        v20 = v19 > 2 ? "unknown CL service state" : off_10091A518[v19];
        sub_100054530("Removal confirmed and local service exists, removing while in state %s ", v20);
        v23 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          v24 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          v69 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      v25 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v18) + 8) + 88 * v15 + 32);
      if (v25 >= 0x20)
        v22 = 32;
      else
        v22 = v25;
      v26 = sub_100052DC0(v22);
      v21 = v26;
      if (v26)
        memmove(v26, (const void *)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v18) + 8) + 88 * v15), v22);
      v65 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v18) + 8) + 88 * v15 + 36);
      v27 = sub_1000F0414(a1);
      v28 = *((_QWORD *)&xmmword_10097F168 + v18);
      if (v27
        || (v29 = *(_QWORD *)(v28 + 8), *(_DWORD *)(v29 + 88 * v15 + 48) == 2) && *(_DWORD *)(v29 + 88 * v15 + 44) == 2)
      {
        v30 = *(_DWORD *)(v28 + 16);
        if (v30 || (sub_100253460(), v28 = *((_QWORD *)&xmmword_10097F168 + v18), (v30 = *(_DWORD *)(v28 + 16)) != 0))
        {
          v31 = v30 - 1;
          *(_DWORD *)(v28 + 16) = v30 - 1;
          memmove((void *)(*(_QWORD *)(v28 + 8) + 88 * v15), (const void *)(*(_QWORD *)(v28 + 8) + 88 * (v30 - 1)), 0x58uLL);
          v32 = *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v18) + 8) + 88 * v31;
          *(_QWORD *)(v32 + 80) = 0;
          *(_OWORD *)(v32 + 48) = 0u;
          *(_OWORD *)(v32 + 64) = 0u;
          *(_OWORD *)(v32 + 16) = 0u;
          *(_OWORD *)(v32 + 32) = 0u;
          *(_OWORD *)v32 = 0u;
        }
        else if (sub_10005549C())
        {
          sub_100054530("PeerID %d nb channels was zero when serviced was removed", v64);
          v62 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
            sub_1006CEEC0();
        }
      }
      else
      {
        if (sub_10005549C())
        {
          sub_100054530("Peripheral resetting service-state for id %d, channel %d", v8, v15);
          v33 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            v34 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v69 = v34;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v18) + 8) + 88 * v15 + 44) = 0x100000001;
      }
      goto LABEL_37;
    }
    v15 = 0;
    v16 = (int *)(v14 + 128);
    while (v13 - 1 != v15)
    {
      v17 = *v16;
      v16 += 22;
      ++v15;
      if (v17 == v8)
      {
        v67 = v15 >= v13;
        goto LABEL_15;
      }
    }
  }
  v21 = 0;
  v22 = 0;
  v65 = 0;
  v67 = 1;
LABEL_37:
  v66 = v22;
  v35 = (unsigned __int16)word_10097F162;
  if (word_10097F162)
  {
    v36 = 0;
    v37 = 0;
    do
    {
      if (*(_DWORD *)(*((_QWORD *)&xmmword_10097F168 + v36) + 16))
      {
        v38 = 0;
        v39 = 40;
        do
        {
          if (sub_1000F0414(a1) && *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v36) + 8) + v39) == v8)
          {
            if (sub_10005549C())
            {
              sub_100054530("Central waiting for more");
              v40 = sub_1000544A0(0x51u);
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                v41 = sub_100054494();
                *(_DWORD *)buf = 136446210;
                v69 = v41;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
              }
            }
            v37 = 1;
          }
          ++v38;
          v39 += 88;
        }
        while (v38 < *(unsigned int *)(*((_QWORD *)&xmmword_10097F168 + v36) + 16));
        v35 = (unsigned __int16)word_10097F162;
      }
      ++v36;
    }
    while (v36 < v35);
  }
  else
  {
    v37 = 0;
  }
  if ((v37 & 1) != 0 || !word_10097F1E8)
  {
LABEL_82:
    v52 = v21;
  }
  else
  {
    v42 = 0;
    v43 = qword_10097F1F0;
    while (1)
    {
      if (sub_10005549C())
      {
        sub_100054530("receivedServiceRemovedCfm:  unregistering service[%d]= %d", v42, v8);
        v44 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          v45 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          v69 = v45;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, " %{public}s", buf, 0xCu);
        }
      }
      if (sub_1000F0414(a1) && v8 == *((unsigned __int16 *)v43 + 9))
        break;
      if (((v67 | sub_1000F0414(a1)) & 1) == 0
        && (_DWORD)v66 == LOBYTE(qword_10097F1F0[9 * v42 + 1])
        && !memcmp((const void *)qword_10097F1F0[9 * v42], v21, v66))
      {
        v46 = HIDWORD(qword_10097F1F0[9 * v42 + 1]);
        v47 = v65 == 1 && v46 == 0;
        v48 = v47;
        v49 = !v65 && v46 == 1;
        v50 = v49;
        v51 = v46 == 2 && v65 == 2;
        if (v51 || v48 || v50)
          break;
      }
      ++v42;
      v43 += 9;
      if (v42 >= (unsigned __int16)word_10097F1E8)
        goto LABEL_82;
    }
    if (*((_BYTE *)v43 + 21) && (!sub_1000F0414(a1) || *((unsigned __int16 *)v43 + 9) == v8))
    {
      v54 = (void (*)(void *, size_t, uint64_t))v43[8];
      if (sub_10005549C())
      {
        sub_100054530("Found matching services, unregistering serviceID %d, unregisterCb %p", v8, v54);
        v55 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          v56 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          v69 = v56;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      v57 = *((unsigned int *)v43 + 3);
      v58 = v21;
      if (!v21)
      {
        if (*((unsigned __int8 *)v43 + 8) >= 0x20u)
          v59 = 32;
        else
          v59 = *((unsigned __int8 *)v43 + 8);
        v66 = v59;
        v60 = sub_100052DC0(v59);
        if (v60)
        {
          v58 = v60;
          memmove(v60, (const void *)*v43, v59);
        }
        else
        {
          v58 = 0;
        }
      }
      sub_100053298((void *)*v43);
      v63 = &qword_10097F1F0[9 * (unsigned __int16)--word_10097F1E8];
      memmove(v43, v63, 0x48uLL);
      *(_OWORD *)v63 = 0u;
      *((_OWORD *)v63 + 1) = 0u;
      *((_OWORD *)v63 + 2) = 0u;
      *((_OWORD *)v63 + 3) = 0u;
      v63[8] = 0;
      v52 = v58;
      if (v54)
        v54(v58, v66, v57);
    }
    else
    {
      v52 = v21;
      if (sub_10005549C())
      {
        sub_100054530("Got an unregister for something not being unregistered...");
        v61 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
  }
  if (v67
    && !(v37 & 1 | (word_10097F1E8 == 0))
    && !sub_1000F0414(a1)
    && sub_10005549C()
    && (sub_100054530("receivedServiceRemovedCfm: ignored, no matching local service"),
        v53 = sub_1000544A0(0x51u),
        os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)))
  {
    sub_1006CE7A4();
    if (!v52)
      return;
  }
  else if (!v52)
  {
    return;
  }
  sub_100053298(v52);
}

uint64_t sub_1000F8E74(void *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  uint8_t buf[4];
  void *v10;

  if (sub_10005549C())
  {
    sub_100054530("Signaling error %d", *(unsigned __int8 *)(a2 + 2));
    v4 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  result = sub_1000F0968((uint64_t)a1);
  if ((_DWORD)result == -1
    || (v6 = result, v7 = *((_QWORD *)&xmmword_10097F168 + result), *(_BYTE *)(v7 + 73))
    || !*(_BYTE *)(v7 + 74)
    || (result = sub_1000F0414((uint64_t)a1), !(_DWORD)result))
  {
    if (off_100994C20)
      return off_100994C20(a1, 81, 3221, *(unsigned __int8 *)(a2 + 2));
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("Received an Error response from the other side, we're not rxOK yet, and we're central, and we're pending version, this is a response for version msg");
      v8 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v10 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    *(_BYTE *)(*((_QWORD *)&xmmword_10097F168 + v6) + 74) = 0;
    sub_1000F9BF8(a1);
    return sub_1000F104C((__int128 *)a1);
  }
  return result;
}

void sub_1000F9004(unsigned __int16 *a1)
{
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int16 v8;
  size_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  unsigned int v13;
  NSObject *v14;
  NSObject *v15;
  _BYTE *v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  NSObject *v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t buf[4];
  void *v26;

  v2 = sub_1000F0968((uint64_t)a1);
  if (v2 == -1)
    sub_100253460();
  if (*(_BYTE *)(*((_QWORD *)&xmmword_10097F168 + v2) + 72))
    sub_100253460();
  if (v2 != -1)
  {
    v3 = *((_QWORD *)&xmmword_10097F168 + v2);
    if (!*(_BYTE *)(v3 + 72))
    {
      *(_BYTE *)(v3 + 72) = 1;
      if (sub_10005549C())
      {
        sub_100054530("AssertPower for lm 0x%4x", *a1);
        v4 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v26 = sub_100054494();
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      sub_100113F1C();
    }
  }
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v5 = sub_1000F0968((uint64_t)a1);
  if (v5 == -1)
  {
    if (!sub_10005549C())
      return;
    sub_100054530("sendTimeSyncCorrection peerID is invalid");
    v14 = sub_1000544A0(0x51u);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      return;
LABEL_23:
    sub_1006CE7A4();
    return;
  }
  v6 = v5;
  v7 = *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v5) + 48);
  if (v7 <= 7)
    v8 = 20;
  else
    v8 = 21;
  if (v7 <= 7)
    v9 = 20;
  else
    v9 = 21;
  v10 = sub_100052DC0(v9);
  if (!v10)
  {
    if (!sub_10005549C())
      return;
    sub_100054530("sendTimeSyncCorrection memory allocation failed");
    v15 = sub_1000544A0(0x51u);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_23;
  }
  v11 = v10;
  sub_100113574(&v24);
  sub_1001135CC(&v23);
  sub_1001134C0(&v22);
  v12 = v22 / 60;
  *v11 = 113;
  if (*(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v6) + 48) < 8u)
  {
    v13 = 2;
  }
  else
  {
    v11[2] = 0;
    v13 = 3;
  }
  v11[1] = 18;
  v16 = &v11[v13];
  *(_DWORD *)v16 = HIDWORD(v24);
  v17 = WORD1(v24);
  *((_WORD *)v16 + 2) = v24;
  *((_WORD *)v16 + 3) = v17;
  v18 = HIWORD(v23);
  *((_WORD *)v16 + 4) = WORD2(v23);
  *((_WORD *)v16 + 5) = v18;
  v19 = WORD1(v23);
  *((_WORD *)v16 + 6) = v23;
  *((_WORD *)v16 + 7) = v19;
  *((_WORD *)v16 + 8) = v12;
  *(_QWORD *)(qword_10097F8B8 + 128) = sub_1000FAC8C;
  if (sub_10005549C())
  {
    sub_100054530("Sending time info t1={%u,%u}, m1={%u,%u} GMT:%d index %d", v24, HIDWORD(v24), v23, HIDWORD(v23), (__int16)v12, v13 + 18);
    v20 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v26 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (sub_1000F0AF8((__int128 *)a1, v11, v8, 1))
    sub_1000F490C(a1);
}

void sub_1000F9398(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  NSObject *v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  uint8_t buf[4];
  void *v16;

  v14 = 0;
  sub_1001135CC(&v14);
  v6 = sub_1000F0968(a1);
  if (v6 == -1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Invalid peer for time data");
      v8 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        goto LABEL_5;
    }
  }
  else if (a3 > 0xF)
  {
    v9 = v6;
    v10 = *((_QWORD *)&xmmword_10097F168 + v6);
    *(_QWORD *)(v10 + 28) = v14;
    *(_DWORD *)(v10 + 40) = *(_DWORD *)a2;
    *(_DWORD *)(v10 + 36) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(v10 + 20) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(v10 + 44) = 0;
    if (a3 == 18)
      *(_DWORD *)(v10 + 44) = 60 * ((__int16)(*(unsigned __int8 *)(a2 + 17) << 8) | *(unsigned __int8 *)(a2 + 16));
    if (sub_10005549C())
    {
      v11 = (_DWORD *)*((_QWORD *)&xmmword_10097F168 + v9);
      sub_100054530("Received time info t1={%u,%u}, m1={%u,%u} at {%u,%u} GMT:%d", v11[9], v11[10], v11[5], v11[6], v14, HIDWORD(v14), v11[11]);
      v12 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = sub_100054494();
        *(_DWORD *)buf = 136446210;
        v16 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
  }
  else if (sub_10005549C())
  {
    sub_100054530("Wrong size for time data");
    v7 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
LABEL_5:
      sub_1006CE7A4();
  }
}

void sub_1000F9594(uint64_t a1, double *a2, unsigned int a3)
{
  unsigned int v6;
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  _DWORD *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t v24;
  uint8_t buf[4];
  void *v26;
  double v27;

  v6 = sub_1000F0968(a1);
  if (v6 != -1)
  {
    v24 = 0;
    if (a3 > 0xF)
    {
      v11 = *(unsigned int *)a2;
      v10 = *((unsigned int *)a2 + 1);
      v27 = a2[1];
      v12 = v6;
      sub_10011362C(v10 | (v11 << 32), *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v6) + 20), &v27, &v24, v27, v7, v8);
      if (v13)
      {
        if (sub_10005549C())
        {
          sub_100054530("Invalid time, newer is smaller ({%u,%u} vs {%u,%u})", v10, v11, *(_DWORD *)(*((_QWORD *)&xmmword_10097F168 + v12) + 20), *(_DWORD *)(*((_QWORD *)&xmmword_10097F168 + v12) + 24));
          v14 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        *(_QWORD *)(*((_QWORD *)&xmmword_10097F168 + v12) + 56) = 0;
      }
      else
      {
        if (sub_10005549C())
        {
          v15 = (_DWORD *)*((_QWORD *)&xmmword_10097F168 + v12);
          sub_100054530("Time was {%u,%u} at remote {%u,%u} received at {%u,%u}", v15[9], v15[10], v15[5], v15[6], v15[5], v15[8]);
          v16 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            v17 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v26 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        if (sub_10005549C())
        {
          sub_100054530("Remote TX of {%u,%u}", v10, v11);
          v18 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            v19 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v26 = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        if (sub_10005549C())
        {
          sub_100054530("Remote correction by {%u,%u}", v24, HIDWORD(v24));
          v20 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            v21 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v26 = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        v22 = *((_QWORD *)&xmmword_10097F168 + v12);
        v23 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(v22 + 56);
        if (v23)
        {
          v23(a1, *(_QWORD *)(v22 + 36), *(_QWORD *)(v22 + 28), *(_QWORD *)(v22 + 20), v24, *(unsigned int *)(v22 + 44), *(_QWORD *)(v22 + 64));
          v22 = *((_QWORD *)&xmmword_10097F168 + v12);
        }
        *(_QWORD *)(v22 + 56) = 0;
        *(_QWORD *)(v22 + 20) = 0;
        *(_QWORD *)(v22 + 36) = 0;
        *(_QWORD *)(v22 + 28) = 0;
        *(_DWORD *)(v22 + 44) = 0;
      }
    }
    else if (sub_10005549C())
    {
      sub_100054530("Wrong size for time data");
      v9 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
}

uint64_t sub_1000F9890(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  NSObject *v11;
  void *v12;
  uint8_t buf[4];
  void *v14;

  v4 = byte_10097F060;
  if (byte_10097F060)
  {
    v8 = result;
    v9 = 0;
    v10 = &qword_10097F068;
    do
    {
      if (*v10)
      {
        if (sub_10005549C())
        {
          sub_100054530("Received cl data with size %d for session %d", a3, v9);
          v11 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            v12 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v14 = v12;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))*v10)(v8, a2, (unsigned __int16)a3, v10[1], a4);
        v4 = byte_10097F060;
      }
      ++v9;
      v10 += 2;
    }
    while (v9 < v4);
  }
  return result;
}

void sub_1000F99D8(__int128 *a1, unsigned __int16 *a2, unsigned int a3)
{
  unsigned int v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  _WORD *v13;
  NSObject *v14;
  uint8_t buf[4];
  void *v16;

  v6 = sub_1000F0968((uint64_t)a1);
  if (v6 == -1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Received DID Info for an unknown peer");
      v8 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  else if (a3 > 5)
  {
    if (!a2)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c");
    v9 = *a2;
    v10 = a2[1];
    v11 = a2[2];
    if (a3 < 7)
    {
      v12 = -1;
    }
    else
    {
      if ((a3 & 0xFFF8) == 0)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/cl/BT_CL_Signaling.c");
      v12 = a2[3];
    }
    v13 = (_WORD *)*((_QWORD *)&xmmword_10097F168 + v6);
    v13[50] = v9;
    v13[51] = v10;
    v13[52] = v11;
    v13[53] = v12;
    if (sub_10005549C())
    {
      sub_100054530("Received DeviceID for %: vid 0x%x pid 0x%x version 0x%x chipset 0x%x", (char *)a1 + 49, v9, v10, v11, v12);
      v14 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v16 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("Data size error %d", a3);
      v7 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    *(_WORD *)buf = 264;
    buf[2] = 1;
    sub_1000F0AF8(a1, buf, 3u, 0);
  }
}

void sub_1000F9BF8(void *a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  int v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  char v11;
  NSObject *v12;
  size_t v13;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t *v20;
  size_t v21;
  uint64_t v22;
  char *v23;
  size_t v24;
  int v25;
  uint64_t v26;
  char v27;
  const char *v28;
  NSObject *v29;
  void *v30;
  NSObject *v31;
  void *v32;
  __int16 v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int8 v36;
  NSObject *v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  __int128 v41;
  NSObject *v42;
  void *v43;
  char *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  void *v49;
  uint64_t v50;
  size_t v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  __int128 v55;
  uint8_t buf[4];
  void *v57;
  __int16 v58;
  int v59;

  v2 = sub_1000F0968((uint64_t)a1);
  if (v2 == -1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Can not send services, peer is invalid for handle %p", a1);
      v10 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return;
  }
  v3 = v2;
  if (!sub_1000FA3CC(v2))
    return;
  if (*(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v3) + 48) <= 7u)
    v4 = 2;
  else
    v4 = 3;
  v53 = v4;
  v5 = v4 + 1;
  if (word_10097F1E8)
  {
    v6 = 0;
    v7 = qword_10097F1F0;
    v8 = v4 + 1;
    while (1)
    {
      v9 = v8;
      if (sub_1000FA4D0((uint64_t)v7, a1, v3, v6))
      {
        v8 += *((unsigned __int8 *)v7 + 8) + 6;
        if (*(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v3) + 48) <= 7u && v8 >= 0x100)
          break;
      }
      ++v6;
      v7 += 9;
      if (v6 >= (unsigned __int16)word_10097F1E8)
      {
        LODWORD(v6) = 0;
        v9 = v8;
        goto LABEL_21;
      }
    }
    v11 = sub_10005549C();
    if ((v11 & 1) != 0)
    {
      sub_100054530("Services limit found for peerID %d, remote version %d, pdu-size %d, temp pdu-size %d, index Limit %d", v3, *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v3) + 48), v8, v9, v6);
      v12 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v57 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
    v9 = v4 + 1;
  }
LABEL_21:
  v13 = v9;
  v14 = sub_100052DC0(v9);
  if (!v14)
    return;
  v15 = v14;
  v51 = v13;
  v52 = v3;
  v16 = v6;
  bzero(v14, v13);
  *v15 = 1;
  if (!word_10097F1E8)
  {
    *(_QWORD *)&v55 = 0;
    goto LABEL_41;
  }
  v19 = 0;
  *(_QWORD *)&v55 = 0;
  v20 = qword_10097F1F0;
  *(_QWORD *)&v18 = 136446210;
  v54 = v18;
  while (1)
  {
    v21 = *((unsigned __int8 *)v20 + 8) >= 0x20u ? 32 : *((unsigned __int8 *)v20 + 8);
    __chkstk_darwin(v17, (v21 + 1));
    v23 = (char *)&v50 - v22;
    bzero((char *)&v50 - v22, v24);
    memcpy(v23, (const void *)*v20, v21);
    v23[v21] = 0;
    if (sub_1000FA4D0((uint64_t)v20, a1, v3, v19))
      break;
    v28 = "Skipping";
LABEL_32:
    v17 = sub_10005549C();
    if ((_DWORD)v17)
    {
      sub_100054530("%s service %s requiresEncryption=%d unpublishing=%d, pduCounter %d", v28, v23, *((unsigned __int8 *)v20 + 16), *((unsigned __int8 *)v20 + 21), v5);
      v29 = sub_1000544A0(0x51u);
      v17 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v17)
      {
        v30 = sub_100054494();
        *(_DWORD *)buf = v54;
        v57 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    ++v19;
    v20 += 9;
    if (v19 >= (unsigned __int16)word_10097F1E8)
      goto LABEL_41;
  }
  if (!(_DWORD)v16 || v16 != v19)
  {
    v15[v5] = v21 + 5;
    v15[v5 + 1] = *((_BYTE *)v20 + 18);
    v15[v5 + 2] = *((_BYTE *)v20 + 19);
    v15[v5 + 3] = *((_DWORD *)v20 + 3);
    v25 = v5 + 4;
    v26 = (v5 + 5);
    v15[v25] = v21;
    memmove(&v15[v26], (const void *)*v20, v21);
    v15[(v26 + v21)] = 0;
    v27 = *((_BYTE *)v20 + 22);
    v15[(v26 + v21)] = v27;
    v15[(v26 + v21)] = v27 | (2 * *((_BYTE *)v20 + 23));
    v5 = v26 + v21 + 1;
    *(_QWORD *)&v55 = (v55 + 1);
    v28 = "Sending";
    goto LABEL_32;
  }
  if (sub_10005549C())
  {
    sub_100054530("Exiting due to limit found for peerID %d, lNbServices %d, i %d, singleByteLengthIndex %d", v3, (unsigned __int16)word_10097F1E8, v16, v16);
    v31 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      v32 = sub_100054494();
      *(_DWORD *)buf = v54;
      v57 = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
LABEL_41:
  v33 = v5 - v53;
  if (*(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v52) + 48) < 8u)
  {
    v34 = 2;
  }
  else
  {
    v15[2] = HIBYTE(v33);
    v34 = 3;
  }
  v35 = v51;
  v36 = v55;
  v15[1] = v33;
  v15[v34] = v36;
  if (sub_10005549C())
  {
    sub_100054530("Sending %d out of total %d registered services to %p, pduCounter %d", v36, (unsigned __int16)word_10097F1E8, a1, v5);
    v37 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      v38 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v57 = v38;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (v36)
  {
    v39 = sub_1000F0AF8((__int128 *)a1, v15, v35, 1);
    if ((_DWORD)v39
      && sub_10005549C()
      && (sub_100054530("Sending services PDU failed with %!", v39),
          v40 = sub_1000544A0(0x51u),
          os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)))
    {
      sub_1006CE7A4();
      if ((_DWORD)v16)
        goto LABEL_52;
    }
    else if ((_DWORD)v16)
    {
LABEL_52:
      if (sub_10005549C())
      {
        sub_100054530("Sending left over services: singleByteLengthIndex is %d, lNbServices %d, adding services, status %!", v16, (unsigned __int16)word_10097F1E8, v39);
        v42 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          v43 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          v57 = v43;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      if (v16 < (unsigned __int16)word_10097F1E8)
      {
        v44 = (char *)&qword_10097F1F0[9 * v16 + 1] + 4;
        *(_QWORD *)&v41 = 136446466;
        v55 = v41;
        do
        {
          if (!v44[9])
          {
            if (*(v44 - 4) >= 0x20u)
              v45 = 32;
            else
              v45 = *(v44 - 4);
            v46 = sub_1000F2A44((__int128 *)a1, *((unsigned __int16 *)v44 + 3), *(const void **)(v44 - 12), v45, *(_DWORD *)v44, (unsigned __int16)v16);
            if ((_DWORD)v46)
            {
              v47 = v46;
              if (sub_10005549C())
              {
                sub_100054530("Sending services added PDU failed with %!", v47);
                v48 = sub_1000544A0(0x51u);
                if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                {
                  v49 = sub_100054494();
                  *(_DWORD *)buf = v55;
                  v57 = v49;
                  v58 = 1024;
                  v59 = 0xFFFF;
                  _os_log_error_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
                }
              }
            }
          }
          ++v16;
          v44 += 72;
        }
        while (v16 < (unsigned __int16)word_10097F1E8);
      }
    }
  }
}

void sub_1000FA360(uint64_t a1)
{
  NSObject *v2;

  if ((_DWORD)a1 && sub_10005549C())
  {
    sub_100054530("PhyStatsEnabled with error %!", a1);
    v2 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
}

BOOL sub_1000FA3CC(unsigned int a1)
{
  int v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t buf[4];
  void *v10;

  v1 = *(_DWORD *)(*((_QWORD *)&xmmword_10097F168 + a1) + 52);
  if ((v1 & 0x200) != 0 && sub_10005549C())
  {
    v3 = **((_QWORD **)&xmmword_10097F168 + a1);
    v4 = *(unsigned __int8 *)(v3 + 55);
    v5 = v3 + 57;
    v6 = v3 + 49;
    if (v4)
      v6 = v5;
    sub_100054530("Peer %: does not support CL Services", v6);
    v7 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v10 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  return (v1 & 0x200) == 0;
}

uint64_t sub_1000FA4D0(uint64_t a1, const void *a2, unsigned int a3, unsigned int a4)
{
  if (!a1 || *(_BYTE *)(a1 + 21) || *(_BYTE *)(a1 + 16) && !sub_1000F0460((uint64_t)a2))
    return 0;
  else
    return sub_1000FA550(a3, (const void *)qword_10097F1F0[9 * a4], LOBYTE(qword_10097F1F0[9 * a4 + 1]), a2);
}

uint64_t sub_1000FA550(unsigned int a1, const void *a2, unsigned int a3, const void *a4)
{
  int v8;
  uint64_t result;
  NSObject *v10;
  _BOOL4 v11;
  uint8_t *v12;
  _BOOL4 v13;
  size_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  uint8_t buf[4];
  void *v30;
  _OWORD v31[2];
  char v32;

  if (a2 && a3)
  {
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    if (a3 > 0x20)
      __strlcpy_chk(v31, "Invalid", 33, 33);
    else
      __strncpy_chk(v31);
    v13 = sub_1000F0414((uint64_t)a4);
    if (a3 >= 0xF)
      v14 = 15;
    else
      v14 = a3;
    v15 = memcmp("com.apple.BT.TS", a2, v14);
    result = 1;
    if (!byte_10097F160 && !v15)
    {
      v16 = *((_QWORD *)&xmmword_10097F168 + a1);
      if (*(unsigned __int8 *)(v16 + 48) > 8u)
      {
        if (v13)
        {
          if ((dword_10097F8D4 & 0x400) != 0 && (*(_BYTE *)(v16 + 53) & 8) != 0)
            return result;
        }
        else if ((dword_10097F8D4 & 0x800) != 0 && (*(_BYTE *)(v16 + 53) & 4) != 0)
        {
          return result;
        }
        v23 = sub_10005549C();
        result = 0;
        if (v23)
        {
          v24 = **((_QWORD **)&xmmword_10097F168 + a1);
          v25 = *(unsigned __int8 *)(v24 + 55);
          v26 = v24 + 57;
          v27 = v24 + 49;
          if (v25)
            v27 = v26;
          sub_100054530("Peer %: ver9 We do not support TS isCentral=%d isPhone=%d isWatch=%d . %s ", v27, v13, dword_10097F8D4 & 0x100, dword_10097F8D4 & 0x80, v31);
          v10 = sub_1000544A0(0x51u);
          v28 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v28)
          {
LABEL_34:
            *(_DWORD *)buf = 136446210;
            v30 = sub_100054494();
            v12 = buf;
            goto LABEL_35;
          }
        }
      }
      else
      {
        if (v13)
        {
          if ((dword_10097F8D4 & 0x100) != 0)
            return result;
        }
        else if ((dword_10097F8D4 & 0x80) != 0)
        {
          return result;
        }
        v17 = sub_10005549C();
        result = 0;
        if (v17)
        {
          v18 = **((_QWORD **)&xmmword_10097F168 + a1);
          v19 = *(unsigned __int8 *)(v18 + 55);
          v20 = v18 + 57;
          v21 = v18 + 49;
          if (v19)
            v21 = v20;
          sub_100054530("Peer %: We do not support TS isCentral=%d isPhone=%d isWatch=%d . %s ", v21, v13, dword_10097F8D4 & 0x100, dword_10097F8D4 & 0x80, v31);
          v10 = sub_1000544A0(0x51u);
          v22 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v22)
            goto LABEL_34;
        }
      }
    }
  }
  else
  {
    v8 = sub_10005549C();
    result = 0;
    if (v8)
    {
      sub_100054530("Invalid service name query over %p", a4);
      v10 = sub_1000544A0(0x51u);
      v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v11)
      {
        LODWORD(v31[0]) = 136446210;
        *(_QWORD *)((char *)v31 + 4) = sub_100054494();
        v12 = (uint8_t *)v31;
LABEL_35:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, " %{public}s", v12, 0xCu);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000FA86C(__int128 *a1, char a2, int a3, int a4, int a5)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int16 v13;
  size_t v14;
  _BYTE *v15;
  void *v16;
  unsigned int v17;
  NSObject *v18;
  NSObject *v20;
  _BYTE *v21;
  NSObject *v22;
  uint8_t buf[4];
  void *v24;

  v10 = sub_1000F0968((uint64_t)a1);
  if (v10 == -1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Can not send accept channel, peer is invalid for handle %p", a1);
      v18 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 414;
  }
  else
  {
    v11 = v10;
    v12 = *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v10) + 48);
    if (v12 <= 7)
      v13 = 7;
    else
      v13 = 8;
    if (v12 <= 7)
      v14 = 7;
    else
      v14 = 8;
    v15 = sub_100052DC0(v14);
    if (v15)
    {
      v16 = v15;
      *v15 = 4;
      if (*(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v11) + 48) < 8u)
      {
        v17 = 2;
      }
      else
      {
        v15[2] = 0;
        v17 = 3;
      }
      v15[1] = 5;
      v21 = &v15[v17];
      *v21 = a2;
      *(_WORD *)(v21 + 1) = a3;
      *(_WORD *)(v21 + 3) = a5;
      if (sub_10005549C())
      {
        sub_100054530("Sending accept channel 0x%x(%d) / 0x%x(%d) for service %d to %p index %d", a4, a4, a5, a5, a3, a1, v17 + 5);
        v22 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v24 = sub_100054494();
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      return sub_1000F0AF8(a1, v16, v13, 1);
    }
    else
    {
      if (sub_10005549C())
      {
        sub_100054530("Can not allocate memory for channel creation after acceptance");
        v20 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 106;
    }
  }
}

void sub_1000FAAB4(__int128 *a1, int a2, int a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int16 v9;
  size_t v10;
  _BYTE *v11;
  void *v12;
  unsigned int v13;
  NSObject *v14;
  _BYTE *v15;
  NSObject *v16;
  uint8_t buf[4];
  void *v18;

  v6 = sub_1000F0968((uint64_t)a1);
  if (v6 == -1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Can not send accept channel, peer is invalid for handle %p", a1);
      v14 = sub_1000544A0(0x51u);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  else
  {
    v7 = v6;
    if (sub_1000FA3CC(v6))
    {
      v8 = *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v7) + 48);
      v9 = v8 <= 7 ? 5 : 6;
      v10 = v8 <= 7 ? 5 : 6;
      v11 = sub_100052DC0(v10);
      if (v11)
      {
        v12 = v11;
        *v11 = 7;
        if (*(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v7) + 48) < 8u)
        {
          v13 = 2;
        }
        else
        {
          v11[2] = 0;
          v13 = 3;
        }
        v11[1] = 3;
        v15 = &v11[v13];
        *(_WORD *)v15 = a2;
        v15[2] = a3;
        if (sub_10005549C())
        {
          sub_100054530("Sending removed service %d confirmation with error %d to %p index %d", a2, a3, a1, v13 + 3);
          v16 = sub_1000544A0(0x51u);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446210;
            v18 = sub_100054494();
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        sub_1000F0AF8(a1, v12, v9, 1);
      }
    }
  }
}

void sub_1000FAC8C(__int128 *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  char v5;
  size_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  NSObject *v13;
  NSObject *v14;
  _BYTE *v15;
  __int16 v16;
  __int16 numer_high;
  __int16 denom_high;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  uint8_t buf[4];
  void *v23;
  mach_timebase_info v24;

  v21 = 0;
  v24 = 0;
  v2 = sub_1000F0968((uint64_t)a1);
  if (v2 == -1)
  {
    if (!sub_10005549C())
      return;
    sub_100054530("sendTimeSyncCorrection peerID is invalid");
    v13 = sub_1000544A0(0x51u);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      return;
LABEL_13:
    sub_1006CE7A4();
    return;
  }
  v3 = v2;
  v4 = *(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v2) + 48);
  if (v4 <= 7)
    v5 = 2;
  else
    v5 = 3;
  if (v4 <= 7)
    v6 = 18;
  else
    v6 = 19;
  v7 = sub_100052DC0(v6);
  if (!v7)
  {
    if (!sub_10005549C())
      return;
    sub_100054530("sendTimeSyncCorrection memory allocation failed");
    v14 = sub_1000544A0(0x51u);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_13;
  }
  v8 = v7;
  v9 = v3;
  sub_1001135CC(&v21);
  sub_1001135F4(&v24);
  *v8 = 114;
  v10 = (unsigned __int16)v6;
  v11 = v6 - v5;
  if (*(unsigned __int8 *)(*((_QWORD *)&xmmword_10097F168 + v9) + 48) < 8u)
  {
    v12 = 2;
  }
  else
  {
    v8[2] = 0;
    v12 = 3;
  }
  v8[1] = v11;
  v15 = &v8[v12];
  *(_DWORD *)v15 = HIDWORD(v21);
  v16 = WORD1(v21);
  *((_WORD *)v15 + 2) = v21;
  *((_WORD *)v15 + 3) = v16;
  numer_high = HIWORD(v24.numer);
  *((_WORD *)v15 + 4) = v24.numer;
  *((_WORD *)v15 + 5) = numer_high;
  denom_high = HIWORD(v24.denom);
  *((_WORD *)v15 + 6) = v24.denom;
  *((_WORD *)v15 + 7) = denom_high;
  if (sub_10005549C())
  {
    sub_100054530("Sending time sync correction {%u,%u} with conversion {%u,%u} index %d", v21, HIDWORD(v21), v24.numer, v24.denom, v12 | 0x10);
    v19 = sub_1000544A0(0x51u);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v23 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  sub_1000F0AF8(a1, v8, v10, 1);
  sub_1000F490C((unsigned __int16 *)a1);
}

void sub_1000FAF14()
{
  char *v0;
  uint64_t v1;
  NSObject *v2;
  void *v3;
  uint64_t *v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 *v10;
  size_t v11;
  void *v12;
  unsigned __int16 v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _BOOL4 v20;
  uint64_t *v21;
  BOOL v22;
  NSObject *v23;
  void *v24;
  unsigned __int16 v25;
  uint64_t *v26;
  uint64_t v27;
  void (*v28)(void *, size_t, uint64_t);
  unsigned __int8 *v29;
  unsigned int v30;
  const void **v31;
  uint8_t v32[4];
  void *v33;
  uint8_t buf[16];
  __int128 v35;
  char v36;

  v0 = &byte_10097F000;
  if (word_10097F1E8)
  {
    v1 = 0;
    do
    {
      if (sub_10005549C())
      {
        sub_100054530("Looping through service[%d][%d]= %d serviceType=%d", v1, BYTE5(qword_10097F1F0[9 * v1 + 2]), WORD1(qword_10097F1F0[9 * v1 + 2]), HIDWORD(qword_10097F1F0[9 * v1 + 1]));
        v2 = sub_1000544A0(0x51u);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          v3 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v3;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, " %{public}s", buf, 0xCu);
        }
      }
      v4 = &qword_10097F1F0[9 * v1];
      v6 = *((unsigned __int8 *)v4 + 21);
      v5 = (unsigned __int8 *)v4 + 21;
      if (v6)
      {
        v7 = &qword_10097F1F0[9 * v1];
        v8 = *((unsigned int *)v7 + 3);
        v10 = (unsigned __int8 *)(v7 + 1);
        v9 = *((unsigned __int8 *)v7 + 8);
        v29 = v10;
        v30 = v1;
        if (v9 >= 0x20)
          v11 = 32;
        else
          v11 = v9;
        v12 = sub_100052DC0(v11);
        v31 = (const void **)&qword_10097F1F0[9 * v1];
        memmove(v12, *v31, v11);
        v13 = word_10097F162;
        if (!word_10097F162)
          goto LABEL_25;
        v27 = v1;
        v14 = 0;
        v15 = 0;
        do
        {
          v16 = *((_QWORD *)&xmmword_10097F168 + v14);
          if (*(_DWORD *)(v16 + 16))
          {
            v17 = 0;
            v18 = 0;
            do
            {
              v19 = (_DWORD *)(*(_QWORD *)(v16 + 8) + v17);
              if (v19[8] == (_DWORD)v11 && !memcmp(v19, v12, v11))
              {
                v20 = sub_1000F0414(*(_QWORD *)v16);
                v21 = (uint64_t *)*((_QWORD *)&xmmword_10097F168 + v14);
                if (v20)
                  v15 |= *(_DWORD *)(v21[1] + v17 + 36) == (_DWORD)v8;
                v22 = sub_1000F0414(*v21);
                v16 = *((_QWORD *)&xmmword_10097F168 + v14);
                if (!v22)
                  v15 |= sub_1000F2CE0((_DWORD *)(*(_QWORD *)(v16 + 8) + v17), v12, v11, v8);
              }
              ++v18;
              v17 += 88;
            }
            while (v18 < *(unsigned int *)(v16 + 16));
            v13 = word_10097F162;
          }
          ++v14;
        }
        while (v14 < v13);
        v0 = &byte_10097F000;
        v1 = v27;
        if ((v15 & 1) != 0)
        {
          v1 = (v27 + 1);
        }
        else
        {
LABEL_25:
          v28 = (void (*)(void *, size_t, uint64_t))qword_10097F1F0[9 * v30 + 8];
          v36 = 0;
          *(_OWORD *)buf = 0u;
          v35 = 0u;
          if (*v31 && *v29 - 1 <= 0x1F)
            __strncpy_chk(buf);
          else
            __strlcpy_chk(buf, "Invalid", 33, 33);
          if (sub_10005549C())
          {
            sub_100054530("Looping through service[%d][%d]=%s id=%d serviceType=%d ToRemove", v1, *v5, (const char *)buf, WORD1(qword_10097F1F0[9 * v30 + 2]), *v29);
            v23 = sub_1000544A0(0x51u);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              v24 = sub_100054494();
              *(_DWORD *)v32 = 136446210;
              v33 = v24;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, " %{public}s", v32, 0xCu);
            }
          }
          sub_100053298((void *)*v31);
          v25 = *((_WORD *)v0 + 244) - 1;
          *((_WORD *)v0 + 244) = v25;
          v26 = &qword_10097F1F0[9 * v25];
          memmove(v31, v26, 0x48uLL);
          *(_OWORD *)v26 = 0u;
          *((_OWORD *)v26 + 1) = 0u;
          *((_OWORD *)v26 + 2) = 0u;
          *((_OWORD *)v26 + 3) = 0u;
          v26[8] = 0;
          if (v28)
            v28(v12, v11, v8);
        }
        sub_100053298(v12);
      }
      else
      {
        v1 = (v1 + 1);
      }
    }
    while (v1 < *((unsigned __int16 *)v0 + 244));
  }
}

void sub_1000FB2FC(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, a3, a4, a5, 0xCu);
}

void *sub_1000FB304()
{
  return sub_100054494();
}

uint64_t sub_1000FB320(uint64_t result, float a2)
{
  _QWORD *v2;
  float *v3;

  *v3 = a2;
  *v2 = result;
  return result;
}

uint64_t sub_1000FB32C()
{
  sub_1000FC0B8(&dword_10097F8E8);
  sub_1000FC0B8(&dword_10097F8EC);
  byte_10097F8F0 = 0;
  sub_1000FBF4C();
  return sub_10004A9EC((uint64_t)sub_1000FB380, 0, 3, (int *)&dword_10097F8E8);
}

uint64_t sub_1000FB380()
{
  uint64_t result;

  if ((byte_10097F8F0 & 8) == 0)
    return sub_1000FB3A0(5);
  byte_10097F8F0 |= 0x10u;
  return result;
}

void sub_1000FB3A0(int a1)
{
  uint64_t (*v1)();
  unsigned int *v2;
  char v3;

  switch(byte_10097F8F0 & 7)
  {
    case 0:
      switch(a1)
      {
        case 1:
LABEL_7:
          sub_1000FBF60();
          break;
        case 2:
          sub_1000FC09C(8);
          sub_1000FBF74();
          sub_10004A9EC((uint64_t)sub_1000FB504, 0, 3, (int *)&dword_10097F8EC);
          v3 = byte_10097F8F0 & 0xF8 | 1;
          goto LABEL_15;
        case 5:
          sub_1000FBF4C();
          v1 = sub_1000FB380;
          v2 = &dword_10097F8E8;
LABEL_18:
          sub_10004A9EC((uint64_t)v1, 0, 3, (int *)v2);
          break;
      }
      break;
    case 1:
      switch(a1)
      {
        case 1:
          goto LABEL_7;
        case 3:
          goto LABEL_11;
        case 4:
          sub_1000FC09C(9);
          v3 = byte_10097F8F0 & 0xF8 | 2;
          goto LABEL_15;
        case 6:
          sub_1000FBF74();
          v1 = sub_1000FB504;
          v2 = &dword_10097F8EC;
          goto LABEL_18;
        default:
          return;
      }
    case 2:
      if (a1 == 1)
      {
        sub_1000FC09C(10);
        v3 = byte_10097F8F0 & 0xF8 | 3;
LABEL_15:
        byte_10097F8F0 = v3;
      }
      else if (a1 == 3)
      {
LABEL_11:
        sub_1000FBF88();
      }
      break;
    case 3:
      return;
    default:
      sub_1000FC0F0("LE state machine, invalid state");
      break;
  }
}

uint64_t sub_1000FB504()
{
  uint64_t result;

  if ((byte_10097F8F0 & 8) == 0)
    return sub_1000FB3A0(6);
  byte_10097F8F0 |= 0x20u;
  return result;
}

BOOL sub_1000FB524()
{
  return (byte_10097F8F0 & 7) != 2;
}

BOOL sub_1000FB53C()
{
  return (byte_10097F8F0 & 7u) - 3 < 0xFFFFFFFE;
}

void sub_1000FB558()
{
  byte_10097F8F0 |= 8u;
}

void sub_1000FB56C()
{
  char v0;
  char v1;

  v0 = byte_10097F8F0;
  v1 = byte_10097F8F0 & 0xF7;
  byte_10097F8F0 &= ~8u;
  if ((v0 & 0x10) != 0)
  {
    byte_10097F8F0 = v0 & 0xE7;
    sub_1000FB3A0(5);
    v1 = byte_10097F8F0;
  }
  if ((v1 & 0x20) != 0)
  {
    byte_10097F8F0 = v1 & 0xDF;
    if ((v1 & 8) != 0)
      byte_10097F8F0 = v1 | 0x20;
    else
      sub_1000FB3A0(6);
  }
}

void sub_1000FB5D4()
{
  byte_10097F8F1 = 0;
}

uint64_t sub_1000FB5E0()
{
  byte_10097F8F1 = 0;
  return sub_1000FBBB4();
}

uint64_t sub_1000FB5EC()
{
  uint64_t result;

  if ((byte_10097F8F1 & 1) == 0)
  {
    byte_10097F8F1 = 1;
    return sub_10004AE90((uint64_t)sub_1000FB5E0, 0, 0);
  }
  return result;
}

void sub_1000FB618()
{
  byte_10097F8F4 = 0;
}

uint64_t sub_1000FB624(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  __int16 v5;
  unsigned __int8 *v6;
  unsigned __int16 v7;
  int v8;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  void *v16;
  char v18;
  __int16 v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  int v23;

  v2 = a2;
  v3 = a1;
  if (byte_10097F8F5 == 1)
    a1 = sub_10004AE90((uint64_t)sub_1000EF4D4, 0, 0);
  if (v2)
  {
    v4 = 0;
    v5 = 0;
    while (1)
    {
      v6 = (unsigned __int8 *)(v3 + v4);
      v7 = v2 - v5;
      v19 = 0;
      v18 = 0;
      v8 = byte_10097F8F4 & 7;
      if (v8 == 2)
      {
        a1 = sub_1000FB960((unsigned __int8 *)(v3 + v4), v7, &v19);
        v11 = a1;
        switch((int)a1)
        {
          case 0:
            goto LABEL_45;
          case 1:
            if (sub_1000EF564() && !sub_1000FB524())
              sub_1000FC09C(3);
            goto LABEL_43;
          case 2:
            sub_1000EF4A4();
            goto LABEL_43;
          case 3:
          case 4:
            goto LABEL_32;
          case 5:
            sub_1000EF4AC();
            goto LABEL_43;
          case 6:
            sub_1000EF4B4();
            goto LABEL_13;
          case 7:
            v15 = 1;
            goto LABEL_42;
          case 8:
            v15 = 2;
            goto LABEL_42;
          case 9:
            v15 = 3;
            goto LABEL_42;
          case 10:
            v15 = 4;
LABEL_42:
            sub_1000FB3A0(v15);
LABEL_43:
            byte_10097F8F4 &= 0xF8u;
            goto LABEL_44;
          default:
            sub_1000FC0F0("RX: unknown message id");
LABEL_32:
            byte_10097F8F4 &= 0xF8u;
            if (v11 && v11 != 6)
LABEL_44:
              sub_1000EF53C();
            break;
        }
        goto LABEL_45;
      }
      if (v8 != 1)
        break;
      a1 = sub_1000FC15C((char *)(v3 + v4), v7, &v18);
      v19 = a1;
      if (v18)
      {
LABEL_13:
        v10 = byte_10097F8F4 & 0xF8;
LABEL_14:
        byte_10097F8F4 = v10;
      }
LABEL_45:
      v5 = v4 + v19;
      v4 = (unsigned __int16)(v4 + v19);
      if (v4 >= v2)
        return 0xFFFFLL;
    }
    if ((byte_10097F8F4 & 7) != 0)
    {
      sub_1000FC0F0("RX: invalid state ");
      goto LABEL_45;
    }
    v9 = *v6;
    if ((v9 - 2) >= 3)
    {
      if (!*v6)
      {
        a1 = nullsub_90(a1, a2);
LABEL_30:
        v19 = 1;
        goto LABEL_45;
      }
      if (v9 != 64)
      {
        a1 = sub_1000EF564();
        if ((_DWORD)a1)
        {
          a1 = sub_1000FB524();
          if (!(_DWORD)a1)
          {
            byte_10097F8F4 = byte_10097F8F4 & 0xF8 | 1;
            v12 = sub_10005549C();
            if ((_DWORD)v12)
            {
              sub_100054530("xh4ds_uart_deliverbytes: garbage received when searching for new packet identifier: %x\n", *v6);
              v14 = sub_1000544A0(0x3Au);
              v12 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
              if ((_DWORD)v12)
              {
                v16 = sub_100054494();
                *(_DWORD *)buf = 136446466;
                v21 = v16;
                v22 = 1024;
                v23 = 0xFFFF;
                _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
              }
            }
            nullsub_90(v12, v13);
            sub_1000FC09C(3);
          }
        }
        goto LABEL_30;
      }
      sub_1000FB94C();
      v10 = byte_10097F8F4 & 0xF8 | 2;
    }
    else
    {
      a1 = sub_1000EF564();
      if (!(_DWORD)a1)
        goto LABEL_30;
      a1 = sub_1000FB53C();
      if ((_DWORD)a1)
        goto LABEL_30;
      v10 = byte_10097F8F4 & 0xF8 | 1;
    }
    goto LABEL_14;
  }
  return 0xFFFFLL;
}

uint64_t sub_1000FB940(uint64_t result)
{
  byte_10097F8F5 = result;
  return result;
}

void sub_1000FB94C()
{
  byte_10097F8F8 &= 0x80u;
}

uint64_t sub_1000FB960(unsigned __int8 *a1, unsigned int a2, _WORD *a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  char **v15;
  const char *v16;
  unsigned int v17;
  uint64_t result;

  if (!a2)
  {
LABEL_19:
    result = 0;
    *a3 = a2;
    return result;
  }
  v6 = 0;
  v7 = byte_10097F8F8;
  while (1)
  {
    v8 = (v7 >> 4) & 7;
    if (v8 == 2)
      break;
    if (v8 == 1)
    {
      v14 = "tick";
      v15 = &off_10091A530;
      while (*(unsigned __int8 *)v14 != *a1)
      {
        v16 = v15[2];
        v15 += 2;
        v14 = v16;
        if (!v16)
        {
          qword_10097F900 = 0;
          goto LABEL_20;
        }
      }
      qword_10097F900 = (uint64_t)v15;
      v17 = v7 & 0xFFFFFF80 | 0x21;
      byte_10097F8F8 = v17;
      v10 = v17;
    }
    else if (v8)
    {
      sub_1000FC0F0("Scanner, no match");
      v10 = byte_10097F8F8;
    }
    else
    {
      v9 = *a1;
      v10 = v7 & 0xFFFFFFF0 | ((_BYTE)v7 + 1) & 0xF;
      byte_10097F8F8 = v7 & 0xF0 | (v7 + 1) & 0xF;
      if (v9 != *((unsigned __int8 *)&qword_100738D82 + (v7 & 0xF)))
        goto LABEL_20;
      if ((((_BYTE)v7 + 1) & 0xFu) >= 8)
      {
        v10 = v7 & 0xFFFFFF80 | ((_BYTE)v7 + 1) & 0xF | 0x10;
        byte_10097F8F8 = v7 & 0x80 | (v7 + 1) & 0xF | 0x10;
      }
    }
LABEL_18:
    ++v6;
    ++a1;
    v7 = v10;
    if (v6 >= a2)
      goto LABEL_19;
  }
  v11 = *a1;
  v12 = qword_10097F900;
  v13 = *(_QWORD *)qword_10097F900;
  v10 = v7 & 0xFFFFFFF0 | ((_BYTE)v7 + 1) & 0xF;
  byte_10097F8F8 = v7 & 0xF0 | (v7 + 1) & 0xF;
  if (v11 == *(unsigned __int8 *)(v13 + (v7 & 0xF)))
  {
    if ((((_BYTE)v7 + 1) & 0xFu) >= 4)
    {
      *a3 = v6 + 1;
      byte_10097F8F8 = v7 & 0x80;
      return *(unsigned int *)(v12 + 8);
    }
    goto LABEL_18;
  }
LABEL_20:
  byte_10097F8F8 = v7 & 0x80;
  *a3 = v6;
  return 1;
}

void sub_1000FBB00()
{
  int v0;

  byte_10097F908 = 0;
  v0 = 3;
  do
  {
    qword_10097F918 = *(uint64_t *)((char *)&qword_10097F918 + 4);
    dword_10097F920 = 0;
    --v0;
  }
  while (v0);
  dword_10097F90C = 0;
  word_10097F910 = 0;
}

uint64_t sub_1000FBB3C(int a1)
{
  if (!(sub_1000FB524() | byte_10097F908)
    && sub_1000EF54C()
    && !(qword_10097F918 | dword_10097F90C))
  {
    return 1;
  }
  if (!sub_1000FB524())
  {
    sub_1000EF49C();
    if (!a1)
      return 0;
    goto LABEL_7;
  }
  if (a1)
LABEL_7:
    sub_1000FBBB4();
  return 0;
}

uint64_t sub_1000FBBB4()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;
  int v4;

  v0 = dword_10097F90C;
  if (!dword_10097F90C)
  {
    v0 = qword_10097F918;
    qword_10097F918 = *(uint64_t *)((char *)&qword_10097F918 + 4);
    dword_10097F920 = 0;
    dword_10097F90C = v0;
  }
  switch(v0)
  {
    case 0:
      v1 = byte_10097F908;
      if (!byte_10097F908)
        return sub_1000EF50C();
      v2 = sub_1000EF54C();
      if ((_DWORD)v2)
      {
        v3 = byte_10097F908;
        if (qword_10097F918 | dword_10097F90C)
          goto LABEL_30;
        if ((byte_10097F908 & 1) != 0)
        {
          sub_10016F698();
          sub_1000EF53C();
          v3 = byte_10097F908 & 0xFE;
        }
        else if ((byte_10097F908 & 2) != 0)
        {
          sub_10016F698();
          sub_1000EF53C();
          v3 = byte_10097F908 & 0xFD;
        }
        else if ((byte_10097F908 & 4) != 0)
        {
          sub_10016F698();
          sub_1000EF53C();
          v3 = byte_10097F908 & 0xFB;
        }
        else
        {
          if ((byte_10097F908 & 8) == 0)
            goto LABEL_30;
          sub_10016F698();
          sub_1000EF53C();
          v3 = byte_10097F908 & 0xF7;
        }
        byte_10097F908 = v3;
      }
      else
      {
        v3 = byte_10097F908;
      }
LABEL_30:
      if (v3 == v1)
      {
        v2 = sub_1000EF49C();
        v3 = byte_10097F908;
      }
      goto LABEL_21;
    case 1:
      if ((unsigned __int16)word_10097F910 <= 9u || word_10097F910 == 10)
      {
        sub_10016F698();
        sub_1000EF53C();
        ++word_10097F910;
        if (dword_10097F90C)
          goto LABEL_19;
      }
      else
      {
        sub_10016F698();
        sub_1000EF53C();
        word_10097F910 = 0;
      }
LABEL_15:
      v4 = qword_10097F918;
      qword_10097F918 = *(uint64_t *)((char *)&qword_10097F918 + 4);
      dword_10097F920 = 0;
      dword_10097F90C = v4;
      if (!v4)
        goto LABEL_20;
LABEL_19:
      v2 = ((uint64_t (*)(void))sub_1000FB5EC)();
LABEL_20:
      v3 = byte_10097F908;
LABEL_21:
      if (v3)
        sub_1000FB5EC(v2);
      return sub_1000EF50C();
    case 2:
    case 3:
      sub_10016F698();
      sub_1000EF53C();
      goto LABEL_15;
    default:
      goto LABEL_19;
  }
}

void sub_1000FBED4()
{
  sub_10016F698();
  sub_1000EF53C();
  sub_1000EF48C();
}

uint64_t sub_1000FBF4C()
{
  byte_10097F908 |= 1u;
  return sub_1000FB5EC();
}

uint64_t sub_1000FBF60()
{
  byte_10097F908 |= 2u;
  return sub_1000FB5EC();
}

uint64_t sub_1000FBF74()
{
  byte_10097F908 |= 4u;
  return sub_1000FB5EC();
}

uint64_t sub_1000FBF88()
{
  byte_10097F908 |= 8u;
  return sub_1000FB5EC();
}

uint64_t sub_1000FBF9C()
{
  return sub_1000FBFA4(1);
}

uint64_t sub_1000FBFA4(uint64_t result)
{
  uint64_t v2;
  uint64_t v3;

  if (dword_10097F90C != (_DWORD)result || (_DWORD)qword_10097F918 != 0)
  {
    v2 = 0;
    while (*(_DWORD *)((char *)&qword_10097F918 + v2) != (_DWORD)result)
    {
      v2 += 4;
      if ((_DWORD)v2 == 12)
        goto LABEL_13;
    }
    if ((_DWORD)v2 != 8)
    {
      do
      {
        *(_DWORD *)((char *)&qword_10097F918 + v2) = *(_DWORD *)((char *)&qword_10097F918 + v2 + 4);
        v2 += 4;
      }
      while (v2 != 8);
    }
    dword_10097F920 = 0;
LABEL_13:
    v3 = 0;
    while (*(_DWORD *)((char *)&qword_10097F918 + v3))
    {
      v3 += 4;
      if ((_DWORD)v3 == 12)
        return sub_1000FB5EC();
    }
    *(_DWORD *)((char *)&qword_10097F918 + v3) = result;
    return sub_1000FB5EC();
  }
  return result;
}

uint64_t sub_1000FC038()
{
  return sub_1000FBFA4(2);
}

uint64_t sub_1000FC040()
{
  return sub_1000FBFA4(3);
}

BOOL sub_1000FC048()
{
  return !byte_10097F908 && (qword_10097F918 | dword_10097F90C) == 0;
}

void sub_1000FC07C()
{
  sub_1000FB618();
  sub_1000FBB00();
  sub_1000EEFF0();
  sub_1000FB32C();
  sub_1000FB5D4();
}

void sub_1000FC09C(int a1)
{
  if (a1 == 10)
  {
    sub_1000FC07C();
  }
  else if (a1 == 5)
  {
    sub_1000FC7C4();
  }
}

void sub_1000FC0B8(unsigned int *a1)
{
  if (sub_10004A088(*a1))
    sub_100049F6C(*a1);
}

void sub_1000FC0F0(const char *a1)
{
  NSObject *v2;

  if (sub_10005549C())
  {
    sub_100054530("%s", a1);
    v2 = sub_1000544A0(0x3Au);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1006CEF28(v2);
  }
  sub_1000FC07C();
}

uint64_t sub_1000FC15C(char *__src, int a2, _BYTE *a3)
{
  int v4;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  char *v16;
  char v17;
  uint64_t v18;
  size_t v19;
  int v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  __int16 v24;
  NSObject *v25;
  uint64_t v26;
  unsigned __int16 v27;
  NSObject *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint8_t buf[4];
  void *v36;
  __int16 v37;
  int v38;

  if (a2)
  {
    v4 = a2;
    v6 = 0;
    v7 = qword_10097F928;
    while (1)
    {
      switch(*(_DWORD *)(v7 + 652))
      {
        case 0:
        case 4:
          *a3 = 1;
          LOWORD(v6) = v6 + v4;
          return (unsigned __int16)v6;
        case 1:
          v8 = *__src;
          if ((v8 - 1) >= 4u)
          {
            if (sub_10005549C())
            {
              sub_100054530("unknown packet type received %d", v8);
              v22 = sub_1000544A0(0x3Au);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
              {
                v31 = sub_100054494();
                *(_DWORD *)buf = 136446466;
                v36 = v31;
                v37 = 1024;
                v38 = 0xFFFF;
                _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
              }
            }
            v23 = qword_10097F928;
            *(_DWORD *)(qword_10097F928 + 652) = 4;
            *(_BYTE *)(v23 + 656) = 1;
            v9 = 5;
          }
          else
          {
            *(_WORD *)(v7 + 4) = 0x2000300040003uLL >> (16 * (v8 - 1));
            *(_BYTE *)(v7 + 650) = v8;
            *(_WORD *)(v7 + 6) = 0;
            *(_DWORD *)(v7 + 652) = 2;
            v9 = 10;
          }
          sub_1000FCD68(v9);
          v7 = qword_10097F928;
          if (*(_DWORD *)(qword_10097F928 + 652) == 2)
          {
            ++__src;
            --v4;
            ++v6;
          }
          goto LABEL_47;
        case 2:
          v12 = 0;
          v13 = *(unsigned __int16 *)(v7 + 4);
          if (v13 >= (unsigned __int16)(v4 - 1))
            v14 = (unsigned __int16)(v4 - 1);
          else
            v14 = *(unsigned __int16 *)(v7 + 4);
          v15 = v14 + 1;
          v16 = __src;
          break;
        case 3:
          if ((unsigned __int16)v4 >= *(unsigned __int16 *)(v7 + 4))
            v19 = *(unsigned __int16 *)(v7 + 4);
          else
            v19 = (unsigned __int16)v4;
          memmove((void *)(v7 + *(unsigned __int16 *)(v7 + 6) + 10), __src, v19);
          v7 = qword_10097F928;
          v20 = *(unsigned __int16 *)(qword_10097F928 + 4);
          *(_WORD *)(qword_10097F928 + 6) += v19;
          v6 += v19;
          v21 = v20 - v19;
          *(_WORD *)(v7 + 4) = v21;
          if (!v21)
            goto LABEL_51;
          v4 -= v19;
          __src += v19;
          goto LABEL_47;
        default:
          if (sub_10005549C())
          {
            sub_100054530("Invalid receive state %d", *(_DWORD *)(qword_10097F928 + 652));
            v10 = sub_1000544A0(0x3Au);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              v30 = sub_100054494();
              *(_DWORD *)buf = 136446466;
              v36 = v30;
              v37 = 1024;
              v38 = 0xFFFF;
              _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
            }
          }
          v11 = qword_10097F928;
          *(_DWORD *)(qword_10097F928 + 652) = 4;
          *(_BYTE *)(v11 + 656) = 1;
          sub_1000FCD68(5);
          sub_100253460();
          v7 = qword_10097F928;
          goto LABEL_47;
      }
      while ((_WORD)v13)
      {
        v17 = *v16++;
        v18 = *(unsigned __int16 *)(v7 + 6);
        *(_WORD *)(v7 + 6) = v18 + 1;
        *(_BYTE *)(v7 + v18 + 10) = v17;
        LOWORD(v13) = v13 - 1;
        *(_WORD *)(v7 + 4) = v13;
        if ((unsigned __int16)++v12 >= (unsigned __int16)v4)
        {
          if ((_WORD)v13)
          {
            v14 = v4;
            if ((unsigned __int16)v15 != (unsigned __int16)v4)
            {
              sub_100253460();
              v14 = v15;
            }
            goto LABEL_45;
          }
          ++v14;
          break;
        }
      }
      *(_DWORD *)(v7 + 652) = 3;
      switch(*(_BYTE *)(v7 + 650))
      {
        case 1:
        case 3:
          v24 = *(unsigned __int8 *)(v7 + 12);
          goto LABEL_40;
        case 2:
          v24 = *(_WORD *)(v7 + 12);
          goto LABEL_40;
        case 4:
          v24 = *(unsigned __int8 *)(v7 + 11);
LABEL_40:
          *(_WORD *)(v7 + 4) = v24;
          v27 = *(_WORD *)(v7 + 6) + v24;
          *(_WORD *)(v7 + 8) = v27;
          if (v27 >= 0x281u)
          {
            if (sub_10005549C())
            {
              sub_100054530("RxPacketHeader - bogus packet length (%d)", *(unsigned __int16 *)(qword_10097F928 + 8));
              v28 = sub_1000544A0(0x3Au);
              if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
              {
                v32 = sub_100054494();
                *(_DWORD *)buf = 136446466;
                v36 = v32;
                v37 = 1024;
                v38 = 0xFFFF;
                _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
              }
            }
            v29 = qword_10097F928;
            *(_DWORD *)(qword_10097F928 + 652) = 4;
            *(_BYTE *)(v29 + 656) = 1;
            sub_1000FCD68(5);
          }
          break;
        default:
          if (sub_10005549C())
          {
            sub_100054530("Invalid packet type %d", *(unsigned __int8 *)(qword_10097F928 + 650));
            v25 = sub_1000544A0(0x3Au);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              v33 = sub_100054494();
              *(_DWORD *)buf = 136446466;
              v36 = v33;
              v37 = 1024;
              v38 = 0xFFFF;
              _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
            }
          }
          v26 = qword_10097F928;
          *(_DWORD *)(qword_10097F928 + 652) = 4;
          *(_BYTE *)(v26 + 656) = 1;
          sub_1000FCD68(5);
          sub_100253460();
          v14 = 0;
          break;
      }
LABEL_45:
      v6 += v14;
      v7 = qword_10097F928;
      if (!*(_WORD *)(qword_10097F928 + 4))
        break;
      __src += (unsigned __int16)v14;
      v4 -= v14;
LABEL_47:
      if (!(_WORD)v4)
        return (unsigned __int16)v6;
    }
LABEL_51:
    *a3 = 1;
    if (*(_BYTE *)(v7 + 656))
      sub_1000FC698();
    else
      sub_1000FC748();
  }
  else
  {
    LOWORD(v6) = 0;
  }
  return (unsigned __int16)v6;
}

void sub_1000FC698()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char *v3;
  int v4;
  int v5;

  v0 = qword_10097F928;
  if (*(_BYTE *)(qword_10097F928 + 650) != 4 || *(_WORD *)(qword_10097F928 + 8) != 6)
    goto LABEL_8;
  v1 = 0;
  v2 = 1;
  v3 = &byte_100738DCD;
  do
  {
    v4 = (*(v3 - 1) & *(_BYTE *)(qword_10097F928 + 10 + v1));
    v5 = *v3;
    v3 += 2;
    if (v4 != v5)
      v2 = 0;
    ++v1;
  }
  while (v1 != 6);
  if ((v2 & 1) != 0)
  {
    *(_BYTE *)(qword_10097F928 + 656) = 0;
    *(_DWORD *)(v0 + 652) = 1;
    *(_WORD *)(v0 + 4) = 5;
    sub_1000FCD68(0x7FFF);
    sub_100192340();
  }
  else
  {
LABEL_8:
    sub_1000FCD68(5);
    *(_DWORD *)(qword_10097F928 + 652) = 4;
  }
}

uint64_t sub_1000FC748()
{
  uint64_t v0;
  _QWORD v2[2];

  if (*(unsigned __int16 *)(qword_10097F928 + 8) >= 0x281u)
    sub_100253460();
  v2[1] = 0;
  v2[0] = mach_continuous_time();
  sub_100047AB0(*(unsigned __int8 *)(qword_10097F928 + 650), (unsigned __int8 *)(qword_10097F928 + 10), *(unsigned __int16 *)(qword_10097F928 + 8), (uint64_t)v2);
  v0 = qword_10097F928;
  *(_DWORD *)(qword_10097F928 + 652) = 1;
  *(_WORD *)(v0 + 4) = 5;
  return sub_1000FCD68(0x7FFF);
}

uint64_t sub_1000FC7C4()
{
  uint64_t v0;
  unsigned int v1;
  char v2;
  const void *v3;
  size_t v4;

  v0 = 0;
  LOBYTE(v1) = 1;
  do
  {
    v2 = v1;
    v1 = *((unsigned __int16 *)&dword_10097F95C + v0);
    if (*((_WORD *)&dword_10097F95C + v0))
    {
      byte_10097F958 = *((_BYTE *)&word_10097F960 + v0);
      v3 = (const void *)qword_10097F968[v0];
      qword_10097F938 = (uint64_t)v3;
      qword_10097F940 = (uint64_t)v3;
      word_10097F950 = v1;
      *((_WORD *)&dword_10097F95C + v0) = 0;
      goto LABEL_7;
    }
    v0 = &_mh_execute_header.magic + 1;
  }
  while ((v2 & 1) != 0);
  v1 = (unsigned __int16)word_10097F950;
  if (!word_10097F950)
    return 0;
  v3 = (const void *)qword_10097F940;
LABEL_7:
  if (v1 >= (unsigned __int16)word_10097F948)
    v4 = (unsigned __int16)word_10097F948;
  else
    v4 = v1;
  memmove((void *)qword_10097F930, v3, v4);
  qword_10097F940 += v4;
  word_10097F950 -= v4;
  byte_10097F954 = 1;
  sub_10016F698();
  return 0;
}

uint64_t sub_1000FC8B0(int a1, __int16 a2, int a3)
{
  uint64_t result;
  unsigned __int16 v7;
  uint64_t v8;
  char i;
  char v10;
  NSObject *v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int16 v16;
  char *v17;
  NSObject *v18;

  if (*(_BYTE *)(qword_10097F928 + 656))
    return 129;
  if (a1 == 2)
    v7 = 5;
  else
    v7 = 4;
  if (sub_1000FBB3C(1) && byte_10097F954 != 1)
  {
    if (!qword_10097F930)
      sub_100253460();
    v14 = (unsigned __int16)word_10097F948;
    if (!word_10097F948)
    {
      sub_100253460();
      v14 = (unsigned __int16)word_10097F948;
    }
    v15 = qword_10097F930;
    result = 105;
    if (qword_10097F930 && v14)
    {
      if (a3 + v7 <= v14)
      {
        *(_BYTE *)qword_10097F930 = a1;
        *(_WORD *)(v15 + 1) = a2;
        *(_WORD *)(v15 + 3) = a3;
        if (a3)
          sub_100053868((char *)(v15 + v7));
        qword_10097F940 = 0;
        word_10097F950 = 0;
      }
      else
      {
        v16 = v7 - 1;
        word_10097F950 = v16 + a3;
        *(_BYTE *)qword_10097F930 = a1;
        v17 = (char *)sub_100052DC0((unsigned __int16)(v16 + a3));
        qword_10097F938 = (uint64_t)v17;
        if (!v17)
        {
          if (sub_10005549C())
          {
            sub_100054530("OI_Malloc failed, unable to segment packet");
            v18 = sub_1000544A0(0x3Au);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
          return 106;
        }
        qword_10097F940 = (uint64_t)v17;
        *(_WORD *)v17 = a2;
        *((_WORD *)v17 + 1) = a3;
        if (a3)
          sub_100053868(&v17[v16]);
      }
      byte_10097F958 = a1;
      byte_10097F954 = 1;
      sub_10016F698();
      sub_1000EF53C();
      return 0;
    }
  }
  else
  {
    v8 = 0;
    for (i = 1; ; i = 0)
    {
      v10 = i;
      if (!*((_WORD *)&dword_10097F95C + v8))
        break;
      v8 = &_mh_execute_header.magic + 1;
      if ((v10 & 1) == 0)
      {
        if (sub_10005549C())
        {
          sub_100054530("OI_HCIIfc_Send_Req, backlog queue is full, busy fail");
          v11 = sub_1000544A0(0x3Au);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        sub_100253460();
        return 118;
      }
    }
    v12 = (char *)sub_100052DC0(a3 + v7);
    v13 = (uint64_t)v12;
    *v12 = a1;
    *(_WORD *)(v12 + 1) = a2;
    v12[3] = a3;
    if (a1 == 2)
      v12[4] = BYTE1(a3);
    if (a3)
      sub_100053868(&v12[v7]);
    result = 0;
    *((_BYTE *)&word_10097F960 + v8) = a1;
    *((_WORD *)&dword_10097F95C + v8) = a3 + v7;
    qword_10097F968[v8] = v13;
  }
  return result;
}

void sub_1000FCB44(uint64_t a1, __int16 a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  int v11;
  char v12;
  size_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;

  qword_10097F930 = a1;
  word_10097F948 = a2;
  if (a3 == 1216)
    return;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  if ((byte_10097F954 & 1) != 0)
  {
    if (!a3)
    {
      v3 = (unsigned __int16)word_10097F950;
      if (word_10097F950)
      {
LABEL_26:
        if (v3 >= (unsigned __int16)word_10097F948)
          v13 = (unsigned __int16)word_10097F948;
        else
          v13 = v3;
        v14 = qword_10097F940;
        memmove((void *)qword_10097F930, (const void *)qword_10097F940, v13);
        qword_10097F940 = v14 + v13;
        word_10097F950 -= v13;
        byte_10097F954 = 1;
        sub_10016F698();
        return;
      }
    }
    byte_10097F954 = 0;
    LODWORD(v17) = a3;
    BYTE4(v17) = byte_10097F958;
    v16 = &v17;
    LOWORD(v15) = 8;
    v4 = sub_10004AE90((uint64_t)sub_1000FD0C8, &v15, 0);
    if ((_DWORD)v4)
    {
      v5 = v4;
      if (sub_10005549C())
      {
        sub_100054530("OI_Dispatch_RegisterFunc failed %!", v5);
        v6 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
    if (qword_10097F938)
    {
      sub_100053298((void *)qword_10097F938);
      qword_10097F938 = 0;
      word_10097F950 = 0;
    }
    v7 = 0;
    LOBYTE(v3) = 1;
    while (1)
    {
      v8 = v3;
      v3 = *((unsigned __int16 *)&dword_10097F95C + v7);
      if (*((_WORD *)&dword_10097F95C + v7))
        break;
      v7 = &_mh_execute_header.magic + 1;
      if ((v8 & 1) == 0)
        goto LABEL_23;
    }
LABEL_25:
    byte_10097F958 = *((_BYTE *)&word_10097F960 + v7);
    qword_10097F938 = qword_10097F968[v7];
    qword_10097F940 = qword_10097F938;
    word_10097F950 = v3;
    *((_WORD *)&dword_10097F95C + v7) = 0;
    goto LABEL_26;
  }
  v9 = 0;
  v10 = 1;
  do
  {
    v11 = *((unsigned __int16 *)&dword_10097F95C + v9);
    if ((v10 & 1) == 0)
      break;
    v10 = 0;
    v9 = 1;
  }
  while (!v11);
  if (v11 && sub_1000FBB3C(0))
  {
    v7 = 0;
    LOBYTE(v3) = 1;
    while (1)
    {
      v12 = v3;
      v3 = *((unsigned __int16 *)&dword_10097F95C + v7);
      if (*((_WORD *)&dword_10097F95C + v7))
        goto LABEL_25;
      v7 = 1;
      if ((v12 & 1) == 0)
      {
LABEL_23:
        v3 = (unsigned __int16)word_10097F950;
        if (word_10097F950)
          goto LABEL_26;
        return;
      }
    }
  }
}

uint64_t sub_1000FCD68(int a1)
{
  if (sub_10004A088(*(_DWORD *)qword_10097F928))
    return sub_1002537E8(*(_DWORD *)qword_10097F928, a1);
  else
    return sub_10004A9EC((uint64_t)sub_1000FCDC0, 0, a1, (int *)qword_10097F928);
}

void sub_1000FCDC0()
{
  uint64_t v0;
  unsigned int v1;
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;

  v0 = qword_10097F928;
  v1 = *(_DWORD *)(qword_10097F928 + 652);
  if (v1 < 2)
  {
    if (*(_BYTE *)(qword_10097F928 + 656))
    {
      if (sub_10005549C())
      {
        sub_100054530("timed out waiting for reset response");
        v4 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      goto LABEL_14;
    }
LABEL_20:
    sub_1000FCD68(0x7FFFLL);
    return;
  }
  if (v1 - 2 < 2)
  {
    if (sub_10005549C())
    {
      sub_100054530("Timed out while receiving a packet");
      v2 = sub_1000544A0(0x3Au);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    v3 = qword_10097F928;
    *(_DWORD *)(qword_10097F928 + 652) = 4;
    *(_BYTE *)(v3 + 656) = 1;
    sub_1000FCD68(5);
    return;
  }
  if (v1 == 4)
  {
    if (*(_BYTE *)(qword_10097F928 + 656))
    {
LABEL_14:
      sub_1000FCF5C();
      return;
    }
    *(_DWORD *)(qword_10097F928 + 652) = 1;
    *(_WORD *)(v0 + 4) = 5;
    goto LABEL_20;
  }
  if (sub_10005549C())
  {
    sub_100054530("Invalid receive state %d", *(_DWORD *)(qword_10097F928 + 652));
    v5 = sub_1000544A0(0x3Au);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  v6 = qword_10097F928;
  *(_DWORD *)(qword_10097F928 + 652) = 4;
  *(_BYTE *)(v6 + 656) = 1;
  sub_1000FCD68(5);
  sub_100253460();
}

uint64_t sub_1000FCF5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;

  *(_BYTE *)(qword_10097F928 + 656) = 0;
  v0 = sub_100053ACC();
  v1 = qword_10097F928;
  *(_BYTE *)(qword_10097F928 + 656) = 1;
  if ((_DWORD)v0)
  {
    v2 = v0;
    if (sub_10005549C())
    {
      sub_100054530("startResynchronize, OI_HCIIfc_Send failed %!", v2);
      v3 = sub_1000544A0(0x3Au);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return sub_1000FCD68(5);
  }
  else
  {
    *(_DWORD *)(v1 + 652) = 1;
    *(_WORD *)(v1 + 4) = 5;
    return sub_1000FCD68(20);
  }
}

uint64_t sub_1000FD024()
{
  uint64_t result;
  uint64_t v1;

  qword_10097F968[0] = 0;
  unk_10097F970 = 0;
  word_10097F960 = 0;
  dword_10097F95C = 0;
  result = sub_10016F630();
  if (!(_DWORD)result)
  {
    qword_10097F928 = (uint64_t)sub_100114588(0x294uLL);
    sub_1000FC07C();
    v1 = qword_10097F928;
    *(_DWORD *)(qword_10097F928 + 652) = 1;
    *(_WORD *)(v1 + 4) = 5;
    sub_1000FCD68(0x7FFF);
    return 109;
  }
  return result;
}

uint64_t sub_1000FD098()
{
  if (sub_1000FBB3C(1))
    return 0;
  else
    return 109;
}

uint64_t sub_1000FD0C0()
{
  return 640;
}

void sub_1000FD0C8(uint64_t a1)
{
  if (!*(_BYTE *)(qword_10097F928 + 656))
    sub_10019CB24(*(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 4), **(unsigned int **)(a1 + 8));
}

uint64_t sub_1000FD0EC()
{
  if (sub_1000EF580())
    return 0;
  sub_1000FBED4();
  return 118;
}

uint64_t sub_1000FD114()
{
  uint64_t result;

  result = dword_10097F978;
  if (dword_10097F978)
    return sub_1002537E8(dword_10097F978, (unsigned __int16)word_1009941AC);
  return result;
}

uint64_t sub_1000FD130()
{
  dword_1009941A4 = 4;
  return sub_1000FD144(0);
}

uint64_t sub_1000FD144(int a1)
{
  uint64_t result;
  uint64_t v2;

  result = sub_10004A9EC((uint64_t)sub_1000FD59C, 0, a1, &dword_1009941B0);
  if ((_DWORD)result)
  {
    v2 = sub_100112D60(result);
    return sub_1000FD178(v2);
  }
  return result;
}

void sub_1000FD178(_BYTE *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  __int16 *v6;
  size_t v7;
  NSObject *v8;
  int v9;
  char v10;
  unsigned int v11;
  NSObject *v12;

  if (a2 >= 2)
  {
    switch(*a1)
    {
      case 1:
        if (a2 == 2 && a1[1] == 126)
        {
          v2 = 0;
          v3 = 0;
          v4 = 1;
          break;
        }
        return;
      case 2:
        if (a2 == 2 && a1[1] == 125)
        {
          v2 = 0;
          v3 = 0;
          v4 = 2;
          break;
        }
        return;
      case 3:
        v5 = a1[1];
        if (v5 != 252)
          goto LABEL_13;
        v2 = 0;
        v3 = 0;
        v4 = 3;
        break;
      case 4:
        v5 = a1[1];
LABEL_13:
        if (v5 != 123)
          goto LABEL_15;
        v2 = 0;
        v3 = 0;
        v4 = 4;
        break;
      case 5:
LABEL_15:
        if (a2 != 2 || a1[1] != 250)
          return;
        v3 = 0;
        v4 = 5;
        v2 = 1;
        break;
      case 6:
        if (a2 != 2 || a1[1] != 249)
          return;
        v2 = 0;
        v4 = 6;
        v3 = 1;
        break;
      case 7:
        if (a2 != 2 || a1[1] != 120)
          return;
        v2 = 0;
        v3 = 0;
        v4 = 7;
        break;
      default:
        return;
    }
    switch(dword_1009941A4)
    {
      case 0:
        if (v4 != 2)
          goto LABEL_29;
        dword_1009941A4 = 1;
        v6 = &word_10097F97C;
        word_10097F97C = -1021;
        byte_10097F97E = byte_1009941AA | (8 * word_1009941A0) | (16 * HIBYTE(word_1009941A0));
        v7 = 3;
        goto LABEL_43;
      case 1:
        if (v4 == 4)
        {
          dword_1009941A4 = 2;
          v10 = a1[2];
          if ((_BYTE)word_1009941A0 && (a1[2] & 8) == 0)
            LOBYTE(word_1009941A0) = 0;
          if ((v10 & 0x10) == 0)
            HIBYTE(word_1009941A0) = 0;
          v11 = v10 & 7;
          byte_1009941AB = v11;
          if (v11 <= byte_1009941AA)
          {
            if (byte_10097F97F == 1)
            {
              byte_10097F97F = 0;
              sub_100192340();
            }
          }
          else
          {
            if (sub_10005549C())
            {
              sub_100054530("Configuration failed - device is not configuring link correctly");
              v12 = sub_1000544A0(0x3Au);
              if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
                sub_1006CE7A4();
            }
            dword_1009941A4 = 0;
LABEL_54:
            sub_1000FD144(1);
          }
        }
        else
        {
          if (v4 == 3)
          {
LABEL_41:
            v6 = (__int16 *)&unk_100738DED;
          }
          else
          {
LABEL_29:
            if (v4 != 1)
              return;
            v6 = (__int16 *)&unk_100738DEB;
          }
LABEL_42:
          v7 = 2;
LABEL_43:
          sub_1000FE954(v6, v7, 15);
        }
        break;
      case 2:
        switch(v4)
        {
          case 1:
            if (sub_10005549C())
            {
              sub_100054530("Transport resynching");
              v8 = sub_1000544A0(0x3Au);
              if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
                sub_1006CE7A4();
            }
            dword_1009941A4 = 0;
            sub_1000FE0F8();
            sub_1000FD724();
            byte_10097F97F = 1;
            goto LABEL_54;
          case 3:
            goto LABEL_41;
          case 5:
            goto LABEL_38;
          case 7:
            v9 = 3;
            goto LABEL_56;
          default:
            return;
        }
        return;
      case 3:
        if (!v2)
          return;
        dword_1009941A4 = 2;
LABEL_38:
        v6 = (__int16 *)&unk_100738DEF;
        goto LABEL_42;
      case 4:
        if (v3)
        {
          v9 = 2;
LABEL_56:
          dword_1009941A4 = v9;
        }
        return;
      default:
        return;
    }
  }
}

uint64_t sub_1000FD4C8()
{
  uint64_t result;

  dword_10097F978 = 0;
  dword_1009941A4 = 0;
  byte_10097F97F = 0;
  result = sub_10016F630();
  if (!(_DWORD)result)
  {
    byte_1009941AA = 4;
    word_1009941A8 = 1024;
    word_1009941A0 = 256;
    result = sub_1000FDE74();
    if (!(_DWORD)result)
    {
      result = sub_1000FD6B4();
      if (!(_DWORD)result)
      {
        dword_1009941A4 = 0;
        sub_1000FD144(1);
        return 109;
      }
    }
  }
  return result;
}

uint64_t sub_1000FD548()
{
  if (dword_1009941A4 == 2)
    return 0;
  else
    return 109;
}

uint64_t sub_1000FD560(int a1, __int16 a2, __int16 a3)
{
  sub_1000FE1D8(a1, a2, a3);
  return 0;
}

uint64_t sub_1000FD578()
{
  return (unsigned __int16)word_1009941A8;
}

uint64_t sub_1000FD584(int a1, __int16 a2, unsigned int a3, const void *a4)
{
  sub_1000FE69C(a1, a2, a3, a4);
  return 0;
}

void sub_1000FD59C()
{
  uint64_t v0;
  NSObject *v1;

  if (dword_1009941A4 == dword_10097F984)
  {
    if (dword_10097F980 >= 26)
    {
      if (sub_10005549C())
      {
        sub_100054530("H5 transport error sending link packet: retry limit exceeded, giving up");
        v1 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      sub_100112D60(112);
      sub_1000FD6AC();
      return;
    }
    ++dword_10097F980;
    if (!dword_1009941A4)
    {
LABEL_4:
      v0 = 2;
      sub_1000FE954(&unk_100738DF3, 2uLL, 15);
LABEL_10:
      sub_1000FD144(v0);
      return;
    }
  }
  else
  {
    dword_10097F980 = 0;
    dword_10097F984 = dword_1009941A4;
    if (!dword_1009941A4)
      goto LABEL_4;
  }
  if (dword_1009941A4 == 1)
  {
    sub_1000FE954(&word_10097F97C, 3uLL, 15);
    v0 = 2;
    goto LABEL_10;
  }
  if (dword_1009941A4 == 4)
  {
    sub_1000FE954(&unk_100738DF1, 2uLL, 15);
    v0 = 1;
    goto LABEL_10;
  }
}

uint64_t sub_1000FD6AC()
{
  return 0;
}

uint64_t sub_1000FD6B4()
{
  void *v0;
  uint64_t result;

  if (!word_1009941A8)
    return 103;
  qword_10097F988 = 0;
  byte_10097F990 = 0;
  word_10097F992 = word_1009941A8 + 6;
  qword_10097F988 = (uint64_t)sub_100114588(0x10uLL);
  v0 = sub_100114588((unsigned __int16)word_10097F992);
  result = 0;
  *(_QWORD *)qword_10097F988 = v0;
  return result;
}

uint64_t sub_1000FD724()
{
  byte_10097F990 = 0;
  *(_DWORD *)(qword_10097F988 + 12) = 0;
  return 0;
}

uint64_t sub_1000FD740(unsigned __int8 *a1, uint64_t a2)
{
  char **v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  NSObject *v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  char v16;
  int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  char v25;
  void *v26;
  unsigned __int16 v28;
  __int16 v29;
  _BYTE buf[18];

  v2 = (char **)qword_10097F988;
  if ((_DWORD)a2)
  {
    v3 = a1;
    while (1)
    {
      v4 = (a2 - 1);
      v6 = *v3++;
      v5 = v6;
      switch(*((_DWORD *)v2 + 3))
      {
        case 0:
          if (v5 == 192)
            v7 = 1;
          else
            v7 = 2;
          *((_DWORD *)v2 + 3) = v7;
          *((_WORD *)v2 + 4) = 0;
          goto LABEL_65;
        case 1:
          if (v5 != 219)
          {
            if (v5 != 192)
            {
              v13 = *((unsigned __int16 *)v2 + 4);
              if ((_DWORD)v13 == (unsigned __int16)word_10097F992)
                goto LABEL_22;
              v20 = *v2;
              *((_WORD *)v2 + 4) = v13 + 1;
              v20[v13] = v5;
              goto LABEL_65;
            }
            v29 = 0;
            v8 = *((unsigned __int16 *)v2 + 4);
            if (v8 <= 3)
            {
              if (sub_10005549C())
              {
                sub_100054530("Short packet %@", *v2, *((unsigned __int16 *)v2 + 4));
                v9 = sub_1000544A0(0x3Au);
                if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
                  goto LABEL_39;
              }
LABEL_64:
              v2 = (char **)qword_10097F988;
              *(_DWORD *)(qword_10097F988 + 12) = 0;
              goto LABEL_65;
            }
            v14 = (unsigned __int8 *)*v2;
            v15 = **v2;
            v16 = (*v2)[1];
            v17 = (*v2)[2];
            if ((*v2)[3] == ~(v16 + **v2 + v17))
            {
              if ((v15 & 0x40) != 0)
              {
                LOWORD(v8) = v8 - 2;
                *((_WORD *)v2 + 4) = v8;
                v18 = &v14[(unsigned __int16)v8];
                v19 = v14[1];
                v17 = v14[2];
              }
              else
              {
                v18 = 0;
                v19 = (*v2)[1];
              }
              v21 = (v19 >> 4) | (16 * v17);
              if ((unsigned __int16)v8 - 4 == (_DWORD)v21)
              {
                v22 = v16 & 0xF;
                if ((_DWORD)v22 == 15)
                {
                  sub_1000FD178(v14 + 4, (v19 >> 4) | (16 * v17));
                  goto LABEL_64;
                }
                if (dword_1009941A4 != 2)
                  goto LABEL_64;
                sub_1000FD114();
                if ((v15 & 0x40) == 0)
                {
LABEL_42:
                  sub_1000FEC68((v15 >> 3) & 7);
                  switch((int)v22)
                  {
                    case 0:
                      goto LABEL_64;
                    case 1:
                    case 2:
                    case 4:
                      if ((v15 & 0x80000000) == 0)
                      {
                        if (sub_10005549C())
                        {
                          sub_100054530("Data packets expected to have reliable flag set");
                          v24 = sub_1000544A0(0x3Au);
                          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
                          {
                            v26 = sub_100054494();
                            *(_DWORD *)buf = 136446466;
                            *(_QWORD *)&buf[4] = v26;
                            *(_WORD *)&buf[12] = 1024;
                            *(_DWORD *)&buf[14] = 0xFFFF;
                            _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
                          }
                        }
                      }
                      v25 = v15 & 7;
                      if ((v15 & 7) == byte_10097F990)
                      {
                        byte_10097F990 = (v15 + 1) & 7;
                        sub_1000FED74(v25);
                        goto LABEL_63;
                      }
                      if (((~byte_10097F990 + (_BYTE)v15) & 7u) >= byte_1009941AB)
                        sub_1000FED74(v25);
                      break;
                    case 3:
                      if ((v15 & 0x80000000) != 0)
                      {
                        if (sub_10005549C())
                        {
                          sub_100054530("Reliable flag not expected on SCO data packet");
                          v9 = sub_1000544A0(0x3Au);
                          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
                            goto LABEL_39;
                        }
                      }
                      else
                      {
LABEL_63:
                        *(_QWORD *)&buf[8] = 0;
                        *(_QWORD *)buf = mach_continuous_time();
                        buf[8] = 0;
                        sub_100047AB0(v22, (unsigned __int8 *)*v2 + 4, v21, (uint64_t)buf);
                      }
                      break;
                    default:
                      if (sub_10005549C())
                      {
                        sub_100054530("Unknown packet type");
                        v9 = sub_1000544A0(0x3Au);
                        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
                          goto LABEL_39;
                      }
                      break;
                  }
                  goto LABEL_64;
                }
                if (HIBYTE(word_1009941A0))
                {
                  v28 = -1;
                  sub_100252F1C(*v2, *((unsigned __int16 *)v2 + 4), &v28);
                  sub_100252F58(v28, &v29);
                  if (__PAIR64__(v18[1], *v18) == __PAIR64__(HIBYTE(v29), v29))
                    goto LABEL_42;
                  if (!sub_10005549C())
                    goto LABEL_64;
                  sub_100054530("Data integrity error - discarding packet\n%@", *v2, *((unsigned __int16 *)v2 + 4));
                  v9 = sub_1000544A0(0x3Au);
                  if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
                    goto LABEL_64;
                }
                else
                {
                  if (!sub_10005549C())
                    goto LABEL_64;
                  sub_100054530("Data integrity bit not allowed");
                  v9 = sub_1000544A0(0x3Au);
                  if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
                    goto LABEL_64;
                }
              }
              else
              {
                if (!sub_10005549C())
                  goto LABEL_64;
                sub_100054530("Wrong packet length header says %d read %d bytes", v21, *((unsigned __int16 *)v2 + 4) - 4);
                v9 = sub_1000544A0(0x3Au);
                if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
                  goto LABEL_64;
              }
            }
            else
            {
              if (!sub_10005549C())
                goto LABEL_64;
              sub_100054530("Header checksum error");
              v9 = sub_1000544A0(0x3Au);
              if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
                goto LABEL_64;
            }
LABEL_39:
            v23 = sub_100054494();
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = v23;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 0xFFFF;
            _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
            goto LABEL_64;
          }
          *((_DWORD *)v2 + 3) = 3;
          goto LABEL_65;
        case 2:
          if (v5 == 192)
LABEL_22:
            *((_DWORD *)v2 + 3) = 0;
          goto LABEL_65;
        case 3:
          *((_DWORD *)v2 + 3) = 1;
          if (v5 == 221)
          {
            v10 = *v2;
            v11 = *((unsigned __int16 *)v2 + 4);
            *((_WORD *)v2 + 4) = v11 + 1;
            v12 = -37;
          }
          else
          {
            if (v5 != 220)
            {
              *((_DWORD *)v2 + 3) = 0;
              v3 = a1;
              v4 = a2;
              goto LABEL_65;
            }
            v10 = *v2;
            v11 = *((unsigned __int16 *)v2 + 4);
            *((_WORD *)v2 + 4) = v11 + 1;
            v12 = -64;
          }
          v10[v11] = v12;
LABEL_65:
          a2 = v4;
          a1 = v3;
          if (!(_WORD)v4)
          {
            v2 = (char **)qword_10097F988;
            return (unsigned __int16)word_10097F992 - *((unsigned __int16 *)v2 + 4);
          }
          break;
        default:
          sub_100253460();
          v2 = (char **)qword_10097F988;
          goto LABEL_65;
      }
    }
  }
  return (unsigned __int16)word_10097F992 - *((unsigned __int16 *)v2 + 4);
}

uint64_t sub_1000FDE74()
{
  _QWORD *v0;
  unsigned int v1;
  void *v2;
  _QWORD *v3;
  uint64_t result;

  if (!word_1009941A8)
    return 103;
  qword_10097F998 = 0;
  qword_10097F9A0 = 0;
  qword_10097F9A8 = 0;
  qword_10097F9B0 = 0;
  qword_10097F9B8 = 0;
  qword_10097F9C0 = 0;
  word_10097F9C8 = 0;
  byte_10097F9CA = 0;
  dword_1009941B4 = 0;
  dword_10097F9CC = 0;
  byte_10097F9D0 = 0;
  dword_10097F9D4 = 0;
  byte_10097F9D8 = 0;
  byte_10097F9D9 = 0;
  if (byte_1009941AA)
  {
    v0 = 0;
    v1 = 0;
    do
    {
      qword_10097F9A8 = (uint64_t)sub_100114588(0x18uLL);
      v2 = sub_100114588((unsigned __int16)word_1009941A8);
      v3 = (_QWORD *)qword_10097F9A8;
      *(_QWORD *)(qword_10097F9A8 + 16) = v2;
      *v3 = v0;
      ++v1;
      v0 = v3;
    }
    while (v1 < byte_1009941AA);
  }
  qword_10097F9B0 = (uint64_t)sub_100114588(0x18uLL);
  *(_QWORD *)(qword_10097F9B0 + 16) = sub_100114588(0x102uLL);
  qword_10097F9B8 = (uint64_t)sub_100114588(0x18uLL);
  *(_QWORD *)(qword_10097F9B8 + 16) = sub_100114588(0x102uLL);
  result = sub_10004A9EC((uint64_t)sub_1000FDFE8, 0, 0x7FFF, &dword_10097F9CC);
  if (!(_DWORD)result)
    return sub_10004A9EC((uint64_t)sub_1000FE0A4, 0, 0x7FFF, &dword_10097F9D4);
  return result;
}

void sub_1000FDFE8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;

  byte_10097F9D0 = 0;
  v0 = sub_10004A9EC((uint64_t)sub_1000FDFE8, 0, 0x7FFF, &dword_10097F9CC);
  if ((_DWORD)v0)
  {
    v5 = sub_100112D60(v0);
    sub_1000FE0A4(v5);
  }
  else
  {
    v1 = (_QWORD *)qword_10097F9A0;
    if (dword_1009941A4 == 2 && qword_10097F9A0 != 0)
    {
      do
      {
        v3 = v1;
        v1 = (_QWORD *)*v1;
      }
      while (v1);
      if (qword_10097F998 == qword_10097F9B8)
      {
        *v3 = *(_QWORD *)qword_10097F998;
        v4 = (uint64_t *)qword_10097F998;
      }
      else
      {
        *v3 = qword_10097F998;
        v3 = (_QWORD *)qword_10097F9A0;
        v4 = &qword_10097F998;
      }
      *v4 = (uint64_t)v3;
      qword_10097F9A0 = 0;
      if (!dword_1009941B4)
        sub_1000FE4BC();
    }
  }
}

uint64_t sub_1000FE0A4()
{
  uint64_t result;
  uint64_t v1;

  if (byte_10097F9D8)
  {
    byte_10097F9D8 = 0;
    sub_1000FE954(0, 0, 0);
  }
  result = sub_10004A9EC((uint64_t)sub_1000FE0A4, 0, 0x7FFF, &dword_10097F9D4);
  if ((_DWORD)result)
  {
    v1 = sub_100112D60(result);
    return sub_1000FE0F8(v1);
  }
  return result;
}

uint64_t sub_1000FE0F8()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = sub_1002537E8(dword_10097F9CC, 0x7FFF);
  if (!(_DWORD)result)
  {
    result = sub_1002537E8(dword_10097F9D4, 0x7FFF);
    if (!(_DWORD)result)
    {
      v1 = qword_10097F9A8;
      v2 = qword_10097F9A0;
      if (qword_10097F9A0)
      {
        do
        {
          v3 = *(_QWORD *)v2;
          qword_10097F9A0 = *(_QWORD *)v2;
          if (*(_BYTE *)(v2 + 11) == 2)
          {
            *(_QWORD *)v2 = v1;
            qword_10097F9A8 = v2;
            v3 = qword_10097F9A0;
            v1 = v2;
          }
          v2 = v3;
        }
        while (v3);
      }
      v4 = qword_10097F998;
      if (qword_10097F998)
      {
        do
        {
          v5 = *(_QWORD *)v4;
          qword_10097F998 = *(_QWORD *)v4;
          if (*(_BYTE *)(v4 + 11) == 2)
          {
            *(_QWORD *)v4 = v1;
            qword_10097F9A8 = v4;
            v1 = v4;
          }
          v4 = v5;
        }
        while (v5);
      }
      result = 0;
      dword_1009941B4 = 0;
      byte_10097F9D8 = 0;
      byte_10097F9D9 = 0;
      word_10097F9C8 = 0;
      byte_10097F9CA = 0;
      byte_10097F9D0 = 0;
    }
  }
  return result;
}

void sub_1000FE1D8(int a1, __int16 a2, __int16 a3)
{
  char v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v5 = a1;
  v6 = a1 - 1;
  if ((a1 - 1) >= 4u)
    sub_100253460();
  v7 = dword_1009941A4;
  if (dword_1009941A4 == 3)
  {
    sub_1000FD130();
    v7 = dword_1009941A4;
    if (dword_1009941A4 == 4)
      goto LABEL_11;
    sub_100253460();
    v7 = dword_1009941A4;
  }
  if (v7 != 2 && v7 != 4)
  {
    v14 = v5;
LABEL_24:
    sub_1000FE474(v14);
    return;
  }
LABEL_11:
  switch(v6)
  {
    case 0:
      v9 = qword_10097F9B0;
      *(_BYTE *)(qword_10097F9B0 + 11) = 1;
      *(_WORD *)(v9 + 8) = a3 + 3;
      sub_100053868((char *)(*(_QWORD *)(v9 + 16) + 3));
      v10 = qword_10097F9B0;
      **(_WORD **)(qword_10097F9B0 + 16) = a2;
      *(_BYTE *)(*(_QWORD *)(v10 + 16) + 2) = a3;
      v11 = byte_10097F9CA;
      *(_BYTE *)(v10 + 10) = byte_10097F9CA;
      *(_QWORD *)v10 = 0;
      byte_10097F9CA = (v11 + 1) & 7;
      v12 = &qword_10097F998;
      v13 = (uint64_t *)qword_10097F998;
      if (qword_10097F998)
      {
        do
        {
          v12 = v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      *v12 = v10;
      goto LABEL_32;
    case 1:
      v15 = qword_10097F9A8;
      if (!qword_10097F9A8)
      {
        sub_100253460();
        v15 = qword_10097F9A8;
      }
      qword_10097F9A8 = *(_QWORD *)v15;
      *(_BYTE *)(v15 + 11) = 2;
      *(_WORD *)(v15 + 8) = a3 + 4;
      sub_100053868((char *)(*(_QWORD *)(v15 + 16) + 4));
      **(_WORD **)(v15 + 16) = a2;
      *(_WORD *)(*(_QWORD *)(v15 + 16) + 2) = a3;
      v16 = byte_10097F9CA;
      *(_BYTE *)(v15 + 10) = byte_10097F9CA;
      *(_QWORD *)v15 = 0;
      byte_10097F9CA = (v16 + 1) & 7;
      v17 = &qword_10097F998;
      v18 = (uint64_t *)qword_10097F998;
      if (qword_10097F998)
      {
        do
        {
          v17 = v18;
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      *v17 = v15;
      if (!qword_10097F9A8)
        goto LABEL_32;
      v19 = 2;
      goto LABEL_31;
    case 2:
      if (v7 == 4)
      {
        v14 = 3;
        goto LABEL_24;
      }
      v20 = qword_10097F9B8;
      *(_BYTE *)(qword_10097F9B8 + 11) = 3;
      *(_WORD *)(v20 + 8) = a3 + 3;
      sub_100053868((char *)(*(_QWORD *)(v20 + 16) + 3));
      v21 = qword_10097F9B8;
      **(_WORD **)(qword_10097F9B8 + 16) = a2;
      *(_BYTE *)(*(_QWORD *)(v21 + 16) + 2) = a3;
      if (*(_BYTE *)(v21 + 11))
        v22 = 0;
      else
        v22 = byte_10097F9D9;
      *(_BYTE *)(v21 + 10) = v22;
      if (qword_10097F998 != v21)
      {
        *(_QWORD *)v21 = qword_10097F998;
        qword_10097F998 = v21;
      }
      v19 = 3;
LABEL_31:
      sub_1000FE474(v19);
LABEL_32:
      if (!dword_1009941B4)
        sub_1000FE4BC();
      break;
    default:
      sub_100253460();
      goto LABEL_32;
  }
}

void sub_1000FE474(char a1)
{
  uint64_t v1;
  const void *v2[2];
  char v3;

  v3 = a1;
  v2[1] = &v3;
  v2[0] = (const void *)1;
  v1 = sub_10004AE90((uint64_t)sub_1000FEDF4, v2, 0);
  if ((_DWORD)v1)
  {
    sub_100112D60(v1);
    sub_1000FE4BC();
  }
}

void sub_1000FE4BC()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t *v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;

  v0 = qword_10097F998;
  qword_10097F9C0 = qword_10097F998;
  v1 = *(unsigned __int8 *)(qword_10097F998 + 11);
  if (v1 > 4 || ((1 << v1) & 0x16) == 0)
  {
    v6 = 0;
  }
  else
  {
    v3 = &qword_10097F9A0;
    v4 = -1;
    do
    {
      v3 = (uint64_t *)*v3;
      ++v4;
    }
    while (v3);
    v5 = byte_1009941AB;
    if (v4 > byte_1009941AB)
    {
      sub_100253460();
      v5 = byte_1009941AB;
    }
    if (v5 == v4)
    {
      dword_1009941B4 = 0;
      return;
    }
    v0 = qword_10097F9C0;
    v6 = *(unsigned __int8 *)(qword_10097F9C0 + 10) | 0xFFFFFF80;
    v1 = *(unsigned __int8 *)(qword_10097F9C0 + 11);
  }
  v11 = v6;
  qword_10097F998 = *(_QWORD *)v0;
  *(_QWORD *)v0 = 0;
  dword_1009941B4 = 1;
  if (v1 != 15)
  {
    v6 |= 8 * byte_10097F9D9;
    LOBYTE(v11) = v6;
    if (byte_10097F9D8)
    {
      byte_10097F9D8 = 0;
      sub_1002537E8(dword_10097F9D4, 0x7FFF);
      v0 = qword_10097F9C0;
      v1 = *(unsigned __int8 *)(qword_10097F9C0 + 11);
    }
  }
  v7 = *(unsigned __int16 *)(v0 + 8);
  v8 = v1 | (16 * v7);
  BYTE1(v11) = v8;
  BYTE2(v11) = v7 >> 4;
  *(_BYTE *)qword_10097F9E8 = -64;
  word_10097F9F2 = 1;
  if (!HIBYTE(word_1009941A0) || ((v9 = *(unsigned __int8 *)(v0 + 11)) != 0 ? (v10 = v9 == 15) : (v10 = 1), v10))
  {
    HIBYTE(v11) = ~(v8 + v6 + (v7 >> 4));
  }
  else
  {
    LOBYTE(v11) = v6 | 0x40;
    HIBYTE(v11) = ~(v8 + (v6 | 0x40) + (v7 >> 4));
    word_10097F9E0 = -1;
    sub_100252F1C((char *)&v11, 4, &word_10097F9E0);
    sub_100252F1C(*(char **)(qword_10097F9C0 + 16), *(unsigned __int16 *)(qword_10097F9C0 + 8), &word_10097F9E0);
  }
  sub_1000FEE18((uint64_t)&v11, 4);
  word_10097F9C8 = 0;
  sub_1000FD114();
  sub_1000FEAD8();
}

void sub_1000FE69C(int a1, __int16 a2, unsigned int a3, const void *a4)
{
  char v7;
  int v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v7 = a1;
  v8 = a1 - 1;
  if ((a1 - 1) >= 4u)
    sub_100253460();
  v9 = dword_1009941A4;
  if (dword_1009941A4 == 3)
  {
    sub_1000FD130();
    v9 = dword_1009941A4;
    if (dword_1009941A4 == 4)
      goto LABEL_11;
    sub_100253460();
    v9 = dword_1009941A4;
  }
  if (v9 != 2 && v9 != 4)
  {
    v16 = v7;
LABEL_24:
    sub_1000FE474(v16);
    return;
  }
LABEL_11:
  switch(v8)
  {
    case 0:
      v11 = qword_10097F9B0;
      *(_BYTE *)(qword_10097F9B0 + 11) = 1;
      *(_WORD *)(v11 + 8) = a3 + 3;
      memmove((void *)(*(_QWORD *)(v11 + 16) + 3), a4, a3);
      v12 = qword_10097F9B0;
      **(_WORD **)(qword_10097F9B0 + 16) = a2;
      *(_BYTE *)(*(_QWORD *)(v12 + 16) + 2) = a3;
      v13 = byte_10097F9CA;
      *(_BYTE *)(v12 + 10) = byte_10097F9CA;
      *(_QWORD *)v12 = 0;
      byte_10097F9CA = (v13 + 1) & 7;
      v14 = &qword_10097F998;
      v15 = (uint64_t *)qword_10097F998;
      if (qword_10097F998)
      {
        do
        {
          v14 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      *v14 = v12;
      goto LABEL_32;
    case 1:
      v17 = qword_10097F9A8;
      if (!qword_10097F9A8)
      {
        sub_100253460();
        v17 = qword_10097F9A8;
      }
      qword_10097F9A8 = *(_QWORD *)v17;
      *(_BYTE *)(v17 + 11) = 2;
      *(_WORD *)(v17 + 8) = a3 + 4;
      memmove((void *)(*(_QWORD *)(v17 + 16) + 4), a4, a3);
      **(_WORD **)(v17 + 16) = a2;
      *(_WORD *)(*(_QWORD *)(v17 + 16) + 2) = a3;
      v18 = byte_10097F9CA;
      *(_BYTE *)(v17 + 10) = byte_10097F9CA;
      *(_QWORD *)v17 = 0;
      byte_10097F9CA = (v18 + 1) & 7;
      v19 = &qword_10097F998;
      v20 = (uint64_t *)qword_10097F998;
      if (qword_10097F998)
      {
        do
        {
          v19 = v20;
          v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      *v19 = v17;
      if (!qword_10097F9A8)
        goto LABEL_32;
      v21 = 2;
      goto LABEL_31;
    case 2:
      if (v9 == 4)
      {
        v16 = 3;
        goto LABEL_24;
      }
      v22 = qword_10097F9B8;
      *(_BYTE *)(qword_10097F9B8 + 11) = 3;
      *(_WORD *)(v22 + 8) = a3 + 3;
      memmove((void *)(*(_QWORD *)(v22 + 16) + 3), a4, a3);
      v23 = qword_10097F9B8;
      **(_WORD **)(qword_10097F9B8 + 16) = a2;
      *(_BYTE *)(*(_QWORD *)(v23 + 16) + 2) = a3;
      if (*(_BYTE *)(v23 + 11))
        v24 = 0;
      else
        v24 = byte_10097F9D9;
      *(_BYTE *)(v23 + 10) = v24;
      if (qword_10097F998 != v23)
      {
        *(_QWORD *)v23 = qword_10097F998;
        qword_10097F998 = v23;
      }
      v21 = 3;
LABEL_31:
      sub_1000FE474(v21);
LABEL_32:
      if (!dword_1009941B4)
        sub_1000FE4BC();
      break;
    default:
      sub_100253460();
      goto LABEL_32;
  }
}

void sub_1000FE954(void *__src, size_t __len, int a3)
{
  int v3;
  unsigned int v4;
  uint64_t v6;
  char v7;

  v3 = a3;
  v4 = __len;
  if (a3 && a3 != 15)
    sub_100253460();
  if (v4 >= 0x103)
  {
    sub_100253460();
    v6 = qword_10097F9B8;
    *(_BYTE *)(qword_10097F9B8 + 11) = v3;
    goto LABEL_8;
  }
  v6 = qword_10097F9B8;
  *(_BYTE *)(qword_10097F9B8 + 11) = v3;
  if (v4)
  {
LABEL_8:
    memmove(*(void **)(v6 + 16), __src, v4);
    v6 = qword_10097F9B8;
    v3 = *(unsigned __int8 *)(qword_10097F9B8 + 11);
  }
  *(_WORD *)(v6 + 8) = v4;
  v7 = byte_10097F9D9;
  if (v3)
    v7 = 0;
  *(_BYTE *)(v6 + 10) = v7;
  if (qword_10097F998 != v6)
  {
    *(_QWORD *)v6 = qword_10097F998;
    qword_10097F998 = v6;
  }
  if (!dword_1009941B4)
    sub_1000FE4BC();
}

uint64_t sub_1000FEA1C(uint64_t result, __int16 a2, int a3)
{
  qword_10097F9E8 = result;
  word_10097F9F0 = a2;
  word_10097F9F2 = 0;
  if (a3)
  {
    if (a3 == 1216)
      return result;
    dword_1009941B4 = 2;
  }
  else if (dword_1009941B4 == 1)
  {
    return sub_1000FEAD8();
  }
  if (!qword_10097F9A0 || (byte_10097F9D0 & 1) != 0)
    goto LABEL_10;
  result = sub_1002537E8(dword_10097F9CC, 2);
  if ((_DWORD)result)
  {
    sub_100112D60(result);
    return sub_1000FEAD8();
  }
  byte_10097F9D0 = 1;
LABEL_10:
  if (qword_10097F998)
    return sub_1000FE4BC();
  dword_1009941B4 = 0;
  return result;
}

uint64_t sub_1000FEAD8()
{
  uint64_t v0;
  unsigned int v1;
  int v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t result;
  __int16 v7;

  word_10097F9C8 += sub_1000FEE18(*(_QWORD *)(qword_10097F9C0 + 16) + (unsigned __int16)word_10097F9C8, (unsigned __int16)(*(_WORD *)(qword_10097F9C0 + 8) - word_10097F9C8));
  v0 = qword_10097F9C0;
  v1 = (unsigned __int16)word_10097F9F2;
  if (*(unsigned __int16 *)(qword_10097F9C0 + 8) > (unsigned __int16)word_10097F9C8)
    goto LABEL_14;
  v2 = (unsigned __int16)word_10097F9F0;
  if (!HIBYTE(word_1009941A0)
    || (*(_BYTE *)(qword_10097F9C0 + 11) ? (v3 = *(_BYTE *)(qword_10097F9C0 + 11) == 15) : (v3 = 1), v3))
  {
    if (word_10097F9F0 == word_10097F9F2)
      goto LABEL_14;
  }
  else
  {
    v7 = 0;
    if ((unsigned __int16)(word_10097F9F0 - word_10097F9F2) <= 4u)
      goto LABEL_14;
    sub_100252F58((unsigned __int16)word_10097F9E0, &v7);
    sub_1000FEE18((uint64_t)&v7, 2);
    if (v2 == v1)
      goto LABEL_14;
    v0 = qword_10097F9C0;
    v1 = (unsigned __int16)word_10097F9F2;
  }
  word_10097F9F2 = v1 + 1;
  *(_BYTE *)(qword_10097F9E8 + v1) = -64;
  dword_1009941B4 = 2;
  if (v0 != qword_10097F9B8)
  {
    v4 = &qword_10097F9A0;
    v5 = (uint64_t *)qword_10097F9A0;
    if (qword_10097F9A0)
    {
      do
      {
        v4 = v5;
        v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
    *v4 = v0;
  }
  qword_10097F9C0 = 0;
LABEL_14:
  result = sub_10016F698();
  if ((_DWORD)result == 625)
    return sub_1000FEA1C(qword_10097F9E8, word_10097F9F0, 625);
  return result;
}

void sub_1000FEC68(int a1)
{
  uint64_t v1;
  char v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;

  v1 = qword_10097F9A0;
  if (qword_10097F9A0)
  {
    v2 = a1 + 7;
    v3 = (a1 + 7 - *(unsigned __int8 *)(qword_10097F9A0 + 10)) & 7;
    v4 = byte_1009941AB;
    if (v3 < byte_1009941AB)
    {
      while (1)
      {
        qword_10097F9A0 = *(_QWORD *)v1;
        v5 = *(unsigned __int8 *)(v1 + 11);
        if (v5 == 1)
          goto LABEL_9;
        if (v5 != 2)
        {
          if (v5 == 4)
            goto LABEL_9;
          sub_100253460();
        }
        v6 = qword_10097F9A8;
        *(_QWORD *)v1 = qword_10097F9A8;
        qword_10097F9A8 = v1;
        if (!v6)
          break;
LABEL_10:
        v1 = qword_10097F9A0;
        if (!qword_10097F9A0)
        {
          sub_1002537E8(dword_10097F9CC, 0x7FFF);
          byte_10097F9D0 = 0;
          return;
        }
        if (((v2 - *(_BYTE *)(qword_10097F9A0 + 10)) & 7u) >= byte_1009941AB)
        {
          if (v3 < v4)
            sub_1002537E8(dword_10097F9CC, 2);
          return;
        }
      }
      v5 = 2;
LABEL_9:
      sub_10019CB24(v5, 0);
      goto LABEL_10;
    }
  }
}

void sub_1000FED74(char a1)
{
  int v1;
  char v2;

  if (((~a1 + byte_10097F9D9) & 7u) >= byte_1009941AB)
    byte_10097F9D9 = (a1 + 1) & 7;
  if (!dword_1009941B4)
  {
    v1 = byte_10097F9D8;
    v2 = ++byte_10097F9D8;
    if (v1)
    {
      if (byte_1009941AB == v2)
        sub_1000FE954(0, 0, 0);
    }
    else
    {
      sub_1002537E8(dword_10097F9D4, 1);
    }
  }
}

void sub_1000FEDF4(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = **(unsigned __int8 **)(a1 + 8);
  if (dword_1009941A4 == 2)
    v2 = 0;
  else
    v2 = 1215;
  sub_10019CB24(v1, v2);
}

uint64_t sub_1000FEE18(uint64_t a1, int a2)
{
  unsigned __int16 v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = a2;
  if (a2)
  {
    v3 = 0;
    while (1)
    {
      v4 = (unsigned __int16)word_10097F9F2;
      if (word_10097F9F2 == word_10097F9F0)
        break;
      v5 = *(unsigned __int8 *)(a1 + v3);
      if (v5 == 219 || v5 == 192)
      {
        if ((unsigned __int16)word_10097F9F2 + 1 == (unsigned __int16)word_10097F9F0)
          break;
        ++word_10097F9F2;
        *(_BYTE *)(qword_10097F9E8 + v4) = -37;
        if (v5 == 219)
          LOBYTE(v5) = -35;
        else
          LOBYTE(v5) = -36;
        LODWORD(v4) = (unsigned __int16)word_10097F9F2;
      }
      word_10097F9F2 = v4 + 1;
      *(_BYTE *)(qword_10097F9E8 + v4) = v5;
      if (a2 == (_DWORD)++v3)
        goto LABEL_14;
    }
    v2 = v3;
  }
LABEL_14:
  if ((unsigned __int16)word_10097F9F2 > (unsigned __int16)word_10097F9F0)
    sub_100253460();
  return v2;
}

uint64_t sub_1000FEEDC(unint64_t *a1, unint64_t a2, uint64_t *a3, unint64_t a4, int a5)
{
  unsigned __int16 *v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  __int16 v12;
  unsigned __int16 v13;
  unint64_t v14;
  uint64_t v15;

  v5 = (unsigned __int16 *)*a1;
  v6 = *a3;
  if (*a1 < a2)
  {
    v7 = (unsigned __int16 *)*a1;
    while (1)
    {
      v9 = *v7++;
      v8 = v9;
      v10 = v9 & 0xFC00;
      if (v10 == 55296)
      {
        if ((unint64_t)v7 >= a2)
        {
          v15 = 1;
          goto LABEL_31;
        }
        v11 = *v7;
        if ((v11 & 0xFC00) == 0xDC00)
        {
          v8 = v11 + (v8 << 10) - 56613888;
          v7 = v5 + 2;
        }
        else if (!a5)
        {
          goto LABEL_29;
        }
      }
      else if (!a5 && v10 == 56320)
      {
LABEL_29:
        v15 = 3;
        goto LABEL_31;
      }
      if (v8 < 0x10000)
        v12 = 3;
      else
        v12 = 4;
      if (v8 < 0x800)
        v12 = 2;
      if (v8 >= 0x80)
        v13 = v12;
      else
        v13 = 1;
      v14 = v6 + v13;
      if (v14 > a4)
      {
        v15 = 2;
        goto LABEL_31;
      }
      switch(v13)
      {
        case 1u:
          goto LABEL_24;
        case 2u:
          goto LABEL_23;
        case 3u:
          goto LABEL_22;
        case 4u:
          *(_BYTE *)--v14 = v8 & 0x3F | 0x80;
          v8 >>= 6;
LABEL_22:
          *(_BYTE *)--v14 = v8 & 0x3F | 0x80;
          v8 >>= 6;
LABEL_23:
          *(_BYTE *)--v14 = v8 & 0x3F | 0x80;
          v8 >>= 6;
LABEL_24:
          *(_BYTE *)--v14 = byte_100738E18[v13] | v8;
          break;
        default:
          break;
      }
      v6 = v14 + v13;
      v5 = v7;
      if ((unint64_t)v7 >= a2)
      {
        v15 = 0;
        v5 = v7;
        goto LABEL_31;
      }
    }
  }
  v15 = 0;
LABEL_31:
  *a1 = (unint64_t)v5;
  *a3 = v6;
  return v15;
}

BOOL sub_1000FF038(unsigned __int8 *a1, int a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  int v6;
  int v7;
  unsigned int v8;

  v2 = &a1[a2];
  switch(a2)
  {
    case 1:
      v3 = *a1;
      return (char)v3 > -63 && v3 < 0xF5;
    case 2:
      goto LABEL_11;
    case 3:
      goto LABEL_10;
    case 4:
      v6 = (char)*--v2;
      if (v6 > -65)
        return 0;
LABEL_10:
      v7 = (char)*--v2;
      if (v7 > -65)
        return 0;
LABEL_11:
      v8 = *(v2 - 1);
      if (v8 > 0xBF)
        return 0;
      v3 = *a1;
      if (v3 > 0xEF)
      {
        if (v3 == 240)
        {
          if (v8 >= 0x90)
          {
            v3 = 240;
            return (char)v3 > -63 && v3 < 0xF5;
          }
        }
        else
        {
          if (v3 != 244)
          {
LABEL_26:
            if ((v8 & 0x80) != 0)
              return (char)v3 > -63 && v3 < 0xF5;
            return 0;
          }
          if (v8 <= 0x8F)
          {
            v3 = 244;
            return (char)v3 > -63 && v3 < 0xF5;
          }
        }
        return 0;
      }
      if (v3 == 224)
      {
        if (v8 >= 0xA0)
        {
          v3 = 224;
          return (char)v3 > -63 && v3 < 0xF5;
        }
        return 0;
      }
      if (v3 != 237)
        goto LABEL_26;
      if (v8 > 0x9F)
        return 0;
      v3 = 237;
      return (char)v3 > -63 && v3 < 0xF5;
    default:
      return 0;
  }
}

uint64_t sub_1000FF11C(unsigned __int8 **a1, unint64_t a2, _WORD **a3, unint64_t a4, int a5)
{
  unsigned __int8 *v7;
  _WORD *v8;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t result;

  v7 = *a1;
  v8 = *a3;
  if ((unint64_t)*a1 >= a2)
  {
LABEL_22:
    result = 0;
    goto LABEL_28;
  }
  while (1)
  {
    v12 = *v7;
    v13 = byte_100738E1F[*v7];
    if ((unint64_t)&v7[v13] >= a2)
    {
      result = 1;
      goto LABEL_28;
    }
    v14 = v13 + 1;
    if (!sub_1000FF038(v7, v13 + 1))
      goto LABEL_27;
    v15 = 0;
    v16 = v13;
    switch((int)v13)
    {
      case 0:
        goto LABEL_10;
      case 1:
        goto LABEL_9;
      case 2:
        goto LABEL_8;
      case 3:
        goto LABEL_7;
      case 4:
        goto LABEL_6;
      case 5:
        v15 = v12 << 6;
        v17 = *++v7;
        v12 = v17;
LABEL_6:
        v18 = v15 + v12;
        v19 = *++v7;
        v12 = v19;
        v15 = v18 << 6;
LABEL_7:
        v20 = v15 + v12;
        v21 = *++v7;
        v12 = v21;
        v15 = v20 << 6;
LABEL_8:
        v22 = v15 + v12;
        v23 = *++v7;
        v12 = v23;
        v15 = v22 << 6;
LABEL_9:
        v24 = v15 + v12;
        v25 = *++v7;
        v12 = v25;
        v16 = v24 << 6;
LABEL_10:
        ++v7;
        v15 = v16 + v12;
        break;
      default:
        break;
    }
    if ((unint64_t)v8 >= a4)
    {
      v7 -= v14;
LABEL_25:
      result = 2;
      goto LABEL_28;
    }
    v26 = v15 - dword_100738F20[v13];
    if (!HIWORD(v26))
      break;
    if (v26 >= 0x110000)
      goto LABEL_16;
    if ((unint64_t)(v8 + 1) >= a4)
    {
      v7 -= v14;
      goto LABEL_25;
    }
    *v8 = ((v26 + 67043328) >> 10) - 10240;
    v8[1] = v26 & 0x3FF | 0xDC00;
    v8 += 2;
LABEL_21:
    if ((unint64_t)v7 >= a2)
      goto LABEL_22;
  }
  if (v26 >> 11 != 27)
  {
LABEL_18:
    *v8++ = v26;
    goto LABEL_21;
  }
LABEL_16:
  if (a5)
  {
    LOWORD(v26) = -3;
    goto LABEL_18;
  }
  v7 -= v14;
LABEL_27:
  result = 3;
LABEL_28:
  *a1 = v7;
  *a3 = v8;
  return result;
}

void sub_1000FF2C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (*(_QWORD *)(qword_100994BC8 + 32))
  {
    v4 = *(_QWORD **)(qword_100994BC8 + 8);
    if (!v4)
    {
      sub_100253460();
      v4 = *(_QWORD **)(qword_100994BC8 + 8);
    }
    if (!*v4)
      sub_100253460();
    v5 = sub_100149BD4(a1, 1);
    if (v5)
    {
      v6 = qword_100994BC8;
      if (*(_BYTE *)(qword_100994BC8 + 88))
      {
        v7 = v5;
        v8 = 0;
        v9 = 0;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(v7 + 8) + v8))
          {
            sub_1000FF384(a1, v9, a2);
            v6 = qword_100994BC8;
          }
          ++v9;
          v8 += 8;
        }
        while (v9 < *(unsigned __int8 *)(v6 + 88));
      }
    }
  }
}

void sub_1000FF384(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  unsigned __int8 v9;

  v9 = a2;
  v5 = sub_100149BD4(a1, 1);
  if (v5)
  {
    v6 = *(_QWORD **)(qword_100994BC8 + 8);
    if (v6)
    {
      v7 = v5;
      if (!*v6)
        sub_100253460();
      sub_100049F6C(*(unsigned int *)(*(_QWORD *)(v7 + 8) + 8 * a2 + 4));
      *(_DWORD *)(*(_QWORD *)(v7 + 8) + 8 * a2 + 4) = 0;
      sub_100149AD4(v7, &v9);
      (**(void (***)(uint64_t, _QWORD, _QWORD, uint64_t))(qword_100994BC8 + 8))(v7, v9, 0, a3);
      *(_BYTE *)(*(_QWORD *)(v7 + 8) + 8 * v9) = 0;
    }
    else if (sub_10005549C())
    {
      sub_100054530("OI_AVRCPController_CommandFailed called, but no controller exists");
      v8 = sub_1000544A0(4u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        sub_1006CEF28(v8);
    }
  }
}

uint64_t sub_1000FF484(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void **v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  if (!(_DWORD)xmmword_100999158)
    return 408;
  if (!a1 || !a3)
  {
    sub_100253460();
    return 101;
  }
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  if (*(_QWORD *)(qword_100994BC8 + 8))
    return 119;
  v8 = sub_100114588(0x18uLL);
  v9 = qword_100994BC8;
  *(_QWORD *)(qword_100994BC8 + 32) = v8;
  if (!v8)
    return 106;
  v10 = sub_100114588(32 * *(unsigned __int8 *)(v9 + 89));
  v11 = qword_100994BC8;
  v12 = *(_QWORD **)(qword_100994BC8 + 32);
  v12[1] = v10;
  if (!v10)
  {
    sub_100053298(v12);
    *(_QWORD *)(qword_100994BC8 + 32) = 0;
    return 106;
  }
  if (*(_BYTE *)(v11 + 89))
  {
    v13 = 0;
    v14 = 0;
    while (1)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 32) + 8) + v13 + 8) = sub_100114588(8* *(unsigned __int8 *)(v11 + 88));
      v15 = *(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 32) + 8) + v13;
      if (!*(_QWORD *)(v15 + 8))
        break;
      *(_DWORD *)v15 = 0;
      *(_WORD *)(v15 + 4) = 0;
      ++v14;
      v11 = qword_100994BC8;
      v13 += 32;
      if (v14 >= *(unsigned __int8 *)(qword_100994BC8 + 89))
        goto LABEL_15;
    }
    v5 = 106;
    goto LABEL_27;
  }
LABEL_15:
  *(_QWORD *)(v11 + 8) = a1;
  *(_QWORD *)(v11 + 48) = sub_1000FF794;
  *(_QWORD *)(v11 + 64) = sub_1000FF8A8;
  v16 = *(_WORD *)(sub_100252DE8(4u) + 4);
  if (!v16)
    v16 = 4;
  *(_WORD *)(*(_QWORD *)(qword_100994BC8 + 32) + 16) = v16;
  v17 = *(_WORD *)(sub_100252DE8(4u) + 6);
  if (!v17)
    v17 = 8;
  *(_WORD *)(*(_QWORD *)(qword_100994BC8 + 32) + 18) = v17;
  v18 = *(_WORD *)(sub_100252DE8(4u) + 8);
  v19 = *(_QWORD *)(qword_100994BC8 + 32);
  if (!v18)
    v18 = 20;
  *(_WORD *)(v19 + 20) = v18;
  xmmword_10097F9F8 = xmmword_1007395F0;
  DWORD2(xmmword_10097F9F8) = a2;
  *(_QWORD *)&v27 = &unk_10091A5D0;
  WORD4(v27) = 4;
  *(_QWORD *)&v28 = *(_QWORD *)a3;
  WORD4(v28) = *(_WORD *)(a3 + 8);
  xmmword_10097F9F8 = xmmword_1007395F0;
  DWORD2(xmmword_10097F9F8) = a2;
  *(_QWORD *)&v25 = &unk_10091A630;
  WORD4(v25) = 4;
  *(_QWORD *)&v26 = *(_QWORD *)a3;
  WORD4(v26) = *(_WORD *)(a3 + 8);
  v5 = sub_1002465CC((uint64_t)&v27, (int *)v19);
  sub_1002468CC(**(_DWORD **)(qword_100994BC8 + 32), (uint64_t)&v25);
  if ((_DWORD)v5 || (v5 = sub_100149EE0(), (_DWORD)v5))
  {
LABEL_27:
    sub_1002467B8(**(_DWORD **)(qword_100994BC8 + 32));
    v20 = qword_100994BC8;
    *(_QWORD *)(qword_100994BC8 + 8) = 0;
    if (*(_BYTE *)(v20 + 89))
    {
      v21 = 0;
      v22 = 8;
      do
      {
        v23 = *(void **)(*(_QWORD *)(*(_QWORD *)(v20 + 32) + 8) + v22);
        if (v23)
        {
          sub_100053298(v23);
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 32) + 8) + v22) = 0;
          v20 = qword_100994BC8;
        }
        ++v21;
        v22 += 32;
      }
      while (v21 < *(unsigned __int8 *)(v20 + 89));
    }
    v24 = *(void ***)(v20 + 32);
    if (v24[1])
    {
      sub_100053298(v24[1]);
      v24 = *(void ***)(qword_100994BC8 + 32);
      v24[1] = 0;
    }
    sub_100053298(v24);
    *(_QWORD *)(qword_100994BC8 + 32) = 0;
  }
  return v5;
}

uint64_t sub_1000FF794(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(qword_100994BC8 + 8))
  {
    v5 = result;
    v6 = *a3;
    result = sub_100149BD4(result, 1);
    if (result)
    {
      v7 = result;
      v8 = *(_QWORD *)(result + 8);
      if (*(_BYTE *)(v8 + 8 * a2) == 2)
      {
        sub_100049F6C(*(unsigned int *)(v8 + 8 * a2 + 4));
        v9 = *(_QWORD *)(v7 + 8);
        *(_DWORD *)(v9 + 8 * a2 + 4) = 0;
        if (v6 != 15)
          *(_BYTE *)(v9 + 8 * a2) = 3;
        if (*((_WORD *)a3 + 8))
        {
          v10 = qword_100994BC8;
          if ((**((_BYTE **)a3 + 1) & 0x7F) == 0 && *(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 8) + 8))
          {
            result = sub_10014AE24(v5, a2, a3);
            goto LABEL_12;
          }
        }
        else
        {
          v10 = qword_100994BC8;
        }
        result = (**(uint64_t (***)(uint64_t, uint64_t, unsigned __int8 *, _QWORD))(v10 + 8))(v5, a2, a3, 0);
LABEL_12:
        if (v6 != 15)
          *(_BYTE *)(*(_QWORD *)(v7 + 8) + 8 * a2) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000FF8A8()
{
  uint64_t (*v0)(void);
  uint64_t result;

  v0 = *(uint64_t (**)(void))(*(_QWORD *)(qword_100994BC8 + 8) + 16);
  if (v0)
    return v0();
  return result;
}

uint64_t sub_1000FF8C8()
{
  int *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  void **v5;

  if (!(_DWORD)xmmword_100999158)
    return 408;
  v0 = *(int **)(qword_100994BC8 + 32);
  if (!v0)
    return 121;
  if (*(_BYTE *)(qword_100994BC8 + 90) && !*(_QWORD *)(qword_100994BC8 + 16))
    return 141;
  sub_1002467B8(*v0);
  v1 = qword_100994BC8;
  *(_QWORD *)(qword_100994BC8 + 8) = 0;
  if (*(_BYTE *)(v1 + 89))
  {
    v2 = 0;
    v3 = 8;
    do
    {
      v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + v3);
      if (v4)
      {
        sub_100053298(v4);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 32) + 8) + v3) = 0;
        v1 = qword_100994BC8;
      }
      ++v2;
      v3 += 32;
    }
    while (v2 < *(unsigned __int8 *)(v1 + 89));
  }
  v5 = *(void ***)(v1 + 32);
  if (v5[1])
  {
    sub_100053298(v5[1]);
    v5 = *(void ***)(qword_100994BC8 + 32);
    v5[1] = 0;
  }
  sub_100053298(v5);
  *(_QWORD *)(qword_100994BC8 + 32) = 0;
  return sub_10014A5B8();
}

uint64_t sub_1000FF9C8(uint64_t a1, unsigned __int8 *a2, char a3)
{
  __int128 v4;
  uint64_t v5;
  _BYTE v6[2];

  v4 = xmmword_100738F38;
  v5 = 0;
  if (!(_DWORD)xmmword_100999158)
    return 408;
  if (a1 && a2)
  {
    *((_QWORD *)&v4 + 1) = v6;
    LOWORD(v5) = 2;
    v6[0] = a3;
    v6[1] = 0;
    return sub_1000FFA44(a1, a2, (unsigned __int8 *)&v4);
  }
  else
  {
    sub_100253460();
    return 101;
  }
}

uint64_t sub_1000FFA44(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unsigned __int8 v20;
  _QWORD v21[2];
  const void *v22[2];

  v19 = 0;
  if (!*(_QWORD *)(qword_100994BC8 + 8))
    return 3309;
  v20 = 0;
  v6 = sub_1000FFCB0(a1, &v19, &v20);
  if (!(_DWORD)v6)
  {
    if (a3[3])
    {
      v7 = (unsigned __int16 *)(*(_QWORD *)(qword_100994BC8 + 32) + 16);
    }
    else
    {
      v8 = *(_QWORD *)(qword_100994BC8 + 32);
      v9 = v8 + 20;
      v10 = v8 + 18;
      v7 = (unsigned __int16 *)(*a3 ? v9 : v10);
    }
    v11 = *v7;
    v12 = v19;
    v13 = v20;
    v21[0] = v19;
    v21[1] = v20;
    v22[0] = (const void *)16;
    v22[1] = v21;
    if (sub_10004A088(*(_DWORD *)(*(_QWORD *)(v19 + 8) + 8 * v20 + 4))
      || (v6 = sub_10004AE90((uint64_t)sub_1000FFD70, v22, (int *)(*(_QWORD *)(v12 + 8) + 8 * v13 + 4)), !(_DWORD)v6))
    {
      v14 = sub_1002537E8(*(_DWORD *)(*(_QWORD *)(v12 + 8) + 8 * v13 + 4), v11);
      if ((_DWORD)v14)
      {
        v6 = v14;
        sub_100049F6C(*(unsigned int *)(*(_QWORD *)(v12 + 8) + 8 * v13 + 4));
        v15 = *(_QWORD *)(v12 + 8) + 8 * v13;
LABEL_15:
        *(_DWORD *)(v15 + 4) = 0;
        return v6;
      }
      v16 = sub_10014A798(a1, v20, a3);
      if ((_DWORD)v16)
      {
        v6 = v16;
        v17 = v20;
        sub_100049F6C(*(unsigned int *)(*(_QWORD *)(v12 + 8) + 8 * v20 + 4));
        v15 = *(_QWORD *)(v12 + 8) + 8 * v17;
        goto LABEL_15;
      }
      *(_BYTE *)(*(_QWORD *)(v12 + 8) + 8 * v20) = 2;
      v6 = 0;
      if (a2)
        *a2 = v20;
    }
  }
  return v6;
}

uint64_t sub_1000FFBE8(uint64_t a1, char a2)
{
  unsigned __int8 v3;
  _QWORD v4[3];
  uint64_t v5;

  v5 = 0x1000050581900;
  HIBYTE(v5) = a2;
  if (!(_DWORD)xmmword_100999158)
    return 408;
  if (a1)
  {
    v3 = 0;
    v4[0] = 2304;
    v4[1] = &v5;
    v4[2] = 8;
    return sub_1000FFA44(a1, &v3, (unsigned __int8 *)v4);
  }
  else
  {
    sub_100253460();
    return 101;
  }
}

uint64_t sub_1000FFC94(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if ((_DWORD)xmmword_100999158)
    return sub_1000FFA44(a1, a2, a3);
  else
    return 408;
}

uint64_t sub_1000FFCB0(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;

  if (!a3)
    sub_100253460();
  v6 = sub_100149BD4(a1, 1);
  if (!v6)
    return 120;
  v7 = *(unsigned __int8 *)(qword_100994BC8 + 88);
  if (!*(_BYTE *)(qword_100994BC8 + 88))
    return 118;
  v8 = *(unsigned __int8 *)(v6 + 16);
  v9 = *(unsigned __int8 *)(qword_100994BC8 + 88);
  while (1)
  {
    v10 = v8 % v7;
    if (!*(_BYTE *)(*(_QWORD *)(v6 + 8) + 8 * (v8 % v7)))
      break;
    ++v8;
    if (!--v9)
      return 118;
  }
  v11 = 0;
  *a2 = v6;
  *(_BYTE *)(v6 + 16) = (v10 + 1) % *(_BYTE *)(qword_100994BC8 + 88);
  *a3 = v10;
  return v11;
}

void sub_1000FFD70(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned __int8 **)(a1 + 8);
  v2 = *(_QWORD *)v1;
  v3 = v1[8];
  v4 = 8 * v1[8];
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 8) + v4;
  *(_BYTE *)v5 = 4;
  *(_DWORD *)(v5 + 4) = 0;
  sub_1000FF384(v2, v3, 3312);
  *(_BYTE *)(*(_QWORD *)(v2 + 8) + v4) = 0;
}

uint64_t sub_1000FFDC0(uint64_t result, uint64_t a2, int a3)
{
  if (!a2 || !a3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bip/oi_bip_private.c");
  *(_QWORD *)(result + 24) = a2;
  *(_WORD *)(result + 32) = a3;
  *(_DWORD *)(result + 36) = 0x10000;
  *(_WORD *)(result + 34) = a3;
  *(_WORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1000FFE1C(int *a1, uint64_t *a2)
{
  unsigned int v3;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned __int16 v19;
  uint64_t v20;
  signed int v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2)
  {
    v3 = *((unsigned __int8 *)a2 + 8);
    if (*((_BYTE *)a2 + 8))
    {
      v5 = 0;
      v6 = a1 + 23;
      do
      {
        v7 = *a2;
        v8 = *(unsigned __int8 *)(*a2 + 24 * v5);
        if (v8 > 0x48)
        {
          if (*(unsigned __int8 *)(*a2 + 24 * v5) <= 0x70u)
          {
            if (v8 == 73)
            {
              *((_QWORD *)a1 + 7) = v7 + 24 * v5 + 8;
              *((_BYTE *)a1 + 64) = 1;
            }
            else if (v8 == 76)
            {
              v28 = 0;
              v26 = 0u;
              v27 = 0u;
              sub_1000FFDC0((uint64_t)&v26, *(_QWORD *)(v7 + 24 * v5 + 16), *(unsigned __int16 *)(v7 + 24 * v5 + 8));
              if (HIBYTE(v28))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bip/oi_bip_private.c", 142, "OI_STATUS CopyParamData(OI_OBEX_BYTESEQ *, BIP_REQUEST_HEADERS *)");
              }
              else
              {
                v14 = WORD1(v28);
                if (WORD1(v28) > WORD2(v28))
                {
                  v15 = BYTE6(v28);
                  v16 = *((_QWORD *)&v27 + 1);
                  v17 = WORD1(v28) - 3;
                  v18 = WORD1(v28) - 1;
                  v19 = v27;
                  do
                  {
                    if (v14 < (__int16)v19)
                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/b"
                                             "ip/oi_bip_private.c");
                    if ((_DWORD)v14 == v19)
                      break;
                    if (v15 != 1)
                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/b"
                                             "ip/oi_bip_private.c");
                    if (v14 <= (unsigned __int16)(v19 + 1))
                      return 411;
                    v20 = v19 + 2;
                    v21 = *(unsigned __int8 *)(v16 + v19 + 1);
                    if ((int)(v14 - (unsigned __int16)v20) < v21)
                      return 411;
                    LODWORD(v22) = (unsigned __int16)(v19 + 2);
                    switch(*(_BYTE *)(v16 + v19))
                    {
                      case 1:
                        if (v21 != 2)
                          return 411;
                        if (v18 <= (int)v22)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profil"
                                                 "es/bip/oi_bip_private.c");
                        *((_WORD *)a1 + 33) = bswap32(*(unsigned __int16 *)(v16 + v20)) >> 16;
                        LOWORD(v22) = v19 + 4;
                        v23 = 8;
                        break;
                      case 2:
                        if (v21 != 2)
                          return 411;
                        if (v18 <= (int)v22)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profil"
                                                 "es/bip/oi_bip_private.c");
                        *((_WORD *)a1 + 34) = bswap32(*(unsigned __int16 *)(v16 + v20)) >> 16;
                        LOWORD(v22) = v19 + 4;
                        v23 = 16;
                        break;
                      case 3:
                        if (v21 != 1)
                          return 411;
                        if (v14 <= (unsigned __int16)v20)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profil"
                                                 "es/bip/oi_bip_private.c");
                        LOWORD(v22) = v19 + 3;
                        *((_BYTE *)a1 + 70) = *(_BYTE *)(v16 + v20);
                        v23 = 32;
                        break;
                      case 4:
                        if (v21 != 4)
                          return 411;
                        if (v17 <= (int)v22)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profil"
                                                 "es/bip/oi_bip_private.c");
                        a1[18] = bswap32(*(_DWORD *)(v16 + v20));
                        LOWORD(v22) = v19 + 6;
                        v23 = 64;
                        break;
                      case 5:
                        if (v21 != 4)
                          return 411;
                        if (v17 <= (int)v22)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profil"
                                                 "es/bip/oi_bip_private.c");
                        a1[19] = bswap32(*(_DWORD *)(v16 + v20));
                        LOWORD(v22) = v19 + 6;
                        v23 = 128;
                        break;
                      case 6:
                        if (v21 != 4)
                          return 411;
                        if (v17 <= (int)v22)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profil"
                                                 "es/bip/oi_bip_private.c");
                        a1[20] = bswap32(*(_DWORD *)(v16 + v20));
                        LOWORD(v22) = v19 + 6;
                        v23 = 256;
                        break;
                      case 7:
                        if (v21 != 1)
                          return 411;
                        if (v14 <= (unsigned __int16)v20)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profil"
                                                 "es/bip/oi_bip_private.c");
                        LOWORD(v22) = v19 + 3;
                        *((_BYTE *)a1 + 84) = *(_BYTE *)(v16 + v20);
                        v23 = 512;
                        break;
                      case 8:
                        if (v21 != 1)
                          return 411;
                        if (v14 <= (unsigned __int16)v20)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profil"
                                                 "es/bip/oi_bip_private.c");
                        LOWORD(v22) = v19 + 3;
                        *((_BYTE *)a1 + 85) = *(_BYTE *)(v16 + v20);
                        v23 = 1024;
                        break;
                      case 9:
                        if (v21 != 16)
                          return 411;
                        if (v17 <= (int)v22)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profil"
                                                 "es/bip/oi_bip_private.c");
                        a1[22] = bswap32(*(_DWORD *)(v16 + v20));
                        if (v14 - (unsigned __int16)(v19 + 6) <= 0xB)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profil"
                                                 "es/bip/oi_bip_private.c");
                        v22 = (uint64_t *)(v16 + (unsigned __int16)(v19 + 6));
                        v24 = *v22;
                        v6[2] = *((_DWORD *)v22 + 2);
                        *(_QWORD *)v6 = v24;
                        LOWORD(v22) = v19 + 18;
                        v23 = 2048;
                        break;
                      case 0xA:
                        if (v21 != 1)
                          return 411;
                        if (v14 <= (unsigned __int16)v20)
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profil"
                                                 "es/bip/oi_bip_private.c");
                        LOWORD(v22) = v19 + 3;
                        *((_BYTE *)a1 + 104) = *(_BYTE *)(v16 + v20);
                        v23 = 4096;
                        break;
                      default:
                        goto LABEL_69;
                    }
                    *a1 |= v23;
LABEL_69:
                    v19 = v20 + v21;
                  }
                  while (v14 > (unsigned __int16)v22);
                }
              }
              v3 = *((unsigned __int8 *)a2 + 8);
            }
            goto LABEL_71;
          }
          if (v8 == 113)
          {
            v13 = *a1;
            if ((*a1 & 2) == 0)
            {
              *((_QWORD *)a1 + 3) = v7 + 24 * v5 + 8;
              v10 = v13 | 2;
              goto LABEL_28;
            }
          }
          else if (v8 == 195)
          {
            a1[12] = *(_DWORD *)(v7 + 24 * v5 + 8);
            v10 = *a1 | 0x4000;
LABEL_28:
            *a1 = v10;
          }
        }
        else if (*(unsigned __int8 *)(*a2 + 24 * v5) > 0x41u)
        {
          if (v8 != 66)
          {
            if (v8 == 72)
            {
              *((_QWORD *)a1 + 7) = v7 + 24 * v5 + 8;
              *((_BYTE *)a1 + 64) = 0;
            }
            goto LABEL_71;
          }
          v12 = *a1;
          if ((*a1 & 0x8000) == 0)
          {
            *((_QWORD *)a1 + 1) = v7 + 24 * v5 + 8;
            v10 = v12 | 0x8000;
            goto LABEL_28;
          }
        }
        else
        {
          if (v8 != 1)
          {
            if (v8 != 48)
              goto LABEL_71;
            v9 = *a1;
            if ((*a1 & 4) != 0)
              goto LABEL_71;
            *((_QWORD *)a1 + 4) = v7 + 24 * v5 + 8;
            v10 = v9 | 4;
            goto LABEL_28;
          }
          v11 = *a1;
          if ((*a1 & 1) == 0)
          {
            *((_QWORD *)a1 + 2) = v7 + 24 * v5 + 8;
            v10 = v11 | 1;
            goto LABEL_28;
          }
        }
LABEL_71:
        ++v5;
      }
      while (v5 < v3);
    }
  }
  return 0;
}

void *sub_1001003AC()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  uint64_t v2;
  void *v3;
  char *v4;
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  const __CFNumber *v7;
  const __CFNumber *v8;

  v0 = (const __CFDictionary *)sub_1001A3A88();
  if (!v0)
    return 0;
  v1 = v0;
  v2 = 0;
  v3 = &unk_10097FA08;
  v4 = (char *)&unk_10097FA08;
  while (1)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(v1, off_10091A750[v2]);
    if (!Value)
      break;
    v6 = Value;
    v7 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("item_size"));
    if (!v7)
      break;
    CFNumberGetValue(v7, kCFNumberSInt32Type, v4);
    v8 = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("item_count"));
    if (!v8)
      break;
    CFNumberGetValue(v8, kCFNumberSInt32Type, v4 + 44);
    v4 += 4;
    if (++v2 == 11)
      goto LABEL_9;
  }
  v3 = 0;
LABEL_9:
  CFRelease(v1);
  return v3;
}

void *sub_100100484(void *a1, const void *a2, size_t __len)
{
  return memmove(a1, a2, __len);
}

uint64_t sub_100100490(uint64_t a1)
{
  uint64_t v2;
  int v4;
  __int16 v5;

  qword_10097FA60 = (uint64_t)sub_100251288((uint64_t)sub_100100484, (uint64_t)sub_10010048C);
  v2 = sub_1001D98F4(a1, 1);
  v5 = 0;
  v4 = 0;
  sub_1001D99F8(a1, (uint64_t)&v4);
  return (*(uint64_t (**)(int *, uint64_t, uint64_t))(*(_QWORD *)qword_100994BC8 + 32))(&v4, a1, v2);
}

uint64_t sub_100100518(int a1)
{
  int v3;
  __int16 v4;

  sub_1002512C0((_QWORD *)qword_10097FA60);
  qword_10097FA60 = 0;
  v4 = 0;
  v3 = 0;
  sub_1001D99F8(a1, (uint64_t)&v3);
  return (*(uint64_t (**)(int *))(*(_QWORD *)qword_100994BC8 + 40))(&v3);
}

uint64_t sub_10010057C(uint64_t a1, unsigned __int16 **a2, int a3)
{
  uint64_t v3;
  int v7;
  __int16 v8;
  uint64_t v9;

  if (a3 == 2)
  {
    if (!sub_100056080(qword_10097FA60))
      sub_100253460();
    sub_1002515E8(qword_10097FA60, 1);
    return 0;
  }
  else
  {
    v8 = 0;
    v7 = 0;
    sub_1001D99F8(a1, (uint64_t)&v7);
    v9 = 0;
    v3 = sub_100258BD0(*((_QWORD *)*a2 + 1), **a2, &v9, 8);
    if (!(_DWORD)v3)
      (**(void (***)(int *, uint64_t, uint64_t *))(*(_QWORD *)(qword_100994BC8 + 16) + 32))(&v7, a1, &v9);
  }
  return v3;
}

uint64_t sub_100100660(uint64_t a1, unsigned __int16 **a2, int a3, int a4)
{
  NSObject *v4;
  uint64_t v5;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  unsigned __int16 v19;
  int v20;
  int v21;
  __int16 v22;
  uint64_t v23;

  if (a4 == 1719)
  {
    if (sub_10005549C())
    {
      sub_100054530("AVRCP BIP client issued OBEX ABORT message!");
      v4 = sub_1000544A0(4u);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1006CEE54();
    }
    return 0;
  }
  if (a3 == 2)
  {
    if (!sub_100056080(qword_10097FA60))
      sub_100253460();
    sub_1002515E8(qword_10097FA60, 1);
    return 0;
  }
  if (**a2 == 8)
  {
    v22 = 0;
    v21 = 0;
    sub_1001D99F8(a1, (uint64_t)&v21);
    v23 = 0;
    v5 = sub_100258BD0(*((_QWORD *)*a2 + 1), **a2, &v23, 8);
    v9 = a2[1];
    if (v9)
    {
      v10 = *v9 - 1;
      while (v10 != -1)
      {
        v11 = *((_QWORD *)v9 + 1);
        v12 = *(unsigned __int8 *)(v11 + v10--);
        if (v12 == 42)
        {
          v13 = v10 + 2;
          v14 = v10;
          v15 = *(unsigned __int8 *)(v11 + (unsigned __int16)v10) - 48;
          if (v15 > 9)
          {
            v16 = 0;
          }
          else
          {
            LOWORD(v16) = 0;
            v17 = 0;
            do
            {
              v16 = (int)((double)(unsigned __int16)v16
                                      + (double)(int)v15 * __exp10((double)(unsigned __int16)v17++));
              --v14;
              v11 = *((_QWORD *)v9 + 1);
              v15 = *(unsigned __int8 *)(v11 + (unsigned __int16)v14) - 48;
            }
            while (v15 < 0xA);
          }
          v20 = *(unsigned __int8 *)(v11 + (unsigned __int16)v13);
          if ((v20 - 48) > 9)
          {
            v19 = 0;
          }
          else
          {
            v19 = 0;
            do
            {
              v19 = v20 + 10 * v19 - 48;
              v20 = *(unsigned __int8 *)(v11 + (unsigned __int16)++v13);
            }
            while ((v20 - 48) < 0xA);
          }
          goto LABEL_25;
        }
      }
    }
    v16 = 200;
    v19 = 200;
LABEL_25:
    if (!(_DWORD)v5)
      (*(void (**)(int *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 16)
                                                                                     + 32)
                                                                         + 8))(&v21, a1, &v23, v16, v19);
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("Invalid image handle length %d", **a2);
      v18 = sub_1000544A0(4u);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        sub_1006CEE54();
    }
    return 1736;
  }
  return v5;
}

uint64_t sub_100100908(uint64_t a1, unsigned __int16 **a2, int a3)
{
  uint64_t v3;
  NSObject *v6;
  int v8;
  __int16 v9;
  uint64_t v10;

  if (a3 == 2)
  {
    if (!sub_100056080(qword_10097FA60))
      sub_100253460();
    sub_1002515E8(qword_10097FA60, 1);
    return 0;
  }
  else if (**a2 == 8)
  {
    v9 = 0;
    v8 = 0;
    sub_1001D99F8(a1, (uint64_t)&v8);
    v10 = 0;
    v3 = sub_100258BD0(*((_QWORD *)*a2 + 1), **a2, &v10, 8);
    if (!(_DWORD)v3)
      (*(void (**)(int *, uint64_t, uint64_t *))(*(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 16) + 32) + 16))(&v8, a1, &v10);
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("Invalid image handle length %d", **a2);
      v6 = sub_1000544A0(4u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CEE54();
    }
    return 1736;
  }
  return v3;
}

uint64_t sub_100100A50(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  const char *v12;
  int v13;
  const char *v14;
  const char *v15;
  unsigned __int16 v16;
  uint64_t v17;
  NSObject *v18;
  _QWORD v21[3];
  _QWORD v22[2];
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  sub_10025909C((uint64_t)&v24, 0x400uLL);
  v23 = 0;
  asprintf(&v23, "<image-properties version=\"1.0\" handle=\"%s\">\n", a2);
  sub_1000729B4((uint64_t)&v24, v23);
  free(v23);
  if (a6)
  {
    v11 = 0;
    do
    {
      v12 = "variant";
      if (!v11)
        v12 = "native";
      v13 = *(unsigned __int8 *)(a3 + v11);
      if (v13 == 2)
        v14 = "PNG";
      else
        v14 = "";
      if (v13 == 1)
        v15 = "JPEG";
      else
        v15 = v14;
      asprintf(&v23, "<%s encoding=\"%s\" pixel=\"%d*%d\" />\n", v12, v15, *(unsigned __int16 *)(a4 + 2 * v11), *(unsigned __int16 *)(a5 + 2 * v11));
      sub_1000729B4((uint64_t)&v24, v23);
      free(v23);
      ++v11;
    }
    while (a6 != v11);
  }
  asprintf(&v23, "</image-properties>\n");
  sub_1000729B4((uint64_t)&v24, v23);
  free(v23);
  v16 = WORD2(v24);
  sub_100251374(qword_10097FA60, v25, WORD2(v24));
  v22[1] = sub_10025155C(qword_10097FA60);
  v22[0] = v16;
  v21[0] = 0;
  v21[1] = v22;
  v21[2] = 0;
  v17 = sub_1001D9BB0(a1, (uint64_t)v21, 0);
  if ((_DWORD)v17)
  {
    if (sub_10005549C())
    {
      sub_100054530("OI_BIPSRV_GetImagePropertiesResponse failed with error %!", v17);
      v18 = sub_1000544A0(4u);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_100251574(qword_10097FA60, 1);
  }
  sub_1002590E8((uint64_t)&v24);
  return v17;
}

uint64_t sub_100100C44(int a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  NSObject *v6;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[2];

  sub_100251374(qword_10097FA60, a2, (unsigned __int16)a3);
  v12[1] = sub_10025155C(qword_10097FA60);
  v12[0] = (unsigned __int16)a3;
  v8 = 0u;
  v10 = v12;
  v11 = 0;
  v9 = a3;
  v5 = sub_1001D9BD0(a1, (uint64_t)&v8, 0);
  if ((_DWORD)v5)
  {
    if (sub_10005549C())
    {
      sub_100054530("OI_BIPSRV_GetImageResponse failed with error %!", v5);
      v6 = sub_1000544A0(4u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_100251574(qword_10097FA60, 1);
  }
  return v5;
}

uint64_t sub_100100D18(int a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v5;
  NSObject *v6;
  _QWORD v8[3];
  _QWORD v9[2];

  sub_100251374(qword_10097FA60, a2, a3);
  v9[1] = sub_10025155C(qword_10097FA60);
  v9[0] = a3;
  v8[0] = 0;
  v8[1] = v9;
  v8[2] = 0;
  v5 = sub_1001D9BB0(a1, (uint64_t)v8, 0);
  if ((_DWORD)v5)
  {
    if (sub_10005549C())
    {
      sub_100054530("OI_BIPSRV_GetLinkedThumbnailResponse failed with error %!", v5);
      v6 = sub_1000544A0(4u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_100251574(qword_10097FA60, 1);
  }
  return v5;
}

void sub_100100DE8(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100100E54;
  block[3] = &unk_10091A7A8;
  block[4] = a1;
  if (qword_10097FA68 != -1)
    dispatch_once(&qword_10097FA68, block);
}

uint64_t sub_100100E54(uint64_t result)
{
  qword_10097FA70 = *(_QWORD *)(result + 32);
  return result;
}

void sub_100100E64(int a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD block[4];
  int v10;

  if (a1 || qword_10097FA78)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_100100F04;
    block[3] = &unk_10091A7C8;
    v10 = a1;
    if (qword_10097FA78 != -1)
      dispatch_once(&qword_10097FA78, block);
  }
  else
  {
    v1 = qword_10097FA70;
    if (os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR))
      sub_1006CF090(v1, v2, v3, v4, v5, v6, v7, v8);
  }
}

void sub_100100F04(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(_DWORD *)(a1 + 32) - 1) >= 0xF9F)
  {
    v1 = qword_10097FA70;
    if (os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR))
      sub_1006CF0C4(v1, v2, v3, v4, v5, v6, v7, v8);
  }
}

uint64_t sub_100100F50(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  NSObject *v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  int v11;

  if (a2 <= 0xE)
  {
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    sub_1006CF0F8();
    return 0;
  }
  if (!a1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 179, "buf");
  v8 = a1;
  v9 = a2;
  v10 = a2;
  v4 = *(unsigned __int8 *)(a1 + 13);
  v11 = 65551;
  v5 = *(unsigned __int8 *)(a1 + 14);
  result = (uint64_t)sub_1000499C8(v4);
  if (result)
  {
    v6 = a2 - 15;
    if (v6 < v5)
    {
      v7 = qword_10097FA70;
      result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
      sub_1006CF16C(v6, v5, v7);
      return 0;
    }
    if (v4 == 255)
      return 0;
    result = 1;
    switch(v4)
    {
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xDu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x16u:
      case 0x17u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x38u:
      case 0x39u:
      case 0x3Cu:
      case 0x3Du:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x4Fu:
      case 0x50u:
      case 0x52u:
      case 0x54u:
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
        return result;
      case 7u:
        result = sub_1001010F0(&v8);
        break;
      case 8u:
        result = sub_10010130C(&v8);
        break;
      case 0xCu:
        result = sub_100101A04(&v8);
        break;
      case 0xEu:
        result = sub_1001016F8(&v8);
        break;
      case 0x15u:
        result = sub_100101C00(&v8);
        break;
      case 0x18u:
        result = sub_100101EE4(&v8);
        break;
      case 0x2Fu:
        result = sub_1001020DC(&v8);
        break;
      case 0x33u:
        result = sub_1001022F4(&v8);
        break;
      case 0x3Bu:
        result = sub_1001024EC(&v8);
        break;
      case 0x3Eu:
        result = sub_1001026E4((uint64_t)&v8);
        break;
      case 0x51u:
        result = sub_100102830(&v8);
        break;
      case 0x59u:
        result = sub_100101500(&v8);
        break;
      default:
        return 0;
    }
  }
  return result;
}

BOOL sub_1001010F0(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1541, "_Bool Filter_OI_DHCI_REMOTE_NAME_REQUEST_COMPLETE_EVENT(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0xFE)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CF1EC();
      return 0;
    }
    return result;
  }
  if (v2 <= 6)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1547, "ByteStream_NumReadBytesAvail(*pBs) >= (1 + 6)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 7;
  *((_WORD *)a1 + 6) = v1 + 7;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1550, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1551, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 247)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1554, "ByteStream_NumReadBytesAvail(*pBs) >= (248)");
  v6 = v5 + v4;
  *(_QWORD *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)v6 = 0u;
  *((_WORD *)a1 + 6) += 248;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1556, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1558, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v1 + 255;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1559, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_10010130C(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 v7;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1565, "_Bool Filter_OI_DHCI_ENCRYPTION_CHANGE_EVENT(OI_BYTE_STREAM *)");
    goto LABEL_19;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 3)
  {
LABEL_19:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CF26C();
      return 0;
    }
    return result;
  }
  if (v2 <= 2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1571, "ByteStream_NumReadBytesAvail(*pBs) >= (1+2)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 3;
  *((_WORD *)a1 + 6) = v1 + 3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1574, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1575, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if (v3 <= v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1578, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  *(_BYTE *)(v5 + (unsigned __int16)(v1 + 3)) = 0;
  ++*((_WORD *)a1 + 6);
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1580, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v6 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1582, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v7 = v1 + 4;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v6;
  if (v6 < v7)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1583, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v7;
  return 1;
}

BOOL sub_100101500(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 v7;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1590, "_Bool Filter_OI_DHCI_ENCRYPTION_CHANGE_V2_EVENT(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 4)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CF2EC();
      return 0;
    }
    return result;
  }
  if (v2 <= 2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1596, "ByteStream_NumReadBytesAvail(*pBs) >= (1+2)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 3;
  *((_WORD *)a1 + 6) = v1 + 3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1599, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1600, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1604, "ByteStream_NumReadBytesAvail(*pBs) >= (1 + 1)");
  *(_WORD *)(v5 + (unsigned __int16)(v1 + 3)) = 0;
  *((_WORD *)a1 + 6) += 2;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1606, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v6 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1608, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v7 = v1 + 5;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v6;
  if (v6 < v7)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1609, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v7;
  return 1;
}

BOOL sub_1001016F8(uint64_t *a1)
{
  unsigned int v1;
  _BOOL8 result;
  int v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v1 = *((unsigned __int16 *)a1 + 5);
  if (v1 <= 0xE)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1193, "(size_t)(13 + 2) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = 15;
  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1194, "_Bool Filter_OI_DHCI_COMMAND_COMPLETE_EVENT(OI_BYTE_STREAM *)");
LABEL_5:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1006CF36C();
    return 0;
  }
  if (v1 - 15 <= 3)
    goto LABEL_5;
  if (*((_BYTE *)a1 + 14) != 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1202, "(*pBs).__RWFlag == BYTESTREAM_READ");
  if (v1 <= 0xF)
  {
    *((_BYTE *)a1 + 15) = 1;
    v5 = qword_10097FA70;
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CF3EC(v5, v6, v7, v8, v9, v10, v11, v12);
      return 0;
    }
  }
  else
  {
    *((_WORD *)a1 + 6) = 16;
    if (v1 <= 0x11)
      sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1204, "ByteStream_NumReadBytesAvail(*pBs) >= 2");
    v4 = *(unsigned __int16 *)(*a1 + 16);
    *((_WORD *)a1 + 6) = 18;
    result = 1;
    if (v4 > 4096)
    {
      if (v4 <= 0x2000)
      {
        if ((v4 - 5121) <= 0xA)
        {
          if (((1 << (v4 - 1)) & 0x777) != 0)
            return result;
          if (v4 == 5128)
            return sub_100107EC0(a1);
        }
        if ((v4 - 4097) <= 9)
        {
          if (((1 << (v4 - 1)) & 0x31F) != 0)
            return result;
          if (v4 == 4103)
            return sub_100107CCC(a1);
        }
        if ((v4 - 6145) > 8 || ((1 << (v4 - 1)) & 0x1CF) == 0)
          return 0;
      }
      else
      {
        switch(v4)
        {
          case 8193:
          case 8194:
          case 8195:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8203:
          case 8204:
          case 8206:
          case 8207:
          case 8208:
          case 8209:
          case 8210:
          case 8212:
          case 8213:
          case 8218:
          case 8219:
          case 8220:
          case 8221:
          case 8222:
          case 8223:
          case 8224:
          case 8225:
          case 8226:
          case 8227:
          case 8228:
          case 8231:
          case 8232:
          case 8233:
          case 8234:
          case 8235:
          case 8236:
          case 8237:
          case 8238:
          case 8239:
          case 8240:
          case 8241:
          case 8243:
          case 8244:
          case 8245:
          case 8246:
          case 8247:
          case 8248:
          case 8249:
          case 8250:
          case 8251:
          case 8252:
          case 8253:
          case 8254:
          case 8255:
          case 8256:
          case 8257:
          case 8258:
          case 8260:
          case 8261:
          case 8262:
          case 8263:
          case 8264:
          case 8265:
          case 8266:
          case 8281:
          case 8282:
          case 8283:
          case 8284:
          case 8285:
          case 8288:
          case 8290:
          case 8291:
          case 8293:
          case 8295:
          case 8300:
          case 8302:
          case 8303:
          case 8308:
          case 8317:
          case 8318:
          case 8320:
          case 8321:
          case 8322:
          case 8323:
          case 8324:
          case 8325:
          case 8326:
          case 8329:
            return result;
          case 8215:
            result = sub_1001080B4(a1);
            break;
          case 8216:
            result = sub_1001082B0(a1);
            break;
          default:
            return 0;
        }
      }
    }
    else if (v4 <= 3072)
    {
      v13 = (v4 - 1032) > 0x3D || ((1 << (v4 - 8)) & 0x200819F801040079) == 0;
      if (v13 && ((v4 - 2057) > 8 || ((1 << (v4 - 9)) & 0x179) == 0) && (v4 - 1026) >= 3)
        return 0;
    }
    else
    {
      switch(v4)
      {
        case 3073:
        case 3075:
        case 3077:
        case 3080:
        case 3082:
        case 3083:
        case 3084:
        case 3085:
        case 3089:
        case 3090:
        case 3091:
        case 3093:
        case 3094:
        case 3095:
        case 3096:
        case 3097:
        case 3098:
        case 3099:
        case 3100:
        case 3101:
        case 3102:
        case 3103:
        case 3104:
        case 3105:
        case 3106:
        case 3107:
        case 3108:
        case 3109:
        case 3110:
        case 3111:
        case 3112:
        case 3113:
        case 3114:
        case 3115:
        case 3116:
        case 3117:
        case 3118:
        case 3119:
        case 3121:
        case 3123:
        case 3126:
        case 3127:
        case 3128:
        case 3129:
        case 3130:
        case 3131:
        case 3132:
        case 3133:
        case 3134:
        case 3135:
        case 3138:
        case 3139:
        case 3140:
        case 3141:
        case 3142:
        case 3143:
        case 3144:
        case 3145:
        case 3154:
        case 3157:
        case 3158:
        case 3160:
        case 3161:
        case 3162:
        case 3163:
        case 3168:
        case 3169:
        case 3170:
        case 3171:
        case 3173:
        case 3174:
        case 3175:
        case 3176:
        case 3177:
        case 3178:
        case 3180:
        case 3181:
        case 3182:
        case 3183:
        case 3184:
        case 3185:
        case 3186:
        case 3187:
        case 3193:
        case 3194:
        case 3195:
        case 3196:
        case 3204:
          return result;
        case 3081:
          result = sub_10010729C(a1);
          break;
        case 3092:
          result = sub_100107490(a1);
          break;
        case 3153:
          result = sub_1001076B0(a1);
          break;
        case 3159:
          result = sub_1001078C8(a1);
          break;
        case 3197:
          result = sub_100107AC8(a1);
          break;
        default:
          return 0;
      }
    }
  }
  return result;
}

BOOL sub_100101A04(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1616, "_Bool Filter_OI_DHCI_READ_REMOTE_VERSION_INFORMATION_COMPLETE_EVENT(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 7)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CF45C();
      return 0;
    }
    return result;
  }
  if (v2 <= 2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1621, "ByteStream_NumReadBytesAvail(*pBs) >= (1 + 2)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 3;
  *((_WORD *)a1 + 6) = v1 + 3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1624, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1625, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1630, "ByteStream_NumReadBytesAvail(*pBs) >= (1 + 2 + 2)");
  v6 = v5 + v4;
  *(_BYTE *)(v6 + 4) = 0;
  *(_DWORD *)v6 = 0;
  *((_WORD *)a1 + 6) += 5;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1632, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1634, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v1 + 8;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1635, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

uint64_t sub_100101C00(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int16 v21;
  _QWORD *v22;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1642, "_Bool Filter_OI_DHCI_RETURN_LINK_KEYS_EVENT(OI_BYTE_STREAM *)");
    goto LABEL_4;
  }
  v1 = *((unsigned __int16 *)a1 + 5);
  v2 = *((unsigned __int16 *)a1 + 6);
  if (v1 == (_DWORD)v2)
  {
LABEL_4:
    if (os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR))
      sub_1006CF4D0();
    return 0;
  }
  if (*((_BYTE *)a1 + 14) != 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1648, "(*pBs).__RWFlag == BYTESTREAM_READ");
  if (v1 <= v2)
  {
    *((_BYTE *)a1 + 15) = 1;
    v11 = qword_10097FA70;
    if (os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR))
      sub_1006CF5DC(v11, v12, v13, v14, v15, v16, v17, v18);
    return 0;
  }
  v5 = *a1;
  v6 = v2 + 1;
  *((_WORD *)a1 + 6) = v2 + 1;
  v7 = *(unsigned __int8 *)(v5 + v2);
  v8 = *((unsigned __int16 *)a1 + 4);
  v9 = ~(_DWORD)v2 + v1;
  v10 = 22 * v7;
  if (v9 < 22 * v7)
  {
    if (os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR))
      sub_1006CF554(v9, v10);
    return 0;
  }
  if (!*(_BYTE *)(v5 + v2))
    return 1;
  v19 = 0;
  LOWORD(v20) = *((_WORD *)a1 + 4);
  do
  {
    if (*((_BYTE *)a1 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1654, "_Bool Filter_OI_DHCI_RETURN_LINK_KEYS_EVENT(OI_BYTE_STREAM *)");
LABEL_33:
      sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1654, "ByteStream_NumReadBytesAvail(*pBs) >= (6)");
    }
    if ((unsigned __int16)v1 - v6 <= 5)
      goto LABEL_33;
    v21 = v6 + 6;
    *((_WORD *)a1 + 6) = v6 + 6;
    *((_BYTE *)a1 + 14) = 15;
    if (!(_WORD)v20)
      sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1657, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
    *((_WORD *)a1 + 6) = 0;
    *((_BYTE *)a1 + 14) = 2;
    *((_WORD *)a1 + 5) = v20;
    if ((unsigned __int16)(v6 + 6) > (unsigned __int16)v20)
      sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1658, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
    *((_WORD *)a1 + 6) = v21;
    if ((unsigned __int16)v20 - v21 <= 15)
      sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1661, "ByteStream_NumReadBytesAvail(*pBs) >= (16)");
    v22 = (_QWORD *)(v5 + v21);
    *v22 = 0;
    v22[1] = 0;
    *((_WORD *)a1 + 6) += 16;
    if (v8 > *((unsigned __int16 *)a1 + 5))
      sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1663, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
    *((_WORD *)a1 + 6) = v8;
    if (*((_BYTE *)a1 + 14) == 2)
      *((_WORD *)a1 + 5) = v8;
    *((_BYTE *)a1 + 14) = 15;
    v5 = *a1;
    if (!*a1 || (v20 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
      sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1665, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
    v6 += 22;
    *((_WORD *)a1 + 6) = 0;
    *((_BYTE *)a1 + 14) = 1;
    *((_WORD *)a1 + 5) = v20;
    if (v20 < v6)
      sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1666, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
    *((_WORD *)a1 + 6) = v6;
    ++v19;
    v3 = 1;
    LOWORD(v1) = v20;
  }
  while (v19 < v7);
  return v3;
}

BOOL sub_100101EE4(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1674, "_Bool Filter_OI_DHCI_LINK_KEY_NOTIFICATION_EVENT(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0x16)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CF64C();
      return 0;
    }
    return result;
  }
  if (v2 <= 5)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1679, "ByteStream_NumReadBytesAvail(*pBs) >= (6)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 6;
  *((_WORD *)a1 + 6) = v1 + 6;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1682, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1683, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 15)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1686, "ByteStream_NumReadBytesAvail(*pBs) >= (16)");
  v6 = (_QWORD *)(v5 + v4);
  *v6 = 0;
  v6[1] = 0;
  *((_WORD *)a1 + 6) += 16;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1688, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1690, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v1 + 22;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1691, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_1001020DC(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  _OWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1698, "_Bool Filter_OI_DHCI_EXTENDED_INQUIRY_RESULT_EVENT(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0xFE)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CF6CC();
      return 0;
    }
    return result;
  }
  if (v2 <= 14)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1703, "ByteStream_NumReadBytesAvail(*pBs) >= (1+6+1+1+3+2+1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 15;
  *((_WORD *)a1 + 6) = v1 + 15;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1706, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1707, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 239)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1710, "ByteStream_NumReadBytesAvail(*pBs) >= (240)");
  v6 = (_OWORD *)(v5 + v4);
  v6[13] = 0u;
  v6[14] = 0u;
  v6[11] = 0u;
  v6[12] = 0u;
  v6[9] = 0u;
  v6[10] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  *v6 = 0u;
  *((_WORD *)a1 + 6) += 240;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1712, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1714, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v1 + 255;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1715, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_1001022F4(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 v7;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1722, "_Bool Filter_OI_DHCI_USER_CONFIRMATION_REQUEST_EVENT(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 9)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CF74C();
      return 0;
    }
    return result;
  }
  if (v2 <= 5)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1727, "ByteStream_NumReadBytesAvail(*pBs) >= (6)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 6;
  *((_WORD *)a1 + 6) = v1 + 6;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1730, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1731, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1734, "ByteStream_NumReadBytesAvail(*pBs) >= (4)");
  *(_DWORD *)(v5 + (unsigned __int16)(v1 + 6)) = 0;
  *((_WORD *)a1 + 6) += 4;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1736, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v6 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1738, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v7 = v1 + 10;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v6;
  if (v6 < v7)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1739, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v7;
  return 1;
}

BOOL sub_1001024EC(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 v7;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1746, "_Bool Filter_OI_DHCI_USER_PASSKEY_NOTIFICATION_EVENT(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 9)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CF7CC();
      return 0;
    }
    return result;
  }
  if (v2 <= 5)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1751, "ByteStream_NumReadBytesAvail(*pBs) >= (6)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 6;
  *((_WORD *)a1 + 6) = v1 + 6;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1754, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1755, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1758, "ByteStream_NumReadBytesAvail(*pBs) >= (4)");
  *(_DWORD *)(v5 + (unsigned __int16)(v1 + 6)) = 0;
  *((_WORD *)a1 + 6) += 4;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1760, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v6 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1762, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v7 = v1 + 10;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v6;
  if (v6 < v7)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1763, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v7;
  return 1;
}

uint64_t sub_1001026E4(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;

  v1 = *(unsigned __int16 *)(a1 + 10);
  if (v1 <= 0xE)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1100, "(size_t)(13 + 2) <= (size_t)((*pBs).__size)");
  *(_WORD *)(a1 + 12) = 15;
  if (*(_BYTE *)(a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1101, "_Bool Filter_OI_DHCI_LE_META_EVENT(OI_BYTE_STREAM *)");
LABEL_5:
    if (os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR))
      sub_1006CF84C();
    return 0;
  }
  if (v1 == 15)
    goto LABEL_5;
  if (*(_BYTE *)(a1 + 14) != 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1108, "(*pBs).__RWFlag == BYTESTREAM_READ");
  v4 = *(_QWORD *)a1;
  *(_WORD *)(a1 + 12) = 16;
  v5 = *(unsigned __int8 *)(v4 + 15) - 1;
  v2 = 1;
  switch(v5)
  {
    case 0:
    case 2:
    case 5:
    case 6:
    case 9:
    case 10:
    case 11:
    case 13:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 23:
    case 31:
    case 32:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      return v2;
    case 1:
      result = sub_100106114((uint64_t *)a1);
      break;
    case 3:
      result = sub_1001064A0((uint64_t *)a1);
      break;
    case 4:
      result = sub_100106698((uint64_t *)a1);
      break;
    case 7:
      result = sub_100106894((uint64_t *)a1);
      break;
    case 8:
      result = sub_100106A98((uint64_t *)a1);
      break;
    case 12:
      result = sub_100106C98((uint64_t *)a1);
      break;
    case 14:
      result = sub_100107024((uint64_t *)a1);
      break;
    default:
      return 0;
  }
  return result;
}

BOOL sub_100102830(uint64_t *a1)
{
  unsigned int v2;
  int v3;
  int v4;
  _BOOL8 result;
  unsigned int v6;
  uint64_t v7;
  unsigned __int16 v8;
  size_t v9;
  unsigned int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1770, "_Bool Filter_OI_DHCI_CONNECTIONLESS_PERIPHERAL_BROADCAST_RECEIVE_EVENT(OI_BYTE_STREAM *)");
LABEL_4:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1006CF8D0();
    return 0;
  }
  v2 = *((unsigned __int16 *)a1 + 5);
  v3 = *((unsigned __int16 *)a1 + 6);
  v4 = v2 - v3;
  if (v2 - v3 <= 0x11)
    goto LABEL_4;
  if (v4 <= 16)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1782, "ByteStream_NumReadBytesAvail(*pBs) >= (17)");
  v6 = *((unsigned __int16 *)a1 + 4);
  *((_WORD *)a1 + 6) = v3 + 17;
  if (*((_BYTE *)a1 + 14) != 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1784, "(*pBs).__RWFlag == BYTESTREAM_READ");
  if (v2 <= (unsigned __int16)(v3 + 17))
  {
    *((_BYTE *)a1 + 15) = 1;
    v11 = qword_10097FA70;
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CF9D8(v11, v12, v13, v14, v15, v16, v17, v18);
      return 0;
    }
  }
  else
  {
    v7 = *a1;
    v8 = v3 + 18;
    *((_WORD *)a1 + 6) = v3 + 18;
    v9 = *(unsigned __int8 *)(v7 + (unsigned __int16)(v3 + 17));
    v10 = v4 - 18;
    if (v10 >= v9)
    {
      *((_BYTE *)a1 + 14) = 15;
      if (!v6)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1791, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
      *((_WORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 14) = 2;
      *((_WORD *)a1 + 5) = v6;
      if (v6 < v8)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1792, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v8;
      if ((int)(v6 - v8) < (int)v9)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1795, "ByteStream_NumReadBytesAvail(*pBs) >= (dataLength)");
      bzero((void *)(v7 + v8), v9);
      *((_WORD *)a1 + 6) += v9;
      if (v6 > *((unsigned __int16 *)a1 + 5))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1797, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v6;
      if (*((_BYTE *)a1 + 14) == 2)
        *((_WORD *)a1 + 5) = v6;
      *((_BYTE *)a1 + 14) = 15;
      if (!*a1 || (v19 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1799, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
      *((_WORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 14) = 1;
      *((_WORD *)a1 + 5) = v19;
      if (v19 < (unsigned __int16)(v8 + v9))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1800, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v8 + v9;
      return 1;
    }
    else
    {
      result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1006CF950(v10, v9);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100102ACC(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  const char *v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;

  if (!a1)
  {
    v6 = "buf";
    goto LABEL_71;
  }
  if (!a2)
  {
    v6 = "(numBytes) > 0";
LABEL_71:
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 354, v6);
  }
  v7 = a1;
  v8 = a2;
  v11 = 1;
  v9 = a2;
  if (a2 <= 0xF)
  {
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    sub_1006CFA48();
    return 0;
  }
  v3 = *(unsigned __int8 *)(a1 + 13);
  v4 = *(unsigned __int8 *)(a1 + 14);
  v10 = 16;
  if ((~v4 & 0xFC) == 0)
    return 0;
  v5 = v3 | (v4 << 8);
  result = 1;
  if (v5 > 8199)
  {
    if (v5 <= 8230)
    {
      if (v5 > 8216)
      {
        switch(v5)
        {
          case 8217:
            return sub_1001042EC(&v7);
          case 8218:
            return sub_1001044EC(&v7);
          case 8230:
            return sub_1001046E4((uint64_t)&v7);
        }
      }
      else
      {
        switch(v5)
        {
          case 8200:
            return sub_100103DAC(&v7);
          case 8201:
            return sub_100103FB0(&v7);
          case 8215:
            return sub_1001041B4((uint64_t)&v7);
        }
      }
    }
    else if (v5 <= 8254)
    {
      switch(v5)
      {
        case 8231:
          return sub_100104820(&v7);
        case 8247:
          return sub_1001049BC(&v7);
        case 8248:
          return sub_100104BF0(&v7);
      }
    }
    else if (v5 > 8296)
    {
      if (v5 == 8297)
      {
        return sub_1001051F0(&v7);
      }
      else if (v5 == 8299)
      {
        return sub_100105388(&v7);
      }
    }
    else if (v5 == 8255)
    {
      return sub_100104E24(&v7);
    }
    else if (v5 == 8296)
    {
      return sub_100105058(&v7);
    }
  }
  else if (v5 > 3081)
  {
    if (v5 <= 3153)
    {
      switch(v5)
      {
        case 3082:
          return sub_100105520((uint64_t)&v7);
        case 3089:
          return sub_100105674(&v7);
        case 3091:
          return sub_1001058E8(&v7);
      }
    }
    else if (v5 > 3172)
    {
      if (v5 == 3173)
      {
        return sub_100105ED4(&v7);
      }
      else if (v5 == 3204)
      {
        return sub_10010600C((uint64_t)&v7);
      }
    }
    else if (v5 == 3154)
    {
      return sub_100105AC4(&v7);
    }
    else if (v5 == 3168)
    {
      return sub_100105CE0(&v7);
    }
  }
  else if (v5 <= 1069)
  {
    if (v5 == 1035)
    {
      return sub_100102E40(&v7);
    }
    else if (v5 == 1037)
    {
      return sub_100103038(&v7);
    }
  }
  else
  {
    switch(v5)
    {
      case 1070:
        result = sub_100103230(&v7);
        break;
      case 1071:
      case 1073:
      case 1074:
      case 1075:
      case 1076:
        return result;
      case 1072:
        result = sub_100103428(&v7);
        break;
      case 1077:
        result = sub_100103824(&v7);
        break;
      case 1078:
        result = sub_100103AE8(&v7);
        break;
      default:
        if (v5 == 1093)
          result = sub_100103624(&v7);
        break;
    }
  }
  return result;
}

BOOL sub_100102E40(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2306, "_Bool Filter_OI_DHCI_LINK_KEY_REQ_REPLY_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0x15)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CFABC();
      return 0;
    }
    return result;
  }
  if (v2 <= 5)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2311, "ByteStream_NumReadBytesAvail(*pBs) >= (6)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 6;
  *((_WORD *)a1 + 6) = v1 + 6;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2314, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2315, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 15)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2318, "ByteStream_NumReadBytesAvail(*pBs) >= (16)");
  v6 = (_QWORD *)(v5 + v4);
  *v6 = 0;
  v6[1] = 0;
  *((_WORD *)a1 + 6) += 16;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2320, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2322, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v1 + 22;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2323, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_100103038(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2330, "_Bool Filter_OI_DHCI_PIN_CODE_REQ_REPLY_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0x16)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CFB30();
      return 0;
    }
    return result;
  }
  if (v2 <= 6)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2335, "ByteStream_NumReadBytesAvail(*pBs) >= (6 + 1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 7;
  *((_WORD *)a1 + 6) = v1 + 7;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2338, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2339, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 15)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2342, "ByteStream_NumReadBytesAvail(*pBs) >= (16)");
  v6 = (_QWORD *)(v5 + v4);
  *v6 = 0;
  v6[1] = 0;
  *((_WORD *)a1 + 6) += 16;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2344, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2346, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v1 + 23;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2347, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_100103230(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 v7;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2354, "_Bool Filter_OI_DHCI_USER_PASSKEY_REQ_REPLY_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 9)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CFBB0();
      return 0;
    }
    return result;
  }
  if (v2 <= 5)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2359, "ByteStream_NumReadBytesAvail(*pBs) >= (6)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 6;
  *((_WORD *)a1 + 6) = v1 + 6;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2362, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2363, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2366, "ByteStream_NumReadBytesAvail(*pBs) >= (4)");
  *(_DWORD *)(v5 + (unsigned __int16)(v1 + 6)) = 0;
  *((_WORD *)a1 + 6) += 4;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2368, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v6 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2370, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v7 = v1 + 10;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v6;
  if (v6 < v7)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2371, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v7;
  return 1;
}

BOOL sub_100103428(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  _OWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2378, "_Bool Filter_OI_DHCI_REMOTE_OOB_DATA_REQ_REPLY_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0x25)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CFC30();
      return 0;
    }
    return result;
  }
  if (v2 <= 5)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2383, "ByteStream_NumReadBytesAvail(*pBs) >= (6)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 6;
  *((_WORD *)a1 + 6) = v1 + 6;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2386, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2387, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 31)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2391, "ByteStream_NumReadBytesAvail(*pBs) >= (16 + 16)");
  v6 = (_OWORD *)(v5 + v4);
  *v6 = 0u;
  v6[1] = 0u;
  *((_WORD *)a1 + 6) += 32;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2393, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2395, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v1 + 38;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2396, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_100103624(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  _OWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2467, "_Bool Filter_OI_DHCI_REMOTE_OOB_EXTENDED_DATA_REQ_REPLY_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0x45)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CFCA4();
      return 0;
    }
    return result;
  }
  if (v2 <= 5)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2472, "ByteStream_NumReadBytesAvail(*pBs) >= (6)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 6;
  *((_WORD *)a1 + 6) = v1 + 6;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2475, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2476, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 63)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2482, "ByteStream_NumReadBytesAvail(*pBs) >= (16 + 16 + 16 + 16)");
  v6 = (_OWORD *)(v5 + v4);
  v6[2] = 0u;
  v6[3] = 0u;
  *v6 = 0u;
  v6[1] = 0u;
  *((_WORD *)a1 + 6) += 64;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2484, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2486, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v1 + 70;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2487, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_100103824(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _BOOL8 result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unsigned __int16 v9;
  unsigned int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2403, "_Bool Filter_OI_DHCI_CMD_ID_CREATE_PHYSICAL_LINK_OPCODE(OI_BYTE_STREAM *)");
LABEL_4:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1006CFD18();
    return 0;
  }
  v2 = *((unsigned __int16 *)a1 + 5);
  v3 = *((unsigned __int16 *)a1 + 6);
  if (v2 - v3 <= 2)
    goto LABEL_4;
  if (v2 <= v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2408, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  v5 = *((unsigned __int16 *)a1 + 4);
  v6 = v3 + 1;
  *((_WORD *)a1 + 6) = v3 + 1;
  if (*((_BYTE *)a1 + 14) != 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2410, "(*pBs).__RWFlag == BYTESTREAM_READ");
  if (v2 <= (unsigned __int16)v6)
  {
    *((_BYTE *)a1 + 15) = 1;
    v11 = qword_10097FA70;
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CFE20(v11, v12, v13, v14, v15, v16, v17, v18);
      return 0;
    }
  }
  else
  {
    v7 = *a1;
    *((_WORD *)a1 + 6) = v3 + 2;
    if (v2 <= (unsigned __int16)(v3 + 2))
      sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2412, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
    v8 = *(unsigned __int8 *)(v7 + v6);
    v9 = v3 + 3;
    *((_WORD *)a1 + 6) = v3 + 3;
    v10 = v2 - v3 - 3;
    if (v10 >= v8)
    {
      *((_BYTE *)a1 + 14) = 15;
      if (!v5)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2419, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
      *((_WORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 14) = 2;
      *((_WORD *)a1 + 5) = v5;
      if (v5 <= (unsigned __int16)(v3 + 2))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2420, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v9;
      if ((int)(v5 - v9) < (int)v8)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2423, "ByteStream_NumReadBytesAvail(*pBs) >= (ampKeyLength)");
      bzero((void *)(v7 + v9), v8);
      *((_WORD *)a1 + 6) += v8;
      if (v5 > *((unsigned __int16 *)a1 + 5))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2425, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v5;
      if (*((_BYTE *)a1 + 14) == 2)
        *((_WORD *)a1 + 5) = v5;
      *((_BYTE *)a1 + 14) = 15;
      if (!*a1 || (v19 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2427, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
      *((_WORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 14) = 1;
      *((_WORD *)a1 + 5) = v19;
      if (v19 < (unsigned __int16)(v9 + v8))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2428, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v9 + v8;
      return 1;
    }
    else
    {
      result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1006CFD98(v10, v8);
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_100103AE8(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _BOOL8 result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unsigned __int16 v9;
  unsigned int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2435, "_Bool Filter_OI_DHCI_CMD_ID_ACCEPT_PHYSICAL_LINK_OPCODE(OI_BYTE_STREAM *)");
LABEL_4:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1006CFE90();
    return 0;
  }
  v2 = *((unsigned __int16 *)a1 + 5);
  v3 = *((unsigned __int16 *)a1 + 6);
  if (v2 - v3 <= 2)
    goto LABEL_4;
  if (v2 <= v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2440, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  v5 = *((unsigned __int16 *)a1 + 4);
  v6 = v3 + 1;
  *((_WORD *)a1 + 6) = v3 + 1;
  if (*((_BYTE *)a1 + 14) != 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2442, "(*pBs).__RWFlag == BYTESTREAM_READ");
  if (v2 <= (unsigned __int16)v6)
  {
    *((_BYTE *)a1 + 15) = 1;
    v11 = qword_10097FA70;
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006CFF98(v11, v12, v13, v14, v15, v16, v17, v18);
      return 0;
    }
  }
  else
  {
    v7 = *a1;
    *((_WORD *)a1 + 6) = v3 + 2;
    if (v2 <= (unsigned __int16)(v3 + 2))
      sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2444, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
    v8 = *(unsigned __int8 *)(v7 + v6);
    v9 = v3 + 3;
    *((_WORD *)a1 + 6) = v3 + 3;
    v10 = v2 - v3 - 3;
    if (v10 >= v8)
    {
      *((_BYTE *)a1 + 14) = 15;
      if (!v5)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2451, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
      *((_WORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 14) = 2;
      *((_WORD *)a1 + 5) = v5;
      if (v5 <= (unsigned __int16)(v3 + 2))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2452, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v9;
      if ((int)(v5 - v9) < (int)v8)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2455, "ByteStream_NumReadBytesAvail(*pBs) >= (ampKeyLength)");
      bzero((void *)(v7 + v9), v8);
      *((_WORD *)a1 + 6) += v8;
      if (v5 > *((unsigned __int16 *)a1 + 5))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2457, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v5;
      if (*((_BYTE *)a1 + 14) == 2)
        *((_WORD *)a1 + 5) = v5;
      *((_BYTE *)a1 + 14) = 15;
      if (!*a1 || (v19 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2459, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
      *((_WORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 14) = 1;
      *((_WORD *)a1 + 5) = v19;
      if (v19 < (unsigned __int16)(v9 + v8))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2460, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v9 + v8;
      return 1;
    }
    else
    {
      result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1006CFF10(v10, v8);
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_100103DAC(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2638, "_Bool Filter_OI_DHCI_CMD_ID_LE_SET_ADVERTISING_DATA_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 5);
  v2 = *((unsigned __int16 *)a1 + 6);
  if (v1 - v2 <= 0x1F)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0008();
      return 0;
    }
    return result;
  }
  if (v1 <= v2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2643, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v2 + 1;
  *((_WORD *)a1 + 6) = v2 + 1;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2646, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v2 >= v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2647, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 30)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2650, "ByteStream_NumReadBytesAvail(*pBs) >= (31)");
  v6 = (_QWORD *)(v5 + v4);
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)((char *)v6 + 23) = 0;
  v6[2] = 0;
  *((_WORD *)a1 + 6) += 31;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2652, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2654, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v2 + 32;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2655, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_100103FB0(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2662, "_Bool Filter_OI_DHCI_CMD_ID_LE_SET_SCAN_RESPONSE_DATA_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 5);
  v2 = *((unsigned __int16 *)a1 + 6);
  if (v1 - v2 <= 0x1F)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0088();
      return 0;
    }
    return result;
  }
  if (v1 <= v2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2667, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v2 + 1;
  *((_WORD *)a1 + 6) = v2 + 1;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2670, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v2 >= v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2671, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 30)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2674, "ByteStream_NumReadBytesAvail(*pBs) >= (31)");
  v6 = (_QWORD *)(v5 + v4);
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)((char *)v6 + 23) = 0;
  v6[2] = 0;
  *((_WORD *)a1 + 6) += 31;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2676, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2678, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v2 + 32;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2679, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_1001041B4(uint64_t a1)
{
  unsigned int v1;
  _OWORD *v2;
  BOOL v3;
  _BOOL8 result;

  if (*(_BYTE *)(a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2686, "_Bool Filter_OI_DHCI_CMD_ID_LE_ENCRYPT_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_13;
  }
  if (*(unsigned __int16 *)(a1 + 10) - *(unsigned __int16 *)(a1 + 12) <= 0x1F)
  {
LABEL_13:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0108();
      return 0;
    }
    return result;
  }
  v1 = *(unsigned __int16 *)(a1 + 8);
  v2 = *(_OWORD **)a1;
  if (*(_QWORD *)a1)
    v3 = v1 == 0;
  else
    v3 = 1;
  if (v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2691, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *(_BYTE *)(a1 + 14) = 2;
  *(_WORD *)(a1 + 10) = v1;
  *(_WORD *)(a1 + 12) = 0;
  if (v1 <= 0x1F)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2696, "ByteStream_NumReadBytesAvail(*pBs) >= (16 + 16)");
  *v2 = 0u;
  v2[1] = 0u;
  *(_WORD *)(a1 + 12) += 32;
  if (v1 > *(unsigned __int16 *)(a1 + 10))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2698, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *(_WORD *)(a1 + 12) = v1;
  if (*(_BYTE *)(a1 + 14) == 2)
    *(_WORD *)(a1 + 10) = v1;
  *(_BYTE *)(a1 + 14) = 15;
  return 1;
}

BOOL sub_1001042EC(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2706, "_Bool Filter_OI_DHCI_CMD_ID_LE_START_ENCRYPTION_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0x1B)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0188();
      return 0;
    }
    return result;
  }
  if (v2 <= 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2711, "ByteStream_NumReadBytesAvail(*pBs) >= (2)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 2;
  *((_WORD *)a1 + 6) = v1 + 2;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2714, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2715, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 25)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2720, "ByteStream_NumReadBytesAvail(*pBs) >= (8 + 2 + 16)");
  v6 = v5 + v4;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_WORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *((_WORD *)a1 + 6) += 26;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2722, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2724, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v1 + 28;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2725, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_1001044EC(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2732, "_Bool Filter_OI_DHCI_CMD_ID_LE_LONG_TERM_KEY_REQUEST_REPLY_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0x11)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D01FC();
      return 0;
    }
    return result;
  }
  if (v2 <= 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2737, "ByteStream_NumReadBytesAvail(*pBs) >= (2)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 2;
  *((_WORD *)a1 + 6) = v1 + 2;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2740, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2741, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 15)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2744, "ByteStream_NumReadBytesAvail(*pBs) >= (16)");
  v6 = (_QWORD *)(v5 + v4);
  *v6 = 0;
  v6[1] = 0;
  *((_WORD *)a1 + 6) += 16;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2746, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2748, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v1 + 18;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2749, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_1001046E4(uint64_t a1)
{
  unsigned int v1;
  _OWORD *v2;
  BOOL v3;
  _BOOL8 result;

  if (*(_BYTE *)(a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2756, "_Bool Filter_OI_DHCI_CMD_ID_LE_GENERATE_DHKEY_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_13;
  }
  if (*(unsigned __int16 *)(a1 + 10) - *(unsigned __int16 *)(a1 + 12) <= 0x3F)
  {
LABEL_13:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D027C();
      return 0;
    }
    return result;
  }
  v1 = *(unsigned __int16 *)(a1 + 8);
  v2 = *(_OWORD **)a1;
  if (*(_QWORD *)a1)
    v3 = v1 == 0;
  else
    v3 = 1;
  if (v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2761, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *(_BYTE *)(a1 + 14) = 2;
  *(_WORD *)(a1 + 10) = v1;
  *(_WORD *)(a1 + 12) = 0;
  if (v1 <= 0x3F)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2766, "ByteStream_NumReadBytesAvail(*pBs) >= (32 + 32)");
  v2[2] = 0u;
  v2[3] = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  *(_WORD *)(a1 + 12) += 64;
  if (v1 > *(unsigned __int16 *)(a1 + 10))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2768, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *(_WORD *)(a1 + 12) = v1;
  if (*(_BYTE *)(a1 + 14) == 2)
    *(_WORD *)(a1 + 10) = v1;
  *(_BYTE *)(a1 + 14) = 15;
  return 1;
}

BOOL sub_100104820(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  _OWORD *v6;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2776, "_Bool Filter_OI_DHCI_CMD_ID_LE_ADD_DEVICE_TO_RESOLVING_LIST_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_15;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0x3F)
  {
LABEL_15:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D02FC();
      return 0;
    }
    return result;
  }
  if (v2 <= 6)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2781, "ByteStream_NumReadBytesAvail(*pBs) >= (1+6)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 7;
  *((_WORD *)a1 + 6) = v4;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2785, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2786, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 31)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2790, "ByteStream_NumReadBytesAvail(*pBs) >= (16 + 16)");
  v6 = (_OWORD *)(v5 + v4);
  *v6 = 0u;
  v6[1] = 0u;
  *((_WORD *)a1 + 6) += 32;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2792, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  return 1;
}

BOOL sub_1001049BC(uint64_t *a1)
{
  unsigned int v2;
  int v3;
  int v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 v9;
  size_t v10;
  unsigned int v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2800, "_Bool Filter_OI_DHCI_CMD_ID_LE_SET_EXTENDED_ADVERTISING_DATA_OPCODE(OI_BYTE_STREAM *)");
LABEL_4:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1006D037C();
    return 0;
  }
  v2 = *((unsigned __int16 *)a1 + 5);
  v3 = *((unsigned __int16 *)a1 + 6);
  v4 = v2 - v3;
  if (v2 - v3 <= 3)
    goto LABEL_4;
  if (v4 <= 2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2805, "ByteStream_NumReadBytesAvail(*pBs) >= (1+1+1)");
  v6 = *((unsigned __int16 *)a1 + 4);
  v7 = v3 + 3;
  *((_WORD *)a1 + 6) = v3 + 3;
  if (*((_BYTE *)a1 + 14) != 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2808, "(*pBs).__RWFlag == BYTESTREAM_READ");
  if (v2 <= v7)
  {
    *((_BYTE *)a1 + 15) = 1;
    v12 = qword_10097FA70;
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0484(v12, v13, v14, v15, v16, v17, v18, v19);
      return 0;
    }
  }
  else
  {
    v8 = *a1;
    v9 = v3 + 4;
    *((_WORD *)a1 + 6) = v9;
    v10 = *(unsigned __int8 *)(v8 + v7);
    v11 = v4 - 4;
    if (v11 >= v10)
    {
      *((_BYTE *)a1 + 14) = 15;
      if (!v6)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2818, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
      *((_WORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 14) = 2;
      *((_WORD *)a1 + 5) = v6;
      if (v6 < v9)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2819, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v9;
      if ((int)(v6 - v9) < (int)v10)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2822, "ByteStream_NumReadBytesAvail(*pBs) >= (advertisingDataLength)");
      bzero((void *)(v8 + v9), v10);
      *((_WORD *)a1 + 6) += v10;
      if (v6 > *((unsigned __int16 *)a1 + 5))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2824, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v6;
      if (*((_BYTE *)a1 + 14) == 2)
        *((_WORD *)a1 + 5) = v6;
      *((_BYTE *)a1 + 14) = 15;
      return 1;
    }
    else
    {
      result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1006D03FC(v11, v10);
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_100104BF0(uint64_t *a1)
{
  unsigned int v2;
  int v3;
  int v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 v9;
  size_t v10;
  unsigned int v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2832, "_Bool Filter_OI_DHCI_CMD_ID_LE_SET_EXTENDED_SCAN_RESPONSE_DATA_OPCODE(OI_BYTE_STREAM *)");
LABEL_4:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1006D04F4();
    return 0;
  }
  v2 = *((unsigned __int16 *)a1 + 5);
  v3 = *((unsigned __int16 *)a1 + 6);
  v4 = v2 - v3;
  if (v2 - v3 <= 3)
    goto LABEL_4;
  if (v4 <= 2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2837, "ByteStream_NumReadBytesAvail(*pBs) >= (1+1+1)");
  v6 = *((unsigned __int16 *)a1 + 4);
  v7 = v3 + 3;
  *((_WORD *)a1 + 6) = v3 + 3;
  if (*((_BYTE *)a1 + 14) != 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2840, "(*pBs).__RWFlag == BYTESTREAM_READ");
  if (v2 <= v7)
  {
    *((_BYTE *)a1 + 15) = 1;
    v12 = qword_10097FA70;
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D05FC(v12, v13, v14, v15, v16, v17, v18, v19);
      return 0;
    }
  }
  else
  {
    v8 = *a1;
    v9 = v3 + 4;
    *((_WORD *)a1 + 6) = v9;
    v10 = *(unsigned __int8 *)(v8 + v7);
    v11 = v4 - 4;
    if (v11 >= v10)
    {
      *((_BYTE *)a1 + 14) = 15;
      if (!v6)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2849, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
      *((_WORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 14) = 2;
      *((_WORD *)a1 + 5) = v6;
      if (v6 < v9)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2850, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v9;
      if ((int)(v6 - v9) < (int)v10)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2853, "ByteStream_NumReadBytesAvail(*pBs) >= (scanResponseDataLength)");
      bzero((void *)(v8 + v9), v10);
      *((_WORD *)a1 + 6) += v10;
      if (v6 > *((unsigned __int16 *)a1 + 5))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2855, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v6;
      if (*((_BYTE *)a1 + 14) == 2)
        *((_WORD *)a1 + 5) = v6;
      *((_BYTE *)a1 + 14) = 15;
      return 1;
    }
    else
    {
      result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1006D0574(v11, v10);
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_100104E24(uint64_t *a1)
{
  unsigned int v2;
  int v3;
  int v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 v9;
  size_t v10;
  unsigned int v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2863, "_Bool Filter_OI_DHCI_CMD_ID_LE_SET_PERIODIC_ADVERTISING_DATA_OPCODE(OI_BYTE_STREAM *)");
LABEL_4:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1006D066C();
    return 0;
  }
  v2 = *((unsigned __int16 *)a1 + 5);
  v3 = *((unsigned __int16 *)a1 + 6);
  v4 = v2 - v3;
  if (v2 - v3 <= 2)
    goto LABEL_4;
  if (v4 <= 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2868, "ByteStream_NumReadBytesAvail(*pBs) >= (1+1)");
  v6 = *((unsigned __int16 *)a1 + 4);
  v7 = v3 + 2;
  *((_WORD *)a1 + 6) = v3 + 2;
  if (*((_BYTE *)a1 + 14) != 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2871, "(*pBs).__RWFlag == BYTESTREAM_READ");
  if (v2 <= v7)
  {
    *((_BYTE *)a1 + 15) = 1;
    v12 = qword_10097FA70;
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0774(v12, v13, v14, v15, v16, v17, v18, v19);
      return 0;
    }
  }
  else
  {
    v8 = *a1;
    v9 = v3 + 3;
    *((_WORD *)a1 + 6) = v9;
    v10 = *(unsigned __int8 *)(v8 + v7);
    v11 = v4 - 3;
    if (v11 >= v10)
    {
      *((_BYTE *)a1 + 14) = 15;
      if (!v6)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2880, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
      *((_WORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 14) = 2;
      *((_WORD *)a1 + 5) = v6;
      if (v6 < v9)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2881, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v9;
      if ((int)(v6 - v9) < (int)v10)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2884, "ByteStream_NumReadBytesAvail(*pBs) >= (advertisingDataLength)");
      bzero((void *)(v8 + v9), v10);
      *((_WORD *)a1 + 6) += v10;
      if (v6 > *((unsigned __int16 *)a1 + 5))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2886, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v6;
      if (*((_BYTE *)a1 + 14) == 2)
        *((_WORD *)a1 + 5) = v6;
      *((_BYTE *)a1 + 14) = 15;
      return 1;
    }
    else
    {
      result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1006D06EC(v11, v10);
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_100105058(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  _QWORD *v6;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2894, "_Bool Filter_OI_DHCI_CMD_ID_LE_CREATE_BIG_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_15;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0x1E)
  {
LABEL_15:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D07E4();
      return 0;
    }
    return result;
  }
  if (v2 <= 14)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2899, "ByteStream_NumReadBytesAvail(*pBs) >= (1+1+1+3+2+2+1+1+1+1+1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 15;
  *((_WORD *)a1 + 6) = v4;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2903, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2904, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 15)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2907, "ByteStream_NumReadBytesAvail(*pBs) >= (16)");
  v6 = (_QWORD *)(v5 + v4);
  *v6 = 0;
  v6[1] = 0;
  *((_WORD *)a1 + 6) += 16;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2908, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  return 1;
}

BOOL sub_1001051F0(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  _QWORD *v6;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2916, "_Bool Filter_OI_DHCI_CMD_ID_LE_CREATE_BIG_TEST_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_15;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0x23)
  {
LABEL_15:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0864();
      return 0;
    }
    return result;
  }
  if (v2 <= 19)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2921, "ByteStream_NumReadBytesAvail(*pBs) >= (1+1+1+3+2+1+2+2+1+1+1+1+1+1+1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 20;
  *((_WORD *)a1 + 6) = v4;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2925, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2926, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 15)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2929, "ByteStream_NumReadBytesAvail(*pBs) >= (16)");
  v6 = (_QWORD *)(v5 + v4);
  *v6 = 0;
  v6[1] = 0;
  *((_WORD *)a1 + 6) += 16;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2930, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  return 1;
}

BOOL sub_100105388(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  _QWORD *v6;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2938, "_Bool Filter_OI_DHCI_CMD_ID_LE_BIG_CREATE_SYNC_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_15;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0x13)
  {
LABEL_15:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D08D8();
      return 0;
    }
    return result;
  }
  if (v2 <= 3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2943, "ByteStream_NumReadBytesAvail(*pBs) >= (1+2+1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 4;
  *((_WORD *)a1 + 6) = v4;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2947, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2948, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 15)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2951, "ByteStream_NumReadBytesAvail(*pBs) >= (16)");
  v6 = (_QWORD *)(v5 + v4);
  *v6 = 0;
  v6[1] = 0;
  *((_WORD *)a1 + 6) += 16;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2952, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  return 1;
}

uint64_t sub_100105520(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v4;
  _BYTE *v5;
  __int16 v6;

  if (*(_BYTE *)(a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2284, "_Bool Filter_OI_DHCI_WRITE_PIN_TYPE_OPCODE(OI_BYTE_STREAM *)");
LABEL_4:
    if (os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR))
      sub_1006D094C();
    return 0;
  }
  v1 = *(unsigned __int16 *)(a1 + 12);
  if (*(unsigned __int16 *)(a1 + 10) == v1)
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 14) == 2)
    *(_WORD *)(a1 + 10) = v1;
  v4 = *(unsigned __int16 *)(a1 + 8);
  *(_BYTE *)(a1 + 14) = 15;
  v5 = *(_BYTE **)a1;
  if (!*(_QWORD *)a1 || !v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2290, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *(_BYTE *)(a1 + 14) = 2;
  *(_WORD *)(a1 + 10) = v4;
  *(_WORD *)(a1 + 12) = 0;
  *v5 = 0;
  ++*(_WORD *)(a1 + 12);
  if (v4 > *(unsigned __int16 *)(a1 + 10))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2296, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *(_WORD *)(a1 + 12) = v4;
  if (*(_BYTE *)(a1 + 14) == 2)
    *(_WORD *)(a1 + 10) = v4;
  *(_BYTE *)(a1 + 14) = 15;
  if (!*(_QWORD *)a1 || (v6 = *(_WORD *)(a1 + 8)) == 0)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2298, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v2 = 1;
  *(_BYTE *)(a1 + 14) = 1;
  *(_WORD *)(a1 + 10) = v6;
  *(_WORD *)(a1 + 12) = 1;
  return v2;
}

BOOL sub_100105674(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2494, "_Bool Filter_OI_DHCI_WRITE_STORED_LINK_KEY_OPCODE(OI_BYTE_STREAM *)");
LABEL_4:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1006D09D0();
    return 0;
  }
  v2 = *((unsigned __int16 *)a1 + 5);
  v3 = *((unsigned __int16 *)a1 + 6);
  if (v2 == (_DWORD)v3)
    goto LABEL_4;
  if (*((_BYTE *)a1 + 14) != 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2500, "(*pBs).__RWFlag == BYTESTREAM_READ");
  if (v2 <= v3)
  {
    *((_BYTE *)a1 + 15) = 1;
    v10 = qword_10097FA70;
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0ADC(v10, v11, v12, v13, v14, v15, v16, v17);
      return 0;
    }
  }
  else
  {
    v5 = *a1;
    v6 = v3 + 1;
    *((_WORD *)a1 + 6) = v3 + 1;
    v7 = *((unsigned __int16 *)a1 + 4);
    v8 = ~(_DWORD)v3 + v2;
    v9 = 22 * *(unsigned __int8 *)(v5 + v3);
    if (v8 >= v9)
    {
      *((_BYTE *)a1 + 14) = 15;
      if (!v7)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2507, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
      *((_WORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 14) = 2;
      *((_WORD *)a1 + 5) = v7;
      if (v3 >= v7)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2508, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v6;
      if ((int)(v7 - v6) < (int)v9)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2511, "ByteStream_NumReadBytesAvail(*pBs) >= (numLinkKeys*(6+16))");
      bzero((void *)(v5 + v6), v9);
      *((_WORD *)a1 + 6) += v9;
      if (v7 > *((unsigned __int16 *)a1 + 5))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2513, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v7;
      if (*((_BYTE *)a1 + 14) == 2)
        *((_WORD *)a1 + 5) = v7;
      *((_BYTE *)a1 + 14) = 15;
      if (!*a1 || (v18 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2515, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
      *((_WORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 14) = 1;
      *((_WORD *)a1 + 5) = v18;
      if (v18 < (unsigned __int16)(v6 + v9))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2516, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v6 + v9;
      return 1;
    }
    else
    {
      result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1006D0A54(v8, v9);
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_1001058E8(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  unsigned __int16 v6;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2523, "_Bool Filter_OI_DHCI_CHANGE_LOCAL_NAME_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_17;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  if (*((unsigned __int16 *)a1 + 5) - v1 <= 0x1E)
  {
LABEL_17:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0B4C();
      return 0;
    }
    return result;
  }
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v1;
  v2 = *((unsigned __int16 *)a1 + 4);
  *((_BYTE *)a1 + 14) = 15;
  v3 = *a1;
  if (!*a1 || !v2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2530, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v2;
  if (v1 > v2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2531, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v1;
  if ((int)(v2 - v1) <= 30)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2534, "ByteStream_NumReadBytesAvail(*pBs) >= (31)");
  v4 = (_QWORD *)(v3 + v1);
  *v4 = 0;
  v4[1] = 0;
  *(_QWORD *)((char *)v4 + 23) = 0;
  v4[2] = 0;
  *((_WORD *)a1 + 6) += 31;
  if (v2 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2536, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v2;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v2;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v5 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2538, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v6 = v1 + 31;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v5;
  if (v5 < v6)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2539, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v6;
  return 1;
}

BOOL sub_100105AC4(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2546, "_Bool Filter_OI_DHCI_WRITE_EXT_INQ_RESP_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 5);
  v2 = *((unsigned __int16 *)a1 + 6);
  if (v1 - v2 <= 0xF0)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0BCC();
      return 0;
    }
    return result;
  }
  if (v1 <= v2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2551, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v2 + 1;
  *((_WORD *)a1 + 6) = v2 + 1;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2554, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v2 >= v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2555, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 239)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2558, "ByteStream_NumReadBytesAvail(*pBs) >= (240)");
  v6 = (_OWORD *)(v5 + v4);
  v6[13] = 0u;
  v6[14] = 0u;
  v6[11] = 0u;
  v6[12] = 0u;
  v6[9] = 0u;
  v6[10] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  *v6 = 0u;
  *((_WORD *)a1 + 6) += 240;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2560, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2562, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v2 + 241;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2563, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_100105CE0(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 v7;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2570, "_Bool Filter_OI_DHCI_SEND_KEY_PRESS_NOTIFY_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_19;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 6)
  {
LABEL_19:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0C40();
      return 0;
    }
    return result;
  }
  if (v2 <= 5)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2575, "ByteStream_NumReadBytesAvail(*pBs) >= (6)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 6;
  *((_WORD *)a1 + 6) = v1 + 6;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2578, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2579, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if (v3 <= v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2582, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  *(_BYTE *)(v5 + (unsigned __int16)(v1 + 6)) = 0;
  ++*((_WORD *)a1 + 6);
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2584, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v6 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2586, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v7 = v1 + 7;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v6;
  if (v6 < v7)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2587, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v7;
  return 1;
}

BOOL sub_100105ED4(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  BOOL v3;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2598, "_Bool Filter_OI_DHCI_CMD_ID_WRITE_LOCATION_DATA_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_13;
  }
  if (*((unsigned __int16 *)a1 + 5) - *((unsigned __int16 *)a1 + 6) <= 4)
  {
LABEL_13:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0CC0();
      return 0;
    }
    return result;
  }
  v1 = *((unsigned __int16 *)a1 + 4);
  v2 = *a1;
  if (*a1)
    v3 = v1 == 0;
  else
    v3 = 1;
  if (v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2603, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v1;
  *((_WORD *)a1 + 6) = 0;
  if (v1 <= 4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2610, "ByteStream_NumReadBytesAvail(*pBs) >= (1 + 2 + 1 + 1)");
  *(_BYTE *)(v2 + 4) = 0;
  *(_DWORD *)v2 = 0;
  *((_WORD *)a1 + 6) += 5;
  if (v1 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2612, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v1;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v1;
  *((_BYTE *)a1 + 14) = 15;
  return 1;
}

BOOL sub_10010600C(uint64_t a1)
{
  _BOOL8 result;
  unsigned int v2;
  _BYTE *v3;
  BOOL v4;

  if (*(_BYTE *)(a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2620, "_Bool Filter_OI_DHCI_CMD_ID_SET_MIN_ENCRYPTION_KEY_SIZE_OPCODE(OI_BYTE_STREAM *)");
    goto LABEL_4;
  }
  if (*(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a1 + 12))
  {
LABEL_4:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0D40();
      return 0;
    }
    return result;
  }
  v2 = *(unsigned __int16 *)(a1 + 8);
  v3 = *(_BYTE **)a1;
  if (*(_QWORD *)a1)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2625, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *(_BYTE *)(a1 + 14) = 2;
  *(_WORD *)(a1 + 10) = v2;
  *(_WORD *)(a1 + 12) = 0;
  *v3 = 0;
  ++*(_WORD *)(a1 + 12);
  if (v2 > *(unsigned __int16 *)(a1 + 10))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2630, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *(_WORD *)(a1 + 12) = v2;
  if (*(_BYTE *)(a1 + 14) == 2)
    *(_WORD *)(a1 + 10) = v2;
  *(_BYTE *)(a1 + 14) = 15;
  return 1;
}

BOOL sub_100106114(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  BOOL v4;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned __int16 v13;
  int v14;
  size_t v15;
  int v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1809, "_Bool Filter_LE_ADVERTISING_REPORT_SUBEVENT(OI_BYTE_STREAM *)");
    goto LABEL_4;
  }
  v2 = *((unsigned __int16 *)a1 + 5);
  v3 = *((unsigned __int16 *)a1 + 6);
  if (v2 == (_DWORD)v3)
  {
LABEL_4:
    if (os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR))
      sub_1006D0DC4();
    return 0;
  }
  if (*((_BYTE *)a1 + 14) != 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1817, "(*pBs).__RWFlag == BYTESTREAM_READ");
  if (v2 <= v3)
  {
    *((_BYTE *)a1 + 15) = 1;
    v18 = qword_10097FA70;
    if (os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR))
      sub_1006D0E48(v18, v19, v20, v21, v22, v23, v24, v25);
    return 0;
  }
  v6 = *((unsigned __int16 *)a1 + 4);
  v7 = *a1;
  v8 = v3 + 1;
  *((_WORD *)a1 + 6) = v3 + 1;
  v9 = *(unsigned __int8 *)(v7 + v3);
  if (*(_BYTE *)(v7 + v3))
  {
    v4 = 0;
    v10 = 0;
    LOWORD(v11) = v6;
    while (1)
    {
      if (*((_BYTE *)a1 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1821, "_Bool Filter_LE_ADVERTISING_REPORT_SUBEVENT(OI_BYTE_STREAM *)");
        return v4;
      }
      v12 = (unsigned __int16)v2 - (unsigned __int16)v8;
      if (v12 < 0xA)
        return v4;
      if (v12 <= 7)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1827, "ByteStream_NumReadBytesAvail(*pBs) >= (1 + 1 + 6)");
      v13 = v8 + 8;
      *((_WORD *)a1 + 6) = v8 + 8;
      if ((unsigned __int16)v2 <= (unsigned __int16)(v8 + 8))
        break;
      v14 = v8 + 9;
      *((_WORD *)a1 + 6) = v14;
      v15 = *(unsigned __int8 *)(v7 + v13);
      if ((unsigned __int16)v2 - (unsigned __int16)v14 < (int)v15)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1830, "ByteStream_NumReadBytesAvail(*pBs) >= (dataLength)");
      v16 = v14 + v15;
      *((_WORD *)a1 + 6) = v16;
      if ((unsigned __int16)v2 <= (unsigned __int16)v16)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1831, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
      v17 = v16 + 1;
      *((_WORD *)a1 + 6) = v16 + 1;
      if (v15 <= 0x1F && (unsigned __int16)v2 - (unsigned __int16)v17 >= v15)
      {
        *((_BYTE *)a1 + 14) = 15;
        if (!(_WORD)v11)
          sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1837, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
        *((_WORD *)a1 + 6) = 0;
        *((_BYTE *)a1 + 14) = 2;
        *((_WORD *)a1 + 5) = v11;
        if ((unsigned __int16)v16 >= (unsigned __int16)v11)
          sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1838, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
        *((_WORD *)a1 + 6) = v17;
        if ((unsigned __int16)v11 - (unsigned __int16)(v16 + 1) < (int)v15)
          sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1839, "ByteStream_NumReadBytesAvail(*pBs) >= (dataLength)");
        bzero((void *)(v7 + (unsigned __int16)v17), v15);
        *((_WORD *)a1 + 6) += v15;
        if (v6 > *((unsigned __int16 *)a1 + 5))
          sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1841, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
        *((_WORD *)a1 + 6) = v6;
        if (*((_BYTE *)a1 + 14) == 2)
          *((_WORD *)a1 + 5) = v6;
        *((_BYTE *)a1 + 14) = 15;
        v7 = *a1;
        if (!*a1 || (v11 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
          sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1843, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
        v8 = v17 + v15;
        *((_WORD *)a1 + 6) = 0;
        *((_BYTE *)a1 + 14) = 1;
        *((_WORD *)a1 + 5) = v11;
        if (v11 < (unsigned __int16)(v17 + v15))
          sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1844, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
        *((_WORD *)a1 + 6) = v8;
        v4 = ++v10 >= v9;
        LOWORD(v2) = v11;
        if (v9 != v10)
          continue;
      }
      return v4;
    }
    *((_BYTE *)a1 + 15) = 1;
    v26 = qword_10097FA70;
    if (os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR))
      sub_1006D0E48(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  else
  {
    return 1;
  }
  return v4;
}

BOOL sub_1001064A0(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 v7;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1855, "_Bool Filter_LE_READ_REMOTE_FEATURES_COMPLETE_SUBEVENT(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0xA)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0EB8();
      return 0;
    }
    return result;
  }
  if (v2 <= 2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1862, "ByteStream_NumReadBytesAvail(*pBs) >= (1 + 2)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 3;
  *((_WORD *)a1 + 6) = v1 + 3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1865, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1866, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 7)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1867, "ByteStream_NumReadBytesAvail(*pBs) >= (8)");
  *(_QWORD *)(v5 + (unsigned __int16)(v1 + 3)) = 0;
  *((_WORD *)a1 + 6) += 8;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1869, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v6 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1871, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v7 = v1 + 11;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v6;
  if (v6 < v7)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1872, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v7;
  return 1;
}

BOOL sub_100106698(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1881, "_Bool Filter_LE_LONG_TERM_KEY_REQUEST_SUBEVENT(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0xB)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0F2C();
      return 0;
    }
    return result;
  }
  if (v2 <= 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1887, "ByteStream_NumReadBytesAvail(*pBs) >= (2)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 2;
  *((_WORD *)a1 + 6) = v1 + 2;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1890, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1891, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 9)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1894, "ByteStream_NumReadBytesAvail(*pBs) >= (8 + 2)");
  v6 = v5 + v4;
  *(_WORD *)(v6 + 8) = 0;
  *(_QWORD *)v6 = 0;
  *((_WORD *)a1 + 6) += 10;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1896, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1898, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v1 + 12;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1899, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_100106894(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1908, "_Bool Filter_LE_READ_LOCAL_P256_PUBLIC_KEY_COMPLETE_SUBEVENT(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 5);
  v2 = *((unsigned __int16 *)a1 + 6);
  if (v1 - v2 <= 0x40)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D0FA0();
      return 0;
    }
    return result;
  }
  if (v1 <= v2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1914, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v2 + 1;
  *((_WORD *)a1 + 6) = v2 + 1;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1917, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v2 >= v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1918, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 63)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1921, "ByteStream_NumReadBytesAvail(*pBs) >= (32 + 32)");
  v6 = (_OWORD *)(v5 + v4);
  v6[2] = 0u;
  v6[3] = 0u;
  *v6 = 0u;
  v6[1] = 0u;
  *((_WORD *)a1 + 6) += 64;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1923, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1925, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v2 + 65;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1926, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_100106A98(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1935, "_Bool Filter_LE_GENERATE_DHKEY_COMPLETE_SUBEVENT(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 5);
  v2 = *((unsigned __int16 *)a1 + 6);
  if (v1 - v2 <= 0x20)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D1020();
      return 0;
    }
    return result;
  }
  if (v1 <= v2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1941, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v2 + 1;
  *((_WORD *)a1 + 6) = v2 + 1;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1944, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v2 >= v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1945, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 31)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1946, "ByteStream_NumReadBytesAvail(*pBs) >= (32)");
  v6 = (_OWORD *)(v5 + v4);
  *v6 = 0u;
  v6[1] = 0u;
  *((_WORD *)a1 + 6) += 32;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1948, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1950, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v2 + 33;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1951, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

uint64_t sub_100106C98(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  char v4;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  size_t v15;
  unsigned int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1958, "_Bool Filter_LE_EXTENDED_ADVERTISING_REPORT_SUBEVENT(OI_BYTE_STREAM *)");
    goto LABEL_4;
  }
  v2 = *((unsigned __int16 *)a1 + 5);
  v3 = *((unsigned __int16 *)a1 + 6);
  if (v2 == (_DWORD)v3)
  {
LABEL_4:
    if (os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR))
      sub_1006D1094();
LABEL_6:
    v4 = 0;
    return v4 & 1;
  }
  if (*((_BYTE *)a1 + 14) != 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1965, "(*pBs).__RWFlag == BYTESTREAM_READ");
  if (v2 <= v3)
  {
    *((_BYTE *)a1 + 15) = 1;
    v17 = qword_10097FA70;
    if (os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR))
      sub_1006D1214(v17, v18, v19, v20, v21, v22, v23, v24);
    goto LABEL_6;
  }
  v6 = *((unsigned __int16 *)a1 + 4);
  v7 = *a1;
  v8 = v3 + 1;
  *((_WORD *)a1 + 6) = v3 + 1;
  v9 = *(unsigned __int8 *)(v7 + v3);
  if (*(_BYTE *)(v7 + v3))
  {
    v10 = 0;
    v11 = 0;
    LOWORD(v12) = v6;
    while (!*((_BYTE *)a1 + 15))
    {
      v13 = (unsigned __int16)v2 - (unsigned __int16)v8;
      if (v13 <= 0x17)
        goto LABEL_32;
      if (v13 <= 22)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1983, "ByteStream_NumReadBytesAvail(*pBs) >= (2 + 1 + 6 + 1 + 1 + 1 + 1 + 1 + 2 + 1 + 6)");
      *((_WORD *)a1 + 6) = v8 + 23;
      if ((unsigned __int16)v2 <= (unsigned __int16)(v8 + 23))
      {
        *((_BYTE *)a1 + 15) = 1;
        v25 = qword_10097FA70;
        if (os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR))
          sub_1006D1214(v25, v26, v27, v28, v29, v30, v31, v32);
        goto LABEL_38;
      }
      v14 = v8 + 24;
      *((_WORD *)a1 + 6) = v8 + 24;
      v15 = *(unsigned __int8 *)(v7 + (unsigned __int16)(v8 + 23));
      v16 = (unsigned __int16)v2 - (unsigned __int16)(v8 + 24);
      if (v16 < v15)
      {
        if (os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR))
          sub_1006D118C(v16, v15);
        goto LABEL_38;
      }
      *((_BYTE *)a1 + 14) = 15;
      if (!(_WORD)v12)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1994, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
      *((_WORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 14) = 2;
      *((_WORD *)a1 + 5) = v12;
      if ((unsigned __int16)(v8 + 24) > (unsigned __int16)v12)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1995, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v14;
      if ((unsigned __int16)v12 - (unsigned __int16)(v8 + 24) < (int)v15)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1996, "ByteStream_NumReadBytesAvail(*pBs) >= (dataLength)");
      bzero((void *)(v7 + (unsigned __int16)v14), v15);
      *((_WORD *)a1 + 6) += v15;
      if (v6 > *((unsigned __int16 *)a1 + 5))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1998, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v6;
      if (*((_BYTE *)a1 + 14) == 2)
        *((_WORD *)a1 + 5) = v6;
      *((_BYTE *)a1 + 14) = 15;
      v7 = *a1;
      if (!*a1 || (v12 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2000, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
      v8 = v14 + v15;
      *((_WORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 14) = 1;
      *((_WORD *)a1 + 5) = v12;
      if (v12 < (unsigned __int16)(v14 + v15))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2001, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
      ++v11;
      *((_WORD *)a1 + 6) = v8;
      v10 = v11 >= v9;
      v4 = 1;
      LOWORD(v2) = v12;
      if (v9 == v11)
        return v4 & 1;
    }
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 1969, "_Bool Filter_LE_EXTENDED_ADVERTISING_REPORT_SUBEVENT(OI_BYTE_STREAM *)");
LABEL_32:
    if (os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR))
      sub_1006D1118();
LABEL_38:
    v4 = v10;
  }
  else
  {
    v4 = 1;
  }
  return v4 & 1;
}

BOOL sub_100107024(uint64_t *a1)
{
  unsigned int v2;
  int v3;
  _BOOL8 result;
  unsigned int v5;
  uint64_t v6;
  unsigned __int16 v7;
  size_t v8;
  unsigned int v9;
  unsigned int v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2009, "_Bool Filter_LE_PERIODIC_ADVERTISING_REPORT_SUBEVENT(OI_BYTE_STREAM *)");
LABEL_4:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1006D1284();
    return 0;
  }
  v2 = *((unsigned __int16 *)a1 + 5);
  v3 = *((unsigned __int16 *)a1 + 6);
  if (v2 - v3 <= 6)
    goto LABEL_4;
  if ((int)(v2 - v3) <= 5)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2021, "ByteStream_NumReadBytesAvail(*pBs) >= (2 + 1 + 1 + 1 + 1)");
  v5 = *((unsigned __int16 *)a1 + 4);
  *((_WORD *)a1 + 6) = v3 + 6;
  if (*((_BYTE *)a1 + 14) != 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2024, "(*pBs).__RWFlag == BYTESTREAM_READ");
  if (v2 <= (unsigned __int16)(v3 + 6))
  {
    *((_BYTE *)a1 + 15) = 1;
    v12 = qword_10097FA70;
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D1304(v12, v13, v14, v15, v16, v17, v18, v19);
      return 0;
    }
  }
  else
  {
    v6 = *a1;
    v7 = v3 + 7;
    *((_WORD *)a1 + 6) = v3 + 7;
    v8 = *(unsigned __int8 *)(v6 + (unsigned __int16)(v3 + 6));
    v9 = v2 - (unsigned __int16)(v3 + 7);
    if (v8 > 0xF7 || v9 < v8)
      return 0;
    if (*(_BYTE *)(v6 + (unsigned __int16)(v3 + 6)))
    {
      *((_BYTE *)a1 + 14) = 15;
      if (!v5)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2033, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
      *((_WORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 14) = 2;
      *((_WORD *)a1 + 5) = v5;
      if (v5 < v7)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2034, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v7;
      if ((int)(v5 - (unsigned __int16)(v3 + 7)) < (int)v8)
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2035, "ByteStream_NumReadBytesAvail(*pBs) >= (dataLength)");
      bzero((void *)(v6 + v7), v8);
      *((_WORD *)a1 + 6) += v8;
      if (v5 > *((unsigned __int16 *)a1 + 5))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2037, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v5;
      if (*((_BYTE *)a1 + 14) == 2)
        *((_WORD *)a1 + 5) = v5;
      *((_BYTE *)a1 + 14) = 15;
      if (!*a1 || (v11 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2039, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
      *((_WORD *)a1 + 6) = 0;
      *((_BYTE *)a1 + 14) = 1;
      *((_WORD *)a1 + 5) = v11;
      if (v11 < (unsigned __int16)(v7 + v8))
        sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2040, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
      *((_WORD *)a1 + 6) = v7 + v8;
    }
    return 1;
  }
  return result;
}

BOOL sub_10010729C(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2050, "_Bool Filter_OI_DHCI_READ_PIN_TYPE_OPCODE_Complete(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 5);
  v2 = *((unsigned __int16 *)a1 + 6);
  if (v1 - v2 <= 1)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D1374();
      return 0;
    }
    return result;
  }
  if (v1 <= v2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2055, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v2 + 1;
  *((_WORD *)a1 + 6) = v2 + 1;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2059, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v2 >= v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2060, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if (v3 <= v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2063, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  *(_BYTE *)(v5 + v4) = 0;
  ++*((_WORD *)a1 + 6);
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2065, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v6 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2067, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v7 = v2 + 2;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v6;
  if (v7 > v6)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2068, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v7;
  return 1;
}

BOOL sub_100107490(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2075, "_Bool Filter_OI_DHCI_READ_LOCAL_NAME_OPCODE_Complete(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 5);
  v2 = *((unsigned __int16 *)a1 + 6);
  if (v1 - v2 <= 0xF8)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D13F4();
      return 0;
    }
    return result;
  }
  if (v1 <= v2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2080, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v2 + 1;
  *((_WORD *)a1 + 6) = v2 + 1;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2084, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v2 >= v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2085, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 247)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2088, "ByteStream_NumReadBytesAvail(*pBs) >= (248)");
  v6 = v5 + v4;
  *(_QWORD *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)v6 = 0u;
  *((_WORD *)a1 + 6) += 248;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2090, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2092, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v2 + 249;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2093, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_1001076B0(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  _OWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2100, "_Bool Filter_OI_DHCI_READ_EXT_INQ_RESP_OPCODE_Complete(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 0xF1)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D1468();
      return 0;
    }
    return result;
  }
  if (v2 <= 1)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2105, "ByteStream_NumReadBytesAvail(*pBs) >= (1+1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 2;
  *((_WORD *)a1 + 6) = v1 + 2;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2109, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2110, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 239)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2113, "ByteStream_NumReadBytesAvail(*pBs) >= (240)");
  v6 = (_OWORD *)(v5 + v4);
  v6[13] = 0u;
  v6[14] = 0u;
  v6[11] = 0u;
  v6[12] = 0u;
  v6[9] = 0u;
  v6[10] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  *v6 = 0u;
  *((_WORD *)a1 + 6) += 240;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2115, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2117, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v1 + 242;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2118, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_1001078C8(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2125, "_Bool Filter_OI_DHCI_READ_LOCAL_OOB_DATA_OPCODE_Complete(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 5);
  v2 = *((unsigned __int16 *)a1 + 6);
  if (v1 - v2 <= 0x16)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D14DC();
      return 0;
    }
    return result;
  }
  if (v1 <= v2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2130, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v2 + 1;
  *((_WORD *)a1 + 6) = v2 + 1;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2134, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v2 >= v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2135, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 31)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2139, "ByteStream_NumReadBytesAvail(*pBs) >= (16 + 16)");
  v6 = (_OWORD *)(v5 + v4);
  *v6 = 0u;
  v6[1] = 0u;
  *((_WORD *)a1 + 6) += 32;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2141, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2143, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v2 + 33;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2144, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_100107AC8(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2183, "_Bool Filter_OI_DHCI_READ_LOCAL_OOB_EXTENDED_DATA_OPCODE_Complete(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 5);
  v2 = *((unsigned __int16 *)a1 + 6);
  if (v1 - v2 <= 0x40)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D155C();
      return 0;
    }
    return result;
  }
  if (v1 <= v2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2188, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v2 + 1;
  *((_WORD *)a1 + 6) = v2 + 1;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2191, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v2 >= v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2192, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 63)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2198, "ByteStream_NumReadBytesAvail(*pBs) >= (16 + 16 + 16 + 16)");
  v6 = (_OWORD *)(v5 + v4);
  v6[2] = 0u;
  v6[3] = 0u;
  *v6 = 0u;
  v6[1] = 0u;
  *((_WORD *)a1 + 6) += 64;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2200, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2202, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v2 + 65;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2203, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_100107CCC(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2158, "_Bool Filter_OI_DHCI_READ_COUNTRY_CODE_OPCODE_Complete(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 5);
  v2 = *((unsigned __int16 *)a1 + 6);
  if (v1 - v2 <= 1)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D15DC();
      return 0;
    }
    return result;
  }
  if (v1 <= v2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2163, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v2 + 1;
  *((_WORD *)a1 + 6) = v2 + 1;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2167, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v2 >= v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2168, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if (v3 <= v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2171, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  *(_BYTE *)(v5 + v4) = 0;
  ++*((_WORD *)a1 + 6);
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2173, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v6 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2175, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v7 = v2 + 2;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v6;
  if (v7 > v6)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2176, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v7;
  return 1;
}

BOOL sub_100107EC0(uint64_t *a1)
{
  int v1;
  int v2;
  unsigned int v3;
  unsigned __int16 v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 v7;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2210, "_Bool Filter_OI_DHCI_CMD_ID_READ_ENCRYPTION_KEY_SIZE_OPCODE_Complete(OI_BYTE_STREAM *)");
    goto LABEL_19;
  }
  v1 = *((unsigned __int16 *)a1 + 6);
  v2 = *((unsigned __int16 *)a1 + 5) - v1;
  if (v2 <= 3)
  {
LABEL_19:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D165C();
      return 0;
    }
    return result;
  }
  if (v2 <= 2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2215, "ByteStream_NumReadBytesAvail(*pBs) >= (1+2)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v1 + 3;
  *((_WORD *)a1 + 6) = v1 + 3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2218, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v3 < v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2219, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if (v3 <= v4)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2222, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  *(_BYTE *)(v5 + (unsigned __int16)(v1 + 3)) = 0;
  ++*((_WORD *)a1 + 6);
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2224, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v6 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2226, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v7 = v1 + 4;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v6;
  if (v6 < v7)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2227, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v7;
  return 1;
}

BOOL sub_1001080B4(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  unsigned __int16 v8;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2234, "_Bool Filter_OI_DHCI_CMD_ID_LE_ENCRYPT_OPCODE_Complete(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 5);
  v2 = *((unsigned __int16 *)a1 + 6);
  if (v1 - v2 <= 0x10)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D16DC();
      return 0;
    }
    return result;
  }
  if (v1 <= v2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2239, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v2 + 1;
  *((_WORD *)a1 + 6) = v2 + 1;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2242, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v2 >= v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2243, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 15)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2246, "ByteStream_NumReadBytesAvail(*pBs) >= (16)");
  v6 = (_QWORD *)(v5 + v4);
  *v6 = 0;
  v6[1] = 0;
  *((_WORD *)a1 + 6) += 16;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2248, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v7 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2250, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v8 = v2 + 17;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v7;
  if (v7 < v8)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2251, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v8;
  return 1;
}

BOOL sub_1001082B0(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned __int16 v7;
  _BOOL8 result;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2258, "_Bool Filter_OI_DHCI_CMD_ID_LE_RAND_OPCODE_Complete(OI_BYTE_STREAM *)");
    goto LABEL_18;
  }
  v1 = *((unsigned __int16 *)a1 + 5);
  v2 = *((unsigned __int16 *)a1 + 6);
  if (v1 - v2 <= 8)
  {
LABEL_18:
    result = os_log_type_enabled((os_log_t)qword_10097FA70, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D1750();
      return 0;
    }
    return result;
  }
  if (v1 <= v2)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2263, "ByteStream_NumReadBytesAvail(*pBs) >= (1)");
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = v2 + 1;
  *((_WORD *)a1 + 6) = v2 + 1;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v4;
  *((_BYTE *)a1 + 14) = 15;
  v5 = *a1;
  if (!*a1 || !v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2266, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 2;
  *((_WORD *)a1 + 5) = v3;
  if (v2 >= v3)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2267, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v4;
  if ((int)(v3 - v4) <= 7)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2270, "ByteStream_NumReadBytesAvail(*pBs) >= (8)");
  *(_QWORD *)(v5 + v4) = 0;
  *((_WORD *)a1 + 6) += 8;
  if (v3 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2272, "(size_t)(byteStreamLength) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v3;
  if (*((_BYTE *)a1 + 14) == 2)
    *((_WORD *)a1 + 5) = v3;
  *((_BYTE *)a1 + 14) = 15;
  if (!*a1 || (v6 = *((unsigned __int16 *)a1 + 4), !*((_WORD *)a1 + 4)))
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2274, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  v7 = v2 + 9;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 14) = 1;
  *((_WORD *)a1 + 5) = v6;
  if (v6 < v7)
    sub_1001494E0("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/hcilite_filter.c", 2275, "(size_t)(byteStreamPosition) <= (size_t)((*pBs).__size)");
  *((_WORD *)a1 + 6) = v7;
  return 1;
}

void sub_1001084A8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x18u);
}

uint64_t sub_1001084E4(uint64_t a1, _DWORD *a2, int a3, int a4, uint64_t a5)
{
  __int16 v7;
  uint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;

  if (a5)
  {
    v7 = a3;
    result = sub_10011011C(a1, a2, a3, (uint64_t)sub_10010858C, 0x3FAu, 0);
    if (!(_DWORD)result)
    {
      sub_1001100E0(1);
      qword_10097FA80 = (uint64_t)sub_100114588(0x40uLL);
      if (qword_10097FA80)
      {
        v9 = *(_BYTE *)(sub_100252DE8(0xFu) + 10);
        v10 = (_QWORD *)qword_10097FA80;
        *(_BYTE *)(qword_10097FA80 + 60) = v9;
        sub_100253C6C(v10);
        result = 0;
        v11 = qword_10097FA80;
        *(_QWORD *)(qword_10097FA80 + 24) = a5;
        *(_WORD *)(v11 + 40) = v7;
        *(_DWORD *)(v11 + 44) = a4;
      }
      else
      {
        sub_100110438();
        return 106;
      }
    }
  }
  else
  {
    sub_100253460();
    return 101;
  }
  return result;
}

void sub_10010858C(int *a1)
{
  int v2;
  void (**v3)(void **);
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  NSObject *v8;
  __int16 v9;
  int *v10;
  char *v11;
  char *v12;
  int v13;
  unsigned int v14;
  NSObject *v15;
  NSObject *v16;
  void *v17;
  uint64_t *v18;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  NSObject *v22;
  int v23;
  NSObject *v24;

  v2 = *a1;
  if (*a1 == 6)
  {
    v3 = (void (**)(void **))sub_1001089CC(*((unsigned __int16 *)a1 + 2));
    if (!v3)
      sub_100253460();
    if ((*((_BYTE *)v3 + 95) & 0xFE) == 2)
    {
      if (sub_1001382F4(v3 + 3, *((_QWORD *)a1 + 1), *((unsigned __int16 *)a1 + 8)))
      {
        if (sub_10005549C())
        {
          sub_100054530("Receive error");
          v4 = sub_1000544A0(0xFu);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
            sub_1006D17C4();
        }
      }
    }
    else
    {
      if (sub_10005549C())
      {
        sub_100054530("Data (event %d) received in invalid state (%d), forwarding to app.\n", *a1, *((unsigned __int8 *)v3 + 95));
        v8 = sub_1000544A0(0xFu);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      (*(void (**)(int *))(qword_10097FA80 + 24))(a1);
    }
    return;
  }
  if (v2 == 2)
  {
    v5 = sub_1001089CC(*((unsigned __int16 *)a1 + 2));
    if (!v5)
      sub_100253460();
    v6 = sub_1001089CC(*((unsigned __int16 *)a1 + 2));
    if (v6)
      *((_BYTE *)v6 + 95) = 0;
    if (*(_BYTE *)(qword_10097FA80 + 49))
      *((_DWORD *)v5 + 21) = 1802;
    v7 = (void *)v5[7];
    if (v7)
    {
      sub_100053298(v7);
      v5[7] = 0;
    }
    sub_100108D50(*((unsigned __int16 *)a1 + 2), a1[2]);
    sub_100108D98(*((unsigned __int16 *)a1 + 2));
    return;
  }
  if (v2 != 1 || a1[4])
  {
    (*(void (**)(int *))(qword_10097FA80 + 24))(a1);
    return;
  }
  if (*(unsigned __int8 *)(qword_10097FA80 + 16) >= *(unsigned __int8 *)(qword_10097FA80 + 60))
  {
    if (!sub_10005549C())
      goto LABEL_52;
    sub_100054530("Maximum handsfree connection is %d, cannot create device", *(unsigned __int8 *)(qword_10097FA80 + 60));
    v15 = sub_1000544A0(0xFu);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      goto LABEL_52;
LABEL_32:
    sub_1006CE7A4();
LABEL_52:
    *(_BYTE *)(qword_10097FA80 + 49) = 1;
    v23 = 106;
LABEL_53:
    sub_100108CC4(*((unsigned __int16 *)a1 + 2), v23);
    return;
  }
  v9 = *((_WORD *)a1 + 2);
  v10 = (int *)*((_QWORD *)a1 + 1);
  v11 = (char *)sub_100114588(0x78uLL);
  if (!v11)
  {
    if (!sub_10005549C())
      goto LABEL_52;
    sub_100054530("Could not allocate connection, out of memory\n");
    v16 = sub_1000544A0(0xFu);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      goto LABEL_52;
    goto LABEL_32;
  }
  v12 = v11;
  v13 = *v10;
  *((_WORD *)v11 + 46) = *((_WORD *)v10 + 2);
  *((_DWORD *)v11 + 22) = v13;
  *(_WORD *)v11 = v9;
  if (*(_WORD *)(sub_100252DE8(0xFu) + 8))
    v14 = *(unsigned __int16 *)(sub_100252DE8(0xFu) + 8);
  else
    v14 = 256;
  v17 = sub_100052DC0(v14);
  *((_QWORD *)v12 + 7) = v17;
  if (!v17)
  {
    if (sub_10005549C())
    {
      sub_100054530("Could not allocate receive buffer\n");
      v24 = sub_1000544A0(0xFu);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_100053298(v12);
    goto LABEL_52;
  }
  *((_WORD *)v12 + 24) = 9;
  *((_DWORD *)v12 + 16) = -1;
  *(_DWORD *)(v12 + 67) = -1;
  sub_1001387A0((uint64_t)(v12 + 24), (uint64_t)sub_100108FCC, (uint64_t)v17, v14);
  v18 = (uint64_t *)qword_10097FA80;
  ++*(_BYTE *)(qword_10097FA80 + 16);
  sub_100253C74((_QWORD *)v12 + 13, v18);
  *(_BYTE *)(qword_10097FA80 + 49) = 1;
  v19 = sub_1001089CC(*((unsigned __int16 *)a1 + 2));
  if (v19)
    *((_BYTE *)v19 + 95) = 1;
  v20 = *((unsigned __int16 *)a1 + 2);
  v21 = sub_1001089CC(v20);
  if (!v21)
    sub_100253460();
  if (!sub_1002443D4((uint64_t)sub_10010A21C, (uint64_t)sub_10010A3E4, (uint64_t)(v21 + 11)))
  {
    *(_WORD *)(qword_10097FA80 + 18) = v20;
    *((_BYTE *)v21 + 94) = 1;
    return;
  }
  if (sub_10005549C())
  {
    sub_100054530("SDP connect");
    v22 = sub_1000544A0(0xFu);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      sub_1006D17C4();
  }
  v23 = sub_10010A4A4(v20);
  if (v23)
    goto LABEL_53;
}

_QWORD *sub_1001089CC(int a1)
{
  _QWORD *i;
  NSObject *v4;

  if (qword_10097FA80)
  {
    for (i = *(_QWORD **)qword_10097FA80; i && i != (_QWORD *)qword_10097FA80; i = (_QWORD *)*i)
    {
      if (*((unsigned __int16 *)i - 52) == a1)
        return i - 13;
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("Could not find addr for device handle %d", a1);
    v4 = sub_1000544A0(0xFu);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  return 0;
}

uint64_t sub_100108A74(int a1, uint64_t a2, char *a3, size_t a4, int a5, char a6)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;

  v12 = sub_1001089CC(a1);
  if (v12)
  {
    v13 = v12;
    if (*((_BYTE *)v12 + 78))
    {
      v14 = 1805;
    }
    else
    {
      if (a5)
        v15 = sub_10010B17C;
      else
        v15 = sub_10010B1E4;
      v14 = sub_1001109B4(a1, (uint64_t)v15, a3, a4);
      if (!(_DWORD)v14)
      {
        *((_BYTE *)v13 + 78) = a6;
        v13[1] = a2;
        return v14;
      }
    }
  }
  else
  {
    sub_100253460();
    v14 = 1802;
  }
  if (a5)
    sub_100053298(a3);
  return v14;
}

uint64_t sub_100108B30(int a1, uint64_t a2)
{
  _QWORD *v4;

  if (!sub_1001100B0())
    return 408;
  v4 = sub_1001089CC(a1);
  if (!v4)
    sub_100253460();
  if (*((_BYTE *)v4 + 95) != 3)
    return 1802;
  if ((*(_WORD *)(qword_10097FA80 + 40) & 1) != 0)
    return sub_100108A74(a1, a2, "AT+NREC=0\r", 0xAuLL, 0, 20);
  return 1808;
}

uint64_t sub_100108BD0(int a1)
{
  _QWORD *v1;

  v1 = sub_1001089CC(a1);
  if (v1)
  {
    if (dword_100999184)
      return *((unsigned __int16 *)v1 + 24);
  }
  else
  {
    sub_100253460();
  }
  return 0;
}

uint64_t sub_100108C08(int a1, uint64_t a2)
{
  int v2;
  char *v3;
  size_t v4;

  v2 = *(_DWORD *)(qword_10097FA80 + 44);
  if ((~v2 & 0x197) != 0)
  {
    if ((~v2 & 0x183) != 0)
    {
      if ((~v2 & 0x103) != 0)
      {
        if ((~v2 & 3) != 0)
        {
          if ((~v2 & 0x101) != 0)
          {
            if ((v2 & 1) == 0)
              return 1813;
            v3 = "AT+BAC=1\r";
            v4 = 9;
          }
          else
          {
            v3 = "AT+BAC=1,256\r";
            v4 = 13;
          }
        }
        else
        {
          v3 = "AT+BAC=1,2\r";
          v4 = 11;
        }
      }
      else
      {
        v3 = "AT+BAC=1,2,256\r";
        v4 = 15;
      }
    }
    else
    {
      v3 = "AT+BAC=1,2,128,256\r";
      v4 = 19;
    }
  }
  else
  {
    v3 = "AT+BAC=1,2,127,128,255,256\r";
    v4 = 27;
  }
  return sub_100108A74(a1, a2, v3, v4, 0, 27);
}

void sub_100108CC4(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = sub_1001089CC(a1);
  if (!v4)
    sub_100253460();
  if (*(_BYTE *)(qword_10097FA80 + 49))
    *((_DWORD *)v4 + 21) = a2;
  if ((*((unsigned __int8 *)v4 + 95) | 4) != 4)
  {
    sub_10010A1DC(a1);
    v5 = sub_1001089CC(a1);
    if (v5)
      *((_BYTE *)v5 + 95) = 4;
    sub_100108D98(a1);
  }
}

void sub_100108D50(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = sub_1001089CC(a1);
  if (v4)
  {
    if (*((_BYTE *)v4 + 78))
      sub_10010A16C(a1, 1802);
    *(_DWORD *)(qword_10097FA80 + 52) = a2;
  }
}

void sub_100108D98(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  const void *v8[2];
  _OWORD v9[3];
  uint64_t v10;

  v2 = sub_1001089CC(a1);
  if (!v2)
    sub_100253460();
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  if (*((_BYTE *)v2 + 95) == 4)
  {
    if (*((_BYTE *)v2 + 94) == 2)
    {
      if (!sub_100244A44())
      {
        *((_BYTE *)v2 + 94) = 3;
        goto LABEL_15;
      }
      if (!sub_10005549C())
        goto LABEL_13;
      sub_100054530("SDP disconnect - forcing disconnect!");
      v3 = sub_1000544A0(0xFu);
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        goto LABEL_13;
LABEL_12:
      sub_1006D17C4();
LABEL_13:
      sub_10010B09C(a1);
      goto LABEL_15;
    }
    if (sub_1001108EC(a1))
    {
      if (!sub_10005549C())
        goto LABEL_13;
      sub_100054530("Handsfree disconnect - forcing disconnect!");
      v4 = sub_1000544A0(0xFu);
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        goto LABEL_13;
      goto LABEL_12;
    }
  }
LABEL_15:
  if (*((_BYTE *)v2 + 94) || *((_BYTE *)v2 + 95))
  {
    if (!*(_DWORD *)(qword_10097FA80 + 56))
    {
      v8[1] = v2;
      v8[0] = (const void *)2;
      if (sub_10004A9EC((uint64_t)sub_10010B134, v8, 100, (int *)(qword_10097FA80 + 56)))
      {
        if (sub_10005549C())
        {
          sub_100054530("Register disconnect timeout handler");
          v5 = sub_1000544A0(0xFu);
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
            sub_1006D17C4();
        }
      }
    }
  }
  else
  {
    v6 = *(unsigned int *)(qword_10097FA80 + 56);
    if ((_DWORD)v6)
    {
      sub_100049F6C(v6);
      *(_DWORD *)(qword_10097FA80 + 56) = 0;
    }
    v7 = sub_1001089CC(a1);
    if (v7)
      *((_BYTE *)v7 + 95) = 0;
    if (*(_BYTE *)(qword_10097FA80 + 49))
    {
      sub_10010AEC8(a1, *((_DWORD *)v2 + 21));
    }
    else
    {
      LODWORD(v9[0]) = 2;
      DWORD2(v9[0]) = *(_DWORD *)(qword_10097FA80 + 52);
      WORD2(v9[0]) = a1;
      (*(void (**)(_OWORD *))(qword_10097FA80 + 24))(v9);
      sub_100253C9C(v2 + 13);
      sub_100053298(v2);
      --*(_BYTE *)(qword_10097FA80 + 16);
    }
  }
}

void sub_100108FCC(uint64_t a1)
{
  _QWORD *v2;
  BOOL v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v11;
  void (*v12)(uint64_t);
  unsigned __int8 *v13;

  if (!a1)
    sub_100253460();
  if (!qword_10097FA80)
    goto LABEL_16;
  v2 = *(_QWORD **)qword_10097FA80;
  if (!*(_QWORD *)qword_10097FA80 || v2 == (_QWORD *)qword_10097FA80)
    goto LABEL_16;
  while (*(v2 - 9) != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
  {
    v2 = (_QWORD *)*v2;
    if (v2)
      v4 = v2 == (_QWORD *)qword_10097FA80;
    else
      v4 = 1;
    if (v4)
      goto LABEL_16;
  }
  v5 = *((unsigned __int16 *)v2 - 52);
  if (!*((_WORD *)v2 - 52))
  {
LABEL_16:
    if (sub_10005549C())
    {
      sub_100054530("Could not find connenction handle that matches recv buffer\n");
      v6 = sub_1000544A0(0xFu);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    v5 = 0;
  }
  v7 = 0;
  v8 = *(const char **)(a1 + 8);
  while (strcmp((&off_10091A7E8)[v7], v8))
  {
    v7 += 2;
    if (v7 == 40)
      goto LABEL_25;
  }
  if ((((uint64_t (*)(uint64_t, uint64_t))(&off_10091A7E8)[v7 + 1])(v5, a1) & 1) == 0)
  {
LABEL_25:
    v9 = sub_1001089CC(v5);
    if (!v9)
      sub_100253460();
    v10 = 0;
    v11 = *(const char **)(a1 + 8);
    while (strcmp(off_10091A928[v10], v11))
    {
      if (++v10 == 8)
        goto LABEL_30;
    }
    if ((v10 & 0x7FFFFFFE) != 6)
    {
LABEL_35:
      sub_10010A16C(v5, v10 + 2701);
      return;
    }
    v13 = sub_100137BEC(a1, (unsigned __int8 **)(a1 + 24), 0);
    if (v13)
    {
      *((_DWORD *)v9 + 20) = sub_100258F90(v13);
      goto LABEL_35;
    }
LABEL_30:
    v12 = *(void (**)(uint64_t))(qword_10097FA80 + 32);
    if (v12)
      v12(a1);
  }
}

uint64_t sub_10010916C(uint64_t a1)
{
  sub_10010A16C(a1, 0);
  return 1;
}

BOOL sub_100109188(int a1, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  v3 = sub_1001089CC(a1);
  if (!v3)
    sub_100253460();
  v4 = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  v5 = v4;
  if (v4)
    *((_WORD *)v3 + 24) = sub_100258F90(v4);
  return v5 != 0;
}

BOOL sub_1001091E0()
{
  return *(_BYTE *)(qword_10097FA80 + 48) == 0;
}

uint64_t sub_1001091F8(__int16 a1, uint64_t a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  char v6;
  int v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  LODWORD(v9) = 14;
  WORD2(v9) = a1;
  v3 = (unsigned __int8 **)(a2 + 24);
  v4 = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      if (v7 == 1)
      {
        v6 = sub_100258F90(v4);
      }
      else if (!v7)
      {
        v5 = v4;
      }
      ++v7;
      v4 = sub_100137BEC(a2, v3, 0);
    }
    while (v4);
    LOBYTE(v10) = v6;
    *((_QWORD *)&v9 + 1) = v5;
  }
  (*(void (**)(__int128 *))(qword_10097FA80 + 24))(&v9);
  return 1;
}

BOOL sub_1001092C0(int a1, uint64_t a2)
{
  _BYTE *v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t i;
  unsigned __int8 *v14;

  v3 = sub_1001089CC(a1);
  if (!v3)
    sub_100253460();
  v4 = v3[78];
  if (v4 == 10)
  {
    v9 = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
    if (v9)
    {
      v10 = v9;
      v11 = 1;
      do
      {
        for (i = 0; i != 7; ++i)
        {
          if (v11 == v3[i + 64])
            v3[i + 71] = sub_100258F90(v10);
        }
        ++v11;
        v10 = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
      }
      while (v10);
    }
    return *(_BYTE *)(qword_10097FA80 + 48) == 0;
  }
  if (v4 == 11)
  {
    v5 = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
    if (v5)
    {
      v6 = 0;
      do
      {
        v14 = v5 + 1;
        v7 = sub_100137BEC(a2, &v14, 0);
        if (v7)
        {
          v8 = v7;
          if (sub_100258FCC(v7, "\"call\""))
          {
            if (sub_100258FCC(v8, "\"service\""))
            {
              if (sub_100258FCC(v8, "\"callsetup\"") && sub_100258FCC(v8, "\"call_setup\""))
              {
                if (sub_100258FCC(v8, "\"battchg\""))
                {
                  if (sub_100258FCC(v8, "\"signal\""))
                  {
                    if (sub_100258FCC(v8, "\"callheld\""))
                    {
                      ++v6;
                      if (!sub_100258FCC(v8, "\"roam\""))
                        v3[70] = v6;
                    }
                    else
                    {
                      v3[69] = ++v6;
                    }
                  }
                  else
                  {
                    v3[68] = ++v6;
                  }
                }
                else
                {
                  v3[67] = ++v6;
                }
              }
              else
              {
                v3[66] = ++v6;
              }
            }
            else
            {
              v3[65] = ++v6;
            }
          }
          else
          {
            v3[64] = ++v6;
          }
        }
        v5 = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
      }
      while (v5);
    }
    return *(_BYTE *)(qword_10097FA80 + 48) == 0;
  }
  return 0;
}

uint64_t sub_100109500(__int16 a1, uint64_t a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  char v6;
  int v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  LODWORD(v9) = 15;
  WORD2(v9) = a1;
  v3 = (unsigned __int8 **)(a2 + 24);
  v4 = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      if (v7 == 1)
      {
        v6 = sub_100258F90(v4);
      }
      else if (!v7)
      {
        v5 = v4;
      }
      ++v7;
      v4 = sub_100137BEC(a2, v3, 0);
    }
    while (v4);
    LOBYTE(v10) = v6;
    *((_QWORD *)&v9 + 1) = v5;
  }
  (*(void (**)(__int128 *))(qword_10097FA80 + 24))(&v9);
  return 1;
}

unsigned __int8 *sub_1001095C8(int a1, uint64_t a2)
{
  __int16 v3;
  unsigned __int8 *v4;
  unsigned __int8 *result;
  int v6;
  unsigned int v7;
  uint64_t i;
  int v9;
  int v10;
  _OWORD v11[3];
  uint64_t v12;

  v3 = a1;
  v4 = (unsigned __int8 *)sub_1001089CC(a1);
  if (!v4)
    sub_100253460();
  result = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  if (result)
  {
    v6 = sub_100258F90(result);
    result = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
    if (result)
    {
      v12 = 0;
      memset(v11, 0, sizeof(v11));
      v7 = sub_100258F90(result);
      for (i = 0; i != 7; ++i)
      {
        if (v6 == v4[i + 64])
          v4[i + 71] = v7;
      }
      WORD2(v11[0]) = v3;
      if (v6 == v4[66])
      {
        v9 = 19;
LABEL_11:
        LODWORD(v11[0]) = v9;
LABEL_12:
        BYTE8(v11[0]) = v7;
        (*(void (**)(_OWORD *))(qword_10097FA80 + 24))(v11);
        return (unsigned __int8 *)1;
      }
      if (v6 == v4[64])
      {
        v10 = 11;
      }
      else if (v6 == v4[65])
      {
        v10 = 13;
      }
      else
      {
        if (v6 == v4[67])
        {
          v9 = 23;
          goto LABEL_11;
        }
        if (v6 == v4[68])
        {
          v9 = 24;
          goto LABEL_11;
        }
        if (v6 == v4[69])
        {
          v9 = 12;
          goto LABEL_11;
        }
        if (v6 != v4[70])
          return 0;
        v10 = 20;
      }
      LODWORD(v11[0]) = v10;
      if (v7 < 2)
        goto LABEL_12;
      return 0;
    }
  }
  return result;
}

uint64_t sub_10010973C(__int16 a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v4;
  NSObject *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  result = (uint64_t)sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  if (result)
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    v6 = 0u;
    v4 = sub_100258F90((_BYTE *)result);
    if (v4 < 2)
    {
      LODWORD(v6) = 16;
      BYTE8(v6) = v4 != 0;
      WORD2(v6) = a1;
      (*(void (**)(__int128 *))(qword_10097FA80 + 24))(&v6);
      return 1;
    }
    else
    {
      result = sub_10005549C();
      if ((_DWORD)result)
      {
        sub_100054530("Invalid setting!", v6, v7, v8, v9);
        v5 = sub_1000544A0(0xFu);
        result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
        if ((_DWORD)result)
        {
          sub_1006CE7A4();
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL sub_100109808(int a1, uint64_t a2)
{
  __int16 v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  char v7;
  _OWORD v9[3];
  uint64_t v10;

  v3 = a1;
  v4 = sub_1001089CC(a1);
  if (!v4)
    sub_100253460();
  v5 = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  v6 = v5;
  if (v5)
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    v7 = sub_100258F90(v5);
    *((_BYTE *)v4 + 96) = v7;
    LODWORD(v9[0]) = 7;
    BYTE8(v9[0]) = v7;
    WORD2(v9[0]) = v3;
    (*(void (**)(_OWORD *))(qword_10097FA80 + 24))(v9);
  }
  return v6 != 0;
}

BOOL sub_1001098A8(int a1, uint64_t a2)
{
  __int16 v3;
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  char v7;
  _OWORD v9[3];
  uint64_t v10;

  v3 = a1;
  v4 = sub_1001089CC(a1);
  if (!v4)
    sub_100253460();
  v5 = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  v6 = v5;
  if (v5)
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    v7 = sub_100258F90(v5);
    *((_BYTE *)v4 + 97) = v7;
    LODWORD(v9[0]) = 8;
    BYTE8(v9[0]) = v7;
    WORD2(v9[0]) = v3;
    (*(void (**)(_OWORD *))(qword_10097FA80 + 24))(v9);
  }
  return v6 != 0;
}

uint64_t sub_100109948(__int16 a1)
{
  _OWORD v2[3];
  uint64_t v3;

  v3 = 0;
  memset(v2, 0, sizeof(v2));
  LODWORD(v2[0]) = 9;
  WORD2(v2[0]) = a1;
  (*(void (**)(_OWORD *))(qword_10097FA80 + 24))(v2);
  return 1;
}

BOOL sub_100109994(__int16 a1, uint64_t a2)
{
  unsigned __int8 *v2;
  _QWORD v4[2];
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v7 = 0;
  v5 = 0u;
  v6 = 0u;
  v4[0] = 17;
  WORD2(v4[0]) = a1;
  v2 = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  v4[1] = v2;
  if (v2)
    (*(void (**)(_QWORD *))(qword_10097FA80 + 24))(v4);
  return v2 != 0;
}

BOOL sub_100109A0C(__int16 a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _OWORD v6[3];
  uint64_t v7;

  v3 = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  v4 = v3;
  if (v3)
  {
    v7 = 0;
    memset(v6, 0, sizeof(v6));
    LODWORD(v6[0]) = 25;
    BYTE8(v6[0]) = sub_100258F90(v3);
    WORD2(v6[0]) = a1;
    (*(void (**)(_OWORD *))(qword_10097FA80 + 24))(v6);
  }
  return v4 != 0;
}

BOOL sub_100109A90(__int16 a1, uint64_t a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  char v8;
  int v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = 0;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  LODWORD(v11) = 22;
  WORD2(v11) = a1;
  v3 = (unsigned __int8 **)(a2 + 24);
  v4 = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  v5 = v4;
  if (v4)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      switch(v9)
      {
        case 3:
          v6 = sub_100258F90(v4);
          break;
        case 2:
          v8 = sub_100258F90(v4);
          break;
        case 1:
          v7 = v4;
          break;
      }
      ++v9;
      v4 = sub_100137BEC(a2, v3, 0);
    }
    while (v4);
    LOBYTE(v12) = v8;
    *((_QWORD *)&v11 + 1) = v7;
    DWORD1(v12) = v6;
    (*(void (**)(__int128 *))(qword_10097FA80 + 24))(&v11);
  }
  return v5 != 0;
}

uint64_t sub_100109B88(__int16 a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v4;
  NSObject *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  result = (uint64_t)sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  if (result)
  {
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    v6 = 0u;
    v4 = sub_100258F90((_BYTE *)result);
    if (v4 < 2)
    {
      LODWORD(v6) = 18;
      BYTE8(v6) = v4 != 0;
      WORD2(v6) = a1;
      (*(void (**)(__int128 *))(qword_10097FA80 + 24))(&v6);
      return 1;
    }
    else
    {
      result = sub_10005549C();
      if ((_DWORD)result)
      {
        sub_100054530("Invalid setting!", v6, v7, v8, v9);
        v5 = sub_1000544A0(0xFu);
        result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
        if ((_DWORD)result)
        {
          sub_1006CE7A4();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100109C54(__int16 a1, uint64_t a2)
{
  unsigned __int8 **v3;
  uint64_t result;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = 0;
  v7 = 0u;
  v8 = 0u;
  v6 = 0u;
  LODWORD(v6) = 10;
  WORD2(v6) = a1;
  v3 = (unsigned __int8 **)(a2 + 24);
  result = (uint64_t)sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  if (result)
  {
    v5 = -1;
    while (2)
    {
      switch(v5)
      {
        case 0xFFFFFFFF:
          DWORD2(v6) = sub_100258F90((_BYTE *)result);
          goto LABEL_12;
        case 0u:
          BYTE12(v6) = *(_BYTE *)result == 49;
          goto LABEL_12;
        case 1u:
          LODWORD(v7) = sub_100258F90((_BYTE *)result);
          goto LABEL_12;
        case 2u:
          DWORD1(v7) = sub_100258F90((_BYTE *)result);
          goto LABEL_12;
        case 3u:
          BYTE8(v7) = *(_BYTE *)result == 49;
          goto LABEL_12;
        case 4u:
          *(_QWORD *)&v8 = result;
          goto LABEL_12;
        case 5u:
          BYTE8(v8) = sub_100258F90((_BYTE *)result);
          goto LABEL_12;
        case 6u:
          v9 = result;
LABEL_12:
          result = (uint64_t)sub_100137BEC(a2, v3, 0);
          ++v5;
          if (result)
            continue;
          if (v5 >= 4)
          {
            (*(void (**)(__int128 *))(qword_10097FA80 + 24))(&v6);
            result = 1;
          }
          else
          {
LABEL_14:
            result = 0;
          }
          break;
        default:
          goto LABEL_14;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_100109D80(__int16 a1, uint64_t a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  LODWORD(v9) = 21;
  WORD2(v9) = a1;
  v3 = (unsigned __int8 **)(a2 + 24);
  v4 = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      if (v7 == 2)
      {
        v6 = v4;
      }
      else if (v7 != 1)
      {
        if (v7)
          return 0;
        v5 = sub_100258F90(v4);
      }
      ++v7;
      v4 = sub_100137BEC(a2, v3, 0);
      if (!v4)
      {
        *(_QWORD *)&v10 = v6;
        DWORD2(v9) = v5;
        break;
      }
    }
  }
  (*(void (**)(__int128 *))(qword_10097FA80 + 24))(&v9);
  return 1;
}

uint64_t sub_100109E58(int a1, uint64_t a2)
{
  unsigned __int8 *v5;
  int v6;
  int v7;
  char *v8;
  int v9;
  size_t v10;
  _OWORD v11[3];
  uint64_t v12;

  if ((sub_100108BD0(a1) & 0x200) == 0 || (*(_WORD *)(qword_10097FA80 + 40) & 0x80) == 0)
    return 0;
  v5 = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  v6 = sub_100258F90(v5);
  v7 = v6;
  if (v6 > 127)
  {
    if (v6 > 254)
    {
      if (v6 == 255)
      {
        if ((*(_BYTE *)(qword_10097FA80 + 44) & 0x10) == 0)
          goto LABEL_31;
        v8 = "AT+BCS=255\r";
      }
      else
      {
        if (v6 != 256)
          goto LABEL_32;
        if ((*(_BYTE *)(qword_10097FA80 + 45) & 1) == 0)
          goto LABEL_31;
        v8 = "AT+BCS=256\r";
      }
    }
    else if (v6 == 128)
    {
      if ((*(_BYTE *)(qword_10097FA80 + 44) & 0x80) == 0)
        goto LABEL_31;
      v8 = "AT+BCS=128\r";
    }
    else
    {
      if (v6 != 129)
        goto LABEL_32;
      if ((*(_BYTE *)(qword_10097FA80 + 45) & 2) == 0)
        goto LABEL_31;
      v8 = "AT+BSC=129\r";
    }
LABEL_35:
    v9 = a1;
    v10 = 11;
    goto LABEL_36;
  }
  if (v6 > 63)
  {
    if (v6 == 64)
    {
      if ((*(_BYTE *)(qword_10097FA80 + 45) & 4) == 0)
        goto LABEL_31;
      v8 = "AT+BCS=130\r";
    }
    else
    {
      if (v6 != 127)
        goto LABEL_32;
      if ((*(_BYTE *)(qword_10097FA80 + 44) & 4) == 0)
        goto LABEL_31;
      v8 = "AT+BCS=127\r";
    }
    goto LABEL_35;
  }
  if (v6 != 1)
  {
    if (v6 == 2)
    {
      if ((*(_BYTE *)(qword_10097FA80 + 44) & 2) != 0)
      {
        v8 = "AT+BCS=2\r";
LABEL_25:
        v9 = a1;
        v10 = 9;
LABEL_36:
        sub_100108A74(v9, 0, v8, v10, 0, 29);
        goto LABEL_37;
      }
      goto LABEL_31;
    }
LABEL_32:
    sub_100108C08(a1, 0);
    if (!v7)
      return 1;
    goto LABEL_37;
  }
  if ((*(_BYTE *)(qword_10097FA80 + 44) & 1) != 0)
  {
    v8 = "AT+BCS=1\r";
    goto LABEL_25;
  }
LABEL_31:
  sub_100108C08(a1, 0);
LABEL_37:
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  LODWORD(v11[0]) = 26;
  DWORD2(v11[0]) = v7;
  WORD2(v11[0]) = a1;
  (*(void (**)(_OWORD *))(qword_10097FA80 + 24))(v11);
  return 1;
}

unsigned __int8 *sub_10010A050(__int16 a1, uint64_t a2)
{
  unsigned __int8 **v4;
  unsigned __int8 *result;
  _OWORD v6[3];
  uint64_t v7;

  v4 = (unsigned __int8 **)(a2 + 24);
  result = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  if (result)
  {
    result = sub_100137BEC(a2, v4, 0);
    if (result)
    {
      v7 = 0;
      memset(v6, 0, sizeof(v6));
      WORD2(v6[0]) = a1;
      LODWORD(v6[0]) = 27;
      BYTE8(v6[0]) = sub_100258F90(result);
      (*(void (**)(_OWORD *))(qword_10097FA80 + 24))(v6);
      return (unsigned __int8 *)1;
    }
  }
  return result;
}

BOOL sub_10010A0E8(__int16 a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _OWORD v6[3];
  uint64_t v7;

  v3 = sub_100137BEC(a2, (unsigned __int8 **)(a2 + 24), 0);
  v4 = v3;
  if (v3)
  {
    v7 = 0;
    memset(v6, 0, sizeof(v6));
    WORD2(v6[0]) = a1;
    LODWORD(v6[0]) = 28;
    BYTE8(v6[0]) = sub_100258F90(v3);
    (*(void (**)(_OWORD *))(qword_10097FA80 + 24))(v6);
  }
  return v4 != 0;
}

void sub_10010A16C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  void (*v6)(uint64_t, uint64_t);
  BOOL v7;

  v4 = sub_1001089CC(a1);
  if (!v4)
    sub_100253460();
  v5 = *((unsigned __int8 *)v4 + 78);
  sub_10010A1DC(a1);
  *((_BYTE *)v4 + 78) = 0;
  v6 = (void (*)(uint64_t, uint64_t))v4[1];
  if (v6)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7)
    v6(a1, a2);
}

void sub_10010A1DC(int a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = sub_1001089CC(a1);
  if (v1)
  {
    v2 = v1;
    v3 = *((unsigned int *)v1 + 1);
    if ((_DWORD)v3)
    {
      sub_100049F6C(v3);
      *((_DWORD *)v2 + 1) = 0;
    }
  }
  else
  {
    sub_100253460();
  }
}

void sub_10010A21C(int a1)
{
  _QWORD *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;

  v2 = sub_1001089CC(*(unsigned __int16 *)(qword_10097FA80 + 18));
  if (!v2)
    sub_100253460();
  v10 = xmmword_100739210;
  v11 = xmmword_100739200;
  v9 = &v11;
  v8 = 65542;
  v7 = &v10;
  v6 = 65542;
  if (a1
    || (*((_BYTE *)v2 + 94) = 2,
        sub_100245200((uint64_t)sub_10010A5A4, (unsigned __int8 *)&v8, (unsigned __int8 *)&v6)))
  {
    if (sub_10005549C())
    {
      sub_100054530("SDP connect", v6, v7, v8, v9, v10, v11);
      v3 = sub_1000544A0(0xFu);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_1006D17C4();
    }
    if (*((_BYTE *)v2 + 94) == 2)
    {
      if (sub_100244A44())
      {
        if (sub_10005549C())
        {
          sub_100054530("SDP disconnect");
          v4 = sub_1000544A0(0xFu);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
            sub_1006D17C4();
        }
      }
      else
      {
        *((_BYTE *)v2 + 94) = 3;
      }
    }
    else
    {
      *((_BYTE *)v2 + 94) = 0;
    }
    if (*((_BYTE *)v2 + 95) == 1)
    {
      v5 = sub_10010A4A4(*(unsigned __int16 *)v2);
      if (v5)
        sub_100108CC4(*(unsigned __int16 *)v2, v5);
    }
  }
  if (*((_BYTE *)v2 + 95) == 4)
    sub_100108D98(*(unsigned __int16 *)v2);
}

void sub_10010A3E4()
{
  _QWORD *v0;
  int v1;
  NSObject *v2;
  int v3;

  v0 = sub_1001089CC(*(unsigned __int16 *)(qword_10097FA80 + 18));
  if (!v0)
    sub_100253460();
  *(_WORD *)(qword_10097FA80 + 18) = -1;
  *((_BYTE *)v0 + 94) = 0;
  v1 = *((unsigned __int8 *)v0 + 95);
  if (v1 == 4)
  {
    sub_100108D98(*(unsigned __int16 *)v0);
  }
  else if (v1 == 1)
  {
    if (sub_10005549C())
    {
      sub_100054530("SDP disconnected while querying supported features\n");
      v2 = sub_1000544A0(0xFu);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    v3 = sub_10010A4A4(*(unsigned __int16 *)v0);
    if (v3)
      sub_100108CC4(*(unsigned __int16 *)v0, v3);
  }
}

uint64_t sub_10010A4A4(int a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned __int16 v12;
  NSObject *v13;
  _QWORD v15[2];

  v2 = sub_1001089CC(a1);
  if (v2)
    *((_BYTE *)v2 + 95) = 2;
  v15[0] = 0;
  v15[1] = 0;
  v9 = sub_10025909C((uint64_t)v15, 0x14uLL);
  if (!(_DWORD)v9)
  {
    v10 = sub_1002596F4((uint64_t)v15, (uint64_t)"AT+BRSF=%d\r", v3, v4, v5, v6, v7, v8, *(unsigned __int16 *)(qword_10097FA80 + 40));
    if ((_DWORD)v10)
    {
      v9 = v10;
      sub_1002590E8((uint64_t)v15);
    }
    else
    {
      v11 = (char *)sub_10025971C((uint64_t)v15);
      v12 = strlen(v11);
      v9 = sub_100108A74(a1, (uint64_t)sub_10010A740, v11, v12, 1, 2);
      if (!(_DWORD)v9)
        return v9;
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("SLC handshaking (retrieve features)");
    v13 = sub_1000544A0(0xFu);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_1006D17C4();
  }
  return v9;
}

void sub_10010A5A4(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  NSObject *v6;
  int v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;

  v5 = sub_1001089CC(*(unsigned __int16 *)(qword_10097FA80 + 18));
  if (!v5)
    sub_100253460();
  if (sub_100244A44())
  {
    if (sub_10005549C())
    {
      sub_100054530("SDP disconnect");
      v6 = sub_1000544A0(0xFu);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006D17C4();
    }
  }
  else
  {
    *((_BYTE *)v5 + 94) = 3;
  }
  if (a3)
    goto LABEL_9;
  if (!*(_WORD *)(a1 + 2))
  {
    if (!sub_10005549C())
      goto LABEL_9;
    sub_100054530("No attributes in SDP response");
    v11 = sub_1000544A0(0xFu);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
LABEL_23:
    sub_1006CE7A4();
    goto LABEL_9;
  }
  if (*(_BYTE *)a1 != 6)
    sub_100253460();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v9 && *(_DWORD *)(v9 + 8) == 785)
  {
    *((_WORD *)v5 + 24) = *(_DWORD *)(v9 + 24);
    goto LABEL_9;
  }
  if (sub_10005549C())
  {
    sub_100054530("Unexpected or no attribute in SDP response");
    v10 = sub_1000544A0(0xFu);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_23;
  }
LABEL_9:
  v7 = *((unsigned __int8 *)v5 + 95);
  if (v7 == 4)
  {
    sub_100108D98(*(unsigned __int16 *)v5);
  }
  else if (v7 == 1)
  {
    v8 = sub_10010A4A4(*(unsigned __int16 *)v5);
    if (v8)
      sub_100108CC4(*(unsigned __int16 *)v5, v8);
  }
}

void sub_10010A740(uint64_t a1, int a2)
{
  int v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  NSObject *v8;

  if (a2 != 2701)
  {
    v3 = a2;
    if (a2)
    {
      if (!sub_10005549C())
        goto LABEL_16;
      sub_100054530("Retrieve features");
      v6 = sub_1000544A0(0xFu);
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if ((sub_100108BD0(a1) & 0x200) == 0 || (*(_WORD *)(qword_10097FA80 + 40) & 0x80) == 0)
  {
    v4 = sub_100108A74(a1, (uint64_t)sub_10010A9AC, "AT+CIND=?\r", 0xAuLL, 0, 11);
    if (!v4)
      return;
    v3 = v4;
    if (!sub_10005549C())
      goto LABEL_16;
    sub_100054530("SLC establish (indicator test)");
    v5 = sub_1000544A0(0xFu);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    goto LABEL_15;
  }
  v7 = sub_100108C08(a1, (uint64_t)sub_10010A8AC);
  if (!v7)
    return;
  v3 = v7;
  if (sub_10005549C())
  {
    sub_100054530("SLC establish (call hold test)");
    v8 = sub_1000544A0(0xFu);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
LABEL_15:
      sub_1006D17C4();
  }
LABEL_16:
  sub_100108CC4(a1, v3);
}

void sub_10010A8AC(uint64_t a1, int a2)
{
  int v3;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  NSObject *v7;

  if (a2)
  {
    v3 = a2;
    if (!sub_10005549C())
      goto LABEL_11;
    sub_100054530("Available codecs");
    v4 = sub_1000544A0(0xFu);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
    goto LABEL_10;
  }
  v5 = sub_1001089CC(a1);
  if (v5)
    *((_BYTE *)v5 + 95) = 3;
  v6 = sub_100108A74(a1, (uint64_t)sub_10010A9AC, "AT+CIND=?\r", 0xAuLL, 0, 11);
  if (v6)
  {
    v3 = v6;
    if (!sub_10005549C())
      goto LABEL_11;
    sub_100054530("SLC establish (indicator test)");
    v7 = sub_1000544A0(0xFu);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
LABEL_10:
    sub_1006D17C4();
LABEL_11:
    sub_100108CC4(a1, v3);
  }
}

void sub_10010A9AC(uint64_t a1, int a2)
{
  int v3;
  NSObject *v4;
  int v5;
  NSObject *v6;

  if (a2)
  {
    v3 = a2;
    if (!sub_10005549C())
      goto LABEL_9;
    sub_100054530("Indicator test");
    v4 = sub_1000544A0(0xFu);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    goto LABEL_8;
  }
  v5 = sub_100108A74(a1, (uint64_t)sub_10010AA98, "AT+CIND?\r", 9uLL, 0, 10);
  if (!v5)
    return;
  v3 = v5;
  if (sub_10005549C())
  {
    sub_100054530("SLC establish (indicator read)");
    v6 = sub_1000544A0(0xFu);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
LABEL_8:
      sub_1006D17C4();
  }
LABEL_9:
  sub_100108CC4(a1, v3);
}

void sub_10010AA98(uint64_t a1, int a2)
{
  int v3;
  NSObject *v4;
  int v5;
  NSObject *v6;

  if (a2)
  {
    v3 = a2;
    if (!sub_10005549C())
      goto LABEL_9;
    sub_100054530("Read indicators");
    v4 = sub_1000544A0(0xFu);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_9;
    goto LABEL_8;
  }
  v5 = sub_100108A74(a1, (uint64_t)sub_10010AB84, "AT+CMER=3,0,0,1\r", 0x10uLL, 0, 13);
  if (!v5)
    return;
  v3 = v5;
  if (sub_10005549C())
  {
    sub_100054530("SLC establish (enable event reporting)");
    v6 = sub_1000544A0(0xFu);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
LABEL_8:
      sub_1006D17C4();
  }
LABEL_9:
  sub_100108CC4(a1, v3);
}

void sub_10010AB84(uint64_t a1, int a2)
{
  int v3;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  NSObject *v7;
  int v8;
  NSObject *v9;

  if (a2)
  {
    v3 = a2;
    if (!sub_10005549C())
      goto LABEL_5;
    sub_100054530("Enable event reporting");
    v4 = sub_1000544A0(0xFu);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
    goto LABEL_4;
  }
  if ((sub_100108BD0(a1) & 1) != 0 && (*(_WORD *)(qword_10097FA80 + 40) & 2) != 0)
  {
    v8 = sub_100108A74(a1, (uint64_t)sub_10010AD20, "AT+CHLD=?\r", 0xAuLL, 0, 7);
    if (v8)
    {
      v3 = v8;
      if (!sub_10005549C())
        goto LABEL_5;
      sub_100054530("SLC establish (call hold test)");
      v9 = sub_1000544A0(0xFu);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_5;
LABEL_4:
      sub_1006D17C4();
LABEL_5:
      sub_100108CC4(a1, v3);
    }
  }
  else
  {
    v5 = sub_1001089CC(a1);
    if (v5)
      *((_BYTE *)v5 + 95) = 3;
    if ((*(_WORD *)(qword_10097FA80 + 40) & 1) == 0)
    {
      sub_10010AEC8(a1, 0);
      return;
    }
    v6 = sub_100108B30(a1, (uint64_t)sub_10010AE34);
    if (v6)
    {
      v3 = v6;
      if (!sub_10005549C())
        goto LABEL_5;
      sub_100054530("Disable remote NREC");
      v7 = sub_1000544A0(0xFu);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_5;
      goto LABEL_4;
    }
  }
}

void sub_10010AD20(uint64_t a1, int a2)
{
  int v3;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  NSObject *v7;

  if (a2)
  {
    v3 = a2;
    if (!sub_10005549C())
      goto LABEL_5;
    sub_100054530("Call hold test");
    v4 = sub_1000544A0(0xFu);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
    goto LABEL_4;
  }
  v5 = sub_1001089CC(a1);
  if (v5)
    *((_BYTE *)v5 + 95) = 3;
  if ((*(_WORD *)(qword_10097FA80 + 40) & 1) == 0)
  {
    sub_10010AEC8(a1, 0);
    return;
  }
  v6 = sub_100108B30(a1, (uint64_t)sub_10010AE34);
  if (v6)
  {
    v3 = v6;
    if (!sub_10005549C())
      goto LABEL_5;
    sub_100054530("Disable remote NREC");
    v7 = sub_1000544A0(0xFu);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
LABEL_4:
    sub_1006D17C4();
LABEL_5:
    sub_100108CC4(a1, v3);
  }
}

void sub_10010AE34(uint64_t a1, int a2)
{
  NSObject *v4;

  if (!a2)
    goto LABEL_6;
  if (sub_10005549C())
  {
    sub_100054530("Disable remote NREC");
    v4 = sub_1000544A0(0xFu);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1006D17C4();
  }
  if (a2 != 2701)
    sub_100108CC4(a1, a2);
  else
LABEL_6:
    sub_10010AEC8(a1, 0);
}

uint64_t sub_10010AEC8(int a1, int a2)
{
  __int16 v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  __int16 v8;
  __int16 v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v3 = a1;
  v4 = sub_1001089CC(a1);
  if (!v4)
    sub_100253460();
  v13 = 0;
  v9 = 0;
  v11 = 0u;
  v12 = 0u;
  v5 = qword_10097FA80;
  *(_BYTE *)(qword_10097FA80 + 49) = 0;
  *((_DWORD *)v4 + 21) = a2;
  LODWORD(v11) = a2;
  v10 = v4 + 11;
  v7 = 1;
  v8 = v3;
  result = (*(uint64_t (**)(int *))(v5 + 24))(&v7);
  if (!a2)
  {
    if (*((unsigned __int8 *)v4 + 65) != 255)
    {
      v7 = 13;
      LOBYTE(v10) = *((_BYTE *)v4 + 72) != 0;
      result = (*(uint64_t (**)(int *))(qword_10097FA80 + 24))(&v7);
    }
    if (*((unsigned __int8 *)v4 + 64) != 255)
    {
      v7 = 11;
      LOBYTE(v10) = *((_BYTE *)v4 + 71) != 0;
      result = (*(uint64_t (**)(int *))(qword_10097FA80 + 24))(&v7);
    }
    if (*((unsigned __int8 *)v4 + 66) != 255)
    {
      v7 = 19;
      LOBYTE(v10) = *((_BYTE *)v4 + 73);
      result = (*(uint64_t (**)(int *))(qword_10097FA80 + 24))(&v7);
    }
    if (*((unsigned __int8 *)v4 + 69) != 255)
    {
      v7 = 12;
      LOBYTE(v10) = *((_BYTE *)v4 + 76);
      result = (*(uint64_t (**)(int *))(qword_10097FA80 + 24))(&v7);
    }
    if (*((unsigned __int8 *)v4 + 67) != 255)
    {
      v7 = 23;
      LOBYTE(v10) = *((_BYTE *)v4 + 74);
      result = (*(uint64_t (**)(int *))(qword_10097FA80 + 24))(&v7);
    }
    if (*((unsigned __int8 *)v4 + 68) != 255)
    {
      v7 = 24;
      LOBYTE(v10) = *((_BYTE *)v4 + 75);
      result = (*(uint64_t (**)(int *))(qword_10097FA80 + 24))(&v7);
    }
    if (*((unsigned __int8 *)v4 + 70) != 255)
    {
      v7 = 20;
      LOBYTE(v10) = *((_BYTE *)v4 + 77) != 0;
      return (*(uint64_t (**)(int *))(qword_10097FA80 + 24))(&v7);
    }
  }
  return result;
}

void sub_10010B09C(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;

  v2 = sub_1001089CC(a1);
  if (!v2)
    sub_100253460();
  if (sub_10018070C((uint64_t)(v2 + 11)))
  {
    if (sub_10005549C())
    {
      sub_100054530("ForceDisconnect - assuming already disconnected");
      v3 = sub_1000544A0(0xFu);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_1006D17C4();
    }
    *((_WORD *)v2 + 47) = 0;
    sub_100108D50(a1, 926);
  }
}

uint64_t sub_10010B134(uint64_t result)
{
  _WORD *v1;
  uint64_t v2;

  v1 = *(_WORD **)(result + 8);
  v2 = (unsigned __int16)*v1;
  if (*v1)
  {
    *(_DWORD *)(qword_10097FA80 + 56) = 0;
    sub_10010B09C(v2);
    return sub_100108D98(v2);
  }
  return result;
}

void sub_10010B17C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = sub_1001089CC(a1);
  if (!v7)
    sub_100253460();
  sub_100053298(a2);
  if ((_DWORD)a4)
    sub_10010A16C(a1, a4);
  else
    sub_10010B244(a1, *((unsigned __int8 *)v7 + 78));
}

void sub_10010B1E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;

  v6 = sub_1001089CC(a1);
  if (v6)
  {
    if ((_DWORD)a4)
    {
LABEL_3:
      sub_10010A16C(a1, a4);
      return;
    }
  }
  else
  {
    sub_100253460();
    if ((_DWORD)a4)
      goto LABEL_3;
  }
  sub_10010B244(a1, *((unsigned __int8 *)v6 + 78));
}

void sub_10010B244(int a1, unsigned int a2)
{
  int *v3;
  unsigned __int16 *v4;
  const void *v5[2];
  int *v6;

  v3 = (int *)sub_1001089CC(a1);
  v6 = v3;
  if (!v3)
    sub_100253460();
  v5[1] = &v6;
  v5[0] = (const void *)8;
  if (!v3[1])
  {
    if (a2 > 0x21)
      goto LABEL_10;
    if (((1 << a2) & 0x20003001ALL) != 0)
    {
      v4 = (unsigned __int16 *)(sub_100252DE8(0xFu) + 4);
LABEL_7:
      sub_10004A9EC((uint64_t)sub_10010B2F8, v5, *v4, v6 + 1);
      return;
    }
    if (a2)
    {
LABEL_10:
      v4 = (unsigned __int16 *)(sub_100252DE8(0xFu) + 2);
      goto LABEL_7;
    }
  }
}

uint64_t sub_10010B2F8(uint64_t a1)
{
  unsigned __int16 *v1;
  NSObject *v2;
  uint64_t result;

  v1 = **(unsigned __int16 ***)(a1 + 8);
  if (sub_10005549C())
  {
    sub_100054530("Didn't get response from handsfree audio gateway within timeout period");
    v2 = sub_1000544A0(0xFu);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  *((_DWORD *)v1 + 1) = 0;
  sub_10010A16C(*v1, 112);
  result = sub_100252DE8(0xFu);
  if (*(_BYTE *)(result + 6))
    return sub_1001108EC(*v1);
  return result;
}

uint64_t sub_10010B3A4(pthread_cond_t *a1)
{
  _opaque_pthread_t *v1;

  pthread_cond_wait(a1, &stru_10097FA88);
  v1 = pthread_self();
  return pthread_getname_np(v1, &byte_10097FAC8, 0x40uLL);
}

uint64_t sub_10010B3D0()
{
  return byte_10097FB48;
}

uint64_t sub_10010B3DC(int a1, void (*a2)(void), void (*a3)(uint64_t, const char *))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  sched_param v15;
  uint8_t buf[4];
  const char *v17;
  pthread_attr_t v18;

  dword_10097FB4C = a1;
  byte_10097FB48 = 1;
  dword_10097FB50 = -1;
  v5 = sub_10010B6C4();
  if ((_DWORD)v5)
  {
    v10 = v5;
    v11 = sub_1000544A0(0x5Cu);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v18.__sig) = 136446210;
      *(uint64_t *)((char *)&v18.__sig + 4) = (uint64_t)"OI_StackWrapperToken_Init failed\n";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&v18, 0xCu);
    }
    sub_100112D60(v10);
    goto LABEL_16;
  }
  if (pthread_mutex_init(&stru_10097FB08, 0))
  {
LABEL_16:
    v12 = sub_1000544A0(0x5Cu);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v18.__sig) = 136446210;
      *(uint64_t *)((char *)&v18.__sig + 4) = (uint64_t)"OI_Transport_TokenInit failed\n";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&v18, 0xCu);
    }
    sub_100112D60(108);
LABEL_19:
    sub_1006D182C();
  }
  sub_1000477B8();
  pthread_cond_init(&stru_10097FB58, 0);
  pthread_mutex_init(&stru_10097FB88, 0);
  memset(&v18, 0, sizeof(v18));
  v15 = 0;
  pthread_attr_init(&v18);
  pthread_attr_getschedparam(&v18, &v15);
  v15.sched_priority = 60;
  if (pthread_attr_setschedparam(&v18, &v15))
    perror("Send thread creation: Failed pthread_attr_setschedparam");
  if (pthread_create((pthread_t *)&qword_10097FBC8, &v18, (void *(__cdecl *)(void *))sub_1000207AC, 0))
    goto LABEL_19;
  sub_10004AE1C(0);
  v6 = sub_10017C130(0, (uint64_t (*)(_QWORD))sub_10004AE1C, a2, a3);
  if ((_DWORD)v6)
  {
    v7 = sub_1000544A0(0x5Cu);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v17 = "Stack_Init failed\n";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    }
    sub_1000478A0();
    return v6;
  }
  v8 = sub_10016F97C(sub_10010B768);
  if (!(_DWORD)v8)
  {
    sub_1000478A0();
    sub_10010B78C(&byte_10097FBD0, 0);
    return v6;
  }
  v13 = v8;
  v14 = sub_1000544A0(0x5Cu);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v17 = "OI_BT_Device_Config failed\n";
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
  }
  sub_100112D60(v13);
  return sub_10010B6C4();
}

uint64_t sub_10010B6C4()
{
  uint64_t result;
  NSObject *global_queue;
  NSObject *v2;
  void *v3;

  if (pthread_mutex_init(&stru_10097FA88, 0))
    return 108;
  global_queue = dispatch_get_global_queue(17, 0);
  v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, global_queue);
  qword_10097FBD8 = (uint64_t)v2;
  v3 = malloc_type_malloc(8uLL, 0x100004090D0E795uLL);
  dispatch_set_context(v2, v3);
  dispatch_source_set_event_handler_f((dispatch_source_t)qword_10097FBD8, (dispatch_function_t)sub_10007256C);
  result = 0;
  dword_10097FBD4 = 0;
  return result;
}

uint64_t sub_10010B768(uint64_t result)
{
  uint64_t v1;

  if ((_DWORD)result)
  {
    v1 = sub_100112D60(result);
    return sub_10010B78C(v1);
  }
  else
  {
    byte_10097FBD0 = 1;
  }
  return result;
}

uint64_t sub_10010B78C(_BYTE *a1, int a2)
{
  int v4;
  _BOOL4 v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  sub_10004AD30((uint64_t)&v9);
  LODWORD(v9) = v9 + a2;
  if (!*a1)
  {
    do
    {
      if (dword_10097FB4C <= 1)
        v4 = 1;
      else
        v4 = dword_10097FB4C;
      sub_100113670(v4);
      if (a2)
      {
        sub_10004AD30((uint64_t)&v8);
        v5 = (int)sub_100072ACC((uint64_t)&v8, (uint64_t)&v9) >= 0;
      }
      else
      {
        v5 = 0;
      }
      if (*a1)
        v6 = 0;
      else
        v6 = !v5;
    }
    while (v6);
    if (!*a1)
      return 150;
  }
  result = 0;
  *a1 = 0;
  return result;
}

void sub_10010B83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _opaque_pthread_t *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char v63[8];
  uint64_t v64;
  int v65;

  byte_10097FB48 = 0;
  sub_10010B9C0(1, a2, a3, a4, a5, a6, a7, a8, v58);
  sub_10004AE1C(0);
  pthread_join((pthread_t)qword_10097FBC8, 0);
  byte_10097FBE0 = 0;
  sub_100253320((uint64_t)"Terminating stack...\n", v9, v10, v11, v12, v13, v14, v15, v59);
  sub_1000477B8();
  v16 = sub_10017C854();
  dispatch_set_finalizer_f((dispatch_object_t)qword_10097FBD8, (dispatch_function_t)&_free);
  dispatch_source_cancel((dispatch_source_t)qword_10097FBD8);
  dispatch_release((dispatch_object_t)qword_10097FBD8);
  sub_1000478A0();
  if ((_DWORD)v16)
    sub_100253320((uint64_t)"OI_BT_Stack_Terminate() failed: %d!\n", v17, v18, v19, v20, v21, v22, v23, v16);
  v24 = pthread_mutex_destroy(&stru_10097FA88);
  if (!v24)
    goto LABEL_6;
  v25 = v24;
  *(_QWORD *)v63 = 0;
  v64 = 0;
  v65 = 0;
  v26 = pthread_self();
  pthread_getname_np(v26, v63, 0x14uLL);
  if (*(_QWORD *)v63 != 0x706F6F4C746F44)
  {
    v27 = v25;
    goto LABEL_10;
  }
  usleep(0x7A120u);
  v27 = pthread_mutex_destroy(&stru_10097FA88);
  if (v27)
  {
LABEL_10:
    v62 = strerror(v27);
    sub_100253320((uint64_t)"Destroying stackAccessMutex failed with error: %s\n", v43, v44, v45, v46, v47, v48, v49, (uint64_t)v62);
    goto LABEL_11;
  }
LABEL_6:
  v28 = pthread_mutex_destroy(&stru_10097FB88);
  if (!v28)
  {
    sub_100253320((uint64_t)"Done.\n", v29, v30, v31, v32, v33, v34, v35, v60);
    return;
  }
  v61 = strerror(v28);
  sub_100253320((uint64_t)"Destroying idlerMutex failed with error: %s\n", v36, v37, v38, v39, v40, v41, v42, (uint64_t)v61);
LABEL_11:
  v50 = sub_100112D60(148);
  sub_10010B9C0(v50, v51, v52, v53, v54, v55, v56, v57, a9);
}

void sub_10010B9C0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = a1;
  if (a1)
  {
    sub_100253320((uint64_t)"Stack termination failsafe : lock idler", a2, a3, a4, a5, a6, a7, a8, v17);
    pthread_mutex_lock(&stru_10097FB88);
    byte_10097FBE0 = v9;
    pthread_cond_signal(&stru_10097FB58);
    pthread_mutex_unlock(&stru_10097FB88);
    sub_100253320((uint64_t)"Stack termination failsafe set", v10, v11, v12, v13, v14, v15, v16, a9);
  }
  else
  {
    byte_10097FBE0 = 0;
  }
}

uint64_t sub_10010BA34(_BYTE *a1)
{
  *a1 = 1;
  return 0;
}

uint64_t sub_10010BA44()
{
  sub_10011D1D0();
  return sub_10016F8F0();
}

uint64_t (*sub_10010BA58(int a1))(void)
{
  sub_10011D2B0(a1);
  return sub_10016F918();
}

uint64_t sub_10010BA70(char **a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  char **v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  uint64_t v10;

  LODWORD(v2) = a2;
  sub_1000477B8();
  if ((int)v2 <= 0)
  {
    sub_1000478A0();
  }
  else
  {
    v2 = v2;
    v4 = v2;
    v5 = a1;
    do
    {
      v6 = (uint64_t)*v5++;
      v9 = 0;
      v10 = 0;
      v9 = mach_continuous_time();
      LOBYTE(v10) = 0;
      sub_100047AB0(*(unsigned __int8 *)(v6 + 8), *(unsigned __int8 **)(v6 + 16), *(unsigned __int16 *)(v6 + 24), (uint64_t)&v9);
      --v4;
    }
    while (v4);
    sub_1000478A0();
    do
    {
      v7 = *a1++;
      sub_10010BB10(v7);
      --v2;
    }
    while (v2);
  }
  return 0;
}

void sub_10010BB10(char *a1)
{
  uint64_t v2;
  pthread_mutex_t *v3;
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  a1[8] = 0;
  *(_DWORD *)(a1 + 10) = 0;
  *((_WORD *)a1 + 12) = 0;
  v2 = qword_100980098;
  v3 = (pthread_mutex_t *)(qword_100980098 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(qword_100980098 + 16));
  v4 = *(int *)(v2 + 12);
  if ((_DWORD)v4 == *(_DWORD *)(v2 + 8))
  {
    pthread_mutex_unlock(v3);
  }
  else
  {
    *(_DWORD *)(v2 + 12) = v4 + 1;
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v4) = a1;
    pthread_mutex_unlock(v3);
    if ((v4 & 0x80000000) == 0)
      return;
  }
  free(*((void **)a1 + 2));
  free(a1);
}

uint64_t sub_10010BBAC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned __int8 i;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  __int16 v12;
  __int16 v13;
  char v14;
  unsigned __int8 v15;

  result = 3758097090;
  if (a1 && a2 && (a3 - 4) >= 0xFFFFFFFE)
  {
    v6 = a3 == 3 ? 4 : 2;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v6);
    if (!(_DWORD)result)
    {
      v15 = 0;
      *(_BYTE *)(a1 + 97) = v6;
      result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)a2 + 152))(a2, &v15);
      if (!(_DWORD)result)
      {
        if (v15 == 2)
        {
          for (i = 1; v15 >= i; ++i)
          {
            v14 = 0;
            v13 = 0;
            v12 = 0;
            v11 = 0;
            result = (*(uint64_t (**)(uint64_t, _QWORD, char *, char *, __int16 *, __int16 *, char *))(*(_QWORD *)a2 + 208))(a2, i, &v14, (char *)&v13 + 1, &v13, &v12, &v11);
            if ((_DWORD)result)
              break;
            if (v13 != 1)
              return 0xFFFFFFFFLL;
            v8 = v14;
            v9 = a1 + 130;
            if (v14 != 1)
            {
              v9 = a1 + 138;
              if (v14)
                return 0xFFFFFFFFLL;
            }
            result = 0;
            *(_BYTE *)v9 = *(_BYTE *)(a1 + 25);
            *(_BYTE *)(v9 + 1) = *(_BYTE *)(a1 + 97);
            *(_BYTE *)(v9 + 3) = v8;
            *(_WORD *)(v9 + 4) = v12;
            v10 = HIBYTE(v13) & 0xF;
            *(_BYTE *)(v9 + 2) = 1;
            *(_BYTE *)(v9 + 7) = i;
            *(_BYTE *)(v9 + 6) = v10 | (v8 << 7);
          }
        }
        else
        {
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  return result;
}

uint64_t sub_10010BD14(uint64_t a1, int a2)
{
  uint64_t i;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  _WORD *v13;
  _WORD *v14;
  _WORD *v15;
  uint64_t v16;
  int v17;

  if (a2)
  {
    for (i = 0; i != 32; i += 8)
    {
      v4 = *(_QWORD **)(a1 + i + 176);
      if (v4)
        sub_10010BE58(v4);
      v5 = *(_QWORD **)(a1 + i + 208);
      if (v5)
        sub_10010BE58(v5);
    }
  }
  v17 = 0;
  result = (*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(a1 + 48) + 432))(*(_QWORD *)(a1 + 48), &v17);
  if (!(_DWORD)result)
  {
    v7 = 0;
    v8 = *(unsigned __int16 *)(a1 + 134);
    while (1)
    {
      v9 = (char *)sub_10010BE90(a1, 3, 0, (unsigned __int16)(15 * v8));
      if (!v9)
        return 0xFFFFFFFFLL;
      v10 = v9;
      v11 = (char *)sub_10010BE90(a1, 3, 0, (unsigned __int16)(15 * v8));
      if (!v11)
      {
        v12 = v10;
        goto LABEL_18;
      }
      v12 = v11;
      v13 = sub_10010BF9C(a1, v8, (uint64_t)v10);
      if (!v13 || (v14 = v13, (v15 = sub_10010BF9C(a1, v8, (uint64_t)v12)) == 0))
      {
        sub_10010BB10(v10);
LABEL_18:
        sub_10010BB10(v12);
        return 0xFFFFFFFFLL;
      }
      *((_QWORD *)v14 + 17) = 0;
      v16 = a1 + v7;
      *(_QWORD *)(v16 + 176) = v14;
      *((_QWORD *)v15 + 17) = 0;
      *(_QWORD *)(v16 + 208) = v15;
      v7 += 8;
      if (v7 == 32)
        return 0;
    }
  }
  return result;
}

void sub_10010BE58(_QWORD *a1)
{
  void **v2;

  v2 = (void **)a1[18];
  if (v2)
  {
    free(v2[2]);
    free(v2);
  }
  free(a1);
}

_QWORD *sub_10010BE90(uint64_t a1, char a2, __int16 a3, unsigned int a4)
{
  uint64_t v8;
  pthread_mutex_t *v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;

  v8 = qword_100980098;
  v9 = (pthread_mutex_t *)(qword_100980098 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(qword_100980098 + 16));
  v10 = *(_DWORD *)(v8 + 12);
  if (v10 <= 0)
  {
    pthread_mutex_unlock(v9);
  }
  else
  {
    v11 = v10 - 1;
    v12 = *(_QWORD **)(*(_QWORD *)v8 + 8 * v11);
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v11) = 0;
    *(_DWORD *)(v8 + 12) = v11;
    pthread_mutex_unlock(v9);
    if (v12)
      goto LABEL_7;
  }
  v13 = malloc_type_malloc(0x20uLL, 0x1030040A24534F3uLL);
  v12 = v13;
  if (!v13)
    return v12;
  *((_WORD *)v13 + 7) = 4096;
  v14 = malloc_type_malloc(0x1000uLL, 0xFC181013uLL);
  v12[2] = v14;
  if (!v14)
  {
    free(v12);
    return 0;
  }
LABEL_7:
  if (*((unsigned __int16 *)v12 + 7) < a4)
  {
    sub_10010BB10((char *)v12);
    return 0;
  }
  *v12 = a1;
  *((_BYTE *)v12 + 8) = a2;
  *((_WORD *)v12 + 5) = a3;
  *((_WORD *)v12 + 6) = a4;
  *((_WORD *)v12 + 12) = 0;
  return v12;
}

_WORD *sub_10010BF9C(uint64_t a1, int a2, uint64_t a3)
{
  _WORD *result;
  uint64_t v7;
  char *v8;

  result = malloc_type_malloc(0x98uLL, 0x1020040AA72880BuLL);
  if (result)
  {
    if (15 * a2 <= *(unsigned __int16 *)(a3 + 12))
    {
      v7 = 0;
      *(_QWORD *)result = a1;
      result[4] = a2;
      result[5] = 15;
      *((_QWORD *)result + 17) = 0;
      do
      {
        v8 = (char *)&result[v7];
        *((_DWORD *)v8 + 3) = 2;
        *((_WORD *)v8 + 8) = a2;
        *((_WORD *)v8 + 9) = -1;
        v7 += 4;
      }
      while (v7 != 60);
      *((_QWORD *)result + 18) = a3;
    }
    else
    {
      free(result);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10010C044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;

  v8 = 0;
  pthread_mutex_lock((pthread_mutex_t *)&xmmword_10097FC48);
  v0 = qword_10097FCE0;
  v1 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(qword_10097FCE0 + 48) + 184))(*(_QWORD *)(qword_10097FCE0 + 48), qword_10097FCE0 + 240, &v8);
  if (!(_DWORD)v1)
  {
    v2 = 0;
    *(_QWORD *)(v0 + 240) += 4;
    v3 = v0 + 176;
    do
    {
      v4 = *(uint64_t **)(v3 + v2);
      *(_WORD *)(v4[18] + 24) = 0;
      v4[17] = 0;
      v5 = sub_10010C0F0(v4);
      if ((_DWORD)v5)
        v6 = 1;
      else
        v6 = v2 == 24;
      v2 += 8;
    }
    while (!v6);
    v1 = v5;
    pthread_mutex_unlock((pthread_mutex_t *)&xmmword_10097FC48);
  }
  return v1;
}

uint64_t sub_10010C0F0(uint64_t *a1)
{
  uint64_t v1;
  __int16 v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _OWORD v25[16];

  v1 = *a1;
  if (!*a1 || !*(_DWORD *)v1 || byte_10097FCE8 != 1)
    return 0xFFFFFFFFLL;
  if (*((_WORD *)a1 + 5))
  {
    v3 = *((_WORD *)a1 + 4);
    v4 = (_WORD *)a1 + 9;
    v5 = *((unsigned __int16 *)a1 + 5);
    do
    {
      *(_DWORD *)(v4 - 3) = 2;
      *(v4 - 1) = v3;
      *v4 = -1;
      v4 += 4;
      --v5;
    }
    while (v5);
  }
  v6 = *(_QWORD *)(v1 + 240);
  a1[17] = v6;
  *(_QWORD *)(v1 + 240) = v6 + 15;
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1 + 48) + 280))(*(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 137), *(_QWORD *)(a1[18] + 16));
  if (!(_DWORD)v7)
  {
LABEL_16:
    j__pthread_mutex_lock((pthread_mutex_t *)(v1 + 4176));
    ++*(_BYTE *)(v1 + 4241);
    j__pthread_mutex_unlock((pthread_mutex_t *)(v1 + 4176));
    return 0;
  }
  v13 = v7;
  v14 = 3758097134;
  memset(v25, 0, 250);
  if ((_DWORD)v7 != -536870162)
  {
    sub_1002532F8((uint64_t)v25, 250, (uint64_t)"USB ReadIsochPipeAsync failed -- returned error (0x%x)", v8, v9, v10, v11, v12, v7);
    sub_10011D44C((const char *)v25);
    return v13;
  }
  sub_1002532F8((uint64_t)v25, 250, (uint64_t)"USB ReadIsochPipeAsync failed -- returned kIOReturnIsoTooOld error (0x%x) -- try again", v8, v9, v10, v11, v12, 3758097134);
  sub_10011D44C((const char *)v25);
  v15 = *(_QWORD *)(v1 + 240);
  a1[17] = v15 + 30;
  *(_QWORD *)(v1 + 240) = v15 + 45;
  v16 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1 + 48) + 280))(*(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 137), *(_QWORD *)(a1[18] + 16));
  if (!(_DWORD)v16)
  {
    sub_1002532F8((uint64_t)v25, 250, (uint64_t)"Retry USB ReadIsochPipeAsync successful ", v17, v18, v19, v20, v21, v24);
    sub_10011C9B4((const char *)v25);
    goto LABEL_16;
  }
  v22 = v16;
  if ((_DWORD)v16 == -536870162)
  {
    sub_1002532F8((uint64_t)v25, 250, (uint64_t)"Previous USB ReadIsochPipeAsync failed with kIOReturnIsoTooOld error -- retry still returned kIOReturnIsoTooOld error (0x%x)", v17, v18, v19, v20, v21, 3758097134);
    sub_10011D44C((const char *)v25);
  }
  else
  {
    sub_1002532F8((uint64_t)v25, 250, (uint64_t)"Retry USB ReadIsochPipeAsync failed -- returned error (0x%x)", v17, v18, v19, v20, v21, v16);
    sub_10011D44C((const char *)v25);
    return v22;
  }
  return v14;
}

uint64_t sub_10010C364(uint64_t a1, _WORD *a2, char *a3, unsigned int a4)
{
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int16 v12;
  unsigned __int16 v13;

  if (!a1)
    return 1205;
  if (!*(_DWORD *)a1 || *(unsigned __int16 *)(a1 + 4100) + a4 > 0xF00)
    return 1205;
  v9 = (_BYTE *)(a1 + 4106);
  j__pthread_mutex_lock((pthread_mutex_t *)(a1 + 4112));
  *(_WORD *)(a1 + 4100) += a4;
  j__pthread_mutex_unlock((pthread_mutex_t *)(a1 + 4112));
  *(_WORD *)(a1 + 256) = *a2;
  v10 = *(unsigned __int16 *)(a1 + 4102);
  if (v10 + a4 > 0xEFF)
  {
    v12 = 3840 - v10;
    v13 = a4 - (3840 - v10);
    memcpy((void *)(a1 + 259 + v10), a3, (unsigned __int16)(3840 - v10));
    *(_WORD *)(a1 + 4102) = 0;
    memcpy((void *)(a1 + 259), &a3[v12], v13);
    LOWORD(v11) = *(_WORD *)(a1 + 4102) + v13;
  }
  else
  {
    memcpy((void *)(a1 + v10 + 259), a3, a4);
    v11 = *(unsigned __int16 *)(a1 + 4102) + a4;
    if (v11 == 3840)
      LOWORD(v11) = 0;
  }
  *(_WORD *)(a1 + 4102) = v11;
  if (!*(_BYTE *)(a1 + 4107) && byte_10097FCE8 == 1)
  {
    *(_BYTE *)(a1 + 4241) = 0;
    if (!sub_10010C044())
      *(_BYTE *)(a1 + 4107) = 1;
  }
  if (!*v9 && byte_10097FCE8 == 1 && *(unsigned __int16 *)(a1 + 4100) >= *(unsigned __int16 *)(a1 + 4108))
  {
    *(_BYTE *)(a1 + 4240) = 0;
    if (!sub_10010C4E0())
      *v9 = 1;
  }
  return 625;
}

uint64_t sub_10010C4E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;

  v9 = 0;
  pthread_mutex_lock((pthread_mutex_t *)&xmmword_10097FC48);
  v0 = qword_10097FCE0;
  v1 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(qword_10097FCE0 + 48) + 184))(*(_QWORD *)(qword_10097FCE0 + 48), qword_10097FCE0 + 248, &v9);
  if ((_DWORD)v1)
  {
    v2 = v1;
    sub_10019272C(1205);
  }
  else
  {
    v3 = 0;
    *(_QWORD *)(v0 + 248) += 4;
    v4 = v0 + 208;
    do
    {
      v5 = *(uint64_t **)(v4 + v3);
      v5[17] = 0;
      v6 = sub_10010C590(v5);
      if ((_DWORD)v6)
        v7 = 1;
      else
        v7 = v3 == 24;
      v3 += 8;
    }
    while (!v7);
    v2 = v6;
    pthread_mutex_unlock((pthread_mutex_t *)&xmmword_10097FC48);
  }
  return v2;
}

uint64_t sub_10010C590(uint64_t *a1)
{
  uint64_t v1;
  char *v2;
  BOOL v3;
  __int16 v5;
  uint64_t v6;
  unsigned __int8 v8;
  size_t v9;
  unsigned int v10;
  int v11;
  char *v12;
  __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  size_t v16;
  int v17;
  __int16 v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  _OWORD v40[16];

  v1 = *a1;
  v2 = *(char **)(a1[18] + 16);
  if (*a1)
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
    return 0xFFFFFFFFLL;
  if (!*(_DWORD *)v1)
    return 0xFFFFFFFFLL;
  if (byte_10097FCE8 != 1)
    return 0xFFFFFFFFLL;
  v5 = *((_WORD *)a1 + 4) - 1;
  if (*(unsigned __int16 *)(v1 + 4100) < (unsigned __int16)(15 * v5))
    return 0xFFFFFFFFLL;
  v39 = 15 * v5;
  v8 = 3 * v5;
  v9 = (3 * v5);
  bzero(v2, v9);
  v10 = 0;
  *(_BYTE *)(v1 + 258) = v8;
  v11 = v8;
  v12 = v2 + 3;
  do
  {
    v13 = *(_WORD *)(v1 + 256);
    *(v12 - 1) = *(_BYTE *)(v1 + 258);
    *(_WORD *)(v12 - 3) = v13;
    v14 = *(unsigned __int16 *)(v1 + 4104);
    v15 = v11 - (3840 - v14);
    if (v11 <= 3840 - (int)v14)
    {
      memcpy(v12, (const void *)(v1 + v14 + 259), v9);
      v17 = *(unsigned __int16 *)(v1 + 4104) + v11;
      if (v17 == 3840)
        LOWORD(v17) = 0;
    }
    else
    {
      v16 = (unsigned __int16)(3840 - v14);
      memcpy(v12, (const void *)(v1 + v14 + 259), v16);
      *(_WORD *)(v1 + 4104) = 0;
      memcpy(&v12[v16], (const void *)(v1 + 259), v15);
      LOWORD(v17) = *(_WORD *)(v1 + 4104) + v15;
    }
    *(_WORD *)(v1 + 4104) = v17;
    v12 += v9 + 3;
  }
  while (v10++ < 4);
  j__pthread_mutex_lock((pthread_mutex_t *)(v1 + 4112));
  *(_WORD *)(v1 + 4100) -= v39;
  j__pthread_mutex_unlock((pthread_mutex_t *)(v1 + 4112));
  if (*((_WORD *)a1 + 5))
  {
    v19 = *((_WORD *)a1 + 4);
    v20 = (_WORD *)a1 + 9;
    v21 = *((unsigned __int16 *)a1 + 5);
    do
    {
      *(_DWORD *)(v20 - 3) = 2;
      *(v20 - 1) = v19;
      *v20 = -1;
      v20 += 4;
      --v21;
    }
    while (v21);
  }
  v22 = *(_QWORD *)(v1 + 248);
  a1[17] = v22;
  *(_QWORD *)(v1 + 248) = v22 + 15;
  v23 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1 + 48) + 288))(*(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 145), *(_QWORD *)(a1[18] + 16));
  if (!(_DWORD)v23)
  {
LABEL_27:
    j__pthread_mutex_lock((pthread_mutex_t *)(v1 + 4112));
    ++*(_BYTE *)(v1 + 4240);
    j__pthread_mutex_unlock((pthread_mutex_t *)(v1 + 4112));
    return 0;
  }
  v29 = v23;
  v6 = 3758097134;
  memset(v40, 0, 250);
  if ((_DWORD)v23 != -536870162)
  {
    sub_1002532F8((uint64_t)v40, 250, (uint64_t)"USB WriteIsochPipeAsync failed -- returned error (0x%x)", v24, v25, v26, v27, v28, v23);
    sub_10011D44C((const char *)v40);
    return v29;
  }
  sub_1002532F8((uint64_t)v40, 250, (uint64_t)"USB WriteIsochPipeAsync failed -- returned kIOReturnIsoTooOld error (0x%x) -- try again", v24, v25, v26, v27, v28, 3758097134);
  sub_10011D44C((const char *)v40);
  v30 = *(_QWORD *)(v1 + 248);
  a1[17] = v30 + 30;
  *(_QWORD *)(v1 + 248) = v30 + 45;
  v31 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v1 + 48) + 288))(*(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 145), *(_QWORD *)(a1[18] + 16));
  if (!(_DWORD)v31)
  {
    sub_1002532F8((uint64_t)v40, 250, (uint64_t)"Retry USB WriteIsochPipeAsync successful ", v32, v33, v34, v35, v36, v38);
    sub_10011C9B4((const char *)v40);
    goto LABEL_27;
  }
  v37 = v31;
  if ((_DWORD)v31 == -536870162)
  {
    sub_1002532F8((uint64_t)v40, 250, (uint64_t)"Previous USB WriteIsochPipeAsync failed with kIOReturnIsoTooOld error -- retry still returned kIOReturnIsoTooOld error (0x%x)", v32, v33, v34, v35, v36, 3758097134);
    sub_10011D44C((const char *)v40);
  }
  else
  {
    sub_1002532F8((uint64_t)v40, 250, (uint64_t)"Retry USB WriteIsochPipeAsync failed -- returned error (0x%x)", v32, v33, v34, v35, v36, v31);
    sub_10011D44C((const char *)v40);
    return v37;
  }
  return v6;
}

uint64_t sub_10010C934()
{
  return 0;
}

uint64_t sub_10010C93C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  _DWORD *v5;
  size_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  __int16 v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v4 = a1;
  v5 = (_DWORD *)qword_10097FCE0;
  v6 = a3;
  __chkstk_darwin(a1, a2);
  v8 = (char *)&v27 - v7;
  if (v9 >= 0x801)
    sub_100253460();
  if (!v5)
    return 1205;
  bzero(v8, v6);
  if (!*v5)
    return 1205;
  v10 = sub_100192D58();
  if (!v10)
    return 625;
  switch(v4)
  {
    case 1:
      v11 = 3;
LABEL_11:
      v12 = sub_10010FE38((uint64_t)v5, v4, (const void *)(v10 + 1), (unsigned __int16)(v11 + a3));
      if (v12)
      {
        v13 = v12;
        v14 = v12[8];
        if (v14 == 2)
        {
          v15 = *(_QWORD *)v12;
          if (*(_QWORD *)v12 && *(_DWORD *)v15)
          {
            v25 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, void (*)(char *), char *))(**(_QWORD **)(v15 + 40) + 272))(*(_QWORD *)(v15 + 40), *(unsigned __int8 *)(v15 + 129), *((_QWORD *)v12 + 2), *((unsigned __int16 *)v12 + 12), sub_100110000, v12);
            if ((_DWORD)v25)
            {
              v17 = v25;
              sub_10010BB10(v13);
              v22 = "Bulk Pipe";
              v23 = "WritePipeAsync";
LABEL_27:
              sub_10010FE9C(v15, v17, (uint64_t)v22, v23, v18, v19, v20, v21);
            }
            return 625;
          }
        }
        else if (v14 == 1)
        {
          v15 = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
          {
            if (*(_DWORD *)v15)
            {
              v31 = 0;
              v27 = 33;
              v29 = *((_WORD *)v12 + 12);
              v30 = *((_QWORD *)v12 + 2);
              v28 = *(unsigned __int8 *)(v15 + 24);
              v16 = (*(uint64_t (**)(_QWORD, int *, void (*)(char *), char *))(**(_QWORD **)(v15 + 32)
                                                                                                  + 216))(*(_QWORD *)(v15 + 32), &v27, sub_10010FE98, v12);
              if ((_DWORD)v16)
              {
                v17 = v16;
                sub_10010BB10(v13);
                v22 = "Control Pipe";
                v23 = "DeviceRequestAsync";
                goto LABEL_27;
              }
              return 625;
            }
          }
        }
        return 1205;
      }
      break;
    case 3:
      LOWORD(v27) = *(_WORD *)(v10 + 1);
      memcpy(v8, (const void *)(v10 + 4), v6);
      return sub_10010C364((uint64_t)v5, &v27, v8, a3);
    case 2:
      v11 = 4;
      goto LABEL_11;
  }
  v24 = 106;
  sub_10019272C(106);
  return v24;
}

uint64_t sub_10010CB84(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (a1 == 2)
  {
    v9 = "[bm3_usb][OI_HciIfc_EnableSCO_USB] -- airMode = 0x02 (CVSD)\n";
  }
  else
  {
    if (a1 != 3)
    {
      sub_100253320((uint64_t)"[bm3_usb][OI_HciIfc_EnableSCO_USB] -- Error -- unknown airMode = 0x%02x (unknown)\n", a2, a3, a4, a5, a6, a7, a8, a1);
      return 113;
    }
    v9 = "[bm3_usb][OI_HciIfc_EnableSCO_USB] -- airMode = 0x03 (mSBC)\n";
  }
  sub_100253320((uint64_t)v9, a2, a3, a4, a5, a6, a7, a8, v34);
  v10 = qword_10097FCE0;
  if (!qword_10097FCE0)
    return 113;
  v11 = *(_QWORD *)(qword_10097FCE0 + 48);
  if (!v11 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)v11 + 64))(*(_QWORD *)(qword_10097FCE0 + 48)))
    return 113;
  sub_100253320((uint64_t)"[bm3_usb][OI_HciIfc_EnableSCO_USB] -- ISOC interface for SCO is opened\n", v12, v13, v14, v15, v16, v17, v18, v35);
  if (sub_10010BBAC(v10, *(_QWORD *)(v10 + 48), a1))
    goto LABEL_11;
  sub_100253320((uint64_t)"[bm3_usb][OI_HciIfc_EnableSCO_USB] -- Set ISOC alternate interface successfully\n", v19, v20, v21, v22, v23, v24, v25, v36);
  if (sub_10010BD14(v10, 1))
    goto LABEL_11;
  sub_100253320((uint64_t)"[bm3_usb][OI_HciIfc_EnableSCO_USB] -- Create ISOC requests successfully\n", v26, v27, v28, v29, v30, v31, v32, v37);
  bzero((void *)(v10 + 259), 0xF00uLL);
  *(_QWORD *)(v10 + 240) = 0;
  *(_QWORD *)(v10 + 248) = 0;
  *(_QWORD *)(v10 + 4100) = 0;
  *(_WORD *)(v10 + 4108) = 90 * *(_WORD *)(v10 + 142) - 90;
  byte_10097FCE8 = 1;
  *(_BYTE *)(v10 + 4241) = 0;
  result = sub_10010C044();
  if ((_DWORD)result)
  {
LABEL_11:
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
    return 113;
  }
  *(_BYTE *)(v10 + 4107) = 1;
  return result;
}

void sub_10010CCC8(uint64_t a1, int a2)
{
  uint64_t v4;
  _BYTE *v5;
  pthread_mutex_t *v6;
  BOOL v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  NSObject *v15;

  v4 = *(_QWORD *)a1;
  v5 = (_BYTE *)(*(_QWORD *)a1 + 4107);
  v6 = (pthread_mutex_t *)(*(_QWORD *)a1 + 4176);
  j__pthread_mutex_lock(v6);
  --v5[134];
  j__pthread_mutex_unlock(v6);
  if (*(_DWORD *)v4)
    v7 = qword_10097FCE0 == 0;
  else
    v7 = 1;
  if (v7)
    return;
  if (!a2 || a2 == -536870169)
  {
    v8 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      v9 = 0;
      v10 = *(_QWORD *)(a1 + 144);
      v11 = (unsigned __int16 *)(a1 + 18);
      do
      {
        v13 = *v11;
        v11 += 4;
        v12 = v13;
        if (v13)
        {
          if (sub_10010CEA4(v4, 3, 3u, 0x102u, (char **)(v4 + 168), *(_QWORD *)(v10 + 16) + v9 * *(unsigned __int16 *)(a1 + 8), v12))goto LABEL_14;
          v10 = *(_QWORD *)(a1 + 144);
          v8 = *(unsigned __int16 *)(a1 + 10);
        }
        *(_WORD *)(v10 + 24) += v12;
        ++v9;
      }
      while (v9 < v8);
    }
    goto LABEL_18;
  }
LABEL_14:
  v14 = *(char **)(v4 + 168);
  if (v14)
  {
    sub_10010BB10(v14);
    *(_QWORD *)(v4 + 168) = 0;
  }
  if (*(_DWORD *)v4)
  {
    sub_1000477B8();
    sub_1001926C4(1211);
    sub_1000478A0();
LABEL_18:
    if (dword_10097FD68)
    {
      *(_WORD *)(*(_QWORD *)(a1 + 144) + 24) = 0;
      *(_QWORD *)(a1 + 136) = 0;
      if (sub_10010C0F0(a1))
      {
        j__pthread_mutex_lock(v6);
        if (!v5[134])
        {
          if (byte_10097FCE8 == 1)
            sub_10011D44C("[IsochPipeReadCB] -- btdev->nbrOfOutstandingIsochReads < 1 -- need to restart");
          *v5 = 0;
        }
        j__pthread_mutex_unlock(v6);
      }
    }
    return;
  }
  if (sub_10005549C())
  {
    sub_100054530("IsocReadRequestCB btdev->open is false");
    v15 = sub_1000544A0(0x3Au);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

uint64_t sub_10010CEA4(uint64_t a1, int a2, unsigned int a3, unsigned int a4, char **a5, uint64_t a6, unsigned int a7)
{
  unsigned __int16 v11;
  char *v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  char *v17;
  int v18;
  unsigned __int16 v19;
  unsigned int v20;
  unsigned int v21;
  __int16 v22;
  int v23;

  if (!a7)
    return 0;
  v11 = 0;
  v12 = *a5;
  while (1)
  {
    v13 = a6 + v11;
    v14 = a7 - v11;
    if (v12)
    {
      v15 = *((_QWORD *)v12 + 2);
      switch(a2)
      {
        case 2:
          v16 = *(_WORD *)(v15 + 2) + 4;
          break;
        case 3:
          v16 = *(unsigned __int8 *)(v15 + 2) + 3;
          break;
        case 4:
          v16 = *(unsigned __int8 *)(v15 + 1) + 2;
          break;
        default:
          v16 = 0;
          break;
      }
      goto LABEL_23;
    }
    if (a3 > v14)
      goto LABEL_38;
    if (a2 == 2)
    {
      v16 = *(_WORD *)(v13 + 2) + 4;
    }
    else if (a2 == 3)
    {
      v16 = *(unsigned __int8 *)(v13 + 2) + 3;
    }
    else
    {
      v16 = a2 == 4 ? *(unsigned __int8 *)(v13 + 1) + 2 : 0;
    }
    if (a3 > v16 || a4 < v16)
      goto LABEL_38;
    v17 = (char *)sub_10010BE90(a1, a2, a3, v16);
    if (!v17)
      break;
    v12 = v17;
    *a5 = v17;
LABEL_23:
    v18 = *((unsigned __int16 *)v12 + 12);
    if (v18 == v16)
      goto LABEL_38;
    v19 = v16 - v18;
    if (a4 < v19)
      goto LABEL_38;
    v20 = v19 >= v14 ? (unsigned __int16)(a7 - v11) : v19;
    v21 = sub_10010D0C8((uint64_t)v12, (const void *)v13, v20);
    if (v21 < v20)
      goto LABEL_38;
    v22 = v21;
    if (*((unsigned __int16 *)v12 + 12) == v16)
    {
      if (v12[8] == 1)
        sub_100253460();
      pthread_mutex_lock(&stru_10097FD28);
      v23 = dword_100980090;
      if (dword_100980090 == 100)
        v23 = 0;
      dword_100980090 = v23 + 1;
      qword_10097FCF0[v23 + 16] = (uint64_t)v12;
      pthread_cond_signal(&stru_10097FCF8);
      pthread_mutex_unlock(&stru_10097FD28);
      v12 = 0;
      *a5 = 0;
    }
    v11 += v22;
    if (a7 <= v11)
      return 0;
  }
  sub_1000477B8();
  sub_10019272C(106);
  sub_1000478A0();
LABEL_38:
  if (*a5)
  {
    sub_10010BB10(*a5);
    *a5 = 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_10010D0C8(uint64_t a1, const void *a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;

  v3 = *(unsigned __int16 *)(a1 + 24);
  v4 = *(unsigned __int16 *)(a1 + 12);
  v5 = v4 - v3;
  if (v4 < v3)
    v5 = 0;
  if ((int)v3 + a3 <= v4)
    v6 = a3;
  else
    v6 = v5;
  if (v6)
  {
    memcpy((void *)(*(_QWORD *)(a1 + 16) + v3), a2, (unsigned __int16)v6);
    *(_WORD *)(a1 + 24) += v6;
  }
  return (unsigned __int16)v6;
}

uint64_t sub_10010D124(_QWORD *a1)
{
  _DWORD *v2;
  _BYTE *v3;
  pthread_mutex_t *v4;
  uint64_t result;
  BOOL v6;

  v2 = (_DWORD *)*a1;
  v3 = (_BYTE *)(*a1 + 4106);
  v4 = (pthread_mutex_t *)(*a1 + 4112);
  j__pthread_mutex_lock(v4);
  --v3[134];
  result = j__pthread_mutex_unlock(v4);
  if (*v2)
    v6 = qword_10097FCE0 == 0;
  else
    v6 = 1;
  if (!v6 && dword_10097FD68 != 0)
  {
    if (*v3)
    {
      *(_WORD *)(a1[18] + 24) = 0;
      a1[17] = 0;
      result = sub_10010C590(a1);
      if ((_DWORD)result)
      {
        j__pthread_mutex_lock(v4);
        if (!v3[134])
        {
          if (byte_10097FCE8 == 1)
            sub_10011D44C("[IsochPipeWriteCB] -- btdev->nbrOfOutstandingIsochWrites < 1 -- need to restart");
          *v3 = 0;
        }
        return j__pthread_mutex_unlock(v4);
      }
    }
  }
  return result;
}

uint64_t sub_10010D200()
{
  return 0;
}

uint64_t sub_10010D208()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  BOOL v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t i;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  CFRunLoopSourceRef *v115;
  __CFRunLoopSource **v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __CFRunLoopSource *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned __int8 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  io_object_t v180;
  io_service_t v181;
  const __CFUUID *v182;
  IOCFPlugInInterface **v183;
  HRESULT (__cdecl *QueryInterface)(void *, REFIID, LPVOID *);
  const __CFUUID *v185;
  CFUUIDBytes v186;
  BOOL v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int8 v192;
  uint64_t v193;
  char v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t byte7;
  uint64_t byte7d;
  uint64_t byte7a;
  uint64_t byte7e;
  uint64_t byte7b;
  uint64_t byte7c;
  uint64_t byte7f;
  uint64_t byte7g;
  uint64_t byte7h;
  uint64_t byte7i;
  uint64_t byte7j;
  _WORD *v262;
  timespec v263;
  uint64_t v264;
  unsigned __int8 v265;
  char v266;
  uint64_t v267;
  SInt32 theScore;
  IOCFPlugInInterface **theInterface;
  unint64_t v270;
  io_object_t v271;
  char v272;
  __int16 v273;
  char v274;
  __int16 v275;
  _BYTE v276[9];

  pthread_mutex_init(&stru_1009800D8, 0);
  pthread_cond_init(&stru_1009800A8, 0);
  xmmword_10097FBE8 = 0u;
  *(_OWORD *)&qword_10097FBF8 = 0u;
  xmmword_10097FC08 = 0u;
  unk_10097FC18 = 0u;
  xmmword_10097FC28 = 0u;
  unk_10097FC38 = 0u;
  xmmword_10097FC58 = 0u;
  unk_10097FC68 = 0u;
  xmmword_10097FC78 = 0u;
  xmmword_10097FC98 = 0u;
  unk_10097FCA8 = 0u;
  xmmword_10097FCB8 = 0u;
  *(_OWORD *)&dword_10097FCC8 = 0u;
  qword_10097FCD8 = 0;
  xmmword_10097FC48 = 0u;
  xmmword_10097FC88 = 0u;
  pthread_cond_init((pthread_cond_t *)&xmmword_10097FC88, 0);
  pthread_mutex_init((pthread_mutex_t *)&xmmword_10097FC48, 0);
  pthread_create((pthread_t *)&xmmword_10097FBE8, 0, (void *(__cdecl *)(void *))sub_10010E5A4, 0);
  bzero(qword_10097FCF0, 0x3B0uLL);
  v0 = (char *)malloc_type_malloc(0x50uLL, 0x108004014AC8D4BuLL);
  *((_DWORD *)v0 + 2) = 100;
  *(_QWORD *)v0 = malloc_type_malloc(0x320uLL, 0x80040B8603338uLL);
  *((_DWORD *)v0 + 3) = 0;
  pthread_mutex_init((pthread_mutex_t *)(v0 + 16), 0);
  qword_100980098 = (uint64_t)v0;
  pthread_cond_init(&stru_10097FCF8, 0);
  pthread_mutex_init(&stru_10097FD28, 0);
  pthread_create((pthread_t *)qword_10097FCF0, 0, (void *(__cdecl *)(void *))sub_10010F4E4, 0);
  pthread_mutex_lock(&stru_1009800D8);
  while (!(_DWORD)qword_10097FCD8 || dword_10097FD68 == 0)
  {
    sub_100253320((uint64_t)"[bm3_usb][Initialize] -- Before calling pthread_cond_wait()", v1, v2, v3, v4, v5, v6, v7, byte7);
    pthread_cond_wait(&stru_1009800A8, &stru_1009800D8);
    sub_100253320((uint64_t)"[bm3_usb][Initialize] -- After calling pthread_cond_wait()", v9, v10, v11, v12, v13, v14, v15, byte7d);
    if (byte_100980118 == 1)
    {
      sub_100253320((uint64_t)"[bm3_usb][Initialize] -- gFoundUSBController is false -- calling break()", v1, v2, v3, v4, v5, v6, v7, byte7);
      break;
    }
  }
  v16 = pthread_mutex_unlock(&stru_1009800D8);
  v24 = &byte_10097F000;
  if (!qword_10097FCD0)
  {
    sub_100253320((uint64_t)"[bm3_usb][Initialize] -- gIOThreadInfo.runloop is NULL -- Initialization failed", v17, v18, v19, v20, v21, v22, v23, byte7);
    pthread_mutex_destroy((pthread_mutex_t *)&xmmword_10097FC48);
    pthread_cond_destroy((pthread_cond_t *)&xmmword_10097FC88);
    v16 = sub_10010F61C();
    if (!qword_10097FCD0)
    {
      v81 = "[bm3_usb][OI_HciIfc_Init_USB] -- Initialization failed";
      goto LABEL_133;
    }
  }
  v263 = (timespec)xmmword_100739220;
  sub_10010DE7C(v16, dword_10097FCC8, v18, v19, v20, v21, v22, v23);
  LODWORD(v33) = dword_10097FC40;
  if (dword_10097FC40)
  {
    v33 = 0;
  }
  else
  {
    do
    {
      v34 = v33;
      v35 = sleep(1u);
      v33 = v34 + 1;
      if (dword_10097FC40)
        v36 = 1;
      else
        v36 = v34 >= 0xE;
    }
    while (!v36);
    v24 = &byte_10097F000;
    if (!dword_10097FC40)
    {
      sub_10010E324(v35, v26, v27, v28, v29, v30, v31, v32, byte7);
      sub_100253320((uint64_t)"[bm3_usb] No matching services found after %d seconds -- returned OI_FAIL", v221, v222, v223, v224, v225, v226, v227, 15);
      return 114;
    }
  }
  sub_100253320((uint64_t)"[bm3_usb] Matching services found after %d seconds", v26, v27, v28, v29, v30, v31, v32, v33);
  v37 = &byte_10097F000;
  v38 = qword_10097FCE0;
  if (!qword_10097FCE0)
  {
    while (1)
    {
      pthread_mutex_lock((pthread_mutex_t *)&xmmword_10097FC48);
      if (dword_10097FC40 >= 1)
      {
        for (i = 0; i < dword_10097FC40; ++i)
        {
          v90 = *((_QWORD *)&xmmword_10097FBE8 + i + 1);
          if (!*(_DWORD *)(v90 + 4))
          {
            *(_DWORD *)(v90 + 4) = 1;
            sub_100253320((uint64_t)"[bm3_usb][BTDeviceOpen] called\n", v82, v83, v84, v85, v86, v87, v88, byte7a);
            v91 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v90 + 32) + 232))(*(_QWORD *)(v90 + 32));
            if ((_DWORD)v91)
            {
              v99 = v91;
              if ((_DWORD)v91 == -536870203)
              {
                sub_100253320((uint64_t)"[bm3_usb] Bluetooth device already in use: %s [0x%08lx]\n", v92, v93, v94, v95, v96, v97, v98, *(_QWORD *)(v90 + 8));
              }
              else
              {
                sub_100253320((uint64_t)"[bm3_usb] USBDeviceOpenSeize failed with %d\n", v92, v93, v94, v95, v96, v97, v98, v91);
                sub_100253320((uint64_t)"[bm3_usb][BTDeviceOpen] exited\n", v132, v133, v134, v135, v136, v137, v138, byte7f);
              }
              sub_100253320((uint64_t)"[bm3_usb] BTDeviceOpen failed with %d\n", v100, v101, v102, v103, v104, v105, v106, v99);
            }
            else
            {
              *(_DWORD *)v90 = 1;
              sub_100253320((uint64_t)"[bm3_usb][BTDeviceOpen] exited\n", v92, v93, v94, v95, v96, v97, v98, byte7b);
              v265 = 0;
              sub_100253320((uint64_t)"[bm3_usb] Configuring bluetooth device: %s [0x%08lx]\n", v107, v108, v109, v110, v111, v112, v113, *(_QWORD *)(v90 + 8));
              *(_QWORD *)(v90 + 40) = 0;
              v114 = (_QWORD *)(v90 + 40);
              *(_QWORD *)(v90 + 80) = 0;
              v115 = (CFRunLoopSourceRef *)(v90 + 80);
              *(_QWORD *)(v90 + 88) = 0;
              v116 = (__CFRunLoopSource **)(v90 + 88);
              *(_QWORD *)(v90 + 48) = 0;
              *(_BYTE *)(v90 + 4110) = 2;
              *(_BYTE *)(v90 + 97) = 4;
              v117 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v90 + 32) + 144))(*(_QWORD *)(v90 + 32), v90 + 96);
              if ((_DWORD)v117)
              {
                v125 = v117;
                sub_100253320((uint64_t)"[bm3_usb] GetDeviceSpeed failed with 0x%x\n", v118, v119, v120, v121, v122, v123, v124, v117);
              }
              else
              {
                v139 = (*(uint64_t (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(v90 + 32) + 152))(*(_QWORD *)(v90 + 32), &v265);
                if ((_DWORD)v139)
                {
                  v125 = v139;
                  sub_100253320((uint64_t)"[bm3_usb] GetNumberOfConfigurations failed with 0x%x\n", v140, v141, v142, v143, v144, v145, v146, v139);
                }
                else if (v265)
                {
                  v162 = 0;
                  v262 = (_WORD *)(v90 + 22);
                  do
                  {
                    v264 = 0;
                    v163 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(**(_QWORD **)(v90 + 32) + 168))(*(_QWORD *)(v90 + 32), v162, &v264);
                    if ((_DWORD)v163)
                    {
                      v125 = v163;
                      sub_100253320((uint64_t)"[bm3_usb] GetConfigurationDescriptorPtr failed with 0x%x\n", v164, v165, v166, v167, v168, v169, v170, v163);
                      goto LABEL_42;
                    }
                    v171 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v90 + 32) + 184))(*(_QWORD *)(v90 + 32), *(unsigned __int8 *)(v264 + 5));
                    if ((_DWORD)v171)
                    {
                      v125 = v171;
                      sub_100253320((uint64_t)"[bm3_usb] SetConfiguration failed with 0x%x\n", v172, v173, v174, v175, v176, v177, v178, v171);
                      goto LABEL_42;
                    }
                    v270 = 0xFFFF00010001FFFFLL;
                    v125 = 3758097084;
                    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v90 + 32) + 104))(*(_QWORD *)(v90 + 32), v90 + 20))
                    {
                      v125 = 3758097084;
                      if (!(*(unsigned int (**)(_QWORD, _WORD *))(**(_QWORD **)(v90 + 32) + 112))(*(_QWORD *)(v90 + 32), v262))
                      {
                        v271 = 0;
                        *v114 = 0;
                        *(_QWORD *)(v90 + 48) = 0;
                        v125 = (*(uint64_t (**)(_QWORD, unint64_t *, io_object_t *))(**(_QWORD **)(v90 + 32) + 224))(*(_QWORD *)(v90 + 32), &v270, &v271);
                        if (!(_DWORD)v125)
                        {
                          *(_WORD *)(v90 + 24) = 256;
                          if (*(_WORD *)(v90 + 20) == 1452
                            && (unsigned __int16)*v262 - 33424 <= 6
                            && ((1 << (*v262 + 112)) & 0x53) != 0)
                          {
                            *(_WORD *)(v90 + 24) = 770;
                          }
                          v180 = IOIteratorNext(v271);
                          if (!v180)
                          {
LABEL_116:
                            IOObjectRelease(v271);
                            v37 = &byte_10097F000;
                            goto LABEL_117;
                          }
                          v181 = v180;
                          while (1)
                          {
                            theInterface = 0;
                            theScore = 0;
                            v267 = 0;
                            v266 = 0;
                            v125 = (uint64_t)CFUUIDGetConstantUUIDWithBytes(0, 0x2Du, 0x97u, 0x86u, 0xC6u, 0x9Eu, 0xF3u, 0x11u, 0xD4u, 0xADu, 0x51u, 0, 0xAu, 0x27u, 5u, 0x28u, 0x61u);
                            v182 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
                            LODWORD(v125) = IOCreatePlugInInterfaceForService(v181, (CFUUIDRef)v125, v182, &theInterface, &theScore);
                            IOObjectRelease(v181);
                            if ((_DWORD)v125 || (v183 = theInterface) == 0)
                            {
                              if ((_DWORD)v125)
                                v125 = v125;
                              else
                                v125 = 0xFFFFFFFFLL;
                              v37 = &byte_10097F000;
                              goto LABEL_98;
                            }
                            QueryInterface = (*theInterface)->QueryInterface;
                            v185 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x87u, 0x52u, 0x66u, 0x3Bu, 0xC0u, 0x7Bu, 0x4Bu, 0xAEu, 0x95u, 0x84u, 0x22u, 3u, 0x2Fu, 0xABu, 0x9Cu, 0x5Au);
                            v186 = CFUUIDGetUUIDBytes(v185);
                            if (((unsigned int (*)(IOCFPlugInInterface **, _QWORD, _QWORD, uint64_t *))QueryInterface)(v183, *(_QWORD *)&v186.byte0, *(_QWORD *)&v186.byte8, &v267))
                            {
                              v187 = 1;
                            }
                            else
                            {
                              v187 = v267 == 0;
                            }
                            if (v187)
                            {
                              ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
                              v125 = 0xFFFFFFFFLL;
                              goto LABEL_107;
                            }
                            v188 = (*(uint64_t (**)(void))(*(_QWORD *)v267 + 136))();
                            if ((_DWORD)v188)
                              break;
                            v24 = &byte_10097F000;
                            if (v266 == *(_BYTE *)(v90 + 24))
                            {
                              *(_QWORD *)(v90 + 56) = theInterface;
                              v189 = v267;
                              v190 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v267 + 64))(v267);
                              if (!(_DWORD)v190)
                              {
                                v276[0] = 0;
                                *v114 = v189;
                                v191 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v189 + 152))(v189, v276);
                                if ((_DWORD)v191)
                                {
                                  v125 = v191;
                                }
                                else
                                {
                                  if (v276[0] == 3)
                                  {
                                    v192 = 1;
                                    while (1)
                                    {
                                      v275 = 0;
                                      v274 = 0;
                                      v273 = 0;
                                      v272 = 0;
                                      v193 = (*(uint64_t (**)(uint64_t, _QWORD, char *, __int16 *, char *, __int16 *, char *))(*(_QWORD *)v189 + 208))(v189, v192, (char *)&v275 + 1, &v275, &v274, &v273, &v272);
                                      if ((_DWORD)v193)
                                        break;
                                      v194 = v274;
                                      if (v274 == 3)
                                      {
                                        v195 = HIBYTE(v275);
                                        if (HIBYTE(v275) != 1)
                                          goto LABEL_92;
                                        v196 = v90 + 98;
                                      }
                                      else if (v274 == 2)
                                      {
                                        v195 = HIBYTE(v275);
                                        v196 = v90 + 114;
                                        if (HIBYTE(v275) != 1)
                                        {
                                          if (HIBYTE(v275))
                                            goto LABEL_92;
                                          v196 = v90 + 122;
                                        }
                                      }
                                      else
                                      {
                                        if (v274 || HIBYTE(v275) != 3)
                                        {
LABEL_92:
                                          v125 = 0xFFFFFFFFLL;
                                          goto LABEL_94;
                                        }
                                        v195 = 1;
                                        v196 = v90 + 106;
                                      }
                                      *(_WORD *)v196 = *(unsigned __int8 *)(v90 + 24);
                                      *(_BYTE *)(v196 + 2) = v194;
                                      *(_BYTE *)(v196 + 3) = v195;
                                      *(_WORD *)(v196 + 4) = v273;
                                      *(_BYTE *)(v196 + 7) = v192;
                                      *(_BYTE *)(v196 + 6) = v275 & 0xF | (v195 << 7);
                                      if (v276[0] < ++v192)
                                      {
                                        v24 = &byte_10097F000;
                                        goto LABEL_90;
                                      }
                                    }
                                    v125 = v193;
LABEL_94:
                                    v37 = &byte_10097F000;
                                    v24 = &byte_10097F000;
LABEL_95:
                                    if (*v114)
                                    {
                                      (*(void (**)(_QWORD))(*(_QWORD *)*v114 + 72))(*v114);
                                      *v114 = 0;
                                    }
LABEL_97:
                                    (*(void (**)(uint64_t))(*(_QWORD *)v267 + 24))(v267);
                                    goto LABEL_98;
                                  }
                                  v125 = 0xFFFFFFFFLL;
                                }
                                v37 = &byte_10097F000;
                                goto LABEL_95;
                              }
                              v125 = v190;
                              v37 = &byte_10097F000;
                              goto LABEL_97;
                            }
                            if (v266 == *(_BYTE *)(v90 + 25))
                            {
                              *(_QWORD *)(v90 + 64) = theInterface;
                              *(_QWORD *)(v90 + 48) = v267;
                            }
                            else
                            {
                              (*(void (**)(uint64_t))(*(_QWORD *)v267 + 24))(v267);
                              ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
                            }
LABEL_90:
                            v181 = IOIteratorNext(v271);
                            if (!v181)
                              goto LABEL_116;
                          }
                          v125 = v188;
                          (*(void (**)(uint64_t))(*(_QWORD *)v267 + 24))(v267);
                          ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
LABEL_107:
                          v37 = &byte_10097F000;
                          v24 = &byte_10097F000;
LABEL_98:
                          IOObjectRelease(v271);
                        }
                      }
                    }
                    ++v162;
                  }
                  while (v265 > v162);
                  if (!(_DWORD)v125)
                    goto LABEL_117;
                  sub_100253320((uint64_t)"[bm3_usb] ConfigureInterfaces failed with 0x%x\n", v179, v141, v142, v143, v144, v145, v146, v125);
                }
                else
                {
LABEL_117:
                  v197 = sub_10010F998(v90, 0, v141, v142, v143, v144, v145, v146);
                  if ((_DWORD)v197)
                  {
                    v125 = v197;
                    sub_100253320((uint64_t)"[bm3_usb] BTDeviceSetPipeIdlePolicy failed with 0x%x\n", v198, v199, v200, v201, v202, v203, v204, v197);
                  }
                  else
                  {
                    v205 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v114 + 32))(*v114, v90 + 80);
                    if (!(_DWORD)v205)
                    {
                      CFRunLoopAddSource(*((CFRunLoopRef *)v24 + 410), *(CFRunLoopSourceRef *)(v90 + 80), kCFRunLoopDefaultMode);
                      v205 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v90 + 48) + 32))(*(_QWORD *)(v90 + 48), v90 + 88);
                      if (!(_DWORD)v205)
                      {
                        CFRunLoopAddSource(*((CFRunLoopRef *)v24 + 410), *(CFRunLoopSourceRef *)(v90 + 88), kCFRunLoopDefaultMode);
                        *((_QWORD *)v37 + 412) = v90;
                        goto LABEL_124;
                      }
                    }
                    v125 = v205;
                    sub_100253320((uint64_t)"[bm3_usb] CreateInterfaceAsyncEventSource failed with 0x%x\n", v206, v207, v208, v209, v210, v211, v212, v205);
                  }
                }
              }
LABEL_42:
              if (*v115)
              {
                CFRunLoopRemoveSource(*((CFRunLoopRef *)v24 + 410), *v115, kCFRunLoopDefaultMode);
                *v115 = 0;
              }
              v147 = *v116;
              if (*v116)
              {
                CFRunLoopRemoveSource(*((CFRunLoopRef *)v24 + 410), v147, kCFRunLoopDefaultMode);
                *v116 = 0;
              }
              sub_100253320((uint64_t)"[bm3_usb] error in BTDeviceConfigure", (uint64_t)v147, v126, v127, v128, v129, v130, v131, byte7c);
              sub_100253320((uint64_t)"[bm3_usb] BTDeviceConfigure failed with %d\n", v148, v149, v150, v151, v152, v153, v154, v125);
              sub_10010E450(v90, v155, v156, v157, v158, v159, v160, v161, byte7g);
            }
          }
        }
      }
      if (!*((_QWORD *)v37 + 412))
      {
        sub_100253320((uint64_t)"[bm3_usb] Waiting for bluetooth devices...\n", v82, v83, v84, v85, v86, v87, v88, byte7a);
        if (pthread_cond_timedwait_relative_np((pthread_cond_t *)&xmmword_10097FC88, (pthread_mutex_t *)&xmmword_10097FC48, &v263) == 60)break;
      }
LABEL_124:
      pthread_mutex_unlock((pthread_mutex_t *)&xmmword_10097FC48);
      v38 = *((_QWORD *)v37 + 412);
      if (v38)
        goto LABEL_20;
    }
    pthread_mutex_unlock((pthread_mutex_t *)&xmmword_10097FC48);
    sub_100253320((uint64_t)"[bm3_usb] Timed out waiting for bluetooth devices\n", v228, v229, v230, v231, v232, v233, v234, byte7a);
    sub_10010E324(v235, v236, v237, v238, v239, v240, v241, v242, byte7i);
    v81 = "[bm3_usb][OI_HciIfc_Init_USB] -- pthread_cond_timedwait_relative_np == ETIMEOUT";
    goto LABEL_133;
  }
LABEL_20:
  if ((sub_10011E988((pthread_mutex_t *)(v38 + 4112)) & 1) == 0)
  {
    sub_100253320((uint64_t)"[bm3_usb] writeMutex initialization failed...\n", v39, v40, v41, v42, v43, v44, v45, byte7a);
    sub_10010E324(v73, v74, v75, v76, v77, v78, v79, v80, byte7e);
    v81 = "[bm3_usb][OI_HciIfc_Init_USB] -- OI_Mutex_Init(writeMutex) failed -- returned OI_FAIL";
LABEL_133:
    sub_100253320((uint64_t)v81, v25, v18, v19, v20, v21, v22, v23, byte7);
    return 114;
  }
  if ((sub_10011E988((pthread_mutex_t *)(*((_QWORD *)v37 + 412) + 4176)) & 1) == 0)
  {
    sub_100253320((uint64_t)"[bm3_usb] readMutex initialization failed...\n", v46, v47, v48, v49, v50, v51, v52, byte7a);
    sub_10010E324(v213, v214, v215, v216, v217, v218, v219, v220, byte7h);
    v81 = "[bm3_usb][OI_HciIfc_Init_USB] -- OI_Mutex_Init(readMutex) failed -- returned OI_FAIL";
    goto LABEL_133;
  }
  v53 = *((_QWORD *)v37 + 412);
  v54 = sub_10010BD14(v53, 0);
  if ((_DWORD)v54)
    goto LABEL_132;
  v62 = sub_10010BE90(v53, 4, 0, (unsigned __int16)((*(unsigned __int16 *)(v53 + 102) + 256)/ *(unsigned __int16 *)(v53 + 102)* *(_WORD *)(v53 + 102)));
  if (!v62)
  {
LABEL_131:
    sub_100253320((uint64_t)"[bm3_usb] PacketBufferCreate failed", v63, v64, v65, v66, v67, v68, v69, byte7a);
    v54 = 0xFFFFFFFFLL;
    goto LABEL_132;
  }
  v54 = sub_10010FA34((uint64_t)v62);
  if ((_DWORD)v54)
  {
LABEL_132:
    sub_100253320((uint64_t)"[bm3_usb] BTDeviceStart failed with %d\n", v55, v56, v57, v58, v59, v60, v61, v54);
    v243 = pthread_mutex_unlock((pthread_mutex_t *)&xmmword_10097FC48);
    sub_10010E324(v243, v244, v245, v246, v247, v248, v249, v250, byte7j);
    v81 = "[bm3_usb][OI_HciIfc_Init_USB] -- BTDeviceStart() failed -- returned OI_FAIL";
    goto LABEL_133;
  }
  v70 = sub_10010BE90(v53, 2, 0, (unsigned __int16)((*(unsigned __int16 *)(v53 + 118) + 2047)/ *(unsigned __int16 *)(v53 + 118)* *(_WORD *)(v53 + 118)));
  if (!v70)
    goto LABEL_131;
  v54 = sub_10010FA8C((uint64_t)v70);
  if ((_DWORD)v54)
    goto LABEL_132;
  v71 = *((_QWORD *)v37 + 412);
  result = 0;
  if (v71)
  {
    word_1009800A0 = *(_WORD *)(v71 + 20);
    word_1009800A2 = *(_WORD *)(v71 + 22);
  }
  return result;
}

void sub_10010DE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  io_iterator_t v8;
  io_object_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  io_registry_entry_t v17;
  char *v18;
  const __CFString *v19;
  const __CFUUID *v20;
  const __CFUUID *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  IOCFPlugInInterface **v29;
  const char *v30;
  char *v31;
  HRESULT (__cdecl *QueryInterface)(void *, REFIID, LPVOID *);
  const __CFUUID *v33;
  CFUUIDBytes v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t byte7;
  uint64_t byte7a;
  uint64_t byte7b;
  uint64_t byte7c;
  uint64_t byte7d;
  SInt32 theScore;
  IOCFPlugInInterface **theInterface;
  uint64_t v69;
  int v70;
  char buffer[16];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char name[136];

  v8 = a2;
  sub_100253320((uint64_t)"[bm3_usb][DeviceFoundCB] called\n", a2, a3, a4, a5, a6, a7, a8, byte7);
  v9 = IOIteratorNext(v8);
  if (v9)
  {
    v17 = v9;
    v18 = &byte_10097F000;
    do
    {
      memset(name, 0, 128);
      v70 = 0;
      theInterface = 0;
      v69 = 0;
      theScore = 0;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      *(_OWORD *)buffer = 0u;
      sub_100253320((uint64_t)"[bm3_usb][RegisterBTDevice] called\n", v10, v11, v12, v13, v14, v15, v16, byte7a);
      if (IORegistryEntryGetName(v17, name))
      {
        __strlcpy_chk(buffer, "unknown", 256, 256);
      }
      else
      {
        v19 = CFStringCreateWithCString(kCFAllocatorDefault, name, 0x600u);
        CFStringGetCString(v19, buffer, 256, 0x600u);
        CFRelease(v19);
      }
      v20 = CFUUIDGetConstantUUIDWithBytes(0, 0x9Du, 0xC7u, 0xB7u, 0x80u, 0x9Eu, 0xC0u, 0x11u, 0xD4u, 0xA5u, 0x4Fu, 0, 0xAu, 0x27u, 5u, 0x28u, 0x61u);
      v21 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
      if (IOCreatePlugInInterfaceForService(v17, v20, v21, &theInterface, &theScore))
      {
        v30 = "[bm3_usb][RegisterBTDevice] -- USB -- IOCreatePlugInInterfaceForService () failed";
      }
      else
      {
        v29 = theInterface;
        v30 = "[bm3_usb][RegisterBTDevice] -- USB -- IOCreatePlugInInterfaceForService () failed";
        if (theInterface)
        {
          v31 = v18;
          QueryInterface = (*theInterface)->QueryInterface;
          v33 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x56u, 0xADu, 8u, 0x9Du, 0x87u, 0x8Du, 0x4Bu, 0xEAu, 0xA1u, 0xF5u, 0x2Cu, 0x8Du, 0xC4u, 0x3Eu, 0x8Au, 0x98u);
          v34 = CFUUIDGetUUIDBytes(v33);
          v35 = ((uint64_t (*)(IOCFPlugInInterface **, _QWORD, _QWORD, uint64_t *))QueryInterface)(v29, *(_QWORD *)&v34.byte0, *(_QWORD *)&v34.byte8, &v69);
          ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
          if (v35)
          {
            v30 = "[bm3_usb][RegisterBTDevice] -- USB -- QueryInterface () failed";
            v18 = v31;
          }
          else
          {
            v30 = "[bm3_usb][RegisterBTDevice] -- USB -- QueryInterface () failed";
            v18 = v31;
            if (v69)
            {
              v36 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v69 + 160))(v69, &v70);
              v30 = "[bm3_usb][RegisterBTDevice] -- USB -- GetLocationID () failed";
              if (!v36)
              {
                if (*((_QWORD *)v31 + 410))
                {
                  v37 = v70;
                  v38 = v69;
                  v39 = malloc_type_malloc(0x1098uLL, 0x10B004028872CDEuLL);
                  sub_100253320((uint64_t)"[bm3_usb][BTDeviceCreate] called\n", v40, v41, v42, v43, v44, v45, v46, byte7b);
                  bzero(v39, 0x1098uLL);
                  *((_QWORD *)v39 + 1) = strdup(buffer);
                  v39[4] = v37;
                  *((_QWORD *)v39 + 4) = v38;
                  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(_QWORD *)v38 + 32))(v38, v39 + 18))
                  {
                    v18 = v31;
                  }
                  else
                  {
                    v18 = v31;
                    if (*((_QWORD *)v31 + 410))
                    {
                      sub_100253320((uint64_t)"[bm3_usb][BTDeviceCreate] calling CFRunLoopAddSource()\n", v47, v48, v49, v50, v51, v52, v53, byte7c);
                      CFRunLoopAddSource(*((CFRunLoopRef *)v31 + 410), *((CFRunLoopSourceRef *)v39 + 9), kCFRunLoopDefaultMode);
                    }
                    else
                    {
                      sub_100253320((uint64_t)"[bm3_usb][BTDeviceCreate] gIOThreadInfo.runloop is NULL\n", v47, v48, v49, v50, v51, v52, v53, byte7c);
                      free(*((void **)v39 + 1));
                      free(v39);
                      v39 = 0;
                    }
                  }
                  sub_100253320((uint64_t)"[bm3_usb][BTDeviceCreate] exited\n", v47, v48, v49, v50, v51, v52, v53, byte7c);
                  if (!IOServiceAddInterestNotification((IONotificationPortRef)xmmword_10097FCB8, v17, "IOGeneralInterest", (IOServiceInterestCallback)sub_10010F738, v39, v39 + 7))
                  {
                    sub_100253320((uint64_t)"[bm3_usb][RegisterBTDevice] exited\n", v54, v55, v56, v57, v58, v59, v60, byte7d);
                    if (v39)
                    {
                      pthread_mutex_lock((pthread_mutex_t *)&xmmword_10097FC48);
                      v61 = dword_10097FC40;
                      if (dword_10097FC40 <= 9)
                      {
                        ++dword_10097FC40;
                        *((_QWORD *)&xmmword_10097FBE8 + v61 + 1) = v39;
                      }
                      pthread_cond_signal((pthread_cond_t *)&xmmword_10097FC88);
                      pthread_mutex_unlock((pthread_mutex_t *)&xmmword_10097FC48);
                    }
                    goto LABEL_23;
                  }
                  sub_10010F8A0(v39, v54, v55, v56, v57, v58, v59, v60, byte7d);
                  v30 = "[bm3_usb][RegisterBTDevice] -- USB -- IOServiceAddInterestNotification () failed";
                }
                else
                {
                  v30 = "[bm3_usb][RegisterBTDevice] -- USB -- gIOThreadInfo.runloop is NULL";
                }
              }
            }
          }
        }
      }
      sub_100253320((uint64_t)v30, v22, v23, v24, v25, v26, v27, v28, byte7b);
LABEL_23:
      IOObjectRelease(v17);
      v17 = IOIteratorNext(v8);
    }
    while (v17);
  }
  sub_100253320((uint64_t)"[bm3_usb][DeviceFoundCB] exited\n", v10, v11, v12, v13, v14, v15, v16, byte7a);
}

void sub_10010E324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  sub_100253320((uint64_t)"[bm3_usb][Cleanup] called\n", a2, a3, a4, a5, a6, a7, a8, v52);
  if (qword_10097FCE0)
  {
    sub_10011EA74((pthread_mutex_t *)(qword_10097FCE0 + 4112));
    sub_10011EA74((pthread_mutex_t *)(qword_10097FCE0 + 4176));
  }
  sub_10010F61C();
  pthread_mutex_lock((pthread_mutex_t *)&xmmword_10097FC48);
  qword_10097FCE0 = 0;
  if (dword_10097FC40 >= 1)
  {
    v16 = 0;
    do
      sub_10010F8A0(*((_DWORD **)&xmmword_10097FBE8 + ++v16), v9, v10, v11, v12, v13, v14, v15, v53);
    while (v16 < dword_10097FC40);
  }
  pthread_mutex_unlock((pthread_mutex_t *)&xmmword_10097FC48);
  sub_100253320((uint64_t)"[bm3_usb][DestroyIOThread] called\n", v17, v18, v19, v20, v21, v22, v23, v53);
  sub_100253320((uint64_t)"[bm3_usb][DestroyIOThread] calling CFRunLoopStop()\n", v24, v25, v26, v27, v28, v29, v30, v54);
  CFRunLoopStop((CFRunLoopRef)qword_10097FCD0);
  pthread_cancel((pthread_t)xmmword_10097FBE8);
  pthread_join((pthread_t)xmmword_10097FBE8, 0);
  qword_10097FCD0 = 0;
  sub_100253320((uint64_t)"[bm3_usb][DestroyIOThread] gIOThreadInfo.runloop is set to NULL\n", v31, v32, v33, v34, v35, v36, v37, v55);
  IONotificationPortDestroy((IONotificationPortRef)xmmword_10097FCB8);
  if (dword_10097FCC8)
  {
    IOObjectRelease(dword_10097FCC8);
    dword_10097FCC8 = 0;
  }
  sub_100253320((uint64_t)"[bm3_usb][DestroyIOThread] exited\n", v38, v39, v40, v41, v42, v43, v44, v56);
  pthread_mutex_destroy((pthread_mutex_t *)&xmmword_10097FC48);
  pthread_cond_destroy((pthread_cond_t *)&xmmword_10097FC88);
  sub_100253320((uint64_t)"[bm3_usb][Cleanup] exited\n", v45, v46, v47, v48, v49, v50, v51, a9);
}

void sub_10010E450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFRunLoopSource *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  io_object_t v17;
  __CFRunLoopSource *v18;
  __CFRunLoopSource *v19;
  uint64_t v20;
  uint64_t v21;

  sub_100253320((uint64_t)"[bm3_usb][BTDeviceClose] called\n", a2, a3, a4, a5, a6, a7, a8, v20);
  if (*(_DWORD *)a1)
  {
    *(_DWORD *)a1 = 0;
    if (qword_10097FCD0)
    {
      v17 = *(_DWORD *)(a1 + 28);
      if (v17)
        IOObjectRelease(v17);
      v18 = *(__CFRunLoopSource **)(a1 + 80);
      if (v18)
      {
        CFRunLoopRemoveSource((CFRunLoopRef)qword_10097FCD0, v18, kCFRunLoopDefaultMode);
        *(_QWORD *)(a1 + 80) = 0;
      }
      v19 = *(__CFRunLoopSource **)(a1 + 88);
      if (v19)
      {
        CFRunLoopRemoveSource((CFRunLoopRef)qword_10097FCD0, v19, kCFRunLoopDefaultMode);
        *(_QWORD *)(a1 + 88) = 0;
      }
      v10 = *(__CFRunLoopSource **)(a1 + 72);
      if (v10)
      {
        CFRunLoopRemoveSource((CFRunLoopRef)qword_10097FCD0, v10, kCFRunLoopDefaultMode);
        *(_QWORD *)(a1 + 72) = 0;
      }
    }
    if (*(_QWORD *)(a1 + 40))
    {
      sub_100253320((uint64_t)"[bm3_usb] Closing firstInterface -- control, interrupt, and bulk pipe\n", (uint64_t)v10, v11, v12, v13, v14, v15, v16, v21);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 72))(*(_QWORD *)(a1 + 40));
      *(_QWORD *)(a1 + 40) = 0;
      IODestroyPlugInInterface(*(IOCFPlugInInterface ***)(a1 + 56));
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56));
    }
    if (*(_QWORD *)(a1 + 48))
    {
      sub_100253320((uint64_t)"[bm3_usb] Closing firstInterface -- Isoch pipe\n", (uint64_t)v10, v11, v12, v13, v14, v15, v16, v21);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 72))(*(_QWORD *)(a1 + 48));
      *(_QWORD *)(a1 + 48) = 0;
      IODestroyPlugInInterface(*(IOCFPlugInInterface ***)(a1 + 64));
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
    }
    if (*(_QWORD *)(a1 + 32))
    {
      sub_100253320((uint64_t)"[bm3_usb] Closing USB device interface\n", (uint64_t)v10, v11, v12, v13, v14, v15, v16, v21);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
      *(_QWORD *)(a1 + 32) = 0;
    }
  }
  sub_100253320((uint64_t)"[bm3_usb][BTDeviceClose] exited\n", (uint64_t)v10, v11, v12, v13, v14, v15, v16, a9);
}

uint64_t sub_10010E5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  _WORD *v9;
  mach_port_t v10;
  CFMutableDictionaryRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFMutableDictionaryRef v19;
  const __CFDictionary *v20;
  CFStringRef v21;
  CFStringRef v22;
  io_object_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  io_registry_entry_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const __CFString *Value;
  const __CFString *v40;
  const __CFNumber *v41;
  const __CFNumber *v42;
  const __CFNumber *v43;
  const __CFNumber *v44;
  const char *CStringPtr;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const __CFString *v103;
  const __CFUUID *v104;
  const __CFUUID *v105;
  IOCFPlugInInterface **v106;
  HRESULT (__cdecl *QueryInterface)(void *, REFIID, LPVOID *);
  const __CFUUID *v108;
  CFUUIDBytes v109;
  int v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  IOCFPlugInInterface ***v115;
  void *v116;
  uint64_t v117;
  unsigned __int8 v118;
  io_object_t v119;
  io_service_t v120;
  const __CFUUID *v121;
  const __CFUUID *v122;
  IOCFPlugInInterface **v123;
  HRESULT (__cdecl *v124)(void *, REFIID, LPVOID *);
  const __CFUUID *v125;
  CFUUIDBytes v126;
  BOOL v127;
  uint64_t v128;
  IOCFPlugInInterface **v129;
  char v130;
  char v131;
  char v132;
  unsigned __int8 i;
  uint64_t v134;
  IOCFPlugInInterface **v135;
  uint64_t v136;
  unsigned __int8 v138;
  int *v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  char v144;
  IOCFPlugInInterface **v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  CFNumberRef v163;
  CFNumberRef v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t byte7;
  uint64_t byte7a;
  uint64_t byte7b;
  _QWORD *v183;
  IOCFPlugInInterface ***v184;
  uint64_t v185;
  unsigned int v186;
  char v187;
  __CFDictionary *v188;
  const __CFString *theString1;
  CFStringRef v190;
  CFStringRef v191;
  CFStringRef cf;
  CFStringRef key;
  unint64_t v194;
  uint64_t v195;
  uint64_t valuePtr;
  CFMutableDictionaryRef properties;
  io_iterator_t existing;
  uint64_t v199;
  SInt32 theScore;
  unsigned __int8 v201;
  int v202;
  uint64_t v203;
  IOCFPlugInInterface **theInterface;
  char v205;
  IOCFPlugInInterface **v206;
  SInt32 v207;
  IOCFPlugInInterface **v208;
  unint64_t v209;
  io_iterator_t iterator;
  char v211;
  __int16 v212;
  char v213;
  __int16 v214;
  int v215;
  __int16 v216;
  int v217;
  __int16 v218;
  unsigned __int8 v219;
  _OWORD buffer[16];
  char name[136];

  sub_100253320((uint64_t)"[bm3_usb][IOThreadFunc] called\n", a2, a3, a4, a5, a6, a7, a8, byte7);
  v8 = 0;
  v194 = 0;
  v9 = (_WORD *)&unk_100980000;
  v10 = kIOMainPortDefault;
  while (1)
  {
    v11 = IOServiceMatching("IOUSBHostDevice");
    if (v11)
      break;
    v146 = "[bm3_usb][IOThreadFunc] -- USB -- Can't create a USB matching dictionary -- try again";
LABEL_135:
    sub_100253320((uint64_t)v146, v12, v13, v14, v15, v16, v17, v18, byte7a);
    sleep(1u);
    if (v8++ >= 0xF)
    {
      byte_100980118 = 1;
      sub_100253320((uint64_t)"[bm3_usb][IOThreadFunc] -- Error -- Still cannot find USB Bluetooth Controller after 15 seconds ", v155, v156, v157, v158, v159, v160, v161, byte7a);
      pthread_mutex_lock(&stru_1009800D8);
      pthread_cond_signal(&stru_1009800A8);
      pthread_mutex_unlock(&stru_1009800D8);
      return 0;
    }
  }
  v19 = v11;
  sub_100253320((uint64_t)"[bm3_usb][IOThreadFunc] -- USB -- calling GetProductAndVendorID()", v12, v13, v14, v15, v16, v17, v18, byte7a);
  existing = 0;
  v20 = IOServiceMatching("IOUSBHostDevice");
  if (IOServiceGetMatchingServices(v10, v20, &existing) || !existing)
  {
LABEL_132:
    v154 = (unsigned __int16)v9[80];
    if (v9[80] && word_1009800A2)
    {
      LODWORD(v194) = (unsigned __int16)word_1009800A2;
      HIDWORD(v194) = v154;
      goto LABEL_139;
    }
    CFRelease(v19);
    v146 = "[bm3_usb][IOThreadFunc] -- USB -- Can't obtain vendorID and productID -- try again";
    goto LABEL_135;
  }
  v188 = v19;
  v21 = CFStringCreateWithCString(kCFAllocatorDefault, "USB Vendor Name", 0x600u);
  key = CFStringCreateWithCString(kCFAllocatorDefault, "USB Product Name", 0x600u);
  cf = CFStringCreateWithCString(kCFAllocatorDefault, "idVendor", 0x600u);
  v191 = CFStringCreateWithCString(kCFAllocatorDefault, "idProduct", 0x600u);
  v22 = CFStringCreateWithCString(kCFAllocatorDefault, "bDeviceClass", 0x600u);
  v190 = CFStringCreateWithCString(kCFAllocatorDefault, "locationID", 0x600u);
  theString1 = CFStringCreateWithCString(kCFAllocatorDefault, "Bluetooth USB Host Controller", 0x600u);
  v23 = IOIteratorNext(existing);
  if (!v23)
  {
    sub_100253320((uint64_t)"[bm3_usb][GetProductAndVendorID] -- Use internal Bluetooth USB Host Controller \n", v24, v25, v26, v27, v28, v29, v30, byte7a);
LABEL_131:
    IOObjectRelease(existing);
    CFRelease(v21);
    CFRelease(key);
    CFRelease(cf);
    CFRelease(v191);
    CFRelease(v22);
    CFRelease(v190);
    CFRelease(theString1);
    v10 = kIOMainPortDefault;
    v9 = &unk_100980000;
    v19 = v188;
    goto LABEL_132;
  }
  v31 = v23;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  do
  {
    properties = 0;
    if (!IORegistryEntryCreateCFProperties(v31, &properties, 0, 0))
    {
      v195 = 0;
      valuePtr = 0;
      Value = (const __CFString *)CFDictionaryGetValue(properties, v21);
      v40 = (const __CFString *)CFDictionaryGetValue(properties, key);
      v41 = (const __CFNumber *)CFDictionaryGetValue(properties, cf);
      v42 = (const __CFNumber *)CFDictionaryGetValue(properties, v191);
      v43 = (const __CFNumber *)CFDictionaryGetValue(properties, v190);
      v44 = (const __CFNumber *)CFDictionaryGetValue(properties, v22);
      if (CFNumberGetValue(v42, kCFNumberIntType, (char *)&valuePtr + 4))
      {
        if (CFNumberGetValue(v41, kCFNumberIntType, &valuePtr)
          && CFNumberGetValue(v44, kCFNumberIntType, &v195)
          && CFNumberGetValue(v43, kCFNumberIntType, (char *)&v195 + 4)
          && (v195 - 224) <= 0x1F
          && ((1 << (v195 + 32)) & 0x80008001) != 0)
        {
          CStringPtr = CFStringGetCStringPtr(v40, 0x600u);
          v46 = CFStringGetCStringPtr(Value, 0x600u);
          sub_100253320((uint64_t)"[bm3_usb][GetProductAndVendorID] -- Found USB Device : \n", v47, v48, v49, v50, v51, v52, v53, byte7a);
          sub_100253320((uint64_t)"    USB Product Name = %s \n", v54, v55, v56, v57, v58, v59, v60, (uint64_t)CStringPtr);
          sub_100253320((uint64_t)"     USB Vendor Name = %s \n", v61, v62, v63, v64, v65, v66, v67, (uint64_t)v46);
          sub_100253320((uint64_t)"            idVendor = 0x%04x \n", v68, v69, v70, v71, v72, v73, v74, valuePtr);
          sub_100253320((uint64_t)"           idProduct = 0x%04x \n", v75, v76, v77, v78, v79, v80, v81, HIDWORD(valuePtr));
          sub_100253320((uint64_t)"         deviceClass = 0x%02x (%d) \n", v82, v83, v84, v85, v86, v87, v88, v195);
          sub_100253320((uint64_t)"          locationID = 0x%08x \n", v89, v90, v91, v92, v93, v94, v95, HIDWORD(v195));
          if (v40 && CFStringCompare(theString1, v40, 0) == kCFCompareEqualTo)
          {
            v185 = valuePtr;
            v187 = 1;
            v186 = HIDWORD(valuePtr);
            goto LABEL_8;
          }
          if (valuePtr == 0x110A000005ACLL)
          {
            sub_100253320((uint64_t)"[bm3_usb][GetProductAndVendorID] -- idVendor = 0x%04x, idProduct = 0x%04x -- Apple USB-C to 3.5mm Headphone Jack Adapter -- ignore\n", v96, v97, v98, v99, v100, v101, v102, 1452);
            goto LABEL_8;
          }
          if (valuePtr == 0x341000000451)
          {
            sub_100253320((uint64_t)"[bm3_usb][GetProductAndVendorID] -- idVendor = 0x%04x, idProduct = 0x%04x -- Texas Instruments USB device -- ignore\n", v96, v97, v98, v99, v100, v101, v102, 1105);
            goto LABEL_8;
          }
          v203 = 0;
          theInterface = 0;
          memset(name, 0, 128);
          v202 = 0;
          v201 = 0;
          theScore = 0;
          memset(buffer, 0, sizeof(buffer));
          if (IORegistryEntryGetName(v31, name))
          {
            __strlcpy_chk(buffer, "unknown", 256, 256);
          }
          else
          {
            v103 = CFStringCreateWithCString(kCFAllocatorDefault, name, 0x600u);
            CFStringGetCString(v103, (char *)buffer, 256, 0x600u);
            CFRelease(v103);
          }
          v104 = CFUUIDGetConstantUUIDWithBytes(0, 0x9Du, 0xC7u, 0xB7u, 0x80u, 0x9Eu, 0xC0u, 0x11u, 0xD4u, 0xA5u, 0x4Fu, 0, 0xAu, 0x27u, 5u, 0x28u, 0x61u);
          v105 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
          if (!IOCreatePlugInInterfaceForService(v31, v104, v105, &theInterface, &theScore))
          {
            v106 = theInterface;
            if (theInterface)
            {
              QueryInterface = (*theInterface)->QueryInterface;
              v108 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x56u, 0xADu, 8u, 0x9Du, 0x87u, 0x8Du, 0x4Bu, 0xEAu, 0xA1u, 0xF5u, 0x2Cu, 0x8Du, 0xC4u, 0x3Eu, 0x8Au, 0x98u);
              v109 = CFUUIDGetUUIDBytes(v108);
              v110 = ((uint64_t (*)(IOCFPlugInInterface **, _QWORD, _QWORD, uint64_t *))QueryInterface)(v106, *(_QWORD *)&v109.byte0, *(_QWORD *)&v109.byte8, &v203);
              ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
              if (!v110)
              {
                if (v203)
                {
                  if ((*(unsigned int (**)(uint64_t, int *))(*(_QWORD *)v203 + 160))(v203, &v202)
                    || (v111 = malloc_type_malloc(0x1098uLL, 0x10B004028872CDEuLL)) == 0)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v203 + 24))(v203);
                    goto LABEL_8;
                  }
                  v112 = v111;
                  bzero(v111, 0x1098uLL);
                  v112[1] = strdup((const char *)buffer);
                  *((_DWORD *)v112 + 4) = v202;
                  v113 = v203;
                  v112[4] = v203;
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v113 + 232))(v113))
                  {
                    v114 = v203;
                  }
                  else
                  {
                    *(_DWORD *)v112 = 1;
                    v112[5] = 0;
                    v115 = (IOCFPlugInInterface ***)(v112 + 5);
                    v112[6] = 0;
                    v112[10] = 0;
                    v112[11] = 0;
                    if (!(*(unsigned int (**)(_QWORD, unsigned __int8 *))(*(_QWORD *)v112[4] + 152))(v112[4], &v201))
                    {
                      if (v201)
                      {
                        v199 = 0;
                        if (!(*(unsigned int (**)(_QWORD, _QWORD, uint64_t *))(*(_QWORD *)v112[4] + 168))(v112[4], 0, &v199))
                        {
                          v118 = 0;
                          v183 = v112;
                          v184 = (IOCFPlugInInterface ***)(v112 + 5);
                          do
                          {
                            if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)v112[4] + 184))(v112[4], *(unsigned __int8 *)(v199 + 5)))
                            {
                              break;
                            }
                            iterator = 0;
                            v209 = 0xFFFF00010001FFFFLL;
                            *v115 = 0;
                            v115[1] = 0;
                            if (!(*(unsigned int (**)(_QWORD, unint64_t *, io_iterator_t *))(*(_QWORD *)v112[4] + 224))(v112[4], &v209, &iterator))
                            {
                              *((_WORD *)v112 + 12) = 256;
                              v119 = IOIteratorNext(iterator);
                              if (v119)
                              {
                                v120 = v119;
                                while (1)
                                {
                                  v208 = 0;
                                  v207 = 0;
                                  v206 = 0;
                                  v205 = 0;
                                  v121 = CFUUIDGetConstantUUIDWithBytes(0, 0x2Du, 0x97u, 0x86u, 0xC6u, 0x9Eu, 0xF3u, 0x11u, 0xD4u, 0xADu, 0x51u, 0, 0xAu, 0x27u, 5u, 0x28u, 0x61u);
                                  v122 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
                                  LODWORD(v121) = IOCreatePlugInInterfaceForService(v120, v121, v122, &v208, &v207);
                                  IOObjectRelease(v120);
                                  if ((_DWORD)v121)
                                    goto LABEL_123;
                                  v123 = v208;
                                  if (!v208)
                                    goto LABEL_123;
                                  v124 = (*v208)->QueryInterface;
                                  v125 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x87u, 0x52u, 0x66u, 0x3Bu, 0xC0u, 0x7Bu, 0x4Bu, 0xAEu, 0x95u, 0x84u, 0x22u, 3u, 0x2Fu, 0xABu, 0x9Cu, 0x5Au);
                                  v126 = CFUUIDGetUUIDBytes(v125);
                                  if (((unsigned int (*)(IOCFPlugInInterface **, _QWORD, _QWORD, IOCFPlugInInterface ***))v124)(v123, *(_QWORD *)&v126.byte0, *(_QWORD *)&v126.byte8, &v206))
                                  {
                                    v127 = 1;
                                  }
                                  else
                                  {
                                    v127 = v206 == 0;
                                  }
                                  if (v127)
                                    goto LABEL_120;
                                  if (((unsigned int (*)(void))(*v206)[2].QueryInterface)())
                                    break;
                                  if (v205 == *((_BYTE *)v112 + 24))
                                  {
                                    v128 = v112[7];
                                    if (v128)
                                      (*(void (**)(uint64_t))(*(_QWORD *)v128 + 24))(v128);
                                    v112[7] = v208;
                                    v129 = v206;
                                    if (((unsigned int (*)(IOCFPlugInInterface **))(*v206)[1]._reserved)(v206))
                                      goto LABEL_121;
                                    LOBYTE(v215) = 0;
                                    *v115 = v129;
                                    v130 = 0;
                                    if (((unsigned int (*)(IOCFPlugInInterface **, int *))(*v129)[2].Release)(v129, &v215)|| v215 != 3)
                                    {
                                      v132 = 0;
                                      v131 = 0;
                                    }
                                    else
                                    {
                                      v131 = 0;
                                      v132 = 0;
                                      v130 = 0;
                                      for (i = 1; v215 >= i; ++i)
                                      {
                                        LOBYTE(v212) = 0;
                                        v219 = 0;
                                        v214 = 0;
                                        LOWORD(v217) = 0;
                                        if (((unsigned int (*)(IOCFPlugInInterface **, _QWORD, __int16 *, unsigned __int8 *, char *, int *, __int16 *))(*v129)[3].AddRef)(v129, i, &v212, &v219, (char *)&v214 + 1, &v217, &v214))
                                        {
                                          break;
                                        }
                                        if (HIBYTE(v214) == 3)
                                        {
                                          if (v212 != 1)
                                            break;
                                          v130 = 1;
                                        }
                                        else if (HIBYTE(v214) == 2)
                                        {
                                          if (v212 == 1)
                                          {
                                            v132 = 1;
                                          }
                                          else
                                          {
                                            if ((_BYTE)v212)
                                              break;
                                            v131 = 1;
                                          }
                                        }
                                        else if (HIBYTE(v214) || v212 != 3)
                                        {
                                          break;
                                        }
                                      }
                                    }
                                    v115 = v184;
                                    if (*v184)
                                    {
                                      ((void (*)(IOCFPlugInInterface **))(**v184)[1].QueryInterface)(*v184);
                                      *v184 = 0;
                                    }
                                    v144 = v130 & v132 & v131;
                                    ((void (*)(IOCFPlugInInterface **))(*v206)->Release)(v206);
                                    v112 = v183;
                                    if ((v144 & 1) == 0)
                                      goto LABEL_123;
                                  }
                                  else if (v205 == *((_BYTE *)v112 + 25))
                                  {
                                    v134 = v112[8];
                                    if (v134)
                                      (*(void (**)(uint64_t))(*(_QWORD *)v134 + 24))(v134);
                                    v112[8] = v208;
                                    v135 = v206;
                                    v217 = 0;
                                    v218 = 0;
                                    v215 = 0;
                                    v216 = 0;
                                    if (((unsigned int (*)(IOCFPlugInInterface **))(*v206)[1]._reserved)(v206))
                                    {
LABEL_121:
                                      v145 = v206;
                                      goto LABEL_122;
                                    }
                                    v136 = 0;
                                    v219 = 0;
                                    v112[6] = v135;
LABEL_85:
                                    if (!((unsigned int (*)(IOCFPlugInInterface **, _QWORD))(*v135)[2].Start)(v135, v136)&& !((unsigned int (*)(IOCFPlugInInterface **, unsigned __int8 *))(*v135)[2].Release)(v135, &v219)&& v219 == 2)
                                    {
                                      v138 = 1;
                                      while (1)
                                      {
                                        v214 = 0;
                                        v213 = 0;
                                        v212 = 0;
                                        v211 = 0;
                                        if (((unsigned int (*)(IOCFPlugInInterface **, _QWORD, char *, __int16 *, char *, __int16 *, char *))(*v135)[3].AddRef)(v135, v138, (char *)&v214 + 1, &v214, &v213, &v212, &v211)|| v213 != 1)
                                        {
                                          break;
                                        }
                                        if (HIBYTE(v214) == 1)
                                        {
                                          v140 = &v217;
                                        }
                                        else
                                        {
                                          if (HIBYTE(v214))
                                            break;
                                          v140 = &v215;
                                        }
                                        *((_BYTE *)v140 + v136) = 1;
                                        if (v219 < ++v138)
                                        {
                                          if (++v136 != 6)
                                            goto LABEL_85;
                                          break;
                                        }
                                      }
                                    }
                                    v141 = v112[6];
                                    if (v141)
                                    {
                                      (*(void (**)(uint64_t))(*(_QWORD *)v141 + 72))(v141);
                                      v112[6] = 0;
                                    }
                                    v142 = 0;
                                    v143 = 1;
                                    v115 = v184;
                                    do
                                    {
                                      if (!*((_BYTE *)&v217 + v142) || !*((_BYTE *)&v215 + v142))
                                        v143 = 0;
                                      ++v142;
                                    }
                                    while (v142 != 6);
                                    ((void (*)(IOCFPlugInInterface **))(*v206)->Release)(v206);
                                    if ((v143 & 1) == 0)
                                      goto LABEL_123;
                                  }
                                  else
                                  {
                                    ((void (*)(IOCFPlugInInterface **))(*v206)->Release)(v206);
                                    ((void (*)(IOCFPlugInInterface **))(*v208)->Release)(v208);
                                  }
                                  v120 = IOIteratorNext(iterator);
                                  if (!v120)
                                    goto LABEL_123;
                                }
                                ((void (*)(IOCFPlugInInterface **))(*v206)->Release)(v206);
LABEL_120:
                                v145 = v208;
LABEL_122:
                                ((void (*)(IOCFPlugInInterface **))(*v145)->Release)(v145);
                              }
LABEL_123:
                              IOObjectRelease(iterator);
                            }
                            if (v201 <= ++v118)
                              break;
                            v199 = 0;
                          }
                          while (!(*(unsigned int (**)(_QWORD, _QWORD, uint64_t *))(*(_QWORD *)v112[4] + 168))(v112[4], v118, &v199));
                        }
                      }
                    }
                    (*(void (**)(_QWORD))(*(_QWORD *)v112[4] + 72))(v112[4]);
                    (*(void (**)(uint64_t))(*(_QWORD *)v203 + 24))(v203);
                    v116 = (void *)v112[1];
                    if (v116)
                      free(v116);
                    v117 = v112[7];
                    if (v117)
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v117 + 24))(v117);
                      v112[7] = 0;
                    }
                    v114 = v112[8];
                    if (!v114)
                      goto LABEL_46;
                  }
                  (*(void (**)(uint64_t))(*(_QWORD *)v114 + 24))(v114);
LABEL_46:
                  free(v112);
                }
              }
            }
          }
        }
      }
    }
LABEL_8:
    if (properties)
      CFRelease(properties);
    IOObjectRelease(v31);
    v31 = IOIteratorNext(existing);
  }
  while (v31);
  sub_100253320((uint64_t)"[bm3_usb][GetProductAndVendorID] -- Use internal Bluetooth USB Host Controller \n", v32, v33, v34, v35, v36, v37, v38, byte7a);
  if ((v187 & 1) == 0)
    goto LABEL_131;
  v194 = __PAIR64__(v185, v186);
  sub_100253320((uint64_t)"[bm3_usb][GetProductAndVendorID] -- Found internal Bluetooth USB Host Controller -- vendorID = 0x%04x, produceID = 0x%04x \n", v147, v148, v149, v150, v151, v152, v153, v185);
  IOObjectRelease(existing);
  CFRelease(v21);
  CFRelease(key);
  CFRelease(cf);
  CFRelease(v191);
  CFRelease(v22);
  CFRelease(v190);
  CFRelease(theString1);
  v10 = kIOMainPortDefault;
  v19 = v188;
  if (!(_DWORD)v185 || !v186)
  {
    LODWORD(v194) = (unsigned __int16)word_1009800A2;
    HIDWORD(v194) = (unsigned __int16)word_1009800A0;
  }
LABEL_139:
  v163 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&v194 + 4);
  CFDictionarySetValue(v19, CFSTR("idVendor"), v163);
  CFRelease(v163);
  v164 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v194);
  CFDictionarySetValue(v19, CFSTR("idProduct"), v164);
  CFRelease(v164);
  *(_QWORD *)&xmmword_10097FCB8 = IONotificationPortCreate(v10);
  *((_QWORD *)&xmmword_10097FCB8 + 1) = IONotificationPortGetRunLoopSource((IONotificationPortRef)xmmword_10097FCB8);
  sub_100253320((uint64_t)"[bm3_usb][IOThreadFunc] -- setting gIOThreadInfo.runloop to CFRunLoopGetCurrent()\n", v165, v166, v167, v168, v169, v170, v171, byte7a);
  qword_10097FCD0 = (uint64_t)CFRunLoopGetCurrent();
  CFRunLoopAddSource((CFRunLoopRef)qword_10097FCD0, *((CFRunLoopSourceRef *)&xmmword_10097FCB8 + 1), kCFRunLoopDefaultMode);
  IOServiceAddMatchingNotification((IONotificationPortRef)xmmword_10097FCB8, "IOServiceFirstMatch", v19, (IOServiceMatchingCallback)sub_10010DE7C, 0, (io_iterator_t *)&dword_10097FCC8);
  pthread_mutex_lock(&stru_1009800D8);
  LODWORD(qword_10097FCD8) = 1;
  pthread_cond_signal(&stru_1009800A8);
  pthread_mutex_unlock(&stru_1009800D8);
  sub_100253320((uint64_t)"[bm3_usb][IOThreadFunc] calling CFRunLoopRun()\n", v172, v173, v174, v175, v176, v177, v178, byte7b);
  CFRunLoopRun();
  return 0;
}

uint64_t sub_10010F4E4()
{
  BOOL v0;
  _BOOL4 v1;
  int i;
  char *__dst[100];

  bzero(__dst, 0x320uLL);
  pthread_mutex_lock(&stru_1009800D8);
  dword_10097FD68 = 1;
  pthread_cond_signal(&stru_1009800A8);
  pthread_mutex_unlock(&stru_1009800D8);
  while (1)
  {
    pthread_mutex_lock(&stru_10097FD28);
    v0 = dword_10097FD68 == 0;
    v1 = dword_10097FD68 != 0;
    for (i = dword_100980090; !v0 && i == 0; i = dword_100980090)
    {
      pthread_cond_wait(&stru_10097FCF8, &stru_10097FD28);
      v0 = dword_10097FD68 == 0;
      v1 = dword_10097FD68 != 0;
    }
    if (!v1)
      break;
    if (i >= 1)
      memcpy(__dst, &unk_10097FD70, 8 * i);
    dword_100980090 = 0;
    pthread_mutex_unlock(&stru_10097FD28);
    sub_10010BA70(__dst, i);
  }
  pthread_mutex_unlock(&stru_10097FD28);
  return 0;
}

uint64_t sub_10010F61C()
{
  uint64_t v0;
  void **v1;
  uint64_t v2;
  pthread_mutex_t *v3;
  uint64_t v4;
  void **v5;

  pthread_mutex_lock(&stru_10097FD28);
  dword_10097FD68 = 0;
  sub_1000478A0();
  pthread_cond_signal(&stru_10097FCF8);
  pthread_mutex_unlock(&stru_10097FD28);
  pthread_join((pthread_t)qword_10097FCF0[0], 0);
  sub_1000477B8();
  if (dword_100980090 >= 1)
  {
    v0 = 0;
    do
    {
      v1 = (void **)qword_10097FCF0[v0 + 16];
      free(v1[2]);
      free(v1);
      ++v0;
    }
    while (v0 < dword_100980090);
  }
  dword_100980090 = 0;
  v2 = qword_100980098;
  v3 = (pthread_mutex_t *)(qword_100980098 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(qword_100980098 + 16));
  if (*(int *)(v2 + 12) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(void ***)(*(_QWORD *)v2 + 8 * v4);
      free(v5[2]);
      free(v5);
      ++v4;
    }
    while (v4 < *(int *)(v2 + 12));
  }
  free(*(void **)v2);
  pthread_mutex_unlock(v3);
  pthread_mutex_destroy(v3);
  free((void *)v2);
  pthread_mutex_destroy(&stru_10097FD28);
  return pthread_cond_destroy(&stru_10097FCF8);
}

void sub_10010F738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if ((_DWORD)a3 == -536870064)
  {
    v36 = "[bm3_usb][DeviceNotificationCB] -- kIOMessageDeviceSignaledWakeup -- HIDShim ";
LABEL_19:
    sub_100253320((uint64_t)v36, a2, a3, a4, a5, a6, a7, a8, a9);
    return;
  }
  if ((_DWORD)a3 == -536870896)
  {
    sub_100253320((uint64_t)"[bm3_usb][DeviceNotificationCB] -- kIOMessageServiceIsTerminated -- HIDShim ", a2, a3, a4, a5, a6, a7, a8, v37);
    sub_100253320((uint64_t)"[bm3_usb][BTDeviceRemoved] called\n", v10, v11, v12, v13, v14, v15, v16, v38);
    if (qword_10097FCE0)
    {
      if (a1)
        sub_100253320((uint64_t)"[bm3_usb] Bluetooth device removed: %s \n", a2, a3, a4, a5, a6, a7, a8, *(_QWORD *)(a1 + 8));
      pthread_mutex_lock((pthread_mutex_t *)&xmmword_10097FC48);
      v17 = dword_10097FC40;
      if (dword_10097FC40 >= 1)
      {
        v18 = 0;
        v19 = &qword_10097FBF8;
        do
        {
          v20 = (char *)&xmmword_10097FBE8 + 8 * v18;
          v22 = *((_QWORD *)v20 + 1);
          v21 = v20 + 8;
          if (v22 == a1)
          {
            *v21 = 0;
            v23 = v18 + 1;
            v24 = (v17 - 1);
            if (v18 + 1 < v17)
            {
              v25 = (_QWORD *)&xmmword_10097FBE8 + v18 + 1;
              v26 = v24 - v18;
              v27 = v19;
              do
              {
                v28 = *v27++;
                *v25++ = v28;
                --v26;
              }
              while (v26);
            }
            dword_10097FC40 = v24;
            v18 = v23;
            v17 = v24;
          }
          else
          {
            ++v18;
          }
          ++v19;
        }
        while (v18 < v17);
      }
      pthread_cond_signal((pthread_cond_t *)&xmmword_10097FC88);
      pthread_mutex_unlock((pthread_mutex_t *)&xmmword_10097FC48);
      sub_10010F8A0((_DWORD *)a1, v29, v30, v31, v32, v33, v34, v35, v39);
      v36 = "[bm3_usb][BTDeviceRemoved] exited\n";
    }
    else
    {
      v36 = "[bm3_usb][BTDeviceRemoved] exited -- Already removed\n";
    }
    goto LABEL_19;
  }
}

void sub_10010F8A0(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;
  void **v19;
  uint64_t i;
  _DWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_100253320((uint64_t)"[bm3_usb][BTDeviceDestroy] called\n", a2, a3, a4, a5, a6, a7, a8, v31);
  if (a1 && *a1)
  {
    sub_10010E450((uint64_t)a1, v10, v11, v12, v13, v14, v15, v16, v32);
    v17 = (void **)*((_QWORD *)a1 + 19);
    if (v17)
    {
      free(v17[2]);
      free(v17);
    }
    v18 = (void **)*((_QWORD *)a1 + 20);
    if (v18)
    {
      free(v18[2]);
      free(v18);
    }
    v19 = (void **)*((_QWORD *)a1 + 21);
    if (v19)
    {
      free(v19[2]);
      free(v19);
    }
    for (i = 0; i != 8; i += 2)
    {
      v21 = &a1[i];
      v22 = *(_QWORD **)&a1[i + 44];
      if (v22)
      {
        sub_10010BE58(v22);
        *((_QWORD *)v21 + 22) = 0;
      }
      v23 = (_QWORD *)*((_QWORD *)v21 + 26);
      if (v23)
      {
        sub_10010BE58(v23);
        *((_QWORD *)v21 + 26) = 0;
      }
    }
    free(*((void **)a1 + 1));
    if ((_DWORD *)qword_10097FCE0 == a1)
    {
      sub_100253320((uint64_t)"[bm3_usb][BTDeviceDestroy] active device\n", v24, v25, v26, v27, v28, v29, v30, v33);
      qword_10097FCE0 = 0;
    }
    free(a1);
  }
  sub_100253320((uint64_t)"[bm3_usb][BTDeviceDestroy] exited\n", v10, v11, v12, v13, v14, v15, v16, a9);
}

uint64_t sub_10010F998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  if (a1 && (v9 = *(_QWORD *)(a1 + 40)) != 0 && *(_QWORD *)v9)
  {
    if ((_DWORD)a2)
      v10 = 100;
    else
      v10 = 0;
    result = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 624))();
    if (!(_DWORD)result)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 624))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 121), v10);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 624))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 129), v10);
    }
  }
  else
  {
    sub_100253320((uint64_t)"[bm3_usb][BTDeviceSetPipeIdlePolicy] -- btdev or firstInterface is NULL\n", a2, a3, a4, a5, a6, a7, a8, v12);
    return 3758097088;
  }
  return result;
}

uint64_t sub_10010FA34(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, void (*)(uint64_t, int, int)))(**(_QWORD **)(*(_QWORD *)a1 + 40) + 264))(*(_QWORD *)(*(_QWORD *)a1 + 40), *(unsigned __int8 *)(*(_QWORD *)a1 + 105), *(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a1 + 12), sub_10010FAE4);
  if ((_DWORD)v1)
    sub_10019272C(1205);
  return v1;
}

uint64_t sub_10010FA8C(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, void (*)(uint64_t, int, int)))(**(_QWORD **)(*(_QWORD *)a1 + 40) + 264))(*(_QWORD *)(*(_QWORD *)a1 + 40), *(unsigned __int8 *)(*(_QWORD *)a1 + 121), *(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a1 + 12), sub_10010FC74);
  if ((_DWORD)v1)
    sub_10019272C(1205);
  return v1;
}

void sub_10010FAE4(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  char *v7;
  const char *v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_DWORD *)v3 && qword_10097FCE0 != 0)
    {
      if (a2)
      {
        if (a2 == -536870165)
        {
          v7 = *(char **)(v3 + 152);
          if (v7)
          {
            sub_10010BB10(v7);
            *(_QWORD *)(v3 + 152) = 0;
          }
          return;
        }
        if (sub_10005549C())
        {
          v8 = "";
          if (a2 == -536870163)
            v8 = "(kIOReturnNotResponding)";
          sub_100054530("InterruptPipeReadCB failed with 0x%x %s", a2, v8);
          v9 = sub_1000544A0(0x3Au);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
      }
      else
      {
        *(_WORD *)(a1 + 24) = a3;
        if (!a3
          || !sub_10010CEA4(v3, 4, 2u, 0x101u, (char **)(v3 + 152), *(_QWORD *)(a1 + 16), (unsigned __int16)a3))
        {
LABEL_22:
          if (dword_10097FD68)
          {
            *(_WORD *)(a1 + 24) = 0;
            sub_10010FA34(a1);
          }
          return;
        }
      }
      v10 = *(char **)(v3 + 152);
      if (v10)
      {
        sub_10010BB10(v10);
        *(_QWORD *)(v3 + 152) = 0;
      }
      if (*(_DWORD *)v3)
      {
        sub_1000477B8();
        sub_1001926C4(1212);
        sub_1000478A0();
        goto LABEL_22;
      }
      if (sub_10005549C())
      {
        sub_100054530("InterruptPipeReadCB btdev->open is false");
        v11 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
  }
}

void sub_10010FC74(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  char *v7;
  const char *v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_DWORD *)v3 && qword_10097FCE0 != 0)
    {
      if (a2)
      {
        if (a2 == -536870165)
        {
          v7 = *(char **)(v3 + 160);
          if (v7)
          {
            sub_10010BB10(v7);
            *(_QWORD *)(v3 + 160) = 0;
          }
          return;
        }
        if (sub_10005549C())
        {
          v8 = "";
          if (a2 == -536870163)
            v8 = "(kIOReturnNotResponding)";
          sub_100054530("BulkPipeReadCB failed with 0x%x %s", a2, v8);
          v9 = sub_1000544A0(0x3Au);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
      }
      else
      {
        *(_WORD *)(a1 + 24) = a3;
        if (!a3
          || !sub_10010CEA4(v3, 2, 4u, 0xFFFFu, (char **)(v3 + 160), *(_QWORD *)(a1 + 16), (unsigned __int16)a3))
        {
LABEL_22:
          if (dword_10097FD68)
          {
            *(_WORD *)(a1 + 24) = 0;
            sub_10010FA8C(a1);
          }
          return;
        }
      }
      v10 = *(char **)(v3 + 160);
      if (v10)
      {
        sub_10010BB10(v10);
        *(_QWORD *)(v3 + 160) = 0;
      }
      if (*(_DWORD *)v3)
      {
        sub_1000477B8();
        sub_1001926C4(1210);
        sub_1000478A0();
        goto LABEL_22;
      }
      if (sub_10005549C())
      {
        sub_100054530("BulkPipeReadCB btdev->open is false");
        v11 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
  }
}

uint64_t sub_10010FE04()
{
  return 0;
}

uint64_t sub_10010FE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t vars0;
  uint64_t vars0a;

  sub_100253320((uint64_t)"[bm3_usb] Darwin USB Terminate...\n", a2, a3, a4, a5, a6, a7, a8, vars0);
  sub_10010E324(v8, v9, v10, v11, v12, v13, v14, v15, vars0a);
  return 0;
}

uint64_t sub_10010FE30()
{
  return 2048;
}

char *sub_10010FE38(uint64_t a1, char a2, const void *a3, unsigned int a4)
{
  char *v6;
  char *v7;

  v6 = (char *)sub_10010BE90(a1, a2, a4, a4);
  v7 = v6;
  if (v6 && sub_10010D0C8((uint64_t)v6, a3, a4) < a4)
  {
    sub_10010BB10(v7);
    return 0;
  }
  return v7;
}

void sub_10010FE9C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t buf[4];
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[26];

  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  sub_1002532F8((uint64_t)&v26, 250, (uint64_t)"USB %s -- %s failed -- error (0x%x) -- exit(0) -- Restart bluetoothd", (uint64_t)a4, a5, a6, a7, a8, a3);
  sub_10011D44C((const char *)&v26);
  if (**(_QWORD **)(a1 + 32))
  {
    if (sub_10005549C())
    {
      sub_100054530("Bluetooth error - simulated -- %s Error -- build=release, reason=%d", a4, 1205);
      v10 = sub_1000544A0(0x3Au);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        v25 = sub_100054494();
        _os_log_fault_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s", buf, 0xCu);
      }
    }
    v11 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 296))(*(_QWORD *)(a1 + 32), 0);
    sub_100253320((uint64_t)"[bm3_usb] USBDeviceReEnumerate() returned 0x%0x", v12, v13, v14, v15, v16, v17, v18, v11);
    v39 = 0u;
    memset(v40, 0, sizeof(v40));
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    sub_1002532F8((uint64_t)&v26, 250, (uint64_t)"USBDeviceReEnumerate() returned 0x%0x", v19, v20, v21, v22, v23, v11);
    sub_10011D44C((const char *)&v26);
  }
  exit(0);
}

uint64_t sub_100110004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_10097FCE0)
    sub_10010F998(qword_10097FCE0, 1, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t sub_10011002C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_10097FCE0)
    sub_10010F998(qword_10097FCE0, 0, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t sub_100110054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars0;

  byte_10097FCE8 = 0;
  if (!qword_10097FCE0)
    return 113;
  v0 = *(_QWORD *)(qword_10097FCE0 + 48);
  *(_WORD *)(qword_10097FCE0 + 4106) = 0;
  if (!v0)
    return 113;
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 72))(v0);
  sub_100253320((uint64_t)"[bm3_usb][OI_HciIfc_DisableSCO_USB] -- ISOC interface for SCO is closed\n", v1, v2, v3, v4, v5, v6, v7, vars0);
  return 0;
}

BOOL sub_1001100B0()
{
  return dword_100999184 && *(_BYTE *)(qword_100980120 + 33) != 0;
}

void sub_1001100E0(char a1)
{
  if (!dword_100999184)
    sub_100253460();
  *(_BYTE *)(qword_100980120 + 33) = a1;
}

uint64_t sub_10011011C(uint64_t a1, _DWORD *a2, int a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  uint64_t v7;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  if (!a1 || !a4)
  {
    sub_100253460();
    return 101;
  }
  if (dword_100999184)
    return 140;
  qword_100980120 = (uint64_t)sub_100114588(0x28uLL);
  if (!qword_100980120)
    return 106;
  v19 = 0u;
  v20 = 0u;
  *(_BYTE *)(qword_100980120 + 32) = *(_BYTE *)sub_100252DE8(0xFu);
  v14 = *(_BYTE *)(sub_100252DE8(0xFu) + 10);
  v15 = (_QWORD *)qword_100980120;
  *(_BYTE *)(qword_100980120 + 38) = v14;
  sub_100253C6C(v15);
  v16 = qword_100980120;
  *(_WORD *)(qword_100980120 + 34) = a5;
  *(_WORD *)(v16 + 36) = a6;
  v7 = sub_10023E274((uint64_t)sub_1001102DC, (uint64_t)off_10091A968, a5, a6, (_BYTE *)(v16 + 32), (uint64_t)&unk_100739230);
  if ((_DWORD)v7)
    goto LABEL_11;
  *(_QWORD *)&v19 = &unk_10091A990;
  WORD4(v19) = 4;
  *(_QWORD *)&v20 = *(_QWORD *)a1;
  WORD4(v20) = *(_WORD *)(a1 + 8);
  byte_100980128 = 1;
  dword_100980130 = *(unsigned __int8 *)(qword_100980120 + 32);
  word_10098012A = 1;
  byte_100980138 = 1;
  word_10098013A = 2;
  dword_100980140 = a3;
  v17 = sub_1002465CC((uint64_t)&v19, (int *)(qword_100980120 + 20));
  v18 = qword_100980120;
  if ((_DWORD)v17)
  {
    v7 = v17;
    sub_10023E540(*(unsigned __int8 *)(qword_100980120 + 32));
LABEL_11:
    if (qword_100980120)
    {
      sub_100053298((void *)qword_100980120);
      qword_100980120 = 0;
    }
    return v7;
  }
  *(_QWORD *)(qword_100980120 + 24) = a4;
  if (a2)
    *a2 = *(_DWORD *)(v18 + 20);
  sub_1001891E8(0x200000);
  v7 = 0;
  dword_100999184 = 1;
  return v7;
}

uint64_t sub_1001102DC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *i;
  _WORD *v9;
  _WORD *v10;
  NSObject *v12;
  _QWORD *v13;
  __int16 v14;
  _WORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  if (qword_100980120)
  {
    for (i = *(_QWORD **)qword_100980120; i && i != (_QWORD *)qword_100980120; i = (_QWORD *)*i)
    {
      if (*((_DWORD *)i - 3) == *(_DWORD *)a1 && *((unsigned __int16 *)i - 4) == *(unsigned __int16 *)(a1 + 4))
        return sub_10023EB7C((uint64_t)sub_100110560, a4, 0);
    }
  }
  v9 = sub_100110748((int *)a1, a4);
  if (!v9)
  {
    if (sub_10005549C())
    {
      sub_100054530("Could not allocate hfp device!", v16, v17, v18, v19);
      v12 = sub_1000544A0(0xFu);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return sub_10023EB7C((uint64_t)sub_100110560, a4, 0);
  }
  v10 = v9;
  if (*((_BYTE *)v9 + 34))
    return sub_10023EB7C((uint64_t)sub_100110560, a4, 0);
  v13 = sub_1001104B8(a4);
  if (v13)
    *((_BYTE *)v13 + 34) = 2;
  *v10 = a4;
  v14 = *(_WORD *)(a1 + 4);
  *((_DWORD *)v10 + 7) = *(_DWORD *)a1;
  v15 = v10 + 14;
  v15[2] = v14;
  *((_QWORD *)&v16 + 1) = v15;
  LODWORD(v16) = 0;
  WORD2(v16) = a4;
  return (*(uint64_t (**)(__int128 *))(qword_100980120 + 24))(&v16);
}

uint64_t sub_100110438()
{
  uint64_t result;

  if (!dword_100999184)
    return 408;
  if (*(_BYTE *)(qword_100980120 + 16))
    return 141;
  result = sub_10023E540(*(unsigned __int8 *)(qword_100980120 + 32));
  if (!(_DWORD)result)
  {
    sub_1002467B8(*(_DWORD *)(qword_100980120 + 20));
    sub_10018929C(0x200000);
    if (qword_100980120)
    {
      sub_100053298((void *)qword_100980120);
      qword_100980120 = 0;
    }
    result = 0;
    dword_100999184 = 0;
  }
  return result;
}

_QWORD *sub_1001104B8(int a1)
{
  _QWORD *i;
  NSObject *v4;

  if (qword_100980120)
  {
    for (i = *(_QWORD **)qword_100980120; i && i != (_QWORD *)qword_100980120; i = (_QWORD *)*i)
    {
      if (*((unsigned __int16 *)i - 20) == a1)
        return i - 5;
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("Could not find addr for device handle %d", a1);
    v4 = sub_1000544A0(0xFu);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  return 0;
}

uint64_t sub_100110560(int a1, __int16 a2, uint64_t a3)
{
  _WORD *v6;
  NSObject *v7;
  _QWORD *v8;
  char v9;
  NSObject *v10;

  v6 = sub_1001104B8(a1);
  if (v6)
  {
    if ((_DWORD)a3)
    {
LABEL_3:
      if (sub_10005549C())
      {
        sub_100054530("RFCOMM connection failed %!\n", a3);
        v7 = sub_1000544A0(0xFu);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      *v6 = 0;
      v8 = sub_1001104B8(a1);
      if (v8)
      {
        v9 = 0;
LABEL_15:
        *((_BYTE *)v8 + 34) = v9;
        return sub_100110868((unsigned __int16)*v6, a3, a2);
      }
      return sub_100110868((unsigned __int16)*v6, a3, a2);
    }
  }
  else
  {
    sub_100253460();
    if ((_DWORD)a3)
      goto LABEL_3;
  }
  a3 = sub_10018CFE4((uint64_t)off_10091AA40, (uint64_t)(v6 + 14));
  if ((_DWORD)a3)
  {
    if (sub_10005549C())
    {
      sub_100054530("OI_DEVMGR_RegisterScoApplication failed %!\n", a3);
      v10 = sub_1000544A0(0xFu);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  v8 = sub_1001104B8(a1);
  if (v8)
  {
    v9 = 3;
    goto LABEL_15;
  }
  return sub_100110868((unsigned __int16)*v6, a3, a2);
}

_QWORD *sub_100110694(uint64_t a1)
{
  _QWORD *i;
  NSObject *v5;

  if (qword_100980120)
  {
    for (i = *(_QWORD **)qword_100980120; i && i != (_QWORD *)qword_100980120; i = (_QWORD *)*i)
    {
      if (*((_DWORD *)i - 3) == *(_DWORD *)a1 && *((unsigned __int16 *)i - 4) == *(unsigned __int16 *)(a1 + 4))
        return i - 5;
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("Could not find addr for device %:", a1);
    v5 = sub_1000544A0(0xFu);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  return 0;
}

_WORD *sub_100110748(int *a1, __int16 a2)
{
  _WORD *v4;
  _WORD *v5;
  int v6;
  uint64_t *v7;
  NSObject *v8;
  NSObject *v9;

  if (*(unsigned __int8 *)(qword_100980120 + 16) >= *(unsigned __int8 *)(qword_100980120 + 38))
  {
    if (!sub_10005549C())
      return 0;
    sub_100054530("Maximum handsfree connection is %d, cannot create device", *(unsigned __int8 *)(qword_100980120 + 38));
    v8 = sub_1000544A0(0xFu);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      return 0;
LABEL_9:
    sub_1006CE7A4();
    return 0;
  }
  v4 = sub_100114588(0x38uLL);
  if (!v4)
  {
    if (!sub_10005549C())
      return 0;
    sub_100054530("Could not allocate hfp device\n");
    v9 = sub_1000544A0(0xFu);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      return 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *a1;
  v4[16] = *((_WORD *)a1 + 2);
  *((_DWORD *)v4 + 7) = v6;
  *v4 = a2;
  *((_BYTE *)v4 + 34) = 0;
  v7 = (uint64_t *)qword_100980120;
  ++*(_BYTE *)(qword_100980120 + 16);
  sub_100253C74((_QWORD *)v4 + 5, v7);
  return v5;
}

uint64_t sub_100110868(int a1, int a2, __int16 a3)
{
  unsigned __int16 v5;
  _QWORD *v6;
  _DWORD v8[2];
  char *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v5 = a1;
  v6 = sub_1001104B8(a1);
  if (!v6)
    sub_100253460();
  v10 = 0u;
  v12 = 0;
  v11 = 0u;
  LODWORD(v10) = a2;
  WORD2(v10) = a3;
  v8[0] = 1;
  v9 = (char *)v6 + 28;
  v8[1] = v5;
  return (*(uint64_t (**)(_DWORD *))(qword_100980120 + 24))(v8);
}

uint64_t sub_1001108EC(int a1)
{
  _QWORD *v1;
  int v2;
  int v4;
  _QWORD *v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  _QWORD *v10;

  if (!dword_100999184)
    return 408;
  v1 = sub_1001104B8(a1);
  if (!v1)
    sub_100253460();
  v2 = *((unsigned __int8 *)v1 + 34);
  if ((v2 - 4) < 2)
    return 116;
  if (v2 != 3)
    return 1802;
  v4 = *(unsigned __int16 *)v1;
  v5 = sub_1001104B8(v4);
  if (!v5)
    sub_100253460();
  v6 = *((unsigned __int8 *)v5 + 34);
  v7 = v6 > 5;
  v8 = (1 << v6) & 0x31;
  if (!v7 && v8 != 0)
    return 0;
  v10 = sub_1001104B8(v4);
  if (v10)
    *((_BYTE *)v10 + 34) = 4;
  return sub_100110BEC(*(unsigned __int16 *)v5);
}

uint64_t sub_1001109B4(int a1, uint64_t a2, char *a3, size_t a4)
{
  _QWORD *v7;
  uint64_t result;

  v7 = sub_1001104B8(a1);
  if (!v7)
    sub_100253460();
  if (!dword_100999184)
    return 408;
  if (!a2)
  {
    sub_100253460();
    return 101;
  }
  if (*((_BYTE *)v7 + 34) != 3)
    return 408;
  if (v7[2])
    return 118;
  result = sub_10023E880((uint64_t)sub_100110A54, *(unsigned __int16 *)v7, a3, a4);
  if (!(_DWORD)result)
    v7[2] = a2;
  return result;
}

uint64_t sub_100110A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = sub_1001104B8(a1);
  if (!v8)
    sub_100253460();
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8[2];
  v8[2] = 0;
  return v9(a1, a2, a3, a4);
}

uint64_t sub_100110AB4(int a1, int a2)
{
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  char v7;

  v4 = sub_1001104B8(a1);
  if (!v4)
    sub_100253460();
  v5 = *((unsigned __int8 *)v4 + 34);
  v6 = sub_1001104B8(a1);
  if (v6)
  {
    if (v5 == 3)
      v7 = 5;
    else
      v7 = 0;
    *((_BYTE *)v6 + 34) = v7;
  }
  *((_DWORD *)v4 + 1) = a2;
  return sub_100110BEC(*(unsigned __int16 *)v4);
}

void sub_100110B14(int a1, uint64_t a2, __int16 a3)
{
  __int16 v5;
  _QWORD *v6;
  NSObject *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = a1;
  v6 = sub_1001104B8(a1);
  if (!v6)
    sub_100253460();
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  if ((*((_BYTE *)v6 + 34) & 0xFE) == 4)
  {
    if (sub_10005549C())
    {
      sub_100054530("Ignoring received data while in state %s", "");
      v7 = sub_1000544A0(0xFu);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  else
  {
    LODWORD(v8) = 6;
    *((_QWORD *)&v8 + 1) = a2;
    LOWORD(v9) = a3;
    WORD2(v8) = v5;
    (*(void (**)(__int128 *))(qword_100980120 + 24))(&v8);
  }
}

uint64_t sub_100110BEC(int a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD *v9;
  const void *v11[2];
  _OWORD v12[3];
  uint64_t v13;

  v2 = sub_1001104B8(a1);
  if (!v2)
    sub_100253460();
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v3 = *((unsigned __int8 *)v2 + 34);
  if (v3 == 5)
  {
    if (!*((_BYTE *)v2 + 35))
    {
      v4 = 0;
      *((_BYTE *)v2 + 34) = 0;
      goto LABEL_19;
    }
LABEL_18:
    v4 = 0;
    goto LABEL_19;
  }
  if (v3 != 4)
    goto LABEL_18;
  if (*((_BYTE *)v2 + 35) == 3)
  {
    v4 = sub_10018D2CC(v2[1]);
    if (!(_DWORD)v4)
    {
      *((_BYTE *)v2 + 35) = 4;
      goto LABEL_19;
    }
    if (!sub_10005549C())
      goto LABEL_17;
    sub_100054530("ScoDisconnect failed - %!, forcing disconnect!\n", v4);
    v5 = sub_1000544A0(0xFu);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_17;
LABEL_16:
    sub_1006CE7A4();
LABEL_17:
    sub_100110E48(*(unsigned __int16 *)v2);
    goto LABEL_19;
  }
  if (!*(_WORD *)v2)
    goto LABEL_18;
  v4 = sub_10023EEBC(*(unsigned __int16 *)v2, 935);
  if ((_DWORD)v4)
  {
    if (!sub_10005549C())
      goto LABEL_17;
    sub_100054530("RFCOMM_Disconnect failed - %!, forcing disconnect!\n", v4);
    v6 = sub_1000544A0(0xFu);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_19:
  if (*((_BYTE *)v2 + 35) || *((_BYTE *)v2 + 34))
  {
    if (!*((_DWORD *)v2 + 6))
    {
      v11[1] = v2;
      v11[0] = (const void *)2;
      v4 = sub_10004A9EC((uint64_t)sub_100110EF4, v11, 100, (int *)v2 + 6);
      if ((_DWORD)v4)
      {
        if (sub_10005549C())
        {
          sub_100054530("Register disconnect timeout handler failed %!\n", v4);
          v7 = sub_1000544A0(0xFu);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
      }
    }
  }
  else
  {
    v8 = *((unsigned int *)v2 + 6);
    if ((_DWORD)v8)
    {
      sub_100049F6C(v8);
      *((_DWORD *)v2 + 6) = 0;
    }
    v9 = sub_1001104B8(a1);
    if (v9)
      *((_BYTE *)v9 + 34) = 0;
    sub_10018D1C8((uint64_t)v2 + 28);
    LODWORD(v12[0]) = 2;
    *((_QWORD *)&v12[0] + 1) = (char *)v2 + 28;
    DWORD2(v12[0]) = *((_DWORD *)v2 + 1);
    WORD2(v12[0]) = *(_WORD *)v2;
    (*(void (**)(_OWORD *))(qword_100980120 + 24))(v12);
    sub_100253C9C(v2 + 5);
    sub_100053298(v2);
    --*(_BYTE *)(qword_100980120 + 16);
  }
  return v4;
}

uint64_t sub_100110E48(int a1)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  NSObject *v5;

  v2 = sub_1001104B8(a1);
  if (!v2)
    sub_100253460();
  result = sub_10018070C((uint64_t)v2 + 28);
  if ((_DWORD)result)
  {
    v4 = result;
    if (sub_10005549C())
    {
      sub_100054530("ForceDisconnect failed - %!, assuming already disconnected\n", v4);
      v5 = sub_1000544A0(0xFu);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    result = (uint64_t)sub_1001104B8(a1);
    if (result)
      *(_BYTE *)(result + 34) = 0;
    *((_BYTE *)v2 + 35) = 0;
    *((_DWORD *)v2 + 1) = 926;
  }
  return result;
}

uint64_t sub_100110EF4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = **(unsigned __int16 **)(a1 + 8);
  v2 = sub_1001104B8(v1);
  if (!v2)
    sub_100253460();
  *((_DWORD *)v2 + 6) = 0;
  sub_100110E48(v1);
  return sub_100110BEC(v1);
}

uint64_t sub_100110F38(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v6;
  uint64_t result;
  _OWORD v8[3];
  uint64_t v9;

  v5 = sub_100110694(a3);
  if (!v5)
    sub_100253460();
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  if (a1)
  {
    v6 = 0;
  }
  else
  {
    v5[1] = a2;
    v6 = 3;
  }
  *((_BYTE *)v5 + 35) = v6;
  LODWORD(v8[0]) = 4;
  HIDWORD(v8[0]) = ((unint64_t)v5 + 28) >> 32;
  DWORD2(v8[0]) = a1;
  WORD2(v8[0]) = *(_WORD *)v5;
  result = (*(uint64_t (**)(_OWORD *))(qword_100980120 + 24))(v8);
  if ((*((_BYTE *)v5 + 34) & 0xFE) == 4)
    return sub_100110BEC(*(unsigned __int16 *)v5);
  return result;
}

uint64_t sub_100110FEC(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  NSObject *v5;
  unsigned __int16 *v6;
  NSObject *v7;
  uint64_t result;
  _OWORD v9[3];
  uint64_t v10;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  if (qword_100980120)
  {
    for (i = *(_QWORD **)qword_100980120; i && i != (_QWORD *)qword_100980120; i = (_QWORD *)*i)
    {
      if (*(i - 4) == a2)
      {
        v6 = (unsigned __int16 *)(i - 5);
        if ((_DWORD)a1)
          goto LABEL_13;
        goto LABEL_17;
      }
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("Could not find device with sco handle");
    v5 = sub_1000544A0(0xFu);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  sub_100253460();
  v6 = 0;
  if ((_DWORD)a1)
  {
LABEL_13:
    if (sub_10005549C())
    {
      sub_100054530("SCO disconnect failed %!", a1);
      v7 = sub_1000544A0(0xFu);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  else
  {
LABEL_17:
    *((_BYTE *)v6 + 35) = 0;
  }
  LODWORD(v9[0]) = 5;
  HIDWORD(v9[0]) = (unint64_t)(v6 + 14) >> 32;
  DWORD2(v9[0]) = a1;
  WORD2(v9[0]) = *v6;
  result = (*(uint64_t (**)(_OWORD *))(qword_100980120 + 24))(v9);
  if ((v6[17] & 0xFE) == 4)
    return sub_100110BEC(*v6);
  return result;
}

uint64_t sub_100111138(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  _OWORD v11[3];
  uint64_t v12;

  v8 = sub_100110694(a1);
  if (!v8)
    sub_100253460();
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  if (*((_BYTE *)v8 + 34) != 3)
    return sub_10018E4FC(a1, 0, v2, v3, v4, v5, v6, v7);
  v9 = *(_DWORD *)a1 == *((_DWORD *)v8 + 7) && *(unsigned __int16 *)(a1 + 4) == *((unsigned __int16 *)v8 + 16);
  if (!v9 || *((_BYTE *)v8 + 35))
    return sub_10018E4FC(a1, 0, v2, v3, v4, v5, v6, v7);
  *((_BYTE *)v8 + 35) = 1;
  LODWORD(v11[0]) = 3;
  *((_QWORD *)&v11[0] + 1) = (char *)v8 + 28;
  WORD2(v11[0]) = *(_WORD *)v8;
  return (*(uint64_t (**)(_OWORD *))(qword_100980120 + 24))(v11);
}

uint64_t sub_1001111F8(uint64_t result)
{
  uint64_t v1;
  __int128 *v2;

  v1 = 0;
  while (1)
  {
    if (LODWORD(xmmword_100980148[v1]) == 1)
    {
      v2 = &xmmword_100980148[v1];
      if (BYTE6(xmmword_100980148[v1]))
        break;
    }
    v1 += 3;
    if (v1 == 15)
      return result;
  }
  if (*((_QWORD *)v2 + 1) == result)
  {
    *(_DWORD *)v2 = 0;
    *((_BYTE *)v2 + 6) = 0;
  }
  return result;
}

uint64_t sub_100111244(uint64_t result)
{
  byte_100980238 = result;
  return result;
}

void sub_100111250(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 *v4;
  NSObject *v5;

  v3 = 0;
  while (LODWORD(xmmword_100980148[v3]) != 1)
  {
    v3 += 3;
    if (v3 == 15)
      return;
  }
  v4 = &xmmword_100980148[v3];
  if ((_DWORD)a2)
  {
    if (sub_10005549C())
    {
      sub_100054530("Could not synchronize to periodic advertiser (%!)", a2);
      v5 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    if (off_100980248)
      off_100980248(&xmmword_100980148[v3], a2);
    sub_1001113B8(LODWORD(xmmword_100980148[v3 + 1]) | ((unint64_t)(WORD2(xmmword_100980148[v3 + 1]) | (BYTE6(xmmword_100980148[v3 + 1]) << 16)) << 32), BYTE7(xmmword_100980148[v3 + 1]));
    v4[1] = 0u;
    v4[2] = 0u;
    *v4 = 0u;
    LODWORD(xmmword_100980148[v3]) = 0;
  }
  else
  {
    *(_DWORD *)v4 = 2;
    *((_WORD *)v4 + 2) = *(_WORD *)a1;
    *((_WORD *)v4 + 14) = *(_WORD *)(a1 + 12);
    *(_DWORD *)((char *)v4 + 37) = *(_DWORD *)(a1 + 15);
    ++byte_100980240;
    if (off_100980248)
      off_100980248(&xmmword_100980148[v3], 0);
    sub_1001113B8(LODWORD(xmmword_100980148[v3 + 1]) | ((unint64_t)(WORD2(xmmword_100980148[v3 + 1]) | (BYTE6(xmmword_100980148[v3 + 1]) << 16)) << 32), BYTE7(xmmword_100980148[v3 + 1]));
  }
  qword_100980260 = 0;
  *(_QWORD *)&byte_100980268 = 0;
}

void sub_1001113B8(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  char v13;
  uint8_t buf[4];
  void *v15;

  v11 = a1;
  v13 = BYTE6(a1);
  v12 = WORD2(a1);
  if (sub_10005549C())
  {
    sub_100054530("LE_RemoveDeviceFromPeriodicAdvList");
    v3 = sub_1000544A0(0x42u);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v15 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (a2 <= 0xF)
  {
    if (*((_QWORD *)&xmmword_100980270 + 1))
    {
      v4 = sub_100052DC0(0x10uLL);
      if (v4)
      {
        v5 = v4;
        v6 = sub_10004C9BC(222, sub_100111FBC);
        if ((_DWORD)v6)
        {
          v7 = v6;
          if (sub_10005549C())
          {
            sub_100054530("Could not remove device from periodic advertising list (%!)", v7, (char *)&v11 + 1, a2);
            v8 = sub_1000544A0(0x42u);
            if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
          sub_100053298(v5);
        }
        else
        {
          v9 = v11;
          v10 = v12;
          *((_BYTE *)v5 + 6) = v13;
          *((_WORD *)v5 + 2) = v10;
          *v5 = v9;
          *((_BYTE *)v5 + 7) = a2;
          *((_QWORD *)v5 + 1) = 0;
          if (qword_100980288)
          {
            *(_QWORD *)(qword_100980288 + 8) = v5;
            qword_100980288 = (uint64_t)v5;
          }
          if (!qword_100980280)
          {
            qword_100980280 = (uint64_t)v5;
            qword_100980288 = (uint64_t)v5;
          }
        }
      }
    }
  }
}

void sub_100111580()
{
  uint64_t i;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;

  for (i = 0; i != 15; i += 3)
  {
    if (LODWORD(xmmword_100980148[i]) == 1)
    {
      v2 = sub_100111654();
      if ((_DWORD)v2)
      {
        v3 = v2;
        if (sub_10005549C())
        {
          sub_100054530("LE_PeriodicAdv_CreateSyncCancel failed with status %!", v3);
          v4 = sub_1000544A0(0x42u);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
            goto LABEL_10;
        }
      }
      return;
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("No sync handle found in establishing state");
    v1 = sub_1000544A0(0x42u);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
LABEL_10:
      sub_1006CE7A4();
  }
}

uint64_t sub_100111654()
{
  NSObject *v0;
  uint64_t v1;
  NSObject *v2;
  unint64_t v3;
  int *v4;
  int v5;
  NSObject *v6;
  uint8_t buf[4];
  void *v9;

  if (sub_10005549C())
  {
    sub_100054530("LE_PeriodicAdv_CreateSyncCancel");
    v0 = sub_1000544A0(0x42u);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v9 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (LODWORD(xmmword_100980148[0]) == 1)
  {
LABEL_5:
    v1 = sub_10004C9BC(219, sub_100111E14);
    if ((_DWORD)v1)
    {
      if (sub_10005549C())
      {
        sub_100054530("Could not cancel periodic sync (%!)", v1);
        v2 = sub_1000544A0(0x42u);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
  }
  else
  {
    v3 = -1;
    v4 = &dword_100980178;
    while (v3 != 3)
    {
      v5 = *v4;
      v4 += 12;
      ++v3;
      if (v5 == 1)
      {
        if (v3 < 4)
          goto LABEL_5;
        break;
      }
    }
    if (sub_10005549C())
    {
      sub_100054530("No Pending Sync to Cancel");
      v6 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 117;
  }
  return v1;
}

double sub_1001117EC(int a1)
{
  uint64_t v1;
  __int128 *v2;
  double result;

  v1 = 0;
  while (1)
  {
    v2 = &xmmword_100980148[v1];
    if (WORD2(xmmword_100980148[v1]) == a1)
      break;
    v1 += 3;
    if (v1 == 15)
      return result;
  }
  if (off_100980250)
    off_100980250(v2, 156);
  result = 0.0;
  v2[1] = 0u;
  v2[2] = 0u;
  *v2 = 0u;
  *(_DWORD *)v2 = 0;
  return result;
}

unsigned __int16 *sub_100111858(unsigned __int16 *result)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;

  v1 = 0;
  while (WORD2(xmmword_100980148[v1]) != *result)
  {
    v1 += 3;
    if (v1 == 15)
      return result;
  }
  if (off_100980258)
  {
    v2 = *(_OWORD *)result;
    v3 = *((_QWORD *)result + 2);
    return (unsigned __int16 *)off_100980258(&xmmword_100980148[v1], &v2);
  }
  return result;
}

void sub_1001118CC(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, char a5, int *a6, int a7, __int16 a8, char a9, char a10, char a11, char a12, char a13)
{
  uint64_t i;
  __int128 *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  __int128 *v23;
  int v24;
  __int16 v25;
  uint64_t v26;

  if (sub_10019AC00(a2))
  {
    v26 = a1;
    for (i = 0; i != 15; i += 3)
    {
      if (LODWORD(xmmword_100980148[i]) == 1)
      {
        v19 = &xmmword_100980148[i];
        if (BYTE6(xmmword_100980148[i]))
        {
          if ((_DWORD)v26)
          {
            if (sub_10005549C())
            {
              sub_100054530("LE_SyncTransferReceived with error (%!)", v26);
              v22 = sub_1000544A0(0x42u);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                sub_1006CE7A4();
            }
            if (off_100980248)
              off_100980248(v19, v26);
            *(_DWORD *)v19 = 0;
          }
          else
          {
            v23 = &xmmword_100980148[i];
            *(_DWORD *)v23 = 2;
            *((_WORD *)v23 + 2) = a4;
            v24 = *a6;
            v25 = *((_WORD *)a6 + 2);
            *((_BYTE *)v23 + 22) = *((_BYTE *)a6 + 6);
            *((_WORD *)v23 + 10) = v25;
            *((_DWORD *)v23 + 4) = v24;
            *((_BYTE *)v23 + 23) = a5;
            *((_WORD *)v23 + 14) = a8;
            *((_WORD *)v23 + 15) = a3;
            *((_DWORD *)v23 + 8) = a7;
            *((_BYTE *)v23 + 36) = a9;
            *((_BYTE *)v23 + 37) = a10;
            *((_BYTE *)v23 + 38) = a11;
            *((_BYTE *)v23 + 39) = a12;
            *((_BYTE *)v23 + 40) = a13;
            if (off_100980248)
              off_100980248(v19, 0);
          }
          return;
        }
      }
    }
    if (!sub_10005549C())
      return;
    sub_100054530("LE_SyncTransferReceived, no sync handle found");
    v20 = sub_1000544A0(0x42u);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_8;
  }
  if (sub_10005549C())
  {
    sub_100054530("LE_SyncTransferReceived, invalid connection handle: status %! ignoring", a1);
    v21 = sub_1000544A0(0x42u);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
LABEL_8:
      sub_1006CEEC0();
  }
}

uint64_t sub_100111AF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t i;
  int v8;
  int v9;
  NSObject *v10;
  void *v11;
  uint64_t v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  int v17;

  if (sub_10005549C())
  {
    sub_100054530("LE_PreriodicAdv_TerminateAll");
    v6 = sub_1000544A0(0x42u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v15 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  for (i = 0; i != 15; i += 3)
  {
    v8 = xmmword_100980148[i];
    if (v8 == 1)
    {
      if (!sub_10004C9BC(219, (uint64_t (*)())sub_100111E14, v0, v1, v2, v3, v4, v5, v13))
        continue;
    }
    else
    {
      if (v8 != 2)
        continue;
      v9 = sub_10004C9BC(220, (uint64_t (*)())sub_100111CF0, v0, v1, v2, v3, v4, v5, WORD2(xmmword_100980148[i]));
      LODWORD(xmmword_100980148[i]) = 3;
      if (!v9)
        continue;
    }
    if (sub_10005549C())
    {
      v13 = WORD2(xmmword_100980148[i]);
      sub_100054530("Unable to terminate all syncs. Failure with sync handle: %d (%!)");
      v10 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = sub_100054494();
        *(_DWORD *)buf = 136446466;
        v15 = v11;
        v16 = 1024;
        v17 = 0xFFFF;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
      }
    }
  }
  return 0;
}

double sub_100111CF0(int a1)
{
  uint64_t v2;
  int v3;
  double result;
  __int128 *v5;
  NSObject *v6;
  NSObject *v7;

  v2 = 0;
  byte_100980290 = 0;
  while (LODWORD(xmmword_100980148[v2]) != 3)
  {
    v2 += 3;
    if (v2 == 15)
      return result;
  }
  v3 = sub_10005549C();
  v5 = &xmmword_100980148[v2];
  if (a1)
  {
    if (v3)
    {
      sub_100054530("Terminate sync command complete (FAIL)");
      v6 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    if (off_100980250)
      off_100980250(v5, a1);
  }
  else
  {
    if (v3)
    {
      sub_100054530("Terminate sync command complete (SUCCESS)");
      v7 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    if (off_100980250)
      off_100980250(v5, 0);
    result = 0.0;
    v5[1] = 0u;
    v5[2] = 0u;
    *v5 = 0u;
    *(_DWORD *)v5 = 0;
    --byte_100980240;
  }
  return result;
}

double sub_100111E14(int a1)
{
  uint64_t v1;
  double result;

  if (a1)
  {
    v1 = 0;
    while (LODWORD(xmmword_100980148[v1]) != 1)
    {
      v1 += 3;
      if (v1 == 15)
        return result;
    }
    sub_1001113B8(*(unsigned int *)((char *)&qword_100980260 + 2) | ((unint64_t)(HIWORD(qword_100980260) | (byte_100980268 << 16)) << 32), BYTE1(qword_100980260));
    result = 0.0;
    xmmword_100980158 = 0u;
    unk_100980168 = 0u;
    xmmword_100980148[0] = 0u;
    LODWORD(xmmword_100980148[v1]) = 0;
    qword_100980260 = 0;
    *(_QWORD *)&byte_100980268 = 0;
  }
  return result;
}

void *sub_100111E98(unsigned int a1)
{
  NSObject *v2;
  void *result;
  int v4;
  void *v5;

  if (sub_10005549C())
  {
    sub_100054530("LE_SetPeriodicAdvListSize");
    v2 = sub_1000544A0(0x42u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 136446210;
      v5 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)&v4, 0xCu);
    }
  }
  LOWORD(xmmword_100980270) = a1;
  if (*((_QWORD *)&xmmword_100980270 + 1))
    sub_100053298(*((void **)&xmmword_100980270 + 1));
  result = sub_100052DC0(8 * a1);
  *((_QWORD *)&xmmword_100980270 + 1) = result;
  BYTE2(xmmword_100980270) = 0;
  qword_100980288 = 0;
  qword_100980280 = 0;
  return result;
}

double sub_100111F8C()
{
  double result;

  if (*((_QWORD *)&xmmword_100980270 + 1))
    sub_100053298(*((void **)&xmmword_100980270 + 1));
  result = 0.0;
  xmmword_100980270 = 0u;
  *(_OWORD *)&qword_100980280 = 0u;
  return result;
}

void sub_100111FBC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint8_t buf[4];
  void *v8;

  if (sub_10005549C())
  {
    sub_100054530("leRemoveFromPeriodicAdvListCb");
    v2 = sub_1000544A0(0x42u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v8 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Error removing device from periodic advertiser list %!", a1);
      v3 = sub_1000544A0(0x42u);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  else
  {
    if (!qword_100980280)
      sub_100253460();
    if (BYTE2(xmmword_100980270))
    {
      v4 = 0;
      v5 = *((_QWORD *)&xmmword_100980270 + 1);
      while (*(_QWORD *)(*((_QWORD *)&xmmword_100980270 + 1) + v4) != *(_QWORD *)qword_100980280)
      {
        v4 += 8;
        if (8 * BYTE2(xmmword_100980270) == v4)
          goto LABEL_18;
      }
      v6 = BYTE2(xmmword_100980270) - 1;
      BYTE2(xmmword_100980270) = v6;
      if ((_DWORD)v4 != 8 * v6)
      {
        *(_QWORD *)(*((_QWORD *)&xmmword_100980270 + 1) + v4) = *(_QWORD *)(*((_QWORD *)&xmmword_100980270 + 1)
                                                                          + 8 * v6);
        v5 = *((_QWORD *)&xmmword_100980270 + 1);
        v6 = BYTE2(xmmword_100980270);
      }
      *(_QWORD *)(v5 + 8 * v6) = 0;
    }
  }
LABEL_18:
  sub_100112148();
}

void sub_100112148()
{
  uint64_t v0;

  if (qword_100980280)
  {
    v0 = *(_QWORD *)(qword_100980280 + 8);
    sub_100053298((void *)qword_100980280);
    qword_100980280 = v0;
    if (!v0)
      qword_100980288 = 0;
  }
  else
  {
    sub_100253460();
  }
}

void sub_100112190(int a1, void *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 *v6;

  v6 = sub_100165D44(a1);
  sub_100166E14((uint64_t)v6, a2, a4);
}

uint64_t sub_1001121BC(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _WORD *a8, uint64_t a9)
{
  _WORD *v17;
  uint64_t v18;
  __int16 v19;
  _BYTE *v20;
  unsigned int v21;
  char v22;
  uint64_t v23;

  if (a1 && a5 && a6 && a8 && a9)
  {
    v17 = sub_100114588(0x120uLL);
    if (v17)
    {
      v18 = (uint64_t)v17;
      v17[64] = 200;
      v17[38] = 200;
      v17[37] = *(_WORD *)(sub_100252DE8(0x17u) + 8);
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 40) = 0;
      *(_DWORD *)(v18 + 4) = 1;
      v19 = *(_WORD *)(a1 + 4);
      *(_DWORD *)(v18 + 104) = *(_DWORD *)a1;
      *(_WORD *)(v18 + 108) = v19;
      *(_DWORD *)(v18 + 276) = 1;
      *(_QWORD *)(v18 + 136) = a6;
      *(_BYTE *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 260) = -1;
      *(_QWORD *)(v18 + 152) = a5;
      *(_DWORD *)(v18 + 272) = a3;
      if (a3 || a7)
      {
        v20 = sub_100114588(0x9BuLL);
        *(_QWORD *)(v18 + 64) = v20;
        if (!v20)
        {
          v23 = 106;
          goto LABEL_26;
        }
        if (a3 == 2)
          v20[59] = 1;
        if (!a7)
        {
          v23 = 1721;
          goto LABEL_26;
        }
        *(_QWORD *)(v18 + 144) = a7;
      }
      if (a4)
      {
        v21 = *(unsigned __int8 *)(a4 + 8);
        if (v21 >= 5)
        {
          sub_100253460();
          v21 = *(unsigned __int8 *)(a4 + 8);
        }
        memmove((void *)(v18 + 160), *(const void **)a4, 24 * v21);
        v22 = *(_BYTE *)(a4 + 8);
      }
      else
      {
        v22 = 0;
      }
      *(_BYTE *)(v18 + 256) = v22;
      v23 = sub_1001DD1A8((uint64_t)sub_100112394, (uint64_t)sub_100112488, (uint64_t)sub_1001124D0, a2, a1, (uint64_t)&unk_10091AA58, (_WORD *)v18, (uint64_t)&unk_1007392B0);
      if (!(_DWORD)v23)
      {
        sub_100165CB4(v18);
        *a8 = *(_WORD *)(v18 + 280);
        ++dword_1009991A4;
        return v23;
      }
LABEL_26:
      sub_100165DD0(*(unsigned __int16 *)(v18 + 280));
      return v23;
    }
    return 104;
  }
  else
  {
    sub_100253460();
    return 101;
  }
}

void sub_100112394(int a1, unsigned int a2, unsigned __int16 a3, uint64_t a4)
{
  unsigned __int16 *v7;
  uint64_t v8;
  NSObject *v9;

  v7 = sub_100165D44(a1);
  v8 = (uint64_t)v7;
  if ((_DWORD)a4 || !v7)
  {
    if (sub_10005549C())
    {
      sub_100054530("L2CAPConnectCB failed with result %!", a4);
      v9 = sub_1000544A0(0x17u);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1006CEF28(v9);
    }
  }
  else
  {
    *((_DWORD *)v7 + 69) = 2;
    v7[36] = a3;
    v7[38] = a3;
    v7[37] = a2;
    *((_QWORD *)v7 + 1) = sub_100114588(a2);
    if (*(_DWORD *)(v8 + 272))
    {
      (*(void (**)(_QWORD, _QWORD))(v8 + 144))(*(unsigned __int16 *)(v8 + 280), *(unsigned __int8 *)(*(_QWORD *)(v8 + 64) + 59));
      return;
    }
    a4 = sub_10016645C(v8, 200);
  }
  if ((_DWORD)a4)
    sub_100165F98((unsigned __int16 *)v8, a4);
}

void sub_100112488(int a1, uint64_t a2)
{
  unsigned __int16 *v3;

  v3 = sub_100165D44(a1);
  if (v3)
  {
    if (!(_DWORD)a2)
    {
      if (*((_DWORD *)v3 + 69) <= 3u)
        a2 = 0;
      else
        a2 = 1709;
    }
    sub_100165E5C((uint64_t)v3, a2);
  }
}

void sub_1001124D0(int a1, void *a2, size_t a3)
{
  unsigned __int16 *v5;

  v5 = sub_100165D44(a1);
  sub_1001666FC((uint64_t)v5, a2, a3);
}

uint64_t sub_1001124FC(unsigned __int8 *a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  unint64_t v7;
  NSObject *v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  __int16 v15;
  int v16;
  int *v17;
  uint8_t buf[4];
  void *v19;

  if (sub_10005549C())
  {
    sub_100054530("Beginning Bud Swap 2.0 procedure for %:", a1);
    v2 = sub_1000544A0(0x59u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v19 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v17 = 0;
  if (sub_100182588((uint64_t)a1, (uint64_t *)&v17))
    goto LABEL_5;
  v16 = 0;
  v15 = 0;
  if (sub_10013B648((uint64_t)a1, &v15))
  {
    v6 = sub_10025AB48((uint64_t)a1);
    if (!v6)
    {
      sub_1001F1814(v17, 0, 0, 1);
      if (sub_10005549C())
      {
        sub_100054530("Media CIDs are not connected, stalling all L2CAP queues for %:", a1);
        v8 = sub_1000544A0(0x59u);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          goto LABEL_20;
      }
      goto LABEL_21;
    }
    LODWORD(v7) = 0;
    goto LABEL_14;
  }
  LOWORD(v16) = v15;
  v6 = sub_10025AB48((uint64_t)a1);
  v7 = 1;
  if (v6)
  {
LABEL_14:
    *(_WORD *)((unint64_t)&v16 | (2 * v7)) = v6;
    v7 = (v7 + 1);
  }
  sub_1001F1814(v17, (unsigned __int16 *)&v16, v7, 1);
  if (sub_10005549C())
  {
    sub_100054530("%d excluded media CIDs are connected, stalling all non-media CID L2CAP queues for %:", v7, a1);
    v8 = sub_1000544A0(0x59u);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
LABEL_20:
      v9 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
LABEL_21:
  sub_1001F50DC((uint64_t)sub_100112884);
  v10 = sub_10019ADE8((unsigned __int16 *)v17);
  if (!v10)
  {
LABEL_5:
    if (sub_10005549C())
    {
      sub_100054530("Couldn't begin Bud Swap 2.0 procedure for %:, couldn't find the device", a1);
      v3 = sub_1000544A0(0x59u);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    sub_100253460();
    return 120;
  }
  v11 = v10;
  if (sub_1001F6AB0())
  {
    if (sub_10005549C())
    {
      sub_100054530("Failure in sending LMP Halt command to chipset for lmHandle %d with BT address %:", v11, a1);
      v12 = sub_1000544A0(0x59u);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v4 = 114;
    sub_1000E3B18(a1, 114);
  }
  else
  {
    v4 = 0;
    if (sub_10005549C())
    {
      sub_100054530("Successfully sent LMP Halt command to chipset for lmHandle %d with BT address %:", v11, a1);
      v13 = sub_1000544A0(0x59u);
      v4 = 0;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = sub_100054494();
        *(_DWORD *)buf = 136446210;
        v19 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        return 0;
      }
    }
  }
  return v4;
}

void sub_100112884(int a1, int a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t buf[4];
  void *v11;

  v4 = sub_10019ACEC(a1);
  if (v4)
  {
    v5 = v4;
    v6 = sub_10005549C();
    if ((a2 & 1) != 0)
    {
      if (v6)
      {
        sub_100054530("Chipset confirmed LMP Resume complete, sending SwapCompleteCfm Message to %:", v5 + 3);
        v7 = sub_1000544A0(0x59u);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v11 = sub_100054494();
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      sub_1000E3BEC((unsigned __int8 *)v5 + 48);
    }
    else
    {
      if (v6)
      {
        sub_100054530("Chipset confirmed LMP Halt complete, sending SwapImminentCfm Message to %:", v5 + 3);
        v9 = sub_1000544A0(0x59u);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v11 = sub_100054494();
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      sub_1000E3B18((unsigned __int8 *)v5 + 48, 0);
    }
  }
  else if (sub_10005549C())
  {
    sub_100054530("Received LMP Halt Event but couldn't find a connection handle for lmhandle %d with lmpHaltStatus %d", a1, a2);
    v8 = sub_1000544A0(0x59u);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
}

void sub_100112A30(int a1)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t buf[4];
  void *v5;

  if (a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Chipset returned error from LMP Halt command: %d", a1);
      v2 = sub_1000544A0(0x59u);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  else if (sub_10005549C())
  {
    sub_100054530("Chipset successfully received the LMP Halt command");
    v3 = sub_1000544A0(0x59u);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v5 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
}

uint64_t sub_100112B30(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  void *v11;
  int *v12;
  uint8_t buf[4];
  void *v14;

  if (sub_10005549C())
  {
    sub_100054530("Buds have signaled Bud Swap 2.0 has completed on their side, beginning closing procedures for %:", a1);
    v2 = sub_1000544A0(0x59u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v14 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v12 = 0;
  if (sub_100182588(a1, (uint64_t *)&v12)
    || (sub_1001F1814(v12, 0, 0, 0), (v5 = sub_10019ADE8((unsigned __int16 *)v12)) == 0))
  {
    if (sub_10005549C())
    {
      sub_100054530("Couldn't complete Bud Swap 2.0 procedure for %:, couldn't find the device", a1);
      v3 = sub_1000544A0(0x59u);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    return 120;
  }
  else
  {
    v6 = v5;
    if (sub_1001F6AB0())
    {
      if (sub_10005549C())
      {
        sub_100054530("Failure in sending LMP Resume command to chipset for lmHandle %d with BT address %:", v6, a1);
        v7 = sub_1000544A0(0x59u);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
      return 114;
    }
    else
    {
      v8 = sub_10005549C();
      result = 0;
      if (v8)
      {
        sub_100054530("Successfully sent LMP Resume command to chipset for lmHandle %d with BT address %:", v6, a1);
        v9 = sub_1000544A0(0x59u);
        v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (v10)
        {
          v11 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          v14 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100112D60(uint64_t a1)
{
  char *v1;
  int has_internal_diagnostics;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _DWORD *v52;
  os_log_t v53;
  os_log_t v54;
  uint64_t v55;
  uint64_t v57;

  v1 = (char *)a1;
  sub_100253508(a1);
  has_internal_diagnostics = os_variant_has_internal_diagnostics("com.apple.bluetooth");
  if (sub_1001702EC() == 6)
  {
    if (((_DWORD)v1 - 1205) <= 9 && ((1 << ((_BYTE)v1 + 75)) & 0x203) != 0)
    {
LABEL_4:
      if (has_internal_diagnostics)
        sub_100253320((uint64_t)"Bluetooth fatal error - crashing { build=internal, reason=%d, description=\"%!\" }", v3, v4, v5, v6, v7, v8, v9, (uint64_t)v1);
      else
        sub_100253320((uint64_t)"Bluetooth fatal error - crashing { build=release, reason=%d }", v3, v4, v5, v6, v7, v8, v9, (uint64_t)v1);
      sub_100112D5C();
      v1 = &byte_1009941B8;
      sub_100253320((uint64_t)"OI_FatalError: ID !! (ID %d)\n", v16, v17, v18, v19, v20, v21, v22, unk_1009941DD);
      sub_100253320((uint64_t)"OI_FatalError: PC !!(PC 0x%x)\n", v23, v24, v25, v26, v27, v28, v29, unk_1009941F1);
      sub_100253320((uint64_t)"OI_FatalError: LR !!(LR0 0x%x, LR1 0x%x, LR2 0x%x, LR3 0x%x)\n", v30, v31, v32, v33, v34, v35, v36, dword_1009941F5[0]);
      sub_100253320((uint64_t)"OI_FatalError: MAC Version !! (%d.%d.%d.%d)\n", v37, v38, v39, v40, v41, v42, v43, unk_1009941CD);
      sub_100253320((uint64_t)"OI_FatalError: PHY Version !!( %d.%d.%d.%d)\n", v44, v45, v46, v47, v48, v49, v50, unk_1009941D5);
      sub_10047D244("Marconi", "BluetoothChip", 0.0);
      abort_with_payload(29, *(_QWORD *)dword_1009941F5, &byte_1009941B8, 2048, &unk_1009949B8, 64);
      goto LABEL_13;
    }
  }
  else if ((_DWORD)v1 == 1214)
  {
    goto LABEL_4;
  }
  sub_10011C6E4();
  if (!has_internal_diagnostics)
  {
LABEL_13:
    v10 = _os_log_pack_size(8);
    v11 = (char *)&v57 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v51 = __error();
    v52 = (_DWORD *)_os_log_pack_fill(v11, v10, *v51, &_mh_execute_header, "Bluetooth fatal error - crashing { build=release, reason=%d }", v57);
    *v52 = 67109120;
    v52[1] = (_DWORD)v1;
    goto LABEL_14;
  }
  v10 = _os_log_pack_size(18);
  v11 = (char *)&v57 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __error();
  v13 = _os_log_pack_fill(v11, v10, *v12, &_mh_execute_header, "Bluetooth fatal error - crashing { build=internal, reason=%d, description=\"%{public}s\" }");
  sub_100255B10((uint64_t)v1);
  v15 = "?";
  if (v14)
    v15 = v14;
  *(_DWORD *)v13 = 67109378;
  *(_DWORD *)(v13 + 4) = (_DWORD)v1;
  *(_WORD *)(v13 + 8) = 2082;
  *(_QWORD *)(v13 + 10) = v15;
LABEL_14:
  v53 = os_log_create("com.apple.bluetooth", "CBCrash");
  if (v53)
    v54 = v53;
  else
    v54 = (os_log_t)&_os_log_default;
  qword_10097BA60 = os_log_pack_send_and_compose(v11, v54, 16, 0, 0);
  v55 = abort_with_payload(18, 2, v11, v10, qword_10097BA60, 0);
  return sub_100113030(v55);
}

double sub_100113030(uint64_t a1, const char *a2)
{
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  int *v11;
  uint64_t v12;
  const char *v13;
  os_log_t v14;
  os_log_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  sub_100253508(a1);
  sub_10011C6E4();
  if (os_variant_has_internal_diagnostics("com.apple.bluetooth"))
  {
    v4 = _os_log_pack_size(28);
    v5 = (char *)&v21 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v6 = __error();
    v7 = _os_log_pack_fill(v5, v4, *v6, &_mh_execute_header, "Bluetooth fatal error - crashing { build=internal, reason=%d, description=\"%{public}s\", context=\"%{public}s\" }");
    sub_100255B10(a1);
    if (v8)
      v9 = v8;
    else
      v9 = "?";
    if (a2)
      v10 = a2;
    else
      v10 = "none";
    sub_1001131D0(v7, a1, (uint64_t)v9, (uint64_t)v10);
  }
  else
  {
    v4 = _os_log_pack_size(18);
    v5 = (char *)&v21 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v11 = __error();
    v12 = _os_log_pack_fill(v5, v4, *v11, &_mh_execute_header, "Bluetooth fatal error - crashing { build=release, reason=%d, context=\"%{public}s\" }");
    v13 = "none";
    if (a2)
      v13 = a2;
    *(_DWORD *)v12 = 67109378;
    *(_DWORD *)(v12 + 4) = a1;
    *(_WORD *)(v12 + 8) = 2082;
    *(_QWORD *)(v12 + 10) = v13;
  }
  v14 = os_log_create("com.apple.bluetooth", "CBCrash");
  if (v14)
    v15 = v14;
  else
    v15 = (os_log_t)&_os_log_default;
  qword_10097BA60 = os_log_pack_send_and_compose(v5, v15, 16, 0, 0);
  v16 = abort_with_payload(18, 2, v5, v4, qword_10097BA60, 0);
  return sub_1001131D0(v16, v17, v18, v19);
}

double sub_1001131D0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = 67109634;
  *(_DWORD *)a1 = 67109634;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2082;
  *(_QWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 18) = 2082;
  *(_QWORD *)(a1 + 20) = a4;
  return result;
}

void sub_1001131F8(uint64_t a1, const char *a2)
{
  if (os_variant_has_internal_diagnostics("com.apple.bluetooth"))
    sub_100113030(a1, a2);
  sub_10011323C(a1);
  _exit(1);
}

uint64_t sub_10011323C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (os_variant_has_internal_diagnostics("com.apple.bluetooth"))
    sub_100253320((uint64_t)"Bluetooth error - restarting { build=internal, reason=%d, description=\"%!\", context=\"%s\" }", v2, v3, v4, v5, v6, v7, v8, a1);
  else
    sub_100253320((uint64_t)"Bluetooth error - restarting { build=release, reason=%d, context=\"%s\" }", v2, v3, v4, v5, v6, v7, v8, a1);
  return sub_10011C6E4();
}

void sub_100113298(uint64_t a1)
{
  sub_10011323C(a1);
  _exit(1);
}

uint64_t sub_1001132AC(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  uint64_t result;
  unint64_t v10;

  if (!dword_10098029C)
  {
    mach_timebase_info((mach_timebase_info_t)&dword_100980298);
    v2 = dword_10098029C;
    v3 = dword_10098029C;
    v4 = dword_100980298;
    while ((_DWORD)v4)
    {
      if (v4 > v3)
      {
        v5 = v4 % v3;
        v4 = v3;
        v3 = v5;
      }
      v6 = v3;
      v3 = v4;
      v7 = (_DWORD)v6 == (_DWORD)v4;
      v4 = v6;
      if (v7)
      {
        LODWORD(v3) = 1;
        break;
      }
    }
    v8 = dword_10098029C / v3;
    dword_100980298 /= v3;
    dword_10098029C /= v3;
    if ((v2 / v3) >> 1 >= 0x863)
    {
      sub_100253460();
      v8 = dword_10098029C;
    }
    dword_10098029C = 1000000 * v8;
  }
  result = mach_continuous_time();
  v10 = result * dword_100980298 / dword_10098029C;
  *(_WORD *)(a1 + 4) = v10 % 0x3E8;
  *(_DWORD *)a1 = v10 / 0x3E8;
  return result;
}

uint64_t sub_100113398()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unsigned int v6;

  if (!dword_10098029C)
  {
    mach_timebase_info((mach_timebase_info_t)&dword_100980298);
    v0 = dword_10098029C;
    v1 = dword_10098029C;
    v2 = dword_100980298;
    while ((_DWORD)v2)
    {
      if (v2 > v1)
      {
        v3 = v2 % v1;
        v2 = v1;
        v1 = v3;
      }
      v4 = v1;
      v1 = v2;
      v5 = (_DWORD)v4 == (_DWORD)v2;
      v2 = v4;
      if (v5)
      {
        LODWORD(v1) = 1;
        break;
      }
    }
    v6 = dword_10098029C / v1;
    dword_100980298 /= v1;
    dword_10098029C /= v1;
    if ((v0 / v1) >> 1 >= 0x863)
    {
      sub_100253460();
      v6 = dword_10098029C;
    }
    dword_10098029C = 1000000 * v6;
  }
  return mach_absolute_time() * dword_100980298 / dword_10098029C;
}

uint64_t sub_10011344C(_DWORD *a1, __darwin_suseconds_t *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  timeval v7;

  v7.tv_sec = 0;
  *(_QWORD *)&v7.tv_usec = 0;
  v6 = 0;
  result = gettimeofday(&v7, &v6);
  if (!(_DWORD)result)
  {
    if (a1)
    {
      if (HIDWORD(v6))
        v5 = 3600;
      else
        v5 = 0;
      *a1 = LODWORD(v7.tv_sec) - 60 * v6 + v5;
    }
    if (a2)
      *a2 = v7.tv_usec;
  }
  return result;
}

uint64_t sub_1001134C0(_DWORD *a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  timeval v5;

  v5.tv_sec = 0;
  *(_QWORD *)&v5.tv_usec = 0;
  v4 = 0;
  result = gettimeofday(&v5, &v4);
  if (!(_DWORD)result)
  {
    if (HIDWORD(v4))
      v3 = 3600;
    else
      v3 = 0;
    *a1 = v3 + 60 * v4;
  }
  return result;
}

uint64_t sub_100113518(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  v3 = 0;
  result = sub_10011344C((_DWORD *)&v3 + 1, (__darwin_suseconds_t *)&v3);
  *(_DWORD *)a1 = HIDWORD(v3);
  *(_WORD *)(a1 + 4) = (int)v3 / 1000;
  return result;
}

uint64_t sub_100113574(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  v3 = 0;
  result = sub_10011344C((_DWORD *)&v3 + 1, (__darwin_suseconds_t *)&v3);
  *a1 = __ROR8__(1000 * (int)v3 + 1000000000 * SHIDWORD(v3), 32);
  return result;
}

uint64_t sub_1001135CC(_QWORD *a1)
{
  uint64_t result;

  result = mach_absolute_time();
  *a1 = __ROR8__(result, 32);
  return result;
}

double sub_1001135F4(mach_timebase_info *a1)
{
  double result;
  mach_timebase_info info;

  info = 0;
  mach_timebase_info(&info);
  result = *(double *)&info;
  *a1 = info;
  return result;
}

double sub_10011362C(uint64_t a1, uint64_t a2, _DWORD *a3, _QWORD *a4, double a5, double a6, double a7)
{
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  double result;

  v7 = __ROR8__(a1, 32);
  v8 = __ROR8__(a2, 32);
  v9 = v7 >= v8;
  v10 = v7 - v8;
  if (v9)
  {
    LODWORD(a6) = *a3;
    LODWORD(a7) = a3[1];
    result = (double)*(unint64_t *)&a6 / (double)*(unint64_t *)&a7 * (double)v10;
    *a4 = __ROR8__((unint64_t)result, 32);
  }
  return result;
}

uint64_t sub_100113670(int a1)
{
  return usleep(1000 * a1);
}

uint64_t sub_100113680(void *key, size_t keyLength, const void *a3, unsigned int a4, void *a5, unsigned int a6)
{
  CCCryptorStatus v10;
  CCCryptorStatus v12;
  size_t dataOutMoved;
  CCCryptorRef cryptorRef;

  dataOutMoved = 0;
  cryptorRef = 0;
  v10 = CCCryptorCreate(1u, 0, 0, key, keyLength, 0, &cryptorRef);
  if (v10)
  {
    printf("Could not create cryptor : %d\n", v10);
    return 1041;
  }
  else
  {
    v12 = CCCryptorUpdate(cryptorRef, a3, a4, a5, a6, &dataOutMoved);
    if (v12)
    {
      printf("Failed to encrypt : %d (need %d, got %zu)\n", v12, a6, dataOutMoved);
      CCCryptorRelease(cryptorRef);
      return 1042;
    }
    else
    {
      CCCryptorRelease(cryptorRef);
      if (dataOutMoved == a6)
      {
        return 0;
      }
      else
      {
        printf("Incorrect checksum size %ld, expecting %d\n", dataOutMoved, a6);
        return 1043;
      }
    }
  }
}

uint64_t sub_100113774(void *a1, size_t a2, const void *a3, unsigned int a4, void *a5, unsigned int a6)
{
  int v12;
  unsigned int v13;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int8x16_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned int v23;
  size_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int8x16_t *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  uint64_t v41;
  void *__dst;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  _QWORD v46[2];
  _QWORD v47[2];

  v47[0] = 0;
  v47[1] = 0;
  v12 = a4 & 0xF;
  v46[0] = 0;
  v46[1] = 0;
  if (a4)
    v13 = a4 & 0xF;
  else
    v13 = 16;
  v45.i64[1] = 0;
  *(uint64_t *)((char *)v45.i64 + 1) = 0;
  if (sub_100004F50(a1, a2, v47, 0x10u, v46, 0x10u))
    return 1045;
  LOBYTE(v15) = 0;
  v16 = 15;
  do
  {
    v17 = *((unsigned __int8 *)v46 + v16);
    v45.i8[v16] = v15 | (2 * v17);
    v15 = v17 >> 7;
    --v16;
  }
  while (v16);
  v44 = 0uLL;
  v45.i8[0] = v15 | (2 * LOBYTE(v46[0]));
  if (SLOBYTE(v46[0]) < 0)
    v18 = veorq_s8(v45, (int8x16_t)xmmword_100739300);
  else
    v18 = v45;
  v44 = v18;
  LOBYTE(v19) = 0;
  v20 = 15;
  do
  {
    v21 = v44.u8[v20];
    v45.i8[v20] = v19 | (2 * v21);
    v19 = v21 >> 7;
    --v20;
  }
  while (v20);
  v43 = 0uLL;
  v45.i8[0] = v19 | (2 * v44.i8[0]);
  __dst = a5;
  if (v44.i8[0] < 0)
    v22 = veorq_s8(v45, (int8x16_t)xmmword_100739300);
  else
    v22 = v45;
  v43 = v22;
  v23 = a4 >> 4;
  if (v12)
    ++v23;
  if (a4)
    v24 = v23;
  else
    v24 = 1;
  v25 = (char *)malloc_type_calloc(v24, 0x10uLL, 0x176FE017uLL);
  v26 = (char *)malloc_type_calloc(v24 + 1, 0x10uLL, 0x6B69F645uLL);
  v34 = v26;
  if (v25 && v26)
  {
    memcpy(v25, a3, a4);
    v35 = (16 * (int)v24 - 16) & 0xF0;
    if (v13)
    {
      v25[v35 + v13] |= 0x80u;
      v36 = &v43;
    }
    else
    {
      v36 = &v44;
    }
    *(int8x16_t *)&v25[v35] = veorq_s8(*(int8x16_t *)&v25[v35], *v36);
    v37 = v34 + 16;
    if ((_BYTE)v24)
    {
      v38 = 0;
      v39 = 0;
      while (1)
      {
        for (i = 0; i != 16; ++i)
          v25[v38 + i] ^= v34[v38 + i];
        if (sub_100004F50(a1, a2, &v25[16 * v39], 0x10u, &v37[16 * v39], 0x10u))
          break;
        ++v39;
        v38 += 16;
        if (v39 == v24)
          goto LABEL_37;
      }
      free(v34);
      free(v25);
      return 1047;
    }
    else
    {
LABEL_37:
      memcpy(__dst, &v37[v35], a6);
      free(v34);
      free(v25);
      return 0;
    }
  }
  else
  {
    sub_100253320((uint64_t)"Could not allocate memory for the blocks", v27, v28, v29, v30, v31, v32, v33, v41);
    if (v25)
      free(v25);
    if (v34)
      free(v34);
    return 1046;
  }
}

uint64_t sub_100113A5C(uint64_t a1, int a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v10;
  size_t v11;
  uint64_t *v12;
  size_t v13;
  uint64_t *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  _OWORD __src[8];

  memset(__src, 0, sizeof(__src));
  v38 = 128;
  v10 = ccec_cp_256();
  __chkstk_darwin();
  v12 = (uint64_t *)((char *)&v37 - v11);
  bzero((char *)&v37 - v11, v11);
  __chkstk_darwin();
  v14 = (uint64_t *)((char *)&v37 - v13);
  bzero((char *)&v37 - v13, v13);
  result = 101;
  if (a2 == 64 && a4 == 96)
  {
    *v14 = v10;
    if (ccec_make_pub(256, 32, a1, 32, a1 + 32, v14))
    {
      sub_100253320((uint64_t)"Failed to ccec_make_pub.\n", v16, v17, v18, v19, v20, v21, v22, v37);
      return 1048;
    }
    else
    {
      *v12 = v10;
      if (ccec_make_priv(256, 32, a3, 32, a3 + 32, 32, a3 + 64, v12))
      {
        sub_100253320((uint64_t)"Failed to ccec_make_priv.\n", v23, v24, v25, v26, v27, v28, v29, v37);
        return 1049;
      }
      else
      {
        v30 = ccecdh_compute_shared_secret(v12, v14, &v38, __src, 0);
        if ((_DWORD)v30)
        {
          sub_100253320((uint64_t)"Failed to ccecdh_compute_shared_secret (err=%d), outSize=%d.\n", v31, v38, v32, v33, v34, v35, v36, v30);
          return 1050;
        }
        else
        {
          memcpy(a5, __src, v38);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100113C48(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _OWORD *v22;
  _BYTE *v23;
  char v24;
  uint64_t v25;
  _BYTE *v26;
  char v27;
  uint64_t v29;
  size_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int key;
  _OWORD v60[8];

  memset(v60, 0, sizeof(v60));
  if (byte_100994BB8)
  {
    sub_100253320((uint64_t)"USING DEBUG KEYS\n", (uint64_t)a2, a3, a4, a5, a6, a7, a8, v58);
    v10 = 0;
    *a1 = xmmword_100739350;
    a1[1] = unk_100739360;
    v11 = a1 + 2;
    a1[2] = xmmword_100739370;
    a1[3] = unk_100739380;
    *a2 = xmmword_100739350;
    a2[1] = unk_100739360;
    a2[2] = xmmword_100739370;
    a2[3] = unk_100739380;
    v12 = a2 + 4;
    v13 = 31;
    a2[4] = xmmword_100739330;
    a2[5] = unk_100739340;
    do
    {
      v14 = *((_BYTE *)a1 + v10);
      *((_BYTE *)a1 + v10) = *((_BYTE *)a1 + v13);
      *((_BYTE *)a1 + v13) = v14;
      ++v10;
      --v13;
    }
    while (v10 != 16);
    v15 = 0;
    v16 = (char *)a1 + 63;
    do
    {
      v17 = *((_BYTE *)v11 + v15);
      *((_BYTE *)v11 + v15) = *v16;
      *v16-- = v17;
      ++v15;
    }
    while (v15 != 16);
    v18 = 0;
    v19 = 31;
    do
    {
      v20 = *((_BYTE *)a2 + v18);
      *((_BYTE *)a2 + v18) = *((_BYTE *)a2 + v19);
      *((_BYTE *)a2 + v19) = v20;
      ++v18;
      --v19;
    }
    while (v18 != 16);
    v21 = 0;
    v22 = a2 + 2;
    v23 = (char *)a2 + 63;
    do
    {
      v24 = *((_BYTE *)v22 + v21);
      *((_BYTE *)v22 + v21) = *v23;
      *v23-- = v24;
      ++v21;
    }
    while (v21 != 16);
    v25 = 0;
    v26 = (char *)a2 + 95;
    do
    {
      v27 = *((_BYTE *)v12 + v25);
      *((_BYTE *)v12 + v25) = *v26;
      *v26-- = v27;
      ++v25;
    }
    while (v25 != 16);
    return 0;
  }
  else
  {
    key = 0;
    v29 = ccec_cp_256();
    __chkstk_darwin();
    v31 = (uint64_t *)((char *)&v58 - v30);
    bzero((char *)&v58 - v30, v30);
    v32 = ccrng(&key);
    if (v32)
    {
      key = ccec_generate_key(v29, v32, v31);
      if (key)
      {
        sub_100253320((uint64_t)"Failed to ccec_generate_key.\n", v40, v41, v42, v43, v44, v45, v46, v58);
      }
      else
      {
        v54 = ((unint64_t)(cczp_bitlen(*v31) + 7) >> 2) | 1;
        if (v54 == 65)
        {
          ccec_x963_export(0, v60, v31);
          v55 = *(_OWORD *)((char *)&v60[1] + 1);
          *a1 = *(_OWORD *)((char *)v60 + 1);
          a1[1] = v55;
          v56 = *(_OWORD *)((char *)&v60[3] + 1);
          a1[2] = *(_OWORD *)((char *)&v60[2] + 1);
          a1[3] = v56;
          v57 = cczp_bitlen(*v31);
          v54 = 3 * ((unint64_t)(v57 + 7) >> 3) + 1;
          if (3 * ((unint64_t)(v57 + 7) >> 3) == 96)
          {
            ccec_x963_export(1, v60, v31);
            memmove(a2, (char *)v60 + 1, 0x60uLL);
            return 0;
          }
        }
        sub_100253320((uint64_t)"ccec_x963_export_size is %d.\n", v47, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    else
    {
      sub_100253320((uint64_t)"ccrng failed: %d\n", v33, v34, v35, v36, v37, v38, v39, key);
    }
    return 1051;
  }
}

void sub_100113F1C()
{
  unsigned int v0;

  if (qword_100980308 != -1)
    dispatch_once(&qword_100980308, &stru_10091ABD8);
  do
    v0 = __ldaxr((unsigned int *)&unk_1009802A0);
  while (__stlxr(v0 + 1, (unsigned int *)&unk_1009802A0));
  if (!v0)
    dispatch_async((dispatch_queue_t)qword_1009802A8, &stru_10091AA98);
}

void sub_100113F88(id a1)
{
  if (dword_1009802B0)
    sub_100253460();
  IOPMAssertionCreateWithName(CFSTR("PreventUserIdleSystemSleep"), 0xFFu, CFSTR("com.apple.BTStack"), (IOPMAssertionID *)&dword_1009802B0);
}

void sub_100113FC4()
{
  unsigned int v1;
  unsigned int v2;

  if (!atomic_load((unsigned int *)&unk_1009802A0))
    sub_100253460();
  do
  {
    v1 = __ldaxr((unsigned int *)&unk_1009802A0);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, (unsigned int *)&unk_1009802A0));
  if (!v2)
    dispatch_async((dispatch_queue_t)qword_1009802A8, &stru_10091AAD8);
}

void sub_100114020(id a1)
{
  if (dword_1009802B0)
  {
    IOPMAssertionRelease(dword_1009802B0);
    dword_1009802B0 = 0;
  }
}

void sub_10011404C()
{
  unsigned int v0;

  if (qword_100980308 != -1)
    dispatch_once(&qword_100980308, &stru_10091ABD8);
  do
    v0 = __ldaxr(&dword_1009802B4);
  while (__stlxr(v0 + 1, &dword_1009802B4));
  if (!v0)
    dispatch_async((dispatch_queue_t)qword_1009802A8, &stru_10091AB18);
}

void sub_1001140B8(id a1)
{
  __CFDictionary *Mutable;
  int v2;

  v2 = 1;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, CFSTR("AssertName"), CFSTR("com.apple.BTStack.ForceWake"));
  IOPMAssertionDeclareSystemActivityWithProperties(Mutable, &dword_1009802B8, &v2);
  CFRelease(Mutable);
}

void sub_100114138()
{
  unsigned int v1;
  unsigned int v2;

  if (!atomic_load(&dword_1009802B4))
    sub_100253460();
  do
  {
    v1 = __ldaxr(&dword_1009802B4);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, &dword_1009802B4));
  if (!v2)
    dispatch_async((dispatch_queue_t)qword_1009802A8, &stru_10091AB58);
}

void sub_100114194(id a1)
{
  if (dword_1009802B8)
  {
    IOPMAssertionRelease(dword_1009802B8);
    dword_1009802B8 = 0;
  }
}

void sub_1001141C0(char *cStr, const char *a2, _OWORD *a3, int a4)
{
  uint64_t v4;
  CFStringRef v8;
  __CFDictionary *Mutable;
  char v10;
  CFStringRef v11;
  CFIndex *p_valuePtr;
  CFNumberType v13;
  CFIndex v14;
  const char *v15;
  CFBooleanRef v16;
  CFIndex v17;
  const __CFBoolean *v18;
  __int16 valuePtr;
  CFIndex length[2];

  LODWORD(v4) = a4;
  if (qword_1009802C8 != -1)
    dispatch_once(&qword_1009802C8, &stru_10091AB98);
  if (!off_1009802C0)
    return;
  v8 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  Mutable = CFDictionaryCreateMutable(0, 1, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!(_DWORD)v4)
    goto LABEL_45;
  v10 = 0;
  v4 = v4;
  do
  {
    v11 = CFStringCreateWithCString(0, a2, 0x8000100u);
    *(_OWORD *)length = *a3;
    if (LOBYTE(length[0]) > 0x10u)
    {
      if (LOBYTE(length[0]) == 17)
      {
        v14 = length[1];
        v17 = 6;
      }
      else
      {
        if (LOBYTE(length[0]) == 18)
        {
          v14 = length[1];
        }
        else
        {
          if (LOBYTE(length[0]) != 19)
          {
LABEL_30:
            v15 = "(NULL)";
LABEL_31:
            v18 = (const __CFBoolean *)CFStringCreateWithCString(0, v15, 0x8000100u);
            goto LABEL_38;
          }
          v14 = LODWORD(length[1]);
        }
        v17 = WORD1(length[0]);
      }
      v18 = CFDataCreate(0, (const UInt8 *)v14, v17);
    }
    else
    {
      switch(LOBYTE(length[0]))
      {
        case 1:
          switch(WORD1(length[0]))
          {
            case 4u:
              v13 = kCFNumberIntType;
              goto LABEL_35;
            case 2u:
              valuePtr = length[1];
              p_valuePtr = (CFIndex *)&valuePtr;
              v13 = kCFNumberShortType;
              break;
            case 1u:
              LOBYTE(valuePtr) = length[1];
              p_valuePtr = (CFIndex *)&valuePtr;
              v13 = kCFNumberCharType;
              break;
            default:
              goto LABEL_40;
          }
          goto LABEL_37;
        case 2:
          switch(WORD1(length[0]))
          {
            case 4u:
              v13 = kCFNumberSInt32Type;
LABEL_35:
              p_valuePtr = &length[1];
              break;
            case 2u:
              valuePtr = length[1];
              p_valuePtr = (CFIndex *)&valuePtr;
              v13 = kCFNumberSInt16Type;
              break;
            case 1u:
              LOBYTE(valuePtr) = length[1];
              p_valuePtr = (CFIndex *)&valuePtr;
              v13 = kCFNumberSInt8Type;
              break;
            default:
              goto LABEL_40;
          }
LABEL_37:
          v18 = CFNumberCreate(0, v13, p_valuePtr);
          break;
        case 4:
          v15 = (const char *)length[1];
          goto LABEL_31;
        case 5:
          if (LOBYTE(length[1]))
            v16 = kCFBooleanTrue;
          else
            v16 = kCFBooleanFalse;
          if (v16)
            goto LABEL_39;
          goto LABEL_40;
        default:
          goto LABEL_30;
      }
    }
LABEL_38:
    v16 = v18;
    if (v18)
    {
LABEL_39:
      CFDictionaryAddValue(Mutable, v11, v16);
      CFRelease(v16);
      v10 = 1;
    }
LABEL_40:
    if (v11)
      CFRelease(v11);
    a2 += 256;
    ++a3;
    --v4;
  }
  while (v4);
  if ((v10 & 1) != 0)
    off_1009802C0(35, v8, Mutable, 0);
LABEL_45:
  if (v8)
    CFRelease(v8);
  if (Mutable)
    CFRelease(Mutable);
}

void sub_1001144C0(id a1)
{
  off_1009802C0 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))dlsym((void *)0xFFFFFFFFFFFFFFFFLL, "PLLogRegisteredEvent");
}

uint64_t sub_1001144E8(uint64_t a1)
{
  uint64_t v1;
  vm_size_t v2;
  unsigned int v3;
  malloc_zone_t *zone;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 8);
    v2 = 0x20000;
    if (v1)
    {
      v3 = *(_DWORD *)(v1 + 8);
      if (v3)
        v2 = v3;
      else
        v2 = 0x20000;
    }
  }
  else
  {
    v2 = 0x20000;
  }
  zone = malloc_create_zone(v2, 0);
  qword_1009802D0 = (uint64_t)zone;
  if (!zone)
    return 104;
  malloc_set_zone_name(zone, "BTStack");
  return 0;
}

uint64_t sub_100114548()
{
  malloc_destroy_zone((malloc_zone_t *)qword_1009802D0);
  qword_1009802D0 = 0;
  return 0;
}

BOOL sub_100114574()
{
  return qword_1009802D0 == 0;
}

void *sub_100114588(size_t size)
{
  if (HIDWORD(size))
    return 0;
  else
    return malloc_type_zone_calloc((malloc_zone_t *)qword_1009802D0, 1uLL, size, 0xD18F5C75uLL);
}

uint64_t sub_1001145B4()
{
  uint64_t result;
  int v1;
  int v2;
  int v3;
  ssize_t v4;
  ssize_t i;
  uint64_t v6;
  char v7[1024];
  _BYTE __buf[1024];

  bzero(__buf, 0x400uLL);
  v6 = 0;
  bzero(v7, 0x400uLL);
  sub_10011344C((_DWORD *)&v6 + 1, (__darwin_suseconds_t *)&v6);
  result = open("/dev/uart.log", 0);
  if ((result & 0x80000000) == 0)
  {
    v1 = result;
    if (qword_100980710 != -1)
      dispatch_once(&qword_100980710, &stru_10091AC18);
    __strlcat_chk(v7, byte_100980310, 1024, 1024);
    __strlcat_chk(v7, "/uart.log", 1024, 1024);
    v2 = open(v7, 521, 420);
    if (v2 < 0)
    {
      v3 = v1;
    }
    else
    {
      v3 = v2;
      dprintf(v2, "START DUMP : %d.%d\n", HIDWORD(v6), v6);
      v4 = read(v1, __buf, 0x400uLL);
      if (v4 >= 1)
      {
        for (i = v4; i > 0; i = read(v1, __buf, 0x400uLL))
          write(v3, __buf, i);
      }
      close(v1);
    }
    return close(v3);
  }
  return result;
}

uint64_t sub_10011472C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  _BYTE *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  tm *v18;
  int v19;
  uint64_t v20;
  time_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;

  if (byte_1009802E4)
  {
    v8 = a2;
    v9 = (_BYTE *)result;
    if (dword_1009802D8)
      sub_100049F6C(dword_1009802D8);
    if (v8 >= 7)
    {
      v10 = v9[2] == 27 && v9[3] == 3;
      if (v10 && v9[6] == 255)
      {
        sub_100253320((uint64_t)"Hardward Core dump complete, reporting to daemon", a2, a3, a4, a5, a6, a7, a8, v20);
        sub_10018670C(245);
      }
    }
    if (sub_10004A9EC((uint64_t)sub_100114900, 0, 100, &dword_1009802D8))
      sub_100253320((uint64_t)"Could not register timeout for CoreDump abort.\n", v11, v12, v13, v14, v15, v16, v17, v20);
    if ((byte_1009802DC & 1) == 0)
    {
      byte_1009802DC = 1;
      sub_100253320((uint64_t)"Hardware Core dump starts\n", v11, v12, v13, v14, v15, v16, v17, v20);
    }
    ++dword_1009802E0;
    if ((byte_100980718 & 1) == 0)
    {
      v24 = 0;
      v23 = 0;
      sub_10011344C(&v24, (__darwin_suseconds_t *)&v23);
      v21 = v24;
      v22 = v23;
      v18 = gmtime(&v21);
      strftime(byte_100980819, 0x3CuLL, "%Y_%m_%d_%H_%M_%S", v18);
      if (qword_100980710 != -1)
        dispatch_once(&qword_100980710, &stru_10091AC18);
      __sprintf_chk(byte_100980719, 0, 0x100uLL, "%s/bluetoothd-FWCOREDUMP_%s.log", byte_100980310, byte_100980819);
      byte_100980718 = 1;
    }
    result = open(byte_100980719, 521, 420);
    if ((result & 0x80000000) == 0)
    {
      v19 = result;
      write(result, v9, v8);
      return close(v19);
    }
  }
  return result;
}

uint64_t sub_1001148F4()
{
  return byte_1009802E4;
}

void sub_100114900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  sub_100253320((uint64_t)"Hardward Core dump complete, reporting to daemon", a2, a3, a4, a5, a6, a7, a8, vars0);
  sub_10018670C(245);
}

uint64_t sub_100114920(uint64_t result)
{
  byte_1009802E4 = result;
  return result;
}

void sub_10011492C()
{
  byte_1009802DC = 1;
}

uint64_t sub_10011493C()
{
  return dword_1009802E0;
}

__n128 sub_100114948(__int128 *a1, __n128 *a2)
{
  __n128 result;

  xmmword_1009802E5 = *a1;
  result = *a2;
  xmmword_1009802F5 = (__int128)*a2;
  return result;
}

uint64_t sub_10011496C(const void *a1, int a2, uint64_t a3, int a4)
{
  uint64_t result;
  __int128 v8;

  result = 101;
  if (a2 == 16 && a4 == 7)
  {
    v8 = 0uLL;
    result = sub_100113680(&xmmword_1009802F5, 0x10uLL, a1, 0x10u, &v8, 0x10u);
    if (!(_DWORD)result)
    {
      if (*(_QWORD *)((char *)&v8 + 7) == *(_QWORD *)((char *)&xmmword_1009802E5 + 7)
        && HIBYTE(v8) == (unint64_t)HIBYTE(xmmword_1009802E5))
      {
        result = 0;
        *(_DWORD *)a3 = v8;
        *(_WORD *)(a3 + 4) = WORD2(v8);
        *(_BYTE *)(a3 + 6) = BYTE6(v8);
      }
      else
      {
        return 131;
      }
    }
  }
  return result;
}

uint64_t sub_100114A40(uint64_t result)
{
  byte_100980305 = result;
  return result;
}

uint64_t sub_100114A4C()
{
  int64x2_t v0;

  v0 = vdupq_n_s64(MGGetProductType());
  return vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_100739310), (int32x4_t)vceqq_s64(v0, (int64x2_t)xmmword_100739320)))) & 1;
}

void sub_100114A90(id a1)
{
  qword_1009802A8 = (uint64_t)dispatch_queue_create("com.apple.BTStack.IOPMAssertion", 0);
}

void sub_100114AB8(id a1)
{
  uint64_t v1;

  v1 = NSStartSearchPathEnumerationPrivate(5, 16);
  NSGetNextSearchPathEnumeration(v1, &unk_100980310);
  __strlcat_chk(&unk_100980310, "/Logs/Bluetooth", 1024, 1024);
}

uint64_t sub_100114B00()
{
  return sub_1001E3870(31, (uint64_t)sub_100114B10);
}

void sub_100114B10(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _BYTE *v13;
  NSObject *v14;
  uint8_t buf[4];
  void *v16;

  if ((_DWORD)a1 != 31)
    sub_100253460();
  if (sub_10005549C())
  {
    sub_100054530("_attClassicConnectionInd on psm %x, addr %:, cid %x", a1, a2, a3);
    v6 = sub_1000544A0(0x5Cu);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v16 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v7 = sub_10019AEA4((uint64_t)a2);
  if (v7)
  {
    v8 = v7;
    if (sub_10020AE08(v7) || sub_10020AC84((uint64_t)a2))
    {
      if (sub_10005549C())
      {
        sub_100054530("ATT session with this connection already exists, reject duplicate");
        v9 = sub_1000544A0(0x5Cu);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
      v10 = sub_1001DDCAC(0, 0, 0, a3, 0, 0, 0);
      if ((_DWORD)v10)
      {
        v11 = v10;
        if (sub_10005549C())
        {
          sub_100054530("OI_L2CAP_Accept rejection of duplicate connection failed with result %!", v11);
          v12 = sub_1000544A0(0x5Cu);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            sub_1006CEEC0();
        }
      }
    }
    else
    {
      v13 = sub_10020AB80((uint64_t)a2, 0);
      if (v13)
      {
        *((_WORD *)v13 + 8) = a3;
        *(_QWORD *)v13 = v8;
        if (qword_100980860)
          qword_100980860(((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5]);
      }
      else
      {
        if (sub_10005549C())
        {
          sub_100054530("ATT failed to create session");
          v14 = sub_1000544A0(0x5Cu);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        sub_100253460();
      }
    }
  }
}

uint64_t sub_100114D68(unint64_t a1, int a2)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v11;
  uint64_t (*v12)(void);
  uint64_t (*v13)(void);
  NSObject *v14;
  int v15;
  __int16 v16;

  v3 = sub_100225368(a1);
  v15 = v3;
  v16 = WORD2(v3);
  v4 = sub_10019AEA4((uint64_t)&v15);
  if (!v4)
    return 101;
  v5 = sub_10020AE08(v4);
  if (!v5)
  {
    if (sub_10005549C())
    {
      sub_100054530("ATT_ClassicAccept can not find bearer");
      v9 = sub_1000544A0(0x5Cu);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    return 101;
  }
  v6 = v5;
  v7 = *((unsigned __int16 *)v5 + 8);
  if (!*((_WORD *)v5 + 8))
  {
    sub_100253460();
    v7 = *((unsigned __int16 *)v6 + 8);
  }
  v8 = sub_1001DDCAC((uint64_t)sub_100114EF4, (uint64_t)sub_10011521C, (uint64_t)sub_1001153EC, v7, (uint64_t)&xmmword_100739390, a2, (uint64_t)&unk_10091AC50);
  if (!(_DWORD)v8 && (a2 & 1) != 0)
    return 0;
  if (a2)
  {
    if (sub_10005549C())
    {
      sub_100054530("Att L2CAP Accept error with %!", v8);
      v11 = sub_1000544A0(0x5Cu);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  v12 = sub_10020A778(v6);
  if ((_DWORD)v12)
  {
    v13 = v12;
    if (sub_10005549C())
    {
      sub_100054530("Failed to remove ATT session with %!", v13);
      v14 = sub_1000544A0(0x5Cu);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  return v8;
}

void sub_100114EF4(unsigned int a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  NSObject *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  __int16 v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t (*v20)(void);
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  _BYTE buf[24];

  if (sub_10005549C())
  {
    sub_100054530("_attClassicConnectCfm: cid %x inMTU %d outMTU %d result %!", a1, a2, a3, a4);
    v8 = sub_1000544A0(0x5Cu);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v9 = (unsigned __int8 *)sub_10020AEA8(a1);
  if (a2 >= a3)
    v10 = a3;
  else
    v10 = a2;
  if (v10 <= 0x30)
    v11 = 48;
  else
    v11 = v10;
  if (v9)
  {
    v12 = v9;
    v13 = v9[8];
    v14 = v9[9];
    v15 = v9[10];
    v16 = v9[11];
    v17 = v9[12];
    v18 = v9[13];
    if ((_DWORD)a4)
    {
      if (sub_10005549C())
      {
        sub_100054530("ATT cfm result is %!", a4);
        v19 = sub_1000544A0(0x5Cu);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
      v20 = sub_10020A778(v12);
      if (!(_DWORD)v20)
        goto LABEL_31;
      if (sub_10005549C())
      {
        sub_100054530("ATT Session destroy failed with %!", v20);
        v21 = sub_1000544A0(0x5Cu);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
      goto LABEL_30;
    }
    *(_QWORD *)buf = 0;
    a4 = sub_1001DB520(a1, buf);
    if ((_DWORD)a4)
    {
      if (!sub_10005549C())
        goto LABEL_30;
      sub_100054530("L2CAP get handle failed");
      v23 = sub_1000544A0(0x5Cu);
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        goto LABEL_30;
    }
    else
    {
      if ((unsigned __int8 *)sub_10020AAFC((uint64_t)v12, *(uint64_t *)buf, v11) == v12)
      {
        LODWORD(v20) = 1;
        goto LABEL_31;
      }
      if (!sub_10005549C()
        || (sub_100054530("ATT cfm failed to update session"),
            v24 = sub_1000544A0(0x5Cu),
            !os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)))
      {
LABEL_30:
        LODWORD(v20) = 0;
LABEL_31:
        if (off_100980868)
          off_100980868((v13 << 40) | (v14 << 32) | (v15 << 24) | (v16 << 16) | (v17 << 8) | v18, a4);
        if ((_DWORD)v20)
        {
          sub_10020A34C();
          sub_10020A360();
        }
        return;
      }
    }
    sub_1006CE7A4();
    goto LABEL_30;
  }
  if (sub_10005549C())
  {
    sub_100054530("ATT cfm failed to find session");
    v22 = sub_1000544A0(0x5Cu);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

void sub_10011521C(unsigned int a1, uint64_t a2)
{
  NSObject *v4;
  unsigned __int8 *v5;
  unsigned __int16 **v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t buf[4];
  void *v12;

  if (sub_10005549C())
  {
    sub_100054530("_attClassicDisconnectCB: cid %x result %!", a1, a2);
    v4 = sub_1000544A0(0x5Cu);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v12 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v5 = (unsigned __int8 *)sub_10020AEA8(a1);
  if (v5)
  {
    v6 = (unsigned __int16 **)v5;
    if (off_100980870)
      off_100980870(((unint64_t)v5[8] << 40) | ((unint64_t)v5[9] << 32) | ((unint64_t)v5[10] << 24) | ((unint64_t)v5[11] << 16) | ((unint64_t)v5[12] << 8) | v5[13], a2);
    sub_10020A374();
    v7 = sub_10020AE30(*v6);
    if ((_DWORD)v7)
    {
      v8 = v7;
      if (sub_10005549C())
      {
        sub_100054530("ATT Session destroy failed with %!", v8);
        v9 = sub_1000544A0(0x5Cu);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("attClassicDisconnectCB received on cid %d, but no bearer was found", a1);
      v10 = sub_1000544A0(0x5Cu);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_100253460();
  }
}

void sub_1001153EC(unsigned int a1, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;

  v10 = 0;
  v7 = sub_1001DB520(a1, &v10);
  if ((_DWORD)v7)
  {
    v8 = v7;
    if (sub_10005549C())
    {
      sub_100054530("ATT recv data ind get connection handle failed with status %!", v8);
      v9 = sub_1000544A0(0x5Cu);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  else
  {
    sub_10020BDA4(v10, a2, a3, a4);
  }
}

uint64_t sub_10011548C(unint64_t a1)
{
  unint64_t v1;
  NSObject *v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  _BYTE *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t buf[4];
  void *v12;

  v1 = sub_100225368(a1);
  LODWORD(v10) = v1;
  WORD2(v10) = WORD2(v1);
  if (sub_10005549C())
  {
    sub_100054530("BT_ATT_ClassicConnect addr=%: ", &v10);
    v2 = sub_1000544A0(0x5Cu);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (sub_10020AC84((uint64_t)&v10))
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Classic Connect Att session with this connection already exists!!!");
    v4 = sub_1000544A0(0x5Cu);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      return 101;
    goto LABEL_7;
  }
  v7 = sub_10020AB80((uint64_t)&v10, 1);
  if (!v7)
  {
    if (!sub_10005549C())
      return 101;
    sub_100054530("Classic Connect failed to allocate bearer");
    v9 = sub_1000544A0(0x5Cu);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      return 101;
LABEL_7:
    sub_1006CEEC0();
    return 101;
  }
  v5 = sub_1001DD1A8((uint64_t)sub_100114EF4, (uint64_t)sub_10011521C, (uint64_t)sub_1001153EC, 0x1Fu, (uint64_t)&v10, (uint64_t)&xmmword_100739390, (_WORD *)v7 + 8, (uint64_t)&unk_10091AC50);
  if ((_DWORD)v5)
  {
    if (sub_10005549C())
    {
      sub_100054530("Att L2CAP Connect error with %!", v5, v10);
      v8 = sub_1000544A0(0x5Cu);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  return v5;
}

uint64_t sub_100115684(unint64_t a1)
{
  unint64_t v1;
  NSObject *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v11;
  uint8_t buf[4];
  void *v13;

  v1 = sub_100225368(a1);
  LODWORD(v11) = v1;
  WORD2(v11) = WORD2(v1);
  if (sub_10005549C())
  {
    sub_100054530("ATT ClassicDisconnect addr=%: ", &v11);
    v2 = sub_1000544A0(0x5Cu);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v4 = sub_10019AEA4((uint64_t)&v11);
  if (!v4)
    return 101;
  v5 = sub_10020AE08(v4);
  if (!v5)
    return 101;
  v6 = v5;
  v7 = *((unsigned __int16 *)v5 + 8);
  if (!v7)
  {
    sub_100253460();
    v7 = *((unsigned __int16 *)v6 + 8);
  }
  v8 = sub_1001DEB7C(v7, 436);
  if ((_DWORD)v8)
  {
    if (sub_10005549C())
    {
      sub_100054530("Att L2CAP Disconnect error with %!", v8, v11);
      v9 = sub_1000544A0(0x5Cu);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  return v8;
}

uint64_t sub_1001157D8(int a1, int a2)
{
  NSObject *v4;
  int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint8_t buf[4];
  void *v12;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v6 = 0;
  if (sub_10005549C())
  {
    sub_100054530("ATT Classic handle registration:  0x%x -> 0x%x", a1, a2);
    v4 = sub_1000544A0(0x5Cu);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v12 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  byte_100980840 = 1;
  word_100980842 = 2;
  dword_100980848 = a1;
  byte_100980850 = 1;
  word_100980852 = 2;
  dword_100980858 = a2;
  v7 = &unk_10091AC80;
  LOWORD(v8) = 3;
  v9 = off_100978AD8;
  LOWORD(v10) = word_100978AE0;
  return sub_1002465CC((uint64_t)&v7, &v6);
}

__n128 sub_100115918(__n128 *a1)
{
  __n128 result;
  BOOL v3;

  if (!a1)
    sub_100253460();
  if (qword_100980860)
    v3 = 0;
  else
    v3 = off_100980868 == 0;
  if (!v3 || off_100980870 != 0)
    sub_100253460();
  if (a1)
  {
    result = *a1;
    off_100980870 = (uint64_t (*)(_QWORD, _QWORD))a1[1].n128_u64[0];
    *(__n128 *)&qword_100980860 = result;
  }
  return result;
}

void sub_100115974()
{
  qword_100980860 = 0;
  off_100980868 = 0;
  off_100980870 = 0;
}

uint64_t sub_100115988(uint64_t a1, _WORD *a2)
{
  _OWORD v3[2];

  v3[0] = xmmword_100739390;
  v3[1] = unk_1007393A0;
  return sub_1001DC9B8(31, (uint64_t)v3, a1, (uint64_t)sub_100114EF4, (uint64_t)sub_10011521C, (uint64_t)sub_1001153EC, a2, (uint64_t)&unk_10091AC50);
}

uint64_t sub_1001159E4(unsigned int a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  NSObject *v10;
  int v11;
  __int16 v12;

  v12 = 0;
  v11 = 0;
  result = sub_1002012E0(a1, (uint64_t)&v11);
  if (!(_DWORD)result)
  {
    v9 = sub_10020AC84((uint64_t)&v11);
    if (v9 || (v9 = (uint64_t)sub_10020AB80((uint64_t)&v11, 1)) != 0)
    {
      *(_WORD *)(v9 + 16) = a1;
      sub_100114EF4(a1, a2, a3, a4);
      return 0;
    }
    else
    {
      if (sub_10005549C())
      {
        sub_100054530("BT_ATT_FastConnect_ClassicConnect error creating ATT signaling");
        v10 = sub_1000544A0(0x5Cu);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 104;
    }
  }
  return result;
}

uint64_t sub_100115AB0(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 **v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v9;

  v9 = 0;
  v3 = sub_10019AEA4(a1);
  v4 = v3;
  if (v3 && (v5 = (unsigned __int16 **)sub_10020AE08(v3)) != 0)
  {
    v6 = sub_10020AE30(*v5);
    if ((_DWORD)v6)
    {
      if (sub_10005549C())
      {
        sub_100054530("BT_ATT_ClassicFastDisconnectAtt destroy session error with %d", v6);
        v7 = sub_1000544A0(0x5Cu);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
  }
  else
  {
    v6 = 101;
  }
  if (a2)
  {
    if (!sub_1001DB044(a2, &v9))
    {
      if (v9)
      {
        sub_1001DC658(v9);
        if (v4)
          sub_100186150(v4);
      }
    }
  }
  return v6;
}

uint64_t sub_100115B80(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  bzero(word_100980878, 0xB68uLL);
  byte_1009813B8 = 1;
  if (!_os_feature_enabled_impl("BluetoothFeatures", "AACPServerConnection"))
    return 0;
  v2 = *(_OWORD *)a1;
  qword_1009813D0 = *(_QWORD *)(a1 + 16);
  xmmword_1009813C0 = v2;
  if (byte_1009813D8)
    return 0;
  v11 = &unk_10091AD30;
  v12 = 3;
  v13 = off_100978AE8;
  v14 = (unsigned __int16)word_100978AF0;
  v5 = sub_1001E3B68(&word_1009813DA);
  if ((_DWORD)v5)
  {
    v3 = v5;
    if (sub_10005549C())
    {
      sub_100054530("L2CAP psm allocation failed!", v11, v12, v13, v14);
      v6 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
LABEL_8:
        sub_1006D17C4();
    }
  }
  else
  {
    v7 = sub_1001E3870((unsigned __int16)word_1009813DA, (uint64_t)sub_100117D48);
    if (!(_DWORD)v7)
    {
      byte_1009813E0 = 1;
      word_1009813E2 = 2;
      dword_1009813E8 = (unsigned __int16)word_1009813DA;
      v3 = sub_1002465CC((uint64_t)&v11, (int *)algn_1009813DC);
      if (!(_DWORD)v3)
      {
        byte_1009813D8 = 1;
        return v3;
      }
      if (sub_10005549C())
      {
        sub_100054530("OI_SDPDB_AddServiceRecord failed", v11, v12, v13, v14);
        v9 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          sub_1006D17C4();
      }
      sub_1001E3A38((unsigned __int16)word_1009813DA);
      goto LABEL_18;
    }
    v3 = v7;
    if (sub_10005549C())
    {
      sub_100054530("OI_L2CAP_Register failed", v11, v12, v13, v14);
      v8 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        goto LABEL_8;
    }
  }
LABEL_18:
  if (sub_10005549C())
  {
    sub_100054530("registerL2CAPListeners failed");
    v10 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1006D17C4();
  }
  return v3;
}

uint64_t sub_100115DC0(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int16 v11;
  NSObject *v12;
  NSObject *v13;
  __int16 v15;
  uint64_t v16;

  v2 = 0;
  while (1)
  {
    v3 = (unsigned __int16)word_100980878[v2];
    v4 = (unsigned __int16)word_100980878[v2 + 1];
    if ((v4 | ((_DWORD)v3 << 16)) == a1)
      break;
    v2 += 36;
    if (v2 == 1080)
    {
      if (sub_10005549C())
      {
        sub_100054530("Invalid Handle %x", a1);
        v5 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 414;
    }
  }
  v7 = (int *)&word_100980878[v2 + 2];
  v8 = sub_1000EA93C((uint64_t)&unk_1009810E8, 30, (unsigned __int16)word_100980878[v2 + 1]);
  if (v8)
  {
    v9 = v8;
    v10 = sub_1000EA3C0(v3, v4, v7, 2, 2);
    v16 = 0;
    v15 = 0;
    v11 = *((_WORD *)v10 + 1);
    LOWORD(v16) = *((_WORD *)v10 + 5);
    WORD1(v16) = v11;
    sub_1000532A8((uint64_t)(v10 + 1), 2u);
    sub_10005336C((unsigned __int8 *)v10 + 16, (char *)&v16, 4uLL, 2u);
    sub_10005336C((unsigned __int8 *)v10 + 16, (char *)&v15, *((unsigned __int16 *)v10 + 64), 2u);
    *((_QWORD *)v10 + 19) = v9;
    v6 = sub_1000EA510((uint64_t)v10, (uint64_t)sub_1001175B8);
    if (!(_DWORD)v6)
    {
      sub_100117F1C(2, a1);
      return v6;
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("sendDisconnectReqPacket channel not found: addr=%: cid=%d sid=%d result=%d", v7, v4, v3, 0);
      v12 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1006D1900();
    }
    v6 = 406;
  }
  if (sub_10005549C())
  {
    sub_100054530("sendDisconnectReqPacket failed");
    v13 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_1006D17C4();
  }
  return v6;
}

__int16 *sub_100115FF4(int *a1, __int16 a2, uint64_t a3)
{
  unint64_t v4;
  __int16 *v5;
  __int16 *result;
  int v7;

  v4 = 0x7FFFFFFFFFFFFBC8uLL;
  while (1)
  {
    v5 = &word_100980878[v4];
    if (!*(_QWORD *)&word_100980878[v4 + 1088])
      break;
    v4 += 36;
    if (!(v4 * 2))
      return 0;
  }
  result = v5 + 1080;
  v7 = *a1;
  v5[1084] = *((_WORD *)a1 + 2);
  *((_DWORD *)v5 + 541) = v7;
  v5[1081] = a2;
  v5[1080] = *(_WORD *)(a3 + 8);
  *((_QWORD *)v5 + 272) = *(_QWORD *)a3;
  *((_DWORD *)v5 + 552) = *(_DWORD *)(a3 + 10);
  *((_DWORD *)v5 + 556) = 0;
  *(_QWORD *)(v5 + 1106) = *(_QWORD *)(a3 + 14);
  return result;
}

uint64_t sub_100116064(int *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, void **a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int16 v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v20;
  uint8_t buf[4];
  void *v22;

  if (sub_10005549C())
  {
    sub_100054530("sendConnectReqPacket: addr=%: cid=%u sid=%u major=%u minor=%u result=%u", a1, a2, a3, a4, a5, 0);
    v12 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v22 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v13 = sub_1000EA93C((uint64_t)&unk_1009810E8, 30, a2);
  if (v13)
  {
    v14 = v13;
    v15 = sub_1000EA3C0(a3, a2, a1, 0, 12);
    if (!v15)
      sub_100253460();
    v20 = 0;
    v16 = *((_WORD *)v15 + 1);
    LOWORD(v20) = *((_WORD *)v15 + 5);
    WORD1(v20) = v16;
    *(_WORD *)buf = a4;
    *(_WORD *)&buf[2] = a5;
    v22 = *a6;
    sub_1000532A8((uint64_t)(v15 + 1), 2u);
    sub_10005336C((unsigned __int8 *)v15 + 16, (char *)&v20, 4uLL, 2u);
    sub_10005336C((unsigned __int8 *)v15 + 16, (char *)buf, *((unsigned __int16 *)v15 + 64), 2u);
    *((_QWORD *)v15 + 19) = v14;
    v17 = sub_1000EA510((uint64_t)v15, (uint64_t)sub_1001175B8);
    if (!(_DWORD)v17)
      sub_100117F1C(0, a2 | (a3 << 16));
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("sendConnectReqPacket channel not found: addr=%: cid=%d sid=%d result=%d", a1, a2, a3, 0);
      v18 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        sub_1006D1900();
    }
    return 406;
  }
  return v17;
}

double sub_1001162A4(unsigned int a1, unsigned __int16 *a2, int a3)
{
  double result;
  NSObject *v5;
  uint64_t v8;
  unsigned __int16 v9;
  int v10;
  unsigned int v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  __int16 *v15;
  uint64_t v16;
  char v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  void (*v25)(_QWORD, uint64_t);
  NSObject *v26;
  void *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  void (*v31)(_QWORD, unsigned __int16 *, _QWORD);
  unsigned int v32;
  __int16 *v33;
  __int16 *v34;
  uint64_t v35;
  __int16 v36;
  __int16 *v37;
  uint64_t v38;
  __int16 *v39;
  int v40;
  uint64_t v41;
  NSObject *v42;
  __int16 v43;
  char *v44;
  __int16 *v45;
  char v46;
  NSObject *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, __int16 *);
  uint64_t v52;
  int *v53;
  uint8_t buf[4];
  void *v55;

  if (a3 <= 3)
  {
    if (sub_10005549C())
    {
      sub_100054530("Incoming message has invalid length %d", a3);
      v5 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_4;
    }
    return result;
  }
  v53 = 0;
  if (!a2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aap/aap_client.c");
  v8 = 0;
  v9 = a3 - 4;
  v10 = *a2;
  v11 = a2[1];
  do
  {
    if ((unsigned __int16)word_100980878[v8 + 1] == a1 && (unsigned __int16)word_100980878[v8] == v11)
    {
      if (sub_1001DB044(a1, (uint64_t *)&v53) || !sub_1001E3CCC(v53))
      {
        if (sub_10005549C())
        {
          sub_100054530("Can't find channel %d", a1);
          v13 = sub_1000544A0(0x52u);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
LABEL_16:
            sub_1006CE7A4();
        }
        return result;
      }
      v14 = v10 - 1;
      v15 = &word_100980878[v8];
      switch(v14)
      {
        case 0:
          if (a3 < 6)
          {
            v32 = 4;
          }
          else
          {
            v16 = a2[2];
            if (a2[2])
            {
              v17 = 0;
              goto LABEL_74;
            }
            v32 = 6;
          }
          v33 = &word_100980878[v8];
          if (LOBYTE(word_100980878[v8 + 12]) != 3)
          {
            if (sub_10005549C())
            {
              sub_100054530("l2capRecvDataInd: BT_AAP_CONNECT_RSP connection in unhandled state sid=%u cid=%u state=%u", v11, a1, *((unsigned __int8 *)v33 + 24));
              v42 = sub_1000544A0(0x52u);
              if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                sub_1006CE7A4();
            }
LABEL_73:
            v16 = 0;
            v17 = 1;
LABEL_74:
            v49 = a1 | (v11 << 16);
            sub_1001181D0(v49);
            v50 = *(_QWORD *)&word_100980878[v8 + 8];
            if (v50)
            {
              v51 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, __int16 *))(v50 + 8);
              if (v51)
              {
                v52 = sub_1001E3CCC(v53);
                v51(v52 + 10, v16, v49, (unsigned __int16)word_100980878[v8 + 22], (unsigned __int16)word_100980878[v8 + 24], (unsigned __int16)word_100980878[v8 + 25], &word_100980878[v8 + 26]);
              }
            }
            if ((v17 & 1) == 0)
              goto LABEL_78;
            return result;
          }
          *((_BYTE *)v33 + 24) = 4;
          v33[22] = *(_WORD *)(sub_1001E3CCC(v53) + 32) - 4;
          if (a3 <= 5)
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aap/aap_client.c", 701, "void l2capRecvDataInd(OI_L2CAP_CID, uint8_t *, uint16_t, _Bool, OI_HCI_Packet_Attrs *)");
          }
          else if ((int)(a3 - v32) >= 2)
          {
            v34 = &word_100980878[v8];
            word_100980878[v8 + 24] = a2[v32 / 2];
            v35 = v32 + 2;
            if (a3 - (int)v35 > 1)
            {
              v34[25] = *(unsigned __int16 *)((char *)a2 + v35);
              LODWORD(v35) = v32 + 4;
              if (a3 >= 18)
                v36 = 18;
              else
                v36 = a3;
              v37 = v34 + 26;
              v38 = (unsigned __int16)(v36 - 10);
              v39 = (__int16 *)((char *)v34 + v38 + 52);
              v40 = a3 - v35;
              LODWORD(v41) = v38;
LABEL_66:
              if (v40 >= (int)v41 && v37 < v39)
              {
                v44 = (char *)a2 + v35;
                v45 = (__int16 *)((char *)&word_100980878[v8 + 26] + (char *)v39 - (char *)v37);
                do
                {
                  v46 = *v44++;
                  *(_BYTE *)v37 = v46;
                  v37 = (__int16 *)((char *)v37 + 1);
                }
                while (v45 != v37);
              }
              if (sub_10005549C())
              {
                sub_100054530("l2capRecvDataInd: BT_AAP_CONNECT_RSP connection accepted sid=%u cid=%u", v11, a1);
                v47 = sub_1000544A0(0x52u);
                if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
                {
                  v48 = sub_100054494();
                  *(_DWORD *)buf = 136446210;
                  v55 = v48;
                  _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                }
              }
              goto LABEL_73;
            }
LABEL_62:
            if (a3 >= 18)
              v43 = 18;
            else
              v43 = a3;
            v37 = &word_100980878[v8 + 26];
            v41 = (unsigned __int16)(v43 - 10);
            v39 = (__int16 *)((char *)v37 + v41);
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aap/aap_client.c", 704, "void l2capRecvDataInd(OI_L2CAP_CID, uint8_t *, uint16_t, _Bool, OI_HCI_Packet_Attrs *)");
            v40 = 0;
            goto LABEL_66;
          }
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aap/aap_client.c", 702, "void l2capRecvDataInd(OI_L2CAP_CID, uint8_t *, uint16_t, _Bool, OI_HCI_Packet_Attrs *)");
          LODWORD(v35) = v32;
          goto LABEL_62;
        case 1:
          if (sub_10005549C())
          {
            sub_100054530("l2capRecvDataInd: BT_AAP_DISCONNECT_REQ");
            v19 = sub_1000544A0(0x52u);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              v20 = sub_100054494();
              *(_DWORD *)buf = 136446210;
              v55 = v20;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
          v21 = sub_1001E3CCC(v53);
          v22 = sub_100118CBC((int *)(v21 + 10), a1, v11);
          if ((_DWORD)v22)
          {
            if (sub_10005549C())
            {
              sub_100054530("sendDisconnectRspPacket failed");
              v23 = sub_1000544A0(0x52u);
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
                sub_1006D17C4();
            }
          }
          v24 = *(_QWORD *)&word_100980878[v8 + 8];
          if (v24)
          {
            v25 = *(void (**)(_QWORD, uint64_t))(v24 + 16);
            if (v25)
              v25(a1 | (v11 << 16), v22);
          }
LABEL_78:
          *((_QWORD *)v15 + 8) = 0;
          result = 0.0;
          *((_OWORD *)v15 + 2) = 0u;
          *((_OWORD *)v15 + 3) = 0u;
          *(_OWORD *)v15 = 0u;
          *((_OWORD *)v15 + 1) = 0u;
          return result;
        case 2:
          if (sub_10005549C())
          {
            sub_100054530("BT_AAP_DISCONNECT_RSP from l2capRecvDataInd for cid=%d", a1);
            v26 = sub_1000544A0(0x52u);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              v27 = sub_100054494();
              *(_DWORD *)buf = 136446210;
              v55 = v27;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
          sub_1001181D0(a1 | (v11 << 16));
          if (a3 < 6)
            v28 = 0;
          else
            v28 = a2[2];
          sub_100118274(v11, a1, v28);
          return result;
        case 3:
          v29 = (unsigned __int16)v15[1];
          if (__PAIR64__(v29, (unsigned __int16)*v15) == __PAIR64__(a1, v11))
          {
            v30 = *(_QWORD *)&word_100980878[v8 + 8];
            if (v30)
            {
              v31 = *(void (**)(_QWORD, unsigned __int16 *, _QWORD))(v30 + 32);
              if (v31)
                v31(v29 | (v11 << 16), a2 + 2, v9);
            }
          }
          return result;
        default:
          if (sub_10005549C())
          {
            sub_100054530("Should not be here");
            v18 = sub_1000544A0(0x52u);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              goto LABEL_16;
          }
          return result;
      }
    }
    v8 += 36;
  }
  while (v8 != 1080);
  if (!sub_10005549C())
    return result;
  sub_100054530("Incoming message to invalid cid/sid (%d/%d)", v11, a1);
  v12 = sub_1000544A0(0x52u);
  if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    return result;
LABEL_4:
  sub_1006CE7A4();
  return result;
}

uint64_t sub_100116940(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  unsigned __int16 v6;
  __int16 *v7;
  char v8;
  unsigned int v10;
  BOOL v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  __int128 v26;

  if (sub_10005549C())
  {
    sub_100054530("BT_AAP_Client_Connect");
    v4 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v26) = 136446210;
      *(_QWORD *)((char *)&v26 + 4) = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)&v26, 0xCu);
    }
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    if (*(_DWORD *)&word_100980878[v5 + 2] == *(_DWORD *)a1 && word_100980878[v5 + 4] == *(_WORD *)(a1 + 4))
    {
      v10 = LOBYTE(word_100980878[v5 + 12]);
      if (v10 == 2)
        return 0;
      v11 = v10 > 2;
      if (word_100980878[v5] == *(_WORD *)(a2 + 8))
        return 133;
      v6 = word_100980878[v5 + 1];
      v8 |= v11;
      v7 = &word_100980878[v5];
    }
    v5 += 36;
  }
  while (v5 != 1080);
  if (v7 || (v7 = sub_100115FF4((int *)a1, v6, a2)) != 0)
  {
    if ((v8 & 1) == 0)
    {
      v16 = (unsigned __int16)v7[21];
      v17 = sub_10005549C();
      if (v16)
      {
        if (v17)
        {
          sub_100054530("PSM is already available, connect L2CAP");
          v18 = sub_1000544A0(0x52u);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            v19 = sub_100054494();
            LODWORD(v26) = 136446210;
            *(_QWORD *)((char *)&v26 + 4) = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)&v26, 0xCu);
          }
        }
        sub_100116D64((uint64_t)v7);
        return 0;
      }
      if (v17)
      {
        sub_100054530("AAP_CLIENT_Connect initiating SDP");
        v20 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          v21 = sub_100054494();
          LODWORD(v26) = 136446210;
          *(_QWORD *)((char *)&v26 + 4) = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)&v26, 0xCu);
        }
      }
      v22 = sub_1002443D4((uint64_t)sub_100116F38, (uint64_t)sub_100116FE4, a1);
      if (!(_DWORD)v22)
      {
        *((_BYTE *)v7 + 24) = 1;
        *((_QWORD *)&v26 + 1) = v7;
        *(_QWORD *)&v26 = 8;
        return sub_10004A9EC((uint64_t)sub_100117070, (const void **)&v26, 30, (int *)v7 + 16);
      }
      v14 = v22;
      if (!sub_10005549C())
        goto LABEL_38;
      sub_100054530("Failed to connect SDP");
      v23 = sub_1000544A0(0x52u);
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        goto LABEL_38;
LABEL_37:
      sub_1006D17C4();
LABEL_38:
      *((_QWORD *)v7 + 8) = 0;
      *((_OWORD *)v7 + 2) = 0u;
      *((_OWORD *)v7 + 3) = 0u;
      *(_OWORD *)v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
      return v14;
    }
    if (sub_10005549C())
    {
      sub_100054530("AAP_Client: L2CAP connected, beginning AAP connection");
      v12 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v13 = sub_100054494();
        LODWORD(v26) = 136446210;
        *(_QWORD *)((char *)&v26 + 4) = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)&v26, 0xCu);
      }
    }
    *((_BYTE *)v7 + 24) = 3;
    v14 = sub_100116064((int *)a1, v6, *(unsigned __int16 *)(a2 + 8), *(unsigned __int16 *)(a2 + 10), *(unsigned __int16 *)(a2 + 12), (void **)(a2 + 14));
    if ((_DWORD)v14)
    {
      if (!sub_10005549C())
        goto LABEL_38;
      sub_100054530("sendConnectReqPacket failed");
      v15 = sub_1000544A0(0x52u);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        goto LABEL_38;
      goto LABEL_37;
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("allocateConnection failed");
      v24 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        sub_1006D1968();
    }
    return 104;
  }
  return v14;
}

void sub_100116D64(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  void *v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t buf[4];
  void *v9;

  if (sub_10005549C())
  {
    sub_100054530("Connecting L2CAP for %:", a1 + 4);
    v2 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v9 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v3 = *(unsigned __int16 *)(a1 + 42);
  if (*(_WORD *)(a1 + 42))
  {
    *(_BYTE *)(a1 + 24) = 2;
    v4 = sub_1000EA260();
    v5 = sub_1000EA284();
    if (sub_1001DD1A8((uint64_t)sub_100117A48, (uint64_t)sub_100117AB4, (uint64_t)sub_1001162A4, v3, a1 + 4, (uint64_t)v4, (_WORD *)(a1 + 2), (uint64_t)v5))
    {
      if (sub_10005549C())
      {
        sub_100054530("OI_L2CAP_Connect failed");
        v6 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          sub_1006D17C4();
      }
      *(_QWORD *)(a1 + 64) = 0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("SDP disconnected without a valid PSM");
      v7 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_100049F6C(*(unsigned int *)(a1 + 64));
    *(_BYTE *)(a1 + 24) = 0;
  }
}

uint64_t sub_100116F38(uint64_t result)
{
  _QWORD v1[2];
  _QWORD v2[2];
  __int128 v3;
  __int128 v4;

  v4 = unk_10091ADE8;
  v3 = xmmword_100739440;
  if (!(_DWORD)result)
  {
    v2[1] = &v4;
    v2[0] = 65542;
    v1[1] = &v3;
    v1[0] = 65542;
    result = sub_100245200((uint64_t)sub_100118E20, (unsigned __int8 *)v2, (unsigned __int8 *)v1);
    if ((_DWORD)result)
      return sub_100244A44();
  }
  return result;
}

void sub_100116FE4()
{
  uint64_t i;
  NSObject *v1;

  for (i = 0; i != 1080; i += 36)
  {
    if (LOBYTE(word_100980878[i + 12]) == 1)
    {
      sub_100116D64((uint64_t)&word_100980878[i]);
      return;
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("No connection Entry for this SDP search resp");
    v1 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

void sub_100117070(uint64_t a1)
{
  NSObject *v2;

  if (sub_10005549C())
  {
    sub_100054530("Couldn't connect SDP for AAP!");
    v2 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  sub_100118274(**(unsigned __int16 **)(a1 + 8), *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2), 3572);
}

uint64_t sub_1001170E0(int a1, char *a2, size_t a3)
{
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int16 v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v21;

  v6 = 0;
  while (1)
  {
    v7 = &word_100980878[v6];
    v8 = (unsigned __int16)word_100980878[v6];
    v9 = (unsigned __int16)word_100980878[v6 + 1];
    if ((v9 | ((_DWORD)v8 << 16)) == a1)
      break;
    v6 += 36;
    if (v6 == 1080)
    {
      if (sub_10005549C())
      {
        sub_100054530("Invalid handle %x", a1);
        v10 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 414;
    }
  }
  if ((unsigned __int16)v7[22] >= a3)
  {
    v13 = (int *)&word_100980878[v6 + 2];
    v14 = sub_1000EA93C((uint64_t)&unk_1009810E8, 30, v9);
    if (v14)
    {
      v15 = v14;
      v16 = sub_1000EA3C0(v8, v9, v13, 4, a3);
      v21 = 0;
      v17 = *((_WORD *)v16 + 1);
      LOWORD(v21) = *((_WORD *)v16 + 5);
      WORD1(v21) = v17;
      sub_1000532A8((uint64_t)(v16 + 1), 2u);
      sub_10005336C((unsigned __int8 *)v16 + 16, (char *)&v21, 4uLL, 0);
      sub_10005336C((unsigned __int8 *)v16 + 16, a2, a3, 0);
      *((_QWORD *)v16 + 17) = a2;
      *((_QWORD *)v16 + 19) = v15;
      v11 = sub_1000EA510((uint64_t)v16, (uint64_t)sub_1001175B8);
      if (!(_DWORD)v11)
        return v11;
    }
    else
    {
      if (sub_10005549C())
      {
        sub_100054530("sendDataPacket channel not found: addr=%: cid=%d sid=%d len=%d", v13, v9, v8, a3);
        v18 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          sub_1006D1900();
      }
      v11 = 406;
    }
    if (sub_10005549C())
    {
      sub_100054530("sendDataPacket failed");
      v19 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        sub_1006D17C4();
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("MTU=%d", (unsigned __int16)v7[22]);
      v12 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1006D19D0();
    }
    return 142;
  }
  return v11;
}

uint64_t sub_100117374(int a1, char *a2, size_t a3)
{
  uint64_t v6;
  __int16 *v7;
  int v8;
  NSObject *v9;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int16 v15;
  NSObject *v16;
  uint64_t v17;

  v6 = 0;
  while (1)
  {
    v7 = &word_100980878[v6];
    v8 = (unsigned __int16)word_100980878[v6 + 1];
    if ((v8 | ((unsigned __int16)word_100980878[v6] << 16)) == a1)
      break;
    v6 += 36;
    if (v6 == 1080)
    {
      if (sub_10005549C())
      {
        sub_100054530("Invalid handle %x", a1);
        v9 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 414;
    }
  }
  if ((unsigned __int16)v7[22] >= a3)
  {
    v12 = sub_1000EA93C((uint64_t)&unk_1009810E8, 30, v8);
    if (v12)
    {
      v13 = v12;
      v14 = sub_1000EA3C0(word_100980878[v6], v7[1], (int *)&word_100980878[v6 + 2], 4, a3);
      v17 = 0;
      v15 = *((_WORD *)v14 + 1);
      LOWORD(v17) = *((_WORD *)v14 + 5);
      WORD1(v17) = v15;
      sub_1000532A8((uint64_t)(v14 + 1), 2u);
      sub_10005336C((unsigned __int8 *)v14 + 16, (char *)&v17, 4uLL, 0);
      sub_10005336C((unsigned __int8 *)v14 + 16, a2, a3, 0);
      *((_QWORD *)v14 + 17) = a2;
      *((_QWORD *)v14 + 19) = v13;
      return sub_1000EA4C4((unsigned __int16 *)v14, (uint64_t)sub_1001175B8);
    }
    else
    {
      if (sub_10005549C())
      {
        sub_100054530("BT_AAP_Client_SendUnstallableData channel not found: addr=%: cid=%d sid=%d len=%d", &word_100980878[v6 + 2], (unsigned __int16)v7[1], (unsigned __int16)word_100980878[v6], a3);
        v16 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          sub_1006D1900();
      }
      return 406;
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("MTU=%d", (unsigned __int16)v7[22]);
      v11 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1006D19D0();
    }
    return 142;
  }
}

void sub_1001175B8(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 *v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  void (*v13)(void);
  uint8_t buf[4];
  void *v15;

  if (!a2)
    sub_100253460();
  v7 = *(unsigned __int16 **)(a2 + 8);
  if (!v7)
    sub_100253460();
  v8 = v7[5];
  switch(v8)
  {
    case 2:
      if (sub_10005549C())
      {
        sub_100054530("l2capWriteCfm: BT_AAP_DISCONNECT_REQ");
        v11 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v15 = sub_100054494();
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      break;
    case 3:
      if (sub_10005549C())
      {
        sub_100054530("BT_AAP_DISCONNECT_RSP from l2capWriteCfm for cid=%d, result=%d", a1, a4);
        v10 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v15 = sub_100054494();
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      sub_100118274(v7[1], *v7, a4);
      break;
    case 4:
      v9 = 0;
      while (((unsigned __int16)word_100980878[v9 + 1] | ((unsigned __int16)word_100980878[v9] << 16)) != *(_DWORD *)v7)
      {
        v9 += 36;
        if (v9 == 1080)
          return;
      }
      v12 = *(_QWORD *)&word_100980878[v9 + 8];
      if (v12)
      {
        v13 = *(void (**)(void))(v12 + 24);
        if (v13)
          v13();
      }
      break;
  }
}

uint64_t sub_1001177C0(uint64_t result, int a2, int a3)
{
  int v3;
  uint64_t v4;

  v3 = a3 | (a2 << 16);
  if (v3)
  {
    v4 = 0;
    while (((unsigned __int16)word_100980878[v4 + 1] | ((unsigned __int16)word_100980878[v4] << 16)) != v3)
    {
      v4 += 36;
      if (v4 == 1080)
        return result;
    }
    word_100980878[v4 + 22] = result;
  }
  return result;
}

uint64_t sub_100117804(uint64_t a1, __int16 a2, uint64_t a3, unsigned __int16 *a4, int *a5)
{
  uint64_t i;
  BOOL v11;
  __int16 *v12;
  __int16 *v13;
  _OWORD *v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v22;
  int v23;
  int v24;
  _OWORD v25[2];

  for (i = 0; i != 1080; i += 36)
  {
    v11 = *(_DWORD *)&word_100980878[i + 2] == *(_DWORD *)a1 && word_100980878[i + 4] == *(_WORD *)(a1 + 4);
    if (v11 && word_100980878[i] == *(_WORD *)(a3 + 8))
      return 133;
  }
  v12 = sub_100115FF4((int *)a1, 0, a3);
  if (v12)
  {
    v13 = v12;
    v14 = sub_1000EA260();
    v15 = sub_1000EA284();
    v16 = v14[1];
    v25[0] = *v14;
    v25[1] = v16;
    v17 = sub_1001DC9B8(a2, (uint64_t)v25, a1, (uint64_t)sub_100117A48, (uint64_t)sub_100117AB4, (uint64_t)sub_1001162A4, a4, (uint64_t)v15);
    if ((_DWORD)v17)
    {
      v18 = v17;
      if (sub_10005549C())
      {
        sub_100054530("BT_AAP_Client_FastConnect error creating AAP signaling");
        v19 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
LABEL_13:
          sub_1006CE7A4();
      }
    }
    else
    {
      *(_QWORD *)&v25[0] = 0;
      v18 = sub_1001DB044(*a4, (uint64_t *)v25);
      if ((_DWORD)v18 || !sub_1001E3CCC(*(int **)&v25[0]))
      {
        if (sub_10005549C())
        {
          sub_100054530("Can't find channel %d", (_DWORD)a4);
          v22 = sub_1000544A0(0x52u);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            goto LABEL_13;
        }
      }
      else
      {
        *((_BYTE *)v13 + 24) = 4;
        v13[22] = *(_WORD *)(sub_1001E3CCC(*(int **)&v25[0]) + 32) - 4;
        v23 = *a4;
        v13[1] = v23;
        v24 = *(unsigned __int16 *)(a3 + 8);
        *v13 = v24;
        *a5 = v23 | (v24 << 16);
        return sub_1000EA78C(word_1009810E8, 0x1Eu, *a4, 0);
      }
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("allocateConnection failed");
      v20 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        sub_1006D1968();
    }
    return 104;
  }
  return v18;
}

double sub_100117A48(unsigned int a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4;

  v4 = a4;
  if (!(_DWORD)a4)
  {
    v4 = sub_1000EA78C(word_1009810E8, 0x1Eu, a1, 0);
    if ((_DWORD)v4)
      sub_1001DEB7C(a1, 436);
  }
  return sub_100118830(a1, a2, a3, v4);
}

void sub_100117AB4(int a1, uint64_t a2)
{
  NSObject *v4;
  uint8_t buf[4];
  void *v6;

  if (sub_10005549C())
  {
    sub_100054530("l2capDisconnectInd from aap_client cid=%d reason=%d", a1, a2);
    v4 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v6 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  sub_1000EA840((uint64_t)word_1009810E8, 30, a1);
  sub_100118B78(a1, a2);
}

void sub_100117BA4(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t i;
  __int16 *v8;
  _BYTE buf[24];

  if (sub_10005549C())
  {
    sub_100054530("BT_AAP_Client_cleanFastConnect cid=%d", a2);
    v4 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  sub_1000EA840((uint64_t)word_1009810E8, 30, a2);
  if (a2)
  {
    *(_QWORD *)buf = 0;
    if (!sub_1001DB044(a2, (uint64_t *)buf))
    {
      if (*(_QWORD *)buf)
      {
        sub_1001DC658(*(uint64_t *)buf);
        v5 = sub_10019AEA4(a1);
        if (v5)
        {
          sub_100186150(v5);
        }
        else if (sub_10005549C())
        {
          sub_100054530("BT_AAP_Client_cleanFastConnectAAP NULL Handle");
          v6 = sub_1000544A0(0x52u);
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
      }
    }
  }
  for (i = 0; i != 1080; i += 36)
  {
    v8 = &word_100980878[i];
    if (*(_DWORD *)&word_100980878[i + 2] == *(_DWORD *)a1 && word_100980878[i + 4] == *(_WORD *)(a1 + 4))
    {
      *((_QWORD *)v8 + 8) = 0;
      *((_OWORD *)v8 + 2) = 0uLL;
      *((_OWORD *)v8 + 3) = 0uLL;
      *(_OWORD *)v8 = 0uLL;
      *((_OWORD *)v8 + 1) = 0uLL;
    }
  }
}

uint64_t sub_100117D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  __int16 *v8;
  __int16 *v9;
  void *v10;
  void *v11;
  uint64_t result;
  uint64_t (**v13)(uint64_t, uint64_t);
  uint64_t (*v14)(uint64_t, uint64_t);
  NSObject *v15;
  NSObject *v16;

  if (sub_10005549C())
  {
    sub_100054530("l2capConnectInd (%:, %d)", a2, a3);
    v5 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  v6 = &dword_100000004;
  do
  {
    if (*(_DWORD *)((char *)word_100980878 + v6) == *(_DWORD *)a2
      && *(__int16 *)((char *)&word_100980878[2] + v6) == *(_WORD *)(a2 + 4))
    {
      if (sub_10005549C())
      {
        sub_100054530("l2capConnectInd already (%:, %d)", a2, a3);
        v15 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return sub_1001DDCAC(0, 0, 0, a3, 0, 0, 0);
    }
    v6 += 72;
  }
  while (v6 != 2164);
  v8 = sub_100115FF4((int *)a2, a3, (uint64_t)&xmmword_1009813C0);
  if (!v8)
  {
    if (sub_10005549C())
    {
      sub_100054530("allocateConnection failed");
      v16 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_1006D1968();
    }
    return sub_1001DDCAC(0, 0, 0, a3, 0, 0, 0);
  }
  v9 = v8;
  *((_BYTE *)v8 + 24) = 2;
  v10 = sub_1000EA260();
  v11 = sub_1000EA284();
  result = sub_1001DDCAC((uint64_t)sub_100117A48, (uint64_t)sub_100117AB4, (uint64_t)sub_1001162A4, a3, (uint64_t)v10, 1, (uint64_t)v11);
  v13 = (uint64_t (**)(uint64_t, uint64_t))*((_QWORD *)v9 + 2);
  if (v13)
  {
    v14 = *v13;
    if (v14)
      return v14(a2, a3);
  }
  return result;
}

void sub_100117F1C(__int16 a1, int a2)
{
  uint64_t v3;
  __int16 *v4;
  NSObject *v5;
  unsigned int *v6;
  int v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  const void *v11[2];

  v3 = 0;
  v10 = 0;
  v11[0] = 0;
  while (1)
  {
    v4 = &word_100980878[v3];
    if (((unsigned __int16)word_100980878[v3 + 1] | ((unsigned __int16)word_100980878[v3] << 16)) == a2)
      break;
    v3 += 36;
    if (v3 == 1080)
    {
      if (sub_10005549C())
      {
        sub_100054530("AAPConnectSetTimeout: No AAP connection associated with handle %d", a2);
        v5 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return;
    }
  }
  LODWORD(v10) = a2;
  WORD2(v10) = a1;
  v11[1] = &v10;
  LOWORD(v11[0]) = 8;
  v6 = (unsigned int *)(v4 + 30);
  v7 = sub_10004AE90((uint64_t)sub_100118054, v11, (int *)v4 + 15);
  if (v7)
  {
    v8 = v7;
    if (sub_10005549C())
    {
      sub_100054530("AAPConnectSetTimeout: Error registering timeout handler for handle %d status %d", a2, v8);
      v9 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  else if (sub_1002537E8(*v6, 60))
  {
    sub_1001181D0(a2);
  }
}

void sub_100118054(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  int v4;
  __int16 *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;

  v1 = 0;
  v2 = *(unsigned int **)(a1 + 8);
  v3 = *v2;
  v4 = *((unsigned __int16 *)v2 + 2);
  do
  {
    v5 = &word_100980878[v1];
    if (((unsigned __int16)word_100980878[v1 + 1] | ((unsigned __int16)word_100980878[v1] << 16)) == (_DWORD)v3)
    {
      *((_DWORD *)v5 + 15) = 0;
      if (sub_10005549C())
      {
        sub_100054530("AAP connection timeout for cmd %d, handle %d", v4, v3);
        v7 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      if (v4 == 2)
      {
        sub_100118274((unsigned __int16)*v5, (unsigned __int16)v5[1], 3571);
        return;
      }
      if (v4)
        return;
      if (LOBYTE(word_100980878[v1 + 12]) == 3)
      {
        sub_100115DC0(v3);
        return;
      }
      if (sub_10005549C())
      {
        sub_100054530("False AAP connection timeout for handle %d state %d", v3, LOBYTE(word_100980878[v1 + 12]));
        v8 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          goto LABEL_17;
      }
      return;
    }
    v1 += 36;
  }
  while (v1 != 1080);
  if (sub_10005549C())
  {
    sub_100054530("AAP connection timeout for unknown handle %d", v3);
    v6 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
LABEL_17:
      sub_1006CE7A4();
  }
}

void sub_1001181D0(int a1)
{
  uint64_t i;
  __int16 *v3;
  NSObject *v4;

  for (i = 0; i != 1080; i += 36)
  {
    v3 = &word_100980878[i];
    if (((unsigned __int16)word_100980878[i + 1] | ((unsigned __int16)word_100980878[i] << 16)) == a1)
    {
      sub_100049F6C(*((unsigned int *)v3 + 15));
      *((_DWORD *)v3 + 15) = 0;
      return;
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("AAPConnectCancelTimeout: No AAP connection associated with handle %d", a1);
    v4 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

void sub_100118274(int a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  void (*v14)(__int16 *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v15;
  NSObject *v16;
  void *v17;
  uint8_t buf[4];
  void *v19;

  v6 = 0;
  v7 = a2 | (a1 << 16);
  if ((_DWORD)a3)
    v8 = a3;
  else
    v8 = 114;
  do
  {
    v9 = &word_100980878[v6];
    if ((unsigned __int16)word_100980878[v6] == a1 && (unsigned __int16)v9[1] == a2)
    {
      if (sub_10005549C())
      {
        sub_100054530("disconnectRspCleanup result %d handle %d state %d", a3, v7, LOBYTE(word_100980878[v6 + 12]));
        v10 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v11 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          v19 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      v12 = *(_QWORD *)&word_100980878[v6 + 8];
      if (LOBYTE(word_100980878[v6 + 12]) == 4)
      {
        if (!v12)
        {
LABEL_16:
          *((_QWORD *)v9 + 8) = 0;
          *((_OWORD *)v9 + 2) = 0u;
          *((_OWORD *)v9 + 3) = 0u;
          *(_OWORD *)v9 = 0u;
          *((_OWORD *)v9 + 1) = 0u;
          goto LABEL_17;
        }
        v13 = *(void (**)(uint64_t, uint64_t))(v12 + 16);
        if (v13)
        {
          v13(v7, a3);
          goto LABEL_16;
        }
      }
      else if (!v12)
      {
        goto LABEL_16;
      }
      v14 = *(void (**)(__int16 *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v12 + 8);
      if (v14)
        v14(&word_100980878[v6 + 2], v8, 0, 0, 0, 0, 0);
      goto LABEL_16;
    }
LABEL_17:
    v6 += 36;
  }
  while (v6 != 1080);
  v15 = 0;
  while (!*(_QWORD *)&word_100980878[v15 + 8] || (unsigned __int16)word_100980878[v15 + 1] != a2)
  {
    v15 += 36;
    if (v15 == 1080)
    {
      sub_1001184C8();
      return;
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("scheduleIdleChannelCleanup from disconnectRspCleanup for cid=%d result=%d", a2, a3);
    v16 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v19 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  sub_1001187B4();
}

void sub_1001184C8()
{
  NSObject *v0;
  uint64_t i;
  __int16 *v2;
  int v3;
  unsigned __int16 *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  unsigned int v8;
  int v9;
  NSObject *v10;
  void *v11;
  int v12;
  NSObject *v13;
  void *v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  int v18;

  if (sub_10005549C())
  {
    sub_100054530("idleChannelCleanupCB");
    v0 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v16 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  for (i = 0; i != 30; ++i)
  {
    v2 = &word_100980878[12 * i];
    v3 = (unsigned __int16)v2[1080];
    if (v2[1080])
    {
      v4 = (unsigned __int16 *)(v2 + 1080);
      v5 = &_mh_execute_header.magic + 2;
      while (*(unsigned __int16 *)((char *)word_100980878 + v5) != v3)
      {
        v5 += 72;
        if (v5 == 2162)
        {
          if (sub_10005549C())
          {
            sub_100054530("Connection CID=%d is going down", *v4);
            v6 = sub_1000544A0(0x52u);
            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
            {
              v7 = sub_100054494();
              *(_DWORD *)buf = 136446210;
              v16 = v7;
              _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
          v8 = *v4;
          if (LOBYTE(word_100980878[12 * i + 1081]))
            v9 = sub_1001DEE88(v8);
          else
            v9 = sub_1001DEB7C(v8, 436);
          v12 = v9;
          sub_1000EA840((uint64_t)&unk_1009810E8, 30, *v4);
          if (v12 && sub_10005549C())
          {
            sub_100054530("Failed to disconnect L2CAP Channel");
            v13 = sub_1000544A0(0x52u);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              v14 = sub_100054494();
              *(_DWORD *)buf = 136446466;
              v16 = v14;
              v17 = 1024;
              v18 = v12;
              _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
            }
          }
          goto LABEL_22;
        }
      }
      if (sub_10005549C())
      {
        sub_100054530("Channel with CID=%d not idle, still have connection to %: sid=%d cid=%d", v4, &word_100980878[36 * i + 2], (unsigned __int16)word_100980878[36 * i], (unsigned __int16)word_100980878[36 * i + 1]);
        v10 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v11 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          v16 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
    }
LABEL_22:
    ;
  }
}

void sub_1001187B4()
{
  NSObject *v0;

  if (sub_10004A9EC((uint64_t)sub_1001184C8, 0, 50, 0) && sub_10005549C())
  {
    sub_100054530("OI_Dispatch_RegisterTimedFunc failed ");
    v0 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
      sub_1006D17C4();
  }
}

double sub_100118830(unsigned int a1, int a2, int a3, uint64_t a4)
{
  NSObject *v8;
  double result;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  __int16 *v14;
  int v15;
  int v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  __int16 *v21;
  void (*v22)(__int16 *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  int v27;

  if (sub_10005549C())
  {
    sub_100054530("genericL2CAPConnectCompleteCB cid=%x inmtu=%d outmtu=%d result=%d", a1, a2, a3, a4);
    v8 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v25 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v23 = 0;
  if ((_DWORD)a4)
  {
    if (sub_10005549C())
    {
      sub_100054530("l2capConnectCompleteCb failed");
      v10 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1006D17C4();
    }
    v11 = 0;
    while (1)
    {
      v12 = *(_QWORD *)&word_100980878[v11 + 8];
      if (v12)
      {
        if (LOBYTE(word_100980878[v11 + 12]) != 4)
          break;
      }
      v11 += 36;
      if (v11 == 1080)
        return result;
    }
    v21 = &word_100980878[v11];
    v22 = *(void (**)(__int16 *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v12 + 8);
    if (v22)
      v22(v21 + 2, a4, 0, 0, 0, 0, 0);
    *((_QWORD *)v21 + 8) = 0;
    result = 0.0;
    *((_OWORD *)v21 + 2) = 0u;
    *((_OWORD *)v21 + 3) = 0u;
    *(_OWORD *)v21 = 0u;
    *((_OWORD *)v21 + 1) = 0u;
  }
  else
  {
    sub_1001DB044(a1, &v23);
    for (i = 0; i != 1080; i += 36)
    {
      v14 = &word_100980878[i];
      if ((unsigned __int16)word_100980878[i + 1] == a1 && *((_BYTE *)v14 + 24) == 2)
      {
        sub_100049F6C(*(unsigned int *)&word_100980878[i + 32]);
        *((_BYTE *)v14 + 24) = 3;
        v15 = sub_100116064((int *)&word_100980878[i + 2], (unsigned __int16)v14[1], (unsigned __int16)word_100980878[i], (unsigned __int16)word_100980878[i + 24], (unsigned __int16)word_100980878[i + 25], (void **)&word_100980878[i + 26]);
        if (v15)
        {
          v16 = v15;
          if (sub_10005549C())
          {
            sub_100054530("sendConnectReqPacket failed");
            v17 = sub_1000544A0(0x52u);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              v18 = sub_100054494();
              *(_DWORD *)buf = 136446466;
              v25 = v18;
              v26 = 1024;
              v27 = v16;
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
            }
          }
          *((_QWORD *)v14 + 8) = 0;
          *((_OWORD *)v14 + 2) = 0u;
          *((_OWORD *)v14 + 3) = 0u;
          *(_OWORD *)v14 = 0u;
          *((_OWORD *)v14 + 1) = 0u;
        }
      }
    }
    if ((sub_10005549C() & 1) != 0)
    {
      sub_100054530("scheduleIdleChannelCleanup at genericL2CAPConnectCompleteCB");
      v19 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v20 = sub_100054494();
        *(_DWORD *)buf = 136446210;
        v25 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    sub_1001187B4();
  }
  return result;
}

void sub_100118B78(int a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t i;
  __int16 *v6;
  int v7;
  uint64_t v8;
  void (*v9)(_QWORD, uint64_t);
  uint8_t buf[4];
  void *v11;

  if (sub_10005549C())
  {
    sub_100054530("genericL2CAPDisconnectInd cid=%d reason=%d", a1, a2);
    v4 = sub_1000544A0(0x52u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v11 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  for (i = 0; i != 1080; i += 36)
  {
    v6 = &word_100980878[i];
    v7 = (unsigned __int16)word_100980878[i + 1];
    if (v7 == a1)
    {
      if (*((_DWORD *)v6 + 15))
        sub_1001181D0(v7 | ((unsigned __int16)*v6 << 16));
      v8 = *(_QWORD *)&word_100980878[i + 8];
      if (v8)
      {
        v9 = *(void (**)(_QWORD, uint64_t))(v8 + 16);
        if (v9)
          v9(a1 | ((unsigned __int16)*v6 << 16), a2);
      }
      *((_QWORD *)v6 + 8) = 0;
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
      *(_OWORD *)v6 = 0u;
      *((_OWORD *)v6 + 1) = 0u;
    }
  }
}

uint64_t sub_100118CBC(int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int16 v9;
  NSObject *v11;
  __int16 v12;
  uint64_t v13;

  v6 = sub_1000EA93C((uint64_t)&unk_1009810E8, 30, a2);
  if (v6)
  {
    v7 = v6;
    v8 = sub_1000EA3C0(a3, a2, a1, 3, 2);
    v13 = 0;
    v12 = 0;
    v9 = *((_WORD *)v8 + 1);
    LOWORD(v13) = *((_WORD *)v8 + 5);
    WORD1(v13) = v9;
    sub_1000532A8((uint64_t)(v8 + 1), 2u);
    sub_10005336C((unsigned __int8 *)v8 + 16, (char *)&v13, 4uLL, 2u);
    sub_10005336C((unsigned __int8 *)v8 + 16, (char *)&v12, *((unsigned __int16 *)v8 + 64), 2u);
    *((_QWORD *)v8 + 19) = v7;
    return sub_1000EA510((uint64_t)v8, (uint64_t)sub_1001175B8);
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("sendDisconnectRspPacket channel not found: addr=%: cid=%d sid=%d result=%d", a1, a2, a3, 0);
      v11 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1006D1900();
    }
    return 406;
  }
}

void sub_100118E20(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  void *v17;
  NSObject *v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  int v22;

  v3 = 0;
  while (LOBYTE(word_100980878[v3 + 12]) != 1)
  {
    v3 += 36;
    if (v3 == 1080)
    {
      if (sub_10005549C())
      {
        sub_100054530("No connection Entry for this SDP search resp");
        v4 = sub_1000544A0(0x52u);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return;
    }
  }
  if (!a3)
  {
    if (*(_BYTE *)a1 == 6 && *(_WORD *)(a1 + 2))
    {
      v5 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)v5 == 6)
      {
        if (!*(_WORD *)(v5 + 2))
          goto LABEL_20;
        goto LABEL_27;
      }
      if (*(_WORD *)(v5 + 2) == 4)
      {
LABEL_27:
        v9 = *(_QWORD *)(v5 + 8);
        v10 = *(unsigned __int16 *)(v9 + 8);
        v11 = 1;
        if (v10 == 4)
        {
LABEL_28:
          word_100980878[v3 + 21] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16 * v11 + 8) + 8) + 24);
          if (sub_10005549C())
          {
            sub_100054530("Got data PSM (0x%x)\n", (unsigned __int16)word_100980878[v3 + 21]);
            v12 = sub_1000544A0(0x52u);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              v13 = sub_100054494();
              *(_DWORD *)buf = 136446210;
              v20 = v13;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
          if (v10 == 4)
            goto LABEL_20;
        }
        else
        {
          v14 = 40;
          while (1)
          {
            if (sub_10005549C())
            {
              sub_100054530("Unknown attribute");
              v15 = sub_1000544A0(0x52u);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
              {
                v17 = sub_100054494();
                *(_DWORD *)buf = 136446466;
                v20 = v17;
                v21 = 1024;
                v22 = 0xFFFF;
                _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
              }
            }
            if (v11 + 1 >= (unint64_t)*(unsigned __int16 *)(v5 + 2))
              break;
            v9 = *(_QWORD *)(v5 + 8);
            v16 = *(unsigned __int16 *)(v9 + v14);
            v11 += 2;
            v14 += 32;
            if (v16 == 4)
              goto LABEL_28;
          }
        }
        goto LABEL_16;
      }
      if (!sub_10005549C()
        || (sub_100054530("SDP response is not a sequence or has wrong number of elements\n"),
            v18 = sub_1000544A0(0x52u),
            !os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)))
      {
LABEL_16:
        if (sub_10005549C())
        {
          sub_100054530("Didn't find what we were looking for, zap PSM's to prevent AAP connections when SDP disconnect completes");
          v7 = sub_1000544A0(0x52u);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        word_100980878[v3 + 21] = 0;
        goto LABEL_20;
      }
    }
    else
    {
      if (!sub_10005549C())
        goto LABEL_16;
      sub_100054530("SDP search response has no responses, failing connection");
      v6 = sub_1000544A0(0x52u);
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
    }
    sub_1006CE7A4();
    goto LABEL_16;
  }
LABEL_20:
  if (sub_100244A44())
  {
    if (sub_10005549C())
    {
      sub_100054530("SDP Disconnect failed, clearing PSM");
      v8 = sub_1000544A0(0x52u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    word_100980878[v3 + 21] = 0;
  }
}

FILE *sub_10011920C(uint64_t a1, uint64_t a2)
{
  FILE *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  FILE *v12;
  int v13;
  int v14;
  char __filename[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  *(_OWORD *)__filename = 0u;
  v16 = 0u;
  if (sub_100119340((unsigned __int8 *)a1, __filename))
    return 0;
  result = fopen(__filename, "r");
  if (result)
  {
    v12 = result;
    sub_100253320((uint64_t)"link key request: retrieving stored key for %:\n", v5, v6, v7, v8, v9, v10, v11, a1);
    v13 = fread((void *)(a2 + 6), 1uLL, 0x10uLL, v12);
    fread((void *)(a2 + 24), 4uLL, 1uLL, v12);
    fclose(v12);
    if (v13 == 16)
    {
      v14 = *(_DWORD *)a1;
      *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 4);
      *(_DWORD *)a2 = v14;
      return (FILE *)1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_100119340(unsigned __int8 *a1, char *a2)
{
  char *v4;
  uint64_t result;

  v4 = getenv("HOME");
  if (v4)
  {
    snprintf(a2, 0x1FFuLL, "%s/Library/Preferences/Bluetooth/%02X-%02X-%02X-%02X-%02X-%02X.key", v4, *a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
    result = 0;
    a2[511] = 0;
  }
  else
  {
    fwrite("GetFilenameFromAddress: $HOME not set\n", 0x26uLL, 1uLL, __stderrp);
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_1001193E4(unsigned __int8 *a1, const void *a2, int a3)
{
  uint64_t result;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::error_code *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  FILE *v22;
  int __ptr;
  _BYTE __p[512];
  _OWORD __s[32];

  __ptr = a3;
  memset(__s, 0, sizeof(__s));
  memset(__p, 0, sizeof(__p));
  result = sub_100119340(a1, __p);
  if (!(_DWORD)result)
  {
    __strlcpy_chk(__s, __p, 512, 512);
    v6 = strrchr((char *)__s, 47);
    if (v6)
      *v6 = 0;
    if (mkdir((const char *)__s, 0x1EDu))
    {
      if (*__error() != 17)
        return fprintf(__stderrp, "OI_LinkKeyStorage_WriteKey: could not create directory %s\n", (const char *)__s);
    }
    else
    {
      sub_100253320((uint64_t)"OI_LinkKeyStorage_WriteKey: created directory %s\n", v7, v8, v9, v10, v11, v12, v13, (uint64_t)__s);
    }
    result = remove((const std::__fs::filesystem::path *)__p, v14);
    if (a2)
    {
      result = (uint64_t)fopen(__p, "w");
      if (result)
      {
        v22 = (FILE *)result;
        sub_100253320((uint64_t)"new link key created for %:\n", v15, v16, v17, v18, v19, v20, v21, (uint64_t)a1);
        fwrite(a2, 1uLL, 0x10uLL, v22);
        fwrite(&__ptr, 4uLL, 1uLL, v22);
        return fclose(v22);
      }
    }
  }
  return result;
}

unsigned __int16 *sub_1001195C0(int a1)
{
  uint64_t v1;
  unsigned __int16 *v2;
  NSObject *v3;

  v1 = 0;
  while (1)
  {
    v2 = (unsigned __int16 *)qword_1009813F0[v1];
    if (v2)
    {
      if (*v2 == a1)
        break;
    }
    if (++v1 == 16)
    {
      if (sub_10005549C())
      {
        sub_100054530("GetContextByRfcommHandle - context not found");
        v3 = sub_1000544A0(0x18u);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 0;
    }
  }
  return v2;
}

uint64_t sub_10011964C(int a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;

  v1 = 0;
  while (1)
  {
    v2 = qword_1009813F0[v1];
    if (v2)
    {
      if (*(unsigned __int8 *)(v2 + 194) == a1)
        break;
    }
    if (++v1 == 16)
    {
      if (sub_10005549C())
      {
        sub_100054530("getContextByRfcommChannel - context not found");
        v3 = sub_1000544A0(0x18u);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 0;
    }
  }
  return v2;
}

void sub_1001196D8(int a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0;
  while (1)
  {
    v2 = qword_1009813F0[v1];
    if (v2)
    {
      if (*(unsigned __int8 *)(v2 + 194) == a1)
        break;
    }
    if (++v1 == 16)
    {
      sub_100253460();
      return;
    }
  }
  sub_100053298((void *)qword_1009813F0[v1]);
  qword_1009813F0[v1] = 0;
}

unsigned __int16 *sub_100119734(int a1)
{
  uint64_t v1;
  unsigned __int16 *v2;
  NSObject *v3;

  v1 = 0;
  while (1)
  {
    v2 = (unsigned __int16 *)qword_1009813F0[v1];
    if (v2)
    {
      if (*v2 == a1)
        break;
    }
    if (++v1 == 16)
    {
      if (sub_10005549C())
      {
        sub_100054530("GetConnectionByCid - context not found");
        v3 = sub_1000544A0(0x18u);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 0;
    }
  }
  return v2;
}

uint64_t sub_1001197C0(int a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;

  v1 = 0;
  while (1)
  {
    v2 = qword_1009813F0[v1];
    if (v2)
    {
      if (*(unsigned __int16 *)(v2 + 196) == a1)
        break;
    }
    if (++v1 == 16)
    {
      if (sub_10005549C())
      {
        sub_100054530("GetConnectionByPsm - context not found");
        v3 = sub_1000544A0(0x18u);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 0;
    }
  }
  return v2;
}

void sub_10011984C(int a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0;
  while (1)
  {
    v2 = qword_1009813F0[v1];
    if (v2)
    {
      if (*(unsigned __int16 *)(v2 + 196) == a1)
        break;
    }
    if (++v1 == 16)
    {
      sub_100253460();
      return;
    }
  }
  sub_100053298((void *)qword_1009813F0[v1]);
  qword_1009813F0[v1] = 0;
}

uint64_t sub_1001198A8(uint64_t a1)
{
  uint64_t i;
  NSObject *v3;
  uint64_t result;

  for (i = 0; i != 16; ++i)
  {
    if (!qword_1009813F0[i])
    {
      result = 0;
      qword_1009813F0[i] = a1;
      *(_WORD *)(a1 + 208) = i;
      return result;
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("No more OBEX handles available!");
    v3 = sub_1000544A0(0x18u);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  return 104;
}

uint64_t sub_100119938(unsigned int a1)
{
  if (a1 >= 0x10)
    sub_100253460();
  return qword_1009813F0[a1];
}

void sub_10011996C(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t);
  uint64_t v10;
  uint64_t v11;

  if (a1)
  {
    *(_QWORD *)(a1 + 40) = 0;
    sub_100254090(a2);
    if ((_DWORD)a3)
    {
      if (sub_10005549C())
      {
        sub_100054530("OBEX server RFCOMM write error %! - disconnecting", a3);
        v5 = sub_1000544A0(0x18u);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
LABEL_22:
      sub_10011A92C((unsigned __int16 *)a1, 0);
    }
    else
    {
      if (*(_DWORD *)(a1 + 32) == 2)
        sub_100119B70(a1);
      switch(*(_DWORD *)(a1 + 204))
      {
        case 4:
          v7 = *(void **)(a1 + 64);
          if (v7)
          {
            sub_100053298(v7);
            *(_QWORD *)(a1 + 64) = 0;
          }
          *(_DWORD *)(a1 + 204) = 5;
          v8 = *(unsigned int *)(a1 + 176);
          if ((_DWORD)v8)
          {
            sub_100049F6C(v8);
            *(_DWORD *)(a1 + 176) = 0;
          }
          break;
        case 7:
          if ((*(_BYTE *)(a1 + 80) & 0xFE) == 0x48)
          {
            v9 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) + 16);
            v10 = *(unsigned __int16 *)(a1 + 208);
            v11 = 1701;
            goto LABEL_25;
          }
          *(_DWORD *)(a1 + 204) = 5;
          v9 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) + 16);
          goto LABEL_24;
        case 9:
          *(_DWORD *)(a1 + 204) = 5;
          v9 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) + 24);
LABEL_24:
          v10 = *(unsigned __int16 *)(a1 + 208);
          v11 = 0;
LABEL_25:
          v9(v10, 0, v11);
          break;
        case 0xB:
          if (*(_BYTE *)(a1 + 192))
            goto LABEL_22;
          *(_DWORD *)(a1 + 204) = 2;
          *(_BYTE *)(a1 + 201) = 0;
          (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) + 8))(*(unsigned __int16 *)(a1 + 208));
          break;
        default:
          return;
      }
    }
  }
  else if (sub_10005549C())
  {
    sub_100054530("Write confirmation for bogus link %x %!", &link, a3);
    v6 = sub_1000544A0(0x18u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

void sub_100119B70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int16 v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t *v10;
  void (**v11)(_QWORD, _QWORD, uint64_t);
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  unsigned int v17;
  void (*v18)(_QWORD, _QWORD, uint64_t);
  char v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  NSObject *v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t (*v29)(_QWORD, void **, uint64_t);
  uint64_t v30;
  int v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  unsigned __int8 *v39;
  NSObject *v40;
  char v41;
  NSObject *v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  NSObject *v48;
  unsigned __int8 *v49;
  NSObject *v50;
  uint64_t v51;
  NSObject *v52;
  unsigned __int8 *v53;
  const void **v54;
  uint64_t v55;
  NSObject *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  void *v59;
  char v60;
  int v61;
  _BYTE *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v68;
  NSObject *v69;
  NSObject *v70;
  NSObject *v71;
  uint64_t v72;
  void *ptr;
  uint64_t v74;

  if (*(_DWORD *)(a1 + 32) != 2)
    sub_100253460();
  if (*(_BYTE *)(a1 + 31))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/obex/obexsrv_common.c", 1200, "void HandleRequestPkt(OBEXSRV_CONNECTION *)");
    goto LABEL_228;
  }
  v2 = *(unsigned __int16 *)(a1 + 26);
  v3 = *(unsigned __int16 *)(a1 + 28);
  if (v2 <= v3 || *(_BYTE *)(a1 + 30) != 1)
LABEL_228:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/obex/obexsrv_common.c");
  v4 = *(_QWORD *)(a1 + 16);
  *(_WORD *)(a1 + 28) = v3 + 1;
  if (v2 - (unint64_t)(unsigned __int16)(v3 + 1) <= 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/obex/obexsrv_common.c");
  v5 = *(unsigned __int8 *)(v4 + v3);
  v6 = v3 + 3;
  *(_WORD *)(a1 + 28) = v3 + 3;
  v7 = *(_DWORD *)(a1 + 204);
  if (v7 == 2 && (v5 & 0x7F) != 0)
  {
    if (sub_10005549C())
    {
      sub_100054530("Received invalid command after OBEX disconnect. Terminating underlying transport.");
      v8 = sub_1000544A0(0x18u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_10011A92C((unsigned __int16 *)a1, 0);
    return;
  }
  v9 = 1717;
  v10 = (uint64_t *)(a1 + 16);
  switch(v5 | 0x80)
  {
    case 0x80:
      ptr = 0;
      v74 = 0;
      if (v7 != 11 && v7 != 2)
      {
        v9 = 1715;
        goto LABEL_83;
      }
      if (v2 <= v6)
      {
        v13 = 0;
        LOBYTE(v12) = 0;
        *(_BYTE *)(a1 + 31) = 1;
      }
      else
      {
        *(_WORD *)(a1 + 28) = v3 + 4;
        v12 = *(unsigned __int8 *)(v4 + (unsigned __int16)(v3 + 3));
        v13 = v12 >> 4;
        if (v12 >> 4 == 1)
        {
          if (v2 <= (unsigned __int16)(v3 + 4))
          {
            *(_BYTE *)(a1 + 31) = 1;
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/obex/obexsrv_common.c", 603, "OI_STATUS ConnectCommand(OBEXSRV_CONNECTION *, uint8_t)");
          }
          else
          {
            *(_WORD *)(a1 + 28) = v3 + 5;
            if (*(_BYTE *)(v4 + (unsigned __int16)(v3 + 4)))
            {
              v9 = 1702;
              goto LABEL_83;
            }
            if ((int)(v2 - (unsigned __int16)(v3 + 5)) > 1)
            {
              v45 = __rev16(*(unsigned __int16 *)(v4 + (unsigned __int16)(v3 + 5)));
              *(_WORD *)(a1 + 28) = v3 + 7;
              v46 = *(_DWORD *)(a1 + 4);
              if (v46)
              {
                if (v46 != 1)
                {
                  v47 = *(unsigned __int16 *)(a1 + 76);
LABEL_176:
                  if (v47 <= 0xC7)
                  {
                    if (sub_10005549C())
                    {
                      sub_100054530("OBEX Server connect - packet size too small %d", *(unsigned __int16 *)(a1 + 76));
                      v50 = sub_1000544A0(0x18u);
                      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
                        sub_1006CE7A4();
                    }
                    v9 = 1736;
                    goto LABEL_83;
                  }
                  v51 = sub_100167C6C((uint64_t)&ptr, v10);
                  if ((_DWORD)v51)
                  {
                    v9 = v51;
                    if (!sub_10005549C())
                      goto LABEL_83;
                    sub_100054530("OI_OBEXCOMMON_ParseHeaderList failed!");
                    v52 = sub_1000544A0(0x18u);
                    if (!os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
                      goto LABEL_83;
                    goto LABEL_215;
                  }
                  v53 = sub_100167C40((unsigned __int8 **)&ptr, 70);
                  if (v53)
                    v54 = (const void **)(v53 + 8);
                  else
                    v54 = 0;
                  v55 = sub_10011A9F4(a1, v54);
                  if ((_DWORD)v55)
                  {
                    v9 = v55;
                    if (!sub_10005549C())
                      goto LABEL_83;
                    sub_100054530("No matching server target was found");
                    v56 = sub_1000544A0(0x18u);
                    if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
                      goto LABEL_83;
                    goto LABEL_215;
                  }
                  v57 = sub_100167C40((unsigned __int8 **)&ptr, 77);
                  if (v57)
                  {
                    v58 = (uint64_t)v57;
                    if (!*(_QWORD *)(a1 + 64))
                    {
                      v59 = sub_100114588(0x9BuLL);
                      *(_QWORD *)(a1 + 64) = v59;
                      if (!v59)
                      {
                        if (!sub_10005549C())
                          goto LABEL_222;
                        sub_100054530("OBEX server could not allocate authentication state");
                        v70 = sub_1000544A0(0x18u);
                        if (!os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
                          goto LABEL_222;
                        goto LABEL_221;
                      }
                    }
                    sub_10016582C(a1, v58);
                    v60 = 1;
                  }
                  else
                  {
                    v60 = 0;
                  }
                  *(_BYTE *)(a1 + 200) = v60;
                  v61 = *(_DWORD *)(*(_QWORD *)(a1 + 168) + 24);
                  if (!v61)
                  {
                    v65 = 0;
                    v66 = 0;
                    *(_BYTE *)(a1 + 56) = 0;
                    *(_BYTE *)(a1 + 199) = 0;
                    goto LABEL_209;
                  }
                  *(_BYTE *)(a1 + 56) = 1;
                  *(_BYTE *)(a1 + 199) = 1;
                  v62 = *(_BYTE **)(a1 + 64);
                  if (v62)
                  {
LABEL_201:
                    if (v61 == 2)
                      v62[59] = 1;
                    if (*(unsigned __int8 *)(a1 + 193) >= 3u)
                      goto LABEL_207;
                    v63 = sub_100167C40((unsigned __int8 **)&ptr, 78);
                    if (!v63)
                    {
                      v68 = *(unsigned __int8 *)(a1 + 199);
                      *(_DWORD *)(a1 + 204) = 3;
                      if (v68)
                      {
                        v9 = sub_10011B27C(*(unsigned __int16 *)(a1 + 208), 1, 0);
                        if (!(_DWORD)v9)
                          goto LABEL_133;
                        if (!sub_10005549C())
                          goto LABEL_83;
                        sub_100054530("OBEX server could not accept connection");
                        v69 = sub_1000544A0(0x18u);
                        if (!os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
                          goto LABEL_83;
LABEL_215:
                        sub_1006CE7A4();
                        goto LABEL_83;
                      }
                      v65 = 0;
                      v66 = 0;
LABEL_210:
                      ++*(_BYTE *)(a1 + 193);
                      v67 = sub_100167C40((unsigned __int8 **)&ptr, 76);
                      *(_BYTE *)(a1 + 201) = 1;
                      (**(void (***)(_QWORD, _QWORD, uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)(a1 + 168) + 16))(*(unsigned __int16 *)(a1 + 208), *(unsigned __int8 *)(a1 + 200) | *(unsigned __int8 *)(a1 + 199), v66, v65, v67);
                      v9 = 0;
LABEL_92:
                      if (ptr)
                        sub_100053298(ptr);
                      goto LABEL_133;
                    }
                    sub_100165900(a1, (uint64_t)v63);
                    v64 = *(_QWORD *)(a1 + 64);
                    v65 = *(unsigned __int8 *)(v64 + 58);
                    if (*(_BYTE *)(v64 + 59) && !*(_BYTE *)(v64 + 58))
                    {
LABEL_207:
                      sub_100165760(a1);
                      v9 = 1735;
                      goto LABEL_83;
                    }
                    v72 = v64 + 38;
                    if ((_DWORD)v65)
                      v66 = v72;
                    else
                      v66 = 0;
LABEL_209:
                    *(_DWORD *)(a1 + 204) = 3;
                    goto LABEL_210;
                  }
                  v62 = sub_100114588(0x9BuLL);
                  *(_QWORD *)(a1 + 64) = v62;
                  if (v62)
                  {
                    v61 = *(_DWORD *)(*(_QWORD *)(a1 + 168) + 24);
                    goto LABEL_201;
                  }
                  if (!sub_10005549C()
                    || (sub_100054530("OBEX server could not allocate authentication state"),
                        v71 = sub_1000544A0(0x18u),
                        !os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)))
                  {
LABEL_222:
                    v9 = 0;
LABEL_83:
                    if (sub_10005549C())
                    {
                      sub_100054530("ConnectCommand error %!", v9);
                      v33 = sub_1000544A0(0x18u);
                      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
                        sub_1006CE7A4();
                    }
                    v34 = sub_10011B360(*(unsigned __int16 *)(a1 + 208), 0, v9);
                    if ((_DWORD)v34)
                    {
                      v35 = v34;
                      if (sub_10005549C())
                      {
                        sub_100054530("OBEX server failed to accept connection %!", v35);
                        v36 = sub_1000544A0(0x18u);
                        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
                          sub_1006CE7A4();
                      }
                    }
                    v37 = *(void **)(a1 + 64);
                    if (v37)
                    {
                      sub_100053298(v37);
                      *(_QWORD *)(a1 + 64) = 0;
                    }
                    goto LABEL_92;
                  }
LABEL_221:
                  sub_1006CE7A4();
                  goto LABEL_222;
                }
                v47 = *(unsigned __int16 *)(a1 + 76);
                if (v47 <= v45)
                  goto LABEL_176;
              }
              *(_WORD *)(a1 + 76) = v45;
              v47 = v45;
              goto LABEL_176;
            }
          }
          *(_BYTE *)(a1 + 31) = 1;
          v9 = 1707;
          goto LABEL_83;
        }
      }
      if (sub_10005549C())
      {
        sub_100054530("OBEX Server connect - version mismatch %d.%d", v13, v12 & 0xF);
        v32 = sub_1000544A0(0x18u);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      v9 = 1718;
      goto LABEL_83;
    case 0x81:
      *(_DWORD *)(a1 + 204) = 11;
      v14 = sub_10011ACEC(a1, 160);
      if (!(_DWORD)v14)
      {
        *(_DWORD *)(a1 + 32) = 0;
        return;
      }
      v9 = v14;
      if (sub_10005549C())
      {
        sub_100054530("OI_OBEXCOMMON_SendOk failed %!", v9);
        v15 = sub_1000544A0(0x18u);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      sub_10011A92C((unsigned __int16 *)a1, 0);
LABEL_31:
      *(_DWORD *)(a1 + 32) = 0;
      goto LABEL_134;
    case 0x82:
      ptr = 0;
      v74 = 0;
      v9 = sub_100167C6C((uint64_t)&ptr, v10);
      if ((_DWORD)v9)
        goto LABEL_33;
      v27 = *(_DWORD *)(a1 + 204);
      if (v27 == 8)
        goto LABEL_71;
      if (v27 != 5)
      {
        v9 = 1711;
        goto LABEL_33;
      }
      if (!*(_BYTE *)(a1 + 120))
        goto LABEL_70;
      v28 = sub_100167C40((unsigned __int8 **)&ptr, 203);
      if (v28)
      {
        if (*((_DWORD *)v28 + 2) == (_DWORD)a1)
        {
LABEL_70:
          *(_DWORD *)(a1 + 204) = 8;
LABEL_71:
          v29 = *(uint64_t (**)(_QWORD, void **, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) + 24);
          if (v29)
          {
            if ((v5 & 0x80u) == 0)
              v30 = 1701;
            else
              v30 = 0;
            v31 = v29(*(unsigned __int16 *)(a1 + 208), &ptr, v30);
            if (v31)
              goto LABEL_147;
            goto LABEL_148;
          }
        }
        v9 = 1715;
      }
      else
      {
        v9 = 1714;
      }
LABEL_33:
      if (sub_10005549C())
      {
        sub_100054530("PutCommand error %!", v9);
        v16 = sub_1000544A0(0x18u);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      if (ptr)
      {
        sub_100053298(ptr);
        ptr = 0;
      }
      v17 = *(_DWORD *)(a1 + 204);
      if (v17 > 9 || ((1 << v17) & 0x320) == 0)
        goto LABEL_132;
      v18 = *(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) + 24);
      if (!v18)
        goto LABEL_42;
      goto LABEL_41;
    case 0x83:
      ptr = 0;
      v74 = 0;
      if (v7 == 5)
      {
        *(_DWORD *)(a1 + 204) = 6;
      }
      else if ((v7 & 0xFFFFFFFE) != 6)
      {
        v9 = 1711;
        goto LABEL_101;
      }
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) + 16))
      {
        v9 = 1715;
        goto LABEL_101;
      }
      v25 = sub_100167C6C((uint64_t)&ptr, v10);
      if (!(_DWORD)v25)
      {
        if (sub_100167C40((unsigned __int8 **)&ptr, 152) && *(_DWORD *)(a1 + 4) != 1)
          sub_100253460();
        if (v7 != 5)
        {
          if ((*(_BYTE *)(a1 + 80) & 0xFE) == 0x48)
          {
            v9 = sub_10011AFD8(a1);
            if (!(_DWORD)v9)
              goto LABEL_148;
            goto LABEL_101;
          }
LABEL_143:
          if ((v5 & 0x80u) == 0)
            v43 = 1752;
          else
            v43 = 1701;
          v31 = (*(uint64_t (**)(_QWORD, void **, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) + 16))(*(unsigned __int16 *)(a1 + 208), &ptr, v43);
          if (v31)
          {
LABEL_147:
            *(_DWORD *)(a1 + 204) = 5;
            v44 = sub_10011B1D4(v31);
            sub_10011ACEC(a1, v44);
          }
          goto LABEL_148;
        }
        if (!sub_100167C40((unsigned __int8 **)&ptr, 1) && !sub_100167C40((unsigned __int8 **)&ptr, 66))
        {
          v9 = 1714;
          goto LABEL_101;
        }
        if (*(_BYTE *)(a1 + 120))
        {
          v39 = sub_100167C40((unsigned __int8 **)&ptr, 203);
          if (v39)
          {
            if (*((_DWORD *)v39 + 2) == (_DWORD)a1)
              goto LABEL_119;
            v9 = 1715;
          }
          else
          {
            v9 = 1714;
          }
          if (sub_10005549C())
          {
            sub_100054530("VerifyConnectionId failed %!", v9);
            v48 = sub_1000544A0(0x18u);
            if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
              goto LABEL_62;
          }
          goto LABEL_101;
        }
LABEL_119:
        if (sub_100167C40((unsigned __int8 **)&ptr, 151) && *(_DWORD *)(a1 + 4) != 1)
          sub_100253460();
        *(_BYTE *)(a1 + 80) = 0;
        goto LABEL_143;
      }
      v9 = v25;
      if (sub_10005549C())
      {
        sub_100054530("OI_OBEXCOMMON_ParseHeaderList failed %!", v9);
        v26 = sub_1000544A0(0x18u);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
LABEL_62:
          sub_1006CE7A4();
      }
LABEL_101:
      if (sub_10005549C())
      {
        sub_100054530("OBEX get command error %!", v9);
        v38 = sub_1000544A0(0x18u);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      if (ptr)
      {
        sub_100053298(ptr);
        ptr = 0;
      }
      if ((*(_DWORD *)(a1 + 204) - 5) <= 2)
      {
        v18 = *(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) + 16);
        if (v18)
LABEL_41:
          v18(*(unsigned __int16 *)(a1 + 208), 0, v9);
LABEL_42:
        *(_DWORD *)(a1 + 204) = 5;
      }
LABEL_132:
      v41 = sub_10011B1D4(v9);
      sub_10011ACEC(a1, v41);
LABEL_133:
      *(_DWORD *)(a1 + 32) = 0;
      if ((_DWORD)v9)
      {
LABEL_134:
        if (sub_10005549C())
        {
          sub_100054530("OBEX request error %!", v9);
          v42 = sub_1000544A0(0x18u);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
      }
      return;
    case 0x84:
      goto LABEL_31;
    case 0x85:
      ptr = 0;
      v74 = 0;
      if (v7 != 5)
      {
        v9 = 1711;
        goto LABEL_125;
      }
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) + 32))
        goto LABEL_109;
      if (v2 <= v6)
      {
        *(_BYTE *)(a1 + 31) = 1;
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/obex/obexsrv_common.c", 902, "OI_STATUS SetPathCommand(OBEXSRV_CONNECTION *)");
      }
      else
      {
        *(_WORD *)(a1 + 28) = v3 + 4;
        if (v2 > (unsigned __int16)(v3 + 4))
        {
          v19 = *(_BYTE *)(v4 + (unsigned __int16)(v3 + 3));
          *(_WORD *)(a1 + 28) = v3 + 5;
          v9 = sub_100167C6C((uint64_t)&ptr, v10);
          if ((_DWORD)v9)
            goto LABEL_125;
          if (*(_BYTE *)(a1 + 120))
          {
            v20 = sub_100167C40((unsigned __int8 **)&ptr, 203);
            if (!v20)
            {
              v9 = 1714;
LABEL_125:
              if (sub_10005549C())
              {
                sub_100054530("SetPathCommand error %!", v9);
                v40 = sub_1000544A0(0x18u);
                if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
                  sub_1006CE7A4();
              }
              if (*(_DWORD *)(a1 + 204) == 10)
                *(_DWORD *)(a1 + 204) = 5;
              if (ptr)
              {
                sub_100053298(ptr);
                ptr = 0;
              }
              goto LABEL_132;
            }
            if (*((_DWORD *)v20 + 2) != (_DWORD)a1)
            {
LABEL_109:
              v9 = 1715;
              goto LABEL_125;
            }
          }
          v21 = sub_100167C40((unsigned __int8 **)&ptr, 1);
          if (v21)
          {
            v23 = *((unsigned __int16 *)v21 + 4);
            v22 = v21 + 8;
            if (v23)
              v24 = v22;
            else
              v24 = 0;
          }
          else
          {
            v24 = 0;
          }
          if (v24 || (v19 & 2) != 0)
          {
            if ((v24 == 0) | v19 & 1)
              v49 = 0;
            else
              v49 = v24;
            *(_DWORD *)(a1 + 204) = 10;
            v9 = (*(uint64_t (**)(_QWORD, unsigned __int8 *, _QWORD, BOOL))(*(_QWORD *)(*(_QWORD *)(a1 + 168)
                                                                                                + 16)
                                                                                    + 32))(*(unsigned __int16 *)(a1 + 208), v49, v19 & 1, (v19 & 2) == 0);
            if (!(_DWORD)v9)
            {
LABEL_148:
              if (ptr)
                sub_100053298(ptr);
              v9 = 0;
              goto LABEL_133;
            }
          }
          else
          {
            v9 = 1736;
          }
          goto LABEL_125;
        }
      }
      *(_BYTE *)(a1 + 31) = 1;
      v9 = 1721;
      goto LABEL_125;
    case 0x86:
    case 0x87:
      sub_10011ACEC(a1, 209);
      v9 = 1717;
      goto LABEL_31;
    default:
      if ((v5 | 0x80) != 0xFF)
        goto LABEL_31;
      if ((v7 - 6) < 2)
      {
        *(_DWORD *)(a1 + 204) = 5;
        v11 = (void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) + 16);
      }
      else
      {
        if ((v7 - 8) > 1)
          goto LABEL_96;
        *(_DWORD *)(a1 + 204) = 5;
        v11 = (void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) + 24);
      }
      (*v11)(*(unsigned __int16 *)(a1 + 208), 0, 1719);
LABEL_96:
      if (*(_DWORD *)(a1 + 4) == 1)
        sub_100251314(*(_QWORD *)(a1 + 112));
      v9 = sub_10011ACEC(a1, 160);
      goto LABEL_133;
  }
}

uint64_t sub_10011A92C(unsigned __int16 *a1, char a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;

  v4 = *((_DWORD *)a1 + 1);
  if (v4 == 1)
  {
    v5 = sub_1001DEB7C(*a1, 436);
  }
  else
  {
    if (v4)
    {
      v6 = 101;
      goto LABEL_9;
    }
    v5 = sub_10023EEBC(*a1, 926);
  }
  v6 = v5;
  if (!(_DWORD)v5)
  {
    if ((a2 & 1) != 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_9:
  if (sub_10005549C())
  {
    sub_100054530("DisconnectTransport failed with %! for transport %!", v6, *((unsigned int *)a1 + 1));
    v7 = sub_1000544A0(0x18u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
LABEL_12:
  sub_10011AB40((uint64_t)a1);
LABEL_13:
  *((_DWORD *)a1 + 51) = 0;
  return v6;
}

uint64_t sub_10011A9F4(uint64_t a1, const void **a2)
{
  unsigned __int16 *v4;
  size_t v5;
  int v6;
  uint64_t result;

  *(_BYTE *)(a1 + 120) = a2 != 0;
  v4 = (unsigned __int16 *)(a1 + 128);
  while (1)
  {
    v5 = *v4;
    if (a2)
      break;
    if (!*v4)
      goto LABEL_11;
LABEL_9:
    v4 = (unsigned __int16 *)*((_QWORD *)v4 + 4);
    if (!v4)
      return 1715;
  }
  v6 = *(unsigned __int16 *)a2;
  if (v6 == (_DWORD)v5)
  {
    if (!memcmp(a2[1], *((const void **)v4 + 1), v5))
      goto LABEL_11;
    goto LABEL_9;
  }
  if (v6 | v5)
    goto LABEL_9;
LABEL_11:
  result = 0;
  *(_QWORD *)(a1 + 168) = v4;
  return result;
}

uint64_t sub_10011AA7C(unsigned __int16 *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;

  v2 = *((_DWORD *)a1 + 1);
  if (v2 == 1)
  {
    v3 = sub_1002599CC((uint64_t)a1);
LABEL_5:
    v4 = v3;
    if (!(_DWORD)v3)
      return v4;
    goto LABEL_8;
  }
  if (!v2)
  {
    v3 = sub_10023E63C((uint64_t)sub_100168388, *a1, *((_QWORD *)a1 + 5));
    goto LABEL_5;
  }
  v4 = 101;
LABEL_8:
  if (sub_10005549C())
  {
    sub_100054530("ServerSendPacket failed with %! for transport type %d", v4, *((unsigned int *)a1 + 1));
    v5 = sub_1000544A0(0x18u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  sub_100254090(*((void **)a1 + 5));
  *((_QWORD *)a1 + 5) = 0;
  return v4;
}

void sub_10011AB40(uint64_t a1)
{
  int v2;
  uint64_t v3;
  void (**v4)(_QWORD, _QWORD, uint64_t);
  void *v5;
  void *v6;

  v2 = *(_DWORD *)(a1 + 204);
  *(_DWORD *)(a1 + 204) = 0;
  *(_BYTE *)(a1 + 193) = 0;
  *(_BYTE *)(a1 + 198) = 0;
  v3 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v3)
  {
    sub_100049F6C(v3);
    *(_DWORD *)(a1 + 176) = 0;
  }
  if ((v2 - 6) < 2)
  {
    v4 = (void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) + 16);
  }
  else
  {
    if ((v2 - 8) > 1)
      goto LABEL_8;
    v4 = (void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) + 24);
  }
  (*v4)(*(unsigned __int16 *)(a1 + 208), 0, 1709);
LABEL_8:
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    sub_100053298(v5);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    sub_100053298(v6);
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (*(_BYTE *)(a1 + 201))
  {
    *(_BYTE *)(a1 + 201) = 0;
    (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 168) + 16) + 8))(*(unsigned __int16 *)(a1 + 208));
  }
}

void sub_10011AC0C(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;

  if (a1)
  {
    v4 = sub_1001678EC(a1, a2, a3);
    if ((_DWORD)v4)
    {
      v5 = v4;
      if (sub_10005549C())
      {
        sub_100054530("OI_OBEXCOMMON_ReassemblePacket failed %!", v5);
        v6 = sub_1000544A0(0x18u);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
LABEL_5:
          sub_1006CE7A4();
      }
    }
    else if (*(_DWORD *)(a1 + 32) == 2 && !*(_QWORD *)(a1 + 40))
    {
      sub_100119B70(a1);
    }
  }
  else if (sub_10005549C())
  {
    sub_100054530("OBEX received data for unknown connection");
    v7 = sub_1000544A0(0x18u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
  }
}

uint64_t sub_10011ACEC(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_1001678B8(a1, a2, (uint64_t)v10);
  v3 = sub_1001671E4(a1, (uint64_t)v10, (unsigned __int8 *)&v7, 0, 0);
  if (!(_DWORD)v3)
    return sub_10011AA7C(a1);
  v4 = v3;
  if (sub_10005549C())
  {
    sub_100054530("Marshalling packet failed with %!", v4, v7, v8, v9);
    v5 = sub_1000544A0(0x18u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  return v4;
}

uint64_t sub_10011AD98(unsigned int a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  char v13;
  _QWORD v15[2];

  LODWORD(v3) = a3;
  if (a1 >= 0x10)
    sub_100253460();
  v6 = qword_1009813F0[a1];
  if (!v6)
    return 101;
  if (*(_DWORD *)(v6 + 204) == 6)
  {
    v15[0] = 0;
    v15[1] = 0;
    if ((_DWORD)v3 == 1701)
    {
      v7 = -112;
    }
    else
    {
      if ((_DWORD)v3)
      {
        v8 = 0;
LABEL_21:
        *(_DWORD *)(v6 + 204) = 5;
        v13 = sub_10011B1D4(v3);
        sub_10011ACEC(v6, v13);
        return v8;
      }
      *(_DWORD *)(v6 + 204) = 7;
      v7 = -96;
    }
    sub_1001678B8(v6, v7, (uint64_t)v15);
    v9 = sub_1001671E4(v6, (uint64_t)v15, 0, 0, a2);
    if ((_DWORD)v9)
    {
      v8 = v9;
      if (sub_10005549C())
      {
        sub_100054530("OI_OBEXCOMMON_MarshalPacket failed with status %!", v8);
        v10 = sub_1000544A0(0x18u);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
    else
    {
      v11 = sub_10011AA7C((unsigned __int16 *)v6);
      if (!(_DWORD)v11)
        return 0;
      v3 = v11;
      if (sub_10005549C())
      {
        sub_100054530("OI_OBEXSRV_GetResponse failed %!", v3);
        v12 = sub_1000544A0(0x18u);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      v8 = v3;
    }
    goto LABEL_21;
  }
  return 1711;
}

uint64_t sub_10011AF20(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  char v5;

  if (a1 >= 0x10)
    sub_100253460();
  v2 = qword_1009813F0[a1];
  v3 = sub_10011AFD8(v2);
  if ((_DWORD)v3)
  {
    if (sub_10005549C())
    {
      sub_100054530("OBEX continue get command error %!", v3);
      v4 = sub_1000544A0(0x18u);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    *(_DWORD *)(v2 + 204) = 5;
    v5 = sub_10011B1D4(v3);
    sub_10011ACEC(v2, v5);
  }
  return v3;
}

uint64_t sub_10011AFD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;

  v2 = sub_100167828(a1);
  if (!(_DWORD)v2)
    return sub_10011AA7C(a1);
  v3 = v2;
  if (sub_10005549C())
  {
    sub_100054530("OI_OBEXCOMMON_MarshalBodySegment failed %!", v3);
    v4 = sub_1000544A0(0x18u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  return v3;
}

uint64_t sub_10011B064(unsigned int a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  char v11;
  _QWORD v13[2];

  LODWORD(v3) = a3;
  if (a1 >= 0x10)
    sub_100253460();
  v6 = qword_1009813F0[a1];
  if (!v6)
    return 101;
  if (*(_DWORD *)(v6 + 204) == 8)
  {
    v13[0] = 0;
    v13[1] = 0;
    if ((_DWORD)v3 != 1750)
    {
      if ((_DWORD)v3 == 1701)
      {
        v7 = -112;
        if (!a2)
          goto LABEL_15;
        goto LABEL_13;
      }
      if ((_DWORD)v3)
      {
        v8 = 0;
LABEL_22:
        *(_DWORD *)(v6 + 204) = 5;
        v11 = sub_10011B1D4(v3);
        sub_10011ACEC(v6, v11);
        return v8;
      }
    }
    *(_DWORD *)(v6 + 204) = 9;
    v7 = sub_10011B1D4(v3);
    if (!a2)
    {
      *(_DWORD *)(v6 + 204) = 5;
LABEL_15:
      v9 = sub_10011ACEC(v6, v7);
      goto LABEL_16;
    }
LABEL_13:
    sub_1001678B8(v6, v7, (uint64_t)v13);
    v3 = sub_1001671E4(v6, (uint64_t)v13, 0, 0, a2);
    if ((_DWORD)v3)
    {
LABEL_17:
      if (sub_10005549C())
      {
        sub_100054530("OI_OBEXSRV_PutResponse failed %!", v3);
        v10 = sub_1000544A0(0x18u);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      v8 = v3;
      goto LABEL_22;
    }
    v9 = sub_10011AA7C((unsigned __int16 *)v6);
LABEL_16:
    v3 = v9;
    if (!(_DWORD)v9)
      return 0;
    goto LABEL_17;
  }
  return 1711;
}

uint64_t sub_10011B1D4(int a1)
{
  uint64_t result;

  switch(a1)
  {
    case 1707:
    case 1714:
    case 1718:
    case 1720:
    case 1721:
      result = 192;
      break;
    case 1708:
      result = 203;
      break;
    case 1709:
    case 1710:
    case 1712:
    case 1713:
    case 1716:
    case 1719:
    case 1722:
    case 1723:
    case 1725:
    case 1726:
    case 1727:
    case 1728:
    case 1729:
    case 1730:
    case 1731:
    case 1732:
    case 1733:
    case 1734:
    case 1737:
    case 1738:
    case 1739:
    case 1740:
    case 1744:
    case 1745:
    case 1748:
      goto LABEL_7;
    case 1711:
    case 1735:
      result = 195;
      break;
    case 1715:
      result = 211;
      break;
    case 1717:
    case 1743:
      result = 209;
      break;
    case 1724:
      result = 196;
      break;
    case 1736:
      result = 198;
      break;
    case 1741:
      result = 204;
      break;
    case 1742:
      result = 193;
      break;
    case 1746:
      result = 224;
      break;
    case 1747:
      result = 225;
      break;
    case 1749:
      result = 207;
      break;
    case 1750:
      result = 166;
      break;
    case 1751:
      result = 197;
      break;
    default:
      if (a1)
LABEL_7:
        result = 208;
      else
        result = 160;
      break;
  }
  return result;
}

uint64_t sub_10011B27C(unsigned int a1, int a2, int a3)
{
  uint64_t v6;
  NSObject *v7;

  if (!dword_1009991A8)
    return 103;
  if (a1 >= 0x10)
    sub_100253460();
  v6 = qword_1009813F0[a1];
  if (!v6 || *(_DWORD *)(v6 + 204) != 3)
    return 1745;
  if ((a3 == 0) == a2)
    return sub_10011B360(a1, a2, a3);
  if (sub_10005549C())
  {
    sub_100054530("Invalid combination of accept and status");
    v7 = sub_1000544A0(0x18u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  return 101;
}

uint64_t sub_10011B360(unsigned int a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  if (a1 >= 0x10)
    sub_100253460();
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0;
  v18 = 0;
  v6 = qword_1009813F0[a1];
  if (a2)
  {
    if (*(_BYTE *)(v6 + 199))
    {
      *(_DWORD *)(v6 + 204) = 2;
      v7 = sub_100252DE8(0x18u);
      sub_100165AD8(*(char **)(v7 + 16), v6, (uint64_t)&v19);
      v8 = -63;
      v9 = 1;
    }
    else
    {
      *(_DWORD *)(v6 + 204) = 4;
      if (*(_BYTE *)(v6 + 120))
      {
        LOBYTE(v19) = -53;
        DWORD2(v19) = v6;
        BYTE8(v20) = 74;
        v16 = *(_QWORD *)(v6 + 168);
        LOWORD(v21) = *(_WORD *)v16;
        *((_QWORD *)&v21 + 1) = *(_QWORD *)(v16 + 8);
        v9 = 2;
      }
      else
      {
        v9 = 0;
      }
      if (*(_BYTE *)(v6 + 200))
      {
        sub_1001659F0(v6, (uint64_t)&v19 + 24 * v9);
        v8 = -96;
        v9 |= 1u;
      }
      else
      {
        v8 = -96;
      }
    }
  }
  else
  {
    *(_DWORD *)(v6 + 204) = 2;
    v8 = sub_10011B1D4(a3);
    v9 = 0;
  }
  sub_1001678B8(v6, v8, (uint64_t)&v17);
  if (HIBYTE(v18))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/obex/obexsrv_common.c", 534, "OI_STATUS AcceptConnect(OI_OBEXSRV_CONNECTION_HANDLE, _Bool, OI_STATUS)");
    goto LABEL_31;
  }
  v10 = WORD2(v18);
  if (WORD1(v18) <= WORD2(v18) || BYTE6(v18) != 2)
LABEL_31:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/obex/obexsrv_common.c");
  ++WORD2(v18);
  *(_BYTE *)(v17 + v10) = 16;
  if (HIBYTE(v18))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/obex/obexsrv_common.c", 535, "OI_STATUS AcceptConnect(OI_OBEXSRV_CONNECTION_HANDLE, _Bool, OI_STATUS)");
    goto LABEL_33;
  }
  v11 = WORD2(v18);
  if (WORD1(v18) <= WORD2(v18) || BYTE6(v18) != 2)
LABEL_33:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/obex/obexsrv_common.c");
  ++WORD2(v18);
  *(_BYTE *)(v17 + v11) = 0;
  if (HIBYTE(v18))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/obex/obexsrv_common.c", 536, "OI_STATUS AcceptConnect(OI_OBEXSRV_CONNECTION_HANDLE, _Bool, OI_STATUS)");
    goto LABEL_35;
  }
  if (WORD1(v18) - WORD2(v18) <= 1 || BYTE6(v18) != 2)
LABEL_35:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/obex/obexsrv_common.c");
  *(_BYTE *)(v17 + WORD2(v18) + 1) = *(_BYTE *)(v6 + 74);
  *(_BYTE *)(v17 + WORD2(v18)) = *(_BYTE *)(v6 + 75);
  WORD2(v18) += 2;
  v12 = sub_1001671E4(v6, (uint64_t)&v17, (unsigned __int8 *)&v19, v9, 0);
  if ((_DWORD)v12 || (v12 = sub_10011AA7C((unsigned __int16 *)v6), (_DWORD)v12))
  {
    if (sub_10005549C())
    {
      sub_100054530("acceptConnect error %!", v12);
      v13 = sub_1000544A0(0x18u);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    *(_DWORD *)(v6 + 204) = 2;
    v14 = *(void **)(v6 + 64);
    if (v14)
    {
      sub_100053298(v14);
      *(_QWORD *)(v6 + 64) = 0;
    }
  }
  return v12;
}

uint64_t sub_10011B6DC(unsigned int a1, const void *a2, unsigned int a3, char *a4, char a5)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v18;
  const void *v19[2];

  if (!dword_1009991A8)
    return 103;
  if (a1 >= 0x10)
    sub_100253460();
  v10 = qword_1009813F0[a1];
  v18 = v10;
  if (!v10 || *(_DWORD *)(v10 + 204) != 3 || !*(_BYTE *)(v10 + 199) && !*(_BYTE *)(v10 + 200))
    return 1745;
  v19[0] = 0;
  if (a4)
    v11 = a4;
  else
    v11 = (char *)&unk_10073948D;
  *(_BYTE *)(v10 + 57) = a5;
  v12 = sub_100165784(v10, a2, a3, v11);
  if (!(_DWORD)v12)
  {
    if (!*(_BYTE *)(v10 + 199))
      goto LABEL_26;
    if (!sub_100165BD8(v10))
    {
      *(_BYTE *)(v10 + 199) = 0;
      v19[1] = &v18;
      LOWORD(v19[0]) = 8;
      sub_10004AE90((uint64_t)sub_10011B8D4, v19, 0);
      return 0;
    }
    if (*(unsigned __int8 *)(v10 + 193) > 2u)
    {
      v12 = 1735;
    }
    else
    {
LABEL_26:
      v12 = sub_10011B27C(a1, 1, 0);
      if (!(_DWORD)v12)
        return v12;
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("OI_OBEXSRV_AuthenticationRsp error %!", v12, v18, v19[0]);
    v13 = sub_1000544A0(0x18u);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  v14 = sub_10011B360(a1, 0, v12);
  if ((_DWORD)v14)
  {
    v15 = v14;
    if (sub_10005549C())
    {
      sub_100054530("OI_OBEXSRV_AuthenticationRsp: Failure to send error response %!", v15);
      v16 = sub_1000544A0(0x18u);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  *(_DWORD *)(v10 + 204) = 2;
  sub_100165760(v10);
  return v12;
}

uint64_t sub_10011B8D4(uint64_t a1)
{
  uint64_t v1;

  v1 = **(_QWORD **)(a1 + 8);
  if (*(_BYTE *)(v1 + 199))
    sub_100253460();
  *(_BYTE *)(v1 + 201) = 1;
  return (**(uint64_t (***)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 168) + 16))(*(unsigned __int16 *)(v1 + 208), 0, 0, 0, 0);
}

uint64_t sub_10011B928(unsigned int a1, int a2)
{
  uint64_t v4;
  char v5;

  if (a1 >= 0x10)
    sub_100253460();
  v4 = qword_1009813F0[a1];
  if (!v4 || *(_DWORD *)(v4 + 204) != 10)
    return 1745;
  *(_DWORD *)(v4 + 204) = 5;
  if (!a2)
    return sub_10011ACEC(v4, 160);
  v5 = sub_10011B1D4(a2);
  sub_10011ACEC(v4, v5);
  return 0;
}

uint64_t sub_10011B9B0(unsigned int a1)
{
  uint64_t v2;

  if (a1 >= 0x10)
    sub_100253460();
  v2 = qword_1009813F0[a1];
  if (v2)
  {
    if (*(_DWORD *)(v2 + 204) >= 3u)
      LOWORD(v2) = *(_WORD *)(v2 + 76) - 6;
    else
      LOWORD(v2) = 0;
  }
  return (unsigned __int16)v2;
}

uint64_t sub_10011BA08(unsigned int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;

  if (a1 >= 0x10)
    sub_100253460();
  v4 = qword_1009813F0[a1];
  if (!v4)
    return 1709;
  result = 0;
  v6 = *(_DWORD *)(v4 + 104);
  *(_WORD *)(a2 + 4) = *(_WORD *)(v4 + 108);
  *(_DWORD *)a2 = v6;
  return result;
}

uint64_t sub_10011BA60(unsigned int a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t result;

  if (a1 >= 0x10)
    sub_100253460();
  v4 = qword_1009813F0[a1];
  if (!v4)
    return 1709;
  result = 0;
  *a2 = *(_DWORD *)(v4 + 4);
  return result;
}

uint64_t sub_10011BAB0(unsigned int a1)
{
  uint64_t v2;
  NSObject *v4;

  if (a1 >= 0x10)
    sub_100253460();
  v2 = qword_1009813F0[a1];
  if (!v2)
    return 101;
  if (*(_DWORD *)(v2 + 204))
  {
    *(_BYTE *)(v2 + 198) = 1;
    return sub_10011A92C((unsigned __int16 *)v2, 1);
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("Service is registered but not connected!");
      v4 = sub_1000544A0(0x18u);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 1709;
  }
}

void sub_10011BB54(char a1, char a2, char a3, int a4, int a5, char a6, char a7, char a8, char a9, char a10)
{
  _QWORD v18[4];
  int v19;
  int v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  if (qword_100981638 != -1)
    dispatch_once(&qword_100981638, &stru_10091AF10);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 0x40000000;
  v18[2] = sub_10011BC44;
  v18[3] = &unk_10091ADF8;
  v21 = a1;
  v22 = a2;
  v19 = a4;
  v20 = a5;
  v23 = a6;
  v24 = a7;
  v25 = a8;
  v26 = a9;
  v27 = a10;
  v28 = a3;
  dispatch_sync((dispatch_queue_t)qword_100981630, v18);
}

void sub_10011BC44(uint64_t a1)
{
  NSObject *v2;
  _BOOL4 v3;
  _DWORD *v4;
  _DWORD *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  int v11;
  int v12;
  const char *v13;
  const char *v14;
  const char *v15;
  int v16;
  const char *v17;
  const char *v18;
  const char *v19;
  int v20;
  const char *v21;
  const char *v22;
  const char *v23;
  int v24;
  int v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  const char *v60;

  v2 = qword_100981470;
  v3 = os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT);
  v4 = (_DWORD *)&unk_100978000;
  v5 = (_DWORD *)&unk_100978000;
  if (v3)
  {
    v6 = "enabled";
    if (byte_100981478)
      v7 = "enabled";
    else
      v7 = "disabled";
    if (*(_BYTE *)(a1 + 40))
      v8 = "enabled";
    else
      v8 = "disabled";
    if (byte_100981479)
      v9 = "enabled";
    else
      v9 = "disabled";
    if (*(_BYTE *)(a1 + 41))
      v10 = "enabled";
    else
      v10 = "disabled";
    v11 = *(_DWORD *)(a1 + 36);
    v12 = *(_DWORD *)(a1 + 32) / 1000000;
    if (byte_10098147A)
      v13 = "enabled";
    else
      v13 = "disabled";
    if (*(_BYTE *)(a1 + 42))
      v14 = "enabled";
    else
      v14 = "disabled";
    if (byte_10098147B)
      v15 = "enabled";
    else
      v15 = "disabled";
    v16 = *(unsigned __int8 *)(a1 + 45);
    if (*(_BYTE *)(a1 + 43))
      v17 = "enabled";
    else
      v17 = "disabled";
    if (byte_10098147C)
      v18 = "enabled";
    else
      v18 = "disabled";
    if (*(_BYTE *)(a1 + 44))
      v19 = "enabled";
    else
      v19 = "disabled";
    v20 = *(unsigned __int8 *)(a1 + 46);
    if (byte_10098147D)
      v21 = "enabled";
    else
      v21 = "disabled";
    v25 = 136319490;
    if (v16)
      v22 = "enabled";
    else
      v22 = "disabled";
    v26 = v7;
    v27 = 2080;
    if (byte_10098147E)
      v23 = "enabled";
    else
      v23 = "disabled";
    v28 = v8;
    if (!v20)
      v6 = "disabled";
    v29 = 2080;
    v30 = v9;
    v31 = 2080;
    v32 = v10;
    v33 = 1024;
    v34 = dword_100978AF8 / 1000000;
    v35 = 1024;
    v36 = v12;
    v37 = 1024;
    v38 = dword_100978AFC;
    v39 = 1024;
    v40 = v11;
    v41 = 2080;
    v42 = v13;
    v43 = 2080;
    v44 = v14;
    v45 = 2080;
    v46 = v15;
    v47 = 2080;
    v48 = v17;
    v49 = 2080;
    v50 = v18;
    v51 = 2080;
    v52 = v19;
    v53 = 2080;
    v54 = v21;
    v55 = 2080;
    v56 = v22;
    v57 = 2080;
    v58 = v23;
    v59 = 2080;
    v60 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Change HCI config settings to rawAudio:%s->%s HID:%s->%s fileSize:%dMB->%dMB #ofTraces:%d->%d liveHCI:%s->%s fileHCI:%s->%s audioTimeSync:%s->%s gEnableENPacketLogging:%s->%s hciLiteLogging:%s->%s", (uint8_t *)&v25, 0xA6u);
    v5 = &unk_100978000;
    v4 = &unk_100978000;
    v2 = qword_100981470;
  }
  byte_100981478 = *(_BYTE *)(a1 + 40);
  byte_100981479 = *(_BYTE *)(a1 + 41);
  byte_10098147F = *(_BYTE *)(a1 + 47);
  v24 = *(_DWORD *)(a1 + 36);
  v4[702] = *(_DWORD *)(a1 + 32);
  v5[703] = v24;
  byte_10098147A = *(_BYTE *)(a1 + 42);
  byte_10098147B = *(_BYTE *)(a1 + 43);
  byte_10098147C = *(_BYTE *)(a1 + 44);
  byte_10098147D = *(_BYTE *)(a1 + 45);
  byte_10098147E = *(_BYTE *)(a1 + 46);
  sub_100100DE8((uint64_t)v2);
  if (!byte_10098147A)
    sub_10011BF28();
}

void sub_10011BF28()
{
  NSObject *v0;
  NSObject *v1;
  uint8_t v2[16];
  uint8_t buf[16];

  if (qword_100981670 && CFSetGetCount((CFSetRef)qword_100981670) >= 1)
  {
    v0 = qword_100981470;
    if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Terminate Live Logging - lockdown", buf, 2u);
    }
    if (&lockdown_copy_checkin_info)
      CFSetApplyFunction((CFSetRef)qword_100981670, (CFSetApplierFunction)&j__lockdown_disconnect, 0);
    CFRelease((CFTypeRef)qword_100981670);
    qword_100981670 = 0;
    if (off_100981488)
      off_100981488(0);
  }
  if (qword_100981678 && CFSetGetCount((CFSetRef)qword_100981678) >= 1)
  {
    v1 = qword_100981470;
    if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Terminate Live Logging - XPC", v2, 2u);
    }
    CFSetApplyFunction((CFSetRef)qword_100981678, (CFSetApplierFunction)j__xpc_release, 0);
    CFRelease((CFTypeRef)qword_100981678);
    qword_100981678 = 0;
    if (off_100981488)
      off_100981488(0);
  }
}

void sub_10011C06C(int a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  int v5;

  v2 = qword_100981470;
  if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109376;
    v3[1] = byte_100981480;
    v4 = 1024;
    v5 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting skipAuth %d->%d", (uint8_t *)v3, 0xEu);
  }
  byte_100981480 = a1;
}

uint64_t (*sub_10011C128(uint64_t (*result)(_QWORD)))(_QWORD)
{
  off_100981488 = result;
  return result;
}

uint64_t sub_10011C134(uint64_t result)
{
  word_100981490 = result;
  return result;
}

uint64_t sub_10011C140(uint64_t a1)
{
  sub_10011C160(a1, 0, 0);
  return 1;
}

uint64_t sub_10011C160(uint64_t a1, char a2, int a3)
{
  NSObject *v6;
  _QWORD v8[5];
  int v9;
  char v10;
  uint8_t buf[16];

  if (qword_100981638 != -1)
    dispatch_once(&qword_100981638, &stru_10091AF10);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_10011C270;
  v8[3] = &unk_10091AE18;
  v10 = a2;
  v8[4] = a1;
  v9 = a3;
  dispatch_sync((dispatch_queue_t)qword_100981630, v8);
  v6 = qword_100981470;
  if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Watch for calendar changes", buf, 2u);
  }
  if (qword_100981640 != -1)
    dispatch_once(&qword_100981640, &stru_10091AF50);
  return 1;
}

void sub_10011C270(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  std::string::size_type v4;
  sysdir_search_path_enumeration_state started;
  const char *v6;
  const char *v7;
  int v8;
  const char *v9;
  DIR *v10;
  DIR *v11;
  dirent *v12;
  size_t v13;
  const char *d_name;
  std::error_code *v15;
  char v16[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[31];
  std::__fs::filesystem::path buf;
  uint64_t v32;

  v2 = qword_100981470;
  if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
  {
    v3 = " [HCILite Logging]";
    v4 = *(_QWORD *)(a1 + 32);
    if (!*(_BYTE *)(a1 + 44))
      v3 = "[Full Logging]";
    LODWORD(buf.__pn_.__r_.__value_.__l.__data_) = 136446723;
    *(std::string::size_type *)((char *)buf.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    WORD2(buf.__pn_.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__pn_.__r_.__value_.__r.__words[1] + 6) = v4;
    HIWORD(buf.__pn_.__r_.__value_.__r.__words[2]) = 2081;
    v32 = qword_100981498;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Init sniff%{public}s %s gLogPath:%{private}s", (uint8_t *)&buf, 0x20u);
    v2 = qword_100981470;
  }
  sub_100100DE8((uint64_t)v2);
  sub_100100E64(*(_DWORD *)(a1 + 40));
  if (!qword_100981498)
    byte_10098147E = *(_BYTE *)(a1 + 44);
  started = sysdir_start_search_path_enumeration_private(5, 16);
  sysdir_get_next_search_path_enumeration(started, byte_1009814A0);
  v29 = 0u;
  memset(v30, 0, sizeof(v30));
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  *(_OWORD *)v16 = 0u;
  __strlcpy_chk(v16, byte_1009814A0, 255, 255);
  __strlcat_chk(v16, "/Logs", 255, 255);
  __strlcat_chk(byte_1009814A0, "/Logs/Bluetooth", 256, 256);
  if (qword_100981498)
    goto LABEL_10;
  v6 = *(const char **)(a1 + 32);
  if (v6)
  {
    qword_100981498 = (uint64_t)strdup(v6);
LABEL_10:
    sub_10011C5E4();
    return;
  }
  if (mkdir(v16, 0x1EDu) && *__error() != 17)
  {
    if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_ERROR))
      sub_1006D1AE8();
  }
  else
  {
    if (!mkdir(byte_1009814A0, 0x1EDu) || *__error() == 17)
    {
      qword_100981498 = (uint64_t)malloc_type_calloc(0x400uLL, 1uLL, 0x5899BE66uLL);
      __strlcpy_chk(qword_100981498, byte_1009814A0, 1024, 1024);
      if (byte_10098147E)
        v7 = "/bluetoothd-hcilite-latest.pklg";
      else
        v7 = "/bluetoothd-hci-latest.pklg";
      strlcat((char *)qword_100981498, v7, 0x400uLL);
      v8 = byte_10098147E;
      if (byte_10098147E)
        v9 = "bluetoothd-hci-";
      else
        v9 = "bluetoothd-hcilite-";
      bzero(&buf, 0x400uLL);
      chdir(byte_1009814A0);
      v10 = opendir(byte_1009814A0);
      if (v10)
      {
        v11 = v10;
        v12 = readdir(v10);
        if (v12)
        {
          if (v8)
            v13 = 15;
          else
            v13 = 19;
          do
          {
            d_name = v12->d_name;
            if (!strncmp(v12->d_name, v9, v13))
            {
              snprintf((char *)&buf, 0x400uLL, "%s/%s", byte_1009814A0, d_name);
              remove(&buf, v15);
            }
            v12 = readdir(v11);
          }
          while (v12);
        }
        closedir(v11);
      }
      else if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_ERROR))
      {
        sub_1006D1A38();
      }
      goto LABEL_10;
    }
    if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_ERROR))
      sub_1006D1A64();
  }
}

void sub_10011C5E4()
{
  int v0;
  int v1;
  NSObject *v2;

  if (&lockdown_copy_checkin_info)
  {
    if (qword_100981638 != -1)
      dispatch_once(&qword_100981638, &stru_10091AF10);
    v0 = lockdown_checkin_xpc("com.apple.bluetooth.BTPacketLogger", 0, qword_100981630, &stru_10091B010);
    if (v0)
    {
      v1 = v0;
      v2 = qword_100981470;
      if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_ERROR))
        sub_1006D1B68(v1, v2);
    }
  }
  if (!qword_100981680)
  {
    if (qword_100981638 != -1)
      dispatch_once(&qword_100981638, &stru_10091AF10);
    qword_100981680 = (uint64_t)xpc_connection_create_mach_service("com.apple.bluetooth.BTPacketLogger.ios", (dispatch_queue_t)qword_100981630, 1uLL);
    xpc_connection_set_event_handler((xpc_connection_t)qword_100981680, &stru_10091B050);
    xpc_connection_resume((xpc_connection_t)qword_100981680);
  }
}

uint64_t sub_10011C6E4()
{
  if (qword_100981638 != -1)
    dispatch_once(&qword_100981638, &stru_10091AF10);
  dispatch_sync((dispatch_queue_t)qword_100981630, &stru_10091AE58);
  return 1;
}

void sub_10011C734(id a1)
{
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[16];
  uint8_t buf[16];

  v1 = qword_100981470;
  if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Terminate sniff", buf, 2u);
  }
  if (dword_100978B00 != -1)
  {
    close(dword_100978B00);
    dword_100978B00 = -1;
  }
  if (qword_100981498)
  {
    free((void *)qword_100981498);
    qword_100981498 = 0;
  }
  sub_10011BF28();
  v2 = qword_100981470;
  if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sniff terminated", v3, 2u);
  }
}

void sub_10011C804(const char *a1)
{
  size_t v2;
  int v3;
  const char *v4;
  int v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  __int16 v9;
  char *v10;
  char *v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  char *__lasts;

  word_1009815A0 = 0;
  free((void *)qword_1009815A8);
  if (a1)
  {
    v2 = strlen(a1);
    if (v2 <= 0x800)
    {
      if (v2)
      {
        v3 = 1;
        v4 = a1;
        do
        {
          v5 = *(unsigned __int8 *)v4++;
          if (v5 == 10)
            ++v3;
          --v2;
        }
        while (v2);
        v6 = (13 * v3);
      }
      else
      {
        v6 = 13;
      }
      __lasts = 0;
      if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEBUG))
        sub_1006D1BD8();
      v7 = strdup(a1);
      v8 = strlen(a1);
      v9 = v8 + v6;
      qword_1009815A8 = (uint64_t)malloc_type_malloc(v8 + v6, 0xE8B008EBuLL);
      if (qword_1009815A8)
      {
        v10 = strtok_r(v7, "\n", &__lasts);
        if (v10)
        {
          v11 = v10;
          do
          {
            v12 = strlen(v11);
            sub_100048070(v11, v12, 0, 0xFCu);
            v13 = strlen(v11);
            word_1009815A0 += sub_10011C9E4((_BYTE *)(qword_1009815A8 + (unsigned __int16)word_1009815A0), (unsigned __int16)(v9 - word_1009815A0), v11, v13, 0xFCu);
            v11 = strtok_r(0, "\n", &__lasts);
          }
          while (v11);
        }
        free(v7);
        qword_1009815A8 = (uint64_t)malloc_type_realloc((void *)qword_1009815A8, (unsigned __int16)word_1009815A0, 0x769A521FuLL);
      }
      else
      {
        free(v7);
      }
    }
  }
}

void sub_10011C9B4(const char *a1)
{
  signed int v2;

  v2 = (unsigned __int16)strlen(a1);
  sub_100048070(a1, v2, 0, 0xFCu);
}

uint64_t sub_10011C9E4(_BYTE *a1, unsigned int a2, const void *a3, signed int a4, unsigned int a5)
{
  signed int v5;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int16 v15;
  int v17;
  uint64_t v18;

  v5 = a2 - 13;
  if (a2 >= 0xD && (!byte_10098147E || a5 - 250 < 4 || a5 <= 1))
  {
    *a1 = 0;
    a1[1] = (a4 + 9) >> 16;
    a1[2] = (unsigned __int16)(a4 + 9) >> 8;
    a1[3] = a4 + 9;
    if (byte_1009815B8 == 1)
      v11 = qword_100981668;
    else
      v11 = sub_10011DEBC();
    v18 = 0;
    sub_10004AD30((uint64_t)&v18);
    v12 = v18 + v11;
    v13 = 1000 * (SWORD2(v18) + ((int)(v11 >> 16) >> 16));
    if (v13 > 0xF423F)
      ++v12;
    a1[4] = HIBYTE(v12);
    a1[5] = BYTE2(v12);
    a1[6] = BYTE1(v12);
    a1[7] = v12;
    if (v13 <= 0xF423F)
      v14 = v13;
    else
      v14 = v13 - 1000000;
    a1[8] = HIBYTE(v14);
    a1[9] = BYTE2(v14);
    a1[10] = BYTE1(v14);
    a1[11] = v14;
    a1[12] = a5;
    if (v5 < a4)
    {
      if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_ERROR))
        sub_1006D1C44();
      return 0;
    }
    memcpy(a1 + 13, a3, a4);
    if (!byte_10098147E || a5 - 250 < 4)
      return (unsigned __int16)(a4 + 13);
    if (!a5)
    {
      v17 = sub_100102ACC((uint64_t)a1, a2);
      v15 = 0;
      if (!v17)
        return v15;
      return (unsigned __int16)(a4 + 13);
    }
    if (a5 == 1 && (sub_100100F50((uint64_t)a1, a2) & 1) != 0)
      return (unsigned __int16)(a4 + 13);
  }
  return 0;
}

uint64_t sub_10011CBB8()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 1;
  if (qword_100981638 != -1)
    dispatch_once(&qword_100981638, &stru_10091AF10);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10011CC78;
  block[3] = &unk_10091AE80;
  block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_100981630, block);
  v0 = *((unsigned __int8 *)v4 + 24);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_10011CC78(uint64_t a1)
{
  NSObject *v2;
  char v3;
  NSObject *v4;
  uint8_t buf[16];
  stat v6;

  memset(&v6, 0, sizeof(v6));
  v2 = qword_100981470;
  if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Start logging", buf, 2u);
  }
  qword_100981668 = sub_10011DEBC();
  v3 = 1;
  byte_1009815B8 = 1;
  sub_10011C5E4();
  if (byte_10098147B)
  {
    if (dword_100978B00 != -1)
    {
      if (!stat((const char *)qword_100981498, &v6))
      {
LABEL_10:
        v3 = 1;
        goto LABEL_14;
      }
      close(dword_100978B00);
    }
    dword_100978B00 = open((const char *)qword_100981498, 521, 420);
    if (dword_100978B00 != -1)
    {
      if (!stat((const char *)qword_100981498, &v6))
        qword_1009815B0 = v6.st_size;
      goto LABEL_10;
    }
    v4 = qword_100981470;
    if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_ERROR))
      sub_1006D1C70(v4);
    v3 = 0;
  }
LABEL_14:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
}

uint64_t sub_10011CDC4()
{
  uint64_t result;

  LODWORD(result) = sub_10011CDE8();
  if (dword_100978B00 == -1)
    return result;
  else
    return 1;
}

uint64_t sub_10011CDE8()
{
  uint64_t result;

  if (qword_100981670 && CFSetGetCount((CFSetRef)qword_100981670) > 0)
    return 1;
  result = qword_100981678;
  if (qword_100981678)
    return CFSetGetCount((CFSetRef)qword_100981678) > 0;
  return result;
}

uint64_t sub_10011CE30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 1;
  if (qword_100981638 != -1)
    dispatch_once(&qword_100981638, &stru_10091AF10);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10011CEFC;
  block[3] = &unk_10091AEA8;
  block[5] = a1;
  block[6] = a2;
  block[4] = &v7;
  dispatch_sync((dispatch_queue_t)qword_100981630, block);
  v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_10011CEFC(_QWORD *a1)
{
  NSObject *v2;
  const char *v3;
  char *v4;
  std::error_code *v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint8_t buf[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[31];

  v2 = qword_100981470;
  if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stop logging", buf, 2u);
  }
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  *(_OWORD *)buf = 0u;
  v10 = 0u;
  if (dword_100978B00 != -1)
  {
    close(dword_100978B00);
    dword_100978B00 = -1;
    v8 = 0;
    sub_10004AD30((uint64_t)&v8);
    if (byte_10098147E)
      v3 = "%s/bluetoothd-hcilite-%d.pklg";
    else
      v3 = "%s/bluetoothd-hci-%d.pklg";
    v4 = (char *)a1[5];
    if (!v4)
      v4 = byte_1009814A0;
    snprintf((char *)buf, 0xFFuLL, v3, v4, v8);
    rename((const std::__fs::filesystem::path *)qword_100981498, (const std::__fs::filesystem::path *)buf, v5);
    if (v6)
    {
      *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    }
    else
    {
      v7 = (char *)a1[6];
      if (v7)
        strlcpy(v7, (const char *)buf, 0xFFuLL);
    }
  }
  sub_10011BF28();
}

uint64_t sub_10011D06C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  if (qword_100981638 != -1)
    dispatch_once(&qword_100981638, &stru_10091AF10);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_10011D12C;
  v4[3] = &unk_10091AED0;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_100981630, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_10011D12C(uint64_t a1)
{
  NSObject *v2;
  std::error_code *v3;
  int v4;
  uint8_t v5[16];

  v2 = qword_100981470;
  if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stop and rotate logging", v5, 2u);
  }
  if (dword_100978B00 != -1)
  {
    close(dword_100978B00);
    dword_100978B00 = -1;
    rename((const std::__fs::filesystem::path *)qword_100981498, *(const std::__fs::filesystem::path **)(a1 + 40), v3);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v4 == 0;
  }
}

void *sub_10011D1D0()
{
  NSObject *v0;
  void *result;

  sub_100048070("AP Sleep", 8, 0, 0xFBu);
  byte_1009815B8 = 0;
  if (qword_1009815C0)
  {
    if (sub_10005549C())
    {
      sub_100054530("Received sleep with a sleep buffer already allocated");
      v0 = sub_1000544A0(0x5Cu);
      if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
        sub_1006D1CE4(v0);
    }
    free((void *)qword_1009815C0);
    qword_1009815C0 = 0;
  }
  result = malloc_type_calloc(1uLL, 0x800uLL, 0x6CCEAE98uLL);
  qword_1009815C0 = (uint64_t)result;
  word_1009815C8 = 0;
  return result;
}

void sub_10011D280(const char *a1)
{
  signed int v2;

  v2 = (unsigned __int16)strlen(a1);
  sub_100048070(a1, v2, 0, 0xFBu);
}

void sub_10011D2B0(int a1)
{
  void *v2;
  CFDataRef v3;
  __CFDictionary *Mutable;
  const char *v5;
  signed int v6;

  v2 = (void *)qword_1009815C0;
  if (a1 && qword_1009815C0)
  {
    v3 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)qword_1009815C0, (unsigned __int16)word_1009815C8);
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionarySetValue(Mutable, CFSTR("HCITrace"), v3);
    CFRelease(v3);
    PLLogRegisteredEvent(35, CFSTR("BluetoothWakeTrace"), Mutable, 0);
    CFRelease(Mutable);
    v2 = (void *)qword_1009815C0;
  }
  if (v2)
  {
    free(v2);
    qword_1009815C0 = 0;
    word_1009815C8 = 0;
  }
  qword_100981668 = sub_10011DEBC();
  byte_1009815B8 = 1;
  if (a1)
    v5 = "AP Wake - Bluetooth";
  else
    v5 = "AP Wake - Other";
  if (a1)
    v6 = 19;
  else
    v6 = 15;
  sub_100048070(v5, v6, 0, 0xFBu);
}

BOOL sub_10011D3C0(unsigned __int8 *a1, int a2)
{
  unint64_t v2;
  unsigned int v3;
  BOOL v4;
  __int16 *v5;

  v2 = 0;
  v3 = *(unsigned __int16 *)(a1 + 9);
  v4 = 1;
  v5 = &word_1009815CE;
  do
  {
    if (*((_BYTE *)v5 + 5)
      && a1[8] == *((unsigned __int8 *)v5 - 2)
      && *(v5 - 2) == (*a1 | ((a1[1] & 0xF) << 8))
      && v3 >= (unsigned __int16)*v5
      && v3 <= (unsigned __int16)v5[1]
      && *((unsigned __int8 *)v5 + 4) == a2)
    {
      break;
    }
    v5 += 5;
    v4 = v2++ < 9;
  }
  while (v2 != 10);
  return v4;
}

void sub_10011D44C(const char *a1)
{
  signed int v2;

  v2 = (unsigned __int16)strlen(a1);
  sub_100048070(a1, v2, 0, 0xFAu);
}

void sub_10011D47C(uint64_t a1, const char *a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  char *v22;
  unsigned __int16 *v23;
  char v24;
  __int16 v25;
  char v26;
  _OWORD v27[6];

  if (!byte_10098147E)
  {
    memset(v27, 0, sizeof(v27));
    v23 = 0;
    if (sub_100182588(a1, (uint64_t *)&v23))
      v19 = 0;
    else
      v19 = *v23;
    sub_100253320((uint64_t)"Classic Device: handle 0x%x, Name %s, Addr %:, codec %d pid/vid", v12, v13, v14, v15, v16, v17, v18, v19);
    v20 = strlen(a2);
    if (v20 >= 0x52)
      v21 = 82;
    else
      v21 = v20;
    v24 = 0;
    v25 = v19;
    v26 = v21;
    __memmove_chk(v27, a2, v21, 96);
    v22 = &v24 + v21;
    sub_10004C878((uint64_t)(&v24 + v21 + 4), a1, 6uLL);
    *((_WORD *)v22 + 5) = a3;
    *((_WORD *)v22 + 6) = a4;
    *((_WORD *)v22 + 7) = a5;
    *((_WORD *)v22 + 8) = a6;
    sub_100048070(&v24, v21 + 18, 0, 0xFDu);
  }
}

void sub_10011D5FC(_DWORD *a1, char *__s, _OWORD *a3)
{
  unsigned __int8 v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int16 v18;
  unsigned __int8 v19;
  _OWORD v20[6];

  if (!byte_10098147E)
  {
    v6 = strlen(__s);
    memset(v20, 0, sizeof(v20));
    v7 = (unsigned __int16 *)sub_10019AFA0(a1);
    if (v7)
      v15 = *v7;
    else
      v15 = 0;
    v16 = (uint64_t)a1 + 1;
    sub_100253320((uint64_t)"LE Device: handle 0x%x, Name %s, Addr %:, pUUID %@", v8, v9, v10, v11, v12, v13, v14, v15);
    v17 = 1;
    v18 = v15;
    v19 = v6;
    if (v6 > 0x4AuLL)
      v6 = 74;
    __memmove_chk(v20, __s, v6, 96);
    sub_10004C878((uint64_t)(&v17 + v6 + 4), v16, 6uLL);
    *(_OWORD *)(&v17 + v6 + 10) = *a3;
    sub_100048070(&v17, v6 + 26, 0, 0xFDu);
  }
}

void sub_10011D754(_BYTE *a1, signed int a2)
{
  char v2;

  if (!byte_10098147E)
  {
    v2 = -1;
    *a1 = 2;
    sub_100048070(a1, a2, 0, 0xFDu);
    sub_100048070(&v2, 1, 0, 0xFDu);
  }
}

void sub_10011D7A8(_BYTE *a1, signed int a2)
{
  char v2;

  if (!byte_10098147E)
  {
    v2 = -1;
    *a1 = 3;
    sub_100048070(a1, a2, 0, 0xFDu);
    sub_100048070(&v2, 1, 0, 0xFDu);
  }
}

void sub_10011D7FC(_BYTE *a1, signed int a2)
{
  char v2;

  if (!byte_10098147E)
  {
    v2 = -1;
    *a1 = 4;
    sub_100048070(a1, a2, 0, 0xFDu);
    sub_100048070(&v2, 1, 0, 0xFDu);
  }
}

void *sub_10011D850(void *result)
{
  off_100994BC0 = result;
  return result;
}

uint64_t sub_10011D85C(__int16 a1, __int16 a2, __int16 a3)
{
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;

  v3 = &byte_1009815D3;
  if (byte_1009815D3)
  {
    v4 = 0;
    while (v4 != 9)
    {
      v5 = v3[10];
      v3 += 10;
      ++v4;
      if (!v5)
        goto LABEL_7;
    }
    return 0;
  }
  else
  {
    v4 = 0;
LABEL_7:
    v6 = 1;
    *v3 = 1;
    v7 = (char *)&unk_1009815CA + 10 * v4;
    *(_WORD *)v7 = a1;
    v7[2] = 27;
    *((_WORD *)v7 + 2) = a2;
    *((_WORD *)v7 + 3) = a3;
    v7[8] = 1;
  }
  return v6;
}

uint64_t sub_10011D8CC(__int16 a1, __int16 a2, __int16 a3)
{
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;

  v3 = &byte_1009815D3;
  if (byte_1009815D3)
  {
    v4 = 0;
    while (v4 != 9)
    {
      v5 = v3[10];
      v3 += 10;
      ++v4;
      if (!v5)
        goto LABEL_7;
    }
    return 0;
  }
  else
  {
    v4 = 0;
LABEL_7:
    v6 = 1;
    *v3 = 1;
    v7 = (char *)&unk_1009815CA + 10 * v4;
    *(_WORD *)v7 = a1;
    v7[2] = 27;
    *((_WORD *)v7 + 2) = a2;
    *((_WORD *)v7 + 3) = a3;
    v7[8] = 2;
  }
  return v6;
}

uint64_t sub_10011D940(int a1)
{
  uint64_t v1;
  char v2;
  unsigned __int16 *v3;

  v1 = 0;
  v2 = 0;
  do
  {
    v3 = (unsigned __int16 *)((char *)&unk_1009815CA + v1);
    if (*((_BYTE *)&unk_1009815CA + v1 + 9) && *v3 == a1)
    {
      v3[4] = 0;
      *(_QWORD *)v3 = 0;
      v2 = 1;
    }
    v1 += 10;
  }
  while (v1 != 100);
  return v2 & 1;
}

uint64_t sub_10011D988()
{
  dword_10098162A = 0;
  xmmword_10098160A = 0u;
  unk_10098161A = 0u;
  xmmword_1009815EA = 0u;
  unk_1009815FA = 0u;
  unk_1009815CA = 0u;
  unk_1009815DA = 0u;
  return 1;
}

void sub_10011D9AC(id a1)
{
  NSObject *v1;

  qword_100981470 = (uint64_t)os_log_create("com.apple.bluetooth", "PacketLogger.HCI");
  v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  qword_100981630 = (uint64_t)dispatch_queue_create("HCI Tracing", v1);
}

void sub_10011DA00(id a1)
{
  host_t v1;
  kern_return_t v2;
  kern_return_t v3;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  uint64_t v8;
  uintptr_t v9;
  uintptr_t v10;
  _QWORD v11[4];
  mach_port_name_t v12;
  host_t v13;
  mach_port_name_t name;
  uint8_t buf[4];
  kern_return_t v16;

  name = 0;
  if (qword_100981658 != -1)
    dispatch_once(&qword_100981658, &stru_10091AFB0);
  v1 = dword_100981650;
  if (!dword_100981650)
  {
    v8 = qword_100981470;
    if (!os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v5 = "Failed to get host port for calendar changes";
    v6 = v8;
    v7 = 2;
    goto LABEL_9;
  }
  v2 = mach_port_allocate(mach_task_self_, 1u, &name);
  if (v2)
  {
    v3 = v2;
    v4 = qword_100981470;
    if (!os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 67109120;
    v16 = v3;
    v5 = "Failed to allocate mach port for calendar changes: error %d";
    v6 = v4;
    v7 = 8;
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
    return;
  }
  v9 = name;
  if (qword_100981638 != -1)
  {
    v10 = name;
    dispatch_once(&qword_100981638, &stru_10091AF10);
    v9 = v10;
  }
  qword_100981648 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_mach_recv, v9, 0, (dispatch_queue_t)qword_100981630);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000;
  v11[2] = sub_10011DBDC;
  v11[3] = &unk_10091AF70;
  v12 = name;
  v13 = v1;
  dispatch_source_set_event_handler((dispatch_source_t)qword_100981648, v11);
  dispatch_activate((dispatch_object_t)qword_100981648);
  sub_10011DCD0(v1, name);
}

void sub_10011DBDC(uint64_t a1)
{
  int v2;
  mach_msg_return_t v3;
  NSObject *v4;
  _BYTE v5[32];
  uint8_t buf[4];
  mach_msg_return_t v7;

  memset(v5, 0, sizeof(v5));
  v2 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)&v5[4] = 24;
  *(_DWORD *)&v5[12] = v2;
  v3 = mach_msg_receive((mach_msg_header_t *)v5);
  v4 = qword_100981470;
  if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "resetTimeReference, %X", buf, 8u);
  }
  qword_100981668 = sub_10011DEBC();
  byte_1009815B8 = 1;
  sub_10011DCD0(*(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 32));
  if (!v3)
    mach_msg_destroy((mach_msg_header_t *)v5);
}

void sub_10011DCD0(host_t a1, mach_port_t notify_port)
{
  kern_return_t v4;
  NSObject *v5;
  _DWORD v6[2];

  v4 = host_request_notification(a1, (byte_100981660 & 1) == 0, notify_port);
  if (v4 == 4 && (byte_100981660 & 1) == 0)
  {
    byte_100981660 = 1;
    v4 = host_request_notification(a1, 0, notify_port);
  }
  if (v4)
  {
    v5 = qword_100981470;
    if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
    {
      v6[0] = 67109120;
      v6[1] = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to register for calendar changes: error %d", (uint8_t *)v6, 8u);
    }
  }
}

void sub_10011DDC4(id a1)
{
  mach_port_t v1;
  kern_return_t special_port;
  kern_return_t v3;
  NSObject *v4;
  mach_port_t port;
  uint8_t buf[4];
  kern_return_t v7;

  v1 = mach_host_self();
  port = 0;
  special_port = host_get_special_port(v1, -1, 1, &port);
  v3 = special_port;
  if (special_port != 4)
  {
    if (special_port)
    {
      if (dword_100981650)
        return;
      goto LABEL_7;
    }
    mach_port_deallocate(mach_task_self_, v1);
    v1 = port;
  }
  dword_100981650 = v1;
  if (v1)
    return;
LABEL_7:
  v4 = qword_100981470;
  if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Failed to get mach host port: error %d", buf, 8u);
  }
}

unint64_t sub_10011DEBC()
{
  int v0;
  uint64_t v2;
  __darwin_suseconds_t v3;
  int v4;

  v4 = 0;
  v3 = 0;
  v2 = 0;
  sub_10011344C(&v4, &v3);
  sub_10004AD30((uint64_t)&v2);
  v0 = v3 / 1000;
  if ((__int16)(v3 / 1000) < SWORD2(v2))
    LOWORD(v0) = v3 / 1000 + 1000;
  return (v4 - (_DWORD)v2 - ((__int16)(v3 / 1000) < SWORD2(v2))) | ((unint64_t)(unsigned __int16)(v0 - WORD2(v2)) << 32);
}

void sub_10011DF44(uint64_t a1)
{
  int v2;
  NSObject *v3;
  __CFDateFormatter *v4;
  CFAbsoluteTime Current;
  const __CFDate *v6;
  CFStringRef StringWithDate;
  const __CFString *v8;
  const __CFString *v9;
  std::error_code *v10;
  int v11;
  NSObject *v12;
  DIR *v13;
  DIR *v14;
  dirent *v15;
  __darwin_time_t tv_sec;
  __darwin_ino64_t st_ino;
  int v18;
  const char *d_name;
  NSObject *v20;
  std::error_code *v21;
  int v22;
  NSObject *v23;
  uint8_t v24;
  _BYTE v25[15];
  stat v26;
  _OWORD v27[16];
  std::__fs::filesystem::path buf[42];

  v2 = dword_100978B00;
  if (dword_100978B00 == -1)
    goto LABEL_42;
  if (qword_1009815B0 <= (unint64_t)dword_100978AF8)
  {
LABEL_41:
    write(v2, *(const void **)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
    qword_1009815B0 += *(unsigned __int16 *)(a1 + 48);
LABEL_42:
    sub_10011E398(*(_QWORD *)(a1 + 40), *(_WORD *)(a1 + 50));
    goto LABEL_43;
  }
  v3 = qword_100981470;
  if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf[0].__pn_.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Rotate log file", (uint8_t *)buf, 2u);
    v2 = dword_100978B00;
  }
  bzero(buf, 0x400uLL);
  close(v2);
  v4 = CFDateFormatterCreate(kCFAllocatorDefault, 0, kCFDateFormatterShortStyle, kCFDateFormatterFullStyle);
  CFDateFormatterSetFormat(v4, CFSTR("yyyy-MM-dd_HH-mm-ss"));
  Current = CFAbsoluteTimeGetCurrent();
  v6 = CFDateCreate(kCFAllocatorDefault, Current);
  StringWithDate = CFDateFormatterCreateStringWithDate(kCFAllocatorDefault, v4, v6);
  CFRelease(v6);
  CFRelease(v4);
  if (byte_10098147E)
    v8 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%s/bluetoothd-hcilite-%@.pklg"), byte_1009814A0, StringWithDate);
  else
    v8 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%s/bluetoothd-hci-%@.pklg"), byte_1009814A0, StringWithDate);
  v9 = v8;
  CFStringGetCString(v8, (char *)buf, 1024, 0x8000100u);
  rename((const std::__fs::filesystem::path *)qword_100981498, buf, v10);
  if (v11)
  {
    v12 = qword_100981470;
    if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_ERROR))
      sub_1006D1E08((uint64_t)buf, v12);
  }
  CFRelease(v9);
  CFRelease(StringWithDate);
  memset(&v26, 0, sizeof(v26));
  chdir(byte_1009814A0);
  v13 = opendir(byte_1009814A0);
  if (v13)
  {
    v14 = v13;
    memset(v27, 0, 255);
    v15 = readdir(v13);
    if (v15)
    {
      tv_sec = 0;
      st_ino = 0;
      v18 = 0;
      while (1)
      {
        d_name = v15->d_name;
        if (stat(v15->d_name, &v26) < 0)
        {
          v20 = qword_100981470;
          if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_ERROR))
            sub_1006D1DCC(&v24, v25, v20);
          goto LABEL_24;
        }
        if (!strncmp(d_name, "bluetoothd-hci", 0xEuLL))
          break;
LABEL_24:
        v15 = readdir(v14);
        if (!v15)
          goto LABEL_29;
      }
      if (st_ino)
      {
        if (tv_sec <= v26.st_birthtimespec.tv_sec)
        {
LABEL_23:
          ++v18;
          goto LABEL_24;
        }
        st_ino = v26.st_ino;
        tv_sec = v26.st_birthtimespec.tv_sec;
      }
      else
      {
        st_ino = v26.st_ino;
        tv_sec = v26.st_birthtimespec.tv_sec;
      }
      __strlcpy_chk(v27, d_name, 255, 255);
      goto LABEL_23;
    }
    v18 = 0;
LABEL_29:
    if (v18 > dword_100978AFC && dword_100978AFC)
    {
      snprintf((char *)buf, 0x400uLL, "%s/%s", byte_1009814A0, (const char *)v27);
      remove(buf, v21);
    }
    closedir(v14);
  }
  else if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_ERROR))
  {
    sub_1006D1A38();
  }
  v22 = open((const char *)qword_100981498, 521, 420);
  dword_100978B00 = v22;
  if (v22 != -1)
  {
    qword_1009815B0 = 0;
    if (off_100994BC0)
    {
      off_100994BC0();
      v2 = dword_100978B00;
    }
    else
    {
      v2 = v22;
    }
    if (word_1009815A0)
    {
      write(v2, (const void *)qword_1009815A8, (unsigned __int16)word_1009815A0);
      qword_1009815B0 += (unsigned __int16)word_1009815A0;
      v2 = dword_100978B00;
    }
    goto LABEL_41;
  }
  v23 = qword_100981470;
  if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_ERROR))
    sub_1006D1D58(v23);
LABEL_43:
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 40));
}

void sub_10011E398(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v5;
  uint64_t v6;

  if (qword_100981670)
  {
    if (CFSetGetCount((CFSetRef)qword_100981670) >= 1 && &lockdown_copy_checkin_info != 0)
    {
      v5 = a1;
      v6 = a2;
      CFSetApplyFunction((CFSetRef)qword_100981670, (CFSetApplierFunction)sub_10011E448, &v5);
      if (BYTE2(v6))
        sub_10011BF28();
    }
  }
  if (qword_100981678)
  {
    if (CFSetGetCount((CFSetRef)qword_100981678) >= 1)
    {
      v5 = a1;
      v6 = a2;
      CFSetApplyFunction((CFSetRef)qword_100981678, (CFSetApplierFunction)sub_10011E494, &v5);
    }
  }
}

uint64_t sub_10011E448(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  lockdown_send(a1, a2 + 8, 2);
  result = lockdown_send(a1, *(_QWORD *)a2, *(unsigned __int16 *)(a2 + 8));
  if (result == -1)
    *(_BYTE *)(a2 + 10) = 1;
  return result;
}

void sub_10011E494(_xpc_connection_s *a1, uint64_t a2)
{
  xpc_object_t v4;

  v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_data(v4, "packet", *(const void **)a2, *(unsigned __int16 *)(a2 + 8));
  xpc_connection_send_message(a1, v4);
  xpc_release(v4);
}

void sub_10011E4F4(id a1, _lockdown_connection *a2, __CFDictionary *a3)
{
  sub_10011E500(a2, 0);
}

void sub_10011E500(void *a1, char a2)
{
  NSObject *v4;
  const __CFSet *Mutable;
  CFIndex Count;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  unsigned __int16 v10;
  const __CFSet *v11;
  CFIndex v12;
  _QWORD handler[5];
  uint8_t buf[16];

  v4 = qword_100981470;
  if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Starting Live Logging", buf, 2u);
  }
  if (byte_10098147A)
  {
    if ((a2 & 1) != 0)
    {
      Mutable = (const __CFSet *)qword_100981678;
      if (!qword_100981678)
      {
        Mutable = CFSetCreateMutable(0, 0, 0);
        qword_100981678 = (uint64_t)Mutable;
      }
      Count = CFSetGetCount(Mutable);
      CFSetSetValue((CFMutableSetRef)qword_100981678, a1);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 0x40000000;
      handler[2] = sub_10011E878;
      handler[3] = &unk_10091B070;
      handler[4] = a1;
      xpc_connection_set_event_handler((xpc_connection_t)a1, handler);
      if (qword_100981638 != -1)
        dispatch_once(&qword_100981638, &stru_10091AF10);
      xpc_connection_set_target_queue((xpc_connection_t)a1, (dispatch_queue_t)qword_100981630);
      xpc_connection_resume((xpc_connection_t)a1);
      if (Count)
        goto LABEL_20;
    }
    else
    {
      v11 = (const __CFSet *)qword_100981670;
      if (!qword_100981670)
      {
        v11 = CFSetCreateMutable(0, 0, 0);
        qword_100981670 = (uint64_t)v11;
      }
      v12 = CFSetGetCount(v11);
      CFSetSetValue((CFMutableSetRef)qword_100981670, a1);
      if (v12)
        goto LABEL_20;
    }
    if (off_100981488)
      v7 = off_100981488(1);
LABEL_20:
    if (off_100994BC0)
      off_100994BC0(v7);
    if (word_1009815A0)
      sub_10011E398(qword_1009815A8, word_1009815A0);
    return;
  }
  if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_ERROR))
    sub_1006D1EBC();
  v8 = malloc_type_malloc(0x27uLL, 0x4699532uLL);
  if (v8)
  {
    v9 = v8;
    v10 = sub_10011C9E4(v8, 0x27u, "Bluetooth Profile Required", 26, 0xFCu);
    sub_10011E398((uint64_t)v9, v10);
    free(v9);
  }
}

void sub_10011E70C(id a1, void *a2)
{
  xpc_type_t type;
  NSObject *v4;
  uint8_t *v5;
  void *v6;
  void *v7;
  _BOOL4 v8;
  __int16 v9;
  uint8_t buf[16];
  __int128 v11;

  type = xpc_get_type(a2);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    if (byte_100981480)
    {
      v4 = qword_100981470;
      if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v5 = buf;
LABEL_9:
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PacketLogger skipping authentication", v5, 2u);
      }
    }
    else
    {
      *(_OWORD *)buf = 0u;
      v11 = 0u;
      xpc_connection_get_audit_token(a2, buf);
      v6 = (void *)xpc_copy_entitlement_for_token(0, buf);
      if (!v6)
        return;
      v7 = v6;
      v8 = xpc_dictionary_get_BOOL(v6, "com.apple.bluetooth.internal");
      xpc_release(v7);
      if (!v8)
        return;
      v4 = qword_100981470;
      if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_DEFAULT))
      {
        v9 = 0;
        v5 = (uint8_t *)&v9;
        goto LABEL_9;
      }
    }
    sub_10011E500(a2, 1);
    return;
  }
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    xpc_dictionary_get_string(a2, _xpc_error_key_description);
    if (os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_ERROR))
      sub_1006D1EE8();
    sub_10011BF28();
  }
}

void sub_10011E878(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type;
  xpc_object_t reply;
  void *v6;

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    if (qword_100981678)
      CFSetRemoveValue((CFMutableSetRef)qword_100981678, *(const void **)(a1 + 32));
    xpc_dictionary_get_string(object, _xpc_error_key_description);
    if (object != &_xpc_error_connection_invalid && os_log_type_enabled((os_log_t)qword_100981470, OS_LOG_TYPE_ERROR))
      sub_1006D1F4C();
  }
  else if (type == (xpc_type_t)&_xpc_type_dictionary && xpc_dictionary_expects_reply(object))
  {
    reply = xpc_dictionary_create_reply(object);
    if (reply)
    {
      v6 = reply;
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), reply);
      xpc_release(v6);
    }
  }
}

char *sub_10011E964(int *a1)
{
  return strerror(*a1);
}

void sub_10011E96C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

int *sub_10011E980()
{
  return __error();
}

uint64_t sub_10011E988(pthread_mutex_t *a1)
{
  pthread_mutexattr_t v3;

  v3.__sig = 0;
  *(_QWORD *)v3.__opaque = 0;
  if (pthread_mutexattr_init(&v3))
  {
    fprintf(__stderrp, "(0x%p) Failed to init mutex attr - %d!");
  }
  else if (pthread_mutexattr_settype(&v3, 2))
  {
    fprintf(__stderrp, "(0x%p) Failed to set mutex attr type - %d!");
  }
  else
  {
    if (!pthread_mutex_init(a1, &v3))
      return 1;
    fprintf(__stderrp, "(0x%p) Failed to init mutex - %d!");
  }
  return 0;
}

BOOL sub_10011EA74(pthread_mutex_t *a1)
{
  int v2;

  v2 = pthread_mutex_destroy(a1);
  if (v2)
    fprintf(__stderrp, "(%p) Failed to destroy mutex - %d!", a1, v2);
  return v2 == 0;
}

BOOL sub_10011EAC8(pthread_t *a1, void *(__cdecl *a2)(void *), void *a3)
{
  pthread_attr_t v7;

  memset(&v7, 0, sizeof(v7));
  pthread_attr_init(&v7);
  pthread_attr_setdetachstate(&v7, 2);
  return pthread_create(a1, &v7, a2, a3) == 0;
}

BOOL sub_10011EB64(_opaque_pthread_t *a1, int a2)
{
  sched_param v3;

  v3.sched_priority = a2;
  *(_DWORD *)v3.__opaque = 0;
  return pthread_setschedparam(a1, 2, &v3) == 0;
}

BOOL sub_10011EB94(_opaque_pthread_t *a1, integer_t a2, integer_t a3, int a4, int a5)
{
  thread_inspect_t v9;
  integer_t policy_info[2];
  uint64_t v12;
  BOOLean_t get_default;
  mach_msg_type_number_t policy_infoCnt;

  v9 = pthread_mach_thread_np(a1);
  get_default = 1;
  policy_infoCnt = 4;
  *(_QWORD *)policy_info = 0;
  v12 = 0;
  if (thread_policy_get(v9, 2u, policy_info, &policy_infoCnt, &get_default))
    return 0;
  if (a2)
  {
    policy_info[0] = a2;
    policy_info[1] = a3;
    LODWORD(v12) = a4;
  }
  HIDWORD(v12) = a5;
  return thread_policy_set(v9, 2u, policy_info, 4u) == 0;
}

BOOL sub_10011EC38(const char *a1)
{
  return pthread_setname_np(a1) == 0;
}

BOOL sub_10011EC54(pthread_cond_t *a1)
{
  return pthread_cond_init(a1, 0) == 0;
}

BOOL sub_10011EC78(pthread_cond_t *a1)
{
  return pthread_cond_destroy(a1) == 0;
}

uint64_t sub_10011EC94(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2293, "OI_STATUS _ACI_WriteCellularTxState(_Bool, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = a1;
        return sub_10004C8A0(65437, v9, BYTE4(v10), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

void sub_10011ED60(uint64_t a1, void (*a2)(uint64_t))
{
  NSObject *v4;

  if ((_DWORD)a1
    && sub_10005549C()
    && (sub_100054530("status %d, hlCb 0x%x", a1, (_DWORD)a2),
        v4 = sub_1000544A0(0x54u),
        os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)))
  {
    sub_1006CEEC0();
    if (!a2)
      return;
  }
  else if (!a2)
  {
    return;
  }
  a2(a1);
}

void sub_10011EDE8(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("status %!", a1);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v6 = 0;
    if (a2)
      goto LABEL_6;
    return;
  }
  if (*(_BYTE *)(a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2815, "void _ACI_PropLocalFeaturesEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_14;
  }
  v7 = *(unsigned __int16 *)(a3 + 12);
  if (*(unsigned __int16 *)(a3 + 10) - (int)v7 <= 3 || *(_BYTE *)(a3 + 14) != 1)
LABEL_14:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v6 = *(unsigned int *)(*(_QWORD *)a3 + v7);
  *(_WORD *)(a3 + 12) = v7 + 4;
  if (a2)
LABEL_6:
    a2(a1, v6);
}

void sub_10011EEF4(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;

  if (!(_DWORD)a1)
  {
    if (*((_BYTE *)a3 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2845, "void _ACI_PropRemoteFeaturesEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    }
    else
    {
      v8 = *((unsigned __int16 *)a3 + 5);
      v9 = *((unsigned __int16 *)a3 + 6);
      if (v8 - (int)v9 > 1 && *((_BYTE *)a3 + 14) == 1)
      {
        v10 = *a3;
        v11 = (unsigned __int8 *)(*a3 + v9);
        v12 = *v11;
        v13 = v11[1];
        *((_WORD *)a3 + 6) = v9 + 2;
        if (v8 - (unsigned __int16)(v9 + 2) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v6 = v12 | (v13 << 8);
        v7 = *(unsigned int *)(v10 + (unsigned __int16)(v9 + 2));
        *((_WORD *)a3 + 6) = v9 + 6;
        if (a2)
          goto LABEL_6;
        return;
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  if (sub_10005549C())
  {
    sub_100054530("status %!", a1);
    v5 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  v6 = 0;
  v7 = 0;
  if (a2)
LABEL_6:
    a2(a1, v6, v7);
}

uint64_t sub_10011F048(unint64_t a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  result = sub_10004BC7C(&v13);
  if (!(_DWORD)result)
  {
    v5 = sub_1000746A4(a1);
    v10 = v5;
    v12 = BYTE6(v5);
    v11 = WORD2(v5);
    if (HIBYTE(v14))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4379, "OI_STATUS _ACI_IncomingLEConnectionDenyListAdd(BTAddress, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v6 = WORD2(v14);
      if (WORD1(v14) > WORD2(v14) && BYTE6(v14) == 2)
      {
        ++WORD2(v14);
        *(_BYTE *)(v13 + v6) = v5;
        if (HIBYTE(v14))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4380, "OI_STATUS _ACI_IncomingLEConnectionDenyListAdd(BTAddress, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v14) - WORD2(v14) > 5 && BYTE6(v14) == 2)
        {
          sub_10004C878(v13 + WORD2(v14), (uint64_t)&v10 + 1, 6uLL);
          WORD2(v14) += 6;
          return sub_10004C8A0(65485, v13, BYTE4(v14), a2, (uint64_t)sub_10011ED60, v7, v8, v9);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10011F1C0(unint64_t a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  result = sub_10004BC7C(&v13);
  if (!(_DWORD)result)
  {
    v5 = sub_1000746A4(a1);
    v10 = v5;
    v12 = BYTE6(v5);
    v11 = WORD2(v5);
    if (HIBYTE(v14))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4394, "OI_STATUS _ACI_IncomingLEConnectionDenyListRemove(BTAddress, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v6 = WORD2(v14);
      if (WORD1(v14) > WORD2(v14) && BYTE6(v14) == 2)
      {
        ++WORD2(v14);
        *(_BYTE *)(v13 + v6) = v5;
        if (HIBYTE(v14))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4395, "OI_STATUS _ACI_IncomingLEConnectionDenyListRemove(BTAddress, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v14) - WORD2(v14) > 5 && BYTE6(v14) == 2)
        {
          sub_10004C878(v13 + WORD2(v14), (uint64_t)&v10 + 1, 6uLL);
          WORD2(v14) += 6;
          return sub_10004C8A0(65486, v13, BYTE4(v14), a2, (uint64_t)sub_10011ED60, v7, v8, v9);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10011F338(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  result = sub_10004BC7C(&v6);
  if (!(_DWORD)result)
    return sub_10004C8A0(65484, v6, BYTE4(v7), a1, (uint64_t)sub_10011ED60, v3, v4, v5);
  return result;
}

uint64_t sub_10011F388(char a1, char a2, char a3, char a4, char a5, uint64_t (*a6)())
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  result = sub_10004BC7C(&v21);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v22))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4420, "OI_STATUS _ACI_LEAdvTxPowerIncrease(uint8_t, uint8_t, int8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v16 = WORD2(v22);
      if (WORD1(v22) > WORD2(v22) && BYTE6(v22) == 2)
      {
        ++WORD2(v22);
        *(_BYTE *)(v21 + v16) = a1;
        if (HIBYTE(v22))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4421, "OI_STATUS _ACI_LEAdvTxPowerIncrease(uint8_t, uint8_t, int8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v17 = WORD2(v22);
          if (WORD1(v22) > WORD2(v22) && BYTE6(v22) == 2)
          {
            ++WORD2(v22);
            *(_BYTE *)(v21 + v17) = a2;
            if (HIBYTE(v22))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4422, "OI_STATUS _ACI_LEAdvTxPowerIncrease(uint8_t, uint8_t, int8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
            }
            else
            {
              v18 = WORD2(v22);
              if (WORD1(v22) > WORD2(v22) && BYTE6(v22) == 2)
              {
                ++WORD2(v22);
                *(_BYTE *)(v21 + v18) = a3;
                if (HIBYTE(v22))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4423, "OI_STATUS _ACI_LEAdvTxPowerIncrease(uint8_t, uint8_t, int8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
                }
                else
                {
                  v19 = WORD2(v22);
                  if (WORD1(v22) > WORD2(v22) && BYTE6(v22) == 2)
                  {
                    ++WORD2(v22);
                    *(_BYTE *)(v21 + v19) = a4;
                    if (HIBYTE(v22))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4424, "OI_STATUS _ACI_LEAdvTxPowerIncrease(uint8_t, uint8_t, int8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
                    }
                    else
                    {
                      v20 = WORD2(v22);
                      if (WORD1(v22) > WORD2(v22) && BYTE6(v22) == 2)
                      {
                        ++WORD2(v22);
                        *(_BYTE *)(v21 + v20) = a5;
                        return sub_10004C8A0(64978, v21, BYTE4(v22), a6, (uint64_t)sub_10011ED60, v13, v14, v15);
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10011F654(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4437, "OI_STATUS _ACI_ReadPowerCapState(uint16_t, BT_VSC_READ_POWERCAP_STATE_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = a1;
        return sub_10004C8A0(64810, v9, BYTE4(v10), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10011F720(char a1, uint64_t a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = sub_10004BC7C(&v10);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v11))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4450, "OI_STATUS _ACI_EnhancedReadPowerCapState(uint16_t, uint8_t, BT_VSC_READ_POWERCAP_STATE_CB)");
    }
    else
    {
      v9 = WORD2(v11);
      if (WORD1(v11) > WORD2(v11) && BYTE6(v11) == 2)
      {
        ++WORD2(v11);
        *(_BYTE *)(v10 + v9) = a1;
        return sub_10004C8A0(64810, v10, BYTE4(v11), a3, (uint64_t)sub_10011F7EC, v6, v7, v8);
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

void sub_10011F7EC(uint64_t a1, void (*a2)(uint64_t, uint64_t, _QWORD), uint64_t a3)
{
  int v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;

  if (*(_BYTE *)(a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 70, "void _ACI_ByteStreamEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_4;
  }
  if (*(unsigned __int16 *)(a3 + 10) - *(unsigned __int16 *)(a3 + 12) <= 1)
  {
LABEL_4:
    if (sub_10005549C())
    {
      if (*(_BYTE *)(a3 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 71, "void _ACI_ByteStreamEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
        v4 = 0;
      }
      else
      {
        v4 = *(unsigned __int16 *)(a3 + 10) - *(unsigned __int16 *)(a3 + 12);
      }
      sub_100054530("Invalid data size %d", v4);
      v10 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return;
  }
  if ((_DWORD)a1
    && sub_10005549C()
    && ((v7 = *(unsigned __int16 *)(a3 + 12), v8 = *(_QWORD *)a3 + v7, !*(_BYTE *)(a3 + 15))
      ? (v9 = *(unsigned __int16 *)(a3 + 10) - v7)
      : (sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 76, "void _ACI_ByteStreamEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)"), v9 = 0), sub_100054530("hlCb 0x%x, data %@", a2, v8, v9), v11 = sub_1000544A0(0x54u), os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)))
  {
    sub_1006CEEC0();
    if (!a2)
      return;
  }
  else if (!a2)
  {
    return;
  }
  v12 = *(unsigned __int16 *)(a3 + 12);
  v13 = *(_QWORD *)a3 + v12;
  if (*(_BYTE *)(a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 79, "void _ACI_ByteStreamEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    v14 = 0;
  }
  else
  {
    v14 = *(_BYTE *)(a3 + 10) - v12;
  }
  a2(a1, v13, v14);
}

void (**sub_10011F9AC(void (**result)(uint64_t *a1, uint64_t a2), const void *a2))(uint64_t *a1, uint64_t a2)
{
  *result = sub_10011FAB4;
  if (a2)
    return (void (**)(uint64_t *, uint64_t))memcpy(&off_100981688, a2, 0x1C8uLL);
  return result;
}

void *sub_10011F9D0(void *a1)
{
  memcpy(a1, off_10091B090, 0x8F0uLL);
  return sub_10019DCB0(sub_10011F9F8);
}

BOOL sub_10011F9F8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSObject *v6;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("status %!, opcode 0x%x, subOpcode %x, myopcode %x", a1, a2, a3, a2 & 0x3FF);
      v6 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  return !(_DWORD)a1 && (a2 & 0x3FF) == 552;
}

void *sub_10011FA98(void *__src)
{
  if (__src)
    return memcpy(&unk_100981850, __src, 0x1C8uLL);
  return __src;
}

void sub_10011FAB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int16 v8;
  void (*v9)(__int128 *);
  __int128 *v10;
  unsigned __int16 v11;
  unsigned int v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  unint64_t v15;
  NSObject *v16;
  unsigned __int16 v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  unint64_t v24;
  NSObject *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  int v29;
  __int128 *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  __int128 *v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  BOOL v41;
  unint64_t v42;
  NSObject *v43;
  int v44;
  __int128 *v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 v50;
  BOOL v51;
  unsigned int v52;
  uint64_t v53;
  unsigned __int16 v54;
  uint64_t v55;
  unsigned int v56;
  __int16 v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 v61;
  unsigned __int16 v62;
  unsigned __int16 v63;
  unsigned __int16 v64;
  unsigned __int16 v65;
  unsigned __int16 v66;
  __int128 *v67;
  unsigned __int8 *v68;
  int v69;
  int v70;
  void (*v71)(_QWORD, BOOL);
  unsigned __int8 *v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  __int128 *v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  unsigned __int16 v81;
  int v82;
  signed int v83;
  char *v84;
  int v85;
  unsigned __int8 v86;
  int v87;
  NSObject *v88;
  NSObject *v89;
  NSObject *v90;
  NSObject *v91;
  NSObject *v92;
  int v93;
  NSObject *v94;
  uint64_t v95;
  unint64_t v96;
  NSObject *v97;
  NSObject *v98;
  NSObject *v99;
  unsigned int v100;
  __int128 v101;
  _OWORD v102[2];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  int v116;

  if (*((_BYTE *)a1 + 14) != 1)
LABEL_336:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 243, "void _ACI_EventHandler(OI_BYTE_STREAM *, _Bool)");
    goto LABEL_336;
  }
  v4 = (unsigned __int16 *)a1 + 6;
  v3 = *((unsigned __int16 *)a1 + 6);
  v5 = *((unsigned __int16 *)a1 + 5);
  if ((int)v5 - (int)v3 <= 1)
    goto LABEL_336;
  v6 = *a1;
  v7 = *(unsigned __int16 *)(*a1 + v3);
  v8 = v3 + 2;
  *((_WORD *)a1 + 6) = v3 + 2;
  if (v7 > 65280)
  {
    if (v7 <= 65421)
    {
      switch(v7)
      {
        case 65281:
        case 65288:
          goto LABEL_332;
        case 65286:
          v9 = (void (*)(__int128 *))qword_100981778;
          if (!qword_100981778)
            goto LABEL_332;
          v10 = (__int128 *)(v6 + v8);
          *v4 = v3 + 182;
          if ((_DWORD)v5 != (unsigned __int16)(v3 + 182))
          {
            sub_100253460();
            v9 = (void (*)(__int128 *))qword_100981778;
          }
          goto LABEL_156;
        case 65287:
          v9 = (void (*)(__int128 *))qword_100981780;
          if (!qword_100981780)
            goto LABEL_332;
          v10 = (__int128 *)(v6 + v8);
          *v4 = v3 + 112;
          if ((_DWORD)v5 != (unsigned __int16)(v3 + 112))
          {
            sub_100253460();
            v9 = (void (*)(__int128 *))qword_100981780;
          }
          goto LABEL_156;
        case 65289:
          v9 = (void (*)(__int128 *))off_1009816C0;
          if (!off_1009816C0)
            goto LABEL_332;
          v61 = v3 + 253;
          *v4 = v61;
          if ((_DWORD)v5 != v61)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          goto LABEL_149;
        case 65290:
          v9 = (void (*)(__int128 *))qword_1009816C8;
          if (!qword_1009816C8)
            goto LABEL_332;
          v62 = v3 + 222;
          *v4 = v62;
          if ((_DWORD)v5 != v62)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          goto LABEL_149;
        case 65297:
          v9 = (void (*)(__int128 *))qword_1009816D0;
          if (!qword_1009816D0)
            goto LABEL_332;
          v63 = v3 + 66;
          *v4 = v63;
          if ((_DWORD)v5 != v63)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          goto LABEL_149;
        case 65298:
          v9 = (void (*)(__int128 *))qword_1009816D8;
          if (!qword_1009816D8)
            goto LABEL_332;
          v64 = v3 + 226;
          *v4 = v64;
          if ((_DWORD)v5 != v64)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          goto LABEL_149;
        case 65299:
          v9 = (void (*)(__int128 *))qword_1009816E0;
          if (!qword_1009816E0)
            goto LABEL_332;
          v65 = v3 + 220;
          *v4 = v65;
          if ((_DWORD)v5 != v65)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          goto LABEL_149;
        case 65300:
          v9 = (void (*)(__int128 *))qword_1009816E8;
          if (!qword_1009816E8)
            goto LABEL_332;
          v66 = v3 + 242;
          *v4 = v66;
          if ((_DWORD)v5 != v66)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
LABEL_149:
          v67 = (__int128 *)(v6 + v8);
          goto LABEL_284;
        case 65301:
          v9 = (void (*)(__int128 *))qword_1009817C0;
          if (!qword_1009817C0)
            goto LABEL_332;
          v10 = (__int128 *)(v6 + v8);
          *v4 = v3 + 35;
          if ((_DWORD)v5 != (unsigned __int16)(v3 + 35))
          {
            sub_100253460();
            v9 = (void (*)(__int128 *))qword_1009817C0;
          }
          goto LABEL_156;
        case 65302:
          v9 = (void (*)(__int128 *))qword_1009817C8;
          if (!qword_1009817C8)
            goto LABEL_332;
          v10 = (__int128 *)(v6 + v8);
          *v4 = v3 + 32;
          if ((_DWORD)v5 != (unsigned __int16)(v3 + 32))
          {
            sub_100253460();
            v9 = (void (*)(__int128 *))qword_1009817C8;
          }
LABEL_156:
          v67 = v10;
          break;
        default:
          goto LABEL_329;
      }
      goto LABEL_284;
    }
    v13 = a2;
    switch(v7)
    {
      case 65422:
        v14 = (void (*)(uint64_t, uint64_t))qword_100981708;
        if (!qword_100981708)
          goto LABEL_332;
        v15 = v5 - v8;
        if (v15 > 0xCD)
          goto LABEL_294;
        if (sub_10005549C())
        {
          sub_100054530("BT_VSE_ACI_PHY_STATISTIC - Invalid data size %zu", v15);
          v16 = sub_1000544A0(0x54u);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            goto LABEL_321;
        }
        goto LABEL_332;
      case 65423:
        v14 = (void (*)(uint64_t, uint64_t))off_100981788;
        if (!off_100981788)
          goto LABEL_332;
        goto LABEL_168;
      case 65424:
      case 65425:
      case 65427:
      case 65429:
      case 65431:
        goto LABEL_329;
      case 65426:
        if ((int)(v5 - v8) <= 1 || *((_BYTE *)a1 + 14) != 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v26 = (unsigned __int8 *)(v6 + v8);
        v27 = *v26;
        v28 = v26[1];
        *v4 = v3 + 4;
        if (v5 <= (unsigned __int16)(v3 + 4))
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        *((_WORD *)a1 + 6) = v3 + 5;
        v29 = *(unsigned __int8 *)(v6 + (unsigned __int16)(v3 + 4));
        v30 = sub_10019ACEC(v27 | (v28 << 8));
        if (*((_BYTE *)a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 281, "void _ACI_EventHandler(OI_BYTE_STREAM *, _Bool)");
        }
        else
        {
          v31 = *((unsigned __int16 *)a1 + 5);
          v32 = *((unsigned __int16 *)a1 + 6);
          if (v31 - (int)v32 > 3 && *((_BYTE *)a1 + 14) == 1)
          {
            v33 = *a1;
            v34 = *(unsigned int *)(*a1 + v32);
            *((_WORD *)a1 + 6) = v32 + 4;
            if (v31 - (unsigned __int16)(v32 + 4) <= 3)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            v35 = *(unsigned int *)(v33 + (unsigned __int16)(v32 + 4));
            *v4 = v32 + 8;
            if (v31 - (unsigned __int16)(v32 + 8) <= 1)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            v36 = *(_WORD *)(v33 + (unsigned __int16)(v32 + 8));
            *v4 = v32 + 10;
            if (v31 - (unsigned __int16)(v32 + 10) <= 1)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            v37 = v30;
            v38 = *(_BYTE *)(v33 + (unsigned __int16)(v32 + 10));
            *v4 = v32 + 12;
            if ((v38 & (v29 == 10)) != 0)
              v39 = -118;
            else
              v39 = v29;
            v100 = 0;
            LODWORD(v101) = 0;
            sub_10011344C(&v101, (__darwin_suseconds_t *)&v100);
            v41 = v39 != 1 && v39 != 0 && v37 == 0;
            if (!v41 && v39 != 10)
            {
              if (off_1009817E0)
                off_1009817E0(v37, v39, (v35 << 32) | v34, 0, v36, v101, v100);
              goto LABEL_332;
            }
            if (sub_10005549C())
            {
              sub_100054530("updateBTControllerClockCB size is zero");
              v89 = sub_1000544A0(0x54u);
              if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
                sub_1006CE7A4();
            }
LABEL_329:
            if (sub_10005549C())
            {
              sub_100054530("Unhandled Vendor Specific Event: 0x%x", v7);
              v99 = sub_1000544A0(0x54u);
              if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
                sub_1006CE7A4();
            }
            goto LABEL_332;
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      case 65428:
        if (!off_1009817B0)
          goto LABEL_332;
        v42 = v5 - v8;
        if (v42 > 3)
        {
          if (v42 < 0x43)
          {
            v95 = v6 + v8;
            v96 = v42 - 4;
            if (v96 >= *(unsigned __int8 *)(v95 + 1))
            {
              off_1009817B0(v95);
              goto LABEL_332;
            }
            if (!sub_10005549C())
              goto LABEL_332;
            sub_100054530("HCI_VSE_ACI_BTC2AOP_MESSAGE - Invalid SPMI payload length %zd exceed expected %zd", *(unsigned __int8 *)(v95 + 1), v96);
            v97 = sub_1000544A0(0x54u);
            if (!os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
              goto LABEL_332;
          }
          else
          {
            if (!sub_10005549C())
              goto LABEL_332;
            sub_100054530("HCI_VSE_ACI_BTC2AOP_MESSAGE - Invalid SPMI data size %zd exceeds %zd", v42, 0x42uLL);
            v92 = sub_1000544A0(0x54u);
            if (!os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
              goto LABEL_332;
          }
        }
        else
        {
          if (!sub_10005549C())
            goto LABEL_332;
          sub_100054530("HCI_VSE_ACI_BTC2AOP_MESSAGE - Invalid SPMI data size %zd less then %zd", v42, 4uLL);
          v43 = sub_1000544A0(0x54u);
          if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            goto LABEL_332;
        }
        goto LABEL_321;
      case 65430:
        v101 = 0uLL;
        if ((int)(v5 - v8) <= 1 || *((_BYTE *)a1 + 14) != 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v44 = *(unsigned __int16 *)(v6 + (unsigned __int16)(v3 + 2));
        *((_WORD *)a1 + 6) = v3 + 4;
        v45 = sub_10019ACEC(v44);
        if (*((_BYTE *)a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 330, "void _ACI_EventHandler(OI_BYTE_STREAM *, _Bool)");
        }
        else
        {
          v46 = *((unsigned __int16 *)a1 + 5);
          v47 = *((unsigned __int16 *)a1 + 6);
          if ((int)(v46 - v47) > 3 && *((_BYTE *)a1 + 14) == 1)
          {
            v48 = *a1;
            *((_WORD *)a1 + 6) = v47 + 4;
            if ((int)(v46 - (unsigned __int16)(v47 + 4)) <= 3)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            *v4 = v47 + 8;
            if ((int)(v46 - (unsigned __int16)(v47 + 8)) <= 3)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            *v4 = v47 + 12;
            if ((int)(v46 - (unsigned __int16)(v47 + 12)) <= 3)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            v49 = 0;
            v50 = v47 + 16;
            *v4 = v47 + 16;
            v51 = v46 >= (unsigned __int16)(v47 + 16);
            v52 = v46 - (unsigned __int16)(v47 + 16);
            if (v51)
              v53 = v52;
            else
              v53 = 0;
            do
            {
              if (v53 == v49)
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              v54 = v50;
              v55 = v50++;
              *v4 = v50;
              *((_BYTE *)&v102[-1] + v49++) = *(_BYTE *)(v48 + v55);
            }
            while (v49 != 16);
            if (v46 <= v50)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            *v4 = v54 + 2;
            if (v46 <= (unsigned __int16)(v54 + 2))
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            *v4 = v54 + 3;
            if (v46 <= (unsigned __int16)(v54 + 3))
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            *v4 = v54 + 4;
            if ((int)(v46 - (unsigned __int16)(v54 + 4)) <= 1)
            {
              *((_BYTE *)a1 + 15) = 1;
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 342, "void _ACI_EventHandler(OI_BYTE_STREAM *, _Bool)");
            }
            else
            {
              *v4 = v54 + 6;
              if (v46 > (unsigned __int16)(v54 + 6))
              {
                *v4 = v54 + 7;
                if (!v45)
                {
                  if (sub_10005549C())
                  {
                    sub_100054530("updateBTControllerClockCB size is zero");
                    v91 = sub_1000544A0(0x54u);
                    if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
                      sub_1006CE7A4();
                  }
                  goto LABEL_329;
                }
                if (off_1009817D8)
                  off_1009817D8(v45);
                goto LABEL_332;
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      case 65432:
        v56 = (unsigned __int16)(v5 - v8);
        if (v56 >= 8)
        {
          if (!off_100981800)
            goto LABEL_332;
          WORD2(v101) = 0;
          LODWORD(v101) = 0;
          if ((int)(v5 - v8) <= 5 || *((_BYTE *)a1 + 14) != 1)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          sub_10004C878((uint64_t)&v101, v6 + v8, 6uLL);
          v57 = *((_WORD *)a1 + 6);
          *((_WORD *)a1 + 6) = v57 + 6;
          if (*((_BYTE *)a1 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 367, "void _ACI_EventHandler(OI_BYTE_STREAM *, _Bool)");
          }
          else
          {
            v58 = *((unsigned __int16 *)a1 + 5);
            if (v58 > (unsigned __int16)(v57 + 6) && *((_BYTE *)a1 + 14) == 1)
            {
              v59 = *a1;
              *((_WORD *)a1 + 6) = v57 + 7;
              if (v58 <= (unsigned __int16)(v57 + 7))
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              v60 = *(unsigned __int8 *)(v59 + (unsigned __int16)(v57 + 6));
              *v4 = v57 + 8;
              off_100981800(v101 | ((unint64_t)WORD2(v101) << 32), v60, *(unsigned __int8 *)(v59 + (unsigned __int16)(v57 + 7)), v13);
              goto LABEL_332;
            }
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        if (!sub_10005549C())
          goto LABEL_329;
        sub_100054530("Sensor state report event returned invalid length %d of data", v56);
        v88 = sub_1000544A0(0x54u);
        if (!os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
          goto LABEL_329;
        goto LABEL_328;
      default:
        if (v7 != 65441)
        {
          if (v7 != 65445)
            goto LABEL_329;
          v14 = (void (*)(uint64_t, uint64_t))qword_100981810;
          if (qword_100981810)
          {
            v24 = v5 - v8;
            if (v24 > 0x26)
            {
LABEL_294:
              v75 = v6 + v8;
              goto LABEL_295;
            }
            if (sub_10005549C())
            {
              sub_100054530("HID_LATENCY_STATISTICS - Invalid data size %lu", v24);
              v25 = sub_1000544A0(0x54u);
              if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
LABEL_321:
                sub_1006CE7A4();
            }
          }
          goto LABEL_332;
        }
        if (!off_1009816F0)
          goto LABEL_329;
        v83 = (v5 - v8);
        v84 = (char *)(v6 + v8);
        v85 = *v84;
        if ((v85 & 0x60) != 0)
          v86 = -73;
        else
          v86 = -77;
        if (v85 < 0)
          v86 += 16;
        v87 = v86;
        if (v83 == v86)
        {
          if ((int)(v5 - v8) >= v83)
          {
            *v4 = v8 + v83;
            if ((_DWORD)v5 != (unsigned __int16)(v8 + v83))
              sub_100253460();
          }
          else
          {
            *((_BYTE *)a1 + 15) = 1;
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 466, "void _ACI_EventHandler(OI_BYTE_STREAM *, _Bool)");
          }
          off_1009816F0(v84, v87);
          goto LABEL_332;
        }
        if (!sub_10005549C())
          goto LABEL_329;
        if (*((_BYTE *)a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 461, "void _ACI_EventHandler(OI_BYTE_STREAM *, _Bool)");
          v93 = 0;
        }
        else
        {
          v93 = *((unsigned __int16 *)a1 + 5) - *((unsigned __int16 *)a1 + 6);
        }
        sub_100054530(" HCI_VSE_ENHANCED_LINK_QUALITY_STATS: Mode(%2x), INVALID length(%d), expected(%d), bytes (%d)", v85, v83, v87, v93);
        v98 = sub_1000544A0(0x54u);
        if (!os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
          goto LABEL_329;
        goto LABEL_328;
    }
  }
  if (v7 > 9471)
  {
    if (v7 <= 59667)
    {
      if (v7 == 9472)
      {
        v14 = (void (*)(uint64_t, uint64_t))qword_100981798;
        if (!qword_100981798)
          goto LABEL_329;
LABEL_168:
        v75 = v6 + v8;
        a2 = (v5 - v8);
LABEL_295:
        v14(v75, a2);
        goto LABEL_332;
      }
      if (v7 != 59659)
      {
        if (v7 != 59660)
          goto LABEL_329;
        if ((int)(v5 - v8) <= 1 || *((_BYTE *)a1 + 14) != 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v17 = *(_WORD *)(v6 + (unsigned __int16)(v3 + 2));
        *v4 = v3 + 4;
        if (v5 <= (unsigned __int16)(v3 + 4))
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        *v4 = v3 + 5;
        v18 = *(unsigned __int8 *)(v6 + (unsigned __int16)(v3 + 4));
        if (off_100981870)
          off_100981870(v17, v18);
        if (!(_DWORD)v18)
          goto LABEL_332;
        v19 = (void (*)(uint64_t, uint64_t))off_1009816A8;
        if (!off_1009816A8)
          goto LABEL_332;
        v20 = v17;
        v21 = v18;
LABEL_193:
        v19(v20, v21);
        goto LABEL_332;
      }
      if (v5 <= v8 || *((_BYTE *)a1 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      *v4 = v3 + 3;
      v76 = *(unsigned __int8 *)(v6 + (unsigned __int16)(v3 + 2));
      if (v76 != 2)
      {
        if (!sub_10005549C())
          goto LABEL_329;
        sub_100054530("HCI_VSE_BLE_SCAN_CORE_EVENT - unexpected subEvent %u", v76);
        v90 = sub_1000544A0(0x54u);
        if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
          goto LABEL_329;
        goto LABEL_328;
      }
      v9 = (void (*)(__int128 *))qword_100981808;
      if (!qword_100981808)
        goto LABEL_329;
      LODWORD(v102[1]) = 0;
      if ((int)(v5 - (unsigned __int16)(v3 + 3)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      LODWORD(v101) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 3));
      *v4 = v3 + 7;
      if ((int)(v5 - (unsigned __int16)(v3 + 7)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      DWORD1(v101) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 7));
      *v4 = v3 + 11;
      if ((int)(v5 - (unsigned __int16)(v3 + 11)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      DWORD2(v101) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 11));
      *v4 = v3 + 15;
      if ((int)(v5 - (unsigned __int16)(v3 + 15)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      HIDWORD(v101) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 15));
      *v4 = v3 + 19;
      if ((int)(v5 - (unsigned __int16)(v3 + 19)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      LODWORD(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 19));
      *v4 = v3 + 23;
      if ((int)(v5 - (unsigned __int16)(v3 + 23)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      DWORD1(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 23));
      *v4 = v3 + 27;
      if ((int)(v5 - (unsigned __int16)(v3 + 27)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      DWORD2(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 27));
      *v4 = v3 + 31;
      if ((int)(v5 - (unsigned __int16)(v3 + 31)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      HIDWORD(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 31));
      *v4 = v3 + 35;
      if (v5 <= (unsigned __int16)(v3 + 35))
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      *v4 = v3 + 36;
      LOBYTE(v102[1]) = *(_BYTE *)(v6 + (unsigned __int16)(v3 + 35));
LABEL_283:
      v67 = &v101;
LABEL_284:
      v9(v67);
      goto LABEL_332;
    }
    if (v7 == 59668)
    {
      v9 = (void (*)(__int128 *))qword_100981838;
      if (!qword_100981838)
        goto LABEL_329;
      *(_QWORD *)&v103 = 0;
      memset(v102, 0, sizeof(v102));
      v101 = 0u;
      if (v5 <= v8 || *((_BYTE *)a1 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      *v4 = v3 + 3;
      LOBYTE(v101) = *(_BYTE *)(v6 + (unsigned __int16)(v3 + 2));
      if ((int)(v5 - (unsigned __int16)(v3 + 3)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      DWORD1(v101) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 3));
      *v4 = v3 + 7;
      if (v5 <= (unsigned __int16)(v3 + 7))
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      *v4 = v3 + 8;
      BYTE8(v101) = *(_BYTE *)(v6 + (unsigned __int16)(v3 + 7));
      if ((int)(v5 - (unsigned __int16)(v3 + 8)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      HIDWORD(v101) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 8));
      *v4 = v3 + 12;
      if ((int)(v5 - (unsigned __int16)(v3 + 12)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      LODWORD(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 12));
      *v4 = v3 + 16;
      if ((int)(v5 - (unsigned __int16)(v3 + 16)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      DWORD1(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 16));
      *v4 = v3 + 20;
      if ((int)(v5 - (unsigned __int16)(v3 + 20)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      DWORD2(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 20));
      *v4 = v3 + 24;
      if ((int)(v5 - (unsigned __int16)(v3 + 24)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      HIDWORD(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 24));
      *v4 = v3 + 28;
      if ((int)(v5 - (unsigned __int16)(v3 + 28)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      LODWORD(v102[1]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 28));
      *v4 = v3 + 32;
      if ((int)(v5 - (unsigned __int16)(v3 + 32)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      DWORD1(v102[1]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 32));
      *v4 = v3 + 36;
      if ((int)(v5 - (unsigned __int16)(v3 + 36)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      DWORD2(v102[1]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 36));
      *v4 = v3 + 40;
      if ((int)(v5 - (unsigned __int16)(v3 + 40)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      HIDWORD(v102[1]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 40));
      *v4 = v3 + 44;
      if ((int)(v5 - (unsigned __int16)(v3 + 44)) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      LODWORD(v103) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 44));
      *v4 = v3 + 48;
      if (v5 <= (unsigned __int16)(v3 + 48))
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      *v4 = v3 + 49;
      BYTE4(v103) = *(_BYTE *)(v6 + (unsigned __int16)(v3 + 48));
      if (v5 <= (unsigned __int16)(v3 + 49))
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      *v4 = v3 + 50;
      BYTE5(v103) = *(_BYTE *)(v6 + (unsigned __int16)(v3 + 49));
      if (v5 <= (unsigned __int16)(v3 + 50))
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      *v4 = v3 + 51;
      BYTE6(v103) = *(_BYTE *)(v6 + (unsigned __int16)(v3 + 50));
      goto LABEL_283;
    }
    if (v7 != 59671)
    {
      if (v7 != 59672)
        goto LABEL_329;
      v9 = (void (*)(__int128 *))qword_1009817F8;
      if (!qword_1009817F8)
        goto LABEL_329;
      v101 = 0u;
      memset(v102, 0, 28);
      if (v5 <= v8)
      {
        *((_BYTE *)a1 + 15) = 1;
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 905, "void _ACI_EventHandler(OI_BYTE_STREAM *, _Bool)");
      }
      else
      {
        *v4 = v3 + 3;
        LOBYTE(v101) = *(_BYTE *)(v6 + (unsigned __int16)(v3 + 2));
        if ((int)(v5 - (unsigned __int16)(v3 + 3)) > 3)
        {
          DWORD1(v101) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 3));
          *v4 = v3 + 7;
          if ((int)(v5 - (unsigned __int16)(v3 + 7)) <= 3)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          DWORD2(v101) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 7));
          *v4 = v3 + 11;
          if ((int)(v5 - (unsigned __int16)(v3 + 11)) <= 3)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          HIDWORD(v101) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 11));
          *v4 = v3 + 15;
          if ((int)(v5 - (unsigned __int16)(v3 + 15)) <= 3)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          LODWORD(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 15));
          *v4 = v3 + 19;
          if ((int)(v5 - (unsigned __int16)(v3 + 19)) <= 3)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          DWORD1(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 19));
          *v4 = v3 + 23;
          if ((int)(v5 - (unsigned __int16)(v3 + 23)) <= 3)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          DWORD2(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 23));
          *v4 = v3 + 27;
          if ((int)(v5 - (unsigned __int16)(v3 + 27)) <= 3)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          HIDWORD(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 27));
          *v4 = v3 + 31;
          if ((int)(v5 - (unsigned __int16)(v3 + 31)) <= 3)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          LODWORD(v102[1]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 31));
          *v4 = v3 + 35;
          if ((int)(v5 - (unsigned __int16)(v3 + 35)) <= 3)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          DWORD1(v102[1]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 35));
          *v4 = v3 + 39;
          if ((int)(v5 - (unsigned __int16)(v3 + 39)) <= 3)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          DWORD2(v102[1]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 39));
          v23 = v3 + 43;
          goto LABEL_282;
        }
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    v9 = (void (*)(__int128 *))qword_1009817F0;
    if (!qword_1009817F0)
      goto LABEL_329;
    v116 = 0;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    v101 = 0u;
    memset(v102, 0, sizeof(v102));
    if ((int)(v5 - v8) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v101) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 2));
    *v4 = v3 + 6;
    if ((int)(v5 - (unsigned __int16)(v3 + 6)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v101) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 6));
    *v4 = v3 + 10;
    if ((int)(v5 - (unsigned __int16)(v3 + 10)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v101) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 10));
    *v4 = v3 + 14;
    if ((int)(v5 - (unsigned __int16)(v3 + 14)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v101) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 14));
    *v4 = v3 + 18;
    if ((int)(v5 - (unsigned __int16)(v3 + 18)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 18));
    *v4 = v3 + 22;
    if ((int)(v5 - (unsigned __int16)(v3 + 22)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 22));
    *v4 = v3 + 26;
    if ((int)(v5 - (unsigned __int16)(v3 + 26)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 26));
    *v4 = v3 + 30;
    if ((int)(v5 - (unsigned __int16)(v3 + 30)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v102[0]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 30));
    *v4 = v3 + 34;
    if ((int)(v5 - (unsigned __int16)(v3 + 34)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v102[1]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 34));
    *v4 = v3 + 38;
    if ((int)(v5 - (unsigned __int16)(v3 + 38)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v102[1]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 38));
    *v4 = v3 + 42;
    v82 = v5 - (unsigned __int16)(v3 + 42);
    if ((v82 & 0x1FFFE) == 0)
      goto LABEL_283;
    if (v82 <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v102[1]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 42));
    *v4 = v3 + 46;
    if ((int)(v5 - (unsigned __int16)(v3 + 46)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v102[1]) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 46));
    *v4 = v3 + 50;
    if ((int)(v5 - (unsigned __int16)(v3 + 50)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v103) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 50));
    *v4 = v3 + 54;
    if ((int)(v5 - (unsigned __int16)(v3 + 54)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v103) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 54));
    *v4 = v3 + 58;
    if ((int)(v5 - (unsigned __int16)(v3 + 58)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v103) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 58));
    *v4 = v3 + 62;
    if ((int)(v5 - (unsigned __int16)(v3 + 62)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v103) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 62));
    *v4 = v3 + 66;
    if ((int)(v5 - (unsigned __int16)(v3 + 66)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v104) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 66));
    *v4 = v3 + 70;
    if ((int)(v5 - (unsigned __int16)(v3 + 70)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v104) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 70));
    *v4 = v3 + 74;
    if ((int)(v5 - (unsigned __int16)(v3 + 74)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v104) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 74));
    *v4 = v3 + 78;
    if ((int)(v5 - (unsigned __int16)(v3 + 78)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v104) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 78));
    *v4 = v3 + 82;
    if ((int)(v5 - (unsigned __int16)(v3 + 82)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v105) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 82));
    *v4 = v3 + 86;
    if ((int)(v5 - (unsigned __int16)(v3 + 86)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v105) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 86));
    *v4 = v3 + 90;
    if ((int)(v5 - (unsigned __int16)(v3 + 90)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v105) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 90));
    *v4 = v3 + 94;
    if ((int)(v5 - (unsigned __int16)(v3 + 94)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v105) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 94));
    *v4 = v3 + 98;
    if ((int)(v5 - (unsigned __int16)(v3 + 98)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v106) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 98));
    *v4 = v3 + 102;
    if ((int)(v5 - (unsigned __int16)(v3 + 102)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v106) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 102));
    *v4 = v3 + 106;
    if ((int)(v5 - (unsigned __int16)(v3 + 106)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v106) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 106));
    *v4 = v3 + 110;
    if ((int)(v5 - (unsigned __int16)(v3 + 110)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v106) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 110));
    *v4 = v3 + 114;
    if ((int)(v5 - (unsigned __int16)(v3 + 114)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v107) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 114));
    *v4 = v3 + 118;
    if ((int)(v5 - (unsigned __int16)(v3 + 118)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v107) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 118));
    *v4 = v3 + 122;
    if ((int)(v5 - (unsigned __int16)(v3 + 122)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v107) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 122));
    *v4 = v3 + 126;
    if ((int)(v5 - (unsigned __int16)(v3 + 126)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v107) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 126));
    *v4 = v3 + 130;
    if ((int)(v5 - (unsigned __int16)(v3 + 130)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v108) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 130));
    *v4 = v3 + 134;
    if ((int)(v5 - (unsigned __int16)(v3 + 134)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v108) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 134));
    *v4 = v3 + 138;
    if ((int)(v5 - (unsigned __int16)(v3 + 138)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v108) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 138));
    *v4 = v3 + 142;
    if ((int)(v5 - (unsigned __int16)(v3 + 142)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v108) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 142));
    *v4 = v3 + 146;
    if ((int)(v5 - (unsigned __int16)(v3 + 146)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v109) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 146));
    *v4 = v3 + 150;
    if ((int)(v5 - (unsigned __int16)(v3 + 150)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v109) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 150));
    *v4 = v3 + 154;
    if ((int)(v5 - (unsigned __int16)(v3 + 154)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v109) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 154));
    *v4 = v3 + 158;
    if ((int)(v5 - (unsigned __int16)(v3 + 158)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v109) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 158));
    *v4 = v3 + 162;
    if ((int)(v5 - (unsigned __int16)(v3 + 162)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v110) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 162));
    *v4 = v3 + 166;
    if ((int)(v5 - (unsigned __int16)(v3 + 166)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v110) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 166));
    *v4 = v3 + 170;
    if ((int)(v5 - (unsigned __int16)(v3 + 170)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v110) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 170));
    *v4 = v3 + 174;
    if ((int)(v5 - (unsigned __int16)(v3 + 174)) <= 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v110) = *(unsigned __int16 *)(v6 + (unsigned __int16)(v3 + 174));
    *v4 = v3 + 176;
    if ((int)(v5 - (unsigned __int16)(v3 + 176)) <= 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v111) = *(unsigned __int16 *)(v6 + (unsigned __int16)(v3 + 176));
    *v4 = v3 + 178;
    if ((int)(v5 - (unsigned __int16)(v3 + 178)) <= 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v111) = *(unsigned __int16 *)(v6 + (unsigned __int16)(v3 + 178));
    *v4 = v3 + 180;
    if ((int)(v5 - (unsigned __int16)(v3 + 180)) <= 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v111) = *(unsigned __int16 *)(v6 + (unsigned __int16)(v3 + 180));
    *v4 = v3 + 182;
    if ((int)(v5 - (unsigned __int16)(v3 + 182)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v111) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 182));
    *v4 = v3 + 186;
    if ((int)(v5 - (unsigned __int16)(v3 + 186)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v112) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 186));
    *v4 = v3 + 190;
    if ((int)(v5 - (unsigned __int16)(v3 + 190)) <= 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v112) = *(unsigned __int16 *)(v6 + (unsigned __int16)(v3 + 190));
    *v4 = v3 + 192;
    if ((int)(v5 - (unsigned __int16)(v3 + 192)) <= 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v112) = *(unsigned __int16 *)(v6 + (unsigned __int16)(v3 + 192));
    *v4 = v3 + 194;
    if ((int)(v5 - (unsigned __int16)(v3 + 194)) <= 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v112) = *(unsigned __int16 *)(v6 + (unsigned __int16)(v3 + 194));
    *v4 = v3 + 196;
    if ((int)(v5 - (unsigned __int16)(v3 + 196)) <= 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v113) = *(unsigned __int16 *)(v6 + (unsigned __int16)(v3 + 196));
    *v4 = v3 + 198;
    if ((int)(v5 - (unsigned __int16)(v3 + 198)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v113) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 198));
    *v4 = v3 + 202;
    if ((int)(v5 - (unsigned __int16)(v3 + 202)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v113) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 202));
    *v4 = v3 + 206;
    if ((int)(v5 - (unsigned __int16)(v3 + 206)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v113) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 206));
    *v4 = v3 + 210;
    if ((int)(v5 - (unsigned __int16)(v3 + 210)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v114) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 210));
    *v4 = v3 + 214;
    if ((int)(v5 - (unsigned __int16)(v3 + 214)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v114) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 214));
    *v4 = v3 + 218;
    if ((int)(v5 - (unsigned __int16)(v3 + 218)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v114) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 218));
    *v4 = v3 + 222;
    if ((int)(v5 - (unsigned __int16)(v3 + 222)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v114) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 222));
    *v4 = v3 + 226;
    if ((int)(v5 - (unsigned __int16)(v3 + 226)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    LODWORD(v115) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 226));
    *v4 = v3 + 230;
    if ((int)(v5 - (unsigned __int16)(v3 + 230)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD1(v115) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 230));
    *v4 = v3 + 234;
    if ((int)(v5 - (unsigned __int16)(v3 + 234)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    DWORD2(v115) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 234));
    *v4 = v3 + 238;
    if ((int)(v5 - (unsigned __int16)(v3 + 238)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    HIDWORD(v115) = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 238));
    *v4 = v3 + 242;
    if ((int)(v5 - (unsigned __int16)(v3 + 242)) <= 3 || *((_BYTE *)a1 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    v116 = *(_DWORD *)(v6 + (unsigned __int16)(v3 + 242));
    v23 = v3 + 246;
LABEL_282:
    *v4 = v23;
    goto LABEL_283;
  }
  if (v7 > 6399)
  {
    if (v7 == 6400)
    {
      if (!byte_100981A18)
        goto LABEL_329;
      if ((int)(v5 - v8) <= 1 || *((_BYTE *)a1 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      *v4 = v3 + 4;
      if (v5 - (unint64_t)(unsigned __int16)(v3 + 4) <= 0x1D)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      v77 = (__int128 *)(v6 + (unsigned __int16)(v3 + 4));
      v78 = *v77;
      v79 = *((_QWORD *)v77 + 2);
      v80 = *((_DWORD *)v77 + 6);
      BYTE12(v102[0]) = *((_WORD *)v77 + 14);
      DWORD2(v102[0]) = v80;
      *(_QWORD *)&v102[0] = v79;
      v101 = v78;
      *v4 = v3 + 34;
      BYTE13(v102[0]) = 0;
      sub_1002534F4();
      goto LABEL_332;
    }
    if (v7 != 8960)
    {
      if (v7 != 9216)
        goto LABEL_329;
      if ((int)(v5 - v8) <= 1 || *((_BYTE *)a1 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      v22 = *(_WORD *)(v6 + (unsigned __int16)(v3 + 2));
      *v4 = v3 + 4;
      if (v5 <= (unsigned __int16)(v3 + 4))
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      *v4 = v3 + 5;
      if (off_100981730)
        off_100981730(v22, *(unsigned __int8 *)(v6 + (unsigned __int16)(v3 + 4)));
      goto LABEL_332;
    }
    if ((int)(v5 - v8) <= 1 || *((_BYTE *)a1 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    v81 = *(_WORD *)(v6 + (unsigned __int16)(v3 + 2));
    *v4 = v3 + 4;
    if ((int)(v5 - (unsigned __int16)(v3 + 4)) <= 3)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    v21 = *(unsigned int *)(v6 + (unsigned __int16)(v3 + 4));
    *v4 = v3 + 8;
    v19 = (void (*)(uint64_t, uint64_t))qword_100981738;
    if (!qword_100981738)
      goto LABEL_332;
    v20 = v81;
    goto LABEL_193;
  }
  if (v7 == 2048)
  {
    if ((int)(v5 - v8) <= 1 || *((_BYTE *)a1 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    v68 = (unsigned __int8 *)(v6 + v8);
    v69 = *v68;
    v70 = v68[1];
    *v4 = v3 + 4;
    if ((int)(v5 - (unsigned __int16)(v3 + 4)) <= 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    *v4 = v3 + 6;
    if (!sub_10019ACEC(v69 | (v70 << 8)))
      goto LABEL_329;
    if (off_100981688)
      off_100981688();
    goto LABEL_332;
  }
  if (v7 != 4866)
  {
    if (v7 != 5632)
      goto LABEL_329;
    if (v5 <= v8 || *((_BYTE *)a1 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    v11 = v3 + 3;
    *v4 = v11;
    if (*(_BYTE *)(v6 + v8) != 1)
      goto LABEL_329;
    v12 = v5 - v11;
    if ((v12 & 0x1FFFE) != 0)
    {
      if (off_100981690)
        off_100981690(v6 + v11, (v12 >> 1), v6 + v11 + (unsigned __int16)(v12 >> 1), (v12 >> 1));
      goto LABEL_332;
    }
    if (!sub_10005549C())
      goto LABEL_329;
    sub_100054530("LostDevice size is zero");
    v94 = sub_1000544A0(0x54u);
    if (!os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
      goto LABEL_329;
LABEL_328:
    sub_1006CE7A4();
    goto LABEL_329;
  }
  v71 = (void (*)(_QWORD, BOOL))off_1009819E8;
  if (!off_1009819E8)
    goto LABEL_329;
  if ((int)(v5 - v8) <= 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v72 = (unsigned __int8 *)(v6 + v8);
  v73 = *v72;
  v74 = v72[1];
  *v4 = v3 + 4;
  if (v5 <= (unsigned __int16)(v3 + 4))
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  *v4 = v3 + 5;
  v71(v73 | (v74 << 8), *(_BYTE *)(v6 + (unsigned __int16)(v3 + 4)) != 0);
LABEL_332:
  if (*((_BYTE *)a1 + 15))
    sub_100112D60(136);
}

uint64_t sub_1001225B8(void (*a1)(_QWORD, uint64_t))
{
  a1(0, 1);
  return 0;
}

uint64_t sub_1001225DC(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1711, "OI_STATUS _ACI_OlympicWriteLESettings(uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = a1;
        return sub_10004C8A0(64941, v9, BYTE4(v10), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_1001226A8(_WORD *a1, char a2, char a3, uint64_t (*a4)())
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int16 v12;
  __int16 v13;
  unsigned __int16 v14;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  if (!sub_10004BC7C(&v16))
  {
    if (HIBYTE(v17))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3729, "OI_STATUS _ACI_OlympicEnableLEA(OI_HCI_CONNECTION_HANDLE, uint8_t, _Bool, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v17) - WORD2(v17) > 3 && BYTE6(v17) == 2)
    {
      *(_DWORD *)(v16 + WORD2(v17)) = 0;
      v12 = WORD2(v17) + 4;
      WORD2(v17) += 4;
      if (HIBYTE(v17))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3730, "OI_STATUS _ACI_OlympicEnableLEA(OI_HCI_CONNECTION_HANDLE, uint8_t, _Bool, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v17) > v12 && BYTE6(v17) == 2)
      {
        *(_BYTE *)(v16 + v12) = 0;
        v13 = WORD2(v17);
        v14 = ++WORD2(v17);
        if (HIBYTE(v17))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3731, "OI_STATUS _ACI_OlympicEnableLEA(OI_HCI_CONNECTION_HANDLE, uint8_t, _Bool, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v17) > v14 && BYTE6(v17) == 2)
        {
          WORD2(v17) = v13 + 2;
          *(_BYTE *)(v16 + v14) = a3 | (16 * a2);
          if (HIBYTE(v17))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3732, "OI_STATUS _ACI_OlympicEnableLEA(OI_HCI_CONNECTION_HANDLE, uint8_t, _Bool, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v17) - WORD2(v17) > 1 && BYTE6(v17) == 2)
          {
            *(_WORD *)(v16 + WORD2(v17)) = *a1;
            v11 = BYTE4(v17) + 2;
            WORD2(v17) += 2;
            return sub_10004C8A0(65456, v16, v11, a4, (uint64_t)sub_10011ED60, v8, v9, v10);
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  v11 = BYTE4(v17);
  return sub_10004C8A0(65456, v16, v11, a4, (uint64_t)sub_10011ED60, v8, v9, v10);
}

uint64_t sub_100122924(int a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (a1 == 255)
    return 101;
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1077, "OI_STATUS _ACI_OlympicWriteLeNumOfCompletedPackets(uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = a1;
        if (HIBYTE(v10))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1078, "OI_STATUS _ACI_OlympicWriteLeNumOfCompletedPackets(uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v10) - WORD2(v10) > 1 && BYTE6(v10) == 2)
        {
          *(_BYTE *)(v9 + WORD2(v10)) = -1;
          *(_BYTE *)(v9 + WORD2(v10) + 1) = -1;
          return sub_10004C8A0(65277, v9, (BYTE4(v10) + 2), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100122A94(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1727, "OI_STATUS _ACI_OlympicWriteTxRxPairsMax(uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = a1;
        return sub_10004C8A0(64838, v9, BYTE4(v10), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100122B60(_WORD *a1, char a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  result = sub_10004BC7C(&v12);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v13))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1695, "OI_STATUS _ACI_Olympic300KhzFreqMode(OI_HCI_CONNECTION_HANDLE, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v13) - WORD2(v13) > 1 && BYTE6(v13) == 2)
    {
      *(_WORD *)(v12 + WORD2(v13)) = *a1;
      v10 = WORD2(v13);
      v11 = WORD2(v13) + 2;
      WORD2(v13) += 2;
      if (HIBYTE(v13))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1696, "OI_STATUS _ACI_Olympic300KhzFreqMode(OI_HCI_CONNECTION_HANDLE, uint8_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v13) > v11 && BYTE6(v13) == 2)
      {
        WORD2(v13) = v10 + 3;
        *(_BYTE *)(v12 + v11) = a2;
        return sub_10004C8A0(65446, v12, BYTE4(v13), a3, (uint64_t)sub_10011ED60, v7, v8, v9);
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100122CD0(unsigned int a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = sub_10004BC7C(&v10);
  if (a1 > 4)
    return 101;
  if (!(_DWORD)result)
  {
    if (HIBYTE(v11))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 988, "OI_STATUS _ACI_OlympicWriteNumOfCompletedPackets(uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v11) - WORD2(v11) > 1 && BYTE6(v11) == 2)
    {
      *(_BYTE *)(v10 + WORD2(v11)) = -1;
      *(_BYTE *)(v10 + WORD2(v11) + 1) = -1;
      v8 = WORD2(v11);
      v9 = WORD2(v11) + 2;
      WORD2(v11) += 2;
      if (HIBYTE(v11))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 989, "OI_STATUS _ACI_OlympicWriteNumOfCompletedPackets(uint8_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v11) > v9 && BYTE6(v11) == 2)
      {
        WORD2(v11) = v8 + 3;
        *(_BYTE *)(v10 + v9) = a1;
        if (HIBYTE(v11))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 990, "OI_STATUS _ACI_OlympicWriteNumOfCompletedPackets(uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v11) - WORD2(v11) > 1 && BYTE6(v11) == 2)
        {
          *(_BYTE *)(v10 + WORD2(v11)) = -1;
          *(_BYTE *)(v10 + WORD2(v11) + 1) = -1;
          WORD2(v11) += 2;
          return sub_10004C8A0(64893, v10, BYTE4(v11), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100122ED4(char a1, _WORD *a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  result = sub_10004BC7C(&v11);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v12))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1007, "OI_STATUS _ACI_OlympicWriteDisableFEC(_Bool, OI_HCI_CONNECTION_HANDLE, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v10 = WORD2(v12);
      if (WORD1(v12) > WORD2(v12) && BYTE6(v12) == 2)
      {
        ++WORD2(v12);
        *(_BYTE *)(v11 + v10) = a1;
        if (HIBYTE(v12))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1008, "OI_STATUS _ACI_OlympicWriteDisableFEC(_Bool, OI_HCI_CONNECTION_HANDLE, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v12) - WORD2(v12) > 1 && BYTE6(v12) == 2)
        {
          *(_WORD *)(v11 + WORD2(v12)) = *a2;
          WORD2(v12) += 2;
          return sub_10004C8A0(64872, v11, BYTE4(v12), a3, (uint64_t)sub_10011ED60, v7, v8, v9);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100123044(int a1, char a2, uint64_t a3, uint64_t (*a4)())
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  result = sub_10004BC7C(&v12);
  if (a1 && !(_DWORD)result)
  {
    if (HIBYTE(v13))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1518, "OI_STATUS _ACI_OlympicCountryCodeSel(uint8_t, uint8_t, uint8_t, BT_VSC_BYTESTREAM_CB)");
    }
    else
    {
      v11 = WORD2(v13);
      if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
      {
        ++WORD2(v13);
        *(_BYTE *)(v12 + v11) = a2;
        return sub_10004C8A0(64817, v12, BYTE4(v13), a4, (uint64_t)sub_10011ED60, v8, v9, v10);
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100123120(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = sub_10004BC7C(&v10);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v11))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1679, "OI_STATUS _ACI_LEMetaSetZoneRSSI(uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v11);
      if (WORD1(v11) > WORD2(v11) && BYTE6(v11) == 2)
      {
        ++WORD2(v11);
        *(_BYTE *)(v10 + v8) = a1;
        if (HIBYTE(v11))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1680, "OI_STATUS _ACI_LEMetaSetZoneRSSI(uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v11) - WORD2(v11) > 3 && BYTE6(v11) == 2)
        {
          *(_BYTE *)(v10 + WORD2(v11)) = -1;
          *(_BYTE *)(v10 + WORD2(v11) + 1) = -1;
          *(_BYTE *)(v10 + WORD2(v11) + 2) = -1;
          *(_BYTE *)(v10 + WORD2(v11) + 3) = -1;
          v9 = WORD2(v11) + 4;
          WORD2(v11) += 4;
          if (HIBYTE(v11))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1681, "OI_STATUS _ACI_LEMetaSetZoneRSSI(uint8_t, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v11) - v9 > 3 && BYTE6(v11) == 2)
          {
            *(_BYTE *)(v10 + v9) = -1;
            *(_BYTE *)(v10 + WORD2(v11) + 1) = -1;
            *(_BYTE *)(v10 + WORD2(v11) + 2) = -1;
            *(_BYTE *)(v10 + WORD2(v11) + 3) = -1;
            WORD2(v11) += 4;
            return sub_10004C8A0(64984, v10, BYTE4(v11), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100123350(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1744, "OI_STATUS _ACI_OlympicSetHiPrioRSSI(uint32_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = -a1;
        return sub_10004C8A0(64855, v9, BYTE4(v10), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100123420(_WORD *a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5, uint64_t (*a6)())
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  result = sub_10004BC7C(&v20);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v21))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1779, "OI_STATUS _ACI_OlympicLESetDataLengthExtended(OI_HCI_CONNECTION_HANDLE, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v21) - WORD2(v21) > 1 && BYTE6(v21) == 2)
    {
      *(_WORD *)(v20 + WORD2(v21)) = *a1;
      v16 = WORD2(v21) + 2;
      WORD2(v21) += 2;
      if (HIBYTE(v21))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1780, "OI_STATUS _ACI_OlympicLESetDataLengthExtended(OI_HCI_CONNECTION_HANDLE, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v21) - v16 > 1 && BYTE6(v21) == 2)
      {
        *(_BYTE *)(v20 + v16) = a2;
        *(_BYTE *)(v20 + WORD2(v21) + 1) = HIBYTE(a2);
        v17 = WORD2(v21) + 2;
        WORD2(v21) += 2;
        if (HIBYTE(v21))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1781, "OI_STATUS _ACI_OlympicLESetDataLengthExtended(OI_HCI_CONNECTION_HANDLE, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v21) - v17 > 1 && BYTE6(v21) == 2)
        {
          *(_BYTE *)(v20 + v17) = a3;
          *(_BYTE *)(v20 + WORD2(v21) + 1) = HIBYTE(a3);
          v18 = WORD2(v21) + 2;
          WORD2(v21) += 2;
          if (HIBYTE(v21))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1782, "OI_STATUS _ACI_OlympicLESetDataLengthExtended(OI_HCI_CONNECTION_HANDLE, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v21) - v18 > 1 && BYTE6(v21) == 2)
          {
            *(_BYTE *)(v20 + v18) = a4;
            *(_BYTE *)(v20 + WORD2(v21) + 1) = HIBYTE(a4);
            v19 = WORD2(v21) + 2;
            WORD2(v21) += 2;
            if (HIBYTE(v21))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1783, "OI_STATUS _ACI_OlympicLESetDataLengthExtended(OI_HCI_CONNECTION_HANDLE, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v21) - v19 > 1 && BYTE6(v21) == 2)
            {
              *(_BYTE *)(v20 + v19) = a5;
              *(_BYTE *)(v20 + WORD2(v21) + 1) = HIBYTE(a5);
              WORD2(v21) += 2;
              return sub_10004C8A0(64835, v20, BYTE4(v21), a6, (uint64_t)sub_10011ED60, v13, v14, v15);
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012377C(__int16 a1, __int16 a2, __int16 a3, __int16 a4, uint64_t (*a5)())
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  result = sub_10004BC7C(&v17);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v18))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1798, "OI_STATUS _ACI_OlympicLEWriteSuggestedDefaultExtended(uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v18) - WORD2(v18) > 1 && BYTE6(v18) == 2)
    {
      *(_WORD *)(v17 + WORD2(v18)) = a1;
      v14 = WORD2(v18) + 2;
      WORD2(v18) += 2;
      if (HIBYTE(v18))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1799, "OI_STATUS _ACI_OlympicLEWriteSuggestedDefaultExtended(uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v18) - v14 > 1 && BYTE6(v18) == 2)
      {
        *(_BYTE *)(v17 + v14) = a2;
        *(_BYTE *)(v17 + WORD2(v18) + 1) = HIBYTE(a2);
        v15 = WORD2(v18) + 2;
        WORD2(v18) += 2;
        if (HIBYTE(v18))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1800, "OI_STATUS _ACI_OlympicLEWriteSuggestedDefaultExtended(uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v18) - v15 > 1 && BYTE6(v18) == 2)
        {
          *(_BYTE *)(v17 + v15) = a3;
          *(_BYTE *)(v17 + WORD2(v18) + 1) = HIBYTE(a3);
          v16 = WORD2(v18) + 2;
          WORD2(v18) += 2;
          if (HIBYTE(v18))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1801, "OI_STATUS _ACI_OlympicLEWriteSuggestedDefaultExtended(uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v18) - v16 > 1 && BYTE6(v18) == 2)
          {
            *(_BYTE *)(v17 + v16) = a4;
            *(_BYTE *)(v17 + WORD2(v18) + 1) = HIBYTE(a4);
            WORD2(v18) += 2;
            return sub_10004C8A0(64837, v17, BYTE4(v18), a5, (uint64_t)sub_10011ED60, v11, v12, v13);
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100123A3C(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  result = sub_10004BC7C(&v6);
  if (!(_DWORD)result)
    return sub_10004C8A0(64836, v6, BYTE4(v7), a1, (uint64_t)sub_10011ED60, v3, v4, v5);
  return result;
}

uint64_t sub_100123A8C(_WORD *a1, int a2, unsigned int a3, uint64_t (*a4)())
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  double v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  result = sub_10004BC7C(&v16);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v17))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1762, "OI_STATUS _ACI_OlympicSetConnectionDescriptor(OI_HCI_CONNECTION_HANDLE, uint32_t, uint16_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v12 = WORD2(v17);
      if (WORD1(v17) > WORD2(v17) && BYTE6(v17) == 2)
      {
        ++WORD2(v17);
        *(_BYTE *)(v16 + v12) = 1;
        if (HIBYTE(v17))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1763, "OI_STATUS _ACI_OlympicSetConnectionDescriptor(OI_HCI_CONNECTION_HANDLE, uint32_t, uint16_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v17) - WORD2(v17) > 1 && BYTE6(v17) == 2)
        {
          *(_WORD *)(v16 + WORD2(v17)) = *a1;
          v13 = WORD2(v17) + 2;
          WORD2(v17) += 2;
          if (HIBYTE(v17))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1764, "OI_STATUS _ACI_OlympicSetConnectionDescriptor(OI_HCI_CONNECTION_HANDLE, uint32_t, uint16_t, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v17) - v13 > 3 && BYTE6(v17) == 2)
          {
            *(_BYTE *)(v16 + v13) = a2;
            *(_BYTE *)(v16 + WORD2(v17) + 1) = BYTE1(a2);
            *(_BYTE *)(v16 + WORD2(v17) + 2) = BYTE2(a2);
            *(_BYTE *)(v16 + WORD2(v17) + 3) = HIBYTE(a2);
            v14 = WORD2(v17) + 4;
            WORD2(v17) += 4;
            if (HIBYTE(v17))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1765, "OI_STATUS _ACI_OlympicSetConnectionDescriptor(OI_HCI_CONNECTION_HANDLE, uint32_t, uint16_t, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v17) - v14 > 1 && BYTE6(v17) == 2)
            {
              v15 = (double)a3 * 1.25;
              *(_BYTE *)(v16 + v14) = (int)v15;
              *(_BYTE *)(v16 + WORD2(v17) + 1) = (unsigned __int16)(int)v15 >> 8;
              WORD2(v17) += 2;
              return sub_10004C8A0(65474, v16, BYTE4(v17), a4, (uint64_t)sub_10011ED60, v9, v10, v11);
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100123D64(char a1, char a2, char a3, char a4, char a5, __int16 a6, __int16 a7, uint64_t (*a8)())
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  result = sub_10004BC7C(&v26);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v27))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2147, "OI_STATUS _ACI_OlympicLESetScanEnable(const uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v20 = WORD2(v27);
      if (WORD1(v27) > WORD2(v27) && BYTE6(v27) == 2)
      {
        ++WORD2(v27);
        *(_BYTE *)(v26 + v20) = a1;
        if (HIBYTE(v27))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2148, "OI_STATUS _ACI_OlympicLESetScanEnable(const uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v21 = WORD2(v27);
          if (WORD1(v27) > WORD2(v27) && BYTE6(v27) == 2)
          {
            ++WORD2(v27);
            *(_BYTE *)(v26 + v21) = a2;
            if (HIBYTE(v27))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2149, "OI_STATUS _ACI_OlympicLESetScanEnable(const uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
            }
            else
            {
              v22 = WORD2(v27);
              if (WORD1(v27) > WORD2(v27) && BYTE6(v27) == 2)
              {
                ++WORD2(v27);
                *(_BYTE *)(v26 + v22) = a3;
                if (HIBYTE(v27))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2150, "OI_STATUS _ACI_OlympicLESetScanEnable(const uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
                }
                else
                {
                  v23 = WORD2(v27);
                  if (WORD1(v27) > WORD2(v27) && BYTE6(v27) == 2)
                  {
                    ++WORD2(v27);
                    *(_BYTE *)(v26 + v23) = a4;
                    if (HIBYTE(v27))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2151, "OI_STATUS _ACI_OlympicLESetScanEnable(const uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
                    }
                    else
                    {
                      v24 = WORD2(v27);
                      if (WORD1(v27) > WORD2(v27) && BYTE6(v27) == 2)
                      {
                        ++WORD2(v27);
                        *(_BYTE *)(v26 + v24) = a5;
                        if (HIBYTE(v27))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2152, "OI_STATUS _ACI_OlympicLESetScanEnable(const uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
                        }
                        else if (WORD1(v27) - WORD2(v27) > 1 && BYTE6(v27) == 2)
                        {
                          *(_WORD *)(v26 + WORD2(v27)) = a7;
                          v25 = WORD2(v27) + 2;
                          WORD2(v27) += 2;
                          if (HIBYTE(v27))
                          {
                            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2153, "OI_STATUS _ACI_OlympicLESetScanEnable(const uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
                          }
                          else if (WORD1(v27) - v25 > 1 && BYTE6(v27) == 2)
                          {
                            *(_BYTE *)(v26 + v25) = a6;
                            *(_BYTE *)(v26 + WORD2(v27) + 1) = HIBYTE(a6);
                            WORD2(v27) += 2;
                            return sub_10004C8A0(65342, v26, BYTE4(v27), a8, (uint64_t)sub_10011ED60, v17, v18, v19);
                          }
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100124168(char a1, char a2, unsigned __int8 a3, char *a4, _WORD *a5, _BYTE *a6, char a7, char a8, _BYTE *a9, uint64_t a10, uint64_t (*a11)())
{
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned __int16 v34;
  unsigned __int16 v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;

  v37 = 0;
  v38 = 0;
  result = sub_10004BC7C(&v37);
  if ((_DWORD)result)
    return result;
  LOBYTE(v23) = 0;
  v25 = 3;
  v26 = a3;
  do
  {
    LOBYTE(v23) = (v26 & 1) + v23;
    v26 >>= 1;
    --v25;
  }
  while (v25);
  if (HIBYTE(v38))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2181, "OI_STATUS _ACI_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_47;
  }
  v27 = WORD2(v38);
  if (WORD1(v38) <= WORD2(v38) || BYTE6(v38) != 2)
LABEL_47:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v38);
  *(_BYTE *)(v37 + v27) = a1;
  if (HIBYTE(v38))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2182, "OI_STATUS _ACI_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_49;
  }
  v28 = WORD2(v38);
  if (WORD1(v38) <= WORD2(v38) || BYTE6(v38) != 2)
LABEL_49:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v38);
  *(_BYTE *)(v37 + v28) = a2;
  if (HIBYTE(v38))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2183, "OI_STATUS _ACI_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_51;
  }
  v29 = WORD2(v38);
  if (WORD1(v38) <= WORD2(v38) || BYTE6(v38) != 2)
LABEL_51:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v38);
  *(_BYTE *)(v37 + v29) = a3;
  if (HIBYTE(v38))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2184, "OI_STATUS _ACI_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_53;
  }
  v30 = WORD2(v38);
  if (WORD1(v38) <= WORD2(v38) || BYTE6(v38) != 2)
LABEL_53:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v38);
  *(_BYTE *)(v37 + v30) = a7;
  if (HIBYTE(v38))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2185, "OI_STATUS _ACI_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_55;
  }
  v31 = WORD2(v38);
  if (WORD1(v38) <= WORD2(v38) || BYTE6(v38) != 2)
LABEL_55:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v38);
  *(_BYTE *)(v37 + v31) = a8;
  if ((_BYTE)v23)
  {
    v23 = v23;
    while (!HIBYTE(v38))
    {
      v32 = WORD2(v38);
      if (WORD1(v38) <= WORD2(v38) || BYTE6(v38) != 2)
        goto LABEL_39;
      v33 = *a4;
      ++WORD2(v38);
      *(_BYTE *)(v37 + v32) = v33;
      if (HIBYTE(v38))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2189, "OI_STATUS _ACI_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
LABEL_41:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      if (WORD1(v38) - WORD2(v38) <= 1 || BYTE6(v38) != 2)
        goto LABEL_41;
      *(_WORD *)(v37 + WORD2(v38)) = *a5;
      v34 = WORD2(v38) + 2;
      WORD2(v38) += 2;
      if (HIBYTE(v38))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2190, "OI_STATUS _ACI_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
LABEL_43:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      if (WORD1(v38) - v34 <= 1 || BYTE6(v38) != 2)
        goto LABEL_43;
      *(_BYTE *)(v37 + v34) = *a6;
      *(_BYTE *)(v37 + WORD2(v38) + 1) = a6[1];
      v35 = WORD2(v38) + 2;
      WORD2(v38) += 2;
      if (HIBYTE(v38))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2191, "OI_STATUS _ACI_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
LABEL_45:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      if (WORD1(v38) - v35 <= 1 || BYTE6(v38) != 2)
        goto LABEL_45;
      *(_BYTE *)(v37 + v35) = *a9;
      *(_BYTE *)(v37 + WORD2(v38) + 1) = a9[1];
      v36 = BYTE4(v38) + 2;
      a9 += 2;
      WORD2(v38) += 2;
      a6 += 2;
      ++a5;
      ++a4;
      if (!--v23)
        return sub_10004C8A0(65346, v37, v36, a11, (uint64_t)sub_10011ED60, v20, v21, v22);
    }
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2188, "OI_STATUS _ACI_OlympicLESetScanParametersMultiCore(uint8_t, uint8_t, uint8_t, uint8_t *, uint16_t *, uint16_t *, uint8_t, uint8_t, uint16_t *, uint8_t, BT_VSC_COMPLETE_CB)");
LABEL_39:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  v36 = BYTE4(v38);
  return sub_10004C8A0(65346, v37, v36, a11, (uint64_t)sub_10011ED60, v20, v21, v22);
}

uint64_t sub_1001246D8(char a1, __int16 a2, char a3, __int16 a4, char a5, uint64_t (*a6)())
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  unsigned __int16 v18;
  __int16 v19;
  unsigned __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v21 = 0;
  v22 = 0;
  result = sub_10004BC7C(&v21);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v22))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3976, "OI_STATUS _ACI_OlympicSetExtendedScanLimits(_Bool, uint16_t, uint8_t, uint16_t, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v16 = WORD2(v22);
      if (WORD1(v22) > WORD2(v22) && BYTE6(v22) == 2)
      {
        ++WORD2(v22);
        *(_BYTE *)(v21 + v16) = a1;
        if (HIBYTE(v22))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3977, "OI_STATUS _ACI_OlympicSetExtendedScanLimits(_Bool, uint16_t, uint8_t, uint16_t, uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v22) - WORD2(v22) > 1 && BYTE6(v22) == 2)
        {
          *(_WORD *)(v21 + WORD2(v22)) = a2;
          v17 = WORD2(v22);
          v18 = WORD2(v22) + 2;
          WORD2(v22) += 2;
          if (HIBYTE(v22))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3978, "OI_STATUS _ACI_OlympicSetExtendedScanLimits(_Bool, uint16_t, uint8_t, uint16_t, uint8_t, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v22) > v18 && BYTE6(v22) == 2)
          {
            WORD2(v22) = v17 + 3;
            *(_BYTE *)(v21 + v18) = a3;
            if (HIBYTE(v22))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3979, "OI_STATUS _ACI_OlympicSetExtendedScanLimits(_Bool, uint16_t, uint8_t, uint16_t, uint8_t, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v22) - WORD2(v22) > 1 && BYTE6(v22) == 2)
            {
              *(_WORD *)(v21 + WORD2(v22)) = a4;
              v19 = WORD2(v22);
              v20 = WORD2(v22) + 2;
              WORD2(v22) += 2;
              if (HIBYTE(v22))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3980, "OI_STATUS _ACI_OlympicSetExtendedScanLimits(_Bool, uint16_t, uint8_t, uint16_t, uint8_t, BT_VSC_COMPLETE_CB)");
              }
              else if (WORD1(v22) > v20 && BYTE6(v22) == 2)
              {
                WORD2(v22) = v19 + 3;
                *(_BYTE *)(v21 + v20) = a5;
                return sub_10004C8A0(65354, v21, BYTE4(v22), a6, (uint64_t)sub_10011ED60, v13, v14, v15);
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_1001249DC(__int16 a1, char a2, char a3, uint64_t (*a4)())
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  result = sub_10004BC7C(&v15);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v16))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3876, "OI_STATUS _ACI_SetHIDLatencyStats(OI_HCI_LM_HANDLE, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v16) - WORD2(v16) > 1 && BYTE6(v16) == 2)
    {
      *(_WORD *)(v15 + WORD2(v16)) = a1;
      v12 = WORD2(v16);
      v13 = WORD2(v16) + 2;
      WORD2(v16) += 2;
      if (HIBYTE(v16))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3877, "OI_STATUS _ACI_SetHIDLatencyStats(OI_HCI_LM_HANDLE, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v16) > v13 && BYTE6(v16) == 2)
      {
        WORD2(v16) = v12 + 3;
        *(_BYTE *)(v15 + v13) = a2;
        if (HIBYTE(v16))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3878, "OI_STATUS _ACI_SetHIDLatencyStats(OI_HCI_LM_HANDLE, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v14 = WORD2(v16);
          if (WORD1(v16) > WORD2(v16) && BYTE6(v16) == 2)
          {
            ++WORD2(v16);
            *(_BYTE *)(v15 + v14) = a3;
            return sub_10004C8A0(65072, v15, BYTE4(v16), a4, (uint64_t)sub_10011ED60, v9, v10, v11);
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100124BC4(__int16 a1, char a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  result = sub_10004BC7C(&v12);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v13))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3014, "OI_STATUS _ACI_OlympicSetLMPHalt(OI_HCI_LM_HANDLE, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v13) - WORD2(v13) > 1 && BYTE6(v13) == 2)
    {
      *(_WORD *)(v12 + WORD2(v13)) = a1;
      v10 = WORD2(v13);
      v11 = WORD2(v13) + 2;
      WORD2(v13) += 2;
      if (HIBYTE(v13))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3015, "OI_STATUS _ACI_OlympicSetLMPHalt(OI_HCI_LM_HANDLE, uint8_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v13) > v11 && BYTE6(v13) == 2)
      {
        WORD2(v13) = v10 + 3;
        *(_BYTE *)(v12 + v11) = a2;
        return sub_10004C8A0(65339, v12, BYTE4(v13), a3, (uint64_t)sub_10011ED60, v7, v8, v9);
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100124D30(int a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = sub_10004BC7C(&v10);
  v8 = (a1 << 15 >> 31) & 0x80000002;
  if ((a1 & 0x40000) != 0)
    v8 = (a1 << 15 >> 31) & 2 | 0x80000004;
  if ((a1 & 0x100000) != 0)
    v8 |= 0x80000001;
  if (!(_DWORD)result)
  {
    if (HIBYTE(v11))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1095, "OI_STATUS _ACI_LEMetaEnableFeatures(uint32_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v11) - WORD2(v11) > 3 && BYTE6(v11) == 2)
    {
      v9 = v8 | a1 & 0x15000002;
      *(_BYTE *)(v10 + WORD2(v11)) = v9;
      *(_BYTE *)(v10 + WORD2(v11) + 1) = BYTE1(v8);
      *(_BYTE *)(v10 + WORD2(v11) + 2) = BYTE2(v8);
      *(_BYTE *)(v10 + WORD2(v11) + 3) = HIBYTE(v9);
      WORD2(v11) += 4;
      return sub_10004C8A0(65345, v10, BYTE4(v11), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100124E7C(int a1, int a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  result = sub_10004BC7C(&v13);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v14))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1112, "OI_STATUS _ACI_LEMetaEnableFilteringFeatures(uint32_t, uint32_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v14) - WORD2(v14) > 3 && BYTE6(v14) == 2)
    {
      *(_WORD *)(v13 + WORD2(v14)) = a1;
      *(_BYTE *)(v13 + WORD2(v14) + 2) = BYTE2(a1);
      *(_BYTE *)(v13 + WORD2(v14) + 3) = HIBYTE(a1);
      v10 = WORD2(v14) + 4;
      WORD2(v14) += 4;
      if (HIBYTE(v14))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1113, "OI_STATUS _ACI_LEMetaEnableFilteringFeatures(uint32_t, uint32_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v14) - v10 > 3 && BYTE6(v14) == 2)
      {
        *(_BYTE *)(v13 + v10) = a2;
        *(_BYTE *)(v13 + WORD2(v14) + 1) = BYTE1(a2);
        *(_BYTE *)(v13 + WORD2(v14) + 2) = BYTE2(a2);
        *(_BYTE *)(v13 + WORD2(v14) + 3) = HIBYTE(a2);
        v11 = WORD2(v14) + 4;
        WORD2(v14) += 4;
        if (HIBYTE(v14))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1114, "OI_STATUS _ACI_LEMetaEnableFilteringFeatures(uint32_t, uint32_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v14) - v11 > 3 && BYTE6(v14) == 2)
        {
          *(_BYTE *)(v13 + v11) = 0;
          *(_WORD *)(v13 + WORD2(v14) + 1) = 0;
          *(_BYTE *)(v13 + WORD2(v14) + 3) = 0;
          v12 = WORD2(v14) + 4;
          WORD2(v14) += 4;
          if (HIBYTE(v14))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1115, "OI_STATUS _ACI_LEMetaEnableFilteringFeatures(uint32_t, uint32_t, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v14) - v12 > 3 && BYTE6(v14) == 2)
          {
            *(_BYTE *)(v13 + v12) = 0;
            *(_WORD *)(v13 + WORD2(v14) + 1) = 0;
            *(_BYTE *)(v13 + WORD2(v14) + 3) = 0;
            WORD2(v14) += 4;
            return sub_10004C8A0(64957, v13, BYTE4(v14), a3, (uint64_t)sub_10011ED60, v7, v8, v9);
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_1001251B4(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t (*a5)())
{
  uint64_t result;
  char v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = 0;
  v20 = 0;
  result = sub_10004BC7C(&v19);
  if (a1)
    v11 = 2;
  else
    v11 = 0;
  if ((_DWORD)result)
    return result;
  if (HIBYTE(v20))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1194, "OI_STATUS _ACI_LEMetaAddIrk(_Bool, const OI_BD_ADDR *, const uint8_t *, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_19;
  }
  v12 = WORD2(v20);
  if (WORD1(v20) <= WORD2(v20) || BYTE6(v20) != 2)
LABEL_19:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v20);
  *(_BYTE *)(v19 + v12) = v11;
  if (HIBYTE(v20))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1195, "OI_STATUS _ACI_LEMetaAddIrk(_Bool, const OI_BD_ADDR *, const uint8_t *, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_21;
  }
  if (WORD1(v20) - WORD2(v20) <= 5 || BYTE6(v20) != 2)
LABEL_21:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  sub_10004C878(v19 + WORD2(v20), a2, 6uLL);
  v13 = WORD2(v20) + 6;
  WORD2(v20) += 6;
  v14 = v19;
  if (HIBYTE(v20))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1196, "OI_STATUS _ACI_LEMetaAddIrk(_Bool, const OI_BD_ADDR *, const uint8_t *, uint8_t, BT_VSC_COMPLETE_CB)");
    v15 = 0;
  }
  else
  {
    v15 = WORD1(v20) - v13;
  }
  if (v15 < a4 || BYTE6(v20) != 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  sub_10004C878(v14 + v13, a3, a4);
  WORD2(v20) += a4;
  return sub_10004C8A0(65279, v19, BYTE4(v20), a5, (uint64_t)sub_10011ED60, v16, v17, v18);
}

uint64_t sub_1001253C4(int a1, uint64_t a2, uint64_t (*a3)())
{
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  result = sub_10004BC7C(&v12);
  if (a1)
    v7 = 3;
  else
    v7 = 1;
  if (!(_DWORD)result)
  {
    if (HIBYTE(v13))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1215, "OI_STATUS _ACI_LEMetaRemoveIrk(_Bool, const OI_BD_ADDR *, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v13);
      if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
      {
        ++WORD2(v13);
        *(_BYTE *)(v12 + v8) = v7;
        if (HIBYTE(v13))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1216, "OI_STATUS _ACI_LEMetaRemoveIrk(_Bool, const OI_BD_ADDR *, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v13) - WORD2(v13) > 5 && BYTE6(v13) == 2)
        {
          sub_10004C878(v12 + WORD2(v13), a2, 6uLL);
          WORD2(v13) += 6;
          return sub_10004C8A0(65279, v12, BYTE4(v13), a3, (uint64_t)sub_10011ED60, v9, v10, v11);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100125534(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  result = sub_10004BC7C(&v6);
  if (!(_DWORD)result)
    return sub_10004C8A0(65274, v6, BYTE4(v7), a1, (uint64_t)sub_10011ED60, v3, v4, v5);
  return result;
}

uint64_t sub_100125584(char a1, uint64_t a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  unsigned __int16 v12;
  _BYTE v13[6];
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  result = sub_10004BC7C(&v14);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1241, "OI_STATUS _ACI_LEMetaAddFastIrkResolution(uint8_t, const BTAddress, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v7 = WORD2(v15);
      if (WORD1(v15) > WORD2(v15) && BYTE6(v15) == 2)
      {
        ++WORD2(v15);
        *(_BYTE *)(v14 + v7) = a1;
        v13[0] = BYTE5(a2);
        v13[1] = BYTE4(a2);
        v13[2] = BYTE3(a2);
        v13[3] = BYTE2(a2);
        v13[4] = BYTE1(a2);
        v13[5] = a2;
        if (HIBYTE(v15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1244, "OI_STATUS _ACI_LEMetaAddFastIrkResolution(uint8_t, const BTAddress, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v15) - WORD2(v15) > 5 && BYTE6(v15) == 2)
        {
          sub_10004C878(v14 + WORD2(v15), (uint64_t)v13, 6uLL);
          v11 = WORD2(v15);
          v12 = WORD2(v15) + 6;
          WORD2(v15) += 6;
          if (HIBYTE(v15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1245, "OI_STATUS _ACI_LEMetaAddFastIrkResolution(uint8_t, const BTAddress, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v15) > v12 && BYTE6(v15) == 2)
          {
            WORD2(v15) = v11 + 7;
            *(_BYTE *)(v14 + v12) = BYTE6(a2);
            return sub_10004C8A0(65312, v14, BYTE4(v15), a3, (uint64_t)sub_10011ED60, v8, v9, v10);
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100125790(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  result = sub_10004BC7C(&v12);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v13))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1263, "OI_STATUS _ACI_LEMetaPCFDisableServiceUUID(BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v6 = WORD2(v13);
      if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
      {
        ++WORD2(v13);
        *(_BYTE *)(v12 + v6) = 2;
        if (HIBYTE(v13))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1264, "OI_STATUS _ACI_LEMetaPCFDisableServiceUUID(BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v7 = WORD2(v13);
          if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
          {
            ++WORD2(v13);
            *(_BYTE *)(v12 + v7) = 1;
            if (HIBYTE(v13))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1265, "OI_STATUS _ACI_LEMetaPCFDisableServiceUUID(BT_VSC_COMPLETE_CB)");
            }
            else
            {
              v8 = WORD2(v13);
              if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
              {
                ++WORD2(v13);
                *(_BYTE *)(v12 + v8) = 2;
                if (HIBYTE(v13))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1266, "OI_STATUS _ACI_LEMetaPCFDisableServiceUUID(BT_VSC_COMPLETE_CB)");
                }
                else
                {
                  v9 = WORD2(v13);
                  if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
                  {
                    ++WORD2(v13);
                    *(_BYTE *)(v12 + v9) = 0;
                    if (HIBYTE(v13))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1267, "OI_STATUS _ACI_LEMetaPCFDisableServiceUUID(BT_VSC_COMPLETE_CB)");
                    }
                    else if (WORD1(v13) - WORD2(v13) > 1 && BYTE6(v13) == 2)
                    {
                      *(_WORD *)(v12 + WORD2(v13)) = 0;
                      v10 = WORD2(v13) + 2;
                      WORD2(v13) += 2;
                      if (HIBYTE(v13))
                      {
                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1268, "OI_STATUS _ACI_LEMetaPCFDisableServiceUUID(BT_VSC_COMPLETE_CB)");
                      }
                      else if (WORD1(v13) - v10 > 3 && BYTE6(v13) == 2)
                      {
                        *(_BYTE *)(v12 + v10) = -1;
                        *(_BYTE *)(v12 + WORD2(v13) + 1) = -1;
                        *(_BYTE *)(v12 + WORD2(v13) + 2) = -1;
                        *(_BYTE *)(v12 + WORD2(v13) + 3) = -1;
                        v11 = WORD2(v13) + 4;
                        WORD2(v13) += 4;
                        if (HIBYTE(v13))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1269, "OI_STATUS _ACI_LEMetaPCFDisableServiceUUID(BT_VSC_COMPLETE_CB)");
                        }
                        else if (WORD1(v13) - v11 > 3 && BYTE6(v13) == 2)
                        {
                          *(_BYTE *)(v12 + v11) = -1;
                          *(_BYTE *)(v12 + WORD2(v13) + 1) = -1;
                          *(_BYTE *)(v12 + WORD2(v13) + 2) = -1;
                          *(_BYTE *)(v12 + WORD2(v13) + 3) = -1;
                          WORD2(v13) += 4;
                          return sub_10004C8A0(64998, v12, BYTE4(v13), a1, (uint64_t)sub_10011ED60, v3, v4, v5);
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                      }
                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100125BB0(void (*a1)(_QWORD))
{
  a1(0);
  return 0;
}

uint64_t sub_100125BD0(uint64_t a1, unsigned int a2, int a3, uint64_t (*a4)())
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  result = sub_10004BC7C(&v22);
  if (!(_DWORD)result)
  {
    if (a3)
    {
      if (HIBYTE(v23))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1296, "OI_STATUS _ACI_LEMetaScanFilterUUID(uint8_t *, uint8_t, _Bool, BT_VSC_COMPLETE_CB)");
      }
      else
      {
        v12 = WORD2(v23);
        if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
        {
          v13 = 0;
          goto LABEL_11;
        }
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    if (HIBYTE(v23))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1298, "OI_STATUS _ACI_LEMetaScanFilterUUID(uint8_t *, uint8_t, _Bool, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v12 = WORD2(v23);
      if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
      {
        v13 = 1;
LABEL_11:
        WORD2(v23) = v12 + 1;
        *(_BYTE *)(v22 + v12) = v13;
        if (a2 != 2)
        {
          if (a2 != 16)
            sub_100253460();
          if (HIBYTE(v23))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1303, "OI_STATUS _ACI_LEMetaScanFilterUUID(uint8_t *, uint8_t, _Bool, BT_VSC_COMPLETE_CB)");
            goto LABEL_53;
          }
          v14 = WORD2(v23);
          if (WORD1(v23) <= WORD2(v23) || (v15 = BYTE6(v23), BYTE6(v23) != 2))
LABEL_53:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
LABEL_22:
          WORD2(v23) = v14 + 1;
          *(_BYTE *)(v22 + v14) = v15;
          if (HIBYTE(v23))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1308, "OI_STATUS _ACI_LEMetaScanFilterUUID(uint8_t *, uint8_t, _Bool, BT_VSC_COMPLETE_CB)");
          }
          else
          {
            v16 = WORD2(v23);
            if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
            {
              ++WORD2(v23);
              *(_BYTE *)(v22 + v16) = 2;
              if (HIBYTE(v23))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1309, "OI_STATUS _ACI_LEMetaScanFilterUUID(uint8_t *, uint8_t, _Bool, BT_VSC_COMPLETE_CB)");
              }
              else
              {
                v17 = WORD2(v23);
                if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
                {
                  ++WORD2(v23);
                  *(_BYTE *)(v22 + v17) = 0;
                  if (a2)
                  {
                    v18 = a2;
                    while (!HIBYTE(v23))
                    {
                      v19 = WORD2(v23);
                      if (WORD1(v23) <= WORD2(v23) || BYTE6(v23) != 2)
                        goto LABEL_43;
                      v20 = *(_BYTE *)(a1 - 1 + v18--);
                      ++WORD2(v23);
                      *(_BYTE *)(v22 + v19) = v20;
                      if ((unint64_t)(v18 + 1) <= 1)
                        goto LABEL_34;
                    }
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1312, "OI_STATUS _ACI_LEMetaScanFilterUUID(uint8_t *, uint8_t, _Bool, BT_VSC_COMPLETE_CB)");
LABEL_43:
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
LABEL_34:
                  if (HIBYTE(v23))
                  {
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1315, "OI_STATUS _ACI_LEMetaScanFilterUUID(uint8_t *, uint8_t, _Bool, BT_VSC_COMPLETE_CB)");
                  }
                  else if (WORD1(v23) - WORD2(v23) > 3 && BYTE6(v23) == 2)
                  {
                    *(_BYTE *)(v22 + WORD2(v23)) = -1;
                    *(_BYTE *)(v22 + WORD2(v23) + 1) = -1;
                    *(_BYTE *)(v22 + WORD2(v23) + 2) = -1;
                    *(_BYTE *)(v22 + WORD2(v23) + 3) = -1;
                    v21 = WORD2(v23) + 4;
                    WORD2(v23) += 4;
                    if (HIBYTE(v23))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1316, "OI_STATUS _ACI_LEMetaScanFilterUUID(uint8_t *, uint8_t, _Bool, BT_VSC_COMPLETE_CB)");
                    }
                    else if (WORD1(v23) - v21 > 3 && BYTE6(v23) == 2)
                    {
                      *(_BYTE *)(v22 + v21) = -1;
                      *(_BYTE *)(v22 + WORD2(v23) + 1) = -1;
                      *(_BYTE *)(v22 + WORD2(v23) + 2) = -1;
                      *(_BYTE *)(v22 + WORD2(v23) + 3) = -1;
                      WORD2(v23) += 4;
                      return sub_10004C8A0(64998, v22, BYTE4(v23), a4, (uint64_t)sub_10011ED60, v9, v10, v11);
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                }
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            }
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        if (HIBYTE(v23))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1306, "OI_STATUS _ACI_LEMetaScanFilterUUID(uint8_t *, uint8_t, _Bool, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v14 = WORD2(v23);
          if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
          {
            v15 = 1;
            goto LABEL_22;
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100126108(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = sub_10004BC7C(&v7);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v8))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1427, "OI_STATUS _ACI_LEMetaGetZoneCapacity(BT_VSC_GET_ZONE_CAPACITY_CB)");
    }
    else if (WORD1(v8) - WORD2(v8) > 3 && BYTE6(v8) == 2)
    {
      *(_BYTE *)(v7 + WORD2(v8)) = -1;
      *(_BYTE *)(v7 + WORD2(v8) + 1) = -1;
      *(_BYTE *)(v7 + WORD2(v8) + 2) = -1;
      *(_BYTE *)(v7 + WORD2(v8) + 3) = -1;
      v6 = WORD2(v8) + 4;
      WORD2(v8) += 4;
      if (HIBYTE(v8))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1428, "OI_STATUS _ACI_LEMetaGetZoneCapacity(BT_VSC_GET_ZONE_CAPACITY_CB)");
      }
      else if (WORD1(v8) - v6 > 3 && BYTE6(v8) == 2)
      {
        *(_BYTE *)(v7 + v6) = -1;
        *(_BYTE *)(v7 + WORD2(v8) + 1) = -1;
        *(_BYTE *)(v7 + WORD2(v8) + 2) = -1;
        *(_BYTE *)(v7 + WORD2(v8) + 3) = -1;
        WORD2(v8) += 4;
        return sub_10004C8A0(64993, v7, BYTE4(v8), a1, (uint64_t)sub_100135928, v3, v4, v5);
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_1001262BC(const void *a1, int a2, char a3, uint64_t (*a4)())
{
  size_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  LODWORD(v6) = a2;
  v19 = 0;
  v20 = 0;
  result = sub_10004BC7C(&v19);
  if (v6 >= 0x15)
    v6 = 21;
  else
    v6 = v6;
  if ((_DWORD)result)
    return result;
  v9 = v19;
  v10 = WORD2(v20);
  if (HIBYTE(v20))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1450, "OI_STATUS _ACI_LEMetaAddZoneCapacity(const uint8_t *, uint16_t, uint8_t, BT_VSC_COMPLETE_CB)");
    v11 = 0;
  }
  else
  {
    v11 = WORD1(v20) - WORD2(v20);
  }
  if (v11 < (int)v6 || BYTE6(v20) != 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  memmove((void *)(v9 + v10), a1, v6);
  WORD2(v20) += v6;
  if (WORD1(v20) <= 0x15u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  WORD2(v20) = 22;
  v12 = v19;
  if (HIBYTE(v20))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1452, "OI_STATUS _ACI_LEMetaAddZoneCapacity(const uint8_t *, uint16_t, uint8_t, BT_VSC_COMPLETE_CB)");
    v13 = 0;
  }
  else
  {
    v13 = WORD1(v20) - 22;
  }
  if (v13 < v6 || BYTE6(v20) != 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  memset((void *)(v12 + 22), 255, v6);
  WORD2(v20) += v6;
  v17 = WORD1(v20);
  if (WORD1(v20) <= 0x2Au)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  WORD2(v20) = 43;
  if (HIBYTE(v20))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1454, "OI_STATUS _ACI_LEMetaAddZoneCapacity(const uint8_t *, uint16_t, uint8_t, BT_VSC_COMPLETE_CB)");
LABEL_28:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  if (WORD1(v20) <= 0x2Bu)
    goto LABEL_28;
  v18 = v19;
  WORD2(v20) = 44;
  *(_BYTE *)(v19 + 43) = a3;
  if ((v17 & 0xFFFC) == 0x2C)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  *(_DWORD *)(v18 + 44) = -1;
  WORD2(v20) = 48;
  if (v17 <= 0x33)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  *(_DWORD *)(v18 + 48) = -1;
  WORD2(v20) = 52;
  return sub_10004C8A0(64992, v18, 52, a4, (uint64_t)sub_10011ED60, v14, v15, v16);
}

uint64_t sub_100126558(const void *a1, int a2, uint64_t (*a3)())
{
  size_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  LODWORD(v4) = a2;
  v17 = 0;
  v18 = 0;
  result = sub_10004BC7C(&v17);
  if (v4 >= 0x15)
    v4 = 21;
  else
    v4 = v4;
  if ((_DWORD)result)
    return result;
  v7 = v17;
  v8 = WORD2(v18);
  if (HIBYTE(v18))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1477, "OI_STATUS _ACI_LEMetaRemoveZone(const uint8_t *, uint16_t, BT_VSC_COMPLETE_CB)");
    v9 = 0;
  }
  else
  {
    v9 = WORD1(v18) - WORD2(v18);
  }
  if (v9 < (int)v4 || BYTE6(v18) != 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  memmove((void *)(v7 + v8), a1, v4);
  WORD2(v18) += v4;
  if (WORD1(v18) <= 0x15u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  WORD2(v18) = 22;
  v10 = v17;
  if (HIBYTE(v18))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1479, "OI_STATUS _ACI_LEMetaRemoveZone(const uint8_t *, uint16_t, BT_VSC_COMPLETE_CB)");
    v11 = 0;
  }
  else
  {
    v11 = WORD1(v18) - 22;
  }
  if (v11 < v4 || BYTE6(v18) != 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  memset((void *)(v10 + 22), 255, v4);
  WORD2(v18) += v4;
  v15 = WORD1(v18);
  if (WORD1(v18) <= 0x2Au)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  WORD2(v18) = 43;
  if (HIBYTE(v18))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1481, "OI_STATUS _ACI_LEMetaRemoveZone(const uint8_t *, uint16_t, BT_VSC_COMPLETE_CB)");
LABEL_27:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  if (WORD1(v18) <= 0x2Eu)
    goto LABEL_27;
  v16 = v17;
  *(_DWORD *)(v17 + 43) = -1;
  WORD2(v18) = 47;
  if ((v15 - 51) >= 0xFFFFFFFC)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  *(_DWORD *)(v16 + 47) = -1;
  WORD2(v18) = 51;
  return sub_10004C8A0(64955, v16, 51, a3, (uint64_t)sub_10011ED60, v12, v13, v14);
}

uint64_t sub_1001267C4(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = sub_10004BC7C(&v7);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v8))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1501, "OI_STATUS _ACI_LEMetaClearZone(BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v8) - WORD2(v8) > 3 && BYTE6(v8) == 2)
    {
      *(_BYTE *)(v7 + WORD2(v8)) = -1;
      *(_BYTE *)(v7 + WORD2(v8) + 1) = -1;
      *(_BYTE *)(v7 + WORD2(v8) + 2) = -1;
      *(_BYTE *)(v7 + WORD2(v8) + 3) = -1;
      v6 = WORD2(v8) + 4;
      WORD2(v8) += 4;
      if (HIBYTE(v8))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1502, "OI_STATUS _ACI_LEMetaClearZone(BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v8) - v6 > 3 && BYTE6(v8) == 2)
      {
        *(_BYTE *)(v7 + v6) = -1;
        *(_BYTE *)(v7 + WORD2(v8) + 1) = -1;
        *(_BYTE *)(v7 + WORD2(v8) + 2) = -1;
        *(_BYTE *)(v7 + WORD2(v8) + 3) = -1;
        WORD2(v8) += 4;
        return sub_10004C8A0(64985, v7, BYTE4(v8), a1, (uint64_t)sub_10011ED60, v3, v4, v5);
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100126978(const void *a1, int a2, const void *a3, int a4, char a5, char a6, int a7, uint64_t a8, uint64_t a9, uint64_t (*a10)())
{
  size_t v13;
  size_t v15;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned __int16 v31;
  unsigned __int8 v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  LODWORD(v13) = a4;
  LODWORD(v15) = a2;
  v34 = 0;
  v35 = 0;
  result = sub_10004BC7C(&v34);
  if (v15 >= 0x16)
    v15 = 22;
  else
    v15 = v15;
  if (v13 >= 0x16)
    v13 = 22;
  else
    v13 = v13;
  if ((_DWORD)result)
    return result;
  if (HIBYTE(v35))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1836, "OI_STATUS _ACI_LEMetaMatchingRules(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, _Bool, const BTAddress, BT_VSC_COMPLETE_CB)");
    goto LABEL_43;
  }
  v18 = WORD2(v35);
  if (WORD1(v35) <= WORD2(v35) || BYTE6(v35) != 2)
LABEL_43:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  if (v13 >= v15)
    v19 = v15;
  else
    v19 = v13;
  ++WORD2(v35);
  *(_BYTE *)(v34 + v18) = v19;
  v20 = v34;
  v21 = WORD2(v35);
  if (HIBYTE(v35))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1837, "OI_STATUS _ACI_LEMetaMatchingRules(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, _Bool, const BTAddress, BT_VSC_COMPLETE_CB)");
    v22 = 0;
  }
  else
  {
    v22 = WORD1(v35) - WORD2(v35);
  }
  if (v22 < (int)v15 || BYTE6(v35) != 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  memmove((void *)(v20 + v21), a1, v15);
  WORD2(v35) += v15;
  if (WORD1(v35) <= 0x16u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  WORD2(v35) = 23;
  v23 = v34;
  if (HIBYTE(v35))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1839, "OI_STATUS _ACI_LEMetaMatchingRules(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, _Bool, const BTAddress, BT_VSC_COMPLETE_CB)");
    v24 = 0;
  }
  else
  {
    v24 = WORD1(v35) - 23;
  }
  if (v24 < v13 || BYTE6(v35) != 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  memmove((void *)(v23 + 23), a3, v13);
  WORD2(v35) += v13;
  v28 = WORD1(v35);
  if (WORD1(v35) <= 0x2Cu)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  WORD2(v35) = 45;
  if (HIBYTE(v35))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1841, "OI_STATUS _ACI_LEMetaMatchingRules(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, _Bool, const BTAddress, BT_VSC_COMPLETE_CB)");
    goto LABEL_49;
  }
  if (WORD1(v35) == 45 || BYTE6(v35) != 2)
LABEL_49:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v29 = v34;
  WORD2(v35) = 46;
  *(_BYTE *)(v34 + 45) = a5;
  if (v28 <= 0x2E)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v30 = 47;
  WORD2(v35) = 47;
  *(_BYTE *)(v29 + 46) = a6;
  if (a7)
  {
    if (v28 <= 0x30)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    *(_WORD *)(v29 + 47) = 0;
    v30 = 49;
    WORD2(v35) = 49;
  }
  if ((int)(v28 - v30) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  *(_BYTE *)(v29 + v30) = -1;
  *(_BYTE *)(v34 + WORD2(v35) + 1) = -1;
  *(_BYTE *)(v34 + WORD2(v35) + 2) = -1;
  *(_BYTE *)(v34 + WORD2(v35) + 3) = -1;
  v31 = WORD2(v35) + 4;
  WORD2(v35) += 4;
  if (HIBYTE(v35))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1846, "OI_STATUS _ACI_LEMetaMatchingRules(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, _Bool, const BTAddress, BT_VSC_COMPLETE_CB)");
    goto LABEL_53;
  }
  if (WORD1(v35) - v31 <= 3 || BYTE6(v35) != 2)
LABEL_53:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  *(_BYTE *)(v34 + v31) = -1;
  *(_BYTE *)(v34 + WORD2(v35) + 1) = -1;
  *(_BYTE *)(v34 + WORD2(v35) + 2) = -1;
  *(_BYTE *)(v34 + WORD2(v35) + 3) = -1;
  v32 = BYTE4(v35) + 4;
  WORD2(v35) += 4;
  if (a7)
    v33 = -553;
  else
    v33 = -554;
  return sub_10004C8A0(v33, v34, v32, a10, (uint64_t)sub_10011ED60, v25, v26, v27);
}

uint64_t sub_100126DFC(uint64_t a1, char a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  unsigned __int16 v12;
  uint64_t v13;
  _BYTE v14[6];
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  result = sub_10004BC7C(&v15);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v16))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2054, "OI_STATUS _ACI_LEMetaTrackSensor(const BTAddress, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
    }
    else
    {
      v7 = WORD2(v16);
      if (WORD1(v16) > WORD2(v16) && BYTE6(v16) == 2)
      {
        ++WORD2(v16);
        *(_BYTE *)(v15 + v7) = 12;
        v14[0] = BYTE5(a1);
        v14[1] = BYTE4(a1);
        v14[2] = BYTE3(a1);
        v14[3] = BYTE2(a1);
        v14[4] = BYTE1(a1);
        v14[5] = a1;
        if (HIBYTE(v16))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2057, "OI_STATUS _ACI_LEMetaTrackSensor(const BTAddress, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
        }
        else if (WORD1(v16) - WORD2(v16) > 5 && BYTE6(v16) == 2)
        {
          sub_10004C878(v15 + WORD2(v16), (uint64_t)v14, 6uLL);
          v11 = WORD2(v16);
          v12 = WORD2(v16) + 6;
          WORD2(v16) += 6;
          if (HIBYTE(v16))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2058, "OI_STATUS _ACI_LEMetaTrackSensor(const BTAddress, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
          }
          else if (WORD1(v16) > v12 && BYTE6(v16) == 2)
          {
            WORD2(v16) = v11 + 7;
            *(_BYTE *)(v15 + v12) = BYTE6(a1);
            if (HIBYTE(v16))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2059, "OI_STATUS _ACI_LEMetaTrackSensor(const BTAddress, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
            }
            else
            {
              v13 = WORD2(v16);
              if (WORD1(v16) > WORD2(v16) && BYTE6(v16) == 2)
              {
                ++WORD2(v16);
                *(_BYTE *)(v15 + v13) = a2;
                return sub_10004C8A0(65017, v15, BYTE4(v16), a3, (uint64_t)sub_100135928, v8, v9, v10);
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100127084(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = sub_10004BC7C(&v7);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v8))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1870, "OI_STATUS _ACI_LEMetaClearAllMatchingRules(BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v8) - WORD2(v8) > 3 && BYTE6(v8) == 2)
    {
      *(_BYTE *)(v7 + WORD2(v8)) = -1;
      *(_BYTE *)(v7 + WORD2(v8) + 1) = -1;
      *(_BYTE *)(v7 + WORD2(v8) + 2) = -1;
      *(_BYTE *)(v7 + WORD2(v8) + 3) = -1;
      v6 = WORD2(v8) + 4;
      WORD2(v8) += 4;
      if (HIBYTE(v8))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1871, "OI_STATUS _ACI_LEMetaClearAllMatchingRules(BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v8) - v6 > 3 && BYTE6(v8) == 2)
      {
        *(_BYTE *)(v7 + v6) = -1;
        *(_BYTE *)(v7 + WORD2(v8) + 1) = -1;
        *(_BYTE *)(v7 + WORD2(v8) + 2) = -1;
        *(_BYTE *)(v7 + WORD2(v8) + 3) = -1;
        WORD2(v8) += 4;
        return sub_10004C8A0(64946, v7, BYTE4(v8), a1, (uint64_t)sub_10011ED60, v3, v4, v5);
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100127238(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  result = sub_10004BC7C(&v11);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v12))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1178, "OI_STATUS _ACI_LEMetaEnableAsymmetricPeripheralLatency(_Bool, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v12) - WORD2(v12) > 1 && BYTE6(v12) == 2)
    {
      *(_BYTE *)(v11 + WORD2(v12)) = -1;
      *(_BYTE *)(v11 + WORD2(v12) + 1) = -1;
      v8 = WORD2(v12);
      v9 = WORD2(v12) + 2;
      WORD2(v12) += 2;
      if (HIBYTE(v12))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1179, "OI_STATUS _ACI_LEMetaEnableAsymmetricPeripheralLatency(_Bool, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v12) > v9 && BYTE6(v12) == 2)
      {
        WORD2(v12) = v8 + 3;
        *(_BYTE *)(v11 + v9) = a1;
        if (HIBYTE(v12))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1180, "OI_STATUS _ACI_LEMetaEnableAsymmetricPeripheralLatency(_Bool, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v10 = WORD2(v12);
          if (WORD1(v12) > WORD2(v12) && BYTE6(v12) == 2)
          {
            ++WORD2(v12);
            *(_BYTE *)(v11 + v10) = 2;
            return sub_10004C8A0(64958, v11, BYTE4(v12), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100127414(uint64_t a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  result = sub_10004BC7C(&v16);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v17))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1885, "OI_STATUS _ACI_LEMetaAddToFilterAcceptListWithInterval(BT_VSCAddFilterAcceptListParams_t *, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v5 = WORD2(v17);
      if (WORD1(v17) > WORD2(v17) && BYTE6(v17) == 2)
      {
        v6 = *(_BYTE *)(a1 + 20);
        ++WORD2(v17);
        *(_BYTE *)(v16 + v5) = v6;
        if (HIBYTE(v17))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1886, "OI_STATUS _ACI_LEMetaAddToFilterAcceptListWithInterval(BT_VSCAddFilterAcceptListParams_t *, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v17) - WORD2(v17) > 5 && BYTE6(v17) == 2)
        {
          sub_10004C878(v16 + WORD2(v17), *(_QWORD *)a1, 6uLL);
          v10 = WORD2(v17) + 6;
          WORD2(v17) += 6;
          if (HIBYTE(v17))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1887, "OI_STATUS _ACI_LEMetaAddToFilterAcceptListWithInterval(BT_VSCAddFilterAcceptListParams_t *, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v17) - v10 > 1 && BYTE6(v17) == 2)
          {
            *(_BYTE *)(v16 + v10) = *(_BYTE *)(a1 + 8);
            *(_BYTE *)(v16 + WORD2(v17) + 1) = *(_BYTE *)(a1 + 9);
            v11 = WORD2(v17) + 2;
            WORD2(v17) += 2;
            if (HIBYTE(v17))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1888, "OI_STATUS _ACI_LEMetaAddToFilterAcceptListWithInterval(BT_VSCAddFilterAcceptListParams_t *, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v17) - v11 > 1 && BYTE6(v17) == 2)
            {
              *(_BYTE *)(v16 + v11) = *(_BYTE *)(a1 + 10);
              *(_BYTE *)(v16 + WORD2(v17) + 1) = *(_BYTE *)(a1 + 11);
              v12 = WORD2(v17) + 2;
              WORD2(v17) += 2;
              if (HIBYTE(v17))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1889, "OI_STATUS _ACI_LEMetaAddToFilterAcceptListWithInterval(BT_VSCAddFilterAcceptListParams_t *, BT_VSC_COMPLETE_CB)");
              }
              else if (WORD1(v17) - v12 > 1 && BYTE6(v17) == 2)
              {
                *(_BYTE *)(v16 + v12) = *(_BYTE *)(a1 + 12);
                *(_BYTE *)(v16 + WORD2(v17) + 1) = *(_BYTE *)(a1 + 13);
                v13 = WORD2(v17) + 2;
                WORD2(v17) += 2;
                if (HIBYTE(v17))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1890, "OI_STATUS _ACI_LEMetaAddToFilterAcceptListWithInterval(BT_VSCAddFilterAcceptListParams_t *, BT_VSC_COMPLETE_CB)");
                }
                else if (WORD1(v17) - v13 > 1 && BYTE6(v17) == 2)
                {
                  *(_BYTE *)(v16 + v13) = *(_BYTE *)(a1 + 14);
                  *(_BYTE *)(v16 + WORD2(v17) + 1) = *(_BYTE *)(a1 + 15);
                  v14 = WORD2(v17) + 2;
                  WORD2(v17) += 2;
                  if (HIBYTE(v17))
                  {
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1891, "OI_STATUS _ACI_LEMetaAddToFilterAcceptListWithInterval(BT_VSCAddFilterAcceptListParams_t *, BT_VSC_COMPLETE_CB)");
                  }
                  else if (WORD1(v17) - v14 > 1 && BYTE6(v17) == 2)
                  {
                    *(_BYTE *)(v16 + v14) = *(_BYTE *)(a1 + 16);
                    *(_BYTE *)(v16 + WORD2(v17) + 1) = *(_BYTE *)(a1 + 17);
                    v15 = WORD2(v17) + 2;
                    WORD2(v17) += 2;
                    if (HIBYTE(v17))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1892, "OI_STATUS _ACI_LEMetaAddToFilterAcceptListWithInterval(BT_VSCAddFilterAcceptListParams_t *, BT_VSC_COMPLETE_CB)");
                    }
                    else if (WORD1(v17) - v15 > 1 && BYTE6(v17) == 2)
                    {
                      *(_BYTE *)(v16 + v15) = *(_BYTE *)(a1 + 18);
                      *(_BYTE *)(v16 + WORD2(v17) + 1) = *(_BYTE *)(a1 + 19);
                      WORD2(v17) += 2;
                      return sub_10004C8A0(65278, v16, BYTE4(v17), a2, (uint64_t)sub_10011ED60, v7, v8, v9);
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100127900(uint64_t a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[6];
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = sub_10004BC7C(&v10);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v11))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1909, "OI_STATUS _ACI_LEMetaAddDeviceToMatchingAddressList(const BTAddress, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v5 = WORD2(v11);
      if (WORD1(v11) > WORD2(v11) && BYTE6(v11) == 2)
      {
        ++WORD2(v11);
        *(_BYTE *)(v10 + v5) = BYTE6(a1);
        v9[0] = BYTE5(a1);
        v9[1] = BYTE4(a1);
        v9[2] = BYTE3(a1);
        v9[3] = BYTE2(a1);
        v9[4] = BYTE1(a1);
        v9[5] = a1;
        if (HIBYTE(v11))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1913, "OI_STATUS _ACI_LEMetaAddDeviceToMatchingAddressList(const BTAddress, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v11) - WORD2(v11) > 5 && BYTE6(v11) == 2)
        {
          sub_10004C878(v10 + WORD2(v11), (uint64_t)v9, 6uLL);
          WORD2(v11) += 6;
          return sub_10004C8A0(64986, v10, BYTE4(v11), a2, (uint64_t)sub_10011ED60, v6, v7, v8);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100127A88(uint64_t a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[6];
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = sub_10004BC7C(&v10);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v11))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1929, "OI_STATUS _ACI_LEMetaRemoveDeviceFromMatchingAddressList(const BTAddress, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v5 = WORD2(v11);
      if (WORD1(v11) > WORD2(v11) && BYTE6(v11) == 2)
      {
        ++WORD2(v11);
        *(_BYTE *)(v10 + v5) = BYTE6(a1);
        v9[0] = BYTE5(a1);
        v9[1] = BYTE4(a1);
        v9[2] = BYTE3(a1);
        v9[3] = BYTE2(a1);
        v9[4] = BYTE1(a1);
        v9[5] = a1;
        if (HIBYTE(v11))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1933, "OI_STATUS _ACI_LEMetaRemoveDeviceFromMatchingAddressList(const BTAddress, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v11) - WORD2(v11) > 5 && BYTE6(v11) == 2)
        {
          sub_10004C878(v10 + WORD2(v11), (uint64_t)v9, 6uLL);
          WORD2(v11) += 6;
          return sub_10004C8A0(64991, v10, BYTE4(v11), a2, (uint64_t)sub_10011ED60, v6, v7, v8);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100127C10(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  result = sub_10004BC7C(&v6);
  if (!(_DWORD)result)
    return sub_10004C8A0(64969, v6, BYTE4(v7), a1, (uint64_t)sub_10011ED60, v3, v4, v5);
  return result;
}

uint64_t sub_100127C60(const void *a1, int a2, const void *a3, int a4, char a5, char a6, int a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14, __int16 a15, char a16, char a17, char a18, uint64_t (*a19)())
{
  uint64_t result;
  uint64_t v28;
  unsigned __int16 v29;
  uint64_t v30;
  int v31;
  unsigned __int16 v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned __int16 v36;
  uint64_t v37;
  int v38;
  unsigned __int16 v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  _BYTE v52[6];
  uint64_t v53;
  uint64_t v54;

  v53 = 0;
  v54 = 0;
  result = sub_10004BC7C(&v53);
  if ((_DWORD)result)
    return result;
  if (HIBYTE(v54))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1961, "OI_STATUS _ACI_LEMetaAdvMatchingRuleEnhanced(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_49;
  }
  v28 = WORD2(v54);
  if (WORD1(v54) <= WORD2(v54) || BYTE6(v54) != 2)
LABEL_49:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v54);
  *(_BYTE *)(v53 + v28) = a8;
  v52[0] = a14;
  v52[1] = a13;
  v52[2] = a12;
  v52[3] = a11;
  v52[4] = a10;
  v52[5] = a9;
  if (HIBYTE(v54))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1964, "OI_STATUS _ACI_LEMetaAdvMatchingRuleEnhanced(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_51;
  }
  if (WORD1(v54) - WORD2(v54) <= 5 || BYTE6(v54) != 2)
LABEL_51:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  sub_10004C878(v53 + WORD2(v54), (uint64_t)v52, 6uLL);
  v29 = WORD2(v54) + 6;
  WORD2(v54) += 6;
  v30 = v53;
  if (HIBYTE(v54))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1965, "OI_STATUS _ACI_LEMetaAdvMatchingRuleEnhanced(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    v31 = 0;
  }
  else
  {
    v31 = WORD1(v54) - v29;
  }
  if (v31 < a2 || BYTE6(v54) != 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  memmove((void *)(v30 + v29), a1, a2);
  v32 = WORD2(v54) + a2;
  WORD2(v54) += a2;
  v33 = v53;
  if (HIBYTE(v54))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1966, "OI_STATUS _ACI_LEMetaAdvMatchingRuleEnhanced(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    v34 = 0;
  }
  else
  {
    v34 = WORD1(v54) - v32;
  }
  v35 = 25 - a2;
  if (v34 < v35 || BYTE6(v54) != 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  bzero((void *)(v33 + v32), v35);
  v36 = WORD2(v54) + v35;
  WORD2(v54) = v36;
  v37 = v53;
  if (HIBYTE(v54))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1967, "OI_STATUS _ACI_LEMetaAdvMatchingRuleEnhanced(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    v38 = 0;
  }
  else
  {
    v38 = WORD1(v54) - v36;
  }
  if (v38 < a4 || BYTE6(v54) != 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  memmove((void *)(v37 + v36), a3, a4);
  v39 = WORD2(v54) + a4;
  WORD2(v54) += a4;
  v40 = v53;
  if (HIBYTE(v54))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1968, "OI_STATUS _ACI_LEMetaAdvMatchingRuleEnhanced(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    v41 = 0;
  }
  else
  {
    v41 = WORD1(v54) - v39;
  }
  v42 = 25 - a4;
  if (v41 < v42 || BYTE6(v54) != 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  bzero((void *)(v40 + v39), v42);
  v46 = WORD2(v54) + v42;
  WORD2(v54) += v42;
  if (HIBYTE(v54))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1969, "OI_STATUS _ACI_LEMetaAdvMatchingRuleEnhanced(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_57;
  }
  if (WORD1(v54) <= v46 || BYTE6(v54) != 2)
LABEL_57:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  WORD2(v54) = v46 + 1;
  *(_BYTE *)(v53 + v46) = a6;
  if (HIBYTE(v54))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1970, "OI_STATUS _ACI_LEMetaAdvMatchingRuleEnhanced(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_59;
  }
  v47 = WORD2(v54);
  if (WORD1(v54) <= WORD2(v54) || BYTE6(v54) != 2)
LABEL_59:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v54);
  *(_BYTE *)(v53 + v47) = a5;
  if (HIBYTE(v54))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1971, "OI_STATUS _ACI_LEMetaAdvMatchingRuleEnhanced(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_61;
  }
  v48 = WORD2(v54);
  if (WORD1(v54) <= WORD2(v54) || BYTE6(v54) != 2)
LABEL_61:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v54);
  *(_BYTE *)(v53 + v48) = a16;
  if (HIBYTE(v54))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1972, "OI_STATUS _ACI_LEMetaAdvMatchingRuleEnhanced(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_63;
  }
  v49 = WORD2(v54);
  if (WORD1(v54) <= WORD2(v54) || BYTE6(v54) != 2)
LABEL_63:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v54);
  *(_BYTE *)(v53 + v49) = a17;
  if (HIBYTE(v54))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1973, "OI_STATUS _ACI_LEMetaAdvMatchingRuleEnhanced(const uint8_t *, uint16_t, const uint8_t *, uint16_t, uint8_t, uint8_t, _Bool, uint8_t, const BTAddress, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_65;
  }
  v50 = WORD2(v54);
  if (WORD1(v54) <= WORD2(v54) || BYTE6(v54) != 2)
LABEL_65:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v54);
  *(_BYTE *)(v53 + v50) = a18;
  if (a7)
    v51 = -83;
  else
    v51 = -84;
  return sub_10004C8A0(v51, v53, BYTE4(v54), a19, (uint64_t)sub_10011ED60, v43, v44, v45);
}

uint64_t sub_1001282D4(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  result = sub_10004BC7C(&v6);
  if (!(_DWORD)result)
    return sub_10004C8A0(65341, v6, BYTE4(v7), a1, (uint64_t)sub_100135928, v3, v4, v5);
  return result;
}

uint64_t sub_100128324(uint64_t a1, uint64_t a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  result = sub_10004BC7C(&v8);
  if (!(_DWORD)result)
    return sub_10004C8A0(64924, v8, BYTE4(v9), a3, (uint64_t)sub_100135A34, v5, v6, v7);
  return result;
}

uint64_t sub_100128374(char a1, char a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  result = sub_10004BC7C(&v12);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v13))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3823, "OI_STATUS _ACI_GetScanStats(_Bool, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v10 = WORD2(v13);
      if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
      {
        ++WORD2(v13);
        *(_BYTE *)(v12 + v10) = a1;
        if (HIBYTE(v13))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3824, "OI_STATUS _ACI_GetScanStats(_Bool, uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v11 = WORD2(v13);
          if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
          {
            ++WORD2(v13);
            *(_BYTE *)(v12 + v11) = a2;
            return sub_10004C8A0(65064, v12, BYTE4(v13), a3, (uint64_t)sub_10011ED60, v7, v8, v9);
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_1001284C4(char a1, uint64_t a2, char a3, uint64_t (*a4)())
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  unsigned __int16 v14;
  _BYTE v15[6];
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  result = sub_10004BC7C(&v16);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v17))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2094, "OI_STATUS _ACI_LEMetaAdvMatchingRuleRemoveDuplicateEntry(uint8_t, const BTAddress, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v9 = WORD2(v17);
      if (WORD1(v17) > WORD2(v17) && BYTE6(v17) == 2)
      {
        ++WORD2(v17);
        *(_BYTE *)(v16 + v9) = a1;
        v15[0] = BYTE5(a2);
        v15[1] = BYTE4(a2);
        v15[2] = BYTE3(a2);
        v15[3] = BYTE2(a2);
        v15[4] = BYTE1(a2);
        v15[5] = a2;
        if (HIBYTE(v17))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2097, "OI_STATUS _ACI_LEMetaAdvMatchingRuleRemoveDuplicateEntry(uint8_t, const BTAddress, uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v17) - WORD2(v17) > 5 && BYTE6(v17) == 2)
        {
          sub_10004C878(v16 + WORD2(v17), (uint64_t)v15, 6uLL);
          v13 = WORD2(v17);
          v14 = WORD2(v17) + 6;
          WORD2(v17) += 6;
          if (HIBYTE(v17))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2098, "OI_STATUS _ACI_LEMetaAdvMatchingRuleRemoveDuplicateEntry(uint8_t, const BTAddress, uint8_t, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v17) > v14 && BYTE6(v17) == 2)
          {
            WORD2(v17) = v13 + 7;
            *(_BYTE *)(v16 + v14) = a3;
            return sub_10004C8A0(65344, v16, BYTE4(v17), a4, (uint64_t)sub_10011ED60, v10, v11, v12);
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_1001286D0(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2112, "OI_STATUS _ACI_LEMetaAdvMatchingRuleWipeDuplicateList(uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = a1;
        return sub_10004C8A0(65343, v9, BYTE4(v10), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012879C(uint64_t a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  unsigned __int16 v11;
  char v12;
  __int16 v13;
  unsigned __int16 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  result = sub_10004BC7C(&v16);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v17))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2127, "OI_STATUS _ACI_LEMetaAddToFilterAcceptListWithOptions(BT_VSCAddFilterAcceptListOptions_t *, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v5 = WORD2(v17);
      if (WORD1(v17) > WORD2(v17) && BYTE6(v17) == 2)
      {
        v6 = *(_BYTE *)(a1 + 16);
        ++WORD2(v17);
        *(_BYTE *)(v16 + v5) = v6;
        if (HIBYTE(v17))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2128, "OI_STATUS _ACI_LEMetaAddToFilterAcceptListWithOptions(BT_VSCAddFilterAcceptListOptions_t *, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v17) - WORD2(v17) > 5 && BYTE6(v17) == 2)
        {
          sub_10004C878(v16 + WORD2(v17), *(_QWORD *)(a1 + 8), 6uLL);
          v10 = WORD2(v17);
          v11 = WORD2(v17) + 6;
          WORD2(v17) += 6;
          if (HIBYTE(v17))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2129, "OI_STATUS _ACI_LEMetaAddToFilterAcceptListWithOptions(BT_VSCAddFilterAcceptListOptions_t *, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v17) > v11 && BYTE6(v17) == 2)
          {
            v12 = *(_BYTE *)(a1 + 17);
            WORD2(v17) = v10 + 7;
            *(_BYTE *)(v16 + v11) = v12;
            if (HIBYTE(v17))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2130, "OI_STATUS _ACI_LEMetaAddToFilterAcceptListWithOptions(BT_VSCAddFilterAcceptListOptions_t *, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v17) > WORD2(v17) && BYTE6(v17) == 2)
            {
              *(_BYTE *)(v16 + WORD2(v17)) = *(_BYTE *)(a1 + 18);
              v13 = WORD2(v17);
              v14 = ++WORD2(v17);
              if (HIBYTE(v17))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2131, "OI_STATUS _ACI_LEMetaAddToFilterAcceptListWithOptions(BT_VSCAddFilterAcceptListOptions_t *, BT_VSC_COMPLETE_CB)");
              }
              else if (WORD1(v17) > v14 && BYTE6(v17) == 2)
              {
                v15 = *(_BYTE *)(a1 + 19);
                WORD2(v17) = v13 + 2;
                *(_BYTE *)(v16 + v14) = v15;
                return sub_10004C8A0(65470, v16, BYTE4(v17), a2, (uint64_t)sub_10011ED60, v7, v8, v9);
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100128A74(uint64_t a1, unsigned int a2, unsigned int a3, char a4, char a5, char a6, uint64_t (*a7)())
{
  BOOL v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  unsigned __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v14 = a2 == 2;
  v36 = 0;
  v37 = 0;
  result = sub_10004BC7C(&v36);
  if ((_DWORD)result)
    return result;
  if (HIBYTE(v37))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1336, "OI_STATUS _ACI_LEMetaScanFilterUUIDV2(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_54;
  }
  v19 = WORD2(v37);
  if (WORD1(v37) <= WORD2(v37) || BYTE6(v37) != 2)
LABEL_54:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v37);
  *(_BYTE *)(v36 + v19) = a3;
  if (HIBYTE(v37))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1337, "OI_STATUS _ACI_LEMetaScanFilterUUIDV2(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_56;
  }
  if (WORD1(v37) - WORD2(v37) <= 5 || BYTE6(v37) != 2)
LABEL_56:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v20 = v36 + WORD2(v37);
  *(_WORD *)(v20 + 4) = 0;
  *(_DWORD *)v20 = 0;
  v21 = WORD2(v37);
  v22 = WORD2(v37) + 6;
  WORD2(v37) += 6;
  if (HIBYTE(v37))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1338, "OI_STATUS _ACI_LEMetaScanFilterUUIDV2(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_58;
  }
  if (WORD1(v37) <= v22 || BYTE6(v37) != 2)
LABEL_58:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  WORD2(v37) = v21 + 7;
  *(_BYTE *)(v36 + v22) = 2;
  if (HIBYTE(v37))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1339, "OI_STATUS _ACI_LEMetaScanFilterUUIDV2(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_60;
  }
  v23 = WORD2(v37);
  if (WORD1(v37) <= WORD2(v37) || BYTE6(v37) != 2)
LABEL_60:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v37);
  *(_BYTE *)(v36 + v23) = 2 * v14;
  if (HIBYTE(v37))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1341, "OI_STATUS _ACI_LEMetaScanFilterUUIDV2(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_62;
  }
  v24 = WORD2(v37);
  if (WORD1(v37) <= WORD2(v37) || BYTE6(v37) != 2)
LABEL_62:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v37);
  *(_BYTE *)(v36 + v24) = a4;
  if (HIBYTE(v37))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1342, "OI_STATUS _ACI_LEMetaScanFilterUUIDV2(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_64;
  }
  v25 = WORD2(v37);
  if (WORD1(v37) <= WORD2(v37) || BYTE6(v37) != 2)
LABEL_64:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v37);
  *(_BYTE *)(v36 + v25) = a5;
  if (HIBYTE(v37))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1343, "OI_STATUS _ACI_LEMetaScanFilterUUIDV2(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_66;
  }
  v26 = WORD2(v37);
  if (WORD1(v37) <= WORD2(v37) || BYTE6(v37) != 2)
LABEL_66:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v37);
  *(_BYTE *)(v36 + v26) = a6;
  if (a3 <= 1)
  {
    if (a2 == 16 || a2 == 2)
    {
      if (a2 == 2)
      {
        v27 = 1;
        while (!HIBYTE(v37))
        {
          v28 = WORD2(v37);
          if (WORD1(v37) <= WORD2(v37) || BYTE6(v37) != 2)
            goto LABEL_50;
          v29 = *(_BYTE *)(a1 + v27);
          ++WORD2(v37);
          *(_BYTE *)(v36 + v28) = v29;
          if (--v27 == -1)
          {
            v30 = -14;
            while (!HIBYTE(v37))
            {
              v31 = WORD2(v37);
              if (WORD1(v37) <= WORD2(v37) || BYTE6(v37) != 2)
                goto LABEL_52;
              ++WORD2(v37);
              *(_BYTE *)(v36 + v31) = 0;
              if (__CFADD__(v30++, 1))
                return sub_10004C8A0(64998, v36, BYTE4(v37), a7, (uint64_t)sub_10011ED60, v16, v17, v18);
            }
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1353, "OI_STATUS _ACI_LEMetaScanFilterUUIDV2(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
LABEL_52:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1350, "OI_STATUS _ACI_LEMetaScanFilterUUIDV2(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
LABEL_50:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      goto LABEL_40;
    }
    sub_100253460();
    if (a2)
    {
LABEL_40:
      v33 = a2;
      while (!HIBYTE(v37))
      {
        v34 = WORD2(v37);
        if (WORD1(v37) <= WORD2(v37) || BYTE6(v37) != 2)
          goto LABEL_48;
        v35 = *(_BYTE *)(a1 - 1 + v33--);
        ++WORD2(v37);
        *(_BYTE *)(v36 + v34) = v35;
        if ((unint64_t)(v33 + 1) <= 1)
          return sub_10004C8A0(64998, v36, BYTE4(v37), a7, (uint64_t)sub_10011ED60, v16, v17, v18);
      }
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1358, "OI_STATUS _ACI_LEMetaScanFilterUUIDV2(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
LABEL_48:
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
  }
  return sub_10004C8A0(64998, v36, BYTE4(v37), a7, (uint64_t)sub_10011ED60, v16, v17, v18);
}

uint64_t sub_10012902C(uint64_t a1, unsigned int a2, unsigned int a3, char a4, char a5, char a6, int a7, const void *a8, void *__src, uint64_t (*a10)())
{
  size_t v11;
  BOOL v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  unsigned __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  uint64_t v35;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unsigned __int16 v41;
  uint64_t v42;
  int v43;
  unsigned __int16 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;

  LODWORD(v11) = a7;
  v18 = a2 == 2;
  v47 = 0;
  v48 = 0;
  result = sub_10004BC7C(&v47);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v48))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1379, "OI_STATUS _ACI_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v23 = WORD2(v48);
      if (WORD1(v48) > WORD2(v48) && BYTE6(v48) == 2)
      {
        ++WORD2(v48);
        *(_BYTE *)(v47 + v23) = a3;
        if (HIBYTE(v48))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1380, "OI_STATUS _ACI_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v48) - WORD2(v48) > 5 && BYTE6(v48) == 2)
        {
          v24 = v47 + WORD2(v48);
          *(_WORD *)(v24 + 4) = 0;
          *(_DWORD *)v24 = 0;
          v25 = WORD2(v48);
          v26 = WORD2(v48) + 6;
          WORD2(v48) += 6;
          if (HIBYTE(v48))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1381, "OI_STATUS _ACI_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v48) > v26 && BYTE6(v48) == 2)
          {
            WORD2(v48) = v25 + 7;
            *(_BYTE *)(v47 + v26) = 2;
            if (HIBYTE(v48))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1382, "OI_STATUS _ACI_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
            }
            else
            {
              v27 = WORD2(v48);
              if (WORD1(v48) > WORD2(v48) && BYTE6(v48) == 2)
              {
                ++WORD2(v48);
                *(_BYTE *)(v47 + v27) = 2 * v18;
                if (HIBYTE(v48))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1384, "OI_STATUS _ACI_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
                }
                else
                {
                  v28 = WORD2(v48);
                  if (WORD1(v48) > WORD2(v48) && BYTE6(v48) == 2)
                  {
                    ++WORD2(v48);
                    *(_BYTE *)(v47 + v28) = a4;
                    if (HIBYTE(v48))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1385, "OI_STATUS _ACI_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
                    }
                    else
                    {
                      v29 = WORD2(v48);
                      if (WORD1(v48) > WORD2(v48) && BYTE6(v48) == 2)
                      {
                        ++WORD2(v48);
                        *(_BYTE *)(v47 + v29) = a5;
                        if (HIBYTE(v48))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1386, "OI_STATUS _ACI_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
                        }
                        else
                        {
                          v30 = WORD2(v48);
                          if (WORD1(v48) > WORD2(v48) && BYTE6(v48) == 2)
                          {
                            ++WORD2(v48);
                            *(_BYTE *)(v47 + v30) = a6;
                            if (a3 < 2)
                            {
                              if (a2 == 16 || a2 == 2)
                              {
                                if (a2 == 2)
                                {
                                  v31 = 1;
                                  while (!HIBYTE(v48))
                                  {
                                    v32 = WORD2(v48);
                                    if (WORD1(v48) <= WORD2(v48) || BYTE6(v48) != 2)
                                      goto LABEL_68;
                                    v33 = *(_BYTE *)(a1 + v31);
                                    ++WORD2(v48);
                                    *(_BYTE *)(v47 + v32) = v33;
                                    if (--v31 == -1)
                                    {
                                      v34 = -14;
                                      while (!HIBYTE(v48))
                                      {
                                        v35 = WORD2(v48);
                                        if (WORD1(v48) <= WORD2(v48) || BYTE6(v48) != 2)
                                          goto LABEL_70;
                                        ++WORD2(v48);
                                        *(_BYTE *)(v47 + v35) = 0;
                                        if (__CFADD__(v34++, 1))
                                          goto LABEL_46;
                                      }
                                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1396, "OI_STATUS _ACI_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
LABEL_70:
                                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/"
                                                             "Stack/vsc/aci/aci_vsc.c");
                                    }
                                  }
                                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1393, "OI_STATUS _ACI_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
LABEL_68:
                                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stac"
                                                         "k/vsc/aci/aci_vsc.c");
                                }
                                goto LABEL_41;
                              }
                              sub_100253460();
                              if (a2)
                              {
LABEL_41:
                                v38 = a2;
                                while (!HIBYTE(v48))
                                {
                                  v39 = WORD2(v48);
                                  if (WORD1(v48) <= WORD2(v48) || BYTE6(v48) != 2)
                                    goto LABEL_66;
                                  v40 = *(_BYTE *)(a1 - 1 + v38--);
                                  ++WORD2(v48);
                                  *(_BYTE *)(v47 + v39) = v40;
                                  if ((unint64_t)(v38 + 1) <= 1)
                                    goto LABEL_46;
                                }
                                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1401, "OI_STATUS _ACI_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
LABEL_66:
                                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/"
                                                       "vsc/aci/aci_vsc.c");
                              }
LABEL_46:
                              if (v11 >= 0x1B)
                                v11 = 27;
                              else
                                v11 = v11;
                              if (HIBYTE(v48))
                              {
                                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1408, "OI_STATUS _ACI_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
                              }
                              else if (WORD1(v48) - WORD2(v48) > 1 && BYTE6(v48) == 2)
                              {
                                *(_WORD *)(v47 + WORD2(v48)) = v11;
                                v41 = WORD2(v48) + 2;
                                WORD2(v48) += 2;
                                v42 = v47;
                                if (HIBYTE(v48))
                                {
                                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1409, "OI_STATUS _ACI_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
                                  v43 = 0;
                                }
                                else
                                {
                                  v43 = WORD1(v48) - v41;
                                }
                                if (v43 < (int)v11 || BYTE6(v48) != 2)
                                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stac"
                                                         "k/vsc/aci/aci_vsc.c");
                                memmove((void *)(v42 + v41), a8, v11);
                                v44 = WORD2(v48) + v11;
                                WORD2(v48) += v11;
                                v45 = v47;
                                if (HIBYTE(v48))
                                {
                                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1410, "OI_STATUS _ACI_LEMetaScanFilterUUIDV3(uint8_t *, uint8_t, uint8_t, _Bool, uint8_t, uint8_t, uint8_t, uint8_t *, uint8_t *, BT_VSC_COMPLETE_CB)");
                                  v46 = 0;
                                }
                                else
                                {
                                  v46 = WORD1(v48) - v44;
                                }
                                if (v46 < (int)v11 || BYTE6(v48) != 2)
                                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stac"
                                                         "k/vsc/aci/aci_vsc.c");
                                memmove((void *)(v45 + v44), __src, v11);
                                v37 = BYTE4(v48) + v11;
                                WORD2(v48) += v11;
                                return sub_10004C8A0(64985, v47, v37, a10, (uint64_t)sub_10011ED60, v20, v21, v22);
                              }
                              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                            }
                            v37 = BYTE4(v48);
                            return sub_10004C8A0(64985, v47, v37, a10, (uint64_t)sub_10011ED60, v20, v21, v22);
                          }
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_1001297B4(__int16 a1, char a2, char a3, uint64_t a4, char a5, char a6, uint64_t (*a7)())
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  unsigned __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  result = sub_10004BC7C(&v22);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v23))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2073, "OI_STATUS _ACI_LEMetaSetConnectionPrioritization(uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v23) - WORD2(v23) > 1 && BYTE6(v23) == 2)
    {
      *(_WORD *)(v22 + WORD2(v23)) = a1;
      v17 = WORD2(v23);
      v18 = WORD2(v23) + 2;
      WORD2(v23) += 2;
      if (HIBYTE(v23))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2074, "OI_STATUS _ACI_LEMetaSetConnectionPrioritization(uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v23) > v18 && BYTE6(v23) == 2)
      {
        WORD2(v23) = v17 + 3;
        *(_BYTE *)(v22 + v18) = a2;
        if (HIBYTE(v23))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2075, "OI_STATUS _ACI_LEMetaSetConnectionPrioritization(uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v19 = WORD2(v23);
          if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
          {
            ++WORD2(v23);
            *(_BYTE *)(v22 + v19) = a3;
            if (HIBYTE(v23))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2077, "OI_STATUS _ACI_LEMetaSetConnectionPrioritization(uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
            }
            else
            {
              v20 = WORD2(v23);
              if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
              {
                ++WORD2(v23);
                *(_BYTE *)(v22 + v20) = a5;
                if (HIBYTE(v23))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2078, "OI_STATUS _ACI_LEMetaSetConnectionPrioritization(uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
                }
                else
                {
                  v21 = WORD2(v23);
                  if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
                  {
                    ++WORD2(v23);
                    *(_BYTE *)(v22 + v21) = a6;
                    return sub_10004C8A0(65051, v22, BYTE4(v23), a7, (uint64_t)sub_10011ED60, v14, v15, v16);
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100129A9C(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2278, "OI_STATUS _ACI_WriteLocalHostState(_Bool, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = a1;
        if (HIBYTE(v10))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2279, "OI_STATUS _ACI_WriteLocalHostState(_Bool, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
        {
          *(_BYTE *)(v9 + WORD2(v10)) = 0;
          ++WORD2(v10);
          return sub_10004C8A0(64928, v9, BYTE4(v10), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100129BE4(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)())
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  unsigned __int16 v13;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;

  v16 = 0;
  v17 = 0;
  v15 = 0;
  v6 = sub_100182588(a1, (uint64_t *)&v17);
  if ((_DWORD)v6)
  {
    v7 = v6;
    if (sub_10005549C())
    {
      sub_100054530("VSC Error %!", v7);
      v8 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  else
  {
    v7 = sub_10004BC7C(&v15);
    if (!(_DWORD)v7)
    {
      if (HIBYTE(v16))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2315, "OI_STATUS _ACI_WriteHiPrioConn(OI_BD_ADDR *, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v16) - WORD2(v16) > 1 && BYTE6(v16) == 2)
      {
        *(_WORD *)(v15 + WORD2(v16)) = *v17;
        v12 = WORD2(v16);
        v13 = WORD2(v16) + 2;
        WORD2(v16) += 2;
        if (HIBYTE(v16))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2316, "OI_STATUS _ACI_WriteHiPrioConn(OI_BD_ADDR *, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v16) > v13 && BYTE6(v16) == 2)
        {
          WORD2(v16) = v12 + 3;
          *(_BYTE *)(v15 + v13) = a2;
          return sub_10004C8A0(65065, v15, BYTE4(v16), a4, (uint64_t)sub_10011ED60, v9, v10, v11);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
  }
  return v7;
}

uint64_t sub_100129DBC(char a1, _WORD *a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  result = sub_10004BC7C(&v12);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v13))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2332, "OI_STATUS _ACI_WriteWBSEnable(_Bool, OI_HCI_CONNECTION_HANDLE, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v10 = WORD2(v13);
      if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
      {
        ++WORD2(v13);
        *(_BYTE *)(v12 + v10) = a1;
        if (HIBYTE(v13))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2333, "OI_STATUS _ACI_WriteWBSEnable(_Bool, OI_HCI_CONNECTION_HANDLE, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v13) - WORD2(v13) > 1 && BYTE6(v13) == 2)
        {
          *(_WORD *)(v12 + WORD2(v13)) = *a2;
          v11 = WORD2(v13) + 2;
          WORD2(v13) += 2;
          if (HIBYTE(v13))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2334, "OI_STATUS _ACI_WriteWBSEnable(_Bool, OI_HCI_CONNECTION_HANDLE, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v13) - v11 > 3 && BYTE6(v13) == 2)
          {
            *(_BYTE *)(v12 + v11) = -1;
            *(_BYTE *)(v12 + WORD2(v13) + 1) = -1;
            *(_BYTE *)(v12 + WORD2(v13) + 2) = -1;
            *(_BYTE *)(v12 + WORD2(v13) + 3) = -1;
            WORD2(v13) += 4;
            return sub_10004C8A0(65041, v12, BYTE4(v13), a3, (uint64_t)sub_10011ED60, v7, v8, v9);
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100129FE0(int a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  result = sub_10004BC7C(&v14);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2373, "OI_STATUS _ACI_WriteVoiceConfig(VSCVoiceRouting, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v15);
      if (WORD1(v15) > WORD2(v15) && BYTE6(v15) == 2)
      {
        ++WORD2(v15);
        *(_BYTE *)(v14 + v8) = a1 == 1;
        if (HIBYTE(v15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2374, "OI_STATUS _ACI_WriteVoiceConfig(VSCVoiceRouting, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v9 = WORD2(v15);
          if (WORD1(v15) > WORD2(v15) && BYTE6(v15) == 2)
          {
            ++WORD2(v15);
            *(_BYTE *)(v14 + v9) = 0;
            if (HIBYTE(v15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2375, "OI_STATUS _ACI_WriteVoiceConfig(VSCVoiceRouting, BT_VSC_COMPLETE_CB)");
            }
            else
            {
              v10 = WORD2(v15);
              if (WORD1(v15) > WORD2(v15) && BYTE6(v15) == 2)
              {
                ++WORD2(v15);
                *(_BYTE *)(v14 + v10) = -1;
                if (HIBYTE(v15))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2376, "OI_STATUS _ACI_WriteVoiceConfig(VSCVoiceRouting, BT_VSC_COMPLETE_CB)");
                }
                else
                {
                  v11 = WORD2(v15);
                  if (WORD1(v15) > WORD2(v15) && BYTE6(v15) == 2)
                  {
                    ++WORD2(v15);
                    *(_BYTE *)(v14 + v11) = -1;
                    if (HIBYTE(v15))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2377, "OI_STATUS _ACI_WriteVoiceConfig(VSCVoiceRouting, BT_VSC_COMPLETE_CB)");
                    }
                    else
                    {
                      v12 = WORD2(v15);
                      if (WORD1(v15) > WORD2(v15) && BYTE6(v15) == 2)
                      {
                        ++WORD2(v15);
                        *(_BYTE *)(v14 + v12) = -1;
                        if (HIBYTE(v15))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2378, "OI_STATUS _ACI_WriteVoiceConfig(VSCVoiceRouting, BT_VSC_COMPLETE_CB)");
                        }
                        else
                        {
                          v13 = WORD2(v15);
                          if (WORD1(v15) > WORD2(v15) && BYTE6(v15) == 2)
                          {
                            ++WORD2(v15);
                            *(_BYTE *)(v14 + v13) = -1;
                            return sub_10004C8A0(65040, v14, BYTE4(v15), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
                          }
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012A31C(_WORD *a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  result = sub_10004BC7C(&v8);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v9))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3141, "OI_STATUS _ACI_ReadRawRSSI(OI_HCI_CONNECTION_HANDLE, BT_VSC_READ_RAW_RSSI_CB)");
    }
    else if (WORD1(v9) - WORD2(v9) > 1 && BYTE6(v9) == 2)
    {
      *(_WORD *)(v8 + WORD2(v9)) = *a1;
      WORD2(v9) += 2;
      return sub_10004C8A0(65020, v8, BYTE4(v9), a2, (uint64_t)sub_100136358, v5, v6, v7);
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012A408(_WORD *a1, char a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, uint64_t (*a7)())
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  result = sub_10004BC7C(&v24);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v25))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2574, "OI_STATUS _ACI_WriteLinkQualityMode(OI_HCI_CONNECTION_HANDLE, _Bool, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v25) - WORD2(v25) > 1 && BYTE6(v25) == 2)
    {
      *(_WORD *)(v24 + WORD2(v25)) = *a1;
      v18 = WORD2(v25);
      v19 = WORD2(v25) + 2;
      WORD2(v25) += 2;
      if (HIBYTE(v25))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2575, "OI_STATUS _ACI_WriteLinkQualityMode(OI_HCI_CONNECTION_HANDLE, _Bool, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v25) > v19 && BYTE6(v25) == 2)
      {
        WORD2(v25) = v18 + 3;
        *(_BYTE *)(v24 + v19) = a2;
        if (HIBYTE(v25))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2576, "OI_STATUS _ACI_WriteLinkQualityMode(OI_HCI_CONNECTION_HANDLE, _Bool, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v20 = WORD2(v25);
          if (WORD1(v25) > WORD2(v25) && BYTE6(v25) == 2)
          {
            ++WORD2(v25);
            *(_BYTE *)(v24 + v20) = 0;
            if (HIBYTE(v25))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2577, "OI_STATUS _ACI_WriteLinkQualityMode(OI_HCI_CONNECTION_HANDLE, _Bool, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v25) - WORD2(v25) > 1 && BYTE6(v25) == 2)
            {
              *(_WORD *)(v24 + WORD2(v25)) = a3;
              v21 = WORD2(v25) + 2;
              WORD2(v25) += 2;
              if (HIBYTE(v25))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2578, "OI_STATUS _ACI_WriteLinkQualityMode(OI_HCI_CONNECTION_HANDLE, _Bool, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
              }
              else if (WORD1(v25) - v21 > 1 && BYTE6(v25) == 2)
              {
                *(_BYTE *)(v24 + v21) = a4;
                *(_BYTE *)(v24 + WORD2(v25) + 1) = HIBYTE(a4);
                v22 = WORD2(v25) + 2;
                WORD2(v25) += 2;
                if (HIBYTE(v25))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2579, "OI_STATUS _ACI_WriteLinkQualityMode(OI_HCI_CONNECTION_HANDLE, _Bool, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
                }
                else if (WORD1(v25) - v22 > 1 && BYTE6(v25) == 2)
                {
                  *(_BYTE *)(v24 + v22) = a5;
                  *(_BYTE *)(v24 + WORD2(v25) + 1) = HIBYTE(a5);
                  v23 = WORD2(v25) + 2;
                  WORD2(v25) += 2;
                  if (HIBYTE(v25))
                  {
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2580, "OI_STATUS _ACI_WriteLinkQualityMode(OI_HCI_CONNECTION_HANDLE, _Bool, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
                  }
                  else if (WORD1(v25) - v23 > 1 && BYTE6(v25) == 2)
                  {
                    *(_BYTE *)(v24 + v23) = a6;
                    *(_BYTE *)(v24 + WORD2(v25) + 1) = HIBYTE(a6);
                    WORD2(v25) += 2;
                    return sub_10004C8A0(65294, v24, BYTE4(v25), a7, (uint64_t)sub_10011ED60, v15, v16, v17);
                  }
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012A860(__int16 a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  result = sub_10004BC7C(&v8);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v9))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2634, "OI_STATUS _ACI_DelayedHostWake(uint16_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v9) - WORD2(v9) > 1 && BYTE6(v9) == 2)
    {
      *(_WORD *)(v8 + WORD2(v9)) = a1;
      WORD2(v9) += 2;
      return sub_10004C8A0(64916, v8, BYTE4(v9), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012A948(int a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  result = sub_10004BC7C(&v22);
  if (!(_DWORD)result)
  {
    switch(a1)
    {
      case 145:
        LOWORD(result) = -731;
        return sub_10004C8A0(result, v22, BYTE4(v23), a2, (uint64_t)sub_10011F7EC, v5, v6, v7);
      case 146:
        LOWORD(result) = -730;
        return sub_10004C8A0(result, v22, BYTE4(v23), a2, (uint64_t)sub_10011F7EC, v5, v6, v7);
      case 147:
        LOWORD(result) = -729;
        return sub_10004C8A0(result, v22, BYTE4(v23), a2, (uint64_t)sub_10011F7EC, v5, v6, v7);
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
        if (HIBYTE(v23))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3173, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
        }
        else
        {
          v8 = WORD2(v23);
          if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
          {
            ++WORD2(v23);
            *(_BYTE *)(v22 + v8) = 0;
            if (HIBYTE(v23))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3174, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
            }
            else
            {
              v9 = WORD2(v23);
              if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
              {
                ++WORD2(v23);
                *(_BYTE *)(v22 + v9) = 1;
                if (HIBYTE(v23))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3175, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
                }
                else
                {
                  v10 = WORD2(v23);
                  if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
                  {
                    ++WORD2(v23);
                    *(_BYTE *)(v22 + v10) = 2;
                    if (HIBYTE(v23))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3176, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
                    }
                    else
                    {
                      v11 = WORD2(v23);
                      if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
                      {
                        ++WORD2(v23);
                        *(_BYTE *)(v22 + v11) = 3;
                        if (HIBYTE(v23))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3177, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
                        }
                        else
                        {
                          v12 = WORD2(v23);
                          if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
                          {
                            ++WORD2(v23);
                            *(_BYTE *)(v22 + v12) = 4;
                            if (HIBYTE(v23))
                            {
                              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3178, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
                            }
                            else
                            {
                              v13 = WORD2(v23);
                              if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
                              {
                                ++WORD2(v23);
                                *(_BYTE *)(v22 + v13) = 5;
                                LOWORD(result) = -724;
                                return sub_10004C8A0(result, v22, BYTE4(v23), a2, (uint64_t)sub_10011F7EC, v5, v6, v7);
                              }
                            }
                            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                          }
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      case 154:
        if (HIBYTE(v23))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3183, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
        }
        else
        {
          v14 = WORD2(v23);
          if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
          {
            ++WORD2(v23);
            *(_BYTE *)(v22 + v14) = 0;
LABEL_58:
            LOWORD(result) = -722;
            return sub_10004C8A0(result, v22, BYTE4(v23), a2, (uint64_t)sub_10011F7EC, v5, v6, v7);
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      case 155:
        if (HIBYTE(v23))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3187, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
        }
        else
        {
          v15 = WORD2(v23);
          if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
          {
            v16 = v22;
            ++WORD2(v23);
            v17 = 1;
LABEL_57:
            *(_BYTE *)(v16 + v15) = v17;
            goto LABEL_58;
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      case 156:
        if (HIBYTE(v23))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3191, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
        }
        else
        {
          v15 = WORD2(v23);
          if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
          {
            v16 = v22;
            ++WORD2(v23);
            v17 = 2;
            goto LABEL_57;
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      case 157:
        if (HIBYTE(v23))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3195, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
        }
        else
        {
          v15 = WORD2(v23);
          if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
          {
            v16 = v22;
            ++WORD2(v23);
            v17 = 3;
            goto LABEL_57;
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      case 158:
        if (HIBYTE(v23))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3199, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
        }
        else
        {
          v15 = WORD2(v23);
          if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
          {
            v16 = v22;
            ++WORD2(v23);
            v17 = 4;
            goto LABEL_57;
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      case 159:
        if (HIBYTE(v23))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3203, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
        }
        else
        {
          v15 = WORD2(v23);
          if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
          {
            v16 = v22;
            ++WORD2(v23);
            v17 = 5;
            goto LABEL_57;
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      case 161:
        if (HIBYTE(v23))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3207, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
        }
        else
        {
          v15 = WORD2(v23);
          if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
          {
            v16 = v22;
            ++WORD2(v23);
            v17 = 6;
            goto LABEL_57;
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      case 162:
        if (HIBYTE(v23))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3211, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
        }
        else
        {
          v15 = WORD2(v23);
          if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
          {
            v16 = v22;
            ++WORD2(v23);
            v17 = 7;
            goto LABEL_57;
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      case 163:
        if (HIBYTE(v23))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3216, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
        }
        else
        {
          v18 = WORD2(v23);
          if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
          {
            ++WORD2(v23);
            *(_BYTE *)(v22 + v18) = 0;
LABEL_72:
            LOWORD(result) = -736;
            return sub_10004C8A0(result, v22, BYTE4(v23), a2, (uint64_t)sub_10011F7EC, v5, v6, v7);
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      case 164:
        if (HIBYTE(v23))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3220, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
        }
        else
        {
          v19 = WORD2(v23);
          if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
          {
            v20 = v22;
            ++WORD2(v23);
            v21 = 1;
LABEL_71:
            *(_BYTE *)(v20 + v19) = v21;
            goto LABEL_72;
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      case 165:
        if (HIBYTE(v23))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3224, "OI_STATUS _ACI_ReadFactoryCalTable(uint8_t, BT_VSC_BYTESTREAM_CB)");
        }
        else
        {
          v19 = WORD2(v23);
          if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
          {
            v20 = v22;
            ++WORD2(v23);
            v21 = 2;
            goto LABEL_71;
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      default:
        return sub_10004C8A0(result, v22, BYTE4(v23), a2, (uint64_t)sub_10011F7EC, v5, v6, v7);
    }
  }
  return result;
}

uint64_t sub_10012B220(_WORD *a1, char a2, char a3, char a4, uint64_t (*a5)())
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = 0;
  v19 = 0;
  result = sub_10004BC7C(&v18);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v19))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2395, "OI_STATUS _ACI_ConfigureLinkQualityStatsTriggers(OI_HCI_CONNECTION_HANDLE, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v19) - WORD2(v19) > 1 && BYTE6(v19) == 2)
    {
      *(_WORD *)(v18 + WORD2(v19)) = *a1;
      v14 = WORD2(v19);
      v15 = WORD2(v19) + 2;
      WORD2(v19) += 2;
      if (HIBYTE(v19))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2396, "OI_STATUS _ACI_ConfigureLinkQualityStatsTriggers(OI_HCI_CONNECTION_HANDLE, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v19) > v15 && BYTE6(v19) == 2)
      {
        WORD2(v19) = v14 + 3;
        *(_BYTE *)(v18 + v15) = a2;
        if (HIBYTE(v19))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2397, "OI_STATUS _ACI_ConfigureLinkQualityStatsTriggers(OI_HCI_CONNECTION_HANDLE, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v16 = WORD2(v19);
          if (WORD1(v19) > WORD2(v19) && BYTE6(v19) == 2)
          {
            ++WORD2(v19);
            *(_BYTE *)(v18 + v16) = a3;
            if (HIBYTE(v19))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2398, "OI_STATUS _ACI_ConfigureLinkQualityStatsTriggers(OI_HCI_CONNECTION_HANDLE, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
            }
            else
            {
              v17 = WORD2(v19);
              if (WORD1(v19) > WORD2(v19) && BYTE6(v19) == 2)
              {
                ++WORD2(v19);
                *(_BYTE *)(v18 + v17) = a4;
                return sub_10004C8A0(65276, v18, BYTE4(v19), a5, (uint64_t)sub_10011ED60, v11, v12, v13);
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012B490(char *a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = sub_10004BC7C(&v10);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v11))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2413, "OI_STATUS _ACI_CreateMultipleAdvInstance(const LE_Address *, BT_VSC_CREATE_MULTI_ADV_INST_CB)");
    }
    else
    {
      v5 = WORD2(v11);
      if (WORD1(v11) > WORD2(v11) && BYTE6(v11) == 2)
      {
        v6 = *a1;
        ++WORD2(v11);
        *(_BYTE *)(v10 + v5) = v6;
        if (HIBYTE(v11))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2414, "OI_STATUS _ACI_CreateMultipleAdvInstance(const LE_Address *, BT_VSC_CREATE_MULTI_ADV_INST_CB)");
        }
        else if (WORD1(v11) - WORD2(v11) > 5 && BYTE6(v11) == 2)
        {
          sub_10004C878(v10 + WORD2(v11), (uint64_t)(a1 + 1), 6uLL);
          WORD2(v11) += 6;
          return sub_10004C8A0(64826, v10, BYTE4(v11), a2, (uint64_t)sub_1001364B0, v7, v8, v9);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012B5EC(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2429, "OI_STATUS _ACI_RemoveMultipleAdvInstance(uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = a1;
        return sub_10004C8A0(64827, v9, BYTE4(v10), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012B6B8(char a1, __int16 a2, __int16 a3, char a4, char a5, char a6, uint64_t (*a7)())
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  __int16 v20;
  unsigned __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  result = sub_10004BC7C(&v24);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v25))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2444, "OI_STATUS _ACI_SetMultipleAdvInstanceParams(uint8_t, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v18 = WORD2(v25);
      if (WORD1(v25) > WORD2(v25) && BYTE6(v25) == 2)
      {
        ++WORD2(v25);
        *(_BYTE *)(v24 + v18) = a1;
        if (HIBYTE(v25))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2445, "OI_STATUS _ACI_SetMultipleAdvInstanceParams(uint8_t, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v25) - WORD2(v25) > 1 && BYTE6(v25) == 2)
        {
          *(_WORD *)(v24 + WORD2(v25)) = a2;
          v19 = WORD2(v25) + 2;
          WORD2(v25) += 2;
          if (HIBYTE(v25))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2446, "OI_STATUS _ACI_SetMultipleAdvInstanceParams(uint8_t, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v25) - v19 > 1 && BYTE6(v25) == 2)
          {
            *(_BYTE *)(v24 + v19) = a3;
            *(_BYTE *)(v24 + WORD2(v25) + 1) = HIBYTE(a3);
            v20 = WORD2(v25);
            v21 = WORD2(v25) + 2;
            WORD2(v25) += 2;
            if (HIBYTE(v25))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2447, "OI_STATUS _ACI_SetMultipleAdvInstanceParams(uint8_t, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v25) > v21 && BYTE6(v25) == 2)
            {
              WORD2(v25) = v20 + 3;
              *(_BYTE *)(v24 + v21) = a4;
              if (HIBYTE(v25))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2448, "OI_STATUS _ACI_SetMultipleAdvInstanceParams(uint8_t, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
              }
              else
              {
                v22 = WORD2(v25);
                if (WORD1(v25) > WORD2(v25) && BYTE6(v25) == 2)
                {
                  ++WORD2(v25);
                  *(_BYTE *)(v24 + v22) = a5;
                  if (HIBYTE(v25))
                  {
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2449, "OI_STATUS _ACI_SetMultipleAdvInstanceParams(uint8_t, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
                  }
                  else
                  {
                    v23 = WORD2(v25);
                    if (WORD1(v25) > WORD2(v25) && BYTE6(v25) == 2)
                    {
                      ++WORD2(v25);
                      *(_BYTE *)(v24 + v23) = a6;
                      return sub_10004C8A0(64828, v24, BYTE4(v25), a7, (uint64_t)sub_10011ED60, v15, v16, v17);
                    }
                  }
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                }
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012BA40(char a1, unsigned int a2, const void *a3, uint64_t (*a4)())
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  result = sub_10004BC7C(&v15);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v16))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2464, "OI_STATUS _ACI_SetMultipleAdvInstanceData(uint8_t, uint8_t, const uint8_t *, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v9 = WORD2(v16);
      if (WORD1(v16) > WORD2(v16) && BYTE6(v16) == 2)
      {
        ++WORD2(v16);
        *(_BYTE *)(v15 + v9) = a1;
        if (HIBYTE(v16))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2465, "OI_STATUS _ACI_SetMultipleAdvInstanceData(uint8_t, uint8_t, const uint8_t *, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v10 = WORD2(v16);
          if (WORD1(v16) > WORD2(v16) && BYTE6(v16) == 2)
          {
            if (a2 >= 0x1F)
              v11 = 31;
            else
              v11 = a2;
            ++WORD2(v16);
            *(_BYTE *)(v15 + v10) = v11;
            if (HIBYTE(v16))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2466, "OI_STATUS _ACI_SetMultipleAdvInstanceData(uint8_t, uint8_t, const uint8_t *, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v16) - WORD2(v16) > 30 && BYTE6(v16) == 2)
            {
              memmove((void *)(v15 + WORD2(v16)), a3, 0x1FuLL);
              WORD2(v16) += 31;
              return sub_10004C8A0(64829, v15, BYTE4(v16), a4, (uint64_t)sub_10011ED60, v12, v13, v14);
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012BC2C(char a1, unsigned int a2, const void *a3, uint64_t (*a4)())
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  result = sub_10004BC7C(&v15);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v16))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2481, "OI_STATUS _ACI_SetMultipleScanRspInstanceData(uint8_t, uint8_t, const uint8_t *, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v9 = WORD2(v16);
      if (WORD1(v16) > WORD2(v16) && BYTE6(v16) == 2)
      {
        ++WORD2(v16);
        *(_BYTE *)(v15 + v9) = a1;
        if (HIBYTE(v16))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2482, "OI_STATUS _ACI_SetMultipleScanRspInstanceData(uint8_t, uint8_t, const uint8_t *, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v10 = WORD2(v16);
          if (WORD1(v16) > WORD2(v16) && BYTE6(v16) == 2)
          {
            if (a2 >= 0x1F)
              v11 = 31;
            else
              v11 = a2;
            ++WORD2(v16);
            *(_BYTE *)(v15 + v10) = v11;
            if (HIBYTE(v16))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2483, "OI_STATUS _ACI_SetMultipleScanRspInstanceData(uint8_t, uint8_t, const uint8_t *, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v16) - WORD2(v16) > 30 && BYTE6(v16) == 2)
            {
              memmove((void *)(v15 + WORD2(v16)), a3, 0x1FuLL);
              WORD2(v16) += 31;
              return sub_10004C8A0(64830, v15, BYTE4(v16), a4, (uint64_t)sub_10011ED60, v12, v13, v14);
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012BE18(char a1, char a2, int a3, char a4, uint64_t (*a5)())
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v18 = 0;
  v19 = 0;
  result = sub_10004BC7C(&v18);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v19))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2498, "OI_STATUS _ACI_SetMultipleAdvInstanceEnable(uint8_t, _Bool, uint32_t, _Bool, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v14 = WORD2(v19);
      if (WORD1(v19) > WORD2(v19) && BYTE6(v19) == 2)
      {
        ++WORD2(v19);
        *(_BYTE *)(v18 + v14) = a1;
        if (HIBYTE(v19))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2499, "OI_STATUS _ACI_SetMultipleAdvInstanceEnable(uint8_t, _Bool, uint32_t, _Bool, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v15 = WORD2(v19);
          if (WORD1(v19) > WORD2(v19) && BYTE6(v19) == 2)
          {
            ++WORD2(v19);
            *(_BYTE *)(v18 + v15) = a2;
            if (HIBYTE(v19))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2500, "OI_STATUS _ACI_SetMultipleAdvInstanceEnable(uint8_t, _Bool, uint32_t, _Bool, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v19) - WORD2(v19) > 3 && BYTE6(v19) == 2)
            {
              *(_WORD *)(v18 + WORD2(v19)) = a3;
              *(_BYTE *)(v18 + WORD2(v19) + 2) = BYTE2(a3);
              *(_BYTE *)(v18 + WORD2(v19) + 3) = HIBYTE(a3);
              v16 = WORD2(v19);
              v17 = WORD2(v19) + 4;
              WORD2(v19) += 4;
              if (HIBYTE(v19))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2501, "OI_STATUS _ACI_SetMultipleAdvInstanceEnable(uint8_t, _Bool, uint32_t, _Bool, BT_VSC_COMPLETE_CB)");
              }
              else if (WORD1(v19) > v17 && BYTE6(v19) == 2)
              {
                WORD2(v19) = v16 + 5;
                *(_BYTE *)(v18 + v17) = a4;
                return sub_10004C8A0(64831, v18, BYTE4(v19), a5, (uint64_t)sub_10011ED60, v11, v12, v13);
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012C0AC(char a1, char *a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  result = sub_10004BC7C(&v13);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v14))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2517, "OI_STATUS _ACI_UpdateMultipleAdvInstanceAddress(uint8_t, const LE_Address *, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v7 = WORD2(v14);
      if (WORD1(v14) > WORD2(v14) && BYTE6(v14) == 2)
      {
        ++WORD2(v14);
        *(_BYTE *)(v13 + v7) = a1;
        if (HIBYTE(v14))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2518, "OI_STATUS _ACI_UpdateMultipleAdvInstanceAddress(uint8_t, const LE_Address *, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v8 = WORD2(v14);
          if (WORD1(v14) > WORD2(v14) && BYTE6(v14) == 2)
          {
            v9 = *a2;
            ++WORD2(v14);
            *(_BYTE *)(v13 + v8) = v9;
            if (HIBYTE(v14))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2519, "OI_STATUS _ACI_UpdateMultipleAdvInstanceAddress(uint8_t, const LE_Address *, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v14) - WORD2(v14) > 5 && BYTE6(v14) == 2)
            {
              sub_10004C878(v13 + WORD2(v14), (uint64_t)(a2 + 1), 6uLL);
              WORD2(v14) += 6;
              return sub_10004C8A0(64833, v13, BYTE4(v14), a3, (uint64_t)sub_10011ED60, v10, v11, v12);
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012C28C(char a1, __int16 a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  result = sub_10004BC7C(&v13);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v14))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2537, "OI_STATUS _ACI_EnableExtendedDuplicateFilter(_Bool, uint16_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v14) - WORD2(v14) > 1 && BYTE6(v14) == 2)
    {
      *(_WORD *)(v13 + WORD2(v14)) = a2;
      v10 = WORD2(v14);
      v11 = WORD2(v14) + 2;
      WORD2(v14) += 2;
      if (HIBYTE(v14))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2538, "OI_STATUS _ACI_EnableExtendedDuplicateFilter(_Bool, uint16_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v14) > v11 && BYTE6(v14) == 2)
      {
        WORD2(v14) = v10 + 3;
        *(_BYTE *)(v13 + v11) = a1;
        if (HIBYTE(v14))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2539, "OI_STATUS _ACI_EnableExtendedDuplicateFilter(_Bool, uint16_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v12 = WORD2(v14);
          if (WORD1(v14) > WORD2(v14) && BYTE6(v14) == 2)
          {
            ++WORD2(v14);
            *(_BYTE *)(v13 + v12) = -1;
            if (HIBYTE(v14))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2540, "OI_STATUS _ACI_EnableExtendedDuplicateFilter(_Bool, uint16_t, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v14) - WORD2(v14) > 1 && BYTE6(v14) == 2)
            {
              *(_BYTE *)(v13 + WORD2(v14)) = -1;
              *(_BYTE *)(v13 + WORD2(v14) + 1) = -1;
              WORD2(v14) += 2;
              return sub_10004C8A0(64960, v13, BYTE4(v14), a3, (uint64_t)sub_10011ED60, v7, v8, v9);
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012C504(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = sub_10004BC7C(&v10);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v11))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2555, "OI_STATUS _ACI_LMPRoutingEnable(_Bool, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v11);
      if (WORD1(v11) > WORD2(v11) && BYTE6(v11) == 2)
      {
        ++WORD2(v11);
        *(_BYTE *)(v10 + v8) = 1;
        if (HIBYTE(v11))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2559, "OI_STATUS _ACI_LMPRoutingEnable(_Bool, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v9 = WORD2(v11);
          if (WORD1(v11) > WORD2(v11) && BYTE6(v11) == 2)
          {
            ++WORD2(v11);
            *(_BYTE *)(v10 + v9) = a1;
            return sub_10004C8A0(65384, v10, BYTE4(v11), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012C64C(_WORD *a1, __int16 a2, __int16 a3, uint64_t (*a4)())
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  result = sub_10004BC7C(&v14);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2618, "OI_STATUS _ACI_EnableAudioStats(OI_HCI_CONNECTION_HANDLE, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v15) - WORD2(v15) > 1 && BYTE6(v15) == 2)
    {
      *(_WORD *)(v14 + WORD2(v15)) = *a1;
      v12 = WORD2(v15) + 2;
      WORD2(v15) += 2;
      if (HIBYTE(v15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2619, "OI_STATUS _ACI_EnableAudioStats(OI_HCI_CONNECTION_HANDLE, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v15) - v12 > 1 && BYTE6(v15) == 2)
      {
        *(_BYTE *)(v14 + v12) = a2;
        *(_BYTE *)(v14 + WORD2(v15) + 1) = HIBYTE(a2);
        v13 = WORD2(v15) + 2;
        WORD2(v15) += 2;
        if (HIBYTE(v15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2620, "OI_STATUS _ACI_EnableAudioStats(OI_HCI_CONNECTION_HANDLE, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v15) - v13 > 1 && BYTE6(v15) == 2)
        {
          *(_BYTE *)(v14 + v13) = a3;
          *(_BYTE *)(v14 + WORD2(v15) + 1) = HIBYTE(a3);
          WORD2(v15) += 2;
          return sub_10004C8A0(65383, v14, BYTE4(v15), a4, (uint64_t)sub_10011ED60, v9, v10, v11);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012C870(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2648, "OI_STATUS _ACI_GetAwdDataEvent(uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = a1;
        return sub_10004C8A0(65396, v9, BYTE4(v10), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012C93C(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  result = sub_10004BC7C(&v6);
  if (!(_DWORD)result)
    return sub_10004C8A0(65510, v6, BYTE4(v7), a1, (uint64_t)sub_1001365B4, v3, v4, v5);
  return result;
}

uint64_t sub_10012C98C(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  result = sub_10004BC7C(&v6);
  if (!(_DWORD)result)
    return sub_10004C8A0(65512, v6, BYTE4(v7), a1, (uint64_t)sub_10011ED60, v3, v4, v5);
  return result;
}

uint64_t sub_10012C9DC(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  result = sub_10004BC7C(&v6);
  if (!(_DWORD)result)
    return sub_10004C8A0(64932, v6, BYTE4(v7), a1, (uint64_t)sub_1001369D0, v3, v4, v5);
  return result;
}

uint64_t sub_10012CA2C(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  result = sub_10004BC7C(&v6);
  if (!(_DWORD)result)
    return sub_10004C8A0(64933, v6, BYTE4(v7), a1, (uint64_t)sub_10011ED60, v3, v4, v5);
  return result;
}

uint64_t sub_10012CA7C(uint64_t a1, char a2, char a3, char a4, char a5, uint64_t (*a6)())
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v23 = 0;
  v11 = sub_100182588(a1, (uint64_t *)&v23);
  if ((_DWORD)v11)
  {
    v12 = v11;
    if (sub_10005549C())
    {
      sub_100054530("VSC Error %!", v12);
      v13 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
  else
  {
    v12 = sub_10004BC7C(&v24);
    if (!(_DWORD)v12)
    {
      if (HIBYTE(v25))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2782, "OI_STATUS _ACI_HighPowerEnable(OI_BD_ADDR *, uint8_t, int8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
      }
      else
      {
        v17 = WORD2(v25);
        if (WORD1(v25) > WORD2(v25) && BYTE6(v25) == 2)
        {
          ++WORD2(v25);
          *(_BYTE *)(v24 + v17) = a2;
          if (HIBYTE(v25))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2783, "OI_STATUS _ACI_HighPowerEnable(OI_BD_ADDR *, uint8_t, int8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v25) - WORD2(v25) > 1 && BYTE6(v25) == 2)
          {
            *(_WORD *)(v24 + WORD2(v25)) = *v23;
            v18 = WORD2(v25);
            v19 = WORD2(v25) + 2;
            WORD2(v25) += 2;
            if (HIBYTE(v25))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2784, "OI_STATUS _ACI_HighPowerEnable(OI_BD_ADDR *, uint8_t, int8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v25) > v19 && BYTE6(v25) == 2)
            {
              WORD2(v25) = v18 + 3;
              *(_BYTE *)(v24 + v19) = a3;
              if (HIBYTE(v25))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2785, "OI_STATUS _ACI_HighPowerEnable(OI_BD_ADDR *, uint8_t, int8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
              }
              else
              {
                v20 = WORD2(v25);
                if (WORD1(v25) > WORD2(v25) && BYTE6(v25) == 2)
                {
                  ++WORD2(v25);
                  *(_BYTE *)(v24 + v20) = a4;
                  if (HIBYTE(v25))
                  {
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2786, "OI_STATUS _ACI_HighPowerEnable(OI_BD_ADDR *, uint8_t, int8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
                  }
                  else
                  {
                    v21 = WORD2(v25);
                    if (WORD1(v25) > WORD2(v25) && BYTE6(v25) == 2)
                    {
                      ++WORD2(v25);
                      *(_BYTE *)(v24 + v21) = a5;
                      return sub_10004C8A0(64808, v24, BYTE4(v25), a6, (uint64_t)sub_10011ED60, v14, v15, v16);
                    }
                  }
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                }
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
  }
  return v12;
}

uint64_t sub_10012CDC8(unsigned __int8 a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  result = sub_10004BC7C(&v8);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v9))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3716, "OI_STATUS _ACI_ConfigPageScanResponse(_Bool, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v9) - WORD2(v9) > 1 && BYTE6(v9) == 2)
    {
      *(_WORD *)(v8 + WORD2(v9)) = a1;
      WORD2(v9) += 2;
      return sub_10004C8A0(64876, v8, BYTE4(v9), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012CEAC(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2799, "OI_STATUS _ACI_HDRControl(_Bool, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = a1;
        return sub_10004C8A0(65011, v9, BYTE4(v10), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012CF78(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  result = sub_10004BC7C(&v6);
  if (!(_DWORD)result)
    return sub_10004C8A0(65443, v6, BYTE4(v7), a1, (uint64_t)sub_10011EDE8, v3, v4, v5);
  return result;
}

uint64_t sub_10012CFC8(__int16 a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  result = sub_10004BC7C(&v8);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v9))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2860, "OI_STATUS _ACI_ReadProprietaryRemoteFeatures(OI_HCI_LM_HANDLE, BT_VSC_READ_PROP_REMOTE_FEATURES_CB)");
    }
    else if (WORD1(v9) - WORD2(v9) > 1 && BYTE6(v9) == 2)
    {
      *(_WORD *)(v8 + WORD2(v9)) = a1;
      WORD2(v9) += 2;
      return sub_10004C8A0(65444, v8, BYTE4(v9), a2, (uint64_t)sub_10011EEF4, v5, v6, v7);
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012D0B0(__int16 a1, int a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  result = sub_10004BC7C(&v11);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v12))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2873, "OI_STATUS _ACI_HDRChangeConnPktType(OI_HCI_LM_HANDLE, uint32_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v12) - WORD2(v12) > 1 && BYTE6(v12) == 2)
    {
      *(_WORD *)(v11 + WORD2(v12)) = a1;
      v10 = WORD2(v12) + 2;
      WORD2(v12) += 2;
      if (HIBYTE(v12))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2874, "OI_STATUS _ACI_HDRChangeConnPktType(OI_HCI_LM_HANDLE, uint32_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v12) - v10 > 3 && BYTE6(v12) == 2)
      {
        *(_BYTE *)(v11 + v10) = a2;
        *(_BYTE *)(v11 + WORD2(v12) + 1) = BYTE1(a2);
        *(_BYTE *)(v11 + WORD2(v12) + 2) = BYTE2(a2);
        *(_BYTE *)(v11 + WORD2(v12) + 3) = HIBYTE(a2);
        WORD2(v12) += 4;
        return sub_10004C8A0(65425, v11, BYTE4(v12), a3, (uint64_t)sub_10011ED60, v7, v8, v9);
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012D260(__int16 a1, int a2, int a3, __int16 a4, __int16 a5, char a6, int a7, uint64_t (*a8)())
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  __int16 v24;
  unsigned __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  result = sub_10004BC7C(&v29);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v30))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2890, "OI_STATUS _ACI_HDRSetupSynchConn(OI_HCI_LM_HANDLE, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v30) - WORD2(v30) > 1 && BYTE6(v30) == 2)
    {
      *(_WORD *)(v29 + WORD2(v30)) = a1;
      v20 = WORD2(v30) + 2;
      WORD2(v30) += 2;
      if (HIBYTE(v30))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2891, "OI_STATUS _ACI_HDRSetupSynchConn(OI_HCI_LM_HANDLE, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v30) - v20 > 3 && BYTE6(v30) == 2)
      {
        *(_BYTE *)(v29 + v20) = a2;
        *(_BYTE *)(v29 + WORD2(v30) + 1) = BYTE1(a2);
        *(_BYTE *)(v29 + WORD2(v30) + 2) = BYTE2(a2);
        *(_BYTE *)(v29 + WORD2(v30) + 3) = HIBYTE(a2);
        v21 = WORD2(v30) + 4;
        WORD2(v30) += 4;
        if (HIBYTE(v30))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2892, "OI_STATUS _ACI_HDRSetupSynchConn(OI_HCI_LM_HANDLE, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v30) - v21 > 3 && BYTE6(v30) == 2)
        {
          *(_BYTE *)(v29 + v21) = a3;
          *(_BYTE *)(v29 + WORD2(v30) + 1) = BYTE1(a3);
          *(_BYTE *)(v29 + WORD2(v30) + 2) = BYTE2(a3);
          *(_BYTE *)(v29 + WORD2(v30) + 3) = HIBYTE(a3);
          v22 = WORD2(v30) + 4;
          WORD2(v30) += 4;
          if (HIBYTE(v30))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2893, "OI_STATUS _ACI_HDRSetupSynchConn(OI_HCI_LM_HANDLE, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v30) - v22 > 1 && BYTE6(v30) == 2)
          {
            *(_BYTE *)(v29 + v22) = a4;
            *(_BYTE *)(v29 + WORD2(v30) + 1) = HIBYTE(a4);
            v23 = WORD2(v30) + 2;
            WORD2(v30) += 2;
            if (HIBYTE(v30))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2894, "OI_STATUS _ACI_HDRSetupSynchConn(OI_HCI_LM_HANDLE, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v30) - v23 > 1 && BYTE6(v30) == 2)
            {
              *(_BYTE *)(v29 + v23) = a5;
              *(_BYTE *)(v29 + WORD2(v30) + 1) = HIBYTE(a5);
              v24 = WORD2(v30);
              v25 = WORD2(v30) + 2;
              WORD2(v30) += 2;
              if (HIBYTE(v30))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2895, "OI_STATUS _ACI_HDRSetupSynchConn(OI_HCI_LM_HANDLE, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
              }
              else if (WORD1(v30) > v25 && BYTE6(v30) == 2)
              {
                WORD2(v30) = v24 + 3;
                *(_BYTE *)(v29 + v25) = a6;
                if (HIBYTE(v30))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2898, "OI_STATUS _ACI_HDRSetupSynchConn(OI_HCI_LM_HANDLE, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                }
                else
                {
                  v26 = WORD2(v30);
                  if (WORD1(v30) > WORD2(v30) && BYTE6(v30) == 2)
                  {
                    ++WORD2(v30);
                    *(_BYTE *)(v29 + v26) = a7;
                    if (HIBYTE(v30))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2900, "OI_STATUS _ACI_HDRSetupSynchConn(OI_HCI_LM_HANDLE, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                    }
                    else
                    {
                      v27 = WORD2(v30);
                      if (WORD1(v30) > WORD2(v30) && BYTE6(v30) == 2)
                      {
                        ++WORD2(v30);
                        *(_BYTE *)(v29 + v27) = BYTE1(a7);
                        if (HIBYTE(v30))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2902, "OI_STATUS _ACI_HDRSetupSynchConn(OI_HCI_LM_HANDLE, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                        }
                        else
                        {
                          v28 = WORD2(v30);
                          if (WORD1(v30) > WORD2(v30) && BYTE6(v30) == 2)
                          {
                            ++WORD2(v30);
                            *(_BYTE *)(v29 + v28) = BYTE2(a7);
                            return sub_10004C8A0(64967, v29, BYTE4(v30), a8, (uint64_t)sub_10011ED60, v17, v18, v19);
                          }
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012D800(uint64_t a1, int a2, int a3, __int16 a4, __int16 a5, char a6, int a7, uint64_t (*a8)())
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  __int16 v24;
  unsigned __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  result = sub_10004BC7C(&v29);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v30))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2916, "OI_STATUS _ACI_HDRAcceptSynchConn(OI_BD_ADDR *, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v30) - WORD2(v30) > 5 && BYTE6(v30) == 2)
    {
      sub_10004C878(v29 + WORD2(v30), a1, 6uLL);
      v20 = WORD2(v30) + 6;
      WORD2(v30) += 6;
      if (HIBYTE(v30))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2917, "OI_STATUS _ACI_HDRAcceptSynchConn(OI_BD_ADDR *, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v30) - v20 > 3 && BYTE6(v30) == 2)
      {
        *(_BYTE *)(v29 + v20) = a2;
        *(_BYTE *)(v29 + WORD2(v30) + 1) = BYTE1(a2);
        *(_BYTE *)(v29 + WORD2(v30) + 2) = BYTE2(a2);
        *(_BYTE *)(v29 + WORD2(v30) + 3) = HIBYTE(a2);
        v21 = WORD2(v30) + 4;
        WORD2(v30) += 4;
        if (HIBYTE(v30))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2918, "OI_STATUS _ACI_HDRAcceptSynchConn(OI_BD_ADDR *, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v30) - v21 > 3 && BYTE6(v30) == 2)
        {
          *(_BYTE *)(v29 + v21) = a3;
          *(_BYTE *)(v29 + WORD2(v30) + 1) = BYTE1(a3);
          *(_BYTE *)(v29 + WORD2(v30) + 2) = BYTE2(a3);
          *(_BYTE *)(v29 + WORD2(v30) + 3) = HIBYTE(a3);
          v22 = WORD2(v30) + 4;
          WORD2(v30) += 4;
          if (HIBYTE(v30))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2919, "OI_STATUS _ACI_HDRAcceptSynchConn(OI_BD_ADDR *, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v30) - v22 > 1 && BYTE6(v30) == 2)
          {
            *(_BYTE *)(v29 + v22) = a4;
            *(_BYTE *)(v29 + WORD2(v30) + 1) = HIBYTE(a4);
            v23 = WORD2(v30) + 2;
            WORD2(v30) += 2;
            if (HIBYTE(v30))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2920, "OI_STATUS _ACI_HDRAcceptSynchConn(OI_BD_ADDR *, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v30) - v23 > 1 && BYTE6(v30) == 2)
            {
              *(_BYTE *)(v29 + v23) = a5;
              *(_BYTE *)(v29 + WORD2(v30) + 1) = HIBYTE(a5);
              v24 = WORD2(v30);
              v25 = WORD2(v30) + 2;
              WORD2(v30) += 2;
              if (HIBYTE(v30))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2921, "OI_STATUS _ACI_HDRAcceptSynchConn(OI_BD_ADDR *, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
              }
              else if (WORD1(v30) > v25 && BYTE6(v30) == 2)
              {
                WORD2(v30) = v24 + 3;
                *(_BYTE *)(v29 + v25) = a6;
                if (HIBYTE(v30))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2924, "OI_STATUS _ACI_HDRAcceptSynchConn(OI_BD_ADDR *, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                }
                else
                {
                  v26 = WORD2(v30);
                  if (WORD1(v30) > WORD2(v30) && BYTE6(v30) == 2)
                  {
                    ++WORD2(v30);
                    *(_BYTE *)(v29 + v26) = a7;
                    if (HIBYTE(v30))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2926, "OI_STATUS _ACI_HDRAcceptSynchConn(OI_BD_ADDR *, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                    }
                    else
                    {
                      v27 = WORD2(v30);
                      if (WORD1(v30) > WORD2(v30) && BYTE6(v30) == 2)
                      {
                        ++WORD2(v30);
                        *(_BYTE *)(v29 + v27) = BYTE1(a7);
                        if (HIBYTE(v30))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2928, "OI_STATUS _ACI_HDRAcceptSynchConn(OI_BD_ADDR *, uint32_t, uint32_t, uint16_t, uint16_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                        }
                        else
                        {
                          v28 = WORD2(v30);
                          if (WORD1(v30) > WORD2(v30) && BYTE6(v30) == 2)
                          {
                            ++WORD2(v30);
                            *(_BYTE *)(v29 + v28) = BYTE2(a7);
                            return sub_10004C8A0(65016, v29, BYTE4(v30), a8, (uint64_t)sub_10011ED60, v17, v18, v19);
                          }
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012DD98(_WORD *a1, __int16 a2, char a3, uint64_t (*a4)())
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  __int16 v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  result = sub_10004BC7C(&v15);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v16))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2941, "OI_STATUS _ACI_PhyStatsEnable(OI_HCI_CONNECTION_HANDLE, uint16_t, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v16) - WORD2(v16) > 1 && BYTE6(v16) == 2)
    {
      *(_WORD *)(v15 + WORD2(v16)) = *a1;
      v12 = WORD2(v16) + 2;
      WORD2(v16) += 2;
      if (HIBYTE(v16))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2942, "OI_STATUS _ACI_PhyStatsEnable(OI_HCI_CONNECTION_HANDLE, uint16_t, uint8_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v16) - v12 > 1 && BYTE6(v16) == 2)
      {
        *(_BYTE *)(v15 + v12) = a2;
        *(_BYTE *)(v15 + WORD2(v16) + 1) = HIBYTE(a2);
        v13 = WORD2(v16);
        v14 = WORD2(v16) + 2;
        WORD2(v16) += 2;
        if (HIBYTE(v16))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2943, "OI_STATUS _ACI_PhyStatsEnable(OI_HCI_CONNECTION_HANDLE, uint16_t, uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v16) > v14 && BYTE6(v16) == 2)
        {
          WORD2(v16) = v13 + 3;
          *(_BYTE *)(v15 + v14) = a3;
          return sub_10004C8A0(65378, v15, BYTE4(v16), a4, (uint64_t)sub_10011ED60, v9, v10, v11);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012DFA0(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2970, "OI_STATUS _ACI_SetMWSRxCoexGainMode(uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = a1;
        return sub_10004C8A0(65450, v9, BYTE4(v10), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012E06C(_WORD *a1, char a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  result = sub_10004BC7C(&v12);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v13))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2999, "OI_STATUS _ACI_SetBidirectionalMaxPowerMode(OI_HCI_CONNECTION_HANDLE, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v13) - WORD2(v13) > 1 && BYTE6(v13) == 2)
    {
      *(_WORD *)(v12 + WORD2(v13)) = *a1;
      v10 = WORD2(v13);
      v11 = WORD2(v13) + 2;
      WORD2(v13) += 2;
      if (HIBYTE(v13))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3000, "OI_STATUS _ACI_SetBidirectionalMaxPowerMode(OI_HCI_CONNECTION_HANDLE, uint8_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v13) > v11 && BYTE6(v13) == 2)
      {
        WORD2(v13) = v10 + 3;
        *(_BYTE *)(v12 + v11) = a2;
        return sub_10004C8A0(64820, v12, BYTE4(v13), a3, (uint64_t)sub_10011ED60, v7, v8, v9);
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012E1DC(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2957, "OI_STATUS _ACI_EnableHostWakeReport(_Bool, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = a1;
        return sub_10004C8A0(65385, v9, BYTE4(v10), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012E2A8(unsigned int a1, uint64_t a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v16 = 0;
  result = sub_10004BC7C(&v15);
  if ((_DWORD)result)
    return result;
  if (HIBYTE(v16))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3253, "OI_STATUS _ACI_Enable2MPHYOnDenylistedDevices(uint8_t, uint16_t *, BT_VSC_COMPLETE_CB)");
    goto LABEL_23;
  }
  v10 = WORD2(v16);
  if (WORD1(v16) <= WORD2(v16) || BYTE6(v16) != 2)
LABEL_23:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v11 = 0;
  ++WORD2(v16);
  *(_BYTE *)(v15 + v10) = a1;
  do
  {
    if (v11 >= a1)
    {
      if (HIBYTE(v16))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3258, "OI_STATUS _ACI_Enable2MPHYOnDenylistedDevices(uint8_t, uint16_t *, BT_VSC_COMPLETE_CB)");
LABEL_21:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      if (WORD1(v16) - WORD2(v16) <= 1 || BYTE6(v16) != 2)
        goto LABEL_21;
      v13 = 0;
      *(_BYTE *)(v15 + WORD2(v16)) = 0;
    }
    else
    {
      if (HIBYTE(v16))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3256, "OI_STATUS _ACI_Enable2MPHYOnDenylistedDevices(uint8_t, uint16_t *, BT_VSC_COMPLETE_CB)");
LABEL_19:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      if (WORD1(v16) - WORD2(v16) <= 1 || BYTE6(v16) != 2)
        goto LABEL_19;
      v12 = a2 + 2 * v11;
      *(_BYTE *)(v15 + WORD2(v16)) = *(_WORD *)v12;
      v13 = *(_BYTE *)(v12 + 1);
    }
    *(_BYTE *)(v15 + WORD2(v16) + 1) = v13;
    v14 = BYTE4(v16) + 2;
    WORD2(v16) += 2;
    ++v11;
  }
  while (v11 != 4);
  return sub_10004C8A0(64896, v15, v14, a3, (uint64_t)sub_10011ED60, v7, v8, v9);
}

uint64_t sub_10012E4B0(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t (*a9)())
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v18 = 0;
  v19 = 0;
  result = sub_10004BC7C(&v18);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v19))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3295, "OI_STATUS _ACI_AdvBufConfig(uint16_t, uint8_t, OI_BD_ADDR *, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_ADVBUF_CONFIG_CB)");
    }
    else
    {
      v15 = WORD2(v19);
      if (WORD1(v19) > WORD2(v19) && BYTE6(v19) == 2)
      {
        ++WORD2(v19);
        *(_BYTE *)(v18 + v15) = 1;
        if (HIBYTE(v19))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3296, "OI_STATUS _ACI_AdvBufConfig(uint16_t, uint8_t, OI_BD_ADDR *, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_ADVBUF_CONFIG_CB)");
        }
        else if (WORD1(v19) - WORD2(v19) > 1 && BYTE6(v19) == 2)
        {
          *(_WORD *)(v18 + WORD2(v19)) = a1;
          v16 = WORD2(v19);
          v17 = WORD2(v19) + 2;
          WORD2(v19) += 2;
          if (HIBYTE(v19))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3297, "OI_STATUS _ACI_AdvBufConfig(uint16_t, uint8_t, OI_BD_ADDR *, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_ADVBUF_CONFIG_CB)");
          }
          else if (WORD1(v19) > v17 && BYTE6(v19) == 2)
          {
            WORD2(v19) = v16 + 3;
            *(_BYTE *)(v18 + v17) = a8;
            return sub_10004C8A0(65014, v18, BYTE4(v19), a9, (uint64_t)sub_100136B98, v12, v13, v14);
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012E68C(__int16 a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3335, "OI_STATUS _ACI_AdvBufReadCommand(uint16_t, BT_VSC_ADVBUF_READ_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = 2;
        if (HIBYTE(v10))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3336, "OI_STATUS _ACI_AdvBufReadCommand(uint16_t, BT_VSC_ADVBUF_READ_CB)");
        }
        else if (WORD1(v10) - WORD2(v10) > 1 && BYTE6(v10) == 2)
        {
          *(_WORD *)(v9 + WORD2(v10)) = a1;
          WORD2(v10) += 2;
          return sub_10004C8A0(65014, v9, BYTE4(v10), a2, (uint64_t)sub_100136D00, v5, v6, v7);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012E7F0(__int16 a1, char a2, char a3, __int16 a4, char a5, char a6, char a7, uint64_t (*a8)())
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  unsigned __int16 v22;
  uint64_t v23;
  __int16 v24;
  unsigned __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = 0;
  v29 = 0;
  result = sub_10004BC7C(&v28);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v29))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3368, "OI_STATUS _ACI_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
    }
    else
    {
      v20 = WORD2(v29);
      if (WORD1(v29) > WORD2(v29) && BYTE6(v29) == 2)
      {
        ++WORD2(v29);
        *(_BYTE *)(v28 + v20) = 3;
        if (HIBYTE(v29))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3369, "OI_STATUS _ACI_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
        }
        else if (WORD1(v29) - WORD2(v29) > 1 && BYTE6(v29) == 2)
        {
          *(_WORD *)(v28 + WORD2(v29)) = a1;
          v21 = WORD2(v29);
          v22 = WORD2(v29) + 2;
          WORD2(v29) += 2;
          if (HIBYTE(v29))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3370, "OI_STATUS _ACI_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
          }
          else if (WORD1(v29) > v22 && BYTE6(v29) == 2)
          {
            WORD2(v29) = v21 + 3;
            *(_BYTE *)(v28 + v22) = a2;
            if (HIBYTE(v29))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3371, "OI_STATUS _ACI_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
            }
            else
            {
              v23 = WORD2(v29);
              if (WORD1(v29) > WORD2(v29) && BYTE6(v29) == 2)
              {
                ++WORD2(v29);
                *(_BYTE *)(v28 + v23) = a3;
                if (HIBYTE(v29))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3372, "OI_STATUS _ACI_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
                }
                else if (WORD1(v29) - WORD2(v29) > 1 && BYTE6(v29) == 2)
                {
                  *(_WORD *)(v28 + WORD2(v29)) = a4;
                  v24 = WORD2(v29);
                  v25 = WORD2(v29) + 2;
                  WORD2(v29) += 2;
                  if (HIBYTE(v29))
                  {
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3373, "OI_STATUS _ACI_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
                  }
                  else if (WORD1(v29) > v25 && BYTE6(v29) == 2)
                  {
                    WORD2(v29) = v24 + 3;
                    *(_BYTE *)(v28 + v25) = a5;
                    if (HIBYTE(v29))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3374, "OI_STATUS _ACI_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
                    }
                    else
                    {
                      v26 = WORD2(v29);
                      if (WORD1(v29) > WORD2(v29) && BYTE6(v29) == 2)
                      {
                        ++WORD2(v29);
                        *(_BYTE *)(v28 + v26) = a6;
                        if (HIBYTE(v29))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3375, "OI_STATUS _ACI_MatchTableConfig(uint16_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHTABLE_CONFIG_CB)");
                        }
                        else
                        {
                          v27 = WORD2(v29);
                          if (WORD1(v29) > WORD2(v29) && BYTE6(v29) == 2)
                          {
                            ++WORD2(v29);
                            *(_BYTE *)(v28 + v27) = a7;
                            return sub_10004C8A0(65014, v28, BYTE4(v29), a8, (uint64_t)sub_100136F20, v17, v18, v19);
                          }
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012EC70(__int16 a1, __int16 a2, char a3, __int16 a4, char a5, char a6, char a7, uint64_t a8, uint64_t a9, uint64_t (*a10)())
{
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  __int16 v23;
  unsigned __int16 v24;
  __int16 v25;
  unsigned __int16 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v34 = 0;
  v35 = 0;
  result = sub_10004BC7C(&v34);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v35))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3410, "OI_STATUS _ACI_MatchTableConfigV2(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
    }
    else
    {
      v21 = WORD2(v35);
      if (WORD1(v35) > WORD2(v35) && BYTE6(v35) == 2)
      {
        ++WORD2(v35);
        *(_BYTE *)(v34 + v21) = 10;
        if (HIBYTE(v35))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3411, "OI_STATUS _ACI_MatchTableConfigV2(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
        }
        else if (WORD1(v35) - WORD2(v35) > 1 && BYTE6(v35) == 2)
        {
          *(_WORD *)(v34 + WORD2(v35)) = a1;
          v22 = WORD2(v35) + 2;
          WORD2(v35) += 2;
          if (HIBYTE(v35))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3412, "OI_STATUS _ACI_MatchTableConfigV2(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
          }
          else if (WORD1(v35) - v22 > 1 && BYTE6(v35) == 2)
          {
            *(_BYTE *)(v34 + v22) = a2;
            *(_BYTE *)(v34 + WORD2(v35) + 1) = HIBYTE(a2);
            v23 = WORD2(v35);
            v24 = WORD2(v35) + 2;
            WORD2(v35) += 2;
            if (HIBYTE(v35))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3413, "OI_STATUS _ACI_MatchTableConfigV2(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
            }
            else if (WORD1(v35) > v24 && BYTE6(v35) == 2)
            {
              WORD2(v35) = v23 + 3;
              *(_BYTE *)(v34 + v24) = a3;
              if (HIBYTE(v35))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3414, "OI_STATUS _ACI_MatchTableConfigV2(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
              }
              else if (WORD1(v35) - WORD2(v35) > 1 && BYTE6(v35) == 2)
              {
                *(_WORD *)(v34 + WORD2(v35)) = a4;
                v25 = WORD2(v35);
                v26 = WORD2(v35) + 2;
                WORD2(v35) += 2;
                if (HIBYTE(v35))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3415, "OI_STATUS _ACI_MatchTableConfigV2(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
                }
                else if (WORD1(v35) > v26 && BYTE6(v35) == 2)
                {
                  WORD2(v35) = v25 + 3;
                  *(_BYTE *)(v34 + v26) = a5;
                  if (HIBYTE(v35))
                  {
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3416, "OI_STATUS _ACI_MatchTableConfigV2(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
                  }
                  else
                  {
                    v27 = WORD2(v35);
                    if (WORD1(v35) > WORD2(v35) && BYTE6(v35) == 2)
                    {
                      ++WORD2(v35);
                      *(_BYTE *)(v34 + v27) = a6;
                      if (HIBYTE(v35))
                      {
                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3417, "OI_STATUS _ACI_MatchTableConfigV2(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
                      }
                      else
                      {
                        v28 = WORD2(v35);
                        if (WORD1(v35) > WORD2(v35) && BYTE6(v35) == 2)
                        {
                          ++WORD2(v35);
                          *(_BYTE *)(v34 + v28) = a7;
                          v29 = -16;
                          do
                          {
                            if (HIBYTE(v35))
                            {
                              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3419, "OI_STATUS _ACI_MatchTableConfigV2(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
LABEL_44:
                              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                            }
                            v30 = WORD2(v35);
                            if (WORD1(v35) <= WORD2(v35) || BYTE6(v35) != 2)
                              goto LABEL_44;
                            ++WORD2(v35);
                            *(_BYTE *)(v34 + v30) = 0;
                          }
                          while (!__CFADD__(v29++, 1));
                          if (HIBYTE(v35))
                          {
                            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3421, "OI_STATUS _ACI_MatchTableConfigV2(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
                          }
                          else
                          {
                            v32 = WORD2(v35);
                            if (WORD1(v35) > WORD2(v35) && BYTE6(v35) == 2)
                            {
                              ++WORD2(v35);
                              *(_BYTE *)(v34 + v32) = 0;
                              if (HIBYTE(v35))
                              {
                                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3422, "OI_STATUS _ACI_MatchTableConfigV2(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
                              }
                              else if (WORD1(v35) - WORD2(v35) > 1 && BYTE6(v35) == 2)
                              {
                                *(_WORD *)(v34 + WORD2(v35)) = 0;
                                v33 = WORD2(v35) + 2;
                                WORD2(v35) += 2;
                                if (HIBYTE(v35))
                                {
                                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3423, "OI_STATUS _ACI_MatchTableConfigV2(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
                                }
                                else if (WORD1(v35) - v33 > 1 && BYTE6(v35) == 2)
                                {
                                  *(_BYTE *)(v34 + v33) = 0;
                                  *(_BYTE *)(v34 + WORD2(v35) + 1) = 0;
                                  WORD2(v35) += 2;
                                  return sub_10004C8A0(65014, v34, BYTE4(v35), a10, (uint64_t)sub_100137088, v18, v19, v20);
                                }
                                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/"
                                                       "vsc/aci/aci_vsc.c");
                              }
                              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                            }
                          }
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                        }
                      }
                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                    }
                  }
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012F324(__int16 a1, __int16 a2, char a3, __int16 a4, char a5, char a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, uint64_t (*a15)())
{
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  __int16 v28;
  unsigned __int16 v29;
  __int16 v30;
  unsigned __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  uint64_t v38;
  uint64_t v40;
  unsigned __int16 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v52 = 0;
  v53 = 0;
  result = sub_10004BC7C(&v52);
  if ((_DWORD)result)
    return result;
  if (HIBYTE(v53))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3463, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
    goto LABEL_90;
  }
  v26 = WORD2(v53);
  if (WORD1(v53) <= WORD2(v53) || BYTE6(v53) != 2)
LABEL_90:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v53);
  *(_BYTE *)(v52 + v26) = 10;
  if (HIBYTE(v53))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3464, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
    goto LABEL_92;
  }
  if (WORD1(v53) - WORD2(v53) <= 1 || BYTE6(v53) != 2)
LABEL_92:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  *(_WORD *)(v52 + WORD2(v53)) = a1;
  v27 = WORD2(v53) + 2;
  WORD2(v53) += 2;
  if (HIBYTE(v53))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3465, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
    goto LABEL_94;
  }
  if (WORD1(v53) - v27 <= 1 || BYTE6(v53) != 2)
LABEL_94:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  *(_BYTE *)(v52 + v27) = a2;
  *(_BYTE *)(v52 + WORD2(v53) + 1) = HIBYTE(a2);
  v28 = WORD2(v53);
  v29 = WORD2(v53) + 2;
  WORD2(v53) += 2;
  if (HIBYTE(v53))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3466, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
    goto LABEL_96;
  }
  if (WORD1(v53) <= v29 || BYTE6(v53) != 2)
LABEL_96:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  WORD2(v53) = v28 + 3;
  *(_BYTE *)(v52 + v29) = a3;
  if (HIBYTE(v53))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3467, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
    goto LABEL_98;
  }
  if (WORD1(v53) - WORD2(v53) <= 1 || BYTE6(v53) != 2)
LABEL_98:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  *(_WORD *)(v52 + WORD2(v53)) = a4;
  v30 = WORD2(v53);
  v31 = WORD2(v53) + 2;
  WORD2(v53) += 2;
  if (HIBYTE(v53))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3468, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
    goto LABEL_100;
  }
  if (WORD1(v53) <= v31 || BYTE6(v53) != 2)
LABEL_100:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  WORD2(v53) = v30 + 3;
  *(_BYTE *)(v52 + v31) = a5;
  if (HIBYTE(v53))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3469, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
    goto LABEL_102;
  }
  v32 = WORD2(v53);
  if (WORD1(v53) <= WORD2(v53) || BYTE6(v53) != 2)
LABEL_102:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v53);
  *(_BYTE *)(v52 + v32) = a6;
  if (HIBYTE(v53))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3470, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
    goto LABEL_104;
  }
  v33 = WORD2(v53);
  if (WORD1(v53) <= WORD2(v53) || BYTE6(v53) != 2)
LABEL_104:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v53);
  *(_BYTE *)(v52 + v33) = a7;
  if (a10)
  {
    v34 = 15;
    while (!HIBYTE(v53))
    {
      v35 = WORD2(v53);
      if (WORD1(v53) <= WORD2(v53) || BYTE6(v53) != 2)
        goto LABEL_78;
      v36 = *(_BYTE *)(a10 + v34);
      ++WORD2(v53);
      *(_BYTE *)(v52 + v35) = v36;
      if (--v34 == -1)
        goto LABEL_39;
    }
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3478, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
LABEL_78:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  v37 = -16;
  do
  {
    if (HIBYTE(v53))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3473, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
LABEL_84:
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    v38 = WORD2(v53);
    if (WORD1(v53) <= WORD2(v53) || BYTE6(v53) != 2)
      goto LABEL_84;
    ++WORD2(v53);
    *(_BYTE *)(v52 + v38) = 0;
  }
  while (!__CFADD__(v37++, 1));
LABEL_39:
  if (HIBYTE(v53))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3481, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
    goto LABEL_106;
  }
  v40 = WORD2(v53);
  if (WORD1(v53) <= WORD2(v53) || BYTE6(v53) != 2)
LABEL_106:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v53);
  *(_BYTE *)(v52 + v40) = 0;
  if (HIBYTE(v53))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3482, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
    goto LABEL_108;
  }
  if (WORD1(v53) - WORD2(v53) <= 1 || BYTE6(v53) != 2)
LABEL_108:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  *(_WORD *)(v52 + WORD2(v53)) = 0;
  v41 = WORD2(v53) + 2;
  WORD2(v53) += 2;
  if (HIBYTE(v53))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3483, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
    goto LABEL_110;
  }
  if (WORD1(v53) - v41 <= 1 || BYTE6(v53) != 2)
LABEL_110:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v42 = a14;
  *(_BYTE *)(v52 + v41) = a14;
  *(_BYTE *)(v52 + WORD2(v53) + 1) = 0;
  WORD2(v53) += 2;
  if (a12)
  {
    if (a14)
    {
      v43 = a14;
      while (!HIBYTE(v53))
      {
        v44 = WORD2(v53);
        if (WORD1(v53) <= WORD2(v53) || BYTE6(v53) != 2)
          goto LABEL_80;
        v45 = *(_BYTE *)(a12 - 1 + v43--);
        ++WORD2(v53);
        *(_BYTE *)(v52 + v44) = v45;
        if ((unint64_t)(v43 + 1) <= 1)
          goto LABEL_62;
      }
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3491, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
LABEL_80:
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
  }
  else if (a14)
  {
    v46 = a14 + 1;
    while (!HIBYTE(v53))
    {
      v47 = WORD2(v53);
      if (WORD1(v53) <= WORD2(v53) || BYTE6(v53) != 2)
        goto LABEL_86;
      ++WORD2(v53);
      *(_BYTE *)(v52 + v47) = 0;
      if (--v46 <= 1)
        goto LABEL_62;
    }
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3486, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
LABEL_86:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
LABEL_62:
  if (a13)
  {
    if (a14)
    {
      while (!HIBYTE(v53))
      {
        v48 = WORD2(v53);
        if (WORD1(v53) <= WORD2(v53) || BYTE6(v53) != 2)
          goto LABEL_82;
        v49 = *(_BYTE *)(a13 - 1 + v42--);
        ++WORD2(v53);
        *(_BYTE *)(v52 + v48) = v49;
        if ((unint64_t)(v42 + 1) <= 1)
          return sub_10004C8A0(65014, v52, BYTE4(v53), a15, (uint64_t)sub_1001371F0, v23, v24, v25);
      }
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3501, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
LABEL_82:
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
  }
  else if (a14)
  {
    v50 = a14 + 1;
    while (!HIBYTE(v53))
    {
      v51 = WORD2(v53);
      if (WORD1(v53) <= WORD2(v53) || BYTE6(v53) != 2)
        goto LABEL_88;
      ++WORD2(v53);
      *(_BYTE *)(v52 + v51) = 0;
      if (--v50 <= 1)
        return sub_10004C8A0(65014, v52, BYTE4(v53), a15, (uint64_t)sub_1001371F0, v23, v24, v25);
    }
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3496, "OI_STATUS _ACI_MatchTableConfigV3(uint16_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t, uint8_t, int8_t, uint16_t, uint8_t *, uint8_t, uint8_t *, uint8_t *, uint8_t, BT_VSC_MATCHTABLE_CONFIG_V2_CB)");
LABEL_88:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return sub_10004C8A0(65014, v52, BYTE4(v53), a15, (uint64_t)sub_1001371F0, v23, v24, v25);
}

uint64_t sub_10012FCD0(__int16 a1, char a2, char a3, uint64_t (*a4)())
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  result = sub_10004BC7C(&v16);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v17))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3654, "OI_STATUS _ACI_AdvBufMatchControl(uint16_t, uint8_t, uint8_t, BT_VSC_ADVBUF_MATCH_CONTROL_CB)");
    }
    else
    {
      v12 = WORD2(v17);
      if (WORD1(v17) > WORD2(v17) && BYTE6(v17) == 2)
      {
        ++WORD2(v17);
        *(_BYTE *)(v16 + v12) = 7;
        if (HIBYTE(v17))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3655, "OI_STATUS _ACI_AdvBufMatchControl(uint16_t, uint8_t, uint8_t, BT_VSC_ADVBUF_MATCH_CONTROL_CB)");
        }
        else if (WORD1(v17) - WORD2(v17) > 1 && BYTE6(v17) == 2)
        {
          *(_WORD *)(v16 + WORD2(v17)) = a1;
          v13 = WORD2(v17);
          v14 = WORD2(v17) + 2;
          WORD2(v17) += 2;
          if (HIBYTE(v17))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3656, "OI_STATUS _ACI_AdvBufMatchControl(uint16_t, uint8_t, uint8_t, BT_VSC_ADVBUF_MATCH_CONTROL_CB)");
          }
          else if (WORD1(v17) > v14 && BYTE6(v17) == 2)
          {
            WORD2(v17) = v13 + 3;
            *(_BYTE *)(v16 + v14) = a2;
            if (HIBYTE(v17))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3657, "OI_STATUS _ACI_AdvBufMatchControl(uint16_t, uint8_t, uint8_t, BT_VSC_ADVBUF_MATCH_CONTROL_CB)");
            }
            else
            {
              v15 = WORD2(v17);
              if (WORD1(v17) > WORD2(v17) && BYTE6(v17) == 2)
              {
                ++WORD2(v17);
                *(_BYTE *)(v16 + v15) = a3;
                return sub_10004C8A0(65014, v16, BYTE4(v17), a4, (uint64_t)sub_100137358, v9, v10, v11);
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10012FF34(__int16 a1, __int16 a2, __int16 a3, uint64_t a4, uint64_t (*a5)())
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  unsigned __int16 v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  unsigned __int16 v20;
  char v21;
  _BYTE *v22;
  __int16 v23;
  unsigned __int16 v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  result = sub_10004BC7C(&v32);
  if ((_DWORD)result)
    return result;
  if (HIBYTE(v33))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3535, "OI_STATUS _ACI_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
    goto LABEL_54;
  }
  v14 = WORD2(v33);
  if (WORD1(v33) <= WORD2(v33) || BYTE6(v33) != 2)
LABEL_54:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v33);
  *(_BYTE *)(v32 + v14) = 4;
  if (HIBYTE(v33))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3536, "OI_STATUS _ACI_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
    goto LABEL_56;
  }
  if (WORD1(v33) - WORD2(v33) <= 1 || BYTE6(v33) != 2)
LABEL_56:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  *(_WORD *)(v32 + WORD2(v33)) = a1;
  v15 = WORD2(v33);
  v16 = WORD2(v33) + 2;
  WORD2(v33) += 2;
  if (HIBYTE(v33))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3537, "OI_STATUS _ACI_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
    goto LABEL_58;
  }
  if (WORD1(v33) <= v16 || BYTE6(v33) != 2)
LABEL_58:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  WORD2(v33) = v15 + 3;
  *(_BYTE *)(v32 + v16) = a2;
  if (HIBYTE(v33))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3538, "OI_STATUS _ACI_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
    goto LABEL_60;
  }
  v17 = WORD2(v33);
  if (WORD1(v33) <= WORD2(v33) || BYTE6(v33) != 2)
LABEL_60:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v33);
  *(_BYTE *)(v32 + v17) = a3;
  v18 = (unsigned __int16)(a3 - a2 + 1);
  if (v18)
  {
    while (!HIBYTE(v33))
    {
      if (WORD1(v33) - WORD2(v33) <= 5 || BYTE6(v33) != 2)
        goto LABEL_40;
      sub_10004C878(v32 + WORD2(v33), a4, 6uLL);
      v19 = WORD2(v33);
      v20 = WORD2(v33) + 6;
      WORD2(v33) += 6;
      if (HIBYTE(v33))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3543, "OI_STATUS _ACI_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
LABEL_42:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      if (WORD1(v33) <= v20 || BYTE6(v33) != 2)
        goto LABEL_42;
      v21 = *(_BYTE *)(a4 + 6);
      WORD2(v33) = v19 + 7;
      *(_BYTE *)(v32 + v20) = v21;
      if (HIBYTE(v33))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3544, "OI_STATUS _ACI_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
LABEL_44:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      if (WORD1(v33) - WORD2(v33) <= 5 || BYTE6(v33) != 2)
        goto LABEL_44;
      v22 = (_BYTE *)(a4 + 7);
      sub_10004C878(v32 + WORD2(v33), (uint64_t)v22, 6uLL);
      v23 = WORD2(v33);
      v24 = WORD2(v33) + 6;
      WORD2(v33) += 6;
      if (HIBYTE(v33))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3545, "OI_STATUS _ACI_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
LABEL_46:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      if (WORD1(v33) <= v24 || BYTE6(v33) != 2)
        goto LABEL_46;
      v25 = v22[6];
      WORD2(v33) = v23 + 7;
      *(_BYTE *)(v32 + v24) = v25;
      if (HIBYTE(v33))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3546, "OI_STATUS _ACI_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
LABEL_48:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      v26 = WORD2(v33);
      if (WORD1(v33) <= WORD2(v33) || BYTE6(v33) != 2)
        goto LABEL_48;
      v27 = v22[7];
      ++WORD2(v33);
      *(_BYTE *)(v32 + v26) = v27;
      if (HIBYTE(v33))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3547, "OI_STATUS _ACI_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
LABEL_50:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      v28 = WORD2(v33);
      if (WORD1(v33) <= WORD2(v33) || BYTE6(v33) != 2)
        goto LABEL_50;
      v29 = v22[8];
      ++WORD2(v33);
      *(_BYTE *)(v32 + v28) = v29;
      if (HIBYTE(v33))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3548, "OI_STATUS _ACI_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
LABEL_52:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      v30 = WORD2(v33);
      if (WORD1(v33) <= WORD2(v33) || BYTE6(v33) != 2)
        goto LABEL_52;
      v31 = v22[9];
      ++WORD2(v33);
      *(_BYTE *)(v32 + v30) = v31;
      a4 = (uint64_t)(v22 + 10);
      if (!--v18)
        return sub_10004C8A0(65014, v32, BYTE4(v33), a5, (uint64_t)sub_1001374C0, v11, v12, v13);
    }
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3542, "OI_STATUS _ACI_MatchTableParams(uint16_t, uint8_t, uint8_t, BT_VSC_MTblEntry *, BT_VSC_MATCHTABLE_PARAMS_CB)");
LABEL_40:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return sub_10004C8A0(65014, v32, BYTE4(v33), a5, (uint64_t)sub_1001374C0, v11, v12, v13);
}

uint64_t sub_100130548(__int16 a1, char a2, char a3, char a4, char a5, uint64_t (*a6)())
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  unsigned __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  result = sub_10004BC7C(&v22);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v23))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3582, "OI_STATUS _ACI_MatchBufferConfig(uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHBUFFER_CONFIG_CB)");
    }
    else
    {
      v16 = WORD2(v23);
      if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
      {
        ++WORD2(v23);
        *(_BYTE *)(v22 + v16) = 5;
        if (HIBYTE(v23))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3583, "OI_STATUS _ACI_MatchBufferConfig(uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHBUFFER_CONFIG_CB)");
        }
        else if (WORD1(v23) - WORD2(v23) > 1 && BYTE6(v23) == 2)
        {
          *(_WORD *)(v22 + WORD2(v23)) = a1;
          v17 = WORD2(v23);
          v18 = WORD2(v23) + 2;
          WORD2(v23) += 2;
          if (HIBYTE(v23))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3584, "OI_STATUS _ACI_MatchBufferConfig(uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHBUFFER_CONFIG_CB)");
          }
          else if (WORD1(v23) > v18 && BYTE6(v23) == 2)
          {
            WORD2(v23) = v17 + 3;
            *(_BYTE *)(v22 + v18) = a2;
            if (HIBYTE(v23))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3585, "OI_STATUS _ACI_MatchBufferConfig(uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHBUFFER_CONFIG_CB)");
            }
            else
            {
              v19 = WORD2(v23);
              if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
              {
                ++WORD2(v23);
                *(_BYTE *)(v22 + v19) = a3;
                if (HIBYTE(v23))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3586, "OI_STATUS _ACI_MatchBufferConfig(uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHBUFFER_CONFIG_CB)");
                }
                else
                {
                  v20 = WORD2(v23);
                  if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
                  {
                    ++WORD2(v23);
                    *(_BYTE *)(v22 + v20) = a4;
                    if (HIBYTE(v23))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3587, "OI_STATUS _ACI_MatchBufferConfig(uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_MATCHBUFFER_CONFIG_CB)");
                    }
                    else
                    {
                      v21 = WORD2(v23);
                      if (WORD1(v23) > WORD2(v23) && BYTE6(v23) == 2)
                      {
                        ++WORD2(v23);
                        *(_BYTE *)(v22 + v21) = a5;
                        return sub_10004C8A0(65014, v22, BYTE4(v23), a6, (uint64_t)sub_100137628, v13, v14, v15);
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_1001308AC(__int16 a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3621, "OI_STATUS _ACI_MatchBufferRead(uint16_t, BT_VSC_MATCHBUFFER_READ_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = 6;
        if (HIBYTE(v10))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3622, "OI_STATUS _ACI_MatchBufferRead(uint16_t, BT_VSC_MATCHBUFFER_READ_CB)");
        }
        else if (WORD1(v10) - WORD2(v10) > 1 && BYTE6(v10) == 2)
        {
          *(_WORD *)(v9 + WORD2(v10)) = a1;
          WORD2(v10) += 2;
          return sub_10004C8A0(65014, v9, BYTE4(v10), a2, (uint64_t)sub_100137790, v5, v6, v7);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100130A10(char a1, char a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  result = sub_10004BC7C(&v12);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v13))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3765, "OI_STATUS _ACI_BTLETxAdvTrigTimeStamp(uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v10 = WORD2(v13);
      if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
      {
        ++WORD2(v13);
        *(_BYTE *)(v12 + v10) = a1;
        if (HIBYTE(v13))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3766, "OI_STATUS _ACI_BTLETxAdvTrigTimeStamp(uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v11 = WORD2(v13);
          if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
          {
            ++WORD2(v13);
            *(_BYTE *)(v12 + v11) = a2;
            return sub_10004C8A0(65476, v12, BYTE4(v13), a3, (uint64_t)sub_10011ED60, v7, v8, v9);
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100130B60(__int16 a1, __int16 a2, char a3, char a4, uint64_t (*a5)())
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  __int16 v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = 0;
  v19 = 0;
  result = sub_10004BC7C(&v18);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v19))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3794, "OI_STATUS _ACI_BTLEConnEventTrigger(uint16_t, uint16_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v19) - WORD2(v19) > 1 && BYTE6(v19) == 2)
    {
      *(_WORD *)(v18 + WORD2(v19)) = a1;
      v14 = WORD2(v19) + 2;
      WORD2(v19) += 2;
      if (HIBYTE(v19))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3795, "OI_STATUS _ACI_BTLEConnEventTrigger(uint16_t, uint16_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v19) - v14 > 1 && BYTE6(v19) == 2)
      {
        *(_BYTE *)(v18 + v14) = a2;
        *(_BYTE *)(v18 + WORD2(v19) + 1) = HIBYTE(a2);
        v15 = WORD2(v19);
        v16 = WORD2(v19) + 2;
        WORD2(v19) += 2;
        if (HIBYTE(v19))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3796, "OI_STATUS _ACI_BTLEConnEventTrigger(uint16_t, uint16_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v19) > v16 && BYTE6(v19) == 2)
        {
          WORD2(v19) = v15 + 3;
          *(_BYTE *)(v18 + v16) = a3;
          if (HIBYTE(v19))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3797, "OI_STATUS _ACI_BTLEConnEventTrigger(uint16_t, uint16_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
          }
          else
          {
            v17 = WORD2(v19);
            if (WORD1(v19) > WORD2(v19) && BYTE6(v19) == 2)
            {
              ++WORD2(v19);
              *(_BYTE *)(v18 + v17) = a4;
              return sub_10004C8A0(65478, v18, BYTE4(v19), a5, (uint64_t)sub_10011ED60, v11, v12, v13);
            }
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100130DE8(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3780, "OI_STATUS _ACI_SPMIDebugVSEControl(uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v10);
      if (WORD1(v10) > WORD2(v10) && BYTE6(v10) == 2)
      {
        ++WORD2(v10);
        *(_BYTE *)(v9 + v8) = a1;
        return sub_10004C8A0(65480, v9, BYTE4(v10), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100130EB4(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  result = sub_10004BC7C(&v11);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v12))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3671, "OI_STATUS _ACI_SetEncryptionKeySize(uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v12);
      if (WORD1(v12) > WORD2(v12) && BYTE6(v12) == 2)
      {
        ++WORD2(v12);
        *(_BYTE *)(v11 + v8) = 16;
        if (HIBYTE(v12))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3672, "OI_STATUS _ACI_SetEncryptionKeySize(uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v9 = WORD2(v12);
          if (WORD1(v12) > WORD2(v12) && BYTE6(v12) == 2)
          {
            ++WORD2(v12);
            *(_BYTE *)(v11 + v9) = 16;
            if (HIBYTE(v12))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3673, "OI_STATUS _ACI_SetEncryptionKeySize(uint8_t, BT_VSC_COMPLETE_CB)");
            }
            else
            {
              v10 = WORD2(v12);
              if (WORD1(v12) > WORD2(v12) && BYTE6(v12) == 2)
              {
                ++WORD2(v12);
                *(_BYTE *)(v11 + v10) = a1;
                return sub_10004C8A0(65317, v11, BYTE4(v12), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100131078(char a1, char a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, __int16 a11, char a12, uint64_t (*a13)())
{
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  __int16 v33;
  unsigned __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v35 = 0;
  v36 = 0;
  result = sub_10004BC7C(&v35);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v36))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3838, "OI_STATUS _ACI_GetScanStatsWithThreshold(uint8_t, uint8_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v25 = WORD2(v36);
      if (WORD1(v36) > WORD2(v36) && BYTE6(v36) == 2)
      {
        ++WORD2(v36);
        *(_BYTE *)(v35 + v25) = a1;
        if (HIBYTE(v36))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3839, "OI_STATUS _ACI_GetScanStatsWithThreshold(uint8_t, uint8_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v26 = WORD2(v36);
          if (WORD1(v36) > WORD2(v36) && BYTE6(v36) == 2)
          {
            ++WORD2(v36);
            *(_BYTE *)(v35 + v26) = a2;
            if (HIBYTE(v36))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3840, "OI_STATUS _ACI_GetScanStatsWithThreshold(uint8_t, uint8_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint8_t, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v36) - WORD2(v36) > 3 && BYTE6(v36) == 2)
            {
              *(_WORD *)(v35 + WORD2(v36)) = a3;
              *(_BYTE *)(v35 + WORD2(v36) + 2) = BYTE2(a3);
              *(_BYTE *)(v35 + WORD2(v36) + 3) = HIBYTE(a3);
              v27 = WORD2(v36) + 4;
              WORD2(v36) += 4;
              if (HIBYTE(v36))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3841, "OI_STATUS _ACI_GetScanStatsWithThreshold(uint8_t, uint8_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint8_t, BT_VSC_COMPLETE_CB)");
              }
              else if (WORD1(v36) - v27 > 3 && BYTE6(v36) == 2)
              {
                *(_BYTE *)(v35 + v27) = a4;
                *(_BYTE *)(v35 + WORD2(v36) + 1) = BYTE1(a4);
                *(_BYTE *)(v35 + WORD2(v36) + 2) = BYTE2(a4);
                *(_BYTE *)(v35 + WORD2(v36) + 3) = HIBYTE(a4);
                v28 = WORD2(v36) + 4;
                WORD2(v36) += 4;
                if (HIBYTE(v36))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3842, "OI_STATUS _ACI_GetScanStatsWithThreshold(uint8_t, uint8_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint8_t, BT_VSC_COMPLETE_CB)");
                }
                else if (WORD1(v36) - v28 > 3 && BYTE6(v36) == 2)
                {
                  *(_BYTE *)(v35 + v28) = a5;
                  *(_BYTE *)(v35 + WORD2(v36) + 1) = BYTE1(a5);
                  *(_BYTE *)(v35 + WORD2(v36) + 2) = BYTE2(a5);
                  *(_BYTE *)(v35 + WORD2(v36) + 3) = HIBYTE(a5);
                  v29 = WORD2(v36) + 4;
                  WORD2(v36) += 4;
                  if (HIBYTE(v36))
                  {
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3843, "OI_STATUS _ACI_GetScanStatsWithThreshold(uint8_t, uint8_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint8_t, BT_VSC_COMPLETE_CB)");
                  }
                  else if (WORD1(v36) - v29 > 3 && BYTE6(v36) == 2)
                  {
                    *(_BYTE *)(v35 + v29) = a6;
                    *(_BYTE *)(v35 + WORD2(v36) + 1) = BYTE1(a6);
                    *(_BYTE *)(v35 + WORD2(v36) + 2) = BYTE2(a6);
                    *(_BYTE *)(v35 + WORD2(v36) + 3) = HIBYTE(a6);
                    v30 = WORD2(v36) + 4;
                    WORD2(v36) += 4;
                    if (HIBYTE(v36))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3844, "OI_STATUS _ACI_GetScanStatsWithThreshold(uint8_t, uint8_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint8_t, BT_VSC_COMPLETE_CB)");
                    }
                    else if (WORD1(v36) - v30 > 3 && BYTE6(v36) == 2)
                    {
                      *(_BYTE *)(v35 + v30) = a7;
                      *(_BYTE *)(v35 + WORD2(v36) + 1) = BYTE1(a7);
                      *(_BYTE *)(v35 + WORD2(v36) + 2) = BYTE2(a7);
                      *(_BYTE *)(v35 + WORD2(v36) + 3) = HIBYTE(a7);
                      v31 = WORD2(v36) + 4;
                      WORD2(v36) += 4;
                      if (HIBYTE(v36))
                      {
                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3845, "OI_STATUS _ACI_GetScanStatsWithThreshold(uint8_t, uint8_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint8_t, BT_VSC_COMPLETE_CB)");
                      }
                      else if (WORD1(v36) - v31 > 3 && BYTE6(v36) == 2)
                      {
                        *(_BYTE *)(v35 + v31) = a8;
                        *(_BYTE *)(v35 + WORD2(v36) + 1) = BYTE1(a8);
                        *(_BYTE *)(v35 + WORD2(v36) + 2) = BYTE2(a8);
                        *(_BYTE *)(v35 + WORD2(v36) + 3) = HIBYTE(a8);
                        v32 = WORD2(v36) + 4;
                        WORD2(v36) += 4;
                        if (HIBYTE(v36))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3846, "OI_STATUS _ACI_GetScanStatsWithThreshold(uint8_t, uint8_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint8_t, BT_VSC_COMPLETE_CB)");
                        }
                        else if (WORD1(v36) - v32 > 3 && BYTE6(v36) == 2)
                        {
                          *(_BYTE *)(v35 + v32) = a9;
                          *(_BYTE *)(v35 + WORD2(v36) + 1) = a10;
                          *(_WORD *)(v35 + WORD2(v36) + 2) = a11;
                          v33 = WORD2(v36);
                          v34 = WORD2(v36) + 4;
                          WORD2(v36) += 4;
                          if (HIBYTE(v36))
                          {
                            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3847, "OI_STATUS _ACI_GetScanStatsWithThreshold(uint8_t, uint8_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint8_t, BT_VSC_COMPLETE_CB)");
                          }
                          else if (WORD1(v36) > v34 && BYTE6(v36) == 2)
                          {
                            WORD2(v36) = v33 + 5;
                            *(_BYTE *)(v35 + v34) = a12;
                            return sub_10004C8A0(65049, v35, BYTE4(v36), a13, (uint64_t)sub_10011ED60, v22, v23, v24);
                          }
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                      }
                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100131790(char a1, char a2, uint64_t (*a3)())
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  result = sub_10004BC7C(&v12);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v13))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3861, "OI_STATUS _ACI_ReadScanStatsWithThreshold(uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v10 = WORD2(v13);
      if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
      {
        ++WORD2(v13);
        *(_BYTE *)(v12 + v10) = a1;
        if (HIBYTE(v13))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3862, "OI_STATUS _ACI_ReadScanStatsWithThreshold(uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v11 = WORD2(v13);
          if (WORD1(v13) > WORD2(v13) && BYTE6(v13) == 2)
          {
            ++WORD2(v13);
            *(_BYTE *)(v12 + v11) = a2;
            return sub_10004C8A0(65050, v12, BYTE4(v13), a3, (uint64_t)sub_10011ED60, v7, v8, v9);
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_1001318E0(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  result = sub_10004BC7C(&v11);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v12))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3032, "OI_STATUS _ACI_SetTraceMode(const uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v12);
      if (WORD1(v12) > WORD2(v12) && BYTE6(v12) == 2)
      {
        ++WORD2(v12);
        *(_BYTE *)(v11 + v8) = 0;
        if (HIBYTE(v12))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3035, "OI_STATUS _ACI_SetTraceMode(const uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v9 = WORD2(v12);
          if (WORD1(v12) > WORD2(v12) && BYTE6(v12) == 2)
          {
            ++WORD2(v12);
            *(_BYTE *)(v11 + v9) = 1;
            if (HIBYTE(v12))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3036, "OI_STATUS _ACI_SetTraceMode(const uint8_t, BT_VSC_COMPLETE_CB)");
            }
            else
            {
              v10 = WORD2(v12);
              if (WORD1(v12) > WORD2(v12) && BYTE6(v12) == 2)
              {
                ++WORD2(v12);
                *(_BYTE *)(v11 + v10) = a1;
                return sub_10004C8A0(65520, v11, BYTE4(v12), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100131AA0(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = sub_10004BC7C(&v10);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v11))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3049, "OI_STATUS _ACI_SetTraceLevel(const uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v11);
      if (WORD1(v11) > WORD2(v11) && BYTE6(v11) == 2)
      {
        ++WORD2(v11);
        *(_BYTE *)(v10 + v8) = a1;
        if (HIBYTE(v11))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3050, "OI_STATUS _ACI_SetTraceLevel(const uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v11) - WORD2(v11) > 3 && BYTE6(v11) == 2)
        {
          *(_BYTE *)(v10 + WORD2(v11)) = 0;
          *(_WORD *)(v10 + WORD2(v11) + 1) = 0;
          *(_BYTE *)(v10 + WORD2(v11) + 3) = 0;
          v9 = WORD2(v11) + 4;
          WORD2(v11) += 4;
          if (HIBYTE(v11))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3051, "OI_STATUS _ACI_SetTraceLevel(const uint8_t, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v11) - v9 > 3 && BYTE6(v11) == 2)
          {
            *(_BYTE *)(v10 + v9) = 0;
            *(_WORD *)(v10 + WORD2(v11) + 1) = 0;
            *(_BYTE *)(v10 + WORD2(v11) + 3) = 0;
            WORD2(v11) += 4;
            return sub_10004C8A0(65428, v10, BYTE4(v11), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100131CCC(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = sub_10004BC7C(&v10);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v11))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3064, "OI_STATUS _ACI_SetPhyTraceLevel(const uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v11);
      if (WORD1(v11) > WORD2(v11) && BYTE6(v11) == 2)
      {
        ++WORD2(v11);
        *(_BYTE *)(v10 + v8) = a1;
        if (HIBYTE(v11))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3065, "OI_STATUS _ACI_SetPhyTraceLevel(const uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v11) - WORD2(v11) > 3 && BYTE6(v11) == 2)
        {
          *(_BYTE *)(v10 + WORD2(v11)) = 0;
          *(_WORD *)(v10 + WORD2(v11) + 1) = 0;
          *(_BYTE *)(v10 + WORD2(v11) + 3) = 0;
          v9 = WORD2(v11) + 4;
          WORD2(v11) += 4;
          if (HIBYTE(v11))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3066, "OI_STATUS _ACI_SetPhyTraceLevel(const uint8_t, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v11) - v9 > 3 && BYTE6(v11) == 2)
          {
            *(_BYTE *)(v10 + v9) = 0;
            *(_WORD *)(v10 + WORD2(v11) + 1) = 0;
            *(_BYTE *)(v10 + WORD2(v11) + 3) = 0;
            WORD2(v11) += 4;
            return sub_10004C8A0(65429, v10, BYTE4(v11), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100131EF8(_OWORD *a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int16 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  result = sub_10004BC7C(&v12);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v13))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3079, "OI_STATUS _ACI_SetTraceMask(const uint64_t *, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v13) - (unint64_t)WORD2(v13) > 0x1F && BYTE6(v13) == 2)
    {
      v8 = (_OWORD *)(v12 + WORD2(v13));
      v9 = a1[1];
      *v8 = *a1;
      v8[1] = v9;
      v10 = WORD2(v13);
      v11 = WORD2(v13) + 32;
      WORD2(v13) += 32;
      if (HIBYTE(v13))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3080, "OI_STATUS _ACI_SetTraceMask(const uint64_t *, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v13) > v11 && BYTE6(v13) == 2)
      {
        WORD2(v13) = v10 + 33;
        *(_BYTE *)(v12 + v11) = -1;
        return sub_10004C8A0(64890, v12, BYTE4(v13), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100132050(_OWORD *a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  result = sub_10004BC7C(&v12);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v13))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3093, "OI_STATUS _ACI_SetPhyTraceMask(const uint64_t *, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v13) - (unint64_t)WORD2(v13) > 0x1F && BYTE6(v13) == 2)
    {
      v8 = (_OWORD *)(v12 + WORD2(v13));
      v9 = a1[1];
      *v8 = *a1;
      v8[1] = v9;
      v10 = WORD2(v13) + 32;
      WORD2(v13) += 32;
      if (HIBYTE(v13))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3094, "OI_STATUS _ACI_SetPhyTraceMask(const uint64_t *, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v13) - v10 > 3 && BYTE6(v13) == 2)
      {
        *(_BYTE *)(v12 + v10) = 0;
        *(_WORD *)(v12 + WORD2(v13) + 1) = 0;
        *(_BYTE *)(v12 + WORD2(v13) + 3) = 0;
        v11 = WORD2(v13) + 4;
        WORD2(v13) += 4;
        if (HIBYTE(v13))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3095, "OI_STATUS _ACI_SetPhyTraceMask(const uint64_t *, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v13) - v11 > 3 && BYTE6(v13) == 2)
        {
          *(_BYTE *)(v12 + v11) = 0;
          *(_WORD *)(v12 + WORD2(v13) + 1) = 0;
          *(_BYTE *)(v12 + WORD2(v13) + 3) = 0;
          WORD2(v13) += 4;
          return sub_10004C8A0(65430, v12, BYTE4(v13), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10013228C(int a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = sub_10004BC7C(&v10);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v11))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3108, "OI_STATUS _ACI_SetCaptureTimeout(const uint32_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v11) - WORD2(v11) > 3 && BYTE6(v11) == 2)
    {
      *(_WORD *)(v10 + WORD2(v11)) = a1;
      *(_BYTE *)(v10 + WORD2(v11) + 2) = BYTE2(a1);
      *(_BYTE *)(v10 + WORD2(v11) + 3) = HIBYTE(a1);
      v8 = WORD2(v11) + 4;
      WORD2(v11) += 4;
      if (HIBYTE(v11))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3109, "OI_STATUS _ACI_SetCaptureTimeout(const uint32_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v11) - v8 > 3 && BYTE6(v11) == 2)
      {
        *(_BYTE *)(v10 + v8) = 0;
        *(_WORD *)(v10 + WORD2(v11) + 1) = 0;
        *(_BYTE *)(v10 + WORD2(v11) + 3) = 0;
        v9 = WORD2(v11) + 4;
        WORD2(v11) += 4;
        if (HIBYTE(v11))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3110, "OI_STATUS _ACI_SetCaptureTimeout(const uint32_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v11) - v9 > 3 && BYTE6(v11) == 2)
        {
          *(_BYTE *)(v10 + v9) = 0;
          *(_WORD *)(v10 + WORD2(v11) + 1) = 0;
          *(_BYTE *)(v10 + WORD2(v11) + 3) = 0;
          WORD2(v11) += 4;
          return sub_10004C8A0(65431, v10, BYTE4(v11), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_1001324FC(int a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  result = sub_10004BC7C(&v8);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v9))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3241, "OI_STATUS _ACI_TriggerCapture(const uint32_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v9) - WORD2(v9) > 3 && BYTE6(v9) == 2)
    {
      *(_WORD *)(v8 + WORD2(v9)) = a1;
      *(_BYTE *)(v8 + WORD2(v9) + 2) = BYTE2(a1);
      *(_BYTE *)(v8 + WORD2(v9) + 3) = HIBYTE(a1);
      WORD2(v9) += 4;
      return sub_10004C8A0(65522, v8, BYTE4(v9), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10013260C(char a1, void (*a2)(_QWORD))
{
  a2(0);
  byte_100981A18 = a1;
  return 0;
}

uint64_t sub_10013263C(__int16 a1, uint64_t a2, unsigned __int8 a3, uint64_t (*a4)(), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10004C8A0(a1, a2, a3, a4, (uint64_t)sub_10011ED60, a6, a7, a8);
}

uint64_t sub_10013264C(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = sub_10004BC7C(&v10);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v11))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1155, "OI_STATUS _ACI_ReadTunablesEnableDisable(_Bool, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v11);
      if (WORD1(v11) > WORD2(v11) && BYTE6(v11) == 2)
      {
        ++WORD2(v11);
        *(_BYTE *)(v10 + v8) = a1;
        if (HIBYTE(v11))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1156, "OI_STATUS _ACI_ReadTunablesEnableDisable(_Bool, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v11) - WORD2(v11) > 3 && BYTE6(v11) == 2)
        {
          *(_BYTE *)(v10 + WORD2(v11)) = -1;
          *(_BYTE *)(v10 + WORD2(v11) + 1) = -1;
          *(_BYTE *)(v10 + WORD2(v11) + 2) = -1;
          *(_BYTE *)(v10 + WORD2(v11) + 3) = -1;
          v9 = WORD2(v11) + 4;
          WORD2(v11) += 4;
          if (HIBYTE(v11))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1157, "OI_STATUS _ACI_ReadTunablesEnableDisable(_Bool, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v11) - v9 > 3 && BYTE6(v11) == 2)
          {
            *(_BYTE *)(v10 + v9) = -1;
            *(_BYTE *)(v10 + WORD2(v11) + 1) = -1;
            *(_BYTE *)(v10 + WORD2(v11) + 2) = -1;
            *(_BYTE *)(v10 + WORD2(v11) + 3) = -1;
            WORD2(v11) += 4;
            return sub_10004C8A0(64898, v10, BYTE4(v11), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10013287C(__int16 a1, char a2, char a3, char *a4, unsigned int a5, uint64_t (*a6)())
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  result = sub_10004BC7C(&v22);
  if ((_DWORD)result)
    return result;
  if (HIBYTE(v23))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2208, "OI_STATUS _ACI_ConfigureControllerBTClockCapture(const uint16_t, const uint, const uint, const uint8_t *, const uint16_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_22;
  }
  if (WORD1(v23) - WORD2(v23) <= 1 || BYTE6(v23) != 2)
LABEL_22:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  *(_WORD *)(v22 + WORD2(v23)) = a1;
  v16 = WORD2(v23);
  v17 = WORD2(v23) + 2;
  WORD2(v23) += 2;
  if (HIBYTE(v23))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2209, "OI_STATUS _ACI_ConfigureControllerBTClockCapture(const uint16_t, const uint, const uint, const uint8_t *, const uint16_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_24;
  }
  if (WORD1(v23) <= v17 || BYTE6(v23) != 2)
LABEL_24:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  WORD2(v23) = v16 + 3;
  *(_BYTE *)(v22 + v17) = a2;
  if (HIBYTE(v23))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2210, "OI_STATUS _ACI_ConfigureControllerBTClockCapture(const uint16_t, const uint, const uint, const uint8_t *, const uint16_t, BT_VSC_COMPLETE_CB)");
    goto LABEL_26;
  }
  v18 = WORD2(v23);
  if (WORD1(v23) <= WORD2(v23) || BYTE6(v23) != 2)
LABEL_26:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v23);
  *(_BYTE *)(v22 + v18) = a3;
  if (a5)
  {
    v19 = a5;
    while (!HIBYTE(v23))
    {
      v20 = WORD2(v23);
      if (WORD1(v23) <= WORD2(v23) || BYTE6(v23) != 2)
        goto LABEL_20;
      v21 = *a4++;
      ++WORD2(v23);
      *(_BYTE *)(v22 + v20) = v21;
      if (!--v19)
        return sub_10004C8A0(65475, v22, BYTE4(v23), a6, (uint64_t)sub_10011ED60, v13, v14, v15);
    }
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2212, "OI_STATUS _ACI_ConfigureControllerBTClockCapture(const uint16_t, const uint, const uint, const uint8_t *, const uint16_t, BT_VSC_COMPLETE_CB)");
LABEL_20:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return sub_10004C8A0(65475, v22, BYTE4(v23), a6, (uint64_t)sub_10011ED60, v13, v14, v15);
}

uint64_t sub_100132B00(int a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1133, "OI_STATUS _ACI_BTEnableFeatures(uint32_t, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v10) - WORD2(v10) > 3 && BYTE6(v10) == 2)
    {
      *(_WORD *)(v9 + WORD2(v10)) = a1;
      *(_BYTE *)(v9 + WORD2(v10) + 2) = BYTE2(a1);
      *(_BYTE *)(v9 + WORD2(v10) + 3) = HIBYTE(a1);
      v8 = WORD2(v10) + 4;
      WORD2(v10) += 4;
      if (HIBYTE(v10))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 1134, "OI_STATUS _ACI_BTEnableFeatures(uint32_t, BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v10) - v8 > 3 && BYTE6(v10) == 2)
      {
        *(_BYTE *)(v9 + v8) = 1;
        *(_WORD *)(v9 + WORD2(v10) + 1) = 0;
        *(_BYTE *)(v9 + WORD2(v10) + 3) = 0;
        WORD2(v10) += 4;
        return sub_10004C8A0(65393, v9, BYTE4(v10), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100132CC4(char a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  result = sub_10004BC7C(&v11);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v12))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3748, "OI_STATUS _ACI_OlympicSetAGCTableOverride(uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v8 = WORD2(v12);
      if (WORD1(v12) > WORD2(v12) && BYTE6(v12) == 2)
      {
        ++WORD2(v12);
        *(_BYTE *)(v11 + v8) = a1;
        if (HIBYTE(v12))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3749, "OI_STATUS _ACI_OlympicSetAGCTableOverride(uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v12) - WORD2(v12) > 3 && BYTE6(v12) == 2)
        {
          *(_BYTE *)(v11 + WORD2(v12)) = -1;
          *(_BYTE *)(v11 + WORD2(v12) + 1) = -1;
          *(_BYTE *)(v11 + WORD2(v12) + 2) = -1;
          *(_BYTE *)(v11 + WORD2(v12) + 3) = -1;
          v9 = WORD2(v12) + 4;
          WORD2(v12) += 4;
          if (HIBYTE(v12))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3750, "OI_STATUS _ACI_OlympicSetAGCTableOverride(uint8_t, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v12) - v9 > 3 && BYTE6(v12) == 2)
          {
            *(_BYTE *)(v11 + v9) = -1;
            *(_BYTE *)(v11 + WORD2(v12) + 1) = -1;
            *(_BYTE *)(v11 + WORD2(v12) + 2) = -1;
            *(_BYTE *)(v11 + WORD2(v12) + 3) = -1;
            v10 = WORD2(v12) + 4;
            WORD2(v12) += 4;
            if (HIBYTE(v12))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3751, "OI_STATUS _ACI_OlympicSetAGCTableOverride(uint8_t, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v12) - v10 > 3 && BYTE6(v12) == 2)
            {
              *(_BYTE *)(v11 + v10) = -1;
              *(_BYTE *)(v11 + WORD2(v12) + 1) = -1;
              *(_BYTE *)(v11 + WORD2(v12) + 2) = -1;
              *(_BYTE *)(v11 + WORD2(v12) + 3) = -1;
              WORD2(v12) += 4;
              return sub_10004C8A0(64906, v11, BYTE4(v12), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100132FA4(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  result = sub_10004BC7C(&v6);
  if (!(_DWORD)result)
    return sub_10004C8A0(65360, v6, BYTE4(v7), a1, (uint64_t)sub_10011F7EC, v3, v4, v5);
  return result;
}

uint64_t sub_100132FF4(char a1, __int16 a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9, __int16 a10, char a11, char a12, char a13, char a14, char a15, int a16, int a17, char a18, char a19, __int16 a20,char a21,int a22,uint64_t (*a23)())
{
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  unsigned __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 v44;
  unsigned __int16 v45;
  __int16 v46;
  unsigned __int16 v47;
  unsigned __int16 v48;
  unsigned __int16 v49;
  __int16 v50;
  unsigned __int16 v51;
  uint64_t v52;
  uint64_t v53;

  v52 = 0;
  v53 = 0;
  result = sub_10004BC7C(&v52);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v53))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2226, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v35 = WORD2(v53);
      if (WORD1(v53) > WORD2(v53) && BYTE6(v53) == 2)
      {
        ++WORD2(v53);
        *(_BYTE *)(v52 + v35) = a1;
        if (HIBYTE(v53))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2227, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v53) - WORD2(v53) > 1 && BYTE6(v53) == 2)
        {
          *(_WORD *)(v52 + WORD2(v53)) = a2;
          v36 = WORD2(v53);
          v37 = WORD2(v53) + 2;
          WORD2(v53) += 2;
          if (HIBYTE(v53))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2228, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v53) > v37 && BYTE6(v53) == 2)
          {
            WORD2(v53) = v36 + 3;
            *(_BYTE *)(v52 + v37) = a3;
            if (HIBYTE(v53))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2229, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
            }
            else
            {
              v38 = WORD2(v53);
              if (WORD1(v53) > WORD2(v53) && BYTE6(v53) == 2)
              {
                ++WORD2(v53);
                *(_BYTE *)(v52 + v38) = a4;
                if (HIBYTE(v53))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2230, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                }
                else
                {
                  v39 = WORD2(v53);
                  if (WORD1(v53) > WORD2(v53) && BYTE6(v53) == 2)
                  {
                    ++WORD2(v53);
                    *(_BYTE *)(v52 + v39) = a5;
                    if (HIBYTE(v53))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2231, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                    }
                    else
                    {
                      v40 = WORD2(v53);
                      if (WORD1(v53) > WORD2(v53) && BYTE6(v53) == 2)
                      {
                        ++WORD2(v53);
                        *(_BYTE *)(v52 + v40) = a6;
                        if (HIBYTE(v53))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2232, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                        }
                        else
                        {
                          v41 = WORD2(v53);
                          if (WORD1(v53) > WORD2(v53) && BYTE6(v53) == 2)
                          {
                            ++WORD2(v53);
                            *(_BYTE *)(v52 + v41) = a7;
                            if (HIBYTE(v53))
                            {
                              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2233, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                            }
                            else
                            {
                              v42 = WORD2(v53);
                              if (WORD1(v53) > WORD2(v53) && BYTE6(v53) == 2)
                              {
                                ++WORD2(v53);
                                *(_BYTE *)(v52 + v42) = a8;
                                if (HIBYTE(v53))
                                {
                                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2234, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                                }
                                else
                                {
                                  v43 = WORD2(v53);
                                  if (WORD1(v53) > WORD2(v53) && BYTE6(v53) == 2)
                                  {
                                    ++WORD2(v53);
                                    *(_BYTE *)(v52 + v43) = a9;
                                    if (HIBYTE(v53))
                                    {
                                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2235, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                                    }
                                    else if (WORD1(v53) - WORD2(v53) > 1 && BYTE6(v53) == 2)
                                    {
                                      *(_WORD *)(v52 + WORD2(v53)) = a10;
                                      v44 = WORD2(v53) + 2;
                                      WORD2(v53) += 2;
                                      if (HIBYTE(v53))
                                      {
                                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2236, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                                      }
                                      else if (WORD1(v53) - v44 > 1 && BYTE6(v53) == 2)
                                      {
                                        *(_BYTE *)(v52 + v44) = a11;
                                        *(_BYTE *)(v52 + WORD2(v53) + 1) = a12;
                                        v45 = WORD2(v53) + 2;
                                        WORD2(v53) += 2;
                                        if (HIBYTE(v53))
                                        {
                                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2237, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                                        }
                                        else if (WORD1(v53) - v45 > 1 && BYTE6(v53) == 2)
                                        {
                                          *(_BYTE *)(v52 + v45) = a13;
                                          *(_BYTE *)(v52 + WORD2(v53) + 1) = a14;
                                          v46 = WORD2(v53);
                                          v47 = WORD2(v53) + 2;
                                          WORD2(v53) += 2;
                                          if (HIBYTE(v53))
                                          {
                                            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2238, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                                          }
                                          else if (WORD1(v53) > v47 && BYTE6(v53) == 2)
                                          {
                                            WORD2(v53) = v46 + 3;
                                            *(_BYTE *)(v52 + v47) = a15;
                                            if (HIBYTE(v53))
                                            {
                                              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2239, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                                            }
                                            else if (WORD1(v53) - WORD2(v53) > 3 && BYTE6(v53) == 2)
                                            {
                                              *(_DWORD *)(v52 + WORD2(v53)) = a16;
                                              v48 = WORD2(v53) + 4;
                                              WORD2(v53) += 4;
                                              if (HIBYTE(v53))
                                              {
                                                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2240, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                                              }
                                              else if (WORD1(v53) - v48 > 3 && BYTE6(v53) == 2)
                                              {
                                                *(_BYTE *)(v52 + v48) = a17;
                                                *(_WORD *)(v52 + WORD2(v53) + 1) = *(_WORD *)((char *)&a17 + 1);
                                                *(_BYTE *)(v52 + WORD2(v53) + 3) = HIBYTE(a17);
                                                v49 = WORD2(v53) + 4;
                                                WORD2(v53) += 4;
                                                if (HIBYTE(v53))
                                                {
                                                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2241, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                                                }
                                                else if (WORD1(v53) - v49 > 3 && BYTE6(v53) == 2)
                                                {
                                                  *(_BYTE *)(v52 + v49) = a18;
                                                  *(_BYTE *)(v52 + WORD2(v53) + 1) = a19;
                                                  *(_WORD *)(v52 + WORD2(v53) + 2) = a20;
                                                  v50 = WORD2(v53);
                                                  v51 = WORD2(v53) + 4;
                                                  WORD2(v53) += 4;
                                                  if (HIBYTE(v53))
                                                  {
                                                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2242, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                                                  }
                                                  else if (WORD1(v53) > v51 && BYTE6(v53) == 2)
                                                  {
                                                    WORD2(v53) = v50 + 5;
                                                    *(_BYTE *)(v52 + v51) = a21;
                                                    if (HIBYTE(v53))
                                                    {
                                                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2243, "OI_STATUS _ACI_ConfigureRSSIStatisticsDetection(_Bool, uint16_t, uint8_t, int8_t, int8_t, int8_t, int8_t, int8_t, int8_t, uint16_t, uint16_t, uint16_t, uint8_t, uint32_t, uint32_t, uint32_t, uint8_t, uint32_t, BT_VSC_COMPLETE_CB)");
                                                    }
                                                    else if (WORD1(v53) - WORD2(v53) > 3 && BYTE6(v53) == 2)
                                                    {
                                                      *(_DWORD *)(v52 + WORD2(v53)) = a22;
                                                      WORD2(v53) += 4;
                                                      return sub_10004C8A0(65481, v52, BYTE4(v53), a23, (uint64_t)sub_10011ED60, v32, v33, v34);
                                                    }
                                                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileB"
                                                                           "luetooth_base/Stack/vsc/aci/aci_vsc.c");
                                                  }
                                                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBlu"
                                                                         "etooth_base/Stack/vsc/aci/aci_vsc.c");
                                                }
                                                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluet"
                                                                       "ooth_base/Stack/vsc/aci/aci_vsc.c");
                                              }
                                              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetoo"
                                                                     "th_base/Stack/vsc/aci/aci_vsc.c");
                                            }
                                            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth"
                                                                   "_base/Stack/vsc/aci/aci_vsc.c");
                                          }
                                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_b"
                                                                 "ase/Stack/vsc/aci/aci_vsc.c");
                                        }
                                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_bas"
                                                               "e/Stack/vsc/aci/aci_vsc.c");
                                      }
                                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/"
                                                             "Stack/vsc/aci/aci_vsc.c");
                                    }
                                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/St"
                                                           "ack/vsc/aci/aci_vsc.c");
                                  }
                                }
                                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/"
                                                       "vsc/aci/aci_vsc.c");
                              }
                            }
                            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                          }
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100133A90(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9, char a10, uint64_t (*a11)())
{
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unsigned __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[6];
  uint64_t v36;
  uint64_t v37;

  v36 = 0;
  v37 = 0;
  result = sub_10004BC7C(&v36);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v37))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2006, "OI_STATUS _ACI_LEMetaTrackSensorV3(const BTAddress, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
    }
    else
    {
      v20 = WORD2(v37);
      if (WORD1(v37) > WORD2(v37) && BYTE6(v37) == 2)
      {
        ++WORD2(v37);
        *(_BYTE *)(v36 + v20) = 88;
        v35[0] = BYTE5(a1);
        v35[1] = BYTE4(a1);
        v35[2] = BYTE3(a1);
        v35[3] = BYTE2(a1);
        v35[4] = BYTE1(a1);
        v35[5] = a1;
        if (HIBYTE(v37))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2009, "OI_STATUS _ACI_LEMetaTrackSensorV3(const BTAddress, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
        }
        else if (WORD1(v37) - WORD2(v37) > 5 && BYTE6(v37) == 2)
        {
          sub_10004C878(v36 + WORD2(v37), (uint64_t)v35, 6uLL);
          v24 = WORD2(v37);
          v25 = WORD2(v37) + 6;
          WORD2(v37) += 6;
          if (HIBYTE(v37))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2010, "OI_STATUS _ACI_LEMetaTrackSensorV3(const BTAddress, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
          }
          else if (WORD1(v37) > v25 && BYTE6(v37) == 2)
          {
            WORD2(v37) = v24 + 7;
            *(_BYTE *)(v36 + v25) = BYTE6(a1);
            if (HIBYTE(v37))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2011, "OI_STATUS _ACI_LEMetaTrackSensorV3(const BTAddress, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
            }
            else
            {
              v26 = WORD2(v37);
              if (WORD1(v37) > WORD2(v37) && BYTE6(v37) == 2)
              {
                ++WORD2(v37);
                *(_BYTE *)(v36 + v26) = a2;
                if (HIBYTE(v37))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2012, "OI_STATUS _ACI_LEMetaTrackSensorV3(const BTAddress, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
                }
                else
                {
                  v27 = WORD2(v37);
                  if (WORD1(v37) > WORD2(v37) && BYTE6(v37) == 2)
                  {
                    ++WORD2(v37);
                    *(_BYTE *)(v36 + v27) = a3;
                    if (HIBYTE(v37))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2013, "OI_STATUS _ACI_LEMetaTrackSensorV3(const BTAddress, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
                    }
                    else
                    {
                      v28 = WORD2(v37);
                      if (WORD1(v37) > WORD2(v37) && BYTE6(v37) == 2)
                      {
                        ++WORD2(v37);
                        *(_BYTE *)(v36 + v28) = a4;
                        if (HIBYTE(v37))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2014, "OI_STATUS _ACI_LEMetaTrackSensorV3(const BTAddress, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
                        }
                        else
                        {
                          v29 = WORD2(v37);
                          if (WORD1(v37) > WORD2(v37) && BYTE6(v37) == 2)
                          {
                            ++WORD2(v37);
                            *(_BYTE *)(v36 + v29) = a5;
                            if (HIBYTE(v37))
                            {
                              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2015, "OI_STATUS _ACI_LEMetaTrackSensorV3(const BTAddress, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
                            }
                            else
                            {
                              v30 = WORD2(v37);
                              if (WORD1(v37) > WORD2(v37) && BYTE6(v37) == 2)
                              {
                                ++WORD2(v37);
                                *(_BYTE *)(v36 + v30) = a6;
                                if (HIBYTE(v37))
                                {
                                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2016, "OI_STATUS _ACI_LEMetaTrackSensorV3(const BTAddress, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
                                }
                                else
                                {
                                  v31 = WORD2(v37);
                                  if (WORD1(v37) > WORD2(v37) && BYTE6(v37) == 2)
                                  {
                                    ++WORD2(v37);
                                    *(_BYTE *)(v36 + v31) = a7;
                                    if (HIBYTE(v37))
                                    {
                                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2017, "OI_STATUS _ACI_LEMetaTrackSensorV3(const BTAddress, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
                                    }
                                    else
                                    {
                                      v32 = WORD2(v37);
                                      if (WORD1(v37) > WORD2(v37) && BYTE6(v37) == 2)
                                      {
                                        ++WORD2(v37);
                                        *(_BYTE *)(v36 + v32) = a8;
                                        if (HIBYTE(v37))
                                        {
                                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2018, "OI_STATUS _ACI_LEMetaTrackSensorV3(const BTAddress, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
                                        }
                                        else
                                        {
                                          v33 = WORD2(v37);
                                          if (WORD1(v37) > WORD2(v37) && BYTE6(v37) == 2)
                                          {
                                            ++WORD2(v37);
                                            *(_BYTE *)(v36 + v33) = a9;
                                            if (HIBYTE(v37))
                                            {
                                              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2019, "OI_STATUS _ACI_LEMetaTrackSensorV3(const BTAddress, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_READ_STATUS_DF_CB)");
                                            }
                                            else
                                            {
                                              v34 = WORD2(v37);
                                              if (WORD1(v37) > WORD2(v37) && BYTE6(v37) == 2)
                                              {
                                                ++WORD2(v37);
                                                *(_BYTE *)(v36 + v34) = a10;
                                                return sub_10004C8A0(65017, v36, BYTE4(v37), a11, (uint64_t)sub_100135928, v21, v22, v23);
                                              }
                                            }
                                            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth"
                                                                   "_base/Stack/vsc/aci/aci_vsc.c");
                                          }
                                        }
                                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_bas"
                                                               "e/Stack/vsc/aci/aci_vsc.c");
                                      }
                                    }
                                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/St"
                                                           "ack/vsc/aci/aci_vsc.c");
                                  }
                                }
                                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/"
                                                       "vsc/aci/aci_vsc.c");
                              }
                            }
                            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                          }
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                      }
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100134104(char a1, char a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, uint64_t (*a7)())
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  result = sub_10004BC7C(&v24);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v25))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2033, "OI_STATUS _ACI_LEMetaTrackSensorIncreaseScanParams(uint8_t, uint8_t, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v18 = WORD2(v25);
      if (WORD1(v25) > WORD2(v25) && BYTE6(v25) == 2)
      {
        ++WORD2(v25);
        *(_BYTE *)(v24 + v18) = 81;
        if (HIBYTE(v25))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2034, "OI_STATUS _ACI_LEMetaTrackSensorIncreaseScanParams(uint8_t, uint8_t, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v19 = WORD2(v25);
          if (WORD1(v25) > WORD2(v25) && BYTE6(v25) == 2)
          {
            ++WORD2(v25);
            *(_BYTE *)(v24 + v19) = a1;
            if (HIBYTE(v25))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2035, "OI_STATUS _ACI_LEMetaTrackSensorIncreaseScanParams(uint8_t, uint8_t, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
            }
            else
            {
              v20 = WORD2(v25);
              if (WORD1(v25) > WORD2(v25) && BYTE6(v25) == 2)
              {
                ++WORD2(v25);
                *(_BYTE *)(v24 + v20) = a2;
                if (HIBYTE(v25))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2036, "OI_STATUS _ACI_LEMetaTrackSensorIncreaseScanParams(uint8_t, uint8_t, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
                }
                else if (WORD1(v25) - WORD2(v25) > 1 && BYTE6(v25) == 2)
                {
                  *(_WORD *)(v24 + WORD2(v25)) = a3;
                  v21 = WORD2(v25) + 2;
                  WORD2(v25) += 2;
                  if (HIBYTE(v25))
                  {
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2037, "OI_STATUS _ACI_LEMetaTrackSensorIncreaseScanParams(uint8_t, uint8_t, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
                  }
                  else if (WORD1(v25) - v21 > 1 && BYTE6(v25) == 2)
                  {
                    *(_BYTE *)(v24 + v21) = a4;
                    *(_BYTE *)(v24 + WORD2(v25) + 1) = HIBYTE(a4);
                    v22 = WORD2(v25) + 2;
                    WORD2(v25) += 2;
                    if (HIBYTE(v25))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2038, "OI_STATUS _ACI_LEMetaTrackSensorIncreaseScanParams(uint8_t, uint8_t, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
                    }
                    else if (WORD1(v25) - v22 > 1 && BYTE6(v25) == 2)
                    {
                      *(_BYTE *)(v24 + v22) = a5;
                      *(_BYTE *)(v24 + WORD2(v25) + 1) = HIBYTE(a5);
                      v23 = WORD2(v25) + 2;
                      WORD2(v25) += 2;
                      if (HIBYTE(v25))
                      {
                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2039, "OI_STATUS _ACI_LEMetaTrackSensorIncreaseScanParams(uint8_t, uint8_t, uint16_t, uint16_t, uint16_t, uint16_t, BT_VSC_COMPLETE_CB)");
                      }
                      else if (WORD1(v25) - v23 > 1 && BYTE6(v25) == 2)
                      {
                        *(_BYTE *)(v24 + v23) = a6;
                        *(_BYTE *)(v24 + WORD2(v25) + 1) = HIBYTE(a6);
                        WORD2(v25) += 2;
                        return sub_10004C8A0(65017, v24, BYTE4(v25), a7, (uint64_t)sub_100135928, v15, v16, v17);
                      }
                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100134540(char a1, char a2, char a3, char a4, uint64_t (*a5)())
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = 0;
  v19 = 0;
  result = sub_10004BC7C(&v18);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v19))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2983, "OI_STATUS _ACI_ConfigureCreateConnection(uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v14 = WORD2(v19);
      if (WORD1(v19) > WORD2(v19) && BYTE6(v19) == 2)
      {
        ++WORD2(v19);
        *(_BYTE *)(v18 + v14) = a1;
        if (HIBYTE(v19))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2984, "OI_STATUS _ACI_ConfigureCreateConnection(uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v15 = WORD2(v19);
          if (WORD1(v19) > WORD2(v19) && BYTE6(v19) == 2)
          {
            ++WORD2(v19);
            *(_BYTE *)(v18 + v15) = a2;
            if (HIBYTE(v19))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2985, "OI_STATUS _ACI_ConfigureCreateConnection(uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
            }
            else
            {
              v16 = WORD2(v19);
              if (WORD1(v19) > WORD2(v19) && BYTE6(v19) == 2)
              {
                ++WORD2(v19);
                *(_BYTE *)(v18 + v16) = a3;
                if (HIBYTE(v19))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2986, "OI_STATUS _ACI_ConfigureCreateConnection(uint8_t, uint8_t, uint8_t, uint8_t, BT_VSC_COMPLETE_CB)");
                }
                else
                {
                  v17 = WORD2(v19);
                  if (WORD1(v19) > WORD2(v19) && BYTE6(v19) == 2)
                  {
                    ++WORD2(v19);
                    *(_BYTE *)(v18 + v17) = a4;
                    return sub_10004C8A0(64940, v18, BYTE4(v19), a5, (uint64_t)sub_10011ED60, v11, v12, v13);
                  }
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100134790(int *a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = sub_10004BC7C(&v10);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v11))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4559, "OI_STATUS _ACI_WriteBdAddr(OI_BD_ADDR *, BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v11) - WORD2(v11) > 5 && BYTE6(v11) == 2)
    {
      v8 = v10 + WORD2(v11);
      v9 = *a1;
      *(_WORD *)(v8 + 4) = *((_WORD *)a1 + 2);
      *(_DWORD *)v8 = v9;
      WORD2(v11) += 6;
      return sub_10004C8A0(64518, v10, BYTE4(v11), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100134874(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  result = sub_10004BC7C(&v9);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v10))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4527, "OI_STATUS _ACI_InitDone(BT_VSC_COMPLETE_CB)");
    }
    else if (WORD1(v10) - WORD2(v10) > 3 && BYTE6(v10) == 2)
    {
      *(_BYTE *)(v9 + WORD2(v10)) = -1;
      *(_BYTE *)(v9 + WORD2(v10) + 1) = -1;
      *(_BYTE *)(v9 + WORD2(v10) + 2) = -1;
      *(_BYTE *)(v9 + WORD2(v10) + 3) = -1;
      v6 = WORD2(v10) + 4;
      WORD2(v10) += 4;
      if (HIBYTE(v10))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4528, "OI_STATUS _ACI_InitDone(BT_VSC_COMPLETE_CB)");
      }
      else if (WORD1(v10) - v6 > 3 && BYTE6(v10) == 2)
      {
        *(_BYTE *)(v9 + v6) = -1;
        *(_BYTE *)(v9 + WORD2(v10) + 1) = -1;
        *(_BYTE *)(v9 + WORD2(v10) + 2) = -1;
        *(_BYTE *)(v9 + WORD2(v10) + 3) = -1;
        v7 = WORD2(v10) + 4;
        WORD2(v10) += 4;
        if (HIBYTE(v10))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4529, "OI_STATUS _ACI_InitDone(BT_VSC_COMPLETE_CB)");
        }
        else if (WORD1(v10) - v7 > 3 && BYTE6(v10) == 2)
        {
          *(_BYTE *)(v9 + v7) = -1;
          *(_BYTE *)(v9 + WORD2(v10) + 1) = -1;
          *(_BYTE *)(v9 + WORD2(v10) + 2) = -1;
          *(_BYTE *)(v9 + WORD2(v10) + 3) = -1;
          v8 = WORD2(v10) + 4;
          WORD2(v10) += 4;
          if (HIBYTE(v10))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4530, "OI_STATUS _ACI_InitDone(BT_VSC_COMPLETE_CB)");
          }
          else if (WORD1(v10) - v8 > 3 && BYTE6(v10) == 2)
          {
            *(_BYTE *)(v9 + v8) = -1;
            *(_BYTE *)(v9 + WORD2(v10) + 1) = -1;
            *(_BYTE *)(v9 + WORD2(v10) + 2) = -1;
            *(_BYTE *)(v9 + WORD2(v10) + 3) = -1;
            WORD2(v10) += 4;
            return sub_10004C8A0(65291, v9, BYTE4(v10), a1, (uint64_t)sub_10011ED60, v3, v4, v5);
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_100134B88(uint64_t (*a1)())
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  result = sub_10004BC7C(&v6);
  if (!(_DWORD)result)
    return sub_10004C8A0(65528, v6, BYTE4(v7), a1, (uint64_t)sub_100137934, v3, v4, v5);
  return result;
}

uint64_t sub_100134BD8(uint64_t a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  result = sub_10004BC7C(&v11);
  if (!(_DWORD)result)
  {
    for (i = 0; i != 24; ++i)
    {
      if (HIBYTE(v12))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4545, "OI_STATUS _ACI_SetRandomSeed(const uint8_t *, BT_VSC_COMPLETE_CB)");
LABEL_10:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
      v9 = WORD2(v12);
      if (WORD1(v12) <= WORD2(v12) || BYTE6(v12) != 2)
        goto LABEL_10;
      v10 = *(_BYTE *)(a1 + i);
      ++WORD2(v12);
      *(_BYTE *)(v11 + v9) = v10;
    }
    return sub_10004C8A0(65092, v11, BYTE4(v12), a2, (uint64_t)sub_10011ED60, v5, v6, v7);
  }
  return result;
}

uint64_t sub_100134CB8(char *a1, uint64_t (*a2)())
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  __int16 v9;
  unsigned __int16 v10;
  char v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  __int16 v17;
  unsigned __int16 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  unsigned __int16 v24;
  char v25;
  __int16 v26;
  unsigned __int16 v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v31 = 0;
  v32 = 0;
  result = sub_10004BC7C(&v31);
  if (!(_DWORD)result)
  {
    if (HIBYTE(v32))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4351, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
    }
    else
    {
      v5 = WORD2(v32);
      if (WORD1(v32) > WORD2(v32) && BYTE6(v32) == 2)
      {
        v6 = *a1;
        ++WORD2(v32);
        *(_BYTE *)(v31 + v5) = v6;
        if (HIBYTE(v32))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4352, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
        }
        else
        {
          v7 = WORD2(v32);
          if (WORD1(v32) > WORD2(v32) && BYTE6(v32) == 2)
          {
            v8 = a1[1];
            ++WORD2(v32);
            *(_BYTE *)(v31 + v7) = v8;
            if (HIBYTE(v32))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4353, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
            }
            else if (WORD1(v32) - WORD2(v32) > 5 && BYTE6(v32) == 2)
            {
              sub_10004C878(v31 + WORD2(v32), *((_QWORD *)a1 + 1), 6uLL);
              v9 = WORD2(v32);
              v10 = WORD2(v32) + 6;
              WORD2(v32) += 6;
              if (HIBYTE(v32))
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4354, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
              }
              else if (WORD1(v32) > v10 && BYTE6(v32) == 2)
              {
                v11 = a1[16];
                WORD2(v32) = v9 + 7;
                *(_BYTE *)(v31 + v10) = v11;
                if (HIBYTE(v32))
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4355, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
                }
                else if (WORD1(v32) - WORD2(v32) > 1 && BYTE6(v32) == 2)
                {
                  *(_WORD *)(v31 + WORD2(v32)) = *((_WORD *)a1 + 9);
                  v12 = WORD2(v32) + 2;
                  WORD2(v32) += 2;
                  if (HIBYTE(v32))
                  {
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4356, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
                  }
                  else if (WORD1(v32) - v12 > 1 && BYTE6(v32) == 2)
                  {
                    *(_BYTE *)(v31 + v12) = a1[20];
                    *(_BYTE *)(v31 + WORD2(v32) + 1) = a1[21];
                    v13 = WORD2(v32) + 2;
                    WORD2(v32) += 2;
                    if (HIBYTE(v32))
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4357, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
                    }
                    else if (WORD1(v32) - v13 > 1 && BYTE6(v32) == 2)
                    {
                      *(_BYTE *)(v31 + v13) = a1[22];
                      *(_BYTE *)(v31 + WORD2(v32) + 1) = a1[23];
                      v14 = WORD2(v32) + 2;
                      WORD2(v32) += 2;
                      if (HIBYTE(v32))
                      {
                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4358, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
                      }
                      else if (WORD1(v32) - v14 > 1 && BYTE6(v32) == 2)
                      {
                        *(_BYTE *)(v31 + v14) = a1[24];
                        *(_BYTE *)(v31 + WORD2(v32) + 1) = a1[25];
                        v15 = WORD2(v32) + 2;
                        WORD2(v32) += 2;
                        if (HIBYTE(v32))
                        {
                          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4359, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
                        }
                        else if (WORD1(v32) - v15 > 1 && BYTE6(v32) == 2)
                        {
                          *(_BYTE *)(v31 + v15) = a1[26];
                          *(_BYTE *)(v31 + WORD2(v32) + 1) = a1[27];
                          v16 = WORD2(v32) + 2;
                          WORD2(v32) += 2;
                          if (HIBYTE(v32))
                          {
                            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4360, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
                          }
                          else if (WORD1(v32) - v16 > 1 && BYTE6(v32) == 2)
                          {
                            *(_BYTE *)(v31 + v16) = a1[28];
                            *(_BYTE *)(v31 + WORD2(v32) + 1) = a1[29];
                            v17 = WORD2(v32);
                            v18 = WORD2(v32) + 2;
                            WORD2(v32) += 2;
                            if (HIBYTE(v32))
                            {
                              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4361, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
                            }
                            else if (WORD1(v32) > v18 && BYTE6(v32) == 2)
                            {
                              v19 = a1[30];
                              WORD2(v32) = v17 + 3;
                              *(_BYTE *)(v31 + v18) = v19;
                              if (HIBYTE(v32))
                              {
                                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4362, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
                              }
                              else if (WORD1(v32) - WORD2(v32) > 5 && BYTE6(v32) == 2)
                              {
                                sub_10004C878(v31 + WORD2(v32), *((_QWORD *)a1 + 4), 6uLL);
                                v23 = WORD2(v32);
                                v24 = WORD2(v32) + 6;
                                WORD2(v32) += 6;
                                if (HIBYTE(v32))
                                {
                                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4363, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
                                }
                                else if (WORD1(v32) > v24 && BYTE6(v32) == 2)
                                {
                                  v25 = a1[40];
                                  WORD2(v32) = v23 + 7;
                                  *(_BYTE *)(v31 + v24) = v25;
                                  if (HIBYTE(v32))
                                  {
                                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4364, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
                                  }
                                  else if (WORD1(v32) > WORD2(v32) && BYTE6(v32) == 2)
                                  {
                                    *(_BYTE *)(v31 + WORD2(v32)) = a1[41];
                                    v26 = WORD2(v32);
                                    v27 = ++WORD2(v32);
                                    if (HIBYTE(v32))
                                    {
                                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4365, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
                                    }
                                    else if (WORD1(v32) > v27 && BYTE6(v32) == 2)
                                    {
                                      v28 = a1[42];
                                      WORD2(v32) = v26 + 2;
                                      *(_BYTE *)(v31 + v27) = v28;
                                      if (HIBYTE(v32))
                                      {
                                        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4366, "OI_STATUS _ACI_addToFilterAcceptListUnified(BT_VSCAddFilterAcceptListUnified_t *, BT_VSC_COMPLETE_CB)");
                                      }
                                      else
                                      {
                                        v29 = WORD2(v32);
                                        if (WORD1(v32) > WORD2(v32) && BYTE6(v32) == 2)
                                        {
                                          v30 = a1[43];
                                          ++WORD2(v32);
                                          *(_BYTE *)(v31 + v29) = v30;
                                          return sub_10004C8A0(65479, v31, BYTE4(v32), a2, (uint64_t)sub_10011ED60, v20, v21, v22);
                                        }
                                      }
                                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/"
                                                             "Stack/vsc/aci/aci_vsc.c");
                                    }
                                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/St"
                                                           "ack/vsc/aci/aci_vsc.c");
                                  }
                                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stac"
                                                         "k/vsc/aci/aci_vsc.c");
                                }
                                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/"
                                                       "vsc/aci/aci_vsc.c");
                              }
                              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                            }
                            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                          }
                          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                        }
                        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                      }
                      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                    }
                    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                  }
                  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
                }
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
              }
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  return result;
}

uint64_t sub_10013559C(_WORD *a1, char a2, char a3, char a4, int a5, const void *a6, uint64_t (*a7)())
{
  uint64_t result;
  uint64_t v15;
  __int16 v16;
  unsigned __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = 0;
  v27 = 0;
  result = sub_10004BC7C(&v26);
  if ((_DWORD)result)
    return result;
  if (HIBYTE(v27))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4463, "OI_STATUS _ACI_SetUnifiedPriority(OI_HCI_CONNECTION_HANDLE, uint8_t, uint8_t, uint8_t, uint8_t, BtVscUnifiedPriorityParams *, BT_VSC_COMPLETE_CB)");
    goto LABEL_25;
  }
  v15 = WORD2(v27);
  if (WORD1(v27) <= WORD2(v27) || BYTE6(v27) != 2)
LABEL_25:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v27);
  *(_BYTE *)(v26 + v15) = a2;
  if (HIBYTE(v27))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4464, "OI_STATUS _ACI_SetUnifiedPriority(OI_HCI_CONNECTION_HANDLE, uint8_t, uint8_t, uint8_t, uint8_t, BtVscUnifiedPriorityParams *, BT_VSC_COMPLETE_CB)");
    goto LABEL_27;
  }
  if (WORD1(v27) - WORD2(v27) <= 1 || BYTE6(v27) != 2)
LABEL_27:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  *(_WORD *)(v26 + WORD2(v27)) = *a1;
  v16 = WORD2(v27);
  v17 = WORD2(v27) + 2;
  WORD2(v27) += 2;
  if (HIBYTE(v27))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4465, "OI_STATUS _ACI_SetUnifiedPriority(OI_HCI_CONNECTION_HANDLE, uint8_t, uint8_t, uint8_t, uint8_t, BtVscUnifiedPriorityParams *, BT_VSC_COMPLETE_CB)");
    goto LABEL_29;
  }
  if (WORD1(v27) <= v17 || BYTE6(v27) != 2)
LABEL_29:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  WORD2(v27) = v16 + 3;
  *(_BYTE *)(v26 + v17) = a3;
  if (HIBYTE(v27))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4466, "OI_STATUS _ACI_SetUnifiedPriority(OI_HCI_CONNECTION_HANDLE, uint8_t, uint8_t, uint8_t, uint8_t, BtVscUnifiedPriorityParams *, BT_VSC_COMPLETE_CB)");
    goto LABEL_31;
  }
  v18 = WORD2(v27);
  if (WORD1(v27) <= WORD2(v27) || BYTE6(v27) != 2)
LABEL_31:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v27);
  *(_BYTE *)(v26 + v18) = a4;
  if (HIBYTE(v27))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4467, "OI_STATUS _ACI_SetUnifiedPriority(OI_HCI_CONNECTION_HANDLE, uint8_t, uint8_t, uint8_t, uint8_t, BtVscUnifiedPriorityParams *, BT_VSC_COMPLETE_CB)");
    goto LABEL_33;
  }
  v19 = WORD2(v27);
  if (WORD1(v27) <= WORD2(v27) || BYTE6(v27) != 2)
LABEL_33:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  ++WORD2(v27);
  *(_BYTE *)(v26 + v19) = a5;
  v20 = v26;
  v21 = WORD2(v27);
  if (HIBYTE(v27))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4468, "OI_STATUS _ACI_SetUnifiedPriority(OI_HCI_CONNECTION_HANDLE, uint8_t, uint8_t, uint8_t, uint8_t, BtVscUnifiedPriorityParams *, BT_VSC_COMPLETE_CB)");
    v22 = 0;
  }
  else
  {
    v22 = WORD1(v27) - WORD2(v27);
  }
  if (v22 < a5 || BYTE6(v27) != 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  memmove((void *)(v20 + v21), a6, a5);
  WORD2(v27) += a5;
  return sub_10004C8A0(65059, v26, BYTE4(v27), a7, (uint64_t)sub_10011ED60, v23, v24, v25);
}

void sub_100135928(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("status %d, Byte 0x%x, hlCb 0x%x", a1, 0, (_DWORD)a2);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v6 = 0;
    if (a2)
      goto LABEL_6;
    return;
  }
  if (*((_BYTE *)a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 58, "void _ACI_U8EventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_14;
  }
  v7 = *((unsigned __int16 *)a3 + 6);
  if (*((unsigned __int16 *)a3 + 5) <= v7 || *((_BYTE *)a3 + 14) != 1)
LABEL_14:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v8 = *a3;
  *((_WORD *)a3 + 6) = v7 + 1;
  v6 = *(unsigned __int8 *)(v8 + v7);
  if (a2)
LABEL_6:
    a2(a1, v6);
}

uint64_t sub_100135A34(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t *a3)
{
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t result;
  NSObject *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;

  if ((_DWORD)a1)
  {
    v5 = a2;
    result = sub_10005549C();
    if (!(_DWORD)result
      || (sub_100054530("EnhancedProfilingStats VSC failed with status %!", a1),
          v7 = sub_1000544A0(0x54u),
          result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR),
          !(_DWORD)result))
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v50 = 0;
      v52 = 0;
      v51 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      goto LABEL_46;
    }
    sub_1006CEEC0();
LABEL_45:
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v50 = 0;
    v52 = 0;
    v51 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    result = 0;
LABEL_46:
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    if (!v5)
      return result;
    goto LABEL_47;
  }
  if (*((_BYTE *)a3 + 15))
  {
    v5 = a2;
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 187, "void _ACI_LowPowerCoreStatsEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_45;
  }
  v20 = *((unsigned __int16 *)a3 + 5);
  v21 = *((unsigned __int16 *)a3 + 6);
  if (((v20 - (_DWORD)v21) & 0x1FFFE) != 0x9C)
  {
    v5 = a2;
    goto LABEL_45;
  }
  if (*((_BYTE *)a3 + 14) != 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v22 = *a3;
  v23 = *(_DWORD *)(*a3 + v21);
  *((_WORD *)a3 + 6) = v21 + 4;
  if (v20 - (unsigned __int16)(v21 + 4) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v49 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 4));
  *((_WORD *)a3 + 6) = v21 + 8;
  if (v20 - (unsigned __int16)(v21 + 8) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v48 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 8));
  *((_WORD *)a3 + 6) = v21 + 12;
  if (v20 - (unsigned __int16)(v21 + 12) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v47 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 12));
  *((_WORD *)a3 + 6) = v21 + 16;
  if (v20 - (unsigned __int16)(v21 + 16) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v24 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 16));
  *((_WORD *)a3 + 6) = v21 + 20;
  if (v20 - (unsigned __int16)(v21 + 20) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v25 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 20));
  *((_WORD *)a3 + 6) = v21 + 24;
  if (v20 - (unsigned __int16)(v21 + 24) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v26 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 24));
  *((_WORD *)a3 + 6) = v21 + 28;
  if (v20 - (unsigned __int16)(v21 + 28) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v27 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 28));
  *((_WORD *)a3 + 6) = v21 + 32;
  if (v20 - (unsigned __int16)(v21 + 32) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v28 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 32));
  *((_WORD *)a3 + 6) = v21 + 36;
  if (v20 - (unsigned __int16)(v21 + 36) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v12 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 36));
  *((_WORD *)a3 + 6) = v21 + 40;
  if (v20 - (unsigned __int16)(v21 + 40) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v13 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 40));
  *((_WORD *)a3 + 6) = v21 + 44;
  if (v20 - (unsigned __int16)(v21 + 44) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v14 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 44));
  *((_WORD *)a3 + 6) = v21 + 48;
  if (v20 - (unsigned __int16)(v21 + 48) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v15 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 48));
  *((_WORD *)a3 + 6) = v21 + 52;
  if (v20 - (unsigned __int16)(v21 + 52) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v16 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 52));
  *((_WORD *)a3 + 6) = v21 + 56;
  if (v20 - (unsigned __int16)(v21 + 56) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v17 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 56));
  *((_WORD *)a3 + 6) = v21 + 60;
  if (v20 - (unsigned __int16)(v21 + 60) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v29 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 60));
  *((_WORD *)a3 + 6) = v21 + 64;
  if (v20 - (unsigned __int16)(v21 + 64) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v19 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 64));
  *((_WORD *)a3 + 6) = v21 + 68;
  if (v20 - (unsigned __int16)(v21 + 68) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  result = *(unsigned int *)(v22 + (unsigned __int16)(v21 + 68));
  *((_WORD *)a3 + 6) = v21 + 72;
  if (v20 - (unsigned __int16)(v21 + 72) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v30 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 72));
  *((_WORD *)a3 + 6) = v21 + 76;
  if (v20 - (unsigned __int16)(v21 + 76) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v31 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 76));
  *((_WORD *)a3 + 6) = v21 + 80;
  if (v20 - (unsigned __int16)(v21 + 80) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v32 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 80));
  *((_WORD *)a3 + 6) = v21 + 84;
  if (v20 - (unsigned __int16)(v21 + 84) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v33 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 84));
  *((_WORD *)a3 + 6) = v21 + 88;
  if (v20 - (unsigned __int16)(v21 + 88) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v34 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 88));
  *((_WORD *)a3 + 6) = v21 + 92;
  if (v20 - (unsigned __int16)(v21 + 92) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v51 = v27;
  v35 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 92));
  *((_WORD *)a3 + 6) = v21 + 96;
  if (v20 - (unsigned __int16)(v21 + 96) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v36 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 96));
  *((_WORD *)a3 + 6) = v21 + 100;
  if (v20 - (unsigned __int16)(v21 + 100) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v52 = __PAIR64__(v25, v26);
  v37 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 100));
  *((_WORD *)a3 + 6) = v21 + 104;
  if (v20 - (unsigned __int16)(v21 + 104) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v46 = v23;
  v38 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 104));
  *((_WORD *)a3 + 6) = v21 + 108;
  if (v20 - (unsigned __int16)(v21 + 108) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v39 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 108));
  *((_WORD *)a3 + 6) = v21 + 112;
  if (v20 - (unsigned __int16)(v21 + 112) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v18 = v29;
  HIDWORD(v50) = v28;
  v40 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 112));
  *((_WORD *)a3 + 6) = v21 + 116;
  if (v20 - (unsigned __int16)(v21 + 116) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  LODWORD(v50) = v24;
  v41 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 116));
  *((_WORD *)a3 + 6) = v21 + 120;
  if (v20 - (unsigned __int16)(v21 + 120) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v5 = a2;
  v42 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 120));
  *((_WORD *)a3 + 6) = v21 + 124;
  if (v20 - (unsigned __int16)(v21 + 124) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v43 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 124));
  *((_WORD *)a3 + 6) = v21 + 128;
  if (v20 - (unsigned __int16)(v21 + 128) <= 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v44 = *(_DWORD *)(v22 + (unsigned __int16)(v21 + 128));
  *((_WORD *)a3 + 6) = v21 + 132;
  v8 = v46;
  v11 = v47;
  v10 = v48;
  v9 = v49;
  if (v5)
  {
LABEL_47:
    LODWORD(v45) = 0;
    HIDWORD(v45) = v8;
    return v5(a1, 0, 0, 0, 0, 0, 0, 0, 0, v45, __PAIR64__(v10, v9), __PAIR64__(v50, v11), __PAIR64__(v52, HIDWORD(v52)), __PAIR64__(HIDWORD(v50), v51), __PAIR64__(v13, v12), __PAIR64__(v15, v14), __PAIR64__(v17, v16), __PAIR64__(v19, v18), __PAIR64__(v30, result),
             __PAIR64__(v32, v31),
             __PAIR64__(v34, v33),
             __PAIR64__(v36, v35),
             __PAIR64__(v38, v37),
             __PAIR64__(v40, v39),
             __PAIR64__(v42, v41),
             __PAIR64__(v44, v43),
             0,
             0,
             0,
             0,
             0,
             0,
             0);
  }
  return result;
}

void sub_100136358(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;

  if (!(_DWORD)a1)
  {
    if (*((_BYTE *)a3 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3126, "void _ACI_ReadRawRssiEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    }
    else
    {
      v8 = *((unsigned __int16 *)a3 + 5);
      v9 = *((unsigned __int16 *)a3 + 6);
      if (v8 - (int)v9 > 1 && *((_BYTE *)a3 + 14) == 1)
      {
        v10 = *a3;
        v11 = (unsigned __int8 *)(*a3 + v9);
        v12 = *v11;
        v13 = v11[1];
        *((_WORD *)a3 + 6) = v9 + 2;
        if (v8 - (unsigned __int16)(v9 + 2) <= 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v6 = v12 | (v13 << 8);
        v7 = *(unsigned __int8 *)(v10 + (unsigned __int16)(v9 + 2));
        *((_WORD *)a3 + 6) = v9 + 4;
        if (a2)
          goto LABEL_6;
        return;
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  if (sub_10005549C())
  {
    sub_100054530("status %d, ConnectionHandle 0x%x, rssi 0x%x, hlCb 0x%x", a1, 0, 0, (_DWORD)a2);
    v5 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  v6 = 0;
  v7 = 0;
  if (a2)
LABEL_6:
    a2(a1, v6, v7);
}

void sub_1001364B0(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;

  if (*((_BYTE *)a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 110, "void _ACI_CreateMultiAdvInstParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_13;
  }
  v3 = *((unsigned __int16 *)a3 + 6);
  if (*((unsigned __int16 *)a3 + 5) <= v3 || *((_BYTE *)a3 + 14) != 1)
LABEL_13:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v6 = *a3;
  *((_WORD *)a3 + 6) = v3 + 1;
  v7 = *(unsigned __int8 *)(v6 + v3);
  if (!(_DWORD)a1
    || !sub_10005549C()
    || (sub_100054530("status %!", a1),
        v8 = sub_1000544A0(0x54u),
        !os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)))
  {
    if (!a2)
      return;
    goto LABEL_8;
  }
  sub_1006CEEC0();
  if (a2)
LABEL_8:
    a2(a1, v7);
}

void sub_1001365B4(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, int), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v21;
  uint64_t v22;
  uint64_t v23;

  if (!(_DWORD)a1)
  {
    if (*((_BYTE *)a3 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2679, "void _ACI_ReadDetailedPowerProfileStatsEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    }
    else
    {
      v21 = *((unsigned __int16 *)a3 + 5);
      v22 = *((unsigned __int16 *)a3 + 6);
      if (v21 - (int)v22 > 3 && *((_BYTE *)a3 + 14) == 1)
      {
        v23 = *a3;
        v6 = *(unsigned int *)(*a3 + v22);
        *((_WORD *)a3 + 6) = v22 + 4;
        if (v21 - (unsigned __int16)(v22 + 4) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v7 = *(unsigned int *)(v23 + (unsigned __int16)(v22 + 4));
        *((_WORD *)a3 + 6) = v22 + 8;
        if (v21 - (unsigned __int16)(v22 + 8) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v8 = *(unsigned int *)(v23 + (unsigned __int16)(v22 + 8));
        *((_WORD *)a3 + 6) = v22 + 12;
        if (v21 - (unsigned __int16)(v22 + 12) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v9 = *(unsigned int *)(v23 + (unsigned __int16)(v22 + 12));
        *((_WORD *)a3 + 6) = v22 + 16;
        if (v21 - (unsigned __int16)(v22 + 16) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v10 = *(unsigned int *)(v23 + (unsigned __int16)(v22 + 16));
        *((_WORD *)a3 + 6) = v22 + 20;
        if (v21 - (unsigned __int16)(v22 + 20) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v11 = *(unsigned int *)(v23 + (unsigned __int16)(v22 + 20));
        *((_WORD *)a3 + 6) = v22 + 24;
        if (v21 - (unsigned __int16)(v22 + 24) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v13 = *(_DWORD *)(v23 + (unsigned __int16)(v22 + 24));
        *((_WORD *)a3 + 6) = v22 + 28;
        if (v21 - (unsigned __int16)(v22 + 28) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v12 = *(unsigned int *)(v23 + (unsigned __int16)(v22 + 28));
        *((_WORD *)a3 + 6) = v22 + 32;
        if (v21 - (unsigned __int16)(v22 + 32) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v14 = *(_DWORD *)(v23 + (unsigned __int16)(v22 + 32));
        *((_WORD *)a3 + 6) = v22 + 36;
        if (v21 - (unsigned __int16)(v22 + 36) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v15 = *(_DWORD *)(v23 + (unsigned __int16)(v22 + 36));
        *((_WORD *)a3 + 6) = v22 + 40;
        if (v21 - (unsigned __int16)(v22 + 40) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v16 = *(_DWORD *)(v23 + (unsigned __int16)(v22 + 40));
        *((_WORD *)a3 + 6) = v22 + 44;
        if (v21 - (unsigned __int16)(v22 + 44) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v17 = *(_DWORD *)(v23 + (unsigned __int16)(v22 + 44));
        *((_WORD *)a3 + 6) = v22 + 48;
        if (v21 - (unsigned __int16)(v22 + 48) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v18 = *(_DWORD *)(v23 + (unsigned __int16)(v22 + 48));
        *((_WORD *)a3 + 6) = v22 + 52;
        if (v21 - (unsigned __int16)(v22 + 52) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v19 = *(_DWORD *)(v23 + (unsigned __int16)(v22 + 52));
        *((_WORD *)a3 + 6) = v22 + 56;
        if (a2)
          goto LABEL_6;
        return;
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  if (sub_10005549C())
  {
    sub_100054530("status %d, durationTotal %d, durationActive %d, durationIdle %d, durationSleep %d disableCounter %d, iPATxBT %d, ePATxBT %d, iPATxLE %d, ePATxLE %d, connectedRxBT %d, connectedRxLE %d, scanRxBT %d scanRxLE %d, totalPHYCal %d, hlCb 0x%x", a1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (_DWORD)a2);
    v5 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  if (a2)
LABEL_6:
    a2(a1, v6, v7, v8, v9, v10, v11, v12, __PAIR64__(v14, v13), __PAIR64__(v16, v15), __PAIR64__(v18, v17), v19);
}

void sub_1001369D0(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (!(_DWORD)a1)
  {
    if (*((_BYTE *)a3 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 2735, "void _ACI_ReadTransportSwitchStatsEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    }
    else
    {
      v10 = *((unsigned __int16 *)a3 + 5);
      v11 = *((unsigned __int16 *)a3 + 6);
      if (v10 - (int)v11 > 3 && *((_BYTE *)a3 + 14) == 1)
      {
        v12 = *a3;
        v6 = *(unsigned int *)(*a3 + v11);
        *((_WORD *)a3 + 6) = v11 + 4;
        if (v10 - (unsigned __int16)(v11 + 4) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v7 = *(unsigned int *)(v12 + (unsigned __int16)(v11 + 4));
        *((_WORD *)a3 + 6) = v11 + 8;
        if (v10 - (unsigned __int16)(v11 + 8) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v8 = *(unsigned int *)(v12 + (unsigned __int16)(v11 + 8));
        *((_WORD *)a3 + 6) = v11 + 12;
        if (v10 - (unsigned __int16)(v11 + 12) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v9 = *(unsigned int *)(v12 + (unsigned __int16)(v11 + 12));
        *((_WORD *)a3 + 6) = v11 + 16;
        if (a2)
          goto LABEL_6;
        return;
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  if (sub_10005549C())
  {
    sub_100054530("status %d, total %d, successful %d, downgraded %d, involuntaryDowngraded %d, hlCb 0x%x", a1, 0, 0, 0, 0, (_DWORD)a2);
    v5 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if (a2)
LABEL_6:
    a2(a1, v6, v7, v8, v9);
}

void sub_100136B98(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("AdvBufConfig status %!", a1);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v6 = 255;
    goto LABEL_12;
  }
  if (*((_BYTE *)a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3273, "void _ACI_AdvBufConfigEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_20;
  }
  v7 = *((unsigned __int16 *)a3 + 6);
  if (*((unsigned __int16 *)a3 + 5) <= v7 || *((_BYTE *)a3 + 14) != 1)
LABEL_20:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v8 = *a3;
  *((_WORD *)a3 + 6) = v7 + 1;
  v6 = *(unsigned __int8 *)(v8 + v7);
  if ((_DWORD)v6 == 1)
  {
    v6 = 1;
    if (!a2)
      return;
    goto LABEL_15;
  }
LABEL_12:
  if (!sub_10005549C()
    || (sub_100054530("AdvBufConfig sub-opcode incorrect: %d, %!", v6, a1),
        v9 = sub_1000544A0(0x54u),
        !os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)))
  {
    if (!a2)
      return;
    goto LABEL_15;
  }
  sub_1006CEEC0();
  if (a2)
LABEL_15:
    a2(a1, v6);
}

void sub_100136D00(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD), uint64_t *a3)
{
  NSObject *v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("AdvBufReadCommand status %!", a1);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 255;
    v10 = 255;
    goto LABEL_16;
  }
  if (*((_BYTE *)a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3312, "void _ACI_AdvBufReadCommandEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_24;
  }
  v11 = *((unsigned __int16 *)a3 + 5);
  v12 = *((unsigned __int16 *)a3 + 6);
  if (v11 <= v12 || *((_BYTE *)a3 + 14) != 1)
LABEL_24:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v13 = *a3;
  *((_WORD *)a3 + 6) = v12 + 1;
  if (v11 <= (unsigned __int16)(v12 + 1))
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v9 = *(unsigned __int8 *)(v13 + v12);
  *((_WORD *)a3 + 6) = v12 + 2;
  if (v11 <= (unsigned __int16)(v12 + 2))
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v8 = *(unsigned __int8 *)(v13 + v12 + 1);
  *((_WORD *)a3 + 6) = v12 + 3;
  if ((int)(v11 - (v12 + 3)) <= 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v7 = *(unsigned __int8 *)(v13 + v12 + 2);
  v6 = *(_WORD *)(v13 + v12 + 3);
  *((_WORD *)a3 + 6) = v12 + 5;
  if ((_DWORD)v9 == 2)
  {
    v10 = 2;
    if (!a2)
      return;
    goto LABEL_19;
  }
  v10 = v9;
LABEL_16:
  if (!sub_10005549C()
    || (sub_100054530("AdvBufReadCommand sub-opcode incorrect: %d, %!", v9, a1),
        v14 = sub_1000544A0(0x54u),
        !os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)))
  {
    if (!a2)
      return;
    goto LABEL_19;
  }
  sub_1006CEEC0();
  if (a2)
LABEL_19:
    a2(a1, v10, v8, v7, v6);
}

void sub_100136F20(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("MatchTableConfig status %!", a1);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v6 = 255;
    goto LABEL_12;
  }
  if (*((_BYTE *)a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3348, "void _ACI_MatchTableConfigEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_20;
  }
  v7 = *((unsigned __int16 *)a3 + 6);
  if (*((unsigned __int16 *)a3 + 5) <= v7 || *((_BYTE *)a3 + 14) != 1)
LABEL_20:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v8 = *a3;
  *((_WORD *)a3 + 6) = v7 + 1;
  v6 = *(unsigned __int8 *)(v8 + v7);
  if ((_DWORD)v6 == 3)
  {
    v6 = 3;
    if (!a2)
      return;
    goto LABEL_15;
  }
LABEL_12:
  if (!sub_10005549C()
    || (sub_100054530("MatchTableConfig sub-opcode incorrect %d, %!", v6, a1),
        v9 = sub_1000544A0(0x54u),
        !os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)))
  {
    if (!a2)
      return;
    goto LABEL_15;
  }
  sub_1006CEEC0();
  if (a2)
LABEL_15:
    a2(a1, v6);
}

void sub_100137088(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("MatchTableConfigV2 status %!", a1);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v6 = 255;
    goto LABEL_12;
  }
  if (*((_BYTE *)a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3387, "void _ACI_MatchTableConfigV2EventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_20;
  }
  v7 = *((unsigned __int16 *)a3 + 6);
  if (*((unsigned __int16 *)a3 + 5) <= v7 || *((_BYTE *)a3 + 14) != 1)
LABEL_20:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v8 = *a3;
  *((_WORD *)a3 + 6) = v7 + 1;
  v6 = *(unsigned __int8 *)(v8 + v7);
  if ((_DWORD)v6 == 10)
  {
    v6 = 10;
    if (!a2)
      return;
    goto LABEL_15;
  }
LABEL_12:
  if (!sub_10005549C()
    || (sub_100054530("MatchTableConfigV2 sub-opcode incorrect %d, %!", v6, a1),
        v9 = sub_1000544A0(0x54u),
        !os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)))
  {
    if (!a2)
      return;
    goto LABEL_15;
  }
  sub_1006CEEC0();
  if (a2)
LABEL_15:
    a2(a1, v6);
}

void sub_1001371F0(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("MatchTableConfigV3 status %!", a1);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v6 = 255;
    goto LABEL_12;
  }
  if (*((_BYTE *)a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3441, "void _ACI_MatchTableConfigV3EventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_20;
  }
  v7 = *((unsigned __int16 *)a3 + 6);
  if (*((unsigned __int16 *)a3 + 5) <= v7 || *((_BYTE *)a3 + 14) != 1)
LABEL_20:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v8 = *a3;
  *((_WORD *)a3 + 6) = v7 + 1;
  v6 = *(unsigned __int8 *)(v8 + v7);
  if ((_DWORD)v6 == 10)
  {
    v6 = 10;
    if (!a2)
      return;
    goto LABEL_15;
  }
LABEL_12:
  if (!sub_10005549C()
    || (sub_100054530("MatchTableConfigV3 sub-opcode incorrect %d, %!", v6, a1),
        v9 = sub_1000544A0(0x54u),
        !os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)))
  {
    if (!a2)
      return;
    goto LABEL_15;
  }
  sub_1006CEEC0();
  if (a2)
LABEL_15:
    a2(a1, v6);
}

void sub_100137358(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("AdvBufMatchControl status %!", a1);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v6 = 255;
    goto LABEL_12;
  }
  if (*((_BYTE *)a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3634, "void _ACI_AdvBufMatchControlEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_20;
  }
  v7 = *((unsigned __int16 *)a3 + 6);
  if (*((unsigned __int16 *)a3 + 5) <= v7 || *((_BYTE *)a3 + 14) != 1)
LABEL_20:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v8 = *a3;
  *((_WORD *)a3 + 6) = v7 + 1;
  v6 = *(unsigned __int8 *)(v8 + v7);
  if ((_DWORD)v6 == 7)
  {
    v6 = 7;
    if (!a2)
      return;
    goto LABEL_15;
  }
LABEL_12:
  if (!sub_10005549C()
    || (sub_100054530("AdvBufMatchControl sub-opcode incorrect: %d, %!", v6, a1),
        v9 = sub_1000544A0(0x54u),
        !os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)))
  {
    if (!a2)
      return;
    goto LABEL_15;
  }
  sub_1006CEEC0();
  if (a2)
LABEL_15:
    a2(a1, v6);
}

void sub_1001374C0(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("MatchTableParams status %!", a1);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v6 = 255;
    goto LABEL_12;
  }
  if (*((_BYTE *)a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3515, "void _ACI_MatchTableParamsEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_20;
  }
  v7 = *((unsigned __int16 *)a3 + 6);
  if (*((unsigned __int16 *)a3 + 5) <= v7 || *((_BYTE *)a3 + 14) != 1)
LABEL_20:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v8 = *a3;
  *((_WORD *)a3 + 6) = v7 + 1;
  v6 = *(unsigned __int8 *)(v8 + v7);
  if ((_DWORD)v6 == 4)
  {
    v6 = 4;
    if (!a2)
      return;
    goto LABEL_15;
  }
LABEL_12:
  if (!sub_10005549C()
    || (sub_100054530("MatchTableParams sub-opcode incorrect: %d, %!", v6, a1),
        v9 = sub_1000544A0(0x54u),
        !os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)))
  {
    if (!a2)
      return;
    goto LABEL_15;
  }
  sub_1006CEEC0();
  if (a2)
LABEL_15:
    a2(a1, v6);
}

void sub_100137628(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("MatchBufferConfig status %!", a1);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v6 = 255;
    goto LABEL_12;
  }
  if (*((_BYTE *)a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3562, "void _ACI_MatchBufferConfigEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_20;
  }
  v7 = *((unsigned __int16 *)a3 + 6);
  if (*((unsigned __int16 *)a3 + 5) <= v7 || *((_BYTE *)a3 + 14) != 1)
LABEL_20:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v8 = *a3;
  *((_WORD *)a3 + 6) = v7 + 1;
  v6 = *(unsigned __int8 *)(v8 + v7);
  if ((_DWORD)v6 == 5)
  {
    v6 = 5;
    if (!a2)
      return;
    goto LABEL_15;
  }
LABEL_12:
  if (!sub_10005549C()
    || (sub_100054530("MatchBufferConfig sub-opcode incorrect: %d, %!", v6, a1),
        v9 = sub_1000544A0(0x54u),
        !os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)))
  {
    if (!a2)
      return;
    goto LABEL_15;
  }
  sub_1006CEEC0();
  if (a2)
LABEL_15:
    a2(a1, v6);
}

void sub_100137790(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;

  if ((_DWORD)a1)
  {
    if (sub_10005549C())
    {
      sub_100054530("MatchBufferRead status %!", a1);
      v5 = sub_1000544A0(0x54u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v6 = 0;
    v7 = 255;
    goto LABEL_13;
  }
  if (*((_BYTE *)a3 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 3600, "void _ACI_MatchBufferReadEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    goto LABEL_21;
  }
  v8 = *((unsigned __int16 *)a3 + 5);
  v9 = *((unsigned __int16 *)a3 + 6);
  if (v8 <= v9 || *((_BYTE *)a3 + 14) != 1)
LABEL_21:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v10 = *a3;
  *((_WORD *)a3 + 6) = v9 + 1;
  if (v8 <= (int)v9 + 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  v7 = *(unsigned __int8 *)(v10 + v9);
  *((_WORD *)a3 + 6) = v9 + 2;
  v6 = *(unsigned __int8 *)(v10 + v9 + 1);
  if ((_DWORD)v7 == 6)
  {
    v7 = 6;
    if (!a2)
      return;
    goto LABEL_16;
  }
LABEL_13:
  if (!sub_10005549C()
    || (sub_100054530("MatchBufferRead sub-opcode incorrect: %d, %!", v7, a1),
        v11 = sub_1000544A0(0x54u),
        !os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)))
  {
    if (!a2)
      return;
    goto LABEL_16;
  }
  sub_1006CEEC0();
  if (a2)
LABEL_16:
    a2(a1, v7, v6);
}

void sub_100137934(uint64_t a1, void (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, int), uint64_t *a3)
{
  NSObject *v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;

  if (!(_DWORD)a1)
  {
    if (*((_BYTE *)a3 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c", 4491, "void _ACI_GetFWVersionsEventParser(OI_STATUS, GENERIC_HL_CB, OI_BYTE_STREAM *)");
    }
    else
    {
      v14 = *((unsigned __int16 *)a3 + 5);
      v15 = *((unsigned __int16 *)a3 + 6);
      if (v14 - (int)v15 > 1 && *((_BYTE *)a3 + 14) == 1)
      {
        v16 = *a3;
        v6 = *(_WORD *)(*a3 + v15);
        *((_WORD *)a3 + 6) = v15 + 2;
        if (v14 - (unsigned __int16)(v15 + 2) <= 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v7 = *(_WORD *)(v16 + (unsigned __int16)(v15 + 2));
        *((_WORD *)a3 + 6) = v15 + 4;
        if (v14 - (unsigned __int16)(v15 + 4) <= 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v8 = *(_WORD *)(v16 + (unsigned __int16)(v15 + 4));
        *((_WORD *)a3 + 6) = v15 + 6;
        if (v14 - (unsigned __int16)(v15 + 6) <= 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v9 = *(_WORD *)(v16 + (unsigned __int16)(v15 + 6));
        *((_WORD *)a3 + 6) = v15 + 8;
        if (v14 - (unsigned __int16)(v15 + 8) <= 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v10 = *(_WORD *)(v16 + (unsigned __int16)(v15 + 8));
        *((_WORD *)a3 + 6) = v15 + 10;
        if (v14 - (unsigned __int16)(v15 + 10) <= 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v11 = *(_WORD *)(v16 + (unsigned __int16)(v15 + 10));
        *((_WORD *)a3 + 6) = v15 + 12;
        if (v14 - (unsigned __int16)(v15 + 12) <= 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v17 = (unsigned __int8 *)(v16 + (unsigned __int16)(v15 + 12));
        v18 = *v17;
        v19 = v17[1];
        *((_WORD *)a3 + 6) = v15 + 14;
        if (v14 - (unsigned __int16)(v15 + 14) <= 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
        v12 = v18 | (v19 << 8);
        v13 = *(_WORD *)(v16 + (unsigned __int16)(v15 + 14));
        *((_WORD *)a3 + 6) = v15 + 16;
        if (a2)
          goto LABEL_6;
        return;
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/aci/aci_vsc.c");
  }
  if (sub_10005549C())
  {
    sub_100054530("status %!", a1);
    v5 = sub_1000544A0(0x54u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  if (a2)
  {
LABEL_6:
    LOWORD(v20) = v13;
    a2(a1, v6, v7, v8, v9, v10, v11, v12, v20);
  }
}

unsigned __int8 *sub_100137BEC(uint64_t a1, unsigned __int8 **a2, _WORD *a3)
{
  return sub_100137BF4(a1, a2, a3, 1);
}

unsigned __int8 *sub_100137BF4(uint64_t a1, unsigned __int8 **a2, _WORD *a3, int a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  BOOL v9;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  BOOL v21;
  NSObject *v22;
  uint64_t v24;

  v4 = *a2;
  if (!*a2)
    return v4;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(unsigned __int16 *)(v5 + 18);
  v8 = (unsigned __int8 *)(v6 + v7);
  if (*v4)
    v9 = v4 > v8;
  else
    v9 = 1;
  if (v9)
    return 0;
  v13 = *(unsigned __int8 **)(a1 + 8);
  v14 = sub_1001387F4(v13, *(unsigned __int16 *)(a1 + 16));
  if (v14 != 1)
  {
    if (*v13 != 68)
    {
      if (v4 >= v8)
        return 0;
      v24 = v6 + v7 - (_QWORD)v4;
      v8 = v4;
      while (*v8 - 48 <= 9)
      {
        ++v8;
        if (!--v24)
        {
          v8 = (unsigned __int8 *)(v6 + v7);
          break;
        }
      }
    }
    v19 = v8;
    if (v8 != v4)
      goto LABEL_37;
    return 0;
  }
  v15 = *(unsigned __int8 *)(v5 + 21);
  if (v4 < v8)
  {
    v16 = 0;
    v17 = (unsigned __int8 *)(v6 + v7);
    v18 = v6 + v7 - (_QWORD)v4;
    v19 = v4;
    while (1)
    {
      if (*v19 == 34)
      {
        v15 ^= 1u;
        *(_BYTE *)(v5 + 21) = v15;
      }
      if (!v15)
      {
        v20 = *v19;
        if (v20 > 0x2B)
        {
          if (v20 == 44)
          {
            if (!v16)
              goto LABEL_37;
          }
          else if (v20 == 59)
          {
            goto LABEL_37;
          }
        }
        else if (v20 == 40)
        {
          ++v16;
        }
        else if (v20 == 41)
        {
          v21 = __OFSUB__(v16--, 1);
          if (v16 < 0 != v21)
            goto LABEL_37;
        }
      }
      ++v19;
      if (!--v18)
        goto LABEL_32;
    }
  }
  v16 = 0;
  v17 = v4;
LABEL_32:
  v19 = v17;
  if (v15 | v16)
  {
    if (sub_10005549C())
    {
      sub_100054530("Unexpected end of parameter!\n");
      v22 = sub_1000544A0(0);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    v4 = 0;
    *a2 = v8;
    return v4;
  }
LABEL_37:
  if (a4)
    *v19 = 0;
  *a2 = v19 + 1;
  if (a3)
    *a3 = (_WORD)v19 - (_WORD)v4;
  return v4;
}

uint64_t sub_100137DE4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v16;
  unsigned int v18;
  unsigned __int16 v19;
  unsigned int v20;
  unsigned __int16 v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  int v26;
  unsigned int v27;
  void *v28;
  unsigned __int16 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  NSObject *v33;
  void *v34;
  NSObject *v35;
  unsigned int v36;
  __int16 v37;
  __int16 v38;
  unsigned __int8 *v39;
  uint8_t buf[32];
  uint64_t v41;

  v37 = 0;
  if (!a1)
    sub_100253460();
  if (*(_BYTE *)(a1 + 20) == 5)
    *(_DWORD *)(a1 + 18) = 0;
  v6 = sub_10013825C(a1, a2, a3, &v37);
  if (v6 == 0x7FFFFFFF)
    return 0;
  v36 = a3;
  while (1)
  {
    v8 = *(unsigned __int8 *)(a1 + 20);
    if (v8 != 3)
    {
      if (v8 == 1)
      {
        if (v6 != 65)
        {
          if (v6 == 84)
          {
            if (!*(_BYTE *)(a1 + 21))
              *(_BYTE *)(a1 + 20) = 3;
          }
          else if (!*(_BYTE *)(a1 + 21))
          {
            *(_DWORD *)(a1 + 18) = 0;
          }
        }
      }
      else if (!*(_BYTE *)(a1 + 20) && v6 == 65 && !*(_BYTE *)(a1 + 21))
      {
        *(_BYTE *)(a1 + 20) = 1;
      }
      goto LABEL_76;
    }
    if (v6 != 13 || *(_BYTE *)(a1 + 21))
      break;
    *(_BYTE *)(a1 + 20) = 5;
    v11 = *(unsigned __int16 *)(a1 + 18);
    if (!*(_WORD *)(a1 + 18))
      goto LABEL_75;
    v12 = 0;
    v13 = *(_QWORD *)(a1 + 8);
    v38 = 0;
    while (1)
    {
      v14 = *(unsigned __int8 *)(v13 + v12);
      v15 = v14 > 0x3F;
      v16 = (1 << v14) & 0xA800000000000000;
      if (!v15 && v16 != 0)
        break;
      if (v11 == ++v12)
      {
        LOWORD(v12) = v11;
        break;
      }
    }
    v18 = 0;
    v19 = 0;
    while (1)
    {
      memset(buf, 0, sizeof(buf));
      v41 = a1;
      *(_DWORD *)buf = 2;
      v20 = (unsigned __int16)v12 >= v19 ? (unsigned __int16)v12 - v19 : 0;
      if (sub_1001387F4((unsigned __int8 *)(v13 + v19), v20) == 1)
        break;
      v26 = *(unsigned __int8 *)(v13 + v19);
      if (v26 == 38)
      {
        v21 = 2;
        goto LABEL_57;
      }
      if (v26 != 59)
      {
        if (v26 == 83 && (v27 = v18 + 1, v18 + 1 < v11))
        {
          v21 = 1;
          do
          {
            if (*(unsigned __int8 *)(v13 + v27) - 48 > 9)
              break;
            v27 = v18 + ++v21;
          }
          while (v27 < v11);
        }
        else
        {
          v21 = 1;
        }
        goto LABEL_57;
      }
      ++v19;
LABEL_69:
      v18 = v19;
      if (v19 >= v11)
        goto LABEL_75;
    }
    v21 = 0;
    if (v18 < v11)
    {
      v22 = v18;
      do
      {
        v23 = *(unsigned __int8 *)(v13 + v22);
        v15 = v23 > 0x3F;
        v24 = (1 << v23) & 0xA800000000000000;
        if (!v15 && v24 != 0)
          break;
        v22 = v18 + ++v21;
      }
      while (v22 < v11);
    }
LABEL_57:
    v28 = sub_100052DC0(v21 + 1);
    *(_QWORD *)&buf[8] = v28;
    if (v28)
    {
      *(_WORD *)&buf[16] = v21;
      memmove(v28, (const void *)(v13 + v19), v21);
      *(_BYTE *)(*(_QWORD *)&buf[8] + v21) = 0;
      v29 = v21 + v19;
      v30 = (unsigned __int16)(v21 + v19);
      if (v30 < v11)
      {
        v31 = *(unsigned __int8 *)(v13 + (unsigned __int16)(v21 + v19));
        if (v31 == 61)
        {
          v32 = v30 + 1;
          if (v32 < v11 && *(_BYTE *)(v13 + v32) == 63)
          {
            *(_DWORD *)buf = 0;
            v29 += 2;
          }
          else
          {
LABEL_65:
            ++v29;
          }
        }
        else if (v31 == 63)
        {
          *(_DWORD *)buf = 1;
          goto LABEL_65;
        }
      }
      *(_QWORD *)&buf[24] = v13 + v29;
      v39 = *(unsigned __int8 **)&buf[24];
      while (sub_100137BF4((uint64_t)buf, &v39, &v38, 0))
        ;
      v19 = (_WORD)v39 - v13;
      (*(void (**)(uint8_t *))a1)(buf);
      sub_100053298(*(void **)&buf[8]);
      *(_WORD *)&buf[16] = 0;
      goto LABEL_69;
    }
    if (sub_10005549C())
    {
      sub_100054530("Parse command failed - %!, continuing", 106);
      v33 = sub_1000544A0(0);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        v34 = sub_100054494();
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v34;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 0xFFFF;
        _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
      }
    }
LABEL_75:
    *(_DWORD *)(a1 + 18) = 0;
    a3 = v36;
LABEL_76:
    v6 = sub_10013825C(a1, a2, a3, &v37);
    if (v6 == 0x7FFFFFFF)
      return 0;
  }
  v9 = *(unsigned __int16 *)(a1 + 18);
  if (v9 < *(unsigned __int16 *)(a1 + 16))
  {
    v10 = *(_QWORD *)(a1 + 8);
    *(_WORD *)(a1 + 18) = v9 + 1;
    *(_BYTE *)(v10 + v9) = v6;
    goto LABEL_76;
  }
  if ((sub_10005549C() & 1) != 0)
  {
    sub_100054530("Receive error - %!\n", 104);
    v35 = sub_1000544A0(0);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  *(_DWORD *)(a1 + 18) = 0;
  return 104;
}

uint64_t sub_10013825C(uint64_t a1, uint64_t a2, unsigned int a3, _WORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v4 = (unsigned __int16)*a4;
  if (v4 <= a3)
    v5 = a3;
  else
    v5 = (unsigned __int16)*a4;
  while (1)
  {
    if (v5 == v4)
      return 0x7FFFFFFFLL;
    if (*(_BYTE *)(a2 + v4) != 32)
      break;
    *a4 = ++v4;
    if (*(_BYTE *)(a1 + 21))
      return 32;
  }
  *a4 = v4 + 1;
  v6 = *(unsigned __int8 *)(a2 + (unsigned __int16)v4);
  if ((_DWORD)v6 != 34)
  {
    if (*(_BYTE *)(a1 + 21))
      return v6;
    goto LABEL_15;
  }
  v7 = *(unsigned __int8 *)(a1 + 21);
  if (*(_BYTE *)(a1 + 20) == 3)
  {
    v7 ^= 1u;
    *(_BYTE *)(a1 + 21) = v7;
  }
  if (!v7)
  {
LABEL_15:
    if ((v6 - 97) >= 0x1A)
      return v6;
    else
      return (v6 - 32);
  }
  return v6;
}

uint64_t sub_1001382F4(void (**a1)(void **), uint64_t a2, unsigned int a3)
{
  int v6;
  int v8;
  char i;
  unsigned int v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  void (*v14)(void **);
  void (*v15)(void **);
  void (*v16)(void **);
  void (*v17)(void **);
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  _BYTE *v28;
  NSObject *v29;
  void *v30;
  NSObject *v31;
  __int16 v32;
  void *buf[5];

  v32 = 0;
  if (*((_BYTE *)a1 + 20) == 5)
    *(_DWORD *)((char *)a1 + 18) = 0;
  v6 = sub_10013825C((uint64_t)a1, a2, a3, &v32);
  if (v6 != 0x7FFFFFFF)
  {
    v8 = v6;
    while (2)
    {
      for (i = *((_BYTE *)a1 + 20); i == 3; i = 0)
      {
        if (v8 == 13)
        {
          v10 = *((unsigned __int16 *)a1 + 9);
          if (!*((_BYTE *)a1 + 21))
          {
            if (*((_WORD *)a1 + 9))
            {
              *((_BYTE *)a1 + 20) = 4;
              goto LABEL_42;
            }
LABEL_35:
            *((_BYTE *)a1 + 20) = 2;
            goto LABEL_42;
          }
        }
        else
        {
          v10 = *((unsigned __int16 *)a1 + 9);
        }
        if (v10 < *((unsigned __int16 *)a1 + 8))
        {
          v15 = a1[1];
          *((_WORD *)a1 + 9) = v10 + 1;
          *((_BYTE *)v15 + v10) = v8;
          goto LABEL_42;
        }
        if (sub_10005549C())
        {
          sub_100054530("Receive overflow - discarding (buf length %d)\n", *((unsigned __int16 *)a1 + 9));
          v11 = sub_1000544A0(0);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            v12 = sub_100054494();
            LODWORD(buf[0]) = 136446466;
            *(void **)((char *)buf + 4) = v12;
            WORD2(buf[1]) = 1024;
            *(_DWORD *)((char *)&buf[1] + 6) = 0xFFFF;
            _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", (uint8_t *)buf, 0x12u);
          }
        }
        *(_DWORD *)((char *)a1 + 18) = 0;
      }
      if (i != 4)
      {
        if (i != 2)
        {
          if (i || v8 != 13 || *((_BYTE *)a1 + 21))
            goto LABEL_42;
          goto LABEL_35;
        }
        if (v8 != 13)
        {
          if (v8 != 10)
          {
            if (!*((_BYTE *)a1 + 21))
              *((_BYTE *)a1 + 20) = 0;
            goto LABEL_42;
          }
          if (!*((_BYTE *)a1 + 21))
LABEL_41:
            *((_BYTE *)a1 + 20) = 3;
        }
LABEL_42:
        v8 = sub_10013825C((uint64_t)a1, a2, a3, &v32);
        if (v8 != 0x7FFFFFFF)
          continue;
        return 0;
      }
      break;
    }
    if (v8 != 10)
    {
      if (v8 == 13)
      {
        v13 = *((unsigned __int16 *)a1 + 9);
        if (!*((_BYTE *)a1 + 21))
        {
          if (v13 < *((unsigned __int16 *)a1 + 8))
          {
            v14 = a1[1];
            *((_WORD *)a1 + 9) = v13 + 1;
            *((_BYTE *)v14 + v13) = 13;
            goto LABEL_42;
          }
LABEL_71:
          if (sub_10005549C())
          {
            sub_100054530("Receive error - %!\n", 104);
            v31 = sub_1000544A0(0);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
          *(_DWORD *)((char *)a1 + 18) = 0;
          return 104;
        }
      }
      else
      {
        LODWORD(v13) = *((unsigned __int16 *)a1 + 9);
      }
LABEL_39:
      if ((int)v13 + 2 <= *((unsigned __int16 *)a1 + 8))
      {
        v16 = a1[1];
        *((_WORD *)a1 + 9) = v13 + 1;
        *((_BYTE *)v16 + v13) = 13;
        v17 = a1[1];
        v18 = *((unsigned __int16 *)a1 + 9);
        *((_WORD *)a1 + 9) = v18 + 1;
        *((_BYTE *)v17 + v18) = v8;
        goto LABEL_41;
      }
      goto LABEL_71;
    }
    v13 = *((unsigned __int16 *)a1 + 9);
    if (*((_BYTE *)a1 + 21))
      goto LABEL_39;
    *((_BYTE *)a1 + 20) = 5;
    if ((_DWORD)v13)
    {
      v19 = 0;
      v20 = (unsigned __int8 *)a1[1];
      memset((char *)buf + 4, 0, 20);
      buf[4] = a1;
      LODWORD(buf[0]) = 3;
      while (1)
      {
        v21 = v20[v19];
        if (v21 == 58 || v21 == 61)
          break;
        if (v13 == ++v19)
        {
          LOWORD(v19) = v13;
          goto LABEL_52;
        }
      }
      if (sub_1001387F4(v20, (unsigned __int16)v19) != 1)
        goto LABEL_64;
LABEL_52:
      v22 = 0;
      v23 = v13 <= 1 ? 1 : v13;
      while (1)
      {
        v24 = v20[v22];
        if (v24 == 58 || v24 == 61)
          break;
        if (v23 == ++v22)
          goto LABEL_61;
      }
      LOWORD(v23) = v22;
LABEL_61:
      v25 = (_DWORD)v13 == (unsigned __int16)v23;
      LOWORD(v13) = v23;
      if (v25)
      {
        v26 = 134;
      }
      else
      {
LABEL_64:
        v27 = sub_100052DC0((unsigned __int16)v13 + 1);
        buf[1] = v27;
        if (v27)
        {
          v28 = v27;
          LOWORD(buf[2]) = v13;
          memmove(v27, v20, (unsigned __int16)v13);
          v28[(unsigned __int16)v13] = 0;
          buf[3] = &v20[(unsigned __int16)(v13 + 1)];
          (*a1)(buf);
          sub_100053298(buf[1]);
          goto LABEL_70;
        }
        v26 = 106;
      }
      if (sub_10005549C())
      {
        sub_100054530("Parse response failed - %!, continuing", v26);
        v29 = sub_1000544A0(0);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          v30 = sub_100054494();
          LODWORD(buf[0]) = 136446466;
          *(void **)((char *)buf + 4) = v30;
          WORD2(buf[1]) = 1024;
          *(_DWORD *)((char *)&buf[1] + 6) = 0xFFFF;
          _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", (uint8_t *)buf, 0x12u);
        }
      }
    }
LABEL_70:
    *(_DWORD *)((char *)a1 + 18) = 0;
    goto LABEL_42;
  }
  return 0;
}

void sub_1001387A0(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  if (!a1)
  {
    sub_100253460();
    if (a3)
      goto LABEL_3;
LABEL_5:
    sub_100253460();
    goto LABEL_3;
  }
  if (!a3)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_WORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 18) = 0;
}

uint64_t sub_1001387F4(unsigned __int8 *__s1, unsigned int a2)
{
  const void *v4;
  const void **i;
  size_t v6;
  const void *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;

  if (!qword_100981A20)
    return a2
        && ((v8 = *__s1 - 42, v9 = v8 > 0x34, v10 = (1 << v8) & 0x10000000000003, !v9)
          ? (v11 = v10 == 0)
          : (v11 = 1),
            !v11);
  v4 = *(const void **)qword_100981A20;
  if (!*(_QWORD *)qword_100981A20)
    return a2
        && ((v8 = *__s1 - 42, v9 = v8 > 0x34, v10 = (1 << v8) & 0x10000000000003, !v9)
          ? (v11 = v10 == 0)
          : (v11 = 1),
            !v11);
  for (i = (const void **)(qword_100981A20 + 16); ; i += 2)
  {
    v6 = *((unsigned __int8 *)i - 8);
    if (v6 <= a2 && !memcmp(__s1, v4, v6))
      break;
    v7 = *i;
    v4 = v7;
    if (!v7)
      return a2
          && ((v8 = *__s1 - 42, v9 = v8 > 0x34, v10 = (1 << v8) & 0x10000000000003, !v9)
            ? (v11 = v10 == 0)
            : (v11 = 1),
              !v11);
  }
  return *((unsigned int *)i - 1);
}

uint64_t sub_100138890(int a1, uint64_t *a2)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!dword_10099914C)
  {
    qword_100981A38 = (uint64_t)sub_100114588(8uLL);
    if (!qword_100981A38)
      return 106;
  }
  v7 = 4;
  v8 = 0;
  v9 = 0;
  v6 = &unk_10091B980;
  v8 = *a2;
  LOWORD(v9) = *((_WORD *)a2 + 4);
  if (a1)
  {
    byte_100981A28 = 1;
    word_100981A2A = 2;
    dword_100981A30 = a1;
  }
  else
  {
    LOWORD(v7) = 3;
  }
  v4 = sub_1002465CC((uint64_t)&v6, (int *)(qword_100981A38 + 4));
  if ((_DWORD)v4)
  {
    *(_DWORD *)(qword_100981A38 + 4) = 0;
    sub_100138988();
  }
  else
  {
    sub_1001891E8(0x80000);
    dword_10099914C |= 1u;
  }
  return v4;
}

void sub_100138988()
{
  if (!*(_DWORD *)qword_100981A38 && !*(_DWORD *)(qword_100981A38 + 4))
  {
    sub_100053298((void *)qword_100981A38);
    qword_100981A38 = 0;
    dword_10099914C = 0;
  }
}

uint64_t sub_1001389CC()
{
  if ((dword_10099914C & 1) == 0)
    return 103;
  sub_1002467B8(*(_DWORD *)(qword_100981A38 + 4));
  sub_10018929C(0x80000);
  *(_DWORD *)(qword_100981A38 + 4) = 0;
  dword_10099914C &= 2u;
  sub_100138988();
  return 0;
}

uint64_t sub_100138A30(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;

  if (dword_100999150)
  {
LABEL_2:
    v17 = qword_100981A40;
    while (1)
    {
      v17 = *(_QWORD *)v17;
      if (!v17)
        break;
      if (*(unsigned __int16 *)(v17 + 80) == a1)
        return 119;
    }
    v21 = a7;
    v22 = sub_100114588(0x58uLL);
    if (v22)
    {
      v23 = a8;
      v18 = 0;
      v24 = *(_QWORD *)qword_100981A40;
      *(_QWORD *)qword_100981A40 = v22;
      v22[40] = a1;
      *(_QWORD *)v22 = v24;
      *((_QWORD *)v22 + 1) = a2;
      *((_QWORD *)v22 + 2) = a3;
      *((_QWORD *)v22 + 3) = a4;
      *((_QWORD *)v22 + 4) = a5;
      *((_QWORD *)v22 + 5) = a6;
      *((_QWORD *)v22 + 6) = v21;
      *((_QWORD *)v22 + 7) = v23;
      *((_QWORD *)v22 + 8) = a9;
      *((_QWORD *)v22 + 9) = a10;
      return v18;
    }
    if (sub_10005549C())
    {
      sub_100054530("Out of memory space trying to allocate profile.");
      v25 = sub_1000544A0(2u);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 104;
  }
  v19 = a7;
  qword_100981A40 = (uint64_t)sub_100114588(0x10uLL);
  if (!qword_100981A40)
    return 104;
  v20 = sub_1001E3870(23, (uint64_t)sub_10013A278);
  if (!(_DWORD)v20)
  {
    v20 = sub_1001E3870(27, (uint64_t)sub_10013A520);
    if (!(_DWORD)v20)
    {
      dword_100999150 = 1;
      a7 = v19;
      goto LABEL_2;
    }
  }
  v18 = v20;
  if (qword_100981A40)
  {
    sub_100053298((void *)qword_100981A40);
    qword_100981A40 = 0;
  }
  return v18;
}

uint64_t sub_100138BBC(int a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD **v4;
  _QWORD *v5;

  if (!dword_100999150)
    return 408;
  v1 = (_QWORD *)qword_100981A40;
  do
  {
    v2 = v1;
    v1 = (_QWORD *)*v1;
    if (!v1)
      return 120;
  }
  while (*((unsigned __int16 *)v1 + 40) != a1);
  *v2 = *v1;
  sub_100053298(v1);
  if (*(_QWORD *)qword_100981A40)
    return 0;
  if (!dword_100999150)
    return 408;
  result = sub_1001E3A38(23);
  if (!(_DWORD)result)
  {
    result = sub_1001E3A38(27);
    if (!(_DWORD)result)
    {
      while (1)
      {
        v4 = (_QWORD **)qword_100981A40;
        if (!*(_QWORD *)(qword_100981A40 + 8))
          break;
        sub_100139250(*(_QWORD **)(qword_100981A40 + 8));
      }
      while (1)
      {
        v5 = *v4;
        if (!*v4)
          break;
        *v4 = (_QWORD *)*v5;
        sub_100053298(v5);
        v4 = (_QWORD **)qword_100981A40;
      }
      sub_100053298(v4);
      result = 0;
      qword_100981A40 = 0;
      dword_100999150 = 0;
    }
  }
  return result;
}

uint64_t sub_100138CA0(uint64_t a1, int a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  NSObject *v11;
  _WORD *v12;
  int v13;
  const void *v15[2];
  void *ptr;

  ptr = 0;
  if (!dword_100999150)
    return 408;
  v15[0] = 0;
  v7 = qword_100981A40;
  do
  {
    v7 = *(_QWORD *)v7;
    if (!v7)
      return 120;
  }
  while (*(unsigned __int16 *)(v7 + 80) != a2);
  v8 = qword_100981A40 + 8;
  while (1)
  {
    v8 = *(_QWORD *)v8;
    if (!v8)
      break;
    if (*(_DWORD *)a1 == *(_DWORD *)(v8 + 8) && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(v8 + 12))
    {
      ++*(_WORD *)(v8 + 14);
      *(_WORD *)(v7 + 82) = *(_WORD *)(v8 + 24);
      v15[1] = (const void *)(v7 + 80);
      LOWORD(v15[0]) = 2;
      sub_10004AE90((uint64_t)sub_100138E5C, v15, 0);
      return 0;
    }
  }
  v10 = sub_100138F64(&ptr);
  if (!(_DWORD)v10)
  {
    v10 = sub_1001DD1A8((uint64_t)sub_100138FFC, (uint64_t)sub_100139128, (uint64_t)sub_1001391B4, 0x17u, a1, a3, (_WORD *)ptr + 12, (uint64_t)&unk_100739578);
    if ((_DWORD)v10)
    {
      if (sub_10005549C())
      {
        sub_100054530("L2CAP connection failed %!", v10, v15[0]);
        v11 = sub_1000544A0(2u);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      sub_100139250(ptr);
    }
    else
    {
      v12 = ptr;
      *(_WORD *)(v7 + 82) = *((_WORD *)ptr + 12);
      v13 = *(_DWORD *)a1;
      v12[6] = *(_WORD *)(a1 + 4);
      *((_DWORD *)v12 + 2) = v13;
      v12[7] = 1;
      *((_BYTE *)v12 + 17) = 0;
      *((_BYTE *)v12 + 18) = a4;
    }
  }
  return v10;
}

void sub_100138E5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;

  v7 = 0;
  v1 = **(unsigned __int16 **)(a1 + 8);
  v2 = qword_100981A40;
  while (1)
  {
    v2 = *(_QWORD *)v2;
    if (!v2)
      break;
    if (*(unsigned __int16 *)(v2 + 80) == (_DWORD)v1)
    {
      v3 = sub_10013A0D8(&v7, *(unsigned __int16 *)(v2 + 82));
      if ((_DWORD)v3)
      {
        v4 = v3;
        if (sub_10005549C())
        {
          sub_100054530("%! (%d)", v4, *(unsigned __int16 *)(v2 + 82));
          v5 = sub_1000544A0(2u);
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
      }
      else
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v2 + 16))(v7 + 8, *(unsigned __int16 *)(v7 + 28), *(unsigned __int16 *)(v7 + 26), 0);
      }
      return;
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("%! (%d)", 120, v1);
    v6 = sub_1000544A0(2u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

uint64_t sub_100138F64(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  NSObject *v6;

  if (!a1)
    sub_100253460();
  v2 = sub_100114588(0x88uLL);
  if (v2)
  {
    v3 = v2;
    result = 0;
    v5 = qword_100981A40;
    *v3 = *(_QWORD *)(qword_100981A40 + 8);
    *(_QWORD *)(v5 + 8) = v3;
    *a1 = v3;
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("Out of memory trying to allocate new AVCTP connetion record");
      v6 = sub_1000544A0(2u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 104;
  }
  return result;
}

void sub_100138FFC(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _WORD *v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  __int16 v13;
  void *ptr;

  ptr = 0;
  if (!sub_10013A0D8((uint64_t *)&ptr, a1))
  {
    v7 = ptr;
    v12 = *((_DWORD *)ptr + 2);
    v13 = *((_WORD *)ptr + 6);
    if ((_DWORD)a4)
    {
      if (sub_10005549C())
      {
        sub_100054530("L2CAP Connection failed: %!", a4);
        v8 = sub_1000544A0(2u);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      v9 = ptr;
      if (*((_WORD *)ptr + 40))
      {
        sub_1001DEB7C(*((unsigned __int16 *)ptr + 40), 436);
        v9 = ptr;
      }
      sub_100139250(v9);
    }
    else
    {
      *((_WORD *)ptr + 13) = a3;
      v7[14] = a2;
      *((_BYTE *)v7 + 16) = 1;
      if (!*((_BYTE *)v7 + 17) && *((_BYTE *)v7 + 18))
        sub_1001392F4((uint64_t)&v12, 4366);
    }
    v10 = *(uint64_t **)qword_100981A40;
    if (*(_QWORD *)qword_100981A40)
    {
      do
      {
        v11 = (uint64_t *)*v10;
        *((_WORD *)v10 + 41) = 0;
        ((void (*)(int *, uint64_t, uint64_t, uint64_t))v10[2])(&v12, a2, a3, a4);
        v10 = v11;
      }
      while (v11);
    }
  }
}

void sub_100139128(int a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t **v4;
  uint64_t *v5;
  int v6;
  __int16 v7;
  void *ptr;

  ptr = 0;
  if (!sub_10013A0D8((uint64_t *)&ptr, a1))
  {
    v3 = ptr;
    *((_WORD *)ptr + 14) = 0;
    v3[6] = 0;
    if (!*((_WORD *)v3 + 40))
    {
      v6 = v3[2];
      v7 = *((_WORD *)v3 + 6);
      sub_100139250(v3);
      v4 = *(uint64_t ***)qword_100981A40;
      if (*(_QWORD *)qword_100981A40)
      {
        do
        {
          v5 = *v4;
          ((void (*)(int *, uint64_t))v4[3])(&v6, a2);
          v4 = (uint64_t **)v5;
        }
        while (v5);
      }
    }
  }
}

void sub_1001391B4(int a1, unsigned __int8 *a2, unsigned int a3)
{
  NSObject *v5;
  uint64_t v6;

  v6 = 0;
  if (a3)
  {
    if (!sub_10013A0D8(&v6, a1))
      sub_10013A710((unsigned __int16 *)(v6 + 24), v6 + 8, a2, a3);
  }
  else if (sub_10005549C())
  {
    sub_100054530("Zero length packet received");
    v5 = sub_1000544A0(2u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

void sub_100139250(_QWORD *ptr)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  NSObject *v5;

  v2 = (_QWORD *)(qword_100981A40 + 8);
  while (1)
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    if (!v2)
      break;
    if (v2 == ptr)
    {
      *v3 = *ptr;
      v4 = (void *)ptr[4];
      if (v4)
      {
        sub_100053298(v4);
        ptr[4] = 0;
      }
      sub_100053298(ptr);
      return;
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("Failed to free AVCTP connection");
    v5 = sub_1000544A0(2u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

uint64_t sub_1001392F4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  NSObject *v6;

  if (!dword_100999150)
    return 408;
  v2 = qword_100981A40;
  do
  {
    v2 = *(_QWORD *)v2;
    if (!v2)
      return 120;
  }
  while (*(unsigned __int16 *)(v2 + 80) != a2);
  v3 = qword_100981A40 + 8;
  while (1)
  {
    v3 = *(_QWORD *)v3;
    if (!v3)
      break;
    if (*(_DWORD *)a1 == *(_DWORD *)(v3 + 8) && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(v3 + 12))
    {
      if (*(_WORD *)(v3 + 80))
        return 133;
      break;
    }
  }
  v5 = sub_1001DD1A8((uint64_t)sub_100139414, (uint64_t)sub_10013953C, (uint64_t)sub_100139610, 0x1Bu, a1, (uint64_t)&unk_10091BA10, (_WORD *)(v3 + 80), (uint64_t)&unk_100739578);
  if ((_DWORD)v5)
  {
    if (sub_10005549C())
    {
      sub_100054530("L2CAP connection failed %!", v5);
      v6 = sub_1000544A0(2u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  return v5;
}

void sub_100139414(int a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  _WORD *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  int v13;
  __int16 v14;
  void *ptr;

  ptr = 0;
  if (!sub_10013A0D8((uint64_t *)&ptr, a1))
  {
    v7 = ptr;
    v13 = *((_DWORD *)ptr + 2);
    v14 = *((_WORD *)ptr + 6);
    if ((_DWORD)a4)
    {
      *((_WORD *)ptr + 40) = 0;
    }
    else
    {
      *((_WORD *)ptr + 41) = a3;
      v7[42] = a2;
      *((_BYTE *)v7 + 128) = 1;
    }
    v8 = *(uint64_t ***)qword_100981A40;
    if (*(_QWORD *)qword_100981A40)
    {
      v9 = (unsigned __int16)(a3 - 3);
      do
      {
        v10 = *v8;
        ((void (*)(int *, uint64_t, uint64_t, uint64_t))v8[6])(&v13, a2, v9, a4);
        v8 = (uint64_t **)v10;
      }
      while (v10);
      v7 = ptr;
    }
    if (*((_BYTE *)v7 + 16) && !v7[12])
    {
      if (v7[40])
      {
        sub_1001DEB7C((unsigned __int16)v7[40], 436);
        v7 = ptr;
      }
      v13 = *((_DWORD *)v7 + 2);
      v14 = v7[6];
      sub_100139250(v7);
      v11 = *(uint64_t ***)qword_100981A40;
      if (*(_QWORD *)qword_100981A40)
      {
        do
        {
          v12 = *v11;
          ((void (*)(int *, uint64_t))v11[3])(&v13, a4);
          v11 = (uint64_t **)v12;
        }
        while (v12);
      }
    }
  }
}

void sub_10013953C(int a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  __int16 v9;
  void *ptr;

  ptr = 0;
  v9 = 0;
  v8 = 0;
  if (!sub_10013A0D8((uint64_t *)&ptr, a1))
  {
    v3 = ptr;
    *((_WORD *)ptr + 42) = 0;
    v3[20] = 0;
    v4 = *(uint64_t ***)qword_100981A40;
    if (*(_QWORD *)qword_100981A40)
    {
      do
      {
        v5 = *v4;
        ((void (*)(int *, uint64_t))v4[7])(&v8, a2);
        v4 = (uint64_t **)v5;
      }
      while (v5);
      v3 = ptr;
    }
    if (*((_BYTE *)v3 + 16))
    {
      if (!*((_WORD *)v3 + 12))
      {
        v8 = v3[2];
        v9 = *((_WORD *)v3 + 6);
        sub_100139250(v3);
        v6 = *(uint64_t ***)qword_100981A40;
        if (*(_QWORD *)qword_100981A40)
        {
          do
          {
            v7 = *v6;
            ((void (*)(int *, uint64_t))v6[3])(&v8, a2);
            v6 = (uint64_t **)v7;
          }
          while (v7);
        }
      }
    }
  }
}

void sub_100139610(int a1, unsigned __int8 *a2, unsigned int a3)
{
  NSObject *v5;
  uint64_t v6;

  v6 = 0;
  if (a3)
  {
    if (!sub_10013A0D8(&v6, a1))
      sub_10013A710((unsigned __int16 *)(v6 + 80), v6 + 8, a2, a3);
  }
  else if (sub_10005549C())
  {
    sub_100054530("Zero length packet received");
    v5 = sub_1000544A0(2u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

uint64_t sub_1001396AC(uint64_t a1, char a2, char a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;

  if (!dword_100999150)
    return 408;
  v4 = qword_100981A40 + 8;
  while (1)
  {
    v4 = *(_QWORD *)v4;
    if (!v4)
      break;
    if (*(_DWORD *)a1 == *(_DWORD *)(v4 + 8) && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(v4 + 12))
    {
      *(_BYTE *)(v4 + 18) = a3;
      v6 = sub_1001DDCAC((uint64_t)sub_100138FFC, (uint64_t)sub_100139128, (uint64_t)sub_1001391B4, *(unsigned __int16 *)(v4 + 24), 0, a2, (uint64_t)&unk_100739578);
      v7 = v6;
      if (!(_DWORD)v6 && (a2 & 1) != 0)
        return 0;
      if ((_DWORD)v6)
      {
        if (sub_10005549C())
        {
          sub_100054530("OI_L2CAP_Accept failed %!", v7);
          v9 = sub_1000544A0(2u);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
      }
      sub_100139250((_QWORD *)v4);
      return v7;
    }
  }
  if (sub_10005549C())
  {
    v7 = 120;
    sub_100054530("Could not find connection %!", 120);
    v8 = sub_1000544A0(2u);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      return v7;
    sub_1006CE7A4();
  }
  return 120;
}

uint64_t sub_10013980C(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t result;

  if (!dword_100999150)
    return 408;
  v1 = qword_100981A40 + 8;
  do
  {
    v1 = *(_QWORD *)v1;
    if (!v1)
      return 120;
  }
  while (*(_DWORD *)a1 != *(_DWORD *)(v1 + 8) || *(unsigned __int16 *)(a1 + 4) != *(unsigned __int16 *)(v1 + 12));
  v3 = *(unsigned __int16 *)(v1 + 14);
  if (!*(_WORD *)(v1 + 14))
    return 120;
  if (v3 != 1)
  {
LABEL_15:
    result = 0;
    *(_WORD *)(v1 + 14) = v3 - 1;
    return result;
  }
  if (!*(_WORD *)(v1 + 80) || (result = sub_1001DEB7C(*(unsigned __int16 *)(v1 + 80), 436), !(_DWORD)result))
  {
    result = sub_1001DEB7C(*(unsigned __int16 *)(v1 + 24), 436);
    if (!(_DWORD)result)
    {
      LOWORD(v3) = *(_WORD *)(v1 + 14);
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t sub_1001398B8(uint64_t a1, int a2, unsigned int a3, int a4, char *a5, signed int a6)
{
  char v6;
  uint64_t v7;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  unsigned int v16;
  int v17;
  __int16 v18;
  char *v19;
  unsigned __int8 *v20;
  char *v21;
  unsigned __int8 *v22;
  char v23;
  int v24;
  __int16 v25;
  unsigned __int16 v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;

  if (!dword_100999150)
    return 408;
  v6 = a3;
  v7 = 101;
  if (a3 <= 0xF && (a4 - 3) >= 0xFFFFFFFE)
  {
    v11 = a2;
    v12 = qword_100981A40;
    do
    {
      v12 = *(_QWORD *)v12;
      if (!v12)
        return 121;
    }
    while (*(unsigned __int16 *)(v12 + 80) != a2);
    v13 = qword_100981A40 + 8;
    do
    {
      v13 = *(_QWORD *)v13;
      if (!v13)
        return 120;
    }
    while (*(_DWORD *)a1 != *(_DWORD *)(v13 + 8) || *(unsigned __int16 *)(a1 + 4) != *(unsigned __int16 *)(v13 + 12));
    if (*(_BYTE *)(v13 + 16))
    {
      if (*(_QWORD *)(v13 + 56))
        return 410;
      v15 = a6 + 3;
      v16 = *(unsigned __int16 *)(v13 + 26);
      if (a6 + 3 <= v16)
        v17 = 3;
      else
        v17 = 4;
      v18 = v16 - v17;
      if ((int)(v16 - v17) >= a6)
        v18 = a6;
      *(_WORD *)(v13 + 66) = v18;
      v19 = sub_100253D54(2u);
      if (v19)
      {
        v20 = (unsigned __int8 *)v19;
        v21 = (char *)sub_100052DC0((unsigned __int16)v17);
        if (v21)
        {
          if (v15 <= v16)
          {
            *v21 = (16 * v6) | (2 * (a4 != 1));
            v29 = 2;
            v30 = 1;
            v22 = v20;
          }
          else
          {
            v22 = v20;
            v23 = 0;
            if (a6)
            {
              LOWORD(v24) = a6;
              do
              {
                if (v23)
                  v25 = -1;
                else
                  v25 = -4;
                v26 = *(_WORD *)(v13 + 26) + v25;
                v27 = (unsigned __int16)v24 >= v26;
                v24 = (unsigned __int16)v24 - v26;
                v28 = v24 != 0 && v27;
                if (!v27)
                  LOWORD(v24) = 0;
                ++v23;
              }
              while (v28);
            }
            *v21 = (16 * v6) | (2 * (a4 != 1)) | 4;
            v21[1] = v23;
            v29 = 3;
            v30 = 2;
          }
          v21[v29] = v11;
          v21[v30] = HIBYTE(v11);
          v31 = v21;
          v7 = sub_10005336C(v22, v21, (unsigned __int16)v17, 1u);
          if (!(_DWORD)v7)
          {
            v7 = sub_10005336C(v22, a5, *(unsigned __int16 *)(v13 + 66), 2u);
            if (!(_DWORD)v7)
            {
              v7 = sub_1001DBC18((uint64_t)sub_100139B24, *(unsigned __int16 *)(v13 + 24), 0, (uint64_t)v22, 0);
              if (!(_DWORD)v7)
              {
                *(_WORD *)(v13 + 70) = v11;
                *(_BYTE *)(v13 + 68) = v6;
                *(_BYTE *)(v13 + 69) = a4;
                *(_QWORD *)(v13 + 56) = a5;
                *(_WORD *)(v13 + 64) = a6;
                return v7;
              }
            }
          }
          sub_100053298(v31);
        }
        else
        {
          v7 = 106;
          v22 = v20;
        }
        sub_100053298(v22);
      }
      else
      {
        return 106;
      }
    }
    else
    {
      return 122;
    }
  }
  return v7;
}

void sub_100139B24(int a1, void *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t);
  uint64_t v9;

  v9 = 0;
  sub_100254090(a2);
  if (sub_10013A0D8(&v9, a1))
  {
    if (sub_10005549C())
    {
      sub_100054530("Could not find connection\n");
      v6 = sub_1000544A0(2u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  else
  {
    v7 = qword_100981A40;
    while (1)
    {
      v7 = *(_QWORD *)v7;
      if (!v7)
        break;
      if (*(unsigned __int16 *)(v7 + 80) == *(unsigned __int16 *)(v9 + 70))
      {
        v8 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t))(v7 + 40);
        goto LABEL_10;
      }
    }
    v8 = 0;
LABEL_10:
    sub_10013AFF4((unsigned __int16 *)(v9 + 24), v8, v9 + 8, a4);
  }
}

uint64_t sub_100139BE8(uint64_t a1, int a2, unsigned int a3, int a4, char *a5, signed int a6)
{
  char v6;
  uint64_t v7;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v16;
  unsigned int v17;
  int v18;
  __int16 v19;
  char *v20;
  unsigned __int8 *v21;
  char *v22;
  unsigned __int8 *v23;
  char v24;
  int v25;
  __int16 v26;
  unsigned __int16 v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  if (!dword_100999150)
    return 408;
  v6 = a3;
  v7 = 101;
  if (a3 <= 0xF && (a4 - 3) >= 0xFFFFFFFE)
  {
    v11 = a2;
    v12 = qword_100981A40;
    do
    {
      v12 = *(_QWORD *)v12;
      if (!v12)
        return 121;
    }
    while (*(unsigned __int16 *)(v12 + 80) != a2);
    v13 = qword_100981A40 + 8;
    do
    {
      v13 = *(_QWORD *)v13;
      if (!v13)
        return 120;
    }
    while (*(_DWORD *)a1 != *(_DWORD *)(v13 + 8) || *(unsigned __int16 *)(a1 + 4) != *(unsigned __int16 *)(v13 + 12));
    if (!*(_WORD *)(v13 + 80))
      return 121;
    if (*(_QWORD *)(v13 + 112))
      return 410;
    v16 = a6 + 3;
    v17 = *(unsigned __int16 *)(v13 + 82);
    if (a6 + 3 <= v17)
      v18 = 3;
    else
      v18 = 4;
    v19 = v17 - v18;
    if ((int)(v17 - v18) >= a6)
      v19 = a6;
    *(_WORD *)(v13 + 122) = v19;
    v20 = sub_100253D54(2u);
    if (v20)
    {
      v21 = (unsigned __int8 *)v20;
      v22 = (char *)sub_100052DC0((unsigned __int16)v18);
      if (v22)
      {
        if (v16 <= v17)
        {
          *v22 = (16 * v6) | (2 * (a4 != 1));
          v30 = 2;
          v31 = 1;
          v23 = v21;
        }
        else
        {
          v23 = v21;
          v24 = 0;
          if (a6)
          {
            LOWORD(v25) = a6;
            do
            {
              if (v24)
                v26 = -1;
              else
                v26 = -4;
              v27 = *(_WORD *)(v13 + 82) + v26;
              v28 = (unsigned __int16)v25 >= v27;
              v25 = (unsigned __int16)v25 - v27;
              v29 = v25 != 0 && v28;
              if (!v28)
                LOWORD(v25) = 0;
              ++v24;
            }
            while (v29);
          }
          *v22 = (16 * v6) | (2 * (a4 != 1)) | 4;
          v22[1] = v24;
          v30 = 3;
          v31 = 2;
        }
        v22[v30] = v11;
        v22[v31] = HIBYTE(v11);
        v32 = v22;
        v7 = sub_10005336C(v23, v22, (unsigned __int16)v18, 1u);
        if (!(_DWORD)v7)
        {
          v7 = sub_10005336C(v23, a5, *(unsigned __int16 *)(v13 + 122), 1u);
          if (!(_DWORD)v7)
          {
            v7 = sub_1001DBC18((uint64_t)sub_100139E4C, *(unsigned __int16 *)(v13 + 80), 0, (uint64_t)v23, 0);
            if (!(_DWORD)v7)
            {
              *(_WORD *)(v13 + 126) = v11;
              *(_BYTE *)(v13 + 124) = v6;
              *(_BYTE *)(v13 + 125) = a4;
              *(_QWORD *)(v13 + 112) = a5;
              *(_WORD *)(v13 + 120) = a6;
              return v7;
            }
          }
        }
        sub_100053298(v32);
      }
      else
      {
        v7 = 106;
        v23 = v21;
      }
      sub_100053298(v23);
    }
    else
    {
      return 106;
    }
  }
  return v7;
}

void sub_100139E4C(int a1, void *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = 0;
  sub_100254090(a2);
  if (sub_10013A0D8(&v9, a1))
  {
    if (sub_10005549C())
    {
      sub_100054530("Could not find connection\n");
      v6 = sub_1000544A0(2u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  else
  {
    v7 = qword_100981A40;
    while (1)
    {
      v7 = *(_QWORD *)v7;
      if (!v7)
        break;
      if (*(unsigned __int16 *)(v7 + 80) == *(unsigned __int16 *)(v9 + 126))
      {
        v8 = *(_QWORD *)(v7 + 72);
        goto LABEL_10;
      }
    }
    v8 = 0;
LABEL_10:
    sub_10013AFF4(v9 + 80, v8, v9 + 8, a4);
  }
}

uint64_t sub_100139F10(uint64_t a1, _OWORD *a2, uint64_t a3, __int16 *a4)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  _OWORD v16[2];

  v6 = a2[1];
  v16[0] = *a2;
  v16[1] = v6;
  v7 = sub_1001DC9B8(23, (uint64_t)v16, a1, (uint64_t)sub_100138FFC, (uint64_t)sub_100139128, (uint64_t)sub_1001391B4, a4, (uint64_t)&unk_100739578);
  if ((_DWORD)v7)
  {
    v8 = v7;
    if (sub_10005549C())
    {
      sub_100054530("OI_AVCTP_createAVRCPChannels error creating A2DP signaling");
      v9 = sub_1000544A0(2u);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  else
  {
    *(_QWORD *)&v16[0] = 0;
    v10 = qword_100981A40;
    while (1)
    {
      v10 = *(_QWORD *)v10;
      if (!v10)
        break;
      if (*(_WORD *)(v10 + 80) == 4366)
      {
        if (sub_100138F64(v16))
          return 2902;
        v8 = 0;
        v12 = *(_QWORD *)&v16[0];
        v13 = *(_WORD *)(a1 + 4);
        *(_DWORD *)(*(_QWORD *)&v16[0] + 8) = *(_DWORD *)a1;
        *(_WORD *)(v12 + 12) = v13;
        v14 = *a4;
        *(_WORD *)(v12 + 24) = *a4;
        *(_WORD *)(v12 + 14) = 1;
        *(_QWORD *)(v12 + 56) = 0;
        *(_DWORD *)(v12 + 64) = 0;
        *(_BYTE *)(v12 + 72) = 0;
        *(_WORD *)(v12 + 16) = 1;
        *(_WORD *)(v10 + 82) = v14;
        return v8;
      }
    }
    if (sub_10005549C())
    {
      sub_100054530("%! (%d)", 120, 4366);
      v11 = sub_1000544A0(2u);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 114;
  }
  return v8;
}

uint64_t sub_10013A090(int a1, __int16 a2, __int16 a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  result = sub_10013A0D8(&v7, a1);
  if (!(_DWORD)result)
  {
    v6 = v7;
    *(_WORD *)(v7 + 26) = a3;
    *(_WORD *)(v6 + 28) = a2;
  }
  return result;
}

uint64_t sub_10013A0D8(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t result;
  NSObject *v6;

  if (!a1)
    sub_100253460();
  if (qword_100981A40)
  {
    v4 = qword_100981A40 + 8;
    while (1)
    {
      v4 = *(_QWORD *)v4;
      if (!v4)
        break;
      if (*(unsigned __int16 *)(v4 + 24) == a2 || *(unsigned __int16 *)(v4 + 80) == a2)
      {
        result = 0;
        *a1 = v4;
        return result;
      }
    }
  }
  else if (sub_10005549C())
  {
    sub_100054530("Received AVCTP message after profile has been unregistered");
    v6 = sub_1000544A0(2u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  return 120;
}

uint64_t sub_10013A180(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  NSObject *v6;
  void *ptr;
  uint64_t v9;

  ptr = 0;
  v9 = 0;
  v5 = sub_10019AEA4(a1);
  if (!v5)
  {
    if (sub_10005549C())
    {
      sub_100054530("OI_AVCTP_cleanFastConnectAVRCP NULL Handle");
      v6 = sub_1000544A0(2u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  if (!sub_10013A0D8((uint64_t *)&ptr, a2) && ptr)
    sub_100139250(ptr);
  if (a3)
  {
    if (!sub_1001DB044(a3, &v9))
    {
      if (v9)
      {
        sub_1001DC658(v9);
        if (v5)
          sub_100186150(v5);
      }
    }
  }
  if (a2)
  {
    if (!sub_1001DB044(a2, &v9))
    {
      if (v9)
      {
        sub_1001DC658(v9);
        if (v5)
          sub_100186150(v5);
      }
    }
  }
  return 0;
}

uint64_t sub_10013A278(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  int v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int16 v15;
  void (*v16)(int, uint64_t, uint64_t, uint64_t);
  void (*v17)(int, uint64_t);
  void (*v18)(int, unsigned __int8 *, unsigned int);
  void *v19;
  unsigned int v20;
  int v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = 0;
  v5 = qword_100981A40 + 8;
  do
  {
    v5 = *(_QWORD *)v5;
    if (!v5)
    {
      LOBYTE(v10) = 0;
      goto LABEL_23;
    }
  }
  while (*(_DWORD *)a2 != *(_DWORD *)(v5 + 8) || *(unsigned __int16 *)(a2 + 4) != *(unsigned __int16 *)(v5 + 12));
  v26 = v5;
  v7 = *(unsigned __int8 *)(v5 + 16);
  v8 = sub_10005549C();
  if (v7)
  {
    if (v8)
    {
      sub_100054530("AVCTP connection already in progress with %:", a2);
      v9 = sub_1000544A0(2u);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    LOBYTE(v5) = 0;
    LOBYTE(v10) = 1;
  }
  else
  {
    if (v8)
    {
      sub_100054530("Rejecting previous pending attempt for incoming AVCTP connection");
      v11 = sub_1000544A0(2u);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    if (*(_BYTE *)(v5 + 17))
      sub_1001DDCAC(0, 0, 0, *(unsigned __int16 *)(v5 + 24), 0, 0, 0);
    else
      sub_1001DEB7C(*(unsigned __int16 *)(v5 + 24), 436);
    sub_100139250((_QWORD *)v5);
    v10 = *(_QWORD *)qword_100981A40;
    if (*(_QWORD *)qword_100981A40)
    {
      do
      {
        v12 = *(_QWORD *)v10;
        *(_WORD *)(v10 + 82) = 0;
        v10 = v12;
      }
      while (v12);
    }
    LOBYTE(v5) = 1;
  }
LABEL_23:
  if (!*(_QWORD *)qword_100981A40)
  {
    if (sub_10005549C())
    {
      sub_100054530("No AVCTP profiles registered");
      v22 = sub_1000544A0(2u);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    goto LABEL_31;
  }
  if ((v10 & 1) != 0 || (result = sub_100138F64(&v26), (_DWORD)result))
  {
LABEL_31:
    if (sub_10005549C())
    {
      sub_100054530("Rejecting incoming AVCTP connection request");
      v23 = sub_1000544A0(2u);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v20 = a3;
    v21 = 0;
    v19 = 0;
    return sub_1001DDCAC((uint64_t)v16, (uint64_t)v17, (uint64_t)v18, v20, 0, v21, (uint64_t)v19);
  }
  v14 = v26;
  v15 = *(_WORD *)(a2 + 4);
  *(_DWORD *)(v26 + 8) = *(_DWORD *)a2;
  *(_WORD *)(v14 + 12) = v15;
  *(_WORD *)(v14 + 24) = a3;
  *(_DWORD *)(v14 + 14) = 16777217;
  *(_QWORD *)(v14 + 56) = 0;
  *(_DWORD *)(v14 + 64) = 0;
  *(_BYTE *)(v14 + 72) = 0;
  if ((v5 & 1) != 0)
  {
    v16 = sub_100138FFC;
    v17 = sub_100139128;
    v18 = sub_1001391B4;
    v19 = &unk_100739578;
    v20 = a3;
    v21 = 1;
    return sub_1001DDCAC((uint64_t)v16, (uint64_t)v17, (uint64_t)v18, v20, 0, v21, (uint64_t)v19);
  }
  v24 = *(uint64_t ***)qword_100981A40;
  if (*(_QWORD *)qword_100981A40)
  {
    do
    {
      v25 = *v24;
      result = ((uint64_t (*)(uint64_t))v24[1])(a2);
      v24 = (uint64_t **)v25;
    }
    while (v25);
  }
  return result;
}

void sub_10013A520(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  _BOOL4 v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;

  v4 = qword_100981A40 + 8;
  while (1)
  {
    v4 = *(_QWORD *)v4;
    if (!v4)
      break;
    if (*(_DWORD *)a2 == *(_DWORD *)(v4 + 8) && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(v4 + 12))
    {
      v6 = *(_BYTE *)(v4 + 18) != 0;
      goto LABEL_13;
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("Avctp Signalling channel does not exist, reject connection");
    v7 = sub_1000544A0(2u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  v6 = 0;
LABEL_13:
  if (*(_QWORD *)qword_100981A40)
  {
    if (v6)
    {
      v8 = sub_1001DDCAC((uint64_t)sub_100139414, (uint64_t)sub_10013953C, (uint64_t)sub_100139610, a3, (uint64_t)&unk_10091BA10, 1, (uint64_t)&unk_100739578);
      if ((_DWORD)v8)
      {
        v9 = v8;
        if (sub_10005549C())
        {
          sub_100054530("Browsing rejected due to error %!", v9);
          v10 = sub_1000544A0(2u);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            sub_1006D1FB0(v10);
        }
      }
      else
      {
        *(_WORD *)(v4 + 80) = a3;
        *(_BYTE *)(v4 + 128) = 1;
      }
      return;
    }
  }
  else if (sub_10005549C())
  {
    sub_100054530("No AVCTP profiles registered");
    v11 = sub_1000544A0(2u);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  if (sub_10005549C())
  {
    sub_100054530("Rejecting incoming AVCTP connection request for browsing channel");
    v12 = sub_1000544A0(2u);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  sub_1001DDCAC(0, 0, 0, a3, 0, 0, 0);
}

void sub_10013A710(unsigned __int16 *a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  char *v13;
  unsigned __int8 v14;
  __int16 v15;
  NSObject *v16;

  if (!a3 || !a4)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avctp/avctp.c");
  v6 = (*a3 >> 2) & 3;
  v7 = 1;
  if ((_DWORD)v6)
  {
    if ((_DWORD)v6 != 1)
LABEL_12:
      __asm { BR              X11 }
    if (a4 < 2)
    {
      if (*((_BYTE *)a1 + 23))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avctp/avctp.c", 337, "void L2CAPRecvCB(AVCTP_DATA_CHANNEL *, OI_BD_ADDR *, uint8_t *, uint16_t)");
        goto LABEL_15;
      }
    }
    else
    {
      v8 = a3[1];
      *((_BYTE *)a1 + 23) = v8;
      if (v8)
      {
        v7 = 2;
        goto LABEL_8;
      }
    }
    if (!sub_10005549C())
      return;
    sub_100054530("Invalid number of expected packets (0)");
    v12 = sub_1000544A0(2u);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      return;
LABEL_17:
    sub_1006CE7A4();
    return;
  }
LABEL_8:
  if ((int)(a4 - v7) <= 1)
  {
LABEL_15:
    if (!sub_10005549C())
      return;
    sub_100054530("Invalid packet received");
    v11 = sub_1000544A0(2u);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_17;
  }
  v9 = __rev16(*(unsigned __int16 *)&a3[v7]);
  v10 = qword_100981A40;
  while (1)
  {
    v10 = *(_QWORD *)v10;
    if (!v10)
      break;
    if (*(unsigned __int16 *)(v10 + 80) == v9)
      goto LABEL_12;
  }
  if ((*a3 & 2) == 0)
  {
    v13 = (char *)sub_100052DC0(3uLL);
    if (v13)
    {
      v14 = a3[2];
      v15 = *(_WORD *)a3;
      *(_WORD *)v13 = *(_WORD *)a3;
      v13[2] = v14;
      *v13 = v15 | 3;
      sub_1001DBF20((uint64_t)sub_10013AFEC, *a1, 0, v13, 3uLL);
    }
    else
    {
      if (sub_10005549C())
      {
        sub_100054530("Out of memory\n");
        v16 = sub_1000544A0(2u);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      sub_1001DEB7C(*a1, 436);
    }
  }
}

void sub_10013AFEC(int a1, void *ptr)
{
  sub_100053298(ptr);
}

void sub_10013AFF4(unsigned __int16 *a1, void (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v8;
  int v9;
  unsigned int v10;
  unsigned __int16 v11;
  char *v12;
  unsigned __int8 *v13;
  char *v14;
  char v15;
  void (*v16)(int, void *, uint64_t, uint64_t);
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;

  v4 = a4;
  if (!(_DWORD)a4)
  {
    v8 = a1[20];
    v9 = a1[21];
    v4 = (v8 - v9);
    if (v8 != v9)
    {
      v10 = a1[1];
      if (v10 <= (unsigned __int16)(v8 - v9))
        v11 = v10 - 1;
      else
        v11 = v8 - v9;
      v12 = sub_100253D54(2u);
      if (v12)
      {
        v13 = (unsigned __int8 *)v12;
        v14 = (char *)sub_100052DC0(1uLL);
        if (v14)
        {
          if (v10 <= (unsigned __int16)v4)
            v15 = 8;
          else
            v15 = 12;
          *v14 = v15 | (16 * *((_BYTE *)a1 + 44)) | (2 * (*((_BYTE *)a1 + 45) != 1));
          v4 = sub_10005336C(v13, v14, 1uLL, 1u);
          if (!(_DWORD)v4)
          {
            v4 = sub_10005336C(v13, (char *)(*((_QWORD *)a1 + 4) + a1[21]), v11, 2u);
            if (!(_DWORD)v4)
            {
              v16 = *((_BYTE *)a1 + 48)
                  ? sub_100139E4C
                  : (void (*)(int, void *, uint64_t, uint64_t))sub_100139B24;
              v4 = sub_1001DBC18((uint64_t)v16, *a1, 0, (uint64_t)v13, 0);
              if (!(_DWORD)v4)
              {
                a1[21] += v11;
                return;
              }
            }
          }
        }
        else
        {
          v4 = 106;
        }
        sub_100254090(v13);
      }
      else
      {
        if (sub_10005549C())
        {
          sub_100054530("Could not allocate mbuf\n");
          v17 = sub_1000544A0(2u);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        v4 = 106;
      }
    }
  }
  v18 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (a2)
  {
    a2(a3, a1[23], *((unsigned __int8 *)a1 + 44), *((unsigned __int8 *)a1 + 45), v18, a1[20], v4);
  }
  else if (sub_10005549C())
  {
    sub_100054530("Could not find profile %d\n", a1[23]);
    v19 = sub_1000544A0(2u);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

void sub_10013B1F8(void **a1, unsigned int a2)
{
  void **v3;
  void **v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v8;

  v3 = (void **)*a1;
  if (v3)
  {
    if (!a2)
      goto LABEL_13;
    v4 = v3 + 1;
    v5 = a2;
    do
    {
      v6 = *((unsigned __int8 *)v4 - 8);
      v7 = v6 > 8;
      v8 = (1 << v6) & 0x10E;
      if (v7 || v8 == 0)
      {
        if (*v4)
        {
          sub_100053298(*v4);
          *v4 = 0;
        }
      }
      v4 += 2;
      --v5;
    }
    while (v5);
    v3 = (void **)*a1;
    if (*a1)
    {
LABEL_13:
      sub_100053298(v3);
      *a1 = 0;
    }
  }
}

uint64_t sub_10013B28C(uint64_t a1, unsigned int a2, void **a3, _BYTE *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;

  *a4 = 0;
  v8 = sub_100052DC0(16 * a2);
  *a3 = v8;
  if (v8)
  {
    if (a2)
    {
      v9 = 0;
      v10 = 16 * a2;
      do
      {
        v11 = *a3;
        ++*a4;
        v11[v9] = *(_BYTE *)(a1 + v9);
        *(_OWORD *)&v11[v9] = *(_OWORD *)(a1 + v9);
        if (*(_BYTE *)(a1 + v9 + 3))
        {
          v12 = sub_100052DC0(*(unsigned __int8 *)(a1 + v9 + 3));
          *(_QWORD *)&v11[v9 + 8] = v12;
          if (!v12)
            goto LABEL_9;
          memmove(v12, *(const void **)(a1 + v9 + 8), *(unsigned __int8 *)(a1 + v9 + 3));
        }
        v9 += 16;
      }
      while (v10 != v9);
    }
    return 0;
  }
  else
  {
LABEL_9:
    sub_10013B1F8(a3, *a4);
    *a4 = 0;
    return 106;
  }
}

uint64_t sub_10013B364()
{
  if (qword_100981A48)
    return *(unsigned __int8 *)(qword_100981A48 + 102);
  else
    return 0;
}

BOOL sub_10013B380()
{
  return qword_100981A48 && *(unsigned __int8 *)(qword_100981A48 + 101) != *(unsigned __int8 *)(qword_100981A48 + 102);
}

uint64_t sub_10013B3A8(int a1, _WORD *a2)
{
  uint64_t v2;
  _WORD *i;
  uint64_t result;

  if (!dword_100999154)
    return 408;
  v2 = *(unsigned __int8 *)(qword_100981A48 + 98);
  if (!*(_BYTE *)(qword_100981A48 + 98))
    return 120;
  for (i = *(_WORD **)(qword_100981A48 + 16); !i[19] || (unsigned __int16)i[19] != a1; i += 32)
  {
    if (!--v2)
      return 120;
  }
  result = 0;
  *a2 = *i;
  return result;
}

uint64_t sub_10013B408(uint64_t a1, _WORD *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t result;

  if (!dword_100999154)
    return 408;
  v2 = *(unsigned __int8 *)(qword_100981A48 + 98);
  if (!*(_BYTE *)(qword_100981A48 + 98))
    return 120;
  for (i = *(_QWORD *)(qword_100981A48 + 16) + 28; ; i += 64)
  {
    if (*(_WORD *)(i + 10))
    {
      if (*(_DWORD *)i == *(_DWORD *)a1 && *(unsigned __int16 *)(i + 4) == *(unsigned __int16 *)(a1 + 4))
        break;
    }
    if (!--v2)
      return 120;
  }
  result = 0;
  *a2 = *(_WORD *)(i + 10);
  return result;
}

uint64_t sub_10013B47C(uint64_t a1, _WORD *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t result;

  if (!dword_100999154)
    return 408;
  v2 = *(unsigned __int8 *)(qword_100981A48 + 98);
  if (!*(_BYTE *)(qword_100981A48 + 98))
    return 120;
  for (i = *(_QWORD *)(qword_100981A48 + 16) + 28; ; i += 64)
  {
    if (*(_WORD *)(i + 10))
    {
      if (*(_DWORD *)i == *(_DWORD *)a1 && *(unsigned __int16 *)(i + 4) == *(unsigned __int16 *)(a1 + 4))
        break;
    }
    if (!--v2)
      return 120;
  }
  result = 0;
  *a2 = *(_WORD *)(i - 28);
  return result;
}

uint64_t sub_10013B4F4(int a1, _WORD *a2)
{
  __int16 v2;
  uint64_t result;
  NSObject *v4;
  NSObject *v5;

  if (!dword_100999154)
    return 408;
  if (a1)
  {
    v2 = *(_WORD *)(*(_QWORD *)(qword_100981A48 + 16) + ((unint64_t)(a1 - 1) << 6) + 38);
    if (v2)
    {
      result = 0;
      *a2 = v2;
      return result;
    }
    if (!sub_10005549C())
      return 120;
    sub_100054530("CID from A2DP Handle not found");
    v5 = sub_1000544A0(3u);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      return 120;
  }
  else
  {
    if (!sub_10005549C())
      return 120;
    sub_100054530("A2DP handle was 0");
    v4 = sub_1000544A0(3u);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      return 120;
  }
  sub_1006CE7A4();
  return 120;
}

uint64_t sub_10013B5D4(__int16 a1, _WORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (!dword_100999154)
    return 408;
  if (*(unsigned __int8 *)(qword_100981A48 + 97) <= (unsigned __int16)(a1 - 1))
    return 120;
  v2 = *(_QWORD *)(qword_100981A48 + 8);
  if (!v2)
    return 120;
  v3 = *(unsigned __int8 *)(v2 + 144 * (unsigned __int16)(a1 - 1) + 135);
  if (v3 == 255)
    return 120;
  v4 = *(_QWORD *)(qword_100981A48 + 16);
  if (!v4)
    return 120;
  result = 0;
  *a2 = *(_WORD *)(v4 + (v3 << 6));
  return result;
}

uint64_t sub_10013B648(uint64_t a1, _WORD *a2)
{
  uint64_t result;
  NSObject *v4;
  __int16 v5;

  if (!dword_100999154)
    return 408;
  v5 = 0;
  result = sub_10013B47C(a1, &v5);
  if ((_DWORD)result)
  {
    if (sub_10005549C())
    {
      sub_100054530("MediaCID from BT Address was not found");
      v4 = sub_1000544A0(3u);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 120;
  }
  else
  {
    *a2 = *(_WORD *)(*(_QWORD *)(qword_100981A48 + 8) + 144 * (unsigned __int16)(v5 - 1) + 128);
  }
  return result;
}

uint64_t sub_10013B704(int a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;

  if (!dword_100999154)
    return 0;
  if (!qword_100981A48 || !*(_BYTE *)(qword_100981A48 + 98))
    goto LABEL_9;
  v1 = 0;
  v2 = *(_QWORD *)(qword_100981A48 + 16);
  while (*(unsigned __int16 *)(v2 + 38) != a1)
  {
    ++v1;
    v2 += 64;
    if (*(unsigned __int8 *)(qword_100981A48 + 98) == v1)
      goto LABEL_9;
  }
  if (v1 == 255)
  {
LABEL_9:
    if (sub_10005549C())
    {
      sub_100054530("No signal");
      v3 = sub_1000544A0(3u);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 0;
  }
  return v2;
}

uint64_t sub_10013B7B8(_QWORD *a1, unsigned int a2, _OWORD *a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  char *v18;
  unsigned int v19;
  _BYTE *v20;
  void *v21;
  __int128 v23;
  uint8_t buf[4];
  void *v25;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_Register(c=0x%x,sendRsp=%B,pSignalingChannel=0x%x,pMediaChannel=0x%x)", a1, a2, a3, a4);
    v8 = sub_1000544A0(3u);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v25 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (dword_100999154)
  {
    if (a1)
      goto LABEL_6;
LABEL_59:
    sub_100253460();
    return 101;
  }
  v13 = sub_100252DE8(3u);
  if (!v13)
    goto LABEL_59;
  v14 = (unsigned __int8 *)v13;
  qword_100981A48 = (uint64_t)sub_100114588(0x68uLL);
  if (!qword_100981A48)
    return 106;
  v15 = (char *)sub_100114588(40 * *v14);
  v16 = qword_100981A48;
  *(_QWORD *)qword_100981A48 = v15;
  if (!v15)
    goto LABEL_81;
  if (*v14)
  {
    v17 = 0;
    do
    {
      sub_10013C60C((uint64_t)v15);
      v15[25] = 0;
      ++v17;
      v15 += 40;
    }
    while (v17 < *v14);
  }
  v18 = (char *)sub_100114588(144 * v14[1]);
  v16 = qword_100981A48;
  *(_QWORD *)(qword_100981A48 + 8) = v18;
  if (!v18)
    goto LABEL_81;
  if (v14[1])
  {
    v19 = 0;
    v20 = v18 + 137;
    do
    {
      *(v20 - 5) = 0;
      *(_DWORD *)(v20 - 137) = 0;
      *(_WORD *)(v20 - 9) = 0;
      sub_10011C134(0);
      *v20 = -1;
      *((_DWORD *)v20 - 1) = -65281;
      ++v19;
      v20 += 144;
    }
    while (v19 < v14[1]);
  }
  v21 = sub_100114588((unint64_t)v14[2] << 6);
  v16 = qword_100981A48;
  *(_QWORD *)(qword_100981A48 + 16) = v21;
  if (!v21)
  {
LABEL_81:
    if (*(_QWORD *)(v16 + 8))
    {
      sub_100053298(*(void **)(v16 + 8));
      v16 = qword_100981A48;
      *(_QWORD *)(qword_100981A48 + 8) = 0;
    }
    if (*(_QWORD *)v16)
    {
      sub_100053298(*(void **)v16);
      v16 = qword_100981A48;
      *(_QWORD *)qword_100981A48 = 0;
    }
    sub_100053298((void *)v16);
    qword_100981A48 = 0;
    return 106;
  }
  *(_BYTE *)(v16 + 96) = *v14;
  *(_WORD *)(v16 + 97) = *(_WORD *)(v14 + 1);
  *(_BYTE *)(v16 + 100) = 1;
  dword_100999154 = 1;
  if (!a1)
    goto LABEL_59;
LABEL_6:
  if (!*a1)
  {
    sub_100253460();
    if (!*a1)
      return 101;
  }
  if (!a1[1])
  {
    sub_100253460();
    if (!a1[1])
      return 101;
  }
  if (!a1[2])
  {
    sub_100253460();
    if (!a1[2])
      return 101;
  }
  if (!a1[3])
  {
    sub_100253460();
    if (!a1[3])
      return 101;
  }
  if (!a1[4])
  {
    sub_100253460();
    if (!a1[4])
      return 101;
  }
  if (!a1[5])
  {
    sub_100253460();
    if (!a1[5])
      return 101;
  }
  if (!a1[6])
  {
    sub_100253460();
    if (!a1[6])
      return 101;
  }
  if (!a1[7])
  {
    sub_100253460();
    if (!a1[7])
      return 101;
  }
  if (!a1[8])
  {
    sub_100253460();
    if (!a1[8])
      return 101;
  }
  if (!a1[9])
  {
    sub_100253460();
    if (!a1[9])
      return 101;
  }
  if (!a1[10])
  {
    sub_100253460();
    if (!a1[10])
      return 101;
  }
  if (!a1[11])
  {
    sub_100253460();
    if (!a1[11])
      return 101;
  }
  if (!a1[12])
  {
    sub_100253460();
    if (!a1[12])
      return 101;
  }
  if (!a1[13])
  {
    sub_100253460();
    if (!a1[13])
      return 101;
  }
  if (!a1[16])
  {
    sub_100253460();
    if (!a1[16])
      return 101;
  }
  if (!a1[21])
  {
    sub_100253460();
    if (!a1[21])
      return 101;
  }
  if (!a1[22])
  {
    sub_100253460();
    if (!a1[22])
      return 101;
  }
  if (!a1[23])
  {
    sub_100253460();
    if (!a1[23])
      return 101;
  }
  if (!a1[24])
  {
    sub_100253460();
    if (!a1[24])
      return 101;
  }
  v9 = qword_100981A48;
  *(_QWORD *)(qword_100981A48 + 24) = a1;
  *(_BYTE *)(v9 + 103) = a2;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_69;
  }
  v10 = *(unsigned __int16 *)a3;
  if (*(_WORD *)a3)
  {
    v11 = 0;
    v12 = a3[1];
    *(_OWORD *)(v9 + 32) = *a3;
    *(_OWORD *)(v9 + 48) = v12;
LABEL_69:
    v10 = 1;
    goto LABEL_71;
  }
  v11 = 101;
LABEL_71:
  if (a4)
  {
    if (!*(_WORD *)a4)
    {
      v11 = 101;
LABEL_78:
      sub_10013C0F8();
      return v11;
    }
    v23 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v9 + 64) = *(_OWORD *)a4;
    *(_OWORD *)(v9 + 80) = v23;
  }
  if (!v10)
    goto LABEL_78;
  v11 = sub_1001E3870(25, (uint64_t)sub_10013BC18);
  if ((_DWORD)v11)
    goto LABEL_78;
  return v11;
}

void sub_10013BC18(unsigned int a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  unsigned __int16 v28;
  uint8_t buf[4];
  void *v30;

  v28 = 0;
  v6 = qword_100981A48;
  ++*(_BYTE *)(qword_100981A48 + 102);
  ++*(_BYTE *)(v6 + 101);
  if (sub_10013B408((uint64_t)a2, &v28))
  {
    if (sub_10013D038(a3, a2))
    {
      v7 = sub_1001DEAD4(a3, (uint64_t)sub_100147200);
      if ((_DWORD)v7)
      {
        v8 = v7;
        if (sub_10005549C())
        {
          sub_100054530("AVDTP disconnect complete not registered with %!", v8);
          v9 = sub_1000544A0(3u);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
            sub_1006CEEC0();
        }
      }
      if (sub_10005549C())
      {
        sub_100054530("AVDTP_CONNECT_IND(addr=%:) cid %d", a2, a3);
        v10 = sub_1000544A0(3u);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v11 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          v30 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      *(_WORD *)buf = 0;
      v12 = sub_10013B3A8(a3, buf);
      if ((_DWORD)v12)
      {
        v13 = v12;
        if (sub_10005549C())
        {
          sub_100054530("AVDTP did not find a2dp handle from CID with result %!", v13);
          v14 = sub_1000544A0(3u);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            sub_1006CEEC0();
        }
      }
      (**(void (***)(int *, _QWORD))(qword_100981A48 + 24))(a2, *(unsigned __int16 *)buf);
    }
    else
    {
      if (sub_10005549C())
      {
        sub_100054530("AVDTP signaling channel allocation failed, rejecting");
        v23 = sub_1000544A0(3u);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
      sub_1001DDCAC((uint64_t)sub_10013D344, (uint64_t)sub_10013C8FC, (uint64_t)sub_10013CB9C, a3, qword_100981A48 + 32, 0, (uint64_t)&unk_10091BA30);
    }
    return;
  }
  v15 = *(unsigned __int8 *)(v6 + 97);
  if (!*(_BYTE *)(v6 + 97))
  {
LABEL_21:
    if (sub_10005549C())
    {
      sub_100054530("Rejecting connect request %!", 2901);
      v18 = sub_1000544A0(3u);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    v19 = sub_1001DDCAC((uint64_t)sub_10013D344, (uint64_t)sub_10013C8FC, (uint64_t)sub_10013CB9C, a3, qword_100981A48 + 32, 0, (uint64_t)&unk_10091BA30);
    if (!(_DWORD)v19)
      goto LABEL_28;
    v20 = v19;
    if (!sub_10005549C())
      goto LABEL_28;
    sub_100054530("OI_L2CAP_Accept (reject) failed %!", v20);
    v21 = sub_1000544A0(3u);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      goto LABEL_28;
    goto LABEL_27;
  }
  v16 = *(_QWORD *)(v6 + 8) + 128;
  while (1)
  {
    v17 = *(unsigned __int8 *)(v16 + 7);
    if (v17 != 255 && *(_BYTE *)(v16 + 6) == 2 && *(unsigned __int16 *)(*(_QWORD *)(v6 + 16) + (v17 << 6) + 38) == v28)
      break;
    v16 += 144;
    if (!--v15)
      goto LABEL_21;
  }
  if (!*(_WORD *)v16)
  {
    *(_WORD *)v16 = a3;
    sub_10011C134(a3);
    v25 = sub_1001DDCAC((uint64_t)sub_100146070, (uint64_t)sub_100146280, (uint64_t)sub_100146488, a3, qword_100981A48 + 64, 1, (uint64_t)&unk_10091BA30);
    if (!(_DWORD)v25)
    {
      sub_1001DAFA4(a3, (uint64_t)sub_1001470E8);
      return;
    }
    v26 = v25;
    if (!sub_10005549C())
      goto LABEL_28;
    sub_100054530("OI_L2CAP_Accept failed! cid=%d error = %!", a3, v26);
    v27 = sub_1000544A0(3u);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      goto LABEL_28;
    goto LABEL_27;
  }
  if (sub_10005549C())
  {
    sub_100054530("Invalid ConnectInd Received: (mediaCID != 0)");
    v24 = sub_1000544A0(3u);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
LABEL_27:
      sub_1006CE7A4();
  }
LABEL_28:
  if (sub_10005549C())
  {
    sub_100054530("Unknown Connect Indication Received. cid=%d psm=%d addr=%:", a3, a1, a2);
    v22 = sub_1000544A0(3u);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

uint64_t sub_10013C0F8()
{
  void **v0;
  uint64_t result;

  if (!dword_100999154)
    return 408;
  v0 = (void **)qword_100981A48;
  if (*(_QWORD *)(qword_100981A48 + 16))
  {
    sub_100053298(*(void **)(qword_100981A48 + 16));
    v0 = (void **)qword_100981A48;
    *(_QWORD *)(qword_100981A48 + 16) = 0;
  }
  if (v0[1])
  {
    sub_100053298(v0[1]);
    v0 = (void **)qword_100981A48;
    *(_QWORD *)(qword_100981A48 + 8) = 0;
  }
  if (*v0)
  {
    sub_100053298(*v0);
    v0 = (void **)qword_100981A48;
    *(_QWORD *)qword_100981A48 = 0;
  }
  sub_100053298(v0);
  result = 0;
  qword_100981A48 = 0;
  dword_100999154 = 0;
  return result;
}

uint64_t sub_10013C188()
{
  NSObject *v0;
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  unsigned int v4;
  uint64_t result;
  int v6;
  void *v7;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_Deregister");
    v0 = sub_1000544A0(3u);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 136446210;
      v7 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)&v6, 0xCu);
    }
  }
  if (!dword_100999154)
    return 408;
  v1 = *(unsigned __int8 *)(qword_100981A48 + 96);
  if (*(_BYTE *)(qword_100981A48 + 96))
  {
    v2 = (unsigned __int8 *)(*(_QWORD *)qword_100981A48 + 25);
    while (1)
    {
      v3 = *v2;
      v2 += 40;
      if (v3)
        return 145;
      if (!--v1)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v4 = sub_1001E3A38(25);
    LODWORD(result) = sub_10013C0F8();
    if (v4)
      return v4;
    else
      return result;
  }
}

uint64_t sub_10013C2A0(int a1, int a2, uint64_t a3, int a4, int a5, _BYTE *a6)
{
  NSObject *v12;
  uint64_t v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int v24;
  _BYTE *v25;
  uint8_t buf[4];
  void *v28;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_RegisterMultipoint(mediaType=%d,count=%d,endpointType=%d,caps=0x%x,numCaps=%d)", a1, a5, a2, a3, a4);
    v12 = sub_1000544A0(3u);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v28 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!dword_100999154)
    return 408;
  if (a6 && a3 && a4)
  {
    v13 = qword_100981A48;
    v14 = *(unsigned __int8 *)(qword_100981A48 + 100);
    if (v14 == 63 || v14 == 0)
    {
      LOBYTE(v14) = 1;
      *(_BYTE *)(qword_100981A48 + 100) = 1;
    }
    v16 = 0;
    v17 = *(unsigned __int8 *)(v13 + 96);
    v18 = *(_QWORD *)v13 + 25;
    v19 = *(_QWORD *)v13 + 30;
    result = 104;
    while (!(_DWORD)v17)
    {
LABEL_24:
      LOBYTE(v14) = v14 + 1;
      *(_BYTE *)(v13 + 100) = v14;
      if (v16++ >= 0xFE)
        return result;
    }
    v21 = 0;
    v22 = (unsigned __int8 *)v18;
    while (1)
    {
      v23 = *v22;
      v22 += 40;
      if (v23 == v14)
        break;
      if (v17 == ++v21)
        goto LABEL_21;
    }
    if (v21 != 255)
      goto LABEL_24;
LABEL_21:
    v24 = 0;
    v25 = (_BYTE *)v19;
    while (*(v25 - 5))
    {
      ++v24;
      v25 += 40;
      if (v24 >= v17)
        goto LABEL_24;
    }
    if (*(_QWORD *)(v25 - 22))
      sub_100253460();
    if (*(_QWORD *)(v25 - 14))
      sub_100253460();
    result = 0;
    *(v25 - 5) = v14;
    *(_DWORD *)(v25 - 2) = 0;
    v25[2] = 0;
    *(v25 - 6) = -1;
    *(v25 - 4) = a1;
    *(v25 - 3) = a2;
    *(_QWORD *)(v25 - 30) = a3;
    *v25 = a4;
    *(v25 - 2) = a5;
    *a6 = *(_BYTE *)(qword_100981A48 + 100);
  }
  else
  {
    sub_100253460();
    return 101;
  }
  return result;
}

uint64_t sub_10013C4D0(int a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t result;
  uint8_t buf[4];
  void *v7;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_DeregisterEndpoint(seid=%d)", a1);
    v2 = sub_1000544A0(3u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v7 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!dword_100999154)
    return 408;
  if (!*(_BYTE *)(qword_100981A48 + 96))
    return 120;
  v3 = 0;
  for (i = *(_QWORD *)qword_100981A48; *(unsigned __int8 *)(i + 25) != a1; i += 40)
  {
    if (*(unsigned __int8 *)(qword_100981A48 + 96) == ++v3)
      return 120;
  }
  if (v3 == 255)
    return 120;
  sub_10013C60C(i);
  sub_10013C60C(i);
  result = 0;
  *(_BYTE *)(i + 25) = 0;
  return result;
}

void sub_10013C60C(uint64_t a1)
{
  NSObject *v2;
  uint8_t buf[4];
  void *v4;

  if (sub_10005549C())
  {
    sub_100054530("ResetEndpoint %lx", a1);
    v2 = sub_1000544A0(3u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v4 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  *(_BYTE *)(a1 + 29) = 0;
  sub_10013B1F8((void **)(a1 + 8), *(unsigned __int8 *)(a1 + 31));
  *(_BYTE *)(a1 + 31) = 0;
  sub_10013B1F8((void **)(a1 + 16), *(unsigned __int8 *)(a1 + 32));
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 24) = -1;
}

uint64_t sub_10013C6F8(_QWORD *a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  NSObject *v14;
  int v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  uint8_t buf[4];
  void *v21;

  v4 = (int)a1;
  v5 = qword_100981A48;
  ++*(_BYTE *)(qword_100981A48 + 102);
  if (!dword_100999154)
  {
    v7 = 408;
    goto LABEL_8;
  }
  v6 = *(unsigned __int8 *)(v5 + 98);
  if (!*(_BYTE *)(v5 + 98))
  {
LABEL_6:
    v7 = 120;
LABEL_8:
    sub_10013D5A8(a1);
    v19 = 0;
    v18 = 0;
    goto LABEL_9;
  }
  v7 = a4;
  v9 = *(_QWORD *)(v5 + 16) + 28;
  while (*(unsigned __int16 *)(v9 + 10) != (_DWORD)a1)
  {
    v9 += 64;
    if (!--v6)
      goto LABEL_6;
  }
  v16 = *(_DWORD *)v9;
  v19 = *(_WORD *)(v9 + 4);
  v18 = v16;
  if ((_DWORD)a4)
  {
    sub_10013D5A8(a1);
  }
  else
  {
    v17 = sub_10013B704((int)a1);
    if (!v17)
      sub_100253460();
    v7 = 0;
    *(_WORD *)(v17 + 34) = a3;
  }
LABEL_9:
  if (sub_10005549C())
  {
    sub_100054530("AVDTP_CONNECT_CFM(addr=%:,result=%!)", &v18, v7);
    v10 = sub_1000544A0(3u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  *(_WORD *)buf = 0;
  v12 = sub_10013B3A8(v4, buf);
  if (v12)
  {
    v13 = v12;
    if (sub_10005549C())
    {
      sub_100054530("AVDTP did not find a2dp handle from CID with result %!", v7);
      v14 = sub_1000544A0(3u);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    if ((_DWORD)v7)
      v7 = v7;
    else
      v7 = v13;
  }
  return (*(uint64_t (**)(int *, _QWORD, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 8))(&v18, *(unsigned __int16 *)buf, v7);
}

void sub_10013C8FC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  __int16 v18;
  uint8_t buf[4];
  void *v20;

  if (dword_100999154)
  {
    v4 = *(_QWORD *)(qword_100981A48 + 8);
    v18 = 0;
    v17 = 0;
    if (sub_10005549C())
    {
      sub_100054530("Signaling channel disconnected (CID %d) %!", a1, a2);
      v5 = sub_1000544A0(3u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v20 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    v6 = sub_10013B704((int)a1);
    if (v6)
    {
      v7 = v6;
      v8 = qword_100981A48;
      v9 = *(unsigned __int8 *)(qword_100981A48 + 97);
      if (*(_BYTE *)(qword_100981A48 + 97))
      {
        do
        {
          if (*(_QWORD *)(v8 + 16) + ((unint64_t)*(unsigned __int8 *)(v4 + 135) << 6) == v7)
          {
            if (*(_WORD *)(v4 + 128))
            {
              v10 = sub_1001DEB7C(*(unsigned __int16 *)(v4 + 128), 436);
              if (!(_DWORD)v10)
              {
                sub_100140030(v4, 7u);
                return;
              }
              v11 = v10;
              if (sub_10005549C())
              {
                sub_100054530("L2CAP_Disconnect: (CID %d) %!", *(unsigned __int16 *)(v4 + 128), v11);
                v12 = sub_1000544A0(3u);
                if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
                {
                  v13 = sub_100054494();
                  *(_DWORD *)buf = 136446210;
                  v20 = v13;
                  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                }
              }
              sub_100146280(*(unsigned __int16 *)(v4 + 128), a2);
            }
            sub_10013F014(v4);
            v8 = qword_100981A48;
          }
          v4 += 144;
          --v9;
        }
        while (v9);
      }
      v17 = *(_DWORD *)(v7 + 28);
      v18 = *(_WORD *)(v7 + 32);
    }
    *(_WORD *)buf = 0;
    v14 = sub_10013B3A8((int)a1, buf);
    if ((_DWORD)v14)
    {
      v15 = v14;
      if (sub_10005549C())
      {
        sub_100054530("Signaling disconnect error %!", v15);
        v16 = sub_1000544A0(3u);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
    else
    {
      sub_10013D5A8(a1);
      (*(void (**)(int *, _QWORD, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 16))(&v17, *(unsigned __int16 *)buf, a2);
    }
  }
}

void sub_10013CB9C(int a1, unsigned __int8 *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  size_t v13;
  int v14;
  unsigned __int16 v15;
  char v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  int v21;
  unsigned int v22;
  _BYTE *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;

  if (a2)
  {
    if (a3)
      goto LABEL_3;
LABEL_11:
    if (sub_10005549C())
    {
      sub_100054530("Invalid packet length!");
      v10 = sub_1000544A0(3u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        goto LABEL_13;
    }
    return;
  }
  sub_100253460();
  if (!a3)
    goto LABEL_11;
LABEL_3:
  v6 = *a2 & 0xC;
  if ((*a2 & 0xC) == 0)
  {
    sub_100141228(a1, a2, a3);
    return;
  }
  v7 = sub_10013B704(a1);
  if (v7)
  {
    v8 = v7;
    if (v6 == 4)
    {
      if (a3 <= 2)
      {
        if (!sub_10005549C())
          goto LABEL_54;
        sub_100054530("Invalid packet length!");
        v9 = sub_1000544A0(3u);
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          goto LABEL_54;
        goto LABEL_48;
      }
      if (*(_QWORD *)(v7 + 16))
      {
        if (!sub_10005549C())
          goto LABEL_54;
        sub_100054530("Unexpected START fragment! - discarding previous packet");
        v18 = sub_1000544A0(3u);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          goto LABEL_54;
        goto LABEL_48;
      }
      v21 = a2[1];
      if (a2[1])
      {
        *(_BYTE *)(v7 + 42) = v21;
        v22 = a3 - 1;
        v23 = sub_100114588((a3 - 1) * v21);
        *(_QWORD *)(v8 + 16) = v23;
        *(_DWORD *)(v8 + 48) = (a3 - 1) * *(unsigned __int8 *)(v8 + 42);
        *(_WORD *)(v8 + 36) = 0;
        *(_WORD *)(v8 + 56) = a3 - 1;
        if (v23)
        {
          *(_BYTE *)(v8 + 43) = *a2 & 0xF0;
          *v23 = *a2;
          *(_BYTE *)(*(_QWORD *)(v8 + 16) + 1) = a2[2];
          memmove((void *)(*(_QWORD *)(v8 + 16) + 2), a2 + 3, a3 - 3);
          *(_DWORD *)(v8 + 48) -= v22;
          *(_WORD *)(v8 + 36) += v22;
          --*(_BYTE *)(v8 + 42);
          return;
        }
        if (sub_10005549C())
        {
          sub_100054530("Could not allocate reassembly buffer!");
          v27 = sub_1000544A0(3u);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        sub_100147A34(a1, a2[2], *a2 >> 4, 129);
        goto LABEL_54;
      }
      if (sub_10005549C())
      {
        sub_100054530("Invalid number of packets (0)!");
        v26 = sub_1000544A0(3u);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
LABEL_48:
          sub_1006CE7A4();
      }
    }
    else
    {
      v12 = *(_QWORD *)(v7 + 16);
      if (!v12)
      {
        if (!sub_10005549C())
          goto LABEL_54;
        sub_100054530("Unexpected packet fragment!");
        v19 = sub_1000544A0(3u);
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          goto LABEL_54;
        goto LABEL_48;
      }
      if ((*a2 & 0xF0) != *(unsigned __int8 *)(v7 + 43))
      {
        if (!sub_10005549C())
          goto LABEL_54;
        sub_100054530("Invalid transaction number in fragment");
        v20 = sub_1000544A0(3u);
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          goto LABEL_54;
        goto LABEL_48;
      }
      v13 = a3 - 1;
      v14 = *(_DWORD *)(v7 + 48) - v13;
      *(_DWORD *)(v7 + 48) = v14;
      if (v14 < 0)
      {
        if (!sub_10005549C())
          goto LABEL_54;
        sub_100054530("Buffer overflow !");
        v24 = sub_1000544A0(3u);
        if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          goto LABEL_54;
        goto LABEL_48;
      }
      memmove((void *)(v12 + *(unsigned __int16 *)(v7 + 36)), a2 + 1, v13);
      v15 = *(_WORD *)(v8 + 36) + v13;
      *(_WORD *)(v8 + 36) = v15;
      v16 = *(_BYTE *)(v8 + 42) - 1;
      *(_BYTE *)(v8 + 42) = v16;
      if (v6 != 12)
      {
        if ((_DWORD)v13 == *(unsigned __int16 *)(v8 + 56))
          return;
        if (!sub_10005549C())
          goto LABEL_54;
        sub_100054530("CONTINUE fragment has invalid packet length");
        v25 = sub_1000544A0(3u);
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          goto LABEL_54;
        goto LABEL_48;
      }
      if (v16)
      {
        if (!sub_10005549C())
          goto LABEL_54;
        sub_100054530("Incorrect number of packet fragments - dropping packet!");
        v17 = sub_1000544A0(3u);
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          goto LABEL_54;
        goto LABEL_48;
      }
      sub_100141228(a1, *(unsigned __int8 **)(v8 + 16), v15);
    }
LABEL_54:
    v28 = *(void **)(v8 + 16);
    if (v28)
    {
      sub_100053298(v28);
      *(_QWORD *)(v8 + 16) = 0;
    }
    return;
  }
  if (sub_10005549C())
  {
    sub_100054530("Packet received on invalid CID");
    v11 = sub_1000544A0(3u);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
LABEL_13:
      sub_1006CE7A4();
  }
}

uint64_t sub_10013D038(__int16 a1, int *a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;

  if (!*(_BYTE *)(qword_100981A48 + 98))
    return 0;
  v3 = 0;
  for (result = *(_QWORD *)(qword_100981A48 + 16); *(_WORD *)(result + 38); result += 64)
  {
    if (*(unsigned __int8 *)(qword_100981A48 + 98) == ++v3)
      return 0;
  }
  *(_WORD *)result = v3 + 1;
  v5 = *a2;
  *(_WORD *)(result + 32) = *((_WORD *)a2 + 2);
  *(_DWORD *)(result + 28) = v5;
  *(_WORD *)(result + 38) = a1;
  *(_BYTE *)(result + 44) = -1;
  *(_DWORD *)(result + 52) = -1;
  return result;
}

uint64_t sub_10013D0A4(int *a1)
{
  NSObject *v2;
  uint64_t result;
  __int16 v4;
  uint8_t buf[4];
  void *v6;

  v4 = 0;
  if (sub_10005549C())
  {
    sub_100054530("AVDTP_Connect(addr=%:)", a1);
    v2 = sub_1000544A0(3u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v6 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!dword_100999154)
    return 408;
  if (!sub_10013B408((uint64_t)a1, &v4))
    return 126;
  result = sub_1001DD1A8((uint64_t)sub_10013C6F8, (uint64_t)sub_10013C8FC, (uint64_t)sub_10013CB9C, 0x19u, (uint64_t)a1, qword_100981A48 + 32, &v4, (uint64_t)&unk_10091BA30);
  if (!(_DWORD)result)
  {
    ++*(_BYTE *)(qword_100981A48 + 101);
    sub_10013D038(v4, a1);
    return 0;
  }
  return result;
}

uint64_t sub_10013D1F8(unsigned int a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint8_t buf[4];
  void *v9;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_Accept(a2dpHandle=%d,accept=%B)", a1, a2);
    v4 = sub_1000544A0(3u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v9 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  *(_WORD *)buf = 0;
  if (sub_10013B4F4(a1, buf))
    return 408;
  v6 = (_QWORD *)*(unsigned __int16 *)buf;
  v5 = sub_1001DDCAC((uint64_t)sub_10013D344, (uint64_t)sub_10013C8FC, (uint64_t)sub_10013CB9C, *(unsigned __int16 *)buf, qword_100981A48 + 32, a2, (uint64_t)&unk_10091BA30);
  if (!(_DWORD)v5 && (a2 & 1) != 0)
    return 0;
  sub_10013D5A8(v6);
  return v5;
}

_QWORD *sub_10013D344(_QWORD *a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t i;
  int v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  __int16 v19;
  uint8_t buf[4];
  void *v21;

  v7 = qword_100981A48;
  ++*(_BYTE *)(qword_100981A48 + 102);
  ++*(_BYTE *)(v7 + 101);
  v8 = sub_10013B704((int)a1);
  if (!v8)
    sub_100253460();
  v19 = 0;
  v18 = 0;
  *(_WORD *)(v8 + 34) = a3;
  if (sub_10005549C())
  {
    sub_100054530("ConnectCfmAcp: %!", a4);
    v9 = sub_1000544A0(3u);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v21 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!dword_100999154)
    return sub_10013D5A8(a1);
  v10 = *(unsigned __int8 *)(qword_100981A48 + 98);
  if (!*(_BYTE *)(qword_100981A48 + 98))
    return sub_10013D5A8(a1);
  for (i = *(_QWORD *)(qword_100981A48 + 16) + 28; *(unsigned __int16 *)(i + 10) != (_DWORD)a1; i += 64)
  {
    if (!--v10)
      return sub_10013D5A8(a1);
  }
  v13 = *(_DWORD *)i;
  v19 = *(_WORD *)(i + 4);
  v18 = v13;
  if ((_DWORD)a4)
    sub_10013D5A8(a1);
  if (sub_10005549C())
  {
    sub_100054530("AVDTP_CONNECT_CFM(addr=%:,result=%!)", &v18, a4);
    v14 = sub_1000544A0(3u);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v21 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  *(_WORD *)buf = 0;
  v16 = sub_10013B3A8((int)a1, buf);
  if ((_DWORD)v16 && sub_10005549C())
  {
    sub_100054530("AVDTP did not find a2dp handle from CID with result %!", v16);
    v17 = sub_1000544A0(3u);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      sub_1006CEEC0();
  }
  return (_QWORD *)(*(uint64_t (**)(int *, _QWORD, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 8))(&v18, *(unsigned __int16 *)buf, v16);
}

_QWORD *sub_10013D5A8(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (dword_100999154)
  {
    result = (_QWORD *)sub_10013B704((int)result);
    if (result)
    {
      v1 = result;
      result = (_QWORD *)result[1];
      if (result)
      {
        do
        {
          v2 = (_QWORD *)result[1];
          sub_100254090(result);
          result = v2;
        }
        while (v2);
      }
      v1[1] = 0;
      *((_BYTE *)v1 + 40) = 0;
      *((_WORD *)v1 + 19) = 0;
    }
  }
  return result;
}

uint64_t sub_10013D600(int a1)
{
  NSObject *v2;
  uint8_t buf[4];
  void *v5;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_Disconnect(a2dpHandle=%d)", a1);
    v2 = sub_1000544A0(3u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v5 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  *(_WORD *)buf = 0;
  if (sub_10013B4F4(a1, buf))
    return 122;
  else
    return sub_1001DEB7C(*(unsigned __int16 *)buf, 436);
}

uint64_t sub_10013D6EC(int a1, _BYTE *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  NSObject *v13;
  void *v14;
  unsigned __int16 v16;
  uint8_t buf[4];
  void *v18;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_Discover(a2dpHandle=%d)", a1);
    v4 = sub_1000544A0(3u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v18 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!dword_100999154)
    return 408;
  v16 = 0;
  v5 = sub_10013B4F4(a1, &v16);
  if ((_DWORD)v5)
  {
    v6 = v5;
    if (sub_10005549C())
    {
      sub_100054530("AVDT_Discover_Req\n\tTransaction=%d\n\tRSP=0x.4x\n", v6);
      v7 = sub_1000544A0(3u);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = sub_100054494();
        *(_DWORD *)buf = 136446210;
        v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
  }
  else
  {
    v9 = v16;
    v10 = sub_10013B704(v16);
    v11 = sub_10013D904(v10);
    v12 = v11;
    if (a2)
      *a2 = v11;
    if (sub_10005549C())
    {
      sub_100054530("AVDT_Discover_Req\n\tTransaction=%d\n\tRSP=0x0000\n", v12);
      v13 = sub_1000544A0(3u);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = sub_100054494();
        *(_DWORD *)buf = 136446210;
        v18 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    return sub_100147E20(v9, v12);
  }
  return v6;
}

uint64_t sub_10013D904(uint64_t a1)
{
  char v1;
  uint64_t result;
  NSObject *v3;

  if (a1)
  {
    v1 = *(_BYTE *)(a1 + 46) + 1;
    *(_BYTE *)(a1 + 46) = v1;
    return v1 & 0xF;
  }
  else
  {
    result = sub_10005549C();
    if ((_DWORD)result)
    {
      sub_100054530("Signal was NULL");
      v3 = sub_1000544A0(3u);
      result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        sub_1006CE7A4();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10013D978(int a1, unsigned int a2, _BYTE *a3)
{
  NSObject *v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint8_t buf[4];
  void *v12;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_GetCap(a2dp handle=%d,seid=%d)", a1, a2);
    v6 = sub_1000544A0(3u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v12 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!dword_100999154)
    return 408;
  *(_WORD *)buf = 0;
  result = sub_10013B4F4(a1, buf);
  if (!(_DWORD)result)
  {
    v8 = *(unsigned __int16 *)buf;
    v9 = sub_10013B704(*(unsigned __int16 *)buf);
    v10 = sub_10013D904(v9);
    if (a3)
      *a3 = v10;
    *(_BYTE *)(qword_100981A48 + 99) = a2;
    return sub_1001477D8(v8, 2u, v10, a2);
  }
  return result;
}

uint64_t sub_10013DAB4(int a1, unsigned int a2, _BYTE *a3)
{
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  NSObject *v11;
  void *v12;
  unsigned __int16 v14;
  uint8_t buf[4];
  void *v16;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_GetAllCaps(a2dpHandle=%d:,seid=%d)", a1, a2);
    v6 = sub_1000544A0(3u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v16 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!dword_100999154)
    return 408;
  v14 = 0;
  v7 = sub_10013B4F4(a1, &v14);
  if (!(_DWORD)v7)
  {
    v8 = v14;
    v9 = sub_10013B704(v14);
    v10 = sub_10013D904(v9);
    if (a3)
      *a3 = v10;
    *(_BYTE *)(qword_100981A48 + 99) = a2;
    v7 = sub_1001477D8(v8, 0xCu, v10, a2);
  }
  if (sub_10005549C())
  {
    sub_100054530("AVDTP_GetAllCaps returning %d", v7);
    v11 = sub_1000544A0(3u);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  return v7;
}

uint64_t sub_10013DC6C(int a1, int a2, int a3, uint64_t a4, unsigned int a5, _BYTE *a6, _WORD *a7)
{
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  void **v36;
  unsigned __int16 v37;
  uint8_t buf[4];
  void *v39;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_SetConfig(a2dpHandle=%d,remoteSEID=%d,localSEID=%d,caps=0x%x,numCaps=%d)", a1, a2, a3, a4, a5);
    v14 = sub_1000544A0(3u);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v39 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!dword_100999154)
    return 408;
  v37 = 0;
  v15 = sub_10013B4F4(a1, &v37);
  if (!(_DWORD)v15)
  {
    if (!*(_BYTE *)(qword_100981A48 + 96))
      return 120;
    v16 = 0;
    v17 = *(_QWORD *)qword_100981A48;
    v18 = 255;
    while (*(unsigned __int8 *)(v17 + v16 + 25) != a3)
    {
      v16 += 40;
      --v18;
      if (40 * *(unsigned __int8 *)(qword_100981A48 + 96) == v16)
        return 120;
    }
    if (v18)
    {
      if (*(_QWORD *)(v17 + v16 + 16) && (sub_100253460(), *(_QWORD *)(v17 + v16 + 16)))
      {
        return 118;
      }
      else
      {
        v36 = (void **)(v17 + v16 + 16);
        if (sub_10005549C())
        {
          sub_100054530("In SetConfig, allocating endpoint");
          v20 = sub_1000544A0(3u);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            v21 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v39 = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        v22 = sub_10013DFCC(a2);
        if (v22)
        {
          v23 = v37;
          v24 = qword_100981A48;
          if (qword_100981A48)
          {
            v25 = v22;
            if (*(_BYTE *)(qword_100981A48 + 98))
            {
              v26 = 0;
              v27 = (unsigned __int16 *)(*(_QWORD *)(qword_100981A48 + 16) + 38);
              while (1)
              {
                v28 = *v27;
                v27 += 32;
                if (v28 == v37)
                  break;
                if (*(unsigned __int8 *)(qword_100981A48 + 98) == ++v26)
                  goto LABEL_27;
              }
            }
            else
            {
LABEL_27:
              LOBYTE(v26) = -1;
            }
          }
          else
          {
            LOBYTE(v26) = -1;
            v25 = v22;
          }
          *(_BYTE *)(v25 + 135) = v26;
          v29 = *(unsigned __int8 *)(v24 + 96);
          if (*(_BYTE *)(v24 + 96))
          {
            v30 = 0;
            v31 = (unsigned __int8 *)(*(_QWORD *)v24 + 25);
            while (1)
            {
              v32 = *v31;
              v31 += 40;
              if (v32 == a3)
                break;
              if (v29 == ++v30)
                goto LABEL_34;
            }
          }
          else
          {
LABEL_34:
            LOBYTE(v30) = -1;
          }
          *(_BYTE *)(v25 + 136) = v30;
          *a7 = sub_10013E130(v25);
          v33 = sub_10013B704(v23);
          v34 = sub_10013D904(v33);
          v35 = v34;
          if (a6)
            *a6 = v34;
          v15 = sub_10013B28C(a4, a5, v36, (_BYTE *)(v17 + v16 + 32));
          if ((_DWORD)v15 || (v15 = sub_100148B58(v23, v35, a2, a3, (unsigned __int8 *)*v36, a5), (_DWORD)v15))
          {
            sub_10013B1F8(v36, a5);
            *(_BYTE *)(v25 + 132) = 0;
            *(_DWORD *)v25 = 0;
            *(_WORD *)(v25 + 128) = 0;
            sub_10011C134(0);
            *(_DWORD *)(v25 + 134) = -256;
            LOBYTE(v35) = -1;
          }
          *(_BYTE *)(v25 + 133) = v35;
        }
        else
        {
          return 2902;
        }
      }
    }
    else
    {
      return 120;
    }
  }
  return v15;
}

uint64_t sub_10013DFCC(int a1)
{
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint8_t buf[4];
  void *v8;

  if (*(_BYTE *)(qword_100981A48 + 97))
  {
    v2 = 0;
    v3 = *(_QWORD *)(qword_100981A48 + 8);
    while (*(_BYTE *)(v3 + 132))
    {
      ++v2;
      v3 += 144;
      if (v2 >= *(unsigned __int8 *)(qword_100981A48 + 97))
        goto LABEL_5;
    }
    if (sub_10005549C())
    {
      sub_100054530("Allocating endpoint at index: %d for seid: %d", v2, a1);
      v5 = sub_1000544A0(3u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v8 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    *(_BYTE *)(v3 + 132) = a1;
    *(_WORD *)(v3 + 128) = 0;
    *(_DWORD *)v3 = 0;
    *(_BYTE *)(v3 + 137) = -1;
    *(_DWORD *)(v3 + 133) = -65281;
  }
  else
  {
LABEL_5:
    if (sub_10005549C())
    {
      sub_100054530("Did not allocate endpoint");
      v4 = sub_1000544A0(3u);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 0;
  }
  return v3;
}

uint64_t sub_10013E130(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v6;
  uint8_t buf[4];
  void *v9;

  if (*(_BYTE *)(qword_100981A48 + 97))
  {
    v2 = 0;
    v3 = *(_QWORD *)(qword_100981A48 + 8) - 144;
    while (1)
    {
      v3 += 144;
      if (v3 == a1)
        break;
      if (*(unsigned __int8 *)(qword_100981A48 + 97) == ++v2)
        goto LABEL_5;
    }
    if (sub_10005549C())
    {
      sub_100054530("In GetHandleFromRemote, found handle for seid: %d, returning %d", *(unsigned __int8 *)(a1 + 132), v2 + 1);
      v6 = sub_1000544A0(3u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v9 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    return (unsigned __int16)(v2 + 1);
  }
  else
  {
LABEL_5:
    if (sub_10005549C())
    {
      sub_100054530("In GetHandleFromRemote, couldn't find handle");
      v4 = sub_1000544A0(3u);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 0;
  }
}

uint64_t sub_10013E27C(int a1, _BYTE *a2)
{
  NSObject *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  NSObject *v10;
  unsigned int v11;
  char v12;
  uint8_t buf[4];
  void *v14;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_Open(handle=%d)", a1);
    v4 = sub_1000544A0(3u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v14 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!dword_100999154)
    return 408;
  if (*(unsigned __int8 *)(qword_100981A48 + 97) <= (unsigned __int16)(a1 - 1))
    return 120;
  v5 = *(_QWORD *)(qword_100981A48 + 8);
  if (!v5)
    return 120;
  v6 = (unsigned __int16)(a1 - 1);
  if (!*(_BYTE *)(v5 + 144 * (unsigned __int16)(a1 - 1) + 134))
  {
    if (sub_10005549C())
    {
      sub_100054530("AVDTP_Open called on handle %d when it's in idle state. Aborting.", a1);
      v10 = sub_1000544A0(3u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 408;
  }
  v7 = *(unsigned __int8 *)(v5 + 144 * (unsigned __int16)(a1 - 1) + 135);
  if (v7 == 255)
    v8 = 0;
  else
    v8 = *(_QWORD *)(qword_100981A48 + 16) + (v7 << 6);
  v11 = sub_10013D904(v8);
  v12 = v11;
  if (a2)
    *a2 = v11;
  result = sub_1001477D8(*(unsigned __int16 *)(v8 + 38), 6u, v11, *(unsigned __int8 *)(v5 + 144 * v6 + 132));
  if (!(_DWORD)result)
    *(_BYTE *)(v5 + 144 * v6 + 133) = v12;
  return result;
}

uint64_t sub_10013E454(unsigned int a1, int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  void *v12;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_OpenRsp(transaction=%d,handle=%d,error=%d)", a1, a2, a3);
    v6 = sub_1000544A0(3u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v12 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!dword_100999154)
    return 408;
  if (*(unsigned __int8 *)(qword_100981A48 + 97) > (unsigned __int16)(a2 - 1))
  {
    v7 = *(_QWORD *)(qword_100981A48 + 8);
    if (v7)
    {
      v8 = *(unsigned __int8 *)(v7 + 144 * (unsigned __int16)(a2 - 1) + 135);
      if (v8 != 255)
      {
        v9 = *(_QWORD *)(qword_100981A48 + 16);
        if (v9)
          return sub_100147A34(*(unsigned __int16 *)(v9 + (v8 << 6) + 38), 6u, a1, a3);
      }
    }
  }
  return 120;
}

uint64_t sub_10013E5AC(_WORD *a1, unsigned int a2, _BYTE *a3)
{
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  uint64_t v31;
  uint8_t buf[4];
  void *v33;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_Start(handles=0x%x,num=%x)", (_DWORD)a1, a2);
    v6 = sub_1000544A0(3u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v33 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (dword_100999154)
  {
    v7 = sub_100052DC0(a2);
    if (!v7)
      return 106;
    v8 = v7;
    if (*(unsigned __int8 *)(qword_100981A48 + 97) > (unsigned __int16)(*a1 - 1))
    {
      v9 = *(_QWORD *)(qword_100981A48 + 8);
      if (v9)
      {
        v10 = *(unsigned __int8 *)(v9 + 144 * (unsigned __int16)(*a1 - 1) + 135);
        if (v10 != 255)
        {
          v11 = *(_QWORD *)(qword_100981A48 + 16);
          if (v11)
          {
            v12 = v11 + (v10 << 6);
            v30 = *(unsigned __int16 *)(v12 + 38);
            v31 = v12;
            v13 = sub_10013D904(v12);
            v14 = v13;
            if (a3)
              *a3 = v13;
            if (!a2)
            {
LABEL_27:
              v28 = sub_100147CA0(v30, 7u, v14, (uint64_t)v8, a2);
LABEL_30:
              sub_100053298(v8);
              return v28;
            }
            v15 = 0;
            v16 = qword_100981A48;
            while (1)
            {
              v17 = v15;
              v18 = a1[v15] - 1;
              if (*(unsigned __int8 *)(v16 + 97) <= v18)
                break;
              v19 = *(_QWORD *)(v16 + 8);
              if (!v19)
                break;
              v20 = v18;
              if (*(_BYTE *)(v19 + 144 * v18 + 134) != 3)
              {
                v28 = 408;
                goto LABEL_30;
              }
              v21 = v19 + 144 * v18;
              v24 = *(unsigned __int8 *)(v21 + 132);
              v23 = (char *)(v21 + 132);
              v22 = v24;
              if (!v24)
              {
                sub_100253460();
                v16 = qword_100981A48;
                v22 = *v23;
              }
              *((_BYTE *)v8 + v17) = v22;
              *(_BYTE *)(v19 + 144 * v20 + 133) = v14;
              if ((_DWORD)v17)
              {
                if (*(unsigned __int8 *)(v16 + 97) <= (unsigned __int16)(a1[v17] - 1)
                  || (v25 = *(_QWORD *)(v16 + 8)) == 0
                  || (v26 = *(unsigned __int8 *)(v25 + 144 * (unsigned __int16)(a1[v17] - 1) + 135), v26 == 255))
                {
                  v27 = 0;
                }
                else
                {
                  v27 = *(_QWORD *)(v16 + 16) + (v26 << 6);
                }
                if (v27 != v31)
                {
                  v28 = 101;
                  goto LABEL_30;
                }
              }
              v15 = v17 + 1;
              if (a2 <= (v17 + 1))
                goto LABEL_27;
            }
          }
        }
      }
    }
    v28 = 120;
    goto LABEL_30;
  }
  return 408;
}

uint64_t sub_10013E830(unsigned int a1, __int16 *a2, unsigned int a3, int a4, int a5)
{
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  __int16 *v19;
  __int16 v20;
  unsigned __int16 v21;
  uint8_t buf[4];
  void *v23;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_StartRsp(transaction=%d,handles=0x%x,numHandles=%d,errorHandle=%d,error=%d)", a1, (_DWORD)a2, a3, a4, a5);
    v10 = sub_1000544A0(3u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v23 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!dword_100999154)
    return 408;
  v11 = *(unsigned __int8 *)(qword_100981A48 + 97);
  if (v11 <= (unsigned __int16)(*a2 - 1))
    return 120;
  v12 = *(_QWORD *)(qword_100981A48 + 8);
  if (!v12)
    return 120;
  v13 = *(unsigned __int8 *)(v12 + 144 * (unsigned __int16)(*a2 - 1) + 135);
  if (v13 == 255)
    return 120;
  v14 = *(_QWORD *)(qword_100981A48 + 16);
  if (!v14)
    return 120;
  if (a5)
  {
    if (v11 > (unsigned __int16)(a4 - 1))
    {
      v15 = *(unsigned __int8 *)(v12 + 144 * (unsigned __int16)(a4 - 1) + 136);
      if (v15 != 255)
      {
        if (*(_QWORD *)qword_100981A48)
        {
          v16 = *(_BYTE *)(*(_QWORD *)qword_100981A48 + 40 * v15 + 25);
          return sub_10013EA4C(*(unsigned __int16 *)(v14 + (v13 << 6) + 38), a1, a2, a3, v16, a5);
        }
      }
    }
LABEL_21:
    v16 = 0;
    return sub_10013EA4C(*(unsigned __int16 *)(v14 + (v13 << 6) + 38), a1, a2, a3, v16, a5);
  }
  if (!a3)
    goto LABEL_21;
  v18 = a3;
  v19 = a2;
  while (1)
  {
    v20 = *v19++;
    v21 = v20 - 1;
    if (v11 <= (unsigned __int16)(v20 - 1))
      break;
    if (*(unsigned __int8 *)(v12 + 144 * v21 + 134) - 3 >= 2)
      goto LABEL_24;
    if (!--v18)
      goto LABEL_21;
  }
  sub_100253460();
  if (MEMORY[0x86] == 3)
    return 101;
LABEL_24:
  sub_100253460();
  return 101;
}

uint64_t sub_10013EA4C(int a1, unsigned int a2, __int16 *a3, unsigned int a4, char a5, int a6)
{
  uint64_t v9;
  uint64_t v10;

  v9 = sub_100147D74(a1, 7u, a2, a5, a6);
  v10 = v9;
  if (!a6 && !(_DWORD)v9)
    sub_1001473D0(a3, a4, 4u);
  return v10;
}

uint64_t sub_10013EAAC(int a1, _BYTE *a2)
{
  NSObject *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t result;
  uint8_t buf[4];
  void *v14;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_Close(handle=%d)", a1);
    v4 = sub_1000544A0(3u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v14 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!dword_100999154)
    return 408;
  if (*(unsigned __int8 *)(qword_100981A48 + 97) <= (unsigned __int16)(a1 - 1))
    return 120;
  v5 = *(_QWORD *)(qword_100981A48 + 8);
  if (!v5)
    return 120;
  v6 = (unsigned __int16)(a1 - 1);
  if (*(unsigned __int8 *)(v5 + 144 * (unsigned __int16)(a1 - 1) + 134) - 3 > 1)
    return 408;
  v7 = *(unsigned __int8 *)(v5 + 144 * (unsigned __int16)(a1 - 1) + 135);
  if (v7 == 255)
    return 408;
  v8 = *(_QWORD *)(qword_100981A48 + 16);
  if (!v8)
    return 408;
  v9 = v8 + (v7 << 6);
  v10 = *(_BYTE *)(v9 + 46) + 1;
  *(_BYTE *)(v9 + 46) = v10;
  v11 = v10 & 0xF;
  if (a2)
    *a2 = v11;
  result = sub_1001477D8(*(unsigned __int16 *)(v9 + 38), 8u, v10 & 0xF, *(unsigned __int8 *)(v5 + 144 * v6 + 132));
  if (!(_DWORD)result)
    *(_BYTE *)(v5 + 144 * v6 + 133) = v11;
  return result;
}

uint64_t sub_10013EC3C(unsigned int a1, int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  void *v12;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_CloseRsp(transaction=%d,handle=%d)", a1, a2);
    v6 = sub_1000544A0(3u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v12 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!dword_100999154)
    return 408;
  if (*(unsigned __int8 *)(qword_100981A48 + 97) > (unsigned __int16)(a2 - 1))
  {
    v7 = *(_QWORD *)(qword_100981A48 + 8);
    if (v7)
    {
      v8 = *(unsigned __int8 *)(v7 + 144 * (unsigned __int16)(a2 - 1) + 135);
      if (v8 != 255)
      {
        v9 = *(_QWORD *)(qword_100981A48 + 16);
        if (v9)
          return sub_100147A34(*(unsigned __int16 *)(v9 + (v8 << 6) + 38), 8u, a1, a3);
      }
    }
  }
  return 120;
}

uint64_t sub_10013ED8C(unsigned int a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  _WORD *v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  const void *v17;
  uint64_t *v18;
  uint64_t v19;
  int *v20;
  uint8_t buf[4];
  void *v22;

  v19 = 0;
  v20 = 0;
  v17 = 0;
  v18 = 0;
  if (sub_10005549C())
  {
    sub_100054530("AVDTP_AbortRsp(transaction=%d,handle=%d)", a1, a2);
    v4 = sub_1000544A0(3u);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v22 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!dword_100999154)
    return 408;
  if (*(unsigned __int8 *)(qword_100981A48 + 97) <= (unsigned __int16)(a2 - 1))
    return 120;
  v5 = *(_QWORD *)(qword_100981A48 + 8);
  if (!v5)
    return 120;
  v6 = (unsigned __int16)(a2 - 1);
  v7 = *(unsigned __int8 *)(v5 + 144 * (unsigned __int16)(a2 - 1) + 135);
  if (v7 == 255)
    return 120;
  v8 = *(_QWORD *)(qword_100981A48 + 16);
  if (!v8)
    return 120;
  result = sub_100147A34(*(unsigned __int16 *)(v8 + (v7 << 6) + 38), 0xAu, a1, 0);
  if (!(_DWORD)result)
  {
    if (sub_10005549C())
    {
      sub_100054530("AVDT_Abort_Rsp\n\tTransaction=%d\n\tErrorCode=0x%.2x\n\tStreamHandles=%d\n", a1, 0, a2);
      v10 = sub_1000544A0(3u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = sub_100054494();
        *(_DWORD *)buf = 136446210;
        v22 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    v12 = v5 + 144 * v6;
    v14 = *(unsigned __int16 *)(v12 + 128);
    v13 = (_WORD *)(v12 + 128);
    result = sub_1001DEB7C(v14, 436);
    if ((_DWORD)result)
    {
      if (*v13)
      {
        v15 = result;
        if (sub_10005549C())
        {
          sub_100054530("Error disconnecting media transport - %!", v15);
          v16 = sub_1000544A0(3u);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        *v13 = 0;
        sub_10011C134(0);
      }
      sub_10013F014(v5 + 144 * v6);
      LOBYTE(v19) = a1;
      v20 = (int *)(v5 + 144 * v6);
      v18 = &v19;
      LOWORD(v17) = 16;
      return sub_10004AE90((uint64_t)sub_10013F248, &v17, v20);
    }
  }
  return result;
}

void sub_10013F014(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  char v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint8_t buf[4];
  void *v15;

  if (!a1 || *(unsigned __int8 *)(a1 + 136) == 255)
    v2 = 0;
  else
    v2 = *(_QWORD *)qword_100981A48 + 40 * *(unsigned __int8 *)(a1 + 136);
  if (sub_10005549C())
  {
    sub_100054530("ResetRemote %lx", a1);
    v3 = sub_1000544A0(3u);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v15 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (*(_DWORD *)a1)
  {
    sub_1002539B8(*(_DWORD *)a1);
    *(_DWORD *)a1 = 0;
  }
  sub_100140030(a1, 0);
  *(_BYTE *)(a1 + 132) = 0;
  sub_1001DEB7C(*(unsigned __int16 *)(a1 + 128), 436);
  if (v2)
  {
    v4 = *(_BYTE *)(v2 + 29);
    if ((v4 & 0x3F) != 0)
    {
      *(_BYTE *)(v2 + 29) = v4 - 1;
      if (sub_10005549C())
      {
        sub_100054530("Endpoint Remotes: %d", *(unsigned __int8 *)(v2 + 29));
        v5 = sub_1000544A0(3u);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          v6 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          v15 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      v8 = (_BYTE *)(v2 + 24);
      v7 = *(unsigned __int8 *)(v2 + 24);
      v9 = *(_QWORD *)(qword_100981A48 + 8);
      if (v9 + 144 * v7 != a1)
      {
        v10 = *(unsigned __int8 *)(qword_100981A48 + 97);
        if (v7 < v10)
        {
          do
          {
            v11 = v9 + 144 * v7;
            v12 = *(unsigned __int8 *)(v11 + 137);
            v8 = (_BYTE *)(v11 + 137);
            v7 = v12;
          }
          while (v9 + 144 * v12 != a1 && v7 < v10);
        }
      }
      if ((_DWORD)v7 != 255)
        *v8 = *(_BYTE *)(v9 + 144 * v7 + 137);
      *(_WORD *)(a1 + 135) = -1;
      *(_BYTE *)(a1 + 137) = -1;
      v4 = *(_BYTE *)(v2 + 29);
    }
    if ((v4 & 0x3F) == 0)
      sub_10013C60C(v2);
  }
}

uint64_t sub_10013F248(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _DWORD *v3;
  int v4;
  NSObject *v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD);
  uint64_t v7;
  uint8_t buf[4];
  void *v10;

  v1 = *(unsigned __int8 **)(a1 + 8);
  v2 = *v1;
  v3 = (_DWORD *)*((_QWORD *)v1 + 1);
  if (sub_10005549C())
  {
    v4 = sub_10013E130((uint64_t)v3);
    sub_100054530("AVDTP_ABORT_CFM(transaction=%d,handle=%d,error=%d)", v2, v4, 0);
    v5 = sub_1000544A0(3u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v10 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  *v3 = 0;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(qword_100981A48 + 24) + 176);
  v7 = sub_10013E130((uint64_t)v3);
  return v6(v2, v7, 0);
}

uint64_t sub_10013F354(__int16 *a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  _BYTE *v18;
  __int16 v19;
  unsigned __int16 v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t buf[4];
  void *v37;

  v6 = a2;
  if (sub_10005549C())
  {
    sub_100054530("AVDTP_Suspend(handles=0x%x,numHandles=%d)", (_DWORD)a1, a2);
    v7 = sub_1000544A0(3u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v37 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (dword_100999154)
  {
    if (!*(_QWORD *)(*(_QWORD *)(qword_100981A48 + 24) + 120))
    {
      sub_100253460();
      if (!*(_QWORD *)(*(_QWORD *)(qword_100981A48 + 24) + 120))
        return 101;
    }
    v8 = sub_100052DC0(a2);
    if (!v8)
      return 106;
    v9 = v8;
    if (*(unsigned __int8 *)(qword_100981A48 + 97) > (unsigned __int16)(*a1 - 1))
    {
      v10 = *(_QWORD *)(qword_100981A48 + 8);
      if (v10)
      {
        v11 = *(unsigned __int8 *)(v10 + 144 * (unsigned __int16)(*a1 - 1) + 135);
        if (v11 != 255)
        {
          v12 = *(_QWORD *)(qword_100981A48 + 16);
          if (v12)
          {
            v33 = *(_QWORD *)(qword_100981A48 + 16);
            v34 = *(unsigned __int8 *)(v10 + 144 * (unsigned __int16)(*a1 - 1) + 135);
            v13 = v12 + (v11 << 6);
            v14 = *(_BYTE *)(v13 + 46) + 1;
            v35 = v13;
            *(_BYTE *)(v13 + 46) = v14;
            v15 = v14 & 0xF;
            if (a3)
              *a3 = v14 & 0xF;
            if (sub_10005549C())
            {
              sub_100054530("AVDT_Suspend_Req\n\tTransaction=%d\n\tRSP=0x0000\n", v15);
              v16 = sub_1000544A0(3u);
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                v17 = sub_100054494();
                *(_DWORD *)buf = 136446210;
                v37 = v17;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
              }
            }
            if (!a2)
            {
LABEL_29:
              v31 = sub_100147CA0(*(unsigned __int16 *)(v33 + (v34 << 6) + 38), 9u, v15, (uint64_t)v9, a2);
LABEL_32:
              sub_100053298(v9);
              return v31;
            }
            v18 = v9;
            while (1)
            {
              v19 = *a1++;
              v20 = v19 - 1;
              if (*(unsigned __int8 *)(qword_100981A48 + 97) <= (unsigned __int16)(v19 - 1))
                break;
              v21 = *(_QWORD *)(qword_100981A48 + 8);
              if (!v21)
                break;
              v22 = v20;
              if (*(_BYTE *)(v21 + 144 * v20 + 134) != 4)
              {
                v31 = 408;
                goto LABEL_32;
              }
              v23 = *(unsigned __int8 *)(v21 + 144 * v20 + 135);
              if (v23 == 255)
                v24 = 0;
              else
                v24 = *(_QWORD *)(qword_100981A48 + 16) + (v23 << 6);
              if (v35 != v24)
              {
                v31 = 101;
                goto LABEL_32;
              }
              v25 = v15;
              v26 = v21 + 144 * v22;
              v29 = *(unsigned __int8 *)(v26 + 132);
              v28 = (char *)(v26 + 132);
              v27 = v29;
              if (!v29)
              {
                sub_100253460();
                v27 = *v28;
              }
              *v18++ = v27;
              v30 = v21 + 144 * v22;
              v15 = v25;
              *(_BYTE *)(v30 + 133) = v25;
              sub_1001F3A20(*(unsigned __int16 *)(v30 + 128));
              if (!--v6)
                goto LABEL_29;
            }
          }
        }
      }
    }
    v31 = 120;
    goto LABEL_32;
  }
  return 408;
}

uint64_t sub_10013F668(unsigned int a1, __int16 *a2, unsigned int a3, __int16 a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v13;
  __int16 *v14;
  __int16 v15;
  unsigned __int16 v16;
  NSObject *v17;
  NSObject *v18;

  if (!dword_100999154)
    return 408;
  v5 = *(unsigned __int8 *)(qword_100981A48 + 97);
  if (v5 <= (unsigned __int16)(*a2 - 1))
    return 120;
  v6 = *(_QWORD *)(qword_100981A48 + 8);
  if (!v6)
    return 120;
  v7 = *(unsigned __int8 *)(v6 + 144 * (unsigned __int16)(*a2 - 1) + 135);
  if (v7 == 255)
    return 120;
  v8 = *(_QWORD *)(qword_100981A48 + 16);
  if (!v8)
    return 120;
  if (a5)
  {
    if (v5 > (unsigned __int16)(a4 - 1))
    {
      v10 = *(unsigned __int8 *)(v6 + 144 * (unsigned __int16)(a4 - 1) + 136);
      if (v10 != 255)
      {
        if (*(_QWORD *)qword_100981A48)
        {
          v11 = *(_BYTE *)(*(_QWORD *)qword_100981A48 + 40 * v10 + 25);
          return sub_10013F810(*(unsigned __int16 *)(v8 + (v7 << 6) + 38), a1, a2, a3, v11, a5);
        }
      }
    }
LABEL_18:
    v11 = 0;
    return sub_10013F810(*(unsigned __int16 *)(v8 + (v7 << 6) + 38), a1, a2, a3, v11, a5);
  }
  if (!a3)
    goto LABEL_18;
  v13 = a3;
  v14 = a2;
  while (1)
  {
    v15 = *v14++;
    v16 = v15 - 1;
    if (v5 <= (unsigned __int16)(v15 - 1))
    {
      if (sub_10005549C())
      {
        sub_100054530("OI_AVDTP_SuspendRsp remote nil");
        v17 = sub_1000544A0(3u);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          goto LABEL_25;
      }
      return 101;
    }
    if (*(_BYTE *)(v6 + 144 * v16 + 134) != 4)
      break;
    if (!--v13)
      goto LABEL_18;
  }
  if (sub_10005549C())
  {
    sub_100054530("OI_AVDTP_SuspendRsp after stopped, check race transaction");
    v18 = sub_1000544A0(3u);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
LABEL_25:
      sub_1006CE7A4();
  }
  return 101;
}

uint64_t sub_10013F810(int a1, unsigned int a2, __int16 *a3, unsigned int a4, char a5, int a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t buf[4];
  void *v17;

  if (sub_10005549C())
  {
    sub_100054530("AVDT_Suspend_Rsp\n\tTransaction=%d\n\tErrorCode=0x%.2x\n", a2, a6);
    v12 = sub_1000544A0(3u);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v17 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v13 = sub_100147D74(a1, 9u, a2, a5, a6);
  v14 = v13;
  if (!a6 && !(_DWORD)v13)
    sub_1001473D0(a3, a4, 3u);
  return v14;
}

uint64_t sub_10013F93C(__int16 *a1, unsigned int a2, _BYTE *a3)
{
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _BYTE *v16;
  __int16 v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t buf[4];
  void *v35;

  v6 = a2;
  if (sub_10005549C())
  {
    sub_100054530("AVDTP_Transition(handles=0x%x, numHandles=%d", (_DWORD)a1, a2);
    v7 = sub_1000544A0(3u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v35 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!dword_100999154)
    return 408;
  if (!*(_QWORD *)(*(_QWORD *)(qword_100981A48 + 24) + 128))
  {
    sub_100253460();
    if (!*(_QWORD *)(*(_QWORD *)(qword_100981A48 + 24) + 128))
      return 101;
  }
  v8 = sub_100114588(a2);
  v9 = v8;
  if (*(unsigned __int8 *)(qword_100981A48 + 97) <= (unsigned __int16)(*a1 - 1)
    || (v10 = *(_QWORD *)(qword_100981A48 + 8)) == 0
    || (v11 = *(unsigned __int8 *)(v10 + 144 * (unsigned __int16)(*a1 - 1) + 135), v11 == 255)
    || (v12 = *(_QWORD *)(qword_100981A48 + 16)) == 0)
  {
    v29 = 120;
    if (!v8)
      return v29;
LABEL_28:
    sub_100053298(v9);
    return v29;
  }
  v31 = *(_QWORD *)(qword_100981A48 + 16);
  v32 = *(unsigned __int8 *)(v10 + 144 * (unsigned __int16)(*a1 - 1) + 135);
  v13 = v12 + (v11 << 6);
  v14 = *(_BYTE *)(v13 + 46) + 1;
  v33 = v13;
  *(_BYTE *)(v13 + 46) = v14;
  v15 = v14 & 0xF;
  if (a3)
    *a3 = v14 & 0xF;
  if (a2)
  {
    v16 = v8;
    do
    {
      v17 = *a1++;
      v18 = v17 - 1;
      if (*(unsigned __int8 *)(qword_100981A48 + 97) <= (unsigned __int16)(v17 - 1))
        break;
      v19 = *(_QWORD *)(qword_100981A48 + 8);
      if (!v19)
        break;
      v20 = v18;
      if (*(_BYTE *)(v19 + 144 * v18 + 134) != 4)
        break;
      v21 = *(unsigned __int8 *)(v19 + 144 * v18 + 135);
      v22 = v21 == 255 ? 0 : *(_QWORD *)(qword_100981A48 + 16) + (v21 << 6);
      if (v33 != v22)
        break;
      v23 = v15;
      v24 = v19 + 144 * v20;
      v27 = *(unsigned __int8 *)(v24 + 132);
      v26 = (char *)(v24 + 132);
      v25 = v27;
      if (!v27)
      {
        sub_100253460();
        v25 = *v26;
      }
      *v16++ = v25;
      v28 = v19 + 144 * v20;
      v15 = v23;
      *(_BYTE *)(v28 + 133) = v23;
      sub_1001F3A20(*(unsigned __int16 *)(v28 + 128));
      --v6;
    }
    while (v6);
  }
  v29 = sub_100147CA0(*(unsigned __int16 *)(v31 + (v32 << 6) + 38), 0xFEu, v15, (uint64_t)v9, a2);
  if (v9)
    goto LABEL_28;
  return v29;
}

uint64_t sub_10013FBD0(unsigned __int8 *a1, unsigned int a2, uint64_t a3, int a4, void **a5, unsigned __int8 *a6)
{
  int v8;
  unsigned int v10;
  int v12;
  uint64_t i;
  unsigned __int8 *v14;
  int v15;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  void *v20;
  int v21;
  BOOL v22;
  BOOL v23;
  const void **v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  void *v30;
  int v31;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  NSObject *v38;
  NSObject *v39;

  v8 = a4;
  v10 = a2;
  v12 = a4 + a2;
  *a6 = a4 + a2;
  if (a4)
  {
    for (i = 0; i != a4; ++i)
    {
      v14 = (unsigned __int8 *)(a3 + 16 * i);
      v15 = *v14;
      if (v15 == 4 || v15 == 7)
      {
        *a6 = --v12;
      }
      else
      {
        v17 = a2;
        v18 = a1;
        if (a2)
        {
          do
          {
            v19 = *v18;
            v18 += 16;
            if (*v14 == v19)
              *a6 = --v12;
            --v17;
          }
          while (v17);
        }
      }
    }
  }
  v20 = sub_100114588(16 * v12);
  *a5 = v20;
  if (!v20)
    goto LABEL_54;
  v21 = *a6;
  if (!(v21 | v8 | v10))
    return 0;
  v22 = v10 != 0;
  v23 = v8 != 0;
  while (1)
  {
    if (v22)
    {
      LOBYTE(v10) = v10 - 1;
      v24 = (const void **)&a1[16 * v10];
      goto LABEL_19;
    }
    if (!v23)
    {
      if (sub_10005549C())
      {
        sub_100054530("Mis-Count of merged caps: %d", *a6);
        v38 = sub_1000544A0(3u);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          goto LABEL_53;
      }
      goto LABEL_54;
    }
    LOBYTE(v8) = v8 - 1;
    v24 = (const void **)(a3 + 16 * v8);
    v31 = *(unsigned __int8 *)v24;
    if (v31 == 4 || v31 == 7)
    {
      LOBYTE(v10) = 0;
      goto LABEL_36;
    }
    v33 = *a6;
    if (v21 >= (int)v33)
      break;
    v34 = (unsigned __int8 *)*a5 + 16 * v21;
    v35 = v33 - v21;
    do
    {
      v36 = *v34;
      v34 += 16;
      if (v31 == v36)
        v24 = 0;
      --v35;
    }
    while (v35);
LABEL_19:
    if (v24)
      break;
LABEL_36:
    v23 = v8 != 0;
    v22 = v10 != 0;
    if (!v21 && !(_BYTE)v8 && !(_BYTE)v10)
      return 0;
  }
  if (v21 > 0)
  {
    v25 = (uint64_t)*a5 + 16 * --v21;
    *(_OWORD *)v25 = *(_OWORD *)v24;
    v26 = *(unsigned __int8 *)v24;
    v27 = v26 > 8;
    v28 = (1 << v26) & 0x10E;
    if (v27 || v28 == 0)
    {
      if (*((_BYTE *)v24 + 3))
      {
        v30 = sub_100052DC0(*((unsigned __int8 *)v24 + 3));
        *(_QWORD *)(v25 + 8) = v30;
        if (!v30)
          goto LABEL_54;
        memmove(v30, v24[1], *((unsigned __int8 *)v24 + 3));
      }
      else
      {
        *(_QWORD *)(v25 + 8) = 0;
      }
    }
    goto LABEL_36;
  }
  if (sub_10005549C())
  {
    sub_100054530("Mis-Count of merged caps: %d", *a6);
    v39 = sub_1000544A0(3u);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
LABEL_53:
      sub_1006CE7A4();
  }
LABEL_54:
  sub_10013B1F8(a5, *a6);
  *a5 = 0;
  *a6 = 0;
  return 106;
}

uint64_t sub_10013FE70(__int16 a1, unsigned int a2, char a3, int a4)
{
  char v4;
  uint64_t v5;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;

  if (!dword_100999154)
    return 408;
  v4 = a1 - 1;
  if (*(unsigned __int8 *)(qword_100981A48 + 97) <= (unsigned __int16)(a1 - 1))
    return 120;
  v5 = *(_QWORD *)(qword_100981A48 + 8);
  if (!v5)
    return 120;
  v9 = (unsigned __int16)(a1 - 1);
  v10 = *(unsigned __int8 *)(v5 + 144 * (unsigned __int16)(a1 - 1) + 136) == 255
      ? 0
      : *(_QWORD *)qword_100981A48 + 40 * *(unsigned __int8 *)(v5 + 144 * (unsigned __int16)(a1 - 1) + 136);
  v12 = *(unsigned __int8 *)(v5 + 144 * (unsigned __int16)(a1 - 1) + 135);
  if (v12 == 255)
    return 120;
  result = 120;
  if (v10)
  {
    v13 = *(_QWORD *)(qword_100981A48 + 16);
    if (v13)
    {
      v14 = (_DWORD *)(v5 + 144 * v9);
      if (a4)
      {
        sub_10013B1F8((void **)(v10 + 16), *(unsigned __int8 *)(v10 + 32));
        *(_BYTE *)(v10 + 32) = 0;
        v15 = v5 + 144 * v9;
        *(_BYTE *)(v15 + 132) = 0;
        *v14 = 0;
        *(_WORD *)(v15 + 128) = 0;
        sub_10011C134(0);
        *(_BYTE *)(v15 + 137) = -1;
        *(_DWORD *)(v15 + 133) = -65281;
        return sub_100148CF8(*(unsigned __int16 *)(v13 + (v12 << 6) + 38), 3, a2, a3, a4);
      }
      else
      {
        result = sub_100148CF8(*(unsigned __int16 *)(v13 + (v12 << 6) + 38), 3, a2, a3, 0);
        if (!(_DWORD)result)
        {
          sub_100140030(v5 + 144 * v9, 1u);
          sub_10013B1F8((void **)(v10 + 8), *(unsigned __int8 *)(v10 + 31));
          result = 0;
          *(_BYTE *)(v10 + 31) = *(_BYTE *)(v10 + 32);
          *(_QWORD *)(v10 + 8) = *(_QWORD *)(v10 + 16);
          *(_QWORD *)(v10 + 16) = 0;
          ++*(_BYTE *)(v10 + 29);
          *(_BYTE *)(v10 + 32) = 0;
          *(_BYTE *)(v5 + 144 * v9 + 137) = *(_BYTE *)(v10 + 24);
          *(_BYTE *)(v10 + 24) = v4;
        }
      }
    }
  }
  return result;
}

void sub_100140030(uint64_t a1, unsigned int a2)
{
  int v4;
  unint64_t v5;
  const char *v6;
  const char *v7;
  NSObject *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint8_t buf[4];
  void *v14;

  if (sub_10005549C())
  {
    v4 = sub_10013E130(a1);
    v5 = *(char *)(a1 + 134);
    if (v5 > 7)
      v6 = "";
    else
      v6 = off_10091BA60[v5];
    if (a2 > 7)
      v7 = "";
    else
      v7 = off_10091BA60[(char)a2];
    sub_100054530("State transition Handle %d: %s -> %s", v4, v6, v7);
    v8 = sub_1000544A0(3u);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v14 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v9 = *(unsigned __int8 *)(a1 + 134);
  if (a2 == 4)
  {
    if (v9 != 4)
    {
      v10 = *(unsigned __int16 *)(a1 + 128);
      v11 = 12;
      v12 = 70;
LABEL_15:
      sub_1001F2718(v10, v11, v12);
    }
  }
  else if (v9 == 4)
  {
    v10 = *(unsigned __int16 *)(a1 + 128);
    v11 = 9;
    v12 = -1;
    goto LABEL_15;
  }
  *(_BYTE *)(a1 + 134) = a2;
}

uint64_t sub_100140188(__int16 a1, unsigned int a2, char a3, int a4)
{
  uint64_t v4;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  void **v13;
  unsigned int v14;
  void **v15;
  char v16;

  if (!dword_100999154)
    return 408;
  if (*(unsigned __int8 *)(qword_100981A48 + 97) <= (unsigned __int16)(a1 - 1))
    return 120;
  v4 = *(_QWORD *)(qword_100981A48 + 8);
  if (!v4)
    return 120;
  v8 = (unsigned __int16)(a1 - 1);
  v9 = *(unsigned __int8 *)(v4 + 144 * (unsigned __int16)(a1 - 1) + 136) == 255
     ? 0
     : *(_QWORD *)qword_100981A48 + 40 * *(unsigned __int8 *)(v4 + 144 * (unsigned __int16)(a1 - 1) + 136);
  v10 = *(unsigned __int8 *)(v4 + 144 * (unsigned __int16)(a1 - 1) + 135);
  if (v10 == 255)
    return 120;
  result = 120;
  if (v9)
  {
    v12 = *(_QWORD *)(qword_100981A48 + 16);
    if (v12)
    {
      if (*(_BYTE *)(v4 + 144 * v8 + 134) == 3)
      {
        if (a4)
        {
          v14 = *(unsigned __int8 *)(v9 + 32);
          v13 = (void **)(v9 + 32);
          sub_10013B1F8(v13 - 2, v14);
          v15 = v13;
        }
        else
        {
          sub_10013B1F8((void **)(v9 + 8), *(unsigned __int8 *)(v9 + 31));
          v15 = (void **)(v9 + 32);
          v16 = *(_BYTE *)(v9 + 32);
          *(_QWORD *)(v9 + 8) = *(_QWORD *)(v9 + 16);
          *(_BYTE *)(v9 + 31) = v16;
          *(_QWORD *)(v9 + 16) = 0;
        }
        *(_BYTE *)v15 = 0;
        return sub_100148CF8(*(unsigned __int16 *)(v12 + (v10 << 6) + 38), 5, a2, a3, a4);
      }
      return 408;
    }
  }
  return result;
}

uint64_t sub_1001402C8(__int16 a1, unsigned int a2, const void *a3, unsigned int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  int v10;

  if (!dword_100999154)
    return 408;
  if (*(unsigned __int8 *)(qword_100981A48 + 97) <= (unsigned __int16)(a1 - 1))
    return 120;
  v5 = *(_QWORD *)(qword_100981A48 + 8);
  if (!v5)
    return 120;
  v6 = *(unsigned __int8 *)(v5 + 144 * (unsigned __int16)(a1 - 1) + 135);
  if (v6 == 255)
    return 120;
  v7 = *(_QWORD *)(qword_100981A48 + 16);
  if (!v7)
    return 120;
  v8 = *(unsigned __int8 *)(v5 + 144 * (unsigned __int16)(a1 - 1) + 134);
  v9 = v8 > 6;
  v10 = (1 << v8) & 0x61;
  if (!v9 && v10 != 0)
    return 408;
  return sub_100148DAC(*(unsigned __int16 *)(v7 + (v6 << 6) + 38), a2, a3, a4, a5);
}

uint64_t sub_10014035C(int a1, unsigned int a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v11;
  NSObject *v12;
  _BOOL4 v13;
  uint8_t buf[4];
  void *v15;

  if (!dword_100999154)
    return 408;
  if (*(unsigned __int8 *)(qword_100981A48 + 97) <= (unsigned __int16)(a1 - 1))
    return 120;
  v5 = *(_QWORD *)(qword_100981A48 + 8);
  if (!v5)
    return 120;
  v6 = *(unsigned __int8 *)(v5 + 144 * (unsigned __int16)(a1 - 1) + 135);
  if (v6 == 255)
    return 120;
  v7 = *(_QWORD *)(qword_100981A48 + 16);
  if (!v7)
    return 120;
  result = sub_100148F24(*(unsigned __int16 *)(v7 + (v6 << 6) + 38), a2, a3, a4);
  if (!(_DWORD)result)
  {
    v11 = sub_10005549C();
    result = 0;
    if (v11)
    {
      sub_100054530("AVDTP_DelayReport_Rsp: Transaction=%d, ErrorCode=0x%x,StreamHandles=%d", a2, a4, a1);
      v12 = sub_1000544A0(3u);
      v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v15 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_1001404BC(uint64_t a1)
{
  int v1;
  _BOOL8 result;
  uint64_t v3;
  unsigned __int16 v4;

  v4 = 0;
  v3 = 0;
  v1 = sub_10013B408(a1, &v4);
  result = 0;
  if (!v1)
    return !sub_1001DB520(v4, &v3) && *(_BYTE *)(v3 + 227) != 0;
  return result;
}

uint64_t sub_100140518(__int16 a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 *v5;
  uint64_t result;

  if (*(unsigned __int8 *)(qword_100981A48 + 97) <= (unsigned __int16)(a1 - 1))
    return 0;
  v2 = *(_QWORD *)(qword_100981A48 + 8);
  if (!v2)
    return 0;
  v3 = (unsigned __int16)(a1 - 1);
  if (*(_BYTE *)(v2 + 144 * (unsigned __int16)(a1 - 1) + 134) != 4)
    return 408;
  v5 = (unsigned __int8 *)(v2 + 144 * (unsigned __int16)(a1 - 1) + 16);
  result = sub_1000532A8((uint64_t)v5, 3u);
  if (!(_DWORD)result)
  {
    result = sub_10005336C(v5, (char *)a2, 0xCuLL, 2u);
    if (!(_DWORD)result)
    {
      if (!*(_BYTE *)(a2 + 12) || (result = sub_10005336C(v5, (char *)(a2 + 12), 1uLL, 2u), !(_DWORD)result))
      {
        result = sub_10005336C(v5, *(char **)(a2 + 24), *(unsigned __int16 *)(a2 + 16), 2u);
        if (!(_DWORD)result)
        {
          result = sub_1001DBC18((uint64_t)sub_10014062C, *(unsigned __int16 *)(v2 + 144 * v3 + 128), 0, (uint64_t)v5, 1);
          if (!(_DWORD)result)
            *(_QWORD *)(v2 + 144 * v3 + 24) = v2 + 144 * v3;
        }
      }
    }
  }
  return result;
}

void sub_10014062C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = 0;
}

void sub_100140634(__int16 a1)
{
  uint64_t v1;

  if (*(unsigned __int8 *)(qword_100981A48 + 97) > (unsigned __int16)(a1 - 1))
  {
    v1 = *(_QWORD *)(qword_100981A48 + 8);
    if (v1)
      sub_1001F16F8(*(unsigned __int16 *)(v1 + 144 * (unsigned __int16)(a1 - 1) + 128));
  }
}

uint64_t sub_10014066C(__int16 a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;

  if (*(unsigned __int8 *)(qword_100981A48 + 97) > (unsigned __int16)(a1 - 1)
    && (v1 = *(_QWORD *)(qword_100981A48 + 8)) != 0)
  {
    v2 = sub_1001F0760(*(unsigned __int16 *)(v1 + 144 * (unsigned __int16)(a1 - 1) + 128));
    if ((_DWORD)v2)
    {
      if (sub_10005549C())
      {
        sub_100054530("FreeHeadOfList Failed Status %d", v2);
        v3 = sub_1000544A0(3u);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("Invalid AVDTP Handle");
      v4 = sub_1000544A0(3u);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 2903;
  }
  return v2;
}

uint64_t sub_100140754(uint64_t *a1, void **a2, unsigned __int8 *a3)
{
  unsigned int v5;
  NSObject *v6;
  unsigned __int8 v7;
  uint64_t v8;
  unsigned __int8 v9;
  void **v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  signed int v18;
  char v19;
  int v20;
  NSObject *v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  char v26;
  int v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  NSObject *v34;
  void *v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char *v55;
  _BYTE *v56;
  char v57;
  char *v58;
  _BYTE *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  NSObject *v69;
  NSObject *v70;
  uint64_t v72;
  void **v74;
  uint8_t buf[4];
  void *v76;
  uint64_t v77;
  char v78;

  *a2 = 0;
  *a3 = 0;
  v77 = 0;
  v78 = 0;
  v5 = *((unsigned __int16 *)a1 + 6);
  if (sub_10005549C())
  {
    sub_100054530("ParseCaps");
    v6 = sub_1000544A0(3u);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v76 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v74 = a2;
  if (*((_BYTE *)a1 + 15))
  {
    v7 = 0;
    LODWORD(v8) = 0;
LABEL_6:
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3474, "uint8_t ParseCaps(OI_BYTE_STREAM *, OI_AVDTP_CAP **, uint8_t *)");
    if (*((_BYTE *)a1 + 15))
    {
      v9 = 0;
      v10 = a2;
      goto LABEL_126;
    }
    goto LABEL_25;
  }
  v11 = *((unsigned __int16 *)a1 + 5);
  v12 = *((unsigned __int16 *)a1 + 6);
  if (v11 > v12)
  {
    v7 = 0;
    v13 = 0;
    while (1)
    {
      if (*((_BYTE *)a1 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
      v14 = *a1;
      v15 = v12 + 1;
      *((_WORD *)a1 + 6) = v15;
      v8 = *(unsigned __int8 *)(v14 + v12);
      if (v11 <= v15)
      {
        *((_BYTE *)a1 + 15) = 1;
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3477, "uint8_t ParseCaps(OI_BYTE_STREAM *, OI_AVDTP_CAP **, uint8_t *)");
        v18 = 0;
      }
      else
      {
        v16 = *a1;
        v17 = v12 + 2;
        *((_WORD *)a1 + 6) = v17;
        v13 = *(unsigned __int8 *)(v16 + v15);
        v18 = v11 - v17;
      }
      if (v18 >= v13)
        *((_WORD *)a1 + 6) += v13;
      else
        *((_BYTE *)a1 + 15) = 1;
      v19 = 1;
      if (!v13 && v8 <= 8 && ((1 << v8) & 0x107) != 0)
      {
        v20 = *((unsigned __int8 *)&v77 + v8);
        *((_BYTE *)&v77 + v8) = v20 + 1;
        v19 = v20 == 0;
      }
      v7 += v19;
      if (*((_BYTE *)a1 + 15))
        goto LABEL_6;
      v11 = *((unsigned __int16 *)a1 + 5);
      v12 = *((unsigned __int16 *)a1 + 6);
      if (v11 <= v12)
        goto LABEL_25;
    }
  }
  LODWORD(v8) = 0;
  v7 = 0;
LABEL_25:
  if (sub_10005549C())
  {
    sub_100054530("ParseCaps - got count %d", v7);
    v21 = sub_1000544A0(3u);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v76 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v10 = a2;
  if (v7)
  {
    v23 = sub_100114588(16 * v7);
    *a2 = v23;
    if (!v23)
    {
      if (sub_10005549C())
      {
        sub_100054530("ParseCaps: Could not allocate memory for %d capabilities", v7);
        v68 = sub_1000544A0(3u);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      v26 = 0;
      v9 = 0;
      goto LABEL_123;
    }
  }
  if (sub_10005549C())
  {
    sub_100054530("numCaps = %d", v7);
    v24 = sub_1000544A0(3u);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v76 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (v5 > *((unsigned __int16 *)a1 + 5))
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
  *((_WORD *)a1 + 6) = v5;
  v26 = 1;
  if (!v7)
  {
    v7 = 0;
    v67 = 0;
    v9 = 0;
    goto LABEL_125;
  }
  v9 = 0;
  v27 = 0;
  while (1)
  {
    if (*((_BYTE *)a1 + 15))
      goto LABEL_126;
    if (*((_BYTE *)a1 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    v28 = (char *)*v10;
    v29 = *((unsigned __int16 *)a1 + 5);
    v30 = *((unsigned __int16 *)a1 + 6);
    if (v29 <= v30)
      break;
    v31 = *a1;
    *((_WORD *)a1 + 6) = v30 + 1;
    LODWORD(v8) = *(unsigned __int8 *)(v31 + v30);
    if (v29 <= (int)v30 + 1)
      goto LABEL_42;
    v32 = *a1;
    *((_WORD *)a1 + 6) = v30 + 2;
    v33 = *(unsigned __int8 *)(v32 + v30 + 1);
LABEL_43:
    if (sub_10005549C())
    {
      sub_100054530("got capability %d", v8);
      v34 = sub_1000544A0(3u);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        v35 = sub_100054494();
        *(_DWORD *)buf = 136446210;
        v76 = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    v36 = &v28[16 * v27];
    *v36 = v8;
    switch((int)v8)
    {
      case 1:
      case 2:
      case 8:
        if (v33)
          goto LABEL_124;
        v37 = *((_BYTE *)&v77 + v8) - 1;
        *((_BYTE *)&v77 + v8) = v37;
        v27 -= v37 != 0;
        goto LABEL_116;
      case 3:
        if (v33 != 3)
          goto LABEL_124;
        if (*((_BYTE *)a1 + 14) != 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
        if (*((_BYTE *)a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3561, "uint8_t ParseCaps(OI_BYTE_STREAM *, OI_AVDTP_CAP **, uint8_t *)");
        }
        else
        {
          v61 = *((unsigned __int16 *)a1 + 6);
          if (*((unsigned __int16 *)a1 + 5) > v61)
          {
            v62 = *a1;
            *((_WORD *)a1 + 6) = v61 + 1;
            v36[1] = *(_BYTE *)(v62 + v61);
            goto LABEL_104;
          }
        }
        *((_BYTE *)a1 + 15) = 1;
LABEL_104:
        if (*((_BYTE *)a1 + 14) != 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
        if (*((_BYTE *)a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3562, "uint8_t ParseCaps(OI_BYTE_STREAM *, OI_AVDTP_CAP **, uint8_t *)");
        }
        else
        {
          v63 = *((unsigned __int16 *)a1 + 6);
          if (*((unsigned __int16 *)a1 + 5) > v63)
          {
            v64 = *a1;
            *((_WORD *)a1 + 6) = v63 + 1;
            v36[2] = *(_BYTE *)(v64 + v63);
            goto LABEL_110;
          }
        }
        *((_BYTE *)a1 + 15) = 1;
LABEL_110:
        if (*((_BYTE *)a1 + 14) != 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
        if (*((_BYTE *)a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3563, "uint8_t ParseCaps(OI_BYTE_STREAM *, OI_AVDTP_CAP **, uint8_t *)");
        }
        else
        {
          v65 = *((unsigned __int16 *)a1 + 6);
          if (*((unsigned __int16 *)a1 + 5) > v65)
          {
            v66 = *a1;
            *((_WORD *)a1 + 6) = v65 + 1;
            v36[3] = *(_BYTE *)(v66 + v65);
            goto LABEL_116;
          }
        }
        *((_BYTE *)a1 + 15) = 1;
        goto LABEL_116;
      case 4:
      case 7:
        if (*((_BYTE *)a1 + 14) != 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
        if (*((_BYTE *)a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3537, "uint8_t ParseCaps(OI_BYTE_STREAM *, OI_AVDTP_CAP **, uint8_t *)");
        }
        else
        {
          v38 = *((unsigned __int16 *)a1 + 6);
          if (*((unsigned __int16 *)a1 + 5) > v38)
          {
            v39 = *a1;
            *((_WORD *)a1 + 6) = v38 + 1;
            v36[1] = *(_BYTE *)(v39 + v38);
            goto LABEL_65;
          }
        }
        *((_BYTE *)a1 + 15) = 1;
LABEL_65:
        if (*((_BYTE *)a1 + 14) != 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
        if (*((_BYTE *)a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3538, "uint8_t ParseCaps(OI_BYTE_STREAM *, OI_AVDTP_CAP **, uint8_t *)");
        }
        else
        {
          v40 = *((unsigned __int16 *)a1 + 6);
          if (*((unsigned __int16 *)a1 + 5) > v40)
          {
            v41 = *a1;
            *((_WORD *)a1 + 6) = v40 + 1;
            v36[2] = *(_BYTE *)(v41 + v40);
            goto LABEL_71;
          }
        }
        *((_BYTE *)a1 + 15) = 1;
LABEL_71:
        v36[3] = v33 - 2;
        if (v33 < 2)
        {
LABEL_124:
          v26 = 0;
          v67 = 24;
          goto LABEL_125;
        }
        if ((_BYTE)v33 != 2)
        {
          v42 = sub_100052DC0((v33 - 2));
          *((_QWORD *)v36 + 1) = v42;
          if (v42)
          {
            if (*((_BYTE *)a1 + 14) != 1)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
            v43 = v42;
            v72 = *a1;
            v44 = *((unsigned __int16 *)a1 + 6);
            v45 = v36[3];
            if (*((_BYTE *)a1 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3549, "uint8_t ParseCaps(OI_BYTE_STREAM *, OI_AVDTP_CAP **, uint8_t *)");
              v46 = 0;
            }
            else
            {
              v46 = *((unsigned __int16 *)a1 + 5) - (_DWORD)v44;
            }
            v47 = v36[3];
            if (v46 < v47)
              goto LABEL_94;
            if ((_DWORD)v45)
            {
              v58 = (char *)(v72 + v44);
              v59 = &v43[v45];
              do
              {
                v60 = *v58++;
                *v43++ = v60;
              }
              while (v43 < v59);
              LOWORD(v47) = v36[3];
            }
            *((_WORD *)a1 + 6) += v47;
            goto LABEL_100;
          }
          v26 = 0;
LABEL_123:
          v67 = 129;
          goto LABEL_125;
        }
        *((_QWORD *)v36 + 1) = 0;
LABEL_116:
        ++v9;
        if (++v27 >= v7)
        {
          v67 = 0;
          v26 = 1;
          goto LABEL_125;
        }
        break;
      case 5:
        if (v33 != 1)
          goto LABEL_124;
        goto LABEL_59;
      case 6:
        if (!v33)
          goto LABEL_124;
LABEL_59:
        if (*((_BYTE *)a1 + 14) != 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
        if (*((_BYTE *)a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3583, "uint8_t ParseCaps(OI_BYTE_STREAM *, OI_AVDTP_CAP **, uint8_t *)");
        }
        else
        {
          v48 = *((unsigned __int16 *)a1 + 6);
          if (*((unsigned __int16 *)a1 + 5) > v48)
          {
            v49 = *a1;
            *((_WORD *)a1 + 6) = v48 + 1;
            v36[1] = *(_BYTE *)(v49 + v48);
            goto LABEL_80;
          }
        }
        *((_BYTE *)a1 + 15) = 1;
LABEL_80:
        LOBYTE(v33) = v33 - 1;
LABEL_81:
        if (!(_BYTE)v33)
          goto LABEL_116;
        v36[3] = v33;
        v50 = sub_100052DC0(v33);
        *((_QWORD *)v36 + 1) = v50;
        if (v50)
        {
          if (*((_BYTE *)a1 + 14) != 1)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
          v51 = v50;
          v52 = *a1;
          v53 = *((unsigned __int16 *)a1 + 6);
          if (*((_BYTE *)a1 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3593, "uint8_t ParseCaps(OI_BYTE_STREAM *, OI_AVDTP_CAP **, uint8_t *)");
            v54 = 0;
          }
          else
          {
            v54 = *((unsigned __int16 *)a1 + 5) - (_DWORD)v53;
          }
          if (v54 >= v33)
          {
            v55 = (char *)(v52 + v53);
            v56 = &v51[v33];
            do
            {
              v57 = *v55++;
              *v51++ = v57;
            }
            while (v51 < v56);
            *((_WORD *)a1 + 6) += v33;
            v10 = v74;
            goto LABEL_116;
          }
LABEL_94:
          *((_BYTE *)a1 + 15) = 1;
LABEL_100:
          v10 = v74;
          goto LABEL_116;
        }
        v26 = 0;
        v67 = 129;
        v10 = v74;
LABEL_125:
        if (*((_BYTE *)a1 + 15))
        {
LABEL_126:
          if (sub_10005549C())
          {
            sub_100054530("ParseCaps: length error");
            v69 = sub_1000544A0(3u);
            if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
          v67 = 17;
LABEL_130:
          if (sub_10005549C())
          {
            sub_100054530("Caps not parsed correctly - good: %d error: 0x%2x", v9, v67);
            v70 = sub_1000544A0(3u);
            if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
          sub_10013B1F8(v10, v9);
        }
        else
        {
          if ((v26 & 1) == 0)
            goto LABEL_130;
          v67 = 0;
          *a3 = v7;
        }
        return v67;
      default:
        goto LABEL_81;
    }
  }
  *((_BYTE *)a1 + 15) = 1;
  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3511, "uint8_t ParseCaps(OI_BYTE_STREAM *, OI_AVDTP_CAP **, uint8_t *)");
LABEL_42:
  v33 = 0;
  *((_BYTE *)a1 + 15) = 1;
  goto LABEL_43;
}

void sub_100141228(int a1, unsigned __int8 *a2, int a3)
{
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  void *v16;
  uint64_t (*v17)(int, uint64_t, uint64_t, unsigned int);
  int v18;
  NSObject *v19;
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  unsigned __int8 v32;
  unsigned __int8 *v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  uint8_t buf[4];
  void *v39;

  v32 = 0;
  if (!a2 || !a3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
  v33 = a2;
  v34 = a3;
  v37 = 1;
  v35 = a3;
  v4 = *a2;
  v5 = v4 >> 4;
  if (a3 == 1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Error parsing AVDTP Signal header");
      v6 = sub_1000544A0(3u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    goto LABEL_7;
  }
  v36 = 2;
  v32 = a2[1];
  v7 = v4 & 3;
  if ((v4 & 3) != 0)
    sub_100147790(a1, v4 >> 4);
  if (sub_10005549C())
  {
    v14 = (const char *)sub_100253090((uint64_t)&v32, 1, v8, v9, v10, v11, v12, v13);
    sub_100054530("AVDTP receive %s msgType:%d transaction:%d)\n", v14, v7, v5);
    v15 = sub_1000544A0(3u);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v39 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v17 = sub_10014161C;
  switch(v32)
  {
    case 1u:
      goto LABEL_33;
    case 2u:
      v18 = sub_100141B88(a1, (uint64_t)&v33, v5, v7);
      goto LABEL_34;
    case 3u:
      v18 = sub_10014205C(a1, (uint64_t)&v33, v5, v7);
      goto LABEL_34;
    case 4u:
      v18 = sub_100142758(a1, (uint64_t)&v33, v5, v7);
      goto LABEL_34;
    case 5u:
      v18 = sub_100142B78(a1, (uint64_t)&v33, v5, v7);
      goto LABEL_34;
    case 6u:
      v18 = sub_1001430E8(a1, (uint64_t *)&v33, v5, v7);
      goto LABEL_34;
    case 7u:
      v18 = sub_100143648(a1, (uint64_t *)&v33, v5, v7);
      goto LABEL_34;
    case 8u:
      v18 = sub_100143B74(a1, (uint64_t)&v33, v5, v7);
      goto LABEL_34;
    case 9u:
      v18 = sub_100144098(a1, (uint64_t *)&v33, v5, v7);
      goto LABEL_34;
    case 0xAu:
      v18 = sub_1001446F4(a1, (uint64_t *)&v33, v5, v7);
      goto LABEL_34;
    case 0xBu:
      v17 = (uint64_t (*)(int, uint64_t, uint64_t, unsigned int))sub_100144C3C;
LABEL_33:
      v18 = v17(a1, (uint64_t)&v33, v5, v7);
      goto LABEL_34;
    case 0xCu:
      v18 = sub_100145420(a1, (uint64_t)&v33, v5, v7);
      goto LABEL_34;
    case 0xDu:
      v18 = sub_10014507C(a1, (uint64_t *)&v33, v5, v7);
      goto LABEL_34;
    default:
      if (sub_10014161C != 254)
      {
        if (sub_10014161C == 255)
        {
          if (v7)
          {
            if (sub_10005549C())
            {
              sub_100054530("Got general reject message");
              v19 = sub_1000544A0(3u);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                v20 = sub_100054494();
                *(_DWORD *)buf = 136446210;
                v39 = v20;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
              }
            }
            return;
          }
          if (sub_10005549C())
          {
            sub_100054530("Unrecognized command %d!", v32);
            v31 = sub_1000544A0(3u);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
LABEL_41:
              sub_1006CE7A4();
          }
        }
        else if (sub_10005549C())
        {
          sub_100054530("Unrecognized command %d!", v32);
          v30 = sub_1000544A0(3u);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            goto LABEL_41;
        }
LABEL_7:
        sub_100147C28(a1, v5, v32);
        return;
      }
      v18 = ((uint64_t (*)(int, uint64_t, uint64_t, unsigned int))sub_1001445A8)(a1, (uint64_t)&v33, v5, v7);
LABEL_34:
      if (v18)
      {
        v21 = v18;
        if (sub_10005549C())
        {
          v28 = (const char *)sub_100253090((uint64_t)&v32, 1, v22, v23, v24, v25, v26, v27);
          sub_100054530("Error on receipt (%s) - %d", v28, v21);
          v29 = sub_1000544A0(3u);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            sub_1006CEEC0();
        }
      }
      return;
  }
}

uint64_t sub_10014161C(int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 *v15;
  char v16;
  char *v17;
  __int16 v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 *v27;
  char v28;
  const char *v29;
  NSObject *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  NSObject *v35;
  void *v36;
  void *v37;
  NSObject *v39;
  unsigned __int16 v40;
  uint8_t buf[4];
  void *v42;

  if (sub_10005549C())
  {
    v8 = a4 > 3 ? "" : (&off_10091BAA0)[(char)a4];
    sub_100054530("Received DISCOVER - %s", v8);
    v9 = sub_1000544A0(3u);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v42 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!a2)
    sub_100253460();
  v40 = 0;
  if (sub_10013B3A8(a1, &v40))
    sub_100253460();
  if (a4)
  {
    if (a4 != 3)
    {
      if (a4 != 2)
      {
LABEL_16:
        LOBYTE(a2) = 0;
        return a2;
      }
      if (*(_BYTE *)(a2 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3354, "uint8_t AVDTPRecv_Discover(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
        goto LABEL_16;
      }
      v18 = *(_WORD *)(a2 + 10) - *(_WORD *)(a2 + 12);
      v19 = (__int16)(v18 + ((unsigned __int16)(v18 & 0x8000) >> 15)) >> 1;
      if (!(_BYTE)v19)
        goto LABEL_16;
      v20 = (char *)sub_100052DC0(4* ((__int16)(v18 + ((unsigned __int16)(v18 & 0x8000) >> 15)) >> 1));
      if (v20)
      {
        v21 = v20;
        v22 = 0;
        do
        {
          if (*(_BYTE *)(a2 + 14) != 1)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
          if (*(_BYTE *)(a2 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3372, "uint8_t AVDTPRecv_Discover(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
LABEL_64:
            *(_BYTE *)(a2 + 15) = 1;
            a2 = 17;
            goto LABEL_65;
          }
          v23 = *(unsigned __int16 *)(a2 + 10);
          v24 = *(unsigned __int16 *)(a2 + 12);
          if (v23 <= v24)
            goto LABEL_64;
          v25 = *(_QWORD *)a2;
          *(_WORD *)(a2 + 12) = v24 + 1;
          v26 = *(_BYTE *)(v25 + v24);
          v27 = (unsigned __int8 *)&v21[v22];
          v27[2] = v26 >> 2;
          v27[3] = (v26 & 2) != 0;
          if (v23 <= (int)v24 + 1)
            goto LABEL_64;
          *(_WORD *)(a2 + 12) = v24 + 2;
          v28 = *(_BYTE *)(v25 + v24 + 1);
          *v27 = v28 & 0xF0;
          v27[1] = (v28 & 8) != 0;
          if (sub_10005549C())
          {
            if (v27[1])
              v29 = "SNK";
            else
              v29 = "SRC";
            sub_100054530("seid %2d - inUse %B - mediaType %d - dir %s", v27[2], v27[3], *v27, v29);
            v30 = sub_1000544A0(3u);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              v31 = sub_100054494();
              *(_DWORD *)buf = 136446210;
              v42 = v31;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
          v22 += 4;
        }
        while (4 * v19 != v22);
        if (*(_BYTE *)(a2 + 15))
          a2 = 17;
        else
          a2 = 0;
LABEL_65:
        (*(void (**)(uint64_t, _QWORD, char *, _QWORD, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 24))(a3, v40, v21, v19, a2);
        v37 = v21;
        goto LABEL_57;
      }
      if (sub_10005549C())
      {
        sub_100054530("Error - out of memory");
        v39 = sub_1000544A0(3u);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      LOBYTE(a2) = -127;
      return a2;
    }
    if (*(_BYTE *)(a2 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    if (*(_BYTE *)(a2 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3400, "uint8_t AVDTPRecv_Discover(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
    }
    else
    {
      v32 = *(unsigned __int16 *)(a2 + 12);
      if (*(unsigned __int16 *)(a2 + 10) > v32)
      {
        v33 = *(_QWORD *)a2;
        *(_WORD *)(a2 + 12) = v32 + 1;
        v34 = *(_BYTE *)(v33 + v32);
        if (v34)
          LOBYTE(a2) = v34;
        else
          LOBYTE(a2) = 24;
        goto LABEL_50;
      }
    }
    *(_BYTE *)(a2 + 15) = 1;
    LOBYTE(a2) = 17;
LABEL_50:
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(qword_100981A48 + 24) + 24))(a3, v40, 0, 0, a2);
    return a2;
  }
  v10 = *(_QWORD *)qword_100981A48;
  v11 = (char *)sub_100052DC0(4 * *(unsigned __int8 *)(qword_100981A48 + 96));
  v12 = (uint64_t)v11;
  if (v11)
  {
    v13 = *(unsigned __int8 *)(qword_100981A48 + 96);
    if (*(_BYTE *)(qword_100981A48 + 96))
    {
      v14 = 0;
      v15 = (unsigned __int8 *)(v10 + 29);
      do
      {
        v16 = *(v15 - 4);
        if (v16)
        {
          v17 = &v11[4 * v14];
          *(_WORD *)v17 = *(_WORD *)(v15 - 3);
          v17[2] = v16;
          v17[3] = *v15 >= *(v15 - 1);
          ++v14;
        }
        v15 += 40;
        --v13;
      }
      while (v13);
      LODWORD(a2) = 0;
    }
    else
    {
      LODWORD(a2) = 0;
      v14 = 0;
    }
  }
  else
  {
    v14 = 0;
    LODWORD(a2) = 129;
  }
  if (sub_10005549C())
  {
    sub_100054530("Returning %d endpoints", v14);
    v35 = sub_1000544A0(3u);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      v36 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v42 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  sub_100147E8C(a1, a3, v12, v14, a2);
  if (v12)
  {
    v37 = (void *)v12;
LABEL_57:
    sub_100053298(v37);
  }
  return a2;
}

uint64_t sub_100141B88(int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  const char *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  NSObject *v25;
  void *v26;
  unsigned __int8 *v27;
  int v28;
  unsigned int v29;
  unsigned __int16 v31;
  unsigned __int8 v32;
  _BYTE buf[24];

  v6 = a2;
  if (!a2)
    sub_100253460();
  if (sub_10005549C())
  {
    v8 = a4 > 3 ? "" : (&off_10091BAA0)[(char)a4];
    sub_100054530("Received GET CAPS - %s", v8);
    v9 = sub_1000544A0(3u);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v31 = 0;
  if (sub_10013B3A8(a1, &v31))
    sub_100253460();
  if (!a4)
  {
    if (*(_BYTE *)(v6 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    if (*(_BYTE *)(v6 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3669, "uint8_t AVDTPRecv_GetCaps(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
    }
    else
    {
      v14 = *(unsigned __int16 *)(v6 + 12);
      if (*(unsigned __int16 *)(v6 + 10) > v14)
      {
        v15 = *(_QWORD *)v6;
        *(_WORD *)(v6 + 12) = v14 + 1;
        v16 = *(unsigned __int8 *)(v15 + v14) >> 2;
        if (*(_BYTE *)(qword_100981A48 + 96))
        {
          v17 = 0;
          v18 = (unsigned __int8 *)(*(_QWORD *)qword_100981A48 + 31);
          while (*(v18 - 6) != v16)
          {
            v18 += 40;
            if (*(unsigned __int8 *)(qword_100981A48 + 96) == ++v17)
              goto LABEL_36;
          }
          if (v17 != 255)
          {
            if (*(v18 - 4) || !*(_QWORD *)(v18 - 23) || *(v18 - 3) == 1)
            {
              if (sub_10005549C())
              {
                sub_100054530("Returning Capabilities");
                v20 = sub_1000544A0(3u);
                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                {
                  v21 = sub_100054494();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = v21;
                  _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                }
              }
              if (*(v18 - 1))
              {
                v22 = 0;
                v23 = 0;
                do
                {
                  sub_100145998(a1, *(_QWORD *)(v18 - 31) + v22);
                  ++v23;
                  v24 = *(v18 - 1);
                  v22 += 16;
                }
                while (v23 < v24);
              }
              else
              {
                LODWORD(v24) = 0;
              }
              v27 = *(unsigned __int8 **)(v18 - 31);
              v28 = a1;
              v29 = a3;
            }
            else
            {
              if (sub_10005549C())
              {
                sub_100054530("2-Play Source: Returning Config as Caps");
                v25 = sub_1000544A0(3u);
                if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
                {
                  v26 = sub_100054494();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = v26;
                  _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                }
              }
              v27 = *(unsigned __int8 **)(v18 - 23);
              LODWORD(v24) = *v18;
              v28 = a1;
              v29 = a3;
            }
            sub_100148968(v28, 2u, v29, v27, v24, 0);
            goto LABEL_57;
          }
        }
LABEL_36:
        if (sub_10005549C())
        {
          sub_100054530("Get caps received for unknown seid %d", v16);
          v19 = sub_1000544A0(3u);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        LODWORD(v6) = 18;
LABEL_34:
        sub_100148968(a1, 2u, a3, 0, 0, v6);
        return v6;
      }
    }
    *(_BYTE *)(v6 + 15) = 1;
    LODWORD(v6) = 17;
    goto LABEL_34;
  }
  if (a4 == 3)
  {
    if (*(_BYTE *)(v6 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    if (*(_BYTE *)(v6 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3652, "uint8_t AVDTPRecv_GetCaps(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
    }
    else
    {
      v11 = *(unsigned __int16 *)(v6 + 12);
      if (*(unsigned __int16 *)(v6 + 10) > v11)
      {
        v12 = *(_QWORD *)v6;
        *(_WORD *)(v6 + 12) = v11 + 1;
        v13 = *(_BYTE *)(v12 + v11);
        if (v13)
          LOBYTE(v6) = v13;
        else
          LOBYTE(v6) = 24;
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v6 + 15) = 1;
    LOBYTE(v6) = 17;
LABEL_26:
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(qword_100981A48 + 24) + 32))(a3, v31, *(unsigned __int8 *)(qword_100981A48 + 99), 0, 0, v6);
    return v6;
  }
  if (a4 != 2)
  {
LABEL_57:
    LOBYTE(v6) = 0;
    return v6;
  }
  *(_QWORD *)buf = 0;
  v32 = 0;
  v6 = sub_100140754((uint64_t *)v6, (void **)buf, &v32);
  v10 = v32;
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 32))(a3, v31, *(unsigned __int8 *)(qword_100981A48 + 99), *(_QWORD *)buf, v32, v6);
  sub_10013B1F8((void **)buf, v10);
  return v6;
}

uint64_t sub_10014205C(int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  void *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 v55;
  unsigned __int8 v56;
  void *v57;
  uint8_t buf[4];
  void *v59;

  if (sub_10005549C())
  {
    v8 = a4 > 3 ? "" : (&off_10091BAA0)[(char)a4];
    sub_100054530("Received SET CONFIG - %s", v8);
    v9 = sub_1000544A0(3u);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v59 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!a2)
    sub_100253460();
  v55 = 0;
  if (!sub_10013B3A8(a1, &v55)
    || !sub_10005549C()
    || (sub_100054530("AVDTP did not find a2dp handle from CID with result %!", 0),
        v10 = sub_1000544A0(3u),
        !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)))
  {
    if (a4)
      goto LABEL_13;
LABEL_47:
    if (*(_BYTE *)(a2 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    if (*(_BYTE *)(a2 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3801, "uint8_t AVDTPRecv_SetConfig(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
      v29 = *(unsigned __int8 *)(a2 + 14);
      *(_BYTE *)(a2 + 15) = 1;
      if (v29 != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    }
    else
    {
      v30 = *(unsigned __int16 *)(a2 + 12);
      if (*(unsigned __int16 *)(a2 + 10) > v30)
      {
        v31 = *(_QWORD *)a2;
        *(_WORD *)(a2 + 12) = v30 + 1;
        v32 = *(unsigned __int8 *)(v31 + v30) >> 2;
        if (*(unsigned __int16 *)(a2 + 10) > (v30 + 1))
        {
          v33 = *(_QWORD *)a2;
          *(_WORD *)(a2 + 12) = v30 + 2;
          v34 = *(unsigned __int8 *)(v33 + v30 + 1) >> 2;
          goto LABEL_57;
        }
LABEL_56:
        v34 = 0;
        *(_BYTE *)(a2 + 15) = 1;
LABEL_57:
        v57 = 0;
        v56 = 0;
        v35 = sub_100140754((uint64_t *)a2, &v57, &v56);
        if (v35)
        {
          if (v35 == 17)
            v17 = 35;
          else
            v17 = v35;
        }
        else
        {
          if (!*(_BYTE *)(qword_100981A48 + 96))
            goto LABEL_67;
          v36 = 0;
          v37 = *(_QWORD *)qword_100981A48 + 32;
          while (*(unsigned __int8 *)(v37 - 7) != (_DWORD)v32)
          {
            ++v36;
            v37 += 40;
            if (*(unsigned __int8 *)(qword_100981A48 + 96) == v36)
              goto LABEL_67;
          }
          if (v36 != 255)
          {
            if (*(unsigned __int8 *)(v37 - 3) >= *(unsigned __int8 *)(v37 - 4))
            {
              v17 = 19;
            }
            else
            {
              if (*(_QWORD *)(v37 - 16))
                goto LABEL_71;
              if (sub_10005549C())
              {
                sub_100054530("In Recv_SetConfig, allocating endpoint");
                v38 = sub_1000544A0(3u);
                if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                {
                  v39 = sub_100054494();
                  *(_DWORD *)buf = 136446210;
                  v59 = v39;
                  _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                }
              }
              v40 = sub_10013DFCC(v34);
              if (!v40)
              {
LABEL_71:
                v17 = 129;
              }
              else
              {
                v41 = v40;
                v42 = qword_100981A48;
                if (qword_100981A48 && *(_BYTE *)(qword_100981A48 + 98))
                {
                  v43 = 0;
                  v44 = (unsigned __int16 *)(*(_QWORD *)(qword_100981A48 + 16) + 38);
                  while (1)
                  {
                    v45 = *v44;
                    v44 += 32;
                    if (v45 == a1)
                      break;
                    if (*(unsigned __int8 *)(qword_100981A48 + 98) == ++v43)
                      goto LABEL_82;
                  }
                  *(_BYTE *)(v40 + 135) = v43;
                  if ((_BYTE)v43 != 0xFF)
                  {
                    v46 = *(unsigned __int8 *)(v42 + 96);
                    if (*(_BYTE *)(v42 + 96))
                    {
                      v47 = 0;
                      v48 = (unsigned __int8 *)(*(_QWORD *)v42 + 25);
                      while (1)
                      {
                        v49 = *v48;
                        v48 += 40;
                        if (v49 == (_DWORD)v32)
                          break;
                        if (v46 == ++v47)
                          goto LABEL_89;
                      }
                    }
                    else
                    {
LABEL_89:
                      LOBYTE(v47) = -1;
                    }
                    *(_BYTE *)(v40 + 136) = v47;
                    v50 = v57;
                    *(_QWORD *)(v37 - 16) = v57;
                    v51 = (_BYTE *)v37;
                    v52 = v56;
                    *v51 = v56;
                    v53 = sub_10013E130(v40);
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 40))(a3, v55, v32, v34, v53, v50, v52);
                    return 0;
                  }
                }
                else
                {
LABEL_82:
                  *(_BYTE *)(v40 + 135) = -1;
                }
                *(_BYTE *)(v40 + 132) = 0;
                *(_DWORD *)v40 = 0;
                *(_WORD *)(v40 + 128) = 0;
                sub_10011C134(0);
                *(_BYTE *)(v41 + 137) = -1;
                *(_DWORD *)(v41 + 133) = -65281;
                v17 = 128;
              }
            }
          }
          else
          {
LABEL_67:
            v17 = 18;
          }
        }
        sub_10013B1F8(&v57, v56);
        sub_100148CF8(a1, 3, a3, 0, v17);
        return v17;
      }
      *(_BYTE *)(a2 + 15) = 1;
    }
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3802, "uint8_t AVDTPRecv_SetConfig(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
    v32 = 0;
    goto LABEL_56;
  }
  sub_1006CEEC0();
  if (!a4)
    goto LABEL_47;
LABEL_13:
  if (a4 != 3)
  {
    if (a4 == 2)
    {
      v11 = sub_100147458(a3, a1);
      v12 = qword_100981A48;
      if (*(unsigned __int8 *)(qword_100981A48 + 97) > (unsigned __int16)(v11 - 1)
        && (v13 = *(_QWORD *)(qword_100981A48 + 8)) != 0
        && (v14 = *(unsigned __int8 *)(v13 + 144 * (unsigned __int16)(v11 - 1) + 136), v14 != 255)
        && (v15 = *(_QWORD *)qword_100981A48) != 0)
      {
        sub_100140030(v13 + 144 * (unsigned __int16)(v11 - 1), 1u);
        v16 = v15 + 40 * v14;
        sub_10013B1F8((void **)(v16 + 8), *(unsigned __int8 *)(v16 + 31));
        v17 = 0;
        *(_BYTE *)(v16 + 31) = *(_BYTE *)(v16 + 32);
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(v16 + 16);
        *(_QWORD *)(v16 + 16) = 0;
        *(_BYTE *)(v16 + 32) = 0;
        ++*(_BYTE *)(v16 + 29);
        *(_BYTE *)(v13 + 144 * (unsigned __int16)(v11 - 1) + 137) = *(_BYTE *)(v16 + 24);
        *(_BYTE *)(v16 + 24) = v11 - 1;
        v12 = qword_100981A48;
      }
      else
      {
        v17 = 1;
      }
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 + 24) + 48))(a3, v11, 0, v17);
      return v17;
    }
    return 0;
  }
  v18 = sub_100147458(a3, a1);
  if ((_DWORD)v18)
  {
    if (*(_BYTE *)(a2 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    if (*(_BYTE *)(a2 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3774, "uint8_t AVDTPRecv_SetConfig(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
      v19 = *(unsigned __int8 *)(a2 + 14);
      *(_BYTE *)(a2 + 15) = 1;
      if (v19 != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    }
    else
    {
      v21 = *(unsigned __int16 *)(a2 + 12);
      if (*(unsigned __int16 *)(a2 + 10) > v21)
      {
        v22 = *(_QWORD *)a2;
        *(_WORD *)(a2 + 12) = v21 + 1;
        if (*(unsigned __int16 *)(a2 + 10) > (v21 + 1))
        {
          v23 = *(unsigned __int8 *)(v22 + v21);
          v24 = *(_QWORD *)a2;
          *(_WORD *)(a2 + 12) = v21 + 2;
          v25 = *(unsigned __int8 *)(v24 + v21 + 1);
LABEL_34:
          if (v25)
            v17 = v25;
          else
            v17 = 24;
          if (v25)
            v20 = v23;
          else
            v20 = 0;
          goto LABEL_40;
        }
LABEL_33:
        v23 = 0;
        *(_BYTE *)(a2 + 15) = 1;
        v25 = 17;
        goto LABEL_34;
      }
      *(_BYTE *)(a2 + 15) = 1;
    }
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3775, "uint8_t AVDTPRecv_SetConfig(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
    goto LABEL_33;
  }
  v20 = 0;
  v17 = 1;
LABEL_40:
  v26 = qword_100981A48;
  if (*(unsigned __int8 *)(qword_100981A48 + 97) > (unsigned __int16)(v18 - 1))
  {
    v27 = *(_QWORD *)(qword_100981A48 + 8);
    if (v27)
    {
      if (*(unsigned __int8 *)(v27 + 144 * (unsigned __int16)(v18 - 1) + 136) != 255 && *(_QWORD *)qword_100981A48)
      {
        v28 = *(_QWORD *)qword_100981A48 + 40 * *(unsigned __int8 *)(v27 + 144 * (unsigned __int16)(v18 - 1) + 136);
        sub_10013B1F8((void **)(v28 + 16), *(unsigned __int8 *)(v28 + 32));
        *(_BYTE *)(v28 + 32) = 0;
        v26 = qword_100981A48;
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 + 24) + 48))(a3, v18, v20, v17);
  return v17;
}

uint64_t sub_100142758(int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  void *v23;
  unsigned __int8 *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unsigned __int8 v33;
  void *v34;
  uint8_t buf[4];
  void *v36;

  v34 = 0;
  v33 = 0;
  if (sub_10005549C())
  {
    v8 = a4 > 3 ? "" : (&off_10091BAA0)[(char)a4];
    sub_100054530("Received GET CONFIG - %s", v8);
    v9 = sub_1000544A0(3u);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v36 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (a2)
  {
    if (a4)
      goto LABEL_9;
  }
  else
  {
    sub_100253460();
    if (a4)
    {
LABEL_9:
      if (a4 != 3)
      {
        if (a4 == 2)
        {
          v10 = sub_100147458(a3, a1);
          if ((_DWORD)v10)
          {
            a2 = sub_100140754((uint64_t *)a2, &v34, &v33);
            v11 = v34;
            v12 = v33;
          }
          else
          {
            v12 = 0;
            v11 = 0;
            a2 = 18;
          }
          (*(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 56))(a3, v10, v11, v12, a2);
          sub_10013B1F8(&v34, v12);
        }
        else
        {
          LOBYTE(a2) = 0;
        }
        return a2;
      }
      v13 = sub_100147458(a3, a1);
      if ((_DWORD)v13)
      {
        if (*(_BYTE *)(a2 + 14) != 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
        if (*(_BYTE *)(a2 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4052, "uint8_t AVDTPRecv_GetConfig(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
        }
        else
        {
          v29 = *(unsigned __int16 *)(a2 + 12);
          if (*(unsigned __int16 *)(a2 + 10) > v29)
          {
            v30 = *(_QWORD *)a2;
            *(_WORD *)(a2 + 12) = v29 + 1;
            v31 = *(_BYTE *)(v30 + v29);
            if (v31)
              LOBYTE(a2) = v31;
            else
              LOBYTE(a2) = 24;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + 15) = 1;
        LOBYTE(a2) = 17;
      }
      else
      {
        LOBYTE(a2) = 1;
      }
LABEL_44:
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(qword_100981A48 + 24) + 56))(a3, v13, 0, 0, a2);
      return a2;
    }
  }
  if (*(_BYTE *)(a2 + 14) != 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
  if (*(_BYTE *)(a2 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4067, "uint8_t AVDTPRecv_GetConfig(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
  }
  else
  {
    v14 = *(unsigned __int16 *)(a2 + 12);
    if (*(unsigned __int16 *)(a2 + 10) > v14)
    {
      v15 = *(_QWORD *)a2;
      *(_WORD *)(a2 + 12) = v14 + 1;
      v16 = *(unsigned __int8 *)(v15 + v14) >> 2;
      if (!*(_BYTE *)(qword_100981A48 + 96))
        goto LABEL_47;
      v17 = 0;
      v18 = *(_QWORD *)qword_100981A48;
      while (*(unsigned __int8 *)(v18 + 25) != v16)
      {
        ++v17;
        v18 += 40;
        if (*(unsigned __int8 *)(qword_100981A48 + 96) == v17)
          goto LABEL_47;
      }
      if (v17 != 255)
      {
        LODWORD(a2) = 0;
        v19 = 1;
      }
      else
      {
LABEL_47:
        v19 = 0;
        v18 = 0;
        LODWORD(a2) = 18;
      }
      goto LABEL_32;
    }
  }
  v16 = 0;
  v19 = 0;
  v18 = 0;
  *(_BYTE *)(a2 + 15) = 1;
  LODWORD(a2) = 17;
LABEL_32:
  if (sub_10005549C())
  {
    v20 = sub_1001475E4(v16, a1);
    v21 = sub_10013E130(v20);
    sub_100054530("AVDT_GetConfiguration_Rsp\n\tTransaction=%d\n\tStreamHandle=%d\n\tError=0x%.2x\n\tConfigParams=\n", a3, v21, a2);
    v22 = sub_1000544A0(3u);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v23 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v36 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (v19)
  {
    v24 = *(unsigned __int8 **)(v18 + 8);
    v25 = *(unsigned __int8 *)(v18 + 31);
    v26 = a1;
    v27 = a3;
    v28 = 0;
  }
  else
  {
    v26 = a1;
    v27 = a3;
    v24 = 0;
    v25 = 0;
    v28 = a2;
  }
  sub_100148968(v26, 4u, v27, v24, v25, v28);
  return a2;
}

uint64_t sub_100142B78(int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v50)(uint64_t, uint64_t, unsigned __int8 *, uint64_t);
  uint64_t v51;
  unsigned __int8 v52;
  unsigned __int8 *v53;
  uint8_t buf[4];
  void *v55;

  v53 = 0;
  v52 = 0;
  if (!dword_100999154)
    return 49;
  if (sub_10005549C())
  {
    v8 = a4 > 3 ? "" : (&off_10091BAA0)[(char)a4];
    sub_100054530("Received RECONFIGURE - %s", v8);
    v10 = sub_1000544A0(3u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v55 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!a2)
    sub_100253460();
  if (dword_100999154 && (v11 = *(unsigned __int8 *)(qword_100981A48 + 98), *(_BYTE *)(qword_100981A48 + 98)))
  {
    v12 = (unsigned __int16 *)(*(_QWORD *)(qword_100981A48 + 16) + 38);
    while (1)
    {
      v13 = *v12;
      v12 += 32;
      if (v13 == a1)
        break;
      if (!--v11)
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    sub_100253460();
  }
  if (!a4)
  {
    if (!*(_QWORD *)(*(_QWORD *)(qword_100981A48 + 24) + 136))
    {
      v9 = 25;
      goto LABEL_76;
    }
    if (*(_BYTE *)(a2 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    if (*(_BYTE *)(a2 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3967, "uint8_t AVDTPRecv_Reconfigure(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
    }
    else
    {
      v28 = *(unsigned __int16 *)(a2 + 12);
      if (*(unsigned __int16 *)(a2 + 10) > v28)
      {
        v29 = *(_QWORD *)a2;
        *(_WORD *)(a2 + 12) = v28 + 1;
        v30 = *(unsigned __int8 *)(v29 + v28) >> 2;
        goto LABEL_45;
      }
    }
    v30 = 0;
    *(_BYTE *)(a2 + 15) = 1;
LABEL_45:
    v9 = sub_100140754((uint64_t *)a2, (void **)&v53, &v52);
    if (!(_DWORD)v9)
    {
      v31 = sub_1001475E4(v30, a1);
      if (v31
        && (v32 = v31, v33 = *(unsigned __int8 *)(v31 + 136), v33 != 255)
        && (v34 = *(_QWORD *)qword_100981A48) != 0)
      {
        if (*(_BYTE *)(v31 + 134) == 3)
        {
          v35 = v34 + 40 * *(unsigned __int8 *)(v31 + 136);
          v37 = *(_QWORD *)(v35 + 16);
          v36 = (void **)(v35 + 16);
          if (!v37)
          {
            v38 = v53;
            v39 = v52;
            if (!sub_10013FBD0(v53, v52, *(_QWORD *)(v34 + 40 * *(unsigned __int8 *)(v31 + 136) + 8), *(unsigned __int8 *)(v34 + 40 * *(unsigned __int8 *)(v31 + 136) + 31), v36, (unsigned __int8 *)(v34 + 40 * *(unsigned __int8 *)(v31 + 136) + 32)))
            {
              v50 = *(void (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)(qword_100981A48 + 24)
                                                                                        + 136);
              v51 = sub_10013E130(v32);
              v50(a3, v51, v38, v39);
              v9 = 0;
              goto LABEL_77;
            }
          }
          v9 = 129;
        }
        else
        {
          v9 = 49;
        }
        v48 = v34 + 40 * v33;
        sub_10013B1F8((void **)(v48 + 16), *(unsigned __int8 *)(v48 + 32));
        *(_BYTE *)(v48 + 32) = 0;
      }
      else
      {
        v9 = 20;
      }
    }
LABEL_76:
    sub_100148CF8(a1, 5, a3, 0, v9);
    LODWORD(v39) = v52;
LABEL_77:
    sub_10013B1F8((void **)&v53, v39);
    return v9;
  }
  if (a4 != 3)
  {
    if (a4 != 2)
      return 0;
    v14 = sub_100147458(a3, a1);
    v15 = v14;
    v16 = qword_100981A48;
    if ((_DWORD)v14)
    {
      if (*(unsigned __int8 *)(qword_100981A48 + 97) > (unsigned __int16)(v14 - 1)
        && (v17 = *(_QWORD *)(qword_100981A48 + 8)) != 0
        && (v18 = *(unsigned __int8 *)(v17 + 144 * (unsigned __int16)(v14 - 1) + 136), v18 != 255)
        && *(_QWORD *)qword_100981A48)
      {
        v19 = *(_QWORD *)qword_100981A48 + 40 * v18;
        sub_10013B1F8((void **)(v19 + 8), *(unsigned __int8 *)(v19 + 31));
        v9 = 0;
        v20 = *(_QWORD *)(v19 + 16);
        *(_BYTE *)(v19 + 31) = *(_BYTE *)(v19 + 32);
        *(_QWORD *)(v19 + 8) = v20;
        *(_QWORD *)(v19 + 16) = 0;
        *(_BYTE *)(v19 + 32) = 0;
        v16 = qword_100981A48;
      }
      else
      {
        v9 = 0;
      }
    }
    else
    {
      v9 = 1;
    }
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 + 24) + 144);
    if (v23)
    {
      v24 = a3;
      v25 = v15;
      v26 = 0;
LABEL_73:
      v23(v24, v25, v26, v9);
      return v9;
    }
    return v9;
  }
  v21 = sub_100147458(a3, a1);
  if (!(_DWORD)v21)
  {
    v27 = 0;
    v9 = 1;
    goto LABEL_66;
  }
  if (*(_BYTE *)(a2 + 14) != 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
  if (*(_BYTE *)(a2 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3936, "uint8_t AVDTPRecv_Reconfigure(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
    v22 = *(unsigned __int8 *)(a2 + 14);
    *(_BYTE *)(a2 + 15) = 1;
    if (v22 != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    goto LABEL_58;
  }
  v40 = *(unsigned __int16 *)(a2 + 12);
  if (*(unsigned __int16 *)(a2 + 10) <= v40)
  {
    *(_BYTE *)(a2 + 15) = 1;
LABEL_58:
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 3937, "uint8_t AVDTPRecv_Reconfigure(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
    goto LABEL_59;
  }
  v41 = *(_QWORD *)a2;
  *(_WORD *)(a2 + 12) = v40 + 1;
  if (*(unsigned __int16 *)(a2 + 10) <= (v40 + 1))
  {
LABEL_59:
    v42 = 0;
    *(_BYTE *)(a2 + 15) = 1;
    v44 = 17;
    goto LABEL_60;
  }
  v42 = *(unsigned __int8 *)(v41 + v40);
  v43 = *(_QWORD *)a2;
  *(_WORD *)(a2 + 12) = v40 + 2;
  v44 = *(unsigned __int8 *)(v43 + v40 + 1);
LABEL_60:
  if (v44)
    v9 = v44;
  else
    v9 = 24;
  if (v44)
    v27 = v42;
  else
    v27 = 0;
LABEL_66:
  v45 = qword_100981A48;
  if (*(unsigned __int8 *)(qword_100981A48 + 97) > (unsigned __int16)(v21 - 1))
  {
    v46 = *(_QWORD *)(qword_100981A48 + 8);
    if (v46)
    {
      if (*(unsigned __int8 *)(v46 + 144 * (unsigned __int16)(v21 - 1) + 136) != 255 && *(_QWORD *)qword_100981A48)
      {
        v47 = *(_QWORD *)qword_100981A48 + 40 * *(unsigned __int8 *)(v46 + 144 * (unsigned __int16)(v21 - 1) + 136);
        sub_10013B1F8((void **)(v47 + 16), *(unsigned __int8 *)(v47 + 32));
        *(_BYTE *)(v47 + 32) = 0;
        v45 = qword_100981A48;
      }
    }
  }
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 + 24) + 144);
  if (v23)
  {
    v24 = a3;
    v25 = v21;
    v26 = v27;
    goto LABEL_73;
  }
  return v9;
}

uint64_t sub_1001430E8(int a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  int v34;
  NSObject *v35;
  void *v36;
  uint8_t buf[4];
  void *v39;

  if (sub_10005549C())
  {
    v8 = a4 > 3 ? "" : (&off_10091BAA0)[(char)a4];
    sub_100054530("Received OPEN - %s", v8);
    v9 = sub_1000544A0(3u);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v39 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (a2)
  {
    if (a4)
      goto LABEL_9;
  }
  else
  {
    sub_100253460();
    if (a4)
    {
LABEL_9:
      if (a4 != 3)
      {
        if (a4 == 2)
        {
          v10 = sub_100147458(a3, a1);
          v11 = v10;
          v12 = qword_100981A48;
          if (!(_DWORD)v10)
          {
            v23 = 1;
            goto LABEL_43;
          }
          if (*(unsigned __int8 *)(qword_100981A48 + 97) <= (unsigned __int16)(v10 - 1)
            || (v13 = *(_QWORD *)(qword_100981A48 + 8)) == 0)
          {
            v23 = 18;
            goto LABEL_43;
          }
          v14 = (unsigned __int16)(v10 - 1);
          v15 = v13 + 144 * (unsigned __int16)(v10 - 1);
          if (sub_10005549C())
          {
            v16 = sub_10013E130(v15);
            sub_100054530("CreateMediaTransport(%d)\n", v16);
            v17 = sub_1000544A0(3u);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              v18 = sub_100054494();
              *(_DWORD *)buf = 136446210;
              v39 = v18;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
          v19 = *(unsigned __int8 *)(v13 + 144 * v14 + 135);
          v12 = qword_100981A48;
          if (v19 == 255 || (v20 = *(_QWORD *)(qword_100981A48 + 16)) == 0)
          {
LABEL_24:
            v23 = 129;
LABEL_43:
            (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 + 24) + 64))(a3, v11, 0, v23);
            return v23;
          }
          if (sub_10005549C())
          {
            sub_100054530("Opening media channel to %:\n", v20 + (v19 << 6) + 28);
            v21 = sub_1000544A0(3u);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              v22 = sub_100054494();
              *(_DWORD *)buf = 136446210;
              v39 = v22;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
          if (sub_1001DD1A8((uint64_t)sub_100146070, (uint64_t)sub_100146280, (uint64_t)sub_100146488, 0x19u, v20 + (v19 << 6) + 28, qword_100981A48 + 64, (_WORD *)(v13 + 144 * v14 + 128), (uint64_t)&unk_10091BA30))
          {
            v12 = qword_100981A48;
            goto LABEL_24;
          }
          sub_1001DAFA4(*(unsigned __int16 *)(v13 + 144 * v14 + 128), (uint64_t)sub_1001470E8);
          *(_BYTE *)(v13 + 144 * v14 + 133) = a3;
          sub_100140030(v15, 2u);
        }
        return 0;
      }
      v24 = sub_100147458(a3, a1);
      if (*((_BYTE *)a2 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
      v11 = v24;
      if (*((_BYTE *)a2 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4144, "uint8_t AVDTPRecv_Open(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
      }
      else
      {
        v25 = *((unsigned __int16 *)a2 + 6);
        if (*((unsigned __int16 *)a2 + 5) > v25)
        {
          v26 = *a2;
          *((_WORD *)a2 + 6) = v25 + 1;
          v27 = *(unsigned __int8 *)(v26 + v25);
LABEL_37:
          if (!v27)
            v27 = 24;
          if ((_DWORD)v11)
            v23 = v27;
          else
            v23 = 1;
          v12 = qword_100981A48;
          goto LABEL_43;
        }
      }
      *((_BYTE *)a2 + 15) = 1;
      v27 = 17;
      goto LABEL_37;
    }
  }
  if (*((_BYTE *)a2 + 14) != 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
  if (*((_BYTE *)a2 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4163, "uint8_t AVDTPRecv_Open(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
  }
  else
  {
    v28 = *((unsigned __int16 *)a2 + 6);
    if (*((unsigned __int16 *)a2 + 5) > v28)
    {
      v29 = *a2;
      *((_WORD *)a2 + 6) = v28 + 1;
      v30 = sub_1001475E4(*(unsigned __int8 *)(v29 + v28) >> 2, a1);
      v31 = v30;
      if (v30 && *(_BYTE *)(v30 + 134) == 1)
      {
        sub_100140030(v30, 2u);
        v32 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 72);
        v33 = sub_10013E130(v31);
        v32(a3, v33);
        v23 = 0;
        if (!*(_BYTE *)(qword_100981A48 + 103))
          return v23;
      }
      else
      {
        v23 = 49;
      }
      goto LABEL_50;
    }
  }
  v31 = 0;
  *((_BYTE *)a2 + 15) = 1;
  v23 = 17;
LABEL_50:
  if (sub_10005549C())
  {
    v34 = sub_10013E130(v31);
    sub_100054530("AVDT_Open_Rsp\n\tTransaction=%d\n\tStreamHandle=%d\n\tError=0x%.2x\n", a3, v34, v23);
    v35 = sub_1000544A0(3u);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      v36 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v39 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  sub_100147A34(a1, 6u, a3, v23);
  return v23;
}

uint64_t sub_100143648(int a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  char v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  __int16 v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void (*v30)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  unsigned __int8 v33;
  uint8_t buf[4];
  void *v35;
  _OWORD v36[8];

  memset(v36, 0, 124);
  if (sub_10005549C())
  {
    v8 = a4 > 3 ? "" : (&off_10091BAA0)[(char)a4];
    sub_100054530("Received START - %s", v8);
    v9 = sub_1000544A0(3u);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v35 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!a2)
    sub_100253460();
  v33 = 0;
  if (a4)
  {
    if (a4 != 3)
    {
      LOBYTE(v10) = 0;
      if (a4 == 2)
      {
        sub_100147678(a3, a1, v36, &v33);
        v11 = v33;
        if (v33)
        {
          sub_1001473D0((__int16 *)v36, v33, 4u);
          v10 = 0;
        }
        else
        {
          v10 = 1;
        }
        (*(void (**)(uint64_t, _OWORD *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 104))(a3, v36, v11, 0, v10);
      }
      return v10;
    }
    sub_100147678(a3, a1, v36, &v33);
    v14 = v33;
    if (v33)
    {
      if (*((_BYTE *)a2 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
      if (*((_BYTE *)a2 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4230, "uint8_t AVDTPRecv_Start(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
        v15 = *((unsigned __int8 *)a2 + 14);
        *((_BYTE *)a2 + 15) = 1;
        if (v15 != 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
        goto LABEL_54;
      }
      v22 = *((unsigned __int16 *)a2 + 6);
      if (*((unsigned __int16 *)a2 + 5) <= v22)
      {
        *((_BYTE *)a2 + 15) = 1;
LABEL_54:
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4231, "uint8_t AVDTPRecv_Start(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
        v21 = 0;
        goto LABEL_55;
      }
      v23 = *a2;
      *((_WORD *)a2 + 6) = v22 + 1;
      v21 = *(unsigned __int8 *)(v23 + v22) >> 2;
      if (*((unsigned __int16 *)a2 + 5) <= (v22 + 1))
      {
LABEL_55:
        *((_BYTE *)a2 + 15) = 1;
LABEL_56:
        v10 = 24;
        goto LABEL_57;
      }
      v24 = *a2;
      *((_WORD *)a2 + 6) = v22 + 2;
      if (*(unsigned __int8 *)(v24 + v22 + 1) == 255)
      {
        v10 = 255;
        goto LABEL_57;
      }
      if (!*(_BYTE *)(v24 + v22 + 1))
        goto LABEL_56;
      v10 = 253;
    }
    else
    {
      v21 = 0;
      v10 = 1;
    }
LABEL_57:
    v30 = *(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 104);
    v31 = sub_1001476DC(v21, a1);
    v30(a3, v36, v14, v31, v10);
    return v10;
  }
  if (*((_BYTE *)a2 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4260, "uint8_t AVDTPRecv_Start(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
    v12 = 0;
LABEL_16:
    v13 = 0;
    LOBYTE(v10) = 24;
    goto LABEL_26;
  }
  v16 = *((_WORD *)a2 + 5);
  v17 = *((_WORD *)a2 + 6);
  v12 = v16 - v17;
  if ((v16 - v17) > 0x3Eu)
  {
    v13 = 0;
    LOBYTE(v10) = -127;
    goto LABEL_26;
  }
  if (*((_WORD *)a2 + 5) == v17)
    goto LABEL_16;
  if ((_BYTE)v16 == (_BYTE)v17)
  {
    v12 = 0;
    LOBYTE(v10) = 0;
    v13 = 0;
    goto LABEL_26;
  }
  v25 = 0;
  v13 = 0;
  LOBYTE(v10) = 0;
  while (1)
  {
    if (*((_BYTE *)a2 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    if (*((_BYTE *)a2 + 15))
      break;
    v26 = *((unsigned __int16 *)a2 + 6);
    if (*((unsigned __int16 *)a2 + 5) <= v26)
      goto LABEL_61;
    v27 = *a2;
    *((_WORD *)a2 + 6) = v26 + 1;
    v28 = *(unsigned __int8 *)(v27 + v26) >> 2;
    v29 = sub_1001475E4(v28, a1);
    *((_WORD *)v36 + v25) = sub_10013E130(v29);
    if (!v29)
    {
      LOBYTE(v10) = 18;
LABEL_50:
      v12 = ++v25;
      v13 = v28;
      goto LABEL_51;
    }
    if (*(_BYTE *)(v29 + 134) != 3)
    {
      LOBYTE(v10) = 49;
      goto LABEL_50;
    }
    ++v25;
LABEL_51:
    if (v25 >= v12)
      goto LABEL_26;
  }
  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4268, "uint8_t AVDTPRecv_Start(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
LABEL_61:
  *((_BYTE *)a2 + 15) = 1;
  LOBYTE(v10) = 17;
  v12 = v25;
LABEL_26:
  if (sub_10005549C())
  {
    sub_100054530("AVDT_Start_Ind\n\tTransaction=%d\n\tStreamHandles=", a3);
    v18 = sub_1000544A0(3u);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v35 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v20 = qword_100981A48;
  if (*(unsigned __int8 *)(qword_100981A48 + 103) | v10)
  {
    sub_10013EA4C(a1, a3, (__int16 *)v36, v12, v13, v10);
    if (!(_BYTE)v10)
    {
      v20 = qword_100981A48;
      goto LABEL_32;
    }
  }
  else
  {
LABEL_32:
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)(v20 + 24) + 96))(a3, v36, v12);
    LOBYTE(v10) = 0;
  }
  return v10;
}

uint64_t sub_100143B74(int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  _WORD *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  NSObject *v32;
  void *v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint8_t buf[4];
  void *v42;

  if (sub_10005549C())
  {
    v8 = a4 > 3 ? "" : (&off_10091BAA0)[(char)a4];
    sub_100054530("Received CLOSE - %s", v8);
    v9 = sub_1000544A0(3u);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v42 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (a2)
  {
    if (a4)
      goto LABEL_9;
LABEL_23:
    if (*(_BYTE *)(a2 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    if (*(_BYTE *)(a2 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4382, "uint8_t AVDTPRecv_Close(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
    }
    else
    {
      v25 = *(unsigned __int16 *)(a2 + 12);
      if (*(unsigned __int16 *)(a2 + 10) > v25)
      {
        v26 = *(_QWORD *)a2;
        *(_WORD *)(a2 + 12) = v25 + 1;
        v27 = sub_1001475E4(*(unsigned __int8 *)(v26 + v25) >> 2, a1);
        v28 = v27;
        if (v27)
        {
          if (*(unsigned __int8 *)(v27 + 134) - 3 <= 1)
          {
            if (*(_WORD *)(v27 + 128))
              sub_100140030(v27, 5u);
            else
              sub_10013F014(v27);
            v34 = qword_100981A48;
            if (!*(_BYTE *)(qword_100981A48 + 103))
            {
              LOBYTE(a2) = 0;
              goto LABEL_47;
            }
            v29 = 0;
            LODWORD(a2) = 0;
            v30 = 1;
LABEL_42:
            if (sub_10005549C())
            {
              v31 = sub_10013E130(v28);
              sub_100054530("AVDT_Close_Rsp\n\tTransaction=%d\n\tStreamHandle=%d\n\tErrorCode=0x%.2x\n", a3, v31, v29);
              v32 = sub_1000544A0(3u);
              if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
              {
                v33 = sub_100054494();
                *(_DWORD *)buf = 136446210;
                v42 = v33;
                _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
              }
            }
            sub_100147A34(a1, 8u, a3, a2);
            if (!v30)
              return a2;
            v34 = qword_100981A48;
LABEL_47:
            v35 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 + 24) + 80);
            v36 = sub_10013E130(v28);
            v35(a3, v36);
            return a2;
          }
          v29 = 49;
        }
        else
        {
          v29 = 18;
        }
LABEL_41:
        v30 = 0;
        LODWORD(a2) = v29;
        goto LABEL_42;
      }
    }
    v28 = 0;
    *(_BYTE *)(a2 + 15) = 1;
    v29 = 17;
    goto LABEL_41;
  }
  sub_100253460();
  if (!a4)
    goto LABEL_23;
LABEL_9:
  if (a4 == 3)
  {
    v24 = sub_100147458(a3, a1);
    if ((_DWORD)v24)
    {
      if (*(_BYTE *)(a2 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
      if (*(_BYTE *)(a2 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4364, "uint8_t AVDTPRecv_Close(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
      }
      else
      {
        v37 = *(unsigned __int16 *)(a2 + 12);
        if (*(unsigned __int16 *)(a2 + 10) > v37)
        {
          v38 = *(_QWORD *)a2;
          *(_WORD *)(a2 + 12) = v37 + 1;
          v39 = *(_BYTE *)(v38 + v37);
          if (v39)
            LOBYTE(a2) = v39;
          else
            LOBYTE(a2) = 24;
          goto LABEL_53;
        }
      }
      *(_BYTE *)(a2 + 15) = 1;
      LOBYTE(a2) = 17;
    }
    else
    {
      LOBYTE(a2) = 1;
    }
LABEL_53:
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(qword_100981A48 + 24) + 88))(a3, v24, a2);
    return a2;
  }
  if (a4 == 2)
  {
    v10 = sub_100147458(a3, a1);
    v11 = v10;
    v12 = qword_100981A48;
    if ((_DWORD)v10)
    {
      if (*(unsigned __int8 *)(qword_100981A48 + 97) > (unsigned __int16)(v10 - 1)
        && (v13 = *(_QWORD *)(qword_100981A48 + 8)) != 0)
      {
        v14 = (unsigned __int16)(v10 - 1);
        v15 = v13 + 144 * (unsigned __int16)(v10 - 1);
        sub_100140030(v15, 5u);
        if (sub_10005549C())
        {
          sub_100054530("Disconnecting media transport");
          v16 = sub_1000544A0(3u);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            v17 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v42 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        v18 = v13 + 144 * v14;
        v20 = *(unsigned __int16 *)(v18 + 128);
        v19 = (_WORD *)(v18 + 128);
        v21 = sub_1001DEB7C(v20, 436);
        if (!(_DWORD)v21)
        {
          LOBYTE(a2) = 0;
          *(_BYTE *)(v13 + 144 * v14 + 133) = a3;
          return a2;
        }
        v22 = v21;
        if (sub_10005549C())
        {
          sub_100054530("Error disconnecting media transport - %!", v22);
          v23 = sub_1000544A0(3u);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        *v19 = 0;
        sub_10011C134(0);
        sub_10013F014(v15);
        v12 = qword_100981A48;
        a2 = 49;
      }
      else
      {
        a2 = 18;
      }
    }
    else
    {
      a2 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 + 24) + 88))(a3, v11, a2);
  }
  else
  {
    LOBYTE(a2) = 0;
  }
  return a2;
}

uint64_t sub_100144098(int a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  char v13;
  uint64_t v14;
  int v15;
  void (*v16)(uint64_t, _OWORD *, uint64_t, _QWORD, uint64_t);
  __int16 v17;
  __int16 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD);
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint8_t buf[4];
  void *v34;
  _OWORD v35[8];

  memset(v35, 0, 124);
  if (sub_10005549C())
  {
    v8 = a4 > 3 ? "" : (&off_10091BAA0)[(char)a4];
    sub_100054530("Received SUSPEND - %s", v8);
    v9 = sub_1000544A0(3u);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v34 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!a2)
    sub_100253460();
  buf[0] = 0;
  if (a4)
  {
    if (a4 != 3)
    {
      LOBYTE(v10) = 0;
      if (a4 == 2)
      {
        sub_100147678(a3, a1, v35, buf);
        v11 = buf[0];
        if (buf[0])
        {
          sub_1001473D0((__int16 *)v35, buf[0], 3u);
          v10 = 0;
        }
        else
        {
          v10 = 1;
        }
        v16 = *(void (**)(uint64_t, _OWORD *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(qword_100981A48 + 24)
                                                                                 + 120);
        if (v16)
          v16(a3, v35, v11, 0, v10);
      }
      return v10;
    }
    sub_100147678(a3, a1, v35, buf);
    v14 = buf[0];
    if (!buf[0])
    {
      v20 = 0;
      LOBYTE(v10) = 1;
      goto LABEL_42;
    }
    if (*((_BYTE *)a2 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    if (*((_BYTE *)a2 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4456, "uint8_t AVDTPRecv_Suspend(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
      v15 = *((unsigned __int8 *)a2 + 14);
      *((_BYTE *)a2 + 15) = 1;
      if (v15 != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    }
    else
    {
      v21 = *((unsigned __int16 *)a2 + 6);
      if (*((unsigned __int16 *)a2 + 5) > v21)
      {
        v22 = *a2;
        v23 = v21 + 1;
        *((_WORD *)a2 + 6) = v21 + 1;
        v20 = *(unsigned __int8 *)(v22 + v21) >> 2;
        if (*((unsigned __int16 *)a2 + 5) > (v21 + 1))
        {
          v24 = *a2;
          *((_WORD *)a2 + 6) = v21 + 2;
          if (*(_BYTE *)(v24 + v23))
            LOBYTE(v10) = *(_BYTE *)(v24 + v23);
          else
            LOBYTE(v10) = 24;
LABEL_42:
          v25 = *(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(qword_100981A48 + 24)
                                                                                   + 120);
          if (v25)
          {
            v26 = sub_1001476DC(v20, a1);
            v25(a3, v35, v14, v26, v10);
          }
          return v10;
        }
LABEL_41:
        *((_BYTE *)a2 + 15) = 1;
        LOBYTE(v10) = 17;
        goto LABEL_42;
      }
      *((_BYTE *)a2 + 15) = 1;
    }
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4457, "uint8_t AVDTPRecv_Suspend(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
    v20 = 0;
    goto LABEL_41;
  }
  if (*((_BYTE *)a2 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4482, "uint8_t AVDTPRecv_Suspend(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
    v12 = 0;
    v13 = 0;
    if (*(_QWORD *)(*(_QWORD *)(qword_100981A48 + 24) + 112))
      LOBYTE(v10) = 24;
    else
      LOBYTE(v10) = 25;
    goto LABEL_18;
  }
  v17 = *((_WORD *)a2 + 5);
  v18 = *((_WORD *)a2 + 6);
  v12 = v17 - v18;
  v19 = qword_100981A48;
  if (!*(_QWORD *)(*(_QWORD *)(qword_100981A48 + 24) + 112))
  {
    v13 = 0;
    LOBYTE(v10) = 25;
    goto LABEL_18;
  }
  if ((v17 - v18) > 0x3Eu)
  {
    v13 = 0;
    LOBYTE(v10) = -127;
    goto LABEL_18;
  }
  if (*((_WORD *)a2 + 5) == v18)
  {
    v13 = 0;
    LOBYTE(v10) = 24;
    goto LABEL_18;
  }
  if ((_BYTE)v17 == (_BYTE)v18)
  {
    v12 = 0;
    LOBYTE(v10) = 0;
    v13 = 0;
LABEL_59:
    if (*(unsigned __int8 *)(v19 + 103) | v10)
    {
      sub_10013F810(a1, a3, (__int16 *)v35, v12, v13, v10);
      if ((_BYTE)v10)
        return v10;
      v19 = qword_100981A48;
    }
    (*(void (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)(v19 + 24) + 112))(a3, v35, v12);
    LOBYTE(v10) = 0;
    return v10;
  }
  v28 = 0;
  v13 = 0;
  LOBYTE(v10) = 0;
  while (1)
  {
    if (*((_BYTE *)a2 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    if (*((_BYTE *)a2 + 15))
      break;
    v29 = *((unsigned __int16 *)a2 + 6);
    if (*((unsigned __int16 *)a2 + 5) <= v29)
      goto LABEL_64;
    v30 = *a2;
    *((_WORD *)a2 + 6) = v29 + 1;
    v31 = *(unsigned __int8 *)(v30 + v29) >> 2;
    v32 = sub_1001475E4(v31, a1);
    *((_WORD *)v35 + v28) = sub_10013E130(v32);
    if (!v32)
    {
      LOBYTE(v10) = 18;
LABEL_55:
      v12 = ++v28;
      v13 = v31;
      goto LABEL_56;
    }
    if (*(_BYTE *)(v32 + 134) != 4)
    {
      LOBYTE(v10) = 49;
      goto LABEL_55;
    }
    ++v28;
LABEL_56:
    if (v28 >= v12)
    {
      v19 = qword_100981A48;
      goto LABEL_59;
    }
  }
  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4493, "uint8_t AVDTPRecv_Suspend(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
LABEL_64:
  *((_BYTE *)a2 + 15) = 1;
  LOBYTE(v10) = 17;
  v12 = v28;
LABEL_18:
  sub_10013F810(a1, a3, (__int16 *)v35, v12, v13, v10);
  return v10;
}

uint64_t sub_1001445A8(int a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint8_t *, uint64_t, _QWORD, uint64_t);
  unsigned __int8 v10;
  uint8_t buf[16];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _DWORD v17[7];

  if (sub_10005549C())
  {
    sub_100054530("Received TRANSITION");
    v5 = sub_1000544A0(3u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v16 = 0u;
  memset(v17, 0, sizeof(v17));
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  *(_OWORD *)buf = 0u;
  v10 = 0;
  sub_100147678(a3, a1, buf, &v10);
  v6 = v10;
  if (v10)
  {
    sub_1001473D0((__int16 *)buf, v10, 3u);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  v8 = *(void (**)(uint64_t, uint8_t *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 128);
  if (v8)
    v8(a3, buf, v6, 0, v7);
  return v7;
}

uint64_t sub_1001446F4(int a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  _WORD *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint8_t buf[4];
  void *v38;

  if (sub_10005549C())
  {
    v8 = a4 > 3 ? "" : (&off_10091BAA0)[(char)a4];
    sub_100054530("Received ABORT - %s", v8);
    v9 = sub_1000544A0(3u);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v38 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (a2)
  {
    if (a4)
      goto LABEL_9;
LABEL_15:
    if (*(_BYTE *)(qword_100981A48 + 103))
      sub_100147A34(a1, 0xAu, a3, 0);
    if (*((_BYTE *)a2 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    if (*((_BYTE *)a2 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4657, "uint8_t AVDTPRecv_Abort(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
    }
    else
    {
      v28 = *((unsigned __int16 *)a2 + 6);
      if (*((unsigned __int16 *)a2 + 5) > v28)
      {
        v29 = *a2;
        *((_WORD *)a2 + 6) = v28 + 1;
        v30 = sub_1001475E4(*(unsigned __int8 *)(v29 + v28) >> 2, a1);
        if (!v30)
          return 18;
        v31 = v30;
        sub_100140030(v30, 6u);
        v32 = sub_10013E130(v31);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 168))(a3, v32);
        if (*(_BYTE *)(qword_100981A48 + 103))
        {
          v33 = sub_1001DEB7C(*(unsigned __int16 *)(v31 + 128), 436);
          if ((_DWORD)v33)
          {
            if (*(_WORD *)(v31 + 128))
            {
              v34 = v33;
              if (sub_10005549C())
              {
                sub_100054530("Error disconnecting media transport - %!", v34);
                v35 = sub_1000544A0(3u);
                if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
                  sub_1006CE7A4();
              }
              *(_WORD *)(v31 + 128) = 0;
              sub_10011C134(0);
            }
            sub_10013F014(v31);
            (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(qword_100981A48 + 24) + 176))(a3, v32, 0);
          }
        }
        return 0;
      }
    }
    *((_BYTE *)a2 + 15) = 1;
    return 17;
  }
  sub_100253460();
  if (!a4)
    goto LABEL_15;
LABEL_9:
  if (a4 == 2)
    goto LABEL_27;
  if (a4 != 3)
    return 0;
  if (*((_BYTE *)a2 + 14) != 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
  if (*((_BYTE *)a2 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4579, "uint8_t AVDTPRecv_Abort(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
  }
  else
  {
    v10 = *((unsigned __int16 *)a2 + 6);
    if (*((unsigned __int16 *)a2 + 5) > v10)
    {
      v11 = *a2;
      *((_WORD *)a2 + 6) = v10 + 1;
      v12 = *(unsigned __int8 *)(v11 + v10);
      if (v12 == 255)
        goto LABEL_27;
      goto LABEL_24;
    }
  }
  *((_BYTE *)a2 + 15) = 1;
  v12 = 17;
LABEL_24:
  if (sub_10005549C())
  {
    sub_100054530("Remote Abort Reject RXed (illegal) - %d", v12);
    v13 = sub_1000544A0(3u);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
LABEL_27:
  v14 = sub_100147458(a3, a1);
  v15 = v14;
  if ((_DWORD)v14)
  {
    if (*(unsigned __int8 *)(qword_100981A48 + 97) > (unsigned __int16)(v14 - 1))
    {
      v16 = *(_QWORD *)(qword_100981A48 + 8);
      if (v16)
      {
        v17 = (unsigned __int16)(v14 - 1);
        sub_100140030(v16 + 144 * (unsigned __int16)(v14 - 1), 6u);
        if (sub_10005549C())
        {
          sub_100054530("Disconnecting media transport");
          v18 = sub_1000544A0(3u);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            v19 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            v38 = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        v20 = v16 + 144 * v17;
        v22 = *(unsigned __int16 *)(v20 + 128);
        v21 = (_WORD *)(v20 + 128);
        v23 = sub_1001DEB7C(v22, 436);
        if (!(_DWORD)v23)
        {
          v26 = 0;
          *(_BYTE *)(v16 + 144 * v17 + 133) = a3;
          return v26;
        }
        if (*v21)
        {
          v24 = v23;
          if (sub_10005549C())
          {
            sub_100054530("Error disconnecting media transport - %!", v24);
            v25 = sub_1000544A0(3u);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
          *v21 = 0;
          sub_10011C134(0);
        }
        sub_10013F014(v16 + 144 * v17);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(qword_100981A48 + 24) + 176))(a3, v15, 0);
        return 0;
      }
    }
    v26 = 18;
  }
  else
  {
    v26 = 1;
  }
  if (sub_10005549C())
  {
    sub_100054530("Abort Accept RXed for unknown endpoint. transaction: %d", a3);
    v27 = sub_1000544A0(3u);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(qword_100981A48 + 24) + 176))(a3, v15, 0);
  return v26;
}

uint64_t sub_100144C3C(int a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 v30;
  int v31;
  NSObject *v32;
  void *v33;
  uint8_t buf[4];
  void *v36;

  if (sub_10005549C())
  {
    v8 = a4 > 3 ? "" : (&off_10091BAA0)[(char)a4];
    sub_100054530("Received SECURITY CONTROL - %s", v8);
    v9 = sub_1000544A0(3u);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v36 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (a2)
  {
    if (a4)
      goto LABEL_9;
  }
  else
  {
    sub_100253460();
    if (a4)
    {
LABEL_9:
      if (a4 != 3)
      {
        if (a4 == 2)
        {
          v10 = sub_100147458(a3, a1);
          v11 = (_DWORD)v10 == 0;
          v12 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(qword_100981A48 + 24)
                                                                                  + 160);
          if (v12)
          {
            v13 = v10;
            v14 = *((unsigned __int16 *)a2 + 6);
            v15 = *a2 + v14;
            if (*((_BYTE *)a2 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4724, "uint8_t AVDTPRecv_SecurityControl(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
              v16 = 0;
            }
            else
            {
              v16 = *((_WORD *)a2 + 5) - v14;
            }
            v12(a3, v13, v15, v16, v11);
          }
          return v11;
        }
LABEL_48:
        LOBYTE(v11) = 0;
        return v11;
      }
      v18 = sub_100147458(a3, a1);
      if (!(_DWORD)v18)
      {
        LOBYTE(v11) = 1;
        goto LABEL_32;
      }
      if (*((_BYTE *)a2 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
      if (*((_BYTE *)a2 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4734, "uint8_t AVDTPRecv_SecurityControl(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
      }
      else
      {
        v20 = *((unsigned __int16 *)a2 + 6);
        if (*((unsigned __int16 *)a2 + 5) > v20)
        {
          v21 = *a2;
          *((_WORD *)a2 + 6) = v20 + 1;
          v22 = *(_BYTE *)(v21 + v20);
          if (v22)
            LOBYTE(v11) = v22;
          else
            LOBYTE(v11) = 24;
LABEL_32:
          v23 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(qword_100981A48 + 24)
                                                                                + 160);
          if (v23)
            v23(a3, v18, 0, 0, v11);
          return v11;
        }
      }
      *((_BYTE *)a2 + 15) = 1;
      LOBYTE(v11) = 17;
      goto LABEL_32;
    }
  }
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(qword_100981A48 + 24) + 152);
  if (v17)
  {
    if (*((_BYTE *)a2 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    if (*((_BYTE *)a2 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4757, "uint8_t AVDTPRecv_SecurityControl(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
    }
    else
    {
      v24 = *((unsigned __int16 *)a2 + 6);
      if (*((unsigned __int16 *)a2 + 5) > v24)
      {
        v25 = *a2;
        *((_WORD *)a2 + 6) = v24 + 1;
        v26 = sub_1001475E4(*(unsigned __int8 *)(v25 + v24) >> 2, a1);
        v19 = v26;
        if (v26)
        {
          if (*(_BYTE *)(v26 + 134))
          {
            v27 = sub_10013E130(v26);
            v28 = *((unsigned __int16 *)a2 + 6);
            v29 = *a2 + v28;
            if (*((_BYTE *)a2 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4788, "uint8_t AVDTPRecv_SecurityControl(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
              v30 = 0;
            }
            else
            {
              v30 = *((_WORD *)a2 + 5) - v28;
            }
            v17(a3, v27, v29, v30);
            goto LABEL_48;
          }
          LODWORD(v11) = 49;
        }
        else
        {
          LODWORD(v11) = 18;
        }
        goto LABEL_40;
      }
    }
    v19 = 0;
    *((_BYTE *)a2 + 15) = 1;
    LODWORD(v11) = 17;
  }
  else
  {
    v19 = 0;
    LODWORD(v11) = 25;
  }
LABEL_40:
  if (sub_10005549C())
  {
    v31 = sub_10013E130(v19);
    sub_100054530("AVDT_Security_Control_Rsp\n\tTransaction=%d\n\tStream Handle=%d\n\tData Length=0\n\tError=%d\n", a3, v31, v11);
    v32 = sub_1000544A0(3u);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v33 = sub_100054494();
      *(_DWORD *)buf = 136446210;
      v36 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  sub_100148DAC(a1, a3, 0, 0, v11);
  return v11;
}

uint64_t sub_10014507C(int a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t result;
  int v12;
  NSObject *v13;
  _BOOL4 v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  NSObject *v25;
  uint8_t buf[4];
  void *v27;

  if (sub_10005549C())
  {
    v8 = a4 > 3 ? "" : (&off_10091BAA0)[(char)a4];
    sub_100054530("Received Delay Report - %s", v8);
    v9 = sub_1000544A0(3u);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v27 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (!a2)
    sub_100253460();
  switch(a4)
  {
    case 3u:
      if (sub_10005549C())
      {
        sub_100054530("Source rejected the delay report indication");
        v10 = sub_1000544A0(3u);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 25;
    case 2u:
      v12 = sub_10005549C();
      result = 0;
      if (v12)
      {
        sub_100054530("Source accepted the delay report indication");
        v13 = sub_1000544A0(3u);
        v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (v14)
        {
          v15 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          v27 = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          return 0;
        }
      }
      return result;
    case 0u:
      if (*((_BYTE *)a2 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
      if (*((_BYTE *)a2 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4905, "uint8_t AVDTPRecv_DelayReport(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
LABEL_30:
        *((_BYTE *)a2 + 15) = 1;
        return 17;
      }
      v17 = *((unsigned __int16 *)a2 + 6);
      if (*((unsigned __int16 *)a2 + 5) <= v17)
        goto LABEL_30;
      v18 = *a2;
      *((_WORD *)a2 + 6) = v17 + 1;
      v19 = sub_1001475E4(*(unsigned __int8 *)(v18 + v17) >> 2, a1);
      if (!v19)
        return 18;
      v20 = sub_10013E130(v19);
      if (*((_BYTE *)a2 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
      v21 = v20;
      if (*((_BYTE *)a2 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4918, "uint8_t AVDTPRecv_DelayReport(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
      }
      else
      {
        v22 = *((unsigned __int16 *)a2 + 6);
        if (*((unsigned __int16 *)a2 + 5) - (int)v22 >= 2)
        {
          v23 = bswap32(*(unsigned __int16 *)(*a2 + v22)) >> 16;
          *((_WORD *)a2 + 6) = v22 + 2;
          goto LABEL_35;
        }
      }
      v23 = 0;
      *((_BYTE *)a2 + 15) = 1;
LABEL_35:
      v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 208);
      if (v24)
      {
        v24(v21, a3, v23);
        return 0;
      }
      result = sub_10005549C();
      if ((_DWORD)result)
      {
        sub_100054530("avdtp delay reporting callback has not been registered!");
        v25 = sub_1000544A0(3u);
        result = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
        if ((_DWORD)result)
          goto LABEL_24;
      }
      return result;
  }
  result = sub_10005549C();
  if ((_DWORD)result)
  {
    sub_100054530("Bad message type for delay reporting");
    v16 = sub_1000544A0(3u);
    result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
LABEL_24:
      sub_1006CE7A4();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100145420(int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  const char *v8;
  NSObject *v9;
  void (*v10)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t);
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void (*v15)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  NSObject *v27;
  void *v28;
  unsigned __int8 *v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int16 v34;
  unsigned __int8 v35;
  _BYTE buf[24];

  v6 = a2;
  if (!a2)
    sub_100253460();
  if (sub_10005549C())
  {
    v8 = a4 > 3 ? "" : (&off_10091BAA0)[(char)a4];
    sub_100054530("Received GET ALL CAPS - %s", v8);
    v9 = sub_1000544A0(3u);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v34 = 0;
  if (sub_10013B3A8(a1, &v34))
    sub_100253460();
  if (!a4)
  {
    if (*(_BYTE *)(v6 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    if (*(_BYTE *)(v6 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4842, "uint8_t AVDTPRecv_GetAllCaps(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
    }
    else
    {
      v16 = *(unsigned __int16 *)(v6 + 12);
      if (*(unsigned __int16 *)(v6 + 10) > v16)
      {
        v17 = *(_QWORD *)v6;
        *(_WORD *)(v6 + 12) = v16 + 1;
        v18 = *(unsigned __int8 *)(v17 + v16) >> 2;
        if (*(_BYTE *)(qword_100981A48 + 96))
        {
          v19 = 0;
          v20 = (unsigned __int8 *)(*(_QWORD *)qword_100981A48 + 31);
          while (*(v20 - 6) != v18)
          {
            v20 += 40;
            if (*(unsigned __int8 *)(qword_100981A48 + 96) == ++v19)
              goto LABEL_39;
          }
          if (v19 != 255)
          {
            if (*(v20 - 4) || !*(_QWORD *)(v20 - 23) || *(v20 - 3) == 1)
            {
              if (sub_10005549C())
              {
                sub_100054530("Returning All Capabilities");
                v22 = sub_1000544A0(3u);
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  v23 = sub_100054494();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = v23;
                  _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                }
              }
              if (*(v20 - 1))
              {
                v24 = 0;
                v25 = 0;
                do
                {
                  sub_100145998(a1, *(_QWORD *)(v20 - 31) + v24);
                  ++v25;
                  v26 = *(v20 - 1);
                  v24 += 16;
                }
                while (v25 < v26);
              }
              else
              {
                LODWORD(v26) = 0;
              }
              v29 = *(unsigned __int8 **)(v20 - 31);
              v30 = a1;
              v31 = 12;
              v32 = a3;
            }
            else
            {
              if (sub_10005549C())
              {
                sub_100054530("2-Play Source: Returning Config as Caps");
                v27 = sub_1000544A0(3u);
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                {
                  v28 = sub_100054494();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = v28;
                  _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                }
              }
              v29 = *(unsigned __int8 **)(v20 - 23);
              LODWORD(v26) = *v20;
              v30 = a1;
              v31 = 2;
              v32 = a3;
            }
            sub_100148968(v30, v31, v32, v29, v26, 0);
            goto LABEL_60;
          }
        }
LABEL_39:
        if (sub_10005549C())
        {
          sub_100054530("Get caps received for unknown seid %d", v18);
          v21 = sub_1000544A0(3u);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        LODWORD(v6) = 18;
LABEL_37:
        sub_100148968(a1, 0xCu, a3, 0, 0, v6);
        return v6;
      }
    }
    *(_BYTE *)(v6 + 15) = 1;
    LODWORD(v6) = 17;
    goto LABEL_37;
  }
  if (a4 != 3)
  {
    if (a4 == 2)
    {
      *(_QWORD *)buf = 0;
      v35 = 0;
      v6 = sub_100140754((uint64_t *)v6, (void **)buf, &v35);
      v10 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(qword_100981A48 + 24)
                                                                                    + 200);
      v11 = v35;
      if (v10)
        v10(a3, v34, *(unsigned __int8 *)(qword_100981A48 + 99), *(_QWORD *)buf, v35, v6);
      sub_10013B1F8((void **)buf, v11);
      return v6;
    }
LABEL_60:
    LOBYTE(v6) = 0;
    return v6;
  }
  if (*(_BYTE *)(v6 + 14) != 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
  if (*(_BYTE *)(v6 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 4824, "uint8_t AVDTPRecv_GetAllCaps(OI_L2CAP_CID, OI_BYTE_STREAM *, uint8_t, uint8_t)");
LABEL_27:
    *(_BYTE *)(v6 + 15) = 1;
    LOBYTE(v6) = 17;
    goto LABEL_28;
  }
  v12 = *(unsigned __int16 *)(v6 + 12);
  if (*(unsigned __int16 *)(v6 + 10) <= v12)
    goto LABEL_27;
  v13 = *(_QWORD *)v6;
  *(_WORD *)(v6 + 12) = v12 + 1;
  v14 = *(_BYTE *)(v13 + v12);
  if (v14)
    LOBYTE(v6) = v14;
  else
    LOBYTE(v6) = 24;
LABEL_28:
  v15 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(qword_100981A48 + 24)
                                                                               + 200);
  if (v15)
    v15(a3, v34, *(unsigned __int8 *)(qword_100981A48 + 99), 0, 0, v6);
  return v6;
}

uint64_t sub_1001458FC(int a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  unsigned __int16 v7;

  v7 = 0;
  v4 = sub_10013B4F4(a1, &v7);
  if ((_DWORD)v4)
  {
    if (sub_10005549C())
    {
      sub_100054530("OI_AVDTP_Disable48KHz failed to obtain CID for A2DP handle %d", a1);
      v5 = sub_1000544A0(3u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  else
  {
    *(_DWORD *)(sub_10013B704(v7) + 52) = a2;
  }
  return v4;
}

void sub_100145998(int a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  char *v9;
  char v10;
  _BYTE *v11;
  char v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  NSObject *v19;
  void *v20;
  uint8_t buf[4];
  void *v22;

  if (*(_BYTE *)a2 == 7)
  {
    v3 = sub_10013B704(a1);
    if (v3)
    {
      v4 = *(_DWORD *)(v3 + 52);
    }
    else
    {
      if (sub_10005549C())
      {
        sub_100054530("OI_AVDTP_Update48KHzCap was not able to read the disable48KHz signal");
        v5 = sub_1000544A0(3u);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      v4 = -1;
    }
    if (sub_10005549C())
    {
      sub_100054530("AVDTP_Update48KHzCap: disable48KHz is %x, codec is %x, codecData.dataLen is %x", v4, *(unsigned __int8 *)(a2 + 2), *(unsigned __int8 *)(a2 + 3));
      v6 = sub_1000544A0(3u);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v22 = sub_100054494();
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    if (*(_BYTE *)(a2 + 2) == 2)
    {
      if (sub_10005549C())
      {
        sub_100054530("AVDTP_Update48KHzCap: AAC-LC codecData->data[1] was %x, [2] was %x", *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 1), *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 2));
        v13 = sub_1000544A0(3u);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          v14 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          v22 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      v15 = *(_QWORD *)(a2 + 8);
      v16 = *(_BYTE *)(v15 + 1);
      if ((v4 & 2) != 0)
      {
        *(_BYTE *)(v15 + 1) = v16 | 1;
        v17 = *(_QWORD *)(a2 + 8);
        v18 = *(_BYTE *)(v17 + 2) & 0x7F;
      }
      else
      {
        *(_BYTE *)(v15 + 1) = v16 & 0xFE;
        v17 = *(_QWORD *)(a2 + 8);
        v18 = *(_BYTE *)(v17 + 2) | 0x80;
      }
      *(_BYTE *)(v17 + 2) = v18;
      if (sub_10005549C())
      {
        sub_100054530("AVDTP_Update48KHzCap: AAC-LC codecData->data[1] updated to %x, [2] to %x", *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 1), *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + 2));
        v19 = sub_1000544A0(3u);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          goto LABEL_33;
      }
    }
    else if (*(_BYTE *)(a2 + 2))
    {
      if (sub_10005549C())
      {
        sub_100054530("AVDTP_Update48KHzCap: codecData->data remains untouched for this codec type");
        v19 = sub_1000544A0(3u);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
LABEL_33:
          v20 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          v22 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
    }
    else
    {
      if (sub_10005549C())
      {
        sub_100054530("AVDTP_Update48KHzCap: SBC codecData->data[0] was %x", **(unsigned __int8 **)(a2 + 8));
        v7 = sub_1000544A0(3u);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v8 = sub_100054494();
          *(_DWORD *)buf = 136446210;
          v22 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      v9 = *(char **)(a2 + 8);
      v10 = *v9;
      if ((v4 & 1) != 0)
      {
        *v9 = v10 | 0x20;
        v11 = *(_BYTE **)(a2 + 8);
        v12 = *v11 & 0xEF;
      }
      else
      {
        *v9 = v10 & 0xDF;
        v11 = *(_BYTE **)(a2 + 8);
        v12 = *v11 | 0x10;
      }
      *v11 = v12;
      if (sub_10005549C())
      {
        sub_100054530("AVDTP_Update48KHzCap: SBC codecData->data[0] updated to %x", **(unsigned __int8 **)(a2 + 8));
        v19 = sub_1000544A0(3u);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          goto LABEL_33;
      }
    }
  }
}

uint64_t sub_100145D80(int *a1, _OWORD *a2, _OWORD *a3, unsigned __int16 *a4, _WORD *a5)
{
  NSObject *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  NSObject *v22;
  void *v23;
  uint8_t buf[16];
  __int128 v26;

  if (sub_10005549C())
  {
    sub_100054530("AVDTP_createA2DPChannels");
    v10 = sub_1000544A0(3u);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v11 = a2[1];
  *(_OWORD *)buf = *a2;
  v26 = v11;
  v12 = sub_1001DC9B8(25, (uint64_t)buf, (uint64_t)a1, (uint64_t)sub_10013D344, (uint64_t)sub_10013C8FC, (uint64_t)sub_10013CB9C, a4, (uint64_t)&unk_10091BA30);
  if ((_DWORD)v12)
  {
    v13 = v12;
    if (sub_10005549C())
    {
      sub_100054530("AVDTP_createA2DPChannels error creating A2DP signaling");
      v14 = sub_1000544A0(3u);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
LABEL_7:
        sub_1006CE7A4();
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("AVDTP_createA2DPChannels signaling channel created");
      v15 = sub_1000544A0(3u);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = sub_100054494();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
      }
    }
    v17 = a3[1];
    *(_OWORD *)buf = *a3;
    v26 = v17;
    v18 = sub_1001DC9B8(25, (uint64_t)buf, (uint64_t)a1, (uint64_t)sub_100146070, (uint64_t)sub_100146280, (uint64_t)sub_100146488, a5, (uint64_t)&unk_10091BA30);
    if ((_DWORD)v18)
    {
      v13 = v18;
      if (sub_10005549C())
      {
        sub_100054530("OI_AVDTP_createA2DPChannels error creating A2DP media");
        v19 = sub_1000544A0(3u);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          goto LABEL_7;
      }
    }
    else
    {
      v20 = sub_10013D038(*a4, a1);
      if (v20)
      {
        v21 = (unsigned __int16 *)v20;
        v13 = 0;
        if (sub_10005549C())
        {
          sub_100054530("AVDTP_createA2DPChannels created signal for cid 0x%x with a2dp handle %d", *a4, *v21);
          v22 = sub_1000544A0(3u);
          v13 = 0;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            v23 = sub_100054494();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            return 0;
          }
        }
      }
      else
      {
        return 2902;
      }
    }
  }
  return v13;
}

void sub_100146070(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _BYTE buf[24];

  if (sub_10005549C())
  {
    sub_100054530("MediaConnectCfm (CID %d) %!", a1, a4);
    v7 = sub_1000544A0(3u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v8 = sub_1001468F4(a1);
  if (v8)
  {
    v9 = v8;
    if ((_DWORD)a4 == 464)
    {
      *(_WORD *)(v8 + 128) = 0;
      sub_10011C134(0);
      sub_10013F014(v9);
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 176);
      v14 = *(unsigned __int8 *)(v9 + 133);
      v15 = sub_10013E130(v9);
      v13(v14, v15, 41);
    }
    else
    {
      if ((_DWORD)a4)
      {
        *(_WORD *)(v8 + 128) = 0;
        sub_10011C134(0);
        v11 = 129;
      }
      else
      {
        if (*(_BYTE *)(v8 + 134) != 2)
          sub_100253460();
        sub_100140030(v9, 3u);
        *(_QWORD *)buf = 0;
        if (!sub_1001DB044(a1, (uint64_t *)buf))
        {
          if (sub_1001E3CCC(*(int **)buf))
          {
            v10 = sub_1001E3CCC(*(int **)buf);
            sub_10011C134(*(unsigned __int16 *)(v10 + 8));
          }
        }
        v11 = 0;
      }
      v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 64);
      v17 = *(unsigned __int8 *)(v9 + 133);
      v18 = sub_10013E130(v9);
      v16(v17, v18, a3, v11);
    }
  }
  else if (sub_10005549C())
  {
    sub_100054530("Remote Endpoint not found");
    v12 = sub_1000544A0(3u);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

void sub_100146280(unsigned int a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint8_t buf[4];
  void *v12;

  v4 = sub_1001468F4(a1);
  if (sub_10005549C())
  {
    sub_100054530("Media channel disconnected (CID %d, remote %lx) %!", a1, v4, a2);
    v5 = sub_1000544A0(3u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v12 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (v4)
  {
    v6 = sub_10013E130(v4);
    v7 = *(unsigned __int8 *)(v4 + 134);
    *(_WORD *)(v4 + 128) = 0;
    sub_10011C134(0);
    v8 = *(unsigned __int8 *)(v4 + 133);
    if (v7 == 7)
    {
      if (*(unsigned __int8 *)(v4 + 135) == 255)
        sub_100253460();
      if ((_DWORD)v6)
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(qword_100981A48 + 24) + 176))(v8, v6, 0);
      v9 = *(unsigned __int8 *)(v4 + 135);
      if (v9 != 255)
        sub_10013C8FC(*(unsigned __int16 *)(*(_QWORD *)(qword_100981A48 + 16) + (v9 << 6) + 38), a2);
    }
    else
    {
      sub_10013F014(v4);
      if (!(_DWORD)v6)
        return;
      if (v7 != 6)
      {
        if (v7 == 5)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(qword_100981A48 + 24) + 88))(v8, v6, 0);
          return;
        }
        if (sub_10005549C())
        {
          sub_100054530("Unexpected Transport channel disconnect: %d", v6);
          v10 = sub_1000544A0(3u);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
      }
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(qword_100981A48 + 24) + 176))(v8, v6, 0);
    }
  }
}

void sub_100146488(int a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  void (*v12)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t);
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint8_t buf[4];
  void *v20;

  v5 = sub_1001468F4(a1);
  if (v5)
  {
    v6 = v5;
    if (a3 <= 0xB)
    {
      if (!sub_10005549C())
        goto LABEL_18;
      sub_100054530("Error in received data frame: Runt packet received!");
      v7 = sub_1000544A0(3u);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_18;
      goto LABEL_5;
    }
    if (*(_BYTE *)(v5 + 134) != 4)
    {
      if (sub_10005549C())
      {
        sub_100054530("Invalid state to receive packet");
        v11 = sub_1000544A0(3u);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v20 = sub_100054494();
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
      goto LABEL_18;
    }
    if (!a2)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
    v9 = *(_BYTE *)a2 & 0xF;
    if ((int)(a3 - 8) < (int)v9)
    {
      if (!sub_10005549C())
        goto LABEL_18;
      sub_100054530("Error in received data frame");
      v10 = sub_1000544A0(3u);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        goto LABEL_18;
LABEL_5:
      sub_1006CE7A4();
LABEL_18:
      if (*(_BYTE *)(v6 + 132))
      {
        v12 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(qword_100981A48 + 24) + 184);
        v13 = sub_10013E130(v6);
        v12(v13, 0, 0, 0, 0, 0, 0, 1);
      }
      return;
    }
    if (*(_BYTE *)(v5 + 132))
    {
      v14 = *(unsigned __int8 *)(a2 + 1);
      v15 = *(unsigned __int16 *)(a2 + 2);
      v16 = *(_DWORD *)(a2 + 4);
      v18 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(qword_100981A48 + 24) + 184);
      v17 = sub_10013E130(v5);
      v18(v17, bswap32(v15) >> 16, bswap32(v16), a2 + v9 + 12, (unsigned __int16)(a3 - (v9 + 12)), v14 & 0x7F, v14 >> 7, 0);
    }
  }
  else if (sub_10005549C())
  {
    sub_100054530("Remote Endpoint not found");
    v8 = sub_1000544A0(3u);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

uint64_t sub_100146740(uint64_t a1, _QWORD *a2, unsigned int a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v15;

  v15 = 0;
  if (*(_BYTE *)(qword_100981A48 + 96))
  {
    v6 = 0;
    v7 = *(_QWORD *)qword_100981A48;
    while (*(unsigned __int8 *)(v7 + 25) != a4)
    {
      ++v6;
      v7 += 40;
      if (*(unsigned __int8 *)(qword_100981A48 + 96) == v6)
        goto LABEL_5;
    }
    if (v6 == 255)
      v8 = 0;
    else
      v8 = v7;
  }
  else
  {
LABEL_5:
    v8 = 0;
  }
  v9 = sub_10019AEA4(a1);
  if (!v9
    && sub_10005549C()
    && (sub_100054530("OI_AVDTP_cleanFastConnectA2DP NULL Handle"),
        v10 = sub_1000544A0(3u),
        os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)))
  {
    sub_1006CE7A4();
    if (!a3)
      goto LABEL_19;
  }
  else if (!a3)
  {
    goto LABEL_19;
  }
  v11 = sub_1001468F4(a3);
  if (v11)
  {
    v12 = v11;
    *(_BYTE *)(v11 + 132) = 0;
    *(_DWORD *)v11 = 0;
    *(_WORD *)(v11 + 128) = 0;
    sub_10011C134(0);
    *(_BYTE *)(v12 + 137) = -1;
    *(_DWORD *)(v12 + 133) = -65281;
  }
  if (!sub_1001DB044(a3, &v15))
  {
    if (v15)
    {
      sub_1001DC658(v15);
      if (v9)
        sub_100186150(v9);
    }
  }
LABEL_19:
  if ((_DWORD)a2)
  {
    sub_10013D5A8(a2);
    if (!sub_1001DB044(a2, &v15))
    {
      if (v15)
      {
        sub_1001DC658(v15);
        if (v9)
          sub_100186150(v9);
      }
    }
  }
  if (v8)
  {
    if (sub_10005549C())
    {
      sub_100054530("OI_AVDTP_cleanFastConnectA2DP Free Caps");
      v13 = sub_1000544A0(3u);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_10013C60C(v8);
  }
  return 0;
}

uint64_t sub_1001468F4(int a1)
{
  char v1;
  uint64_t v2;

  if (!qword_100981A48 || !*(_BYTE *)(qword_100981A48 + 97))
    return 0;
  v1 = 0;
  v2 = *(_QWORD *)(qword_100981A48 + 8);
  while (*(unsigned __int8 *)(v2 + 144 * v1 + 136) == 255 || *(unsigned __int16 *)(v2 + 144 * v1 + 128) != a1)
  {
    if (*(unsigned __int8 *)(qword_100981A48 + 97) <= ++v1)
      return 0;
  }
  return v2 + 144 * v1;
}

uint64_t sub_100146958(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  char v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  _BYTE *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  char v19;
  uint64_t v20;
  _BYTE *v21;

  if (*(_BYTE *)(a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 5325, "OI_STATUS OI_AVDTP_getAllFastConnectEndpoints(OI_BYTE_STREAM *)");
    goto LABEL_35;
  }
  v2 = *(unsigned __int16 *)(a1 + 12);
  if (*(unsigned __int16 *)(a1 + 10) <= v2 || *(_BYTE *)(a1 + 14) != 2)
LABEL_35:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
  v3 = qword_100981A48;
  v4 = *(_QWORD *)qword_100981A48;
  v5 = *(_BYTE **)a1;
  *(_WORD *)(a1 + 12) = v2 + 1;
  v5[v2] = 0;
  if (*(_BYTE *)(v3 + 96))
  {
    v6 = 0;
    v7 = 0;
    v8 = (unsigned __int8 *)(v4 + 29);
    while (1)
    {
      if (*(v8 - 4))
      {
        v9 = *v8;
        v10 = *(v8 - 1);
        if (*(v8 - 2) >= 2u)
          sub_100253460();
        if (*(_BYTE *)(a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 5336, "OI_STATUS OI_AVDTP_getAllFastConnectEndpoints(OI_BYTE_STREAM *)");
LABEL_29:
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
        }
        v11 = *(unsigned __int16 *)(a1 + 12);
        if (*(unsigned __int16 *)(a1 + 10) <= v11 || *(_BYTE *)(a1 + 14) != 2)
          goto LABEL_29;
        v12 = (2 * (v9 >= v10)) | (4 * *(v8 - 4));
        v13 = *(_BYTE **)a1;
        *(_WORD *)(a1 + 12) = v11 + 1;
        v13[v11] = v12;
        if (*(_BYTE *)(a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 5337, "OI_STATUS OI_AVDTP_getAllFastConnectEndpoints(OI_BYTE_STREAM *)");
LABEL_31:
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
        }
        v14 = *(unsigned __int16 *)(a1 + 12);
        if (*(unsigned __int16 *)(a1 + 10) <= v14 || *(_BYTE *)(a1 + 14) != 2)
          goto LABEL_31;
        v15 = *(v8 - 3) & 0xF0 | (8 * *(v8 - 2));
        v16 = *(_BYTE **)a1;
        *(_WORD *)(a1 + 12) = v14 + 1;
        v16[v14] = v15;
        ++v7;
        v3 = qword_100981A48;
      }
      ++v6;
      v8 += 40;
      if (v6 >= *(unsigned __int8 *)(v3 + 96))
        goto LABEL_19;
    }
  }
  v7 = 0;
LABEL_19:
  *v5 = v7;
  if (*(_BYTE *)(v3 + 96))
  {
    v17 = 0;
    v18 = (unsigned __int8 *)(v4 + 30);
    do
    {
      if (*(v18 - 5))
      {
        v19 = sub_100148064(*(_QWORD *)(v18 - 30), *v18);
        if (*(_BYTE *)(a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c", 5351, "OI_STATUS OI_AVDTP_getAllFastConnectEndpoints(OI_BYTE_STREAM *)");
LABEL_33:
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp.c");
        }
        v20 = *(unsigned __int16 *)(a1 + 12);
        if (*(unsigned __int16 *)(a1 + 10) <= v20 || *(_BYTE *)(a1 + 14) != 2)
          goto LABEL_33;
        v21 = *(_BYTE **)a1;
        *(_WORD *)(a1 + 12) = v20 + 1;
        v21[v20] = v19;
        sub_1001480DC((_BYTE *)a1, *(unsigned __int8 **)(v18 - 30), *v18, 1);
        v3 = qword_100981A48;
      }
      ++v17;
      v18 += 40;
    }
    while (v17 < *(unsigned __int8 *)(v3 + 96));
  }
  return 0;
}

uint64_t sub_100146C54(int a1, int a2, int a3, uint64_t a4, unsigned int a5, _WORD *a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  void **v43;
  int *v44;
  unsigned __int16 v45;

  if (!dword_100999154)
    return 408;
  v45 = 0;
  v14 = sub_10013B4F4(a1, &v45);
  if ((_DWORD)v14)
  {
    v15 = v14;
    if (sub_10005549C())
    {
      sub_100054530("OI_AVDTP_FastConnectSetConfig error get CID for A2DP handle %d", a1);
      v16 = sub_1000544A0(3u);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  else
  {
    if (!*(_BYTE *)(qword_100981A48 + 96))
      goto LABEL_19;
    v17 = 0;
    v18 = *(_QWORD *)qword_100981A48;
    v19 = 255;
    while (*(unsigned __int8 *)(v18 + v17 + 25) != a3)
    {
      v17 += 40;
      --v19;
      if (40 * *(unsigned __int8 *)(qword_100981A48 + 96) == v17)
        goto LABEL_19;
    }
    if (v19)
    {
      if (*(_QWORD *)(v18 + v17 + 16) && (sub_100253460(), *(_QWORD *)(v18 + v17 + 16)))
      {
        if (sub_10005549C())
        {
          sub_100054530("OI_AVDTP_FastConnectSetConfig error Caps");
          v20 = sub_1000544A0(3u);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        return 118;
      }
      else
      {
        v23 = sub_10013DFCC(a2);
        if (v23)
        {
          v24 = v23;
          v43 = (void **)(v18 + v17 + 16);
          v25 = v45;
          v26 = qword_100981A48;
          if (qword_100981A48 && *(_BYTE *)(qword_100981A48 + 98))
          {
            v27 = 0;
            v28 = (unsigned __int16 *)(*(_QWORD *)(qword_100981A48 + 16) + 38);
            while (1)
            {
              v29 = *v28;
              v28 += 32;
              if (v29 == v45)
                break;
              if (*(unsigned __int8 *)(qword_100981A48 + 98) == ++v27)
                goto LABEL_30;
            }
          }
          else
          {
LABEL_30:
            LOBYTE(v27) = -1;
          }
          *(_BYTE *)(v23 + 135) = v27;
          v30 = *(unsigned __int8 *)(v26 + 96);
          if (*(_BYTE *)(v26 + 96))
          {
            v31 = 0;
            v32 = (unsigned __int8 *)(*(_QWORD *)v26 + 25);
            while (1)
            {
              v33 = *v32;
              v32 += 40;
              if (v33 == a3)
                break;
              if (v30 == ++v31)
                goto LABEL_35;
            }
          }
          else
          {
LABEL_35:
            LOBYTE(v31) = -1;
          }
          *(_BYTE *)(v23 + 136) = v31;
          sub_100140030(v23, 3u);
          *(_WORD *)(v24 + 130) = 900;
          *(_WORD *)(v24 + 128) = a7;
          sub_10011C134(a7);
          v44 = 0;
          if (!sub_1001DB044(a7, (uint64_t *)&v44) && sub_1001E3CCC(v44))
          {
            v34 = sub_1001E3CCC(v44);
            sub_10011C134(*(unsigned __int16 *)(v34 + 8));
          }
          sub_1001DAFA4(a7, (uint64_t)sub_1001470E8);
          v35 = sub_10013E130(v24);
          *a6 = v35;
          if (v35)
          {
            v36 = sub_10013B704(v25);
            if (v36)
            {
              *(_WORD *)(v36 + 34) = 1004;
              v37 = v18 + v17;
              v38 = (_BYTE *)(v18 + v17 + 32);
              v15 = sub_10013B28C(a4, a5, v43, v38);
              if ((_DWORD)v15)
              {
                if (sub_10005549C())
                {
                  sub_100054530("OI_AVDTP_FastConnectSetConfig error Copy Caps");
                  v39 = sub_1000544A0(3u);
                  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
                    sub_1006CE7A4();
                }
                sub_10013B1F8(v43, a5);
                *(_BYTE *)(v24 + 132) = 0;
                *(_DWORD *)v24 = 0;
                *(_WORD *)(v24 + 128) = 0;
                sub_10011C134(0);
                *(_BYTE *)(v24 + 137) = -1;
                *(_DWORD *)(v24 + 133) = -65281;
              }
              else
              {
                sub_10013B1F8((void **)(v37 + 8), *(unsigned __int8 *)(v37 + 31));
                *(_QWORD *)(v37 + 8) = *v43;
                *(_BYTE *)(v37 + 31) = *v38;
                *v43 = 0;
                ++*(_BYTE *)(v37 + 29);
                *v38 = 0;
                *(_BYTE *)(v24 + 137) = *(_BYTE *)(v37 + 24);
                *(_BYTE *)(v37 + 24) = *(_BYTE *)a6 - 1;
              }
            }
            else
            {
              if (sub_10005549C())
              {
                sub_100054530("OI_AVDTP_FastConnectSetConfig error Signal");
                v42 = sub_1000544A0(3u);
                if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                  sub_1006CE7A4();
              }
              return 406;
            }
          }
          else
          {
            if (sub_10005549C())
            {
              sub_100054530("OI_AVDTP_FastConnectSetConfig error remote handle");
              v41 = sub_1000544A0(3u);
              if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
                sub_1006CE7A4();
            }
            return 414;
          }
        }
        else
        {
          if (sub_10005549C())
          {
            sub_100054530("OI_AVDTP_FastConnectSetConfig error remote");
            v40 = sub_1000544A0(3u);
            if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
          return 2902;
        }
      }
    }
    else
    {
LABEL_19:
      if (sub_10005549C())
      {
        sub_100054530("OI_AVDTP_FastConnectSetConfig error get local EP for seid %d", a3);
        v21 = sub_1000544A0(3u);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 120;
    }
  }
  return v15;
}

void sub_1001470E8(int a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  unsigned __int16 v8;

  if (*(_QWORD *)(*(_QWORD *)(qword_100981A48 + 24) + 216))
  {
    v2 = sub_1001468F4(a1);
    if (v2)
    {
      v8 = 0;
      v3 = sub_10013E130(v2);
      v4 = sub_10013B5D4(v3, &v8);
      if ((_DWORD)v4)
      {
        v5 = v4;
        if (sub_10005549C())
        {
          sub_100054530("Flush callback lookup failed with status %! for mediaHandle %d", v5, v3);
          v6 = sub_1000544A0(3u);
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
            sub_1006CEEC0();
        }
      }
      else
      {
        (*(void (**)(_QWORD))(*(_QWORD *)(qword_100981A48 + 24) + 216))(v8);
      }
    }
    else if (sub_10005549C())
    {
      sub_100054530("Flush callback lookup failed for mediaCid %d", a1);
      v7 = sub_1000544A0(3u);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
  }
}

void sub_100147200(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t buf[4];
  void *v16;

  if (!dword_100999154)
    return;
  v4 = *(_QWORD *)(qword_100981A48 + 8);
  if (sub_10005549C())
  {
    sub_100054530("Signaling channel disconnected prior to media bringup (CID %d) with %!", a1, a2);
    v5 = sub_1000544A0(3u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v16 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v6 = sub_10013B704((int)a1);
  if (v6)
  {
    v7 = qword_100981A48;
    v8 = *(unsigned __int8 *)(qword_100981A48 + 97);
    if (*(_BYTE *)(qword_100981A48 + 97))
    {
      v9 = v6;
      do
      {
        if (*(_QWORD *)(v7 + 16) + ((unint64_t)*(unsigned __int8 *)(v4 + 135) << 6) == v9)
        {
          if (!*(_WORD *)(v4 + 128))
            sub_100253460();
          sub_10013F014(v4);
          v7 = qword_100981A48;
        }
        v4 += 144;
        --v8;
      }
      while (v8);
    }
  }
  if (!dword_100999154)
  {
    v13 = 408;
LABEL_20:
    if (sub_10005549C())
    {
      sub_100054530("Signaling disconnect error %!", v13);
      v14 = sub_1000544A0(3u);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return;
  }
  v10 = *(unsigned __int8 *)(qword_100981A48 + 98);
  if (!*(_BYTE *)(qword_100981A48 + 98))
  {
LABEL_18:
    v13 = 120;
    goto LABEL_20;
  }
  v11 = (unsigned __int16 *)(*(_QWORD *)(qword_100981A48 + 16) + 38);
  while (1)
  {
    v12 = *v11;
    v11 += 32;
    if (v12 == (_DWORD)a1)
      break;
    if (!--v10)
      goto LABEL_18;
  }
  sub_10013D5A8(a1);
}

void sub_1001473D0(__int16 *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  unsigned __int16 v8;
  uint64_t v9;

  if (a2)
  {
    v5 = a2;
    v6 = qword_100981A48;
    do
    {
      v7 = *a1++;
      v8 = v7 - 1;
      if (*(unsigned __int8 *)(v6 + 97) > (unsigned __int16)(v7 - 1))
      {
        v9 = *(_QWORD *)(v6 + 8);
        if (v9)
        {
          if (*(_BYTE *)(v9 + 144 * v8 + 132))
          {
            sub_100140030(v9 + 144 * v8, a3);
            v6 = qword_100981A48;
          }
        }
      }
      --v5;
    }
    while (v5);
  }
}

uint64_t sub_100147458(int a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  NSObject *v15;
  uint8_t buf[4];
  void *v17;

  v3 = qword_100981A48;
  if (*(_BYTE *)(qword_100981A48 + 98))
  {
    v4 = 0;
    v5 = (unsigned __int16 *)(*(_QWORD *)(qword_100981A48 + 16) + 38);
    while (1)
    {
      v6 = *v5;
      v5 += 32;
      if (v6 == a2)
        break;
      if (*(unsigned __int8 *)(qword_100981A48 + 98) == ++v4)
        goto LABEL_5;
    }
    v7 = v4;
  }
  else
  {
LABEL_5:
    v7 = 255;
  }
  v8 = *(_QWORD *)(qword_100981A48 + 8);
  if (!dword_100999154)
  {
    sub_100253460();
    v3 = qword_100981A48;
  }
  v9 = *(unsigned __int8 *)(v3 + 97);
  if (!v9)
    return 0;
  v10 = 0;
  v11 = (unsigned __int8 *)(v8 + 132);
  v12 = v11;
  while (1)
  {
    v13 = *v12;
    v12 += 144;
    if (v13)
    {
      if (v11[1] == a1 && v11[3] == v7)
        break;
    }
    ++v10;
    v11 = v12;
    if (v9 == v10)
      return 0;
  }
  if (sub_10005549C())
  {
    sub_100054530("Found handle at %d (i+1) with transaction: %d and signal: %d", v10 + 1, a1, v7);
    v15 = sub_1000544A0(3u);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v17 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v11[1] = -1;
  return v10 + 1;
}

uint64_t sub_1001475E4(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned __int8 *)(qword_100981A48 + 97);
  if (*(_BYTE *)(qword_100981A48 + 97))
  {
    v3 = *(_QWORD *)(qword_100981A48 + 8);
    do
    {
      if (*(_QWORD *)(qword_100981A48 + 8))
      {
        if (*(unsigned __int8 *)(v3 + 136) == 255)
          v4 = 0;
        else
          v4 = *(_QWORD *)qword_100981A48 + 40 * *(unsigned __int8 *)(v3 + 136);
        v5 = *(unsigned __int8 *)(v3 + 135);
        if (v5 == 255)
        {
          v6 = 0;
          if (!v4)
            goto LABEL_14;
        }
        else
        {
          v6 = *(_QWORD *)(qword_100981A48 + 16) + (v5 << 6);
          if (!v4)
            goto LABEL_14;
        }
        if (*(unsigned __int8 *)(v4 + 25) == a1 && v6 && *(unsigned __int16 *)(v6 + 38) == a2)
          return v3;
      }
LABEL_14:
      v3 += 144;
      --v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_100147678(int a1, int a2, _WORD *a3, _BYTE *a4)
{
  uint64_t result;
  _WORD *v9;

  *a4 = 0;
  result = sub_100147458(a1, a2);
  *a3 = result;
  if ((_DWORD)result)
  {
    v9 = a3 + 1;
    do
    {
      ++*a4;
      result = sub_100147458(a1, a2);
      *v9++ = result;
    }
    while ((_DWORD)result);
  }
  return result;
}

uint64_t sub_1001476DC(int a1, int a2)
{
  unsigned __int16 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = 0;
  if (a1 && a2)
  {
    if (*(_BYTE *)(qword_100981A48 + 97))
    {
      v3 = 0;
      v4 = *(_QWORD *)(qword_100981A48 + 8);
      v5 = (unsigned __int8 *)(v4 + 132);
      v6 = (unsigned __int8 *)(v4 + 132);
      while (1)
      {
        v7 = *v6;
        v6 += 144;
        if (v7 == a1 && v4 != 0)
        {
          v9 = v5[3];
          if (v9 != 255)
          {
            v10 = *(_QWORD *)(qword_100981A48 + 16);
            if (v10)
            {
              if (*(unsigned __int16 *)(v10 + (v9 << 6) + 38) == a2)
                break;
            }
          }
        }
        ++v3;
        v5 = v6;
        if (*(unsigned __int8 *)(qword_100981A48 + 97) == v3)
          return 0;
      }
      return (unsigned __int16)(v3 + 1);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

const char *sub_100147760(char a1)
{
  if ((a1 + 2) > 0xFu)
    return "Unknown";
  else
    return off_10091BAC0[(char)(a1 + 2)];
}

void sub_100147790(int a1, int a2)
{
  uint64_t v3;

  v3 = sub_10013B704(a1);
  if (v3)
  {
    if (*(unsigned __int8 *)(v3 + 44) == a2)
    {
      *(_BYTE *)(v3 + 44) = -1;
      sub_100049F6C(*(unsigned int *)(v3 + 24));
    }
  }
}

uint64_t sub_1001477D8(int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  char *v8;
  NSObject *v10;

  if (a3 >= 0x10)
    sub_100253460();
  if (a2 >= 0x40)
    sub_100253460();
  if (a4 >= 0x40)
    sub_100253460();
  v8 = (char *)sub_100052DC0(3uLL);
  if (v8)
  {
    *v8 = 16 * a3;
    v8[1] = a2;
    v8[2] = 4 * a4;
    return sub_1001478B4(a1, a3, a2, v8, 3uLL);
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("No memory");
      v10 = sub_1000544A0(3u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1006D1FB0(v10);
    }
    return 106;
  }
}

uint64_t sub_1001478B4(int a1, int a2, char a3, char *a4, size_t a5)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;

  v10 = sub_10013B704(a1);
  if (!v10 || (v11 = v10, *(unsigned __int8 *)(v10 + 44) == 255))
  {
    v14 = sub_100147AC8(a1, a4, a5);
    if ((_DWORD)v14)
    {
      if (sub_10005549C())
      {
        v15 = sub_100147760(a3);
        sub_100054530("AVDTP Send failed [%s] transaction %d CID:%d", v15, a2, a1);
        v16 = sub_1000544A0(3u);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
    else
    {
      sub_100148FB4(a1, a2, a3);
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("cmdPending t:%d", *(unsigned __int8 *)(v11 + 44));
      v12 = sub_1000544A0(3u);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_100053298(a4);
    if (sub_10005549C())
    {
      sub_100054530("Outstanding command pending on CID: %d", a1);
      v13 = sub_1000544A0(3u);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 118;
  }
  return v14;
}

uint64_t sub_100147A34(int a1, unsigned int a2, unsigned int a3, int a4)
{
  char v5;
  char *v8;
  size_t v9;
  char v10;

  v5 = a3;
  if (a3 >= 0x10)
    sub_100253460();
  if (a2 >= 0x40)
    sub_100253460();
  v8 = (char *)sub_100052DC0(3uLL);
  if (!v8)
    return 106;
  v9 = 2;
  if (a4)
    v10 = 3;
  else
    v10 = 2;
  *v8 = v10 | (16 * v5);
  v8[1] = a2;
  if (a4)
  {
    v8[2] = a4;
    v9 = 3;
  }
  return sub_100147AC8(a1, v8, v9);
}

uint64_t sub_100147AC8(int a1, char *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;

  v6 = sub_10013B704(a1);
  if (!v6)
  {
    if (sub_10005549C())
    {
      sub_100054530("Signalling info not found for CID %d", a1);
      v13 = sub_1000544A0(3u);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    v14 = 403;
    goto LABEL_14;
  }
  v7 = v6;
  v8 = sub_100254200(a2, a3, 1);
  if (!v8)
  {
    if (sub_10005549C())
    {
      sub_100054530("Out of memory!");
      v15 = sub_1000544A0(3u);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    v14 = 106;
LABEL_14:
    sub_100053298(a2);
    return v14;
  }
  v9 = v8;
  v8[1] = 0;
  v10 = *(_QWORD *)(v7 + 8);
  if (v10)
  {
    do
    {
      v11 = v10;
      v10 = *(_QWORD *)(v10 + 8);
    }
    while (v10);
    v12 = (_QWORD *)(v11 + 8);
  }
  else
  {
    v12 = (_QWORD *)(v7 + 8);
    if (*(_BYTE *)(v7 + 40))
    {
      sub_100253460();
      v12 = (_QWORD *)(v7 + 8);
    }
  }
  *v12 = v9;
  if (*(_QWORD **)(v7 + 8) != v9)
    return 0;
  return sub_100149190(v7);
}

uint64_t sub_100147C28(int a1, unsigned int a2, char a3)
{
  char v4;
  char *v6;

  v4 = a2;
  if (a2 >= 0x10)
    sub_100253460();
  v6 = (char *)sub_100052DC0(2uLL);
  if (!v6)
    return 106;
  *v6 = (16 * v4) | 1;
  v6[1] = a3 & 0x3F;
  return sub_100147AC8(a1, v6, 2uLL);
}

uint64_t sub_100147CA0(int a1, unsigned int a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  char *v10;
  uint64_t v11;
  unsigned __int16 v12;

  if (a3 >= 0x10)
    sub_100253460();
  if (a2 != 254 && a2 >= 0x40)
    sub_100253460();
  v10 = (char *)sub_100052DC0(a5 + 2);
  if (!v10)
    return 106;
  *v10 = 16 * a3;
  v10[1] = a2;
  if (a5)
  {
    v11 = 0;
    do
    {
      v10[v11 + 2] = 4 * *(_BYTE *)(a4 + v11);
      ++v11;
    }
    while (a5 != v11);
    v12 = v11 + 2;
  }
  else
  {
    v12 = 2;
  }
  return sub_1001478B4(a1, a3, a2, v10, v12);
}

uint64_t sub_100147D74(int a1, unsigned int a2, unsigned int a3, char a4, int a5)
{
  char v7;
  char *v10;
  size_t v11;
  char v12;

  v7 = a3;
  if (a3 >= 0x10)
    sub_100253460();
  if (a2 >= 0x40)
    sub_100253460();
  v10 = (char *)sub_100052DC0(4uLL);
  if (!v10)
    return 106;
  v11 = 2;
  if (a5)
    v12 = 3;
  else
    v12 = 2;
  *v10 = v12 | (16 * v7);
  v10[1] = a2;
  if (a5)
  {
    v10[2] = 4 * a4;
    v10[3] = a5;
    v11 = 4;
  }
  return sub_100147AC8(a1, v10, v11);
}

uint64_t sub_100147E20(int a1, unsigned int a2)
{
  char *v4;

  if (a2 >= 0x10)
    sub_100253460();
  v4 = (char *)sub_100052DC0(2uLL);
  if (!v4)
    return 106;
  *v4 = 16 * a2;
  v4[1] = 1;
  return sub_1001478B4(a1, a2, 1, v4, 2uLL);
}

uint64_t sub_100147E8C(int a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5)
{
  char v8;
  unsigned __int16 v10;
  char *v11;
  char *v12;
  unsigned int v13;
  char v14;
  unsigned __int16 v15;
  unsigned __int8 v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  unsigned int v21;
  uint64_t v22;

  v8 = a2;
  if (a2 >= 0x10)
    sub_100253460();
  v10 = 2 * a4 + 3;
  v11 = (char *)sub_100052DC0(2 * a4 + 3);
  if (!v11)
    return 106;
  v12 = v11;
  v13 = (unsigned __int16)(2 * a4 + 3);
  if (a5)
    v14 = 3;
  else
    v14 = 2;
  *v11 = v14 | (16 * v8);
  if (v13 == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
  v11[1] = 1;
  if (a5)
  {
    if (v13 <= 2)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
    v11[2] = a5;
    v15 = 3;
  }
  else if (a4)
  {
    v17 = 0;
    v15 = 2;
    do
    {
      v18 = (_BYTE *)(a3 + 4 * v17);
      if (v18[3] >= 2u)
        sub_100253460();
      v19 = a3 + 4 * v17;
      v21 = *(unsigned __int8 *)(v19 + 1);
      v20 = (_BYTE *)(v19 + 1);
      if (v21 >= 2)
        sub_100253460();
      if (v15 >= v10)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
      v22 = v15 | 1;
      v12[v15] = (2 * v18[3]) | (4 * *(_BYTE *)(a3 + 4 * v17 + 2));
      if (v22 >= v10)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
      v15 += 2;
      v12[v22] = *v18 & 0xF0 | (8 * *v20);
      ++v17;
    }
    while (a4 > v17);
  }
  else
  {
    v15 = 2;
  }
  return sub_100147AC8(a1, v12, v15);
}

uint64_t sub_100148064(uint64_t a1, unsigned int a2)
{
  int v2;
  uint64_t v3;
  unsigned __int8 *v4;

  v2 = 0;
  if (a2)
  {
    v3 = a2;
    v4 = (unsigned __int8 *)(a1 + 3);
    while (2)
    {
      switch(*(v4 - 3))
      {
        case 1u:
        case 2u:
        case 8u:
          goto LABEL_7;
        case 3u:
          v2 += 5;
          goto LABEL_8;
        case 4u:
        case 7u:
          v2 += *v4 + 4;
          goto LABEL_8;
        case 5u:
        case 6u:
          v2 += 3;
          goto LABEL_6;
        default:
LABEL_6:
          v2 += *v4;
LABEL_7:
          v2 += 2;
LABEL_8:
          v4 += 16;
          if (!--v3)
            return (unsigned __int16)v2;
          continue;
      }
    }
  }
  return (unsigned __int16)v2;
}

_BYTE *sub_1001480DC(_BYTE *result, unsigned __int8 *a2, unsigned int a3, int a4)
{
  _BYTE *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  size_t v52;
  void *v53;

  if (a3)
  {
    v6 = result;
    v7 = a3;
    while (1)
    {
      v8 = *a2;
      if (v8 < 8 || a4 != 0)
      {
        if (v6[15])
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 794, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
LABEL_76:
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
        }
        v10 = *((unsigned __int16 *)v6 + 6);
        if (*((unsigned __int16 *)v6 + 5) <= v10 || v6[14] != 2)
          goto LABEL_76;
        v11 = *(_QWORD *)v6;
        *((_WORD *)v6 + 6) = v10 + 1;
        *(_BYTE *)(v11 + v10) = v8;
        v8 = *a2;
      }
      switch(v8)
      {
        case 1u:
        case 2u:
          if (v6[15])
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 800, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
LABEL_78:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
          }
          v12 = *((unsigned __int16 *)v6 + 6);
          if (*((unsigned __int16 *)v6 + 5) <= v12 || v6[14] != 2)
            goto LABEL_78;
          goto LABEL_15;
        case 3u:
          if (v6[15])
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 807, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
LABEL_94:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
          }
          v41 = *((unsigned __int16 *)v6 + 6);
          if (*((unsigned __int16 *)v6 + 5) <= v41 || v6[14] != 2)
            goto LABEL_94;
          v42 = *(_QWORD *)v6;
          *((_WORD *)v6 + 6) = v41 + 1;
          *(_BYTE *)(v42 + v41) = 3;
          if (v6[15])
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 808, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
LABEL_96:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
          }
          v43 = *((unsigned __int16 *)v6 + 6);
          if (*((unsigned __int16 *)v6 + 5) <= v43 || v6[14] != 2)
            goto LABEL_96;
          v44 = a2[1];
          v45 = *(_QWORD *)v6;
          *((_WORD *)v6 + 6) = v43 + 1;
          *(_BYTE *)(v45 + v43) = v44;
          if (v6[15])
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 809, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
LABEL_98:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
          }
          v46 = *((unsigned __int16 *)v6 + 6);
          if (*((unsigned __int16 *)v6 + 5) <= v46 || v6[14] != 2)
            goto LABEL_98;
          v47 = a2[2];
          v48 = *(_QWORD *)v6;
          *((_WORD *)v6 + 6) = v46 + 1;
          *(_BYTE *)(v48 + v46) = v47;
          if (v6[15])
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 810, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
LABEL_100:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
          }
          v49 = *((unsigned __int16 *)v6 + 6);
          if (*((unsigned __int16 *)v6 + 5) <= v49 || v6[14] != 2)
            goto LABEL_100;
          v50 = a2[3];
          v51 = *(_QWORD *)v6;
          *((_WORD *)v6 + 6) = v49 + 1;
          *(_BYTE *)(v51 + v49) = v50;
          goto LABEL_73;
        case 4u:
        case 7u:
          if (v6[15])
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 814, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
LABEL_80:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
          }
          v14 = *((unsigned __int16 *)v6 + 6);
          if (*((unsigned __int16 *)v6 + 5) <= v14 || v6[14] != 2)
            goto LABEL_80;
          v15 = a2[3] + 2;
          v16 = *(_QWORD *)v6;
          *((_WORD *)v6 + 6) = v14 + 1;
          *(_BYTE *)(v16 + v14) = v15;
          if (v6[15])
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 815, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
LABEL_82:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
          }
          v17 = *((unsigned __int16 *)v6 + 6);
          if (*((unsigned __int16 *)v6 + 5) <= v17 || v6[14] != 2)
            goto LABEL_82;
          v18 = a2[1];
          v19 = *(_QWORD *)v6;
          *((_WORD *)v6 + 6) = v17 + 1;
          *(_BYTE *)(v19 + v17) = v18;
          if (v6[15])
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 816, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
LABEL_84:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
          }
          v20 = *((unsigned __int16 *)v6 + 6);
          if (*((unsigned __int16 *)v6 + 5) <= v20 || v6[14] != 2)
            goto LABEL_84;
          v21 = a2[2];
          v22 = *(_QWORD *)v6;
          *((_WORD *)v6 + 6) = v20 + 1;
          *(_BYTE *)(v22 + v20) = v21;
          v23 = *(_QWORD *)v6;
          v24 = *((unsigned __int16 *)v6 + 6);
          v25 = (const void *)*((_QWORD *)a2 + 1);
          if (v6[15])
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 817, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
            v26 = 0;
          }
          else
          {
            v26 = *((unsigned __int16 *)v6 + 5) - (_DWORD)v24;
          }
          v52 = a2[3];
          if (v26 < (int)v52 || v6[14] != 2)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
          v53 = (void *)(v23 + v24);
          goto LABEL_72;
        case 5u:
        case 6u:
          if (v6[15])
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 821, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
LABEL_86:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
          }
          v27 = *((unsigned __int16 *)v6 + 6);
          if (*((unsigned __int16 *)v6 + 5) <= v27 || v6[14] != 2)
            goto LABEL_86;
          v28 = a2[3] + 1;
          v29 = *(_QWORD *)v6;
          *((_WORD *)v6 + 6) = v27 + 1;
          *(_BYTE *)(v29 + v27) = v28;
          if (v6[15])
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 822, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
LABEL_88:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
          }
          v30 = *((unsigned __int16 *)v6 + 6);
          if (*((unsigned __int16 *)v6 + 5) <= v30 || v6[14] != 2)
            goto LABEL_88;
          v31 = a2[1];
          v32 = *(_QWORD *)v6;
          *((_WORD *)v6 + 6) = v30 + 1;
          *(_BYTE *)(v32 + v30) = v31;
          v33 = a2[3];
          if (!a2[3])
            goto LABEL_73;
          v34 = *(_QWORD *)v6;
          v35 = *((unsigned __int16 *)v6 + 6);
          v25 = (const void *)*((_QWORD *)a2 + 1);
          if (v6[15])
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 824, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
            v36 = 0;
            v33 = a2[3];
          }
          else
          {
            v36 = *((unsigned __int16 *)v6 + 5) - (_DWORD)v35;
          }
          if (v36 < v33 || v6[14] != 2)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
          goto LABEL_71;
        case 8u:
          if (!a4)
            goto LABEL_73;
          if (v6[15])
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 804, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
LABEL_103:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
          }
          v12 = *((unsigned __int16 *)v6 + 6);
          if (*((unsigned __int16 *)v6 + 5) <= v12 || v6[14] != 2)
            goto LABEL_103;
LABEL_15:
          v13 = *(_QWORD *)v6;
          *((_WORD *)v6 + 6) = v12 + 1;
          *(_BYTE *)(v13 + v12) = 0;
          goto LABEL_73;
        default:
          if (v6[15])
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 828, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
LABEL_92:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
          }
          v37 = *((unsigned __int16 *)v6 + 6);
          if (*((unsigned __int16 *)v6 + 5) <= v37 || v6[14] != 2)
            goto LABEL_92;
          v38 = a2[3];
          v39 = *(_QWORD *)v6;
          *((_WORD *)v6 + 6) = v37 + 1;
          *(_BYTE *)(v39 + v37) = v38;
          v33 = a2[3];
          if (a2[3])
          {
            v34 = *(_QWORD *)v6;
            v35 = *((unsigned __int16 *)v6 + 6);
            v25 = (const void *)*((_QWORD *)a2 + 1);
            if (v6[15])
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c", 830, "void MarshalCaps(OI_BYTE_STREAM *, const OI_AVDTP_CAP *, uint8_t, _Bool)");
              v40 = 0;
              v33 = a2[3];
            }
            else
            {
              v40 = *((unsigned __int16 *)v6 + 5) - (_DWORD)v35;
            }
            if (v40 < v33 || v6[14] != 2)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
LABEL_71:
            v53 = (void *)(v34 + v35);
            v52 = v33;
LABEL_72:
            result = memmove(v53, v25, v52);
            *((_WORD *)v6 + 6) += a2[3];
          }
LABEL_73:
          a2 += 16;
          if (!--v7)
            return result;
          break;
      }
    }
  }
  return result;
}

uint64_t sub_100148968(int a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5, int a6)
{
  __int16 v12;
  unsigned __int16 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  size_t v19;
  char *v20;
  uint64_t v21;

  v12 = sub_100148064((uint64_t)a4, a5);
  if (a3 >= 0x10)
    sub_100253460();
  if (!a4 && a5)
    sub_100253460();
  if (a2 <= 0xC && ((1 << a2) & 0x1014) != 0)
  {
    if (!a4)
      goto LABEL_13;
  }
  else
  {
    sub_100253460();
    if (!a4)
      goto LABEL_13;
  }
  if (!a6)
  {
    v13 = sub_100148064((uint64_t)a4, a5) + 2;
    goto LABEL_20;
  }
LABEL_13:
  if (!a4 && a6)
  {
    v14 = 0;
LABEL_19:
    v13 = sub_100148064(v14, a5) + 3;
    goto LABEL_20;
  }
  v13 = v12 + 2;
  if (a4 && a6)
  {
    v14 = (uint64_t)a4;
    goto LABEL_19;
  }
LABEL_20:
  v15 = (char *)sub_100052DC0(v13);
  if (!v15)
    return 106;
  if (!v13)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
  v16 = v15;
  v20 = v15;
  v21 = v13;
  HIWORD(v21) = 2;
  WORD1(v21) = v13;
  if (a6)
    v17 = 3;
  else
    v17 = 2;
  *v15 = v17 | (16 * a3);
  if (v13 == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
  WORD2(v21) = 2;
  v15[1] = a2;
  if (a6)
  {
    if (v13 <= 2u)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
    WORD2(v21) = 3;
    v15[2] = a6;
  }
  else
  {
    sub_1001480DC(&v20, a4, a5, a2 == 12);
    if (BYTE6(v21) != 2)
    {
      v19 = WORD1(v21);
      goto LABEL_32;
    }
  }
  v19 = WORD2(v21);
  WORD1(v21) = WORD2(v21);
LABEL_32:
  BYTE6(v21) = 15;
  return sub_100147AC8(a1, v16, v19);
}

uint64_t sub_100148B58(int a1, unsigned int a2, char a3, char a4, unsigned __int8 *a5, unsigned int a6)
{
  unsigned int v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v17;
  __int16 v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  __int16 v21;

  v12 = sub_100148064((uint64_t)a5, a6);
  if (a2 >= 0x10)
    sub_100253460();
  v13 = (char *)sub_100052DC0((unsigned __int16)(v12 + 4));
  if (!v13)
    return 106;
  if ((_WORD)v12 == 0xFFFC)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
  v14 = v13;
  v17 = v13;
  v18 = v12 + 4;
  v21 = 2;
  v19 = v12 + 4;
  *v13 = 16 * a2;
  if ((unsigned __int16)(v12 + 4) == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
  v13[1] = 3;
  if ((unsigned __int16)(v12 + 4) <= 2u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
  v13[2] = 4 * a3;
  if (v12 >= 0xFFFC)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
  v20 = 4;
  v13[3] = 4 * a4;
  sub_1001480DC(&v17, a5, a6, 1);
  if (v21 == 2)
  {
    v15 = v20;
    v19 = v20;
  }
  else
  {
    v15 = v19;
  }
  LOBYTE(v21) = 15;
  return sub_1001478B4(a1, a2, 3, v14, v15);
}

uint64_t sub_100148CF8(int a1, int a2, unsigned int a3, char a4, int a5)
{
  char v7;
  char *v10;
  char v11;
  char v12;
  size_t v13;

  v7 = a3;
  if (a3 >= 0x10)
    sub_100253460();
  if (a2 != 3 && a2 != 5)
    sub_100253460();
  v10 = (char *)sub_100052DC0(4uLL);
  if (!v10)
    return 106;
  v11 = 16 * v7;
  if (a5)
  {
    v12 = v11 | 3;
    v10[2] = a4;
    v10[3] = a5;
    v13 = 4;
  }
  else
  {
    v12 = v11 | 2;
    v13 = 2;
  }
  *v10 = v12;
  v10[1] = a2;
  return sub_100147AC8(a1, v10, v13);
}

uint64_t sub_100148DAC(int a1, unsigned int a2, const void *a3, unsigned int a4, int a5)
{
  char v8;
  char *v10;
  int v11;
  char *v12;
  char v13;
  unsigned __int16 v14;

  v8 = a2;
  if (a2 >= 0x10)
    sub_100253460();
  v10 = (char *)sub_100052DC0(a4 + 3);
  if (!v10)
    return 106;
  v11 = (unsigned __int16)(a4 + 3);
  if ((_WORD)a4 == 0xFFFD)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
  v12 = v10;
  v13 = 16 * v8;
  if (a5)
  {
    *v10 = v13 | 3;
    if (v11 == 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
    v10[1] = 11;
    if (v11 == 2)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
    v10[2] = a5;
    v14 = 3;
  }
  else
  {
    *v10 = v13 | 2;
    if (v11 == 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
    v10[1] = 11;
    if (v11 - 2 < a4)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avdtp/avdtp_signal.c");
    memmove(v10 + 2, a3, a4);
    v14 = a4 + 2;
  }
  return sub_100147AC8(a1, v12, v14);
}

uint64_t sub_100148F24(int a1, unsigned int a2, int a3, char a4)
{
  char v6;
  char *v8;
  char v9;
  char v10;
  size_t v11;

  v6 = a2;
  if (a2 >= 0x10)
    sub_100253460();
  v8 = (char *)sub_100052DC0(3uLL);
  if (!v8)
    return 106;
  v9 = 16 * v6;
  if (a3)
  {
    v10 = v9 | 2;
    v11 = 2;
  }
  else
  {
    v10 = v9 | 3;
    v8[2] = a4;
    v11 = 3;
  }
  *v8 = v10;
  v8[1] = 13;
  return sub_100147AC8(a1, v8, v11);
}

uint64_t sub_100148FB4(int a1, char a2, char a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  __int16 v13;
  char v14;
  char v15;
  const void *v16[2];

  v16[0] = 0;
  v6 = *(unsigned __int16 *)(sub_100252DE8(3u) + 4);
  v13 = a1;
  v14 = a2;
  v15 = a3;
  result = sub_10013B704(a1);
  if (result)
  {
    v8 = result;
    v9 = sub_10013B364();
    v11 = *(_DWORD *)(v8 + 24);
    v10 = v8 + 24;
    *(_BYTE *)(v10 + 21) = v9;
    v16[1] = &v13;
    LOWORD(v16[0]) = 4;
    *(_BYTE *)(v10 + 20) = a2;
    sub_100049F6C(v11);
    if (v6)
      v12 = v6;
    else
      v12 = 20;
    return sub_10004A9EC((uint64_t)sub_10014905C, v16, v12, (int *)v10);
  }
  return result;
}

void sub_10014905C(uint64_t a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  int v10;
  int v11;

  v11 = 0;
  v1 = *(unsigned __int16 **)(a1 + 8);
  v2 = *v1;
  v3 = *((unsigned __int8 *)v1 + 2);
  v4 = *((unsigned __int8 *)v1 + 3);
  v5 = sub_10013B704(*v1);
  if (v5)
  {
    v6 = v5;
    if ((_DWORD)v3 == *(unsigned __int8 *)(v5 + 44))
    {
      if (sub_10013B380() || (v7 = *(unsigned __int8 *)(v6 + 45), v7 != sub_10013B364()))
      {
        sub_100148FB4(v2, v3, v4);
      }
      else
      {
        if (sub_10005549C())
        {
          sub_100054530("Didn't get command response to transaction %d within timeout period", v3);
          v8 = sub_1000544A0(3u);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        LOBYTE(v11) = (16 * v3) | 3;
        BYTE1(v11) = v4;
        if (v4 > 9 || ((1 << v4) & 0x2A8) == 0)
        {
          BYTE2(v11) = -1;
          v10 = 3;
        }
        else
        {
          HIWORD(v11) = -256;
          v10 = 4;
        }
        sub_100141228(v2, (unsigned __int8 *)&v11, v10);
      }
    }
  }
}

uint64_t sub_100149190(uint64_t a1)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 40))
    sub_100253460();
  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    sub_100253460();
    v2 = *(_QWORD *)(a1 + 8);
  }
  *(_BYTE *)(a1 + 40) = *(unsigned __int16 *)(v2 + 4) / (*(unsigned __int16 *)(a1 + 34) - 1) + 1;
  return sub_1001491E8(a1, 1);
}

uint64_t sub_1001491E8(uint64_t a1, int a2)
{
  uint64_t v4;
  size_t v5;
  char v6;
  char v7;
  unsigned __int8 *v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  NSObject *v12;
  __int16 v14;
  char v15[2];

  if (!*(_BYTE *)(a1 + 40))
    sub_100253460();
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v15[0] = 0;
    v14 = 0;
    if (a2)
    {
      if (*(unsigned __int8 *)(a1 + 40) < 2u)
      {
        v5 = 0;
      }
      else
      {
        sub_100254518(v4, (unsigned __int16)(*(_WORD *)(a1 + 34) - 1));
        sub_100053900((char *)(a1 + 41), v4, 1u);
        LOBYTE(v14) = *(_BYTE *)(a1 + 41) | 4;
        HIBYTE(v14) = *(_BYTE *)(a1 + 40);
        sub_100053900(v15, v4, 1u);
        v5 = 3;
      }
    }
    else
    {
      sub_100254564(v4, (unsigned __int16)(*(_WORD *)(a1 + 34) - 1));
      if (*(_BYTE *)(a1 + 40) == 1)
        v6 = 12;
      else
        v6 = 8;
      v7 = *(_BYTE *)(a1 + 41) | v6;
      *(_BYTE *)(a1 + 41) = v7;
      LOBYTE(v14) = v7;
      v5 = 1;
    }
    v8 = (unsigned __int8 *)sub_100253D54(2u);
    if (!v8)
    {
      v4 = 106;
LABEL_21:
      v11 = *(_QWORD **)(a1 + 8);
      if (sub_10005549C())
      {
        sub_100054530("SendFragment failed");
        v12 = sub_1000544A0(3u);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          sub_1006CE80C();
      }
      *(_QWORD *)(a1 + 8) = v11[1];
      *(_BYTE *)(a1 + 40) = 0;
      sub_100254090(v11);
      return v4;
    }
    v9 = (uint64_t)v8;
    sub_10005336C(v8, (char *)&v14, v5, 0);
    sub_10025444C((unsigned __int8 *)v9, *(_QWORD *)(a1 + 8));
    if (!*(_WORD *)(v9 + 4))
      sub_100253460();
    v4 = sub_1001DBC18((uint64_t)sub_1001493EC, *(unsigned __int16 *)(a1 + 38), 0, v9, 0);
    if ((_DWORD)v4)
    {
      if (sub_10005549C())
      {
        sub_100054530("L2CAP Write failed: %!", v4);
        v10 = sub_1000544A0(3u);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      sub_100254090((void *)v9);
      goto LABEL_21;
    }
  }
  return v4;
}

void sub_1001493EC(int a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  NSObject *v7;
  _QWORD *v8;

  sub_100254090(a2);
  v3 = sub_10013B704(a1);
  if (v3)
  {
    v4 = v3;
    v5 = *(_BYTE *)(v3 + 40);
    if (!v5)
    {
      sub_100253460();
      v5 = *(_BYTE *)(v4 + 40);
    }
    v6 = v5 - 1;
    *(_BYTE *)(v4 + 40) = v6;
    if (v6)
    {
      if (!sub_1001491E8(v4, 0))
        return;
    }
    else
    {
      v8 = *(_QWORD **)(v4 + 8);
      if (!v8)
        return;
      *(_QWORD *)(v4 + 8) = v8[1];
      sub_100254090(v8);
      if (!*(_QWORD *)(v4 + 8) || !sub_100149190(v4))
        return;
    }
    while (*(_QWORD *)(v4 + 8) && sub_100149190(v4))
      ;
  }
  else if (sub_10005549C())
  {
    sub_100054530("No signalling channel found for CID %d", a1);
    v7 = sub_1000544A0(3u);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

void sub_1001494E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_100253508(3701);
  sub_100253320((uint64_t)"AssertFail %s:%d : %s\n", v2, v3, v4, v5, v6, v7, v8, a1);
  sub_100112D5C();
  abort();
}

uint64_t sub_100149524(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  uint64_t v8;

  if ((_DWORD)xmmword_100999158)
    return 119;
  if (a1)
  {
    v3 = sub_100114588(0x60uLL);
    qword_100994BC8 = (uint64_t)v3;
    if (v3)
    {
      *v3 = a1;
      v4 = *(unsigned __int8 *)sub_100252DE8(4u);
      *(_BYTE *)(qword_100994BC8 + 88) = v4;
      if ((v4 - 17) <= 0xFFFFFFEF)
      {
        if (sub_10005549C())
        {
          sub_100054530("invalid maxTransactions value (%d), setting to %d\n", *(unsigned __int8 *)(qword_100994BC8 + 88), 16);
          v5 = sub_1000544A0(4u);
          if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
            sub_1006D202C();
        }
        *(_BYTE *)(qword_100994BC8 + 88) = 16;
      }
      v6 = *(unsigned __int8 *)(sub_100252DE8(4u) + 1);
      *(_BYTE *)(qword_100994BC8 + 89) = v6;
      if (!v6)
      {
        if (sub_10005549C())
        {
          sub_100054530("invalid maxConnections value (%d), setting to 1\n", *(unsigned __int8 *)(qword_100994BC8 + 89));
          v7 = sub_1000544A0(4u);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
            sub_1006D202C();
        }
        *(_BYTE *)(qword_100994BC8 + 89) = 1;
      }
      v8 = sub_100252DE8(4u);
      result = 0;
      *(_BYTE *)(qword_100994BC8 + 91) = *(_BYTE *)(v8 + 2);
      LODWORD(xmmword_100999158) = 1;
    }
    else
    {
      return 106;
    }
  }
  else
  {
    sub_100253460();
    return 101;
  }
  return result;
}

uint64_t sub_1001496A8()
{
  uint64_t result;

  if (!(_DWORD)xmmword_100999158)
    return 408;
  if (*(_QWORD *)(qword_100994BC8 + 8) || *(_QWORD *)(qword_100994BC8 + 16))
    return 117;
  if (*(_QWORD *)(qword_100994BC8 + 72) || *(_QWORD *)(qword_100994BC8 + 80))
    return 118;
  if (*(_BYTE *)(qword_100994BC8 + 90))
    return 141;
  sub_100053298((void *)qword_100994BC8);
  result = 0;
  qword_100994BC8 = 0;
  LODWORD(xmmword_100999158) = 0;
  return result;
}

uint64_t sub_100149730(int *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  if (!(_DWORD)xmmword_100999158)
    return 408;
  v3 = qword_100994BC8;
  if (*(unsigned __int8 *)(qword_100994BC8 + 90) >= *(unsigned __int8 *)(qword_100994BC8 + 89))
    return 3300;
  v7 = *(_QWORD *)(qword_100994BC8 + 32);
  if (v7)
  {
    result = sub_100149D4C(a1, 2u, *(_QWORD *)(v7 + 8));
    if ((_DWORD)result)
      return result;
    v3 = qword_100994BC8;
  }
  v9 = *(_QWORD *)(v3 + 24);
  if (v9)
  {
    result = sub_100149D4C(a1, 2u, *(_QWORD *)(v9 + 8));
    if ((_DWORD)result)
      return result;
    v3 = qword_100994BC8;
  }
  ++*(_BYTE *)(v3 + 90);
  result = sub_100138CA0((uint64_t)a1, 4366, a2, a3);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(qword_100994BC8 + 90))
      --*(_BYTE *)(qword_100994BC8 + 90);
  }
  return result;
}

uint64_t sub_10014980C(int *a1, int a2, char a3)
{
  char v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  if (!(_DWORD)xmmword_100999158)
    return 408;
  v4 = a2;
  if (!a2)
    return sub_1001396AC((uint64_t)a1, v4, a3);
  v6 = qword_100994BC8;
  if (*(unsigned __int8 *)(qword_100994BC8 + 90) < *(unsigned __int8 *)(qword_100994BC8 + 89))
  {
    v7 = *(_QWORD *)(qword_100994BC8 + 32);
    if (v7)
    {
      result = sub_100149D4C(a1, 2u, *(_QWORD *)(v7 + 8));
      if ((_DWORD)result)
        return result;
      v6 = qword_100994BC8;
    }
    v9 = *(_QWORD *)(v6 + 24);
    if (v9)
    {
      result = sub_100149D4C(a1, 2u, *(_QWORD *)(v9 + 8));
      if ((_DWORD)result)
        return result;
      v6 = qword_100994BC8;
    }
    ++*(_BYTE *)(v6 + 90);
    return sub_1001396AC((uint64_t)a1, v4, a3);
  }
  return 3300;
}

uint64_t sub_1001498D8(int *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!(_DWORD)xmmword_100999158)
    return 408;
  v2 = sub_10013980C((uint64_t)a1);
  if ((_DWORD)v2)
    return v2;
  v4 = qword_100994BC8;
  v5 = *(_QWORD *)(qword_100994BC8 + 32);
  if (v5)
  {
    result = sub_100149D4C(a1, 3u, *(_QWORD *)(v5 + 8));
    if ((_DWORD)result)
      return result;
    v4 = qword_100994BC8;
  }
  v6 = *(_QWORD *)(v4 + 24);
  if (!v6)
    return v2;
  result = sub_100149D4C(a1, 3u, *(_QWORD *)(v6 + 8));
  if (!(_DWORD)result)
    return v2;
  return result;
}

uint64_t sub_100149970(int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!(_DWORD)xmmword_100999158)
    return 408;
  v1 = qword_100994BC8;
  if (*(unsigned __int8 *)(qword_100994BC8 + 90) >= *(unsigned __int8 *)(qword_100994BC8 + 89))
    return 3300;
  v3 = *(_QWORD *)(qword_100994BC8 + 32);
  if (v3)
  {
    result = sub_100149D4C(a1, 2u, *(_QWORD *)(v3 + 8));
    if ((_DWORD)result)
      return result;
    v1 = qword_100994BC8;
  }
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
  {
    result = sub_100149D4C(a1, 2u, *(_QWORD *)(v5 + 8));
    if ((_DWORD)result)
      return result;
    v1 = qword_100994BC8;
  }
  ++*(_BYTE *)(v1 + 90);
  v6 = *(_QWORD *)(v1 + 32);
  if (v6)
  {
    result = sub_100149D4C(a1, 1u, *(_QWORD *)(v6 + 8));
    v1 = qword_100994BC8;
  }
  else
  {
    result = 0;
  }
  v7 = *(_QWORD *)(v1 + 24);
  if (v7)
    return sub_100149D4C(a1, 1u, *(_QWORD *)(v7 + 8));
  return result;
}

uint64_t sub_100149A50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  if (!(_DWORD)xmmword_100999158)
    return 408;
  v2 = qword_100994BC8;
  v3 = *(_QWORD *)(qword_100994BC8 + 32);
  if (v3)
  {
    result = sub_100149CA4(a1, *(_QWORD *)(v3 + 8));
    v2 = qword_100994BC8;
  }
  else
  {
    result = 0;
  }
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    result = sub_100149CA4(a1, *(_QWORD *)(v5 + 8));
    v2 = qword_100994BC8;
  }
  if (*(_BYTE *)(v2 + 90))
    --*(_BYTE *)(v2 + 90);
  return result;
}

void sub_100149AD4(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int16 *v2;
  void **v5;
  BOOL v6;
  void **v7;
  void *v8;
  uint64_t v9;

  v2 = *(unsigned __int16 **)(qword_100994BC8 + 72);
  if (v2)
  {
    v5 = 0;
    do
    {
      v6 = *(_DWORD *)a1 == *(_DWORD *)v2 && *(unsigned __int16 *)(a1 + 4) == v2[2];
      if (!v6 || a2 && *a2 != *((unsigned __int8 *)v2 + 6))
      {
        v7 = (void **)(v2 + 12);
        goto LABEL_8;
      }
      v8 = (void *)*((_QWORD *)v2 + 3);
      if (v5)
      {
        v5[3] = v8;
        if (!*((_QWORD *)v2 + 3))
          goto LABEL_16;
      }
      else
      {
        *(_QWORD *)(qword_100994BC8 + 72) = v8;
        if (!v8)
        {
LABEL_16:
          v9 = qword_100994BC8;
          if (*(unsigned __int16 **)(qword_100994BC8 + 80) != v2)
          {
            sub_100253460();
            v9 = qword_100994BC8;
          }
          *(_QWORD *)(v9 + 80) = v5;
        }
      }
      sub_100053298(*((void **)v2 + 1));
      sub_100053298(v2);
      if (a2)
        return;
      if (v5)
      {
        v7 = v5 + 3;
        v2 = (unsigned __int16 *)v5;
      }
      else
      {
        v2 = 0;
        v7 = (void **)(qword_100994BC8 + 72);
      }
LABEL_8:
      v5 = (void **)v2;
      v2 = (unsigned __int16 *)*v7;
    }
    while (*v7);
  }
}

uint64_t sub_100149BD4(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;

  if (!a1)
    sub_100253460();
  v4 = qword_100994BC8;
  if (a2)
  {
    v5 = *(_QWORD *)(qword_100994BC8 + 32);
    if (!v5)
    {
      sub_100253460();
      v4 = qword_100994BC8;
      v5 = *(_QWORD *)(qword_100994BC8 + 32);
    }
    if (!*(_QWORD *)(v5 + 8))
    {
      sub_100253460();
      v4 = qword_100994BC8;
      v5 = *(_QWORD *)(qword_100994BC8 + 32);
    }
  }
  else
  {
    v5 = *(_QWORD *)(qword_100994BC8 + 24);
    if (!v5)
    {
      sub_100253460();
      v4 = qword_100994BC8;
      v5 = *(_QWORD *)(qword_100994BC8 + 24);
    }
    if (!*(_QWORD *)(v5 + 8))
    {
      sub_100253460();
      v4 = qword_100994BC8;
      v5 = *(_QWORD *)(qword_100994BC8 + 24);
    }
  }
  v6 = (uint64_t *)(v5 + 8);
  v7 = *(unsigned __int8 *)(v4 + 89);
  if (!v7)
    return 0;
  for (result = *v6;
        *(_DWORD *)result != *(_DWORD *)a1 || *(unsigned __int16 *)(result + 4) != *(unsigned __int16 *)(a1 + 4);
        result += 32)
  {
    if (!--v7)
      return 0;
  }
  return result;
}

uint64_t sub_100149CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (a1)
  {
    if (!a2)
      return 0;
  }
  else
  {
    sub_100253460();
    if (!v2)
      return 0;
  }
  v4 = *(unsigned __int8 *)(qword_100994BC8 + 89);
  if (!*(_BYTE *)(qword_100994BC8 + 89))
    return 120;
  while (*(_DWORD *)v2 != *(_DWORD *)a1 || *(unsigned __int16 *)(v2 + 4) != *(unsigned __int16 *)(a1 + 4))
  {
    v2 += 32;
    if (!--v4)
      return 120;
  }
  *(_DWORD *)v2 = 0;
  *(_WORD *)(v2 + 4) = 0;
  if (*(_BYTE *)(v2 + 6))
  {
    result = 0;
    *(_BYTE *)(v2 + 6) = 0;
    return result;
  }
  return 0;
}

uint64_t sub_100149D4C(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  BOOL v11;
  uint64_t result;
  int v13;

  v3 = a3;
  if (a1)
  {
    if (!a3)
      return 0;
  }
  else
  {
    sub_100253460();
    if (!v3)
      return 0;
  }
  v6 = qword_100994BC8;
  v7 = *(unsigned __int8 *)(qword_100994BC8 + 89);
  if (!*(_BYTE *)(qword_100994BC8 + 89))
    return 120;
  v8 = v3;
  do
  {
    if (*(_DWORD *)v8 == *a1 && *(unsigned __int16 *)(v8 + 4) == *((unsigned __int16 *)a1 + 2))
    {
      switch(*(_BYTE *)(v8 + 6))
      {
        case 0:
          if (a2 == 2)
            goto LABEL_35;
          return 122;
        case 1:
          if (a2 == 3)
            goto LABEL_35;
          return 126;
        case 2:
          if (a2 > 1)
            return 116;
          goto LABEL_35;
        case 3:
          if (a2)
            return 116;
LABEL_35:
          if (*(unsigned __int8 *)(v8 + 6) == a2)
            return 0;
          result = 0;
          *(_BYTE *)(v8 + 6) = a2;
          break;
        default:
          return 408;
      }
      return result;
    }
    v8 += 32;
    --v7;
  }
  while (v7);
  v10 = 0;
  while (1)
  {
    if (*(_DWORD *)v3)
      v11 = 0;
    else
      v11 = *(unsigned __int16 *)(v3 + 4) == 0;
    if (!v11)
      goto LABEL_22;
    if (*(_BYTE *)(v3 + 6))
      sub_100253460();
    if (a2 == 2)
      break;
    v6 = qword_100994BC8;
LABEL_22:
    ++v10;
    v3 += 32;
    if (v10 >= *(unsigned __int8 *)(v6 + 89))
      return 120;
  }
  v13 = *a1;
  *(_WORD *)(v3 + 4) = *((_WORD *)a1 + 2);
  *(_DWORD *)v3 = v13;
  if (*(_BYTE *)(v3 + 6) != 2)
  {
    result = 0;
    *(_BYTE *)(v3 + 6) = 2;
    return result;
  }
  return 0;
}

uint64_t sub_100149EE0()
{
  uint64_t result;

  if (!(_DWORD)xmmword_100999158)
    return 408;
  LODWORD(result) = sub_100138A30(4366, (uint64_t)sub_100149F6C, (uint64_t)sub_100149F84, (uint64_t)sub_10014A0C4, (uint64_t)sub_10014A214, (uint64_t)sub_10014A324, (uint64_t)sub_10014A410, (uint64_t)nullsub_92, (uint64_t)sub_10014A438, (uint64_t)nullsub_93);
  if ((_DWORD)result == 119)
    return 0;
  else
    return result;
}

uint64_t sub_100149F6C()
{
  return (**(uint64_t (***)(void))qword_100994BC8)();
}

uint64_t sub_100149F84(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;

  v4 = a4;
  if (!(_DWORD)a4)
  {
    v9 = qword_100994BC8;
    v10 = *(_QWORD *)(qword_100994BC8 + 32);
    if (v10)
    {
      v4 = sub_100149D4C(a1, 1u, *(_QWORD *)(v10 + 8));
      v9 = qword_100994BC8;
    }
    else
    {
      v4 = 0;
    }
    v11 = *(_QWORD *)(v9 + 24);
    if (v11)
      v4 = sub_100149D4C(a1, 1u, *(_QWORD *)(v11 + 8));
    if (!(_DWORD)v4)
    {
      v6 = qword_100994BC8;
      return (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)v6 + 16))(a1, v4);
    }
    v12 = sub_10013980C((uint64_t)a1);
    if ((_DWORD)v12)
    {
      v13 = v12;
      if (sub_10005549C())
      {
        sub_100054530("AVRCP error %!. Failed to disconnet AVCTP %!, still connected", v13, v4);
        v14 = sub_1000544A0(4u);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
  }
  v6 = qword_100994BC8;
  v7 = *(_QWORD *)(qword_100994BC8 + 32);
  if (v7)
  {
    sub_100149CA4((uint64_t)a1, *(_QWORD *)(v7 + 8));
    v6 = qword_100994BC8;
  }
  v8 = *(_QWORD *)(v6 + 24);
  if (v8)
  {
    sub_100149CA4((uint64_t)a1, *(_QWORD *)(v8 + 8));
    v6 = qword_100994BC8;
  }
  if (*(_BYTE *)(v6 + 90))
    --*(_BYTE *)(v6 + 90);
  return (*(uint64_t (**)(int *, uint64_t))(*(_QWORD *)v6 + 16))(a1, v4);
}

uint64_t sub_10014A0C4(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  NSObject *v11;

  sub_1000FF2C4(a1, a2);
  sub_100149AD4(a1, 0);
  v4 = (_BYTE *)qword_100994BC8;
  v5 = *(_QWORD *)(qword_100994BC8 + 24);
  if (v5 && (v6 = *(unsigned __int8 *)(qword_100994BC8 + 89), *(_BYTE *)(qword_100994BC8 + 89)))
  {
    v7 = *(_QWORD *)(v5 + 8);
    while (1)
    {
      v8 = *(_DWORD *)v7 == *(_DWORD *)a1 && *(unsigned __int16 *)(v7 + 4) == *(unsigned __int16 *)(a1 + 4);
      if (v8 && *(_BYTE *)(v7 + 6) == 2)
        break;
      v7 += 32;
      if (!--v6)
        goto LABEL_11;
    }
    if (sub_10005549C())
    {
      sub_100054530("(addr=%s) Cannot disconnect when state is AVRCP_CONNECT_PENDING, issuing failure on ConnectCfm", (const char *)a1);
      v11 = sub_1000544A0(4u);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return sub_100149F84((int *)a1, 0, 0, 116);
  }
  else
  {
LABEL_11:
    v9 = *(_QWORD *)(qword_100994BC8 + 32);
    if (v9)
    {
      sub_100149CA4(a1, *(_QWORD *)(v9 + 8));
      v4 = (_BYTE *)qword_100994BC8;
      v5 = *(_QWORD *)(qword_100994BC8 + 24);
    }
    if (v5)
    {
      sub_100149CA4(a1, *(_QWORD *)(v5 + 8));
      v4 = (_BYTE *)qword_100994BC8;
    }
    if (v4[90])
      --v4[90];
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 8))(a1, a2);
  }
}

void sub_10014A214(uint64_t a1, uint64_t a2, int a3, int a4, _BYTE *a5, unsigned int a6)
{
  void (*v9)(uint64_t, uint64_t, _QWORD *);
  NSObject *v10;
  _QWORD v11[3];

  memset(v11, 0, sizeof(v11));
  if (a4)
  {
    if (a3 == 2)
    {
      sub_1000FF384(a1, a2, 3310);
    }
    else if (sub_10005549C())
    {
      sub_100054530("Peer sent command with invalidPID flag set. Ignoring.");
      v10 = sub_1000544A0(4u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  else if (a6 >= 3 && !sub_10014A6AC((uint64_t)v11, a5, a6))
  {
    if (a3 == 2)
    {
      v9 = *(void (**)(uint64_t, uint64_t, _QWORD *))(qword_100994BC8 + 48);
      if (!v9)
        return;
    }
    else
    {
      if (a3 != 1)
        return;
      v9 = *(void (**)(uint64_t, uint64_t, _QWORD *))(qword_100994BC8 + 40);
      if (!v9)
        return;
    }
    v9(a1, a2, v11);
  }
}

void sub_10014A324(uint64_t a1, int a2, unsigned int a3, int a4, void *ptr, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;

  if (a4 == 1 && (_DWORD)a7)
    sub_1000FF384(a1, a3, a7);
  if (ptr)
    sub_100053298(ptr);
  v9 = sub_10014A658();
  if (v9)
  {
    v10 = v9;
    v11 = sub_1001398B8(v9, 4366, *(unsigned __int8 *)(v9 + 6), *(unsigned __int8 *)(v9 + 7), *(char **)(v9 + 8), *(unsigned __int16 *)(v9 + 16));
    if ((_DWORD)v11)
    {
      if ((_DWORD)v11 == 410)
      {
        if (sub_10005549C())
        {
          sub_100054530("Got WRITE_IN_PROGRESS from AVCTP on a sendcfm. Trying again later.");
          v12 = sub_1000544A0(4u);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        sub_10014A9D0(v10);
        return;
      }
      if (a4 == 1)
        sub_1000FF384(v10, *(unsigned __int8 *)(v10 + 6), v11);
      sub_100053298(*(void **)(v10 + 8));
    }
    sub_100053298((void *)v10);
  }
}

uint64_t sub_10014A410(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)qword_100994BC8 + 24);
  if (v4)
    return v4(result, a4);
  return result;
}

void sub_10014A438(uint64_t a1, uint64_t a2, int a3, int a4, unsigned __int8 *a5, unsigned int a6)
{
  unsigned int v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  NSObject *v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *);
  NSObject *v16;

  if (a4)
  {
    if (a3 == 2)
    {
      sub_1000FF384(a1, a2, 3311);
    }
    else if (sub_10005549C())
    {
      sub_100054530("Peer sent command with invalidPID flag set. Ignoring.");
      v16 = sub_1000544A0(4u);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  else
  {
    v9 = a6 - 3;
    if (a6 >= 3)
    {
      v11 = *a5;
      v12 = *(unsigned __int16 *)(a5 + 1);
      v13 = __rev16(v12);
      if (v9 == bswap32(v12) >> 16)
        goto LABEL_10;
      if (sub_10005549C())
      {
        sub_100054530("Length doesn't match : AVCTP says %d, AVRCP says %d", v9, v13);
        v14 = sub_1000544A0(4u);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      if (v9 >= v13)
      {
LABEL_10:
        if (a3 == 2)
        {
          v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *))(qword_100994BC8 + 64);
          if (!v15)
            return;
        }
        else
        {
          if (a3 != 1)
            return;
          v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *))(qword_100994BC8 + 56);
          if (!v15)
            return;
        }
        v15(a1, a2, v11, v13, a5 + 3);
      }
    }
  }
}

uint64_t sub_10014A5B8()
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;

  if (!(_DWORD)xmmword_100999158)
    return 408;
  if (*(_QWORD *)(qword_100994BC8 + 16) || *(_QWORD *)(qword_100994BC8 + 8))
    return 0;
  if (*(_BYTE *)(qword_100994BC8 + 90))
    return 141;
  v1 = sub_10014A658();
  if (v1)
  {
    v2 = (_QWORD *)v1;
    do
    {
      v3 = (void *)v2[1];
      if (v3)
      {
        sub_100053298(v3);
        v2[1] = 0;
      }
      sub_100053298(v2);
      v2 = (_QWORD *)sub_10014A658();
    }
    while (v2);
  }
  return sub_100138BBC(4366);
}

uint64_t sub_10014A658()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(qword_100994BC8 + 72);
  v1 = *(_QWORD *)(qword_100994BC8 + 80);
  v0 = (_QWORD *)(qword_100994BC8 + 72);
  if (v2)
  {
    if (v2 == v1)
    {
      *v0 = 0;
      v0[1] = 0;
    }
    else
    {
      *v0 = *(_QWORD *)(v2 + 24);
    }
  }
  else if (v1)
  {
    sub_100253460();
  }
  return v2;
}

uint64_t sub_10014A6AC(uint64_t a1, _BYTE *a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  int v5;

  if (!(_DWORD)xmmword_100999158)
    return 408;
  if (a3 < 3)
    return 411;
  if (!a2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_helper.c");
  if (!(_WORD)a3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_helper.c");
  *(_BYTE *)a1 = *a2;
  v4 = a2[1] & 7;
  *(_BYTE *)(a1 + 2) = v4;
  v5 = a2[1] >> 3;
  *(_BYTE *)(a1 + 1) = a2[1] >> 3;
  if ((unsigned __int16)a3 == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_helper.c");
  v3 = 411;
  if ((unsigned __int16)a3 >= 3u && v5 != 30 && v4 != 5)
  {
    v3 = 0;
    *(_BYTE *)(a1 + 3) = a2[2];
    *(_QWORD *)(a1 + 8) = a2 + 3;
    *(_WORD *)(a1 + 16) = a3 - 3;
  }
  return v3;
}

uint64_t sub_10014A798(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned __int16 v9;
  char *v10;
  char *v11;
  char v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  _WORD *v17;
  int v18;

  if (!(_DWORD)xmmword_100999158)
    return 408;
  if (!a3)
  {
    sub_100253460();
    return 101;
  }
  if (*a3 > 0xFu)
    return 101;
  v6 = *((unsigned __int16 *)a3 + 8);
  if (*((_WORD *)a3 + 8))
  {
    if (!*((_QWORD *)a3 + 1))
      return 101;
  }
  if (a3[1] == 30 || a3[2] == 5)
    return 102;
  v9 = v6 + 3;
  v10 = (char *)sub_100114588((unsigned __int16)(v6 + 3));
  if (!v10)
    return 106;
  if ((_WORD)v6 == 0xFFFD)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_helper.c");
  v11 = v10;
  *v10 = *a3;
  v12 = v10[1] | (8 * a3[1]);
  v10[1] = v12;
  v10[1] = a3[2] & 7 | v12;
  if ((unsigned __int16)(v6 + 3) == 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_helper.c");
  if (v6 >= 0xFFFD)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_helper.c");
  v10[2] = a3[3];
  v13 = (unsigned __int16)(v6 + 3) - 3;
  v14 = *((unsigned __int16 *)a3 + 8);
  if (v13 < v14)
  {
    sub_100253460();
    v14 = *((unsigned __int16 *)a3 + 8);
  }
  if (v13 < (int)v14)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_helper.c");
  memmove(v11 + 3, *((const void **)a3 + 1), v14);
  if ((*a3 & 8) != 0)
    v15 = 2;
  else
    v15 = 1;
  v16 = sub_1001398B8(a1, 4366, a2, v15, v11, v9);
  v7 = v16;
  if ((_DWORD)v16)
  {
    if ((_DWORD)v16 == 410)
    {
      v17 = sub_100052DC0(0x20uLL);
      if (v17)
      {
        v18 = *(_DWORD *)a1;
        v17[2] = *(_WORD *)(a1 + 4);
        *(_DWORD *)v17 = v18;
        *((_BYTE *)v17 + 6) = a2;
        *((_BYTE *)v17 + 7) = v15;
        *((_QWORD *)v17 + 1) = v11;
        v17[8] = v9;
        sub_10014A9D0((uint64_t)v17);
        return 0;
      }
      v7 = 106;
    }
    sub_100053298(v11);
  }
  return v7;
}

uint64_t sub_10014A9B0(uint64_t result)
{
  byte_100981A50 = 1;
  word_100981A52 = 2;
  dword_100981A58 = result;
  return result;
}

void sub_10014A9D0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)(a1 + 24) = 0;
  v2 = qword_100994BC8;
  v3 = (_QWORD *)(qword_100994BC8 + 80);
  v4 = *(_QWORD *)(qword_100994BC8 + 80);
  if (v4)
  {
    *(_QWORD *)(v4 + 24) = a1;
  }
  else
  {
    if (*(_QWORD *)(qword_100994BC8 + 72))
    {
      sub_100253460();
      v2 = qword_100994BC8;
    }
    *(_QWORD *)(v2 + 72) = a1;
    v3 = (_QWORD *)(v2 + 80);
  }
  *v3 = a1;
}

uint64_t sub_10014AA2C(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  __int16 *v21;
  uint64_t v22;
  __int16 v23;
  char v24;
  unsigned __int8 v25;
  char v26;
  _BYTE v27[507];

  v20 = 0;
  v21 = 0;
  memset(v27, 0, sizeof(v27));
  LOBYTE(v20) = a3[1];
  *(_WORD *)((char *)&v20 + 1) = 9;
  v21 = &v23;
  v22 = 0;
  v24 = 88;
  v23 = 6400;
  v25 = *a3;
  v6 = 7;
  result = 102;
  v26 = 0;
  if (v25 <= 0x2Fu)
  {
    switch(v25)
    {
      case 0x10u:
      case 0x18u:
        goto LABEL_8;
      case 0x11u:
        goto LABEL_16;
      case 0x12u:
        v10 = **((_BYTE **)a3 + 2);
        goto LABEL_10;
      case 0x13u:
      case 0x15u:
        v8 = a3[8];
        v27[2] = a3[8];
        __memmove_chk(&v27[3], *((_QWORD *)a3 + 2), v8, 504);
        v9 = a3[8];
        goto LABEL_15;
      case 0x14u:
        v27[2] = a3[8];
        if (v27[2] >= 0xFDuLL)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
        __memmove_chk(&v27[3], *((_QWORD *)a3 + 2), 2 * v27[2], 504);
        v9 = 2 * a3[8];
LABEL_15:
        v6 = v9 + 8;
        goto LABEL_16;
      case 0x16u:
        v27[2] = a3[8];
        v11 = a3[9];
        v27[3] = a3[9];
        __memmove_chk(&v27[4], *((_QWORD *)a3 + 2), v11, 503);
        v6 = a3[9] + 9;
        goto LABEL_16;
      case 0x17u:
        v27[2] = a3[8];
        if (!v27[2])
          goto LABEL_11;
        v12 = 0;
        v13 = *((_QWORD *)a3 + 2);
        v14 = 2 * v27[2];
        do
        {
          if (v12 == 504)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
          v15 = &v27[v12 + 3];
          v15[1] = *(_BYTE *)(v13 + v12);
          *v15 = *(_BYTE *)(v13 + v12 + 1);
          v12 += 2;
        }
        while (v14 != v12);
        v6 = v12 + 8;
        goto LABEL_16;
      case 0x20u:
        *(_QWORD *)&v27[2] = **((_QWORD **)a3 + 1);
        v27[10] = a3[16];
        if (v27[10])
        {
          v16 = 0;
          v17 = *((_QWORD *)a3 + 3);
          v18 = 4 * v27[10];
          do
          {
            if (v16 == 496)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            v19 = &v27[v16 + 11];
            v19[3] = *(_DWORD *)(v17 + v16);
            v19[2] = BYTE1(*(_DWORD *)(v17 + v16));
            v19[1] = *(_WORD *)(v17 + v16 + 2);
            *v19 = *(_BYTE *)(v17 + v16 + 3);
            v16 += 4;
          }
          while (v18 != v16);
          v6 = v16 + 16;
        }
        else
        {
          v6 = 16;
        }
        goto LABEL_16;
      default:
        return result;
    }
  }
  if (v25 - 64 < 2)
  {
LABEL_8:
    v10 = a3[8];
LABEL_10:
    v27[2] = v10;
LABEL_11:
    v6 = 8;
  }
  else if (v25 != 48)
  {
    if (v25 != 49)
      return result;
    v27[2] = a3[8];
    *(_DWORD *)&v27[3] = bswap32(*((_DWORD *)a3 + 3));
    v6 = 12;
  }
LABEL_16:
  *(_WORD *)v27 = bswap32(v6 - 7) >> 16;
  if ((unsigned __int16)(v6 - 7) > 0x1F9u)
    LOWORD(v6) = 7;
  LOWORD(v22) = v6;
  return sub_1000FFC94(a1, a2, (unsigned __int8 *)&v20);
}

uint64_t sub_10014AD90(uint64_t a1, unsigned __int8 *a2)
{
  _OWORD v3[2];

  if (a1 && a2)
  {
    memset(v3, 0, sizeof(v3));
    LOWORD(v3[0]) = 272;
    BYTE8(v3[0]) = 3;
    return sub_10014AA2C(a1, a2, (char *)v3);
  }
  else
  {
    sub_100253460();
    return 101;
  }
}

uint64_t sub_10014ADDC(uint64_t a1, unsigned __int8 *a2, char a3)
{
  _OWORD v4[2];

  if (a1 && a2)
  {
    memset(v4, 0, sizeof(v4));
    LOWORD(v4[0]) = 817;
    BYTE8(v4[0]) = a3;
    return sub_10014AA2C(a1, a2, (char *)v4);
  }
  else
  {
    sub_100253460();
    return 101;
  }
}

uint64_t sub_10014AE24(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;

  if (*(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 8) + 8))
  {
    if (a3)
      goto LABEL_3;
  }
  else
  {
    sub_100253460();
    if (a3)
      goto LABEL_3;
  }
  sub_100253460();
LABEL_3:
  v6 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
  if (!v6)
  {
    sub_100253460();
    goto LABEL_16;
  }
  v7 = *((unsigned __int16 *)a3 + 8);
  if (!*((_WORD *)a3 + 8))
  {
LABEL_16:
    v11 = 0;
    v12 = 0;
    v16 = 134;
    goto LABEL_29;
  }
  v8 = *a3;
  if (v7 <= 2)
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 227, "OI_STATUS UnmarshalResponseShort(uint8_t *, uint16_t, uint8_t *, uint8_t *, _Bool)");
    v9 = 0;
    goto LABEL_18;
  }
  HIDWORD(v10) = *v6;
  LODWORD(v10) = bswap32(*(unsigned __int16 *)(v6 + 1));
  v9 = v10 >> 16;
  if (v7 == 3)
  {
LABEL_18:
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 228, "OI_STATUS UnmarshalResponseShort(uint8_t *, uint16_t, uint8_t *, uint8_t *, _Bool)");
    v11 = 0;
    goto LABEL_19;
  }
  v11 = v6[3];
  if (v7 > 4)
  {
    v12 = v6[4];
    if (v8 != 10)
    {
      v15 = 0;
      v14 = 0;
      goto LABEL_24;
    }
    if (v7 > 6)
    {
      if (v7 != 7)
      {
        v13 = v6[7];
        v14 = 0;
        v15 = 3305;
        switch(v13)
        {
          case 0:
            goto LABEL_24;
          case 1:
            v14 = 0;
            v15 = 3306;
            break;
          case 2:
            v14 = 0;
            v15 = 3307;
            break;
          case 3:
            v14 = 0;
            v15 = 3308;
            break;
          default:
            v14 = 0;
            v15 = 3302;
            break;
        }
        goto LABEL_24;
      }
      goto LABEL_23;
    }
    goto LABEL_21;
  }
LABEL_19:
  if (v8 != 10)
  {
    v12 = 0;
    goto LABEL_23;
  }
  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 231, "OI_STATUS UnmarshalResponseShort(uint8_t *, uint16_t, uint8_t *, uint8_t *, _Bool)");
  v12 = 0;
LABEL_21:
  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 232, "OI_STATUS UnmarshalResponseShort(uint8_t *, uint16_t, uint8_t *, uint8_t *, _Bool)");
LABEL_23:
  v15 = 0;
  v14 = 1;
LABEL_24:
  if (v9 != 6488)
    v14 = 1;
  if (v14)
    v16 = 134;
  else
    v16 = v15;
LABEL_29:
  if (*a3 == 8)
    v17 = 3301;
  else
    v17 = v16;
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(qword_100994BC8 + 8) + 8))(a1, a2, a3, v11, v12, v17);
}

uint64_t sub_10014B030(uint64_t a1, int a2, uint64_t a3, _BYTE *a4)
{
  _BYTE *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  int v14;
  char v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  int v25;
  unint64_t v26;
  const char *v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned __int16 v30;
  int v31;
  char v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  signed int v38;
  signed int v39;
  int v40;
  char *v41;
  _BYTE *v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char v49;
  char *v50;
  uint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  signed int v65;
  signed int v66;
  int v67;
  char *v68;
  _BYTE *v69;
  char v70;
  uint64_t v71;
  int v72;
  int v73;
  _BYTE *v74;
  uint64_t v75;
  int v76;
  unsigned __int8 *v77;
  unint64_t v78;
  char *v79;
  _BYTE *v80;
  char v81;
  unint64_t v82;
  _BYTE *v83;
  char *v84;
  char v85;
  char v86;
  uint64_t v87;
  _BYTE *v88;
  unsigned int v89;
  unint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char v98;
  int v99;
  uint64_t v100;
  _BYTE *v101;
  _BYTE *v102;

  if (!a1 || !a3 || (v5 = a4) == 0)
  {
    sub_100253460();
    return 101;
  }
  a4[512] = 0;
  v6 = *(unsigned __int16 *)(a1 + 16);
  if (!*(_WORD *)(a1 + 16))
    return 134;
  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
    return 134;
  if (v6 <= 3)
  {
    v9 = 643;
LABEL_13:
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", v9, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
    return 134;
  }
  if (v6 == 4)
    return 134;
  if (*(_BYTE *)(v7 + 4))
    return 411;
  if (v6 <= 6)
    v10 = 5;
  else
    v10 = 7;
  result = 102;
  v100 = v7;
  if (a2 <= 47)
  {
    v102 = a4 + 512;
    switch(a2)
    {
      case 16:
        if (v6 <= 6)
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 664, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
        }
        else if (v6 != 7)
        {
          v14 = *(unsigned __int8 *)(v7 + 7);
          *(_BYTE *)(a3 + 8) = v14;
          if (v6 < 9)
          {
            v15 = 0;
            v11 = 1;
            LODWORD(v10) = 8;
          }
          else
          {
            v11 = 0;
            *(_BYTE *)(a3 + 9) = *(_BYTE *)(v7 + 8);
            v15 = 1;
            LODWORD(v10) = 9;
          }
LABEL_85:
          if (v14 != 3)
          {
            if (v14 != 2)
              return 101;
            *(_QWORD *)(a3 + 16) = v5;
            v46 = *(unsigned __int8 *)(a3 + 9);
            if (v46 < 0x81)
            {
              if (!*(_BYTE *)(a3 + 9))
                goto LABEL_148;
            }
            else
            {
              *v102 = 1;
              v46 = 128;
            }
            v75 = 0;
            v76 = v6 - 2;
            while (1)
            {
              if (v11)
              {
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 677, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
              }
              else if (v76 > (unsigned __int16)v10)
              {
                v11 = 0;
                v77 = (unsigned __int8 *)(v7 + (unsigned __int16)v10);
                HIDWORD(v78) = *v77;
                LODWORD(v78) = bswap32(*(unsigned __int16 *)(v77 + 1));
                *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v75) = v78 >> 16;
                LOWORD(v10) = v10 + 3;
                goto LABEL_159;
              }
              v11 = 1;
LABEL_159:
              if (v46 == ++v75)
                goto LABEL_148;
            }
          }
          *(_QWORD *)(a3 + 16) = v5;
          v71 = *(unsigned __int8 *)(a3 + 9);
          v72 = v11;
          if ((v15 & 1) != 0)
          {
            v73 = v6 - v10;
          }
          else
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 682, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
            v73 = 0;
          }
          if (v73 >= *(unsigned __int8 *)(a3 + 9))
          {
            if ((_DWORD)v71)
            {
              v79 = (char *)(v7 + v10);
              v80 = &v5[v71];
              do
              {
                v81 = *v79++;
                *v5++ = v81;
              }
              while (v5 < v80);
            }
            v11 = v72;
            goto LABEL_148;
          }
          return 134;
        }
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 665, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
        v15 = 0;
        v14 = *(unsigned __int8 *)(a3 + 8);
        v11 = 1;
        goto LABEL_85;
      case 17:
        *(_QWORD *)(a3 + 16) = a4;
        if (v6 <= 6)
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 691, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
          v5 = *(_BYTE **)(a3 + 16);
        }
        else if (v6 != 7)
        {
          v11 = 0;
          v16 = *(unsigned __int8 *)(v7 + 7);
          *(_BYTE *)(a3 + 8) = v16;
          v17 = &a4[v16];
          v18 = v6 - 8;
          v10 = 8;
          goto LABEL_91;
        }
        v17 = &v5[*(unsigned __int8 *)(a3 + 8)];
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 692, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
        v18 = 0;
        LODWORD(v16) = *(unsigned __int8 *)(a3 + 8);
        v11 = 1;
LABEL_91:
        if (v18 < (int)v16)
          return 134;
        if (v5 < v17)
        {
          v47 = (char *)(v7 + v10);
          v48 = v17 - v5;
          do
          {
            v49 = *v47++;
            *v5++ = v49;
            --v48;
          }
          while (v48);
        }
        goto LABEL_148;
      case 18:
        *(_QWORD *)(a3 + 16) = a4;
        if (v6 <= 6)
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 697, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
          v5 = *(_BYTE **)(a3 + 16);
        }
        else if (v6 != 7)
        {
          v11 = 0;
          v19 = *(unsigned __int8 *)(v7 + 7);
          *(_BYTE *)(a3 + 8) = v19;
          v20 = &a4[v19];
          v21 = v6 - 8;
          v10 = 8;
          goto LABEL_98;
        }
        v20 = &v5[*(unsigned __int8 *)(a3 + 8)];
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 698, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
        v21 = 0;
        LODWORD(v19) = *(unsigned __int8 *)(a3 + 8);
        v11 = 1;
LABEL_98:
        if (v21 < (int)v19)
          return 134;
        if (v5 < v20)
        {
          v50 = (char *)(v7 + v10);
          v51 = v20 - v5;
          do
          {
            v52 = *v50++;
            *v5++ = v52;
            --v51;
          }
          while (v51);
        }
        goto LABEL_148;
      case 19:
        *(_QWORD *)(a3 + 16) = a4;
        if (v6 <= 6)
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 703, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
          v5 = *(_BYTE **)(a3 + 16);
        }
        else if (v6 != 7)
        {
          v11 = 0;
          v22 = *(unsigned __int8 *)(v7 + 7);
          *(_BYTE *)(a3 + 8) = v22;
          v23 = &a4[2 * v22];
          v24 = v6 - 8;
          v10 = 8;
          goto LABEL_105;
        }
        v23 = &v5[2 * *(unsigned __int8 *)(a3 + 8)];
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 704, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
        v24 = 0;
        LODWORD(v22) = *(unsigned __int8 *)(a3 + 8);
        v11 = 1;
LABEL_105:
        if (v24 < 2 * (int)v22)
          return 134;
        if (v5 < v23)
        {
          v53 = (char *)(v7 + v10);
          v54 = v23 - v5;
          do
          {
            v55 = *v53++;
            *v5++ = v55;
            --v54;
          }
          while (v54);
        }
        goto LABEL_148;
      case 21:
      case 22:
        *(_QWORD *)(a3 + 16) = a4;
        if (v6 <= 6)
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 716, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
        }
        else if (v6 != 7)
        {
          v11 = 0;
          v12 = *(unsigned __int8 *)(v7 + 7);
          *(_BYTE *)(a3 + 8) = v12;
          v10 = 8;
          goto LABEL_48;
        }
        v12 = *(unsigned __int8 *)(a3 + 8);
        v11 = 1;
LABEL_48:
        if (!v12)
          goto LABEL_148;
        v26 = 0;
        v27 = "/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c";
        v28 = v102;
        while (2)
        {
          if (v11)
          {
            sub_10025240C(v27, 721, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
LABEL_56:
            sub_10025240C(v27, 722, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
            v29 = v10;
            goto LABEL_57;
          }
          if (v6 <= (unsigned __int16)v10)
            goto LABEL_56;
          v29 = (unsigned __int16)v10 + 1;
          *(_BYTE *)(*(_QWORD *)(a3 + 16) + 24 * v26) = *(_BYTE *)(v7 + (unsigned __int16)v10);
          if ((int)(v6 - 1) <= (unsigned __int16)(v10 + 1))
          {
LABEL_57:
            sub_10025240C(v27, 723, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
            v32 = 0;
            v31 = 0;
            v11 = 1;
            v10 = v29;
            goto LABEL_58;
          }
          *(_WORD *)(*(_QWORD *)(a3 + 16) + 24 * v26 + 2) = bswap32(*(unsigned __int16 *)(v7 + v29)) >> 16;
          v30 = v10 + 3;
          if (v6 <= (unsigned __int16)(v10 + 3))
          {
            v32 = 0;
            v31 = 0;
            v11 = 1;
            v10 = (v10 + 3);
          }
          else
          {
            v11 = 0;
            v10 = (v10 + 4);
            v31 = *(unsigned __int8 *)(v7 + v30);
            v32 = 1;
          }
LABEL_58:
          v33 = v27;
          *(_DWORD *)(*(_QWORD *)(a3 + 16) + 24 * v26 + 16) = v31;
          v5 += 24;
          v34 = *(_QWORD *)(a3 + 16);
          v28 -= *(int *)(v34 + 24 * v26 + 16);
          if (v28 < v5)
          {
            *v102 = 1;
            *(_DWORD *)(*(_QWORD *)(a3 + 16) + 24 * v26 + 16) += (_DWORD)v28 - (_DWORD)v5;
            v34 = *(_QWORD *)(a3 + 16);
          }
          *(_QWORD *)(v34 + 24 * v26 + 8) = v28;
          v35 = *(_QWORD *)(a3 + 16) + 24 * v26;
          v36 = *(_BYTE **)(v35 + 8);
          v37 = *(int *)(v35 + 16);
          if ((v32 & 1) != 0)
          {
            v38 = v6 - (unsigned __int16)v10;
            v39 = v37;
          }
          else
          {
            v40 = v11;
            sub_10025240C(v33, 739, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
            v11 = v40;
            v38 = 0;
            v39 = *(_DWORD *)(*(_QWORD *)(a3 + 16) + 24 * v26 + 16);
          }
          if (v38 >= v39)
          {
            if ((int)v37 >= 1)
            {
              v41 = (char *)(v100 + (unsigned __int16)v10);
              v42 = &v36[v37];
              do
              {
                v43 = *v41++;
                *v36++ = v43;
              }
              while (v36 < v42);
              v39 = *(_DWORD *)(*(_QWORD *)(a3 + 16) + 24 * v26 + 16);
            }
            v10 = (v10 + v39);
          }
          else
          {
            v11 = 1;
          }
          if (!*v102)
          {
            v27 = v33;
            ++v26;
            v7 = v100;
            if (v26 >= *(unsigned __int8 *)(a3 + 8))
              goto LABEL_148;
            continue;
          }
          break;
        }
        v13 = v26 + 1;
        break;
      case 32:
        *(_QWORD *)(a3 + 16) = a4;
        if (v6 <= 6)
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 759, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
        }
        else if (v6 != 7)
        {
          v11 = 0;
          v25 = *(unsigned __int8 *)(v7 + 7);
          *(_BYTE *)(a3 + 8) = v25;
          v10 = 8;
          goto LABEL_112;
        }
        v25 = *(unsigned __int8 *)(a3 + 8);
        v11 = 1;
LABEL_112:
        if (!v25)
          goto LABEL_148;
        v56 = 0;
        v99 = v6 - 1;
        v101 = v102;
        while (2)
        {
          if (v11)
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 763, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
LABEL_120:
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 764, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
            v57 = v10;
            goto LABEL_121;
          }
          if ((int)(v6 - 3) <= (unsigned __int16)v10)
            goto LABEL_120;
          *(_DWORD *)(*(_QWORD *)(a3 + 16) + 24 * v56) = bswap32(*(_DWORD *)(v7 + (unsigned __int16)v10));
          v57 = (v10 + 4);
          if (v99 <= (unsigned __int16)(v10 + 4))
          {
LABEL_121:
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 765, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
            v59 = 0;
            v58 = 0;
            v11 = 1;
            v10 = v57;
            goto LABEL_122;
          }
          *(_WORD *)(*(_QWORD *)(a3 + 16) + 24 * v56 + 4) = bswap32(*(unsigned __int16 *)(v7
                                                                                        + (unsigned __int16)(v10 + 4))) >> 16;
          if (v99 <= (unsigned __int16)(v10 + 6))
          {
            v59 = 0;
            v58 = 0;
            v11 = 1;
            v10 = (v10 + 6);
          }
          else
          {
            v11 = 0;
            v58 = __rev16(*(unsigned __int16 *)(v7 + (unsigned __int16)(v10 + 6)));
            v10 = (v10 + 8);
            v59 = 1;
          }
LABEL_122:
          *(_DWORD *)(*(_QWORD *)(a3 + 16) + 24 * v56 + 16) = v58;
          v5 += 24;
          v60 = *(_QWORD *)(a3 + 16);
          v61 = (unint64_t)&v101[-*(int *)(v60 + 24 * v56 + 16)];
          if (v61 < (unint64_t)v5)
          {
            *v102 = 1;
            *(_DWORD *)(*(_QWORD *)(a3 + 16) + 24 * v56 + 16) += v61 - (_DWORD)v5;
            v60 = *(_QWORD *)(a3 + 16);
          }
          v101 = (_BYTE *)v61;
          *(_QWORD *)(v60 + 24 * v56 + 8) = v61;
          v62 = *(_QWORD *)(a3 + 16) + 24 * v56;
          v63 = *(_BYTE **)(v62 + 8);
          v64 = *(int *)(v62 + 16);
          if ((v59 & 1) != 0)
          {
            v65 = v6 - (unsigned __int16)v10;
            v66 = v64;
          }
          else
          {
            v67 = v11;
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 782, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
            v11 = v67;
            v65 = 0;
            v66 = *(_DWORD *)(*(_QWORD *)(a3 + 16) + 24 * v56 + 16);
          }
          if (v65 >= v66)
          {
            if ((int)v64 >= 1)
            {
              v68 = (char *)(v7 + (unsigned __int16)v10);
              v69 = &v63[v64];
              do
              {
                v70 = *v68++;
                *v63++ = v70;
              }
              while (v63 < v69);
              v66 = *(_DWORD *)(*(_QWORD *)(a3 + 16) + 24 * v56 + 16);
            }
            v10 = (v10 + v66);
          }
          else
          {
            v11 = 1;
          }
          if (!*v102)
          {
            if (++v56 >= (unint64_t)*(unsigned __int8 *)(a3 + 8))
              goto LABEL_148;
            continue;
          }
          break;
        }
        v13 = v56 + 1;
        break;
      default:
        return result;
    }
LABEL_147:
    *(_BYTE *)(a3 + 8) = v13;
    goto LABEL_148;
  }
  switch(a2)
  {
    case '0':
      if (v6 <= 6)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 794, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
      }
      else if (v6 > 0xA)
      {
        *(_DWORD *)(a3 + 8) = bswap32(*(_DWORD *)(v7 + 7));
        if (v6 > 0xE)
        {
          *(_DWORD *)(a3 + 12) = bswap32(*(_DWORD *)(v7 + 11));
          if (v6 != 15)
          {
            *(_BYTE *)(a3 + 16) = *(_BYTE *)(v7 + 15);
            return 0;
          }
          return 134;
        }
        goto LABEL_142;
      }
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 795, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
LABEL_142:
      v9 = 796;
      goto LABEL_13;
    case '1':
      *(_QWORD *)(a3 + 8) = a4;
      if (v6 <= 6)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 802, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
        v44 = 0;
        v11 = 1;
        v45 = 5;
      }
      else if (v6 == 7)
      {
        v44 = 0;
        v11 = 1;
        v45 = 7;
      }
      else
      {
        v11 = 0;
        *a4 = *(_BYTE *)(v7 + 7);
        v44 = 1;
        v45 = 8;
      }
      v74 = *(_BYTE **)(a3 + 8);
      result = 101;
      switch(*v74)
      {
        case 1:
          if ((v44 & 1) != 0)
            goto LABEL_187;
          v9 = 806;
          goto LABEL_13;
        case 2:
          if ((v44 & 1) == 0)
          {
            v9 = 813;
            goto LABEL_13;
          }
          if ((int)(v6 - v45) < 8)
            return 134;
          v82 = (unint64_t)(v74 + 16);
          v83 = v74 + 8;
          v84 = (char *)(v7 + v45);
          do
          {
            v85 = *v84++;
            *v83++ = v85;
          }
          while ((unint64_t)v83 < v82);
          break;
        case 3:
        case 4:
          break;
        case 5:
          if ((v44 & 1) == 0)
          {
            v9 = 816;
            goto LABEL_13;
          }
          if ((int)(v6 - v45) < 4)
            return 134;
          *((_DWORD *)v74 + 2) = bswap32(*(_DWORD *)(v7 + v45));
          return 0;
        case 6:
        case 7:
          if ((v44 & 1) == 0)
          {
            v9 = 810;
            goto LABEL_13;
          }
LABEL_187:
          if (v6 <= v45)
            return 134;
          v74[8] = *(_BYTE *)(v7 + v45);
          return 0;
        case 8:
          *((_QWORD *)v74 + 1) = v5 + 24;
          if ((v44 & 1) != 0)
          {
            if (v6 > v45)
            {
              v11 = 0;
              v86 = *(_BYTE *)(v7 + v45++);
              *(_BYTE *)(*(_QWORD *)(a3 + 8) + 16) = v86;
              v87 = *(_QWORD *)(a3 + 8);
              v88 = *(_BYTE **)(v87 + 8);
              v89 = *(unsigned __int8 *)(v87 + 16);
              v90 = 2 * *(unsigned __int8 *)(v87 + 16);
              if (v89 <= 0xF4)
                v91 = 2 * v89;
              else
                v91 = 488;
              v92 = &v88[v91];
              v93 = (int)(v6 - v45);
              goto LABEL_198;
            }
          }
          else
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 820, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
          }
          v95 = *(_QWORD *)(a3 + 8);
          v88 = *(_BYTE **)(v95 + 8);
          v96 = *(unsigned __int8 *)(v95 + 16);
          if (v96 <= 0xF4)
            v91 = 2 * v96;
          else
            v91 = 488;
          v92 = &v88[v91];
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 821, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
          v93 = 0;
          v89 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 16);
          v90 = 2 * *(unsigned __int8 *)(*(_QWORD *)(a3 + 8) + 16);
          v11 = 1;
LABEL_198:
          if (v89 > 0xF4)
            v90 = 488;
          if (v93 < v90)
            return 134;
          if (v91)
          {
            v97 = (char *)(v7 + v45);
            do
            {
              v98 = *v97++;
              *v88++ = v98;
            }
            while (v88 < v92);
          }
          break;
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
          return result;
        case 0xD:
          if ((v44 & 1) != 0)
          {
            if (v6 > v45)
            {
              v11 = 0;
              v94 = *(_BYTE *)(v7 + v45) & 0x7F;
              goto LABEL_210;
            }
            v94 = 0;
          }
          else
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 834, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
            v94 = 0;
            v74 = *(_BYTE **)(a3 + 8);
          }
          v11 = 1;
LABEL_210:
          v74[8] = v94;
          break;
        default:
          if (*v74 == 113)
            break;
          return result;
      }
LABEL_148:
      if (!v11)
        return 0;
      return 134;
    case 'P':
      if (v6 <= 6)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 848, "OI_STATUS OI_AVRCPController_UnmarshalMetaResponse(OI_AVRCP_FRAME *, uint8_t, OI_AVRCP_RESPONSE *, OI_AVRCP_RESPONSE_DATA *)");
      }
      else if (v6 != 7)
      {
        v11 = 0;
        v13 = *(_BYTE *)(v7 + 7) & 0x7F;
        goto LABEL_147;
      }
      v13 = 0;
      v11 = 1;
      goto LABEL_147;
  }
  return result;
}

uint64_t sub_10014BD40(uint64_t a1, unsigned int a2, char a3, int a4)
{
  unsigned __int8 v4;
  char v5;
  uint64_t v6;
  __int16 v7;
  NSObject *v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  if (a1)
  {
    v12 = 0;
    v13 = 5773568;
    if (a4 == 3301)
      v4 = 8;
    else
      v4 = 10;
    if (!a4)
      v4 = 9;
    v11 = &v13;
    v10 = v4;
    *(_WORD *)((char *)&v10 + 1) = 9;
    BYTE3(v10) = 0;
    BYTE3(v13) = a3;
    v5 = 0;
    switch(a4)
    {
      case 3301:
        goto LABEL_11;
      case 3302:
      case 3303:
      case 3304:
        goto LABEL_12;
      case 3305:
        goto LABEL_14;
      case 3306:
        v5 = 1;
        goto LABEL_14;
      case 3307:
        v5 = 2;
        goto LABEL_14;
      default:
        if (a4)
        {
LABEL_12:
          v5 = 3;
LABEL_14:
          *(_WORD *)((char *)&v13 + 5) = 256;
          HIBYTE(v13) = v5;
          v7 = 8;
        }
        else
        {
LABEL_11:
          *(_WORD *)((char *)&v13 + 5) = 0;
          v7 = 7;
        }
        LOWORD(v12) = v7;
        v6 = sub_10014F6A0(a1, a2, (unsigned __int8 *)&v10);
        if ((_DWORD)v6)
        {
          if (sub_10005549C())
          {
            sub_100054530("Failed to send Simple Meta Response %!", v6, v10, v11);
            v8 = sub_1000544A0(4u);
            if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
              sub_1006CE7A4();
          }
        }
        break;
    }
  }
  else
  {
    sub_100253460();
    return 101;
  }
  return v6;
}

uint64_t sub_10014BE90(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 && a4 && a3)
  {
    v6 = 2;
    v5 = 16;
    BYTE1(v6) = a3;
    v7 = a4;
    return sub_10014BEE8(a1, a2, 12, (unsigned __int8 *)&v5);
  }
  else
  {
    sub_100253460();
    return 101;
  }
}

uint64_t sub_10014BEE8(uint64_t a1, unsigned int a2, char a3, unsigned __int8 *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  unint64_t v15;
  NSObject *v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unsigned __int16 v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  __int16 v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  unsigned __int16 v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  unsigned __int16 v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  char v82;
  unsigned int v84;
  BOOL v85;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  uint64_t v94;
  _OWORD v95[32];

  v92 = 0;
  v93 = 0;
  v94 = 0;
  memset(v95, 0, sizeof(v95));
  if (!qword_100994BC8 || (v4 = *(_QWORD *)(qword_100994BC8 + 24)) == 0)
  {
    if (sub_10005549C())
    {
      sub_100054530("Failed to Send Response, AVRCP is not registered!");
      v16 = sub_1000544A0(4u);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 3308;
  }
  LOBYTE(v92) = a3;
  *(_WORD *)((char *)&v92 + 1) = 9;
  BYTE3(v92) = 0;
  v93 = v95;
  LOWORD(v94) = *(_WORD *)(v4 + 20);
  v5 = (unsigned __int16)v94;
  if (!(_WORD)v94)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
  if ((unsigned __int16)v94 <= 2u)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
  BYTE2(v95[0]) = 88;
  LOWORD(v95[0]) = 6400;
  if ((unsigned __int16)v94 == 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
  v6 = a4;
  v7 = a2;
  v8 = a1;
  v9 = 0;
  v10 = *a4;
  BYTE3(v95[0]) = *a4;
  if ((unsigned __int16)v94 <= 6u)
    v11 = 4;
  else
    v11 = 7;
  v12 = 3301;
  if (v10 > 47)
  {
    if (v10 == 48)
    {
      if ((unsigned __int16)v94 <= 6u)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1380, "OI_STATUS MarshalResponse(const OI_BD_ADDR *, OI_AVRCP_RESPONSE *, uint8_t *, uint16_t *)");
      }
      else if ((unsigned __int16)v94 > 0xAu)
      {
        *(_DWORD *)((char *)v95 + 7) = bswap32(*((_DWORD *)a4 + 2));
        if ((unsigned __int16)v94 <= 0xEu)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
        *(_DWORD *)((char *)v95 + 11) = bswap32(*((_DWORD *)a4 + 3));
        if ((unsigned __int16)v94 == 15)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
        v9 = 0;
        HIBYTE(v95[0]) = a4[16];
LABEL_76:
        v13 = 16;
        goto LABEL_152;
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
    }
    if (v10 == 49)
    {
      if ((unsigned __int16)v94 <= 6u)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1444, "OI_STATUS MarshalResponse(const OI_BD_ADDR *, OI_AVRCP_RESPONSE *, uint8_t *, uint16_t *)");
      }
      else if ((unsigned __int16)v94 != 7)
      {
        v49 = *((_QWORD *)a4 + 1);
        BYTE7(v95[0]) = *(_BYTE *)v49;
        v9 = 0;
        v13 = 8;
        switch(*(_BYTE *)v49)
        {
          case 1:
            if ((unsigned __int16)v94 <= 8u)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            goto LABEL_147;
          case 2:
            if ((unsigned __int16)v94 <= 0xFu)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            v9 = 0;
            *((_QWORD *)&v95[0] + 1) = *(_QWORD *)(v49 + 8);
            goto LABEL_76;
          case 3:
          case 4:
          case 9:
          case 0xA:
            goto LABEL_152;
          case 5:
            if ((unsigned __int16)v94 <= 0xBu)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            v9 = 0;
            BYTE11(v95[0]) = *(_DWORD *)(v49 + 8);
            BYTE10(v95[0]) = BYTE1(*(_DWORD *)(v49 + 8));
            BYTE9(v95[0]) = *(_WORD *)(v49 + 10);
            BYTE8(v95[0]) = *(_BYTE *)(v49 + 11);
            goto LABEL_151;
          case 6:
          case 7:
            if ((unsigned __int16)v94 <= 8u)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            goto LABEL_147;
          case 8:
            v88 = v11;
            if ((unsigned __int16)v94 <= 8u)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            BYTE8(v95[0]) = *(_BYTE *)(v49 + 16);
            v78 = BYTE8(v95[0]);
            v79 = 2 * BYTE8(v95[0]);
            v41 = (unsigned __int16)(v94 - 9) >> 1;
            if (v79 > (unsigned __int16)(v94 - 9))
              v78 = (unsigned __int16)(v94 - 9) >> 1;
            if ((unsigned __int16)v94 - 9 < 2 * v78)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            v42 = (2 * v78);
            __memmove_chk((unint64_t)v95 | 9, *(_QWORD *)(v49 + 8), v42, 503);
            v13 = v42 + 9;
            if (v79 <= (unsigned __int16)(v94 - 9))
              goto LABEL_143;
            v80 = *((_QWORD *)v6 + 1);
            v43 = *(unsigned __int8 *)(v80 + 16);
            v44 = *v6;
            v45 = *(_QWORD *)(v80 + 8);
            goto LABEL_63;
          case 0xB:
            if ((unsigned __int16)v94 <= 9u)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            BYTE9(v95[0]) = *(_BYTE *)(v49 + 8);
            BYTE8(v95[0]) = *(_BYTE *)(v49 + 9);
            if ((unsigned __int16)v94 <= 0xBu)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            v9 = 0;
            BYTE11(v95[0]) = *(_BYTE *)(v49 + 10);
            BYTE10(v95[0]) = *(_BYTE *)(v49 + 11);
LABEL_151:
            v13 = 12;
            goto LABEL_152;
          case 0xC:
            if ((unsigned __int16)v94 <= 9u)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            v9 = 0;
            BYTE9(v95[0]) = *(_BYTE *)(v49 + 8);
            BYTE8(v95[0]) = *(_BYTE *)(v49 + 9);
            v13 = 10;
            goto LABEL_152;
          case 0xD:
            if ((unsigned __int16)v94 <= 8u)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
LABEL_147:
            v9 = 0;
            BYTE8(v95[0]) = *(_BYTE *)(v49 + 8);
            v13 = 9;
            goto LABEL_152;
          default:
            return 101;
        }
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
    }
    v13 = v11;
    v14 = 0;
    if (v10 == 65)
      goto LABEL_152;
    goto LABEL_165;
  }
  v13 = v11;
  v14 = 0;
  switch(v10)
  {
    case 16:
      if ((unsigned __int16)v94 <= 6u)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1200, "OI_STATUS MarshalResponse(const OI_BD_ADDR *, OI_AVRCP_RESPONSE *, uint8_t *, uint16_t *)");
LABEL_199:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
      }
      if ((unsigned __int16)v94 == 7)
        goto LABEL_199;
      v17 = a4[8];
      BYTE7(v95[0]) = a4[8];
      if ((unsigned __int16)v94 <= 8u)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
      v18 = v11;
      v19 = a4[9];
      BYTE8(v95[0]) = a4[9];
      v20 = (unsigned __int16)v94 - 9;
      if (v17 == 3)
      {
        if ((unsigned __int16)(v94 - 9) >= v19)
          v22 = v19;
        else
          v22 = (unsigned __int16)(v94 - 9);
        if (v20 < (int)v22)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
        __memmove_chk((unint64_t)v95 | 9, *((_QWORD *)a4 + 2), v22, 503);
        v13 = v22 + 9;
        if (v19 > (unsigned __int16)v20)
        {
          v62 = v6[8];
          LOWORD(v19) = v6[9];
          v63 = 1;
          v64 = *v6;
          v11 = v18;
          goto LABEL_128;
        }
LABEL_105:
        v9 = 0;
        v11 = v18;
        goto LABEL_152;
      }
      if (v17 == 2)
      {
        v21 = (unsigned __int16)(v94 - 9);
        LODWORD(v22) = v21 / 3;
        if (3 * v19 <= (unsigned __int16)v20)
          v23 = v19;
        else
          v23 = (unsigned __int16)(v94 - 9) / 3u;
        if (v23)
        {
          v24 = 0;
          v13 = 3 * v23 + 9;
          v25 = (_BYTE *)((unint64_t)v95 | 0xB);
          v26 = 4 * v23;
          v27 = ((2863311531u * (unint64_t)v20) >> 31) & 0x1FFFFFFFCLL;
          v11 = v18;
          do
          {
            if (v27 == v24 || (v28 = *((_QWORD *)a4 + 2), v29 = *(_DWORD *)(v28 + v24), HIBYTE(v29)))
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            *v25 = v29;
            v30 = v28 + v24;
            *(v25 - 1) = BYTE1(*(_DWORD *)v30);
            *(v25 - 2) = *(_WORD *)(v30 + 2);
            v25 += 3;
            v24 += 4;
          }
          while (v26 != v24);
        }
        else
        {
          v13 = 9;
          v11 = v18;
        }
        if (3 * v19 <= v21)
        {
          v9 = 0;
          goto LABEL_152;
        }
        v62 = 2;
        v64 = 16;
        v63 = 4;
LABEL_128:
        v12 = sub_10014E7A4(v8, v22, v62, v19, v64, *((_QWORD *)v6 + 2) + v63 * (unint64_t)v22, 0);
        if ((_DWORD)v12)
          goto LABEL_166;
LABEL_129:
        v9 = 3304;
        goto LABEL_152;
      }
      return 101;
    case 17:
      if ((unsigned __int16)v94 <= 6u)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1243, "OI_STATUS MarshalResponse(const OI_BD_ADDR *, OI_AVRCP_RESPONSE *, uint8_t *, uint16_t *)");
      }
      else if ((unsigned __int16)v94 != 7)
      {
        v31 = v11;
        BYTE7(v95[0]) = a4[8];
        v32 = BYTE7(v95[0]);
        v33 = (unsigned __int16)v94 - 8;
        if ((unsigned __int16)(v94 - 8) >= BYTE7(v95[0]))
          v34 = BYTE7(v95[0]);
        else
          v34 = (unsigned __int16)(v94 - 8);
        if (v33 < (int)v34)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
        __memmove_chk((char *)v95 + 8, *((_QWORD *)a4 + 2), v34, 504);
        v13 = v34 + 8;
        if (v32 <= (unsigned __int16)v33)
        {
          v9 = 0;
          v11 = v31;
          goto LABEL_152;
        }
        v12 = sub_10014E7A4(v8, v34, 0xFFFF, v6[8], *v6, *((_QWORD *)v6 + 2) + v34, 0);
        if (!(_DWORD)v12)
        {
          v11 = v31;
          goto LABEL_129;
        }
        goto LABEL_166;
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
    case 18:
      if ((unsigned __int16)v94 <= 6u)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1267, "OI_STATUS MarshalResponse(const OI_BD_ADDR *, OI_AVRCP_RESPONSE *, uint8_t *, uint16_t *)");
      }
      else if ((unsigned __int16)v94 != 7)
      {
        v18 = v11;
        BYTE7(v95[0]) = a4[8];
        v35 = BYTE7(v95[0]);
        v36 = (unsigned __int16)v94 - 8;
        if ((unsigned __int16)(v94 - 8) >= BYTE7(v95[0]))
          v37 = BYTE7(v95[0]);
        else
          v37 = (unsigned __int16)(v94 - 8);
        if (v36 < BYTE7(v95[0]))
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
        __memmove_chk((char *)v95 + 8, *((_QWORD *)a4 + 2), BYTE7(v95[0]), 504);
        v38 = v6[8];
        v13 = v38 + 8;
        if (v35 <= (unsigned __int16)v36)
          goto LABEL_105;
        v12 = sub_10014E7A4(v8, v37, 0xFFFF, v38, *v6, *((_QWORD *)v6 + 2) + v37, 0);
        if (!(_DWORD)v12)
        {
          v11 = v18;
          goto LABEL_129;
        }
LABEL_166:
        if ((_DWORD)v12 == 3304 || (_DWORD)v12 == 0)
        {
          v84 = sub_10014F6A0(v8, v7, (unsigned __int8 *)&v92);
          if (v84)
            v85 = 0;
          else
            v85 = (_DWORD)v12 == 3304;
          if (v85)
            return 3304;
          else
            return v84;
        }
        return v12;
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
    case 19:
      if ((unsigned __int16)v94 <= 6u)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1291, "OI_STATUS MarshalResponse(const OI_BD_ADDR *, OI_AVRCP_RESPONSE *, uint8_t *, uint16_t *)");
      }
      else
      {
        v88 = v11;
        if ((unsigned __int16)v94 != 7)
        {
          BYTE7(v95[0]) = a4[8];
          v39 = BYTE7(v95[0]);
          v40 = 2 * BYTE7(v95[0]);
          v41 = (unsigned __int16)(v94 - 8) >> 1;
          if (v40 > (unsigned __int16)(v94 - 8))
            v39 = (unsigned __int16)(v94 - 8) >> 1;
          if ((unsigned __int16)v94 - 8 < 2 * v39)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
          v42 = (2 * v39);
          __memmove_chk((char *)v95 + 8, *((_QWORD *)a4 + 2), v42, 504);
          v13 = v42 + 8;
          if (v40 <= (unsigned __int16)(v94 - 8))
          {
LABEL_143:
            v9 = 0;
            v11 = v88;
            goto LABEL_152;
          }
          v43 = v6[8];
          v44 = *v6;
          v45 = *((_QWORD *)v6 + 2);
LABEL_63:
          v12 = sub_10014E7A4(v8, v41, 0xFFFF, v43, v44, v45 + v42, 0);
          v11 = v88;
          if (!(_DWORD)v12)
            goto LABEL_129;
          goto LABEL_166;
        }
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
    case 20:
    case 23:
    case 24:
      goto LABEL_152;
    case 21:
    case 22:
      if ((unsigned __int16)v94 <= 6u)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1317, "OI_STATUS MarshalResponse(const OI_BD_ADDR *, OI_AVRCP_RESPONSE *, uint8_t *, uint16_t *)");
      }
      else if ((unsigned __int16)v94 != 7)
      {
        BYTE7(v95[0]) = a4[8];
        LOWORD(a4) = BYTE7(v95[0]);
        if (BYTE7(v95[0]))
        {
          v91 = a1;
          v87 = a2;
          if ((v94 & 0xFFFC) == 8)
          {
            LOWORD(v15) = 0;
            v13 = 8;
          }
          else
          {
            v89 = v11;
            v50 = 0;
            v9 = 0;
            v15 = 0;
            v13 = 8;
            do
            {
              if (v5 <= (unsigned __int16)v13)
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrc"
                                       "p/avrcp_metadata.c");
              v51 = *((_QWORD *)v6 + 2);
              v52 = v51 + v50;
              *((_BYTE *)v95 + (unsigned __int16)v13) = *(_BYTE *)(v51 + v50);
              if ((unsigned __int16)(v5 - 1) <= (unsigned __int16)(v13 + 1))
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrc"
                                       "p/avrcp_metadata.c");
              v53 = (char *)v95 + (unsigned __int16)v13 + 1;
              v53[1] = *(_BYTE *)(v52 + 2);
              *v53 = *(_BYTE *)(v52 + 3);
              v54 = v13 + 3;
              if (v5 <= (unsigned __int16)(v13 + 3))
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrc"
                                       "p/avrcp_metadata.c");
              v55 = v51 + v50;
              v56 = v13 + 4;
              *((_BYTE *)v95 + v54) = *(_DWORD *)(v55 + 16);
              v57 = v5 - v56;
              v58 = *(_DWORD *)(v55 + 16);
              if (v58 <= (unsigned __int16)(v5 - v56))
              {
                v57 = *(_DWORD *)(v55 + 16);
              }
              else
              {
                v58 = (unsigned __int16)(v5 - v56);
                v59 = sub_10014E7A4(v91, v15, v57, a4, *v6, v52, *(_QWORD *)(v55 + 8) + (unsigned __int16)v57);
                if ((_DWORD)v59)
                  goto LABEL_124;
                v9 = 3304;
              }
              if ((int)(v5 - (unsigned __int16)v56) < (int)v58)
                sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrc"
                                       "p/avrcp_metadata.c");
              memmove((char *)v95 + (unsigned __int16)v56, *(const void **)(*((_QWORD *)v6 + 2) + v50 + 8), (unsigned __int16)v57);
              v13 = v57 + (unsigned __int16)v56;
              if ((_DWORD)v9 == 3304)
                goto LABEL_123;
              ++v15;
              a4 = (unsigned __int8 *)v6[8];
              if (v15 >= (unint64_t)a4)
                goto LABEL_123;
              v50 += 24;
            }
            while ((unsigned __int16)(v5 - v13) > 3u);
            LOBYTE(v10) = *v6;
            v11 = v89;
          }
          v60 = *((_QWORD *)v6 + 2) + 24 * (unsigned __int16)v15;
          v61 = v15;
          v8 = v91;
          v12 = sub_10014E7A4(v91, v61, 0xFFFF, (__int16)a4, v10, v60, *(_QWORD *)(v60 + 8));
          v7 = v87;
          if (!(_DWORD)v12)
            goto LABEL_129;
          goto LABEL_166;
        }
        goto LABEL_70;
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      goto LABEL_165;
    case 32:
      if ((unsigned __int16)v94 <= 6u)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1386, "OI_STATUS MarshalResponse(const OI_BD_ADDR *, OI_AVRCP_RESPONSE *, uint8_t *, uint16_t *)");
      }
      else if ((unsigned __int16)v94 != 7)
      {
        BYTE7(v95[0]) = a4[8];
        LOWORD(a4) = BYTE7(v95[0]);
        if (BYTE7(v95[0]))
        {
          if ((v94 & 0xFFF8) == 8)
          {
            LOWORD(v46) = 0;
            v47 = 8;
            v48 = 32;
LABEL_119:
            v77 = *((_QWORD *)v6 + 2) + 24 * (unsigned __int16)v46;
            v12 = sub_10014E7A4(v8, v46, 0xFFFF, (__int16)a4, v48, v77, *(_QWORD *)(v77 + 8));
            if (!(_DWORD)v12)
            {
              v9 = 3304;
              v13 = v47;
              goto LABEL_152;
            }
            goto LABEL_166;
          }
          v87 = a2;
          v89 = v11;
          v91 = a1;
          v65 = 0;
          v9 = 0;
          v46 = 0;
          v66 = v94 - 1;
          v47 = 8;
          v67 = (unsigned __int16)(v94 - 3);
          v90 = v67;
          while (1)
          {
            if (v67 <= (unsigned __int16)v47)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            v68 = *((_QWORD *)v6 + 2);
            v69 = v68 + v65;
            v70 = (char *)v95 + (unsigned __int16)v47;
            v70[3] = *(_DWORD *)(v68 + v65);
            v70[2] = BYTE1(*(_DWORD *)(v68 + v65));
            v70[1] = *(_WORD *)(v68 + v65 + 2);
            *v70 = *(_BYTE *)(v68 + v65 + 3);
            if (v66 <= (unsigned __int16)(v47 + 4))
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            v71 = (char *)v95 + (unsigned __int16)(v47 + 4);
            v71[1] = *(_BYTE *)(v69 + 4);
            *v71 = *(_BYTE *)(v69 + 5);
            if (v66 <= (unsigned __int16)(v47 + 6))
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            v72 = v68 + v65;
            v73 = (char *)v95 + (unsigned __int16)(v47 + 6);
            v73[1] = *(_DWORD *)(v72 + 16);
            *v73 = BYTE1(*(_DWORD *)(v72 + 16));
            v74 = v47 + 8;
            v75 = v5 - (v47 + 8);
            v76 = *(unsigned __int16 *)(v72 + 16);
            if (v76 <= (unsigned __int16)(v5 - v74))
            {
              v75 = *(unsigned __int16 *)(v72 + 16);
            }
            else
            {
              v76 = (unsigned __int16)v75;
              v59 = sub_10014E7A4(v91, v46, v75, a4, *v6, v69, *(_QWORD *)(v72 + 8) + (unsigned __int16)v75);
              if ((_DWORD)v59)
              {
LABEL_124:
                v12 = v59;
                v7 = v87;
                v8 = v91;
                goto LABEL_166;
              }
              v9 = 3304;
              v67 = v90;
            }
            if ((int)(v5 - v74) < (int)v76)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            memmove((char *)v95 + v74, *(const void **)(*((_QWORD *)v6 + 2) + v65 + 8), (unsigned __int16)v75);
            v47 = v75 + v74;
            if ((_DWORD)v9 == 3304)
              break;
            ++v46;
            a4 = (unsigned __int8 *)v6[8];
            if (v46 >= (unint64_t)a4)
              break;
            v65 += 24;
            if ((unsigned __int16)(v5 - v47) <= 7u)
            {
              v48 = *v6;
              v7 = v87;
              v11 = v89;
              v8 = v91;
              goto LABEL_119;
            }
          }
          v13 = v75 + v74;
LABEL_123:
          v7 = v87;
          v11 = v89;
          v8 = v91;
LABEL_152:
          v81 = v11 - 3;
          if (v11 - 3 > v5)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
          if ((_DWORD)v9 == 3304)
          {
            if (v5 <= 6)
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1524, "OI_STATUS MarshalResponse(const OI_BD_ADDR *, OI_AVRCP_RESPONSE *, uint8_t *, uint16_t *)");
            }
            else if (v81 < v5)
            {
              v82 = 1;
              goto LABEL_160;
            }
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
          }
          if (v5 <= 6)
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1526, "OI_STATUS MarshalResponse(const OI_BD_ADDR *, OI_AVRCP_RESPONSE *, uint8_t *, uint16_t *)");
          }
          else if (v81 < v5)
          {
            v82 = 0;
LABEL_160:
            *((_BYTE *)v95 + v81) = v82;
            if ((int)(v5 - (unsigned __int16)(v11 - 2)) <= 1)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            *(_WORD *)((char *)v95 + (unsigned __int16)(v11 - 3) + 1) = bswap32(v13 - v11) >> 16;
            if ((int)(v5 - v11) >= (unsigned __int16)(v13 - v11))
              v14 = v13;
            else
              v14 = 7;
            v12 = v9;
LABEL_165:
            LOWORD(v94) = v14;
            goto LABEL_166;
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
        }
LABEL_70:
        v9 = 0;
        v13 = 8;
        goto LABEL_152;
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
    default:
      v14 = 0;
      goto LABEL_165;
  }
}

uint64_t sub_10014CF50(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!a1 || !a4)
  {
LABEL_5:
    sub_100253460();
    return 101;
  }
  if (a3 != 1)
  {
    if (a3)
    {
      v6 = 3;
      v5 = 16;
      BYTE1(v6) = a3;
      v7 = a4;
      return sub_10014BEE8(a1, a2, 12, (unsigned __int8 *)&v5);
    }
    goto LABEL_5;
  }
  return 101;
}

uint64_t sub_10014CFB0(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  _QWORD v5[3];

  if (a1 && a4 && a3)
  {
    v5[0] = 17;
    v5[1] = a3;
    v5[2] = a4;
    return sub_10014BEE8(a1, a2, 12, (unsigned __int8 *)v5);
  }
  else
  {
    sub_100253460();
    return 101;
  }
}

uint64_t sub_10014D000(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5)
{
  _QWORD v6[3];

  if (a1 && a5 && a4)
  {
    v6[0] = 18;
    v6[1] = a4;
    v6[2] = a5;
    return sub_10014BEE8(a1, a2, 12, (unsigned __int8 *)v6);
  }
  else
  {
    sub_100253460();
    return 101;
  }
}

uint64_t sub_10014D050(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  _QWORD v5[3];

  if (a1 && a4 && a3)
  {
    v5[0] = 19;
    v5[1] = a3;
    v5[2] = a4;
    return sub_10014BEE8(a1, a2, 12, (unsigned __int8 *)v5);
  }
  else
  {
    sub_100253460();
    return 101;
  }
}

uint64_t sub_10014D0A0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _QWORD v4[2];
  uint64_t v5;

  if (a1 && a3)
  {
    v5 = 0;
    v4[0] = 48;
    v4[1] = *(_QWORD *)a3;
    LOBYTE(v5) = *(_BYTE *)(a3 + 8);
    return sub_10014BEE8(a1, a2, 12, (unsigned __int8 *)v4);
  }
  else
  {
    sub_100253460();
    return 101;
  }
}

uint64_t sub_10014D0F8(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = 0;
  v6 = 0;
  if (a1 && a3 && a4)
  {
    LOBYTE(v5) = 32;
    LOBYTE(v6) = a3;
    v7 = a4;
    return sub_10014BEE8(a1, a2, 12, (unsigned __int8 *)&v5);
  }
  else
  {
    sub_100253460();
    return 101;
  }
}

uint64_t sub_10014D148(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  char v5;
  _QWORD v7[3];

  if (a4)
    v5 = 13;
  else
    v5 = 15;
  if (a1 && a3)
  {
    v7[1] = a3;
    v7[2] = 0;
    v7[0] = 49;
    return sub_10014BEE8(a1, a2, v5, (unsigned __int8 *)v7);
  }
  else
  {
    sub_100253460();
    return 101;
  }
}

uint64_t sub_10014D1A0(uint64_t a1, unsigned int a2, int a3, char **a4)
{
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  char *v21;
  int v22;
  unsigned __int16 v23;
  size_t v24;
  char *v25;
  int v26;
  char *v27;
  unsigned __int16 v28;
  int v29;
  int v30;
  unsigned int v31;
  size_t v32;
  _WORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  unsigned int v38;
  char *v39;
  size_t v40;
  int v41;
  int v42;
  char *v43;
  int v44;
  unsigned __int16 v45;
  char *v46;
  int v47;
  size_t v48;
  unsigned int v49;
  __int16 v50;
  char *v51;
  char *v52;
  __int16 v53;
  unsigned __int16 v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  const void **v59;
  unsigned __int16 v60;
  unsigned int v61;
  unsigned int v62;
  char *v63;
  int v64;
  char *v65;
  char *v66;
  __int16 v67;
  int v68;
  _WORD *v69;
  int v70;
  char *v71;
  size_t v72;
  unsigned __int16 v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  const void **v79;
  char *v80;
  unsigned __int16 v81;
  unsigned int v82;
  unsigned int v83;
  char *v84;
  int v85;
  unsigned int v86;
  char v87;
  __int16 v88;
  uint64_t v89;
  void *v90;
  unint64_t v91;
  __int16 v92;
  unsigned __int16 v93;
  unsigned __int16 v94;
  unsigned int v95;
  char *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  uint64_t v101;
  _OWORD v102[32];

  v8 = sub_100149BD4(a1, 0);
  if (!a1 || !a4)
  {
    sub_100253460();
    return 101;
  }
  v9 = v8;
  if (!v8)
    return 105;
  memset(v102, 0, sizeof(v102));
  v10 = *(char ***)(v8 + 24);
  if (!v10)
    return 105;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  if (*a4)
    *v10 = *a4;
  v11 = a4[1];
  if (v11)
    v10[1] = v11;
  LODWORD(v99) = 2316;
  v100 = v102;
  v12 = *(unsigned __int16 *)(*(_QWORD *)(qword_100994BC8 + 24) + 20);
  LOWORD(v101) = *(_WORD *)(*(_QWORD *)(qword_100994BC8 + 24) + 20);
  v13 = *((unsigned __int16 *)v10 + 10);
  v14 = *((unsigned __int16 *)v10 + 8);
  v15 = v13 - v14;
  if (v13 < v14)
  {
    if (sub_10005549C())
    {
      sub_100054530("AVRCP internal error: total attr count %d less than current attr index %d!", *(unsigned __int16 *)(*(_QWORD *)(v9 + 24) + 20), *(unsigned __int16 *)(*(_QWORD *)(v9 + 24) + 16));
      v16 = sub_1000544A0(4u);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 105;
  }
  if (!v12)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
  if (v12 <= 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
  BYTE2(v102[0]) = 88;
  LOWORD(v102[0]) = 6400;
  if (v12 == 3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
  BYTE3(v102[0]) = a3;
  if (v12 <= 6)
    v19 = 4;
  else
    v19 = 7;
  v98 = v19;
  v20 = v12 - v19;
  v17 = 3301;
  v97 = v12 - v19;
  switch(a3)
  {
    case 16:
      v30 = *((unsigned __int16 *)v10 + 9);
      if (v30 == 3)
      {
        v68 = v12 - v19;
        v69 = *v10;
        if ((unsigned __int16)v15 >= (unsigned __int16)v68)
          v32 = (unsigned __int16)v68;
        else
          v32 = (unsigned __int16)v15;
        if ((unsigned __int16)v15 <= (unsigned __int16)v68)
          v17 = 0;
        else
          v17 = 3304;
        if (v12 <= 6)
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1811, "OI_STATUS MarshalFragmentResponse(OI_BD_ADDR *, uint8_t *, uint16_t *, uint8_t, AVRCP_FRAGMENT *)");
          v70 = 0;
        }
        else
        {
          v70 = v68;
        }
        if (v70 < (int)v32)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
        memmove((void *)((unint64_t)v102 | v98), v69, v32);
        v34 = v32 + v98;
        v38 = 1;
      }
      else
      {
        if (v30 != 2)
          return 105;
        v31 = 3 * (unsigned __int16)v15;
        if (v31 <= (unsigned __int16)v20)
          LODWORD(v32) = v15;
        else
          LODWORD(v32) = (unsigned __int16)(v12 - v19) / 3u;
        if (v31 <= (unsigned __int16)v20)
          v17 = 0;
        else
          v17 = 3304;
        if ((_WORD)v32)
        {
          if (v12 < 7)
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1799, "OI_STATUS MarshalFragmentResponse(OI_BD_ADDR *, uint8_t *, uint16_t *, uint8_t, AVRCP_FRAGMENT *)");
          }
          else
          {
            v33 = *v10;
            v34 = 3 * v32 + 7;
            v35 = (unsigned __int16)v32;
            v36 = (unsigned __int16)(v12 - 7) / 3u;
            v37 = (_BYTE *)((unint64_t)v102 | 9);
            v38 = 4;
            while (v36 && !HIBYTE(*(_DWORD *)v33))
            {
              *v37 = *(_DWORD *)v33;
              *(v37 - 1) = BYTE1(*(_DWORD *)v33);
              *(v37 - 2) = v33[1];
              v37 += 3;
              --v36;
              v33 += 2;
              if (!--v35)
                goto LABEL_158;
            }
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
        }
        LOWORD(v32) = 0;
        v38 = 4;
        v34 = v19;
      }
LABEL_158:
      if ((_DWORD)v17 == 3304)
      {
        v91 = (unint64_t)&(*v10)[v38 * (unint64_t)(unsigned __int16)v32];
        *((_WORD *)v10 + 8) += v32;
        *v10 = (char *)v91;
        v10[1] = 0;
      }
LABEL_136:
      v86 = v98 - 3;
      if ((int)v98 - 3 > v12)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
      if ((_DWORD)v17 != 3304)
      {
        if (v12 <= 6)
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 2082, "OI_STATUS MarshalFragmentResponse(OI_BD_ADDR *, uint8_t *, uint16_t *, uint8_t, AVRCP_FRAGMENT *)");
        }
        else if (v86 < v12)
        {
          v87 = 3;
          goto LABEL_144;
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
      }
      if (v12 <= 6)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 2080, "OI_STATUS MarshalFragmentResponse(OI_BD_ADDR *, uint8_t *, uint16_t *, uint8_t, AVRCP_FRAGMENT *)");
LABEL_171:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
      }
      if (v86 >= v12)
        goto LABEL_171;
      v87 = 2;
LABEL_144:
      *((_BYTE *)v102 + v86) = v87;
      if ((int)(v12 - (unsigned __int16)(v98 - 2)) <= 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
      *(_WORD *)((char *)v102 + (unsigned __int16)(v98 - 3) + 1) = bswap32(v34 - v98) >> 16;
      if (v97 >= (unsigned __int16)(v34 - v98))
        v88 = v34;
      else
        v88 = 7;
      LOWORD(v101) = v88;
      v89 = sub_10014F6A0(a1, a2, (unsigned __int8 *)&v99);
      if (!(_DWORD)v89)
      {
        if ((_DWORD)v17 == 3304)
          return v17;
        v90 = *(void **)(v9 + 24);
        if (v90)
          sub_100053298(v90);
        *(_QWORD *)(v9 + 24) = 0;
      }
      return v89;
    case 17:
      v39 = *v10;
      if ((unsigned __int16)(v13 - v14) >= (unsigned __int16)v20)
        v40 = (unsigned __int16)(v12 - v19);
      else
        v40 = (unsigned __int16)(v13 - v14);
      if (v12 <= 6)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1839, "OI_STATUS MarshalFragmentResponse(OI_BD_ADDR *, uint8_t *, uint16_t *, uint8_t, AVRCP_FRAGMENT *)");
        v41 = 0;
      }
      else
      {
        v41 = v12 - v19;
      }
      if (v41 < (int)v40)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
      goto LABEL_85;
    case 18:
      v39 = *v10;
      if ((unsigned __int16)(v13 - v14) >= (unsigned __int16)v20)
        v40 = (unsigned __int16)(v12 - v19);
      else
        v40 = (unsigned __int16)(v13 - v14);
      if (v12 <= 6)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1861, "OI_STATUS MarshalFragmentResponse(OI_BD_ADDR *, uint8_t *, uint16_t *, uint8_t, AVRCP_FRAGMENT *)");
        v42 = 0;
      }
      else
      {
        v42 = v12 - v19;
      }
      if (v42 < (int)v40)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
LABEL_85:
      memmove((void *)((unint64_t)v102 | v98), v39, v40);
      v34 = v40 + v98;
      if ((unsigned __int16)v15 <= (unsigned __int16)v97)
        goto LABEL_118;
      v50 = *((_WORD *)v10 + 8) + v40;
      v51 = &v39[v40];
      goto LABEL_87;
    case 19:
      goto LABEL_30;
    case 20:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return v17;
    case 21:
    case 22:
      v21 = *v10;
      v22 = *((unsigned __int16 *)v10 + 9);
      if (v22 == 0xFFFF)
      {
        v34 = v98;
      }
      else
      {
        v23 = *((_WORD *)v21 + 8) - v22;
        if ((unsigned __int16)v20 >= v23)
          v24 = (unsigned __int16)(*((_WORD *)v21 + 8) - v22);
        else
          v24 = (unsigned __int16)v20;
        v25 = v10[1];
        if (v12 <= 6)
        {
          v52 = v10[1];
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1912, "OI_STATUS MarshalFragmentResponse(OI_BD_ADDR *, uint8_t *, uint16_t *, uint8_t, AVRCP_FRAGMENT *)");
          v25 = v52;
          v26 = 0;
        }
        else
        {
          v26 = v20;
        }
        v96 = v21;
        if (v26 < (int)v24)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
        v53 = v97;
        memmove((void *)((unint64_t)v102 | v98), v25, v24);
        v34 = v24 + v98;
        if ((unsigned __int16)v97 < v23)
          goto LABEL_113;
        LOWORD(v14) = *((_WORD *)v10 + 8) + 1;
        *((_WORD *)v10 + 8) = v14;
        v21 = v96 + 24;
        v13 = *((unsigned __int16 *)v10 + 10);
      }
      if (v13 <= (unsigned __int16)v14)
      {
        sub_100253460();
        v13 = *((unsigned __int16 *)v10 + 10);
        LOWORD(v14) = *((_WORD *)v10 + 8);
      }
      if (v13 == (unsigned __int16)v14)
        goto LABEL_118;
      if ((unsigned __int16)(v12 - v34) >= 4u)
      {
        if (v12 < 7)
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1951, "OI_STATUS MarshalFragmentResponse(OI_BD_ADDR *, uint8_t *, uint16_t *, uint8_t, AVRCP_FRAGMENT *)");
        }
        else
        {
          v17 = 0;
          v54 = 0;
          while (v12 > (unsigned __int16)v34)
          {
            v55 = &v21[24 * v54];
            *((_BYTE *)v102 + (unsigned __int16)v34) = *v55;
            if ((unsigned __int16)(v12 - 1) <= (unsigned __int16)(v34 + 1))
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            v56 = &v21[24 * v54];
            v57 = (char *)v102 + (unsigned __int16)v34 + 1;
            v57[1] = v56[2];
            *v57 = v56[3];
            if (v12 <= (unsigned __int16)(v34 + 3))
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            v58 = &v21[24 * v54];
            v59 = (const void **)(v58 + 8);
            v60 = v34 + 4;
            *((_BYTE *)v102 + (unsigned __int16)(v34 + 3)) = *((_DWORD *)v58 + 4);
            v61 = v12 - (v34 + 4);
            v62 = *((_DWORD *)v58 + 4);
            if (v62 <= (unsigned __int16)(v12 - v60))
            {
              v61 = *((_DWORD *)v58 + 4);
            }
            else
            {
              v62 = (unsigned __int16)v61;
              v63 = (char *)*v59 + (unsigned __int16)v61;
              *((_WORD *)v10 + 8) += v54;
              *((_WORD *)v10 + 9) = v61;
              *v10 = v55;
              v10[1] = v63;
              v17 = 3304;
            }
            v64 = v60;
            if ((int)(v12 - v60) < (int)v62)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            memmove((char *)v102 + v60, *v59, (unsigned __int16)v61);
            v34 = v61 + v64;
            if ((_DWORD)v17 == 3304)
              goto LABEL_136;
            ++v54;
            v14 = *((unsigned __int16 *)v10 + 8);
            if (*((unsigned __int16 *)v10 + 10) - v14 <= v54)
              goto LABEL_136;
            if ((unsigned __int16)(v12 - v34) <= 3u)
              goto LABEL_101;
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
      }
      v54 = 0;
LABEL_101:
      v65 = &v21[24 * v54];
      v66 = (char *)*((_QWORD *)v65 + 1);
      v67 = v54 + v14;
      goto LABEL_134;
    case 32:
      v43 = *v10;
      v44 = *((unsigned __int16 *)v10 + 9);
      if (v44 == 0xFFFF)
      {
        v34 = v98;
      }
      else
      {
        v45 = *((_WORD *)v43 + 8) - v44;
        v93 = v45;
        if ((unsigned __int16)v20 >= v45)
          v24 = v45;
        else
          v24 = (unsigned __int16)v20;
        v46 = v10[1];
        if (v12 <= 6)
        {
          v71 = v10[1];
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1993, "OI_STATUS MarshalFragmentResponse(OI_BD_ADDR *, uint8_t *, uint16_t *, uint8_t, AVRCP_FRAGMENT *)");
          v46 = v71;
          v47 = 0;
        }
        else
        {
          v47 = v20;
        }
        v96 = v43;
        if (v47 < (int)v24)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
        v53 = v97;
        memmove((void *)((unint64_t)v102 | v98), v46, v24);
        v34 = v24 + v98;
        if ((unsigned __int16)v97 < v93)
        {
LABEL_113:
          v72 = (size_t)&v10[1][v24];
          *((_WORD *)v10 + 9) += v53;
          *v10 = v96;
          v10[1] = (char *)v72;
          goto LABEL_135;
        }
        LOWORD(v14) = *((_WORD *)v10 + 8) + 1;
        *((_WORD *)v10 + 8) = v14;
        v43 += 24;
        v13 = *((unsigned __int16 *)v10 + 10);
      }
      if (v13 <= (unsigned __int16)v14)
      {
        sub_100253460();
        v13 = *((unsigned __int16 *)v10 + 10);
        LOWORD(v14) = *((_WORD *)v10 + 8);
      }
      if (v13 == (unsigned __int16)v14)
      {
LABEL_118:
        v17 = 0;
        goto LABEL_136;
      }
      if ((unsigned __int16)(v12 - v34) >= 8u)
      {
        if (v12 < 7)
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 2032, "OI_STATUS MarshalFragmentResponse(OI_BD_ADDR *, uint8_t *, uint16_t *, uint8_t, AVRCP_FRAGMENT *)");
        }
        else
        {
          v17 = 0;
          v73 = 0;
          v94 = v12 - 1;
          while ((unsigned __int16)(v12 - 3) > (unsigned __int16)v34)
          {
            v74 = &v43[24 * v73];
            v75 = (char *)v102 + (unsigned __int16)v34;
            v75[3] = *(_DWORD *)v74;
            v75[2] = BYTE1(*(_DWORD *)v74);
            v75[1] = *((_WORD *)v74 + 1);
            *v75 = v74[3];
            if (v94 <= (unsigned __int16)(v34 + 4))
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            v76 = &v43[24 * v73];
            v77 = (char *)v102 + (unsigned __int16)(v34 + 4);
            v77[1] = v76[4];
            *v77 = v76[5];
            if (v94 <= (unsigned __int16)(v34 + 6))
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            v78 = &v43[24 * v73];
            v79 = (const void **)(v78 + 8);
            v80 = (char *)v102 + (unsigned __int16)(v34 + 6);
            v80[1] = *((_DWORD *)v78 + 4);
            *v80 = BYTE1(*((_DWORD *)v78 + 4));
            v81 = v34 + 8;
            v82 = v12 - (v34 + 8);
            v83 = *((unsigned __int16 *)v78 + 8);
            if (v83 <= (unsigned __int16)(v12 - v81))
            {
              v82 = *((unsigned __int16 *)v78 + 8);
            }
            else
            {
              v83 = (unsigned __int16)v82;
              v84 = (char *)*v79 + (unsigned __int16)v82;
              *((_WORD *)v10 + 8) += v73;
              *((_WORD *)v10 + 9) = v82;
              *v10 = v74;
              v10[1] = v84;
              v17 = 3304;
            }
            v85 = v81;
            if ((int)(v12 - v81) < (int)v83)
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/"
                                     "avrcp_metadata.c");
            memmove((char *)v102 + v81, *v79, (unsigned __int16)v82);
            v34 = v82 + v85;
            if ((_DWORD)v17 == 3304)
              goto LABEL_136;
            ++v73;
            v14 = *((unsigned __int16 *)v10 + 8);
            if (*((unsigned __int16 *)v10 + 10) - v14 <= v73)
              goto LABEL_136;
            if ((unsigned __int16)(v12 - v34) <= 7u)
              goto LABEL_133;
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
      }
      v73 = 0;
LABEL_133:
      v65 = &v43[24 * v73];
      v66 = (char *)*((_QWORD *)v65 + 1);
      v67 = v73 + v14;
LABEL_134:
      *((_WORD *)v10 + 8) = v67;
      *((_WORD *)v10 + 9) = -1;
      *v10 = v65;
      v10[1] = v66;
LABEL_135:
      v17 = 3304;
      goto LABEL_136;
    default:
      if (a3 != 49)
        return v17;
LABEL_30:
      v27 = *v10;
      if (2 * (unsigned __int16)(v13 - v14) <= (unsigned __int16)v20)
        v28 = v13 - v14;
      else
        v28 = (unsigned __int16)v20 >> 1;
      v92 = (unsigned __int16)v20 >> 1;
      v95 = 2 * (unsigned __int16)(v13 - v14);
      if (v12 <= 6)
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1885, "OI_STATUS MarshalFragmentResponse(OI_BD_ADDR *, uint8_t *, uint16_t *, uint8_t, AVRCP_FRAGMENT *)");
        v29 = 0;
      }
      else
      {
        v29 = v12 - v19;
      }
      v48 = 2 * v28;
      if (v29 < (int)v48)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c");
      v49 = (unsigned __int16)v20;
      memmove((void *)((unint64_t)v102 | v98), v27, v48);
      v34 = v98 + v48;
      if (v95 <= v49)
        goto LABEL_118;
      v50 = *((_WORD *)v10 + 8) + v92;
      v51 = &v27[8 * v48];
LABEL_87:
      *((_WORD *)v10 + 8) = v50;
      *((_WORD *)v10 + 9) = -1;
      *v10 = v51;
      v10[1] = 0;
      goto LABEL_135;
  }
}

uint64_t sub_10014DED8(uint64_t a1, unsigned int a2, __int16 a3, int a4, unsigned __int8 a5)
{
  char v5;
  _QWORD v7[3];
  char v8;
  int v9;
  char v10;
  char v11;

  if (a1)
  {
    v7[1] = &v8;
    v7[0] = a5;
    BYTE1(v7[0]) = 9;
    BYTE3(v7[0]) = 124;
    v7[2] = 7;
    if (a4)
      v5 = 126;
    else
      v5 = -2;
    v8 = v5;
    v9 = 1478033413;
    v10 = HIBYTE(a3);
    v11 = a3;
    return sub_10014F6A0(a1, a2, (unsigned __int8 *)v7);
  }
  else
  {
    sub_100253460();
    return 101;
  }
}

uint64_t sub_10014DF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t v9;
  _BOOL4 v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, _QWORD);
  void *v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  void (*v26)(uint64_t, uint64_t, uint64_t);
  void (*v27)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, _QWORD, unint64_t, _QWORD);
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t, _QWORD, _QWORD);
  void (*v32)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  void (*v33)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  void (*v34)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v35;
  uint64_t i;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  _OWORD v46[32];
  __int128 v47;
  __int128 v48;

  v47 = 0u;
  v48 = 0u;
  memset(v46, 0, sizeof(v46));
  if (a1)
  {
    if (a3)
      goto LABEL_3;
  }
  else
  {
    sub_100253460();
    if (a3)
      goto LABEL_3;
  }
  sub_100253460();
LABEL_3:
  v6 = *(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 16) + 16);
  if (!v6)
  {
    sub_100253460();
    v6 = *(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 16) + 16);
  }
  if (*(_BYTE *)(a3 + 3) != 124)
  {
    v12 = sub_100149BD4(a1, 0);
    if (!v12)
      goto LABEL_97;
    v13 = v12;
    v14 = *(unsigned __int8 **)(a3 + 8);
    if (v14)
    {
      v15 = *(unsigned __int16 *)(a3 + 16);
      if (*(_WORD *)(a3 + 16))
      {
        if (v15 <= 2)
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1649, "OI_STATUS UnmarshalCommand(uint8_t *, uint16_t, OI_AVRCP_COMMAND *, uint32_t *)");
        }
        else
        {
          v16 = v15 - 3;
          if (v15 != 3)
          {
            v17 = *(unsigned __int16 *)(v14 + 1);
            v18 = *v14;
            v19 = v14[3];
            LOBYTE(v47) = v14[3];
            v20 = 3308;
            if (v15 >= 7)
              v21 = 7;
            else
              v21 = 4;
            if (v15 >= 7 && (__PAIR64__(v18, bswap32(v17)) >> 16) == 6488)
            {
              v20 = 3305;
              if (v19 <= 48)
              {
                switch(v19)
                {
                  case 16:
                  case 24:
                    goto LABEL_69;
                  case 17:
                    goto LABEL_146;
                  case 18:
                    if (v21 >= v15)
                      goto LABEL_145;
                    LOBYTE(v48) = v14[v21];
                    goto LABEL_146;
                  case 19:
                  case 20:
                  case 21:
                    if (v21 >= v15)
                      goto LABEL_142;
                    v22 = 0;
                    BYTE8(v47) = v14[v21];
                    LODWORD(v21) = v21 + 1;
                    goto LABEL_143;
                  case 22:
                    if (v21 >= v15)
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1687, "OI_STATUS UnmarshalCommand(uint8_t *, uint16_t, OI_AVRCP_COMMAND *, uint32_t *)");
LABEL_142:
                      v22 = 1;
                    }
                    else
                    {
                      v39 = v21 + 1;
                      BYTE8(v47) = v14[v21];
                      if ((int)v21 + 1 >= v15)
                      {
                        v22 = 1;
                        LODWORD(v21) = v21 + 1;
                      }
                      else
                      {
                        v22 = 0;
                        LODWORD(v21) = v21 + 2;
                        BYTE9(v47) = v14[v39];
                      }
                    }
LABEL_143:
                    *(_QWORD *)&v48 = &v14[v21];
                    goto LABEL_144;
                  case 23:
                    *(_QWORD *)&v48 = v46;
                    if (v21 >= v15)
                      goto LABEL_145;
                    BYTE8(v47) = v14[v21];
                    if (!BYTE8(v47))
                      goto LABEL_146;
                    v40 = 0;
                    v22 = 0;
                    v45 = v15 - 1;
                    v41 = v21 + 1;
                    while (!v22)
                    {
                      if (v45 <= v41)
                        goto LABEL_133;
                      v22 = 0;
                      *(_WORD *)(v48 + 2 * v40) = bswap32(*(unsigned __int16 *)&v14[v41]) >> 16;
                      v41 += 2;
LABEL_134:
                      if (++v40 >= (unint64_t)BYTE8(v47))
                        goto LABEL_144;
                    }
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1696, "OI_STATUS UnmarshalCommand(uint8_t *, uint16_t, OI_AVRCP_COMMAND *, uint32_t *)");
LABEL_133:
                    v22 = 1;
                    goto LABEL_134;
                  case 25:
                  case 26:
                  case 27:
                  case 28:
                  case 29:
                  case 30:
                  case 31:
                    goto LABEL_32;
                  case 32:
                    *((_QWORD *)&v48 + 1) = v46;
                    *((_QWORD *)&v47 + 1) = &v14[v21];
                    if (v15 - v21 <= 7)
                    {
                      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1709, "OI_STATUS UnmarshalCommand(uint8_t *, uint16_t, OI_AVRCP_COMMAND *, uint32_t *)");
                      v43 = v48;
                      v22 = 1;
                    }
                    else
                    {
                      v42 = v21 | 8;
                      if ((v21 | 8) >= v15)
                        goto LABEL_145;
                      v22 = 0;
                      LOWORD(v21) = v21 + 9;
                      v43 = v14[v42];
                      LOBYTE(v48) = v14[v42];
                    }
                    if (!v43)
                      goto LABEL_144;
                    v44 = 0;
                    break;
                  default:
                    if (v19 == 48)
                      goto LABEL_146;
                    goto LABEL_32;
                }
                while (1)
                {
                  if (v22)
                  {
                    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1711, "OI_STATUS UnmarshalCommand(uint8_t *, uint16_t, OI_AVRCP_COMMAND *, uint32_t *)");
                  }
                  else if (v16 > (unsigned __int16)v21)
                  {
                    v22 = 0;
                    *(_DWORD *)(*((_QWORD *)&v48 + 1) + 4 * v44) = bswap32(*(_DWORD *)&v14[(unsigned __int16)v21]);
                    LOWORD(v21) = v21 + 4;
                    goto LABEL_153;
                  }
                  v22 = 1;
LABEL_153:
                  if (++v44 >= (unint64_t)v48)
                  {
LABEL_144:
                    if (v22)
                      goto LABEL_145;
LABEL_146:
                    v20 = 0;
                    goto LABEL_32;
                  }
                }
              }
              if (v19 <= 95)
              {
                if ((v19 - 64) < 2)
                  goto LABEL_69;
                if (v19 != 49)
                {
                  if (v19 != 80)
                    goto LABEL_32;
LABEL_69:
                  if (v21 >= v15)
                    goto LABEL_145;
                  BYTE8(v47) = v14[v21];
                  goto LABEL_146;
                }
                if (v21 < v15)
                {
                  BYTE8(v47) = v14[v21];
                  if ((int)(v15 - (v21 + 1)) < 4)
                    goto LABEL_145;
                  HIDWORD(v47) = bswap32(*(_DWORD *)&v14[v21 + 1]);
                  goto LABEL_146;
                }
                v38 = 1720;
LABEL_140:
                sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", v38, "OI_STATUS UnmarshalCommand(uint8_t *, uint16_t, OI_AVRCP_COMMAND *, uint32_t *)");
                goto LABEL_145;
              }
              if (v19 == 96)
              {
                if (v15 - v21 < 2)
                  goto LABEL_145;
                WORD4(v47) = bswap32(*(unsigned __int16 *)&v14[v21]) >> 16;
                goto LABEL_146;
              }
              if (v19 == 116 || v19 == 144)
              {
                if (v21 >= v15)
                {
                  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1735, "OI_STATUS UnmarshalCommand(uint8_t *, uint16_t, OI_AVRCP_COMMAND *, uint32_t *)");
                }
                else
                {
                  BYTE8(v47) = v14[v21];
                  if ((int)(v15 - (v21 + 1)) >= 8)
                  {
                    for (i = 0; i != 8; ++i)
                      *(_BYTE *)(((unint64_t)&v47 | 9) + i) = v14[v21 + 1 + i];
                    if ((int)(v15 - (v21 + 9)) > 1)
                    {
                      WORD1(v48) = bswap32(*(unsigned __int16 *)&v14[v21 + 9]) >> 16;
                      goto LABEL_146;
                    }
LABEL_145:
                    v20 = 3306;
                    goto LABEL_32;
                  }
                }
                v38 = 1736;
                goto LABEL_140;
              }
LABEL_32:
              v19 = v47;
            }
            if (v19 != 64)
            {
              v24 = *(void **)(v13 + 24);
              if (v24)
              {
                sub_100053298(v24);
                *(_QWORD *)(v13 + 24) = 0;
              }
            }
            if ((v20 - 3301) <= 7 && ((1 << (v20 + 27)) & 0x91) != 0)
            {
LABEL_98:
              sub_10014BD40(a1, a2, v47, v20);
              return 0;
            }
            if (v20)
            {
              v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(qword_100994BC8 + 16) + 8);
              if (v26)
                v26(a1, a2, a3);
              return 0;
            }
            v20 = 3301;
            if (v47 <= 0x2Fu)
            {
              switch((char)v47)
              {
                case 16:
                  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))v6;
                  if (!*(_QWORD *)v6)
                    goto LABEL_98;
                  goto LABEL_92;
                case 17:
                  v30 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
                  if (!v30)
                    goto LABEL_98;
                  goto LABEL_90;
                case 18:
                  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
                  if (!v25)
                    goto LABEL_98;
                  v28 = v48;
                  goto LABEL_93;
                case 19:
                  v31 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v6 + 24);
                  if (!v31)
                    goto LABEL_98;
                  goto LABEL_84;
                case 20:
                  v31 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v6 + 32);
                  if (!v31)
                    goto LABEL_98;
                  goto LABEL_84;
                case 21:
                  v31 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v6 + 40);
                  if (!v31)
                    goto LABEL_98;
                  goto LABEL_84;
                case 22:
                  v32 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v6 + 48);
                  if (!v32)
                    goto LABEL_98;
                  v32(a1, a2, BYTE8(v47), BYTE9(v47), v48);
                  return 0;
                case 23:
                  v31 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v6 + 56);
                  if (!v31)
                    goto LABEL_98;
LABEL_84:
                  v31(a1, a2, BYTE8(v47), v48);
                  break;
                case 24:
                  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 64);
                  if (!v25)
                    goto LABEL_98;
                  goto LABEL_92;
                case 32:
                  v33 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v6 + 72);
                  if (!v33)
                    goto LABEL_98;
                  v33(a1, a2, *((_QWORD *)&v47 + 1), v48, *((_QWORD *)&v48 + 1));
                  break;
                default:
                  goto LABEL_98;
              }
              return 0;
            }
            if (v47 > 0x4Fu)
            {
              if (v47 > 0x73u)
              {
                if (v47 == 116)
                {
                  v29 = *(void (**)(uint64_t, uint64_t, _QWORD, unint64_t, _QWORD))(v6 + 176);
                  if (!v29)
                    goto LABEL_98;
                }
                else
                {
                  if (v47 != 144)
                    goto LABEL_98;
                  v29 = *(void (**)(uint64_t, uint64_t, _QWORD, unint64_t, _QWORD))(v6 + 184);
                  if (!v29)
                    goto LABEL_98;
                }
                v29(a1, a2, BYTE8(v47), (unint64_t)&v47 | 9, WORD1(v48));
                return 0;
              }
              if (v47 != 80)
              {
                if (v47 != 96)
                  goto LABEL_98;
                v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 120);
                if (!v25)
                  goto LABEL_98;
                v28 = WORD4(v47);
LABEL_93:
                v25(a1, a2, v28);
                return 0;
              }
              v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 192);
              if (!v25)
              {
                v20 = 3305;
                goto LABEL_98;
              }
LABEL_92:
              v28 = BYTE8(v47);
              goto LABEL_93;
            }
            if (v47 <= 0x3Fu)
            {
              if (v47 == 48)
              {
                v30 = *(void (**)(uint64_t, uint64_t))(v6 + 80);
                if (v30)
                {
LABEL_90:
                  v30(a1, a2);
                  return 0;
                }
              }
              else if (v47 == 49)
              {
                v27 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v6 + 88);
                if (v27)
                {
                  v27(a1, a2, BYTE8(v47), HIDWORD(v47));
                  return 0;
                }
              }
              goto LABEL_98;
            }
            if (v47 != 64)
            {
              if (v47 != 65)
                goto LABEL_98;
              v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104);
              if (!v25)
                goto LABEL_98;
              goto LABEL_92;
            }
            v34 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v6 + 96);
            if (!v34)
              goto LABEL_98;
            v35 = *(_QWORD *)(v13 + 24);
            if (v35)
            {
              v34(a1, a2, BYTE8(v47), *(unsigned __int16 *)(v35 + 16), *(unsigned __int16 *)(v35 + 18));
              return 0;
            }
LABEL_97:
            v20 = 3308;
            goto LABEL_98;
          }
        }
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/av/avrcp/avrcp_metadata.c", 1650, "OI_STATUS UnmarshalCommand(uint8_t *, uint16_t, OI_AVRCP_COMMAND *, uint32_t *)");
      }
    }
    else
    {
      sub_100253460();
    }
    v20 = 3308;
    goto LABEL_32;
  }
  v7 = *(unsigned __int8 **)(a3 + 8);
  v8 = *v7;
  if ((v8 & 0x7F) == 0x7E && *(unsigned __int16 *)(a3 + 16) >= 7u)
  {
    v10 = (v8 & 0x80u) == 0;
    v9 = bswap32(*(unsigned __int16 *)(v7 + 5)) >> 16;
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v6 + 112);
    if (v23)
    {
      v23(a1, a2, v9, (v8 >> 7) ^ 1);
      return 0;
    }
    v11 = 8;
  }
  else
  {
    LOWORD(v9) = 0;
    v10 = 0;
    v11 = 10;
  }
  sub_10014DED8(a1, a2, v9, v10, v11);
  return 0;
}

uint64_t sub_10014E7A4(uint64_t a1, __int16 a2, __int16 a3, __int16 a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  _WORD *v17;
  uint64_t result;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;

  v14 = sub_100149BD4(a1, 0);
  if (v14)
  {
    v15 = v14;
    v16 = sub_100114588(0x18uLL);
    *(_QWORD *)(v15 + 24) = v16;
    if (v16)
    {
      v17 = v16;
      result = 0;
      v17[8] = a2;
      v17[9] = a3;
      v19 = *(_QWORD *)(v15 + 24);
      *(_WORD *)(v19 + 20) = a4;
      *(_BYTE *)(v19 + 22) = a5;
      *(_QWORD *)v19 = a6;
      *(_QWORD *)(v19 + 8) = a7;
    }
    else
    {
      if (sub_10005549C())
      {
        sub_100054530("AVRCP Could not handle fragmented message: no memory for fragment allocation");
        v21 = sub_1000544A0(4u);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return 106;
    }
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("AVRCP Could not handle fragmented message: connection not found for %:", a1);
      v20 = sub_1000544A0(4u);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 105;
  }
  return result;
}

uint64_t sub_10014E8CC(uint64_t a1, int a2, _BYTE *a3, uint64_t *a4)
{
  uint64_t v6;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;

  if (!(_DWORD)xmmword_100999158)
    return 408;
  if (!a1 || !a4)
  {
    sub_100253460();
    return 101;
  }
  v31 = 0u;
  v32 = 0u;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  if (*(_QWORD *)(qword_100994BC8 + 16))
    return 119;
  v10 = sub_100114588(0x18uLL);
  v11 = qword_100994BC8;
  *(_QWORD *)(qword_100994BC8 + 24) = v10;
  if (!v10)
    return 106;
  v12 = sub_100114588(32 * *(unsigned __int8 *)(v11 + 89));
  v13 = (_QWORD *)qword_100994BC8;
  v14 = *(_QWORD *)(qword_100994BC8 + 24);
  *(_QWORD *)(v14 + 8) = v12;
  if (!v12)
  {
    sub_100053298((void *)v14);
    v6 = 106;
LABEL_29:
    *(_QWORD *)(qword_100994BC8 + 24) = 0;
    return v6;
  }
  v13[2] = a1;
  v13[5] = sub_10014EBC4;
  v13[7] = sub_10014EFB4;
  v15 = sub_1001D9594(off_10091BC60, (unsigned __int16 *)(v14 + 4));
  if ((_DWORD)v15)
  {
    v6 = v15;
    if (sub_10005549C())
    {
      sub_100054530("OI_BIPSRV_RegisterAVRCPImagingResponder failed with status %!", v6);
      v16 = sub_1000544A0(4u);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    goto LABEL_26;
  }
  sub_10014A9B0(*(unsigned __int16 *)(*(_QWORD *)(qword_100994BC8 + 24) + 4));
  v17 = qword_100994BC8 + 24;
  if (a3)
  {
    *(_BYTE *)(*(_QWORD *)(qword_100994BC8 + 24) + 16) = *a3;
    *(_BYTE *)(*(_QWORD *)v17 + 17) = a3[1];
    v18 = a3[2];
  }
  else
  {
    v18 = -1;
    *(_BYTE *)(*(_QWORD *)(qword_100994BC8 + 24) + 16) = -1;
    *(_BYTE *)(*(_QWORD *)v17 + 17) = -1;
  }
  *(_BYTE *)(*(_QWORD *)v17 + 18) = v18;
  v19 = *(unsigned __int16 *)(sub_100252DE8(4u) + 10);
  v20 = *(_QWORD *)(qword_100994BC8 + 24);
  if ((v19 - 512) < 0xFFFFFE11)
    LOWORD(v19) = 512;
  *(_WORD *)(v20 + 20) = v19;
  xmmword_100981A60 = xmmword_1007395F0;
  DWORD2(xmmword_100981A60) = a2;
  *(_QWORD *)&v31 = &unk_10091BCF0;
  *(_QWORD *)&v32 = *a4;
  WORD4(v32) = *((_WORD *)a4 + 4);
  WORD4(v31) = 5;
  xmmword_100981A70 = xmmword_1007395F0;
  DWORD2(xmmword_100981A70) = a2 & 0xFFFFFEFF;
  v27 = &unk_10091BD68;
  LOWORD(v28) = 5;
  v29 = *a4;
  LOWORD(v30) = *((_WORD *)a4 + 4);
  v23 = &unk_10091BDE0;
  LOWORD(v24) = 5;
  v25 = v29;
  LOWORD(v26) = v30;
  v6 = sub_1002465CC((uint64_t)&v31, (int *)v20);
  if (!(_DWORD)v6)
    v6 = sub_100149EE0();
  sub_1002468CC(**(_DWORD **)(qword_100994BC8 + 24), (uint64_t)&v27);
  sub_1002468CC(**(_DWORD **)(qword_100994BC8 + 24), (uint64_t)&v23);
  if ((_DWORD)v6)
  {
    sub_1002467B8(**(_DWORD **)(qword_100994BC8 + 24));
LABEL_26:
    v21 = qword_100994BC8;
    *(_QWORD *)(qword_100994BC8 + 16) = 0;
    v22 = *(void ***)(v21 + 24);
    if (v22[1])
    {
      sub_100053298(v22[1]);
      v22 = *(void ***)(qword_100994BC8 + 24);
      v22[1] = 0;
    }
    sub_100053298(v22);
    goto LABEL_29;
  }
  return v6;
}

void sub_10014EBC4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  int v7;
  void (*v8)(uint64_t, uint64_t, unsigned __int8 *);
  NSObject *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  unsigned __int8 *v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  int v25;
  char v26;

  if (!*(_QWORD *)(qword_100994BC8 + 16))
  {
    if (sub_10005549C())
    {
      sub_100054530("No target registered; rejecting command");
      v9 = sub_1000544A0(4u);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    goto LABEL_11;
  }
  if (a2 >= 0x10)
    sub_100253460();
  v6 = a3[3];
  if (!a3[3])
  {
    v11 = sub_10014F7A0(a1, a2, (uint64_t)a3);
    if (!(_DWORD)v11)
      return;
    v12 = v11;
    if (sub_10005549C())
    {
      sub_100054530("Dispatched target handler for opcode=%d, cmd=%d failed: %!", a3[3], *a3, v12);
      v13 = sub_1000544A0(4u);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    goto LABEL_48;
  }
  v7 = *a3;
  if ((v7 - 8) >= 3)
  {
    if (*a3)
    {
      if (v7 != 1)
      {
        if (sub_10005549C())
        {
          sub_100054530("Unknown command");
          v17 = sub_1000544A0(4u);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        v12 = 3301;
LABEL_45:
        if (sub_10005549C())
        {
          sub_100054530("Dispatched target handler for opcode=%d, cmd=%d failed: %!", a3[3], *a3, v12);
          v21 = sub_1000544A0(4u);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
LABEL_48:
        if ((_DWORD)v12 == 3301)
          v10 = 8;
        else
          v10 = 10;
        goto LABEL_51;
      }
      if (v6 == 49)
      {
        v25 = -249;
        v26 = -1;
        v22 = 822550272;
        v23 = &v25;
        v24 = 5;
        if (*((_WORD *)a3 + 8) == 5 && ((v20 = **((unsigned __int8 **)a3 + 1), v20 == 255) || v20 == 7))
        {
          LOBYTE(v22) = 12;
          BYTE1(v25) = 72;
        }
        else
        {
          LOBYTE(v22) = 10;
        }
      }
      else
      {
        if (v6 != 48)
          return;
        LOWORD(v25) = 18439;
        v22 = 805773068;
        v23 = &v25;
        v24 = 5;
        v14 = *(_QWORD *)(qword_100994BC8 + 24);
        HIWORD(v25) = *(_WORD *)(v14 + 16);
        v26 = *(_BYTE *)(v14 + 18);
      }
      v16 = sub_10014A798(a1, a2, (unsigned __int8 *)&v22);
LABEL_44:
      v12 = v16;
      if (!(_DWORD)v16)
        return;
      goto LABEL_45;
    }
    if (v6 != 124)
      return;
    v15 = *((unsigned __int16 *)a3 + 8);
    if (*((_WORD *)a3 + 8) && (**((_BYTE **)a3 + 1) & 0x7F) == 0x7E)
    {
      v16 = sub_10014F7A0(a1, a2, (uint64_t)a3);
      goto LABEL_44;
    }
    if (a3[1] != 9 || a3[2])
    {
      if (sub_10005549C())
      {
        sub_100054530("Rejecting PASS THROUGH command directed at subunit <%d,%d>", a3[1], a3[2]);
        v18 = sub_1000544A0(4u);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      *a3 = 10;
      sub_10014A798(a1, a2, a3);
      v15 = *((unsigned __int16 *)a3 + 8);
    }
    if (v15 >= 2)
    {
      v19 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
      if (!v19[1])
      {
        (**(void (***)(uint64_t, uint64_t, _QWORD))(qword_100994BC8 + 16))(a1, a2, *v19);
        return;
      }
    }
LABEL_11:
    v10 = 8;
LABEL_51:
    *a3 = v10;
    sub_10014A798(a1, a2, a3);
    return;
  }
  v8 = *(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)(qword_100994BC8 + 16) + 24);
  if (v8)
    v8(a1, a2, a3);
}

char *sub_10014EFB4(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned __int16 *a5)
{
  unsigned int v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  char *result;
  char *v14;
  int v15;
  NSObject *v16;
  uint64_t (*v17)(uint64_t, uint64_t, _QWORD, uint64_t, unsigned __int16 *);
  unsigned __int16 *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  int v23;
  NSObject *v24;
  int v25;
  int v26;
  NSObject *v27;
  uint64_t (*v28)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t (*v29)(uint64_t, uint64_t, _QWORD, char *, _QWORD);
  NSObject *v30;
  NSObject *v31;

  v7 = a2;
  switch(a3)
  {
    case 'p':
      if (a4 == 2)
      {
        v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 16) + 16)
                                                                 + 128);
        if (!v9)
          goto LABEL_54;
        v10 = bswap32(*a5) >> 16;
        return (char *)v9(a1, a2, v10);
      }
      if (!sub_10005549C())
        goto LABEL_45;
      sub_100054530("Invalid length for setBrowsedPlayer: %u (expecting == 2)", a4);
      v21 = sub_1000544A0(4u);
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        goto LABEL_45;
      goto LABEL_44;
    case 'q':
      if (a4 <= 9)
      {
        if (!sub_10005549C())
          goto LABEL_45;
        sub_100054530("Invalid length for getFolderItems: %u (expecting >= 10)", a4);
        v16 = sub_1000544A0(4u);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          goto LABEL_45;
        goto LABEL_44;
      }
      v22 = *((unsigned __int8 *)a5 + 9);
      if ((v22 - 1) > 0xFDu || (v23 = 4 * v22 + 10, v23 == a4))
      {
        v28 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 16)
                                                                                             + 16)
                                                                                 + 136);
        if (!v28)
          goto LABEL_54;
        return (char *)v28(a1, a2, *(unsigned __int8 *)a5, bswap32(*(_DWORD *)((char *)a5 + 1)), bswap32(*(_DWORD *)((char *)a5 + 5)));
      }
      if (!sub_10005549C())
        goto LABEL_63;
      sub_100054530("Invalid length for getFolderItems: %u (expecting %u)", a4, v23);
      v30 = sub_1000544A0(4u);
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        goto LABEL_63;
      goto LABEL_62;
    case 'r':
      if (a4 == 11)
      {
        v17 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, unsigned __int16 *))(*(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 16) + 16)
                                                                                              + 144);
        if (!v17)
          goto LABEL_54;
        v18 = (unsigned __int16 *)((char *)a5 + 3);
        v19 = *((unsigned __int8 *)a5 + 2);
        return (char *)v17(a1, a2, bswap32(*a5) >> 16, v19, v18);
      }
      if (!sub_10005549C())
        goto LABEL_45;
      sub_100054530("Invalid length for changePath: %u (expecting == 11)", a4);
      v24 = sub_1000544A0(4u);
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        goto LABEL_45;
      goto LABEL_44;
    case 's':
      if (a4 <= 0xB)
      {
        if (!sub_10005549C())
          goto LABEL_45;
        sub_100054530("Invalid length for getItemAttributes: %d (expecting more or equal to 12)", a4);
        v20 = sub_1000544A0(4u);
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          goto LABEL_45;
        goto LABEL_44;
      }
      v25 = *((unsigned __int8 *)a5 + 11);
      if ((v25 - 1) > 0xFDu || (v26 = 4 * v25 + 12, v26 == a4))
      {
        v29 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *, _QWORD))(*(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 16)
                                                                                             + 16)
                                                                                 + 152);
        if (!v29)
          goto LABEL_54;
        return (char *)v29(a1, a2, *(unsigned __int8 *)a5, (char *)a5 + 1, bswap32(*(unsigned __int16 *)((char *)a5 + 9)) >> 16);
      }
      else
      {
        if (sub_10005549C())
        {
          sub_100054530("Invalid length for getFolderItems: %u (expecting %u)", a4, v26);
          v31 = sub_1000544A0(4u);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
LABEL_62:
            sub_1006CE7A4();
        }
LABEL_63:
        result = (char *)sub_100114588(4uLL);
        v14 = result;
        v15 = 33620128;
        if (result)
          goto LABEL_55;
      }
      return result;
    case 't':
      goto LABEL_10;
    case 'u':
      if (a4 == 1)
      {
        v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 16) + 16)
                                                                 + 168);
        if (!v9)
          goto LABEL_54;
        v10 = *(unsigned __int8 *)a5;
        return (char *)v9(a1, a2, v10);
      }
      if (!sub_10005549C())
        goto LABEL_45;
      sub_100054530("Invalid length for GetTotalNumberOfItems: %d (expecting equal to 1)", a4);
      v27 = sub_1000544A0(4u);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        goto LABEL_45;
      goto LABEL_44;
    default:
      if (a3 != 128)
      {
LABEL_10:
        if (sub_10005549C())
        {
          sub_100054530("PDU 0x%x shouldn't be sent on the browsing channel", a3);
          v12 = sub_1000544A0(4u);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
        result = (char *)sub_100114588(4uLL);
        v14 = result;
        v15 = 65696;
        if (!result)
          return result;
        goto LABEL_55;
      }
      if (a4 > 3)
      {
        v17 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, unsigned __int16 *))(*(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 16) + 16)
                                                                                              + 160);
        if (v17)
        {
          v18 = a5 + 2;
          v19 = bswap32(a5[1]) >> 16;
          return (char *)v17(a1, a2, bswap32(*a5) >> 16, v19, v18);
        }
LABEL_54:
        result = (char *)sub_100114588(4uLL);
        v14 = result;
        v15 = 50397344;
        if (!result)
          return result;
LABEL_55:
        *(_DWORD *)v14 = v15;
        return (char *)sub_100139BE8(a1, 4366, v7, 2, v14, 4);
      }
      if (sub_10005549C())
      {
        sub_100054530("Invalid length for search: %d (expecting more or equal to 4)", a4);
        v11 = sub_1000544A0(4u);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
LABEL_44:
          sub_1006CE7A4();
      }
LABEL_45:
      result = (char *)sub_100114588(4uLL);
      v14 = result;
      v15 = 16842912;
      if (result)
        goto LABEL_55;
      return result;
  }
}

uint64_t sub_10014F514()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  void **v5;

  if (!(_DWORD)xmmword_100999158)
    return 408;
  v0 = *(_QWORD *)(qword_100994BC8 + 24);
  if (!v0)
    return 121;
  if (*(_BYTE *)(qword_100994BC8 + 90) && !*(_QWORD *)(qword_100994BC8 + 8))
    return 141;
  sub_1001D9734(*(unsigned __int16 *)(v0 + 4));
  sub_1002467B8(**(_DWORD **)(qword_100994BC8 + 24));
  v1 = qword_100994BC8;
  *(_QWORD *)(qword_100994BC8 + 16) = 0;
  if (*(_BYTE *)(v1 + 89))
  {
    v2 = 0;
    v3 = 24;
    do
    {
      v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + v3);
      if (v4)
      {
        sub_100053298(v4);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(qword_100994BC8 + 24) + 8) + v3) = 0;
        v1 = qword_100994BC8;
      }
      ++v2;
      v3 += 32;
    }
    while (v2 < *(unsigned __int8 *)(v1 + 89));
  }
  v5 = *(void ***)(v1 + 24);
  if (v5[1])
  {
    sub_100053298(v5[1]);
    v5 = *(void ***)(qword_100994BC8 + 24);
    v5[1] = 0;
  }
  sub_100053298(v5);
  *(_QWORD *)(qword_100994BC8 + 24) = 0;
  return sub_10014A5B8();
}

uint64_t sub_10014F624(uint64_t a1, unsigned int a2, char a3, unsigned __int8 a4)
{
  _BYTE v5[2];
  _QWORD v6[3];

  if (!(_DWORD)xmmword_100999158)
    return 408;
  if (a1)
  {
    if ((a4 & 8) != 0)
    {
      v6[0] = a4;
      *(_WORD *)((char *)v6 + 1) = 9;
      BYTE3(v6[0]) = 124;
      v6[1] = v5;
      v6[2] = 2;
      v5[0] = a3;
      v5[1] = 0;
      return sub_10014A798(a1, a2, (unsigned __int8 *)v6);
    }
  }
  else
  {
    sub_100253460();
  }
  return 101;
}

uint64_t sub_10014F6A0(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  if (!(_DWORD)xmmword_100999158)
    return 408;
  if (a1)
  {
    if ((*a3 & 8) != 0)
      return sub_10014A798(a1, a2, a3);
  }
  else
  {
    sub_100253460();
  }
  return 101;
}

uint64_t sub_10014F6E4(uint64_t a1, unsigned int a2, const void *a3, size_t size)
{
  signed int v6;
  size_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (!(_DWORD)xmmword_100999158)
    return 408;
  if (a1 && a3)
  {
    v6 = size;
    v8 = size;
    v9 = (char *)sub_100114588(size);
    if (v9)
    {
      v10 = v9;
      memmove(v9, a3, v8);
      v11 = sub_100139BE8(a1, 4366, a2, 2, v10, v6);
      if ((_DWORD)v11)
        sub_100053298(v10);
    }
    else
    {
      return 106;
    }
  }
  else
  {
    sub_100253460();
    return 101;
  }
  return v11;
}

uint64_t sub_10014F7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void (*v5)(void);

  v3 = *(_QWORD *)(qword_100994BC8 + 16);
  if (*(_QWORD *)(v3 + 16))
    return sub_10014DF5C(a1, a2, a3);
  v5 = *(void (**)(void))(v3 + 8);
  if (!v5)
    return 3301;
  v5();
  return 0;
}

uint64_t sub_10014F7E8()
{
  uint64_t v0;
  const __CFDictionary *v1;
  io_service_t MatchingService;
  io_object_t v3;
  NSObject *v4;
  int v6;
  const char *v7;

  if (dword_100981A80)
    return 0;
  if ((byte_100981A84 & 1) != 0)
    return 5;
  v1 = IOServiceNameMatching("AppleBTMgmt");
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v1);
  if (!MatchingService)
  {
    byte_100981A84 = 1;
    return 5;
  }
  v3 = MatchingService;
  if (IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_100981A80))
  {
    if (qword_100981A88 != -1)
      dispatch_once(&qword_100981A88, &stru_10091BE78);
    if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_ERROR))
      sub_1006D2098();
    v0 = 5;
  }
  else
  {
    if (qword_100981A88 != -1)
      dispatch_once(&qword_100981A88, &stru_10091BEB8);
    v4 = qword_100981A90;
    v0 = 0;
    if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 136315138;
      v7 = "AppleBTMgmt";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "applebt_mgmt_connect: Service %s connected!\n", (uint8_t *)&v6, 0xCu);
      v0 = 0;
    }
  }
  IOObjectRelease(v3);
  return v0;
}

void sub_10014F994(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

void sub_10014F9C0(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

uint64_t sub_10014F9EC(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  unsigned __int8 inputStruct;
  uint8_t buf[4];
  int v8;

  inputStruct = a1;
  v1 = sub_10014F7E8();
  if ((_DWORD)v1)
  {
    v2 = v1;
    if (qword_100981A88 != -1)
      dispatch_once(&qword_100981A88, &stru_10091BEF8);
    if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_ERROR))
      sub_1006D2158();
  }
  else
  {
    v3 = IOConnectCallMethod(dword_100981A80, 2u, 0, 0, &inputStruct, 1uLL, 0, 0, 0, 0);
    if ((_DWORD)v3)
    {
      v2 = v3;
      if (qword_100981A88 != -1)
        dispatch_once(&qword_100981A88, &stru_10091BF38);
      if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_ERROR))
        sub_1006D20F8();
    }
    else
    {
      if (qword_100981A88 != -1)
        dispatch_once(&qword_100981A88, &stru_10091BF78);
      v4 = qword_100981A90;
      v2 = 0;
      if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v8 = inputStruct;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "applebt_set_trace_mode: set to %d!\n", buf, 8u);
        return 0;
      }
    }
  }
  return v2;
}

void sub_10014FB98(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

void sub_10014FBC4(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

void sub_10014FBF0(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

uint64_t sub_10014FC1C(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  unsigned __int8 inputStruct;
  uint8_t buf[4];
  int v8;

  inputStruct = a1;
  v1 = sub_10014F7E8();
  if ((_DWORD)v1)
  {
    v2 = v1;
    if (qword_100981A88 != -1)
      dispatch_once(&qword_100981A88, &stru_10091BFB8);
    if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_ERROR))
      sub_1006D2218();
  }
  else
  {
    v3 = IOConnectCallMethod(dword_100981A80, 3u, 0, 0, &inputStruct, 1uLL, 0, 0, 0, 0);
    if ((_DWORD)v3)
    {
      v2 = v3;
      if (qword_100981A88 != -1)
        dispatch_once(&qword_100981A88, &stru_10091BFF8);
      if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_ERROR))
        sub_1006D21B8();
    }
    else
    {
      if (qword_100981A88 != -1)
        dispatch_once(&qword_100981A88, &stru_10091C038);
      v4 = qword_100981A90;
      v2 = 0;
      if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v8 = inputStruct;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "applebt_set_trace_level: set to %d!\n", buf, 8u);
        return 0;
      }
    }
  }
  return v2;
}

void sub_10014FDC8(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

void sub_10014FDF4(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

void sub_10014FE20(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

uint64_t sub_10014FE4C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  v2 = sub_10014F7E8();
  if ((_DWORD)v2)
  {
    v3 = v2;
    if (qword_100981A88 != -1)
      dispatch_once(&qword_100981A88, &stru_10091C078);
    if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_ERROR))
      sub_1006D22D8();
  }
  else
  {
    v4 = IOConnectCallMethod(dword_100981A80, 4u, 0, 0, a1, 0x20uLL, 0, 0, 0, 0);
    if ((_DWORD)v4)
    {
      v3 = v4;
      if (qword_100981A88 != -1)
        dispatch_once(&qword_100981A88, &stru_10091C0B8);
      if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_ERROR))
        sub_1006D2278();
    }
    else
    {
      if (qword_100981A88 != -1)
        dispatch_once(&qword_100981A88, &stru_10091C0F8);
      v5 = qword_100981A90;
      v3 = 0;
      if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *a1;
        v7 = a1[1];
        v8 = a1[2];
        v9 = a1[3];
        *(_DWORD *)buf = 134218752;
        v12 = v6;
        v13 = 2048;
        v14 = v7;
        v15 = 2048;
        v16 = v8;
        v17 = 2048;
        v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "applebt_set_trace_mask: set to <%016llX%016llX%016llX%016llX>!\n", buf, 0x2Au);
        return 0;
      }
    }
  }
  return v3;
}

void sub_100150020(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

void sub_10015004C(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

void sub_100150078(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

uint64_t sub_1001500A4(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int inputStruct;
  uint8_t buf[4];
  int v8;

  inputStruct = a1;
  v1 = sub_10014F7E8();
  if ((_DWORD)v1)
  {
    v2 = v1;
    if (qword_100981A88 != -1)
      dispatch_once(&qword_100981A88, &stru_10091C138);
    if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_ERROR))
      sub_1006D2398();
  }
  else
  {
    v3 = IOConnectCallMethod(dword_100981A80, 5u, 0, 0, &inputStruct, 4uLL, 0, 0, 0, 0);
    if ((_DWORD)v3)
    {
      v2 = v3;
      if (qword_100981A88 != -1)
        dispatch_once(&qword_100981A88, &stru_10091C178);
      if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_ERROR))
        sub_1006D2338();
    }
    else
    {
      if (qword_100981A88 != -1)
        dispatch_once(&qword_100981A88, &stru_10091C1B8);
      v4 = qword_100981A90;
      v2 = 0;
      if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v8 = inputStruct;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "applebt_set_capture_timeout: set to %d!\n", buf, 8u);
        return 0;
      }
    }
  }
  return v2;
}

void sub_100150250(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

void sub_10015027C(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

void sub_1001502A8(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

uint64_t sub_1001502D4(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int inputStruct;

  inputStruct = a1;
  v1 = sub_10014F7E8();
  if ((_DWORD)v1)
  {
    v2 = v1;
    if (qword_100981A88 != -1)
      dispatch_once(&qword_100981A88, &stru_10091C1F8);
    if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_ERROR))
      sub_1006D2458();
  }
  else
  {
    v3 = IOConnectCallMethod(dword_100981A80, 6u, 0, 0, &inputStruct, 4uLL, 0, 0, 0, 0);
    v2 = v3;
    if ((_DWORD)v3 != -536870201 && (_DWORD)v3 != 0)
    {
      if (qword_100981A88 != -1)
        dispatch_once(&qword_100981A88, &stru_10091C238);
      if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_ERROR))
        sub_1006D23F8();
    }
  }
  return v2;
}

void sub_1001503EC(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

void sub_100150418(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

uint64_t sub_100150444(uint32_t a1, const void *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t buf[16];

  v6 = sub_10014F7E8();
  if ((_DWORD)v6)
  {
    v7 = v6;
    if (qword_100981A88 != -1)
      dispatch_once(&qword_100981A88, &stru_10091C278);
    if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_ERROR))
      sub_1006D2518();
  }
  else
  {
    v8 = IOConnectCallMethod(dword_100981A80, a1, 0, 0, a2, a3, 0, 0, 0, 0);
    if ((_DWORD)v8)
    {
      v7 = v8;
      if (qword_100981A88 != -1)
        dispatch_once(&qword_100981A88, &stru_10091C2B8);
      if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_ERROR))
        sub_1006D24B8();
    }
    else
    {
      if (qword_100981A88 != -1)
        dispatch_once(&qword_100981A88, &stru_10091C2F8);
      v9 = qword_100981A90;
      v7 = 0;
      if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "applebt_general_debug: completed!\n", buf, 2u);
        return 0;
      }
    }
  }
  return v7;
}

void sub_1001505C4(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

void sub_1001505F0(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

void sub_10015061C(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

uint64_t sub_100150648(void *a1, size_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t buf[4];
  uint32_t outputCnt;
  uint64_t output;

  v4 = sub_10014F7E8();
  if ((_DWORD)v4)
  {
    v5 = v4;
    if (qword_100981A88 != -1)
      dispatch_once(&qword_100981A88, &stru_10091C338);
    if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_ERROR))
      sub_1006D25D8();
  }
  else
  {
    output = 0;
    outputCnt = 1;
    v6 = IOConnectCallMethod(dword_100981A80, 7u, 0, 0, 0, 0, &output, &outputCnt, a1, a2);
    if ((_DWORD)v6)
    {
      v5 = v6;
      if (qword_100981A88 != -1)
        dispatch_once(&qword_100981A88, &stru_10091C378);
      if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_ERROR))
        sub_1006D2578();
    }
    else
    {
      *a2 = output;
      if (qword_100981A88 != -1)
        dispatch_once(&qword_100981A88, &stru_10091C3B8);
      v7 = qword_100981A90;
      v5 = 0;
      if (os_log_type_enabled((os_log_t)qword_100981A90, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "applebt_read_crash_info: completed!\n", buf, 2u);
        return 0;
      }
    }
  }
  return v5;
}

void sub_1001507E0(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

void sub_10015080C(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

void sub_100150838(id a1)
{
  qword_100981A90 = (uint64_t)os_log_create("com.apple.bluetooth", "applebt_mgmt");
}

void sub_100150864(uint64_t a1, unsigned int a2)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;

  if (!a1)
    sub_100253460();
  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 > 9u || ((1 << *(_DWORD *)a1) & 0x301) == 0)
  {
    *(_DWORD *)a1 = 9;
    *(_DWORD *)(a1 + 4) = v4;
    if (*(_WORD *)(a1 + 32))
    {
      v6 = sub_1001DEB7C(*(unsigned __int16 *)(a1 + 32), 436);
      if ((_DWORD)v6)
      {
        v7 = v6;
        if (sub_10005549C())
        {
          sub_100054530("OI_L2CAP_Disconnect failed in BNEP_FreeConnection %!\n", v7);
          v8 = sub_1000544A0(7u);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
            sub_1006CE7A4();
        }
      }
      else
      {
        *(_DWORD *)(a1 + 8) = a2;
        if (*(_WORD *)(a1 + 32))
          return;
      }
    }
    sub_100150938(a1, a2);
  }
}

void sub_100150938(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void (*v7)(_QWORD, int *, uint64_t);
  void (*v8)(_QWORD, uint64_t);
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  int v12;
  void *v13;
  unsigned int v14;
  _QWORD *i;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *j;
  _QWORD *v19;
  uint64_t v20;
  void (*v21)(_QWORD, uint64_t);
  int v22;
  __int16 v23;

  if (*(_DWORD *)a1)
  {
    v3 = a1 + 34;
    v4 = *(_DWORD *)(a1 + 34);
    v5 = *(_DWORD *)(a1 + 8);
    v6 = v5 ? v5 : a2;
    v7 = *(void (**)(_QWORD, int *, uint64_t))(a1 + 88);
    v8 = *(void (**)(_QWORD, uint64_t))(a1 + 96);
    v22 = v4;
    v23 = *(_WORD *)(v3 + 4);
    v21 = v8;
    if (*(_WORD *)(qword_100981A98 + 2))
    {
      v9 = 0;
      v10 = qword_100981AA8 - 152;
      while (1)
      {
        v10 += 152;
        if (v10 == a1)
          break;
        if (*(unsigned __int16 *)(qword_100981A98 + 2) == ++v9)
          goto LABEL_9;
      }
      v11 = v9 + 1;
    }
    else
    {
LABEL_9:
      v11 = 0;
    }
    v12 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)a1 = 0;
    *(_DWORD *)v3 = 0;
    *(_WORD *)(v3 + 4) = 0;
    v13 = *(void **)(a1 + 16);
    if (v13)
    {
      sub_100053298(v13);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v14 = *(_DWORD *)(a1 + 48);
    if (v14)
    {
      sub_100254F2C(v14);
      *(_DWORD *)(a1 + 48) = 0;
    }
    if (sub_10004A088(*(_DWORD *)(a1 + 28)))
      sub_100049F6C(*(unsigned int *)(a1 + 28));
    v16 = (_QWORD *)(a1 + 56);
    for (i = *(_QWORD **)(a1 + 56); i != v16; i = (_QWORD *)*v16)
    {
      v17 = sub_100253D1C((_QWORD **)(a1 + 56));
      if (!*(_BYTE *)(v17 - 8))
        (*(void (**)(_QWORD, uint64_t))(a1 + 104))(v11, v6);
      sub_100254090(*(void **)(v17 - 24));
      sub_100053298((void *)(v17 - 24));
    }
    v19 = (_QWORD *)(a1 + 72);
    for (j = *(_QWORD **)(a1 + 72); j != v19; j = (_QWORD *)*v19)
    {
      v20 = sub_100253D1C((_QWORD **)(a1 + 72));
      if (!*(_BYTE *)(v20 - 8))
        (*(void (**)(_QWORD, uint64_t))(a1 + 104))(v11, v6);
      sub_100049F6C(*(unsigned int *)(v20 - 4));
      sub_100254090(*(void **)(v20 - 24));
      sub_100053298((void *)(v20 - 24));
    }
    sub_100151D18();
    if ((v12 - 5) < 2)
      goto LABEL_30;
    if (v12 == 7)
    {
      v21(v11, v6);
      return;
    }
    if (v12 == 2)
LABEL_30:
      v7(v11, &v22, v6);
  }
}

unsigned __int16 *sub_100150B3C(int a1)
{
  uint64_t v1;
  unsigned __int16 *i;

  v1 = *(unsigned __int16 *)qword_100981A98;
  if (!*(_WORD *)qword_100981A98)
    return 0;
  for (i = (unsigned __int16 *)qword_100981AA0; *i != a1; i += 8)
  {
    if (!--v1)
      return 0;
  }
  return i;
}

uint64_t sub_100150B78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int16 *)(qword_100981A98 + 2);
  if (*(_WORD *)(qword_100981A98 + 2))
  {
    v2 = 0;
    v3 = qword_100981AA8 - 152;
    while (1)
    {
      v3 += 152;
      if (v3 == a1)
        break;
      if (v1 == ++v2)
      {
        LOWORD(v1) = 0;
        return (unsigned __int16)v1;
      }
    }
    LOWORD(v1) = v2 + 1;
  }
  return (unsigned __int16)v1;
}

uint64_t sub_100150BC4(int a1, uint64_t *a2, _WORD *a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t result;

  if (a2)
  {
    if (*(_WORD *)(qword_100981A98 + 2))
    {
      v3 = 0;
      for (i = qword_100981AA8; *(unsigned __int16 *)(i + 32) != a1; i += 152)
      {
        if (*(unsigned __int16 *)(qword_100981A98 + 2) == ++v3)
          return 404;
      }
      *a2 = i;
      result = 0;
      if (a3)
        *a3 = v3 + 1;
    }
    else
    {
      return 404;
    }
  }
  else
  {
    sub_100253460();
    return 101;
  }
  return result;
}

uint64_t sub_100150C38(int a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  NSObject *v12;

  if (a3)
  {
    if (HIDWORD(xmmword_100999158) || (result = sub_100150D64(), !(_DWORD)result))
    {
      result = sub_1001E3870(a1, (uint64_t)sub_100150E58);
      if (!(_DWORD)result)
      {
        v7 = *(unsigned __int16 *)qword_100981A98;
        if (*(_WORD *)qword_100981A98)
        {
          v8 = qword_100981AA0;
          v9 = (unsigned __int16 *)qword_100981AA0;
          v10 = *(unsigned __int16 *)qword_100981A98;
          do
          {
            v11 = *v9;
            v9 += 8;
            if (v11 == a2)
            {
              if (sub_10005549C())
              {
                sub_100054530("Rejecting registration for service already registered\n");
                v12 = sub_1000544A0(7u);
                if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
                  sub_1006CE7A4();
              }
              goto LABEL_18;
            }
            --v10;
          }
          while (v10);
          while (*(_WORD *)v8)
          {
            v8 += 16;
            if (!--v7)
              goto LABEL_18;
          }
          result = 0;
          *(_WORD *)v8 = a2;
          ++HIDWORD(xmmword_100999158);
          *(_QWORD *)(v8 + 8) = a3;
        }
        else
        {
LABEL_18:
          if (!HIDWORD(xmmword_100999158))
          {
            sub_1001E3A38(a1);
            sub_100150F50();
          }
          return 104;
        }
      }
    }
  }
  else
  {
    sub_100253460();
    return 101;
  }
  return result;
}

uint64_t sub_100150D64()
{
  unsigned __int16 *v1;
  unint64_t v2;
  uint64_t v3;

  if (HIDWORD(xmmword_100999158))
    return 119;
  v1 = (unsigned __int16 *)sub_100252DE8(7u);
  qword_100981A98 = (uint64_t)v1;
  if (v1[2] - 10 >= 0x123)
  {
    sub_100253460();
    v1 = (unsigned __int16 *)qword_100981A98;
  }
  if (v1[3] - 10 >= 0x123)
  {
    sub_100253460();
    v1 = (unsigned __int16 *)qword_100981A98;
  }
  qword_100981AA0 = (uint64_t)sub_100114588(16 * *v1);
  qword_100981AA8 = (uint64_t)sub_100114588(152 * *(unsigned __int16 *)(qword_100981A98 + 2));
  if (*(_WORD *)(qword_100981A98 + 2))
  {
    v2 = 0;
    v3 = 56;
    do
    {
      sub_100253C6C((_QWORD *)(qword_100981AA8 + v3));
      sub_100253C6C((_QWORD *)(qword_100981AA8 + v3 + 16));
      ++v2;
      v3 += 152;
    }
    while (v2 < *(unsigned __int16 *)(qword_100981A98 + 2));
  }
  return 0;
}

void sub_100150E58(int a1, uint64_t a2, unsigned int a3)
{
  _DWORD *v6;
  _BOOL4 v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  int v11;
  _QWORD v12[4];

  v6 = (_DWORD *)sub_1001513E8(a2);
  if (v6)
  {
    if (!*v6)
      sub_100253460();
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v8 = sub_100151434((int *)a2);
    v7 = v8 != 0;
  }
  v12[0] = 0x2021388FFFF069BLL;
  memset(&v12[1], 0, 24);
  if (a1 == 4111)
    v9 = &unk_10091C3D8;
  else
    v9 = &unk_100739808;
  v10 = sub_1001DDCAC((uint64_t)sub_10015149C, (uint64_t)sub_10015159C, (uint64_t)sub_100151670, a3, (uint64_t)v12, v7, (uint64_t)v9);
  if (v8)
  {
    if (v10)
    {
      sub_100150864(v8, v10);
    }
    else
    {
      *(_DWORD *)v8 = 1;
      *(_WORD *)(v8 + 32) = a3;
      v11 = *(_DWORD *)a2;
      *(_WORD *)(v8 + 38) = *(_WORD *)(a2 + 4);
      *(_DWORD *)(v8 + 34) = v11;
    }
  }
}

void sub_100150F50()
{
  uint64_t v0;
  unint64_t v1;
  NSObject *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  uint8_t buf[4];
  void *v7;
  __int16 v8;
  int v9;

  if (HIDWORD(xmmword_100999158))
    sub_100253460();
  qword_100981A98 = sub_100252DE8(7u);
  if (*(_WORD *)(qword_100981A98 + 2))
  {
    v0 = 0;
    v1 = 0;
    do
    {
      if (qword_100981AA8 + v0 + 56 != *(_QWORD *)(qword_100981AA8 + v0 + 56))
      {
        if (sub_10005549C())
        {
          sub_100054530("Send queue to %: not empty\n", qword_100981AA8 + v0 + 34);
          v2 = sub_1000544A0(7u);
          if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
          {
            v4 = sub_100054494();
            *(_DWORD *)buf = 136446466;
            v7 = v4;
            v8 = 1024;
            v9 = 0xFFFF;
            _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
          }
        }
      }
      if (qword_100981AA8 + v0 + 72 != *(_QWORD *)(qword_100981AA8 + v0 + 72))
      {
        if (sub_10005549C())
        {
          sub_100054530("Resend queue to %: not empty\n", qword_100981AA8 + v0 + 34);
          v3 = sub_1000544A0(7u);
          if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
          {
            v5 = sub_100054494();
            *(_DWORD *)buf = 136446466;
            v7 = v5;
            v8 = 1024;
            v9 = 0xFFFF;
            _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
          }
        }
      }
      ++v1;
      v0 += 152;
    }
    while (v1 < *(unsigned __int16 *)(qword_100981A98 + 2));
  }
  if (qword_100981AA8)
  {
    sub_100053298((void *)qword_100981AA8);
    qword_100981AA8 = 0;
  }
  if (qword_100981AA0)
  {
    sub_100053298((void *)qword_100981AA0);
    qword_100981AA0 = 0;
  }
}

uint64_t sub_100151180(int a1, int a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;
  _WORD *i;

  if (!HIDWORD(xmmword_100999158))
    return 408;
  v2 = *(unsigned __int16 *)(qword_100981A98 + 2);
  if (*(_WORD *)(qword_100981A98 + 2))
  {
    v3 = (unsigned __int16 *)(qword_100981AA8 + 40);
    while (!*(v3 - 4) || *v3 != a2)
    {
      v3 += 76;
      if (!--v2)
        goto LABEL_7;
    }
    return 141;
  }
  else
  {
LABEL_7:
    v4 = *(unsigned __int16 *)qword_100981A98;
    if (*(_WORD *)qword_100981A98)
    {
      for (i = (_WORD *)qword_100981AA0; (unsigned __int16)*i != a2; i += 8)
      {
        if (!--v4)
          return 120;
      }
      sub_1001E3A38(a1);
      *i = 0;
      sub_100151D18();
      return 0;
    }
    else
    {
      return 120;
    }
  }
}

uint64_t sub_100151234(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, uint64_t a7)
{
  _DWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD v20[4];

  if (!a3 || !a2)
    goto LABEL_15;
  if (!*(_QWORD *)a3)
  {
    sub_100253460();
    if (!*(_QWORD *)a3)
      return 101;
  }
  if (!*(_QWORD *)(a3 + 8))
  {
    sub_100253460();
    if (!*(_QWORD *)(a3 + 8))
      return 101;
  }
  if (!a4)
  {
LABEL_15:
    sub_100253460();
    return 101;
  }
  if (HIDWORD(xmmword_100999158) || (v15 = sub_100150D64(), !(_DWORD)v15))
  {
    v14 = (_DWORD *)sub_1001513E8(a4);
    if (v14)
    {
      if (!*v14)
        sub_100253460();
      if (!HIDWORD(xmmword_100999158))
        sub_100253460();
      return 2008;
    }
    else
    {
      v17 = sub_100151434((int *)a4);
      if (v17)
      {
        v18 = v17;
        v20[0] = 0x2021388FFFF069BLL;
        memset(&v20[1], 0, 24);
        v15 = sub_1001DD1A8((uint64_t)sub_10015149C, (uint64_t)sub_10015159C, (uint64_t)sub_100151670, a1, a4, (uint64_t)v20, (_WORD *)(v17 + 32), a7);
        if ((_DWORD)v15)
        {
          sub_100150864(v18, v15);
        }
        else
        {
          *(_QWORD *)(v18 + 88) = a2;
          *(_QWORD *)(v18 + 96) = *(_QWORD *)a3;
          *(_QWORD *)(v18 + 112) = *(_QWORD *)(a3 + 8);
          v19 = *(_DWORD *)a4;
          *(_WORD *)(v18 + 38) = *(_WORD *)(a4 + 4);
          *(_DWORD *)(v18 + 34) = v19;
          *(_WORD *)(v18 + 40) = a5;
          *(_WORD *)(v18 + 42) = a6;
          *(_OWORD *)(v18 + 136) = *(_OWORD *)(a3 + 16);
          *(_DWORD *)v18 = 2;
        }
      }
      else
      {
        if (!HIDWORD(xmmword_100999158))
        {
          sub_1001E3A38(a1);
          sub_100150F50();
        }
        return 104;
      }
    }
  }
  return v15;
}

uint64_t sub_1001513E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t i;

  v1 = *(unsigned __int16 *)(qword_100981A98 + 2);
  if (!*(_WORD *)(qword_100981A98 + 2))
    return 0;
  for (i = qword_100981AA8;
        *(_DWORD *)a1 != *(_DWORD *)(i + 34) || *(unsigned __int16 *)(a1 + 4) != *(unsigned __int16 *)(i + 38);
        i += 152)
  {
    if (!--v1)
      return 0;
  }
  return i;
}

uint64_t sub_100151434(int *a1)
{
  uint64_t result;
  int v3;

  result = sub_1001513E8((uint64_t)&dword_10073CA44);
  if (result)
  {
    *(_DWORD *)result = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 32) = 0;
    v3 = *a1;
    *(_WORD *)(result + 38) = *((_WORD *)a1 + 2);
    *(_DWORD *)(result + 34) = v3;
    *(_BYTE *)(result + 44) = 0;
    *(_DWORD *)(result + 48) = 0;
    ++HIDWORD(xmmword_100999158);
  }
  return result;
}

void sub_10015149C(int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t i;
  const void *v6[2];
  uint64_t v7;

  v6[0] = 0;
  v4 = *(unsigned __int16 *)(qword_100981A98 + 2);
  if (*(_WORD *)(qword_100981A98 + 2))
  {
    for (i = qword_100981AA8; *(unsigned __int16 *)(i + 32) != a1; i += 152)
    {
      if (!--v4)
        return;
    }
    v7 = i;
    if (a4)
    {
      *(_WORD *)(i + 32) = 0;
LABEL_8:
      sub_100150864(i, a4);
      return;
    }
    a4 = 2001;
    if (a2 < 0x69B || a3 < 0x69B)
      goto LABEL_8;
    if (*(_DWORD *)i == 2)
    {
      *(_DWORD *)i = 6;
      a4 = sub_100151F8C(i, *(_WORD *)(i + 40), *(_WORD *)(i + 42));
      if (a4)
        goto LABEL_8;
    }
    else
    {
      if (*(_DWORD *)i != 1)
      {
        a4 = 408;
        goto LABEL_8;
      }
      *(_DWORD *)i = 3;
      v6[1] = &v7;
      LOWORD(v6[0]) = 8;
      sub_10004A9EC((uint64_t)sub_100151D60, v6, 100, (int *)(i + 28));
    }
  }
}

void sub_10015159C(int a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v5;
  int v6;
  BOOL v7;

  if (HIDWORD(xmmword_100999158))
  {
    v2 = *(unsigned __int16 *)(qword_100981A98 + 2);
    if (*(_WORD *)(qword_100981A98 + 2))
    {
      for (i = qword_100981AA8; *(unsigned __int16 *)(i + 32) != a1; i += 152)
      {
        if (!--v2)
          return;
      }
      *(_WORD *)(i + 32) = 0;
      v6 = *(_DWORD *)i;
      if (*(_DWORD *)i)
        v7 = v6 == 9;
      else
        v7 = 1;
      if (!v7)
      {
        *(_DWORD *)i = 8;
        *(_DWORD *)(i + 4) = v6;
LABEL_17:
        sub_100150938(i, a2);
        return;
      }
      if ((v6 & 0xFFFFFFFE) == 8)
        goto LABEL_17;
    }
  }
  else if (sub_10005549C())
  {
    sub_100054530("L2CAP disconnected, but BNEP terminated\n");
    v5 = sub_1000544A0(7u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

void sub_100151670(int a1, char *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t i;
  NSObject *v5;

  if (HIDWORD(xmmword_100999158))
  {
    v3 = *(unsigned __int16 *)(qword_100981A98 + 2);
    if (*(_WORD *)(qword_100981A98 + 2))
    {
      for (i = qword_100981AA8; *(unsigned __int16 *)(i + 32) != a1; i += 152)
      {
        if (!--v3)
          return;
      }
      sub_1001524B4(i, a2, a3);
    }
  }
  else if (sub_10005549C())
  {
    sub_100054530("L2CAP disconnected, but BNEP terminated\n");
    v5 = sub_1000544A0(7u);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

uint64_t sub_10015171C(unsigned int a1, uint64_t a2, uint64_t a3, int a4, __int128 *a5)
{
  uint64_t v5;
  uint64_t v6;
  signed int v7;
  _DWORD *v8;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!HIDWORD(xmmword_100999158))
    return 408;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  if (*(unsigned __int16 *)(qword_100981A98 + 2) >= a1)
  {
    v6 = qword_100981AA8;
    v7 = a1 - 1;
    v8 = (_DWORD *)(qword_100981AA8 + 152 * (int)(a1 - 1));
    if (*v8 == 4)
    {
      v19 = 0;
      if (a4)
      {
        if (a3)
        {
          if (*(_QWORD *)a3 || (sub_100253460(), *(_QWORD *)a3))
          {
            if (*(_QWORD *)(a3 + 8) || (sub_100253460(), *(_QWORD *)(a3 + 8)))
            {
              v5 = sub_10025495C((uint64_t)sub_1001518EC, v6 + 152 * v7 + 34, a5, (int *)(v6 + 152 * v7 + 48), 1);
              if (!(_DWORD)v5)
              {
                *v8 = 5;
                v12 = v6 + 152 * v7;
                *(_QWORD *)(v12 + 88) = a2;
                *(_QWORD *)(v12 + 96) = *(_QWORD *)a3;
                *(_QWORD *)(v12 + 112) = *(_QWORD *)(a3 + 8);
                *(_OWORD *)(v12 + 136) = *(_OWORD *)(a3 + 16);
                return v5;
              }
LABEL_21:
              sub_100150864((uint64_t)v8, 0x7DEu);
              return v5;
            }
          }
        }
        else
        {
          sub_100253460();
        }
        return 101;
      }
      sub_100152054((_DWORD *)(qword_100981AA8 + 152 * v7), 2u, 4);
      v14 = v6 + 152 * v7;
      v17 = *(_QWORD *)(v14 + 16);
      v16 = (void **)(v14 + 16);
      v15 = v17;
      if (v17)
      {
        v18 = *(_WORD *)(v6 + 152 * v7 + 24);
        if (!v18)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep.c");
        v21 = v15;
        LOWORD(v22) = v18;
        HIDWORD(v22) = 0x10000;
        WORD1(v22) = v18;
        sub_10015331C((uint64_t)v8, (uint64_t)&v21, &v20, &v19);
        sub_100053298(*v16);
        v5 = 0;
        *v16 = 0;
      }
      else
      {
        v5 = 0;
      }
      goto LABEL_21;
    }
    return 408;
  }
  return 2004;
}

void sub_1001518EC(int a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  v12 = 0;
  v11 = 0;
  v2 = *(unsigned __int16 *)(qword_100981A98 + 2);
  if (*(_WORD *)(qword_100981A98 + 2))
  {
    v4 = qword_100981AA8;
    while (*(_DWORD *)(v4 + 48) != a1)
    {
      v4 += 152;
      if (!--v2)
        goto LABEL_5;
    }
    if (a2)
    {
      v6 = 4;
    }
    else
    {
      v6 = 0;
      *(_DWORD *)v4 = 7;
    }
    sub_100152054((_DWORD *)v4, 2u, v6);
    if (*(_QWORD *)(v4 + 16))
    {
      v7 = *(_WORD *)(v4 + 24);
      if (!v7)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep.c");
      v13 = *(_QWORD *)(v4 + 16);
      LOWORD(v14) = v7;
      HIDWORD(v14) = 0x10000;
      WORD1(v14) = v7;
      sub_10015331C(v4, (uint64_t)&v13, &v12, &v11);
      sub_100053298(*(void **)(v4 + 16));
      *(_QWORD *)(v4 + 16) = 0;
    }
    if (a2)
    {
      sub_100150864(v4, a2);
    }
    else
    {
      v8 = *(unsigned __int16 *)(qword_100981A98 + 2);
      if (*(_WORD *)(qword_100981A98 + 2))
      {
        v9 = 0;
        v10 = qword_100981AA8 - 152;
        while (1)
        {
          v10 += 152;
          if (v4 == v10)
            break;
          if (v8 == ++v9)
          {
            LOWORD(v8) = 0;
            goto LABEL_22;
          }
        }
        LOWORD(v8) = v9 + 1;
      }
LABEL_22:
      (*(void (**)(_QWORD, uint64_t, _QWORD))(v4 + 88))((unsigned __int16)v8, v4 + 34, 0);
    }
  }
  else
  {
LABEL_5:
    if (sub_10005549C())
    {
      sub_100054530("AcceptPolicyCB issued but no connection\n");
      v5 = sub_1000544A0(7u);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
}

uint64_t sub_100151A78(unsigned int a1)
{
  unsigned int v2;
  BOOL v3;
  int v4;

  if (!HIDWORD(xmmword_100999158))
    return 408;
  if (*(unsigned __int16 *)(qword_100981A98 + 2) < a1)
    return 2004;
  v2 = *(_DWORD *)(qword_100981AA8 + 152 * (int)(a1 - 1));
  v3 = v2 > 9;
  v4 = (1 << v2) & 0x301;
  if (v3 || v4 == 0)
    return sub_1001DEB7C(*(unsigned __int16 *)(qword_100981AA8 + 152 * (int)(a1 - 1) + 32), 436);
  else
    return 0;
}

uint64_t sub_100151B00(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, char *a6, size_t a7, char *a8, unsigned __int16 a9)
{
  uint64_t v9;
  signed int v10;
  _DWORD *v11;
  int *v12;
  int *v13;

  if (!HIDWORD(xmmword_100999158))
    return 408;
  if (*(unsigned __int16 *)(qword_100981A98 + 2) < a2)
    return 2004;
  v10 = a2 - 1;
  v11 = (_DWORD *)(qword_100981AA8 + 152 * (int)(a2 - 1));
  if (*v11 != 7)
    return 2006;
  if (a3)
  {
    if (*(_DWORD *)(qword_100981AA8 + 152 * v10 + 34) ^ *(_DWORD *)a3 | *(unsigned __int16 *)(qword_100981AA8
                                                                                               + 152 * v10
                                                                                               + 38) ^ *(unsigned __int16 *)(a3 + 4))
      v12 = (int *)a3;
    else
      v12 = 0;
    if (a4)
    {
LABEL_11:
      if (xmmword_100998F58 ^ *(_DWORD *)a4 | WORD2(xmmword_100998F58) ^ *(unsigned __int16 *)(a4 + 4))
        v13 = (int *)a4;
      else
        v13 = 0;
      if (!a8)
        goto LABEL_24;
      goto LABEL_19;
    }
  }
  else
  {
    v12 = 0;
    if (a4)
      goto LABEL_11;
  }
  v13 = 0;
  if (!a8)
  {
LABEL_24:
    sub_100253460();
    return 101;
  }
LABEL_19:
  if (!a1)
    goto LABEL_24;
  if (a9 < 0x5DDu || (v9 = 142, a5 == 33024) && a9 <= 0x5E0u)
  {
    *(_QWORD *)(qword_100981AA8 + 152 * v10 + 104) = a1;
    return sub_100152104(v11, v12, v13, a5, a6, a7, a8, a9);
  }
  return v9;
}

uint64_t sub_100151C48(unsigned int a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  int v5;
  __int16 v6;

  if (!HIDWORD(xmmword_100999158))
    return 408;
  if (*(unsigned __int16 *)(qword_100981A98 + 2) < a1)
    return 2004;
  v3 = qword_100981AA8 + 152 * a1;
  v5 = *(_DWORD *)(v3 - 152);
  v4 = (_DWORD *)(v3 - 152);
  if (v5 != 7)
    return 408;
  v6 = a2 - 2020;
  if (!a2)
    v6 = 0;
  return sub_100152054(v4, 4u, v6);
}

uint64_t sub_100151CB0(unsigned int a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  int v5;
  __int16 v6;

  if (!HIDWORD(xmmword_100999158))
    return 408;
  if (*(unsigned __int16 *)(qword_100981A98 + 2) < a1)
    return 2004;
  v3 = qword_100981AA8 + 152 * a1;
  v5 = *(_DWORD *)(v3 - 152);
  v4 = (_DWORD *)(v3 - 152);
  if (v5 != 7)
    return 408;
  v6 = a2 - 2030;
  if (!a2)
    v6 = 0;
  return sub_100152054(v4, 6u, v6);
}

void sub_100151D18()
{
  int v0;

  v0 = HIDWORD(xmmword_100999158);
  if (!HIDWORD(xmmword_100999158))
  {
    sub_100253460();
    v0 = HIDWORD(xmmword_100999158);
  }
  HIDWORD(xmmword_100999158) = v0 - 1;
  if (v0 == 1)
    sub_100150F50();
}

void sub_100151D60(uint64_t a1)
{
  sub_100150864(**(_QWORD **)(a1 + 8), 0x7FBu);
}

uint64_t sub_100151D70(_DWORD *a1, _QWORD *a2)
{
  uint64_t result;

  if (*a1 != 7 && (**(_BYTE **)(*a2 + 24) & 0x7F) != 1
    || (result = sub_100151DD4((uint64_t)a2), (_DWORD)result == 410))
  {
    sub_100253C88(a2 + 3, (uint64_t)(a1 + 14));
    return 0;
  }
  return result;
}

uint64_t sub_100151DD4(uint64_t a1)
{
  int v2;
  unsigned int *v3;
  NSObject *v4;
  uint64_t v5;
  const void *v7[2];
  uint64_t v8;

  v2 = *(unsigned __int16 *)(a1 + 18);
  if (!*(_WORD *)(a1 + 18))
    goto LABEL_8;
  v8 = a1;
  v7[0] = (const void *)8;
  v3 = (unsigned int *)(a1 + 20);
  if (sub_10004A088(*(_DWORD *)(a1 + 20)))
  {
    if (sub_10005549C())
    {
      sub_100054530("StartTimer called while timer already active\n");
      v4 = sub_1000544A0(7u);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_100049F6C(*v3);
  }
  v7[1] = &v8;
  v5 = sub_10004A9EC((uint64_t)sub_1001538BC, v7, v2, (int *)(a1 + 20));
  if (!(_DWORD)v5)
  {
LABEL_8:
    v5 = sub_1001DBC18((uint64_t)sub_100153674, *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 32), 0, *(_QWORD *)a1, 0);
    if ((_DWORD)v5)
    {
      if (*(_WORD *)(a1 + 18))
        sub_100049F6C(*(unsigned int *)(a1 + 20));
    }
    else
    {
      sub_100253C88((_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 8) + 72);
    }
  }
  return v5;
}

uint64_t sub_100151EE0(_DWORD *a1, char *a2, size_t a3, char a4, __int16 a5)
{
  _BYTE *v10;
  _BYTE *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v10 = sub_100052DC0(0x28uLL);
  if (!v10)
    return 106;
  v11 = v10;
  v12 = sub_100254200(a2, a3, 1);
  if (!v12)
  {
    v14 = 106;
    goto LABEL_7;
  }
  v13 = v12;
  v11[16] = a4;
  *((_WORD *)v11 + 9) = a5;
  v11[17] = 0;
  *(_QWORD *)v11 = v12;
  *((_QWORD *)v11 + 1) = a1;
  v14 = sub_100151D70(a1, v11);
  if ((_DWORD)v14)
  {
    sub_100053298(v13);
LABEL_7:
    sub_100053298(v11);
  }
  return v14;
}

uint64_t sub_100151F8C(uint64_t a1, __int16 a2, __int16 a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
    sub_100253460();
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    return 116;
  v6 = (char *)sub_100052DC0(7uLL);
  if (!v6)
    return 106;
  v7 = v6;
  *(_WORD *)v6 = 257;
  v6[2] = 2;
  v6[4] = a3;
  v6[3] = HIBYTE(a3);
  v6[6] = a2;
  v6[5] = HIBYTE(a2);
  v8 = sub_100252DE8(7u);
  v9 = sub_100151EE0((_DWORD *)a1, v7, 7uLL, 1, *(_WORD *)(v8 + 4));
  if ((_DWORD)v9)
    sub_100053298(v7);
  else
    *(_BYTE *)(a1 + 44) |= 1u;
  return v9;
}

uint64_t sub_100152054(_DWORD *a1, unsigned int a2, __int16 a3)
{
  char *v6;
  char *v7;
  uint64_t v8;

  if (!a1)
    sub_100253460();
  if (a2 > 6 || ((1 << a2) & 0x54) == 0)
    sub_100253460();
  v6 = (char *)sub_100052DC0(4uLL);
  if (!v6)
    return 106;
  v7 = v6;
  *v6 = 1;
  v6[1] = a2;
  v6[3] = a3;
  v6[2] = HIBYTE(a3);
  v8 = sub_100151EE0(a1, v6, 4uLL, 8, 0);
  if ((_DWORD)v8)
    sub_100053298(v7);
  return v8;
}

uint64_t sub_100152104(_DWORD *a1, int *a2, int *a3, unsigned int a4, char *a5, size_t a6, char *a7, size_t a8)
{
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  void *v22;
  char v23;
  char v24;
  int v25;
  unsigned int v26;
  int v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  _QWORD *v33;
  void *v34;

  if (a1)
  {
    if (a7)
      goto LABEL_3;
  }
  else
  {
    sub_100253460();
    if (a7)
      goto LABEL_3;
  }
  sub_100253460();
LABEL_3:
  v16 = (unsigned __int8 *)sub_100253D54(3u);
  if (!v16)
    return 106;
  v17 = v16;
  if (a5)
  {
    v18 = sub_1002542F8(v16, a5, a6, 2u);
    if ((_DWORD)v18)
    {
      v19 = v18;
      if (sub_10005549C())
      {
        sub_100054530("MBUF prepend failed\n");
        v20 = sub_1000544A0(7u);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      goto LABEL_38;
    }
    LOBYTE(a5) = 0x80;
  }
  v21 = (char *)sub_100052DC0(0xFuLL);
  if (!v21)
  {
    v19 = 106;
LABEL_38:
    sub_100053298(v17);
    return v19;
  }
  v22 = v21;
  v23 = 4 * (a3 == 0);
  if (a3)
    v24 = 3;
  else
    v24 = 2;
  if (!a2)
    v23 = v24;
  *v21 = a5 | v23;
  if (!a2)
  {
    v26 = 1;
    if (!a3)
      goto LABEL_22;
    goto LABEL_21;
  }
  v25 = *a2;
  *(_WORD *)(v21 + 5) = *((_WORD *)a2 + 2);
  *(_DWORD *)(v21 + 1) = v25;
  v26 = 7;
  if (a3)
  {
LABEL_21:
    v27 = *a3;
    v28 = &v21[v26];
    *((_WORD *)v28 + 2) = *((_WORD *)a3 + 2);
    *(_DWORD *)v28 = v27;
    v26 += 6;
  }
LABEL_22:
  *(_WORD *)&v21[v26] = __rev16(a4);
  v29 = sub_1002542F8(v17, v21, v26 + 2, 1u);
  if ((_DWORD)v29)
  {
    v19 = v29;
    if (!sub_10005549C())
      goto LABEL_37;
    sub_100054530("MBUF prepend failed\n");
    v30 = sub_1000544A0(7u);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      goto LABEL_37;
    goto LABEL_25;
  }
  v31 = sub_10005336C(v17, a7, a8, 2u);
  if ((_DWORD)v31)
  {
    v19 = v31;
    if (!sub_10005549C())
      goto LABEL_37;
    sub_100054530("MBUF append failed\n");
    v32 = sub_1000544A0(7u);
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      goto LABEL_37;
LABEL_25:
    sub_1006CE7A4();
LABEL_37:
    sub_100053298(v22);
    goto LABEL_38;
  }
  v33 = sub_100052DC0(0x28uLL);
  if (!v33)
  {
    v19 = 106;
    goto LABEL_37;
  }
  v34 = v33;
  *((_DWORD *)v33 + 4) = 0;
  *v33 = v17;
  v33[1] = a1;
  v19 = sub_100151D70(a1, v33);
  if ((_DWORD)v19)
  {
    sub_100053298(v34);
    goto LABEL_37;
  }
  return v19;
}

void sub_10015237C(uint64_t a1, int a2, uint64_t a3, _BYTE *a4)
{
  int v4;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;

  v4 = *(unsigned __int8 *)(a1 + 44);
  if ((v4 & a2) != 0)
  {
    *(_BYTE *)(a1 + 44) = v4 & ~(_BYTE)a2;
    v9 = (_QWORD *)(a1 + 72);
    while (1)
    {
      v9 = (_QWORD *)*v9;
      if (v9 == (_QWORD *)(a1 + 72))
        break;
      if (*((unsigned __int8 *)v9 - 8) == a2)
      {
        sub_100049F6C(*((unsigned int *)v9 - 1));
        sub_100253C9C(v9);
        sub_100254090((void *)*(v9 - 3));
        sub_100053298(v9 - 3);
        goto LABEL_9;
      }
    }
    if (sub_10005549C())
    {
      sub_100054530("CancelControlTimer called and no packet found\n");
      v10 = sub_1000544A0(7u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
LABEL_9:
    v11 = sub_100150B78(a1);
    switch(a2)
    {
      case 4:
        (*(void (**)(uint64_t, uint64_t))(a1 + 120))(v11, a3);
        break;
      case 2:
        (*(void (**)(uint64_t, uint64_t))(a1 + 128))(v11, a3);
        break;
      case 1:
        if ((_DWORD)a3)
        {
          *a4 = 0;
          sub_100150864(a1, a3);
        }
        else
        {
          *(_DWORD *)a1 = 7;
          (*(void (**)(uint64_t, uint64_t, _QWORD))(a1 + 88))(v11, a1 + 34, 0);
        }
        break;
    }
  }
}

void sub_1001524B4(uint64_t a1, char *a2, unsigned int a3)
{
  char v4;
  int v5;
  int v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  unsigned __int16 v17;
  __int16 v18;
  unsigned __int16 v19;
  NSObject *v20;
  __int16 v21;
  NSObject *v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unsigned __int16 v27;
  uint64_t v28;
  char *v29;
  __int16 v30;
  unsigned __int16 v31;
  int v32;
  char v33;
  unsigned __int16 v34;
  uint64_t v35;

  v28 = 0;
  v27 = 0;
  if (!a2 || !a3)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
  v26 = 0;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  v29 = a2;
  v30 = a3;
  v31 = a3;
  v32 = 65537;
  v4 = *a2;
  v5 = *a2 & 0x7F;
  v6 = *a2 & 0x80;
  v33 = *a2 & 0x80;
  if ((v5 - 2) < 3)
    goto LABEL_6;
  if (v5 != 1)
  {
    if (v5)
    {
LABEL_38:
      v9 = 411;
LABEL_39:
      if (sub_10005549C())
      {
        sub_100054530("BNEP failed parsing packet %!\n", v9);
        v16 = sub_1000544A0(7u);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      return;
    }
LABEL_6:
    if ((v4 & 0x7E) == 2)
    {
      v23 = xmmword_100998F58;
      v24 = WORD2(xmmword_100998F58);
      v7 = 1;
    }
    else
    {
      if (a3 < 7)
      {
        v8 = 0;
        v7 = 1;
        HIBYTE(v32) = 1;
        goto LABEL_15;
      }
      v23 = *(_DWORD *)(a2 + 1);
      v24 = *(_WORD *)(a2 + 5);
      v7 = 7;
      LOWORD(v32) = 7;
    }
    v8 = 1;
LABEL_15:
    if (v5 == 2 || v5 == 4)
    {
      v25 = *(_DWORD *)(a1 + 34);
      v26 = *(_WORD *)(a1 + 38);
      if ((v8 & 1) == 0)
        goto LABEL_36;
LABEL_22:
      if ((int)(a3 - v7) < 2)
      {
LABEL_37:
        HIBYTE(v32) = 1;
        goto LABEL_38;
      }
      v9 = bswap32(*(unsigned __int16 *)&a2[v7]) >> 16;
      LOWORD(v32) = v7 + 2;
      if (!v6)
        goto LABEL_28;
      goto LABEL_24;
    }
    if ((v8 & 1) != 0)
    {
      if ((int)(a3 - v7) >= 6)
      {
        v10 = &a2[v7];
        v25 = *(_DWORD *)v10;
        v26 = *((_WORD *)v10 + 2);
        v7 += 6;
        LOWORD(v32) = v7;
        goto LABEL_22;
      }
    }
    else
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1229, "OI_STATUS ProcessEthernetHeader(BNEP_CONNECTION *, OI_BYTE_STREAM *, uint8_t, OI_BD_ADDR *, OI_BD_ADDR *, uint16_t *)");
    }
LABEL_36:
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1233, "OI_STATUS ProcessEthernetHeader(BNEP_CONNECTION *, OI_BYTE_STREAM *, uint8_t, OI_BD_ADDR *, OI_BD_ADDR *, uint16_t *)");
    goto LABEL_37;
  }
  v9 = sub_100152950(a1, (uint64_t)&v29, &v33);
  if ((_DWORD)v9)
    goto LABEL_39;
  if (!v33)
    goto LABEL_28;
LABEL_24:
  v11 = sub_10015331C(a1, (uint64_t)&v29, &v28, &v27);
  if ((_DWORD)v11)
  {
    v12 = v11;
    if (!sub_10005549C())
      return;
    sub_100054530("BNEP failed parsing extension headers %!\n", v12);
    v13 = sub_1000544A0(7u);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_27;
  }
LABEL_28:
  if (v5 == 1 || *(_DWORD *)a1 != 7)
    return;
  v14 = v28;
  v15 = v27;
  v35 = a1;
  v34 = 0;
  if ((_DWORD)v9 == 33024)
  {
    if (BYTE2(v32) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
    if (HIBYTE(v32))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1270, "void RecvDataPacket(BNEP_CONNECTION *, OI_BYTE_STREAM *, OI_BD_ADDR *, OI_BD_ADDR *, uint16_t, uint8_t *, uint16_t)");
      HIBYTE(v32) = 1;
      if (BYTE2(v32) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
      goto LABEL_55;
    }
    v17 = v31;
    v21 = v32;
    if (v31 - (unsigned __int16)v32 <= 1)
    {
      HIBYTE(v32) = 1;
LABEL_55:
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1271, "void RecvDataPacket(BNEP_CONNECTION *, OI_BYTE_STREAM *, OI_BD_ADDR *, OI_BD_ADDR *, uint16_t, uint8_t *, uint16_t)");
      goto LABEL_56;
    }
    LOWORD(v32) = v32 + 2;
    if (v31 - (unsigned __int16)(v21 + 2) < 2)
    {
LABEL_56:
      HIBYTE(v32) = 1;
      goto LABEL_57;
    }
    v9 = bswap32(*(unsigned __int16 *)&v29[(unsigned __int16)(v21 + 2)]) >> 16;
    v18 = v21 + 4;
    LOWORD(v32) = v18;
  }
  else
  {
    if (HIBYTE(v32))
    {
LABEL_57:
      if (!sub_10005549C())
        return;
      sub_100054530("%! (%d)", 411, 0);
      v22 = sub_1000544A0(7u);
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        return;
LABEL_27:
      sub_1006CE7A4();
      return;
    }
    v17 = v31;
    v18 = v32;
  }
  v19 = v17 - v18;
  if ((unsigned __int16)(v17 - v18) >= 0x5DDu)
  {
    if (sub_10005549C())
    {
      sub_100054530("Received BNEP payload is too large, truncating\n");
      v20 = sub_1000544A0(7u);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    v19 = 1500;
  }
  sub_100150BC4(*(unsigned __int16 *)(a1 + 32), &v35, &v34);
  (*(void (**)(_QWORD, int *, int *, uint64_t, uint64_t, uint64_t, char *, _QWORD))(v35 + 112))(v34, &v23, &v25, v9, v14, v15, &v29[(unsigned __int16)v32], v19);
}

uint64_t sub_100152950(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v13;
  uint64_t result;
  void *v15;
  unsigned int v16;
  NSObject *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  __int16 v23;
  __int16 v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  __int16 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  int v40;
  NSObject *v41;
  void *v42;
  unsigned __int16 v43;
  unsigned __int16 v44;
  char v45;
  int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  NSObject *v51;
  void *v52;
  __int16 v53;
  unsigned int v54;
  unsigned __int16 v55;
  uint64_t v56;
  __int128 v57;

  if (*(_BYTE *)(a2 + 14) != 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
  if (*(_BYTE *)(a2 + 15))
  {
    v4 = "OI_STATUS RecvControlPacket(BNEP_CONNECTION *, OI_BYTE_STREAM *, uint8_t *)";
    v5 = 1328;
LABEL_4:
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", v5, v4);
LABEL_98:
    *(_BYTE *)(a2 + 15) = 1;
    return 411;
  }
  v6 = *(unsigned __int16 *)(a2 + 10);
  v7 = *(unsigned __int16 *)(a2 + 12);
  if (v6 <= v7)
    goto LABEL_98;
  v8 = a1;
  v9 = *(_QWORD *)a2;
  v10 = v7 + 1;
  *(_WORD *)(a2 + 12) = v7 + 1;
  v11 = *(_BYTE *)(v9 + v7);
  switch(v11)
  {
    case 0:
      if (v6 <= (unsigned __int16)v10)
        goto LABEL_98;
      *(_WORD *)(a2 + 12) = v7 + 2;
      v16 = *(unsigned __int8 *)(v9 + v10);
      if (sub_10005549C())
      {
        sub_100054530("Receive %s for command %d\n", "", v16);
        v17 = sub_1000544A0(7u);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      v18 = 0x40002000100uLL >> (8 * v16);
      if (v16 >= 6)
        LOBYTE(v18) = 0;
      sub_10015237C(v8, v18 & 7, 117, a3);
      return 0;
    case 1:
      result = 0;
      if (*(_DWORD *)v8 > 7u || ((1 << *(_DWORD *)v8) & 0xB8) == 0)
        return result;
      v56 = v8;
      v57 = xmmword_100739850;
      if (v6 <= (unsigned __int16)v10)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
      v55 = 0;
      v19 = v7 + 2;
      *(_WORD *)(a2 + 12) = v7 + 2;
      v20 = *(unsigned __int8 *)(v9 + v10);
      if (v20 != 16)
      {
        if (v20 != 4)
        {
          LOWORD(v21) = 0;
          if (v20 == 2)
          {
            if ((int)v6 - (int)v19 <= 1)
            {
              *(_BYTE *)(a2 + 15) = 1;
              v4 = "OI_STATUS RecvSetupReq(BNEP_CONNECTION *, OI_BYTE_STREAM *, uint8_t *)";
              v5 = 925;
              goto LABEL_4;
            }
            v22 = (unsigned __int8 *)(v9 + (unsigned __int16)v19);
            v23 = v22[1];
            v24 = *v22;
            *(_WORD *)(a2 + 12) = v7 + 4;
            if ((int)(v6 - (unsigned __int16)(v7 + 4)) < 2)
              goto LABEL_98;
            LOWORD(v21) = v23 | (v24 << 8);
            LOWORD(v25) = __rev16(*(unsigned __int16 *)(v9 + (unsigned __int16)(v7 + 4)));
            *(_WORD *)(a2 + 12) = v7 + 6;
            goto LABEL_71;
          }
          goto LABEL_44;
        }
        if ((int)(v6 - (unsigned __int16)v19) <= 3)
        {
          *(_BYTE *)(a2 + 15) = 1;
          v4 = "OI_STATUS RecvSetupReq(BNEP_CONNECTION *, OI_BYTE_STREAM *, uint8_t *)";
          v5 = 927;
          goto LABEL_4;
        }
        v21 = bswap32(*(_DWORD *)(v9 + v19));
        *(_WORD *)(a2 + 12) = v7 + 6;
        if (v21 < 0x10000)
        {
          v28 = *(unsigned __int16 *)(a2 + 12);
          if (*(unsigned __int16 *)(a2 + 10) - (int)v28 <= 3)
            goto LABEL_98;
          v25 = bswap32(*(_DWORD *)(*(_QWORD *)a2 + v28));
          *(_WORD *)(a2 + 12) = v28 + 4;
          if (v25 < 0x10000)
            goto LABEL_72;
          goto LABEL_69;
        }
LABEL_70:
        sub_100152054((_DWORD *)v8, 2u, 1);
        return 2011;
      }
      if ((int)(v6 - (unsigned __int16)v19) <= 3)
      {
        *(_BYTE *)(a2 + 15) = 1;
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 916, "OI_STATUS RecvSetupReq(BNEP_CONNECTION *, OI_BYTE_STREAM *, uint8_t *)");
        LOWORD(v21) = 0;
        goto LABEL_58;
      }
      LOWORD(v21) = __rev16(*(unsigned __int16 *)(v9 + (unsigned __int16)v19 + 2));
      *(_WORD *)(a2 + 12) = v7 + 6;
      if (v6 - (unint64_t)(unsigned __int16)(v7 + 6) < 0xC)
      {
LABEL_58:
        *(_BYTE *)(a2 + 15) = 1;
        goto LABEL_59;
      }
      v26 = 0;
      v27 = v9 + (unsigned __int16)(v7 + 6);
      do
      {
        *((_BYTE *)&v57 + v26 + 4) = *(_BYTE *)(v27 + v26);
        ++v26;
      }
      while (v26 != 12);
      *(_WORD *)(a2 + 12) = v7 + 18;
      if (!sub_10017C880(0, &v57))
        goto LABEL_70;
LABEL_44:
      if (v20 != 16)
      {
        LOWORD(v25) = 0;
        goto LABEL_71;
      }
LABEL_59:
      if (*(_BYTE *)(a2 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
      if (*(_BYTE *)(a2 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 934, "OI_STATUS RecvSetupReq(BNEP_CONNECTION *, OI_BYTE_STREAM *, uint8_t *)");
        v31 = *(unsigned __int8 *)(a2 + 14);
        *(_BYTE *)(a2 + 15) = 1;
        if (v31 != 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
        goto LABEL_103;
      }
      v32 = *(unsigned __int16 *)(a2 + 10);
      v33 = *(unsigned __int16 *)(a2 + 12);
      if ((int)v32 - (int)v33 <= 3)
      {
        *(_BYTE *)(a2 + 15) = 1;
LABEL_103:
        v4 = "OI_STATUS RecvSetupReq(BNEP_CONNECTION *, OI_BYTE_STREAM *, uint8_t *)";
        v5 = 935;
        goto LABEL_4;
      }
      v34 = *(_QWORD *)a2;
      v35 = *(unsigned __int16 *)(*(_QWORD *)a2 + v33 + 2);
      *(_WORD *)(a2 + 12) = v33 + 4;
      if (v32 - (unint64_t)(unsigned __int16)(v33 + 4) < 0xC)
        goto LABEL_98;
      v36 = 0;
      LOWORD(v25) = __rev16(v35);
      v37 = v34 + (unsigned __int16)(v33 + 4);
      do
      {
        *((_BYTE *)&v57 + v36 + 4) = *(_BYTE *)(v37 + v36);
        ++v36;
      }
      while (v36 != 12);
      *(_WORD *)(a2 + 12) = v33 + 16;
      if (!sub_10017C880(0, &v57))
      {
LABEL_69:
        sub_100152054((_DWORD *)v8, 2u, 2);
        return 2012;
      }
LABEL_71:
      if (*(_BYTE *)(a2 + 15))
        return 411;
LABEL_72:
      if (!(_WORD)v21 || (v38 = sub_100150B3C((unsigned __int16)v21)) == 0)
      {
        a1 = v8;
        v29 = 2;
LABEL_53:
        v30 = 1;
        goto LABEL_54;
      }
      v39 = v38;
      v40 = *(_DWORD *)v8;
      if (*(_DWORD *)v8 == 3)
        goto LABEL_80;
      if (v40 == 7)
      {
        if (*(unsigned __int16 *)(v8 + 40) == (unsigned __int16)v21
          && *(unsigned __int16 *)(v8 + 42) == (unsigned __int16)v25)
        {
          a1 = v8;
          v29 = 2;
          v30 = 0;
        }
        else
        {
          a1 = v8;
          v29 = 2;
          v30 = 4;
        }
LABEL_54:
        sub_100152054((_DWORD *)a1, v29, v30);
        return 0;
      }
      if (v40 != 4)
      {
        result = sub_10005549C();
        if (!(_DWORD)result)
          return result;
        sub_100054530("Received setup request in invalid state\n");
        v51 = sub_1000544A0(7u);
        result = os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
        if (!(_DWORD)result)
          return result;
        sub_1006CE7A4();
        return 0;
      }
      if (sub_10005549C())
      {
        sub_100054530("Previous setup request not accepted in time, dropping\n");
        v41 = sub_1000544A0(7u);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
LABEL_80:
      v42 = *(void **)(v8 + 16);
      if (v42)
      {
        sub_100053298(v42);
        *(_QWORD *)(v8 + 16) = 0;
      }
      if (!*a3)
      {
LABEL_114:
        *(_DWORD *)v8 = 4;
        *(_WORD *)(v8 + 40) = v21;
        *(_WORD *)(v8 + 42) = v25;
        sub_100049F6C(*(unsigned int *)(v8 + 28));
        sub_100150BC4(*(unsigned __int16 *)(v8 + 32), &v56, &v55);
        (*((void (**)(_QWORD, uint64_t, _QWORD, _QWORD))v39 + 1))(v55, v56 + 34, (unsigned __int16)v21, (unsigned __int16)v25);
        return 0;
      }
      v53 = v25;
      v43 = 0;
      *(_WORD *)(v8 + 24) = 0;
      v44 = *(_WORD *)(a2 + 12);
      v45 = -1;
      v46 = 128;
      v54 = v44;
      while (v46)
      {
        if (*(_BYTE *)(a2 + 14) != 1)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
        if (*(_BYTE *)(a2 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1564, "OI_STATUS SizeOfExtHeaders(OI_BYTE_STREAM *, uint16_t *)");
          v47 = *(unsigned __int8 *)(a2 + 14);
          *(_BYTE *)(a2 + 15) = 1;
          if (v47 != 1)
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
          goto LABEL_93;
        }
        v48 = *(unsigned __int16 *)(a2 + 10);
        if (v48 <= v44)
        {
          *(_BYTE *)(a2 + 15) = 1;
LABEL_93:
          v46 = v45 & 0x80;
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1567, "OI_STATUS SizeOfExtHeaders(OI_BYTE_STREAM *, uint16_t *)");
LABEL_94:
          *(_BYTE *)(a2 + 15) = 1;
          *(_WORD *)(v8 + 24) += v43 + 2;
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1570, "OI_STATUS SizeOfExtHeaders(OI_BYTE_STREAM *, uint16_t *)");
          v50 = 0;
          goto LABEL_95;
        }
        v49 = *(_QWORD *)a2;
        *(_WORD *)(a2 + 12) = v44 + 1;
        v45 = *(_BYTE *)(v49 + v44);
        v46 = v45 & 0x80;
        if (v48 <= (unsigned __int16)(v44 + 1))
          goto LABEL_94;
        *(_WORD *)(a2 + 12) = v44 + 2;
        v43 = *(unsigned __int8 *)(v49 + v44 + 1);
        *(_WORD *)(v8 + 24) += v43 + 2;
        v50 = *(unsigned __int16 *)(a2 + 10) - *(unsigned __int16 *)(a2 + 12);
LABEL_95:
        if (v50 < v43)
          goto LABEL_98;
        v44 = *(_WORD *)(a2 + 12) + v43;
        *(_WORD *)(a2 + 12) = v44;
        result = 411;
        if (*(_BYTE *)(a2 + 15))
          return result;
      }
      if (v54 > *(unsigned __int16 *)(a2 + 10))
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
      *(_WORD *)(a2 + 12) = v54;
      v52 = sub_100052DC0(*(unsigned __int16 *)(v8 + 24));
      *(_QWORD *)(v8 + 16) = v52;
      if (v52)
      {
        memmove(v52, (const void *)(*(_QWORD *)a2 + *(unsigned __int16 *)(a2 + 12)), *(unsigned __int16 *)(v8 + 24));
        *a3 = 0;
        LOWORD(v25) = v53;
        goto LABEL_114;
      }
      return 106;
    case 2:
      if ((*(_DWORD *)a1 & 0xFFFFFFFE) != 6)
        return 0;
      v13 = 2;
      return sub_100153F9C(a1, a2, v13, a3);
    case 3:
      if (*(_DWORD *)a1 != 7)
        return 0;
      if (*(_QWORD *)(a1 + 136))
        return sub_1001539F0(a1, a2);
      v29 = 4;
      goto LABEL_53;
    case 4:
    case 6:
      if (*(_DWORD *)a1 != 7)
        return 0;
      v13 = *(unsigned __int8 *)(v9 + v7);
      return sub_100153F9C(a1, a2, v13, a3);
    case 5:
      if (*(_DWORD *)a1 != 7)
        return 0;
      if (*(_QWORD *)(a1 + 144))
        return sub_100153C84(a1, a2);
      v29 = 6;
      goto LABEL_53;
    default:
      if (!a1)
        sub_100253460();
      result = (uint64_t)sub_100052DC0(3uLL);
      if (!result)
        return result;
      v15 = (void *)result;
      *(_WORD *)result = 1;
      *(_BYTE *)(result + 2) = v11;
      result = sub_100151EE0((_DWORD *)v8, (char *)result, 3uLL, 8, 0);
      if (!(_DWORD)result)
        return result;
      sub_100053298(v15);
      return 0;
  }
}

uint64_t sub_10015331C(uint64_t a1, uint64_t a2, uint64_t *a3, _WORD *a4)
{
  unsigned __int16 v8;
  int v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t result;
  unsigned int v19;
  BOOL v20;
  signed int v21;
  char *v22;
  NSObject *v23;
  void *v24;
  int v25;
  uint64_t v26;
  char v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  int v31;

  v27 = 0;
  *a3 = 0;
  *a4 = 0;
  v8 = *(_WORD *)(a2 + 12);
  v9 = 255;
  v10 = "Ignoring invalid setup connection message in extension header\n";
  while (1)
  {
    if (*(_BYTE *)(a2 + 14) != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
    if (*(_BYTE *)(a2 + 15))
      break;
    if (*(unsigned __int16 *)(a2 + 10) <= v8)
    {
      *(_BYTE *)(a2 + 15) = 1;
      goto LABEL_32;
    }
    v11 = *(_QWORD *)a2;
    *(_WORD *)(a2 + 12) = v8 + 1;
    v12 = *(unsigned __int16 *)(a2 + 10);
    if (v12 <= (unsigned __int16)(v8 + 1))
      goto LABEL_33;
    v13 = *(_BYTE *)(v11 + v8);
    v14 = *(_QWORD *)a2;
    v15 = v8 + 2;
    *(_WORD *)(a2 + 12) = v15;
    v16 = *(unsigned __int8 *)(v14 + v8 + 1);
    v17 = *a3;
    if ((v13 & 0x7F) != 0)
    {
      if (!v17)
      {
        if (v12 < v8)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
        *(_WORD *)(a2 + 12) = v8;
        *a3 = v14 + v8;
      }
    }
    else if (!v17)
    {
      if (v12 <= (unsigned __int16)v15)
      {
        *(_BYTE *)(a2 + 15) = 1;
      }
      else
      {
        *(_WORD *)(a2 + 12) = v8 + 3;
        v9 = *(unsigned __int8 *)(v14 + v15);
      }
      if ((v9 - 1) > 1)
      {
        if (v12 < (unsigned __int16)v15)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
        *(_WORD *)(a2 + 12) = v15;
        result = sub_100152950(a1, a2, &v27);
      }
      else
      {
        result = sub_10005549C();
        if ((_DWORD)result)
        {
          v26 = a1;
          v22 = v10;
          sub_100054530(v10);
          v23 = sub_1000544A0(7u);
          result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
          if ((_DWORD)result)
          {
            v24 = sub_100054494();
            *(_DWORD *)buf = 136446466;
            v29 = v24;
            v30 = 1024;
            v31 = 0xFFFF;
            _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
            result = 0;
          }
          v10 = v22;
          a1 = v26;
        }
      }
      goto LABEL_12;
    }
    result = 0;
    *a4 += v16 + 2;
LABEL_12:
    v19 = *(unsigned __int16 *)(a2 + 10);
    v20 = v19 >= v8;
    v21 = v19 - v8;
    if (!v20)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
    *(_WORD *)(a2 + 12) = v8;
    if (*(_BYTE *)(a2 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1547, "OI_STATUS BNEP_ProcessExtHeaders(BNEP_CONNECTION *, OI_BYTE_STREAM *, uint8_t **, uint16_t *)");
LABEL_37:
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
    }
    if (v21 < v16 + 2)
      goto LABEL_37;
    v8 += v16 + 2;
    *(_WORD *)(a2 + 12) = v8;
    if ((_DWORD)result || (v13 & 0x80000000) == 0)
      return result;
  }
  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1505, "OI_STATUS BNEP_ProcessExtHeaders(BNEP_CONNECTION *, OI_BYTE_STREAM *, uint8_t **, uint16_t *)");
  v25 = *(unsigned __int8 *)(a2 + 14);
  *(_BYTE *)(a2 + 15) = 1;
  if (v25 != 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
LABEL_32:
  sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1508, "OI_STATUS BNEP_ProcessExtHeaders(BNEP_CONNECTION *, OI_BYTE_STREAM *, uint8_t **, uint16_t *)");
LABEL_33:
  *(_BYTE *)(a2 + 15) = 1;
  return 411;
}

void sub_100153674(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  void (*v11)(_QWORD, uint64_t);
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;

  v21 = 0;
  v20 = 0;
  if (HIDWORD(xmmword_100999158))
  {
    if ((_DWORD)a4)
    {
      if (sub_10005549C())
      {
        sub_100054530("Write failed - CID %d!\n", a1);
        v7 = sub_1000544A0(7u);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
    if (sub_100150BC4(a1, &v21, &v20))
    {
      if (sub_10005549C())
      {
        sub_100054530("Get connection failed for cid %d\n", a1);
        v8 = sub_1000544A0(7u);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
    else
    {
      v10 = (_QWORD *)(v21 + 72);
      while (1)
      {
        v10 = (_QWORD *)*v10;
        if (v10 == (_QWORD *)(v21 + 72))
          break;
        if (*(v10 - 3) == a2)
        {
          if (!*((_WORD *)v10 - 3))
          {
            v11 = *((_BYTE *)v10 - 8) ? 0 : *(void (**)(_QWORD, uint64_t))(v21 + 104);
            sub_100253C9C(v10);
            sub_100254090((void *)*(v10 - 3));
            sub_100053298(v10 - 3);
            if (v11)
              v11(v20, a4);
          }
          goto LABEL_25;
        }
      }
      if (sub_10005549C())
      {
        sub_100054530("Write confirmed for packet not in resend queue\n");
        v12 = sub_1000544A0(7u);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
LABEL_25:
      v13 = v21;
      if (*(_QWORD *)(v21 + 56) != v21 + 56)
      {
        v14 = sub_100253D1C((_QWORD **)(v21 + 56));
        v15 = (void **)(v14 - 24);
        v16 = sub_100151DD4(v14 - 24);
        if ((_DWORD)v16)
        {
          v17 = v16;
          if (!*(_BYTE *)(v14 - 8))
          {
            v18 = *(void (**)(uint64_t, uint64_t))(v13 + 104);
            v19 = sub_100150B78(v13);
            v18(v19, v17);
          }
          sub_100254090(*v15);
          sub_100053298(v15);
          sub_100150864(v13, v17);
        }
      }
    }
  }
  else if (sub_10005549C())
  {
    sub_100054530("L2CAP Write complete, but BNEP terminated\n");
    v9 = sub_1000544A0(7u);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
}

void sub_1001538BC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  char v9;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 8);
  v4 = sub_100150B78(v3);
  sub_100253C9C((_QWORD *)(v2 + 24));
  if (*(_BYTE *)(v2 + 17) == 1)
  {
    sub_100254090(*(void **)v2);
    sub_100053298((void *)v2);
    sub_100150864(v3, 0x7D5u);
  }
  else
  {
    v5 = sub_100151D70(v3, v2);
    if ((_DWORD)v5)
    {
      v6 = v5;
      if (sub_10005549C())
      {
        sub_100054530("Resend failed %!\n", v6);
        v7 = sub_1000544A0(7u);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
      v8 = *(unsigned __int8 *)(v2 + 16);
      sub_100254090(*(void **)v2);
      sub_100053298((void *)v2);
      if (v8)
        sub_10015237C(v3, v8, v6, &v9);
      else
        (*(void (**)(uint64_t, uint64_t))(v3 + 104))(v4, v6);
    }
    else
    {
      ++*(_BYTE *)(v2 + 17);
    }
  }
}

uint64_t sub_1001539F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  _WORD *v11;
  void *v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int16 v20;
  uint64_t v21;

  v21 = a1;
  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_100253460();
    if (a2)
      goto LABEL_3;
  }
  sub_100253460();
LABEL_3:
  if (*(_BYTE *)(a2 + 14) != 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
  v20 = 0;
  if (*(_BYTE *)(a2 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1029, "OI_STATUS RecvFilterNetReq(BNEP_CONNECTION *, OI_BYTE_STREAM *)");
LABEL_11:
    v9 = 0;
    *(_BYTE *)(a2 + 15) = 1;
    goto LABEL_12;
  }
  v4 = *(unsigned __int16 *)(a2 + 12);
  if (*(unsigned __int16 *)(a2 + 10) - (int)v4 <= 1)
    goto LABEL_11;
  v5 = (unsigned __int8 *)(*(_QWORD *)a2 + v4);
  v6 = v5[1];
  v7 = *v5;
  *(_WORD *)(a2 + 12) = v4 + 2;
  if ((v6 & 3) != 0)
    return 101;
  v9 = v6 | (v7 << 8);
LABEL_12:
  v10 = v9 & 0xFFFC;
  v11 = sub_100052DC0((unsigned __int16)v9 & 0xFFFC);
  if (!v11)
    return 106;
  v12 = v11;
  v13 = v9 >> 2;
  if (v10)
  {
    v14 = v11 + 1;
    v15 = v13;
    while (1)
    {
      if (*(_BYTE *)(a2 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
      if (*(_BYTE *)(a2 + 15))
        break;
      v17 = *(unsigned __int16 *)(a2 + 12);
      if (*(unsigned __int16 *)(a2 + 10) - (int)v17 <= 1)
      {
        *(_BYTE *)(a2 + 15) = 1;
LABEL_23:
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1041, "OI_STATUS RecvFilterNetReq(BNEP_CONNECTION *, OI_BYTE_STREAM *)");
LABEL_24:
        *(_BYTE *)(a2 + 15) = 1;
        v18 = (unsigned __int16)*v14;
        goto LABEL_25;
      }
      *(v14 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)a2 + v17)) >> 16;
      *(_WORD *)(a2 + 12) = v17 + 2;
      if (*(unsigned __int16 *)(a2 + 10) - (unsigned __int16)(v17 + 2) < 2)
        goto LABEL_24;
      v18 = __rev16(*(unsigned __int16 *)(*(_QWORD *)a2 + (unsigned __int16)(v17 + 2)));
      *v14 = v18;
      *(_WORD *)(a2 + 12) = v17 + 4;
LABEL_25:
      if ((unsigned __int16)*(v14 - 1) > v18)
        sub_100152054((_DWORD *)a1, 4u, 2);
      v14 += 2;
      if (!--v15)
        goto LABEL_28;
    }
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1040, "OI_STATUS RecvFilterNetReq(BNEP_CONNECTION *, OI_BYTE_STREAM *)");
    v16 = *(unsigned __int8 *)(a2 + 14);
    *(_BYTE *)(a2 + 15) = 1;
    if (v16 != 1)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
    goto LABEL_23;
  }
LABEL_28:
  if (*(_BYTE *)(a2 + 15))
  {
    v8 = 411;
  }
  else
  {
    sub_100150BC4(*(unsigned __int16 *)(a1 + 32), &v21, &v20);
    (*(void (**)(_QWORD, void *, uint64_t))(v21 + 136))(v20, v12, v13);
    v8 = 0;
  }
  sub_100053298(v12);
  return v8;
}

uint64_t sub_100153C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  int *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned __int16 v24;
  uint64_t v25;

  v25 = a1;
  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_100253460();
    if (a2)
      goto LABEL_3;
  }
  sub_100253460();
LABEL_3:
  if (*(_BYTE *)(a2 + 14) != 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
  v24 = 0;
  if (*(_BYTE *)(a2 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1078, "OI_STATUS RecvFilterMultiAddrReq(BNEP_CONNECTION *, OI_BYTE_STREAM *)");
LABEL_11:
    v5 = 0;
    *(_BYTE *)(a2 + 15) = 1;
    goto LABEL_12;
  }
  v4 = *(unsigned __int16 *)(a2 + 12);
  if (*(unsigned __int16 *)(a2 + 10) - (int)v4 <= 1)
    goto LABEL_11;
  v5 = __rev16(*(unsigned __int16 *)(*(_QWORD *)a2 + v4));
  *(_WORD *)(a2 + 12) = v4 + 2;
  HIDWORD(v6) = -1431655765 * v5;
  LODWORD(v6) = -1431655765 * v5;
  if ((v6 >> 2) > 0x15555555)
    return 101;
LABEL_12:
  v8 = (43691 * v5) >> 19;
  v9 = (char *)sub_100052DC0(12 * ((43691 * v5) >> 19));
  if (!v9)
    return 106;
  v10 = v9;
  if (v5 >= 0xC)
  {
    if (v8 <= 1)
      v11 = 1;
    else
      v11 = v8;
    v12 = v9;
    do
    {
      if (*(_BYTE *)(a2 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
      if (*(_BYTE *)(a2 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1089, "OI_STATUS RecvFilterMultiAddrReq(BNEP_CONNECTION *, OI_BYTE_STREAM *)");
      }
      else
      {
        v13 = *(unsigned __int16 *)(a2 + 12);
        if (*(unsigned __int16 *)(a2 + 10) - (int)v13 >= 6)
        {
          v14 = (int *)(*(_QWORD *)a2 + v13);
          v15 = *v14;
          *((_WORD *)v12 + 2) = *((_WORD *)v14 + 2);
          *(_DWORD *)v12 = v15;
          *(_WORD *)(a2 + 12) += 6;
          goto LABEL_24;
        }
      }
      *(_BYTE *)(a2 + 15) = 1;
LABEL_24:
      if (*(_BYTE *)(a2 + 14) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
      if (*(_BYTE *)(a2 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1090, "OI_STATUS RecvFilterMultiAddrReq(BNEP_CONNECTION *, OI_BYTE_STREAM *)");
      }
      else
      {
        v16 = *(unsigned __int16 *)(a2 + 12);
        if (*(unsigned __int16 *)(a2 + 10) - (int)v16 >= 6)
        {
          v17 = (int *)(*(_QWORD *)a2 + v16);
          v18 = *v17;
          *((_WORD *)v12 + 5) = *((_WORD *)v17 + 2);
          *(_DWORD *)(v12 + 6) = v18;
          *(_WORD *)(a2 + 12) += 6;
          goto LABEL_30;
        }
      }
      *(_BYTE *)(a2 + 15) = 1;
LABEL_30:
      v19 = bswap32(*(_DWORD *)v12);
      v20 = bswap32(*(_DWORD *)(v12 + 6));
      if (v19 != v20)
        goto LABEL_34;
      v19 = bswap32(*((unsigned __int16 *)v12 + 2)) >> 16;
      v21 = bswap32(*((unsigned __int16 *)v12 + 5));
      if (v19 != HIWORD(v21))
      {
        v20 = HIWORD(v21);
LABEL_34:
        if (v19 < v20)
          v22 = -1;
        else
          v22 = 1;
        goto LABEL_37;
      }
      v22 = 0;
LABEL_37:
      if (v22 >= 1)
        sub_100152054((_DWORD *)a1, 6u, 65528);
      v12 += 12;
      --v11;
    }
    while (v11);
  }
  if (*(_BYTE *)(a2 + 15))
  {
    v7 = 411;
  }
  else
  {
    sub_100150BC4(*(unsigned __int16 *)(a1 + 32), &v25, &v24);
    (*(void (**)(_QWORD, void *, uint64_t))(v25 + 144))(v24, v10, v8);
    v7 = 0;
  }
  sub_100053298(v10);
  return v7;
}

uint64_t sub_100153F9C(uint64_t a1, uint64_t a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (!a2)
  {
    sub_100253460();
    if (a1)
      goto LABEL_3;
LABEL_10:
    sub_100253460();
    goto LABEL_3;
  }
  if (!a1)
    goto LABEL_10;
LABEL_3:
  if (a3 > 6 || ((1 << a3) & 0x54) == 0)
    sub_100253460();
  if (*(_BYTE *)(a2 + 14) != 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c");
  if (*(_BYTE *)(a2 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/bnep/bnep_msg.c", 1175, "OI_STATUS RecvResponse(BNEP_CONNECTION *, OI_BYTE_STREAM *, uint8_t, uint8_t *)");
LABEL_19:
    *(_BYTE *)(a2 + 15) = 1;
    return 411;
  }
  v8 = *(unsigned __int16 *)(a2 + 12);
  if (*(unsigned __int16 *)(a2 + 10) - (int)v8 <= 1)
    goto LABEL_19;
  v9 = __rev16(*(unsigned __int16 *)(*(_QWORD *)a2 + v8));
  *(_WORD *)(a2 + 12) = v8 + 2;
  switch(a3)
  {
    case 6u:
      if (v9)
        v10 = v9 + 2030;
      else
        v10 = 0;
      v11 = a1;
      v12 = 4;
      goto LABEL_28;
    case 4u:
      if (v9)
        v10 = v9 + 2020;
      else
        v10 = 0;
      v11 = a1;
      v12 = 2;
      goto LABEL_28;
    case 2u:
      if (v9)
        v10 = v9 + 2010;
      else
        v10 = 0;
      v11 = a1;
      v12 = 1;
LABEL_28:
      sub_10015237C(v11, v12, v10, a4);
      break;
  }
  return 0;
}

uint64_t sub_1001540EC(const char *a1)
{
  NSObject *v3;
  int *v4;
  char *v5;
  NSObject *v6;
  int *v7;
  char *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  char v12[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  if (a1)
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    *(_OWORD *)v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)v12 = 0u;
    v13 = 0u;
    __strlcpy_chk(v28, a1, 256, 256);
    __strlcpy_chk(v12, a1, 256, 256);
    __strlcat_chk(v12, "-out", 256, 256);
    __strlcat_chk(v28, "-in", 256, 256);
    dword_100982AB0 = open(v28, 131073);
    if (dword_100982AB0 < 0)
    {
      if (sub_10005549C())
      {
        v4 = __error();
        v5 = strerror(*v4);
        sub_100054530("open(%s) failed (error = %s)", v28, v5);
        v6 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          sub_1006D2638();
      }
    }
    else
    {
      dword_100982AB4 = open(v12, 131076);
      if ((dword_100982AB4 & 0x80000000) == 0)
      {
        dword_100982AB8 = 0;
        dword_100982ABC = 0;
        sub_10011EC54(&stru_100982AC0);
        if (sub_10011EAC8((pthread_t *)&qword_100982AF0, (void *(__cdecl *)(void *))sub_1001544E4, 0))
        {
          sub_10011EB64((_opaque_pthread_t *)qword_100982AF0, 63);
          sub_10016F6A8();
          return 0;
        }
        else
        {
          v11 = sub_100112D60(104);
          return sub_1001543CC(v11);
        }
      }
      if (sub_10005549C())
      {
        v7 = __error();
        v8 = strerror(*v7);
        sub_100054530("open(%s) failed (error = %s)", v12, v8);
        v9 = sub_1000544A0(0x3Au);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          sub_1006D2638();
      }
      close(dword_100982AB0);
    }
    if (sub_10005549C())
    {
      sub_100054530("failed to open %s", a1);
      v10 = sub_1000544A0(0x3Au);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 1201;
  }
  else
  {
    if (sub_10005549C())
    {
      sub_100054530("Need to know what VirtualCTRL to open, options cannot be NULL");
      v3 = sub_1000544A0(0x3Au);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 114;
  }
}

uint64_t sub_1001543CC()
{
  if (qword_100982AB0)
  {
    dword_100982AB8 = 1;
    close(SHIDWORD(qword_100982AB0));
    close(qword_100982AB0);
    while (!dword_100982ABC)
      sub_10010B3A4(&stru_100982AC0);
    sub_10011EC78(&stru_100982AC0);
    qword_100982AB0 = 0;
  }
  return 0;
}

uint64_t sub_100154458(char *__buf, int a2)
{
  unsigned __int16 v2;
  unsigned int v4;
  int *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a2)
    return 625;
  v2 = a2;
  while (1)
  {
    v4 = write(qword_100982AB0, __buf, v2);
    if ((v4 & 0x80000000) != 0)
      break;
    __buf += v4;
    v2 -= v4;
    if (!v2)
      return 625;
  }
  v6 = __error();
  v7 = strerror(*v6);
  sub_100253320((uint64_t)"VirtualCTRL write failed: %s", v8, v9, v10, v11, v12, v13, v14, (uint64_t)v7);
  return 1205;
}

uint64_t sub_1001544E4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  fd_set v14;
  fd_set v15;

  sub_10011EC38("RxLoopVirtual");
  memset(&v15, 0, sizeof(v15));
  v0 = dword_100982AB4;
  if (__darwin_check_fd_set_overflow(dword_100982AB4, &v15, 0))
    *(__int32_t *)((char *)v15.fds_bits + (((unint64_t)v0 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v0;
  v1 = 4096;
  while (1)
  {
    v14 = v15;
    v2 = select(dword_100982AB4 + 1, &v14, 0, 0, 0);
    if (!v2)
      break;
    if (v2 >= 1)
    {
      v3 = v1 >= 4096 ? 4096 : v1;
      if ((int)read(dword_100982AB4, &unk_100982AF8, v3) >= 1)
      {
        sub_1000477B8();
        v1 = sub_10016F6B8();
        sub_1000478A0();
        if (!dword_100982AB8)
          continue;
      }
    }
    goto LABEL_13;
  }
  sub_100253460();
LABEL_13:
  if (dword_100982AB8)
  {
    sub_1000477B8();
    dword_100982ABC = 1;
    j__pthread_cond_signal(&stru_100982AC0);
    sub_1000478A0();
  }
  else
  {
    v4 = __error();
    v5 = strerror(*v4);
    sub_100253320((uint64_t)"VirtualCTRL read failed: %s\n", v6, v7, v8, v9, v10, v11, v12, (uint64_t)v5);
  }
  return 0;
}

uint64_t sub_100154684(__int16 *a1, int *a2)
{
  uint64_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  void *v13;
  const char *v14;
  unsigned int v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  char *v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  char *v27;
  _WORD *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v35;
  _DWORD *v36;
  int v37;
  uint64_t *v38;
  NSObject *v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int128 v43;
  __int128 v44;

  if (!a1)
  {
    sub_100253460();
    return 101;
  }
  if (*a1 == -1)
  {
    sub_100253460();
    if (*a1 == -1)
      return 101;
  }
  if ((unsigned __int16)a1[4] - 1 >= 2)
  {
    sub_100253460();
    if ((unsigned __int16)a1[4] - 1 > 1)
      return 101;
  }
  v43 = 0u;
  v44 = 0u;
  v42 = 0;
  v4 = (uint64_t *)qword_100983AF8;
  v5 = *((_QWORD *)a1 + 3) != 0;
  if (*((_QWORD *)a1 + 4))
    ++v5;
  if (*((_QWORD *)a1 + 5))
    v6 = v5 + 1;
  else
    v6 = v5;
  v7 = (v6 + 10);
  v8 = sub_100052DC0(176 * v7);
  if (!v8)
  {
    if (sub_10005549C())
    {
      sub_100054530("Device Identification Record: out of memory");
      v17 = sub_1000544A0(0x3Du);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    return 106;
  }
  v9 = v8;
  v10 = (char *)sub_100052DC0(24 * v7);
  if (!v10)
  {
    if (sub_10005549C())
    {
      sub_100054530("Device Identification Record: out of memory");
      v18 = sub_1000544A0(0x3Du);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_100053298(v9);
    return 106;
  }
  v11 = v10;
  v12 = sub_100052DC0(8uLL);
  v13 = v12;
  if (!v12)
  {
    if (sub_10005549C())
    {
      sub_100054530("Device Supported Extended Features: out of memory");
      v19 = sub_1000544A0(0x3Du);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    goto LABEL_47;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *v9 = 1;
  *((_WORD *)v9 + 1) = 2;
  *((_DWORD *)v9 + 2) = (unsigned __int16)*a1;
  v9[16] = 1;
  *((_WORD *)v9 + 9) = 2;
  *((_DWORD *)v9 + 6) = (unsigned __int16)a1[1];
  v9[32] = 1;
  *((_WORD *)v9 + 17) = 2;
  *((_DWORD *)v9 + 10) = (unsigned __int16)a1[2];
  v9[48] = 5;
  *((_WORD *)v9 + 25) = 1;
  v9[56] = *((_BYTE *)a1 + 6);
  v9[64] = 1;
  *((_WORD *)v9 + 33) = 2;
  *((_DWORD *)v9 + 18) = (unsigned __int16)a1[4];
  v9[128] = 1;
  *((_WORD *)v9 + 65) = 4;
  *((_DWORD *)v9 + 34) = *((_DWORD *)a1 + 3);
  v9[144] = 1;
  *((_WORD *)v9 + 73) = 2;
  *((_DWORD *)v9 + 38) = (unsigned __int16)a1[5];
  v9[160] = 1;
  *((_WORD *)v9 + 81) = 8;
  *((_QWORD *)v9 + 21) = v12;
  *((_QWORD *)v11 + 2) = &unk_100739860;
  *(_OWORD *)v11 = xmmword_10091C408;
  *((_QWORD *)v11 + 5) = 258;
  *(_OWORD *)(v11 + 24) = unk_10091C420;
  *((_WORD *)v11 + 24) = 513;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)v9;
  *((_WORD *)v11 + 36) = 514;
  *((_OWORD *)v11 + 5) = *((_OWORD *)v9 + 1);
  *((_WORD *)v11 + 48) = 515;
  *(_OWORD *)(v11 + 104) = *((_OWORD *)v9 + 2);
  *((_WORD *)v11 + 60) = 516;
  *((_OWORD *)v11 + 8) = *((_OWORD *)v9 + 3);
  *((_WORD *)v11 + 72) = 517;
  *(_OWORD *)(v11 + 152) = *((_OWORD *)v9 + 4);
  *((_WORD *)v11 + 84) = -24576;
  *((_OWORD *)v11 + 11) = *((_OWORD *)v9 + 8);
  *((_WORD *)v11 + 96) = -20481;
  *(_OWORD *)(v11 + 200) = *((_OWORD *)v9 + 9);
  *((_WORD *)v11 + 108) = -24575;
  *((_OWORD *)v11 + 14) = *((_OWORD *)v9 + 10);
  v14 = (const char *)*((_QWORD *)a1 + 3);
  if (v14)
  {
    v9[80] = 8;
    *((_WORD *)v9 + 41) = strlen(v14);
    *((_QWORD *)v9 + 11) = v14;
    v15 = 11;
    *((_WORD *)v11 + 120) = 11;
    *(_OWORD *)(v11 + 248) = *((_OWORD *)v9 + 5);
  }
  else
  {
    v15 = 10;
  }
  v20 = (const char *)*((_QWORD *)a1 + 4);
  if (v20)
  {
    v9[96] = 4;
    *((_WORD *)v9 + 49) = strlen(v20);
    *((_QWORD *)v9 + 13) = v20;
    v21 = &v11[24 * v15];
    *(_WORD *)v21 = 257;
    *(_OWORD *)(v21 + 8) = *((_OWORD *)v9 + 6);
    ++v15;
  }
  v22 = (const char *)*((_QWORD *)a1 + 5);
  if (v22)
  {
    v9[112] = 8;
    *((_WORD *)v9 + 57) = strlen(v22);
    *((_QWORD *)v9 + 15) = v22;
    v23 = &v11[24 * v15];
    *(_WORD *)v23 = 10;
    *(_OWORD *)(v23 + 8) = *((_OWORD *)v9 + 7);
  }
  *(_QWORD *)&v43 = v11;
  WORD4(v43) = 10;
  *(_QWORD *)&v44 = v11 + 240;
  WORD4(v44) = v6;
  sub_1002465CC((uint64_t)&v43, &v42);
  v40 = 0u;
  v41 = 0u;
  v24 = (v6 + 9);
  v25 = sub_100052DC0(176 * v24);
  if (!v25)
  {
    if (sub_10005549C())
    {
      sub_100054530("Device Identification Record: out of memory");
      v33 = sub_1000544A0(0x3Du);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
LABEL_47:
    v28 = 0;
    v26 = 0;
LABEL_48:
    v16 = 106;
    goto LABEL_49;
  }
  v26 = v25;
  v27 = (char *)sub_100052DC0(24 * v24);
  if (!v27)
  {
    if (sub_10005549C())
    {
      sub_100054530("Device Identification Record: out of memory");
      v35 = sub_1000544A0(0x3Du);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    v28 = 0;
    goto LABEL_48;
  }
  v28 = v27;
  *(_BYTE *)v26 = 1;
  v26[1] = 2;
  *((_DWORD *)v26 + 2) = (unsigned __int16)*a1;
  *((_BYTE *)v26 + 16) = 1;
  v26[9] = 2;
  *((_DWORD *)v26 + 6) = (unsigned __int16)a1[1];
  *((_BYTE *)v26 + 32) = 1;
  v26[17] = 2;
  *((_DWORD *)v26 + 10) = (unsigned __int16)a1[2];
  *((_BYTE *)v26 + 48) = 5;
  v26[25] = 1;
  *((_BYTE *)v26 + 56) = *((_BYTE *)a1 + 6);
  *((_BYTE *)v26 + 64) = 1;
  v26[33] = 2;
  *((_DWORD *)v26 + 18) = (unsigned __int16)a1[4];
  *((_BYTE *)v26 + 128) = 1;
  v26[65] = 4;
  *((_DWORD *)v26 + 34) = *((_DWORD *)a1 + 3);
  *((_BYTE *)v26 + 144) = 1;
  v26[73] = 2;
  *((_DWORD *)v26 + 38) = (unsigned __int16)a1[5];
  *(_OWORD *)v27 = xmmword_10091C408;
  *((_QWORD *)v27 + 2) = &unk_100739860;
  *((_QWORD *)v27 + 5) = 258;
  *(_OWORD *)(v27 + 24) = unk_10091C420;
  *((_WORD *)v27 + 24) = 513;
  *(_OWORD *)(v27 + 56) = *(_OWORD *)v26;
  *((_WORD *)v27 + 36) = 514;
  *((_OWORD *)v27 + 5) = *((_OWORD *)v26 + 1);
  *((_WORD *)v27 + 48) = 515;
  *(_OWORD *)(v27 + 104) = *((_OWORD *)v26 + 2);
  *((_WORD *)v27 + 60) = 516;
  *((_OWORD *)v27 + 8) = *((_OWORD *)v26 + 3);
  *((_WORD *)v27 + 72) = 517;
  *(_OWORD *)(v27 + 152) = *((_OWORD *)v26 + 4);
  *((_WORD *)v27 + 84) = -24576;
  *((_OWORD *)v27 + 11) = *((_OWORD *)v26 + 8);
  *((_WORD *)v27 + 96) = -20481;
  *(_OWORD *)(v27 + 200) = *((_OWORD *)v26 + 9);
  v29 = (const char *)*((_QWORD *)a1 + 3);
  if (v29)
  {
    *((_BYTE *)v26 + 80) = 8;
    v26[41] = strlen(v29);
    *((_QWORD *)v26 + 11) = v29;
    v28[108] = 11;
    *((_OWORD *)v28 + 14) = *((_OWORD *)v26 + 5);
  }
  v30 = (const char *)*((_QWORD *)a1 + 4);
  if (v30)
  {
    *((_BYTE *)v26 + 96) = 4;
    v26[49] = strlen(v30);
    *((_QWORD *)v26 + 13) = v30;
    v28[108] = 257;
    *((_OWORD *)v28 + 14) = *((_OWORD *)v26 + 6);
  }
  v31 = (const char *)*((_QWORD *)a1 + 5);
  if (v31)
  {
    *((_BYTE *)v26 + 112) = 8;
    v26[57] = strlen(v31);
    *((_QWORD *)v26 + 15) = v31;
    v28[108] = 10;
    *((_OWORD *)v28 + 14) = *((_OWORD *)v26 + 7);
  }
  *(_QWORD *)&v40 = v28;
  WORD4(v40) = 9;
  *(_QWORD *)&v41 = v28 + 108;
  WORD4(v41) = v6;
  v32 = sub_1002468CC(v42, (uint64_t)&v40);
  if ((_DWORD)v32)
  {
    v16 = v32;
LABEL_49:
    sub_100053298(v9);
    sub_100053298(v11);
    if (v13)
      sub_100053298(v13);
    if (v28)
      sub_100053298(v28);
    if (v26)
      sub_100053298(v26);
    return v16;
  }
  v36 = sub_100052DC0(0x30uLL);
  if (!v36)
  {
    if (sub_10005549C())
    {
      sub_100054530("Device Identification Record: out of memory");
      v39 = sub_1000544A0(0x3Du);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    goto LABEL_48;
  }
  *(_QWORD *)v36 = 0;
  v37 = v42;
  v36[2] = v42;
  *((_QWORD *)v36 + 2) = v9;
  *((_QWORD *)v36 + 3) = v11;
  *((_QWORD *)v36 + 4) = v26;
  *((_QWORD *)v36 + 5) = v28;
  if (v4)
  {
    do
    {
      v38 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    v38 = &qword_100983AF8;
  }
  *v38 = (uint64_t)v36;
  v16 = 0;
  if (a2)
    *a2 = v37;
  return v16;
}

uint64_t sub_100154DD0(int a1)
{
  uint64_t v2;
  uint64_t *v3;
  void **v4;
  uint64_t *v5;

  v2 = sub_1002467B8(a1);
  if (!(_DWORD)v2)
  {
    v3 = (uint64_t *)qword_100983AF8;
    if (qword_100983AF8)
    {
      if (*(_DWORD *)(qword_100983AF8 + 8) == a1)
      {
        sub_100053298(*(void **)(qword_100983AF8 + 16));
        sub_100053298((void *)v3[3]);
        sub_100053298((void *)v3[4]);
        v4 = (void **)(v3 + 5);
        v5 = v3;
        v3 = &qword_100983AF8;
LABEL_9:
        sub_100053298(*v4);
        *v3 = *v5;
        sub_100053298(v5);
      }
      else
      {
        v5 = (uint64_t *)qword_100983AF8;
        while (1)
        {
          v5 = (uint64_t *)*v5;
          if (!v5)
            break;
          if (*((_DWORD *)v5 + 2) == a1)
          {
            sub_100053298((void *)v5[2]);
            v4 = (void **)(v5 + 3);
            goto LABEL_9;
          }
        }
      }
    }
  }
  return v2;
}

uint64_t sub_100154E84(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, uint64_t a5, char a6)
{
  __int16 v9;
  uint64_t result;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  if (!a5)
    return 101;
  v9 = a3;
  result = sub_10015B210(a1, a2, a3, (uint64_t)sub_100154FA8, 0x3FAu, 0);
  if (!(_DWORD)result)
  {
    sub_10015B1D4(1);
    qword_100983B00 = (uint64_t)sub_100114588(0x5F8uLL);
    if (qword_100983B00)
    {
      if (*(_WORD *)(sub_100252DE8(0x10u) + 4))
        v11 = *(_WORD *)(sub_100252DE8(0x10u) + 4);
      else
        v11 = 100;
      *(_WORD *)(qword_100983B00 + 1506) = v11;
      if (*(_BYTE *)(sub_100252DE8(0x10u) + 6))
        v12 = *(_BYTE *)(sub_100252DE8(0x10u) + 6);
      else
        v12 = 32;
      v13 = 0;
      v14 = qword_100983B00;
      *(_BYTE *)(qword_100983B00 + 1504) = v12;
      *(_QWORD *)(v14 + 1480) = a5;
      *(_BYTE *)(v14 + 1511) = 0;
      *(_OWORD *)(v14 + 1488) = 0u;
      *(_BYTE *)(v14 + 1512) = a6;
      *(_WORD *)(v14 + 1508) = v9;
      *(_WORD *)(v14 + 1513) = 0;
      *(_BYTE *)(v14 + 1515) = 0;
      *(_DWORD *)(v14 + 1520) = a4;
      *(_DWORD *)(v14 + 1516) = 0;
      do
      {
        *(_WORD *)(v14 + v13) = -1;
        v13 += 184;
      }
      while (v13 != 1472);
      return 0;
    }
    else
    {
      sub_10015B7C4();
      return 106;
    }
  }
  return result;
}

void sub_100154FA8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  void (*v9)(_QWORD, _QWORD);
  int v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  const void *v16[2];

  v2 = 0;
  v4 = (unsigned __int16 *)(a1 + 4);
  v3 = *(unsigned __int16 *)(a1 + 4);
  v5 = qword_100983B00;
  v6 = (unsigned __int16 *)qword_100983B00;
  do
  {
    v7 = *v6;
    v6 += 92;
    if (v7 == v3)
      break;
    ++v2;
  }
  while (v2 != 8);
  switch(*(_DWORD *)a1)
  {
    case 1:
      if (*(_DWORD *)(a1 + 16))
        goto LABEL_15;
      v16[0] = 0;
      if (v2 == 8)
      {
        v8 = sub_1001577C8(v3, *(int **)(a1 + 8));
        if (v8 == 8)
        {
          sub_100253460();
          return;
        }
        LOBYTE(v2) = v8;
        v5 = qword_100983B00;
      }
      v16[1] = v4;
      LOWORD(v16[0]) = 2;
      v13 = sub_10004A9EC((uint64_t)sub_100158184, v16, 600, (int *)(v5 + 184 * v2 + 8));
      if ((_DWORD)v13)
      {
        v14 = v13;
        if (sub_10005549C())
        {
          sub_100054530("Register SLC timeout handler failed %!\n", v14);
          v15 = sub_1000544A0(0x10u);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            sub_1006CEEC0();
        }
      }
      break;
    case 2:
      if (*(_DWORD *)(qword_100983B00 + 184 * v2 + 4) == 1814
        || *(_DWORD *)(qword_100983B00 + 184 * v2 + 8))
      {
        *(_DWORD *)a1 = 1;
        *(_QWORD *)(a1 + 8) = v5 + 184 * v2 + 80;
        *(_DWORD *)(a1 + 16) = 1814;
      }
      (*(void (**)(uint64_t))(v5 + 1480))(a1);
      sub_1001579C8(*(unsigned __int16 *)(a1 + 4));
      break;
    case 3:
      if ((*(_WORD *)(qword_100983B00 + 1508) & 0x200) == 0
        || (*(_WORD *)(qword_100983B00 + 184 * v2 + 86) & 0x80) == 0)
      {
        goto LABEL_15;
      }
      if (sub_10005549C())
      {
        sub_100054530("1.6 devices should not send SCO connection but +BCC.");
        v12 = sub_1000544A0(0x10u);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
      sub_10015BF90(*v4, 0);
      break;
    case 5:
      (*(void (**)(uint64_t))(qword_100983B00 + 1480))(a1);
      v9 = *(void (**)(_QWORD, _QWORD))(qword_100983B00 + 1496);
      if (v9)
      {
        *(_QWORD *)(qword_100983B00 + 1496) = 0;
        v9(*(unsigned __int16 *)(a1 + 4), *(unsigned int *)(a1 + 8));
      }
      break;
    case 7:
      v10 = sub_100137DE4(qword_100983B00 + 184 * v2 + 96, *(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 16));
      if (v10)
      {
        v11 = sub_100155758(*v4, v10);
        if ((_DWORD)v11)
          sub_1001581D4(*v4, 2, v11);
      }
      break;
    default:
LABEL_15:
      (*(void (**)(uint64_t))(qword_100983B00 + 1480))(a1);
      break;
  }
}

uint64_t sub_100155260()
{
  uint64_t v0;

  if (sub_10015B1A4() && *(_QWORD *)(qword_100983B00 + 1488))
    *(_QWORD *)(qword_100983B00 + 1488) = 0;
  v0 = sub_10015B7C4();
  if (!(_DWORD)v0 && qword_100983B00)
  {
    sub_100053298((void *)qword_100983B00);
    qword_100983B00 = 0;
  }
  return v0;
}

uint64_t sub_1001552B4(__int16 a1)
{
  uint64_t result;

  if (!qword_100983B00)
    return 408;
  result = 0;
  *(_WORD *)(qword_100983B00 + 1508) = a1;
  return result;
}

uint64_t sub_1001552D8(char a1)
{
  uint64_t result;

  if (!qword_100983B00)
    return 408;
  result = 0;
  *(_BYTE *)(qword_100983B00 + 1510) = a1 | 6;
  return result;
}

uint64_t sub_100155300(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t result;

  if (!sub_10015B1A4())
    return 408;
  v4 = qword_100983B00;
  if (*(_QWORD *)(qword_100983B00 + 1488))
    return 119;
  result = 0;
  *(_QWORD *)(qword_100983B00 + 1488) = a1;
  *(_BYTE *)(v4 + 1511) = a2;
  return result;
}

uint64_t sub_100155354(unsigned int a1, const void *a2, size_t a3)
{
  _BOOL4 v6;
  uint64_t result;
  char *v8;
  char *v9;

  v6 = sub_10015B1A4();
  result = 408;
  if (v6 && qword_100983B00)
  {
    v8 = (char *)sub_100052DC0(a3 + 1);
    if (v8)
    {
      v9 = v8;
      memmove(v8, a2, a3);
      v9[a3] = 0;
      return sub_1001553F4(a1, 25, v9, a3, 1);
    }
    else
    {
      return 106;
    }
  }
  return result;
}

uint64_t sub_1001553F4(unsigned int a1, uint64_t a2, char *a3, size_t a4, int a5)
{
  __int16 v6;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  void (*v15)(int, unsigned __int8 *, uint64_t, uint64_t);
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;

  v6 = a4;
  v10 = 0;
  v11 = -1472;
  while (*(unsigned __int16 *)(qword_100983B00 + v11 + 1472) != a1)
  {
    ++v10;
    v11 += 184;
    if (!v11)
      return 1802;
  }
  if (v10 == 8)
    return 1802;
  if (*(_DWORD *)(qword_100983B00 + v11 + 1488))
  {
    if (*(unsigned __int8 *)(qword_100983B00 + v11 + 1528) >= *(unsigned __int8 *)(qword_100983B00 + 1504))
    {
      if (sub_10005549C())
      {
        sub_100054530("SendResponse failed: pending responses queue is full (%d)!\n", *(unsigned __int8 *)(qword_100983B00 + v11 + 1528));
        v17 = sub_1000544A0(0x10u);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
      v12 = 104;
    }
    else
    {
      v14 = sub_100052DC0(0x28uLL);
      if (v14)
      {
        *(_DWORD *)v14 = a2;
        v14[1] = a3;
        *((_WORD *)v14 + 8) = v6;
        *((_BYTE *)v14 + 18) = a5;
        sub_100253C88(v14 + 3, qword_100983B00 + v11 + 1536);
        v12 = 0;
        ++*(_BYTE *)(qword_100983B00 + v11 + 1528);
        return v12;
      }
      v12 = 106;
    }
  }
  else
  {
    if (a5)
      v15 = sub_1001583BC;
    else
      v15 = sub_1001583C8;
    v12 = sub_10015C3B8(a1, (uint64_t)v15, a3, a4);
    v16 = qword_100983B00 + v11;
    if (!(_DWORD)v12)
    {
      *(_DWORD *)(v16 + 1488) = a2;
      *(_QWORD *)(v16 + 1496) = a3;
      *(_WORD *)(v16 + 1504) = v6;
      *(_BYTE *)(v16 + 1506) = a5;
      return v12;
    }
    *(_DWORD *)(v16 + 1488) = 0;
  }
  if (!sub_10005549C()
    || (sub_100054530("SendResponse failed %!, type %d", v12, a2),
        v18 = sub_1000544A0(0x10u),
        !os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)))
  {
    if (!a5)
      goto LABEL_27;
    goto LABEL_26;
  }
  sub_1006CEEC0();
  if (a5)
LABEL_26:
    sub_100053298(a3);
LABEL_27:
  if ((_DWORD)v12 == 104)
  {
    if (sub_10015BEF4(a1, 104))
    {
      if (sub_10005549C())
      {
        sub_100054530("OI_HandsfreeAG_Disconnect failed");
        v19 = sub_1000544A0(0x10u);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
    }
    sub_1001583D4(v10);
    return 104;
  }
  return v12;
}

uint64_t sub_100155660(int a1)
{
  uint64_t v2;
  uint64_t result;

  if (!sub_10015B1A4())
    return 408;
  v2 = 0;
  while (*(unsigned __int16 *)(qword_100983B00 + v2) != a1)
  {
    v2 += 184;
    if (v2 == 1472)
      return 0;
  }
  result = 0;
  if (dword_100999188)
    return *(unsigned __int16 *)(qword_100983B00 + v2 + 86);
  return result;
}

uint64_t sub_1001556DC(int a1)
{
  uint64_t v2;
  uint64_t result;

  if (!sub_10015B1A4())
    return 408;
  v2 = 0;
  while (*(unsigned __int16 *)(qword_100983B00 + v2) != a1)
  {
    v2 += 184;
    if (v2 == 1472)
      return 0;
  }
  result = 0;
  if (dword_100999188)
    return *(_QWORD *)(qword_100983B00 + v2 + 88);
  return result;
}

uint64_t sub_100155758(unsigned int a1, int a2)
{
  int v2;
  NSObject *v4;

  v2 = a2;
  if ((a2 - 2707) <= 1)
  {
    if (sub_10005549C())
    {
      sub_100054530("Extended error specified without extended error code %d\n", v2);
      v4 = sub_1000544A0(0x10u);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_1006CEEC0();
    }
    v2 = 2701;
  }
  return sub_1001557E4(a1, v2, 0);
}

uint64_t sub_1001557E4(unsigned int a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  char *v20;
  unsigned __int16 v21;
  _QWORD v22[2];

  if (!sub_10015B1A4())
    return 408;
  if ((a2 - 2707) > 1)
  {
    if ((a2 - 2707) < 0xFFFFFFFA)
      v7 = 1;
    else
      v7 = (a2 - 2700);
    if (!a2)
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v22[0] = 0;
    v22[1] = 0;
    v7 = 1;
    while (*(unsigned __int16 *)(qword_100983B00 + v6) != a1)
    {
      v6 += 184;
      if (v6 == 1472)
        goto LABEL_14;
    }
    if (*(_BYTE *)(qword_100983B00 + v6 + 136))
    {
      v8 = sub_10025909C((uint64_t)v22, 0x1BuLL);
      if (!(_DWORD)v8)
      {
        if (a2 == 2707)
          v18 = "\r\n+CME ERROR: %d\r\n";
        else
          v18 = "\r\n+CMS ERROR: %d\r\n";
        v19 = sub_1002596F4((uint64_t)v22, (uint64_t)v18, v12, v13, v14, v15, v16, v17, a3);
        if ((_DWORD)v19)
        {
          v8 = v19;
          sub_1002590E8((uint64_t)v22);
        }
        else
        {
          v20 = (char *)sub_10025971C((uint64_t)v22);
          v21 = strlen(v20);
          return sub_1001553F4(a1, 2, v20, v21, 1);
        }
      }
      return v8;
    }
    v7 = 1;
  }
LABEL_14:
  v10 = off_10091C438[v7];
  v11 = strlen(v10);
  return sub_1001553F4(a1, 2, v10, v11, 0);
}

uint64_t sub_100155944(unsigned int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned __int16 v14;
  _QWORD v15[2];

  if (!sub_10015B1A4())
    return 408;
  if (a2 > 0xF)
    return 101;
  if ((sub_100155660(a1) & 0x10) == 0)
    return 1808;
  v15[0] = 0;
  v15[1] = 0;
  v4 = sub_10025909C((uint64_t)v15, 0xCuLL);
  if (!(_DWORD)v4)
  {
    v12 = sub_1002596F4((uint64_t)v15, (uint64_t)"\r\n+VGM=%d\r\n", v6, v7, v8, v9, v10, v11, a2);
    if ((_DWORD)v12)
    {
      v4 = v12;
      sub_1002590E8((uint64_t)v15);
    }
    else
    {
      v13 = (char *)sub_10025971C((uint64_t)v15);
      v14 = strlen(v13);
      return sub_1001553F4(a1, 7, v13, v14, 1);
    }
  }
  return v4;
}

uint64_t sub_100155A18(unsigned int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned __int16 v14;
  _QWORD v15[2];

  if (!sub_10015B1A4())
    return 408;
  if (a2 > 0xF)
    return 101;
  if ((sub_100155660(a1) & 0x10) == 0)
    return 1808;
  v15[0] = 0;
  v15[1] = 0;
  v4 = sub_10025909C((uint64_t)v15, 0xCuLL);
  if (!(_DWORD)v4)
  {
    v12 = sub_1002596F4((uint64_t)v15, (uint64_t)"\r\n+VGS=%d\r\n", v6, v7, v8, v9, v10, v11, a2);
    if ((_DWORD)v12)
    {
      v4 = v12;
      sub_1002590E8((uint64_t)v15);
    }
    else
    {
      v13 = (char *)sub_10025971C((uint64_t)v15);
      v14 = strlen(v13);
      return sub_1001553F4(a1, 8, v13, v14, 1);
    }
  }
  return v4;
}

uint64_t sub_100155AEC(unsigned int a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  if (!sub_10015B1A4())
    return 408;
  v4 = 0;
  v5 = qword_100983B00;
  *(_BYTE *)(qword_100983B00 + 1513) = a2;
  while (*(unsigned __int16 *)(v5 + v4) != a1)
  {
    v4 += 184;
    if (v4 == 1472)
      return 1802;
  }
  v7 = 0;
  while (*(unsigned __int16 *)(v5 + v7) != a1)
  {
    v7 += 184;
    if (v7 == 1472)
      goto LABEL_13;
  }
  if (*(_BYTE *)(v5 + v7 + 140) == 2)
    return 117;
LABEL_13:
  v8 = 0;
  while (*(unsigned __int16 *)(v5 + v8) != a1)
  {
    v8 += 184;
    if (v8 == 1472)
      return 0;
  }
  if (*(_BYTE *)(v5 + v8 + 140) != 1 || !*(_BYTE *)(v5 + v4 + 176))
    return 0;
  if (a2)
    v9 = "\r\n+CIEV: 1,1\r\n";
  else
    v9 = "\r\n+CIEV: 1,0\r\n";
  LODWORD(result) = sub_1001553F4(a1, 9, v9, 0xEuLL, 0);
  if ((_DWORD)result == 408)
    return 0;
  else
    return result;
}

uint64_t sub_100155C08(unsigned int a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  if (!sub_10015B1A4())
    return 408;
  v4 = 0;
  v5 = qword_100983B00;
  *(_BYTE *)(qword_100983B00 + 1514) = a2;
  while (*(unsigned __int16 *)(v5 + v4) != a1)
  {
    v4 += 184;
    if (v4 == 1472)
      return 1802;
  }
  v7 = 0;
  while (*(unsigned __int16 *)(v5 + v7) != a1)
  {
    v7 += 184;
    if (v7 == 1472)
      goto LABEL_13;
  }
  if (*(_BYTE *)(v5 + v7 + 140) == 2)
    return 117;
LABEL_13:
  v8 = 0;
  while (*(unsigned __int16 *)(v5 + v8) != a1)
  {
    v8 += 184;
    if (v8 == 1472)
      return 0;
  }
  if (*(_BYTE *)(v5 + v8 + 140) != 1)
    return 0;
  v9 = v5 + v4;
  if (*(unsigned __int8 *)(v9 + 160) == a2)
    return 0;
  *(_BYTE *)(v9 + 160) = a2;
  if (a2)
    v10 = "\r\n+CIEV: 2,1\r\n";
  else
    v10 = "\r\n+CIEV: 2,0\r\n";
  LODWORD(result) = sub_1001553F4(a1, 10, v10, 0xEuLL, 0);
  if ((_DWORD)result == 408)
    return 0;
  else
    return result;
}

uint64_t sub_100155D2C(unsigned int a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned __int16 v19;
  unsigned int v20;
  _QWORD v21[2];

  if (!sub_10015B1A4())
    return 408;
  if (a2 > 4)
    return 101;
  v5 = 0;
  v21[0] = 0;
  v21[1] = 0;
  v6 = qword_100983B00;
  *(_BYTE *)(qword_100983B00 + 1515) = a2;
  while (*(unsigned __int16 *)(v6 + v5) != a1)
  {
    v5 += 184;
    if (v5 == 1472)
      return 1802;
  }
  v8 = 0;
  while (*(unsigned __int16 *)(v6 + v8) != a1)
  {
    v8 += 184;
    if (v8 == 1472)
      goto LABEL_16;
  }
  if (*(_BYTE *)(v6 + v8 + 140) == 2)
    return 117;
LABEL_16:
  v9 = 0;
  while (*(unsigned __int16 *)(v6 + v9) != a1)
  {
    v4 = 0;
    v9 += 184;
    if (v9 == 1472)
      return v4;
  }
  if (*(_BYTE *)(v6 + v9 + 140) != 1)
    return 0;
  v10 = v6 + v5;
  if (*(unsigned __int8 *)(v10 + 161) == a2)
    return 0;
  *(_BYTE *)(v10 + 161) = a2;
  v4 = sub_10025909C((uint64_t)v21, 0xFuLL);
  if (!(_DWORD)v4)
  {
    v17 = sub_1002596F4((uint64_t)v21, (uint64_t)"\r\n+CIEV: 3,%c\r\n", v11, v12, v13, v14, v15, v16, a2 + 48);
    if ((_DWORD)v17)
    {
      v4 = v17;
      sub_1002590E8((uint64_t)v21);
    }
    else
    {
      v18 = (char *)sub_10025971C((uint64_t)v21);
      v19 = strlen(v18);
      v20 = sub_1001553F4(a1, 11, v18, v19, 1);
      if (v20 == 408)
        return 0;
      else
        return v20;
    }
  }
  return v4;
}

uint64_t sub_100155EB8(unsigned int a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned __int16 v18;
  unsigned int v19;
  _QWORD v20[2];

  if (!sub_10015B1A4())
    return 408;
  v4 = qword_100983B00;
  if ((*(_WORD *)(qword_100983B00 + 1508) & 1) == 0)
    return 1808;
  if (a2 > 2)
    return 101;
  v6 = 0;
  v20[0] = 0;
  v20[1] = 0;
  *(_BYTE *)(qword_100983B00 + 1516) = a2;
  while (*(unsigned __int16 *)(v4 + v6) != a1)
  {
    v6 += 184;
    if (v6 == 1472)
      return 1802;
  }
  v8 = 0;
  while (*(unsigned __int16 *)(v4 + v8) != a1)
  {
    v8 += 184;
    if (v8 == 1472)
      goto LABEL_18;
  }
  if (*(_BYTE *)(v4 + v8 + 140) == 2)
    return 117;
LABEL_18:
  if ((sub_100155660(a1) & 2) == 0)
    return 1808;
  v9 = 0;
  while (*(unsigned __int16 *)(qword_100983B00 + v9) != a1)
  {
    v5 = 0;
    v9 += 184;
    if (v9 == 1472)
      return v5;
  }
  if (*(_BYTE *)(qword_100983B00 + v9 + 140) != 1 || !(*(unsigned __int8 *)(qword_100983B00 + v6 + 162) | a2))
    return 0;
  *(_BYTE *)(qword_100983B00 + v6 + 162) = a2;
  v5 = sub_10025909C((uint64_t)v20, 0xFuLL);
  if (!(_DWORD)v5)
  {
    v16 = sub_1002596F4((uint64_t)v20, (uint64_t)"\r\n+CIEV: 7,%c\r\n", v10, v11, v12, v13, v14, v15, a2 + 48);
    if ((_DWORD)v16)
    {
      v5 = v16;
      sub_1002590E8((uint64_t)v20);
    }
    else
    {
      v17 = (char *)sub_10025971C((uint64_t)v20);
      v18 = strlen(v17);
      v19 = sub_1001553F4(a1, 15, v17, v18, 1);
      if (v19 == 408)
        return 0;
      else
        return v19;
    }
  }
  return v5;
}

uint64_t sub_100156064(unsigned int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  unsigned __int16 v17;
  unsigned int v18;
  _QWORD v19[2];

  if (!sub_10015B1A4())
    return 408;
  if (a2 > 5)
    return 101;
  v5 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v6 = qword_100983B00;
  *(_BYTE *)(qword_100983B00 + 1517) = a2;
  while (*(unsigned __int16 *)(v6 + v5) != a1)
  {
    v5 += 184;
    if (v5 == 1472)
      return 1802;
  }
  v7 = 0;
  while (*(unsigned __int16 *)(v6 + v7) != a1)
  {
    v7 += 184;
    if (v7 == 1472)
      return 0;
  }
  if (*(_BYTE *)(v6 + v7 + 140) != 1 || !*(_BYTE *)(v6 + v5 + 179))
    return 0;
  v4 = sub_10025909C((uint64_t)v19, 0xFuLL);
  if (!(_DWORD)v4)
  {
    v14 = sub_1002596F4((uint64_t)v19, (uint64_t)"\r\n+CIEV: 4,%d\r\n", v8, v9, v10, v11, v12, v13, a2);
    if ((_DWORD)v14)
    {
      v4 = v14;
      sub_1002590E8((uint64_t)v19);
    }
    else
    {
      v16 = (char *)sub_10025971C((uint64_t)v19);
      v17 = strlen(v16);
      v18 = sub_1001553F4(a1, 12, v16, v17, 1);
      if (v18 == 408)
        return 0;
      else
        return v18;
    }
  }
  return v4;
}

uint64_t sub_1001561A8(unsigned int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned __int16 v18;
  unsigned int v19;
  _QWORD v20[2];

  if (!sub_10015B1A4())
    return 408;
  if (a2 > 5)
    return 101;
  v5 = 0;
  v20[0] = 0;
  v20[1] = 0;
  v6 = qword_100983B00;
  *(_BYTE *)(qword_100983B00 + 1518) = a2;
  while (*(unsigned __int16 *)(v6 + v5) != a1)
  {
    v5 += 184;
    if (v5 == 1472)
      return 1802;
  }
  v8 = 0;
  while (*(unsigned __int16 *)(v6 + v8) != a1)
  {
    v8 += 184;
    if (v8 == 1472)
      goto LABEL_16;
  }
  if (*(_BYTE *)(v6 + v8 + 140) == 2)
    return 117;
LABEL_16:
  v9 = 0;
  while (*(unsigned __int16 *)(v6 + v9) != a1)
  {
    v4 = 0;
    v9 += 184;
    if (v9 == 1472)
      return v4;
  }
  if (*(_BYTE *)(v6 + v9 + 140) != 1 || !*(_BYTE *)(v6 + v5 + 177))
    return 0;
  v4 = sub_10025909C((uint64_t)v20, 0xFuLL);
  if (!(_DWORD)v4)
  {
    v16 = sub_1002596F4((uint64_t)v20, (uint64_t)"\r\n+CIEV: 5,%d\r\n", v10, v11, v12, v13, v14, v15, a2);
    if ((_DWORD)v16)
    {
      v4 = v16;
      sub_1002590E8((uint64_t)v20);
    }
    else
    {
      v17 = (char *)sub_10025971C((uint64_t)v20);
      v18 = strlen(v17);
      v19 = sub_1001553F4(a1, 13, v17, v18, 1);
      if (v19 == 408)
        return 0;
      else
        return v19;
    }
  }
  return v4;
}

uint64_t sub_100156328(unsigned int a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  if (!sub_10015B1A4())
    return 408;
  v4 = 0;
  v5 = qword_100983B00;
  *(_BYTE *)(qword_100983B00 + 1519) = a2;
  while (*(unsigned __int16 *)(v5 + v4) != a1)
  {
    v4 += 184;
    if (v4 == 1472)
      return 1802;
  }
  v7 = 0;
  while (*(unsigned __int16 *)(v5 + v7) != a1)
  {
    v7 += 184;
    if (v7 == 1472)
      goto LABEL_13;
  }
  if (*(_BYTE *)(v5 + v7 + 140) == 2)
    return 117;
LABEL_13:
  v8 = 0;
  while (*(unsigned __int16 *)(v5 + v8) != a1)
  {
    v8 += 184;
    if (v8 == 1472)
      return 0;
  }
  if (*(_BYTE *)(v5 + v8 + 140) != 1 || !*(_BYTE *)(v5 + v4 + 178))
    return 0;
  if (a2)
    v9 = "\r\n+CIEV: 6,1\r\n";
  else
    v9 = "\r\n+CIEV: 6,0\r\n";
  LODWORD(result) = sub_1001553F4(a1, 14, v9, 0xEuLL, 0);
  if ((_DWORD)result == 408)
    return 0;
  else
    return result;
}

uint64_t sub_100156444(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned __int16 v4;

  v2 = 0;
  while (*(unsigned __int16 *)(qword_100983B00 + v2) != a1)
  {
    v2 += 184;
    if (v2 == 1472)
      return 1802;
  }
  v4 = strlen(*(const char **)(qword_100983B00 + v2 + 152));
  result = sub_1001553F4(a1, 16, *(char **)(qword_100983B00 + v2 + 152), v4, 1);
  *(_QWORD *)(qword_100983B00 + v2 + 152) = 0;
  return result;
}

uint64_t sub_1001564D4(unsigned int a1, const char *a2, uint64_t a3, const char *a4, int a5)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  void *v27;
  uint64_t v29;
  _QWORD v30[2];

  if (!sub_10015B1A4())
    return 408;
  if (a2)
  {
    v9 = strlen(a2);
    if (v9 <= 32)
      v10 = v9;
    else
      v10 = 0;
    if (a4)
      goto LABEL_7;
LABEL_12:
    v12 = 0;
    goto LABEL_13;
  }
  v10 = 0;
  if (!a4)
    goto LABEL_12;
LABEL_7:
  v11 = strlen(a4);
  if (v11 <= 128)
    v12 = v11;
  else
    v12 = 0;
LABEL_13:
  v30[0] = 0;
  v30[1] = 0;
  v13 = sub_10025909C((uint64_t)v30, (unsigned __int16)(v10 + v12 + 29));
  if (!(_DWORD)v13)
  {
    if (v10 < 1 || (sub_100155660(a1) & 4) == 0)
      goto LABEL_23;
    v20 = 0;
    while (*(unsigned __int16 *)(qword_100983B00 + v20) != a1)
    {
      v20 += 184;
      if (v20 == 1472)
        goto LABEL_23;
    }
    if (*(_BYTE *)(qword_100983B00 + v20 + 132))
    {
      if (v12 < 1)
        v21 = sub_1002596F4((uint64_t)v30, (uint64_t)"\r\nRING\r\n\r\n+CLIP: \"%s\",%d\r\n", v14, v15, v16, v17, v18, v19, (uint64_t)a2);
      else
        v21 = sub_1002596F4((uint64_t)v30, (uint64_t)"\r\nRING\r\n\r\n+CLIP: \"%s\",%d,,,\"%s\"\r\n", v14, v15, v16, v17, v18, v19, (uint64_t)a2);
    }
    else
    {
LABEL_23:
      v21 = sub_1002596F4((uint64_t)v30, (uint64_t)"\r\nRING\r\n", v14, v15, v16, v17, v18, v19, v29);
    }
    v13 = v21;
    if ((_DWORD)v21)
    {
      sub_1002590E8((uint64_t)v30);
    }
    else
    {
      v22 = 152;
      while (*(unsigned __int16 *)(qword_100983B00 + v22 - 152) != a1)
      {
        v22 += 184;
        if (v22 == 1624)
          return 1802;
      }
      v23 = *(void **)(qword_100983B00 + v22);
      if (v23)
      {
        sub_100053298(v23);
        *(_QWORD *)(qword_100983B00 + v22) = 0;
      }
      v24 = sub_10025971C((uint64_t)v30);
      v25 = qword_100983B00;
      *(_QWORD *)(qword_100983B00 + v22) = v24;
      if ((*(_BYTE *)(v25 + 1508) & 8) == 0 || *(unsigned __int8 *)(v25 + 1472) > 1u || sub_10015C368(a1) || a5)
      {
        return sub_100156444(a1);
      }
      else
      {
        if (sub_10005549C())
        {
          sub_100054530("Not sending ring with name as SCO is not connected");
          v26 = sub_1000544A0(0x10u);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            sub_1006CEEC0();
        }
        v27 = *(void **)(qword_100983B00 + v22);
        if (v27)
        {
          sub_100053298(v27);
          v13 = 0;
          *(_QWORD *)(qword_100983B00 + v22) = 0;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v13;
}

uint64_t sub_100156728(unsigned int a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned __int16 v14;
  _QWORD v16[2];

  if (!sub_10015B1A4())
    return 408;
  if ((*(_WORD *)(qword_100983B00 + 1508) & 4) == 0)
    return 1808;
  v16[0] = 0;
  v16[1] = 0;
  v4 = sub_10025909C((uint64_t)v16, 0xDuLL);
  if (!(_DWORD)v4)
  {
    v11 = 48;
    if (a2)
      v11 = 49;
    v12 = sub_1002596F4((uint64_t)v16, (uint64_t)"\r\n+BVRA: %c\r\n", v5, v6, v7, v8, v9, v10, v11);
    if ((_DWORD)v12)
    {
      v4 = v12;
      sub_1002590E8((uint64_t)v16);
    }
    else
    {
      v13 = (char *)sub_10025971C((uint64_t)v16);
      v14 = strlen(v13);
      return sub_1001553F4(a1, 19, v13, v14, 1);
    }
  }
  return v4;
}

uint64_t sub_1001567FC(unsigned int a1, const char *a2)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned __int16 v15;
  _QWORD v16[2];

  if (!sub_10015B1A4())
    return 408;
  if ((*(_WORD *)(qword_100983B00 + 1508) & 0x10) == 0)
    return 1808;
  if (a2)
  {
    v6 = strlen(a2);
    if (v6 > 32)
      return 101;
  }
  else
  {
    LOWORD(v6) = 0;
  }
  v16[0] = 0;
  v16[1] = 0;
  v4 = sub_10025909C((uint64_t)v16, (unsigned __int16)(v6 + 14));
  if (!(_DWORD)v4)
  {
    v13 = sub_1002596F4((uint64_t)v16, (uint64_t)"\r\n+BINP: \"%s\"\r\n", v7, v8, v9, v10, v11, v12, (uint64_t)a2);
    if ((_DWORD)v13)
    {
      v4 = v13;
      sub_1002590E8((uint64_t)v16);
    }
    else
    {
      v14 = (char *)sub_10025971C((uint64_t)v16);
      v15 = strlen(v14);
      return sub_1001553F4(a1, 17, v14, v15, 1);
    }
  }
  return v4;
}

uint64_t sub_1001568E8(unsigned int a1, const char *a2, uint64_t a3, const char *a4)
{
  uint64_t v7;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  char *v19;
  unsigned __int16 v20;
  _QWORD v21[2];

  if (!sub_10015B1A4())
    return 408;
  if ((*(_WORD *)(qword_100983B00 + 1508) & 1) == 0 || (sub_100155660(a1) & 2) == 0)
    return 1808;
  if (a2)
  {
    v9 = strlen(a2);
    if (v9 > 32)
      return 101;
    if (a4)
      goto LABEL_10;
LABEL_13:
    v10 = 0;
    goto LABEL_14;
  }
  v9 = 0;
  if (!a4)
    goto LABEL_13;
LABEL_10:
  v10 = strlen(a4);
  if (v10 > 128)
    return 101;
LABEL_14:
  v21[0] = 0;
  v21[1] = 0;
  v7 = sub_10025909C((uint64_t)v21, (unsigned __int16)(v9 + v10 + 23));
  if (!(_DWORD)v7)
  {
    v17 = "";
    if (v9 > 0)
      v17 = a2;
    if (v10 < 1)
      v18 = sub_1002596F4((uint64_t)v21, (uint64_t)"\r\n+CCWA: \"%s\",%d,1\r\n", v11, v12, v13, v14, v15, v16, (uint64_t)v17);
    else
      v18 = sub_1002596F4((uint64_t)v21, (uint64_t)"\r\n+CCWA: \"%s\",%d,1,\"%s\"\r\n", v11, v12, v13, v14, v15, v16, (uint64_t)v17);
    v7 = v18;
    if ((_DWORD)v18)
    {
      sub_1002590E8((uint64_t)v21);
    }
    else
    {
      v19 = (char *)sub_10025971C((uint64_t)v21);
      v20 = strlen(v19);
      return sub_1001553F4(a1, 18, v19, v20, 1);
    }
  }
  return v7;
}

uint64_t sub_100156A54(unsigned int a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned __int16 v14;
  uint64_t v15;
  _QWORD v17[2];

  if (!sub_10015B1A4())
    return 408;
  if ((*(_WORD *)(qword_100983B00 + 1508) & 8) == 0)
    return 1808;
  v17[0] = 0;
  v17[1] = 0;
  v4 = sub_10025909C((uint64_t)v17, 0xDuLL);
  if (!(_DWORD)v4)
  {
    v11 = 48;
    if (a2)
      v11 = 49;
    v12 = sub_1002596F4((uint64_t)v17, (uint64_t)"\r\n+BSIR: %c\r\n", v5, v6, v7, v8, v9, v10, v11);
    if ((_DWORD)v12)
    {
      v4 = v12;
      sub_1002590E8((uint64_t)v17);
    }
    else
    {
      v13 = (char *)sub_10025971C((uint64_t)v17);
      v14 = strlen(v13);
      v4 = sub_1001553F4(a1, 20, v13, v14, 1);
      if (!(_DWORD)v4)
      {
        v15 = 0;
        while (*(unsigned __int16 *)(qword_100983B00 + v15) != a1)
        {
          v4 = 0;
          v15 += 184;
          if (v15 == 1472)
            return v4;
        }
        v4 = 0;
        *(_DWORD *)(qword_100983B00 + v15 + 128) = a2;
      }
    }
  }
  return v4;
}

uint64_t sub_100156B60(unsigned int a1, const char *a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned __int16 v14;
  _QWORD v16[2];

  if (!sub_10015B1A4())
    return 408;
  if (!a2)
    return 101;
  v16[0] = 0;
  v16[1] = 0;
  v4 = strlen(a2);
  v11 = sub_10025909C((uint64_t)v16, (unsigned __int16)(v4 + 24));
  if (!(_DWORD)v11)
  {
    v12 = sub_1002596F4((uint64_t)v16, (uint64_t)"\r\n+CNUM: ,\"%s\",%d,,%d\r\n", v5, v6, v7, v8, v9, v10, (uint64_t)a2);
    if ((_DWORD)v12)
    {
      v11 = v12;
      sub_1002590E8((uint64_t)v16);
    }
    else
    {
      v13 = (char *)sub_10025971C((uint64_t)v16);
      v14 = strlen(v13);
      return sub_1001553F4(a1, 22, v13, v14, 1);
    }
  }
  return v11;
}

uint64_t sub_100156C40(unsigned int a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, const char *a7, uint64_t a8, const char *a9)
{
  uint64_t v14;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const char *v28;
  char *v29;
  unsigned __int16 v30;
  uint64_t v31;
  _QWORD v32[2];

  if (!sub_10015B1A4())
    return 408;
  if ((*(_WORD *)(qword_100983B00 + 1508) & 0x40) == 0)
    return 1808;
  v14 = 101;
  if (a4 <= 5 && a5 <= 2)
  {
    v16 = (int)a9;
    if (a7)
    {
      v17 = strlen(a7);
      if (v17 <= 32)
        v18 = v17;
      else
        v18 = 0;
    }
    else
    {
      v18 = 0;
    }
    if (a9)
    {
      v19 = strlen(a9);
      if (v19 <= 128)
        v16 = v19;
      else
        v16 = 0;
    }
    v32[0] = 0;
    v32[1] = 0;
    v20 = sub_10025909C((uint64_t)v32, (unsigned __int16)(v18 + v16 + 40));
    v27 = v18;
    v14 = v20;
    if (!(_DWORD)v20)
    {
      if (v27 < 1 || v16 < 1)
      {
        v31 = a2;
        if (v27 < 1)
          v28 = "\r\n+CLCC: %d,%c,%d,%d,%c,,,\r\n";
        else
          v28 = "\r\n+CLCC: %d,%c,%d,%d,%c,\"%s\",%d\r\n";
      }
      else
      {
        v31 = a2;
        v28 = "\r\n+CLCC: %d,%c,%d,%d,%c,\"%s\",%d,\"%s\"\r\n";
      }
      v14 = sub_1002596F4((uint64_t)v32, (uint64_t)v28, v21, v22, v23, v24, v25, v26, v31);
      if ((_DWORD)v14)
      {
        sub_1002590E8((uint64_t)v32);
      }
      else
      {
        v29 = (char *)sub_10025971C((uint64_t)v32);
        v30 = strlen(v29);
        return sub_1001553F4(a1, 23, v29, v30, 1);
      }
    }
  }
  return v14;
}

uint64_t sub_100156E10(unsigned int a1, uint64_t a2, const char *a3)
{
  uint64_t v6;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned __int16 v23;
  _QWORD v24[2];

  if (!sub_10015B1A4())
    return 408;
  if (a2 > 4)
    return 101;
  v24[0] = 0;
  v24[1] = 0;
  if (a3)
  {
    v8 = strlen(a3);
    v6 = sub_10025909C((uint64_t)v24, (unsigned __int16)(v8 + 18));
    if ((_DWORD)v6)
      return v6;
    v15 = sub_1002596F4((uint64_t)v24, (uint64_t)"\r\n+COPS: %d,0,\"%s\"\r\n", v9, v10, v11, v12, v13, v14, a2);
  }
  else
  {
    v6 = sub_10025909C((uint64_t)v24, 0xDuLL);
    if ((_DWORD)v6)
      return v6;
    v15 = sub_1002596F4((uint64_t)v24, (uint64_t)"\r\n+COPS: %d\r\n", v16, v17, v18, v19, v20, v21, a2);
  }
  v6 = v15;
  if ((_DWORD)v15)
  {
    sub_1002590E8((uint64_t)v24);
  }
  else
  {
    v22 = (char *)sub_10025971C((uint64_t)v24);
    v23 = strlen(v22);
    return sub_1001553F4(a1, 24, v22, v23, 1);
  }
  return v6;
}

uint64_t sub_100156F08(unsigned int a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int16 *v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned __int16 v15;
  uint64_t v16;
  const void *v17[2];
  _QWORD v18[2];
  __int16 v19;

  v4 = 0;
  v19 = a1;
  v5 = (unsigned __int16 *)qword_100983B00;
  do
  {
    v6 = *v5;
    v5 += 92;
    if (v6 == a1)
      break;
    ++v4;
  }
  while (v4 != 8);
  v18[0] = 0;
  v18[1] = 0;
  if ((*(_BYTE *)(qword_100983B00 + 1509) & 2) == 0 || (*(_WORD *)(qword_100983B00 + 184 * v4 + 86) & 0x80) == 0)
    return 2701;
  if ((*(_DWORD *)(qword_100983B00 + 184 * v4 + 144) & a2) == 0)
    return 1812;
  *(_DWORD *)(qword_100983B00 + 184 * v4 + 164) = a2;
  result = sub_10025909C((uint64_t)v18, 0xBuLL);
  if (!(_DWORD)result)
  {
    if (sub_1002596F4((uint64_t)v18, (uint64_t)"\r\n+BCS:%d\r\n", v8, v9, v10, v11, v12, v13, a2))
    {
      sub_1002590E8((uint64_t)v18);
      return 412;
    }
    else
    {
      v14 = (char *)sub_10025971C((uint64_t)v18);
      v15 = strlen(v14);
      result = sub_1001553F4(a1, 26, v14, v15, 1);
      if (!(_DWORD)result)
      {
        v17[1] = &v19;
        v17[0] = (const void *)2;
        v16 = qword_100983B00 + 184 * v4;
        *(_BYTE *)(v16 + 168) = 1;
        sub_10004A9EC((uint64_t)sub_10015705C, v17, 29, (int *)(v16 + 172));
        return 0;
      }
    }
  }
  return result;
}

void sub_10015705C(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 *v2;
  int v3;

  v1 = 0;
  v2 = (unsigned __int16 *)qword_100983B00;
  while (1)
  {
    v3 = *v2;
    v2 += 92;
    if (v3 == **(unsigned __int16 **)(a1 + 8))
      break;
    if (++v1 == 8)
      return;
  }
  if (v1 != 8)
    sub_100158710(v1, 1809);
}

uint64_t sub_1001570A4(char a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v7;

  if (!sub_10015B1A4())
    return 408;
  result = 101;
  if (a2 <= 4 && a3 <= 2)
  {
    result = 0;
    v7 = qword_100983B00;
    *(_BYTE *)(qword_100983B00 + 1514) = a1;
    *(_BYTE *)(v7 + 1515) = a2;
    *(_BYTE *)(v7 + 1516) = a3;
  }
  return result;
}

uint64_t sub_10015710C(BOOL *a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t result;
  uint64_t v7;

  if (!sub_10015B1A4())
    return 408;
  result = 0;
  v7 = qword_100983B00;
  *a1 = *(_BYTE *)(qword_100983B00 + 1514) != 0;
  *a2 = *(_BYTE *)(v7 + 1515);
  *a3 = *(_BYTE *)(v7 + 1516);
  return result;
}

uint64_t sub_100157174(char a1, char a2, unsigned int a3, unsigned int a4)
{
  uint64_t result;
  _BYTE *v9;

  if (!sub_10015B1A4())
    return 408;
  result = 101;
  if (a3 <= 5 && a4 <= 5)
  {
    result = 0;
    v9 = (_BYTE *)qword_100983B00;
    *(_BYTE *)(qword_100983B00 + 1513) = a1;
    v9[1519] = a2;
    v9[1518] = a3;
    v9[1517] = a4;
  }
  return result;
}

uint64_t sub_1001571E4(int a1)
{
  uint64_t v1;

  v1 = 0;
  while (*(unsigned __int16 *)(qword_100983B00 + v1) != a1)
  {
    v1 += 184;
    if (v1 == 1472)
      return 0;
  }
  return qword_100983B00 + v1 + 80;
}

uint64_t sub_100157228(unsigned int a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  int v14;
  char *v15;
  unsigned __int16 v16;
  uint64_t v18;
  uint8_t buf[24];

  if (sub_10005549C())
  {
    sub_100054530("OI_HandsfreeAG_SetupAoS - handle:%d", a1);
    v2 = sub_1000544A0(0x10u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (sub_10015C204(a1))
  {
    if (sub_10005549C())
    {
      sub_100054530("Trying to establish HandsfreeAoS while it's already established");
      v3 = sub_1000544A0(0x10u);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_1006D26A0(v3);
    }
    return 1806;
  }
  else
  {
    *(_OWORD *)buf = 0uLL;
    v4 = sub_10025909C((uint64_t)buf, 8uLL);
    if (!(_DWORD)v4)
    {
      v11 = sub_1002596F4((uint64_t)buf, (uint64_t)"\r\n+HAOS:1\r\n", v5, v6, v7, v8, v9, v10, v18);
      if ((_DWORD)v11)
      {
        v4 = v11;
        sub_1002590E8((uint64_t)buf);
      }
      else
      {
        v12 = 0;
        v13 = (unsigned __int16 *)qword_100983B00;
        do
        {
          v14 = *v13;
          v13 += 92;
          if (v14 == a1)
            break;
          ++v12;
        }
        while (v12 != 8);
        *(_BYTE *)(qword_100983B00 + 184 * v12 + 182) = 1;
        v15 = (char *)sub_10025971C((uint64_t)buf);
        v16 = strlen(v15);
        return sub_1001553F4(a1, 28, v15, v16, 1);
      }
    }
  }
  return v4;
}

uint64_t sub_1001573E4(unsigned int a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned __int16 v12;
  uint64_t v14;
  uint8_t buf[24];

  if (sub_10005549C())
  {
    sub_100054530("OI_HandsfreeAG_CloseAoSAudio - handle:%d", a1);
    v2 = sub_1000544A0(0x10u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  *(_OWORD *)buf = 0uLL;
  v9 = sub_10025909C((uint64_t)buf, 8uLL);
  if (!(_DWORD)v9)
  {
    v10 = sub_1002596F4((uint64_t)buf, (uint64_t)"\r\n+HAOS:2,0\r\n", v3, v4, v5, v6, v7, v8, v14);
    if ((_DWORD)v10)
    {
      v9 = v10;
      sub_1002590E8((uint64_t)buf);
    }
    else
    {
      v11 = (char *)sub_10025971C((uint64_t)buf);
      v12 = strlen(v11);
      return sub_1001553F4(a1, 28, v11, v12, 1);
    }
  }
  return v9;
}

uint64_t sub_100157514(unsigned int a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned __int16 v12;
  uint64_t v14;
  uint8_t buf[24];

  if (sub_10005549C())
  {
    sub_100054530("OI_HandsfreeAG_TransitionToUnidirectionalAudio - handle:%d", a1);
    v2 = sub_1000544A0(0x10u);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  *(_OWORD *)buf = 0uLL;
  v9 = sub_10025909C((uint64_t)buf, 8uLL);
  if (!(_DWORD)v9)
  {
    v10 = sub_1002596F4((uint64_t)buf, (uint64_t)"\r\n+HAOS:2,1\r\n", v3, v4, v5, v6, v7, v8, v14);
    if ((_DWORD)v10)
    {
      v9 = v10;
      sub_1002590E8((uint64_t)buf);
    }
    else
    {
      v11 = (char *)sub_10025971C((uint64_t)buf);
      v12 = strlen(v11);
      return sub_1001553F4(a1, 28, v11, v12, 1);
    }
  }
  return v9;
}

uint64_t sub_100157644(int a1)
{
  uint64_t v1;

  v1 = 0;
  while (*(unsigned __int16 *)(qword_100983B00 + v1) != a1)
  {
    v1 += 184;
    if (v1 == 1472)
      return 1802;
  }
  *(_BYTE *)(qword_100983B00 + v1 + 182) = 0;
  return sub_10015C040(a1);
}

BOOL sub_100157688(int a1)
{
  uint64_t v1;

  v1 = 0;
  while (*(unsigned __int16 *)(qword_100983B00 + v1) != a1)
  {
    v1 += 184;
    if (v1 == 1472)
      return 0;
  }
  return *(_BYTE *)(qword_100983B00 + v1 + 182) != 0;
}

uint64_t sub_1001576D4(unsigned int a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 0;
  while (*(unsigned __int16 *)(qword_100983B00 + v2) != a1)
  {
    v2 += 184;
    if (v2 == 1472)
      return 1802;
  }
  if ((*(_WORD *)(qword_100983B00 + 1508) & 0x200) == 0 || (*(_WORD *)(qword_100983B00 + v2 + 86) & 0x80) == 0)
    return sub_10015BF90(a1, a2);
  if ((_DWORD)a2)
    return sub_10015C040(a1);
  return sub_1001557E4(a1, 2701, 0);
}

uint64_t sub_100157738(int a1, int *a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned __int16 *v5;
  int v6;
  uint64_t v7;

  result = 0;
  v4 = qword_100983B00;
  v5 = (unsigned __int16 *)qword_100983B00;
  while (1)
  {
    v6 = *v5;
    v5 += 92;
    if (v6 == a1)
      break;
    if (++result == 8)
      goto LABEL_6;
  }
  if (result != 8)
    goto LABEL_9;
LABEL_6:
  LODWORD(result) = sub_1001577C8(a1, a2);
  if ((_DWORD)result == 8)
  {
    sub_100253460();
    LOBYTE(result) = -1;
    return result;
  }
  v4 = qword_100983B00;
LABEL_9:
  v7 = v4 + 184 * result;
  *(_BYTE *)(v7 + 12) = 0;
  *(_DWORD *)(v7 + 4) = 0;
  return result;
}

uint64_t sub_1001577C8(int a1, int *a2)
{
  __int16 v3;
  uint64_t i;
  unsigned __int8 v5;
  uint64_t v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;

  v3 = a1;
  for (i = 0; i != 1472; i += 184)
  {
    if (*(unsigned __int16 *)(qword_100983B00 + i) == a1)
    {
      if (sub_10005549C())
      {
        sub_100054530("Cooked device already exists %: !!", a2);
        v13 = sub_1000544A0(0x10u);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
      return 8;
    }
  }
  v5 = 0;
  v6 = -1472;
  while (*(_DWORD *)(qword_100983B00 + v6 + 1552) || *(_WORD *)(qword_100983B00 + v6 + 1556) != 0)
  {
    ++v5;
    v6 += 184;
    if (!v6)
      return 8;
  }
  v8 = sub_100052DC0(*(unsigned __int16 *)(qword_100983B00 + 1506));
  v9 = qword_100983B00 + v6;
  *(_QWORD *)(qword_100983B00 + v6 + 1592) = v8;
  if (v8)
  {
    sub_100253C6C((_QWORD *)(v9 + 1536));
    sub_1001387A0(qword_100983B00 + v6 + 1568, (uint64_t)sub_1001587B0, *(_QWORD *)(qword_100983B00 + v6 + 1592), *(_WORD *)(qword_100983B00 + 1506));
    v10 = qword_100983B00;
    v11 = qword_100983B00 + v6;
    *(_WORD *)(v11 + 1472) = v3;
    v12 = *a2;
    *(_WORD *)(v11 + 1556) = *((_WORD *)a2 + 2);
    *(_DWORD *)(v11 + 1552) = v12;
    *(_BYTE *)(v11 + 1484) = 1;
    *(_QWORD *)(v11 + 1476) = 1802;
    *(_WORD *)(v11 + 1558) = 0;
    *(_DWORD *)(v11 + 1488) = 0;
    *(_QWORD *)(v11 + 1496) = 0;
    *(_WORD *)(v11 + 1504) = 0;
    *(_BYTE *)(v11 + 1506) = 0;
    *(_DWORD *)(v11 + 1600) = (*(unsigned __int16 *)(v10 + 1508) >> 3) & 1;
    *(_OWORD *)(v10 + v6 + 1604) = 0u;
    *(_WORD *)(v11 + 1632) = *(_WORD *)(v10 + 1514);
    *(_BYTE *)(v11 + 1634) = *(_BYTE *)(v10 + 1516);
    *(_DWORD *)(v11 + 1636) = 0;
    *(_BYTE *)(v11 + 1640) = 0;
    *(_QWORD *)(v10 + v6 + 1644) = 0x101010100000000;
    *(_WORD *)(v11 + 1652) = 0;
    ++*(_BYTE *)(v10 + 1472);
    return v5;
  }
  return 8;
}

void sub_100157998(uint64_t a1, unsigned int a2, int a3)
{
  sub_1001579C8(a3);
  sub_10015C840(a1, a2);
}

double sub_1001579C8(int a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = 0;
  v2 = 0;
  while (*(unsigned __int16 *)(qword_100983B00 + v1) != a1)
  {
    ++v2;
    v1 += 184;
    if (v2 == 8)
    {
      if (sub_10005549C())
      {
        sub_100054530("Could not find cooked device to destroy.");
        v4 = sub_1000544A0(0x10u);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
      return result;
    }
  }
  sub_1001583D4(v2);
  v5 = qword_100983B00;
  v6 = *(void **)(qword_100983B00 + v1 + 152);
  if (v6)
  {
    sub_100053298(v6);
    v5 = qword_100983B00;
    *(_QWORD *)(qword_100983B00 + v1 + 152) = 0;
  }
  v7 = *(unsigned int *)(v5 + v1 + 8);
  if ((_DWORD)v7)
  {
    sub_100049F6C(v7);
    v5 = qword_100983B00;
  }
  sub_100053298(*(void **)(v5 + v1 + 120));
  v8 = qword_100983B00;
  v9 = qword_100983B00 + v1;
  result = 0.0;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_QWORD *)(v9 + 176) = 0;
  *(_WORD *)v9 = -1;
  --*(_BYTE *)(v8 + 1472);
  return result;
}

uint64_t sub_100157AD0(int a1, char a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  int v4;
  int v5;
  int v6;

  v2 = 0;
  v3 = (unsigned __int16 *)qword_100983B00;
  if ((a2 & 1) != 0)
  {
    while (1)
    {
      v4 = *v3;
      v3 += 92;
      if (v4 == a1)
        break;
      if (++v2 == 8)
        return 0;
    }
    v6 = 1;
  }
  else
  {
    while (1)
    {
      v5 = *v3;
      v3 += 92;
      if (v5 == a1)
        break;
      if (++v2 == 8)
        return 0;
    }
    v6 = 0;
  }
  *(_DWORD *)(qword_100983B00 + 184 * v2 + 140) = v6;
  return 0;
}

uint64_t sub_100157B3C(int a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  void *v12;
  int v13;
  int v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  int v18;

  v4 = qword_100983B00;
  v5 = -1472;
  while (*(unsigned __int16 *)(qword_100983B00 + v5 + 1472) != a1)
  {
    v5 += 184;
    if (!v5)
      return 1802;
  }
  if ((*(_WORD *)(qword_100983B00 + 1508) & 0x200) == 0 || (*(_WORD *)(qword_100983B00 + v5 + 1558) & 0x80) == 0)
    return 2701;
  *(_DWORD *)(qword_100983B00 + v5 + 1616) = 0;
  if (a3)
  {
    v7 = a3;
    while (1)
    {
      v8 = *a2;
      if (v8 <= 0x7E)
      {
        switch(v8)
        {
          case 1u:
            v9 = qword_100983B00 + v5;
            v10 = *(_DWORD *)(qword_100983B00 + v5 + 1616) | 1;
            break;
          case 2u:
            v9 = qword_100983B00 + v5;
            v10 = *(_DWORD *)(qword_100983B00 + v5 + 1616) | 2;
            break;
          case 0x40u:
            v9 = qword_100983B00 + v5;
            v10 = *(_DWORD *)(qword_100983B00 + v5 + 1616) | 0x80;
            break;
          default:
LABEL_28:
            if (sub_10005549C())
            {
              sub_100054530("Unsupported codec ID: %d", *a2);
              v11 = sub_1000544A0(0x10u);
              if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
              {
                v12 = sub_100054494();
                *(_DWORD *)buf = 136446466;
                v16 = v12;
                v17 = 1024;
                v18 = 0xFFFF;
                _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
              }
            }
            goto LABEL_26;
        }
      }
      else
      {
        switch(*a2)
        {
          case 0x7Fu:
            v9 = qword_100983B00 + v5;
            v10 = *(_DWORD *)(qword_100983B00 + v5 + 1616) | 4;
            break;
          case 0x80u:
            v9 = qword_100983B00 + v5;
            v10 = *(_DWORD *)(qword_100983B00 + v5 + 1616) | 0x100;
            break;
          case 0x81u:
            v9 = qword_100983B00 + v5;
            v10 = *(_DWORD *)(qword_100983B00 + v5 + 1616) | 0x200;
            break;
          case 0x82u:
            v9 = qword_100983B00 + v5;
            v10 = *(_DWORD *)(qword_100983B00 + v5 + 1616) | 0x400;
            break;
          default:
            if (v8 != 255)
              goto LABEL_28;
            v9 = qword_100983B00 + v5;
            v10 = *(_DWORD *)(qword_100983B00 + v5 + 1616) | 0x10;
            break;
        }
      }
      *(_DWORD *)(v9 + 1616) = v10;
LABEL_26:
      ++a2;
      if (!--v7)
      {
        v4 = qword_100983B00;
        v13 = *(_DWORD *)(qword_100983B00 + v5 + 1616);
        goto LABEL_32;
      }
    }
  }
  v13 = 0;
LABEL_32:
  v14 = v13 & *(_DWORD *)(v4 + 1520);
  if ((v14 & 0x100) != 0)
  {
    *(_QWORD *)(v4 + v5 + 1560) |= 1uLL;
    if ((v14 & 0x80) == 0)
    {
LABEL_34:
      if ((v14 & 2) == 0)
        goto LABEL_35;
      goto LABEL_43;
    }
  }
  else if ((v14 & 0x80) == 0)
  {
    goto LABEL_34;
  }
  *(_QWORD *)(v4 + v5 + 1560) |= 4uLL;
  if ((v14 & 2) == 0)
  {
LABEL_35:
    if ((v14 & 4) == 0)
      goto LABEL_36;
    goto LABEL_44;
  }
LABEL_43:
  *(_QWORD *)(v4 + v5 + 1560) |= 2uLL;
  if ((v14 & 4) == 0)
  {
LABEL_36:
    if ((v14 & 0x10) == 0)
      goto LABEL_37;
    goto LABEL_45;
  }
LABEL_44:
  *(_QWORD *)(v4 + v5 + 1560) |= 8uLL;
  if ((v14 & 0x10) == 0)
  {
LABEL_37:
    if ((v14 & 0x200) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
LABEL_45:
  *(_QWORD *)(v4 + v5 + 1560) |= 0x10uLL;
  if ((v14 & 0x200) != 0)
LABEL_38:
    *(_QWORD *)(v4 + v5 + 1560) |= 0x20uLL;
LABEL_39:
  result = 0;
  if ((v14 & 0x400) != 0)
    *(_QWORD *)(v4 + v5 + 1560) |= 0x40uLL;
  return result;
}

uint64_t sub_100157E68(int a1, _BYTE *a2, unsigned int a3)
{
  uint64_t v3;
  NSObject *v4;
  int v6;
  int v7;
  _BYTE *v8;

  v3 = 0;
  while (*(unsigned __int16 *)(qword_100983B00 + v3) != a1)
  {
    v3 += 184;
    if (v3 == 1472)
    {
      if (sub_10005549C())
      {
        sub_100054530("FastConnect Device not connected");
        v4 = sub_1000544A0(0x10u);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          sub_1006CEEC0();
      }
      return 1802;
    }
  }
  if (a3 >= 0x14)
    v6 = 20;
  else
    v6 = a3;
  if (v6)
  {
    v7 = 0;
    v8 = (_BYTE *)(qword_100983B00 + v3);
    do
    {
      if (a3 <= 6)
      {
        switch(v7)
        {
          case 0:
            if (*a2)
            {
              if (*a2 == 1)
                v8[176] = 1;
            }
            else
            {
              v8[176] = 0;
            }
            break;
          case 3:
            if (a2[3])
            {
              if (a2[3] == 1)
                v8[179] = 1;
            }
            else
            {
              v8[179] = 0;
            }
            break;
          case 4:
            if (a2[4])
            {
              if (a2[4] == 1)
                v8[177] = 1;
            }
            else
            {
              v8[177] = 0;
            }
            break;
          case 5:
            if (a2[5])
            {
              if (a2[5] == 1)
                v8[178] = 1;
            }
            else
            {
              v8[178] = 0;
            }
            break;
          default:
            break;
        }
      }
      ++v7;
    }
    while (v6 != v7);
  }
  return 0;
}

