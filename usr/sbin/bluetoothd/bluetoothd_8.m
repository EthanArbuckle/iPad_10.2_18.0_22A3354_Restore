uint64_t sub_1004B0924(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v4;
  _OWORD *v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_100932358;
  *(_QWORD *)(a1 + 16) = a2;
  v4 = *a3;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 24) = v4;
  if (*((_QWORD *)a3 + 2))
  {
    v6 = malloc_type_malloc(0xF0uLL, 0x100004077774924uLL);
    *(_QWORD *)(a1 + 40) = v6;
    v7 = (__int128 *)*((_QWORD *)a3 + 2);
    v8 = *v7;
    v9 = v7[2];
    v6[1] = v7[1];
    v6[2] = v9;
    *v6 = v8;
    v10 = v7[3];
    v11 = v7[4];
    v12 = v7[6];
    v6[5] = v7[5];
    v6[6] = v12;
    v6[3] = v10;
    v6[4] = v11;
    v13 = v7[7];
    v14 = v7[8];
    v15 = v7[10];
    v6[9] = v7[9];
    v6[10] = v15;
    v6[7] = v13;
    v6[8] = v14;
    v16 = v7[11];
    v17 = v7[12];
    v18 = v7[14];
    v6[13] = v7[13];
    v6[14] = v18;
    v6[11] = v16;
    v6[12] = v17;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 0;
  }
  return a1;
}

unsigned __int8 *sub_1004B09E0(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  return sub_1004AFB20(v1, (uint64_t)&v3);
}

uint64_t sub_1004B0A18(uint64_t a1)
{
  return sub_1004B02DC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1004B0A28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
    return sub_1004AE2A4(v2, v3);
  else
    return sub_1004AFE30(v2);
}

uint64_t sub_1004B0A40(uint64_t a1, uint64_t a2, int a3, int *a4, std::string::value_type *__s)
{
  int v6;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_100932390;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if (a4)
  {
    v6 = *a4;
    *(_WORD *)(a1 + 32) = *((_WORD *)a4 + 2);
    *(_DWORD *)(a1 + 28) = v6;
  }
  if (__s)
    std::string::assign((std::string *)(a1 + 40), __s);
  return a1;
}

void sub_1004B0AB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1004B0AD0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  void *__p[2];
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(unsigned int *)(a1 + 28) | ((unint64_t)*(unsigned __int16 *)(a1 + 32) << 32);
  if (*(char *)(a1 + 63) < 0)
  {
    sub_10003430C(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 56);
  }
  sub_1004B00B4(v1, v2, v3 & 0xFFFFFFFFFFFFLL, (uint64_t)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_1004B0B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1004B0B74(_QWORD *a1)
{
  void *v2;

  *a1 = off_100932358;
  v2 = (void *)a1[5];
  if (v2)
    free(v2);
  return a1;
}

void sub_1004B0BAC(_QWORD *a1)
{
  void *v1;

  *a1 = off_100932358;
  v1 = (void *)a1[5];
  if (v1)
    free(v1);
  operator delete();
}

void sub_1004B0BF8()
{
  operator delete();
}

void sub_1004B0C10()
{
  operator delete();
}

uint64_t sub_1004B0C24(uint64_t a1)
{
  *(_QWORD *)a1 = off_100932390;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_1004B0C60(uint64_t a1)
{
  *(_QWORD *)a1 = off_100932390;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  operator delete();
}

_QWORD *sub_1004B0CAC(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_1009322F0;
  a1[11] = off_100932330;
  v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[22];
  if (v3)
  {
    a1[23] = v3;
    operator delete(v3);
  }
  sub_100069BDC(a1 + 13);
  *a1 = off_100932248;
  sub_100069BDC(a1 + 1);
  return a1;
}

void sub_1004B0D1C(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_1009322F0;
  a1[11] = off_100932330;
  v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[22];
  if (v3)
  {
    a1[23] = v3;
    operator delete(v3);
  }
  sub_100069BDC(a1 + 13);
  *a1 = off_100932248;
  sub_100069BDC(a1 + 1);
  operator delete();
}

BOOL sub_1004B0D9C(uint64_t a1, _BYTE *a2)
{
  return sub_10006BB10(*(_QWORD *)(a1 + 96), a2);
}

uint64_t sub_1004B0DA4(_QWORD *a1)
{
  void *v2;
  void *v3;

  *(a1 - 11) = off_1009322F0;
  *a1 = off_100932330;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  sub_100069BDC(a1 + 2);
  *(a1 - 11) = off_100932248;
  return sub_100069BDC(a1 - 10);
}

void sub_1004B0E0C(_QWORD *a1)
{
  void *v2;
  void *v3;

  *(a1 - 11) = off_1009322F0;
  *a1 = off_100932330;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  sub_100069BDC(a1 + 2);
  *(a1 - 11) = off_100932248;
  sub_100069BDC(a1 - 10);
  operator delete();
}

void sub_1004B0E90(id a1)
{
  operator new();
}

void sub_1004B0ED0()
{
  operator delete();
}

void sub_1004B0EF4(id a1)
{
  operator new();
}

void sub_1004B0F34()
{
  operator delete();
}

id sub_1004B0F60(void *a1)
{
  size_t count;
  size_t v3;
  id v4;
  _QWORD applier[5];

  count = xpc_array_get_count(a1);
  v3 = 8 * count;
  __chkstk_darwin();
  bzero((char *)applier - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 3221225472;
  applier[2] = sub_1004B1BD0;
  applier[3] = &unk_100923110;
  applier[4] = (char *)applier - ((8 * count + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_array_apply(a1, applier);
  v4 = objc_msgSend(objc_alloc((Class)NSArray), "initWithObjects:count:", (char *)applier - ((8 * count + 15) & 0xFFFFFFFFFFFFFFF0), count);
  if (count)
  {
    do
    {

      v3 -= 8;
    }
    while (v3);
  }
  return v4;
}

void sub_1004B1078(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v2)
  {
    do
    {

      v1 -= 8;
    }
    while (v1);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t sub_1004B10A8(void *a1)
{
  id v1;
  char *v2;
  size_t v3;
  xpc_object_t *v4;
  xpc_object_t i;
  _QWORD v7[5];

  v1 = a1;
  v2 = (char *)objc_msgSend(v1, "count");
  __chkstk_darwin();
  v4 = (xpc_object_t *)((char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v4, v3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004B1C10;
  v7[3] = &unk_100932518;
  v7[4] = v4;
  objc_msgSend(v1, "enumerateObjectsUsingBlock:", v7);
  for (i = xpc_array_create(v4, (size_t)v2); v2; --v2)
    xpc_release(*v4++);

  return i;
}

void sub_1004B11B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004B11DC(char *a1, void *a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  unsigned __int16 int64;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int count;
  __int16 v25;
  char *v26;

  v4 = sub_100027F68();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 448))(v4);
  if (a2 && v5)
  {
    if (xpc_get_type(a2) == (xpc_type_t)&_xpc_type_error)
    {
      v11 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006F8818(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      v6 = xpc_copy_description(a2);
      int64 = xpc_dictionary_get_int64(a2, "kCBMsgId");
      v8 = qword_100999988;
      if (os_log_type_enabled((os_log_t)qword_100999988, OS_LOG_TYPE_DEFAULT))
      {
        v9 = a1 + 56;
        if (a1[79] < 0)
          v9 = (_QWORD *)*v9;
        v10 = (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)a1 + 56))(a1, int64);
        v19 = 136446978;
        v20 = v9;
        v21 = 2082;
        v22 = v10;
        v23 = 1024;
        count = xpc_dictionary_get_count(a2);
        v25 = 2080;
        v26 = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Msg:\"%{public}s\", Session:\"%{public}s\", Count:%d, xpc_copy_description(args): %s ", (uint8_t *)&v19, 0x26u);
      }
      free(v6);
    }
  }
}

void sub_1004B1368(uint64_t a1, int64_t a2, xpc_object_t xdict, int a4)
{
  xpc_object_t value;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    v8 = value;
    xpc_dictionary_set_int64(value, "kCBMsgArgResult", a4);
    sub_10005E138(a1, a2, v8, 0);
  }
}

void sub_1004B13DC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  xpc_object_t v6;
  void *v7;
  int v8;
  unsigned int *v9;
  NSObject *v11;
  _QWORD *v12;
  int v13;
  NSObject *v14;
  const char *v15;
  _QWORD *v16;
  int v17;
  _BYTE v18[18];

  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (*(_DWORD *)(a1 + 140) == a3)
  {
    v9 = (unsigned int *)(a1 + 136);
    v8 = *(_DWORD *)(a1 + 136);
    if (v8 == 2 || v8 == a2)
    {
      xpc_release(v6);
      return;
    }
  }
  else
  {
    v11 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v12 = (_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        v12 = (_QWORD *)*v12;
      v17 = 67109378;
      *(_DWORD *)v18 = a2;
      *(_WORD *)&v18[4] = 2082;
      *(_QWORD *)&v18[6] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending 'power updated' event with state \"%d\" to session \"%{public}s\"", (uint8_t *)&v17, 0x12u);
    }
    *(_DWORD *)(a1 + 140) = a3;
    xpc_dictionary_set_int64(v7, "kCBMsgArgBTPowerState", a3);
    v9 = (unsigned int *)(a1 + 136);
    v13 = *(_DWORD *)(a1 + 136);
    if (v13 == 2 || v13 == a2)
      goto LABEL_22;
  }
  v14 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 - 1 > 9)
      v15 = "Unknown";
    else
      v15 = off_100932578[a2 - 1];
    v16 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v16 = (_QWORD *)*v16;
    v17 = 136446466;
    *(_QWORD *)v18 = v15;
    *(_WORD *)&v18[8] = 2082;
    *(_QWORD *)&v18[10] = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Sending 'state updated' event with state \"%{public}s\" to session \"%{public}s\"", (uint8_t *)&v17, 0x16u);
  }
  *v9 = a2;
  xpc_dictionary_set_int64(v7, "kCBMsgArgState", a2);
LABEL_22:
  sub_10005E138(a1, 6, v7, 1);
}

void sub_1004B1604(uint64_t a1, int a2)
{
  unsigned int v2;

  if (a2)
    v2 = 4;
  else
    v2 = 5;
  sub_10007069C(a1, v2);
}

void sub_1004B1614(uint64_t a1, void *a2, void *a3)
{
  id v4;
  unsigned int v5;
  unsigned __int8 uuid[8];
  uint64_t v7;

  v4 = a3;
  *(_QWORD *)uuid = 0;
  v7 = 0;
  objc_msgSend(v4, "getUUIDBytes:", uuid);
  xpc_dictionary_set_uuid(a2, "kCBMsgArgDeviceUUID", uuid);
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_100932558);
  v5 = sub_100006180(qword_10097AC10, v4);
  xpc_dictionary_set_int64(a2, "kCBMsgArgATTMTU", v5);

}

void sub_1004B16DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

xpc_object_t sub_1004B16F4(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  xpc_object_t *v6;
  size_t v7;
  size_t v8;
  unsigned int v9;
  xpc_object_t v10;
  xpc_object_t *v11;
  _QWORD bytes[2];

  v3 = *a1;
  v4 = a1[1];
  __chkstk_darwin(a1, 0x6666666666666668 * ((unint64_t)(v4 - *a1) >> 2));
  v6 = (xpc_object_t *)((char *)&bytes[-1] - v5);
  bzero((char *)&bytes[-1] - v5, v7);
  if (v4 == v3)
    return xpc_array_create(v6, 0);
  v8 = 0;
  do
  {
    if (sub_1004B1D2C(a2, v3) != 1)
    {
      bytes[0] = 0;
      bytes[1] = 0;
      v9 = sub_1000689E4(v3, bytes);
      v6[v8++] = xpc_data_create(bytes, v9);
    }
    v3 += 20;
  }
  while (v3 != v4);
  v10 = xpc_array_create(v6, v8);
  if (v8)
  {
    v11 = v6 - 1;
    do
      xpc_release(v11[v8--]);
    while (v8);
  }
  return v10;
}

xpc_object_t sub_1004B182C(void *a1)
{
  id v1;
  id v2;
  size_t v3;
  char *v4;
  id v5;
  id v6;
  char *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  xpc_object_t *v11;
  id v12;
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  id v17;
  xpc_object_t *v18;
  xpc_object_t v19;
  xpc_object_t *v20;
  _QWORD v22[3];
  xpc_object_t *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  v1 = a1;
  v22[1] = v1;
  v2 = objc_msgSend(v1, "count");
  v22[2] = v22;
  __chkstk_darwin(v2, 8 * (_QWORD)v2);
  v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v4, v3);
  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  v24 = 0u;
  v5 = v1;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  v23 = (xpc_object_t *)v4;
  if (v6)
  {
    v7 = 0;
    v8 = *(_QWORD *)v25;
    do
    {
      v9 = 0;
      v10 = v7;
      v11 = &v23[(_QWORD)v7];
      do
      {
        if (*(_QWORD *)v25 != v8)
          objc_enumerationMutation(v5);
        v12 = *(id *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)v9);
        v13 = objc_msgSend(v12, "length");
        v15 = (char *)v22 - ((__chkstk_darwin(v13, v14) + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v15, (size_t)v13);
        objc_msgSend(v12, "getBytes:length:", v15, v13);
        v11[(_QWORD)v9] = xpc_data_create(v15, (size_t)v13);

        v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      v7 = (char *)v9 + (_QWORD)v10;
    }
    while (v6);
    v16 = (char *)v9 + (_QWORD)v10;
  }
  else
  {
    v16 = 0;
  }

  v17 = objc_msgSend(v5, "count");
  v18 = v23;
  v19 = xpc_array_create(v23, (size_t)v17);
  v20 = v18 - 1;
  while (v16)
    xpc_release(v20[(_QWORD)v16--]);

  return v19;
}

void sub_1004B1A6C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

BOOL sub_1004B1AB4(int a1, xpc_object_t xdict)
{
  xpc_object_t dictionary;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _BOOL8 v10;

  dictionary = xpc_dictionary_get_dictionary(xdict, "kCBMsgArgs");
  if (!dictionary)
    return 0;
  v3 = dictionary;
  if (!xpc_dictionary_get_dictionary(dictionary, "kCBMsgArgTimeXpcTimestampsTracking"))
    return 0;
  v4 = sub_100026584(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v5));

  if (v6)
  {
    v7 = CBOptionUseCase;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CBOptionUseCase));
    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v7));
      v10 = objc_msgSend(v9, "unsignedLongValue") == (id)22;

    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_1004B1B9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1004B1BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v5 = sub_1000262B0(a3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 8 * a2);
  *(_QWORD *)(v7 + 8 * a2) = v6;

  return 1;
}

void sub_1004B1C10(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;

  v5 = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a3) = sub_10005AE90();

}

void sub_1004B1C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1004B1C64(id a1)
{
  operator new();
}

void sub_1004B1CA4()
{
  operator delete();
}

void sub_1004B1CC8(id a1)
{
  operator new();
}

void sub_1004B1D08()
{
  operator delete();
}

uint64_t sub_1004B1D2C(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;

  v2 = *(unsigned __int8 **)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if (!sub_100068844(a2, v2 + 28))
      {
        if (!sub_100068844(v2 + 28, a2))
          return v4;
        v2 += 8;
      }
      v2 = *(unsigned __int8 **)v2;
    }
    while (v2);
  }
  return 0;
}

void sub_1004B1D94(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

uint64_t sub_1004B1DA0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = off_1009325D8;
  v3 = *(_QWORD **)(a1 + 72);
  v2 = *(_QWORD **)(a1 + 80);
  while (v3 != v2)
  {
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      v2 = *(_QWORD **)(a1 + 80);
    }
    ++v3;
  }
  v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(_QWORD *)(a1 + 128) = v4;
    operator delete(v4);
  }
  sub_10001A82C(a1 + 96, *(_QWORD **)(a1 + 104));
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  sub_100069BDC(a1 + 8);
  return a1;
}

void sub_1004B1E30(uint64_t a1)
{
  sub_1004B1DA0(a1);
  operator delete();
}

uint64_t sub_1004B1E54(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  __n128 v12;
  __n128 v13;
  int v14;

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 8);
  v5 = *(uint64_t **)(a1 + 72);
  v4 = *(uint64_t **)(a1 + 80);
  if (v5 == v4)
  {
LABEL_8:
    v9 = 0;
  }
  else
  {
    v6 = a2[1];
    while (1)
    {
      v7 = *a2;
      if (*a2 != v6)
        break;
LABEL_7:
      if (++v5 == v4)
        goto LABEL_8;
    }
    while (1)
    {
      v8 = *v5;
      v13 = *(__n128 *)(*v5 + 72);
      v14 = *(_DWORD *)(v8 + 88);
      sub_100042F44(&v12, &v13);
      if (sub_100072DF0((unsigned __int8 *)&v12, v7))
        break;
      v7 += 20;
      if (v7 == a2[1])
      {
        v4 = *(uint64_t **)(a1 + 80);
        v6 = v7;
        goto LABEL_7;
      }
    }
    v9 = 1;
  }
  sub_100034234((uint64_t)v11);
  return v9;
}

void sub_1004B1F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004B1F64(uint64_t a1, void **a2)
{
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 8);
  for (i = *(_QWORD **)(a1 + 72); i != *(_QWORD **)(a1 + 80); ++i)
  {
    v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*i + 16))(*i);
    v6 = v5;
    v8 = (uint64_t *)a2[1];
    v7 = (unint64_t)a2[2];
    if ((unint64_t)v8 >= v7)
    {
      v10 = ((char *)v8 - (_BYTE *)*a2) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        abort();
      v11 = v7 - (_QWORD)*a2;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)sub_10007ABA0((uint64_t)(a2 + 2), v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v10];
      *v15 = v6;
      v9 = v15 + 1;
      v17 = (char *)*a2;
      v16 = (char *)a2[1];
      if (v16 != *a2)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *--v15 = v18;
        }
        while (v16 != v17);
        v16 = (char *)*a2;
      }
      *a2 = v15;
      a2[1] = v9;
      a2[2] = &v14[8 * v13];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v8 = v5;
      v9 = v8 + 1;
    }
    a2[1] = v9;
  }
  return sub_100034234((uint64_t)v20);
}

void sub_1004B20A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B20B8(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  int v6;
  _QWORD *i;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  NSObject *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  char v36;
  _QWORD v37[2];
  _QWORD __src[2];
  __n128 v39;
  uint8_t buf[16];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[26];
  __n128 v55;
  int v56;

  v37[0] = 0;
  v37[1] = 0;
  sub_10003415C((uint64_t)v37, a1 + 8);
  v36 = 0;
  sub_100043758(&v36);
  v6 = sub_10011CDC4();
  if ((v6 & 1) == 0)
    sub_10004339C(&v36);
  if (*(_BYTE *)(a1 + 144))
    goto LABEL_4;
  if (!a2)
    goto LABEL_37;
  v32 = *(unsigned __int8 **)(a1 + 120);
  v33 = *(unsigned __int8 **)(a1 + 128);
  if (v32 == v33)
  {
    v34 = *(unsigned __int8 **)(a1 + 120);
  }
  else
  {
    while (!sub_100072DF0(v32, a2))
    {
      v32 += 20;
      if (v32 == v33)
      {
        v32 = v33;
        break;
      }
    }
    v34 = v32;
    v32 = *(unsigned __int8 **)(a1 + 128);
  }
  if (v34 != v32)
  {
LABEL_4:
    for (i = *(_QWORD **)(a1 + 72); i != *(_QWORD **)(a1 + 80); ++i)
    {
      if (a2)
      {
        v8 = *i;
        *(_OWORD *)buf = *(_OWORD *)(*i + 72);
        LODWORD(v41) = *(_DWORD *)(v8 + 88);
        sub_100042F44(&v55, (__n128 *)buf);
        if (!sub_100072DF0(v9, a2))
          continue;
      }
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*i + 16))(*i);
      v11 = v10;
      v13 = (uint64_t *)a3[1];
      v12 = (unint64_t)a3[2];
      if ((unint64_t)v13 >= v12)
      {
        v15 = ((char *)v13 - (_BYTE *)*a3) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          abort();
        v16 = v12 - (_QWORD)*a3;
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)sub_10007ABA0((uint64_t)(a3 + 2), v18);
        else
          v19 = 0;
        v20 = (uint64_t *)&v19[8 * v15];
        *v20 = v11;
        v14 = v20 + 1;
        v22 = (char *)*a3;
        v21 = (char *)a3[1];
        if (v21 != *a3)
        {
          do
          {
            v23 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *--v20 = v23;
          }
          while (v21 != v22);
          v21 = (char *)*a3;
        }
        *a3 = v20;
        a3[1] = v14;
        a3[2] = &v19[8 * v18];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v13 = v10;
        v14 = v13 + 1;
      }
      a3[1] = v14;
      if (v6)
      {
        v53 = 0u;
        memset(v54, 0, sizeof(v54));
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        *(_OWORD *)buf = 0u;
        *(_WORD *)&buf[1] = *(_WORD *)(a1 + 146);
        buf[3] = **(_BYTE **)(*i + 8);
        buf[4] = *(_BYTE *)(*(_QWORD *)(*i + 8) + 1);
        v24 = *(_QWORD *)(*i + 8);
        v25 = *(_DWORD *)(v24 + 20);
        v55 = *(__n128 *)(v24 + 4);
        v56 = v25;
        sub_100042F44(&v39, &v55);
        buf[5] = v39.n128_u8[4];
        v26 = *(_QWORD *)(*i + 8);
        v27 = *(_DWORD *)(v26 + 20);
        v55 = *(__n128 *)(v26 + 4);
        v56 = v27;
        sub_100042F44(&v39, &v55);
        buf[6] = v39.n128_u8[5];
        __src[0] = 0;
        __src[1] = 0;
        v28 = *i;
        v55 = *(__n128 *)(*i + 72);
        v56 = *(_DWORD *)(v28 + 88);
        sub_100042F44(&v39, &v55);
        v29 = sub_1000689E4((unsigned __int8 *)&v39, __src);
        buf[7] = v29;
        memcpy(&buf[8], __src, v29);
        sub_10011D7A8(buf, v29 + 8);
      }
    }
    v30 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Cached service hit!", buf, 2u);
    }
    v31 = 0;
  }
  else
  {
LABEL_37:
    v31 = 1;
  }
  sub_100043728(&v36);
  sub_100034234((uint64_t)v37);
  return v31;
}

void sub_1004B2434(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B2480(uint64_t a1, int a2, int a3, void **a4)
{
  uint64_t *i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  __int16 v28;
  void *__p;
  _QWORD *v30;
  uint64_t v31;
  _QWORD v32[2];

  v32[0] = 0;
  v32[1] = 0;
  sub_10003415C((uint64_t)v32, a1 + 8);
  for (i = *(uint64_t **)(a1 + 72); ; ++i)
  {
    if (i == *(uint64_t **)(a1 + 80))
      goto LABEL_30;
    v9 = *i;
    if (**(unsigned __int16 **)(*i + 8) == a2 && *(unsigned __int16 *)(v9 + 48) == a3)
      break;
  }
  if (!*(_BYTE *)(v9 + 128))
  {
LABEL_30:
    v26 = 1;
    goto LABEL_31;
  }
  __p = 0;
  v30 = 0;
  v31 = 0;
  sub_10001FE6C(&__p, v9 + 104);
  v10 = __p;
  if (__p != v30)
  {
    do
    {
      v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v10 + 16))(*v10);
      v12 = v11;
      v14 = (uint64_t *)a4[1];
      v13 = (unint64_t)a4[2];
      if ((unint64_t)v14 >= v13)
      {
        v16 = ((char *)v14 - (_BYTE *)*a4) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          abort();
        v17 = v13 - (_QWORD)*a4;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)sub_10007ABA0((uint64_t)(a4 + 2), v19);
        else
          v20 = 0;
        v21 = (uint64_t *)&v20[8 * v16];
        *v21 = v12;
        v15 = v21 + 1;
        v23 = (char *)*a4;
        v22 = (char *)a4[1];
        if (v22 != *a4)
        {
          do
          {
            v24 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *--v21 = v24;
          }
          while (v22 != v23);
          v22 = (char *)*a4;
        }
        *a4 = v21;
        a4[1] = v15;
        a4[2] = &v20[8 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v14 = v11;
        v15 = v14 + 1;
      }
      a4[1] = v15;
      ++v10;
    }
    while (v10 != v30);
  }
  v25 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
  {
    v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Cached service hit!", (uint8_t *)&v28, 2u);
  }
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  v26 = 0;
LABEL_31:
  sub_100034234((uint64_t)v32);
  return v26;
}

void sub_1004B2678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B26A8(uint64_t a1, unsigned __int8 *a2, int a3, int a4, void **a5)
{
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  BOOL v17;
  char v18;
  NSObject *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  NSObject *v43;
  void *__p;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  _QWORD v48[2];
  _QWORD __src[2];
  __n128 v50;
  uint8_t buf[16];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[26];
  __n128 v66;
  int v67;

  v48[0] = 0;
  v48[1] = 0;
  sub_10003415C((uint64_t)v48, a1 + 8);
  v47 = 0;
  sub_100043758(&v47);
  v10 = sub_10011CDC4();
  if ((v10 & 1) == 0)
    sub_10004339C(&v47);
  v11 = *(uint64_t **)(a1 + 72);
  v12 = *(uint64_t **)(a1 + 80);
  if (v11 == v12)
    goto LABEL_7;
  while (1)
  {
    v13 = *v11;
    if (**(unsigned __int16 **)(*v11 + 8) == a3 && *(unsigned __int16 *)(v13 + 48) == a4)
      break;
    if (++v11 == v12)
      goto LABEL_7;
  }
  v16 = *(unsigned __int8 *)(v13 + 160);
  if (a2)
  {
    v17 = sub_1004B2B08(*v11, a2);
    if (v16)
      v18 = 1;
    else
      v18 = v17;
    if ((v18 & 1) != 0)
      goto LABEL_16;
LABEL_7:
    v14 = 1;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v13 + 160))
    goto LABEL_7;
LABEL_16:
  v19 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Cached characteristics hit!", buf, 2u);
  }
  __p = 0;
  v45 = 0;
  v46 = 0;
  sub_10001FE6C(&__p, v13 + 136);
  v20 = __p;
  if (__p != v45)
  {
    do
    {
      if (!a2
        || (v21 = *v20,
            *(_OWORD *)buf = *(_OWORD *)(*v20 + 76),
            LODWORD(v52) = *(_DWORD *)(v21 + 92),
            sub_100042F44(&v66, (__n128 *)buf),
            sub_100072DF0(v22, a2)))
      {
        v23 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v20 + 16))(*v20);
        v24 = v23;
        v26 = (uint64_t *)a5[1];
        v25 = (unint64_t)a5[2];
        if ((unint64_t)v26 >= v25)
        {
          v28 = ((char *)v26 - (_BYTE *)*a5) >> 3;
          if ((unint64_t)(v28 + 1) >> 61)
            abort();
          v29 = v25 - (_QWORD)*a5;
          v30 = v29 >> 2;
          if (v29 >> 2 <= (unint64_t)(v28 + 1))
            v30 = v28 + 1;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
            v31 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v31 = v30;
          if (v31)
            v32 = (char *)sub_10007ABA0((uint64_t)(a5 + 2), v31);
          else
            v32 = 0;
          v33 = (uint64_t *)&v32[8 * v28];
          *v33 = v24;
          v27 = v33 + 1;
          v35 = (char *)*a5;
          v34 = (char *)a5[1];
          if (v34 != *a5)
          {
            do
            {
              v36 = *((_QWORD *)v34 - 1);
              v34 -= 8;
              *--v33 = v36;
            }
            while (v34 != v35);
            v34 = (char *)*a5;
          }
          *a5 = v33;
          a5[1] = v27;
          a5[2] = &v32[8 * v31];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *v26 = v23;
          v27 = v26 + 1;
        }
        a5[1] = v27;
        if (v10)
        {
          v64 = 0u;
          memset(v65, 0, sizeof(v65));
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          *(_OWORD *)buf = 0u;
          *(_WORD *)&buf[1] = *(_WORD *)(a1 + 146);
          buf[3] = **(_BYTE **)(*v20 + 8);
          buf[4] = *(_BYTE *)(*(_QWORD *)(*v20 + 8) + 1);
          v37 = *(_QWORD *)(*v20 + 8);
          v38 = *(_DWORD *)(v37 + 20);
          v66 = *(__n128 *)(v37 + 4);
          v67 = v38;
          sub_100042F44(&v50, &v66);
          buf[5] = v50.n128_u8[4];
          v39 = *(_QWORD *)(*v20 + 8);
          v40 = *(_DWORD *)(v39 + 20);
          v66 = *(__n128 *)(v39 + 4);
          v67 = v40;
          sub_100042F44(&v50, &v66);
          buf[6] = v50.n128_u8[5];
          __src[0] = 0;
          __src[1] = 0;
          v41 = *v20;
          v66 = *(__n128 *)(*v20 + 76);
          v67 = *(_DWORD *)(v41 + 92);
          sub_100042F44(&v50, &v66);
          v42 = sub_1000689E4((unsigned __int8 *)&v50, __src);
          buf[7] = v42;
          memcpy(&buf[8], __src, v42);
          sub_10011D7A8(buf, v42 + 8);
        }
      }
      ++v20;
    }
    while (v20 != v45);
  }
  v43 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "Cached service hit!", buf, 2u);
  }
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  v14 = 0;
LABEL_8:
  sub_100043728(&v47);
  sub_100034234((uint64_t)v48);
  return v14;
}

void sub_1004B2AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_100043728(&a16);
  sub_100034234((uint64_t)&a17);
  _Unwind_Resume(a1);
}

BOOL sub_1004B2B08(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v6;

  v2 = *(unsigned __int8 **)(a1 + 168);
  v3 = *(unsigned __int8 **)(a1 + 176);
  if (v2 == v3)
  {
    v6 = *(unsigned __int8 **)(a1 + 168);
  }
  else
  {
    while (!sub_100072DF0(v2, a2))
    {
      v2 += 20;
      if (v2 == v3)
      {
        v2 = v3;
        break;
      }
    }
    v6 = v2;
    v2 = *(unsigned __int8 **)(a1 + 176);
  }
  return v6 != v2;
}

uint64_t sub_1004B2B74(uint64_t a1, __int16 a2, uint64_t a3, void **a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[2];
  uint8_t buf[16];
  uint64_t v38;
  __int128 v39;
  int v40;
  __n128 v41;

  v36[0] = 0;
  v36[1] = 0;
  sub_10003415C((uint64_t)v36, a1 + 8);
  v9 = *(_QWORD *)(a1 + 104);
  v8 = a1 + 104;
  v7 = v9;
  if (!v9)
    goto LABEL_38;
  v10 = a2 - 2;
  v11 = v8;
  do
  {
    v12 = *(unsigned __int16 *)(v7 + 32);
    v13 = v12 >= v10;
    if (v12 >= v10)
      v14 = (uint64_t *)v7;
    else
      v14 = (uint64_t *)(v7 + 8);
    if (v13)
      v11 = v7;
    v7 = *v14;
  }
  while (*v14);
  if (v11 == v8)
    goto LABEL_38;
  if (*(unsigned __int16 *)(v11 + 32) > v10)
    goto LABEL_38;
  v15 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 8);
  v16 = *(_DWORD *)(v15 + 20);
  *(_OWORD *)buf = *(_OWORD *)(v15 + 4);
  LODWORD(v38) = v16;
  sub_100042F44(&v41, (__n128 *)buf);
  v40 = 0;
  v39 = xmmword_100741AEC;
  if (!sub_100072DF0((unsigned __int8 *)&v41, (unsigned __int8 *)&v39))
    goto LABEL_38;
  v17 = *(_QWORD *)(v11 + 40);
  if (*(_BYTE *)(v17 + 128))
  {
    v18 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Cached descriptors hit!", buf, 2u);
    }
    memset(buf, 0, sizeof(buf));
    v38 = 0;
    sub_10001FE6C(buf, v17 + 104);
    v19 = *(_QWORD **)buf;
    if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
    {
      do
      {
        v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v19 + 16))(*v19);
        v21 = v20;
        v23 = (uint64_t *)a4[1];
        v22 = (unint64_t)a4[2];
        if ((unint64_t)v23 >= v22)
        {
          v25 = ((char *)v23 - (_BYTE *)*a4) >> 3;
          if ((unint64_t)(v25 + 1) >> 61)
            abort();
          v26 = v22 - (_QWORD)*a4;
          v27 = v26 >> 2;
          if (v26 >> 2 <= (unint64_t)(v25 + 1))
            v27 = v25 + 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v27;
          if (v28)
            v29 = (char *)sub_10007ABA0((uint64_t)(a4 + 2), v28);
          else
            v29 = 0;
          v30 = (uint64_t *)&v29[8 * v25];
          *v30 = v21;
          v24 = v30 + 1;
          v32 = (char *)*a4;
          v31 = (char *)a4[1];
          if (v31 != *a4)
          {
            do
            {
              v33 = *((_QWORD *)v31 - 1);
              v31 -= 8;
              *--v30 = v33;
            }
            while (v31 != v32);
            v31 = (char *)*a4;
          }
          *a4 = v30;
          a4[1] = v24;
          a4[2] = &v29[8 * v28];
          if (v31)
            operator delete(v31);
        }
        else
        {
          *v23 = v20;
          v24 = v23 + 1;
        }
        a4[1] = v24;
        ++v19;
      }
      while (v19 != *(_QWORD **)&buf[8]);
      v19 = *(_QWORD **)buf;
    }
    if (v19)
    {
      *(_QWORD *)&buf[8] = v19;
      operator delete(v19);
    }
    v34 = 0;
  }
  else
  {
LABEL_38:
    v34 = 1;
  }
  sub_100034234((uint64_t)v36);
  return v34;
}

void sub_1004B2DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B2E2C(uint64_t a1, __int128 *a2, uint64_t **a3)
{
  uint64_t *i;
  uint64_t v7;
  int v8;
  NSObject *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD v27[2];
  __int128 v28;
  int v29;
  uint8_t v30[4];
  uint64_t v31;
  __int128 v32;
  int v33;
  __n128 v34;
  int v35;
  __n128 v36;
  int v37;

  v27[0] = 0;
  v27[1] = 0;
  sub_10003415C((uint64_t)v27, a1 + 8);
  for (i = *a3; i != a3[1]; ++i)
  {
    v34 = 0uLL;
    v35 = 0;
    v7 = *(_QWORD *)(*i + 8);
    v8 = *(_DWORD *)(v7 + 20);
    v36 = *(__n128 *)(v7 + 4);
    v37 = v8;
    sub_100042F44(&v34, &v36);
    v33 = 0;
    v32 = xmmword_100741B00;
    if (!sub_100072DF0((unsigned __int8 *)&v34, (unsigned __int8 *)&v32))
    {
      v9 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
        sub_1006F88F4(v30, &v31, v9);
    }
    v29 = 0;
    v28 = xmmword_100741B00;
    if (sub_100072DF0((unsigned __int8 *)&v34, (unsigned __int8 *)&v28))
      sub_1004B30B8(a1, *i);
  }
  if (a2 && !*(_BYTE *)(a1 + 144))
  {
    v10 = *(_QWORD *)(a1 + 136);
    v11 = *(_QWORD *)(a1 + 128);
    if (v11 >= v10)
    {
      v14 = *(_QWORD *)(a1 + 120);
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v14) >> 2);
      v16 = v15 + 1;
      if (v15 + 1 > 0xCCCCCCCCCCCCCCCLL)
        abort();
      v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - v14) >> 2);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      if (v17 >= 0x666666666666666)
        v18 = 0xCCCCCCCCCCCCCCCLL;
      else
        v18 = v16;
      if (v18)
        v19 = (char *)sub_1000B58EC(a1 + 136, v18);
      else
        v19 = 0;
      v20 = &v19[20 * v15];
      v21 = &v19[20 * v18];
      v22 = *a2;
      *((_DWORD *)v20 + 4) = *((_DWORD *)a2 + 4);
      *(_OWORD *)v20 = v22;
      v13 = v20 + 20;
      v24 = *(char **)(a1 + 120);
      v23 = *(char **)(a1 + 128);
      if (v23 != v24)
      {
        do
        {
          v25 = *(_OWORD *)(v23 - 20);
          *((_DWORD *)v20 - 1) = *((_DWORD *)v23 - 1);
          *(_OWORD *)(v20 - 20) = v25;
          v20 -= 20;
          v23 -= 20;
        }
        while (v23 != v24);
        v23 = *(char **)(a1 + 120);
      }
      *(_QWORD *)(a1 + 120) = v20;
      *(_QWORD *)(a1 + 128) = v13;
      *(_QWORD *)(a1 + 136) = v21;
      if (v23)
        operator delete(v23);
    }
    else
    {
      v12 = *a2;
      *(_DWORD *)(v11 + 16) = *((_DWORD *)a2 + 4);
      *(_OWORD *)v11 = v12;
      v13 = (char *)(v11 + 20);
    }
    *(_QWORD *)(a1 + 128) = v13;
  }
  else
  {
    *(_BYTE *)(a1 + 144) = 1;
  }
  return sub_100034234((uint64_t)v27);
}

void sub_1004B3098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B30B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 **v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t **v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t *v32;
  int v33;
  NSObject *v34;
  int v36;
  std::string::size_type v37;
  std::string *v38;
  std::string *p_p;
  _QWORD v40[2];
  std::string __p;
  std::string v42;
  uint8_t buf[4];
  std::string *v44;
  __int16 v45;
  std::string *v46;

  v40[0] = 0;
  v40[1] = 0;
  sub_10003415C((uint64_t)v40, a1 + 8);
  v5 = a1 + 104;
  v4 = *(_QWORD *)(a1 + 104);
  v6 = (unsigned __int16 **)(a2 + 8);
  v7 = **(unsigned __int16 **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v8 = a1 + 104;
  do
  {
    v9 = *(unsigned __int16 *)(v4 + 32);
    v10 = v9 >= v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v5 || v7 < *(unsigned __int16 *)(v8 + 32))
LABEL_12:
    v8 = a1 + 104;
  v13 = *(char **)(a1 + 72);
  v12 = *(char **)(a1 + 80);
  if (v13 == v12)
  {
LABEL_17:
    v16 = 1;
  }
  else
  {
    v14 = *(char **)(a1 + 72);
    while (1)
    {
      v15 = *(_QWORD *)v14;
      if (**(unsigned __int16 **)(*(_QWORD *)v14 + 8) == v7)
        break;
      v14 += 8;
      v13 += 8;
      if (v14 == v12)
        goto LABEL_17;
    }
    if (*(unsigned __int16 *)(v15 + 48) == *(unsigned __int16 *)(a2 + 48))
    {
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)(v15 + 72);
      LODWORD(v42.__r_.__value_.__r.__words[2]) = *(_DWORD *)(v15 + 88);
      sub_100042F44((__n128 *)&__p, (__n128 *)&v42);
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 72);
      LODWORD(v42.__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 88);
      sub_100042F44((__n128 *)buf, (__n128 *)&v42);
      if (sub_100072DF0((unsigned __int8 *)&__p, buf))
      {
        LOBYTE(v16) = 0;
        goto LABEL_46;
      }
    }
    v17 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      sub_1005BAE8C(*(_QWORD **)v14, &v42);
      v36 = SHIBYTE(v42.__r_.__value_.__r.__words[2]);
      v37 = v42.__r_.__value_.__r.__words[0];
      sub_1005BAE8C((_QWORD *)a2, &__p);
      v38 = &v42;
      if (v36 < 0)
        v38 = (std::string *)v37;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446466;
      v44 = v38;
      v45 = 2082;
      v46 = p_p;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Service changed while cached (was: \"%{public}s\", now: \"%{public}s\") - removing it", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
    }
    sub_1004B5A44(a1, v13);
    v16 = 0;
  }
  v18 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v19 = *(_QWORD *)(a1 + 88);
  v20 = *(uint64_t ***)(a1 + 80);
  if ((unint64_t)v20 >= v19)
  {
    v22 = *(_QWORD *)(a1 + 72);
    v23 = ((uint64_t)v20 - v22) >> 3;
    if ((unint64_t)(v23 + 1) >> 61)
      abort();
    v24 = v19 - v22;
    v25 = v24 >> 2;
    if (v24 >> 2 <= (unint64_t)(v23 + 1))
      v25 = v23 + 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    if (v26)
      v27 = (char *)sub_10007ABA0(a1 + 88, v26);
    else
      v27 = 0;
    v28 = (uint64_t **)&v27[8 * v23];
    v29 = &v27[8 * v26];
    *v28 = v18;
    v21 = v28 + 1;
    v31 = *(char **)(a1 + 72);
    v30 = *(char **)(a1 + 80);
    if (v30 != v31)
    {
      do
      {
        v32 = (uint64_t *)*((_QWORD *)v30 - 1);
        v30 -= 8;
        *--v28 = v32;
      }
      while (v30 != v31);
      v30 = *(char **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 72) = v28;
    *(_QWORD *)(a1 + 80) = v21;
    *(_QWORD *)(a1 + 88) = v29;
    if (v30)
      operator delete(v30);
  }
  else
  {
    *v20 = v18;
    v21 = v20 + 1;
  }
  *(_QWORD *)(a1 + 80) = v21;
  LOWORD(__p.__r_.__value_.__l.__data_) = **v6;
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  sub_1002BB704((uint64_t **)(a1 + 96), (unsigned __int16 *)&__p, (uint64_t)&unk_100740F58, &v42)[5] = v18;
  if (v8 == v5)
    v33 = 0;
  else
    v33 = v16;
  if (v33 == 1)
  {
    v34 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      sub_1006F8934(v6, v34);
    LOWORD(v42.__r_.__value_.__l.__data_) = **v6;
    sub_100394984(a1 + 96, (unsigned __int16 *)&v42);
    return sub_100034234((uint64_t)v40);
  }
LABEL_46:
  if ((v16 & 1) == 0 && v8 == v5 && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
  {
    sub_1005BAE8C((_QWORD *)a2, &v42);
    sub_1006F89B0();
  }
  return sub_100034234((uint64_t)v40);
}

void sub_1004B3494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B34E4(_QWORD *a1, uint64_t **a2, unsigned int a3, unsigned int a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t i;
  NSObject *v15;
  uint64_t *v16;
  uint64_t *j;
  uint64_t v18;
  _QWORD v20[2];
  __n128 v21;
  int v22;
  __int128 v23;
  int v24;
  uint8_t v25[4];
  uint64_t v26;
  __int128 v27;
  int v28;
  __n128 v29;
  int v30;
  __n128 buf;
  int v32;

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, (uint64_t)(a1 + 1));
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      v10 = *v8;
      v29 = 0uLL;
      v30 = 0;
      v11 = *(_QWORD *)(v10 + 8);
      v12 = *(_DWORD *)(v11 + 20);
      buf = *(__n128 *)(v11 + 4);
      v32 = v12;
      sub_100042F44(&v29, &buf);
      v28 = 0;
      v27 = xmmword_100741B14;
      if (!sub_100072DF0((unsigned __int8 *)&v29, (unsigned __int8 *)&v27))
      {
        v13 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
          sub_1006F89F8(v25, &v26, v13);
      }
      v24 = 0;
      v23 = xmmword_100741B14;
      if (sub_100072DF0((unsigned __int8 *)&v29, (unsigned __int8 *)&v23))
      {
        sub_1004B3804(a1, v10);
        for (i = a1[9]; ; i += 8)
        {
          if (i == a1[10])
          {
            v15 = qword_100999820;
            if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
            {
              buf.n128_u16[0] = 0;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Adding New Service Declaration For An Recently Discovered Included Service", (uint8_t *)&buf, 2u);
            }
            v21 = 0uLL;
            v22 = 0;
            buf = *(__n128 *)(v10 + 76);
            v32 = *(_DWORD *)(v10 + 92);
            sub_100042F44(&v21, &buf);
            operator new();
          }
          if (**(unsigned __int16 **)(*(_QWORD *)i + 8) == *(unsigned __int16 *)(v10 + 72))
            break;
        }
      }
      ++v8;
    }
    while (v8 != v9);
  }
  v16 = (uint64_t *)a1[9];
  for (j = (uint64_t *)a1[10]; v16 != j; ++v16)
  {
    v18 = *v16;
    if (**(unsigned __int16 **)(*v16 + 8) >= a3 && *(unsigned __int16 *)(v18 + 48) <= a4)
      *(_BYTE *)(v18 + 128) = 1;
  }
  return sub_100034234((uint64_t)v20);
}

void sub_1004B37DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004B3804(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t **v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  _QWORD **v12;
  _QWORD **v13;
  NSObject *v14;
  int v15;
  std::string::size_type v16;
  std::string *v17;
  std::string *p_p;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  uint64_t *v23;
  NSObject *v24;
  _BOOL4 v25;
  _WORD *v26;
  int v27;
  int v29;
  int v30;
  std::string::size_type v31;
  std::string *v32;
  std::string *p_buf;
  std::string v34;
  _QWORD v35[2];
  std::string buf;
  uint8_t v37[4];
  std::string *v38;
  __int16 v39;
  std::string *v40;
  std::string __p;

  v35[0] = 0;
  v35[1] = 0;
  sub_10003415C((uint64_t)v35, (uint64_t)(a1 + 1));
  v5 = a1 + 13;
  v4 = a1[13];
  v6 = (uint64_t **)(a1 + 12);
  v7 = **(unsigned __int16 **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v8 = a1 + 13;
  do
  {
    v9 = *(unsigned __int16 *)(v4 + 32);
    v10 = v9 >= v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (v10)
      v8 = (_QWORD *)v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v5 || v7 < *((unsigned __int16 *)v8 + 16))
LABEL_12:
    v8 = a1 + 13;
  v13 = (_QWORD **)a1[9];
  v12 = (_QWORD **)a1[10];
  if (v13 != v12)
  {
    while (v7 <= *(unsigned __int16 *)(*v13)[1] || v7 > *((unsigned __int16 *)*v13 + 24))
    {
      if (++v13 == v12)
        goto LABEL_33;
    }
  }
  if (v13 == v12)
  {
LABEL_33:
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      sub_1005BAE8C((_QWORD *)a2, &v34);
      sub_1006F8A80();
    }
    v21 = 0;
    goto LABEL_45;
  }
  v14 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
  {
    sub_1005BAE8C(*v13, &v34);
    v15 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
    v16 = v34.__r_.__value_.__r.__words[0];
    sub_1005BAE8C((_QWORD *)a2, &__p);
    v17 = &v34;
    if (v15 < 0)
      v17 = (std::string *)v16;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Found service \"%{public}s\" for included service \"%{public}s\"", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  memset(&v34, 0, sizeof(v34));
  sub_10001FE6C(&v34, (uint64_t)(*v13 + 13));
  v19 = (uint64_t *)v34.__r_.__value_.__r.__words[0];
  if (v34.__r_.__value_.__r.__words[0] == v34.__r_.__value_.__l.__size_)
  {
LABEL_32:
    v21 = 0;
  }
  else
  {
    while (1)
    {
      v20 = *v19;
      if (**(unsigned __int16 **)(*v19 + 8) == **(unsigned __int16 **)(a2 + 8))
        break;
      if (++v19 == (uint64_t *)v34.__r_.__value_.__l.__size_)
        goto LABEL_32;
    }
    if (*(unsigned __int16 *)(v20 + 72) == *(unsigned __int16 *)(a2 + 72)
      && *(unsigned __int16 *)(v20 + 74) == *(unsigned __int16 *)(a2 + 74))
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v20 + 76);
      LODWORD(__p.__r_.__value_.__r.__words[2]) = *(_DWORD *)(v20 + 92);
      sub_100042F44((__n128 *)&buf, (__n128 *)&__p);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 76);
      LODWORD(__p.__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 92);
      sub_100042F44((__n128 *)v37, (__n128 *)&__p);
      if (sub_100072DF0((unsigned __int8 *)&buf, v37))
      {
        v21 = 1;
        goto LABEL_43;
      }
    }
    v22 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      sub_1005BAE8C((_QWORD *)*v19, &__p);
      v30 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v31 = __p.__r_.__value_.__r.__words[0];
      sub_1005BAE8C((_QWORD *)a2, &buf);
      v32 = &__p;
      if (v30 < 0)
        v32 = (std::string *)v31;
      p_buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      *(_DWORD *)v37 = 136446466;
      v38 = v32;
      v39 = 2082;
      v40 = p_buf;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Included service changed while cached (was: \"%{public}s\", now: \"%{public}s\") - removing it", v37, 0x16u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = **(_WORD **)(a2 + 8);
    sub_100394984((uint64_t)v6, (unsigned __int16 *)&__p);
    sub_1002E5FEC(*v13, *v19);
    v21 = 1;
  }
  v23 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_1003EFE2C(*v13, (uint64_t)v23);
  LOWORD(buf.__r_.__value_.__l.__data_) = **(_WORD **)(a2 + 8);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  sub_1002BB704(v6, (unsigned __int16 *)&buf, (uint64_t)&unk_100740F58, &__p)[5] = v23;
LABEL_43:
  if (v34.__r_.__value_.__r.__words[0])
  {
    v34.__r_.__value_.__l.__size_ = v34.__r_.__value_.__r.__words[0];
    operator delete(v34.__r_.__value_.__l.__data_);
  }
LABEL_45:
  if ((v21 & 1) != 0 || v8 == v5)
  {
    if (v8 == v5)
      v27 = v21;
    else
      v27 = 0;
    if (v27 == 1 && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
    {
      sub_1005BAE8C((_QWORD *)a2, &__p);
      sub_1006F8A38();
    }
  }
  else
  {
    v24 = qword_100999820;
    v25 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT);
    v26 = *(_WORD **)(a2 + 8);
    if (v25)
    {
      v29 = (unsigned __int16)*v26;
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v29;
      _os_log_fault_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Found orphaned handle 0x%04x in handle map", (uint8_t *)&__p, 8u);
      v26 = *(_WORD **)(a2 + 8);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = *v26;
    sub_100394984((uint64_t)v6, (unsigned __int16 *)&__p);
  }
  return sub_100034234((uint64_t)v35);
}

void sub_1004B3CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B3D64(_QWORD *a1, __int128 *a2, uint64_t **a3, unsigned int a4, unsigned int a5)
{
  uint64_t *i;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t *j;
  uint64_t *v15;
  uint64_t v16;
  _QWORD v18[2];
  __int128 v19;
  int v20;
  uint8_t v21[4];
  uint64_t v22;
  __int128 v23;
  int v24;
  __n128 v25;
  int v26;
  __n128 v27;
  int v28;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, (uint64_t)(a1 + 1));
  for (i = *a3; i != a3[1]; ++i)
  {
    v25 = 0uLL;
    v26 = 0;
    v11 = *(_QWORD *)(*i + 8);
    v12 = *(_DWORD *)(v11 + 20);
    v27 = *(__n128 *)(v11 + 4);
    v28 = v12;
    sub_100042F44(&v25, &v27);
    v24 = 0;
    v23 = xmmword_100741AEC;
    if (!sub_100072DF0((unsigned __int8 *)&v25, (unsigned __int8 *)&v23))
    {
      v13 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
        sub_1006F8AC8(v21, &v22, v13);
    }
    v20 = 0;
    v19 = xmmword_100741AEC;
    if (sub_100072DF0((unsigned __int8 *)&v25, (unsigned __int8 *)&v19))
      sub_1004B3F3C(a1, *i);
  }
  v15 = (uint64_t *)a1[9];
  for (j = (uint64_t *)a1[10]; v15 != j; ++v15)
  {
    v16 = *v15;
    if (**(unsigned __int16 **)(*v15 + 8) >= a4 && *(unsigned __int16 *)(v16 + 48) <= a5)
    {
      if (a2)
      {
        sub_1004B4498((_QWORD *)v16, a2);
        j = (uint64_t *)a1[10];
      }
      else
      {
        *(_BYTE *)(v16 + 160) = 1;
      }
    }
  }
  return sub_100034234((uint64_t)v18);
}

void sub_1004B3F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B3F3C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t **v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  _QWORD **v12;
  _QWORD **v13;
  NSObject *v14;
  int v15;
  std::string::size_type v16;
  std::string *v17;
  std::string *p_p;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  uint64_t *v23;
  NSObject *v24;
  _BOOL4 v25;
  _WORD *v26;
  int v27;
  int v29;
  int v30;
  std::string::size_type v31;
  std::string *v32;
  std::string *p_buf;
  std::string v34;
  _QWORD v35[2];
  std::string buf;
  uint8_t v37[4];
  std::string *v38;
  __int16 v39;
  std::string *v40;
  std::string __p;

  v35[0] = 0;
  v35[1] = 0;
  sub_10003415C((uint64_t)v35, (uint64_t)(a1 + 1));
  v5 = a1 + 13;
  v4 = a1[13];
  v6 = (uint64_t **)(a1 + 12);
  v7 = **(unsigned __int16 **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v8 = a1 + 13;
  do
  {
    v9 = *(unsigned __int16 *)(v4 + 32);
    v10 = v9 >= v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (v10)
      v8 = (_QWORD *)v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v5 || v7 < *((unsigned __int16 *)v8 + 16))
LABEL_12:
    v8 = a1 + 13;
  v13 = (_QWORD **)a1[9];
  v12 = (_QWORD **)a1[10];
  if (v13 != v12)
  {
    while (v7 <= *(unsigned __int16 *)(*v13)[1] || v7 > *((unsigned __int16 *)*v13 + 24))
    {
      if (++v13 == v12)
        goto LABEL_33;
    }
  }
  if (v13 == v12)
  {
LABEL_33:
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      sub_1005BAE8C((_QWORD *)a2, &v34);
      sub_1006F8B08();
    }
    v21 = 0;
    goto LABEL_45;
  }
  v14 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
  {
    sub_1005BAE8C(*v13, &v34);
    v15 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
    v16 = v34.__r_.__value_.__r.__words[0];
    sub_1005BAE8C((_QWORD *)a2, &__p);
    v17 = &v34;
    if (v15 < 0)
      v17 = (std::string *)v16;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Found service \"%{public}s\" for characteristic \"%{public}s\"", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  memset(&v34, 0, sizeof(v34));
  sub_10001FE6C(&v34, (uint64_t)(*v13 + 17));
  v19 = (uint64_t *)v34.__r_.__value_.__r.__words[0];
  if (v34.__r_.__value_.__r.__words[0] == v34.__r_.__value_.__l.__size_)
  {
LABEL_32:
    v21 = 0;
  }
  else
  {
    while (1)
    {
      v20 = *v19;
      if (**(unsigned __int16 **)(*v19 + 8) == **(unsigned __int16 **)(a2 + 8))
        break;
      if (++v19 == (uint64_t *)v34.__r_.__value_.__l.__size_)
        goto LABEL_32;
    }
    if (*(unsigned __int16 *)(v20 + 74) == *(unsigned __int16 *)(a2 + 74))
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v20 + 76);
      LODWORD(__p.__r_.__value_.__r.__words[2]) = *(_DWORD *)(v20 + 92);
      sub_100042F44((__n128 *)&buf, (__n128 *)&__p);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 76);
      LODWORD(__p.__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 92);
      sub_100042F44((__n128 *)v37, (__n128 *)&__p);
      if (sub_100072DF0((unsigned __int8 *)&buf, v37)
        && *(unsigned __int8 *)(*v19 + 72) == *(unsigned __int8 *)(a2 + 72))
      {
        v21 = 1;
        goto LABEL_43;
      }
    }
    v22 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      sub_1005BAE8C((_QWORD *)*v19, &__p);
      v30 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v31 = __p.__r_.__value_.__r.__words[0];
      sub_1005BAE8C((_QWORD *)a2, &buf);
      v32 = &__p;
      if (v30 < 0)
        v32 = (std::string *)v31;
      p_buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      *(_DWORD *)v37 = 136446466;
      v38 = v32;
      v39 = 2082;
      v40 = p_buf;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Characteristic changed while cached (was: \"%{public}s\", now: \"%{public}s\") - removing it", v37, 0x16u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_1004B5C04((uint64_t)a1, *v13, *v19);
    v21 = 1;
  }
  v23 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  sub_1003EF428(*v13, (uint64_t)v23);
  LOWORD(buf.__r_.__value_.__l.__data_) = **(_WORD **)(a2 + 8);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  sub_1002BB704(v6, (unsigned __int16 *)&buf, (uint64_t)&unk_100740F58, &__p)[5] = v23;
LABEL_43:
  if (v34.__r_.__value_.__r.__words[0])
  {
    v34.__r_.__value_.__l.__size_ = v34.__r_.__value_.__r.__words[0];
    operator delete(v34.__r_.__value_.__l.__data_);
  }
LABEL_45:
  if ((v21 & 1) != 0 || v8 == v5)
  {
    if (v8 == v5)
      v27 = v21;
    else
      v27 = 0;
    if (v27 == 1 && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
    {
      sub_1005BAE8C((_QWORD *)a2, &__p);
      sub_1006F8A38();
    }
  }
  else
  {
    v24 = qword_100999820;
    v25 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT);
    v26 = *(_WORD **)(a2 + 8);
    if (v25)
    {
      v29 = (unsigned __int16)*v26;
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v29;
      _os_log_fault_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Found orphaned handle 0x%04x in handle map", (uint8_t *)&__p, 8u);
      v26 = *(_WORD **)(a2 + 8);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = *v26;
    sub_100394984((uint64_t)v6, (unsigned __int16 *)&__p);
  }
  return sub_100034234((uint64_t)v35);
}

void sub_1004B4414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1004B4498(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;

  v6 = a1[23];
  v4 = (uint64_t)(a1 + 23);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = a1[21];
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v10) >> 2);
    v12 = v11 + 1;
    if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL)
      abort();
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v10) >> 2);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x666666666666666)
      v14 = 0xCCCCCCCCCCCCCCCLL;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)sub_1000B58EC(v4, v14);
    else
      v15 = 0;
    v16 = &v15[20 * v11];
    v17 = &v15[20 * v14];
    v18 = *a2;
    *((_DWORD *)v16 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v16 = v18;
    v9 = v16 + 20;
    v20 = (char *)a1[21];
    v19 = (char *)a1[22];
    if (v19 != v20)
    {
      do
      {
        v21 = *(_OWORD *)(v19 - 20);
        *((_DWORD *)v16 - 1) = *((_DWORD *)v19 - 1);
        *(_OWORD *)(v16 - 20) = v21;
        v16 -= 20;
        v19 -= 20;
      }
      while (v19 != v20);
      v19 = (char *)a1[21];
    }
    a1[21] = v16;
    a1[22] = v9;
    a1[23] = v17;
    if (v19)
      operator delete(v19);
  }
  else
  {
    v8 = *a2;
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v7 = v8;
    v9 = (char *)(v7 + 20);
  }
  a1[22] = v9;
}

uint64_t sub_1004B45B8(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 8);
  sub_1004B4628(a1, a2, a3);
  return sub_100034234((uint64_t)v7);
}

void sub_1004B4614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B4628(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD **v6;
  _QWORD **v7;
  unsigned int v8;
  NSObject *v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  std::string::size_type v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::string v19;
  _QWORD v20[2];
  std::string __p;
  uint8_t buf[4];
  std::string *v23;
  __int16 v24;
  std::string *v25;

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 8);
  v7 = *(_QWORD ***)(a1 + 72);
  v6 = *(_QWORD ***)(a1 + 80);
  if (v7 != v6)
  {
    v8 = **(unsigned __int16 **)(a2 + 8);
    while (v8 <= *(unsigned __int16 *)(*v7)[1] || v8 > *((unsigned __int16 *)*v7 + 24))
    {
      if (++v7 == v6)
        goto LABEL_24;
    }
  }
  if (v7 == v6)
  {
LABEL_24:
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      sub_1005BAE8C((_QWORD *)a2, &v19);
      sub_1006F8B50();
    }
  }
  else
  {
    v9 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
    {
      sub_1005BAE8C(*v7, &v19);
      v10 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
      v11 = v19.__r_.__value_.__r.__words[0];
      sub_1005BAE8C((_QWORD *)a2, &__p);
      v12 = &v19;
      if (v10 < 0)
        v12 = (std::string *)v11;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446466;
      v23 = v12;
      v24 = 2082;
      v25 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Found service \"%{public}s\" for value \"%{public}s\"", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
    }
    memset(&v19, 0, sizeof(v19));
    sub_10001FE6C(&v19, (uint64_t)(*v7 + 17));
    v14 = v19.__r_.__value_.__r.__words[0];
    if (v19.__r_.__value_.__r.__words[0] == v19.__r_.__value_.__l.__size_)
    {
LABEL_21:
      if (a3 && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      {
        sub_1005BAE8C((_QWORD *)a2, &__p);
        sub_1006F8B98();
      }
    }
    else
    {
      while (**(unsigned __int16 **)(a2 + 8) - 1 != **(unsigned __int16 **)(*(_QWORD *)v14 + 8))
      {
        v14 += 8;
        if (v14 == v19.__r_.__value_.__l.__size_)
          goto LABEL_21;
      }
      v15 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v16 = *(_QWORD *)v14;
      v17 = *(_QWORD *)(v16 + 96);
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      *(_QWORD *)(v16 + 96) = v15;
      *(_WORD *)buf = **(_WORD **)(a2 + 8);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      sub_1002BB704((uint64_t **)(a1 + 96), (unsigned __int16 *)buf, (uint64_t)&unk_100740F58, &__p)[5] = v15;
    }
    if (v19.__r_.__value_.__r.__words[0])
    {
      v19.__r_.__value_.__l.__size_ = v19.__r_.__value_.__r.__words[0];
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  return sub_100034234((uint64_t)v20);
}

void sub_1004B48F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B4948(_QWORD *a1, uint64_t **a2, __int16 a3)
{
  uint64_t *i;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int16 v10;
  _QWORD *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  _QWORD v18[2];
  __int128 v19;
  int v20;
  __n128 v21;
  __n128 v22;
  int v23;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, (uint64_t)(a1 + 1));
  for (i = *a2; i != a2[1]; ++i)
    sub_1004B4A98(a1, *i);
  v9 = a1[13];
  v8 = a1 + 13;
  v7 = v9;
  if (v9)
  {
    v10 = a3 - 2;
    v11 = v8;
    do
    {
      v12 = *(unsigned __int16 *)(v7 + 32);
      v13 = v12 >= v10;
      if (v12 >= v10)
        v14 = (uint64_t *)v7;
      else
        v14 = (uint64_t *)(v7 + 8);
      if (v13)
        v11 = (_QWORD *)v7;
      v7 = *v14;
    }
    while (*v14);
    if (v11 != v8 && *((unsigned __int16 *)v11 + 16) <= v10)
    {
      v15 = *(_QWORD *)(v11[5] + 8);
      v16 = *(_DWORD *)(v15 + 20);
      v22 = *(__n128 *)(v15 + 4);
      v23 = v16;
      sub_100042F44(&v21, &v22);
      v20 = 0;
      v19 = xmmword_100741AEC;
      if (sub_100072DF0((unsigned __int8 *)&v21, (unsigned __int8 *)&v19))
        *(_BYTE *)(v11[5] + 128) = 1;
    }
  }
  return sub_100034234((uint64_t)v18);
}

void sub_1004B4A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B4A98(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t **v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  _QWORD **v12;
  _QWORD **v13;
  NSObject *v14;
  int v15;
  std::string::size_type v16;
  std::string *p_p;
  std::string *v18;
  _QWORD **v19;
  void *v20;
  uint64_t *v21;
  unsigned __int16 *v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  uint64_t *v28;
  int v29;
  std::string::size_type v30;
  std::string *p_buf;
  std::string *v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  __int16 v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  uint64_t *v43;
  unsigned __int16 v44;
  _QWORD *v45;
  unsigned int v46;
  BOOL v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  NSObject *v51;
  _BOOL4 v52;
  _WORD *v53;
  int v54;
  int v56;
  uint64_t *v57;
  std::string __p;
  _QWORD v59[2];
  __int128 v60;
  int v61;
  std::string v62;
  std::string buf;
  uint8_t v64[4];
  std::string *v65;
  __int16 v66;
  std::string *v67;
  std::string v68;

  v59[0] = 0;
  v59[1] = 0;
  sub_10003415C((uint64_t)v59, (uint64_t)(a1 + 1));
  v5 = a1 + 13;
  v4 = a1[13];
  v6 = (uint64_t **)(a1 + 12);
  v7 = **(unsigned __int16 **)(a2 + 8);
  if (!v4)
    goto LABEL_12;
  v8 = a1 + 13;
  do
  {
    v9 = *(unsigned __int16 *)(v4 + 32);
    v10 = v9 >= v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (v10)
      v8 = (_QWORD *)v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v5 || v7 < *((unsigned __int16 *)v8 + 16))
LABEL_12:
    v8 = a1 + 13;
  v13 = (_QWORD **)a1[9];
  v12 = (_QWORD **)a1[10];
  if (v13 != v12)
  {
    while (v7 <= *(unsigned __int16 *)(*v13)[1] || v7 > *((unsigned __int16 *)*v13 + 24))
    {
      if (++v13 == v12)
        goto LABEL_52;
    }
  }
  if (v13 == v12)
  {
LABEL_52:
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      sub_1005BAE8C((_QWORD *)a2, &__p);
      sub_1006F8C28();
    }
    v33 = 0;
    goto LABEL_92;
  }
  v14 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
  {
    sub_1005BAE8C(*v13, &__p);
    v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v16 = __p.__r_.__value_.__r.__words[0];
    sub_1005BAE8C((_QWORD *)a2, &v68);
    p_p = &__p;
    if (v15 < 0)
      p_p = (std::string *)v16;
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v68;
    else
      v18 = (std::string *)v68.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Found service \"%{public}s\" for descriptor \"%{public}s\"", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  sub_10001FE6C(&__p, (uint64_t)(*v13 + 17));
  v19 = (_QWORD **)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    while (1)
    {
      memset(&v68, 0, sizeof(v68));
      sub_10001FE6C(&v68, (uint64_t)(*v19 + 13));
      v20 = (void *)v68.__r_.__value_.__r.__words[0];
      if (v68.__r_.__value_.__r.__words[0] != v68.__r_.__value_.__l.__size_)
        break;
LABEL_34:
      v23 = 1;
      if (v68.__r_.__value_.__r.__words[0])
        goto LABEL_35;
LABEL_36:
      if ((v23 & 1) == 0)
      {
        v33 = 1;
        goto LABEL_90;
      }
      if (++v19 == (_QWORD **)__p.__r_.__value_.__l.__size_)
        goto LABEL_55;
    }
    v21 = (uint64_t *)v68.__r_.__value_.__r.__words[0];
    while (1)
    {
      v22 = *(unsigned __int16 **)(*v21 + 8);
      if (*v22 == **(unsigned __int16 **)(a2 + 8))
        break;
      if (++v21 == (uint64_t *)v68.__r_.__value_.__l.__size_)
        goto LABEL_34;
    }
    v24 = *(_OWORD *)(v22 + 2);
    LODWORD(buf.__r_.__value_.__r.__words[2]) = *((_DWORD *)v22 + 5);
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v24;
    sub_100042F44((__n128 *)&v62, (__n128 *)&buf);
    v25 = *(_QWORD *)(a2 + 8);
    v26 = *(_DWORD *)(v25 + 20);
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)(v25 + 4);
    LODWORD(buf.__r_.__value_.__r.__words[2]) = v26;
    sub_100042F44((__n128 *)v64, (__n128 *)&buf);
    if (!sub_100072DF0((unsigned __int8 *)&v62, v64))
    {
      v27 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      {
        sub_1005BAE8C((_QWORD *)*v21, &buf);
        v29 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
        v30 = buf.__r_.__value_.__r.__words[0];
        sub_1005BAE8C((_QWORD *)a2, &v62);
        p_buf = &buf;
        if (v29 < 0)
          p_buf = (std::string *)v30;
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &v62;
        else
          v32 = (std::string *)v62.__r_.__value_.__r.__words[0];
        *(_DWORD *)v64 = 136446466;
        v65 = p_buf;
        v66 = 2082;
        v67 = v32;
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Replacing cached descriptor \"%{public}s\" with descriptor of different type \"%{public}s\"", v64, 0x16u);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    sub_1002E5FEC(*v19, *v21);
    v28 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_1003EFE2C(*v19, (uint64_t)v28);
    LOWORD(v62.__r_.__value_.__l.__data_) = **(_WORD **)(a2 + 8);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
    v23 = 0;
    sub_1002BB704(v6, (unsigned __int16 *)&v62, (uint64_t)&unk_100740F58, &buf)[5] = v28;
    v20 = (void *)v68.__r_.__value_.__r.__words[0];
    if (!v68.__r_.__value_.__r.__words[0])
      goto LABEL_36;
LABEL_35:
    v68.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
    operator delete(v20);
    goto LABEL_36;
  }
LABEL_55:
  v34 = **(unsigned __int16 **)(a2 + 8);
  v35 = v34 - 1;
  v36 = *(unsigned __int16 *)(*v13)[1];
  if (v36 >= (unsigned __int16)(v34 - 1))
    goto LABEL_89;
  while (1)
  {
    v37 = v34;
    v34 = v35;
    v38 = *v5;
    if (*v5)
      break;
    if ((unsigned __int16)v36 + 1 < (unsigned __int16)v34)
      goto LABEL_87;
LABEL_84:
    v35 = v34 - 1;
    if ((unsigned __int16)(v34 - 1) <= (unsigned __int16)v36)
      goto LABEL_89;
  }
  v39 = v5;
  v40 = *v5;
  do
  {
    v41 = *(unsigned __int16 *)(v40 + 32);
    v42 = v41 >= (unsigned __int16)v34;
    if (v41 >= (unsigned __int16)v34)
      v43 = (uint64_t *)v40;
    else
      v43 = (uint64_t *)(v40 + 8);
    if (v42)
      v39 = (_QWORD *)v40;
    v40 = *v43;
  }
  while (*v43);
  if (v39 != v5 && *((unsigned __int16 *)v39 + 16) <= (unsigned __int16)v34)
  {
    v49 = *(_QWORD *)(v39[5] + 8);
    v50 = *(_DWORD *)(v49 + 20);
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = *(_OWORD *)(v49 + 4);
    LODWORD(v68.__r_.__value_.__r.__words[2]) = v50;
    sub_100042F44((__n128 *)&buf, (__n128 *)&v68);
    v61 = 0;
    v60 = xmmword_100741AEC;
    if (sub_100072DF0((unsigned __int8 *)&buf, (unsigned __int8 *)&v60))
    {
      v57 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      sub_1003EFE2C((_QWORD *)v39[5], (uint64_t)v57);
      LOWORD(buf.__r_.__value_.__l.__data_) = **(_WORD **)(a2 + 8);
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
      v33 = 0;
      sub_1002BB704(v6, (unsigned __int16 *)&buf, (uint64_t)&unk_100740F58, &v68)[5] = v57;
      goto LABEL_90;
    }
    LOWORD(v36) = *(_WORD *)(*v13)[1];
    goto LABEL_84;
  }
  if ((unsigned __int16)v36 + 1 >= (unsigned __int16)v34)
    goto LABEL_84;
  if (v38)
  {
    v44 = v37 - 2;
    v45 = v5;
    do
    {
      v46 = *(unsigned __int16 *)(v38 + 32);
      v47 = v46 >= v44;
      if (v46 >= v44)
        v48 = (uint64_t *)v38;
      else
        v48 = (uint64_t *)(v38 + 8);
      if (v47)
        v45 = (_QWORD *)v38;
      v38 = *v48;
    }
    while (*v48);
    if (v45 != v5 && *((unsigned __int16 *)v45 + 16) <= v44)
      goto LABEL_84;
  }
LABEL_87:
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
  {
    sub_1005BAE8C((_QWORD *)a2, &v68);
    sub_1006F8C70();
  }
LABEL_89:
  v33 = 0;
LABEL_90:
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_92:
  if ((v33 & 1) != 0 || v8 == v5)
  {
    if (v8 == v5)
      v54 = v33;
    else
      v54 = 0;
    if (v54 == 1 && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
    {
      sub_1005BAE8C((_QWORD *)a2, &buf);
      sub_1006F8BE0();
    }
  }
  else
  {
    v51 = qword_100999820;
    v52 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT);
    v53 = *(_WORD **)(a2 + 8);
    if (v52)
    {
      v56 = (unsigned __int16)*v53;
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v56;
      _os_log_fault_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_FAULT, "Found orphaned handle 0x%04x in handle map", (uint8_t *)&buf, 8u);
      v53 = *(_WORD **)(a2 + 8);
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = *v53;
    sub_100394984((uint64_t)v6, (unsigned __int16 *)&buf);
  }
  return sub_100034234((uint64_t)v59);
}

void sub_1004B5188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B5234(_QWORD *a1, uint64_t a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, (uint64_t)(a1 + 1));
  sub_1004B4A98(a1, a2);
  return sub_100034234((uint64_t)v5);
}

void sub_1004B5280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1004B5294(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD v13[2];
  unsigned __int16 v14;
  unsigned __int16 *v15;

  v14 = a2;
  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 8);
  v6 = *(_QWORD *)(a1 + 104);
  v5 = a1 + 104;
  v4 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = v5;
  do
  {
    v8 = *(unsigned __int16 *)(v4 + 32);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 != v5 && *(unsigned __int16 *)(v7 + 32) <= a2)
  {
    v15 = &v14;
    v11 = sub_1002BB704((uint64_t **)(v5 - 8), &v14, (uint64_t)&unk_100740F58, &v15)[5];
  }
  else
  {
LABEL_12:
    v11 = 0;
  }
  sub_100034234((uint64_t)v13);
  return v11;
}

void sub_1004B5348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B535C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _BOOL4 v11;
  char v12;
  _QWORD v14[2];
  __n128 v15;
  __n128 v16;
  uint64_t v17;
  __n128 v18;
  int v19;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 8);
  v7 = *(uint64_t **)(a1 + 72);
  if (v7 != *(uint64_t **)(a1 + 80))
  {
    while (1)
    {
      v8 = *v7;
      v16 = *(__n128 *)(*v7 + 72);
      LODWORD(v17) = *(_DWORD *)(v8 + 88);
      sub_100042F44(&v18, &v16);
      if (sub_100072DF0((unsigned __int8 *)&v18, a2))
        break;
LABEL_14:
      if (++v7 == *(uint64_t **)(a1 + 80))
        goto LABEL_15;
    }
    if (!*a3)
    {
      v3 = *v7;
      goto LABEL_16;
    }
    v16 = 0uLL;
    v17 = 0;
    sub_10001FE6C(&v16, *v7 + 136);
    v9 = (char *)v16.n128_u64[0];
    if (v16.n128_u64[0] == v16.n128_u64[1])
    {
      v12 = 1;
      if (v16.n128_u64[0])
      {
LABEL_12:
        v16.n128_u64[1] = (unint64_t)v9;
        operator delete(v9);
      }
    }
    else
    {
      while (1)
      {
        v10 = *(_QWORD *)v9;
        v18 = *(__n128 *)(*(_QWORD *)v9 + 76);
        v19 = *(_DWORD *)(v10 + 92);
        sub_100042F44(&v15, &v18);
        v11 = sub_100072DF0((unsigned __int8 *)&v15, a3);
        if (v11)
          break;
        v9 += 8;
        if (v9 == (char *)v16.n128_u64[1])
          goto LABEL_11;
      }
      v3 = *(_QWORD *)v9;
LABEL_11:
      v12 = !v11;
      v9 = (char *)v16.n128_u64[0];
      if (v16.n128_u64[0])
        goto LABEL_12;
    }
    if ((v12 & 1) == 0)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_15:
  v3 = 0;
LABEL_16:
  sub_100034234((uint64_t)v14);
  return v3;
}

void sub_1004B54DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004B5514(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  _QWORD v10[2];
  __int128 v11;
  int v12;
  __int128 v13;
  int v14;
  __int128 v15;
  int v16;
  __int128 v17;
  int v18;
  __n128 v19;
  int v20;
  __n128 v21;
  int v22;

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 8);
  v4 = sub_1004B5294(a1, a2);
  v5 = (uint64_t)v4;
  if (v4)
  {
    v19 = 0uLL;
    v20 = 0;
    v6 = v4[1];
    v7 = *(_DWORD *)(v6 + 20);
    v21 = *(__n128 *)(v6 + 4);
    v22 = v7;
    sub_100042F44(&v19, &v21);
    v18 = 0;
    v17 = xmmword_100741B00;
    if (sub_100072DF0(v8, (unsigned __int8 *)&v17)
      || (v16 = 0, v15 = xmmword_100741B28, sub_100072DF0((unsigned __int8 *)&v19, (unsigned __int8 *)&v15))
      || (v14 = 0, v13 = xmmword_100741B14, sub_100072DF0((unsigned __int8 *)&v19, (unsigned __int8 *)&v13))
      || (v12 = 0, v11 = xmmword_100741AEC, sub_100072DF0((unsigned __int8 *)&v19, (unsigned __int8 *)&v11)))
    {
      v5 = 0;
    }
    else
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  sub_100034234((uint64_t)v10);
  return v5;
}

void sub_1004B5668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B5688(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  NSObject *v11;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 8);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  if (v4 != v5)
  {
    while (**(unsigned __int16 **)(*(_QWORD *)v4 + 8) >= a2 || *(unsigned __int16 *)(*(_QWORD *)v4 + 48) < a2)
    {
      v4 += 8;
      if (v4 == v5)
        goto LABEL_18;
    }
  }
  if (v4 == v5)
  {
LABEL_18:
    v11 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_1006F8CB8(a2, v11);
    v6 = 0;
  }
  else
  {
    v6 = *(_WORD *)(*(_QWORD *)v4 + 48);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    sub_10001FE6C(&v13, *(_QWORD *)v4 + 136);
    if (v13 != v14)
    {
      v7 = v13;
      do
      {
        v8 = *v7++;
        v9 = **(unsigned __int16 **)(v8 + 8);
        if (v9 <= v6 && v9 > a2)
          v6 = v9 - 1;
      }
      while (v7 != v14);
    }
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
  }
  sub_100034234((uint64_t)v16);
  return v6;
}

void sub_1004B57A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B57B8@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  uint64_t *i;
  uint64_t v7;
  _QWORD v9[2];
  __n128 v10;
  int v11;

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 8);
  for (i = *(uint64_t **)(a1 + 72); ; ++i)
  {
    if (i == *(uint64_t **)(a1 + 80))
    {
      sub_100069AFC(a3);
      return sub_100034234((uint64_t)v9);
    }
    v7 = *i;
    if (**(unsigned __int16 **)(*i + 8) <= a2 && *(unsigned __int16 *)(v7 + 48) >= a2)
      break;
  }
  v10 = *(__n128 *)(v7 + 72);
  v11 = *(_DWORD *)(v7 + 88);
  sub_100042F44(a3, &v10);
  return sub_100034234((uint64_t)v9);
}

void sub_1004B588C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B58AC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  std::string *p_p;
  std::string __p;
  _QWORD v13[2];
  uint8_t buf[4];
  std::string *v15;

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 8);
  v7 = *(char **)(a1 + 72);
  v6 = *(char **)(a1 + 80);
  while (v7 != v6)
  {
    v8 = *(_QWORD *)v7;
    if (*(unsigned __int16 *)(*(_QWORD *)v7 + 48) >= a2 && **(unsigned __int16 **)(v8 + 8) <= a3)
    {
      v9 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
      {
        sub_1005BAE8C((_QWORD *)v8, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136446210;
        v15 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Invalidating service %{public}s", buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_1004B5A44(a1, v7);
      v7 = *(char **)(a1 + 72);
      v6 = *(char **)(a1 + 80);
    }
    else
    {
      v7 += 8;
    }
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(a1 + 144) = 0;
  return sub_100034234((uint64_t)v13);
}

void sub_1004B5A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004B5A44(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  int64_t v12;
  void *__p;
  void *v15;
  _QWORD v16[2];

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 8);
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)a2 + 104;
  while (1)
  {
    sub_10001FE6C(&__p, v5);
    v6 = __p;
    v7 = v15;
    if (__p)
    {
      v15 = __p;
      operator delete(__p);
    }
    if (v7 == v6)
      break;
    sub_10001FE6C(&__p, v5);
    v8 = *(_QWORD *)__p;
    v15 = __p;
    operator delete(__p);
    LOWORD(__p) = **(_WORD **)(v8 + 8);
    sub_100394984(a1 + 96, (unsigned __int16 *)&__p);
    sub_1002E5FEC((_QWORD *)v4, v8);
  }
  while (1)
  {
    sub_10001FE6C(&__p, v4 + 136);
    v9 = __p;
    v10 = v15;
    if (__p)
    {
      v15 = __p;
      operator delete(__p);
    }
    if (v10 == v9)
      break;
    sub_10001FE6C(&__p, v4 + 136);
    sub_1004B5C04(a1, (_QWORD *)v4, *(_QWORD *)__p);
    if (__p)
    {
      v15 = __p;
      operator delete(__p);
    }
  }
  LOWORD(__p) = **(_WORD **)(v4 + 8);
  sub_100394984(a1 + 96, (unsigned __int16 *)&__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v11 = *(char **)(a1 + 80);
  v12 = v11 - (a2 + 8);
  if (v11 != a2 + 8)
    memmove(a2, a2 + 8, v11 - (a2 + 8));
  *(_QWORD *)(a1 + 80) = &a2[v12];
  return sub_100034234((uint64_t)v16);
}

void sub_1004B5BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B5C04(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  unsigned __int16 v8;
  void *__p;
  char *v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 8);
  if (*(_QWORD *)(a3 + 96))
  {
    LOWORD(__p) = *(_WORD *)(a3 + 74);
    sub_100394984(a1 + 96, (unsigned __int16 *)&__p);
  }
  __p = 0;
  v10 = 0;
  v11 = 0;
  sub_10001FE6C(&__p, a3 + 104);
  v6 = (char *)__p;
  if (__p != v10)
  {
    do
    {
      v8 = **(_WORD **)(*(_QWORD *)v6 + 8);
      sub_100394984(a1 + 96, &v8);
      v6 += 8;
    }
    while (v6 != v10);
  }
  v8 = **(_WORD **)(a3 + 8);
  sub_100394984(a1 + 96, &v8);
  sub_1004B5D30(a2, a3);
  if (__p)
  {
    v10 = (char *)__p;
    operator delete(__p);
  }
  return sub_100034234((uint64_t)v12);
}

void sub_1004B5CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004B5D30(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  char *v4;
  char *v5;
  int64_t v6;

  v3 = result;
  v5 = (char *)result[17];
  v4 = (char *)result[18];
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = (char *)result[18];
        break;
      }
    }
  }
  if (v5 != v4)
  {
    v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8)
      result = memmove(v5, v5 + 8, v4 - (v5 + 8));
    v3[18] = &v5[v6];
    if (a2)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  }
  return result;
}

uint64_t sub_1004B5DC8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  NSObject *v5;
  std::string *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  std::string __p;
  _QWORD v12[2];
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  std::string *v16;

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 8);
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD **)(a1 + 96);
    if (v4 != (_QWORD *)(a1 + 104))
    {
      do
      {
        v5 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          sub_1005BAE8C((_QWORD *)v4[5], &__p);
          v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &__p
             : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136446466;
          v14 = a2;
          v15 = 2082;
          v16 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s%{public}s", buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        v7 = (_QWORD *)v4[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v4[2];
            v9 = *v8 == (_QWORD)v4;
            v4 = v8;
          }
          while (!v9);
        }
        v4 = v8;
      }
      while (v8 != (_QWORD *)(a1 + 104));
    }
  }
  return sub_100034234((uint64_t)v12);
}

void sub_1004B5F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_1004B5F64(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

void sub_1004B6128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1004B62C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  id *v22;

  objc_destroyWeak(v22);
  _Block_object_dispose(&a17, 8);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004B6300(uint64_t a1, int a2, void *a3)
{
  NSObject *v6;
  id WeakRetained;
  id v8;
  NSObject *v9;
  NSObject *v10;
  int error_code;
  NSObject *v12;
  const char *hostname;
  int port;
  int v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  int v19;
  void *v20;
  void *v21;
  _BOOL4 v22;
  void *v23;
  _BOOL4 v24;
  void (**v25)(void);
  NSObject *v26;
  uint64_t v27;
  const char *v28;
  int v29;
  void *v30;
  BOOL v31;
  NSObject *v32;
  CFErrorRef v33;
  NSObject *v34;
  void (**v35)(_QWORD, _QWORD);
  void *v36;
  void *v37;
  uint64_t v38;
  int v39;
  _BYTE v40[20];
  _DWORD v41[4];

  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "connection"));
    v10 = nw_connection_copy_endpoint(v9);

    if (v6)
      error_code = nw_error_get_error_code(v6);
    else
      error_code = 0;
    *__error() = error_code;
    v12 = (id)qword_100999980;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      hostname = nw_endpoint_get_hostname(v10);
      port = nw_endpoint_get_port(v10);
      v15 = *__error();
      v39 = 67109890;
      *(_DWORD *)v40 = a2;
      *(_WORD *)&v40[4] = 2080;
      *(_QWORD *)&v40[6] = hostname;
      *(_WORD *)&v40[14] = 1024;
      *(_DWORD *)&v40[16] = port;
      LOWORD(v41[0]) = 1024;
      *(_DWORD *)((char *)v41 + 2) = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourEndpoint] Connection state changed to %d (host %s port %u error %d)", (uint8_t *)&v39, 0x1Eu);
    }

    if (a2 == 5)
    {
      v26 = (id)qword_100999980;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v27 = *((_QWORD *)v8 + 6);
        v28 = nw_endpoint_get_hostname(v10);
        v29 = nw_endpoint_get_port(v10);
        v39 = 138412802;
        *(_QWORD *)v40 = v27;
        *(_WORD *)&v40[8] = 2080;
        *(_QWORD *)&v40[10] = v28;
        *(_WORD *)&v40[18] = 1024;
        v41[0] = v29;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourEndpoint] Connection (%@) to %s port %u cancelled", (uint8_t *)&v39, 0x1Cu);
      }

      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "didDisconnectHandler"));
      v31 = v30 == 0;

      if (!v31)
      {
        v32 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
        if (v32)
          v33 = nw_error_copy_cf_error(v32);
        else
          v33 = 0;
        v35 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "didDisconnectHandler"));
        ((void (**)(_QWORD, CFErrorRef))v35)[2](v35, v33);

      }
      v36 = (void *)*((_QWORD *)v8 + 6);
      *((_QWORD *)v8 + 6) = 0;

      v37 = (void *)*((_QWORD *)v8 + 5);
      *((_QWORD *)v8 + 5) = 0;

      v38 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v34 = *(NSObject **)(v38 + 40);
      *(_QWORD *)(v38 + 40) = 0;
    }
    else
    {
      if (a2 != 4)
      {
        if (a2 == 3)
        {
          v16 = (id)qword_100999980;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            v17 = *((_QWORD *)v8 + 6);
            v18 = nw_endpoint_get_hostname(v10);
            v19 = nw_endpoint_get_port(v10);
            v39 = 138412802;
            *(_QWORD *)v40 = v17;
            *(_WORD *)&v40[8] = 2080;
            *(_QWORD *)&v40[10] = v18;
            *(_WORD *)&v40[18] = 1024;
            v41[0] = v19;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourEndpoint] Connection (%@) to %s port %u succeeded! begin receiving messages", (uint8_t *)&v39, 0x1Cu);
          }

          if ((objc_msgSend(v8, "isAdvToBrowserConnection") & 1) == 0)
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_getServerRemoteUUIDFromConnectionMetadata:isAdvToBrowserConnection:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), objc_msgSend(*(id *)(a1 + 32), "isAdvToBrowserConnection")));
            objc_msgSend(v8, "setRemoteUniqueIDString:", v20);

          }
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "remoteUniqueIDString"));
          v22 = v21 == 0;

          if (v22)
          {
            if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR))
              sub_1006F8D30();
            nw_connection_cancel(*((nw_connection_t *)v8 + 6));
          }
          else
          {
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "didConnectHandler"));
            v24 = v23 == 0;

            if (!v24)
            {
              v25 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "didConnectHandler"));
              v25[2]();

            }
            objc_msgSend(v8, "receiveNextMessage");
          }
        }
        goto LABEL_31;
      }
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
      v34 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "connection"));
      nw_connection_cancel(v34);
    }

LABEL_31:
  }

}

void sub_1004B670C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1004B68EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B693C(uint64_t a1, char *__s1, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (!strcmp(__s1, "BTVCBonjourEndpointServerUUIDHeader"))
  {
    v5 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a3));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

  }
  return 1;
}

void sub_1004B6B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  void *v27;
  id *v28;
  id *v29;

  v29 = v28;
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

void sub_1004B6B84(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  _BOOL4 is_equal;
  NSObject *options;

  options = a2;
  v4 = nw_protocol_copy_ws_definition();
  v5 = nw_protocol_options_copy_definition(options);
  is_equal = nw_protocol_definition_is_equal(v4, v5);

  if (is_equal)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);

}

void sub_1004B6C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

NSObject *sub_1004B6C38(uint64_t a1, void *a2)
{
  NSObject *v3;
  id *WeakRetained;
  id *v5;
  NSObject *v6;
  _QWORD enumerator[5];

  v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    enumerator[0] = _NSConcreteStackBlock;
    enumerator[1] = 3221225472;
    enumerator[2] = sub_1004B6D2C;
    enumerator[3] = &unk_100932668;
    enumerator[4] = WeakRetained;
    nw_ws_request_enumerate_additional_headers(v3, enumerator);
    v6 = nw_ws_response_create(nw_ws_response_status_accept, 0);
    nw_ws_response_add_additional_header(v6, "BTVCBonjourEndpointServerUUIDHeader", (const char *)objc_msgSend(v5[7], "UTF8String"));
  }
  else
  {
    v6 = nw_ws_response_create(nw_ws_response_status_reject, 0);
  }

  return v6;
}

void sub_1004B6D04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1004B6D2C(uint64_t a1, char *__s1, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (!strcmp(__s1, "BTVCBonjourEndpointClientUUIDHeader"))
  {
    v5 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a3));
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 64);
    *(_QWORD *)(v6 + 64) = v5;

  }
  return 1;
}

void sub_1004B6EBC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1004B6ED8(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  NSObject *v8;
  NSObject *v9;
  id v10;
  nw_connection_t *WeakRetained;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  nw_connection_t v15;
  void *v16;
  BOOL v17;
  int v18;
  void (**v19)(_QWORD, _QWORD);
  int v20;
  nw_connection_t v21;
  __int16 v22;
  id v23;

  v8 = a2;
  v9 = a3;
  v10 = a5;
  WeakRetained = (nw_connection_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v12 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 138412546;
      v21 = v8;
      v22 = 2112;
      v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourEndpoint] receiveNextMessage data %@ error:%@", (uint8_t *)&v20, 0x16u);
    }
    v13 = v8;
    if (v9 && nw_content_context_get_is_final(v9))
    {
      v14 = qword_100999980;
      if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
      {
        v15 = WeakRetained[6];
        v20 = 138412290;
        v21 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourEndpoint] receiveNextMessage got connection closed %@", (uint8_t *)&v20, 0xCu);
      }
      nw_connection_cancel(WeakRetained[6]);
    }
    else if (!v10)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(-[nw_connection_t didReceiveDataHandler](WeakRetained, "didReceiveDataHandler"));
      if (v13)
        v17 = v16 == 0;
      else
        v17 = 1;
      v18 = !v17;

      if (v18)
      {
        v19 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(-[nw_connection_t didReceiveDataHandler](WeakRetained, "didReceiveDataHandler"));
        ((void (**)(_QWORD, NSObject *))v19)[2](v19, v13);

      }
      -[nw_connection_t receiveNextMessage](WeakRetained, "receiveNextMessage");
    }

  }
}

void sub_1004B7094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1004B72A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1004B7320(uint64_t a1, void *a2)
{
  NSObject *v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  CFErrorRef v7;
  CFErrorRef v8;
  int v9;
  NSObject *v10;
  __int16 v11;
  id v12;

  v3 = a2;
  v4 = (id)qword_100999980;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(*(id *)(a1 + 32), "length");
    v9 = 138412546;
    v10 = v3;
    v11 = 2048;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourEndpoint] nw_connection_send completed with error: %@, bytes :%lu", (uint8_t *)&v9, 0x16u);
  }

  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    if (v3)
    {
      v7 = nw_error_copy_cf_error(v3);
      v6 = *(_QWORD *)(a1 + 40);
      v8 = v7;
    }
    else
    {
      v8 = 0;
    }
    (*(void (**)(uint64_t, CFErrorRef))(v6 + 16))(v6, v8);

  }
}

void sub_1004B742C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1004B7504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1004B7540(id a1, OS_nw_protocol_options *a2)
{
  OS_nw_protocol_options *options;

  options = a2;
  nw_tcp_options_set_enable_keepalive((nw_protocol_options_t)options, 1);
  nw_tcp_options_set_keepalive_idle_time((nw_protocol_options_t)options, 2u);
  nw_tcp_options_set_no_delay((nw_protocol_options_t)options, 1);
  nw_tcp_options_set_enable_fast_open((nw_protocol_options_t)options, 1);

}

void sub_1004B7598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1004B76FC(uint64_t a1, uint64_t a2, char a3, int a4)
{
  *(_QWORD *)a1 = off_100932248;
  sub_1000160D0(a1 + 8);
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = a4;
  *(_QWORD *)a1 = off_100932750;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = off_100932790;
  *(_BYTE *)(a1 + 96) = a3;
  *(_BYTE *)(a1 + 97) = 0;
  *(_OWORD *)(a1 + 100) = xmmword_100741B40;
  *(_DWORD *)(a1 + 116) = 1000;
  *(_QWORD *)(a1 + 120) = 0;
  sub_1000160D0(a1 + 128);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 120) = sub_100475BE0();
  return a1;
}

void sub_1004B77B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v7;

  v7 = *v4;
  if (*v4)
  {
    v1[26] = v7;
    operator delete(v7);
  }
  sub_100069BDC(v3);
  *v1 = v5;
  sub_100069BDC(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B77F0(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned __int8 *v5;
  char **v6;
  unint64_t v7;
  unsigned __int8 **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unsigned __int8 **v15;
  char *v16;
  char *v17;
  char *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  __int128 v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v24 = 0;
  v23 = 0;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_1009328C0);
  v4 = off_1009778E0;
  v25 = 0;
  sub_10004AD30((uint64_t)&v25);
  *(_QWORD *)&v22 = (int)v25;
  *((_QWORD *)&v22 + 1) = SWORD2(v25);
  v5 = sub_100470694((uint64_t)v4, a2, &v22, (BOOL *)&v23 + 1, (char *)&v23);
  if ((*(unsigned int (**)(_QWORD, unsigned __int8 *, int *, _QWORD))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80), v5, &v24, HIBYTE(v23)))
  {
    (*(void (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), v5);
  }
  v22 = 0uLL;
  sub_10003415C((uint64_t)&v22, a1 + 128);
  if (*(_DWORD *)(a1 + 192) != 128 && (v24 & 0x10) != 0)
  {
    v5[784] = 1;
    v6 = (char **)(a1 + 200);
    if (!sub_10046EA5C(a1 + 200, (uint64_t)v5))
    {
      v7 = *(_QWORD *)(a1 + 216);
      v8 = *(unsigned __int8 ***)(a1 + 208);
      if ((unint64_t)v8 >= v7)
      {
        v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          abort();
        v11 = v7 - (_QWORD)*v6;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)sub_10007ABA0(a1 + 216, v13);
        else
          v14 = 0;
        v15 = (unsigned __int8 **)&v14[8 * v10];
        v16 = &v14[8 * v13];
        *v15 = v5;
        v9 = v15 + 1;
        v18 = *(char **)(a1 + 200);
        v17 = *(char **)(a1 + 208);
        if (v17 != v18)
        {
          do
          {
            v19 = (unsigned __int8 *)*((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v15 = v19;
          }
          while (v17 != v18);
          v17 = *v6;
        }
        *(_QWORD *)(a1 + 200) = v15;
        *(_QWORD *)(a1 + 208) = v9;
        *(_QWORD *)(a1 + 216) = v16;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v8 = v5;
        v9 = v8 + 1;
      }
      *(_QWORD *)(a1 + 208) = v9;
    }
    v20 = *(_QWORD *)(a1 + 224);
    if (!v20)
      operator new();
    *(_QWORD *)(v20 + 16) = 500;
  }
  return sub_100034234((uint64_t)&v22);
}

void sub_1004B7A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B7A28(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  NSObject *v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD v13[2];
  uint8_t buf[4];
  int v15;

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 128);
  v2 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(a1 + 192);
    *(_DWORD *)buf = 67109120;
    v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Stepping scan with mode %u", buf, 8u);
  }
  v4 = *(_DWORD *)(a1 + 192);
  if (v4 == 16 || v4 == 1)
  {
    if (sub_1004B7DF0(a1))
      return sub_100034234((uint64_t)v13);
  }
  else if (!v4)
  {
    sub_100034264((uint64_t)v13);
    if (*(_BYTE *)(a1 + 96))
    {
      v6 = qword_100999800;
      if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_DWORD *)(a1 + 100);
        *(_DWORD *)buf = 67109120;
        v15 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sleeping %u ms before starting first scan", buf, 8u);
      }
      j__usleep(1000 * *(_DWORD *)(a1 + 100));
    }
    sub_100034188((uint64_t)v13);
    sub_1004B8294(a1);
    return sub_100034234((uint64_t)v13);
  }
  if (*(_BYTE *)(a1 + 97))
  {
    *(_BYTE *)(a1 + 97) = 0;
  }
  else
  {
    sub_100034264((uint64_t)v13);
    v8 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 108;
      if (!*(_BYTE *)(a1 + 96))
        v9 = 116;
      v10 = *(_DWORD *)(a1 + v9);
      *(_DWORD *)buf = 67109120;
      v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sleeping %u ms before ending scan", buf, 8u);
    }
    v11 = 108;
    if (!*(_BYTE *)(a1 + 96))
      v11 = 116;
    j__usleep(1000 * *(_DWORD *)(a1 + v11));
    sub_1004AE2A4(a1, 0);
  }
  return sub_100034234((uint64_t)v13);
}

void sub_1004B7C38(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004B7C54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 128);
  if (*(_DWORD *)(a1 + 192) == 1)
  {
    *(_BYTE *)(a1 + 97) = 1;
    v9 = 0;
    sub_100043758(&v9);
    if (sub_10018701C((uint64_t (*)(_QWORD, _QWORD))sub_1004B7CF8, a1, v2, v3, v4, v5, v6, v7))
      *(_BYTE *)(a1 + 97) = 0;
    sub_10004339C(&v9);
    sub_100043728(&v9);
  }
  return sub_100034234((uint64_t)v10);
}

void sub_1004B7CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004B7CF8()
{
  operator new();
}

uint64_t sub_1004B7D5C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 128);
  v2 = *(_QWORD *)(a1 + 224);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *(_QWORD *)(a1 + 224) = 0;
  }
  if (*(_BYTE *)(a1 + 97))
  {
    *(_BYTE *)(a1 + 97) = 0;
    sub_1004B7DF0(a1);
  }
  else
  {
    sub_100034264((uint64_t)v4);
    sub_1004AE2A4(a1, 0);
  }
  return sub_100034234((uint64_t)v4);
}

void sub_1004B7DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1004B7DF0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(a1 + 200);
  v2 = *(uint64_t **)(a1 + 208);
  if (v1 != v2)
  {
    v3 = *v1;
    *(_DWORD *)(a1 + 192) = 16;
    if (qword_10097B080 != -1)
      dispatch_once(&qword_10097B080, &stru_1009328E0);
    sub_10048BB30(qword_10097B078, v3);
  }
  *(_DWORD *)(a1 + 192) = 128;
  return v1 != v2;
}

void sub_1004B7E84()
{
  operator new();
}

void sub_1004B7EF8()
{
  operator new();
}

uint64_t sub_1004B7F6C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _QWORD v7[2];
  int v8;

  v8 = 0;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 128);
  sub_10046EA90((char **)(a1 + 200), a2);
  sub_100034264((uint64_t)v7);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, int *, _QWORD))(**(_QWORD **)(a1 + 80) + 48))(*(_QWORD *)(a1 + 80), a2, &v8, 0);
  if (v8)
    v5 = 0;
  else
    v5 = v4;
  if (v5 == 1)
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 8))(*(_QWORD *)(a1 + 80), a2);
  sub_1004B7A28(a1);
  return sub_100034234((uint64_t)v7);
}

void sub_1004B8010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004B8024(uint64_t a1)
{
  int v2;
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 8);
  v2 = *(unsigned __int8 *)(a1 + 72);
  sub_100034234((uint64_t)v3);
  if (v2)
  {
    sub_100253460();
  }
  else
  {
    sub_1004ADDA0(a1);
    sub_1004B7A28(a1);
  }
}

uint64_t sub_1004B8080(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  uint8_t buf[4];
  int v17;

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 128);
  v2 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 192);
    *(_DWORD *)buf = 67109120;
    v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopping scan with mode %u", buf, 8u);
  }
  v4 = *(uint64_t **)(a1 + 200);
  v5 = *(uint64_t **)(a1 + 208);
  while (v4 != v5)
  {
    v6 = *v4++;
    *(_BYTE *)(v6 + 784) = 0;
  }
  v7 = *(_DWORD *)(a1 + 192);
  if (v7)
  {
    if (v7 == 1)
    {
      *(_DWORD *)(a1 + 192) = 128;
      sub_100034264((uint64_t)v15);
      buf[0] = 0;
      sub_100043758(buf);
      sub_10018701C((uint64_t (*)(_QWORD, _QWORD))sub_1004B8230, a1, v8, v9, v10, v11, v12, v13);
      sub_10004339C(buf);
      sub_100043728(buf);
    }
    else if (v7 == 16)
    {
      *(_DWORD *)(a1 + 192) = 128;
      sub_100034264((uint64_t)v15);
      if (qword_10097B080 != -1)
        dispatch_once(&qword_10097B080, &stru_1009328E0);
      sub_10048BC9C();
    }
  }
  else
  {
    *(_DWORD *)(a1 + 192) = 128;
  }
  return sub_100034234((uint64_t)v15);
}

void sub_1004B8200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004B8230()
{
  operator new();
}

_BYTE *sub_1004B8294(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _DWORD v11[2];
  __int16 v12;
  int v13;

  v2 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 104;
    if (!*(_BYTE *)(a1 + 96))
      v3 = 112;
    v4 = *(_DWORD *)(a1 + v3);
    v11[0] = 67109376;
    v11[1] = v4;
    v12 = 1024;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Scanning for %u scan periods (%u x 1.28s)", (uint8_t *)v11, 0xEu);
  }
  LOBYTE(v11[0]) = 0;
  sub_100043758(v11);
  v7 = 104;
  if (!*(_BYTE *)(a1 + 96))
    v7 = 112;
  v8 = sub_100186F74(10390323, *(unsigned __int8 *)(a1 + v7), 64, (uint64_t (*)(_QWORD, _QWORD))sub_1004B8414, sub_1004B8230, a1, v5, v6);
  sub_10004339C(v11);
  if ((_DWORD)v8)
  {
    v9 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
      sub_1006F8E0C(v8, v9);
    sub_1004AE2A4(a1, v8);
  }
  else
  {
    *(_DWORD *)(a1 + 192) = 1;
  }
  return sub_100043728(v11);
}

void sub_1004B83F8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004B8414(uint64_t result)
{
  if (result)
    operator new();
  return result;
}

void sub_1004B8488()
{
  operator delete();
}

uint64_t sub_1004B84AC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v4;
  _OWORD *v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1009327B8;
  *(_QWORD *)(a1 + 16) = a2;
  v4 = *a3;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 24) = v4;
  if (*((_QWORD *)a3 + 2))
  {
    v6 = malloc_type_malloc(0xF0uLL, 0x100004077774924uLL);
    *(_QWORD *)(a1 + 40) = v6;
    v7 = (__int128 *)*((_QWORD *)a3 + 2);
    v8 = *v7;
    v9 = v7[2];
    v6[1] = v7[1];
    v6[2] = v9;
    *v6 = v8;
    v10 = v7[3];
    v11 = v7[4];
    v12 = v7[6];
    v6[5] = v7[5];
    v6[6] = v12;
    v6[3] = v10;
    v6[4] = v11;
    v13 = v7[7];
    v14 = v7[8];
    v15 = v7[10];
    v6[9] = v7[9];
    v6[10] = v15;
    v6[7] = v13;
    v6[8] = v14;
    v16 = v7[11];
    v17 = v7[12];
    v18 = v7[14];
    v6[13] = v7[13];
    v6[14] = v18;
    v6[11] = v16;
    v6[12] = v17;
  }
  return a1;
}

_QWORD *sub_1004B8560(_QWORD *a1)
{
  void *v2;

  *a1 = off_1009327B8;
  v2 = (void *)a1[5];
  if (v2)
    free(v2);
  return a1;
}

void sub_1004B8598(_QWORD *a1)
{
  void *v1;

  *a1 = off_1009327B8;
  v1 = (void *)a1[5];
  if (v1)
    free(v1);
  operator delete();
}

_QWORD *sub_1004B85E0(_QWORD *a1)
{
  void *v2;

  *a1 = off_100932750;
  a1[11] = off_100932790;
  v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 16);
  *a1 = off_100932248;
  sub_100069BDC(a1 + 1);
  return a1;
}

void sub_1004B8640(_QWORD *a1)
{
  void *v2;

  *a1 = off_100932750;
  a1[11] = off_100932790;
  v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 16);
  *a1 = off_100932248;
  sub_100069BDC(a1 + 1);
  operator delete();
}

BOOL sub_1004B86B0(uint64_t a1, _BYTE *a2)
{
  return sub_10006BB10(*(_QWORD *)(a1 + 120), a2);
}

uint64_t sub_1004B86B8(_QWORD *a1)
{
  void *v2;

  *(a1 - 11) = off_100932750;
  *a1 = off_100932790;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 5);
  *(a1 - 11) = off_100932248;
  return sub_100069BDC(a1 - 10);
}

void sub_1004B8710(_QWORD *a1)
{
  void *v2;

  *(a1 - 11) = off_100932750;
  *a1 = off_100932790;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 5);
  *(a1 - 11) = off_100932248;
  sub_100069BDC(a1 - 10);
  operator delete();
}

uint64_t sub_1004B8784(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  return sub_1004B77F0(v1, (uint64_t)&v3);
}

void sub_1004B87C0()
{
  operator delete();
}

uint64_t sub_1004B87D4(uint64_t a1)
{
  return sub_1004B7C54(*(_QWORD *)(a1 + 24));
}

void sub_1004B87E0()
{
  operator delete();
}

uint64_t sub_1004B87F4(uint64_t a1)
{
  return sub_1004B7D5C(*(_QWORD *)(a1 + 16));
}

void sub_1004B8800()
{
  operator delete();
}

uint64_t sub_1004B8814(uint64_t a1)
{
  return sub_1004B7F6C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 32));
}

void sub_1004B8828()
{
  operator delete();
}

uint64_t sub_1004B883C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
    return sub_1004AE2A4(v2, v3);
  else
    return sub_1004B7A28(v2);
}

void sub_1004B8854(id a1)
{
  operator new();
}

void sub_1004B8894()
{
  operator delete();
}

void sub_1004B88B8(id a1)
{
  operator new();
}

void sub_1004B88F8()
{
  operator delete();
}

uint64_t sub_1004B891C(uint64_t a1)
{
  NSObject *v2;
  int v4;
  const __CFString *v5;

  if (notify_register_check("com.apple.bluetooth.power", (int *)(a1 + 168))
    && os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006F8F88();
  }
  if (notify_register_check("com.apple.bluetooth.connection", (int *)(a1 + 172))
    && os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006F8F5C();
  }
  if (notify_register_check("com.apple.bluetooth.pairing", (int *)(a1 + 176))
    && os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006F8F30();
  }
  if (notify_register_check("com.apple.bluetooth.pairingWithReason", (int *)(a1 + 180))
    && os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006F8F04();
  }
  if (notify_register_check("com.apple.bluetooth.audio-stream", (int *)(a1 + 184))
    && os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006F8ED8();
  }
  if (notify_register_check("com.apple.bluetooth.outgoing-le-fast-scan-level", (int *)(a1 + 188))
    && os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006F8EAC();
  }
  if (notify_register_check("com.apple.bluetooth.outgoing-classic-connection-state", (int *)(a1 + 192))
    && os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006F8E80();
  }
  sub_1004B8B7C((os_unfair_lock_s *)a1);
  notify_set_state(*(_DWORD *)(a1 + 168), *(unsigned __int8 *)(a1 + 155));
  notify_post("com.apple.bluetooth.power");
  sub_1004B8BF8((_BYTE *)a1);
  sub_1004B8D14(a1);
  sub_1004B8DF0(a1);
  sub_1004B8EAC(a1);
  v2 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 138412290;
    v5 = CFSTR("Unknown");
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bluetooth server started (%@)", (uint8_t *)&v4, 0xCu);
  }
  return 1;
}

void sub_1004B8B7C(os_unfair_lock_s *a1)
{
  _QWORD v2[5];

  notify_set_state(a1[43]._os_unfair_lock_opaque, (int)a1[39]._os_unfair_lock_opaque + (uint64_t)(int)a1[40]._os_unfair_lock_opaque);
  notify_post("com.apple.bluetooth.connection");
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1004B9DA8;
  v2[3] = &unk_100932900;
  v2[4] = a1;
  sub_10001FD88(a1 + 30, v2);
}

_BYTE *sub_1004B8BF8(_BYTE *result)
{
  uint64_t v1;
  unsigned int v2;
  NSObject *v3;
  const char *v4;
  int v5;
  const char *v6;

  v1 = (uint64_t)result;
  v2 = result[197] || result[198] || result[199] || result[204] != 0;
  if (result[200] != v2)
  {
    v3 = qword_1009999E0;
    if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
    {
      v4 = "off";
      if (v2)
        v4 = "on";
      v5 = 136315138;
      v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Bluetooth Daemon: BT streaming: %s", (uint8_t *)&v5, 0xCu);
    }
    *(_BYTE *)(v1 + 200) = v2;
    notify_set_state(*(_DWORD *)(v1 + 184), v2);
    notify_post("com.apple.bluetooth.audio-stream");
    return (_BYTE *)sub_100016994(v1);
  }
  return result;
}

uint64_t sub_1004B8D14(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  int v6;
  const char *v7;

  v2 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(int *)(a1 + 164);
    if (v3 > 2)
      v4 = "NA";
    else
      v4 = off_100932CB8[v3];
    v6 = 136315138;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bluetooth Daemon: LE Connection scan state: %s", (uint8_t *)&v6, 0xCu);
  }
  notify_set_state(*(_DWORD *)(a1 + 188), *(unsigned int *)(a1 + 164));
  return notify_post("com.apple.bluetooth.outgoing-le-fast-scan-level");
}

uint64_t sub_1004B8DF0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v5[2];

  v2 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 216);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notify outgoing classic connection state isConnecting: %d", (uint8_t *)v5, 8u);
  }
  notify_set_state(*(_DWORD *)(a1 + 192), *(unsigned __int8 *)(a1 + 216));
  return notify_post("com.apple.bluetooth.outgoing-classic-connection-state");
}

void sub_1004B8EAC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t buf[16];
  uint8_t v15[16];

  v2 = (void *)MGCopyAnswer(CFSTR("ProductVersion"), 0);
  v3 = v2;
  if (v2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsSeparatedByString:", CFSTR(".")));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 0));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v5));

    v7 = (void *)CFPreferencesCopyAppValue(CFSTR("MajorOSVersion"), CFSTR("com.apple.BTServer"));
    if ((objc_msgSend(v7, "isEqualToString:", v6) & 1) == 0)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"));
      v9 = objc_msgSend(v8, "isBluetoothModificationAllowed");

      v10 = qword_1009999E0;
      v11 = os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT);
      if ((v9 & 1) != 0)
      {
        if (v11)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Major version update, setting default power state to ON", buf, 2u);
        }
        v12 = sub_10034D3CC();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 96))(v12, 1);
        v13 = sub_10034D3CC();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 112))(v13, 1);
      }
      else if (v11)
      {
        *(_WORD *)v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Major version update but bluetooth modification is not allowed", v15, 2u);
      }
      CFPreferencesSetAppValue(CFSTR("MajorOSVersion"), v6, CFSTR("com.apple.BTServer"));
      CFPreferencesSynchronize(CFSTR("com.apple.BTServer"), kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
      *(_BYTE *)(a1 + 152) = 1;
    }

  }
}

void sub_1004B9088(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

BOOL sub_1004B90D8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  _BOOL8 result;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;
  char v8;

  v8 = 0;
  v0 = sub_100027F68();
  sub_100091AE8(v6, "BT");
  sub_100091AE8(__p, "EraseAllPairedAndCachedDevice");
  v1 = (*(uint64_t (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v0 + 72))(v0, v6, __p, &v8);
  if (v8)
    v2 = v1;
  else
    v2 = 0;
  if (v5 < 0)
    operator delete(__p[0]);
  if ((v7 & 0x80000000) == 0)
  {
    if (v2)
      goto LABEL_8;
LABEL_14:
    if (qword_10097AB88 != -1)
      dispatch_once(&qword_10097AB88, &stru_100932BB8);
    result = sub_1005BCE70((_QWORD *)qword_10097AB80);
    if (result)
    {
      sub_100098320();
      return 1;
    }
    return result;
  }
  operator delete(v6[0]);
  if (!v2)
    goto LABEL_14;
LABEL_8:
  if (MKBDeviceUnlockedSinceBoot(v1))
  {
    sub_1002FD80C();
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100932B98);
    sub_10065E2A4((uint64_t)off_1009778C0);
    result = os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006F8FE0();
      return 0;
    }
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006F8FB4();
      return 0;
    }
  }
  return result;
}

void sub_1004B924C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1004B9280(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];

  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100932BD8);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1);
  v2 = sub_10003BE44();
  *(_BYTE *)(a1 + 320) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 840))(v2);
  sub_1004B93C4(a1);
  *(_BYTE *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 276) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 284) = 0;
  v3 = sub_100038E50();
  sub_100260F7C(v3 + 288, a1 + 8);
  v4 = sub_100016B48();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, a1 + 16);
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100932BF8);
  sub_1004FD2A8(qword_10097ADB0, a1 + 32);
  *(_BYTE *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 386) = 0;
  *(_QWORD *)(a1 + 394) = 0;
  *(_QWORD *)(a1 + 378) = 0;
  *(_QWORD *)(a1 + 399) = 0;
  v5 = sub_10006BBEC();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1004B9794;
  v6[3] = &unk_100917378;
  v6[4] = a1;
  sub_100041A34(v5, v6);
}

void sub_1004B93C4(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  id v6;
  id v7;
  int v8;
  uint64_t v9;
  void *i;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  NSObject *v16;
  id v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  id v23;
  uint8_t v24[128];
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  void *v28;

  v2 = (void *)MGCopyAnswer(CFSTR("BuildVersion"), 0);
  if (v2)
  {
    v3 = (void *)CFPreferencesCopyAppValue(CFSTR("OSBuildVersion"), CFSTR("com.apple.BTServer"));
    v4 = qword_1009999E0;
    if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v26 = v3;
      v27 = 2112;
      v28 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Identification - OS build last %@, current %@", buf, 0x16u);
    }
    if ((objc_msgSend(v3, "isEqualToString:", v2) & 1) == 0)
    {
      v5 = qword_1009999E0;
      if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Identification - OS build updated", buf, 2u);
      }
      CFPreferencesSetAppValue(CFSTR("OSBuildVersion"), v2, CFSTR("com.apple.BTServer"));
      CFPreferencesSynchronize(CFSTR("com.apple.BTServer"), kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
      *(_BYTE *)(a1 + 153) = 1;
      if (v3 && objc_msgSend(v3, "hasPrefix:", CFSTR("22A")))
      {
        v23 = 0;
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSRegularExpression regularExpressionWithPattern:options:error:](NSRegularExpression, "regularExpressionWithPattern:options:error:", CFSTR("([0-9]+)[A-Z]([0-9]+)([a-z]*)"), 1, &v23));
        v17 = v23;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "matchesInString:options:range:", v3, 0, 0, objc_msgSend(v3, "length")));
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
        if (v7)
        {
          v8 = 0;
          v9 = *(_QWORD *)v20;
          do
          {
            for (i = 0; i != v7; i = (char *)i + 1)
            {
              if (*(_QWORD *)v20 != v9)
                objc_enumerationMutation(v6);
              v11 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
              if ((unint64_t)objc_msgSend(v11, "numberOfRanges") >= 3)
              {
                v12 = objc_msgSend(v11, "rangeAtIndex:", 2);
                v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "substringWithRange:", v12, v13));
                v8 = objc_msgSend(v14, "intValue");

              }
            }
            v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
          }
          while (v7);

          v15 = v8 % 0x3E8u;
          if (v8 <= 1000)
            v15 = v8;
          if (v15 - 238 < 0x53)
          {
            v16 = qword_1009999E0;
            if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v26 = v3;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "LE deivce name origin reset - OS build updated from %@", buf, 0xCu);
            }
            *(_BYTE *)(a1 + 154) = 1;
          }
        }
        else
        {

        }
      }
    }

  }
}

void sub_1004B9730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t sub_1004B9794(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int v4;
  int v5;
  char v6;
  __int16 v7;
  __int16 v8;

  v1 = *(_QWORD *)(a1 + 32);
  v8 = 0;
  v7 = 0;
  v6 = 0;
  v5 = 0;
  v2 = sub_100038E50();
  result = (*(uint64_t (**)(uint64_t, char *, __int16 *, char *, __int16 *, char *, int *))(*(_QWORD *)v2 + 48))(v2, (char *)&v8 + 1, &v8, (char *)&v7 + 1, &v7, &v6, &v5);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(v1 + 272) = v7;
    if (HIBYTE(v8))
    {
      v4 = 1;
    }
    else if ((_BYTE)v8)
    {
      v4 = 2;
    }
    else
    {
      if (!HIBYTE(v7))
      {
        *(_DWORD *)(v1 + 276) = 0;
        goto LABEL_9;
      }
      v4 = 3;
    }
    *(_DWORD *)(v1 + 276) = v4;
LABEL_9:
    *(_BYTE *)(v1 + 280) = v6;
  }
  return result;
}

void sub_1004B983C(uint64_t a1, uint64_t a2)
{
  sub_1004B9844(a1 + 120, a2);
}

void sub_1004B9844(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_1004BC2D0(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1004B98CC(uint64_t a1, uint64_t a2)
{
  sub_100069060(a1 + 120, a2);
}

uint64_t sub_1004B98D4(uint64_t a1)
{
  char v3;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 40);
  *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 388) = 0;
  *(_QWORD *)(a1 + 396) = 0;
  *(_QWORD *)(a1 + 380) = 0;
  *(_DWORD *)(a1 + 403) = 0;
  sub_100034264((uint64_t)v4);
  v3 = 0;
  sub_100043758(&v3);
  sub_1002455A4(sub_1004B9978);
  sub_100043728(&v3);
  return sub_100034234((uint64_t)v4);
}

void sub_1004B9950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
  sub_100043728(&a13);
  sub_100034234((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1004B9978(char a1)
{
  uint64_t v2;
  _QWORD v3[4];
  char v4;

  v2 = sub_10006BBEC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1004BB7AC;
  v3[3] = &unk_100927558;
  v4 = a1;
  sub_100041A34(v2, v3);
}

uint64_t sub_1004B99D8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  NSObject *v5;
  uint8_t v7[15];
  char v8;
  uint8_t buf[8];
  uint64_t v10;

  v2 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BluetoothDaemon::stackWillStop enter", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v10 = 0;
  sub_10003415C((uint64_t)buf, a1 + 40);
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  sub_100034264((uint64_t)buf);
  sub_1000065FC(a1);
  v4 = *(_QWORD **)(a1 + 232);
  v3 = a1 + 232;
  sub_1004BC50C(v3 - 8, v4);
  *(_QWORD *)(v3 - 8) = v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  sub_1004BC598(v3 + 16, *(_QWORD **)(v3 + 24));
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = v3 + 24;
  sub_10001A82C(v3 + 200, *(_QWORD **)(v3 + 208));
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 200) = v3 + 208;
  v8 = 0;
  sub_100043758(&v8);
  sub_1002455D0(sub_1004B9978);
  sub_10004339C(&v8);
  v5 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BluetoothDaemon::stackWillStop exit", v7, 2u);
  }
  sub_100043728(&v8);
  return sub_100034234((uint64_t)buf);
}

void sub_1004B9B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B9B48(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 153);
}

uint64_t sub_1004B9B50(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 154);
}

void sub_1004B9B58(uint64_t a1, uint64_t state64)
{
  char v2;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  _QWORD v14[4];
  id v15;
  char v16;

  if (*(unsigned __int8 *)(a1 + 155) != (_DWORD)state64)
  {
    v2 = state64;
    *(_BYTE *)(a1 + 155) = state64;
    notify_set_state(*(_DWORD *)(a1 + 168), state64);
    notify_post("com.apple.bluetooth.power");
    if (sub_1004F9680())
    {
      v4 = *(void **)(a1 + 112);
      if (v4)
      {
        v5 = v4;
      }
      else
      {
        v6 = BiomeLibrary();
        v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "Device"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "Wireless"));
        v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "BluetoothPowerEnabled"));
        v11 = *(void **)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v10;

        v5 = *(id *)(a1 + 112);
        if (!v5)
          return;
      }
      v12 = sub_10006BBAC();
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1004B9CC8;
      v14[3] = &unk_1009189E0;
      v16 = v2;
      v13 = v5;
      v15 = v13;
      sub_100041A34(v12, v14);

    }
  }
}

void sub_1004B9C84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1004B9CC8(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;

  v2 = objc_alloc((Class)BMDeviceBluetoothPowerEnabled);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 40)));
  v5 = objc_msgSend(v2, "initWithStarting:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "source"));
  objc_msgSend(v4, "sendEvent:", v5);

}

void sub_1004B9D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1004B9D78(os_unfair_lock_s *a1, uint32_t a2)
{
  if (a1[39]._os_unfair_lock_opaque != a2)
  {
    a1[39]._os_unfair_lock_opaque = a2;
    sub_1004B8B7C(a1);
  }
}

void sub_1004B9D90(os_unfair_lock_s *a1, uint32_t a2)
{
  if (a1[40]._os_unfair_lock_opaque != a2)
  {
    a1[40]._os_unfair_lock_opaque = a2;
    sub_1004B8B7C(a1);
  }
}

uint64_t sub_1004B9DA8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 156));
}

uint64_t sub_1004B9DC4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

uint64_t sub_1004B9DCC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  id v11;
  id v12;
  int v14;
  const char *v15;
  __int16 v16;
  id v17;

  v7 = 0x1000000000000;
  if (!a2)
    v7 = 0;
  notify_set_state(*(_DWORD *)(a1 + 176), v7 | a3);
  notify_post("com.apple.bluetooth.pairing");
  notify_set_state(*(_DWORD *)(a1 + 180), a3 | (a4 << 56));
  v8 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
  {
    switch((int)a4)
    {
      case 200:
        v9 = "CBPairingReasonUnpairDefault";
        break;
      case 201:
        v9 = "CBPairingReasonUnpairUserSwitch";
        break;
      case 202:
        v9 = "CBPairingReasonUnpairCloud";
        break;
      case 203:
        v9 = "CBPairingReasonUnpairMagnet";
        break;
      default:
        v10 = "?";
        if ((_DWORD)a4 == 1)
          v10 = "CBPairingReasonPairingDefault";
        if ((_DWORD)a4)
          v9 = v10;
        else
          v9 = "CBPairingReasonUnknown";
        break;
    }
    v11 = sub_100649588(a3);
    v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v11));
    v14 = 136315394;
    v15 = v9;
    v16 = 2080;
    v17 = objc_msgSend(v12, "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Bluetooth Daemon: pairingReason %s, addr %s", (uint8_t *)&v14, 0x16u);

  }
  return notify_post("com.apple.bluetooth.pairingWithReason");
}

void sub_1004B9F5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004B9F74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)(a1 + 196) = a2;
  v3 = sub_100065478();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 616))(v3, a2);
}

uint64_t sub_1004B9FA4(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 216) != a2)
  {
    *(_BYTE *)(a1 + 216) = a2;
    return sub_1004B8DF0(a1);
  }
  return a1;
}

os_unfair_lock_s *sub_1004B9FBC(os_unfair_lock_s *result, int a2, uint64_t a3)
{
  os_unfair_lock_s *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  _QWORD v11[5];
  char v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  const char *v16;

  if (BYTE1(result[49]._os_unfair_lock_opaque) != a2)
  {
    v5 = result;
    v6 = qword_1009999E0;
    if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
    {
      v7 = sub_100649588(a3);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      v9 = (void *)v8;
      v10 = "off";
      if (a2)
        v10 = "on";
      *(_DWORD *)buf = 138543618;
      v14 = v8;
      v15 = 2080;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Bluetooth Daemon: A2DP streaming to device %{public}@: %s", buf, 0x16u);

    }
    BYTE1(v5[49]._os_unfair_lock_opaque) = a2;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1004BA104;
    v11[3] = &unk_100932920;
    v11[4] = a3;
    v12 = a2;
    sub_10001FD88(v5 + 30, v11);
    return (os_unfair_lock_s *)sub_1004B8BF8(v5);
  }
  return result;
}

uint64_t sub_1004BA104(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD, uint64_t))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), 2);
}

void sub_1004BA124(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint8_t buf[4];
  id v10;

  v4 = a2;
  v5 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Bluetooth Daemon: Country code changed: %@", buf, 0xCu);
  }
  objc_storeStrong((id *)(a1 + 480), a2);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004BA258;
  v7[3] = &unk_100932948;
  v8 = v4;
  v6 = v4;
  sub_10001FD88((os_unfair_lock_s *)(a1 + 120), v7);

}

void sub_1004BA238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1004BA258(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, *(_QWORD *)(a1 + 32));
}

os_unfair_lock_s *sub_1004BA270(os_unfair_lock_s *result, int a2, uint64_t a3)
{
  os_unfair_lock_s *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  _QWORD v11[5];
  char v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  const char *v16;

  if (BYTE2(result[49]._os_unfair_lock_opaque) != a2)
  {
    v5 = result;
    v6 = qword_1009999E0;
    if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
    {
      v7 = sub_100649588(a3);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      v9 = (void *)v8;
      v10 = "off";
      if (a2)
        v10 = "on";
      *(_DWORD *)buf = 138543618;
      v14 = v8;
      v15 = 2080;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Bluetooth Daemon: HFP streaming to device %{public}@: %s", buf, 0x16u);

    }
    BYTE2(v5[49]._os_unfair_lock_opaque) = a2;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1004BA3B8;
    v11[3] = &unk_100932920;
    v11[4] = a3;
    v12 = a2;
    sub_10001FD88(v5 + 30, v11);
    return (os_unfair_lock_s *)sub_1004B8BF8(v5);
  }
  return result;
}

uint64_t sub_1004BA3B8(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD, uint64_t))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), 1);
}

os_unfair_lock_s *sub_1004BA3D8(os_unfair_lock_s *result, int a2, uint64_t a3)
{
  os_unfair_lock_s *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  _QWORD v11[5];
  char v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  const char *v16;

  if (HIBYTE(result[49]._os_unfair_lock_opaque) != a2)
  {
    v5 = result;
    v6 = qword_1009999E0;
    if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
    {
      v7 = sub_100021770(a3);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      v9 = (void *)v8;
      v10 = "off";
      if (a2)
        v10 = "on";
      *(_DWORD *)buf = 138543618;
      v14 = v8;
      v15 = 2080;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Bluetooth Daemon: LEA streaming to device: %{public}@  %s", buf, 0x16u);

    }
    HIBYTE(v5[49]._os_unfair_lock_opaque) = a2;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1004BA520;
    v11[3] = &unk_100932920;
    v11[4] = a3;
    v12 = a2;
    sub_10001FD88(v5 + 30, v11);
    return (os_unfair_lock_s *)sub_1004B8BF8(v5);
  }
  return result;
}

uint64_t sub_1004BA520(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD, uint64_t))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), 3);
}

void sub_1004BA540(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  id v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  _QWORD v11[5];
  char v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  const char *v16;

  if (*(unsigned __int8 *)(a1 + 201) != a2)
  {
    v6 = qword_1009999E0;
    if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
    {
      v7 = sub_100649588(a3);
      v8 = objc_claimAutoreleasedReturnValue(v7);
      v9 = (void *)v8;
      v10 = "off";
      if (a2)
        v10 = "on";
      *(_DWORD *)buf = 138543618;
      v14 = v8;
      v15 = 2080;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BT ACL protect mode to device %{public}@: %s", buf, 0x16u);

    }
    *(_BYTE *)(a1 + 201) = a2;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1004BA680;
    v11[3] = &unk_100932920;
    v11[4] = a3;
    v12 = a2;
    sub_10001FD88((os_unfair_lock_s *)(a1 + 120), v11);
  }
}

uint64_t sub_1004BA680(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1004BA69C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 203) = a2;
  return result;
}

uint64_t sub_1004BA6A4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 202) = a2;
  return result;
}

_BYTE *sub_1004BA6AC(_BYTE *result, int a2)
{
  _BYTE *v2;
  _QWORD v3[4];
  char v4;

  if (result[204] != a2)
  {
    v2 = result;
    result[204] = a2;
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1004BA724;
    v3[3] = &unk_100932968;
    v4 = a2;
    sub_10001FD88((os_unfair_lock_s *)result + 30, v3);
    return sub_1004B8BF8(v2);
  }
  return result;
}

uint64_t sub_1004BA724(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD, uint64_t))
{
  return (**a2)(a2, 0, *(unsigned __int8 *)(a1 + 32), 4);
}

void sub_1004BA740(double a1)
{
  void *v1;
  id v2;

  if (a1 <= 0.0)
    v1 = 0;
  else
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:"));
  v2 = v1;
  CFPreferencesSetAppValue(CFSTR("DenylistEnabledTime"), v1, CFSTR("com.apple.BTServer"));

}

void sub_1004BA7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double sub_1004BA7B4()
{
  void *v0;
  double v1;
  uint64_t v2;
  double v3;

  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("DenylistEnabledTime"), CFSTR("com.apple.BTServer"));
  v1 = 0.0;
  if (v0)
  {
    v2 = objc_opt_class(NSDate);
    if ((objc_opt_isKindOfClass(v0, v2) & 1) != 0)
    {
      objc_msgSend(v0, "timeIntervalSinceReferenceDate");
      v1 = v3;
    }
  }

  return v1;
}

void sub_1004BA824(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004BA834(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 164) != a2)
  {
    *(_DWORD *)(a1 + 164) = a2;
    return sub_1004B8D14(a1);
  }
  return a1;
}

BOOL sub_1004BA84C(_BYTE *a1)
{
  return !a1[198] && !a1[199] && a1[204] == 0;
}

BOOL sub_1004BA874(_BYTE *a1)
{
  if (IsAppleInternalBuild())
  {
    if (qword_1009931E0 != -1)
      dispatch_once(&qword_1009931E0, &stru_100932988);
    if (byte_1009931D8)
      return 1;
  }
  sub_1000438A4();
  return (sub_100049F50() || !a1[197] && !a1[198]) && !a1[199] && a1[204] == 0;
}

void sub_1004BA90C(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  void *__p[2];
  char v6;
  _BYTE buf[12];
  char v8;

  v1 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "AllowConnScanPrioritizationAlways");
  v2 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, __p, &byte_1009931D8);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2)
      return;
  }
  else if (!v2)
  {
    return;
  }
  v3 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009931D8)
      v4 = "Yes";
    else
      v4 = "No";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: AllowConnScanPrioritizationAlways: %s", buf, 0xCu);
  }
}

void sub_1004BAA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL sub_1004BAA7C(_BYTE *a1)
{
  return a1[197] || a1[198] || a1[200] || a1[204] != 0;
}

BOOL sub_1004BAAAC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 197) && !*(_BYTE *)(a1 + 198))
    return 0;
  if (qword_100977B18 != -1)
    dispatch_once(&qword_100977B18, &stru_100932C18);
  return sub_1002BF678(qword_100977B10);
}

uint64_t sub_1004BAB08()
{
  int v0;
  int v1;
  unsigned int v2;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100932C38);
  v0 = sub_1004725FC((uint64_t)off_1009778E0);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100932B98);
  v1 = sub_10066189C((uint64_t)off_1009778C0);
  if (v1)
    v2 = 3;
  else
    v2 = 1;
  if (v0)
    return v2;
  else
    return 2 * (v1 != 0);
}

void sub_1004BABA8(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v9;
  NSObject *v10;
  void *p_p;
  void *__p;
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  void *v21;

  if (*(_BYTE *)a2)
  {
    v9 = *(_DWORD *)(a2 + 20) + a4;
    *(_DWORD *)(a2 + 16) += a3;
    *(_DWORD *)(a2 + 20) = v9;
    *(_DWORD *)(a2 + 28) += a5;
  }
  *(_BYTE *)a2 = 1;
  v10 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEBUG))
  {
    sub_100017BFC((unsigned __int8 *)a2);
    if (v13 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 67109890;
    v15 = a3;
    v16 = 1024;
    v17 = a4;
    v18 = 1024;
    v19 = a5;
    v20 = 2080;
    v21 = p_p;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "updateActualRxForRequest totalRx:%d btMCRx:%d duration:%d rxThreshold:%s", buf, 0x1Eu);
    if (v13 < 0)
      operator delete(__p);
  }
}

uint64_t sub_1004BACE4(uint64_t a1)
{

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

uint64_t sub_1004BAD40(uint64_t a1, uint64_t *a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  const unsigned __int8 *v7;
  NSObject *v8;
  void **v9;
  int v10;
  int v11;
  int v12;
  id v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  id v19;
  id v20;
  int v21;
  int v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t *v31;
  __int128 v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  NSObject *v37;
  void **v38;
  char v40;
  void *v42[2];
  uint64_t v43;
  _OWORD v44[2];
  void *__p[2];
  __int128 v46;
  id v47[2];
  _QWORD v48[2];
  uint8_t buf[4];
  void **v50;
  uuid_string_t out;

  v48[0] = 0;
  v48[1] = 0;
  sub_10003415C((uint64_t)v48, a1 + 40);
  if (*(_QWORD *)(a1 + 240))
    v3 = 1;
  else
    v3 = *(_QWORD *)(a1 + 264) != 0;
  v40 = v3;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = (uint64_t **)(a1 + 248);
    do
    {
      v46 = 0u;
      v47[0] = 0;
      *(_OWORD *)__p = 0u;
      memset(v44, 0, sizeof(v44));
      v47[1] = 0;

      BYTE1(v44[0]) = 0;
      DWORD1(v44[0]) = 0;
      v7 = (const unsigned __int8 *)sub_100030BCC(buf, *(_QWORD *)v4);
      memset(out, 0, sizeof(out));
      uuid_unparse_upper(v7, out);
      sub_100091AE8(v42, out);
      if (SBYTE7(v46) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = *(_OWORD *)v42;
      *(_QWORD *)&v46 = v43;
      std::string::append((std::string *)__p, "-connectionScan");
      v8 = qword_1009999E0;
      if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
      {
        if ((SBYTE7(v46) & 0x80u) == 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        v10 = *(_DWORD *)(v4 + 8);
        v11 = *(_DWORD *)(v4 + 12);
        v12 = *(_DWORD *)(v4 + 16);
        *(_DWORD *)out = 136315906;
        *(_QWORD *)&out[4] = v9;
        *(_WORD *)&out[12] = 1024;
        *(_DWORD *)&out[14] = v10;
        *(_WORD *)&out[18] = 1024;
        *(_DWORD *)&out[20] = v11;
        *(_WORD *)&out[24] = 1024;
        *(_DWORD *)&out[26] = v12;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "requestConnectionScanRxThreshold device=%s totalRx=%u btMCRx=%u timeout=%u", (uint8_t *)out, 0x1Eu);
      }
      memset(out, 0, 24);
      v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)v4, "UUIDString")));
      sub_100091AE8(out, (char *)objc_msgSend(v13, "UTF8String"));

      v14 = sub_10001F2AC((uint64_t)v6, (const void **)out);
      v15 = *(_DWORD *)(v4 + 8);
      v16 = *(_DWORD *)(v4 + 12);
      v17 = *(_DWORD *)(v4 + 16);
      if (!__PAIR64__(v16, v15) && !v17)
      {
        v18 = v14;
        if (a1 + 256 != v14)
        {
          LOBYTE(v44[0]) = 0;
          memset((char *)v44 + 8, 0, 24);
          v19 = v47[0];
          v47[0] = 0;

          v20 = v47[1];
          v47[1] = 0;

          *(_QWORD *)((char *)&v44[1] + 4) = *(_QWORD *)(v18 + 76);
          LOWORD(v44[0]) = *(_WORD *)(v18 + 56);
          v21 = *(_DWORD *)(v18 + 112);
          *(_OWORD *)((char *)v44 + 4) = *(_OWORD *)(v18 + 60);
          v22 = *(_DWORD *)(v18 + 84);
          DWORD2(v46) = v21;
          HIDWORD(v44[1]) = v22;
          v23 = *(void **)(v18 + 120);
          if (v23)
          {
            v24 = objc_retainBlock(v23);
            v25 = v47[0];
            v47[0] = v24;

          }
          v26 = *(void **)(v18 + 128);
          if (v26)
          {
            v27 = objc_retainBlock(v26);
            v28 = v47[1];
            v47[1] = v27;

          }
          BYTE1(v44[0]) = 1;
          v15 = *(_DWORD *)(v4 + 8);
          v16 = *(_DWORD *)(v4 + 12);
          v17 = *(_DWORD *)(v4 + 16);
        }
      }
      *((_QWORD *)&v44[0] + 1) = __PAIR64__(v16, v15);
      DWORD2(v44[1]) = v17;
      v29 = objc_retainBlock(*(id *)(v4 + 32));
      v30 = v47[1];
      v47[1] = v29;

      DWORD2(v46) = *(_DWORD *)(v4 + 20);
      v42[0] = out;
      v31 = sub_1004BC83C(v6, (const void **)out, (uint64_t)&unk_100740F58, (__int128 **)v42);
      v32 = v44[1];
      *(_OWORD *)(v31 + 7) = v44[0];
      *(_OWORD *)(v31 + 9) = v32;
      std::string::operator=((std::string *)(v31 + 11), (const std::string *)__p);
      *((_DWORD *)v31 + 28) = DWORD2(v46);
      v33 = objc_retainBlock(v47[0]);
      v34 = (void *)v31[15];
      v31[15] = (uint64_t)v33;

      v35 = objc_retainBlock(v47[1]);
      v36 = (void *)v31[16];
      v31[16] = (uint64_t)v35;

      if (BYTE1(v44[0]))
      {
        v37 = qword_1009999E0;
        if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
        {
          sub_100017BFC((unsigned __int8 *)v44);
          v38 = v42;
          if (v43 < 0)
            v38 = (void **)v42[0];
          *(_DWORD *)buf = 136315138;
          v50 = v38;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Session %s cancelled", buf, 0xCu);
          if (SHIBYTE(v43) < 0)
            operator delete(v42[0]);
        }
      }
      if (out[23] < 0)
        operator delete(*(void **)out);

      if (SBYTE7(v46) < 0)
        operator delete(__p[0]);
      v4 += 40;
    }
    while (v4 != v5);
  }
  sub_10006BF1C(a1, v40);
  return sub_100034234((uint64_t)v48);
}

void sub_1004BB17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_100034234((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BB1D8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 48) + 1000 * *(_DWORD *)(a1 + 40);
  return sub_1004BB204(*(_DWORD **)(a1 + 32), v1, v1, v1, v1, v1);
}

uint64_t sub_1004BB204(_DWORD *a1, int a2, int a3, int a4, int a5, int a6)
{
  NSObject *v12;
  _QWORD v14[2];
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, (uint64_t)(a1 + 10));
  v12 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67110144;
    v16 = a2;
    v17 = 1024;
    v18 = a3;
    v19 = 1024;
    v20 = a4;
    v21 = 1024;
    v22 = a5;
    v23 = 1024;
    v24 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "scanRxThresholdVSE totalRx=%u totalBTMCRx=%u, totalConnRx=%u, totalConnBTMCRx=%u totalTime=%u", buf, 0x20u);
  }
  a1[86] = a2;
  a1[87] = a3;
  a1[88] = a6;
  a1[89] = a4;
  a1[90] = a5;
  a1[91] = a6;
  sub_1000064E0(a1);
  return sub_100034234((uint64_t)v14);
}

void sub_1004BB32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_1004BB348(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t sub_1004BB358(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  _DWORD v13[2];
  _BYTE buf[12];
  __int16 v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "fSoftwareScanRxTimer Timer expired!", buf, 2u);
  }
  sub_1000065FC(v1);
  *(_QWORD *)buf = 0;
  sub_10004AD30((uint64_t)buf);
  v3 = *(int *)buf;
  v4 = *(__int16 *)&buf[4];
  v5 = *(_QWORD *)(v1 + 288);
  v6 = *(_QWORD *)(v1 + 296);
  *(_WORD *)&buf[6] = 0;
  v13[0] = v5;
  v13[1] = (unsigned __int16)v6;
  if ((sub_100072ACC((uint64_t)buf, (uint64_t)v13) & 0x80000000) != 0 || (v7 = v4 - v6 + 1000 * (v3 - v5), HIDWORD(v7)))
  {
    v8 = qword_1009999E0;
    if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_QWORD *)(v1 + 296) + 1000 * *(_QWORD *)(v1 + 288);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v4 + 1000 * (int)v3;
      v15 = 2048;
      v16 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "armSoftwareScanRxTimer: currentTime %llu fSetRxThresholdVSCTime %llu", buf, 0x16u);
    }
    LODWORD(v9) = 0;
    LODWORD(v10) = 0;
  }
  else
  {
    v9 = v7 / 0x3E8;
    v10 = v7 % 0x3E8;
  }
  return sub_1004BB204((_DWORD *)v1, (int)v10 + 1000 * (int)v9, (int)v10 + 1000 * (int)v9, (int)v10 + 1000 * (int)v9, (int)v10 + 1000 * (int)v9, (int)v10 + 1000 * (int)v9);
}

void sub_1004BB510(uint64_t a1, unint64_t a2, uint64_t a3)
{
  NSObject *v5;
  void *v6;
  void *p_p;
  unint64_t v8;
  unsigned __int8 *v9;
  void *__p;
  char v11;
  void *v12;
  char v13;
  __int128 v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  void *v18;

  *(_QWORD *)&v14 = a2;
  *((_QWORD *)&v14 + 1) = a3;
  v5 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100021AE4(a1 + 272);
    sub_100021AE4((uint64_t)&v14);
    v6 = &v12;
    if (v13 < 0)
      v6 = v12;
    if (v11 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315394;
    v16 = v6;
    v17 = 2080;
    v18 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "wifiStateChanged: from %s to %s", buf, 0x16u);
    if (v11 < 0)
      operator delete(__p);
    if (v13 < 0)
      operator delete(v12);
    LODWORD(v8) = DWORD1(v14);
  }
  else
  {
    v8 = HIDWORD(a2);
  }
  v9 = (unsigned __int8 *)(a1 + 272);
  if (*(_DWORD *)(a1 + 276) != (_DWORD)v8
    || *v9 != v14
    || *(unsigned __int8 *)(a1 + 280) != BYTE8(v14))
  {
    *(_OWORD *)v9 = v14;
    sub_100016994(a1);
  }
}

void sub_1004BB680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004BB6A4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_1004BB510(a1 - 8, a2, a3);
}

void sub_1004BB6AC(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  _QWORD v5[4];
  char v6;
  uint8_t buf[4];
  int v8;

  v4 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SDP in progress changed to %d", buf, 8u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004BB794;
  v5[3] = &unk_100932968;
  v6 = a2;
  sub_10001FD88(a1 + 30, v5);
}

uint64_t sub_1004BB794(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1004BB7AC(uint64_t a1)
{
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_100932C98);
  sub_1004BB6AC((os_unfair_lock_s *)off_100977B38, *(unsigned __int8 *)(a1 + 32));
}

void sub_1004BB7FC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[7];
  __int128 v16;
  __int128 v17;
  char v18;
  __int16 v19;
  char v20;
  char v21;
  __int16 v22;
  char v23;
  __int128 v24;
  __int128 v25;
  _DWORD v26[2];
  _BYTE buf[12];
  __int16 v28;
  uint64_t v29;

  v3 = a2[1];
  v24 = *a2;
  v25 = v3;
  v4 = *((_BYTE *)a2 + 32);
  v22 = *(_WORD *)((char *)a2 + 33);
  v23 = *((_BYTE *)a2 + 35);
  *(_QWORD *)buf = 0;
  sub_10004AD30((uint64_t)buf);
  v5 = *(int *)buf;
  v6 = *(__int16 *)&buf[4];
  v7 = *(_QWORD *)(a1 + 288);
  v8 = *(_QWORD *)(a1 + 296);
  *(_WORD *)&buf[6] = 0;
  v26[0] = v7;
  v26[1] = (unsigned __int16)v8;
  if ((sub_100072ACC((uint64_t)buf, (uint64_t)v26) & 0x80000000) != 0 || (v9 = v6 - v8 + 1000 * (v5 - v7), HIDWORD(v9)))
  {
    v10 = qword_1009999E0;
    if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_QWORD *)(a1 + 296) + 1000 * *(_QWORD *)(a1 + 288);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v6 + 1000 * (int)v5;
      v28 = 2048;
      v29 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "handleCriticalBLEStats: currentTime %llu fSetRxThresholdVSCTime %llu", buf, 0x16u);
    }
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v11 = v9 / 0x3E8;
    v12 = v9 % 0x3E8;
  }
  v13 = sub_1000419F4();
  v15[1] = 3321888768;
  v16 = v24;
  v17 = v25;
  v15[0] = _NSConcreteStackBlock;
  v15[2] = sub_1004BB9D0;
  v15[3] = &unk_100932A38;
  v18 = v4;
  v19 = v22;
  v20 = v23;
  v21 = v4;
  v15[4] = a1;
  v15[5] = v11;
  v15[6] = v12;
  sub_100041A34(v13, v15);
}

uint64_t sub_1004BB9D0(uint64_t a1)
{
  _DWORD *v2;
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  v2 = *(_DWORD **)(a1 + 32);
  v3 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 56);
    v5 = *(_DWORD *)(a1 + 60);
    v6 = *(_DWORD *)(a1 + 64);
    v7 = *(_DWORD *)(a1 + 68);
    v8 = *(_DWORD *)(a1 + 72);
    v9 = *(_DWORD *)(a1 + 76);
    v10 = *(_DWORD *)(a1 + 80);
    v11 = *(_DWORD *)(a1 + 84);
    v12 = *(unsigned __int8 *)(a1 + 92);
    v13 = *(_DWORD *)(a1 + 48) + 1000 * *(_DWORD *)(a1 + 40);
    v15[0] = 67111424;
    v15[1] = v4;
    v16 = 1024;
    v17 = v5;
    v18 = 1024;
    v19 = v6;
    v20 = 1024;
    v21 = v7;
    v22 = 1024;
    v23 = v8;
    v24 = 1024;
    v25 = v9;
    v26 = 1024;
    v27 = v10;
    v28 = 1024;
    v29 = v11;
    v30 = 1024;
    v31 = v12;
    v32 = 1024;
    v33 = v13;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "handleCriticalBLEStats: scan time %u MC %u numADVs %u MC %u conn scan time %u MC %u numPassUpAdvs %u MC %u reportReason %u sinceLastVSC %u", (uint8_t *)v15, 0x3Eu);
  }
  return sub_1004BB204(v2, *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 72), *(_DWORD *)(a1 + 76), *(_DWORD *)(a1 + 48) + 1000 * *(_DWORD *)(a1 + 40));
}

uint64_t sub_1004BBB0C(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  _QWORD v7[2];
  uint8_t buf[4];
  const char *v9;

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 40);
  *(_BYTE *)(a1 + 488) = a2;
  v4 = qword_1009999E0;
  if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "no";
    if (a2)
      v5 = "yes";
    *(_DWORD *)buf = 136315138;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Game mode enabled: '%s'", buf, 0xCu);
  }
  return sub_100034234((uint64_t)v7);
}

uint64_t sub_1004BBBE4(uint64_t a1, int a2)
{
  return sub_1004BBB0C(a1 - 24, a2);
}

uint64_t sub_1004BBBEC(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t *v4;
  _QWORD v5[2];
  unsigned int v6;
  unsigned int *v7;

  v6 = a2;
  if (a2 != 0x20000)
  {
    v2 = result;
    v5[0] = 0;
    v5[1] = 0;
    sub_10003415C((uint64_t)v5, result + 40);
    if (*(_BYTE *)(v2 + 104) && !*(_BYTE *)(v2 + 488))
    {
      v3 = (uint64_t **)(v2 + 432);
      v7 = &v6;
      v4 = sub_10033EC4C(v3, &v6, (uint64_t)&unk_100740F58, &v7);
      ++*((_DWORD *)v4 + 8);
      v7 = &v6;
      if (*((_DWORD *)sub_10033EC4C(v3, &v6, (uint64_t)&unk_100740F58, &v7) + 8) == 1)
        objc_msgSend(gCBDaemonServer, "recordEventWithStarting:useCase:", 1, v6);
    }
    return sub_100034234((uint64_t)v5);
  }
  return result;
}

void sub_1004BBCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BBCD0(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t **v3;
  int v4;
  _QWORD v5[2];
  unsigned int v6;
  unsigned int *v7;

  v6 = a2;
  if (a2 != 0x20000)
  {
    v2 = result;
    v5[0] = 0;
    v5[1] = 0;
    sub_10003415C((uint64_t)v5, result + 40);
    if (*(_BYTE *)(v2 + 104))
    {
      v3 = (uint64_t **)(v2 + 432);
      v7 = &v6;
      if (*((_DWORD *)sub_10033EC4C(v3, &v6, (uint64_t)&unk_100740F58, &v7) + 8))
      {
        v7 = &v6;
        v4 = *((_DWORD *)sub_10033EC4C(v3, &v6, (uint64_t)&unk_100740F58, &v7) + 8);
        v7 = &v6;
        *((_DWORD *)sub_10033EC4C(v3, &v6, (uint64_t)&unk_100740F58, &v7) + 8) = v4 - 1;
        v7 = &v6;
        if (!*((_DWORD *)sub_10033EC4C(v3, &v6, (uint64_t)&unk_100740F58, &v7) + 8))
          objc_msgSend(gCBDaemonServer, "recordEventWithStarting:useCase:", 0, v6);
      }
    }
    return sub_100034234((uint64_t)v5);
  }
  return result;
}

void sub_1004BBDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004BBE00(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  id v8;
  uint64_t **v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[2];
  unsigned int v14;
  unsigned int *v15;

  v8 = a2;
  v14 = a3;
  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 40);
  if (v8 && *(_BYTE *)(a1 + 104))
  {
    if (a4)
    {
      v15 = &v14;
      if (!sub_1004BCBC0((uint64_t **)(a1 + 456), &v14, (uint64_t)&unk_100740F58, &v15)[5] && !*(_BYTE *)(a1 + 488))
      {
        v15 = &v14;
        v9 = sub_1004BCBC0((uint64_t **)(a1 + 456), &v14, (uint64_t)&unk_100740F58, &v15);
        objc_storeStrong((id *)v9 + 5, a2);
        v10 = (void *)gCBDaemonServer;
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "UUIDString"));
        objc_msgSend(v10, "recordEventWithDeviceIdentifier:initiator:starting:useCase:", v11, 1, 1, v14);
LABEL_9:

      }
    }
    else
    {
      v15 = &v14;
      if (sub_1004BCBC0((uint64_t **)(a1 + 456), &v14, (uint64_t)&unk_100740F58, &v15)[5])
      {
        sub_1004BCC80(a1 + 456, &v14);
        v12 = (void *)gCBDaemonServer;
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "UUIDString"));
        objc_msgSend(v12, "recordEventWithDeviceIdentifier:initiator:starting:useCase:", v11, 1, 0, v14);
        goto LABEL_9;
      }
    }
  }
  sub_100034234((uint64_t)v13);

}

void sub_1004BBF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004BBFB4(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  NSObject *v10;
  const char *v11;
  _QWORD v12[4];
  char v13;
  uint8_t buf[4];
  const char *v15;

  if ((a3 + a2) < 4u)
    v8 = a8;
  else
    v8 = 0;
  if (*(unsigned __int8 *)(a1 + 217) != v8)
  {
    v10 = qword_1009999E0;
    if (os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_INFO))
    {
      v11 = "False";
      if (v8)
        v11 = "True";
      *(_DWORD *)buf = 136315138;
      v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Bluetooth Daemon: AoSStateChanged, isAoSAllowed: %s", buf, 0xCu);
    }
    *(_BYTE *)(a1 + 217) = v8;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1004BC0D0;
    v12[3] = &unk_100932968;
    v13 = v8;
    sub_10001FD88((os_unfair_lock_s *)(a1 + 120), v12);
  }
}

uint64_t sub_1004BC0D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1004BC0E8(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  sub_1004BBFB4(a1 - 32, a2, a3, 0, 0, 0, 0, a8);
}

void sub_1004BC140(id a1)
{
  operator new();
}

void sub_1004BC180()
{
  operator delete();
}

void sub_1004BC1A4(id a1)
{
  operator new();
}

void sub_1004BC1E4()
{
  operator delete();
}

void sub_1004BC208(id a1)
{
  operator new();
}

void sub_1004BC248()
{
  operator delete();
}

void sub_1004BC26C(id a1)
{
  operator new();
}

void sub_1004BC2AC()
{
  operator delete();
}

char *sub_1004BC2D0(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1004BC4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004BC50C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1004BC50C(a1, *a2);
    sub_1004BC50C(a1, a2[1]);
    sub_1004BC554((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1004BC554(uint64_t a1)
{

  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_1004BC598(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1004BC598(a1, *a2);
    sub_1004BC598(a1, a2[1]);
    sub_1004BC5E0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1004BC5E0(uint64_t a1)
{

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1004BC634(id a1)
{
  operator new();
}

void sub_1004BC674()
{
  operator delete();
}

void sub_1004BC698(id a1)
{
  operator new();
}

void sub_1004BC6D8()
{
  operator delete();
}

uint64_t sub_1004BC6FC(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  sub_1000040CC((uint64_t **)a1, v4);
  sub_1004BC554((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t sub_1004BC780(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_10001F2AC((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_1000040CC(a1, v3);
  sub_1004BC5E0((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void sub_1004BC7D8(id a1)
{
  operator new();
}

void sub_1004BC818()
{
  operator delete();
}

uint64_t *sub_1004BC83C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)sub_10001F574((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1004BC8F0((uint64_t)a1, a4, v10);
    sub_100004078(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1004BC99C((uint64_t)v10, 0);
  }
  return v7;
}

double sub_1004BC8F0@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x88uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  v7 = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_10003430C(v7, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)v7 = v9;
  }
  result = 0.0;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1004BC984(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004BC99C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1004BC99C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1004BC5E0((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_1004BC9E0(id a1)
{
  operator new();
}

void sub_1004BCA20()
{
  operator delete();
}

void sub_1004BCA44(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1004BC554((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_1004BCA88(id a1)
{
  operator new();
}

void sub_1004BCB9C()
{
  operator delete();
}

uint64_t **sub_1004BCBC0(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_1004BCC80(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  sub_1004BCCE4((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_1004BCCE4(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_1000040CC(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

uint64_t sub_1004BCD1C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100932CE0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = 0;
  sub_1000160D0(a1 + 16);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_1000160D0(a1 + 104);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  sub_1000160D0(a1 + 192);
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  *(_BYTE *)(a1 + 304) = 0;
  return a1;
}

void sub_1004BCDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  void **v15;
  uint64_t v16;
  void *v18;

  v15 = v13;
  v16 = v12;
  a10 = v15;
  sub_1004BEFA8(&a10);
  sub_100069BDC(v16);
  v18 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v10 + 88) = v18;
    operator delete(v18);
  }
  sub_100069BDC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BCE04(uint64_t a1)
{
  void **v2;
  void *v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = off_100932CE0;
  v2 = (void **)(a1 + 168);
  sub_1004BEFE8((uint64_t *)(a1 + 168));
  sub_10001A82C(a1 + 280, *(_QWORD **)(a1 + 288));
  v3 = *(void **)(a1 + 256);
  if (v3)
  {
    *(_QWORD *)(a1 + 264) = v3;
    operator delete(v3);
  }
  sub_100069BDC(a1 + 192);
  v6 = v2;
  sub_1004BEFA8(&v6);
  sub_100069BDC(a1 + 104);
  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(_QWORD *)(a1 + 88) = v4;
    operator delete(v4);
  }
  sub_100069BDC(a1 + 16);
  return a1;
}

void sub_1004BCE98(uint64_t a1)
{
  sub_1004BCE04(a1);
  operator delete();
}

uint64_t sub_1004BCEBC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, (uint64_t)(a1 + 2));
  v8 = *a3;
  v9 = a3[1];
  v11 = (_QWORD *)a1[10];
  v10 = a1[11];
  v20 = *a3;
  v21 = v9;
  if (v11 != (_QWORD *)v10)
  {
    while (*v11 != a2 || v20 != v11[1] || v21 != v11[2])
    {
      v11 += 5;
      if (v11 == (_QWORD *)v10)
        goto LABEL_10;
    }
  }
  if (v11 == (_QWORD *)v10)
  {
LABEL_10:
    v16 = a2;
    *(_QWORD *)&v17 = v8;
    *((_QWORD *)&v17 + 1) = v9;
    v18 = -1;
    v19 = a4;
    if (v10 >= a1[12])
    {
      v13 = sub_1004BF03C(a1 + 10, (uint64_t)&v16);
    }
    else
    {
      *(_QWORD *)v10 = a2;
      *(_OWORD *)(v10 + 8) = v17;
      *(_DWORD *)(v10 + 24) = -1;
      *(_QWORD *)(v10 + 32) = a4;
      v13 = v10 + 40;
    }
    a1[11] = v13;
  }
  sub_100034234((uint64_t)v15);
  return 0;
}

void sub_1004BCFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BCFC0(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  int v6;
  uint64_t v7;
  int v10;
  int v11;
  NSObject *v12;
  NSObject *v14;
  _BYTE *v15;
  int v16;
  NSObject *v17;
  _BYTE *v18;
  int v19;
  NSObject *v20;
  _BOOL4 v21;
  void *v22;
  const char *v23;
  _BYTE *v24;
  _BYTE *v25;
  const char *v26;
  void *v27;
  _BYTE *v28;
  int v30;
  _BYTE *v31;
  NSObject *v32;
  _BYTE *v33;
  const char *v34;
  NSObject *v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned __int8 v40;
  __int128 v41;
  void *v42;
  _BYTE *v43;
  uint64_t v44;
  _BYTE __p[12];
  char v46;
  uint8_t buf[4];
  _BYTE *v48;

  v6 = *(_DWORD *)(a1 + 12);
  if (v6 != 2048)
  {
    if (v6 == -1)
    {
      sub_10043F78C(a2, (uint64_t)&v42);
      if (SHIBYTE(v44) < 0)
      {
        v24 = v43;
        operator delete(v42);
        if (v24)
          return 1;
      }
      else if (HIBYTE(v44))
      {
        return 1;
      }
      *a3 |= 4u;
      return 1;
    }
    return 0;
  }
  if (!sub_100444790(a2))
  {
    if ((sub_1004BD96C(a1, a2) & 1) == 0 && !*(_BYTE *)(a2 + 785))
      return 0;
    v19 = sub_1004BD96C(a1, a2);
    v20 = qword_100999800;
    v21 = os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT);
    if (v19)
    {
      if (v21)
      {
        sub_10043E5F8(a2, &v42);
        if (v44 >= 0)
          v22 = &v42;
        else
          v22 = v42;
        *(_DWORD *)__p = 136446210;
        *(_QWORD *)&__p[4] = v22;
        v23 = "EIR matched for device %{public}s, requesting SDP";
        goto LABEL_52;
      }
    }
    else if (v21)
    {
      sub_10043E5F8(a2, &v42);
      if (v44 >= 0)
        v27 = &v42;
      else
        v27 = v42;
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = v27;
      v23 = "EIR previously matched for device %{public}s, requesting SDP for deadvertised service(s)";
LABEL_52:
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v23, __p, 0xCu);
      if (SHIBYTE(v44) < 0)
        operator delete(v42);
    }
    v7 = 0;
    *a3 |= 0x10u;
    return v7;
  }
  v41 = xmmword_100741310;
  v40 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  if (sub_1004442A0(a2, (uint64_t)&v41, 0xF000u, &v42) && v43 - (_BYTE *)v42 == 16)
  {
    v10 = *(unsigned __int8 *)v42;
    v11 = *((unsigned __int16 *)v42 + 1);
    v12 = qword_100999800;
    if (v10 == 1 && v11 == 1)
    {
      v30 = *((unsigned __int16 *)v42 + 4);
      if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
      {
        sub_10043E5F8(a2, __p);
        v31 = v46 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136446210;
        v48 = v31;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Device %{public}s supports SDP dirty byte caching", buf, 0xCu);
        if (v46 < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1004521F4(a2, &v40))
      {
        v32 = qword_100999800;
        if (v30 != v40)
        {
          if (a4)
          {
            if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(a2, __p);
              v38 = v46 >= 0 ? __p : *(_BYTE **)__p;
              *(_DWORD *)buf = 136446210;
              v48 = v38;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "EIR is newer than SDP for device %{public}s, re-requesting SDP", buf, 0xCu);
              if (v46 < 0)
                operator delete(*(void **)__p);
            }
            goto LABEL_30;
          }
          if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
          {
            sub_10043E5F8(a2, __p);
            v39 = v46 >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 136446210;
            v48 = v39;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "SDP is newer than EIR for device %{public}s, clearing EIR", buf, 0xCu);
            if (v46 < 0)
              operator delete(*(void **)__p);
          }
          sub_1004517E0(a2);
          goto LABEL_62;
        }
        if (!os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
          goto LABEL_62;
        sub_10043E5F8(a2, __p);
        if (v46 >= 0)
          v33 = __p;
        else
          v33 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136446210;
        v48 = v33;
        v34 = "Both EIR and SDP are up-to-date for device %{public}s";
        v35 = v32;
      }
      else
      {
        v36 = qword_100999800;
        if (!os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
          goto LABEL_62;
        sub_10043E5F8(a2, __p);
        if (v46 >= 0)
          v37 = __p;
        else
          v37 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136446210;
        v48 = v37;
        v34 = "We have SDP but not EIR for device %{public}s";
        v35 = v36;
      }
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, v34, buf, 0xCu);
      if ((v46 & 0x80000000) == 0)
        goto LABEL_62;
      goto LABEL_61;
    }
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
      sub_1006F90D4(v10, v11, v12);
  }
  v14 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a2, __p);
    v15 = v46 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    v48 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Device %{public}s does not support SDP dirty byte caching", buf, 0xCu);
    if (v46 < 0)
      operator delete(*(void **)__p);
  }
  v16 = sub_1004521F4(a2, &v40);
  v17 = qword_100999800;
  if (v16)
  {
    if (a4)
    {
      if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v18 = v46 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136446210;
        v48 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "EIR is newer than SDP for device %{public}s, re-requesting SDP", buf, 0xCu);
        if (v46 < 0)
          operator delete(*(void **)__p);
      }
LABEL_30:
      sub_10043E330(a2);
      v7 = 0;
      *a3 |= 0x10u;
      goto LABEL_63;
    }
    if (!os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
      goto LABEL_62;
    sub_10043E5F8(a2, __p);
    if (v46 >= 0)
      v28 = __p;
    else
      v28 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    v48 = v28;
    v26 = "Both EIR and SDP are up-to-date for device %{public}s";
  }
  else
  {
    if (!os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
      goto LABEL_62;
    sub_10043E5F8(a2, __p);
    if (v46 >= 0)
      v25 = __p;
    else
      v25 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    v48 = v25;
    v26 = "We have SDP but not EIR for device %{public}s";
  }
  _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, v26, buf, 0xCu);
  if (v46 < 0)
LABEL_61:
    operator delete(*(void **)__p);
LABEL_62:
  v7 = sub_1004BD6F8(a1, a2);
LABEL_63:
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  return v7;
}

void sub_1004BD6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004BD6F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  void *v7;
  size_t v8;
  char v9;
  NSObject *v10;
  const char *p_p;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  void *v15;
  void *__p;
  unsigned int *v18;
  char v19;
  _QWORD v20[2];
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  void *v24;

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 104);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  if (v4 == v5)
  {
LABEL_8:
    if (*(_BYTE *)(a2 + 785))
    {
      v10 = qword_100999800;
      if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, &__p);
        if (v19 >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        *(_DWORD *)buf = 136446210;
        v22 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SDP previously matched for device %{public}s, but no longer does", buf, 0xCu);
        if (v19 < 0)
          operator delete(__p);
      }
      *(_BYTE *)(a2 + 785) = 0;
      v12 = 1;
      goto LABEL_26;
    }
    v12 = 0;
  }
  else
  {
    while (1)
    {
      __p = &off_100918258;
      v6 = *(unsigned int **)(v4 + 8);
      v18 = v6;
      if (v6)
        sub_10003C37C((uint64_t)v6);
      v7 = (void *)sub_10003EB18((uint64_t)&__p);
      v8 = sub_10003F8C4((uint64_t)&__p);
      v9 = sub_1004537E8(a2, v7, v8);
      __p = &off_100918258;
      if (v18)
        sub_100056AAC(v18);
      if ((v9 & 1) != 0)
        break;
      v4 += 16;
      if (v4 == v5)
        goto LABEL_8;
    }
    v12 = 1;
    *(_BYTE *)(a2 + 785) = 1;
  }
  v13 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, &__p);
    v14 = "did not match";
    if ((_DWORD)v12)
      v14 = "matched";
    if (v19 >= 0)
      v15 = &__p;
    else
      v15 = __p;
    *(_DWORD *)buf = 136446466;
    v22 = v14;
    v23 = 2082;
    v24 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "SDP %{public}s for device %{public}s", buf, 0x16u);
    if (v19 < 0)
      operator delete(__p);
  }
LABEL_26:
  sub_100034234((uint64_t)v20);
  return v12;
}

void sub_1004BD930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BD96C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t (**v13)();
  unsigned int *v14;
  _QWORD v15[2];

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 104);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  if (v4 == v5)
  {
    v10 = 0;
  }
  else
  {
    v6 = v4 + 16;
    do
    {
      v13 = &off_100918258;
      v7 = *(unsigned int **)(v6 - 8);
      v14 = v7;
      if (v7)
        sub_10003C37C((uint64_t)v7);
      v8 = (char *)sub_10003EB18((uint64_t)&v13);
      v9 = sub_10003F8C4((uint64_t)&v13);
      v10 = sub_100452440(a2, v8, v9);
      v13 = &off_100918258;
      if (v14)
        sub_100056AAC(v14);
      if (v6 == v5)
        v11 = 1;
      else
        v11 = v10;
      v6 += 16;
    }
    while ((v11 & 1) == 0);
  }
  sub_100034234((uint64_t)v15);
  return v10;
}

void sub_1004BDA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004BDA68(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Enabling Reporting Duplicates.", v3, 2u);
  }
  *(_BYTE *)(a1 + 304) = 1;
}

void sub_1004BDAD8(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Disabling Reporting Duplicates.", v3, 2u);
  }
  *(_BYTE *)(a1 + 304) = 0;
}

uint64_t sub_1004BDB44(uint64_t *a1, const void *a2, size_t a3)
{
  uint64_t v3;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  NSObject *v15;
  uint8_t v17[16];
  uint64_t (**v18)();
  unsigned int *v19;
  uint64_t (**v20)();
  unsigned int *v21;
  _QWORD v22[2];

  v3 = 3;
  if (a2 && a3 - 2049 >= 0xFFFFFFFFFFFFF800)
  {
    v22[0] = 0;
    v22[1] = 0;
    sub_10003415C((uint64_t)v22, (uint64_t)(a1 + 13));
    if ((unint64_t)(a1[22] - a1[21]) < 0x1F1)
    {
      v20 = 0;
      v21 = 0;
      sub_10003994C(&v20, a2, a3);
      v10 = (_QWORD *)a1[21];
      v11 = (_QWORD *)a1[22];
      if (v10 == v11)
      {
LABEL_15:
        if ((unint64_t)v10 >= a1[23])
        {
          v14 = sub_1004BF2AC(a1 + 21, (uint64_t)&v20);
        }
        else
        {
          *v10 = &off_100918258;
          v13 = v21;
          v10[1] = v21;
          if (v13)
            sub_10003C37C((uint64_t)v13);
          v14 = (uint64_t)(v10 + 2);
          a1[22] = (uint64_t)(v10 + 2);
        }
        a1[22] = v14;
      }
      else
      {
        while (1)
        {
          v18 = &off_100918258;
          v12 = (unsigned int *)v10[1];
          v19 = v12;
          if (v12)
            sub_10003C37C((uint64_t)v12);
          if (sub_100068EA0((uint64_t)&v18, (uint64_t)&v20))
            break;
          v18 = &off_100918258;
          if (v19)
            sub_100056AAC(v19);
          v10 += 2;
          if (v10 == v11)
          {
            v10 = (_QWORD *)a1[22];
            goto LABEL_15;
          }
        }
        v15 = qword_100999800;
        if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Key already exists", v17, 2u);
        }
        v18 = &off_100918258;
        if (v19)
          sub_100056AAC(v19);
      }
      v20 = &off_100918258;
      if (v21)
        sub_100056AAC(v21);
      v3 = 0;
    }
    else
    {
      v7 = qword_100999800;
      if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
        sub_1006F9158(v7, v8, v9);
      v3 = 4;
    }
    sub_100034234((uint64_t)v22);
  }
  return v3;
}

void sub_1004BDD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);
  *(_QWORD *)(v7 + 176) = v8;
  if (a7)
    sub_100056AAC(a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BDD74(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  uint64_t (**v7)();
  unsigned int *v8;

  result = 3;
  if (a2 && a3 - 2049 >= 0xFFFFFFFFFFFFF800)
  {
    v7 = 0;
    v8 = 0;
    sub_10003994C(&v7, a2, a3);
    v6[0] = 0;
    v6[1] = 0;
    sub_10003415C((uint64_t)v6, a1 + 104);
    v5 = sub_1004BDEF4(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176), (uint64_t)&v7);
    sub_1004BDE44(a1 + 168, v5, *(_QWORD *)(a1 + 176));
    sub_100034234((uint64_t)v6);
    v7 = &off_100918258;
    if (v8)
      sub_100056AAC(v8);
    return 0;
  }
  return result;
}

void sub_1004BDE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (**a11)(), unsigned int *a12)
{
  sub_100034234((uint64_t)&a9);
  a11 = &off_100918258;
  if (a12)
    sub_100056AAC(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BDE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;

  if (a2 != a3)
  {
    v5 = a3;
    v6 = *(_QWORD *)(a1 + 8);
    if (a3 == v6)
    {
      v8 = a2;
    }
    else
    {
      v7 = 16 * ((a3 - a2) >> 4);
      v8 = a2;
      do
      {
        sub_100041698(v8, v8 + v7);
        v8 += 16;
      }
      while (v8 + v7 != v6);
      v5 = *(_QWORD *)(a1 + 8);
    }
    while (v5 != v8)
    {
      *(_QWORD *)(v5 - 16) = &off_100918258;
      v5 -= 16;
      v9 = *(unsigned int **)(v5 + 8);
      if (v9)
        sub_100056AAC(v9);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  return a2;
}

uint64_t sub_1004BDEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t i;

  if (a1 == a2)
  {
LABEL_5:
    v5 = a2;
  }
  else
  {
    v5 = a1;
    while (!sub_100068EA0(v5, a3))
    {
      v5 += 16;
      if (v5 == a2)
        goto LABEL_5;
    }
  }
  if (v5 != a2)
  {
    for (i = v5 + 16; i != a2; i += 16)
    {
      if (!sub_100068EA0(i, a3))
      {
        sub_100041698(v5, i);
        v5 += 16;
      }
    }
  }
  return v5;
}

uint64_t sub_1004BDF88(uint64_t a1)
{
  *(_BYTE *)(a1 + 8) = 0;
  sub_1004BDFC4(a1, 0, 0);
  return sub_1004BE300((uint64_t **)a1, 0x4E20u);
}

uint64_t sub_1004BDFC4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  char *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint8_t v15;
  _BYTE v16[15];
  _QWORD v17[2];
  __int128 buf;
  uint64_t v19;

  if (a2 > 3)
    v6 = 0;
  else
    v6 = off_100932DF8[a2];
  v7 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Sending '%{public}s' event", (uint8_t *)&buf, 0xCu);
  }
  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 16);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  if (v8 != v9)
  {
    buf = 0uLL;
    v19 = 0;
    sub_1004BF588((char *)&buf, v8, v9, 0xCCCCCCCCCCCCCCCDLL * ((v9 - v8) >> 3));
    sub_100034264((uint64_t)v17);
    v10 = (unint64_t *)buf;
    if ((_QWORD)buf != *((_QWORD *)&buf + 1))
    {
      do
      {
        if (v10[1])
        {
          if (a3)
          {
            if (qword_1009778E8 != -1)
              dispatch_once(&qword_1009778E8, &stru_100932DB8);
            v11 = sub_10046F750((uint64_t)off_1009778E0, *v10, a3);
          }
          else
          {
            v11 = 4294901761;
          }
          if (qword_100977B50 != -1)
            dispatch_once(&qword_100977B50, &stru_100932D98);
          if (sub_100021398(qword_100977B48, *v10) && v11)
          {
            if (qword_10097AB48 != -1)
              dispatch_once(&qword_10097AB48, &stru_100932DD8);
            operator new();
          }
          if (a2 != 1)
          {
            v12 = qword_100999800;
            if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
              sub_1006F9190(&v15, v16, v12);
          }
          sub_100034188((uint64_t)v17);
          v13 = sub_1004BF6AC(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *v10);
          sub_1004BF21C(a1 + 80, v13, *(_QWORD *)(a1 + 88));
          sub_100034264((uint64_t)v17);
        }
        v10 += 5;
      }
      while (v10 != *((unint64_t **)&buf + 1));
      v10 = (unint64_t *)buf;
    }
    if (v10)
    {
      *((_QWORD *)&buf + 1) = v10;
      operator delete(v10);
    }
  }
  return sub_100034234((uint64_t)v17);
}

void sub_1004BE2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BE300(uint64_t **a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t **v5;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t *v10;

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, (uint64_t)(a1 + 24));
  v4 = a1[32];
  if (v4 != a1[33])
  {
    do
    {
      v8 = 0;
      v8 = *v4;
      v7 = 0uLL;
      sub_10043F80C(v8, &v7);
      *(_QWORD *)&v7 = v7 + (*((_QWORD *)&v7 + 1) + (unint64_t)a2) / 0x3E8;
      *((_QWORD *)&v7 + 1) = (*((_QWORD *)&v7 + 1) + (unint64_t)a2) % 0x3E8;
      LODWORD(v10) = v7;
      HIDWORD(v10) = WORD4(v7);
      if (sub_100258AE0((uint64_t)&v10)
        && (v10 = &v8, *((int *)sub_1004BF4C8(a1 + 35, (unint64_t *)&v8, (uint64_t)&unk_100740F58, &v10) + 10) >= 1))
      {
        sub_100034264((uint64_t)v9);
        ((void (*)(uint64_t **, uint64_t))(*a1)[6])(a1, v8);
        sub_100034188((uint64_t)v9);
        v4 = a1[32];
      }
      else
      {
        v10 = &v8;
        v5 = sub_1004BF4C8(a1 + 35, (unint64_t *)&v8, (uint64_t)&unk_100740F58, &v10);
        ++*((_DWORD *)v5 + 10);
        ++v4;
      }
    }
    while (v4 != a1[33]);
    sub_100034264((uint64_t)v9);
  }
  return sub_100034234((uint64_t)v9);
}

void sub_1004BE470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BE48C(uint64_t a1)
{
  return sub_1004BDFC4(a1, 1u, 0);
}

uint64_t sub_1004BE49C(uint64_t a1, _QWORD *a2)
{
  char **v3;
  _QWORD *v4;
  NSObject *v5;
  void **v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  void *__p[2];
  char v23;
  _QWORD v24[2];
  _QWORD *v25;
  uint8_t buf[4];
  void **v27;

  v24[1] = 0;
  v25 = a2;
  v24[0] = 0;
  sub_10003415C((uint64_t)v24, a1 + 192);
  __p[0] = &v25;
  *((_DWORD *)sub_1004BF4C8((uint64_t **)(a1 + 280), (unint64_t *)&v25, (uint64_t)&unk_100740F58, (_QWORD **)__p)
  + 10) = 0;
  v3 = (char **)(a1 + 256);
  if (sub_10046EA5C(a1 + 256, (uint64_t)v25))
  {
    if (*(_BYTE *)(a1 + 304))
    {
      v4 = v25;
      sub_10043FAA8(v25);
      sub_1004BE6F4(a1, 0, (uint64_t)v4);
      v5 = qword_100999800;
      if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8((uint64_t)v25, __p);
        if (v23 >= 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v27 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Reporting discovery of previously reported device %{public}s.", buf, 0xCu);
        if (v23 < 0)
          operator delete(__p[0]);
      }
    }
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 264);
    v7 = *(_QWORD *)(a1 + 272);
    if ((unint64_t)v8 >= v7)
    {
      v10 = ((char *)v8 - *v3) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        abort();
      v11 = v7 - (_QWORD)*v3;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)sub_10007ABA0(a1 + 272, v13);
      else
        v14 = 0;
      v15 = &v14[8 * v10];
      v16 = &v14[8 * v13];
      *(_QWORD *)v15 = v25;
      v9 = v15 + 8;
      v18 = *(char **)(a1 + 256);
      v17 = *(char **)(a1 + 264);
      if (v17 != v18)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v15 - 1) = v19;
          v15 -= 8;
        }
        while (v17 != v18);
        v17 = *v3;
      }
      *(_QWORD *)(a1 + 256) = v15;
      *(_QWORD *)(a1 + 264) = v9;
      *(_QWORD *)(a1 + 272) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v8 = v25;
      v9 = v8 + 1;
    }
    *(_QWORD *)(a1 + 264) = v9;
    sub_100034264((uint64_t)v24);
    v20 = v25;
    sub_10043FAA8(v25);
    sub_1004BE6F4(a1, 0, (uint64_t)v20);
  }
  return sub_100034234((uint64_t)v24);
}

void sub_1004BE6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BE6F4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  NSObject *v6;
  char *v7;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint8_t v17;
  _BYTE v18[7];
  void *__p;
  unint64_t *v20;
  uint64_t v21;
  _BYTE buf[22];

  if (!a3)
  {
    v6 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_FAULT))
      sub_1006F91C4(v6);
  }
  if (a2 > 2)
    v7 = 0;
  else
    v7 = off_100932E18[a2];
  v8 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a3, &__p);
    v9 = v21 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending '%{public}s' event for device %{public}s", buf, 0x16u);
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_10003415C((uint64_t)buf, a1 + 16);
  v10 = *(_QWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 88);
  if (v10 != v11)
  {
    __p = 0;
    v20 = 0;
    v21 = 0;
    sub_1004BF588((char *)&__p, v10, v11, 0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3));
    sub_100034264((uint64_t)buf);
    v12 = (unint64_t *)__p;
    if (__p != v20)
    {
      do
      {
        if (v12[2])
        {
          if (a3)
          {
            if (qword_1009778E8 != -1)
              dispatch_once(&qword_1009778E8, &stru_100932DB8);
            v13 = sub_10046F750((uint64_t)off_1009778E0, *v12, a3);
          }
          else
          {
            v13 = 4294901761;
          }
          if (qword_100977B50 != -1)
            dispatch_once(&qword_100977B50, &stru_100932D98);
          if (sub_100021398(qword_100977B48, *v12) && v13)
          {
            if (qword_10097AB48 != -1)
              dispatch_once(&qword_10097AB48, &stru_100932DD8);
            operator new();
          }
          v14 = qword_100999800;
          if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
            sub_1006F9190(&v17, v18, v14);
          sub_100034188((uint64_t)buf);
          v15 = sub_1004BF6AC(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *v12);
          sub_1004BF21C(a1 + 80, v15, *(_QWORD *)(a1 + 88));
          sub_100034264((uint64_t)buf);
        }
        v12 += 5;
      }
      while (v12 != v20);
      v12 = (unint64_t *)__p;
    }
    if (v12)
    {
      v20 = v12;
      operator delete(v12);
    }
  }
  return sub_100034234((uint64_t)buf);
}

void sub_1004BEA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BEA90(uint64_t a1, _QWORD *a2)
{
  _BOOL4 v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  NSObject *v8;
  void *__p[2];
  char v11;
  _QWORD v12[2];
  uint8_t buf[4];
  void **v14;

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 192);
  v4 = sub_10046EA5C(a1 + 256, (uint64_t)a2);
  sub_100034264((uint64_t)v12);
  if (*(_DWORD *)(a1 + 12) == 2048)
  {
    if (v4)
    {
      LODWORD(__p[0]) = 0;
      if ((sub_1004BCFC0(a1, (uint64_t)a2, __p, 0) & 1) == 0)
      {
        v5 = qword_100999800;
        if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8((uint64_t)a2, __p);
          if (v11 >= 0)
            v6 = __p;
          else
            v6 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v14 = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Device %{public}s no longer matches our service list", buf, 0xCu);
          if (v11 < 0)
            operator delete(__p[0]);
        }
        v7 = 6;
        goto LABEL_16;
      }
LABEL_17:
      sub_10043FAA8(a2);
      sub_1004BE6F4(a1, 2u, (uint64_t)a2);
      return sub_100034234((uint64_t)v12);
    }
    LODWORD(__p[0]) = 0;
    if ((sub_1004BCFC0(a1, (uint64_t)a2, __p, 0) & 1) == 0)
      goto LABEL_17;
  }
  else
  {
    if (v4)
      goto LABEL_17;
    v8 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Got a device changed call for one we haven't found yet...", (uint8_t *)__p, 2u);
    }
  }
  v7 = 4;
LABEL_16:
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 8 * v7))(a1, a2);
  return sub_100034234((uint64_t)v12);
}

void sub_1004BEC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BEC90(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD v6[2];
  _QWORD *v7;

  v6[1] = 0;
  v7 = a2;
  v6[0] = 0;
  sub_10003415C((uint64_t)v6, a1 + 192);
  if (sub_10046EA90((char **)(a1 + 256), (uint64_t)a2))
  {
    sub_100015ECC(a1 + 280, (unint64_t *)&v7);
    sub_100034264((uint64_t)v6);
    v4 = v7;
    sub_10043FAA8(v7);
    sub_1004BE6F4(a1, 1u, (uint64_t)v4);
  }
  return sub_100034234((uint64_t)v6);
}

void sub_1004BED18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004BED2C(_QWORD *result)
{
  *result = off_100932D28;
  return result;
}

void sub_1004BED3C(_QWORD *a1)
{
  *a1 = off_100932D28;
  operator delete();
}

uint64_t sub_1004BED5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;

  result = sub_1004BEDC8(a1, *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
  {
    result = sub_1004BEDC8(a1, *(_QWORD *)(a1 + 56));
    if ((_DWORD)result)
      return sub_100424504(a2, a3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 64), a4);
  }
  return result;
}

BOOL sub_1004BEDC8(uint64_t a1, unint64_t a2)
{
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100932D98);
  return sub_10050AB38(qword_100977B48, a2);
}

_QWORD *sub_1004BEE18(_QWORD *result)
{
  *result = &off_100932D68;
  return result;
}

void sub_1004BEE28(_QWORD *a1)
{
  *a1 = &off_100932D68;
  operator delete();
}

uint64_t sub_1004BEE48(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;

  result = sub_1004BEDC8(a1, *(_QWORD *)(a1 + 40));
  if ((_DWORD)result)
  {
    result = sub_1004BEDC8(a1, *(_QWORD *)(a1 + 56));
    if ((_DWORD)result)
      return sub_100424504(a2, a3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 64), a4);
  }
  return result;
}

uint64_t sub_1004BEEB4(unint64_t *a1)
{
  uint64_t result;

  result = sub_1004BEDC8((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

uint64_t sub_1004BEEFC(unint64_t *a1)
{
  uint64_t result;

  result = sub_1004BEDC8((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

void sub_1004BEF44(id a1)
{
  operator new();
}

void sub_1004BEF84()
{
  operator delete();
}

void sub_1004BEFA8(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1004BEFE8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1004BEFE8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  v2 = *a1;
  v3 = a1[1];
  if (v3 != *a1)
  {
    do
    {
      *(_QWORD *)(v3 - 16) = &off_100918258;
      v3 -= 16;
      v4 = *(unsigned int **)(v3 + 8);
      if (v4)
        sub_100056AAC(v4);
    }
    while (v3 != v2);
  }
  a1[1] = v2;
}

uint64_t sub_1004BF03C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = *a1;
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v4;
  v20 = v7;
  v11 = (char *)sub_100261D70(v7, v10);
  v12 = &v11[40 * v3];
  __p = v11;
  v17 = v12;
  v19 = &v11[40 * v13];
  *(_QWORD *)v12 = *(_QWORD *)a2;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(a2 + 8);
  *((_DWORD *)v12 + 6) = *(_DWORD *)(a2 + 24);
  *((_QWORD *)v12 + 4) = *(_QWORD *)(a2 + 32);
  v18 = v12 + 40;
  sub_1004BF1AC(a1, &__p);
  v14 = a1[1];
  if (v18 != v17)
    v18 = &v17[(v18 - v17 - 40) % 0x28uLL];
  if (__p)
    operator delete(__p);
  return v14;
}

void sub_1004BF160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1004BF1AC(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 40);
    v2 -= 40;
    *(_QWORD *)(v4 - 40) = v5;
    v4 -= 40;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(v2 + 8);
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(v2 + 24);
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(v2 + 32);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1004BF21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a2 != a3)
  {
    sub_1004BF260(a3, *(_QWORD *)(a1 + 8), a2);
    *(_QWORD *)(a1 + 8) = v5;
  }
  return a2;
}

uint64_t sub_1004BF260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2)
    return a1;
  do
  {
    *(_QWORD *)a3 = *(_QWORD *)a1;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(a1 + 32);
    a3 += 40;
    a1 += 40;
  }
  while (a1 != a2);
  return a2;
}

uint64_t sub_1004BF2AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t v19;

  v2 = *a1;
  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = v8 - v2;
  if (v9 >> 3 > v4)
    v4 = v9 >> 3;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v4;
  v19 = v7;
  if (v10)
    v11 = (char *)sub_10034957C(v7, v10);
  else
    v11 = 0;
  v12 = &v11[16 * v3];
  v16[0] = v11;
  v16[1] = v12;
  v17 = v12;
  v18 = &v11[16 * v10];
  *(_QWORD *)v12 = &off_100918258;
  v13 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v12 + 1) = v13;
  if (v13)
  {
    sub_10003C37C(v13);
    v12 = v17;
  }
  v17 = v12 + 16;
  sub_1004BF398(a1, v16);
  v14 = a1[1];
  sub_1004BF438((uint64_t)v16);
  return v14;
}

void sub_1004BF384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004BF438((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004BF398(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  if (v4 != *a1)
  {
    do
    {
      *(_QWORD *)(v6 - 16) = &off_100918258;
      v6 -= 16;
      v7 = *(_QWORD *)(v4 - 8);
      *(_QWORD *)(v6 + 8) = v7;
      if (v7)
        sub_10003C37C(v7);
      v4 -= 16;
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v8 = *a1;
  *a1 = v6;
  a2[1] = v8;
  v9 = a1[1];
  a1[1] = a2[2];
  a2[2] = v9;
  v10 = a1[2];
  a1[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
}

uint64_t sub_1004BF438(uint64_t a1)
{
  sub_1004BF46C(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1004BF46C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(v2 - 16) = &off_100918258;
    v2 -= 16;
    *(_QWORD *)(a1 + 16) = v2;
    v5 = *(unsigned int **)(v2 + 8);
    if (v5)
    {
      sub_100056AAC(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
}

uint64_t **sub_1004BF4C8(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *sub_1004BF588(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    result = sub_1004BF5FC(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *(_QWORD *)v7 = *(_QWORD *)a2;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
      *(_DWORD *)(v7 + 24) = *(_DWORD *)(a2 + 24);
      *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 + 32);
      v7 += 40;
      a2 += 40;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *sub_1004BF5FC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    abort();
  result = (char *)sub_100261D70((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void sub_1004BF648(id a1)
{
  operator new();
}

void sub_1004BF688()
{
  operator delete();
}

uint64_t sub_1004BF6AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t i;

  while (1)
  {
    if (result == a2)
      return a2;
    if (*(_QWORD *)result == a3)
      break;
    result += 40;
  }
  if (result != a2)
  {
    for (i = result + 40; i != a2; i += 40)
    {
      if (*(_QWORD *)i != a3)
      {
        *(_QWORD *)result = *(_QWORD *)i;
        *(_OWORD *)(result + 8) = *(_OWORD *)(i + 8);
        *(_DWORD *)(result + 24) = *(_DWORD *)(i + 24);
        *(_QWORD *)(result + 32) = *(_QWORD *)(i + 32);
        result += 40;
      }
    }
  }
  return result;
}

void sub_1004BF718(id a1)
{
  operator new();
}

void sub_1004BF758()
{
  operator delete();
}

uint64_t sub_1004BF77C(uint64_t a1)
{
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_100925080;
  sub_1000160D0(a1 + 8);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)a1 = off_100932E40;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 80) = 1;
  return a1;
}

uint64_t sub_1004BF7E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 8);
  if (*(char *)(a1 + 111) < 0)
  {
    sub_10003430C((_BYTE *)a2, *(void **)(a1 + 88), *(_QWORD *)(a1 + 96));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 88);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 104);
  }
  return sub_100034234((uint64_t)v5);
}

void sub_1004BF850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004BF864(std::string *a1, void *a2)
{
  id v4;
  void *v5;
  id v6;
  _QWORD v7[2];

  v4 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, (uint64_t)&a1->__r_.__value_.__l.__size_);
  objc_storeStrong((id *)&a1[3].__r_.__value_.__l.__data_, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[3].__r_.__value_.__l.__data_, "getLocalUrl"));
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "absoluteString")));
  a1 = (std::string *)((char *)a1 + 88);
  std::string::assign(a1, (const std::string::value_type *)objc_msgSend(v6, "UTF8String"));

  std::string::append(a1, "device_workarounds.db");
  sub_100034234((uint64_t)v7);

}

void sub_1004BF910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BF948(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  *(_QWORD *)a1 = off_100925080;

  sub_100069BDC(a1 + 8);
  return a1;
}

void sub_1004BF994(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  *(_QWORD *)a1 = off_100925080;

  sub_100069BDC(a1 + 8);
  operator delete();
}

uint64_t sub_1004BF9F0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100932E68;
  *(_QWORD *)(a1 + 8) = off_100932F28;
  *(_QWORD *)(a1 + 16) = off_100932F48;
  *(_QWORD *)(a1 + 24) = off_100932F70;
  *(_QWORD *)(a1 + 32) = off_100932F98;
  *(_QWORD *)(a1 + 40) = &off_100932FC8;
  sub_1000160D0(a1 + 48);
  *(_BYTE *)(a1 + 112) = 0;
  sub_1000160D0(a1 + 120);
  *(_WORD *)(a1 + 184) = 0;
  sub_1000160D0(a1 + 192);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  sub_1000160D0(a1 + 280);
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  sub_1000160D0(a1 + 392);
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 456) = a1 + 464;
  *(_DWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_WORD *)(a1 + 496) = 0;
  sub_1000160D0(a1 + 520);
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = a1 + 592;
  return a1;
}

void sub_1004BFAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  _QWORD **v19;
  uint64_t v20;

  v19 = v17;
  v20 = v14;
  sub_10001A82C(v16, *v19);
  sub_100069BDC(v20);
  a10 = (void **)(v11 + 368);
  sub_1004C4ED4(&a10);
  sub_10009F88C(v11 + 352);
  sub_100069BDC(v15);
  sub_1004C4E8C(v11 + 256, *v18);
  sub_100069BDC(v13);
  sub_100069BDC(v12);
  sub_100069BDC(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BFB88(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_100932E68;
  *(_QWORD *)(a1 + 8) = off_100932F28;
  *(_QWORD *)(a1 + 16) = off_100932F48;
  *(_QWORD *)(a1 + 24) = off_100932F70;
  *(_QWORD *)(a1 + 32) = off_100932F98;
  *(_QWORD *)(a1 + 40) = &off_100932FC8;
  sub_10001A82C(a1 + 584, *(_QWORD **)(a1 + 592));
  sub_100069BDC(a1 + 520);
  sub_10001A82C(a1 + 456, *(_QWORD **)(a1 + 464));
  sub_100069BDC(a1 + 392);
  v3 = (void **)(a1 + 368);
  sub_1004C4ED4(&v3);
  sub_10009F88C(a1 + 352);
  sub_100069BDC(a1 + 280);
  sub_1004C4E8C(a1 + 256, *(_QWORD **)(a1 + 264));
  sub_100069BDC(a1 + 192);
  sub_100069BDC(a1 + 120);
  sub_100069BDC(a1 + 48);
  return a1;
}

uint64_t sub_1004BFC48(uint64_t a1)
{
  return sub_1004BFB88(a1 - 16);
}

void sub_1004BFC50(uint64_t a1)
{
  sub_1004BFB88(a1);
  operator delete();
}

void sub_1004BFC74(uint64_t a1)
{
  sub_1004BFB88(a1 - 16);
  operator delete();
}

uint64_t sub_1004BFC9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[2];
  char v24;
  uint8_t buf[8];
  char v26;
  _QWORD v27[2];

  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_1009330B8);
  sub_1000D96F8((uint64_t)off_100978188 + 24, a1 + 24);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009330D8);
  sub_1000B5218((uint64_t)off_100977FA8 + 1872, a1 + 40);
  v27[0] = 0;
  v27[1] = 0;
  v2 = sub_10003415C((uint64_t)v27, a1 + 48);
  *(_BYTE *)(a1 + 112) = 1;
  sub_100034264(v2);
  sub_1004C025C(a1);
  v3 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 648))(v3))
  {
    v4 = sub_100027F68();
    sub_100091AE8(buf, "ScanCorePageScan");
    sub_100091AE8(__p, "ScanCorePageScanDebugEnabled");
    v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t))(*(_QWORD *)v4 + 72))(v4, buf, __p, a1 + 497);
    if (v24 < 0)
      operator delete(__p[0]);
    if (v26 < 0)
    {
      operator delete(*(void **)buf);
      if (!v5)
        goto LABEL_45;
    }
    else if (!v5)
    {
LABEL_45:
      v14 = sub_100027F68();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 624))(v14))
      {
        LOBYTE(__p[0]) = 0;
        sub_100043758(__p);
        v15 = qword_100999800;
        if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Disabling BT Page Scans", buf, 2u);
        }
        sub_10004C9BC(71, 0, v16, v17, v18, v19, v20, v21, 1);
        sub_100043728(__p);
      }
      return sub_100034234((uint64_t)v27);
    }
    if (*(_BYTE *)(a1 + 497))
    {
      v6 = sub_100027F68();
      sub_100091AE8(buf, "ScanCorePageScan");
      sub_100091AE8(__p, "ScanCorePageScanInterval");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(_QWORD *)v6 + 128))(v6, buf, __p, a1 + 500);
      if (v24 < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(*(void **)buf);
      v7 = sub_100027F68();
      sub_100091AE8(buf, "ScanCorePageScan");
      sub_100091AE8(__p, "ScanCorePageScanWindow");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(_QWORD *)v7 + 128))(v7, buf, __p, a1 + 504);
      if (v24 < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(*(void **)buf);
      v8 = sub_100027F68();
      sub_100091AE8(buf, "ScanCorePageScan");
      sub_100091AE8(__p, "ScanCorePageScanInterlaced");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(_QWORD *)v8 + 72))(v8, buf, __p, a1 + 508);
      if (v24 < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(*(void **)buf);
      v9 = sub_100027F68();
      sub_100091AE8(buf, "ScanCorePageScan");
      sub_100091AE8(__p, "ScanCorePageScanDebugElnaMode");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(_QWORD *)v9 + 72))(v9, buf, __p, a1 + 509);
      if (v24 < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(*(void **)buf);
      v10 = sub_100027F68();
      sub_100091AE8(buf, "ScanCorePageScan");
      sub_100091AE8(__p, "ScanCorePageScanUseAuxScanParams");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(_QWORD *)v10 + 72))(v10, buf, __p, a1 + 510);
      if (v24 < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(*(void **)buf);
      v11 = sub_100027F68();
      sub_100091AE8(buf, "ScanCorePageScan");
      sub_100091AE8(__p, "ScanCorePageScanEnableAuxScan");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(_QWORD *)v11 + 72))(v11, buf, __p, a1 + 511);
      if (v24 < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(*(void **)buf);
      v12 = sub_100027F68();
      sub_100091AE8(buf, "ScanCorePageScan");
      sub_100091AE8(__p, "ScanCorePageScanPreemptAuxScan");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(_QWORD *)v12 + 72))(v12, buf, __p, a1 + 512);
      if (v24 < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(*(void **)buf);
      v13 = sub_100027F68();
      sub_100091AE8(buf, "ScanCorePageScan");
      sub_100091AE8(__p, "ScanCorePageScanAuxScanDurationInMs");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(_QWORD *)v13 + 128))(v13, buf, __p, a1 + 516);
      if (v24 < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(*(void **)buf);
    }
    goto LABEL_45;
  }
  return sub_100034234((uint64_t)v27);
}

void sub_1004C01A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  sub_100034234(v21 - 48);
  _Unwind_Resume(a1);
}

BOOL sub_1004C025C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  uint64_t v11;
  _BOOL8 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  NSObject *v30;
  _BYTE *v31;
  NSObject *v32;
  uint64_t v33;
  _QWORD v34[5];
  uint64_t v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE buf[12];
  char v43;
  uint8_t v44[4];
  _BYTE *v45;

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v38[0] = 0;
  v38[1] = 0;
  sub_10003415C((uint64_t)v38, a1 + 120);
  v37[0] = 0;
  v37[1] = 0;
  sub_10003415C((uint64_t)v37, a1 + 280);
  v2 = *(unsigned __int8 *)(a1 + 184);
  if (*(_BYTE *)(a1 + 184))
  {
    v3 = *(_QWORD *)(a1 + 368);
    if (v3 == *(_QWORD *)(a1 + 376) || *(_DWORD *)(*(_QWORD *)v3 + 76) != 2)
    {
      v11 = qword_100999800;
      if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v2;
        v8 = "Scanning is paused with a count of %d - returning";
        v9 = v11;
        v10 = 8;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, v8, buf, v10);
      }
LABEL_14:
      v12 = 0;
      goto LABEL_15;
    }
    v4 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Name requests can't be paused. FULL STEAM AHEAD!", buf, 2u);
    }
  }
  v5 = *(_QWORD *)(a1 + 344);
  if (v5 || *(_QWORD *)(a1 + 368) == *(_QWORD *)(a1 + 376))
  {
    v6 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
    {
      v7 = "Scan in progress";
      if (!v5)
        v7 = "No scans queued";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      v8 = "%{public}s - returning";
      v9 = v6;
      v10 = 12;
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  v36[0] = 0;
  v36[1] = 0;
  sub_10003415C((uint64_t)v36, a1 + 48);
  v12 = *(_BYTE *)(a1 + 112) != 0;
  if (*(_BYTE *)(a1 + 112))
  {
    v17 = *(uint64_t **)(a1 + 368);
    while (1)
    {
      v39 = *v17;
      sub_1004C0DC4(&v40, v17 + 1);
      sub_1004C549C((_QWORD *)(*(_QWORD *)(a1 + 368) + 24), *(_QWORD **)(a1 + 376), *(_QWORD **)(a1 + 368));
      v19 = v18;
      v20 = *(_QWORD *)(a1 + 376);
      if (v20 != v18)
      {
        do
        {
          v21 = v20 - 24;
          sub_10009F88C(v20 - 16);
          v20 = v21;
        }
        while (v21 != v19);
      }
      *(_QWORD *)(a1 + 376) = v19;
      if (v39)
      {
        *(_QWORD *)(a1 + 344) = v39;
        sub_1004C0DC4((_QWORD *)(a1 + 352), &v40);
      }
      else if (v40)
      {
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_100933058);
        v22 = (_QWORD *)qword_100977B48;
        v23 = (std::__shared_weak_count *)v41;
        v35[0] = v40;
        v35[1] = v41;
        if (v41)
        {
          v24 = (unint64_t *)(v41 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = sub_1004C0EF4(a1, v35);
        v27 = sub_1000229D8(v22, v26);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v30 = qword_100999800;
        if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
        {
          if (v27)
          {
            sub_1000340DC(v27, (uint64_t)buf);
            v31 = buf;
            if (v43 < 0)
              v31 = *(_BYTE **)buf;
            *(_DWORD *)v44 = 136446210;
            v45 = v31;
            _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Had no object for the scan from %{public}s", v44, 0xCu);
            if (v43 < 0)
              operator delete(*(void **)buf);
          }
          else
          {
            sub_1006F9244(v44, &v45, v30);
          }
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
      }
      if (*(_QWORD *)(a1 + 344))
        break;
      v17 = *(uint64_t **)(a1 + 368);
      if (v17 == *(uint64_t **)(a1 + 376))
        goto LABEL_53;
    }
    v33 = sub_10006BBEC();
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_1004C275C;
    v34[3] = &unk_100917378;
    v34[4] = a1;
    sub_100041A34(v33, v34);
LABEL_53:
    sub_100034264((uint64_t)v36);
    sub_100034264((uint64_t)v37);
  }
  else
  {
    v32 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Stack wasn't started - returning", buf, 2u);
    }
  }
  sub_100034234((uint64_t)v36);
LABEL_15:
  sub_100034234((uint64_t)v37);
  sub_100034234((uint64_t)v38);
  v13 = (std::__shared_weak_count *)v41;
  if (v41)
  {
    v14 = (unint64_t *)(v41 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_1004C0738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  va_list va2;

  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  sub_100034234((uint64_t)va);
  sub_100034234((uint64_t)va1);
  sub_100034234((uint64_t)va2);
  sub_10009F88C(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C07A0(uint64_t a1)
{
  return sub_1004BFC9C(a1 - 32);
}

uint64_t sub_1004C07A8(uint64_t a1)
{
  NSObject *v2;
  int *v3;
  NSObject *v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13[8];
  _QWORD v14[2];
  __int128 v15;
  _QWORD v16[2];
  uint8_t buf[8];
  uint64_t v18;
  uint8_t v19[24];

  v2 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "DManager::stackWillStop enter", buf, 2u);
  }
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_1009330B8);
  sub_100069060((uint64_t)off_100978188 + 24, a1 + 24);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_1009330D8);
  sub_100069060((uint64_t)off_100977FA8 + 1872, a1 + 40);
  *(_QWORD *)buf = 0;
  v18 = 0;
  sub_10003415C((uint64_t)buf, a1 + 48);
  *(_BYTE *)(a1 + 112) = 0;
  sub_100034264((uint64_t)buf);
  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 280);
  v3 = *(int **)(a1 + 344);
  if (v3)
  {
    v4 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v3[19];
      if (v5 > 3)
        v6 = 0;
      else
        v6 = off_1009331B0[v5];
      *(_DWORD *)v19 = 136446210;
      *(_QWORD *)&v19[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Stopping current %{public}s scan", v19, 0xCu);
      v3 = *(int **)(a1 + 344);
    }
    (*(void (**)(int *))(*(_QWORD *)v3 + 24))(v3);
  }
  v7 = 101;
  while (*(_QWORD *)(a1 + 344))
  {
    if (!--v7)
    {
      v11 = sub_100027F68();
      v12 = *(unsigned int *)(*(_QWORD *)(a1 + 344) + 76);
      sub_100091AE8(&v15, "");
      sub_1005756F0(v11, v12, &v15, 1);
    }
    sub_100034264((uint64_t)v16);
    j__usleep(0x186A0u);
    sub_100034188((uint64_t)v16);
  }
  sub_100034264((uint64_t)v16);
  *(_OWORD *)v19 = 0uLL;
  v8 = sub_10003415C((uint64_t)v19, a1 + 120);
  *(_BYTE *)(a1 + 184) = 0;
  sub_100034264(v8);
  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 392);
  sub_1004C0AE4(a1);
  v9 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "DManager::stackWillStop exit", v13, 2u);
  }
  sub_100034234((uint64_t)v14);
  sub_100034234((uint64_t)v19);
  sub_100034234((uint64_t)v16);
  return sub_100034234((uint64_t)buf);
}

void sub_1004C0A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20)
{
  sub_100034234((uint64_t)&a18);
  sub_100034234((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C0AE4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v5[16];
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 392);
  v2 = *(NSObject **)(a1 + 488);
  if (v2)
  {
    v3 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stopping Scan Core Page Scan timer", v5, 2u);
      v2 = *(NSObject **)(a1 + 488);
    }
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 488));
    *(_QWORD *)(a1 + 488) = 0;
  }
  return sub_100034234((uint64_t)v6);
}

uint64_t sub_1004C0B8C(uint64_t a1)
{
  return sub_1004C07A8(a1 - 32);
}

uint64_t sub_1004C0B94@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  NSObject *v11;
  void **v12;
  void *__p[2];
  char v15;
  _QWORD v16[2];
  uint8_t buf[4];
  const char *v18;

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100933058);
  v8 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 192);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100933058);
  v9 = sub_1000221B8(qword_100977B48, a2);
  *a3 = v9;
  *a4 = 0;
  a4[1] = 0;
  if (v9)
  {
    sub_1004C5010(a4);
    __p[0] = a3;
    v10 = sub_1004C50F0((uint64_t **)(a1 + 256), a3, (uint64_t)&unk_100740F58, (uint64_t **)__p);
    sub_1004C0DC4(v10 + 5, a4);
    v11 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
    {
      if (v8)
      {
        sub_1000340DC(v8, (uint64_t)__p);
        if (v15 >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v18 = (const char *)v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Creating discovery agent %{public}s", buf, 0xCu);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 136446210;
        v18 = "(NULL)";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Creating discovery agent %{public}s", buf, 0xCu);
      }
    }
  }
  return sub_100034234((uint64_t)v16);
}

void sub_1004C0D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_10009F88C(v5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004C0DC4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t sub_1004C0E3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[2];

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 192);
  if (!a2)
    goto LABEL_13;
  v6 = *(_QWORD **)(a1 + 264);
  if (!v6)
    goto LABEL_13;
  v7 = (_QWORD *)(a1 + 264);
  do
  {
    v8 = v6[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != (_QWORD *)(a1 + 264) && v7[4] <= a2)
  {
    v13 = v7[5];
    v12 = v7[6];
    *a3 = v13;
    a3[1] = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
LABEL_13:
    *a3 = 0;
    a3[1] = 0;
  }
  return sub_100034234((uint64_t)v16);
}

uint64_t sub_1004C0EF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD v17[2];

  v3 = a1;
  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 192);
  if (*a2)
  {
    v4 = *(_QWORD **)(v3 + 256);
    v5 = (_QWORD *)(v3 + 264);
    if (v4 != (_QWORD *)(v3 + 264))
    {
      do
      {
        v7 = v4[5];
        v6 = (std::__shared_weak_count *)v4[6];
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
        }
        v10 = *a2;
        if (v7 == *a2)
        {
          v3 = v4[4];
          if (v6)
          {
LABEL_10:
            v11 = (unint64_t *)&v6->__shared_owners_;
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 - 1, v11));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
        }
        else if (v6)
        {
          goto LABEL_10;
        }
        if (v7 == v10)
          goto LABEL_22;
        v13 = (_QWORD *)v4[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v4[2];
            v15 = *v14 == (_QWORD)v4;
            v4 = v14;
          }
          while (!v15);
        }
        v4 = v14;
      }
      while (v14 != v5);
    }
  }
  v3 = 0;
LABEL_22:
  sub_100034234((uint64_t)v17);
  return v3;
}

uint64_t sub_1004C1014(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  void **v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *CTGreenTeaOsLogHandle;
  NSObject *v26;
  void **v27;
  NSObject *v28;
  void **v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  char v39;
  unint64_t v40;
  _BYTE v41[12];
  uint8_t buf[24];

  v40 = a2;
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100933058);
  v4 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
  v5 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    if (v4)
    {
      sub_1000340DC(v4, (uint64_t)__p);
      if (v39 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Destroying discovery agent %{public}s", buf, 0xCu);
      if (v39 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "(NULL)";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Destroying discovery agent %{public}s", buf, 0xCu);
    }
  }
  *(_OWORD *)buf = 0uLL;
  sub_10003415C((uint64_t)buf, (uint64_t)(a1 + 24));
  if (v40)
  {
    v7 = (_QWORD *)a1[33];
    if (v7)
    {
      v8 = (uint64_t **)(a1 + 32);
      v9 = a1 + 33;
      do
      {
        v10 = v7[4];
        v11 = v10 >= v40;
        if (v10 >= v40)
          v12 = v7;
        else
          v12 = v7 + 1;
        if (v11)
          v9 = v7;
        v7 = (_QWORD *)*v12;
      }
      while (*v12);
      if (v9 != a1 + 33 && v40 >= v9[4])
      {
        v13 = v9[5];
        v14 = v9[6];
        v36 = v13;
        v37 = (std::__shared_weak_count *)v14;
        if (v14)
        {
          v15 = (unint64_t *)(v14 + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          v34 = v13;
          v35 = (std::__shared_weak_count *)v14;
          do
            v17 = __ldxr(v15);
          while (__stxr(v17 + 1, v15));
        }
        else
        {
          v34 = v13;
          v35 = 0;
        }
        sub_1004C153C(a1, &v34);
        v18 = v35;
        if (v35)
        {
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)v41 = &v40;
        v21 = sub_1004C50F0(v8, &v40, (uint64_t)&unk_100740F58, (uint64_t **)v41);
        sub_100274874((uint64_t)(v21 + 5), (__int128 *)__p);
        v22 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v23 = (unint64_t *)((char *)__p[1] + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        sub_1000040CC(v8, v9);
        sub_10009F88C((uint64_t)(v9 + 5));
        operator delete(v9);
        if (sub_100070BDC())
        {
          CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle(qword_100999990);
          v26 = CTGreenTeaOsLogHandle;
          if (CTGreenTeaOsLogHandle)
          {
            if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
            {
              if (v4)
              {
                sub_1000340DC(v4, (uint64_t)__p);
                if (v39 >= 0)
                  v27 = __p;
                else
                  v27 = (void **)__p[0];
                *(_DWORD *)v41 = 136446210;
                *(_QWORD *)&v41[4] = v27;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to destroy scan agent", v41, 0xCu);
                if (v39 < 0)
                  operator delete(__p[0]);
              }
              else
              {
                *(_DWORD *)v41 = 136446210;
                *(_QWORD *)&v41[4] = "(NULL)";
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to destroy scan agent", v41, 0xCu);
              }
            }
          }
        }
        v28 = qword_100999800;
        if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
        {
          if (v4)
          {
            sub_1000340DC(v4, (uint64_t)__p);
            if (v39 >= 0)
              v29 = __p;
            else
              v29 = (void **)__p[0];
            *(_DWORD *)v41 = 136446210;
            *(_QWORD *)&v41[4] = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to destroy scan agent", v41, 0xCu);
            if (v39 < 0)
              operator delete(__p[0]);
          }
          else
          {
            *(_DWORD *)v41 = 136446210;
            *(_QWORD *)&v41[4] = "(NULL)";
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to destroy scan agent", v41, 0xCu);
          }
        }
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_100933058);
        sub_10050ABD0(qword_100977B48, v40);
        v30 = v37;
        if (v37)
        {
          v31 = (unint64_t *)&v37->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
    }
  }
  return sub_100034234((uint64_t)buf);
}

void sub_1004C14F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_10009F88C((uint64_t)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C153C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  char *v28;
  const char *p_p;
  void *__p;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD v34[2];
  uint64_t v35[2];
  uint8_t buf[4];
  char *v37;
  __int16 v38;
  const char *v39;

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100933058);
  v4 = (_QWORD *)qword_100977B48;
  v5 = (std::__shared_weak_count *)a2[1];
  v35[0] = *a2;
  v35[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = sub_1004C0EF4((uint64_t)a1, v35);
  v9 = sub_1000229D8(v4, v8);
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v34[0] = 0;
  v34[1] = 0;
  sub_10003415C((uint64_t)v34, (uint64_t)(a1 + 35));
  v12 = a1[46];
  if (v12 != a1[47])
  {
    while (1)
    {
      __p = 0;
      v32 = 0;
      v33 = 0;
      v13 = *(void **)v12;
      v14 = *(_QWORD *)(v12 + 8);
      __p = *(void **)v12;
      v32 = v14;
      v15 = *(std::__shared_weak_count **)(v12 + 16);
      v33 = v15;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      if (v14 == *a2)
        break;
      v12 += 24;
      if (v15)
        goto LABEL_24;
LABEL_28:
      if (v12 == a1[47])
        goto LABEL_29;
    }
    if (v13)
      (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
    sub_1004C549C((_QWORD *)(v12 + 24), (_QWORD *)a1[47], (_QWORD *)v12);
    v19 = v18;
    v20 = a1[47];
    if (v20 != v18)
    {
      do
      {
        v21 = v20 - 24;
        sub_10009F88C(v20 - 16);
        v20 = v21;
      }
      while (v21 != v19);
      v15 = v33;
    }
    a1[47] = v19;
    v12 = a1[46];
    if (!v15)
      goto LABEL_28;
LABEL_24:
    v22 = (unint64_t *)&v15->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    goto LABEL_28;
  }
LABEL_29:
  v24 = (int *)a1[43];
  if (v24 && a1[44] == *a2)
  {
    v26 = qword_100999800;
    if (!os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
    {
LABEL_43:
      (*(void (**)(int *))(*(_QWORD *)v24 + 24))(v24);
      v25 = 400;
      goto LABEL_44;
    }
    v27 = v24[19];
    if (v27 > 3)
    {
      v28 = 0;
      if (v9)
        goto LABEL_35;
    }
    else
    {
      v28 = off_1009331B0[v27];
      if (v9)
      {
LABEL_35:
        sub_1000340DC(v9, (uint64_t)&__p);
        if (SHIBYTE(v33) >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        *(_DWORD *)buf = 136446466;
        v37 = v28;
        v38 = 2082;
        v39 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Stopping current %{public}s scan on behalf of %{public}s", buf, 0x16u);
        if (SHIBYTE(v33) < 0)
          operator delete(__p);
        goto LABEL_42;
      }
    }
    *(_DWORD *)buf = 136446466;
    v37 = v28;
    v38 = 2082;
    v39 = "(NULL)";
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Stopping current %{public}s scan on behalf of %{public}s", buf, 0x16u);
LABEL_42:
    v24 = (int *)a1[43];
    goto LABEL_43;
  }
  v25 = 0;
LABEL_44:
  sub_100034234((uint64_t)v34);
  return v25;
}

void sub_1004C1880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C18C4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 48);
  v2 = *(unsigned __int8 *)(a1 + 185);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_1004C1908(uint64_t a1, _QWORD *a2, unsigned int a3, int a4)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;

  *(_DWORD *)(*a2 + 12) = a4;
  if (a3 < 2)
  {
    v14 = (std::__shared_weak_count *)a2[1];
    v26 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v10 = sub_1004C1AE4(a1);
    v11 = v26;
    if (!v26)
      return v10;
    v17 = (unint64_t *)&v26->__shared_owners_;
    do
      v13 = __ldaxr(v17);
    while (__stlxr(v13 - 1, v17));
    goto LABEL_27;
  }
  if (a3 - 2 >= 2)
  {
    if (a3 != 4)
      return 412;
    if (qword_100977D80 != -1)
      dispatch_once(&qword_100977D80, &stru_100933098);
    v18 = off_100977D78;
    v19 = (std::__shared_weak_count *)a2[1];
    v24 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v10 = sub_1004C1F54((uint64_t)v18);
    v11 = v24;
    if (!v24)
      return v10;
    v22 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v22);
    while (__stlxr(v13 - 1, v22));
LABEL_27:
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return v10;
  }
  v6 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 344))(v6) & 1) != 0)
    return 412;
  v7 = (std::__shared_weak_count *)a2[1];
  v25 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = sub_1004C1D14(a1);
  v11 = v25;
  if (v25)
  {
    v12 = (unint64_t *)&v25->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    goto LABEL_27;
  }
  return v10;
}

void sub_1004C1AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10009F88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C1AE4(uint64_t a1)
{
  BOOL v2;
  NSObject *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v17[2];
  char v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100933130);
  if (sub_1004790FC((uint64_t)off_100977890, &v18))
    v2 = 1;
  else
    v2 = v18 == 0;
  if (v2)
  {
    v17[0] = 0;
    v17[1] = 0;
    sub_10003415C((uint64_t)v17, a1 + 48);
    if (*(_BYTE *)(a1 + 112))
    {
      sub_100034264((uint64_t)v17);
      operator new();
    }
    v12 = 111;
    sub_100034234((uint64_t)v17);
  }
  else
  {
    v3 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
      sub_1006F9290(v3, v5, v6, v7, v8, v9, v10, v11);
    v12 = 211;
  }
  v13 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_1004C1CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  sub_10009F88C(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C1D14(uint64_t a1)
{
  BOOL v2;
  NSObject *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v17[2];
  char v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100933130);
  if (sub_1004790FC((uint64_t)off_100977890, &v18))
    v2 = 1;
  else
    v2 = v18 == 0;
  if (v2)
  {
    v17[0] = 0;
    v17[1] = 0;
    sub_10003415C((uint64_t)v17, a1 + 48);
    if (*(_BYTE *)(a1 + 112))
    {
      sub_100034264((uint64_t)v17);
      operator new();
    }
    v12 = 111;
    sub_100034234((uint64_t)v17);
  }
  else
  {
    v3 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
      sub_1006F9290(v3, v5, v6, v7, v8, v9, v10, v11);
    v12 = 211;
  }
  v13 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_1004C1EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  sub_10009F88C(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C1F54(uint64_t a1)
{
  BOOL v2;
  NSObject *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v17[2];
  char v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100933130);
  if (sub_1004790FC((uint64_t)off_100977890, &v18))
    v2 = 1;
  else
    v2 = v18 == 0;
  if (v2)
  {
    v17[0] = 0;
    v17[1] = 0;
    sub_10003415C((uint64_t)v17, a1 + 48);
    if (*(_BYTE *)(a1 + 112))
    {
      sub_100034264((uint64_t)v17);
      operator new();
    }
    v12 = 111;
    sub_100034234((uint64_t)v17);
  }
  else
  {
    v3 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
      sub_1006F9290(v3, v5, v6, v7, v8, v9, v10, v11);
    v12 = 211;
  }
  v13 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_1004C2138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  sub_10009F88C(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C2194(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    v22[4] = result;
    v16 = (char *)sub_1002A479C(result, v15);
    v17 = &v16[24 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[24 * v18];
    *(_OWORD *)v17 = *(_OWORD *)a2;
    v19 = *(_QWORD *)(a2 + 16);
    *((_QWORD *)v17 + 2) = v19;
    if (v19)
    {
      v20 = (unint64_t *)(v19 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22[2] = v17 + 24;
    sub_1004C5280(a1, v22);
    v11 = a1[1];
    result = sub_1004C52E4((uint64_t)v22);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v8 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(v7 + 16) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v11;
  return result;
}

void sub_1004C22C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004C52E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C22DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD v6[4];
  std::__shared_weak_count *v7;

  v7 = 0;
  memset(v6, 0, sizeof(v6));
  sub_10003415C((uint64_t)v6, a1 + 48);
  if (*(_BYTE *)(a1 + 112))
  {
    sub_100034264((uint64_t)v6);
    operator new();
  }
  sub_100034234((uint64_t)v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return 111;
}

void sub_1004C2428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  sub_100034234((uint64_t)va);
  sub_100034234((uint64_t)va1);
  sub_10009F88C((uint64_t)va2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004C2488(uint64_t *a1, _OWORD *a2, unint64_t a3)
{
  _QWORD *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  char *v35;
  __int128 v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  int64x2_t v40;
  char *v41;
  uint64_t v42;

  v4 = a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = (uint64_t)a2 - *a1;
  v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  v11 = (uint64_t)(a1 + 2);
  v10 = a1[2];
  if (v6 >= v10)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v12;
    v38 = a1 + 2;
    if (v14)
    {
      v15 = (char *)sub_1002A479C((uint64_t)(a1 + 2), v14);
      v17 = v16;
    }
    else
    {
      v15 = 0;
      v17 = 0;
    }
    v21 = &v15[8 * (v8 >> 3)];
    v35 = v15;
    *(_QWORD *)&v36 = v21;
    *((_QWORD *)&v36 + 1) = v21;
    v37 = &v15[24 * v17];
    if (v9 == v17)
    {
      if (v8 < 1)
      {
        if ((_QWORD *)v7 == v4)
          v23 = 1;
        else
          v23 = 0x5555555555555556 * (v8 >> 3);
        v42 = v11;
        v24 = (char *)sub_1002A479C(v11, v23);
        v26 = v36;
        if (*((_QWORD *)&v36 + 1) == (_QWORD)v36)
        {
          v29 = vdupq_n_s64(v36);
          v27 = (uint64_t)&v24[24 * (v23 >> 2)];
        }
        else
        {
          v27 = (uint64_t)&v24[24 * (v23 >> 2) + *((_QWORD *)&v36 + 1) - v36];
          v28 = &v24[24 * (v23 >> 2)];
          do
          {
            *(_OWORD *)v28 = *(_OWORD *)v26;
            *((_QWORD *)v28 + 2) = *(_QWORD *)(v26 + 16);
            *(_QWORD *)(v26 + 8) = 0;
            *(_QWORD *)(v26 + 16) = 0;
            v28 += 24;
            v26 += 24;
          }
          while (v28 != (char *)v27);
          v29 = (int64x2_t)v36;
        }
        v30 = v37;
        v39 = v35;
        v35 = v24;
        *(_QWORD *)&v36 = &v24[24 * (v23 >> 2)];
        v40 = v29;
        *((_QWORD *)&v36 + 1) = v27;
        v37 = &v24[24 * v25];
        v41 = v30;
        sub_1004C52E4((uint64_t)&v39);
        v21 = (char *)*((_QWORD *)&v36 + 1);
      }
      else
      {
        if (v9 >= -1)
          v22 = v9 + 1;
        else
          v22 = v9 + 2;
        sub_1004C549C(&v15[8 * (v8 >> 3)], v21, &v21[-24 * (v22 >> 1)]);
        *(_QWORD *)&v36 = v36 - 24 * (v22 >> 1);
        *((_QWORD *)&v36 + 1) = v21;
      }
    }
    *(_OWORD *)v21 = *(_OWORD *)a3;
    v31 = *(_QWORD *)(a3 + 16);
    *((_QWORD *)v21 + 2) = v31;
    if (v31)
    {
      v32 = (unint64_t *)(v31 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      v21 = (char *)*((_QWORD *)&v36 + 1);
    }
    *((_QWORD *)&v36 + 1) = v21 + 24;
    v4 = (_QWORD *)sub_1004C538C(a1, &v35, (uint64_t)v4);
    sub_1004C52E4((uint64_t)&v35);
  }
  else if (a2 == (_OWORD *)v6)
  {
    *a2 = *(_OWORD *)a3;
    v18 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(v7 + 8 * (v8 >> 3) + 16) = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    a1[1] = (uint64_t)a2 + 24;
  }
  else
  {
    sub_1004C5334((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)a2 + 24);
    if ((unint64_t)v4 <= a3)
      a3 += 24 * (a1[1] > a3);
    *v4 = *(_QWORD *)a3;
    sub_1004C0DC4((_QWORD *)(v7 + 8 * (v8 >> 3) + 8), (uint64_t *)(a3 + 8));
  }
  return v4;
}

void sub_1004C2748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1004C52E4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C275C(uint64_t a1)
{
  return sub_1004C2764(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1004C2764(uint64_t a1)
{
  int *v2;
  NSObject *v3;
  uint64_t v4;
  char *v5;
  _QWORD v7[2];
  uint8_t buf[4];
  char *v9;

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 280);
  v2 = *(int **)(a1 + 344);
  if (v2)
  {
    sub_100034264((uint64_t)v7);
    v3 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
    {
      v4 = v2[19];
      if (v4 > 3)
        v5 = 0;
      else
        v5 = off_1009331B0[v4];
      *(_DWORD *)buf = 136446210;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Running new %{public}s scan", buf, 0xCu);
    }
    (*(void (**)(int *))(*(_QWORD *)v2 + 16))(v2);
  }
  return sub_100034234((uint64_t)v7);
}

void sub_1004C285C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004C2878(uint64_t a1)
{
  int v2;
  unsigned __int8 v3;
  NSObject *v4;
  int *v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];
  uint8_t v12[4];
  char *v13;
  uint8_t buf[8];
  uint64_t v15;

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 120);
  v2 = *(unsigned __int8 *)(a1 + 184);
  v3 = v2 + 1;
  *(_BYTE *)(a1 + 184) = v2 + 1;
  if (v2)
  {
    v4 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Pausing an already paused scan - new count is %d", buf, 8u);
    }
  }
  else
  {
    *(_QWORD *)buf = 0;
    v15 = 0;
    sub_10003415C((uint64_t)buf, a1 + 280);
    v5 = *(int **)(a1 + 344);
    v6 = qword_100999800;
    v7 = os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO);
    if (v5)
    {
      if (v7)
      {
        v8 = v5[19];
        if (v8 > 3)
          v9 = 0;
        else
          v9 = off_1009331B0[v8];
        *(_DWORD *)v12 = 136446210;
        v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Pausing current %{public}s scan", v12, 0xCu);
        v5 = *(int **)(a1 + 344);
      }
      (*(void (**)(int *))(*(_QWORD *)v5 + 24))(v5);
    }
    else if (v7)
    {
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Pausing DManager", v12, 2u);
    }
    sub_100034234((uint64_t)buf);
  }
  return sub_100034234((uint64_t)v11);
}

void sub_1004C2A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_100034234((uint64_t)&a13);
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C2A50(uint64_t a1)
{
  char v2;
  unsigned __int8 v3;
  NSObject *v4;
  NSObject *v5;
  _QWORD v7[2];
  uint8_t buf[4];
  int v9;

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 120);
  v2 = *(_BYTE *)(a1 + 184);
  if (v2)
  {
    v3 = v2 - 1;
    *(_BYTE *)(a1 + 184) = v2 - 1;
    v4 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Resuming a scan - new count is %d", buf, 8u);
      v3 = *(_BYTE *)(a1 + 184);
    }
    if (!v3)
    {
      sub_100034264((uint64_t)v7);
      sub_1004C025C(a1);
    }
  }
  else
  {
    v5 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Tried to resume a scan that wasn't paused!", buf, 2u);
    }
  }
  return sub_100034234((uint64_t)v7);
}

void sub_1004C2B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C2BA4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];
  uint8_t buf[4];
  char *v11;

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 280);
  v4 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
  {
    v5 = *(int *)(a2 + 76);
    if (v5 > 3)
      v6 = 0;
    else
      v6 = off_1009331B0[v5];
    *(_DWORD *)buf = 136446210;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%{public}s scan started", buf, 0xCu);
  }
  if (*(_QWORD *)(a1 + 344) == a2)
  {
    v7 = *(_QWORD *)(a1 + 352);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }
  sub_100034264((uint64_t)v9);
  *(_BYTE *)(a1 + 185) = 1;
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100933130);
  sub_10047AACC((uint64_t)off_100977890, 6);
  return sub_100034234((uint64_t)v9);
}

void sub_1004C2CF0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004C2D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 280);
  if (*(_QWORD *)(a1 + 344))
  {
    v4 = *(_QWORD *)(a1 + 352);
    if (v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
  }
  sub_100034264((uint64_t)v6);
  return sub_100034234((uint64_t)v6);
}

void sub_1004C2D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C2D88(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;

  v3 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v4 = v7 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Sending 'name changed' event for device %{public}s", buf, 0xCu);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100933150);
  return sub_100497FB4((uint64_t)off_100977A70, a2, 0xFFFFFFFFLL, 0, 701, 0);
}

uint64_t sub_1004C2EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 280);
  if (*(_QWORD *)(a1 + 344))
  {
    v4 = *(_QWORD *)(a1 + 352);
    if (v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a2);
  }
  sub_100034264((uint64_t)v6);
  return sub_100034234((uint64_t)v6);
}

void sub_1004C2F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C2F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 280);
  if (*(_QWORD *)(a1 + 344))
  {
    v4 = *(_QWORD *)(a1 + 352);
    if (v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
  }
  sub_100034264((uint64_t)v6);
  return sub_100034234((uint64_t)v6);
}

void sub_1004C2F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004C2FA0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  if (!*(_BYTE *)(a1 + 112))
    goto LABEL_6;
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_100933170);
  if (sub_10002527C((uint64_t)off_100978128) == 1)
  {
    v2 = sub_10006BBEC();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1004C3058;
    v3[3] = &unk_100917378;
    v3[4] = a1;
    sub_100041A34(v2, v3);
  }
  else
  {
LABEL_6:
    sub_1004C3060(a1);
  }
}

uint64_t sub_1004C3058(uint64_t a1)
{
  return sub_1004C3060(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1004C3060(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  int *v6;
  NSObject *v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];
  uint8_t buf[24];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 280);
  v2 = *(_QWORD *)(a1 + 352);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    sub_100274874(a1 + 352, (__int128 *)buf);
    v3 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v4 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  v6 = *(int **)(a1 + 344);
  v7 = qword_100999800;
  if (v6)
  {
    if (!os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT)
      || ((v8 = v6[19], v8 > 3) ? (v9 = 0) : (v9 = off_1009331B0[v8]),
          *(_DWORD *)buf = 136446210,
          *(_QWORD *)&buf[4] = v9,
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s scan completed", buf, 0xCu),
          (v6 = *(int **)(a1 + 344)) != 0))
    {
      (*(void (**)(int *))(*(_QWORD *)v6 + 8))(v6);
    }
    *(_QWORD *)(a1 + 344) = 0;
  }
  else if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Scan completed", buf, 2u);
  }
  sub_100034264((uint64_t)v11);
  if (!sub_1004C025C(a1))
  {
    *(_BYTE *)(a1 + 185) = 0;
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_100933130);
    sub_10047AACC((uint64_t)off_100977890, 7);
  }
  return sub_100034234((uint64_t)v11);
}

void sub_1004C3248(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004C3264(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void **v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  void *__p[2];
  unsigned __int8 v17;
  _QWORD v18[2];
  unsigned __int8 v19;
  int v20;
  uint8_t buf[4];
  void **v22;

  v20 = 0;
  v19 = 0;
  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 280);
  if (*(_QWORD *)(a1 + 344))
  {
    v8 = *(_QWORD *)(a1 + 352);
    if (v8)
    {
      v19 = sub_1004BCFC0(v8, a2, &v20, a4);
      if ((v19 & 1) == 0)
      {
        v9 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 352))(v9) && *(_DWORD *)(a2 + 1500) == 2)
        {
          v10 = qword_100999800;
          if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a2, __p);
            if ((v17 & 0x80u) == 0)
              v11 = __p;
            else
              v11 = (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            v22 = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received LE CarPlay in EIR from %{public}s, ignore it", buf, 0xCu);
            if ((char)v17 < 0)
              operator delete(__p[0]);
          }
        }
        else
        {
          v12 = *(_DWORD *)(*(_QWORD *)(a1 + 352) + 12) & 0xFFFFF7FF;
          if (qword_100977A78 != -1)
            dispatch_once(&qword_100977A78, &stru_100933150);
          sub_10049A978((uint64_t)off_100977A70, a2, v12, &v19, &v20);
          if (v19)
          {
            sub_10043F78C(a2, (uint64_t)__p);
            if ((v17 & 0x80u) == 0)
              v13 = v17;
            else
              v13 = (unint64_t)__p[1];
            if ((char)v17 < 0)
              operator delete(__p[0]);
            if (!v13)
              v20 |= 4u;
          }
        }
      }
    }
  }
  sub_100034264((uint64_t)v18);
  *a3 = v20;
  v14 = v19;
  sub_100034234((uint64_t)v18);
  return v14;
}

void sub_1004C3460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004C348C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004C34F0;
  v5[3] = &unk_100918090;
  v5[4] = a1;
  v5[5] = a2;
  sub_100041A34(v4, v5);
}

void sub_1004C34F0(uint64_t a1)
{
  sub_1004C3508(*(_QWORD *)(a1 + 32), 1u, *(unsigned __int8 **)(a1 + 40), 1, 0);
}

void sub_1004C3508(uint64_t a1, unsigned int a2, unsigned __int8 *a3, int a4, int a5)
{
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  int v28;
  NSObject *v29;
  _BYTE *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  _QWORD *v36;
  NSObject *v37;
  _BYTE *v38;
  NSObject *v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  _QWORD *v45;
  NSObject *v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  NSObject *v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  int v54;
  uint64_t *v55;
  unint64_t v56;
  BOOL v57;
  _QWORD *v58;
  _BYTE *v59;
  NSObject *v60;
  uint64_t v61;
  int v62;
  NSObject *v63;
  _BOOL4 v64;
  _BYTE *v65;
  _BOOL4 v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unsigned __int8 *v69;
  int v70;
  NSObject *v71;
  _BOOL4 v72;
  _BYTE *v73;
  _BOOL4 v74;
  unsigned __int8 *v75;
  _BYTE *v76;
  const char *v77;
  int v78;
  _BYTE *v79;
  const char *v80;
  int v81;
  NSObject *v82;
  _BYTE *v83;
  _BYTE *v84;
  const char *v85;
  int v86;
  _BYTE *v87;
  const char *v88;
  int v89;
  __int16 v90;
  __int16 v91;
  __int16 v92;
  __int16 v93;
  NSObject *log;
  uint64_t **v95;
  NSObject *v96;
  unsigned __int16 v97;
  int v98;
  int v99;
  int v100;
  unsigned __int8 *v101;
  _BYTE v102[12];
  __int16 v103;
  int v104;
  char v105;
  _BYTE buf[14];
  uint64_t v107;
  _BYTE v108[10];

  v101 = a3;
  v9 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 648))(v9))
    return;
  v10 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    v11 = "unknown";
    v12 = "unknown";
    if (a2 <= 2)
      v12 = off_1009331D0[a2];
    v13 = *(_DWORD *)(a1 + 480);
    if (v13 == 1)
      v11 = "SCAN_CORE_PAGE_SCAN_ENABLE";
    if (!v13)
      v11 = "SCAN_CORE_PAGE_SCAN_IDLE";
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2080;
    v107 = (uint64_t)v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received Scan Core Page Scan Request for event: %s, scanCorePageScanState: %s", buf, 0x16u);
  }
  if (*(_BYTE *)(a1 + 497))
  {
    v14 = *(_DWORD *)(a1 + 500);
    a4 = *(_DWORD *)(a1 + 504);
    v15 = *(unsigned __int8 *)(a1 + 508);
    v16 = *(unsigned __int8 *)(a1 + 509);
    v17 = *(unsigned __int8 *)(a1 + 510);
    v18 = *(unsigned __int8 *)(a1 + 511);
    v19 = *(unsigned __int8 *)(a1 + 512);
    v20 = *(_DWORD *)(a1 + 516);
  }
  else
  {
    v16 = 0;
    v15 = 0;
    LOWORD(v14) = word_100741C12[5 * a4];
    LOWORD(a4) = 18;
    v19 = 1;
    LOBYTE(v20) = 50;
    v18 = 1;
    v17 = 1;
  }
  v21 = *(_DWORD *)(a1 + 480);
  if (v21 == 1)
  {
    if (a2 == 2)
    {
      v48 = v17;
      v49 = v15;
      v50 = qword_100999800;
      if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Scan Core Page Scan timer expired. Clearing Scan Core Page Scan device set.", buf, 2u);
      }
      sub_10001A82C(a1 + 456, *(_QWORD **)(a1 + 464));
      *(_QWORD *)(a1 + 464) = 0;
      *(_QWORD *)(a1 + 472) = 0;
      *(_QWORD *)(a1 + 456) = a1 + 464;
      v51 = sub_1000438A4();
      HIBYTE(v91) = v20;
      LOBYTE(v91) = v19 != 0;
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, BOOL, BOOL, BOOL, BOOL, __int16))(*(_QWORD *)v51 + 3416))(v51, 0, (unsigned __int16)v14, (unsigned __int16)a4, v49 != 0, v16 != 0, v48 != 0, v18 != 0, v91);
      sub_1004C0AE4(a1);
    }
    else
    {
      if (a2 != 1)
      {
        if (a2
          || !sub_10043E93C(v101)
          || sub_10043FC5C((uint64_t)v101)
          || !sub_100442118((uint64_t)v101, 12))
        {
          return;
        }
        v32 = *(_QWORD **)(a1 + 464);
        if (!v32)
          goto LABEL_60;
        v33 = a1 + 464;
        do
        {
          v34 = v32[4];
          v35 = v34 >= (unint64_t)v101;
          if (v34 >= (unint64_t)v101)
            v36 = v32;
          else
            v36 = v32 + 1;
          if (v35)
            v33 = (uint64_t)v32;
          v32 = (_QWORD *)*v36;
        }
        while (*v36);
        if (v33 != a1 + 464 && (unint64_t)v101 >= *(_QWORD *)(v33 + 32))
        {
          v82 = qword_100999800;
          if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8((uint64_t)v101, buf);
            v83 = v108[1] >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)v102 = 136315138;
            *(_QWORD *)&v102[4] = v83;
            _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "'%s' already present in Scan Core Page Scan device set.", v102, 0xCu);
            if ((v108[1] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
        }
        else
        {
LABEL_60:
          if (sub_100453A8C((uint64_t)v101) > 4)
          {
            v70 = *(char *)(a1 + 496);
            v71 = qword_100999800;
            v72 = os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT);
            if (a5 - v70 < 10)
            {
              if (v72)
              {
                sub_10043E5F8((uint64_t)v101, v102);
                if (v105 >= 0)
                  v79 = v102;
                else
                  v79 = *(_BYTE **)v102;
                v80 = "unknown";
                v81 = *(_DWORD *)(a1 + 480);
                if (v81 == 1)
                  v80 = "SCAN_CORE_PAGE_SCAN_ENABLE";
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = v79;
                *(_WORD *)&buf[12] = 2080;
                v107 = (uint64_t)"DEVICE_ADV_RECEIVED_EVENT";
                if (!v81)
                  v80 = "SCAN_CORE_PAGE_SCAN_IDLE";
                *(_WORD *)v108 = 2080;
                *(_QWORD *)&v108[2] = v80;
                _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Reached maximum Scan Core Page Scan retries for Device '%s', Event: %s, State: %s.", buf, 0x20u);
                if (v105 < 0)
                  operator delete(*(void **)v102);
              }
              if (!sub_100453E04((uint64_t)v101))
                goto LABEL_146;
            }
            else
            {
              if (v72)
              {
                sub_10043E5F8((uint64_t)v101, v102);
                v73 = v105 >= 0 ? v102 : *(_BYTE **)v102;
                *(_DWORD *)buf = 67109890;
                *(_DWORD *)&buf[4] = a5;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v70;
                v107 = 0x8200000000A0400;
                *(_QWORD *)v108 = v73;
                _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Difference between currentLEAdvRSSI: %d and previousLEAdvRSSI:%d is greater than %d dB for device '%s'", buf, 0x1Eu);
                if (v105 < 0)
                  operator delete(*(void **)v102);
              }
              v74 = sub_100453E04((uint64_t)v101);
              v75 = v101;
              if (v74)
              {
                sub_100453CB8((uint64_t)v101);
                v75 = v101;
                ++*((_WORD *)v101 + 699);
              }
              sub_100453A4C((uint64_t)v75);
              sub_10000F7A0((uint64_t **)(a1 + 456), (unint64_t *)&v101, (uint64_t *)&v101);
              sub_1004C0AE4(a1);
              sub_1004C45C0(a1, 60);
              sub_100453A04((uint64_t)v101);
            }
          }
          else
          {
            v37 = qword_100999800;
            if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8((uint64_t)v101, buf);
              v38 = v108[1] >= 0 ? buf : *(_BYTE **)buf;
              *(_DWORD *)v102 = 136315394;
              *(_QWORD *)&v102[4] = v38;
              v103 = 1024;
              v104 = 60;
              _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "'%s' not present in Scan Core Page Scan device set. Inserting it and resetting timer for %d seconds.", v102, 0x12u);
              if ((v108[1] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }
            if (sub_100453A8C((uint64_t)v101) <= 3)
              *(_BYTE *)(a1 + 496) = a5;
            sub_10000F7A0((uint64_t **)(a1 + 456), (unint64_t *)&v101, (uint64_t *)&v101);
            sub_1004C0AE4(a1);
            sub_1004C45C0(a1, 60);
            sub_100453A04((uint64_t)v101);
          }
        }
        return;
      }
      v100 = v17;
      v52 = v15;
      v97 = v14;
      if (!sub_100442118((uint64_t)v101, 12))
        return;
      sub_100453A4C((uint64_t)v101);
      if (sub_100453E04((uint64_t)v101))
      {
        sub_100453CB8((uint64_t)v101);
        ++*((_WORD *)v101 + 699);
      }
      v53 = *(_QWORD **)(a1 + 464);
      if (!v53)
        return;
      v54 = v19;
      v55 = (uint64_t *)(a1 + 464);
      do
      {
        v56 = v53[4];
        v57 = v56 >= (unint64_t)v101;
        if (v56 >= (unint64_t)v101)
          v58 = v53;
        else
          v58 = v53 + 1;
        if (v57)
          v55 = v53;
        v53 = (_QWORD *)*v58;
      }
      while (*v58);
      if (v55 == (uint64_t *)(a1 + 464) || (unint64_t)v101 < v55[4])
        return;
      log = qword_100999800;
      if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8((uint64_t)v101, buf);
        if (v108[1] >= 0)
          v59 = buf;
        else
          v59 = *(_BYTE **)buf;
        *(_DWORD *)v102 = 136315138;
        *(_QWORD *)&v102[4] = v59;
        _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "'%s' connected. Removing it from Scan Core Page Scan device set.", v102, 0xCu);
        if ((v108[1] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v54 = v19;
      }
      sub_1000040CC((uint64_t **)(a1 + 456), v55);
      operator delete(v55);
      ++*((_WORD *)v101 + 701);
      if (*(_QWORD *)(a1 + 472))
        return;
      v60 = qword_100999800;
      if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Scan Core Page Scan device list is empty.", buf, 2u);
      }
      v61 = sub_1000438A4();
      HIBYTE(v92) = v20;
      LOBYTE(v92) = v54 != 0;
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, BOOL, BOOL, BOOL, BOOL, __int16))(*(_QWORD *)v61 + 3416))(v61, 0, v97, (unsigned __int16)a4, v52 != 0, v16 != 0, v100 != 0, v18 != 0, v92);
      sub_1004C0AE4(a1);
    }
    sub_1004C4710(a1, 0);
    return;
  }
  v98 = v15;
  v99 = v17;
  if (v21)
    return;
  switch(a2)
  {
    case 2u:
      v39 = qword_100999800;
      if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_FAULT))
        sub_1006F92C0(v39);
      break;
    case 1u:
      v40 = *(_QWORD **)(a1 + 464);
      v41 = v101;
      if (v40)
      {
        v42 = a1 + 464;
        do
        {
          v43 = v40[4];
          v44 = v43 >= (unint64_t)v101;
          if (v43 >= (unint64_t)v101)
            v45 = v40;
          else
            v45 = v40 + 1;
          if (v44)
            v42 = (uint64_t)v40;
          v40 = (_QWORD *)*v45;
        }
        while (*v45);
        if (v42 != a1 + 464 && (unint64_t)v101 >= *(_QWORD *)(v42 + 32))
        {
          v46 = qword_100999800;
          if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_FAULT))
          {
            sub_10043E5F8((uint64_t)v101, v102);
            if (v105 >= 0)
              v87 = v102;
            else
              v87 = *(_BYTE **)v102;
            v88 = "unknown";
            v89 = *(_DWORD *)(a1 + 480);
            if (v89 == 1)
              v88 = "SCAN_CORE_PAGE_SCAN_ENABLE";
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v87;
            *(_WORD *)&buf[12] = 2080;
            v107 = (uint64_t)"DEVICE_CONNECTED_EVENT";
            if (!v89)
              v88 = "SCAN_CORE_PAGE_SCAN_IDLE";
            *(_WORD *)v108 = 2080;
            *(_QWORD *)&v108[2] = v88;
            _os_log_fault_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_FAULT, "'%s' present in Scan Core Page Scan device set. Event: %s, State: %s.", buf, 0x20u);
            if (v105 < 0)
              operator delete(*(void **)v102);
            v41 = v101;
          }
        }
      }
      sub_100453A4C((uint64_t)v41);
      v47 = v101;
      ++*((_WORD *)v101 + 702);
      if (sub_100453E04((uint64_t)v47))
      {
        sub_100453CB8((uint64_t)v101);
        ++*((_WORD *)v101 + 699);
      }
      break;
    case 0u:
      v22 = *(_QWORD **)(a1 + 464);
      v23 = v101;
      if (v22)
      {
        v24 = a1 + 464;
        do
        {
          v25 = v22[4];
          v26 = v25 >= (unint64_t)v101;
          if (v25 >= (unint64_t)v101)
            v27 = v22;
          else
            v27 = v22 + 1;
          if (v26)
            v24 = (uint64_t)v22;
          v22 = (_QWORD *)*v27;
        }
        while (*v27);
        if (v24 != a1 + 464 && (unint64_t)v101 >= *(_QWORD *)(v24 + 32))
        {
          v96 = qword_100999800;
          if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_FAULT))
          {
            sub_10043E5F8((uint64_t)v101, v102);
            v84 = v102;
            if (v105 < 0)
              v84 = *(_BYTE **)v102;
            v85 = "unknown";
            v86 = *(_DWORD *)(a1 + 480);
            if (v86 == 1)
              v85 = "SCAN_CORE_PAGE_SCAN_ENABLE";
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v84;
            *(_WORD *)&buf[12] = 2080;
            v107 = (uint64_t)"DEVICE_ADV_RECEIVED_EVENT";
            if (!v86)
              v85 = "SCAN_CORE_PAGE_SCAN_IDLE";
            *(_WORD *)v108 = 2080;
            *(_QWORD *)&v108[2] = v85;
            _os_log_fault_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_FAULT, "'%s' present in Scan Core Page Scan device set. Event: %s, State: %s.", buf, 0x20u);
            if (v105 < 0)
              operator delete(*(void **)v102);
            v23 = v101;
          }
        }
      }
      if (sub_10043E93C(v23))
      {
        v28 = v19;
        if (!sub_10043FC5C((uint64_t)v101))
        {
          if (sub_100442118((uint64_t)v101, 12))
          {
            v95 = (uint64_t **)(a1 + 456);
            if (sub_100453A8C((uint64_t)v101) <= 4)
            {
              v29 = qword_100999800;
              if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
              {
                sub_10043E5F8((uint64_t)v101, buf);
                v30 = v108[1] >= 0 ? buf : *(_BYTE **)buf;
                *(_DWORD *)v102 = 136315138;
                *(_QWORD *)&v102[4] = v30;
                _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Adding '%s' into Scan Core Page Scan device set.", v102, 0xCu);
                if ((v108[1] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
              }
              if (sub_100453A8C((uint64_t)v101) <= 3)
                *(_BYTE *)(a1 + 496) = a5;
              sub_10000F7A0(v95, (unint64_t *)&v101, (uint64_t *)&v101);
              v31 = sub_1000438A4();
              HIBYTE(v90) = v20;
              LOBYTE(v90) = v28 != 0;
              (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, BOOL, BOOL, BOOL, BOOL, __int16))(*(_QWORD *)v31 + 3416))(v31, 1, (unsigned __int16)v14, (unsigned __int16)a4, v98 != 0, v16 != 0, v99 != 0, v18 != 0, v90);
              sub_1004C45C0(a1, 60);
              sub_1004C4710(a1, 1);
              sub_100453A04((uint64_t)v101);
              ++*((_WORD *)v101 + 690);
              return;
            }
            v62 = *(char *)(a1 + 496);
            v63 = qword_100999800;
            v64 = os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT);
            if (a5 - v62 >= 10)
            {
              if (v64)
              {
                sub_10043E5F8((uint64_t)v101, v102);
                v65 = v105 >= 0 ? v102 : *(_BYTE **)v102;
                *(_DWORD *)buf = 67109890;
                *(_DWORD *)&buf[4] = a5;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v62;
                v107 = 0x8200000000A0400;
                *(_QWORD *)v108 = v65;
                _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Difference between currentLEAdvRSSI: %d and previousLEAdvRSSI:%d is greater than %d dB for device '%s'", buf, 0x1Eu);
                if (v105 < 0)
                  operator delete(*(void **)v102);
              }
              v66 = sub_100453E04((uint64_t)v101);
              v67 = v101;
              if (v66)
              {
                sub_100453CB8((uint64_t)v101);
                v67 = v101;
                ++*((_WORD *)v101 + 699);
              }
              sub_100453A4C((uint64_t)v67);
              sub_10000F7A0(v95, (unint64_t *)&v101, (uint64_t *)&v101);
              v68 = sub_1000438A4();
              HIBYTE(v93) = v20;
              LOBYTE(v93) = v28 != 0;
              (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, BOOL, BOOL, BOOL, BOOL, __int16))(*(_QWORD *)v68 + 3416))(v68, 1, (unsigned __int16)v14, (unsigned __int16)a4, v98 != 0, v16 != 0, v99 != 0, v18 != 0, v93);
              sub_1004C45C0(a1, 60);
              sub_1004C4710(a1, 1);
              sub_100453A04((uint64_t)v101);
              v69 = v101;
              ++*((_WORD *)v101 + 690);
              ++*((_WORD *)v69 + 697);
              return;
            }
            if (v64)
            {
              sub_10043E5F8((uint64_t)v101, v102);
              if (v105 >= 0)
                v76 = v102;
              else
                v76 = *(_BYTE **)v102;
              v77 = "unknown";
              v78 = *(_DWORD *)(a1 + 480);
              if (v78 == 1)
                v77 = "SCAN_CORE_PAGE_SCAN_ENABLE";
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v76;
              *(_WORD *)&buf[12] = 2080;
              v107 = (uint64_t)"DEVICE_ADV_RECEIVED_EVENT";
              if (!v78)
                v77 = "SCAN_CORE_PAGE_SCAN_IDLE";
              *(_WORD *)v108 = 2080;
              *(_QWORD *)&v108[2] = v77;
              _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Reached max Scan Core Page Scan retries for Device '%s', Event: %s, State: %s.", buf, 0x20u);
              if (v105 < 0)
                operator delete(*(void **)v102);
            }
            if (!sub_100453E04((uint64_t)v101))
LABEL_146:
              sub_100453AD0((uint64_t)v101);
          }
        }
      }
      break;
  }
}

void sub_1004C4384(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = a1 - 24;
  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004C34F0;
  v5[3] = &unk_100918090;
  v5[4] = v3;
  v5[5] = a2;
  sub_100041A34(v4, v5);
}

void sub_1004C43E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[6];
  char v13;

  v7 = a3;
  v8 = *(char *)(*(_QWORD *)(a4 + 8) + 216);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100933078);
  if ((sub_1000261DC((uint64_t)off_100977A50) & 1) != 0
    || (v9 = *(_QWORD *)(a4 + 8), !*(_BYTE *)(v9 + 363))
    || *(_BYTE *)(v9 + 217)
    || v8 < -85)
  {
    if (v8 <= -85)
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_100933190);
      v11 = sub_10006D488((uint64_t)off_1009778E0, a2, 0);
      if (v11)
        ++*(_WORD *)(v11 + 1396);
    }
  }
  else
  {
    v10 = sub_10006BBEC();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1004C4538;
    v12[3] = &unk_10091FF68;
    v12[4] = a1;
    v12[5] = a2;
    v13 = v8;
    sub_100041A34(v10, v12);
  }

}

void sub_1004C4524(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004C4538(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100933190);
  v3 = (unsigned __int8 *)sub_10006D488((uint64_t)off_1009778E0, *(_QWORD *)(a1 + 40), 0);
  if (v3)
    sub_1004C3508(v2, 0, v3, 1, *(char *)(a1 + 48));
}

void sub_1004C45B8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  sub_1004C43E8(a1 - 40, a2, a3, a4);
}

uint64_t sub_1004C45C0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  dispatch_time_t v8;
  _QWORD v10[2];
  uint8_t buf[4];
  uint64_t v12;

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 392);
  v4 = *(NSObject **)(a1 + 488);
  if (v4
    || (v5 = sub_10006BBEC(),
        v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v5 + 8)), *(_QWORD *)(a1 + 488) = v6, dispatch_source_set_event_handler(v6, &stru_100933018), (v4 = *(NSObject **)(a1 + 488)) != 0))
  {
    v7 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Start Scan Core Page Scan timer of %llu seconds", buf, 0xCu);
      v4 = *(NSObject **)(a1 + 488);
    }
    v8 = dispatch_time(0, 1000000000 * a2);
    dispatch_source_set_timer(v4, v8, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_resume(*(dispatch_object_t *)(a1 + 488));
  }
  return sub_100034234((uint64_t)v10);
}

void sub_1004C46F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004C4710(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  const char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;

  v4 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "unknown";
    v6 = *(_DWORD *)(a1 + 480);
    if (v6 == 1)
      v7 = "SCAN_CORE_PAGE_SCAN_ENABLE";
    else
      v7 = "unknown";
    if (v6)
      v8 = v7;
    else
      v8 = "SCAN_CORE_PAGE_SCAN_IDLE";
    if (a2 == 1)
      v5 = "SCAN_CORE_PAGE_SCAN_ENABLE";
    if (!a2)
      v5 = "SCAN_CORE_PAGE_SCAN_IDLE";
    v9 = 136315394;
    v10 = v8;
    v11 = 2080;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Scan Core Page Scan State:  %s => %s", (uint8_t *)&v9, 0x16u);
  }
  *(_DWORD *)(a1 + 480) = a2;
}

void sub_1004C4808(id a1)
{
  uint64_t v1;

  v1 = sub_10006BBEC();
  sub_100041A34(v1, &stru_100933038);
}

uint64_t sub_1004C4824(uint64_t a1, int a2, unsigned int a3)
{
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  int v21;
  NSObject *v22;
  _BOOL4 v23;
  const char *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  _QWORD v35[2];
  unsigned int v36;
  char v37;
  _BYTE buf[18];
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  v36 = a3;
  v35[0] = 0;
  v35[1] = 0;
  sub_10003415C((uint64_t)v35, a1 + 520);
  v34 = 0;
  *(_QWORD *)buf = &v36;
  *((_DWORD *)sub_1002DAB8C((uint64_t **)(a1 + 584), (int *)&v36, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) = a2;
  v5 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    if (v36 > 3)
      v6 = "unknown";
    else
      v6 = off_1009331E8[v36];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Event \"%s\" is requesting to set Device Connectability Speed Scenario to %d", buf, 0x12u);
  }
  v37 = 0;
  sub_100043758(&v37);
  v7 = sub_100187AAC(&v34);
  sub_10004339C(&v37);
  if ((_DWORD)v7)
  {
    v8 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
      sub_1006F93B8(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  else
  {
    v15 = *(_QWORD **)(a1 + 584);
    v16 = (_QWORD *)(a1 + 592);
    v17 = a2;
    if (v15 != v16)
    {
      v17 = a2;
      do
      {
        if (*((_DWORD *)v15 + 8) > v17)
          v17 = *((_DWORD *)v15 + 8);
        v18 = (_QWORD *)v15[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v15[2];
            v20 = *v19 == (_QWORD)v15;
            v15 = v19;
          }
          while (!v20);
        }
        v15 = v19;
      }
      while (v19 != v16);
    }
    v21 = v34;
    v22 = qword_100999800;
    v23 = os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT);
    if (v21 == v17)
    {
      if (v23)
      {
        if (v36 > 3)
          v24 = "unknown";
        else
          v24 = off_1009331E8[v36];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = a2;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = v24;
        v39 = 1024;
        v40 = v17;
        v41 = 1024;
        v42 = v17;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Did not set Device Connectability Speed Scenario to %d for event \"%s\". fastestScenario: %d, Current Scenario: %d", buf, 0x1Eu);
      }
    }
    else
    {
      if (v23)
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Setting Device Connectability Speed Scenario: %d", buf, 8u);
      }
      sub_10006D81C(&v37);
      v25 = sub_100187AE4((uint64_t (*)(_QWORD, _QWORD))sub_1004C4B48, v17);
      sub_10004339C(&v37);
      if ((_DWORD)v25)
      {
        v26 = qword_100999800;
        if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
          sub_1006F9354(v25, v26, v27, v28, v29, v30, v31, v32);
      }
    }
  }
  sub_100043728(&v37);
  return sub_100034234((uint64_t)v35);
}

void sub_1004C4B18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004C4B48(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)a1)
  {
    v2 = qword_100999800;
    if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_ERROR))
      sub_1006F941C(a1, v2, v3, v4, v5, v6, v7, v8);
  }
}

void sub_1004C4B94(uint64_t a1)
{
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100933058);
  sub_10042381C(qword_100977B48 + 8, a1 + 8);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100933078);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 32);
}

void sub_1004C4C24(uint64_t a1)
{
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100933058);
  sub_100069060(qword_100977B48 + 8, a1 + 8);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100933078);
  sub_100069060((uint64_t)off_100977A50 + 64, a1 + 32);
}

uint64_t sub_1004C4CB4(uint64_t result, uint64_t a2, int a3)
{
  if (!a3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1004C4CCC(uint64_t a1, int a2)
{
  if (a2)
    return sub_1004C2878(a1);
  else
    return sub_1004C2A50(a1);
}

uint64_t sub_1004C4CE0(uint64_t result, uint64_t a2, int a3)
{
  if (!a3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result - 16) + 8))(result - 16);
  return result;
}

uint64_t sub_1004C4CF8(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = a1 - 24;
  if (a2)
    return sub_1004C2878(v2);
  else
    return sub_1004C2A50(v2);
}

void sub_1004C4D10(id a1)
{
  if (qword_100977D80 != -1)
    dispatch_once(&qword_100977D80, &stru_100933098);
  sub_1004C3508((uint64_t)off_100977D78, 2u, 0, 1, 0);
}

void sub_1004C4D60(id a1)
{
  operator new();
}

void sub_1004C4DA0()
{
  operator delete();
}

void sub_1004C4DC4(id a1)
{
  operator new();
}

void sub_1004C4E04()
{
  operator delete();
}

void sub_1004C4E28(id a1)
{
  operator new();
}

void sub_1004C4E68()
{
  operator delete();
}

void sub_1004C4E8C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1004C4E8C(a1, *a2);
    sub_1004C4E8C(a1, a2[1]);
    sub_10009F88C((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

void sub_1004C4ED4(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        sub_10009F88C((uint64_t)(v4 - 16));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1004C4F48(id a1)
{
  operator new();
}

void sub_1004C4F88()
{
  operator delete();
}

void sub_1004C4FAC(id a1)
{
  operator new();
}

void sub_1004C4FEC()
{
  operator delete();
}

_QWORD *sub_1004C5010@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x150uLL);
  result = sub_1004C5058(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1004C5044(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004C5058(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100933108;
  sub_1004BCE00((uint64_t)(a1 + 3));
  return a1;
}

void sub_1004C508C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004C50A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100933108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004C50B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100933108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004C50E0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *sub_1004C50F0(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD v14[2];
  uint64_t v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v15 = 0;
    v12 = (uint64_t *)operator new(0x38uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[5] = 0;
    v12[6] = 0;
    LOBYTE(v15) = 1;
    sub_100004078(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    sub_1004C51D8((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void sub_1004C51D8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10009F88C((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

void sub_1004C521C(id a1)
{
  operator new();
}

void sub_1004C525C()
{
  operator delete();
}

uint64_t *sub_1004C5280(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 24);
    v2 -= 24;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1004C52E4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_10009F88C(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1004C5334(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      v8 += 24;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_1004C5440(a2, v7, v6);
}

uint64_t sub_1004C538C(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *(_OWORD *)(v7 - 24);
      v7 -= 24;
      *(_OWORD *)(v6 - 24) = v8;
      v6 -= 24;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 16);
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = a1[1];
  v10 = a2[2];
  if (v9 != a3)
  {
    do
    {
      *(_OWORD *)v10 = *(_OWORD *)a3;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v10 += 24;
      a3 += 24;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = *a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1004C5440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v7 = *(_QWORD *)(v6 - 24);
      v6 -= 24;
      *(_QWORD *)(a3 - 24) = v7;
      a3 -= 24;
      sub_100274874(a3 + 8, (__int128 *)(v6 + 8));
    }
    while (v6 != a1);
  }
  return a2;
}

_QWORD *sub_1004C549C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = (__int128 *)(v4 + 1);
    v7 = *v4;
    v4 += 3;
    v8 = (uint64_t)(a3 + 1);
    *a3 = v7;
    a3 += 3;
    sub_100274874(v8, v6);
  }
  while (v4 != v5);
  return v5;
}

void sub_1004C54FC(id a1)
{
  operator new();
}

void sub_1004C553C()
{
  operator delete();
}

void sub_1004C5560(id a1)
{
  operator new();
}

void sub_1004C55A0()
{
  operator delete();
}

void sub_1004C55C4(id a1)
{
  operator new();
}

void sub_1004C5604()
{
  operator delete();
}

NSObject **sub_1004C5628(NSObject **a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[9];

  a1[1] = os_nexus_controller_create();
  v2 = os_log_create("com.apple.bluetooth", "BTAudioSkywalk");
  v3 = v2;
  *a1 = v2;
  if (a1[1])
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v6[0]) = 134219008;
      *(_QWORD *)((char *)v6 + 4) = 2048;
      WORD2(v6[1]) = 2048;
      *(_QWORD *)((char *)&v6[1] + 6) = 1;
      HIWORD(v6[2]) = 2048;
      v6[3] = 1;
      LOWORD(v6[4]) = 2048;
      *(_QWORD *)((char *)&v6[4] + 2) = 8;
      WORD1(v6[5]) = 2048;
      *(_QWORD *)((char *)&v6[5] + 4) = 8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Creating skywalk nexus with NEXUS_ATTR_SLOT_BUF_SIZE: %llu, NEXUS_ATTR_RX_RINGS: %llu, NEXUS_ATTR_TX_RINGS: %llu, NEXUS_ATTR_TX_SLOTS: %llu, NEXUS_ATTR_RX_SLOTS: %llu", (uint8_t *)v6, 0x34u);
    }
    v4 = os_nexus_attr_create();
    os_nexus_attr_set(v4, 4, 2048);
    os_nexus_attr_set(v4, 1, 1);
    os_nexus_attr_set(v4, 0, 1);
    os_nexus_attr_set(v4, 2, 8);
    os_nexus_attr_set(v4, 3, 8);
    os_nexus_attr_set(v4, 7, 2);
    strcpy((char *)v6, "com.apple.bluetooth.AudioPipe");
    HIWORD(v6[3]) = unk_100741C44;
    memset(&v6[4], 0, 32);
    os_nexus_controller_register_provider(a1[1], v6, 0, v4, a1 + 2);
    os_nexus_attr_destroy(v4);
  }
  else if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    sub_1006F9480();
  }
  return a1;
}

uint64_t sub_1004C57D8(uint64_t a1, uint64_t a2, char a3)
{
  *(_QWORD *)a1 = off_100933218;
  *(_QWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 208) = a3;
  mach_timebase_info((mach_timebase_info_t)(a1 + 192));
  *(_QWORD *)(a1 + 200) = a2;
  *(_QWORD *)(a1 + 16) = os_log_create("com.apple.bluetooth", "BTAudioSkywalk");
  return a1;
}

void sub_1004C584C(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004C5870(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  kevent v10;

  *(_QWORD *)a1 = off_100933218;
  v2 = *(NSObject **)(a1 + 16);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10.ident) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down AudioSkywalkPipe", (uint8_t *)&v10, 2u);
  }
  atomic_store(1u, (unsigned __int8 *)(a1 + 144));
  v3 = *(_DWORD *)(a1 + 12);
  if (v3 != -1 || *(_DWORD *)(a1 + 8) != -1)
  {
    v10.ident = a1 + 144;
    *(_QWORD *)&v10.filter = 0x10000000000FFF6;
    v10.data = 0;
    v10.udata = 0;
    kevent(v3, &v10, 1, 0, 0, 0);
    kevent(*(_DWORD *)(a1 + 8), &v10, 1, 0, 0, 0);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
    while (!atomic_load((unsigned __int8 *)(a1 + 145)))
      pthread_cond_wait((pthread_cond_t *)(a1 + 96), (pthread_mutex_t *)(a1 + 32));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
    pthread_cond_destroy((pthread_cond_t *)(a1 + 96));
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));
    v5 = *(_DWORD *)(a1 + 8);
    if (v5 != -1)
      close(v5);
  }
  v6 = *(_DWORD *)(a1 + 12);
  if (v6 != -1)
    close(v6);
  v7 = *(_QWORD *)(a1 + 176);
  if (v7)
    os_channel_destroy(v7);
  v8 = *(NSObject **)(a1 + 16);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10.ident) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "AudioSkywalkPipe torn down", (uint8_t *)&v10, 2u);
  }

  return a1;
}

void sub_1004C5A14(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void sub_1004C5A44(uint64_t a1)
{
  sub_1004C5870(a1);
  operator delete();
}

void sub_1004C5A68(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t fd;
  uint64_t v16;
  kevent v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  pthread_attr_t v23;

  v7 = a4;
  v8 = a3;
  v9 = objc_retainBlock(a2);
  v10 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v9;

  v11 = objc_retainBlock(v8);
  v12 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v11;

  v13 = objc_retainBlock(v7);
  v14 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v13;

  atomic_store(0, (unsigned __int8 *)(a1 + 144));
  atomic_store(0, (unsigned __int8 *)(a1 + 145));
  if (*(_QWORD *)(a1 + 152))
    *(_DWORD *)(a1 + 12) = kqueue();
  if (*(_QWORD *)(a1 + 160))
    *(_DWORD *)(a1 + 8) = kqueue();
  fd = os_channel_get_fd(*(_QWORD *)(a1 + 176));
  v17.ident = (int)__chkstk_darwin(fd, v16);
  *(_DWORD *)&v17.filter = 393215;
  memset(&v17.fflags, 0, 20);
  v18 = a1 + 144;
  v19 = 393206;
  v21 = 0;
  v20 = 0;
  v22 = 0;
  if (kevent(*(_DWORD *)(a1 + 12), &v17, 2, 0, 0, 0) == -1)
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_ERROR))
      sub_1006F94AC();
  }
  else if (*(_QWORD *)(a1 + 152))
  {
    pthread_mutex_init((pthread_mutex_t *)(a1 + 32), 0);
    pthread_cond_init((pthread_cond_t *)(a1 + 96), 0);
    memset(&v23, 0, sizeof(v23));
    pthread_attr_init(&v23);
    pthread_attr_setdetachstate(&v23, 2);
    pthread_create((pthread_t *)(a1 + 24), &v23, (void *(__cdecl *)(void *))sub_1004C5C4C, (void *)a1);
  }
}

uint64_t sub_1004C5C4C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  unint64_t v5;
  thread_act_t v6;
  _QWORD *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  kevent v14;
  integer_t policy_info;
  int v16;
  int v17;
  int v18;

  pthread_setname_np("AudioSkywalkPipeReadLoop");
  v2 = os_log_create("com.apple.bluetooth", "BTAudioSkywalk");
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 200);
  if (!v4)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_1006F94D8(v3);
    v4 = 22000;
    *(_QWORD *)(a1 + 200) = 22000;
  }
  v5 = 1000 * v4 * (unint64_t)*(unsigned int *)(a1 + 196) / *(unsigned int *)(a1 + 192);
  policy_info = v5;
  v16 = v5 >> 2;
  v17 = v16;
  v18 = 0;
  v6 = mach_thread_self();
  thread_policy_set(v6, 2u, &policy_info, 4u);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14.ident) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting AudioSkywalk read loop", (uint8_t *)&v14, 2u);
  }
  mach_absolute_time();
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  v7 = (_QWORD *)(a1 + 216);
  if (!atomic_load((unsigned __int8 *)(a1 + 144)))
  {
    v9 = 20000000 * (unint64_t)*(unsigned int *)(a1 + 196) / *(unsigned int *)(a1 + 192);
    do
    {
      memset(&v14, 0, sizeof(v14));
      kevent(*(_DWORD *)(a1 + 12), 0, 0, &v14, 1, 0);
      if (v14.filter != -1)
        break;
      v10 = mach_absolute_time();
      v11 = v10;
      if (*v7 && *(_QWORD *)(a1 + 224) && v10 > *v7 + v9)
        (*(void (**)(void))(*(_QWORD *)(a1 + 168) + 16))();
      sub_1004C5EB0(a1);
      *(_QWORD *)(a1 + 216) = v11 + v5;
      *(_QWORD *)(a1 + 224) = v11;
    }
    while (!atomic_load((unsigned __int8 *)(a1 + 144)));
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14.ident) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stopping AudioSkywalk read loop", (uint8_t *)&v14, 2u);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  atomic_store(1u, (unsigned __int8 *)(a1 + 145));
  pthread_cond_signal((pthread_cond_t *)(a1 + 96));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14.ident) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "AudioSkywalk read loop stopped", (uint8_t *)&v14, 2u);
  }
  return 0;
}

void sub_1004C5EB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t next_slot;
  uint64_t v6;
  _OWORD v7[4];

  v2 = *(_QWORD *)(a1 + 176);
  if (v2)
  {
    v3 = os_channel_ring_id(*(_QWORD *)(a1 + 176), 2);
    v4 = os_channel_rx_ring(v2, v3);
    memset(v7, 0, sizeof(v7));
    next_slot = os_channel_get_next_slot(v4, 0, v7);
    if (next_slot)
    {
      v6 = next_slot;
      if (*(_BYTE *)(a1 + 208))
      {
        if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_DEBUG))
          sub_1006F9578();
      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 152) + 16))();
      os_channel_get_next_slot(v4, v6, v7);
      os_channel_advance_slot(v4, v6);
    }
    os_channel_sync(*(_QWORD *)(a1 + 176), 1);
  }
  else if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_ERROR))
  {
    sub_1006F954C();
  }
}

uint64_t sub_1004C5FAC(uint64_t result)
{
  *(_QWORD *)(result + 216) = 0;
  return result;
}

uint64_t sub_1004C5FB4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v6;
  uint64_t *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  NSObject *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  _QWORD v23[2];

  v6 = (_QWORD *)sub_1004C57D8(a1, a3, a4);
  *v6 = off_100933238;
  v6[30] = 0;
  v7 = v6 + 30;
  v6[31] = 0;
  v6[32] = 0;
  v6[29] = *(_QWORD *)(a2 + 8);
  v8 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", a2 + 16);
  v9 = *(void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v8;

  v23[0] = 0;
  v23[1] = 0;
  objc_msgSend(*(id *)(a1 + 248), "getUUIDBytes:", v23);
  v22[0] = 0;
  v22[1] = 0;
  if (os_nexus_controller_alloc_provider_instance(*(_QWORD *)(a1 + 232), v23, v22))
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_ERROR))
      sub_1006F9618();
  }
  else
  {
    v10 = objc_alloc_init((Class)NSUUID);
    v11 = *(void **)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v10;

    v21[0] = 0;
    v21[1] = 0;
    objc_msgSend(*(id *)(a1 + 256), "getUUIDBytes:", v21);
    os_nexus_controller_bind_provider_instance(*(_QWORD *)(a1 + 232), v22, 1, 0, 0, v21, 16, 4);
    os_nexus_controller_bind_provider_instance(*(_QWORD *)(a1 + 232), v22, 0, 0, 0, v21, 16, 4);
    v12 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v22);
    v13 = *(void **)(a1 + 240);
    *(_QWORD *)(a1 + 240) = v12;

    v14 = *(NSObject **)(a1 + 16);
    v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (v15)
    {
      v16 = *v7;
      v19 = 138412290;
      v20 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Registering Audio skywalk server channel to %@", (uint8_t *)&v19, 0xCu);
    }
    v17 = os_channel_attr_create(v15);
    os_channel_attr_set(v17, 7, 1);
    os_channel_attr_set_key(v17, v21, 16);
    *(_QWORD *)(a1 + 176) = os_channel_create_extended(v22, 1, 0, 0xFFFFFFFFLL, v17);
    os_channel_attr_destroy(v17);
    if (!*(_QWORD *)(a1 + 176) && os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_ERROR))
      sub_1006F95EC();
  }
  return a1;
}

void sub_1004C61EC(_Unwind_Exception *a1)
{
  id *v1;

  sub_1004C5870((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C6238(uint64_t a1)
{
  _QWORD v3[2];

  *(_QWORD *)a1 = off_100933238;
  v3[0] = 0;
  v3[1] = 0;
  objc_msgSend(*(id *)(a1 + 240), "getUUIDBytes:", v3);
  os_nexus_controller_free_provider_instance(*(_QWORD *)(a1 + 232), v3);

  sub_1004C5870(a1);
  return a1;
}

void sub_1004C62D4(_Unwind_Exception *a1)
{
  id *v1;

  sub_1004C5870((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_1004C630C(uint64_t a1)
{
  sub_1004C6238(a1);
  operator delete();
}

id sub_1004C6330(uint64_t a1)
{
  return *(id *)(a1 + 240);
}

id sub_1004C6338(uint64_t a1)
{
  return *(id *)(a1 + 256);
}

void sub_1004C6340(uint64_t a1)
{
  if (qword_10097B498 != -1)
    dispatch_once(&qword_10097B498, &stru_100933290);
  sub_100411A6C(qword_10097B490, a1 + 48);
}

void sub_1004C6390(uint64_t a1)
{
  if (qword_10097B498 != -1)
    dispatch_once(&qword_10097B498, &stru_100933290);
  sub_100411BA0(qword_10097B490, a1 + 48);
}

uint64_t sub_1004C63E0(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(unsigned __int16 *))
{
  NSObject *v12;
  int v13;
  NSObject *v14;
  _BOOL8 v15;
  void (*v16)();
  uint64_t v17;
  void (*v18)(_QWORD *, unsigned __int16 *, uint64_t, uint64_t, uint64_t);
  _QWORD *v19;
  NSObject *v20;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;

  if (!a2)
  {
    v12 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR))
      sub_1006F96D0(v12);
  }
  v13 = *a2;
  v14 = qword_100999980;
  v15 = os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    v22 = 136315394;
    v23 = "TransportWrite";
    v24 = 1024;
    v25 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s: opCode 0x%04X", (uint8_t *)&v22, 0x12u);
  }
  v16 = sub_1004C656C(v15, v13);
  if (!(v17 & 1 | (unint64_t)v16))
  {
    v20 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR))
    {
      sub_1006F9644(v13, v20);
      if (!a6)
        return 1;
    }
    else if (!a6)
    {
      return 1;
    }
LABEL_13:
    a6(a2);
    return 1;
  }
  v18 = (void (*)(_QWORD *, unsigned __int16 *, uint64_t, uint64_t, uint64_t))v16;
  v19 = (_QWORD *)(a1 + (v17 >> 1));
  if ((v17 & 1) != 0)
    v18 = *(void (**)(_QWORD *, unsigned __int16 *, uint64_t, uint64_t, uint64_t))(*v19 + v18);
  v18(v19, a2, a3, a4, a5);
  if (a6)
    goto LABEL_13;
  return 1;
}

void (*sub_1004C656C(uint64_t a1, int a2))()
{
  void (*result)();
  void (*v3)();
  void (*v4)();
  void (*v5)();
  void (*v6)();
  void (*v7)();
  void (*v8)();
  void (*v9)();
  void (*v10)();
  void (*v11)();
  void (*v12)();

  result = sub_1004C6778;
  if (a2 > 8194)
  {
    if (a2 <= 8238)
    {
      v7 = sub_1004C7C44;
      if (a2 != 8220)
        v7 = sub_1004C6778;
      if (a2 == 8207)
        v8 = sub_1004C7AB4;
      else
        v8 = v7;
      v9 = sub_1004C7780;
      v10 = sub_1004C7924;
      if (a2 != 8199)
        v10 = sub_1004C6778;
      if (a2 != 8195)
        v9 = v10;
      if (a2 <= 8206)
        return v9;
      else
        return v8;
    }
    else
    {
      switch(a2)
      {
        case 8245:
          result = (void (*)())sub_1004C7F94;
          break;
        case 8246:
          result = (void (*)())sub_1004C805C;
          break;
        case 8247:
          result = (void (*)())sub_1004C8308;
          break;
        case 8248:
        case 8251:
        case 8252:
        case 8253:
        case 8254:
        case 8255:
        case 8256:
        case 8257:
          return result;
        case 8249:
          result = (void (*)())sub_1004C8468;
          break;
        case 8250:
          result = sub_1004C8590;
          break;
        case 8258:
          result = (void (*)())sub_1004C8720;
          break;
        default:
          v12 = sub_1004C87C8;
          if (a2 != 8288)
            v12 = sub_1004C6778;
          if (a2 == 8239)
            result = sub_1004C7DE0;
          else
            result = v12;
          break;
      }
    }
  }
  else if (a2 <= 3096)
  {
    v3 = sub_1004C6838;
    v4 = sub_1004C68A8;
    if (a2 != 3085)
      v4 = sub_1004C6778;
    if (a2 != 3075)
      v3 = v4;
    v5 = sub_1004C6784;
    v6 = (void (*)())sub_1004C67B4;
    if (a2 != 1029)
      v6 = sub_1004C6778;
    if (a2 != 1025)
      v5 = v6;
    if (a2 <= 3074)
      return v5;
    else
      return v3;
  }
  else
  {
    switch(a2)
    {
      case 4097:
        result = sub_1004C6BAC;
        break;
      case 4098:
        result = sub_1004C6D58;
        break;
      case 4099:
        result = sub_1004C6F04;
        break;
      case 4100:
        result = sub_1004C70AC;
        break;
      case 4101:
        result = sub_1004C7260;
        break;
      case 4102:
      case 4103:
      case 4104:
        return result;
      case 4105:
        result = sub_1004C7414;
        break;
      default:
        v11 = sub_1004C75E4;
        if (a2 != 8194)
          v11 = sub_1004C6778;
        if (a2 == 3097)
          result = sub_1004C6A30;
        else
          result = v11;
        break;
    }
  }
  return result;
}

void sub_1004C6778()
{
  sub_1004C897C();
}

void sub_1004C6784()
{
  sub_1004C8B0C();
}

void sub_1004C67B4(uint64_t a1, uint64_t a2)
{
  int v2;
  __int16 v3;

  v3 = 0;
  v2 = 0;
  if (a2)
  {
    sub_10004C878((uint64_t)&v2, a2 + 3, 6uLL);
    sub_1004C8B0C();
  }
  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualContr"
                         "oller/BTVirtualHciCommandChannel.mm");
}

void sub_1004C6838()
{
  if (qword_10097B498 != -1)
    dispatch_once(&qword_10097B498, &stru_100933290);
  sub_100411C4C((id *)qword_10097B490);
  sub_1004C897C();
}

void sub_1004C68A8()
{
  operator new();
}

void sub_1004C6A04()
{
  operator delete();
}

void sub_1004C6A30()
{
  operator new();
}

void sub_1004C6B80()
{
  operator delete();
}

void sub_1004C6BAC()
{
  operator new();
}

void sub_1004C6D2C()
{
  operator delete();
}

void sub_1004C6D58()
{
  operator new();
}

void sub_1004C6ED8()
{
  operator delete();
}

void sub_1004C6F04()
{
  operator new();
}

void sub_1004C7080()
{
  operator delete();
}

void sub_1004C70AC()
{
  operator new();
}

void sub_1004C7234()
{
  operator delete();
}

void sub_1004C7260()
{
  operator new();
}

void sub_1004C73E8()
{
  operator delete();
}

void sub_1004C7414()
{
  operator new();
}

void sub_1004C75B8()
{
  operator delete();
}

void sub_1004C75E4()
{
  operator new();
}

void sub_1004C7754()
{
  operator delete();
}

void sub_1004C7780()
{
  operator new();
}

void sub_1004C78F8()
{
  operator delete();
}

void sub_1004C7924()
{
  operator new();
}

void sub_1004C7A88()
{
  operator delete();
}

void sub_1004C7AB4()
{
  operator new();
}

void sub_1004C7C18()
{
  operator delete();
}

void sub_1004C7C44()
{
  operator new();
}

void sub_1004C7DB4()
{
  operator delete();
}

void sub_1004C7DE0()
{
  operator new();
}

void sub_1004C7F68()
{
  operator delete();
}

void sub_1004C7F94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int16 v4;

  v4 = 0;
  v3 = 0;
  if (a2)
  {
    v2 = *(unsigned __int8 *)(a2 + 3);
    sub_10004C878((uint64_t)&v3, a2 + 4, 6uLL);
    if (qword_10097B498 != -1)
      dispatch_once(&qword_10097B498, &stru_100933290);
    sub_100411D04((id *)qword_10097B490, v2, v3 | ((unint64_t)v4 << 32));
    sub_1004C897C();
  }
  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualContr"
                         "oller/BTVirtualHciCommandChannel.mm");
}

void sub_1004C805C(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  char v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned int v15;
  unsigned __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int16 v21;

  v21 = 0;
  v20 = 0;
  if (a2)
  {
    v3 = *(unsigned __int8 *)(a2 + 8);
    v4 = *(unsigned __int16 *)(a2 + 6);
    v5 = *(unsigned __int8 *)(a2 + 11);
    v6 = *(unsigned __int16 *)(a2 + 9);
    v18 = *(unsigned __int8 *)(a2 + 12);
    v19 = *(unsigned __int8 *)(a2 + 3);
    v16 = *(_WORD *)(a2 + 4);
    v17 = *(unsigned __int8 *)(a2 + 13);
    v15 = *(unsigned __int8 *)(a2 + 14);
    sub_10004C878((uint64_t)&v20, a2 + 15, 6uLL);
    v7 = v4 | (v3 << 16);
    v8 = v6 | (v5 << 16);
    v9 = *(_BYTE *)(a2 + 21);
    v10 = *(_BYTE *)(a2 + 22);
    v11 = *(_BYTE *)(a2 + 23);
    v12 = *(_BYTE *)(a2 + 24);
    v13 = *(_BYTE *)(a2 + 25);
    v14 = *(_BYTE *)(a2 + 26);
    if (qword_10097B498 != -1)
      dispatch_once(&qword_10097B498, &stru_100933290);
    sub_100411DEC((id *)qword_10097B490, v19, v16, v7, v8, v18, v17, v15, v20 | ((unint64_t)v21 << 32), v9, v10, v11, v12, v13, v14);
    operator new();
  }
  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualContr"
                         "oller/BTVirtualHciCommandChannel.mm");
}

void sub_1004C82DC()
{
  operator delete();
}

void sub_1004C8308(uint64_t a1, unsigned __int8 *a2)
{
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[16];

  if (a2)
  {
    memset(v6, 0, 251);
    v2 = a2[6];
    if (v2 <= 0xFB)
    {
      if ((_DWORD)v2 == 251)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/Virtua"
                               "lController/BTVirtualHciCommandChannel.mm");
      v3 = a2[3];
      v4 = a2[4];
      v5 = a2[5];
      memcpy(v6, a2 + 7, v2);
      if (qword_10097B498 != -1)
        dispatch_once(&qword_10097B498, &stru_100933290);
      sub_1004120DC((id *)qword_10097B490, v3, v4, v5, v2, (uint64_t)v6);
    }
    sub_1004C897C();
  }
  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualContr"
                         "oller/BTVirtualHciCommandChannel.mm");
}

void sub_1004C8468(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  size_t v4;
  int v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int __dst;
  __int16 v10;

  if (!a2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualCon"
                           "troller/BTVirtualHciCommandChannel.mm");
  v10 = 0;
  __dst = 0;
  v7 = 0;
  v8 = 0;
  v5 = 0;
  v6 = 0;
  v3 = a2[3];
  v4 = a2[4];
  if (a2[4])
  {
    if (v4 > 6)
      goto LABEL_8;
    memcpy(&__dst, a2 + 5, v4);
    memcpy(&v7, &a2[v4 + 5], v4);
    memcpy(&v5, &a2[(v4 + 5 + v4)], v4);
  }
  if (qword_10097B498 != -1)
    dispatch_once(&qword_10097B498, &stru_100933290);
  sub_1004121E4((id *)qword_10097B490, v3, v4, (unsigned __int8 *)&__dst);
LABEL_8:
  sub_1004C897C();
}

void sub_1004C8590()
{
  operator new();
}

void sub_1004C86F4()
{
  operator delete();
}

void sub_1004C8720(uint64_t a1, uint64_t a2)
{
  if (a2)
    sub_1004C897C();
  sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualContr"
                         "oller/BTVirtualHciCommandChannel.mm");
}

void sub_1004C87C8()
{
  operator new();
}

void sub_1004C8950()
{
  operator delete();
}

void sub_1004C897C()
{
  operator new();
}

void sub_1004C8AE0()
{
  operator delete();
}

void sub_1004C8B0C()
{
  operator new();
}

void sub_1004C8C70()
{
  operator delete();
}

void sub_1004C8C9C()
{
  operator new();
}

void sub_1004C8DD4()
{
  operator delete();
}

void sub_1004C8E00()
{
  operator new();
}

void sub_1004C8F78()
{
  operator delete();
}

uint64_t *sub_1004C8FA4(uint64_t *result, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*((_BYTE *)result + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/include/BTVirtualHciPacket.h", 30, "void BT::BTVirtualHCIPacket::PutUINT8(uint8_t)");
    goto LABEL_6;
  }
  v2 = *((unsigned __int16 *)result + 6);
  if (*((unsigned __int16 *)result + 5) <= v2 || *((_BYTE *)result + 14) != 2)
LABEL_6:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualCon"
                           "troller/include/BTVirtualHciPacket.h");
  v3 = *result;
  *((_WORD *)result + 6) = v2 + 1;
  *(_BYTE *)(v3 + v2) = a2;
  return result;
}

uint64_t sub_1004C902C(uint64_t result, __int16 a2)
{
  uint64_t v2;

  if (*(_BYTE *)(result + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/include/BTVirtualHciPacket.h", 31, "void BT::BTVirtualHCIPacket::PutUINT16(uint16_t)");
    goto LABEL_6;
  }
  v2 = *(unsigned __int16 *)(result + 12);
  if (*(unsigned __int16 *)(result + 10) - (int)v2 <= 1 || *(_BYTE *)(result + 14) != 2)
LABEL_6:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualCon"
                           "troller/include/BTVirtualHciPacket.h");
  *(_BYTE *)(*(_QWORD *)result + v2) = a2;
  *(_BYTE *)(*(_QWORD *)result + *(unsigned __int16 *)(result + 12) + 1) = HIBYTE(a2);
  *(_WORD *)(result + 12) += 2;
  return result;
}

void *sub_1004C90D0(uint64_t *a1, const void *a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  void *result;

  v6 = *a1;
  v7 = *((unsigned __int16 *)a1 + 6);
  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/include/BTVirtualHciPacket.h", 34, "void BT::BTVirtualHCIPacket::PutBytes(uint8_t *, uint32_t)");
    v8 = 0;
  }
  else
  {
    v8 = *((unsigned __int16 *)a1 + 5) - v7;
  }
  if (v8 < a3 || *((_BYTE *)a1 + 14) != 2)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualCon"
                           "troller/include/BTVirtualHciPacket.h");
  result = memmove((void *)(v6 + v7), a2, a3);
  *((_WORD *)a1 + 6) += a3;
  return result;
}

uint64_t sub_1004C9198(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  __int16 v6;

  v5 = a2;
  v6 = WORD2(a2);
  if (*(_BYTE *)(a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/include/BTVirtualHciPacket.h", 33, "void BT::BTVirtualHCIPacket::PutBDADDR(OI_BD_ADDR)");
    goto LABEL_6;
  }
  v3 = *(unsigned __int16 *)(a1 + 12);
  if (*(unsigned __int16 *)(a1 + 10) - (int)v3 <= 5 || *(_BYTE *)(a1 + 14) != 2)
LABEL_6:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualCon"
                           "troller/include/BTVirtualHciPacket.h");
  result = sub_10004C878(*(_QWORD *)a1 + v3, (uint64_t)&v5, 6uLL);
  *(_WORD *)(a1 + 12) += 6;
  return result;
}

void sub_1004C9254()
{
  operator new();
}

void sub_1004C947C()
{
  operator delete();
}

void sub_1004C94A8()
{
  sub_1004C9254();
}

void sub_1004C94E4(id *a1)
{
  sub_10034CAF8(a1);
  operator delete();
}

void sub_1004C9508(id a1)
{
  operator new();
}

void sub_1004C9548()
{
  operator delete();
}

void sub_1004C956C(id a1)
{
  operator new();
}

void sub_1004C95AC()
{
  operator delete();
}

uint64_t sub_1004C95D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = off_100932248;
  sub_1000160D0(a1 + 8);
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = a4;
  *(_QWORD *)a1 = off_1009332E0;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = 0;
  sub_1000160D0(a1 + 96);
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a3;
  *(_QWORD *)(a1 + 88) = sub_100475BE0();
  return a1;
}

void sub_1004C9658(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100069BDC(v3);
  *v1 = v4;
  sub_100069BDC(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C9684(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100933340);
  WORD2(v11) = WORD2(a3);
  LODWORD(v11) = a3;
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v11, 1);
  if (!a2)
  {
    v9 = v8;
    if (v8)
    {
      v12 = 0;
      sub_10004AD30((uint64_t)&v12);
      *(_QWORD *)&v11 = (int)v12;
      *((_QWORD *)&v11 + 1) = SWORD2(v12);
      sub_10044054C(v9, a4, &v11);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v9);
    }
  }
  return sub_1004AE2A4(a1, 0);
}

void sub_1004C9758(uint64_t a1)
{
  int v2;
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 8);
  v2 = *(unsigned __int8 *)(a1 + 72);
  sub_100034234((uint64_t)v3);
  if (v2)
  {
    sub_100253460();
  }
  else
  {
    sub_1004ADDA0(a1);
    sub_1004C97B4(a1);
  }
}

uint64_t sub_1004C97B4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  _QWORD v6[2];
  uint8_t buf[4];
  int v8;

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 96);
  v2 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(a1 + 160);
    *(_DWORD *)buf = 67109120;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Stepping scan with mode %u", buf, 8u);
  }
  if (*(_DWORD *)(a1 + 160))
  {
    v4 = 114;
LABEL_6:
    *(_DWORD *)(a1 + 160) = 128;
    sub_100034264((uint64_t)v6);
    sub_1004AE2A4(a1, v4);
    return sub_100034234((uint64_t)v6);
  }
  *(_DWORD *)(a1 + 160) = 4;
  buf[0] = 0;
  sub_100043758(buf);
  v4 = sub_100181EEC((uint64_t)sub_1004C9A4C, *(_QWORD *)(a1 + 168) + 128, 4, a1);
  sub_100043728(buf);
  if ((_DWORD)v4)
    goto LABEL_6;
  return sub_100034234((uint64_t)v6);
}

void sub_1004C98DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100043728(&a11);
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C990C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  uint8_t buf[4];
  int v16;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 96);
  v2 = qword_100999800;
  if (os_log_type_enabled((os_log_t)qword_100999800, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 160);
    *(_DWORD *)buf = 67109120;
    v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopping scan with mode %u", buf, 8u);
  }
  v4 = *(_DWORD *)(a1 + 160);
  if (v4 == 4)
  {
    v5 = *(_QWORD *)(a1 + 168);
    *(_DWORD *)(a1 + 160) = 128;
    sub_100034264((uint64_t)v14);
    buf[0] = 0;
    sub_100043758(buf);
    sub_100181FA0(v5 + 128, v6, v7, v8, v9, v10, v11, v12);
    sub_10004339C(buf);
    sub_100043728(buf);
  }
  else if (!v4)
  {
    *(_DWORD *)(a1 + 160) = 128;
  }
  return sub_100034234((uint64_t)v14);
}

void sub_1004C9A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004C9A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
    operator new();
}

void sub_1004C9ADC()
{
  operator delete();
}

uint64_t sub_1004C9B00(uint64_t a1, uint64_t a2, int a3, int *a4, std::string::value_type *__s)
{
  int v6;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_100933318;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if (a4)
  {
    v6 = *a4;
    *(_WORD *)(a1 + 32) = *((_WORD *)a4 + 2);
    *(_DWORD *)(a1 + 28) = v6;
  }
  if (__s)
    std::string::assign((std::string *)(a1 + 40), __s);
  return a1;
}

void sub_1004C9B74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1004C9B90(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  void *__p[2];
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(unsigned int *)(a1 + 28) | ((unint64_t)*(unsigned __int16 *)(a1 + 32) << 32);
  if (*(char *)(a1 + 63) < 0)
  {
    sub_10003430C(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 56);
  }
  sub_1004C9684(v1, v2, v3 & 0xFFFFFFFFFFFFLL, (uint64_t)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_1004C9C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004C9C34(uint64_t a1)
{
  *(_QWORD *)a1 = &off_100933318;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

void sub_1004C9C70(uint64_t a1)
{
  *(_QWORD *)a1 = &off_100933318;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  operator delete();
}

_QWORD *sub_1004C9CBC(_QWORD *a1)
{
  *a1 = off_1009332E0;
  sub_100069BDC(a1 + 12);
  *a1 = off_100932248;
  sub_100069BDC(a1 + 1);
  return a1;
}

void sub_1004C9D00(_QWORD *a1)
{
  *a1 = off_1009332E0;
  sub_100069BDC(a1 + 12);
  *a1 = off_100932248;
  sub_100069BDC(a1 + 1);
  operator delete();
}

BOOL sub_1004C9D54(uint64_t a1, _BYTE *a2)
{
  return sub_10006BB10(*(_QWORD *)(a1 + 88), a2);
}

void sub_1004C9D5C(id a1)
{
  operator new();
}

void sub_1004C9D9C()
{
  operator delete();
}

uint64_t sub_1004C9DC4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 8);
  v10 = *(_QWORD **)(a1 + 80);
  v11 = (_QWORD *)(a1 + 88);
  if (v10 != (_QWORD *)(a1 + 88))
  {
    v12 = a5;
    do
    {
      v13 = v10[4];
      if (v13)
      {
        if (*(_BYTE *)(*(_QWORD *)(v13 + 32) + 160))
        {
          v14 = xpc_dictionary_create(0, 0, 0);
          v15 = v14;
          if (v14)
          {
            xpc_dictionary_set_uint64(v14, "kCBMsgArgID", *(_QWORD *)(v13 + 16));
            xpc_dictionary_set_uint64(v15, "kCBMsgArgDiscoveryAgentID", a2);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgStatus", a3);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgBTDevice", a4);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgResult", v12);
            sub_1002C5EC8(*(_QWORD *)(v13 + 32), "kCBMsgIdDiscoveryAgentStatusEvent", v15, 1);
          }
        }
      }
      v16 = (_QWORD *)v10[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v10[2];
          v18 = *v17 == (_QWORD)v10;
          v10 = v17;
        }
        while (!v18);
      }
      v10 = v17;
    }
    while (v17 != v11);
  }
  return sub_100034234((uint64_t)v20);
}

void sub_1004C9F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C9F44(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 8);
  v10 = *(_QWORD **)(a1 + 80);
  v11 = (_QWORD *)(a1 + 88);
  if (v10 != (_QWORD *)(a1 + 88))
  {
    v12 = a5;
    do
    {
      v13 = v10[4];
      if (v13)
      {
        if (*(_BYTE *)(*(_QWORD *)(v13 + 32) + 160))
        {
          v14 = xpc_dictionary_create(0, 0, 0);
          v15 = v14;
          if (v14)
          {
            xpc_dictionary_set_uint64(v14, "kCBMsgArgID", *(_QWORD *)(v13 + 16));
            xpc_dictionary_set_uint64(v15, "kCBMsgArgDiscoveryAgentID", a2);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgEvent", a3);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgBTDevice", a4);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgAttributes", v12);
            sub_1002C5EC8(*(_QWORD *)(v13 + 32), "kCBMsgIdDiscoveryAgentDiscoveryEvent", v15, 1);
          }
        }
      }
      v16 = (_QWORD *)v10[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v10[2];
          v18 = *v17 == (_QWORD)v10;
          v10 = v17;
        }
        while (!v18);
      }
      v10 = v17;
    }
    while (v17 != v11);
  }
  return sub_100034234((uint64_t)v20);
}

void sub_1004CA0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CA0C4(uint64_t result, unsigned int a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a5)
    return sub_1004C9DC4(a5, result, a2, a3, a4);
  return result;
}

uint64_t sub_1004CA0E8(uint64_t result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (a5)
    return sub_1004C9F44(a5, result, a2, a3, a4);
  return result;
}

void sub_1004CA10C(id a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  uint64_t v10;
  const char **v11;

  v9 = "kCBMsgIdDiscoveryAgentCreateMsg";
  v10 = 31;
  v11 = &v9;
  v1 = sub_1004CAEE8((uint64_t)&xmmword_100999738, (uint64_t)&v9, (uint64_t)&unk_100740F58, (_OWORD **)&v11);
  v1[4] = sub_1004CA308;
  v1[5] = 0;
  v9 = "kCBMsgIdDiscoveryAgentDestroyMsg";
  v10 = 32;
  v11 = &v9;
  v2 = sub_1004CAEE8((uint64_t)&xmmword_100999738, (uint64_t)&v9, (uint64_t)&unk_100740F58, (_OWORD **)&v11);
  v2[4] = sub_1004CA520;
  v2[5] = 0;
  v9 = "kCBMsgIdDiscoveryAgentStartScanMsg";
  v10 = 34;
  v11 = &v9;
  v3 = sub_1004CAEE8((uint64_t)&xmmword_100999738, (uint64_t)&v9, (uint64_t)&unk_100740F58, (_OWORD **)&v11);
  v3[4] = sub_1004CA748;
  v3[5] = 0;
  v9 = "kCBMsgIdDiscoveryAgentStartScanForAdvertizedDataMsg";
  v10 = 51;
  v11 = &v9;
  v4 = sub_1004CAEE8((uint64_t)&xmmword_100999738, (uint64_t)&v9, (uint64_t)&unk_100740F58, (_OWORD **)&v11);
  v4[4] = sub_1004CA8B8;
  v4[5] = 0;
  v9 = "kCBMsgIdDiscoveryAgentStopScanMsg";
  v10 = 33;
  v11 = &v9;
  v5 = sub_1004CAEE8((uint64_t)&xmmword_100999738, (uint64_t)&v9, (uint64_t)&unk_100740F58, (_OWORD **)&v11);
  v5[4] = sub_1004CA97C;
  v5[5] = 0;
  v9 = "kCBMsgIdDiscoveryAgentGetDevicesMsg";
  v10 = 35;
  v11 = &v9;
  v6 = sub_1004CAEE8((uint64_t)&xmmword_100999738, (uint64_t)&v9, (uint64_t)&unk_100740F58, (_OWORD **)&v11);
  v6[4] = sub_1004CAA40;
  v6[5] = 0;
  v9 = "kCBMsgIdDiscoveryAgentAddKeyMsg";
  v10 = 31;
  v11 = &v9;
  v7 = sub_1004CAEE8((uint64_t)&xmmword_100999738, (uint64_t)&v9, (uint64_t)&unk_100740F58, (_OWORD **)&v11);
  v7[4] = sub_1004CAC1C;
  v7[5] = 0;
  v9 = "kCBMsgIdDiscoveryAgentRemoveKeyMsg";
  v10 = 34;
  v11 = &v9;
  v8 = sub_1004CAEE8((uint64_t)&xmmword_100999738, (uint64_t)&v9, (uint64_t)&unk_100740F58, (_OWORD **)&v11);
  v8[4] = sub_1004CAD18;
  v8[5] = 0;
}

uint64_t sub_1004CA308(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  int v8;
  au_asid_t asid;
  uint64_t *v10;
  xpc_object_t reply;
  void *v12;
  uint64_t *v14;
  _QWORD v15[2];
  uint64_t value;

  value = 0;
  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgSessionID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006F9750();
  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 8);
  if (uint64)
  {
    v7 = *(_QWORD *)(a1 + 72);
    v8 = *(_DWORD *)(v7 + 40);
    asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_1009333B0);
    if (sub_10050AE70(qword_100977B48, uint64, v8, asid))
    {
      v10 = (uint64_t *)malloc_type_calloc(1uLL, 0x28uLL, 0x10A0040DFBAE579uLL);
      v14 = v10;
      v10[1] = (uint64_t)sub_1004CA0E8;
      v10[2] = v6;
      *v10 = (uint64_t)sub_1004CA0C4;
      v10[4] = *(_QWORD *)(a1 + 72);
      LODWORD(uint64) = sub_1004ABDB8(uint64, v10, a1, &value);
      if ((_DWORD)uint64)
      {
        free(v10);
      }
      else
      {
        v10[3] = value;
        sub_10000F7A0((uint64_t **)(a1 + 80), (unint64_t *)&v14, (uint64_t *)&v14);
      }
      uint64 = (int)uint64;
    }
    else
    {
      uint64 = 7;
    }
  }
  else
  {
    uint64 = 1;
  }
  reply = xpc_dictionary_create_reply(xdict);
  v12 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgDiscoveryAgentID", value);
    xpc_dictionary_set_uint64(v12, "kCBMsgArgResult", uint64);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
  return sub_100034234((uint64_t)v15);
}

void sub_1004CA504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CA520(_QWORD *a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  xpc_object_t reply;
  void *v20;
  void *v22;
  uint64_t v23;
  _QWORD v24[2];
  uint8_t buf[4];
  uint64_t v26;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryAgentID");
  v6 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006F97B0(uint64, v6, v7, v8, v9, v10, v11, v12);
  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, (uint64_t)(a1 + 1));
  if (!uint64 || (v23 = uint64, v13 = (_QWORD *)a1[10], v13 == a1 + 11))
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v22 = (void *)v13[4];
      if (v23 == *((_QWORD *)v22 + 3))
      {
        v14 = sub_1004ABEA8(&v23);
        if (v14)
        {
          v15 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134217984;
            v26 = uint64;
            _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Could not destroy discovery agent %llx", buf, 0xCu);
          }
        }
        else
        {
          sub_100015ECC((uint64_t)(a1 + 10), (unint64_t *)&v22);
          free(v22);
          v14 = 0;
        }
      }
      v16 = (_QWORD *)v13[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v13[2];
          v18 = *v17 == (_QWORD)v13;
          v13 = v17;
        }
        while (!v18);
      }
      v13 = v17;
    }
    while (v17 != a1 + 11);
  }
  reply = xpc_dictionary_create_reply(xdict);
  v20 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v14);
    xpc_connection_send_message(*(xpc_connection_t *)(a1[9] + 16), v20);
    xpc_release(v20);
  }
  return sub_100034234((uint64_t)v24);
}

void sub_1004CA728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

void sub_1004CA748(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryAgentID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryMode");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgServices");
  v8 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    v12 = 134218496;
    v13 = uint64;
    v14 = 2048;
    v15 = v6;
    v16 = 2048;
    v17 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BTDiscoveryMsgHandler::handleBTDiscoveryAgentStartScanMsg discvoveryAgentID:%llx mode:%llx services:%llx", (uint8_t *)&v12, 0x20u);
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v9 = (int)sub_1004ABF04(uint64, v6, v7);
    goto LABEL_6;
  }
  v9 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1004CA8B8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryAgentID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006F9818();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_1004AC184(uint64);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1004CA97C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryAgentID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006F9878();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_1004AC2EC(uint64);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1004CAA40(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  size_t v9;
  int v10;
  xpc_object_t reply;
  void *v12;
  xpc_object_t v13;
  uint64_t i;
  uint64_t v15;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryAgentID");
  v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  v15 = 0;
  __chkstk_darwin(v6, 8 * v6);
  v8 = (uint64_t *)((char *)&v15 - v7);
  bzero((char *)&v15 - v7, v9);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006F98D8();
  v10 = 1;
  if (uint64 && v6 <= 0x100)
    v10 = sub_1004AC44C(uint64, v8, &v15, v6);
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_dictionary_set_uint64(v12, "kCbMsgArgDeviceArrayMaxSize", v15);
    v13 = xpc_array_create(0, 0);
    if (!v10 && v15)
    {
      for (i = 0; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, v8[i]);
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_1004CAC1C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  const void *data;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  size_t length;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryAgentID");
  length = 0;
  data = xpc_dictionary_get_data(value, "kCBMsgArgKey", &length);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006F9938();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1004AC638(uint64, data, length);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1004CAD18(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  const void *data;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  size_t length;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoveryAgentID");
  length = 0;
  data = xpc_dictionary_get_data(value, "kCBMsgArgKey", &length);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006F9998();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1004AC71C(uint64, data, length);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1004CAE18(_QWORD *a1)
{
  sub_1003BEE80(a1);
  operator delete();
}

uint64_t sub_1004CAE3C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, (uint64_t)(a1 + 1));
  v2 = (_QWORD *)a1[10];
  v3 = a1 + 11;
  if (v2 != a1 + 11)
  {
    do
    {
      free((void *)v2[4]);
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  sub_10001A82C((uint64_t)(a1 + 10), (_QWORD *)a1[11]);
  a1[11] = 0;
  a1[12] = 0;
  a1[10] = v3;
  return sub_100034234((uint64_t)v8);
}

void *sub_1004CAEE8(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  uint64_t *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v29;

  v7 = sub_10039B518((uint64_t)&v29, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v17 = a2;
        v15 = *(uint64_t **)a2;
        v16 = *(_QWORD *)(v17 + 8);
        do
        {
          v18 = *((_QWORD *)v14 + 1);
          if (v18 == v8)
          {
            if (*((_QWORD *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16))
              return v14;
          }
          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9)
                v18 %= v9;
            }
            else
            {
              v18 &= v9 - 1;
            }
            if (v18 != v12)
              break;
          }
          v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((_QWORD *)v14 + 4) = 0;
  *((_QWORD *)v14 + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_1000B678C(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v26)
  {
    *(_QWORD *)v14 = *v26;
LABEL_40:
    *v26 = v14;
    goto LABEL_41;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v25 + 8 * v12) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1004CB13C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1004CB150(id a1)
{
  operator new();
}

void sub_1004CB190()
{
  operator delete();
}

void sub_1004CB1B4()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  xmmword_100999738 = 0u;
  unk_100999748 = 0u;
  dword_100999758 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_1004C9DC0, &xmmword_100999738, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1004CB204(uint64_t a1)
{
  *(_QWORD *)sub_10048D2F0(a1, "GamingService", 2048) = &off_1009333E0;
  if (qword_10097B4A8 != -1)
    dispatch_once(&qword_10097B4A8, &stru_1009334D8);
  sub_10048D5B0(a1, (uint64_t)off_10097B4A0);
  return a1;
}

void sub_1004CB278(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048D3E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CB294()
{
  if (qword_10097B4A8 != -1)
    dispatch_once(&qword_10097B4A8, &stru_1009334D8);
  return sub_1004CB824((uint64_t)off_10097B4A0);
}

uint64_t sub_1004CB2D4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BOOL4 v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v11 = xmmword_100741310;
  result = sub_100444790(a2);
  if ((_DWORD)result)
  {
    v5 = sub_100442444(a2, &v11, 4u);
    v6 = *(_DWORD *)(a1 + 32);
    v12 = 0;
    if (v5)
    {
      sub_10004AD30((uint64_t)&v12);
      *(_QWORD *)&v10 = (int)v12;
      *((_QWORD *)&v10 + 1) = SWORD2(v12);
      v7 = a2;
      v8 = v6;
      v9 = 4;
    }
    else
    {
      sub_10004AD30((uint64_t)&v12);
      *(_QWORD *)&v10 = (int)v12;
      *((_QWORD *)&v10 + 1) = SWORD2(v12);
      v7 = a2;
      v8 = v6;
      v9 = 1;
    }
    return sub_1004415B0(v7, v8, v9, &v10, 0);
  }
  return result;
}

uint64_t sub_1004CB38C(uint64_t a1)
{
  uint64_t v1;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
  {
    v1 = sub_10034D3CC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1 + 120))(v1, 120, 10);
  }
  return 1;
}

void sub_1004CB3CC(uint64_t a1)
{
  sub_10048D3E0(a1);
  operator delete();
}

uint64_t sub_1004CB3F0()
{
  return 0;
}

void sub_1004CB3F8(uint64_t a1, uint64_t a2, _WORD *a3)
{
  *a3 = 0;
}

void sub_1004CB400(id a1)
{
  operator new();
}

void sub_1004CB440()
{
  operator delete();
}

uint64_t sub_1004CB464(uint64_t a1)
{
  uint64_t result;

  result = sub_100278350(a1, 18);
  *(_QWORD *)result = off_100933508;
  *(_QWORD *)(result + 288) = 0;
  *(_DWORD *)(result + 276) = 0;
  *(_QWORD *)(result + 252) = 0;
  *(_QWORD *)(result + 260) = 0;
  *(_QWORD *)(result + 268) = 0;
  return result;
}

uint64_t sub_1004CB49C(_QWORD *a1)
{
  *a1 = off_100933508;
  sub_10009F88C((uint64_t)(a1 + 33));
  return sub_100278464((uint64_t)a1);
}

void sub_1004CB4D0(_QWORD *a1)
{
  *a1 = off_100933508;
  sub_10009F88C((uint64_t)(a1 + 33));
  sub_100278464((uint64_t)a1);
  operator delete();
}

uint64_t sub_1004CB518(uint64_t a1)
{
  *(_DWORD *)(a1 + 280) = 0;
  return 0;
}

uint64_t sub_1004CB524(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_DWORD *)(a1 + 252) = 0;
  v3 = 0;
  sub_100043758(&v3);
  if (sub_10016B510((uint64_t)sub_1004CB5E0, (uint64_t)sub_1004CB648, (uint64_t)&off_100933560, (uint64_t)sub_1004CB69C, (uint64_t)&off_100933570, 0, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_1006F99F8();
    v1 = 1;
  }
  else
  {
    v1 = 0;
  }
  sub_100043728(&v3);
  return v1;
}

void sub_1004CB5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CB5E0(unsigned int a1, int *a2, int a3)
{
  if (qword_10097B4A8 != -1)
    dispatch_once(&qword_10097B4A8, &stru_1009335F8);
  return sub_1004CBF2C(off_10097B4A0, a2, a1, a3);
}

void sub_1004CB648(unsigned int a1)
{
  if (sub_100169190(a1, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_1006F9A24();
  }
}

void sub_1004CB69C(unsigned int a1)
{
  if (sub_1001691D8(a1, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_1006F9A84();
  }
}

uint64_t sub_1004CB6F0(uint64_t a1)
{
  int v2;
  void *v3;
  uint64_t v4;
  char v6;

  v6 = 0;
  sub_100043758(&v6);
  v2 = *(_DWORD *)(a1 + 252);
  if (v2)
  {
    sub_1002467B8(v2);
    *(_DWORD *)(a1 + 252) = 0;
  }
  v3 = *(void **)(a1 + 256);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 256) = 0;
  }
  if (sub_100169110(2))
  {
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_1006F9AE4();
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  sub_100043728(&v6);
  return v4;
}

void sub_1004CB78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CB7A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;

  v2 = *(_QWORD *)(a1 + 264);
  if (v2)
  {
    v3 = a1 + 264;
    sub_10034B960(v2);
    v8 = 0uLL;
    sub_100274874(v3, &v8);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
    if (*((_QWORD *)&v8 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return 0;
}

uint64_t sub_1004CB824(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  int v4;
  char *v5;
  void *v6;
  uint64_t *v7;
  int v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100933618);
  v19 = 0u;
  v20 = 0u;
  v2 = sub_100477FC0((uint64_t)off_100977890);
  v16 = (uint64_t)&v16;
  v17 = &v16;
  v18 = 0;
  v15 = 0;
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100933618);
  sub_100478004((uint64_t)off_100977890, &v16);
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100933618);
  sub_100478070((uint64_t)off_100977890, &v15);
  if (*(_DWORD *)(a1 + 80) == 1)
  {
    v14 = 0;
    sub_100043758(&v14);
    v3 = *(void **)(a1 + 256);
    if (v3)
    {
      free(v3);
      *(_QWORD *)(a1 + 256) = 0;
    }
    v4 = *(_DWORD *)(a1 + 252);
    if (v4)
    {
      sub_1002467B8(v4);
      *(_DWORD *)(a1 + 252) = 0;
    }
    if (v2)
    {
      v5 = (char *)malloc_type_calloc(2 * v2 + 6, 0x18uLL, 0x10F20406C095635uLL);
      v6 = v5;
      if (!v5)
      {
        if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
          sub_1006F9B10();
        goto LABEL_26;
      }
      *(_WORD *)v5 = 1;
      v5[8] = 6;
      *((_WORD *)v5 + 5) = 1;
      *((_QWORD *)v5 + 2) = &unk_100741CC0;
      *((_WORD *)v5 + 12) = 4;
      v5[32] = 6;
      *((_WORD *)v5 + 17) = 2;
      *((_QWORD *)v5 + 5) = &unk_100933580;
      *((_WORD *)v5 + 24) = 9;
      v5[56] = 6;
      *((_WORD *)v5 + 29) = 1;
      *((_QWORD *)v5 + 8) = &unk_1009335A0;
      *((_WORD *)v5 + 36) = 778;
      v5[80] = 1;
      *((_WORD *)v5 + 41) = 4;
      *((_DWORD *)v5 + 22) = 0;
      *((_WORD *)v5 + 48) = -4096;
      v5[104] = 1;
      *((_WORD *)v5 + 53) = 1;
      *((_DWORD *)v5 + 28) = v15;
      *((_WORD *)v5 + 60) = 512;
      v5[128] = 1;
      *((_WORD *)v5 + 65) = 4;
      *((_DWORD *)v5 + 34) = v2;
      v7 = v17;
      if (v17 != &v16)
      {
        v8 = 0;
        do
        {
          v9 = (_QWORD *)v7[2];
          v10 = &v5[24 * (v8 + 6)];
          *(_WORD *)v10 = v8 + 513;
          v10[8] = 4;
          *((_WORD *)v10 + 5) = v9[2];
          *((_QWORD *)v10 + 2) = v9[1];
          v11 = &v5[24 * (v8 + 7)];
          *(_WORD *)v11 = v8 + 514;
          v11[8] = 4;
          *((_WORD *)v11 + 5) = v9[4];
          *((_QWORD *)v11 + 2) = v9[3];
          v7 = (uint64_t *)v7[1];
          v8 += 2;
        }
        while (v7 != &v16);
      }
      *(_QWORD *)&v19 = v5;
      WORD4(v19) = 2 * v2 + 6;
      *(_QWORD *)&v20 = &unk_1009335B0;
      WORD4(v20) = 1;
      if (sub_1002465CC((uint64_t)&v19, (int *)(a1 + 252)))
      {
        if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
          sub_1006F9B3C();
        free(v6);
LABEL_26:
        v12 = 1;
        goto LABEL_27;
      }
    }
    else
    {
      v6 = 0;
    }
    v12 = 0;
    *(_QWORD *)(a1 + 256) = v6;
    *(_QWORD *)(a1 + 288) = v2;
LABEL_27:
    sub_100043728(&v14);
    goto LABEL_28;
  }
  v12 = 105;
LABEL_28:
  sub_10002074C(&v16);
  return v12;
}

void sub_1004CBB48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10002074C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CBB70(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  v5 = 0;
  sub_100043758(&v5);
  v3 = sub_100168F60(2, 2, a2 + 128, 0x100Fu, (uint64_t)sub_1004CBC40, (uint64_t (*)(uint64_t (*)(int *, unsigned int)))sub_1004CBD04, (void (*)(void))sub_1004CBD54, (uint64_t)sub_1004CBD94, (uint64_t)sub_1004CBE04, (uint64_t)sub_1004CBE54);
  if ((_DWORD)v3)
  {
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_1006F9B9C();
    v3 = 305;
  }
  sub_100043728(&v5);
  return v3;
}

void sub_1004CBC2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100043728((_BYTE *)(v1 - 17));
  _Unwind_Resume(a1);
}

void sub_1004CBC40(__int16 a1, int *a2, uint64_t a3)
{
  unint64_t v6;
  int v7;
  __int16 v8;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100933638);
  v7 = *a2;
  v8 = *((_WORD *)a2 + 2);
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v7, 1);
  if (qword_10097B4A8 != -1)
    dispatch_once(&qword_10097B4A8, &stru_1009335F8);
  sub_1004CC064((uint64_t)off_10097B4A0, v6, a1, a3);
}

uint64_t sub_1004CBD04(uint64_t a1)
{
  if (qword_10097B4A8 != -1)
    dispatch_once(&qword_10097B4A8, &stru_1009335F8);
  return sub_1004CC16C((uint64_t)off_10097B4A0, a1);
}

uint64_t sub_1004CBD54()
{
  if (qword_10097B4A8 != -1)
    dispatch_once(&qword_10097B4A8, &stru_1009335F8);
  return sub_1004CC298((uint64_t)off_10097B4A0);
}

uint64_t sub_1004CBD94(const void *a1, unsigned int a2)
{
  uint64_t v4;

  if (qword_10097B4A8 != -1)
    dispatch_once(&qword_10097B4A8, &stru_1009335F8);
  v4 = *((_QWORD *)off_10097B4A0 + 33);
  if (v4)
    return sub_10034BCCC(v4, a1, a2);
  else
    return 3404;
}

pthread_cond_t *sub_1004CBE04()
{
  pthread_cond_t *result;

  if (qword_10097B4A8 != -1)
    dispatch_once(&qword_10097B4A8, &stru_1009335F8);
  result = (pthread_cond_t *)*((_QWORD *)off_10097B4A0 + 33);
  if (result)
    return (pthread_cond_t *)sub_10034BC5C(result);
  return result;
}

uint64_t sub_1004CBE54(int a1)
{
  void *v2;
  uint64_t v3;

  if (qword_10097B4A8 != -1)
    dispatch_once(&qword_10097B4A8, &stru_1009335F8);
  v2 = off_10097B4A0;
  v3 = sub_1004822D0(off_10097B4A0, a1);
  return sub_10048257C((uint64_t)v2, v3, 0);
}

BOOL sub_1004CBEC8(_QWORD *a1, unint64_t a2)
{
  unsigned int v2;
  _BOOL8 v3;
  char v5;

  v2 = sub_1004821D4(a1, a2);
  v5 = 0;
  sub_100043758(&v5);
  v3 = sub_10016910C(v2) != 0;
  sub_100043728(&v5);
  return v3;
}

void sub_1004CBF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CBF2C(_QWORD *a1, int *a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  __int16 v12;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100933638);
  v11 = *a2;
  v12 = *((_WORD *)a2 + 2);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v11, 1);
  if (a1[36])
  {
    v9 = v8;
    if (sub_100481EC8((uint64_t)a1, v8))
      sub_1004816DC(a1, v9);
  }
  result = sub_100168E98(a3, a4, (uint64_t)sub_1004CBC40, (uint64_t (*)(uint64_t (*)(int *, unsigned int)))sub_1004CBD04, (uint64_t)sub_1004CBD54, (uint64_t)sub_1004CBD94, (uint64_t)sub_1004CBE04, (uint64_t)sub_1004CBE54, 0);
  if ((_DWORD)result)
  {
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_1006F9BFC();
    return sub_10016910C(a3);
  }
  return result;
}

void sub_1004CC064(uint64_t a1, unint64_t a2, __int16 a3, uint64_t a4)
{
  int v7;

  if ((_DWORD)a4)
  {
    if (os_log_type_enabled((os_log_t)qword_100999998, OS_LOG_TYPE_ERROR))
      sub_1006F9C54();
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100933658);
    v7 = sub_1004A35C0((uint64_t)off_100977A50, a4, 20000);
    sub_10048183C(a1, a2, v7);
  }
  sub_1004820E0(a1, a2, a3);
  sub_10048183C(a1, a2, 0);
}

uint64_t sub_1004CC16C(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;

  v2 = *(_DWORD *)(a1 + 280);
  *(_DWORD *)(a1 + 280) = v2 + 1;
  if (v2 > 0)
    return 0;
  v6 = (uint64_t *)(a1 + 264);
  v7 = *(_QWORD *)(a1 + 264);
  if (v7)
    goto LABEL_11;
  v14 = 1;
  v15 = 2;
  sub_1004CC4EC(&v15, &v14, (_QWORD *)(a1 + 8), &v16);
  sub_100274874((uint64_t)v6, &v16);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v7 = *v6;
  if (!*v6)
    return 3403;
LABEL_11:
  v3 = sub_10034B418(v7, a2);
  if ((_DWORD)v3)
  {
    v16 = 0uLL;
    sub_100274874((uint64_t)v6, &v16);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  return v3;
}

uint64_t sub_1004CC298(uint64_t a1)
{
  int v1;
  BOOL v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v9;

  v1 = *(_DWORD *)(a1 + 280);
  v2 = __OFSUB__(v1--, 1);
  *(_DWORD *)(a1 + 280) = v1;
  if (!((v1 < 0) ^ v2 | (v1 == 0)))
    return 0;
  *(_DWORD *)(a1 + 280) = 0;
  v3 = a1 + 264;
  v7 = sub_10034B960(*(_QWORD *)(a1 + 264));
  v9 = 0uLL;
  sub_100274874(v3, &v9);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v7;
}

uint64_t sub_1004CC330()
{
  return 6;
}

void sub_1004CC338(id a1)
{
  operator new();
}

void sub_1004CC39C()
{
  operator delete();
}

void sub_1004CC3C0(id a1)
{
  operator new();
}

void sub_1004CC400()
{
  operator delete();
}

void sub_1004CC424(id a1)
{
  operator new();
}

void sub_1004CC464()
{
  operator delete();
}

void sub_1004CC488(id a1)
{
  operator new();
}

void sub_1004CC4C8()
{
  operator delete();
}

void sub_1004CC4EC(unsigned int *a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x61C0uLL);
  sub_1004CC564(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1002DAED8((uint64_t)a4, v8 + 3, (uint64_t)(v8 + 3));
}

void sub_1004CC550(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004CC564(_QWORD *a1, unsigned int *a2, unsigned int *a3, _QWORD *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_100933688;
  sub_10034B33C(a1 + 3, *a2, *a3, *a4);
  return a1;
}

void sub_1004CC5A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004CC5B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100933688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004CC5C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100933688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004CC5F8(uint64_t a1)
{
  return sub_10034B3A8(a1 + 24);
}

void sub_1004CC604()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "ScoDataBufferOverflowCB", v1, 2u);
  }
}

void sub_1004CC668(os_unfair_lock_s *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 v16;
  int v17;
  int v18;
  char v19;
  NSObject *v20;
  char *v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  int v52;
  _QWORD v53[2];
  int v54;
  uint8_t buf[8];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int16 v59;

  v54 = 0;
  if (*(_BYTE *)(a5 + 8))
  {
    v10 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = a2;
      LOWORD(v56) = 1024;
      *(_DWORD *)((char *)&v56 + 2) = a3;
      HIWORD(v56) = 2048;
      *(_QWORD *)&v57 = sub_10003F8C4(a4);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "HandsfreeGateway::ScoReceiveDataCB: wakeupCause SCO Packet from BT Controller (hfpHandle=0x%hX erroneous=%hhu len=%zu)\n", buf, 0x18u);
    }
  }
  v11 = sub_1004CCD90((uint64_t)a1, a2);
  if (v11)
  {
    v53[0] = 0;
    v53[1] = 0;
    sub_10003415C((uint64_t)v53, (uint64_t)&a1[190]);
    if (!sub_10026BB3C((uint64_t)(v11 + 50)))
      goto LABEL_20;
    if (sub_10002527C((uint64_t)(v11 + 50)) == 256
      || sub_10002527C((uint64_t)(v11 + 50)) == 127)
    {
      if ((unint64_t)sub_10003F8C4(a4) > 1)
      {
        v13 = sub_10003F8C4(a4);
        sub_10057CCC4((uint64_t)v11, v13);
        v14 = (unsigned __int8 *)sub_10003EB18(a4);
        v15 = v14[1];
        v16 = sub_10026BB0C((uint64_t)(v11 + 50));
        if (a3 || sub_10003F8C4(a4) != v16 || sub_10003F8C4(a4) < (unint64_t)(v15 + 2))
        {
          v17 = v14[1];
          v18 = *v14;
          v19 = sub_10003F8C4(a4);
          v14[1] = 0;
          sub_10057CD48((uint64_t)v11);
          LOBYTE(v15) = v19 - 2;
          if (!a3)
          {
            v20 = qword_100999808;
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
            {
              v49 = sub_10003F8C4(a4);
              *(_DWORD *)buf = 67110400;
              *(_DWORD *)&buf[4] = 0;
              LOWORD(v56) = 1024;
              *(_DWORD *)((char *)&v56 + 2) = v15;
              HIWORD(v56) = 1024;
              LODWORD(v57) = v16;
              WORD2(v57) = 2048;
              *(_QWORD *)((char *)&v57 + 6) = v49;
              HIWORD(v57) = 1024;
              LODWORD(v58) = v18;
              WORD2(v58) = 1024;
              *(_DWORD *)((char *)&v58 + 6) = v17;
              _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Clearing UL voice data err:%d, length to codec:%d, maxPacketSize:%d, data.getSize():%zu, seq %d, length in payload %d", buf, 0x2Au);
            }
          }
        }
        v21 = (char *)sub_10003EB18(a4);
        sub_1002D49E4((uint64_t)v11, v21, v15 + 2, *(unsigned __int8 *)(a5 + 8));
        goto LABEL_20;
      }
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      {
LABEL_10:
        v12 = sub_10003F8C4(a4);
        sub_1006F9D18((uint64_t)buf, v12);
      }
LABEL_20:
      sub_100034234((uint64_t)v53);
      return;
    }
    if (sub_10002527C((uint64_t)(v11 + 50)) != 128
      && sub_10002527C((uint64_t)(v11 + 50)) != 129
      && sub_10002527C((uint64_t)(v11 + 50)) != 255
      && sub_10002527C((uint64_t)(v11 + 50)) != 130)
    {
      v47 = (char *)sub_10003EB18(a4);
      v48 = sub_10003F8C4(a4);
      sub_1002D46D8((uint64_t)v11, v47, v48, *(unsigned __int8 *)(a5 + 8));
      goto LABEL_20;
    }
    if ((unint64_t)sub_10003F8C4(a4) <= 1)
    {
      if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        goto LABEL_20;
      goto LABEL_10;
    }
    v22 = sub_10003F8C4(a4);
    sub_10057CCC4((uint64_t)v11, v22);
    v51 = (unsigned __int8 *)sub_10003EB18(a4);
    v23 = sub_10026B8EC((uint64_t)(v11 + 50));
    if (a3)
    {
      if (sub_10026B8EC((uint64_t)(v11 + 50)))
      {
        v24 = sub_10026B8EC((uint64_t)(v11 + 50));
        if (sub_100442118(v24, 44))
        {
          v25 = qword_100999808;
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Generate two PLC for mono UL in stereo config", buf, 2u);
          }
          v51[1] = 0;
          sub_10057CD48((uint64_t)v11);
          v26 = (char *)sub_10003EB18(a4);
          sub_1002D49E4((uint64_t)v11, v26, 0x3CuLL, *(unsigned __int8 *)(a5 + 8));
          v27 = (char *)sub_10003EB18(a4);
          sub_1002D49E4((uint64_t)v11, v27, 0x3CuLL, *(unsigned __int8 *)(a5 + 8));
        }
      }
      goto LABEL_20;
    }
    v28 = v23;
    v29 = *v51;
    if (v23
      && sub_100442118(v23, 41)
      && (v30 = sub_10003BE44(), (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 792))(v30, 11)))
    {
      v52 = 0;
      v31 = (unsigned __int8 *)sub_10003EB18(a4);
      v32 = sub_10003F8C4(a4);
      if (!sub_1004CCE88(v32, v31, v32, (_WORD *)&v54 + 1, &v54, (_WORD *)&v52 + 1, &v52))
        goto LABEL_20;
      v33 = v52;
      if ((_WORD)v52)
      {
        v34 = sub_10003EB18(a4);
        *(_QWORD *)buf = _NSConcreteStackBlock;
        v56 = 3221225472;
        *(_QWORD *)&v57 = sub_1004E500C;
        *((_QWORD *)&v57 + 1) = &unk_100933B28;
        *(_QWORD *)&v58 = v28;
        *((_QWORD *)&v58 + 1) = v34 + HIWORD(v52);
        v59 = v33;
        sub_1004E4F30(a1 + 82, buf);
      }
      v35 = sub_10003EB18(a4);
      v50 = HIWORD(v54);
      v51 = (unsigned __int8 *)(v35 + HIWORD(v54));
      v36 = v54;
      if ((_WORD)v54)
      {
LABEL_45:
        v37 = 0;
        v38 = v36;
        while (v38 > v37)
        {
          v39 = sub_10003F8C4(a4);
          v40 = v39;
          if (v39 < v37)
          {
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
              sub_1006F9D50(v40);
            goto LABEL_20;
          }
          v41 = v39 - v37;
          if (v41 <= 1)
          {
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
              sub_1006F9DC0();
            goto LABEL_20;
          }
          v42 = v51[v37];
          v43 = v51[v37 + 1];
          if (v37 && v29 + 1 != v42)
            goto LABEL_20;
          v44 = v43 + 2;
          if (v41 < v43 + 2)
          {
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
              sub_1006F9E2C(v41);
            goto LABEL_20;
          }
          v45 = sub_10003EB18(a4);
          sub_1002D49E4((uint64_t)v11, (char *)(v45 + v50 + v37), v44, *(unsigned __int8 *)(a5 + 8));
          v46 = v44 + v37;
          v37 = (unsigned __int16)(v44 + v37);
          v29 = v42;
          if (v46 >= 0x10000)
          {
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEBUG))
              sub_1006F9E9C();
            goto LABEL_20;
          }
        }
        goto LABEL_20;
      }
    }
    else
    {
      v50 = 0;
    }
    v36 = sub_10026BB0C((uint64_t)(v11 + 50));
    goto LABEL_45;
  }
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    sub_1006F9CB4();
}

void sub_1004CCD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1004CCD90(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD v11[2];
  unsigned __int16 v12;
  unsigned __int16 *v13;

  v12 = a2;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 760);
  v4 = *(_QWORD *)(a1 + 832);
  if (!v4)
    goto LABEL_19;
  v5 = a1 + 832;
  do
  {
    v6 = *(unsigned __int16 *)(v4 + 32);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 832 && *(unsigned __int16 *)(v5 + 32) <= a2)
  {
    v13 = &v12;
    v9 = sub_1002BB704((uint64_t **)(a1 + 824), &v12, (uint64_t)&unk_100740F58, &v13)[5];
  }
  else
  {
LABEL_19:
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006F9EC8();
    v9 = 0;
  }
  sub_100034234((uint64_t)v11);
  return v9;
}

void sub_1004CCE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1004CCE88(uint64_t a1, unsigned __int8 *a2, unint64_t a3, _WORD *a4, _WORD *a5, _WORD *a6, _WORD *a7)
{
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  _BOOL8 result;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  __int16 v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  _DWORD v35[2];
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;

  v8 = *a2;
  v9 = v8 & 0xF;
  if ((v8 & 0xF0) == 0x80)
    v10 = v8 & 0xF;
  else
    v10 = 0;
  if ((v10 - 4) < 0xFFFFFFFD)
  {
    v11 = qword_100999808;
    result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR);
    if (result)
    {
      v13 = a2[1];
      v14 = a2[2];
      v15 = a2[3];
      v16 = a2[4];
      v17 = a2[5];
      v18 = a2[6];
      v19 = a2[7];
      v35[0] = 67111168;
      v35[1] = v10;
      v36 = 1024;
      v37 = v8;
      v38 = 1024;
      v39 = v13;
      v40 = 1024;
      v41 = v14;
      v42 = 1024;
      v43 = v15;
      v44 = 1024;
      v45 = v16;
      v46 = 1024;
      v47 = v17;
      v48 = 1024;
      v49 = v18;
      v50 = 1024;
      v51 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "uplink frame total chunk invalid :%u, %02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x", (uint8_t *)v35, 0x38u);
      return 0;
    }
    return result;
  }
  if ((v8 & 0xF) == 0 || a3 == 0)
    return 1;
  v21 = 0;
  v22 = 1;
  v23 = 1;
  result = 1;
  while (1)
  {
    v24 = a2[v22];
    if (v24 >> 4 == 10)
      break;
    if (v24 >> 4 != 9)
    {
      result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      sub_1006F9F2C();
      return 0;
    }
    v25 = v24 & 0xF0;
    v26 = v24 & 0xF;
    if (v25 != 144)
      v26 = 0;
    v27 = v26;
    if (v26 >= 3)
    {
      result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      sub_1006F9F90();
      return 0;
    }
    ++v23;
    if (*a4)
    {
      if (v26)
        goto LABEL_22;
    }
    else
    {
      *a4 = v23;
      if (v26)
      {
        do
        {
LABEL_22:
          v28 = a2[(unsigned __int16)(v23 + 1)];
          v21 += v28;
          v23 += v28 + 2;
          --v27;
        }
        while (v27);
      }
    }
    *a5 = v21 + 2 * v26;
LABEL_31:
    if ((_BYTE)--v9)
    {
      v22 = (unsigned __int16)v23;
      if ((unsigned __int16)v23 <= a3)
        continue;
    }
    return result;
  }
  v29 = v24 & 0xF0;
  v30 = v24 & 0xF;
  if (v29 == 160)
    v31 = v30;
  else
    v31 = 0;
  if (v31 < 2)
  {
    v32 = *(unsigned __int16 *)&a2[(unsigned __int16)(v23 + 1)];
    v33 = v23 + 3;
    if (!*a6)
      *a6 = v33;
    v34 = (unsigned __int16)*a7 + v32;
    *a7 = v34;
    v23 = v34 + v33;
    goto LABEL_31;
  }
  result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR);
  if (!result)
    return result;
  sub_1006F9FF0();
  return 0;
}

void sub_1004CD138()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "ScoTransportReadyCB", v1, 2u);
  }
}

void sub_1004CD19C(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v4;
  _DWORD v5[2];

  v4 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "ScoTxPacketCompletedCB: numCompletedPackets %d", (uint8_t *)v5, 8u);
  }
}

uint64_t sub_1004CD23C(uint64_t a1, int a2, unsigned int a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 a9)
{
  NSObject *v17;
  uint64_t *v18;
  uint64_t v19;
  NSObject *v20;
  _QWORD v22[2];
  uint8_t buf[4];
  int v24;

  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, a1 + 760);
  v17 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "eSCO parameters:", buf, 2u);
    v17 = qword_100999808;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "\t\tstatus:\t\t\t%{bluetooth:OI_STATUS}u", buf, 8u);
    v17 = qword_100999808;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v24 = a5;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "\t\ttxInterval:\t\t%d", buf, 8u);
    v17 = qword_100999808;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v24 = a6;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "\t\treTxWindow:\t\t%d", buf, 8u);
    v17 = qword_100999808;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v24 = a7;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "\t\trxPacketLength: %d", buf, 8u);
    v17 = qword_100999808;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v24 = a8;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "\t\ttxPacketLength: %d", buf, 8u);
    v17 = qword_100999808;
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v24 = a9;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "\t\tairMode:\t\t%2x", buf, 8u);
  }
  v18 = sub_1004CCD90(a1, a3);
  v19 = (uint64_t)v18;
  if (v18)
  {
    sub_10026BB04((uint64_t)(v18 + 50), a8);
    sub_10026BB14(v19 + 400, a7);
    sub_10026BB24(v19 + 400, a5);
    sub_10026BB44(v19 + 400, 0);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100933DA8);
    sub_10063A6BC((uint64_t)off_1009778A0);
    sub_10026B8F4(v19 + 400, a4);
    if (sub_10057C504(v19))
    {
      sub_10057D1BC(v19);
      v20 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "IO already started from audio layer, now that we have a connection handle, triggering sendthread to start", buf, 2u);
      }
      sub_10057D374(v19);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
  {
    sub_1006FA054();
  }
  return sub_100034234((uint64_t)v22);
}

void sub_1004CD5E0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004CD5FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 760);
  v4 = *(_QWORD **)(a1 + 824);
  v5 = (_QWORD *)(a1 + 832);
  if (v4 == v5)
  {
LABEL_9:
    v9 = 0;
  }
  else
  {
    while (sub_10026B8EC(v4[5] + 400) != a2)
    {
      v6 = (_QWORD *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v8 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
      if (v7 == v5)
        goto LABEL_9;
    }
    v9 = v4[5];
  }
  sub_100034234((uint64_t)v11);
  return v9;
}

void sub_1004CD6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CD6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 760);
  v4 = sub_1004CD5FC(a1, a2);
  if (v4)
    v5 = sub_10026BA9C(v4 + 400);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);
  return v5;
}

void sub_1004CD72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1004CD740(uint64_t a1, uint64_t a2, __n128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 760);
  v6 = sub_1004CD5FC(a1, a2);
  v7 = v6;
  if (v6)
  {
    sub_10057CC98(v6, a3);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
  {
    sub_10043F6EC(a2, (uint64_t)v9);
    sub_1006FA0B8();
  }
  sub_100034234((uint64_t)v10);
  return v7 != 0;
}

void sub_1004CD820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CD840(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 760);
  if (a2 && sub_1004CD5FC(a1, a2))
  {
    v4 = sub_1004CD5FC(a1, a2);
    sub_10057CCB0(v4);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
  {
    sub_1006FA100();
  }
  return sub_100034234((uint64_t)v6);
}

void sub_1004CD8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CD8E4(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  NSObject *v13;
  void *p_p;
  uint64_t v15;
  _QWORD v17[2];
  unsigned __int16 v18;
  void *__p;
  char v20;
  uint8_t buf[4];
  _QWORD v22[3];
  __int128 v23;
  void *v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[6];
  __int128 v30;
  uint64_t v31;

  v18 = a3;
  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 760);
  v31 = 0;
  v30 = 0u;
  memset(v29, 0, sizeof(v29));
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  *(_OWORD *)v24 = 0u;
  sub_1005BCCCC((uint64_t)&v23 + 1);
  BYTE2(v24[0]) = 0;
  BYTE4(v24[0]) = 0;
  BYTE2(v26) = 0;
  BYTE4(v26) = 0;
  HIDWORD(v29[2]) = 0;
  v25 = 0uLL;
  v24[1] = 0;
  LOBYTE(v26) = 0;
  v27 = 0uLL;
  *((_QWORD *)&v26 + 1) = 0;
  LOBYTE(v28) = 0;
  v29[0] = 0;
  v29[1] = 0;
  *((_QWORD *)&v28 + 1) = 0;
  *(_DWORD *)((char *)&v29[1] + 7) = 0;
  LOBYTE(v29[3]) = 1;
  BYTE2(v31) = 0;
  *(_QWORD *)((char *)&v29[3] + 6) = 0;
  *(_QWORD *)((char *)&v29[3] + 1) = 0;
  v30 = 0uLL;
  v29[5] = 0;
  LOBYTE(v31) = 0;
  v6 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, &__p);
    v7 = v20 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 67109378;
    LODWORD(v22[0]) = a3;
    WORD2(v22[0]) = 2082;
    *(_QWORD *)((char *)v22 + 6) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Now tracking handle %d for device %{public}s", buf, 0x12u);
    if (v20 < 0)
      operator delete(__p);
  }
  v8 = *(_QWORD *)(a1 + 832);
  if (!v8)
    goto LABEL_18;
  v9 = a1 + 832;
  do
  {
    v10 = *(unsigned __int16 *)(v8 + 32);
    v11 = v10 >= v18;
    if (v10 >= v18)
      v12 = (uint64_t *)v8;
    else
      v12 = (uint64_t *)(v8 + 8);
    if (v11)
      v9 = v8;
    v8 = *v12;
  }
  while (*v12);
  if (v9 == a1 + 832 || v18 < *(unsigned __int16 *)(v9 + 32))
  {
LABEL_18:
    v13 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, &__p);
      if (v20 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 136446210;
      v22[0] = p_p;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Creating HFPAudioDevice for device %{public}s", buf, 0xCu);
      if (v20 < 0)
        operator delete(__p);
    }
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    sub_1006FA18C();
  if (SHIBYTE(v29[1]) < 0)
    operator delete(*((void **)&v28 + 1));
  if (SHIBYTE(v27) < 0)
    operator delete(*((void **)&v26 + 1));
  if (SHIBYTE(v25) < 0)
    operator delete(v24[1]);
  nullsub_90((char *)&v23 + 1, v15);
  return sub_100034234((uint64_t)v17);
}

void sub_1004CE318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v27;

  sub_100043728(&a14);
  sub_10026B73C((uint64_t)&a26, v27);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CE3A8(os_unfair_lock_s *a1, unsigned __int8 *a2, unint64_t *a3)
{
  int v6;
  NSObject *v7;
  CFUUIDBytes *p_p;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  CFUUIDBytes *v12;
  CFUUIDBytes *v13;
  CFUUIDBytes *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  _BOOL4 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  int v44;
  NSObject *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  NSObject *v50;
  const char *v51;
  int v52;
  _BOOL8 v53;
  int v54;
  int v55;
  int v56;
  unsigned __int8 v57;
  int v58;
  unsigned __int8 v59;
  int v60;
  NSObject *v61;
  const char *v62;
  unsigned __int8 v63;
  NSObject *v64;
  _BYTE *v65;
  NSObject *v66;
  _BYTE *v67;
  int v68;
  int v69;
  int v70;
  id v71;
  void *v72;
  float v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  _BOOL4 v81;
  NSObject *v82;
  __int16 v83;
  _BOOL4 v84;
  int v86;
  _QWORD v87[2];
  uint64_t v88;
  uint64_t v89;
  CFUUIDBytes __p;
  char v91;
  _BYTE buf[24];
  void *v93;
  unsigned __int8 *v94;
  __int16 v95;
  char v96;

  v88 = 0;
  v89 = 0;
  v87[0] = 0;
  v87[1] = 0;
  sub_10003415C((uint64_t)v87, (uint64_t)&a1[190]);
  if (sub_10026BA2C((uint64_t)(a3 + 50)))
  {
    v6 = 127;
    sub_10026BAA4((uint64_t)(a3 + 50), 127);
  }
  else if (sub_10026B9EC((uint64_t)(a3 + 50)))
  {
    v6 = 256;
    sub_10026BAA4((uint64_t)(a3 + 50), 256);
  }
  else if (sub_10026B9CC((uint64_t)(a3 + 50)))
  {
    v6 = 2;
    sub_10026BAA4((uint64_t)(a3 + 50), 2);
  }
  else
  {
    v6 = 1;
    sub_10026BAA4((uint64_t)(a3 + 50), 1);
  }
  v7 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    sub_10043E5F8((uint64_t)a2, &__p);
    if (v91 < 0)
      p_p = *(CFUUIDBytes **)&__p.byte0;
    v10 = sub_1004CF258(v9, v6);
    v11 = sub_1004CD5FC((uint64_t)a1, (uint64_t)a2);
    if (v11)
      LODWORD(v11) = sub_10026BA5C(v11 + 400);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = p_p;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v10;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v93) = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Creating HFPAudioDevice for device %{public}s with codec: %s, HandsfreeAoS %d", buf, 0x1Cu);
    if (v91 < 0)
      operator delete(*(void **)&__p.byte0);
  }
  sub_10046E9BC(a2 + 128, &__p);
  if (v91 >= 0)
    v12 = &__p;
  else
    v12 = *(CFUUIDBytes **)&__p.byte0;
  sub_100091AE8(buf, (char *)v12);
  sub_1002D42C0((uint64_t)a3, (const void **)buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v91 < 0)
    operator delete(*(void **)&__p.byte0);
  sub_10043F6EC((uint64_t)a2, (uint64_t)&__p);
  if (v91 >= 0)
    v13 = &__p;
  else
    v13 = *(CFUUIDBytes **)&__p.byte0;
  sub_100091AE8(buf, (char *)v13);
  sub_1002D4448((uint64_t)a3, (uint64_t)buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v91 < 0)
    operator delete(*(void **)&__p.byte0);
  sub_10046E9BC(a2 + 128, &__p);
  if (v91 >= 0)
    v14 = &__p;
  else
    v14 = *(CFUUIDBytes **)&__p.byte0;
  sub_100091AE8(buf, (char *)v14);
  sub_1002D4248((uint64_t)a3, (uint64_t)buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v91 < 0)
    operator delete(*(void **)&__p.byte0);
  sub_1002D4440((uint64_t)a3, (uint64_t)a2);
  v15 = sub_1004CF320((uint64_t)a1, (uint64_t)a2);
  sub_1002D4D3C((uint64_t)a3, v15);
  v17 = sub_1004CF638(v16, (uint64_t)a2);
  sub_10057CE64((uint64_t)a3, v17);
  v19 = sub_1004CF6DC(v18, (uint64_t)a2);
  sub_10057CE74((uint64_t)a3, v19);
  v20 = sub_1004CD5FC((uint64_t)a1, (uint64_t)a2);
  if (v20)
    v21 = sub_10026B9C4(v20 + 400);
  else
    v21 = 0;
  sub_10057CE84((uint64_t)a3, v21);
  v22 = sub_1004CD5FC((uint64_t)a1, (uint64_t)a2);
  if (v22)
    v23 = sub_10026B9CC(v22 + 400);
  else
    v23 = 0;
  sub_10057CEF4((uint64_t)a3, v23);
  v24 = sub_1004CD5FC((uint64_t)a1, (uint64_t)a2);
  if (v24)
    v25 = sub_10026BA2C(v24 + 400);
  else
    v25 = 0;
  sub_10057CE94((uint64_t)a3, v25);
  v26 = sub_1004CD5FC((uint64_t)a1, (uint64_t)a2);
  if (v26)
    v27 = sub_10026BA3C(v26 + 400);
  else
    v27 = 0;
  sub_10057CEA4((uint64_t)a3, v27);
  v28 = sub_1004CD5FC((uint64_t)a1, (uint64_t)a2);
  if (v28)
    v29 = sub_10026B9EC(v28 + 400);
  else
    v29 = 0;
  sub_10057CF14((uint64_t)a3, v29);
  v30 = sub_1004CD5FC((uint64_t)a1, (uint64_t)a2);
  if (v30)
    v31 = sub_10026B9FC(v30 + 400);
  else
    v31 = 0;
  sub_10057CF24((uint64_t)a3, v31);
  v32 = sub_1004CD5FC((uint64_t)a1, (uint64_t)a2);
  if (v32)
    v33 = sub_10026BA0C(v32 + 400);
  else
    v33 = 0;
  sub_10057CEB4((uint64_t)a3, v33);
  v34 = sub_1004CD5FC((uint64_t)a1, (uint64_t)a2);
  if (v34)
    v35 = sub_10026BA1C(v34 + 400);
  else
    v35 = 0;
  sub_10057CEC4((uint64_t)a3, v35);
  v36 = sub_1004CD5FC((uint64_t)a1, (uint64_t)a2);
  if (v36)
    v37 = sub_10026BA5C(v36 + 400);
  else
    v37 = 0;
  sub_10057CEE4((uint64_t)a3, v37);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100933DC8);
  if (sub_100471DE0((uint64_t)off_1009778E0))
  {
    v38 = 1;
  }
  else
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100933DE8);
    v38 = sub_10065765C((uint64_t)off_1009778C0);
  }
  sub_10057CFE4((uint64_t)a3, v38);
  v39 = sub_1004CD5FC((uint64_t)a1, (uint64_t)a2);
  if (v39)
    v40 = sub_10026B944(v39 + 400);
  else
    v40 = 0;
  sub_1002D6E18((uint64_t)a3, v40);
  v42 = sub_1004CF8CC(v41, (uint64_t)a2);
  sub_10057CE54((uint64_t)a3, v42);
  v43 = sub_1004CFA18((uint64_t)a1, (uint64_t)a2);
  sub_1002D4114((uint64_t)a3, (float)v43 / 15.0);
  v44 = sub_10026B964((uint64_t)(a3 + 50));
  sub_1002D4B4C((uint64_t)a3, v44);
  v45 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    v46 = sub_100442118((uint64_t)a2, 32);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v46;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "HFP setSupportsTipi %d", buf, 8u);
  }
  v47 = sub_100442118((uint64_t)a2, 32);
  sub_1002D4B94((uint64_t)a3, v47);
  v48 = sub_10044A290((uint64_t)a2);
  sub_10057CF04((uint64_t)a3, v48);
  v49 = sub_100442118((uint64_t)a2, 5);
  v50 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    v51 = "disabled";
    if (v49)
      v51 = "enabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v51;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Offloading Host DSL %s", buf, 0xCu);
  }
  sub_10057D0A4((uint64_t)a3, v49);
  v52 = sub_10043F998((uint64_t)a2);
  sub_1002D52C4((uint64_t)a3, v52);
  if ((sub_100442118((uint64_t)a2, 12) & 1) == 0)
  {
    v53 = sub_1004420E0((uint64_t)a2);
    if (!v53)
    {
      v54 = sub_1004CFA50(v53, (uint64_t)a2);
      sub_10057D0B4((uint64_t)a3, v54);
    }
  }
  v55 = sub_100442118((uint64_t)a2, 12);
  sub_1002D4DB4((uint64_t)a3, v55);
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100933E08);
  v56 = sub_1002806C8((uint64_t)off_100977A80, (uint64_t)a2);
  sub_1002D4DDC((uint64_t)a3, v56);
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100933E08);
  if (sub_1002806C8((uint64_t)off_100977A80, (uint64_t)a2))
  {
    *(_DWORD *)buf = 0;
    *(_DWORD *)&__p.byte0 = 0;
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_100933E08);
    sub_1002835F4((uint64_t)off_100977A80, (uint64_t)a2, (int *)buf, (int *)&__p);
    sub_1002D4E2C((uint64_t)a3, buf[0], __p.byte0);
    v86 = 3;
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_100933E08);
    sub_100283884((uint64_t)off_100977A80, (uint64_t)a2, &v86);
    sub_1002D4E3C((uint64_t)a3, v86);
    v57 = sub_10044F5D0((uint64_t)a2);
    sub_1002D4E4C((uint64_t)a3, v57);
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_100933E08);
    v58 = sub_1002834CC((uint64_t)off_100977A80, (uint64_t)a2);
    sub_1002D4E04((uint64_t)a3, v58);
  }
  if ((sub_100442118((uint64_t)a2, 12) & 1) != 0 || sub_1004420E0((uint64_t)a2))
  {
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_100933E08);
    v59 = sub_10027FE1C((uint64_t)off_100977A80, (uint64_t)a2);
    sub_1002D4E5C((uint64_t)a3, v59);
  }
  sub_100444BF0((uint64_t)a2, (_DWORD *)&v89 + 1, &v89, (_DWORD *)&v88 + 1, &v88);
  v60 = sub_100442118((uint64_t)a2, 41);
  v61 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    v62 = "Disabled";
    if (v60)
      v62 = "Enabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v62;
    _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "High Quality BiDirectional Audio %s", buf, 0xCu);
  }
  sub_1002D5528((uint64_t)a3, v60);
  if (sub_1004483F0((uint64_t)a2))
  {
    v63 = sub_10044F708((uint64_t)a2);
    sub_1002D4E7C((uint64_t)a3, v63);
  }
  if (sub_10044F790((uint64_t)a2))
  {
    v64 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)a2, buf);
      v65 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)&__p.byte0 = 136315138;
      *(_QWORD *)&__p.byte4 = v65;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "Applying DontAutoRoute: %s", &__p.byte0, 0xCu);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    sub_10044E03C((uint64_t)a2, 0);
    sub_1002D57FC((uint64_t)a3, 0);
  }
  if (sub_10044F7D4((uint64_t)a2))
  {
    v66 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)a2, buf);
      v67 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)&__p.byte0 = 136315138;
      *(_QWORD *)&__p.byte4 = v67;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Applying AudioRouteHidden: %s", &__p.byte0, 0xCu);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    sub_10044E080((uint64_t)a2, 0);
    sub_1002D585C((uint64_t)a3, 1);
  }
  v68 = sub_100442118((uint64_t)a2, 25);
  sub_1002D5228((uint64_t)a3, v68);
  v69 = sub_100442118((uint64_t)a2, 37);
  sub_10057D0C4((uint64_t)a3, v69);
  v70 = sub_100442118((uint64_t)a2, 35);
  sub_10057D0F4((uint64_t)a3, v70);
  *(_QWORD *)&__p.byte0 = 0;
  *(_QWORD *)&__p.byte8 = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100933DE8);
  sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133], 1u, 1u, 0, 0, buf);
  v71 = sub_100030DF4(buf);
  v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
  objc_msgSend(v72, "getUUIDBytes:", &__p);

  sub_1002D51E8((uint64_t)a3, &__p);
  sub_100444BF0((uint64_t)a2, (_DWORD *)&v89 + 1, &v89, (_DWORD *)&v88 + 1, &v88);
  sub_1002D51F8((uint64_t)a3, SHIDWORD(v88));
  sub_1002D5208((uint64_t)a3, v88);
  sub_1002D5218((uint64_t)a3, v89);
  v73 = sub_1004513A4((uint64_t)a2);
  sub_1002D5250((uint64_t)a3, v73);
  sub_1002D70C0(buf, (uint64_t)(a2 + 1120));
  sub_1002D52D4((uint64_t)a3, (int **)buf);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  v74 = sub_100451434((uint64_t)a2);
  sub_1002D5428((uint64_t)a3, v74);
  v75 = sub_10044F96C((uint64_t)a2);
  sub_1002D518C((uint64_t)a3, v75);
  v76 = sub_100442118((uint64_t)a2, 44);
  sub_10057D0E4((uint64_t)a3, v76);
  v77 = sub_10044FE34((uint64_t)a2, 11);
  sub_10057D0D4((uint64_t)a3, v77);
  if (sub_100442118((uint64_t)a2, 51))
  {
    v78 = sub_1000438A4();
    v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 2520))(v78);
  }
  else
  {
    v79 = 0;
  }
  sub_10057D104((uint64_t)a3, v79);
  sub_1002D5488((uint64_t)a3, a2[952]);
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100933E28);
  if (*((_QWORD *)off_100977A90 + 27))
  {
    v80 = sub_1000967D4(*((_QWORD *)off_100977A90 + 27));
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100933E28);
  }
  else
  {
    v80 = 0;
  }
  if (off_100977A90)
    v81 = sub_100520978((uint64_t)off_100977A90);
  else
    v81 = 0;
  v82 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v81;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v80;
    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "Publish HFP device, notify BTHAL low Latency Game: %d, HID Allow AoS: %d", buf, 0xEu);
  }
  if ((v81 & v80) == 1)
    sub_1004CFE70((uint64_t)a1, (uint64_t)a2, 1);
  v83 = sub_10026B8E4((uint64_t)(a3 + 50));
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = sub_1004E4FEC;
  v93 = &unk_100933B08;
  v94 = a2;
  v95 = v83;
  v96 = 1;
  sub_1004E4F30(a1 + 82, buf);
  v84 = (sub_100447C64((uint64_t)a2) & 2) == 0;
  sub_1002D6590((uint64_t)a3, v84);
  sub_1002D3904(a3);
  return sub_100034234((uint64_t)v87);
}

void sub_1004CF194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_100034234((uint64_t)&a11);
  _Unwind_Resume(a1);
}

const char *sub_1004CF258(uint64_t a1, int a2)
{
  const char *result;

  if (a2 <= 126)
  {
    if (a2)
    {
      if (a2 == 1)
      {
        return "CSVD";
      }
      else if (a2 == 2)
      {
        return "mSBC";
      }
      else
      {
        return "Unknown";
      }
    }
    else
    {
      return "None";
    }
  }
  else
  {
    switch(a2)
    {
      case 127:
        result = "LC3";
        break;
      case 128:
        result = "AAC-ELD-Stereo";
        break;
      case 129:
        result = "AAC-ELD-Stereo48K";
        break;
      case 130:
        result = "AAC-ELD-Stereo48K-10ms";
        break;
      default:
        if (a2 == 255)
        {
          result = "LC3-Stereo";
        }
        else
        {
          if (a2 != 256)
            return "Unknown";
          result = "AAC-ELD";
        }
        break;
    }
  }
  return result;
}

uint64_t sub_1004CF320(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  void *__p[2];
  char v16;
  uint64_t v17;
  uint8_t buf[8];
  __int16 v19;
  int v20;
  char v21;

  v3 = sub_1004CD5FC(a1, a2);
  v4 = sub_1004CF638(v3, a2);
  v5 = v3 + 400;
  if (((v4 == 1) & sub_10026BA4C(v3 + 400)) != 0)
    v6 = 0;
  else
    v6 = 1000;
  if (sub_100442118(a2, 12))
  {
    *(_DWORD *)buf = 0;
    LODWORD(__p[0]) = 0;
    v17 = 0;
    sub_100444BF0(a2, buf, __p, (_DWORD *)&v17 + 1, &v17);
    if ((HIDWORD(v17) - 8194) > 0x1D)
      v6 = 0;
    else
      v6 = dword_100741D8C[HIDWORD(v17) - 8194];
  }
  v7 = sub_10026B794(v5);
  HIDWORD(v17) = v7;
  if ((_DWORD)v7)
  {
    v8 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Modified default sco delay to: %d", buf, 8u);
    }
    v6 = v7;
  }
  v9 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9))
  {
    v10 = sub_100027F68();
    sub_100091AE8(buf, "VoiceCommand");
    sub_100091AE8(__p, "DelayInMsec");
    v11 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v10 + 88))(v10, buf, __p, (char *)&v17 + 4);
    if (v16 < 0)
      operator delete(__p[0]);
    if (v21 < 0)
    {
      operator delete(*(void **)buf);
      if (!v11)
        goto LABEL_22;
    }
    else if (!v11)
    {
      goto LABEL_22;
    }
    v12 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = HIDWORD(v17);
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Default write modified default sco delay to %dms", buf, 8u);
    }
    v6 = HIDWORD(v17);
  }
LABEL_22:
  v13 = qword_100999808;
  if ((int)v6 >= 2501)
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v6;
      v19 = 1024;
      v20 = 2500;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Sco delay is too large %d, set max delay to %dms", buf, 0xEu);
      v13 = qword_100999808;
    }
    v6 = 2500;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Delay between sco and audio activation is %dms", buf, 8u);
  }
  return v6;
}

void sub_1004CF5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004CF638(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  int v5;

  v3 = sub_10043FC18(a2);
  LOBYTE(v4) = 1;
  switch(v3)
  {
    case 0:
      v5 = sub_10043F854(a2);
      v4 = 0x302030103010201uLL >> (8 * (v5 - 16));
      if ((v5 - 16) > 7)
        LOBYTE(v4) = 0;
      break;
    case 1:
      LOBYTE(v4) = 2;
      break;
    case 2:
      return v4;
    case 3:
      LOBYTE(v4) = 4;
      break;
    case 4:
      LOBYTE(v4) = 3;
      break;
    case 5:
      LOBYTE(v4) = 5;
      break;
    default:
      LOBYTE(v4) = 0;
      break;
  }
  return v4;
}

uint64_t sub_1004CF6DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  _DWORD v6[4];
  __int128 v7;
  void *v8[2];
  __int128 v9;
  void *v10[2];
  __int128 v11;
  void *__p[2];
  _OWORD v13[3];
  __int128 v14;
  uint64_t v15;

  v15 = 0;
  v14 = 0u;
  memset(v13, 0, sizeof(v13));
  v11 = 0u;
  *(_OWORD *)__p = 0u;
  v9 = 0u;
  *(_OWORD *)v10 = 0u;
  v7 = 0u;
  *(_OWORD *)v8 = 0u;
  sub_1005BCCCC((uint64_t)&v7 + 1);
  BYTE2(v8[0]) = 0;
  BYTE4(v8[0]) = 0;
  BYTE2(v10[0]) = 0;
  BYTE4(v10[0]) = 0;
  DWORD1(v13[1]) = 0;
  v9 = 0uLL;
  v8[1] = 0;
  LOBYTE(v10[0]) = 0;
  v11 = 0uLL;
  v10[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v13, 0, 19);
  __p[1] = 0;
  BYTE8(v13[1]) = 1;
  BYTE2(v15) = 0;
  *(_QWORD *)((char *)&v13[1] + 14) = 0;
  *(_QWORD *)((char *)&v13[1] + 9) = 0;
  v14 = 0uLL;
  *((_QWORD *)&v13[2] + 1) = 0;
  LOBYTE(v15) = 0;
  if (a2)
  {
    if (sub_1004419F4(a2, (uint64_t)&v7))
    {
      a2 = DWORD2(v13[2]);
      if (DWORD2(v13[2]))
      {
        v4 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
        {
          v6[0] = 67109120;
          v6[1] = a2;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "DSPTuning: %d", (uint8_t *)v6, 8u);
        }
      }
    }
    else
    {
      a2 = 0;
    }
  }
  if (SHIBYTE(v13[0]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[1]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[1]);
  nullsub_90((char *)&v7 + 1, v3);
  return a2;
}

void sub_1004CF868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10026B73C((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CF884(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1004CD5FC(a1, a2);
  if (result)
    return sub_10026B9CC(result + 400);
  return result;
}

uint64_t sub_1004CF8A8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1004CD5FC(a1, a2);
  if (result)
    return sub_10026B9EC(result + 400);
  return result;
}

uint64_t sub_1004CF8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v5;
  void *v6[2];
  __int128 v7;
  void *v8[2];
  __int128 v9;
  void *__p[2];
  _OWORD v11[3];
  __int128 v12;
  uint64_t v13;

  v13 = 0;
  v12 = 0u;
  memset(v11, 0, sizeof(v11));
  v9 = 0u;
  *(_OWORD *)__p = 0u;
  v7 = 0u;
  *(_OWORD *)v8 = 0u;
  v5 = 0u;
  *(_OWORD *)v6 = 0u;
  sub_1005BCCCC((uint64_t)&v5 + 1);
  BYTE2(v6[0]) = 0;
  BYTE4(v6[0]) = 0;
  BYTE2(v8[0]) = 0;
  BYTE4(v8[0]) = 0;
  DWORD1(v11[1]) = 0;
  v7 = 0uLL;
  v6[1] = 0;
  LOBYTE(v8[0]) = 0;
  v9 = 0uLL;
  v8[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v11, 0, 19);
  __p[1] = 0;
  BYTE8(v11[1]) = 1;
  BYTE2(v13) = 0;
  *(_QWORD *)((char *)&v11[1] + 14) = 0;
  *(_QWORD *)((char *)&v11[1] + 9) = 0;
  v12 = 0uLL;
  *((_QWORD *)&v11[2] + 1) = 0;
  LOBYTE(v13) = 0;
  if (a2)
  {
    if (sub_1004419F4(a2, (uint64_t)&v5))
      a2 = LODWORD(v11[2]);
    else
      a2 = 0;
  }
  if (SHIBYTE(v11[0]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[1]);
  if (SHIBYTE(v7) < 0)
    operator delete(v6[1]);
  nullsub_90((char *)&v5 + 1, v3);
  return a2;
}

void sub_1004CF9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026B73C((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CFA18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v2 = sub_1004CD5FC(a1, a2);
  v3 = 12;
  if (v2)
  {
    v4 = sub_10026B934(v2 + 400);
    if (v4)
      return v4;
    else
      return 12;
  }
  return v3;
}

uint64_t sub_1004CFA50(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t result;
  void **v6;
  const char *v7;
  _BOOL4 v8;
  void **v9;
  NSObject *v10;
  void **v11;
  NSObject *v12;
  void **v13;
  NSObject *v14;
  void **v15;
  NSObject *v16;
  void **v17;
  NSObject *v18;
  void **v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void **v23;

  switch(sub_10043FC18(a2))
  {
    case 0u:
      v3 = qword_100999808;
      v4 = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v4)
      {
        sub_10043E5F8(a2, __p);
        if (v21 >= 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v23 = v6;
        v7 = "User selected device type is unknown. Returning user selected device type as kBluetoothAudioDeviceCategoryU"
             "nknown for device %{public}s.";
        goto LABEL_12;
      }
      break;
    case 1u:
      v10 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v11 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Returning user selected device type as kBluetoothAudioDeviceCategoryCarkit for device %{public}s.", buf, 0xCu);
        if (v21 < 0)
          operator delete(__p[0]);
      }
      result = 2;
      break;
    case 2u:
      v12 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v13 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v23 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Returning user selected device type as kBluetoothAudioDeviceCategoryHeadphone for device %{public}s.", buf, 0xCu);
        if (v21 < 0)
          operator delete(__p[0]);
      }
      result = 1;
      break;
    case 3u:
      v14 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v15 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "User selected device type is hearing aid. Returning user selected device type as kBluetoothAudioDeviceCategoryHearingAid for device %{public}s.", buf, 0xCu);
        if (v21 < 0)
          operator delete(__p[0]);
      }
      result = 4;
      break;
    case 4u:
      v16 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v17 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v23 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Returning user selected device type as kBluetoothAudioDeviceCategorySpeaker for device %{public}s.", buf, 0xCu);
        if (v21 < 0)
          operator delete(__p[0]);
      }
      result = 3;
      break;
    case 5u:
      v18 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v19 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v23 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "User selected device type is other. Returning user selected device type as kBluetoothAudioDeviceCategoryOther for device %{public}s.", buf, 0xCu);
        if (v21 < 0)
          operator delete(__p[0]);
      }
      result = 5;
      break;
    default:
      v3 = qword_100999808;
      v8 = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v8)
      {
        sub_10043E5F8(a2, __p);
        if (v21 >= 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v23 = v9;
        v7 = "Returning user selected device type as kBluetoothAudioDeviceCategoryUnknown for device %{public}s.";
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v7, buf, 0xCu);
        if (v21 < 0)
          operator delete(__p[0]);
        result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_1004CFE70(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  __int128 v10;

  if (a2)
  {
    v5 = result;
    if ((_os_feature_enabled_impl("AudioAccessoryFeatures", "AdvancedHandsfreeGamingOnly") & 1) != 0
      || (result = _os_feature_enabled_impl("AudioAccessoryFeatures", "AdvancedHandsfreeEverywhere"), (_DWORD)result))
    {
      v6 = sub_10003BE44();
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 240))(v6);
      if ((_DWORD)result)
      {
        result = sub_100442118(a2, 49);
        if ((_DWORD)result)
        {
          v7 = qword_100999808;
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
          {
            v8 = "off";
            if (a3)
              v8 = "on";
            LODWORD(v10) = 136315138;
            *(_QWORD *)((char *)&v10 + 4) = v8;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Notify BTHAL Low Latency Game is %s", (uint8_t *)&v10, 0xCu);
          }
          v10 = 0uLL;
          sub_10003415C((uint64_t)&v10, v5 + 760);
          v9 = sub_1004CD5FC(v5, a2);
          if (v9)
            sub_10057CED4(v9, a3);
          return sub_100034234((uint64_t)&v10);
        }
      }
    }
  }
  return result;
}

void sub_1004CFFC0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004CFFDC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 760);
  v6 = sub_1004CD5FC(a1, a2);
  if (v6)
  {
    sub_10057D0D4(v6, a3);
    v7 = 0;
  }
  else
  {
    v7 = 7;
  }
  sub_100034234((uint64_t)v9);
  return v7;
}

void sub_1004D0050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D0064(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 760);
  v6 = sub_1004CD5FC(a1, a2);
  if (v6)
  {
    sub_10057D0E4(v6, a3);
    v7 = 0;
  }
  else
  {
    v7 = 7;
  }
  sub_100034234((uint64_t)v9);
  return v7;
}

void sub_1004D00D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004D00EC(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, unsigned __int8 a5, unsigned __int8 a6)
{
  id v10;
  uint64_t v11;
  unsigned __int8 v12[5];

  v10 = a4;
  if (a2 && (v11 = sub_10026B8EC(a2 + 400)) != 0)
  {
    v12[0] = 3;
    v12[1] = sub_1002D44AC(a2, v10);
    v12[2] = a3;
    v12[3] = a5;
    v12[4] = a6;
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_100933E08);
    if (sub_100286DFC((uint64_t)off_100977A80, v11, 5u, v12)
      && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    {
      sub_1006FA1E4();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
  {
    sub_1006FA1B8();
  }

}

void sub_1004D020C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004D0228(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  __int16 v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  __int16 v29;
  NSObject *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  char v41;
  int v42;
  _QWORD v43[2];
  uint8_t buf[4];
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  _BYTE v49[10];
  __int16 v50;
  int v51;

  v43[0] = 0;
  v43[1] = 0;
  sub_10003415C((uint64_t)v43, a1 + 760);
  if (!sub_10057C504(a2))
  {
    v42 = 0;
    v41 = 0;
    sub_100043758(&v41);
    v4 = sub_10018D5DC((_WORD *)&v42 + 1, &v42);
    sub_10004339C(&v41);
    if (v4 && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FA244();
    if (!a2 || (v5 = sub_10026B8EC(a2 + 400)) == 0)
    {
LABEL_47:
      if (sub_10026BA9C(a2 + 400) == 256 || sub_10026BA9C(a2 + 400) == 127 || v4)
      {
        v25 = HIWORD(v42);
        if (sub_10026BB0C(a2 + 400))
          v26 = sub_10026BB0C(a2 + 400);
        else
          v26 = 60;
        if (v26 <= v25)
        {
          if (!sub_10026BB0C(a2 + 400))
          {
            v29 = 60;
            goto LABEL_65;
          }
          goto LABEL_59;
        }
      }
      else
      {
        if (sub_10026BA9C(a2 + 400) != 128)
          goto LABEL_66;
        v27 = HIWORD(v42);
        if (sub_10026BB0C(a2 + 400))
          v28 = sub_10026BB0C(a2 + 400);
        else
          v28 = 240;
        if (v28 <= v27)
        {
          if (!sub_10026BB0C(a2 + 400))
          {
            v29 = 240;
            goto LABEL_65;
          }
LABEL_59:
          v29 = sub_10026BB0C(a2 + 400);
          goto LABEL_65;
        }
      }
      v29 = HIWORD(v42);
LABEL_65:
      HIWORD(v42) = v29;
LABEL_66:
      v30 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        v31 = HIWORD(v42);
        v32 = sub_10026BB2C(a2 + 400);
        v33 = sub_10026BB0C(a2 + 400);
        v34 = sub_10026BB54(a2 + 400);
        *(_DWORD *)buf = 67110144;
        v45 = v31;
        v46 = 1024;
        v47 = 625 * v32;
        v48 = 1024;
        *(_DWORD *)v49 = v33;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v34;
        v50 = 1024;
        v51 = (unsigned __int16)v42;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Creating HF SendThread: HCI %d length, OTA interval %d us, %d bytes, and bt clk 0x%x numScoBuffers %d", buf, 0x20u);
      }
      v35 = sub_10026B8E4(a2 + 400);
      v36 = HIWORD(v42);
      v37 = sub_10026BB0C(a2 + 400);
      v38 = (unsigned __int16)v42;
      v39 = sub_10026BA9C(a2 + 400);
      sub_10057D1D4(a2, a1, v35, v36, v37, v38, v39);
    }
    v6 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      v7 = HIWORD(v42);
      v8 = (unsigned __int16)v42;
      v9 = sub_10026BA9C(a2 + 400);
      v10 = sub_1004CF258(v9, v9);
      *(_DWORD *)buf = 67109634;
      v45 = v7;
      v46 = 1024;
      v47 = v8;
      v48 = 2080;
      *(_QWORD *)v49 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ReadScoBuffer size:%hu, count:%u, codec:%s", buf, 0x18u);
    }
    v11 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 328))(v11))
    {
      if (sub_10026BA9C(a2 + 400) == 2)
      {
        sub_1000438A4();
        if (sub_100049F50())
          v12 = 240;
        else
          v12 = 192;
        HIWORD(v42) = v12;
        v13 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v45 = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Restore maxScoPacketSize for mSBC - %hu", buf, 8u);
        }
        goto LABEL_27;
      }
      v14 = sub_1004CD5FC(a1, v5);
      if (v14 && sub_10026B9FC(v14 + 400) && sub_10026BA9C(a2 + 400) == 128)
      {
        v15 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Restore maxScoPacketSize for AAC-ELD Stereo", buf, 2u);
        }
        v16 = 240;
LABEL_26:
        HIWORD(v42) = v16;
        goto LABEL_27;
      }
      if (sub_10026BA9C(a2 + 400) == 1)
      {
        v17 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Restore maxScoPacketSize for CVSD", buf, 2u);
        }
        v16 = 120;
        goto LABEL_26;
      }
    }
LABEL_27:
    v18 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 384))(v18))
    {
      if (sub_10026BA9C(a2 + 400) == 1)
      {
        v19 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Restore macOS maxScoPacketSize for CVSD", buf, 2u);
        }
        HIWORD(v42) = 60;
      }
      else if (sub_10026BA9C(a2 + 400) == 2)
      {
        sub_1000438A4();
        v20 = sub_100049F50() ? 240 : 120;
        HIWORD(v42) = v20;
        v21 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v45 = v20;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Restore macOS maxScoPacketSize for mSBC - %hu", buf, 8u);
        }
      }
    }
    if (sub_10026BA9C(a2 + 400) == 255)
    {
      HIWORD(v42) = 360;
      v22 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v45 = 360;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Max SCO packet size of LC3 stereo - %hu", buf, 8u);
      }
    }
    if (sub_10026BA9C(a2 + 400) == 129)
    {
      HIWORD(v42) = 360;
      v23 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v45 = 360;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Max SCO packet size of AAC-ELD stereo - %hu", buf, 8u);
      }
    }
    if (sub_10026BA9C(a2 + 400) == 130)
    {
      HIWORD(v42) = 240;
      v24 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v45 = 240;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Max SCO packet size of AAC-ELD stereo 10ms - %hu", buf, 8u);
      }
    }
    goto LABEL_47;
  }
  return sub_100034234((uint64_t)v43);
}

void sub_1004D08B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, int a13, char a14)
{
  sub_100043728(&a12);
  sub_100034234((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D08EC(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  NSObject *v13;
  uint8_t *v14;
  NSObject *v15;
  uint8_t *v16;
  char v18;
  _QWORD v19[2];
  unsigned __int16 v20;
  uint8_t v21[4];
  uint8_t *v22;
  uint8_t buf[8];
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void *v26;
  uint64_t v27;
  unsigned __int16 v28;
  char v29;

  v20 = a3;
  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 760);
  v6 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing HFP device %d from tracked audio devices", buf, 8u);
  }
  v7 = *(_QWORD *)(a1 + 832);
  if (!v7)
    goto LABEL_46;
  v8 = a1 + 832;
  do
  {
    v9 = *(unsigned __int16 *)(v7 + 32);
    v10 = v9 >= v20;
    if (v9 >= v20)
      v11 = (uint64_t *)v7;
    else
      v11 = (uint64_t *)(v7 + 8);
    if (v10)
      v8 = v7;
    v7 = *v11;
  }
  while (*v11);
  if (v8 != a1 + 832 && v20 >= *(unsigned __int16 *)(v8 + 32))
  {
    *(_QWORD *)buf = &v20;
    v12 = sub_1002BB704((uint64_t **)(a1 + 824), &v20, (uint64_t)&unk_100740F58, (_WORD **)buf)[5];
    if (v12 && (sub_10026B9DC((uint64_t)(v12 + 50)) & 1) == 0)
    {
      if (sub_10057C504((uint64_t)v12))
        sub_10057C514((uint64_t)v12);
      if (sub_10026BCE0((uint64_t)(v12 + 50)))
      {
        v13 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a2, buf);
          v14 = SHIBYTE(v25) >= 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)v21 = 136446210;
          v22 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Device %{public}s is in Expanse over A2DP. Clean up expanse A2DP states since device is unpublishing", v21, 0xCu);
          if (SHIBYTE(v25) < 0)
            operator delete(*(void **)buf);
        }
        (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a1 + 192))(a1, v12, 0);
      }
      *(_QWORD *)buf = _NSConcreteStackBlock;
      v24 = 3221225472;
      v25 = sub_1004E4FEC;
      v26 = &unk_100933B08;
      v27 = a2;
      v28 = v20;
      v29 = 0;
      sub_1004E4F30((os_unfair_lock_s *)(a1 + 328), buf);
      sub_1002D4120((uint64_t)v12);
    }
    v18 = 0;
    sub_100043758(&v18);
    if (sub_10018D258(a2 + 128) && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FA368();
    if (sub_1004420E0(a2))
    {
      v15 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, buf);
        v16 = SHIBYTE(v25) >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v21 = 136446210;
        v22 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Disabling SCO Buffer Flush as %{public}s is disconnecting HFP", v21, 0xCu);
        if (SHIBYTE(v25) < 0)
          operator delete(*(void **)buf);
      }
      if (sub_100183288(a2 + 128, 0) && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FA308();
    }
    sub_10004339C(&v18);
    sub_100394984(a1 + 824, &v20);
    sub_100043728(&v18);
  }
  else
  {
LABEL_46:
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FA2A4();
  }
  return sub_100034234((uint64_t)v19);
}

void sub_1004D0C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D0CBC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _BOOL8 v6;
  char v8;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 760);
  sub_1000438A4();
  if (!sub_100333540())
  {
LABEL_5:
    sub_1004D0EAC(a1, a2);
    return sub_100034234((uint64_t)v9);
  }
  if (a3 <= 9)
  {
    v8 = 0;
    sub_100043758(&v8);
    v6 = sub_10019F29C();
    if (!v6)
      sub_1004D0D94(v6, a2, 10);
    sub_10004339C(&v8);
    sub_100043728(&v8);
    goto LABEL_5;
  }
  return sub_100034234((uint64_t)v9);
}

void sub_1004D0D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004D0D94(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v4;
  _DWORD v5[2];

  v4 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Delaying SCO connection by %d milliseconds", (uint8_t *)v5, 8u);
  }
  operator new();
}

void sub_1004D0E80()
{
  operator delete();
}

uint64_t sub_1004D0EAC(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  void **v11;
  int v12;
  uint64_t v13;
  _BOOL8 v14;
  void **v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  void **v20;
  NSObject *v21;
  void **v23;
  void *__p[2];
  char v25;
  uint8_t buf[4];
  void **v27;
  __int16 v28;
  int v29;

  v4 = sub_1004CCD90(a1, a2);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FA3C8();
    return 0;
  }
  v5 = (uint64_t)v4;
  v6 = sub_1004D1420(a1, a2);
  v7 = v5 + 400;
  v8 = sub_10026B914(v5 + 400);
  v9 = qword_100999808;
  v10 = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT);
  if (v8 != 3)
  {
    if (v10)
    {
      sub_10043E5F8(v6, __p);
      v15 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v27 = v15;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Making outgoing audio connection to device %{public}s", buf, 0xCu);
      if (v25 < 0)
        operator delete(__p[0]);
    }
    sub_1002A8E24(11);
    v16 = mach_absolute_time();
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100933E28);
    *((_QWORD *)off_100977A90 + 22) = v16;
    if (sub_10026BAAC(v5 + 400))
    {
      if (sub_10026B914(v5 + 400) == 1)
      {
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          sub_1006FA48C();
        goto LABEL_41;
      }
      v17 = sub_1004DDBD8(a1, v6);
      if (!v17)
      {
LABEL_41:
        sub_10026B91C(v5 + 400, 1);
        return 1;
      }
    }
    else
    {
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      v17 = sub_100157644(a2);
      if (!v17)
      {
        v18 = sub_10026B8EC(v5 + 400);
        v17 = sub_1001929C8((uint64_t (*)())sub_1004DDB50, v18 + 128);
      }
      sub_10004339C(__p);
      sub_100043728(__p);
      if (!v17)
        goto LABEL_41;
    }
    if (v17 == 1806)
    {
      v19 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v6, __p);
        v20 = v25 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v27 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Audio is already connected to device %{public}s", buf, 0xCu);
        if (v25 < 0)
          operator delete(__p[0]);
      }
      sub_10057CD58(v5, 1, 1806);
      sub_1004D9868(a1, a2);
      return 1;
    }
    v21 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(v6, __p);
      v23 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v27 = v23;
      v28 = 1024;
      v29 = v17;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Audio connection to device %{public}s failed with result %{bluetooth:OI_STATUS}u", buf, 0x12u);
      if (v25 < 0)
        operator delete(__p[0]);
    }
    return 0;
  }
  if (v10)
  {
    sub_10043E5F8(v6, __p);
    v11 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v27 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Accepting incoming audio connection from device %{public}s", buf, 0xCu);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v12 = sub_1001576D4(a2, 1);
  v13 = sub_10026B8EC(v7);
  sub_1001929C8((uint64_t (*)())sub_1004DDB50, v13 + 128);
  sub_10004339C(__p);
  v14 = v12 == 0;
  if (v12)
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FA42C();
    sub_10026B91C(v7, 0);
    sub_1004D9E20(a1, a2, 0, v12);
  }
  else
  {
    sub_10026B91C(v7, 0);
  }
  sub_100043728(__p);
  return v14;
}

void sub_1004D1328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D1348(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 760);
  v4 = *(_QWORD **)(a1 + 824);
  v5 = (_QWORD *)(a1 + 832);
  if (v4 == v5)
  {
LABEL_9:
    v9 = 0;
  }
  else
  {
    while (sub_10026B8EC(v4[5] + 400) != a2)
    {
      v6 = (_QWORD *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v8 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
      if (v7 == v5)
        goto LABEL_9;
    }
    v9 = sub_10026B8E4(v4[5] + 400);
  }
  sub_100034234((uint64_t)v11);
  return v9;
}

void sub_1004D1408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D1420(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t **v11;
  _QWORD v12[2];
  unsigned __int16 v13;
  unsigned __int16 *v14;

  v13 = a2;
  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 760);
  v4 = *(_QWORD *)(a1 + 832);
  if (!v4)
    goto LABEL_12;
  v5 = a1 + 832;
  do
  {
    v6 = *(unsigned __int16 *)(v4 + 32);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 832 && *(unsigned __int16 *)(v5 + 32) <= a2)
  {
    v14 = &v13;
    v11 = sub_1002BB704((uint64_t **)(a1 + 824), &v13, (uint64_t)&unk_100740F58, &v14);
    v9 = sub_10026B8EC((uint64_t)(v11[5] + 50));
  }
  else
  {
LABEL_12:
    v9 = 0;
  }
  sub_100034234((uint64_t)v12);
  return v9;
}

void sub_1004D14E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D14F8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 760);
  v4 = *(_QWORD **)(a1 + 824);
  v5 = (_QWORD *)(a1 + 832);
  if (v4 == v5)
  {
LABEL_12:
    v10 = 0;
  }
  else
  {
    while (1)
    {
      v6 = sub_10026B904(v4[5] + 400);
      v7 = (_DWORD)v6 == *(_DWORD *)a2 && WORD2(v6) == *(unsigned __int16 *)(a2 + 4);
      if (v7)
        break;
      v8 = (_QWORD *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v4[2];
          v7 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v7);
      }
      v4 = v9;
      if (v9 == v5)
        goto LABEL_12;
    }
    v10 = sub_10026B8E4(v4[5] + 400);
  }
  sub_100034234((uint64_t)v12);
  return v10;
}

void sub_1004D15D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D15EC@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v12;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 760);
  v6 = *(_QWORD *)(a1 + 832);
  if (!v6)
    goto LABEL_12;
  v7 = a1 + 832;
  do
  {
    v8 = *(unsigned __int16 *)(v6 + 32);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v6;
    else
      v10 = (uint64_t *)(v6 + 8);
    if (v9)
      v7 = v6;
    v6 = *v10;
  }
  while (*v10);
  if (v7 != a1 + 832 && *(unsigned __int16 *)(v7 + 32) <= a2)
  {
    v12 = sub_1004D1420(a1, a2);
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    sub_10046E9BC((unsigned __int8 *)(v12 + 128), a3);
    std::string::append(a3, "-tsco");
  }
  else
  {
LABEL_12:
    sub_100091AE8(a3, "null");
  }
  return sub_100034234((uint64_t)v13);
}

void sub_1004D16BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004D16EC(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v4;
  std::string v5;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    switch(a2)
    {
      case 1:
      case 4:
        operator new();
      case 2:
        operator new();
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 8:
        operator new();
      default:
        if (a2 == 16)
          operator new();
        if (a2 == 32)
          operator new();
        return;
    }
    sub_1002D20AC(0, (const char *)a1, &v5);
    *a3 = v5;
  }
}

void sub_1004D187C()
{
  operator delete();
}

void sub_1004D18B0(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v6;
  uint64_t v7;
  __int128 v8;
  void *v9[2];
  __int128 v10;
  void *v11[2];
  __int128 v12;
  void *__p[2];
  _OWORD v14[3];
  __int128 v15;
  uint64_t v16;

  v6 = *(_DWORD *)(a2 + 768);
  if (v6 == 32)
  {
    v16 = 0;
    v15 = 0u;
    memset(v14, 0, sizeof(v14));
    v12 = 0u;
    *(_OWORD *)__p = 0u;
    v10 = 0u;
    *(_OWORD *)v11 = 0u;
    v8 = 0u;
    *(_OWORD *)v9 = 0u;
    sub_1005BCCCC((uint64_t)&v8 + 1);
    BYTE2(v9[0]) = 0;
    BYTE4(v9[0]) = 0;
    BYTE2(v11[0]) = 0;
    BYTE4(v11[0]) = 0;
    DWORD1(v14[1]) = 0;
    v10 = 0uLL;
    v9[1] = 0;
    LOBYTE(v11[0]) = 0;
    v12 = 0uLL;
    v11[1] = 0;
    LOBYTE(__p[0]) = 0;
    memset(v14, 0, 19);
    __p[1] = 0;
    BYTE8(v14[1]) = 1;
    BYTE2(v16) = 0;
    *(_QWORD *)((char *)&v14[1] + 14) = 0;
    *(_QWORD *)((char *)&v14[1] + 9) = 0;
    v15 = 0uLL;
    *((_QWORD *)&v14[2] + 1) = 0;
    LOBYTE(v16) = 0;
    sub_1004419F4(a2, (uint64_t)&v8);
    if (SHIBYTE(v14[0]) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(v12) < 0)
      operator delete(v11[1]);
    if (SHIBYTE(v10) < 0)
      operator delete(v9[1]);
    nullsub_90((char *)&v8 + 1, v7);
    v6 = *(_DWORD *)(a2 + 768);
  }
  sub_1004D16EC(a1, v6, a3);
}

void sub_1004D1A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026B73C((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D1A30(uint64_t a1, int a2)
{
  uint64_t v2;
  char v4;

  if ((a2 - 129) >= 2 && a2 != 255)
    return 0;
  v4 = 0;
  sub_100043758(&v4);
  v2 = sub_1001829A0();
  sub_100043728(&v4);
  return v2;
}

void sub_1004D1A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D1AA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  void *__p[2];
  char v7;
  uint8_t buf[8];
  char v9;

  v2 = sub_100278350(a1, 2);
  *(_QWORD *)v2 = off_1009336C0;
  *(_QWORD *)(v2 + 256) = off_100933850;
  *(_QWORD *)(v2 + 264) = off_100933890;
  *(_QWORD *)(v2 + 272) = &off_1009338C0;
  *(_QWORD *)(v2 + 280) = off_1009338D8;
  *(_QWORD *)(v2 + 288) = &off_100933970;
  *(_QWORD *)(v2 + 296) = off_100933998;
  *(_QWORD *)(v2 + 304) = off_100933A00;
  *(_QWORD *)(v2 + 312) = off_100933A40;
  *(_QWORD *)(v2 + 320) = &off_100933A70;
  *(_DWORD *)(v2 + 328) = 0;
  *(_QWORD *)(v2 + 344) = 0;
  *(_QWORD *)(v2 + 352) = 0;
  *(_QWORD *)(v2 + 336) = 0;
  sub_10026A7B0(v2 + 360);
  *(_BYTE *)(a1 + 752) = 0;
  sub_1000160D0(a1 + 760);
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 824) = a1 + 832;
  v3 = sub_100027F68();
  sub_100091AE8(buf, "PTS");
  sub_100091AE8(__p, "PhoneNumberHack");
  (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(_QWORD *)v3 + 72))(v3, buf, __p, a1 + 752);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(*(void **)buf);
  if (*(_BYTE *)(a1 + 752))
  {
    v4 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PTS phone number hack enabled", buf, 2u);
    }
  }
  return a1;
}

void sub_1004D1C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  void *v26;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  sub_10001A82C(v21 + 824, *v24);
  sub_100069BDC(v23);
  sub_10026A9C0(v22);
  v26 = *(void **)(v21 + 336);
  if (v26)
  {
    *(_QWORD *)(v21 + 344) = v26;
    operator delete(v26);
  }
  sub_100278464(v21);
  _Unwind_Resume(a1);
}

void sub_1004D1C90()
{
  JUMPOUT(0x1004D1C6CLL);
}

uint64_t sub_1004D1C9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[5];
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  v2 = sub_100027F68();
  sub_100091AE8(v10, "Handsfree");
  sub_100091AE8(__p, "VVMSleep");
  (*(void (**)(uint64_t, void **, void **, int *))(*(_QWORD *)v2 + 88))(v2, v10, __p, &dword_10097B4B0);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100933D68);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 264);
  v3 = sub_100038E50();
  sub_1004E5E7C(v3 + 408, a1 + 272);
  v4 = sub_100475960();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004D1EDC;
  v7[3] = &unk_100917378;
  v7[4] = a1;
  sub_100023D84(v4, v7);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100933DC8);
  sub_10007A76C((uint64_t)off_1009778E0 + 240, a1 + 312);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100933DE8);
  sub_100668DE4((uint64_t)off_1009778C0, a1 + 320);
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_100933E68);
  sub_1000D96F8((uint64_t)off_100978188 + 24, a1 + 288);
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_100933E88);
  sub_1005B40C8(off_100978148, a1 + 304);
  v5 = sub_1000438A4();
  sub_100333414(v5, a1 + 296);
  return 0;
}

void sub_1004D1EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 - 17) < 0)
    operator delete(*(void **)(v20 - 40));
  _Unwind_Resume(exception_object);
}

void sub_1004D1EDC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  sub_1005D458C((uint64_t)off_10097AB00, v1 + 256);
  sub_1004D1F44(v1);
  sub_1004D2008(v1);
  sub_1004D2284(v1);
}

uint64_t sub_1004D1F44(uint64_t a1)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2))
    v3 = 3947;
  else
    v3 = 3939;
  v4 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4))
    v3 |= 4u;
  v5 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5) & 1) == 0)
  {
    if (qword_10097AB08 != -1)
      dispatch_once(&qword_10097AB08, &stru_100933E48);
    if (sub_1005D4C04((uint64_t)off_10097AB00))
      v3 |= 0x80u;
  }
  v6 = a1 + 360;
  sub_10026AA4C(v6, v3);
  return sub_10026AA5C(v6, 15);
}

void sub_1004D2008(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unsigned int v5;
  __int16 v6;
  int v7;
  __int128 __p;
  void *v9;
  int v10;
  void *v11[4];

  memset(v11, 0, sizeof(v11));
  sub_100091AE8(&v11[1], "");
  v10 = 0;
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  if (sub_1005D47E8((uint64_t)off_10097AB00))
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FA510();
  }
  else
  {
    v7 = (int)v11[0];
    if (SHIBYTE(v11[3]) < 0)
    {
      sub_10003430C(&__p, v11[1], (unint64_t)v11[2]);
    }
    else
    {
      __p = *(_OWORD *)&v11[1];
      v9 = v11[3];
    }
    sub_10026AAA0(a1 + 360, (uint64_t)&v7);
    if (SHIBYTE(v9) < 0)
      operator delete((void *)__p);
  }
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  v2 = sub_1005D47F8((uint64_t)off_10097AB00);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    sub_10026AAE4(a1 + 360, v3);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
  {
    sub_1006FA4E4();
  }
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  if (sub_1005D4808((uint64_t)off_10097AB00))
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FA4B8();
  }
  else
  {
    sub_10026AD44(a1 + 360, v10);
  }
  v6 = 0;
  v4 = sub_100038E50();
  (*(void (**)(uint64_t, char *, __int16 *))(*(_QWORD *)v4 + 96))(v4, (char *)&v6 + 1, &v6);
  if (v6 == 100)
    LOBYTE(v5) = 5;
  else
    v5 = v6 / 0x14u + 1;
  sub_10026AD54(a1 + 360, v5);

  if (SHIBYTE(v11[3]) < 0)
    operator delete(v11[1]);
}

void sub_1004D223C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_1004D2284(uint64_t a1)
{
  uint64_t v2[3];
  _QWORD v3[3];
  void **v4;

  memset(v3, 0, sizeof(v3));
  sub_1005C5C20(v3);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  if (sub_1005D4818((uint64_t)off_10097AB00))
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FA53C();
  }
  else
  {
    sub_1005C5CA8((int)v2);
    sub_10026ADE4(a1 + 360, v2);
    v4 = (void **)v2;
    sub_10026BD18(&v4);
  }
  v4 = (void **)v3;
  sub_10026BD18(&v4);
}

void sub_1004D2354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 24) = &a10;
  sub_10026BD18((void ***)(v13 - 24));
  *(_QWORD *)(v13 - 24) = &a13;
  sub_10026BD18((void ***)(v13 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_1004D2388(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  NSObject *v23;
  char v24;
  char v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  char v30;
  void *__p[2];
  char v32;
  uint64_t v33;
  _QWORD v34[2];
  uint8_t buf[16];
  const char *v36;

  v2 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2))
  {
    LOBYTE(v34[0]) = 0;
    v3 = sub_100027F68();
    sub_100091AE8(buf, "CATT");
    sub_100091AE8(__p, "AudioSinkSdp");
    (*(void (**)(uint64_t, uint8_t *, void **, _QWORD *))(*(_QWORD *)v3 + 72))(v3, buf, __p, v34);
    if (v32 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v36) < 0)
      operator delete(*(void **)buf);
    if (LOBYTE(v34[0]))
    {
      v4 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding HF role into SDP", buf, 2u);
      }
      *(_OWORD *)buf = xmmword_100933A80;
      v36 = "Handsfree";
      __p[0] = buf;
      __p[1] = (void *)1;
      LOBYTE(v33) = 0;
      sub_100043758(&v33);
      if (sub_1001084E4((uint64_t)__p, 0, 511, 387, (uint64_t)sub_1004D29BC)
        && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      {
        sub_1006FA628();
      }
      sub_100043728(&v33);
    }
  }
  *(_OWORD *)__p = off_100933AB0;
  v5 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 792))(v5, 6) & 1) != 0)
  {
    v6 = 3;
  }
  else
  {
    v7 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "WBS / mSBC for HFP disabled by defaults write", buf, 2u);
    }
    v6 = 1;
  }
  v8 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 792))(v8, 7))
  {
    v6 |= 0x100u;
    v9 = qword_100999808;
    if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      goto LABEL_24;
    *(_WORD *)buf = 0;
    v10 = "UWBS / AAC-ELD for HFP enabled";
  }
  else
  {
    v9 = qword_100999808;
    if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      goto LABEL_24;
    *(_WORD *)buf = 0;
    v10 = "UWBS / AAC-ELD for HFP disabled by defaults write";
  }
  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
LABEL_24:
  v11 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 792))(v11, 8))
  {
    v6 |= 0x80u;
    v12 = qword_100999808;
    if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      goto LABEL_30;
    *(_WORD *)buf = 0;
    v13 = "UWBSStereo for HFP enabled";
  }
  else
  {
    v12 = qword_100999808;
    if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      goto LABEL_30;
    *(_WORD *)buf = 0;
    v13 = "UWBSStereo for HFP disabled by defaults write";
  }
  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, buf, 2u);
LABEL_30:
  v14 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 792))(v14, 9))
    v15 = v6 | 4;
  else
    v15 = v6;
  sub_1000438A4();
  if (sub_100049F50())
    v15 |= 0x10u;
  v16 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 792))(v16, 10))
    v15 |= 0x200u;
  v17 = sub_1000438A4();
  if (sub_100331374(v17))
    v15 |= 0x400u;
  v18 = sub_1000438A4();
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 2512))(v18);
  v30 = 0;
  sub_100043758(&v30);
  v20 = a1 + 360;
  v21 = sub_10026AA54(v20);
  v22 = sub_100154E84((uint64_t)__p, 0, v21, v15, (uint64_t)sub_1004D2A20, 0);
  if (!v22)
    goto LABEL_43;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    sub_1006FA5C8();
  if (v22 == 140)
  {
LABEL_43:
    if (v19)
    {
      v23 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Registering Handsfree AoS", buf, 2u);
      }
      sub_10025A1AC((uint64_t)sub_1004D2A9C);
    }
    v24 = sub_10026AA64(v20);
    sub_1001552D8(v24);
    if (!sub_100155300((uint64_t)sub_1004D2C2C, 0))
    {
      v25 = sub_10026AAD4(v20);
      v26 = sub_10026AADC(v20);
      v27 = sub_10026AD4C(v20);
      v28 = sub_10026AD5C(v20);
      sub_100157174(v25, v26, v27, v28);
      v34[0] = 0;
      v34[1] = 0;
      objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v34);
      sub_10026B520(v20, v15);
      sub_10026B530(v20, v19);
      operator new();
    }
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FA568();
    sub_100155260();
  }
  sub_100043728(&v30);
  return 1;
}

void sub_1004D2908(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_10026BD18((void ***)&a20);
  operator delete();
}

void sub_1004D29BC()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Received hf event", v1, 2u);
  }
}

void sub_1004D2A20()
{
  sub_100475960();
  operator new();
}

void sub_1004D2A78()
{
  operator delete();
}

void sub_1004D2A9C(uint64_t a1, const void *a2, unsigned int a3, char a4)
{
  uint64_t v7;
  __int16 v8;
  char v9;
  uint64_t v10;
  _QWORD v11[4];
  uint64_t (**v12)();
  unsigned int *v13;
  __int16 v14;
  char v15;
  char v16;
  uint64_t (**v17)();
  unsigned int *v18;
  __int16 v19;
  uint64_t (**v20)();
  unsigned int *v21;

  v7 = sub_10019AEA4(a1);
  v8 = sub_10015C5CC(v7);
  v20 = &off_100918258;
  v21 = 0;
  if (a3)
  {
    sub_10003994C(&v17, a2, a3);
    sub_100041698((uint64_t)&v20, (uint64_t)&v17);
    v17 = &off_100918258;
    if (v18)
      sub_100056AAC(v18);
    v9 = 0;
  }
  else
  {
    v19 = 0;
    sub_10003994C(&v17, &v19, 2uLL);
    sub_100041698((uint64_t)&v20, (uint64_t)&v17);
    v17 = &off_100918258;
    if (v18)
      sub_100056AAC(v18);
    v9 = 2;
  }
  v10 = sub_100475960();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_1004E62D4;
  v11[3] = &unk_100933BA0;
  v15 = a4;
  v14 = v8;
  v16 = v9;
  v12 = &off_100918258;
  v13 = v21;
  if (v21)
    sub_10003C37C((uint64_t)v21);
  sub_100041A34(v10, v11);
  v12 = &off_100918258;
  if (v13)
    sub_100056AAC(v13);
  v20 = &off_100918258;
  if (v21)
    sub_100056AAC(v21);
}

void sub_1004D2BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int *a17)
{
  uint64_t v17;
  uint64_t v18;
  unsigned int *v20;

  if (a17)
    sub_100056AAC(a17);
  *(_QWORD *)(v18 - 64) = v17;
  v20 = *(unsigned int **)(v18 - 56);
  if (v20)
    sub_100056AAC(v20);
  _Unwind_Resume(exception_object);
}

void sub_1004D2C2C()
{
  sub_100475960();
  operator new();
}

void sub_1004D2C8C()
{
  operator delete();
}

uint64_t sub_1004D2CB0()
{
  uint64_t v0;
  uint64_t v1;
  char v3;

  v3 = 0;
  sub_100043758(&v3);
  if (sub_100155260())
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FA6E8();
LABEL_4:
    v0 = 1;
    goto LABEL_10;
  }
  v1 = sub_1000438A4();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 2512))(v1))
  {
    v0 = 0;
    goto LABEL_10;
  }
  v0 = sub_10025AA48();
  if ((_DWORD)v0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FA688();
    goto LABEL_4;
  }
LABEL_10:
  sub_100043728(&v3);
  return v0;
}

void sub_1004D2D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D2D90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[5];

  v2 = sub_100475960();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004D2EF0;
  v5[3] = &unk_100917378;
  v5[4] = a1;
  sub_100023D84(v2, v5);
  v3 = sub_100038E50();
  sub_1002B43D4(v3 + 408, a1 + 272);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100933D68);
  sub_100069060((uint64_t)off_100977A50 + 64, a1 + 264);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100933DC8);
  sub_100069060((uint64_t)off_1009778E0 + 240, a1 + 312);
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_100933E68);
  sub_100069060((uint64_t)off_100978188 + 24, a1 + 288);
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_100933E88);
  sub_1005B4200((uint64_t)off_100978148, a1 + 304);
  return 0;
}

void sub_1004D2EF0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  sub_1005D4648((uint64_t)off_10097AB00, v1 + 256);
}

uint64_t sub_1004D2F40()
{
  return 3;
}

BOOL sub_1004D2F48(uint64_t a1, uint64_t a2)
{
  return sub_1004D2F68(a2) != -1;
}

uint64_t sub_1004D2F68(uint64_t a1)
{
  __int128 *v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 v10;
  void *__p;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;

  v14 = xmmword_100741E90;
  __p = 0;
  v12 = 0;
  v13 = 0;
  if (!sub_1004442A0(a1, (uint64_t)&v14, 4u, &__p))
    goto LABEL_29;
  v3 = (__int128 *)__p;
  v2 = v12;
  if (__p == v12)
    goto LABEL_29;
  v4 = (__int128 *)__p;
  while (1)
  {
    if (*(_BYTE *)v4 == 6 && *((_WORD *)v4 + 1) == 2)
    {
      v6 = *((_QWORD *)v4 + 1);
      v7 = *(_BYTE *)v6 == 3 && *(_DWORD *)(v6 + 8) == 3;
      if (v7 && *(_BYTE *)(v6 + 16) == 1)
        break;
    }
    if (++v4 == v12)
    {
      v8 = 0xFFFFFFFFLL;
      goto LABEL_19;
    }
  }
  v8 = *(unsigned int *)(v6 + 24);
LABEL_19:
  while (v3 != v2)
  {
    v10 = *v3;
    sub_1002C3FB4(&v10);
    ++v3;
    v2 = v12;
  }
  if ((_DWORD)v8 == -1)
  {
LABEL_29:
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a1, &v10);
      sub_1006FA748();
    }
    v8 = 0xFFFFFFFFLL;
  }
  if (__p)
  {
    v12 = (__int128 *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_1004D30C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004D30F4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  void **v13;

  v3 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v4 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Attempting to connect handsfree to device %{public}s", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v5 = sub_1004D2F68(a2);
  v6 = v5;
  if (v5 == -1)
  {
    v7 = 1;
  }
  else
  {
    if (sub_10015BD24((int *)(a2 + 128), v5))
    {
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FA7F0(v6);
      v7 = 305;
    }
    else
    {
      v7 = 0;
    }
    v8 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 2512))(v8)
      && sub_100455920(a2)
      && sub_10025A290(a2 + 128)
      && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    {
      sub_1006FA790();
    }
  }
  sub_100043728(__p);
  return v7;
}

void sub_1004D32A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004D32C4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 760);
  v4 = sub_1004D14F8(a1, a2 + 128);
  v5 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 2512))(v5) && sub_100455920(a2))
  {
    v6 = sub_1004CCD90(a1, v4);
    v7 = sub_10026BCF0((uint64_t)(v6 + 50));
    if ((_DWORD)v7)
      sub_1004D3454(v7, a2 + 128);
    v10 = 0;
    sub_100043758(&v10);
    if (sub_10025A924(a2 + 128) && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FA8C4(v4);
    sub_100043728(&v10);
  }
  v10 = 0;
  sub_100043758(&v10);
  if (sub_10015BEF4(v4, 1818))
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FA858(v4);
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  sub_100043728(&v10);
  sub_100034234((uint64_t)v11);
  return v8;
}

void sub_1004D341C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
  sub_100043728(&a13);
  sub_100034234((uint64_t)&a14);
  _Unwind_Resume(a1);
}

_BYTE *sub_1004D3454(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v7 = 0;
  sub_100043758(&v7);
  v3 = (unsigned __int16 *)sub_10019AEA4(a2);
  sub_10004339C(&v7);
  v4 = *v3;
  v5 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 1576))(v5, v4, 0, 1);
  return sub_100043728(&v7);
}

void sub_1004D34C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D34D8(uint64_t a1, unsigned int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  void *v14[2];
  __int128 v15;
  void *v16[2];
  __int128 v17;
  void *__p[2];
  _OWORD v19[3];
  __int128 v20;
  uint64_t v21;

  v6 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v13) = 67109376;
    DWORD1(v13) = a2;
    WORD4(v13) = 1024;
    *(_DWORD *)((char *)&v13 + 10) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Handsfree device handle %d disconnected with status %{bluetooth:OI_STATUS}u", (uint8_t *)&v13, 0xEu);
  }
  v7 = sub_1004D1420(a1, a2);
  sub_1004D08EC(a1, v7, a2);
  if (qword_10097AB18 != -1)
    dispatch_once(&qword_10097AB18, &stru_100933EA8);
  sub_1002CC360(qword_10097AB10, v7);
  if (v7)
  {
    v21 = 0;
    v20 = 0u;
    memset(v19, 0, sizeof(v19));
    v17 = 0u;
    *(_OWORD *)__p = 0u;
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    v13 = 0u;
    *(_OWORD *)v14 = 0u;
    sub_1005BCCCC((uint64_t)&v13 + 1);
    BYTE2(v14[0]) = 0;
    BYTE4(v14[0]) = 0;
    BYTE2(v16[0]) = 0;
    BYTE4(v16[0]) = 0;
    DWORD1(v19[1]) = 0;
    v15 = 0uLL;
    v14[1] = 0;
    LOBYTE(v16[0]) = 0;
    v17 = 0uLL;
    v16[1] = 0;
    LOBYTE(__p[0]) = 0;
    memset(v19, 0, 19);
    __p[1] = 0;
    BYTE8(v19[1]) = 1;
    BYTE2(v21) = 0;
    *(_QWORD *)((char *)&v19[1] + 14) = 0;
    *(_QWORD *)((char *)&v19[1] + 9) = 0;
    v20 = 0uLL;
    *((_QWORD *)&v19[2] + 1) = 0;
    LOBYTE(v21) = 0;
    v8 = sub_1004419F4(v7, (uint64_t)&v13);
    if (BYTE5(v19[2]))
      v9 = v8;
    else
      v9 = 0;
    if (v9)
    {
      v10 = sub_1000438A4();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v10 + 224))(v10, 0, 1);
    }
    sub_10048257C(a1, v7, 0);
    if (SHIBYTE(v19[0]) < 0)
      operator delete(__p[1]);
    if (SHIBYTE(v17) < 0)
      operator delete(v16[1]);
    if (SHIBYTE(v15) < 0)
      operator delete(v14[1]);
    nullsub_90((char *)&v13 + 1, v11);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
  {
    sub_1006FA930();
  }
  result = sub_100481CB4(a1);
  if ((result & 1) == 0)
  {
    sub_10026ABA8(a1 + 360);
    if (sub_10026AB78(a1 + 360))
      sub_1004D3788(a1);
    result = sub_10026AD64(a1 + 360);
    if ((_DWORD)result)
      return sub_10026AD6C(a1 + 360, 0);
  }
  return result;
}

void sub_1004D376C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026B73C((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D3788(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5[3];
  uint8_t buf[8];
  uint64_t v7;

  memset(v5, 0, sizeof(v5));
  sub_1005C5C20(v5);
  v2 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cleaning up virtual call", buf, 2u);
  }
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  sub_1005D4BF4((uint64_t)off_10097AB00);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  sub_1005D4818((uint64_t)off_10097AB00);
  sub_10026AE68(a1 + 360, v5);
  sub_10026AB80(a1 + 360, 1);
  *(_QWORD *)buf = 0;
  v7 = 0;
  v3 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", buf);
  sub_1004D427C(a1, v5, v3);

  *(_QWORD *)buf = v5;
  sub_10026BD18((void ***)buf);
  return 0;
}

void sub_1004D38F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  void *v13;

  a13 = (void **)&a10;
  sub_10026BD18(&a13);
  _Unwind_Resume(a1);
}

void sub_1004D392C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _QWORD v7[6];
  int v8;

  v6 = sub_100475960();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004D39A0;
  v7[3] = &unk_1009180B0;
  v8 = a3;
  v7[4] = a1;
  v7[5] = a2;
  sub_100041A34(v6, v7);
}

uint64_t sub_1004D39A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  void *v8[2];
  char v9;
  void *__p[2];
  char v11;
  _QWORD v12[2];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 48) == 18)
    return sub_1004D3AD0(*(_QWORD *)(a1 + 32));
  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, v1 + 760);
  v4 = sub_1004CD5FC(v1, *(_QWORD *)(a1 + 40));
  if (v4)
  {
    sub_10043F6EC(*(_QWORD *)(a1 + 40), (uint64_t)v8);
    if (v9 >= 0)
      v5 = (char *)v8;
    else
      v5 = (char *)v8[0];
    sub_100091AE8(__p, v5);
    sub_1002D4448(v4, (uint64_t)__p);
    if (v11 < 0)
      operator delete(__p[0]);
    if (v9 < 0)
      operator delete(v8[0]);
    v7 = sub_1004CF638(v6, *(_QWORD *)(a1 + 40));
    sub_10057CE64(v4, v7);
  }
  return sub_100034234((uint64_t)v12);
}

void sub_1004D3A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  sub_100034234((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D3AD0(uint64_t a1)
{
  _BOOL4 v2;
  NSObject *v3;
  _BOOL4 v4;
  NSObject *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD v12[2];
  uint8_t buf[4];
  _BOOL4 v14;

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 760);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100933DC8);
  v2 = sub_100471DE0((uint64_t)off_1009778E0);
  v3 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v14 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Device info change for incompatible classic hid %u", buf, 8u);
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100933DE8);
  v4 = sub_10065765C((uint64_t)off_1009778C0);
  v5 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Device info change for incompatible LE hid %u", buf, 8u);
  }
  v6 = *(_QWORD **)(a1 + 824);
  if (v6 != (_QWORD *)(a1 + 832))
  {
    do
    {
      v7 = v6[5];
      if (v7)
        sub_1002D4B74(v7, "kBTAudioMsgPropertyIncompatibleHidConnected", v2 || v4);
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != (_QWORD *)(a1 + 832));
  }
  return sub_100034234((uint64_t)v12);
}

void sub_1004D3CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1004D3CDC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[6];
  int v8;

  v5 = a1 - 312;
  v6 = sub_100475960();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004D39A0;
  v7[3] = &unk_1009180B0;
  v8 = a3;
  v7[4] = v5;
  v7[5] = a2;
  sub_100041A34(v6, v7);
}

void sub_1004D3D50(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[9];

  if (a3 == 4)
  {
    v7[7] = v3;
    v7[8] = v4;
    v6 = sub_100475960();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1004D3DB8;
    v7[3] = &unk_100917378;
    v7[4] = a1;
    sub_100041A34(v6, v7);
  }
}

uint64_t sub_1004D3DB8(uint64_t a1)
{
  return sub_1004D3AD0(*(_QWORD *)(a1 + 32));
}

void sub_1004D3DC0(uint64_t a1, uint64_t a2, int a3)
{
  sub_1004D3D50(a1 - 320, a2, a3);
}

void sub_1004D3DC8(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3 && sub_100442118(a2, 12))
  {
    if (qword_100977D80 != -1)
      dispatch_once(&qword_100977D80, &stru_100933EC8);
    sub_1004C4824((uint64_t)off_100977D78, 3, 3u);
  }
}

uint64_t sub_1004D3E30(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (!a3)
  {
    v3 = result;
    result = sub_100442118(a2, 12);
    if ((_DWORD)result)
    {
      v4 = v3 + 360;
      if ((sub_10026AB24(v4) & 1) == 0 && (sub_10026AD34(v4, 2) || sub_10026AD34(v4, 1)))
      {
        if (qword_100977D80 != -1)
          dispatch_once(&qword_100977D80, &stru_100933EC8);
        v5 = 5;
        return sub_1004C4824((uint64_t)off_100977D78, v5, 3u);
      }
      result = sub_10026AB24(v4);
      if ((_DWORD)result)
      {
        result = sub_10026AD34(v4, 0);
        if ((_DWORD)result)
        {
          if (qword_100977D80 != -1)
            dispatch_once(&qword_100977D80, &stru_100933EC8);
          v5 = 4;
          return sub_1004C4824((uint64_t)off_100977D78, v5, 3u);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1004D3F20(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1004D3E30(a1 - 288, a2, a3);
}

void sub_1004D3F28(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3 && sub_100442118(a2, 12))
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100933DC8);
    if (!sub_10047250C((uint64_t)off_1009778E0))
    {
      if (qword_100977D80 != -1)
        dispatch_once(&qword_100977D80, &stru_100933EC8);
      sub_1004C4824((uint64_t)off_100977D78, 3, 3u);
    }
  }
}

uint64_t sub_1004D3FC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  NSObject *v5;
  uint32_t v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;
  const char *v12;
  const char *v13;
  uint64_t v15[3];
  _BYTE buf[22];

  memset(v15, 0, sizeof(v15));
  sub_1005C5C20(v15);
  v2 = a1 + 360;
  if (sub_10026AD64(a1 + 360))
  {
    v3 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v4 = "Could not set up virtual call, voice session is already active.";
      v5 = v3;
      v6 = 2;
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v4, buf, v6);
    }
  }
  else if ((sub_10026AB24(a1 + 360) & 1) != 0 || !sub_10026AD34(a1 + 360, 0))
  {
    v9 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      v10 = sub_10026AB24(v2);
      v11 = sub_10026AD34(v2, 0);
      v12 = "";
      v13 = "a call is present";
      if (!v10)
        v13 = "";
      if (!v11)
        v12 = "a call is being set up";
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v13;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v12;
      v4 = "Could not set up virtual call because: %{public}s, %{public}s";
      v5 = v9;
      v6 = 22;
      goto LABEL_19;
    }
  }
  else
  {
    v7 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting up virtual call", buf, 2u);
    }
    sub_10026AB80(a1 + 360, 0);
    if (qword_10097AB08 != -1)
      dispatch_once(&qword_10097AB08, &stru_100933E48);
    sub_1005D4BE4((uint64_t)off_10097AB00);
    if (qword_10097AB08 != -1)
      dispatch_once(&qword_10097AB08, &stru_100933E48);
    sub_1005D4818((uint64_t)off_10097AB00);
    sub_10026AE68(a1 + 360, v15);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v8 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", buf);
    sub_1004D427C(a1, v15, v8);

  }
  *(_QWORD *)buf = v15;
  sub_10026BD18((void ***)buf);
  return 0;
}

void sub_1004D4244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  void *v13;

  a13 = (void **)&a10;
  sub_10026BD18(&a13);
  _Unwind_Resume(a1);
}

void sub_1004D427C(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id *i;
  id v8;
  id *v9;
  id v10;
  id *v11;
  NSObject *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  NSObject *v18;
  _BYTE *v19;
  _BOOL4 v20;
  int v21;
  int v22;
  int v23;
  const char *v24;
  int v25;
  _BYTE *v26;
  _BYTE *v27;
  void **v28;
  const char *v29;
  const char *v30;
  char v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  BOOL v36;
  _BOOL4 v37;
  _BOOL4 v38;
  uint64_t *v39;
  void ***v40;
  id v41;
  uint64_t v42[3];
  uint64_t v43[3];
  uint64_t v44[3];
  uint64_t v45[3];
  uint64_t v46[3];
  std::string __dst;
  _BYTE v48[56];
  std::string v49;
  _BYTE v50[9];
  uint64_t v51[3];
  uint64_t v52[3];
  uint64_t v53[3];
  uint64_t v54[3];
  void *__p[2];
  char v56;
  id *v57;
  id *v58;
  uint64_t v59;
  id *v60;
  id *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  int v67;
  int v68;
  __int16 v69;
  std::string __src;
  std::string v71[2];
  uint64_t v72;
  unsigned __int8 v73;
  _QWORD v74[2];
  _BYTE buf[12];
  char v76;
  _BYTE v77[12];
  __int16 v78;
  int v79;
  __int16 v80;
  _BYTE *v81;
  __int16 v82;
  void **v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  const char *v87;

  v5 = a3;
  v74[0] = 0;
  v74[1] = 0;
  sub_10003415C((uint64_t)v74, a1 + 760);
  v73 = 0;
  v72 = 0;
  memset(v71, 0, sizeof(v71));
  sub_1005D3E2C(v71);
  memset(&__src, 0, sizeof(__src));
  v69 = 0;
  v68 = 0;
  v67 = 0;
  v66 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  sub_1005C5C20(&v63);
  v6 = a1 + 360;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  sub_10026B434(a1 + 360, (int)&v60);
  v57 = 0;
  v58 = 0;
  v59 = 0;
  sub_1005C5C20(&v57);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  sub_1005D4848((uint64_t)off_10097AB00);
  for (i = (id *)*a2; i != (id *)a2[1]; i += 13)
  {
    v8 = *i;
    v9 = sub_1005C5DCC(&v60, v8);

    v10 = *i;
    v11 = sub_1005C5DCC(&v57, v10);

    if (v61 == v9 && v58 == v11)
      sub_1005C5CAC(&v63, (uint64_t)i);
  }
  v13 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    sub_1005C5ED4((uint64_t *)&v60, (std::string *)v77);
    if (SBYTE3(v81) >= 0)
      v14 = v77;
    else
      v14 = *(_BYTE **)v77;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Call(s) in A2DP Expanse: %s", buf, 0xCu);
    if (SBYTE3(v81) < 0)
      operator delete(*(void **)v77);
    v13 = qword_100999808;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    sub_1005C5ED4((uint64_t *)&v57, (std::string *)v77);
    if (SBYTE3(v81) >= 0)
      v15 = v77;
    else
      v15 = *(_BYTE **)v77;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Call(s) in Screening: %s", buf, 0xCu);
    if (SBYTE3(v81) < 0)
      operator delete(*(void **)v77);
    v13 = qword_100999808;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    sub_1005C5ED4(a2, (std::string *)v77);
    if (SBYTE3(v81) >= 0)
      v16 = v77;
    else
      v16 = *(_BYTE **)v77;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Current Call(s): %s", buf, 0xCu);
    if (SBYTE3(v81) < 0)
      operator delete(*(void **)v77);
    v13 = qword_100999808;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    sub_1005C5ED4(&v63, (std::string *)v77);
    v17 = SBYTE3(v81) >= 0 ? v77 : *(_BYTE **)v77;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Filtered Call(s): %s", buf, 0xCu);
    if (SBYTE3(v81) < 0)
      operator delete(*(void **)v77);
  }
  sub_1004DED14(a1, &v63, (_BYTE *)&v69 + 1, &v66, (BOOL *)&v69, &v73, &v68, &v67, v71, &__src);
  v18 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    sub_1005C5ED4(&v63, (std::string *)v77);
    if (SBYTE3(v81) >= 0)
      v19 = v77;
    else
      v19 = *(_BYTE **)v77;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Updating call status for call(s): %s", buf, 0xCu);
    if (SBYTE3(v81) < 0)
      operator delete(*(void **)v77);
    v18 = qword_100999808;
  }
  v20 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
  v21 = v66;
  v22 = v69;
  if (v20)
  {
    v23 = v66;
    v41 = v5;
    if ((_BYTE)v69)
      v24 = "yes";
    else
      v24 = "no";
    sub_10026A9F4(&v67, buf);
    v25 = v76;
    v26 = *(_BYTE **)buf;
    sub_10026A9C4(&v68, __p);
    v27 = buf;
    if (v25 < 0)
      v27 = v26;
    if (v56 >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if (v73)
      v29 = "yes";
    else
      v29 = "no";
    if (HIBYTE(v69))
      v30 = "yes";
    else
      v30 = "no";
    *(_DWORD *)v77 = 136447490;
    *(_QWORD *)&v77[4] = v24;
    v78 = 1024;
    v21 = v23;
    v79 = v23;
    v80 = 2082;
    v81 = v27;
    v82 = 2082;
    v83 = v28;
    v84 = 2082;
    v85 = v29;
    v86 = 2082;
    v87 = v30;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "callPresent: %{public}s, callState: %d, callSetup: %{public}s, heldStatus: %{public}s, heldChanged: %{public}s, visualVoicemail: %{public}s", v77, 0x3Au);
    if (v56 < 0)
      operator delete(__p[0]);
    v5 = v41;
    if (v76 < 0)
      operator delete(*(void **)buf);
  }
  v31 = 1;
  if (!v21 && !v22)
    v31 = HIBYTE(v69) != 0;
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_100933EE8);
  sub_10059CC10((uint64_t)off_10097ABF8, v31);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100933DC8);
  v32 = sub_10047250C((uint64_t)off_1009778E0);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100933DC8);
  v33 = sub_1004726F4((uint64_t)off_1009778E0);
  if (v22)
  {
    if (!v67 && v32 && !v33)
    {
      if (qword_100977D80 != -1)
        dispatch_once(&qword_100977D80, &stru_100933EC8);
      v34 = 4;
LABEL_91:
      sub_1004C4824((uint64_t)off_100977D78, v34, 3u);
    }
  }
  else
  {
    if ((v67 - 1) > 1)
    {
      if (v67)
        goto LABEL_92;
      if (qword_100977D80 != -1)
        dispatch_once(&qword_100977D80, &stru_100933EC8);
      v34 = 3;
      goto LABEL_91;
    }
    if (v32 && !v33)
    {
      if (qword_100977D80 != -1)
        dispatch_once(&qword_100977D80, &stru_100933EC8);
      v34 = 5;
      goto LABEL_91;
    }
  }
LABEL_92:
  sub_10026ACA4(v6, v68);
  sub_10026ACAC(v6, v67);
  sub_1005C5CA8((int)v54);
  sub_10026ADE4(v6, v54);
  *(_QWORD *)v77 = v54;
  sub_10026BD18((void ***)v77);
  if (v22 != sub_10026AB24(v6))
  {
    if (sub_10026AB78(v6))
      sub_10026AB90(v6, 1);
    sub_1004E7840(v53, a1 + 824);
    sub_1004DF3CC(a1, v53, v22);
    sub_10001A82C((uint64_t)v53, (_QWORD *)v53[1]);
    sub_10026AB2C(v6, v22 != 0);
  }
  if (sub_10026AB78(v6))
  {
    sub_10026AB80(v6, 0);
    sub_10026AB2C(v6, v22 != 0);
    if ((v67 - 1) <= 2)
    {
      sub_10026AB98(v6, 1);
      operator new();
    }
    sub_100034264((uint64_t)v74);
    j__usleep(0x1D4C0u);
    sub_100034188((uint64_t)v74);
    sub_10026AB90(v6, 0);
  }
  else if (HIBYTE(v69))
  {
    sub_10026AB2C(v6, 1);
    sub_10026AB80(v6, 1);
    LOBYTE(v21) = v21 & 0xFE;
    v66 = v21;
    v67 = 0;
    sub_10026ACAC(v6, 0);
    sub_1004E7840(v52, a1 + 824);
    sub_1004DF598(a1, v52, (void (*)(_QWORD, _QWORD))sub_1004DF760);
    sub_10001A82C((uint64_t)v52, (_QWORD *)v52[1]);
  }
  v35 = sub_10026AC38(v6, 1);
  v36 = (v21 & 4) == 0 && v35;
  if (v36 || ((v37 = sub_10026AC38(v6, 2), (v21 & 8) == 0) ? (v38 = v37) : (v38 = 0), v38))
    sub_10026ABA8(v6);
  else
    sub_10026AC58(v6, 0);
  v77[0] = 0;
  sub_100043758(v77);
  sub_1001570A4((v22 | HIBYTE(v69)) != 0, v67, v68);
  sub_10004339C(v77);
  if ((v21 & 4) != 0)
  {
    sub_1004E7840(v51, a1 + 824);
    sub_1004DFA94(a1, v51, v67 | (v68 << 8) | 0x10000);
    sub_10001A82C((uint64_t)v51, (_QWORD *)v51[1]);
    if (!v22 && !sub_10026AC60(v6))
    {
      sub_1005D4200(v50);
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        sub_10003430C(&v49, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
      else
        v49 = __src;
      sub_10026ABF4(v6, (uint64_t)v50, &v49, 1);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      sub_1005D4204(v50);
      sub_1004DFC68(a1);
    }
  }
  else
  {
    if ((v21 & 8) != 0)
    {
      if (sub_10026AC60(v6))
        goto LABEL_133;
      sub_1005D4200(v48);
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        sub_10003430C(&__dst, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
      else
        __dst = __src;
      sub_10026ABF4(v6, (uint64_t)v48, &__dst, 2);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      sub_1005D4204(v48);
      sub_1004DFE48(a1);
      sub_1004E7840(v46, a1 + 824);
      v39 = v46;
      sub_1004DFA94(a1, v46, v67 | (v68 << 8));
      goto LABEL_132;
    }
    if ((v21 & 1) != 0)
    {
      sub_1004E7840(v45, a1 + 824);
      v39 = v45;
      sub_1004DFF24(a1, v45, (v73 << 16) | ((-991146299 * ((unint64_t)(v64 - v63) >> 3) == 1) << 24) | (v68 << 8) | v67);
      goto LABEL_132;
    }
    if ((v21 & 2) != 0)
    {
      sub_1004E7840(v44, a1 + 824);
      v39 = v44;
      sub_1004DFA94(a1, v44, v67 | (v68 << 8) | ((-991146299* ((unint64_t)(v64 - v63) >> 3) == 1) << 16));
      goto LABEL_132;
    }
    if (v22 && !v67)
    {
      sub_1004E7840(v43, a1 + 824);
      v39 = v43;
      sub_1004DFF24(a1, v43, (v68 << 8) | (v73 << 16) | v67 | 0x1000000);
LABEL_132:
      sub_10001A82C((uint64_t)v39, (_QWORD *)v39[1]);
      goto LABEL_133;
    }
    if (!v22 && !v67)
    {
      sub_1004E7840(v42, a1 + 824);
      v39 = v42;
      sub_1004E00F0(a1, v42, v67);
      goto LABEL_132;
    }
  }
LABEL_133:
  v40 = (void ***)sub_100043728(v77);
  *(_QWORD *)v77 = &v57;
  sub_10026BD18(v40);
  *(_QWORD *)v77 = &v60;
  sub_10026BD18((void ***)v77);
  *(_QWORD *)v77 = &v63;
  sub_10026BD18((void ***)v77);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  sub_1005D4204(v71);
  sub_100034234((uint64_t)v74);

}

void sub_1004D4EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a68;
  char a71;
  void *v71;
  uint64_t v72;

  sub_10001A82C((uint64_t)&a14, (_QWORD *)a15);
  sub_100043728((_BYTE *)(v72 - 176));
  *(_QWORD *)(v72 - 176) = &a65;
  sub_10026BD18((void ***)(v72 - 176));
  *(_QWORD *)(v72 - 176) = &a68;
  sub_10026BD18((void ***)(v72 - 176));
  *(_QWORD *)(v72 - 176) = &a71;
  sub_10026BD18((void ***)(v72 - 176));
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  sub_1005D4204(&STACK[0x230]);
  sub_100034234(v72 - 224);

  _Unwind_Resume(a1);
}

uint64_t sub_1004D50F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;
  __int16 v12;
  uint64_t v13;

  v5 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    if (v9 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v11 = v6;
    v12 = 2082;
    v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received set voice command external event for device %{public}s with value %{public}s", buf, 0x16u);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

uint64_t sub_1004D51DC(_QWORD *a1, uint64_t a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  _BYTE *v19;
  uint64_t v21;
  int v23;
  NSObject *v24;
  void **v25;
  NSObject *v26;
  void **v27;
  NSObject *v28;
  void **v29;
  NSObject *v30;
  const char *v31;
  void **v32;
  NSObject *v33;
  NSObject *v34;
  _BOOL8 v35;
  void **v36;
  NSObject *v37;
  void **v38;
  NSObject *v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  NSObject *v45;
  void **v46;
  const char *v47;
  uint64_t v48;
  NSObject *v49;
  __int16 v50;
  __int16 v51;
  NSObject *v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  const char *v57;
  NSObject *v58;
  uint32_t v59;
  NSObject *v60;
  void **v61;
  NSObject *v62;
  void **v63;
  uint64_t v64;
  void **v65;
  void **v66;
  unsigned __int8 v67;
  int v68;
  int v69;
  int v70;
  int v71;
  NSObject *v72;
  void **v73;
  int v74;
  int v75;
  uint64_t *v76;
  const char *v77;
  NSObject *v78;
  uint32_t v79;
  const char *v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  void *v85[2];
  char v86;
  char v87;
  _QWORD v88[2];
  uint8_t v89[4];
  void **v90;
  void *__p[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint8_t buf[4];
  _BYTE v99[18];

  v88[0] = 0;
  v88[1] = 0;
  sub_10003415C((uint64_t)v88, (uint64_t)(a1 + 95));
  v4 = (unsigned __int16 *)(a2 + 4);
  v5 = sub_1004D1420((uint64_t)a1, *(unsigned __int16 *)(a2 + 4));
  if (!v5)
  {
    if (*(_DWORD *)a2 >= 2u)
    {
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FAE04();
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      sub_100155758(*v4, 2701);
LABEL_28:
      v19 = __p;
      goto LABEL_29;
    }
    v6 = *(_QWORD *)(a2 + 8);
    LODWORD(__p[0]) = *(_DWORD *)v6;
    WORD2(__p[0]) = *(_WORD *)(v6 + 4);
    if (!LOBYTE(__p[0]))
    {
      v7 = 1;
      while (v7 != 6)
      {
        if (*((unsigned __int8 *)__p + v7++))
        {
          if ((unint64_t)(v7 - 2) < 5)
            goto LABEL_10;
          break;
        }
      }
      v9 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
        sub_1006FAD90(v9, v10, v11);
LABEL_10:
      v21 = 1;
      do
      {
        if (v21 == 6)
          goto LABEL_34;
      }
      while (!*((unsigned __int8 *)__p + v21++));
      if ((unint64_t)(v21 - 2) >= 5)
      {
LABEL_34:
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          sub_1006FA994();
        buf[0] = 0;
        sub_100043758(buf);
        sub_100155758(*v4, 2701);
        v19 = buf;
LABEL_29:
        sub_100043728(v19);
        return sub_100034234((uint64_t)v88);
      }
    }
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100933DC8);
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_WORD *)(v12 + 4);
    *(_DWORD *)buf = *(_DWORD *)v12;
    *(_WORD *)v99 = v13;
    v5 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  }
  v14 = *(_DWORD *)a2;
  switch(*(_DWORD *)a2)
  {
    case 0:
      v44 = sub_100481EC8((uint64_t)a1, v5);
      v45 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_10043E5F8(v5, __p);
          v46 = (void **)__p[0];
          v47 = "denying";
          if ((SBYTE7(v92) & 0x80u) == 0)
            v46 = __p;
          if (v44)
            v47 = "accepting";
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)v99 = v46;
          *(_WORD *)&v99[8] = 2082;
          *(_QWORD *)&v99[10] = v47;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Received incoming handsfree connection request for device %{public}s - %{public}s request", buf, 0x16u);
          if (SBYTE7(v92) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v80 = "denying";
          if (v44)
            v80 = "accepting";
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)v99 = "NULL";
          *(_WORD *)&v99[8] = 2082;
          *(_QWORD *)&v99[10] = v80;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Received incoming handsfree connection request for device %{public}s - %{public}s request", buf, 0x16u);
        }
      }
      v81 = sub_1000438A4();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 2512))(v81))
        v82 = sub_100455920(v5);
      else
        v82 = 0;
      LOBYTE(v85[0]) = 0;
      sub_100043758(v85);
      v83 = sub_10015B844(*v4, v44);
      if (v83)
        v84 = 0;
      else
        v84 = v82;
      if (v84 == 1
        && sub_10025A290(v5 + 128)
        && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v5, __p);
        sub_1006FAAE0();
      }
      sub_10004339C(v85);
      if (v83 && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FAA58(v44);
      if (v44)
        sub_1004816DC(a1, v5);
      v19 = v85;
      goto LABEL_29;
    case 1:
      if (*(_QWORD *)(a2 + 8))
      {
        v48 = *(unsigned int *)(a2 + 16);
        v49 = qword_100999808;
        if ((_DWORD)v48)
        {
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          {
            sub_10043E5F8(v5, buf);
            sub_1006FAB54();
          }
          v50 = sub_10026AA54((uint64_t)(a1 + 45));
          v87 = 0;
          sub_100043758(&v87);
          v51 = sub_100155660(*v4);
          sub_10004339C(&v87);
          if ((_DWORD)v48 == 1814 && (v50 & 0x400) != 0 && (v51 & 0x100) != 0)
          {
            v97 = 0;
            v95 = 0u;
            v96 = 0u;
            v93 = 0u;
            v94 = 0u;
            *(_OWORD *)__p = 0u;
            v92 = 0u;
            if (sub_100449DC8(v5, 1, 413, 1814, (uint64_t)__p))
            {
              v52 = qword_100999808;
              if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
              {
                sub_10043E5F8(v5, v85);
                v53 = v86 >= 0 ? v85 : (void **)v85[0];
                *(_DWORD *)v89 = 136315138;
                v90 = v53;
                _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Submitting contextual metric for event 'BT_HANDSFREE_TIMEOUT_SLC_BIND_RED_FLAG' for %s", v89, 0xCu);
                if (v86 < 0)
                  operator delete(v85[0]);
              }
              v54 = sub_100065478();
              (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v54 + 248))(v54, __p, *(unsigned __int8 *)(v5 + 1308));
            }
          }
          sub_100043728(&v87);
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v5, __p);
            v73 = (SBYTE7(v92) & 0x80u) == 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v99 = v73;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Received SLC connection complete event for device %{public}s", buf, 0xCu);
            if (SBYTE7(v92) < 0)
              operator delete(__p[0]);
          }
          sub_1004CD8E4((uint64_t)a1, v5, *v4);
        }
        if (qword_100977A58 != -1)
          dispatch_once(&qword_100977A58, &stru_100933D68);
        v74 = sub_1004A35C0((uint64_t)off_100977A50, v48, 20000);
        sub_10048183C((uint64_t)a1, v5, v74);
      }
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FAB28();
      return sub_100034234((uint64_t)v88);
    case 2:
      v23 = *(_DWORD *)(a2 + 8);
      v24 = qword_100999808;
      if ((v23 & 0xFFFFFFFE) == 0x39E)
      {
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          if (v5)
          {
            sub_10043E5F8(v5, __p);
            if ((SBYTE7(v92) & 0x80u) == 0)
              v25 = __p;
            else
              v25 = (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v99 = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Received handsfree disconnection event for device %{public}s", buf, 0xCu);
            if (SBYTE7(v92) < 0)
              operator delete(__p[0]);
          }
          else
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v99 = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Received handsfree disconnection event for device %{public}s", buf, 0xCu);
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      {
        if (v5)
        {
          sub_10043E5F8(v5, __p);
          sub_1006FABE0();
        }
        else
        {
          sub_1006FAB9C(buf, v23);
        }
      }
      sub_1004D34D8((uint64_t)a1, *v4, v23);
      return sub_100034234((uint64_t)v88);
    case 3:
    case 4:
    case 5:
    case 6:
    case 0x11:
    case 0x12:
    case 0x1B:
    case 0x1C:
      sub_1004D6650((uint64_t)a1, a2);
      return sub_100034234((uint64_t)v88);
    case 8:
    case 9:
    case 0xF:
    case 0x16:
      v15 = sub_1004D891C((uint64_t)a1, a2);
      goto LABEL_21;
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x13:
      v15 = sub_1004D8364((uint64_t)a1, (int *)a2);
      goto LABEL_21;
    case 0xD:
      v26 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_10043E5F8(v5, __p);
          if ((SBYTE7(v92) & 0x80u) == 0)
            v27 = __p;
          else
            v27 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v99 = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Received voice recognition event from device %{public}s", buf, 0xCu);
          if (SBYTE7(v92) < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v99 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Received voice recognition event from device %{public}s", buf, 0xCu);
        }
      }
      sub_1002A8D18(3);
      v15 = sub_1004D9464((uint64_t)a1, *(unsigned __int16 *)(a2 + 4), *(unsigned __int8 *)(a2 + 8));
      goto LABEL_21;
    case 0xE:
      v60 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_10043E5F8(v5, __p);
          if ((SBYTE7(v92) & 0x80u) == 0)
            v61 = __p;
          else
            v61 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v99 = v61;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Received unsupported handsfree event (voice tag retrieval) from device %{public}s", buf, 0xCu);
          if (SBYTE7(v92) < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v99 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Received unsupported handsfree event (voice tag retrieval) from device %{public}s", buf, 0xCu);
        }
      }
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      if (sub_1001567FC(*v4, 0))
      {
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          sub_1006FAC28();
        v16 = 0;
      }
      else
      {
        v16 = 255;
      }
      sub_100043728(__p);
      goto LABEL_22;
    case 0x10:
      v28 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_10043E5F8(v5, __p);
          if ((SBYTE7(v92) & 0x80u) == 0)
            v29 = __p;
          else
            v29 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v99 = v29;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Received EC/NR disable event from device %{public}s", buf, 0xCu);
          if (SBYTE7(v92) < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v99 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Received EC/NR disable event from device %{public}s", buf, 0xCu);
        }
      }
      v15 = sub_1004D9424((uint64_t)a1, *v4);
      goto LABEL_21;
    case 0x14:
      v30 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(a2 + 8))
          v31 = "enable";
        else
          v31 = "disable";
        if (v5)
        {
          sub_10043E5F8(v5, __p);
          if ((SBYTE7(v92) & 0x80u) == 0)
            v32 = __p;
          else
            v32 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)v99 = v31;
          *(_WORD *)&v99[8] = 2082;
          *(_QWORD *)&v99[10] = v32;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Received call waiting %{public}s event from device %{public}s", buf, 0x16u);
          if (SBYTE7(v92) < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)v99 = v31;
          *(_WORD *)&v99[8] = 2082;
          *(_QWORD *)&v99[10] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Received call waiting %{public}s event from device %{public}s", buf, 0x16u);
        }
      }
      v75 = *(unsigned __int8 *)(a2 + 8);
      v76 = sub_1004CCD90((uint64_t)a1, *(unsigned __int16 *)(a2 + 4));
      if (v76)
      {
        sub_10026B95C((uint64_t)(v76 + 50), v75 != 0);
        v16 = 255;
      }
      else
      {
        v16 = 0;
      }
      goto LABEL_22;
    case 0x15:
      v33 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FAC88(a2, v33);
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      sub_10015BEF4(*(unsigned __int16 *)(a2 + 4), *(_DWORD *)(a2 + 12));
      goto LABEL_28;
    case 0x17:
      v62 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_10043E5F8(v5, __p);
          if ((SBYTE7(v92) & 0x80u) == 0)
            v63 = __p;
          else
            v63 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v99 = v63;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Received network operator request event from device %{public}s", buf, 0xCu);
          if (SBYTE7(v92) < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v99 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Received network operator request event from device %{public}s", buf, 0xCu);
        }
      }
      v15 = sub_1004D91C8((uint64_t)a1, *v4);
      goto LABEL_21;
    case 0x18:
      v34 = qword_100999808;
      v35 = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT);
      if (v35)
      {
        if (v5)
        {
          sub_10043E5F8(v5, __p);
          if ((SBYTE7(v92) & 0x80u) == 0)
            v36 = __p;
          else
            v36 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v99 = v36;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Received subscriber number request event from device %{public}s", buf, 0xCu);
          if (SBYTE7(v92) < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v99 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Received subscriber number request event from device %{public}s", buf, 0xCu);
        }
      }
      v15 = sub_1004D8F54(v35, *v4);
      goto LABEL_21;
    case 0x19:
      v64 = qword_100999808;
      if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        goto LABEL_201;
      if (!v5)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v99 = "NULL";
        v77 = "Received unsupported handsfree event (response and hold query) from device %{public}s";
        goto LABEL_199;
      }
      sub_10043E5F8(v5, __p);
      if ((SBYTE7(v92) & 0x80u) == 0)
        v65 = __p;
      else
        v65 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v99 = v65;
      v57 = "Received unsupported handsfree event (response and hold query) from device %{public}s";
      goto LABEL_152;
    case 0x1A:
      v64 = qword_100999808;
      if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        goto LABEL_201;
      if (!v5)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v99 = "NULL";
        v77 = "Received unsupported handsfree event (response and hold) from device %{public}s";
LABEL_199:
        v78 = v64;
        v79 = 12;
        goto LABEL_200;
      }
      sub_10043E5F8(v5, __p);
      if ((SBYTE7(v92) & 0x80u) == 0)
        v66 = __p;
      else
        v66 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v99 = v66;
      v57 = "Received unsupported handsfree event (response and hold) from device %{public}s";
LABEL_152:
      v58 = v64;
      v59 = 12;
      goto LABEL_153;
    case 0x1D:
      v37 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_10043E5F8(v5, __p);
          if ((SBYTE7(v92) & 0x80u) == 0)
            v38 = __p;
          else
            v38 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v99 = v38;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Received HF indicator event from device %{public}s", buf, 0xCu);
          if (SBYTE7(v92) < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v99 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Received HF indicator event from device %{public}s", buf, 0xCu);
        }
      }
      v15 = sub_1004D96B4((uint64_t)a1, a2);
LABEL_21:
      v16 = v15;
      goto LABEL_22;
    case 0x1E:
      v39 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v5, __p);
        v40 = (SBYTE7(v92) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v99 = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Received AOS Setup Complete from device %{public}s", buf, 0xCu);
        if (SBYTE7(v92) < 0)
          operator delete(__p[0]);
      }
      v41 = sub_10019AEA4(v5 + 128);
      v42 = sub_1004CD6C4((uint64_t)a1, v5);
      switch((_DWORD)v42)
      {
        case 0x7F:
          v67 = 0;
          v68 = 60;
          v69 = 4;
          v70 = 12;
          v71 = 60;
LABEL_162:
          sub_1004CD23C((uint64_t)a1, 0, *v4, v41, v70, v69, v68, v71, v67);
          return sub_100034234((uint64_t)v88);
        case 0x81:
          v67 = 3;
          v71 = 360;
          v68 = 240;
          v69 = 6;
          v70 = 24;
          goto LABEL_162;
        case 0x82:
          v43 = sub_1004CCD90((uint64_t)a1, *v4);
          *((_WORD *)v43 + 286) = 0;
          v43[72] = 0;
          sub_1004CD23C((uint64_t)a1, 0, *v4, v41, 24, 6, 240, 360, 3u);
          break;
        default:
          v72 = qword_100999808;
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
            sub_1006FAD08(v42, v72);
          break;
      }
      return sub_100034234((uint64_t)v88);
    default:
      v55 = qword_100999808;
      if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        goto LABEL_201;
      if (v5)
      {
        sub_10043E5F8(v5, __p);
        if ((SBYTE7(v92) & 0x80u) == 0)
          v56 = __p;
        else
          v56 = (void **)__p[0];
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)v99 = v14;
        *(_WORD *)&v99[4] = 2082;
        *(_QWORD *)&v99[6] = v56;
        v57 = "Received unsupported handsfree event (%d) from device %{public}s";
        v58 = v55;
        v59 = 18;
LABEL_153:
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, v57, buf, v59);
        if (SBYTE7(v92) < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)v99 = v14;
        *(_WORD *)&v99[4] = 2082;
        *(_QWORD *)&v99[6] = "NULL";
        v77 = "Received unsupported handsfree event (%d) from device %{public}s";
        v78 = v55;
        v79 = 18;
LABEL_200:
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, v77, buf, v79);
      }
LABEL_201:
      v16 = 4;
LABEL_22:
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      v17 = *v4;
      if ((_DWORD)v16 == 255)
        v18 = sub_100155758(v17, 0);
      else
        v18 = sub_1001557E4(v17, 2707, v16);
      if (v18 && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FA9F8();
      goto LABEL_28;
  }
}

void sub_1004D64CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_100043728(&a17);
  sub_100034234((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1004D6650(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  void **v11;
  NSObject *v12;
  unsigned int v13;
  void **v14;
  int v15;
  int v16;
  unsigned int v17;
  NSObject *v18;
  int v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t **v26;
  void **v27;
  int v28;
  NSObject *v29;
  void **v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  void **v35;
  NSObject *v36;
  NSObject *v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  NSObject *v42;
  void **v43;
  NSObject *v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  NSObject *v64;
  int v65;
  NSObject *v66;
  uint64_t v67;
  NSObject *v68;
  const char *v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  NSObject *v74;
  NSObject *v75;
  void **v76;
  NSObject *v77;
  void **v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  void **v85;
  NSObject *v86;
  const char *v87;
  void **v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  __n128 v93;
  int v94;
  __n128 v95;
  _BYTE buf[18];
  char v97;
  uint8_t v98[4];
  const char *v99;
  void *__p[2];
  void *v101[2];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _QWORD v106[6];
  __int128 v107;
  uint64_t v108;

  v4 = sub_1004CCD90(a1, *(unsigned __int16 *)(a2 + 4));
  v5 = (uint64_t)(v4 + 50);
  v6 = sub_10026B8EC((uint64_t)(v4 + 50));
  v7 = v6;
  v8 = *(_DWORD *)a2;
  if (*(int *)a2 <= 16)
  {
    v9 = v8 - 3;
    v8 = a1 + 360;
    switch(v9)
    {
      case 0:
        v10 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          if (v7)
          {
            sub_10043E5F8(v7, __p);
            if (SHIBYTE(v101[0]) >= 0)
              v11 = __p;
            else
              v11 = (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received audio connection request event from device %{public}s", buf, 0xCu);
            if (SHIBYTE(v101[0]) < 0)
              operator delete(__p[0]);
          }
          else
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received audio connection request event from device %{public}s", buf, 0xCu);
          }
        }
        sub_10026B91C(v5, 3);
        v108 = 0;
        v107 = 0u;
        memset(v106, 0, sizeof(v106));
        v104 = 0u;
        v105 = 0u;
        v103 = 0u;
        *(_OWORD *)v101 = 0u;
        v102 = 0u;
        *(_OWORD *)__p = 0u;
        sub_1005BCCCC((uint64_t)__p + 1);
        BYTE2(v101[0]) = 0;
        BYTE4(v101[0]) = 0;
        BYTE2(v103) = 0;
        BYTE4(v103) = 0;
        HIDWORD(v106[2]) = 0;
        v102 = 0uLL;
        v101[1] = 0;
        LOBYTE(v103) = 0;
        v104 = 0uLL;
        *((_QWORD *)&v103 + 1) = 0;
        LOBYTE(v105) = 0;
        v106[0] = 0;
        v106[1] = 0;
        *((_QWORD *)&v105 + 1) = 0;
        *(_DWORD *)((char *)&v106[1] + 7) = 0;
        LOBYTE(v106[3]) = 1;
        BYTE2(v108) = 0;
        *(_QWORD *)((char *)&v106[3] + 6) = 0;
        *(_QWORD *)((char *)&v106[3] + 1) = 0;
        v107 = 0uLL;
        v106[5] = 0;
        LOBYTE(v108) = 0;
        v62 = sub_1004419F4(v7, (uint64_t)__p);
        if (BYTE1(v106[3]))
          v63 = v62;
        else
          v63 = 0;
        if (v63 && sub_10026ACF0(a1 + 360))
        {
          v64 = qword_100999808;
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "Hack for Mercedes kicking in... auto-accepting then pulling back audio", buf, 2u);
          }
          sub_10026BABC(v5, 1);
          j__usleep(0x2710u);
          buf[0] = 0;
          sub_100043758(buf);
          v65 = sub_1001576D4(*(unsigned __int16 *)(a2 + 4), 1);
          sub_10004339C(buf);
LABEL_128:
          sub_100043728(buf);
          goto LABEL_196;
        }
        if (sub_10026AB78(a1 + 360))
        {
          v66 = qword_100999808;
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Denying audio request as we are in a virtual call", buf, 2u);
          }
          buf[0] = 0;
          sub_100043758(buf);
          v65 = sub_1001576D4(*(unsigned __int16 *)(a2 + 4), 0);
          sub_10004339C(buf);
          goto LABEL_128;
        }
        if ((sub_10026AB24(a1 + 360) & 1) != 0
          || sub_10026AAFC(a1 + 360)
          || sub_10026AB04(a1 + 360)
          || sub_10026AAEC(a1 + 360))
        {
          v68 = qword_100999808;
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
          {
            if (v7)
            {
              sub_10043E5F8(v7, buf);
              if (v97 >= 0)
                v69 = buf;
              else
                v69 = *(const char **)buf;
              *(_DWORD *)v98 = 136446210;
              v99 = v69;
              _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Call is present, notify CoreAudio to accept audio request from device %{public}s", v98, 0xCu);
              if (v97 < 0)
                operator delete(*(void **)buf);
            }
            else
            {
              *(_DWORD *)v98 = 136446210;
              v99 = "NULL";
              _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Call is present, notify CoreAudio to accept audio request from device %{public}s", v98, 0xCu);
            }
          }
          sub_10057CD58((uint64_t)v4, 1, 0);
          v65 = 0;
        }
        else
        {
          v86 = qword_100999808;
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
          {
            if (v7)
            {
              sub_10043E5F8(v7, buf);
              if (v97 >= 0)
                v87 = buf;
              else
                v87 = *(const char **)buf;
              *(_DWORD *)v98 = 136446210;
              v99 = v87;
              _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "We're not in a call, rejecting audio request from device %{public}s", v98, 0xCu);
              if (v97 < 0)
                operator delete(*(void **)buf);
            }
            else
            {
              *(_DWORD *)v98 = 136446210;
              v99 = "NULL";
              _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "We're not in a call, rejecting audio request from device %{public}s", v98, 0xCu);
            }
          }
          sub_1004D9AF8(a1, v7);
          sub_10026B91C(v5, 0);
          v65 = 0;
        }
LABEL_196:
        if (SHIBYTE(v106[1]) < 0)
          operator delete(*((void **)&v105 + 1));
        if (SHIBYTE(v104) < 0)
          operator delete(*((void **)&v103 + 1));
        if (SHIBYTE(v102) < 0)
          operator delete(v101[1]);
        nullsub_90((char *)__p + 1, v67);
        if (v65)
          goto LABEL_203;
        return;
      case 1:
        v34 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          if (v7)
          {
            sub_10043E5F8(v7, __p);
            if (SHIBYTE(v101[0]) >= 0)
              v35 = __p;
            else
              v35 = (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v35;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Received audio codec connection request event from device %{public}s", buf, 0xCu);
            if (SHIBYTE(v101[0]) < 0)
              operator delete(__p[0]);
          }
          else
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Received audio codec connection request event from device %{public}s", buf, 0xCu);
          }
        }
        sub_10026B91C(v5, 4);
        if (sub_10026AB78(a1 + 360))
        {
          v74 = qword_100999808;
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Denying audio request as we are in a virtual call", (uint8_t *)__p, 2u);
          }
          goto LABEL_152;
        }
        if ((sub_10026AB24(a1 + 360) & 1) != 0
          || sub_10026AAFC(a1 + 360)
          || sub_10026AB04(a1 + 360)
          || sub_10026AAEC(a1 + 360))
        {
          v75 = qword_100999808;
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
          {
            if (v7)
            {
              sub_10043E5F8(v7, __p);
              if (SHIBYTE(v101[0]) >= 0)
                v76 = __p;
              else
                v76 = (void **)__p[0];
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v76;
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "Call is present, notify CoreAudio to accept audio request from device %{public}s", buf, 0xCu);
              if (SHIBYTE(v101[0]) < 0)
                operator delete(__p[0]);
            }
            else
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "NULL";
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "Call is present, notify CoreAudio to accept audio request from device %{public}s", buf, 0xCu);
            }
          }
          LOBYTE(__p[0]) = 0;
          sub_100043758(__p);
          v71 = sub_100155758(*(unsigned __int16 *)(a2 + 4), 0);
          sub_10004339C(__p);
          sub_10057CD58((uint64_t)v4, 1, v71);
          goto LABEL_192;
        }
        v84 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          if (v7)
          {
            sub_10043E5F8(v7, __p);
            if (SHIBYTE(v101[0]) >= 0)
              v85 = __p;
            else
              v85 = (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v85;
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "We're not in a call, rejecting audio request from device %{public}s", buf, 0xCu);
            if (SHIBYTE(v101[0]) < 0)
              operator delete(__p[0]);
          }
          else
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "We're not in a call, rejecting audio request from device %{public}s", buf, 0xCu);
          }
        }
        sub_1004D9AF8(a1, v7);
        sub_10026B91C(v5, 0);
        return;
      case 2:
        if (!sub_10026BAC4(v5))
        {
          v91 = *(_DWORD *)(a2 + 8);
          v39 = sub_10026B0C0(a1 + 360);
          if (v39)
          {
            v40 = sub_10026B0C0(a1 + 360);
            v41 = sub_10026AF10(v40);
          }
          else
          {
            v41 = 0;
          }
          v90 = *(unsigned __int16 *)(a2 + 4);
          v77 = qword_100999808;
          if (v4 && !v91 && v7)
          {
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(v7, __p);
              v78 = SHIBYTE(v101[0]) >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v78;
              _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Received voice audio connected event for device %{public}s", buf, 0xCu);
              if (SHIBYTE(v101[0]) < 0)
                operator delete(__p[0]);
            }
            sub_10026B91C(v5, 5);
            if (v39)
            {
              v79 = qword_100999808;
              if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(__p[0]) = 67109376;
                HIDWORD(__p[0]) = v41;
                LOWORD(__p[1]) = 1024;
                *(_DWORD *)((char *)&__p[1] + 2) = v90;
                _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "A route change was pending on hfpHandle %d and we got an audio connected event on hfpHandle %d, clearing pending route change", (uint8_t *)__p, 0xEu);
              }
              sub_10026A8B0(a1 + 360);
            }
            sub_10026BA94(v5, 1);
            v80 = *(unsigned __int16 *)(v7 + 132);
            v81 = *(unsigned int *)(v7 + 128);
            v82 = sub_1000438A4();
            v83 = sub_10043F854(v7);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 80))(v82, (v81 | (v80 << 32)) & 0xFFFFFFFFFFFFLL, v83, 1, 1, 1, 1, 0);
            *(_DWORD *)(v7 + 1312) |= 1u;
            *(_BYTE *)(v7 + 1352) = 0;
            __p[0] = 0;
            sub_10004AD30((uint64_t)__p);
            v95.n128_u64[0] = SLODWORD(__p[0]);
            v95.n128_u64[1] = SWORD2(__p[0]);
            sub_10026BCB4(v5, &v95);
            sub_10026B8EC(v5);
            sub_1004827CC();
          }
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          {
            if (v7)
            {
              sub_10043E5F8(v7, __p);
              if (SHIBYTE(v101[0]) >= 0)
                v88 = __p;
              else
                v88 = (void **)__p[0];
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = v88;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v91;
              _os_log_error_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "Received audio connection failure event for device %{public}s with result %{bluetooth:OI_STATUS}u", buf, 0x12u);
              if (SHIBYTE(v101[0]) < 0)
                operator delete(__p[0]);
            }
            else
            {
              sub_1006FAF34(buf, v91);
            }
          }
          sub_1004D9C7C();
          sub_10026B91C(v5, 0);
          ++*(_BYTE *)(v7 + 1352);
          sub_10026B8EC(v5);
          if (qword_100977A58 != -1)
            dispatch_once(&qword_100977A58, &stru_100933D68);
          sub_1004A35C0((uint64_t)off_100977A50, *(unsigned int *)(a2 + 8), 10000);
          sub_1004827CC();
        }
        j__usleep(0x4E20u);
        LOBYTE(__p[0]) = 0;
        sub_100043758(__p);
        v28 = sub_10015C22C(*(unsigned __int16 *)(a2 + 4));
        sub_10004339C(__p);
        if (v28 && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          sub_1006FAED4();
        v27 = __p;
        goto LABEL_30;
      case 3:
        sub_10026B8F4(v5, 0);
        sub_10026BB04(v5, 0);
        sub_10026BB14(v5, 0);
        if (sub_10026BAC4(v5))
        {
          v36 = qword_100999808;
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Hack for Mercedes finished", (uint8_t *)__p, 2u);
          }
          sub_10026BABC(v5, 0);
          return;
        }
        if (sub_10026BA7C(v5) && sub_10026B5EC(v5))
        {
          v42 = qword_100999808;
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
          {
            if (v7)
            {
              sub_10043E5F8(v7, __p);
              if (SHIBYTE(v101[0]) >= 0)
                v43 = __p;
              else
                v43 = (void **)__p[0];
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v43;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Device %{public}s routed away audio after ending call. Ignore route away and allowing audio layer to close session on its own.", buf, 0xCu);
              if (SHIBYTE(v101[0]) < 0)
                operator delete(__p[0]);
            }
            else
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "NULL";
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Device %{public}s routed away audio after ending call. Ignore route away and allowing audio layer to close session on its own.", buf, 0xCu);
            }
          }
          sub_10026BA84(v5, 0);
          return;
        }
        sub_10026B91C(v5, 0);
        v44 = qword_100999808;
        if (v7)
        {
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v7, __p);
            v45 = SHIBYTE(v101[0]) >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v45;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Received voice disconnection event for device %{public}s", buf, 0xCu);
            if (SHIBYTE(v101[0]) < 0)
              operator delete(__p[0]);
          }
          v89 = *(unsigned __int8 *)(v7 + 128);
          v92 = *(unsigned __int8 *)(v7 + 129);
          v46 = *(unsigned __int8 *)(v7 + 130);
          v47 = *(unsigned __int8 *)(v7 + 131);
          v48 = *(unsigned __int8 *)(v7 + 132);
          v49 = *(unsigned __int8 *)(v7 + 133);
          v50 = sub_1000438A4();
          v51 = sub_10043F854(v7);
          v52 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v50 + 80))(v50, ((unint64_t)v92 << 8) | ((unint64_t)v46 << 16) | ((unint64_t)v47 << 24) | (v48 << 32) | (v49 << 40) | v89, v51, 1, 0, 1, 1, 0);
          sub_1004D9CF0(v52, (v89 << 40) | (v92 << 32) | (v46 << 24) | (v47 << 16) | (v48 << 8) | v49, 0);
          v53 = sub_10003BE44();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v53 + 328))(v53)
            && sub_100442118(v7, 0)
            && sub_100442118(v7, 1)
            && sub_100442118(v7, 3))
          {
            v54 = qword_100999808;
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(v7, __p);
              v55 = SHIBYTE(v101[0]) >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v55;
              _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Notify gizmo to reform triangle for device %{public}s if warranted", buf, 0xCu);
              if (SHIBYTE(v101[0]) < 0)
                operator delete(__p[0]);
            }
            if (qword_100977A88 != -1)
              dispatch_once(&qword_100977A88, &stru_100933E08);
            sub_100285A58((uint64_t)off_100977A80, v7);
          }
          v56 = sub_1000438A4();
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 1240))(v56);
          *(_DWORD *)v98 = 0;
          v94 = 0;
          v57 = sub_100027F68();
          sub_100091AE8(__p, "HFP");
          sub_100091AE8(buf, "DisableWBS");
          (*(void (**)(uint64_t, void **, _BYTE *, uint8_t *))(*(_QWORD *)v57 + 88))(v57, __p, buf, v98);
          if (v97 < 0)
            operator delete(*(void **)buf);
          if (SHIBYTE(v101[0]) < 0)
            operator delete(__p[0]);
          v58 = sub_100027F68();
          sub_100091AE8(__p, "HFP");
          sub_100091AE8(buf, "DisableUWBS");
          (*(void (**)(uint64_t, void **, _BYTE *, int *))(*(_QWORD *)v58 + 88))(v58, __p, buf, &v94);
          if (v97 < 0)
            operator delete(*(void **)buf);
          if (SHIBYTE(v101[0]) < 0)
            operator delete(__p[0]);
          if (!*(_DWORD *)v98 || !v94)
          {
            if (sub_10026B9CC(v5))
            {
              sub_1000438A4();
              if (sub_100331090())
              {
                v59 = sub_1000438A4();
                (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v59 + 304))(v59, v7, 0, 1);
              }
            }
          }
          sub_1004D9C7C();
          *(_DWORD *)(v7 + 1312) &= ~1u;
          if (sub_10026BCAC(v5) == 1919115628)
          {
            __p[0] = 0;
            sub_10004AD30((uint64_t)__p);
            v60 = SLODWORD(__p[0]);
            sub_10026BCCC(v5, (__n128 *)__p);
            if (v60 - (unint64_t)__p[0] > 0x3C)
            {
              *((_BYTE *)v4 + 568) = 0;
            }
            else
            {
              v61 = ++*((_BYTE *)v4 + 568);
              if (v61 >= 5)
              {
                sub_10026B8EC(v5);
                if (qword_100977A58 != -1)
                  dispatch_once(&qword_100977A58, &stru_100933D68);
                sub_1004A35C0((uint64_t)off_100977A50, *(unsigned int *)(a2 + 8), 10000);
                sub_1004827CC();
              }
            }
          }
          v93 = 0uLL;
          sub_10026BCB4(v5, &v93);
          sub_10026B8EC(v5);
          if (qword_100977A58 != -1)
            dispatch_once(&qword_100977A58, &stru_100933D68);
          sub_1004A35C0((uint64_t)off_100977A50, *(unsigned int *)(a2 + 8), 10000);
          sub_1004827CC();
        }
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          sub_1006FAF78();
        goto LABEL_203;
      default:
        goto LABEL_54;
    }
  }
  if (v8 > 26)
  {
    if (v8 == 27)
    {
      if (*(_DWORD *)(a2 + 8) == 2)
      {
        v6 = sub_10026B9CC(v5);
        if ((_DWORD)v6)
        {
          v32 = sub_10003BE44();
          v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 792))(v32, 6);
          if ((_DWORD)v6)
          {
            v33 = sub_1000438A4();
            v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 304))(v33, v7, 1, 1);
          }
        }
      }
      sub_1004D0D94(v6, *(unsigned __int16 *)(a2 + 4), 0);
    }
    if (v8 == 28)
    {
      LOBYTE(v94) = 0;
      sub_100043758(&v94);
      *(_WORD *)buf = *(_WORD *)(a2 + 4);
      v16 = *(unsigned __int16 *)buf;
      v17 = sub_1001556DC(*(unsigned __int16 *)buf);
      sub_10004339C(&v94);
      v18 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *(_DWORD *)(a2 + 8);
        LODWORD(__p[0]) = 67109632;
        HIDWORD(__p[0]) = v19;
        LOWORD(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 2) = v16;
        HIWORD(__p[1]) = 1024;
        LODWORD(v101[0]) = (unsigned __int16)v17;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Got new list of available codecs 0x%x for handle %d, customCodecMask 0x%x", (uint8_t *)__p, 0x14u);
      }
      __p[0] = buf;
      v20 = sub_1002BB704((uint64_t **)(a1 + 824), (unsigned __int16 *)buf, (uint64_t)&unk_100740F58, (_WORD **)__p);
      sub_10026BA04((uint64_t)(v20[5] + 50), (v17 & 4) != 0);
      sub_10057CF24((uint64_t)v4, (v17 >> 2) & 1);
      __p[0] = buf;
      v21 = sub_1002BB704((uint64_t **)(a1 + 824), (unsigned __int16 *)buf, (uint64_t)&unk_100740F58, (_WORD **)__p);
      sub_10026BA34((uint64_t)(v21[5] + 50), (v17 & 8) != 0);
      sub_10057CE94((uint64_t)v4, (v17 >> 3) & 1);
      __p[0] = buf;
      v22 = sub_1002BB704((uint64_t **)(a1 + 824), (unsigned __int16 *)buf, (uint64_t)&unk_100740F58, (_WORD **)__p);
      sub_10026BA44((uint64_t)(v22[5] + 50), (v17 & 0x10) != 0);
      sub_10057CEA4((uint64_t)v4, (v17 >> 4) & 1);
      __p[0] = buf;
      v23 = sub_1002BB704((uint64_t **)(a1 + 824), (unsigned __int16 *)buf, (uint64_t)&unk_100740F58, (_WORD **)__p);
      sub_10026BA14((uint64_t)(v23[5] + 50), (v17 & 0x20) != 0);
      sub_10057CEB4((uint64_t)v4, (v17 >> 5) & 1);
      __p[0] = buf;
      v24 = sub_1002BB704((uint64_t **)(a1 + 824), (unsigned __int16 *)buf, (uint64_t)&unk_100740F58, (_WORD **)__p);
      sub_10026BA24((uint64_t)(v24[5] + 50), (v17 & 0x40) != 0);
      sub_10057CEC4((uint64_t)v4, (v17 >> 6) & 1);
      __p[0] = buf;
      v25 = sub_1002BB704((uint64_t **)(a1 + 824), (unsigned __int16 *)buf, (uint64_t)&unk_100740F58, (_WORD **)__p);
      sub_10026B9F4((uint64_t)(v25[5] + 50), v17 & 1);
      sub_10057CF14((uint64_t)v4, v17 & 1);
      __p[0] = buf;
      v26 = sub_1002BB704((uint64_t **)(a1 + 824), (unsigned __int16 *)buf, (uint64_t)&unk_100740F58, (_WORD **)__p);
      sub_10026B9D4((uint64_t)(v26[5] + 50), (v17 & 2) != 0);
      sub_10057CEF4((uint64_t)v4, (v17 >> 1) & 1);
      v27 = (void **)&v94;
LABEL_30:
      sub_100043728(v27);
      return;
    }
  }
  else
  {
    if (v8 == 17)
    {
      v29 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v7)
        {
          sub_10043E5F8(v7, __p);
          if (SHIBYTE(v101[0]) >= 0)
            v30 = __p;
          else
            v30 = (void **)__p[0];
          v31 = *(unsigned __int8 *)(a2 + 8);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v30;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v31;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Received mic gain event from device %{public}s - new gain is %d", buf, 0x12u);
          if (SHIBYTE(v101[0]) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v72 = *(unsigned __int8 *)(a2 + 8);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "NULL";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v72;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Received mic gain event from device %{public}s - new gain is %d", buf, 0x12u);
        }
      }
      sub_10026B92C(v5, *(_BYTE *)(a2 + 8));
      if (v4)
      {
        LOBYTE(v73) = *(_BYTE *)(a2 + 8);
        sub_1002D4C34((uint64_t)v4, (float)v73 / 15.0);
      }
      goto LABEL_143;
    }
    if (v8 == 18)
    {
      sub_10026B93C(v5, *(_BYTE *)(a2 + 8));
      v12 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v7)
        {
          sub_10043E5F8(v7, __p);
          if (SHIBYTE(v101[0]) >= 0)
            v14 = __p;
          else
            v14 = (void **)__p[0];
          v15 = *(unsigned __int8 *)(a2 + 8);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v14;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received speaker gain event from device %{public}s - new gain is %d", buf, 0x12u);
          if (SHIBYTE(v101[0]) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v70 = *(unsigned __int8 *)(a2 + 8);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "NULL";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v70;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received speaker gain event from device %{public}s - new gain is %d", buf, 0x12u);
        }
      }
      if (v4)
      {
        LOBYTE(v13) = *(_BYTE *)(a2 + 8);
        sub_1002D4114((uint64_t)v4, (float)v13 / 15.0);
      }
LABEL_143:
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      v71 = sub_100155758(*(unsigned __int16 *)(a2 + 4), 0);
      sub_10004339C(__p);
      goto LABEL_192;
    }
  }
LABEL_54:
  v37 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    if (v7)
    {
      sub_10043E5F8(v7, __p);
      if (SHIBYTE(v101[0]) >= 0)
        v38 = __p;
      else
        v38 = (void **)__p[0];
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = v38;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Received unhandled handsfree audio event from stack (%d) for device %{public}s", buf, 0x12u);
      if (SHIBYTE(v101[0]) < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "NULL";
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Received unhandled handsfree audio event from stack (%d) for device %{public}s", buf, 0x12u);
    }
  }
LABEL_152:
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v71 = sub_100155758(*(unsigned __int16 *)(a2 + 4), 2701);
  sub_10004339C(__p);
LABEL_192:
  sub_100043728(__p);
  if (v71)
  {
LABEL_203:
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FAE68((_DWORD *)a2);
  }
}

void sub_1004D82A4(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_10026B73C((uint64_t)&a27, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D8364(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  void **v7;
  NSObject *v8;
  void **v9;
  NSObject *v10;
  void **v11;
  NSObject *v12;
  void **v13;
  NSObject *v14;
  _BOOL8 v15;
  void **v16;
  _BYTE *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  char v23;
  uint8_t buf[4];
  _QWORD v25[2];

  v4 = sub_1004D1420(a1, *((unsigned __int16 *)a2 + 2));
  v5 = *a2;
  switch(*a2)
  {
    case 10:
      v6 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v4)
        {
          sub_10043E5F8(v4, __p);
          if (v23 >= 0)
            v7 = __p;
          else
            v7 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v25[0] = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received dial event from device %{public}s", buf, 0xCu);
          if (v23 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v25[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received dial event from device %{public}s", buf, 0xCu);
        }
      }
      v17 = (_BYTE *)*((_QWORD *)a2 + 1);
      if (*v17)
      {
        v18 = *((unsigned __int16 *)a2 + 2);
        sub_1005D4160(__p, v17);
        v19 = sub_1004DA7B0(a1, v18, (uint64_t)__p);
        sub_1005D4204(__p);
        goto LABEL_52;
      }
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FAFA4();
      return 27;
    case 11:
      v8 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v4)
        {
          sub_10043E5F8(v4, __p);
          if (v23 >= 0)
            v9 = __p;
          else
            v9 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v25[0] = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received memory dial event from device %{public}s", buf, 0xCu);
          if (v23 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v25[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received memory dial event from device %{public}s", buf, 0xCu);
        }
      }
      v20 = sub_1004DAAA0(a1, *((unsigned __int16 *)a2 + 2), *((unsigned __int16 *)a2 + 4));
      goto LABEL_51;
    case 12:
      v10 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v4)
        {
          sub_10043E5F8(v4, __p);
          if (v23 >= 0)
            v11 = __p;
          else
            v11 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v25[0] = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received redial event from device %{public}s", buf, 0xCu);
          if (v23 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v25[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received redial event from device %{public}s", buf, 0xCu);
        }
      }
      v20 = sub_1004DA93C(a1, *((unsigned __int16 *)a2 + 2));
      goto LABEL_51;
    case 19:
      v14 = qword_100999808;
      v15 = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT);
      if (v15)
      {
        if (v4)
        {
          sub_10043E5F8(v4, __p);
          if (v23 >= 0)
            v16 = __p;
          else
            v16 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v25[0] = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received DTMF generation event from device %{public}s", buf, 0xCu);
          if (v23 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v25[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received DTMF generation event from device %{public}s", buf, 0xCu);
        }
      }
      v20 = sub_1004DAC94(v15, 0, *((unsigned __int8 *)a2 + 8));
LABEL_51:
      v19 = v20;
LABEL_52:
      if ((_DWORD)v19 == 255 && (*a2 - 13) >= 0xFFFFFFFD)
      {
        if (qword_10097AC00 != -1)
          dispatch_once(&qword_10097AC00, &stru_100933EE8);
        sub_10059CC10((uint64_t)off_10097ABF8, 1);
        v19 = 255;
      }
      break;
    default:
      v12 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v4)
        {
          sub_10043E5F8(v4, __p);
          if (v23 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          *(_DWORD *)buf = 67109378;
          LODWORD(v25[0]) = v5;
          WORD2(v25[0]) = 2082;
          *(_QWORD *)((char *)v25 + 6) = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received unhandled handsfree dialing event from stack (%d) for device %{public}s", buf, 0x12u);
          if (v23 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 67109378;
          LODWORD(v25[0]) = v5;
          WORD2(v25[0]) = 2082;
          *(_QWORD *)((char *)v25 + 6) = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received unhandled handsfree dialing event from stack (%d) for device %{public}s", buf, 0x12u);
        }
      }
      v19 = 4;
      break;
  }
  return v19;
}

void sub_1004D88D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1005D4204(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D891C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  void **v7;
  NSObject *v8;
  void **v9;
  NSObject *v10;
  void **v11;
  NSObject *v12;
  void **v13;
  NSObject *v14;
  void **v15;
  NSObject *v16;
  uint64_t result;
  uint64_t *v18;
  NSObject *v19;
  void **v20;
  void *__p[2];
  char v22;
  uint8_t buf[4];
  _QWORD v24[2];

  v4 = sub_1004D1420(a1, *(unsigned __int16 *)(a2 + 4));
  v5 = *(_DWORD *)a2;
  if (*(int *)a2 > 14)
  {
    if (v5 == 15)
    {
      v14 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v4)
        {
          sub_10043E5F8(v4, __p);
          if (v22 >= 0)
            v15 = __p;
          else
            v15 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v24[0] = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received call hold event (AT+CHLD) from device %{public}s", buf, 0xCu);
          if (v22 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v24[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received call hold event (AT+CHLD) from device %{public}s", buf, 0xCu);
        }
      }
      return sub_1004DB70C(a1, a2);
    }
    if (v5 == 22)
    {
      v8 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v4)
        {
          sub_10043E5F8(v4, __p);
          if (v22 >= 0)
            v9 = __p;
          else
            v9 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v24[0] = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received list calls request (AT+CLCC) from device %{public}s", buf, 0xCu);
          if (v22 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v24[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received list calls request (AT+CLCC) from device %{public}s", buf, 0xCu);
        }
      }
      sub_1004DBE14(a1, *(unsigned __int16 *)(a2 + 4));
      return 255;
    }
LABEL_20:
    v10 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      if (v4)
      {
        sub_10043E5F8(v4, __p);
        if (v22 >= 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        *(_DWORD *)buf = 67109378;
        LODWORD(v24[0]) = v5;
        WORD2(v24[0]) = 2082;
        *(_QWORD *)((char *)v24 + 6) = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received unhandled handsfree call control event from stack (%d) for device %{public}s", buf, 0x12u);
        if (v22 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 67109378;
        LODWORD(v24[0]) = v5;
        WORD2(v24[0]) = 2082;
        *(_QWORD *)((char *)v24 + 6) = "NULL";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received unhandled handsfree call control event from stack (%d) for device %{public}s", buf, 0x12u);
      }
    }
    return 4;
  }
  if (v5 == 8)
  {
    v12 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      if (v4)
      {
        sub_10043E5F8(v4, __p);
        if (v22 >= 0)
          v13 = __p;
        else
          v13 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v24[0] = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received call answer event from device %{public}s", buf, 0xCu);
        if (v22 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 136446210;
        v24[0] = "NULL";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received call answer event from device %{public}s", buf, 0xCu);
      }
    }
    return sub_1004DAE3C(a1, *(unsigned __int16 *)(a2 + 4));
  }
  if (v5 != 9)
    goto LABEL_20;
  v6 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    if (v4)
    {
      sub_10043E5F8(v4, __p);
      if (v22 >= 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received call hangup event (AT+CHUP) from device %{public}s", buf, 0xCu);
      if (v22 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 136446210;
      v24[0] = "NULL";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received call hangup event (AT+CHUP) from device %{public}s", buf, 0xCu);
    }
  }
  if ((sub_10026ABA0(a1 + 360) & 1) != 0)
  {
    v16 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Ignoring call hangup event as we are transitioning from Virtual Call", (uint8_t *)__p, 2u);
    }
    return 255;
  }
  result = sub_1004DB260(a1, *(unsigned __int16 *)(a2 + 4));
  if ((_DWORD)result == 255)
  {
    v18 = sub_1004CCD90(a1, *(unsigned __int16 *)(a2 + 4));
    if (sub_10026B5EC((uint64_t)(v18 + 50)))
    {
      v19 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v4)
        {
          sub_10043E5F8(v4, __p);
          if (v22 >= 0)
            v20 = __p;
          else
            v20 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v24[0] = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Disconnecting sco early w/o notifying audio layer as device %{public}s is a noisy carkit", buf, 0xCu);
          if (v22 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v24[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Disconnecting sco early w/o notifying audio layer as device %{public}s is a noisy carkit", buf, 0xCu);
        }
      }
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      sub_10015C22C(*(unsigned __int16 *)(a2 + 4));
      sub_10004339C(__p);
      sub_100043728(__p);
    }
    return 255;
  }
  return result;
}

void sub_1004D8F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_100043728(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D8F54(uint64_t a1, unsigned int a2)
{
  NSObject *v3;
  void **v4;
  void **v5;
  int v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  int v18;

  v14 = 0;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  sub_1005D3E2C(&v11);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  if (sub_1005D47B8((uint64_t)off_10097AB00) || sub_1005D4208((uint64_t)&v11))
    goto LABEL_26;
  v3 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    if (SBYTE7(v12) < 0)
    {
      sub_10003430C(__p, (void *)v11, *((unint64_t *)&v11 + 1));
    }
    else
    {
      *(_OWORD *)__p = v11;
      v10 = v12;
    }
    v4 = __p;
    if (v10 < 0)
      v4 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v16 = v4;
    v17 = 1024;
    v18 = BYTE8(v12);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Subscriber number is %s and type of address is %d", buf, 0x12u);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
  }
  buf[0] = 0;
  sub_100043758(buf);
  if (SBYTE7(v12) < 0)
  {
    sub_10003430C(__p, (void *)v11, *((unint64_t *)&v11 + 1));
  }
  else
  {
    *(_OWORD *)__p = v11;
    v10 = v12;
  }
  if (v10 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = sub_100156B60(a2, (const char *)v5);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  sub_10004339C(buf);
  if (!v6)
  {
    sub_100043728(buf);
LABEL_26:
    v7 = 255;
    goto LABEL_27;
  }
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    sub_1006FAFD0();
  sub_100043728(buf);
  v7 = 0;
LABEL_27:
  sub_1005D4204(&v11);
  return v7;
}

void sub_1004D9178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  sub_1005D4204(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D91C8(uint64_t a1, unsigned int a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::string::size_type size;
  NSObject *v8;
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  std::string v15;
  std::string buf;

  v3 = (char *)(a1 + 360);
  memset(&v15, 0, sizeof(v15));
  v4 = sub_10026AA98(a1 + 360);
  v5 = v4;
  if (v4 >= 5)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v6 = off_100933F48[(int)v4];
  }
  sub_10026AA6C(v3, (uint64_t)__p);
  sub_1004D16EC((uint64_t)__p, 4, &buf);
  v15 = buf;
  if (v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v15.__r_.__value_.__l.__size_;
    if (v15.__r_.__value_.__l.__size_ <= 0x10)
      goto LABEL_11;
    goto LABEL_10;
  }
  size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  if (HIBYTE(v15.__r_.__value_.__r.__words[2]) >= 0x11u)
LABEL_10:
    std::string::erase(&v15, 0x10uLL, size - 16);
LABEL_11:
  v8 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    v9 = &v15;
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v15.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Network operator is \"%s\" and mode is %s", (uint8_t *)&buf, 0x16u);
  }
  buf.__r_.__value_.__s.__data_[0] = 0;
  sub_100043758(&buf);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v15.__r_.__value_.__l.__size_)
      v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    else
      v10 = 0;
  }
  else if (*((_BYTE *)&v15.__r_.__value_.__s + 23))
  {
    v10 = &v15;
  }
  else
  {
    v10 = 0;
  }
  if (sub_100156E10(a2, v5, (const char *)v10))
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FB030();
    v11 = 0;
  }
  else
  {
    v11 = 255;
  }
  sub_100043728(&buf);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v11;
}

void sub_1004D93D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004D9424(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)sub_1004CCD90(a1, a2);
  if (result)
  {
    v3 = result;
    sub_10026B94C(result + 400, 1);
    sub_1002D6E18(v3, 1);
    return 255;
  }
  return result;
}

uint64_t sub_1004D9464(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  void **v9;
  NSObject *v10;
  _BOOL4 v11;
  uint64_t result;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;

  v6 = sub_1004D1420(a1, a2);
  sub_1004CCD90(a1, a2);
  v7 = qword_100999808;
  if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    goto LABEL_11;
  if (a3)
    v8 = "start";
  else
    v8 = "end";
  if (v6)
  {
    sub_10043E5F8(v6, __p);
    if (v14 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v16 = v8;
    v17 = 2082;
    v18 = (const char *)v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received '%{public}s voice command' event for device %{public}s", buf, 0x16u);
    if (v14 < 0)
      operator delete(__p[0]);
LABEL_11:
    if (a3)
      goto LABEL_12;
    goto LABEL_15;
  }
  *(_DWORD *)buf = 136446466;
  v16 = v8;
  v17 = 2082;
  v18 = "NULL";
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received '%{public}s voice command' event for device %{public}s", buf, 0x16u);
  if (a3)
  {
LABEL_12:
    if ((sub_10026AB24(a1 + 360) & 1) != 0)
      goto LABEL_16;
  }
LABEL_15:
  if (!sub_10026ACF0(a1 + 360))
    sub_1004827CC();
LABEL_16:
  v10 = qword_100999808;
  v11 = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v11)
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Call in progress, denying voice rec session.", (uint8_t *)__p, 2u);
    return 0;
  }
  return result;
}

uint64_t sub_1004D96B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t result;
  int v9;
  int v10;

  v3 = sub_1004D1420(a1, *(unsigned __int16 *)(a2 + 4));
  v5 = *(_DWORD *)(a2 + 8);
  v4 = *(unsigned int *)(a2 + 12);
  if (v5 == 2)
  {
    v7 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 67109120;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received battery level HF indicator with value: %d", (uint8_t *)&v9, 8u);
    }
    sub_100447298(v3, v4);
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_100933F28);
    if (sub_10042197C((uint64_t)off_1009778D0, v3))
      return 0;
    else
      return 255;
  }
  else
  {
    if (v5 == 1)
    {
      v6 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        v9 = 67109120;
        v10 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received enhanced safety HF indicator with value: %d", (uint8_t *)&v9, 8u);
      }
      sub_1004827CC();
    }
    result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      sub_1006FB118();
      return 0;
    }
  }
  return result;
}

void sub_1004D9868(uint64_t a1, unsigned int a2)
{
  __int16 v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  _QWORD v16[5];
  __int16 v17;
  uint8_t buf[4];
  unsigned int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;

  v2 = a2;
  v4 = sub_1004CCD90(a1, a2);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = (uint64_t)(v4 + 50);
    v7 = sub_10026B8EC((uint64_t)(v4 + 50));
    v8 = sub_1004CF638(v7, v7) == 2 && sub_10026BCAC(v6) == 1918989668;
    v9 = sub_10026AB78(a1 + 360);
    if (v7
      && (v10 = v9, (v11 = sub_1004CF320(a1, v7)) != 0)
      && ((v12 = v11, sub_10026BCAC(v6) == 1920364387) || (v8 & v10) != 0))
    {
      v13 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        v14 = "NO";
        *(_DWORD *)buf = 67109634;
        v19 = v12;
        if (v8)
          v14 = "YES";
        v20 = 2082;
        v21 = v14;
        v22 = 1024;
        v23 = v10;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Notify HFP Transport Ready in %dMsec Carkit Doing IO = %{public}s, isInVirtualCall:%d", buf, 0x18u);
      }
      v15 = sub_100475960();
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1004D9A68;
      v16[3] = &unk_100920960;
      v16[4] = a1;
      v17 = v2;
      sub_100475CEC(v15, v12, v16);
    }
    else
    {
      sub_1002D4AE4(v5);
    }
  }
}

void sub_1004D9A68(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v1 = sub_1004CCD90(*(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
  if (v1)
  {
    v2 = (uint64_t)v1;
    if (sub_10026B914((uint64_t)(v1 + 50)))
    {
      v3 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Notify HFP Transport Ready", v4, 2u);
      }
      sub_1002D4AE4(v2);
    }
  }
}

void sub_1004D9AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  char v8;
  char v9;

  v2 = sub_1004CD5FC(a1, a2);
  if (v2)
  {
    v3 = v2 + 400;
    v4 = sub_10026B914(v2 + 400);
    if (v4 == 4)
    {
      v8 = 0;
      sub_100043758(&v8);
      v7 = sub_10026B8E4(v3);
      sub_100155758(v7, 2701);
      sub_10004339C(&v8);
      v6 = &v8;
      goto LABEL_6;
    }
    if (v4 == 3)
    {
      v9 = 0;
      sub_100043758(&v9);
      v5 = sub_10026B8E4(v3);
      sub_1001576D4(v5, 0);
      sub_10004339C(&v9);
      v6 = &v9;
LABEL_6:
      sub_100043728(v6);
      return;
    }
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FB178();
  }
}

void sub_1004D9BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

void sub_1004D9BE0(os_unfair_lock_s *a1, uint64_t a2, __int16 a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];
  __int16 v11;
  char v12;

  v8 = sub_1004CD5FC((uint64_t)a1, a2);
  v9 = v8;
  if (v8)
    sub_1002D4E6C(v8, a4);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1004E5028;
  v10[3] = &unk_100933B48;
  v11 = a3;
  v12 = a4;
  v10[4] = a2;
  v10[5] = v9;
  sub_1004E4F30(a1 + 82, v10);
}

void sub_1004D9C7C()
{
  NSObject *v0;
  uint8_t v1[16];

  sub_1000438A4();
  if (sub_100333540())
  {
    v0 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Free Voice Buf", v1, 2u);
    }
    sub_10019F270();
  }
}

_BYTE *sub_1004D9CF0(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint8_t v13[15];
  char v14;
  int v15;
  __int16 v16;
  unsigned __int16 *v17;

  v17 = 0;
  v4 = sub_100225368(a2);
  v15 = v4;
  v16 = WORD2(v4);
  v14 = 0;
  sub_100043758(&v14);
  sub_100182588((uint64_t)&v15, (uint64_t *)&v17);
  v5 = sub_10019ADE8(v17);
  sub_10004339C(&v14);
  if (v17 && *((_BYTE *)v17 + 278))
  {
    v6 = *((_DWORD *)v17 + 70);
    v7 = qword_100999808;
    v8 = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT);
    if (a3)
    {
      v9 = v6 | 0x3F0000u;
      if (v8)
      {
        *(_WORD *)v13 = 0;
        v10 = "Update connection packet types with HDR packets removed";
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v10, v13, 2u);
      }
    }
    else
    {
      v9 = v6 & 0xFFC0FFFF;
      if (v8)
      {
        *(_WORD *)v13 = 0;
        v10 = "Update connection packet types with HDR packets included";
        goto LABEL_8;
      }
    }
    v11 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 1328))(v11, v5, v9, 1);
  }
  return sub_100043728(&v14);
}

void sub_1004D9E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D9E20(uint64_t a1, unsigned int a2, char a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void **v11;
  uint64_t v12;
  NSObject *v13;
  char v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  char v20;
  NSObject *v21;
  _QWORD v22[5];
  char v23;
  void *__p[2];
  char v25;
  _QWORD v26[2];
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  _BYTE v31[24];

  v26[0] = 0;
  v26[1] = 0;
  sub_10003415C((uint64_t)v26, a1 + 760);
  v8 = sub_1004D1420(a1, a2);
  v9 = sub_1004CD5FC(a1, v8);
  v10 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    if (v8)
    {
      sub_10043E5F8(v8, __p);
      if (v25 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v28 = (const char *)v11;
      v29 = 1024;
      v30 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Disconnecting audio from device %{public}s status %d", buf, 0x12u);
      if (v25 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 136446466;
      v28 = "NULL";
      v29 = 1024;
      v30 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Disconnecting audio from device %{public}s status %d", buf, 0x12u);
    }
  }
  v12 = a1 + 360;
  if (sub_10026AB78(v12))
  {
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100933D88);
    sub_1004D3788((uint64_t)off_10097AA38);
  }
  if (v9 && sub_10026B98C(v9 + 400))
  {
    v13 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Voice command was active, sco will be closed", (uint8_t *)__p, 2u);
    }
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    sub_100156728(a2, 0);
    sub_10004339C(__p);
    sub_10026B994(v9 + 400, 0);
    sub_100043728(__p);
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }
  if (sub_10026AD64(v12))
    sub_10026AD6C(v12, 0);
  if (v9)
  {
    sub_1000438A4();
    if (sub_1003313F4()
      && sub_10026BACC(v9 + 400)
      && sub_10026AB24(v12)
      && sub_10026BCAC(v9 + 400) == 1918989668
      && sub_10026BA9C(v9 + 400) != 127
      && sub_10026BA9C(v9 + 400) != 256
      && sub_10026BA9C(v9 + 400) != 128
      && sub_10026BA9C(v9 + 400) != 129
      && sub_10026BA9C(v9 + 400) != 130)
    {
      v20 = sub_10026BA9C(v9 + 400) == 255 ? 1 : v14;
      if ((v20 & 1) == 0 && (a3 & 1) == 0)
      {
        v21 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Faking SCO disconnection here, but actually letting it stay open since we're answering an incoming call", (uint8_t *)__p, 2u);
        }
        sub_10057CD58(v9, 0, a4);
        sub_100263F60(v9 + 400, 0);
        sub_10026ACA4(v9 + 400, 0);
        v18 = 0;
        goto LABEL_59;
      }
    }
  }
  v23 = 0;
  sub_100043758(&v23);
  v15 = sub_10015C22C(a2);
  sub_10004339C(&v23);
  v16 = sub_100475960();
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1004DDB48;
  v22[3] = &unk_100917378;
  v22[4] = v12;
  sub_100041A34(v16, v22);
  if (v9)
  {
    sub_10026BB04(v9 + 400, 0);
    sub_10026BB14(v9 + 400, 0);
    if (!a4)
    {
LABEL_46:
      sub_10057CD58(v9, 0, a4);
      goto LABEL_47;
    }
    if (a4 != 116)
    {
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      {
        if (v8)
        {
          sub_10043E5F8(v8, __p);
          sub_1006FB274();
        }
        else
        {
          sub_1006FB230((uint64_t)buf, a4);
        }
      }
      if ((a3 & 1) == 0)
      {
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_100933E28);
        sub_10051E374((uint64_t)off_100977A90, v8, a4);
      }
      goto LABEL_46;
    }
    if ((sub_10015C918() & 1) == 0)
    {
      a4 = 0;
      goto LABEL_46;
    }
    if ((sub_100442118(v8, 12) & 1) != 0)
    {
      a4 = 116;
      goto LABEL_46;
    }
  }
LABEL_47:
  if (v15)
  {
    if (v15 == 1807)
    {
      v17 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Audio was already disconnected", buf, 2u);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      {
        if (v8)
        {
          sub_10043E5F8(v8, buf);
          sub_1006FB1E8();
        }
        else
        {
          sub_1006FB1A4((uint64_t)v31, v15);
        }
      }
      sub_10006D81C(&v23);
      sub_10015BEF4(a2, v15);
      sub_10004339C(&v23);
    }
  }
  if (v9)
    sub_100263F60(v9 + 400, 0);
  sub_100043728(&v23);
  v18 = 1;
LABEL_59:
  sub_100034234((uint64_t)v26);
  return v18;
}

void sub_1004DA3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_100043728(&a17);
  sub_100034234((uint64_t)&a22);
  _Unwind_Resume(a1);
}

_BYTE *sub_1004DA434(uint64_t a1, int a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  void *__p[2];
  void *v9[2];
  uint64_t v10;
  char v11;

  v11 = 0;
  sub_100043758(&v11);
  v4 = sub_1001571E4(a2);
  sub_10004339C(&v11);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FB2BC();
    goto LABEL_9;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100933DC8);
  v5 = *(_WORD *)(v4 + 4);
  LODWORD(v9[0]) = *(_DWORD *)v4;
  WORD2(v9[0]) = v5;
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)v9, 1);
  if (!v6)
  {
LABEL_9:
    sub_10006D81C(&v11);
    sub_100155758(a2, 2701);
    sub_10004339C(&v11);
    return sub_100043728(&v11);
  }
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  if (sub_1004CD5FC(a1, v6))
    operator new();
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
  {
    sub_10043F6EC(v6, (uint64_t)__p);
    sub_1006FA0B8();
  }
  return sub_100043728(&v11);
}

void sub_1004DA740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  if (a18 < 0)
    operator delete(__p);
  sub_100043728(&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_1004DA7B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  std::string __p;
  std::string v13;
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 760);
  memset(&v13, 0, sizeof(v13));
  sub_1004D15EC(a1, a2, &v13);
  v6 = a1 + 360;
  if (sub_10026AD64(a1 + 360))
  {
    sub_10026AD6C(a1 + 360, 0);
    sub_1004DDDB4(*(_QWORD **)(a1 + 824), (_QWORD *)(a1 + 832), (void (*)(_QWORD, _QWORD))sub_1004DDE30);
  }
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  v7 = off_10097AB00;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    sub_10003430C(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  else
    __p = v13;
  v8 = sub_1005D4AA0((uint64_t)v7, a3, (uint64_t)&__p);
  v9 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v9)
      goto LABEL_10;
  }
  else if (v8)
  {
LABEL_10:
    v10 = 0;
    goto LABEL_13;
  }
  sub_10026AD74(v6, 1);
  v10 = 255;
LABEL_13:
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  sub_100034234((uint64_t)v14);
  return v10;
}

void sub_1004DA8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1004DA93C(uint64_t a1, unsigned int a2)
{
  void *v4;
  int v5;
  int v6;
  uint64_t v7;
  std::string __p;
  std::string v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 760);
  memset(&v10, 0, sizeof(v10));
  sub_1004D15EC(a1, a2, &v10);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  v4 = off_10097AB00;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    sub_10003430C(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    __p = v10;
  v5 = sub_1005D4B3C((uint64_t)v4, (uint64_t)&__p);
  v6 = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6)
      goto LABEL_8;
LABEL_12:
    v7 = 255;
    goto LABEL_13;
  }
  if (!v5)
    goto LABEL_12;
LABEL_8:
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    sub_1006FB320();
  v7 = 23;
LABEL_13:
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  sub_100034234((uint64_t)v11);
  return v7;
}

void sub_1004DAA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  sub_100034234(v20 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1004DAAA0(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void **v11;
  void *v13[2];
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  void *__p[2];
  __int128 v19;
  void *v20[2];
  uint64_t v21;
  _QWORD v22[2];

  v6 = sub_1004D1420(a1, a2);
  v22[0] = 0;
  v22[1] = 0;
  v7 = sub_100585F04(v22, v6);
  v21 = 0;
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)__p = 0u;
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FB34C();
    goto LABEL_11;
  }
  v8 = (_QWORD *)sub_1005864A8(v7, (unsigned __int16)(a3 - 1));
  v9 = v8;
  if (!v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FB378();
LABEL_11:
    v10 = 21;
    goto LABEL_18;
  }
  sub_1003495B0(v8, 0, (uint64_t)v13);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)v13;
  *(_QWORD *)&v19 = v14;
  HIBYTE(v14) = 0;
  LOBYTE(v13[0]) = 0;
  DWORD2(v19) = v15;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(v20[0]);
    *(_OWORD *)v20 = v16;
    v21 = v17;
    HIBYTE(v17) = 0;
    LOBYTE(v16) = 0;
    if (SHIBYTE(v14) < 0)
      operator delete(v13[0]);
  }
  else
  {
    *(_OWORD *)v20 = v16;
    v21 = v17;
  }
  (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  if ((SBYTE7(v19) & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  sub_1005D4160(v13, v11);
  v10 = sub_1004DA7B0(a1, a2, (uint64_t)v13);
  sub_1005D4204(v13);
LABEL_18:
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  return v10;
}

void sub_1004DAC68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_1005D4204((uint64_t *)va);
  sub_100353374((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004DAC94(uint64_t a1, uint64_t a2, int a3)
{
  char v4;
  uint64_t result;
  uint64_t v6;
  NSObject *v7;
  const __CFURL *v8;
  __CFBundle *v9;
  void (*FunctionPointerForName)(uint64_t);
  _DWORD v11[2];

  v4 = a3 - 35;
  if ((a3 - 35) < 0x17 && ((0x7FE081u >> v4) & 1) != 0)
  {
    v6 = dword_100741E04[v4];
    v7 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 67109120;
      v11[1] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Playing DTMF tone %c", (uint8_t *)v11, 8u);
    }
    v8 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, CFSTR("/System/Library/Frameworks/AudioToolbox.framework"), kCFURLPOSIXPathStyle, 1u);
    v9 = CFBundleCreate(kCFAllocatorDefault, v8);
    FunctionPointerForName = (void (*)(uint64_t))CFBundleGetFunctionPointerForName(v9, CFSTR("AudioServicesPlaySystemSound"));
    FunctionPointerForName(v6);
    CFRelease(v9);
    CFRelease(v8);
    if (qword_10097AB08 != -1)
      dispatch_once(&qword_10097AB08, &stru_100933E48);
    if (sub_1005D4BD4((uint64_t)off_10097AB00))
      return 0;
    else
      return 255;
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      sub_1006FB3A4();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1004DAE3C(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  void *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t *v14;
  NSObject *v15;
  int v16;
  uint8_t *v17;
  uint8_t *v18;
  void **v19;
  std::string __p;
  int v21;
  void *v22[2];
  char v23;
  int v24;
  uint8_t buf[8];
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string v30;
  uint8_t v31[4];
  uint8_t *v32;
  __int16 v33;
  void **v34;

  memset(&v30, 0, sizeof(v30));
  sub_1004D15EC(a1, a2, &v30);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  sub_10026AD84(a1 + 360, (int)&v27);
  if (sub_100481E7C(a1) == 1)
  {
    v4 = sub_1004CCD90(a1, a2);
    if (v4)
      sub_100263F60((uint64_t)(v4 + 50), 1);
  }
  sub_10026ABA8(a1 + 360);
  if (!sub_1005C6160(&v27) && !sub_1005C612C(&v27))
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FB430();
    goto LABEL_28;
  }
  if (!sub_10026AD34(a1 + 360, 1))
  {
    v5 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    {
      v24 = sub_10026ACF0(a1 + 360);
      sub_10026A9F4(&v24, buf);
      v16 = v26;
      v17 = *(uint8_t **)buf;
      v21 = 1;
      sub_10026A9F4(&v21, v22);
      v18 = buf;
      if (v16 < 0)
        v18 = v17;
      if (v23 >= 0)
        v19 = v22;
      else
        v19 = (void **)v22[0];
      *(_DWORD *)v31 = 136446466;
      v32 = v18;
      v33 = 2082;
      v34 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unexpected answer event as our call setup state is \"%{public}s\", not \"%{public}s\"", v31, 0x16u);
      if (v23 < 0)
        operator delete(v22[0]);
      if (v26 < 0)
        operator delete(*(void **)buf);
    }
  }
  if (v27 == v28)
  {
LABEL_21:
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FB404();
    goto LABEL_28;
  }
  v6 = v27 + 104;
  while (1)
  {
    v7 = *(_DWORD *)(v6 - 88);
    if (v7 == 5)
      break;
    v8 = v7 == 6 || v6 == v28;
    v6 += 104;
    if (v8)
    {
      if (v7 != 6)
        goto LABEL_21;
      break;
    }
  }
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  v9 = off_10097AB00;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    sub_10003430C(&__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    __p = v30;
  v10 = sub_1005D4878((uint64_t)v9, (uint64_t)&__p);
  v11 = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v11)
      goto LABEL_28;
  }
  else if (v10)
  {
LABEL_28:
    v12 = 0;
    goto LABEL_29;
  }
  v14 = sub_1004CCD90(a1, a2);
  if (sub_10026BB5C((uint64_t)(v14 + 50)))
  {
    LOBYTE(v22[0]) = 0;
    v31[0] = 0;
    LOBYTE(v24) = 0;
    v15 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "This kit requires a hack to answer incoming calls.", buf, 2u);
    }
    buf[0] = 0;
    sub_100043758(buf);
    sub_10015710C((BOOL *)v22, v31, &v24);
    sub_100155C08(a2, 1);
    sub_100155D2C(a2, 0);
    sub_10004339C(buf);
    sub_100043728(buf);
  }
  v12 = 255;
LABEL_29:
  *(_QWORD *)buf = &v27;
  sub_10026BD18((void ***)buf);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1004DB1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  __p = &a27;
  sub_10026BD18((void ***)&__p);
  if (*(char *)(v27 - 81) < 0)
    operator delete(*(void **)(v27 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_1004DB260(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  NSObject *v13;
  int v14;
  NSObject *v15;
  void **v16;
  const char *v17;
  const char *v18;
  std::string *p_p;
  uint64_t v20[3];
  std::string __p;
  int v22;
  void *v23[2];
  char v24;
  _QWORD v25[2];
  void **v26;
  uint8_t buf[4];
  void **v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  std::string *v34;

  v25[0] = 0;
  v25[1] = 0;
  sub_10003415C((uint64_t)v25, a1 + 760);
  v4 = sub_1004CCD90(a1, a2);
  sub_1004D1420(a1, a2);
  if (v4)
    sub_100263F60((uint64_t)(v4 + 50), 0);
  v5 = a1 + 360;
  if (sub_10026AAEC(a1 + 360) || sub_10026AAF4(a1 + 360))
  {
    v6 = sub_10026AB0C(a1 + 360);
    v7 = qword_100999808;
    v8 = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT);
    if (!v6)
    {
      if (v8)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Found incoming call to reject", buf, 2u);
      }
      v11 = sub_1004DDEDC(a1, a2);
      goto LABEL_23;
    }
    if (v8)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "We have both an incoming and active call, hanging up the active call.", buf, 2u);
    }
  }
  if (sub_10026AB0C(a1 + 360) || sub_10026AB14(a1 + 360))
  {
    v9 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Found active call to hang up", buf, 2u);
    }
    if (v4)
      sub_10026BA84((uint64_t)(v4 + 50), 1);
    if (qword_10097AB08 != -1)
      dispatch_once(&qword_10097AB08, &stru_100933E48);
    v10 = sub_1005D4920((uint64_t)off_10097AB00);
LABEL_17:
    if (v10)
      v11 = 0;
    else
      v11 = 255;
    goto LABEL_23;
  }
  if (sub_10026AB78(a1 + 360))
  {
    v13 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Found ongoing virtual call - Acking device and notifying upper layers.", buf, 2u);
    }
    sub_1004827CC();
  }
  v14 = sub_10026AB1C(a1 + 360);
  v15 = qword_100999808;
  if (v14)
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Hanging up held call.", buf, 2u);
    }
    if (qword_10097AB08 != -1)
      dispatch_once(&qword_10097AB08, &stru_100933E48);
    v10 = sub_1005D4930((uint64_t)off_10097AB00);
    goto LABEL_17;
  }
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Hangup event was unexpected - dumping state and call list...", buf, 2u);
    v15 = qword_100999808;
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    v22 = sub_10026ACF0(v5);
    v16 = v23;
    sub_10026A9F4(&v22, v23);
    if (v24 < 0)
      v16 = (void **)v23[0];
    v17 = "no";
    if (sub_10026AAEC(v5))
      v18 = "yes";
    else
      v18 = "no";
    if (sub_10026AAF4(v5))
      v17 = "yes";
    sub_10026AD84(v5, (int)v20);
    sub_1005C5ED4(v20, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446978;
    v28 = v16;
    v29 = 2082;
    v30 = v18;
    v31 = 2082;
    v32 = v17;
    v33 = 2082;
    v34 = p_p;
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "callSetup: %{public}s, callRinging: %{public}s, callWaiting: %{public}s, calls: %{public}s", buf, 0x2Au);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v26 = (void **)v20;
    sub_10026BD18(&v26);
    if (v24 < 0)
      operator delete(v23[0]);
  }
  v11 = 0;
LABEL_23:
  sub_100034234((uint64_t)v25);
  return v11;
}

void sub_1004DB6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  sub_10026BD18((void ***)&a25);
  if (a22 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_1004DB70C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  void **v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  NSObject *v12;
  void **v13;
  NSObject *v14;
  void **v15;
  NSObject *v16;
  void **v17;
  NSObject *v18;
  void **v19;
  NSObject *v20;
  void **v21;
  NSObject *v23;
  void **v24;
  void *__p[2];
  char v26;
  uint8_t buf[4];
  _QWORD v28[2];

  v4 = *(_DWORD *)(a2 + 8);
  v5 = sub_1004D1420(a1, *(unsigned __int16 *)(a2 + 4));
  switch(v4)
  {
    case 0:
      v6 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_10043E5F8(v5, __p);
          if (v26 >= 0)
            v7 = __p;
          else
            v7 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v28[0] = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received release held calls event from device %{public}s", buf, 0xCu);
          if (v26 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v28[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received release held calls event from device %{public}s", buf, 0xCu);
        }
      }
      return sub_1004DC274(a1, *(unsigned __int16 *)(a2 + 4));
    case 1:
      v14 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_10043E5F8(v5, __p);
          if (v26 >= 0)
            v15 = __p;
          else
            v15 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v28[0] = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received release active calls and answer incoming call event from device %{public}s", buf, 0xCu);
          if (v26 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v28[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received release active calls and answer incoming call event from device %{public}s", buf, 0xCu);
        }
      }
      return sub_1004DC480(a1, *(unsigned __int16 *)(a2 + 4));
    case 2:
      v16 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_10043E5F8(v5, __p);
          if (v26 >= 0)
            v17 = __p;
          else
            v17 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v28[0] = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Received hold active calls event from device %{public}s", buf, 0xCu);
          if (v26 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v28[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Received hold active calls event from device %{public}s", buf, 0xCu);
        }
      }
      return sub_1004DC828(a1, *(unsigned __int16 *)(a2 + 4));
    case 3:
      v18 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_10043E5F8(v5, __p);
          if (v26 >= 0)
            v19 = __p;
          else
            v19 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v28[0] = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Received add held call event from device %{public}s", buf, 0xCu);
          if (v26 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v28[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Received add held call event from device %{public}s", buf, 0xCu);
        }
      }
      return sub_1004DCB84(a1);
    case 4:
      v20 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (v5)
        {
          sub_10043E5F8(v5, __p);
          if (v26 >= 0)
            v21 = __p;
          else
            v21 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v28[0] = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Received call transfer event from device %{public}s", buf, 0xCu);
          if (v26 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v28[0] = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Received call transfer event from device %{public}s", buf, 0xCu);
        }
      }
      sub_1004DCC18();
      return 4;
    default:
      if (v4 < 10)
        goto LABEL_49;
      v8 = 1;
      v9 = v4;
      do
      {
        v10 = v9;
        v9 /= 0xAu;
        v8 *= 10;
      }
      while (v10 > 0x63);
      v11 = v4 - v8 * v9;
      if (v9 == 2)
      {
        v23 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          if (v5)
          {
            sub_10043E5F8(v5, __p);
            if (v26 >= 0)
              v24 = __p;
            else
              v24 = (void **)__p[0];
            *(_DWORD *)buf = 67109378;
            LODWORD(v28[0]) = v11;
            WORD2(v28[0]) = 2082;
            *(_QWORD *)((char *)v28 + 6) = v24;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Received private conference event for call index %d from device %{public}s", buf, 0x12u);
            if (v26 < 0)
              operator delete(__p[0]);
          }
          else
          {
            *(_DWORD *)buf = 67109378;
            LODWORD(v28[0]) = v11;
            WORD2(v28[0]) = 2082;
            *(_QWORD *)((char *)v28 + 6) = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Received private conference event for call index %d from device %{public}s", buf, 0x12u);
          }
        }
        return sub_1004DD214(a1, 0, v11);
      }
      else if (v9 == 1)
      {
        v12 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          if (v5)
          {
            sub_10043E5F8(v5, __p);
            if (v26 >= 0)
              v13 = __p;
            else
              v13 = (void **)__p[0];
            *(_DWORD *)buf = 67109378;
            LODWORD(v28[0]) = v11;
            WORD2(v28[0]) = 2082;
            *(_QWORD *)((char *)v28 + 6) = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received release active call event for call index %d from device %{public}s", buf, 0x12u);
            if (v26 < 0)
              operator delete(__p[0]);
          }
          else
          {
            *(_DWORD *)buf = 67109378;
            LODWORD(v28[0]) = v11;
            WORD2(v28[0]) = 2082;
            *(_QWORD *)((char *)v28 + 6) = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received release active call event for call index %d from device %{public}s", buf, 0x12u);
          }
        }
        return sub_1004DCC5C(a1, 0, v11);
      }
      else
      {
LABEL_49:
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          sub_1006FB45C();
        return 4;
      }
  }
}

uint64_t sub_1004DBE14(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  std::string *v13;
  NSObject *v14;
  std::string *v15;
  std::string *p_p;
  int v17;
  uint64_t v19[3];
  std::string v20;
  std::string v21;
  _BYTE v22[32];
  __int128 v23;
  uint64_t v24;
  std::string __p;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[3];
  uint8_t buf[4];
  std::string *v31;

  memset(v29, 0, sizeof(v29));
  sub_1005C5C20(v29);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  sub_1005C5C20(&v26);
  memset(&__p, 0, sizeof(__p));
  v24 = 0;
  v23 = 0u;
  memset(v22, 0, sizeof(v22));
  sub_1005D3E2C(v22);
  v4 = sub_1004D1420(a1, a2);
  v5 = a1 + 360;
  if ((sub_10026AB88(v5) & 1) != 0 || (sub_10026ABA0(v5) & 1) != 0)
    goto LABEL_35;
  sub_10026AD84(v5, (int)&v21);
  sub_10026BDD4((uint64_t)&v26, (uint64_t)v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v21.__r_.__value_.__l.__size_ - v21.__r_.__value_.__r.__words[0]) >> 3));
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  sub_10026BD18((void ***)&v20);
  v6 = v26;
  if (v26 == v27)
    goto LABEL_34;
  while (1)
  {
    v7 = *(_DWORD *)(v6 + 16) - 1;
    if (v7 >= 7)
    {
      v14 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      {
        sub_1004DE0EC(v6, &v21);
        v15 = &v21;
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v31 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Found invalid call status - skipping call: %s", buf, 0xCu);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
      }
      goto LABEL_29;
    }
    v8 = dword_100741E60[v7];
    sub_1005D4228((std::string *)v22, v6 + 24);
    v9 = *(unsigned int *)(v6 + 8);
    v10 = *(unsigned __int8 *)(v6 + 12);
    v11 = *(unsigned __int8 *)(v6 + 13);
    sub_1004D18B0(v6 + 80, v4, &v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v21;
    v21.__r_.__value_.__s.__data_[0] = 0;
    sub_100043758(&v21);
    v12 = sub_1005D4208((uint64_t)v22);
    if (v12)
    {
      v13 = 0;
    }
    else
    {
      sub_1005D435C((uint64_t)v22, &v20);
      v13 = (v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v20
          : (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      p_p = __p.__r_.__value_.__l.__size_ ? (std::string *)__p.__r_.__value_.__r.__words[0] : 0;
    }
    else
    {
      p_p = &__p;
      if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
        p_p = 0;
    }
    v17 = sub_100156C40(a2, v9, v10 == 0, v8, 0, v11 != 0, (const char *)v13, v22[24], (const char *)p_p);
    if (!v12 && SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    sub_10004339C(&v21);
    if (v17)
      break;
    sub_1005C5CAC(v29, v6);
    sub_100043728(&v21);
LABEL_29:
    v6 += 104;
    if (v6 == v27)
      goto LABEL_34;
  }
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    sub_1006FB4BC();
  sub_100043728(&v21);
LABEL_34:
  sub_1005C5CA8((int)v19);
  sub_10026AB40(v5, v19);
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  sub_10026BD18((void ***)&v21);
LABEL_35:
  sub_1005D4204(v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)v22 = &v26;
  sub_10026BD18((void ***)v22);
  *(_QWORD *)v22 = v29;
  sub_10026BD18((void ***)v22);
  return 255;
}

void sub_1004DC1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  sub_10026BD18((void ***)&a23);
  sub_1005D4204(&a26);
  if (a39 < 0)
    operator delete(__p);
  a26 = v39 - 176;
  sub_10026BD18((void ***)&a26);
  a26 = v39 - 152;
  sub_10026BD18((void ***)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_1004DC274(uint64_t a1, unsigned int a2)
{
  int v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[3];
  void **v11;
  void **v12;

  memset(v10, 0, sizeof(v10));
  sub_1005C5C20(v10);
  sub_10026AD84(a1 + 360, (int)&v8);
  sub_10026BDD4((uint64_t)v10, v8, v9, 0x4EC4EC4EC4EC4EC5 * ((v9 - v8) >> 3));
  v12 = (void **)&v8;
  sub_10026BD18(&v12);
  v4 = sub_10026ACF0(a1 + 360);
  if (sub_1005C6160(v10) || sub_1005C612C(v10))
  {
    v5 = sub_1004DDEDC(a1, a2);
    goto LABEL_14;
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    {
      v7 = sub_10026ACF0(a1 + 360);
      sub_10026A9F4(&v7, &v8);
      sub_1006FB548();
    }
LABEL_7:
    v5 = 0;
    goto LABEL_14;
  }
  if (!sub_1005C608C(v10))
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FB51C();
    goto LABEL_7;
  }
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  if (sub_1005D4930((uint64_t)off_10097AB00))
    v5 = 0;
  else
    v5 = 255;
LABEL_14:
  v11 = (void **)v10;
  sub_10026BD18(&v11);
  return v5;
}

void sub_1004DC43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  sub_10026BD18(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1004DC480(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v10;
  void **v11;
  void **v12;
  void **v13;
  std::string __p;
  std::string __dst;
  int v16;
  void *v17[2];
  char v18;
  int v19;
  void *v20[2];
  char v21;
  std::string v22;
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  void **v26;

  memset(&v22, 0, sizeof(v22));
  sub_1004D15EC(a1, a2, &v22);
  v3 = a1 + 360;
  if (sub_10026AAF4(v3))
  {
    if (!sub_10026AD34(v3, 1))
    {
      v4 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      {
        v19 = sub_10026ACF0(v3);
        sub_10026A9F4(&v19, v20);
        v10 = v21;
        v11 = (void **)v20[0];
        v16 = 1;
        sub_10026A9F4(&v16, v17);
        v12 = v20;
        if (v10 < 0)
          v12 = v11;
        if (v18 >= 0)
          v13 = v17;
        else
          v13 = (void **)v17[0];
        *(_DWORD *)buf = 136446466;
        v24 = v12;
        v25 = 2082;
        v26 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unexpected release active calls event as our call setup state is \"%{public}s\", not \"%{public}s\"", buf, 0x16u);
        if (v18 < 0)
          operator delete(v17[0]);
        if (v21 < 0)
          operator delete(v20[0]);
      }
    }
    if (qword_10097AB08 != -1)
      dispatch_once(&qword_10097AB08, &stru_100933E48);
    v5 = off_10097AB00;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      sub_10003430C(&__dst, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    else
      __dst = v22;
    if (sub_1005D4940((uint64_t)v5, (uint64_t)&__dst))
      v7 = 0;
    else
      v7 = 255;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      v8 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_35:
      operator delete(v8);
      goto LABEL_39;
    }
    goto LABEL_39;
  }
  if (!sub_10026AD34(v3, 0))
  {
    if (sub_10026AB14(v3))
    {
      if (qword_10097AB08 != -1)
        dispatch_once(&qword_10097AB08, &stru_100933E48);
      if (sub_1005D4920((uint64_t)off_10097AB00))
        v7 = 0;
      else
        v7 = 255;
      goto LABEL_39;
    }
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FB5BC();
LABEL_38:
    v7 = 0;
    goto LABEL_39;
  }
  if (!sub_10026AB0C(v3) && !sub_10026AB1C(v3))
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FB590();
    goto LABEL_38;
  }
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  v6 = off_10097AB00;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    sub_10003430C(&__p, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    __p = v22;
  if (sub_1005D4940((uint64_t)v6, (uint64_t)&__p))
    v7 = 0;
  else
    v7 = 255;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_35;
  }
LABEL_39:
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1004DC7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 65) < 0)
    operator delete(*(void **)(v32 - 88));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004DC828(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v10;
  void **v11;
  void **v12;
  void **v13;
  std::string __p;
  std::string __dst;
  int v16;
  void *v17[2];
  char v18;
  int v19;
  void *v20[2];
  char v21;
  std::string v22;
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  void **v26;

  memset(&v22, 0, sizeof(v22));
  sub_1004D15EC(a1, a2, &v22);
  v3 = a1 + 360;
  if (sub_10026AAF4(a1 + 360))
  {
    if (!sub_10026AD34(a1 + 360, 1))
    {
      v4 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      {
        v19 = sub_10026ACF0(v3);
        sub_10026A9F4(&v19, v20);
        v10 = v21;
        v11 = (void **)v20[0];
        v16 = 1;
        sub_10026A9F4(&v16, v17);
        v12 = v20;
        if (v10 < 0)
          v12 = v11;
        if (v18 >= 0)
          v13 = v17;
        else
          v13 = (void **)v17[0];
        *(_DWORD *)buf = 136446466;
        v24 = v12;
        v25 = 2082;
        v26 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unexpected hold active calls event as our call setup state is \"%{public}s\", not \"%{public}s\"", buf, 0x16u);
        if (v18 < 0)
          operator delete(v17[0]);
        if (v21 < 0)
          operator delete(v20[0]);
      }
    }
    if (qword_10097AB08 != -1)
      dispatch_once(&qword_10097AB08, &stru_100933E48);
    v5 = off_10097AB00;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      sub_10003430C(&__dst, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    else
      __dst = v22;
    if (sub_1005D49D8((uint64_t)v5, (uint64_t)&__dst))
      v7 = 0;
    else
      v7 = 255;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      v8 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v8);
    }
  }
  else if (sub_10026AD34(a1 + 360, 0))
  {
    if (sub_10026AB0C(a1 + 360) || sub_10026AB1C(a1 + 360))
    {
      if (qword_10097AB08 != -1)
        dispatch_once(&qword_10097AB08, &stru_100933E48);
      v6 = off_10097AB00;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        sub_10003430C(&__p, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
      else
        __p = v22;
      if (sub_1005D49D8((uint64_t)v6, (uint64_t)&__p))
        v7 = 0;
      else
        v7 = 255;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v8 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_30;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FB5E8();
      v7 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FB614();
    v7 = 3;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1004DCB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 65) < 0)
    operator delete(*(void **)(v32 - 88));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004DCB84(uint64_t a1)
{
  uint64_t result;

  if (sub_10026AB1C(a1 + 360))
  {
    if (qword_10097AB08 != -1)
      dispatch_once(&qword_10097AB08, &stru_100933E48);
    if (sub_1005D4A70((uint64_t)off_10097AB00))
      return 0;
    else
      return 255;
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      sub_1006FB640();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1004DCC18()
{
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    sub_1006FB66C();
  return 4;
}

uint64_t sub_1004DCC5C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  id *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  int v12;
  id v13;
  NSObject *v14;
  unsigned __int8 *v15;
  id *v16;
  uint64_t v17;
  id v18;
  void **v19;
  int v20;
  int v21;
  id v22;
  NSObject *v23;
  unsigned __int8 *v24;
  void *v25;
  id v26;
  void *v27;
  void **v29;
  void **v30;
  uint64_t v31;
  id *v32;
  id *v33;
  uint64_t v34;
  unsigned __int8 src[8];
  char v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  unsigned __int8 *v40;
  uuid_t uu;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  v4 = a1 + 360;
  sub_10026AB34((int)&v32);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  sub_10026AD84(v4, (int)&v29);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  if ((sub_1005D4C04((uint64_t)off_10097AB00) & 1) != 0)
  {
    if (a3)
    {
      v5 = (id *)sub_1005C5E58((uint64_t *)&v32, a3);
      v6 = (uint64_t)v5;
      if (v33 == v5)
      {
        v16 = (id *)sub_1005C5E58((uint64_t *)&v29, a3);
        v17 = (uint64_t)v16;
        if (v30 != v16)
        {
          v18 = *v16;
          sub_100030BCC(src, v18);
          uuid_copy(uu, src);

          if (uuid_is_null(uu))
          {
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
            {
              sub_1004DE0EC(v17, src);
              sub_1006FB6F8();
            }
          }
        }
      }
      else
      {
        v7 = *v5;
        sub_100030BCC(src, v7);
        uuid_copy(uu, src);

        if (uuid_is_null(uu) && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        {
          sub_1004DE0EC(v6, src);
          sub_1006FB740();
        }
      }
    }
    else
    {
      v9 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)src = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Allowing zero index release active call command - finding index of oldest call", src, 2u);
      }
      v10 = (uint64_t)v32;
      if (v32 == v33)
        goto LABEL_30;
      v11 = 0;
      do
      {
        v12 = *(_DWORD *)(v10 + 8);
        if (!v11 || v12 < v11)
        {
          v13 = *(id *)v10;
          sub_100030BCC(src, v13);
          uuid_copy(uu, src);

          if (uuid_is_null(uu))
          {
            v14 = qword_100999808;
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
            {
              sub_1004DE0EC(v10, src);
              v15 = src;
              if (v36 < 0)
                v15 = *(unsigned __int8 **)src;
              *(_DWORD *)buf = 67109378;
              v38 = v12;
              v39 = 2080;
              v40 = v15;
              _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Found invalid call in sent calls at index %d (call: %s)", buf, 0x12u);
              if (v36 < 0)
                operator delete(*(void **)src);
            }
          }
          v11 = v12;
        }
        v10 += 104;
      }
      while ((id *)v10 != v33);
      if (!v11)
      {
LABEL_30:
        v19 = v29;
        if (v29 != v30)
        {
          v20 = 0;
          do
          {
            v21 = *((_DWORD *)v19 + 2);
            if (!v20 || v21 < v20)
            {
              v22 = *v19;
              sub_100030BCC(src, v22);
              uuid_copy(uu, src);

              if (uuid_is_null(uu))
              {
                v23 = qword_100999808;
                if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
                {
                  sub_1004DE0EC((uint64_t)v19, src);
                  v24 = v36 >= 0 ? src : *(unsigned __int8 **)src;
                  *(_DWORD *)buf = 67109378;
                  v38 = v21;
                  v39 = 2080;
                  v40 = v24;
                  _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Found invalid call in current calls at index %d (call: %s)", buf, 0x12u);
                  if (v36 < 0)
                    operator delete(*(void **)src);
                }
              }
              v20 = v21;
            }
            v19 += 13;
          }
          while (v19 != v30);
        }
      }
    }
    if (uuid_is_null(uu))
    {
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FB698();
      v8 = 21;
    }
    else
    {
      if (qword_10097AB08 != -1)
        dispatch_once(&qword_10097AB08, &stru_100933E48);
      v25 = off_10097AB00;
      v26 = sub_100030DF4(uu);
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      if (sub_1005D4A80((uint64_t)v25))
        v8 = 0;
      else
        v8 = 255;

    }
  }
  else
  {
    v8 = 4;
  }
  *(_QWORD *)uu = &v29;
  sub_10026BD18((void ***)uu);
  v29 = (void **)&v32;
  sub_10026BD18(&v29);
  return v8;
}

void sub_1004DD16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  *(_QWORD *)(v14 - 104) = &a11;
  sub_10026BD18((void ***)(v14 - 104));
  a11 = (void **)&a14;
  sub_10026BD18(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1004DD214(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  id *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  int v12;
  id v13;
  NSObject *v14;
  unsigned __int8 *v15;
  id *v16;
  uint64_t v17;
  id v18;
  void **v19;
  int v20;
  int v21;
  id v22;
  NSObject *v23;
  unsigned __int8 *v24;
  void *v25;
  id v26;
  void *v27;
  void **v29;
  void **v30;
  uint64_t v31;
  id *v32;
  id *v33;
  uint64_t v34;
  unsigned __int8 src[8];
  char v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  unsigned __int8 *v40;
  uuid_t uu;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  v4 = a1 + 360;
  sub_10026AB34((int)&v32);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  sub_10026AD84(v4, (int)&v29);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  if ((sub_1005D4C04((uint64_t)off_10097AB00) & 1) != 0)
  {
    if (a3)
    {
      v5 = (id *)sub_1005C5E58((uint64_t *)&v32, a3);
      v6 = (uint64_t)v5;
      if (v33 == v5)
      {
        v16 = (id *)sub_1005C5E58((uint64_t *)&v29, a3);
        v17 = (uint64_t)v16;
        if (v30 != v16)
        {
          v18 = *v16;
          sub_100030BCC(src, v18);
          uuid_copy(uu, src);

          if (uuid_is_null(uu))
          {
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
            {
              sub_1004DE0EC(v17, src);
              sub_1006FB6F8();
            }
          }
        }
      }
      else
      {
        v7 = *v5;
        sub_100030BCC(src, v7);
        uuid_copy(uu, src);

        if (uuid_is_null(uu) && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        {
          sub_1004DE0EC(v6, src);
          sub_1006FB740();
        }
      }
    }
    else
    {
      v9 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)src = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Allowing zero index private conference command - finding index of oldest call", src, 2u);
      }
      v10 = (uint64_t)v32;
      if (v32 == v33)
        goto LABEL_30;
      v11 = 0;
      do
      {
        v12 = *(_DWORD *)(v10 + 8);
        if (!v11 || v12 < v11)
        {
          v13 = *(id *)v10;
          sub_100030BCC(src, v13);
          uuid_copy(uu, src);

          if (uuid_is_null(uu))
          {
            v14 = qword_100999808;
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
            {
              sub_1004DE0EC(v10, src);
              v15 = src;
              if (v36 < 0)
                v15 = *(unsigned __int8 **)src;
              *(_DWORD *)buf = 67109378;
              v38 = v12;
              v39 = 2080;
              v40 = v15;
              _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Found invalid call in sent calls at index %d (call: %s)", buf, 0x12u);
              if (v36 < 0)
                operator delete(*(void **)src);
            }
          }
          v11 = v12;
        }
        v10 += 104;
      }
      while ((id *)v10 != v33);
      if (!v11)
      {
LABEL_30:
        v19 = v29;
        if (v29 != v30)
        {
          v20 = 0;
          do
          {
            v21 = *((_DWORD *)v19 + 2);
            if (!v20 || v21 < v20)
            {
              v22 = *v19;
              sub_100030BCC(src, v22);
              uuid_copy(uu, src);

              if (uuid_is_null(uu))
              {
                v23 = qword_100999808;
                if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
                {
                  sub_1004DE0EC((uint64_t)v19, src);
                  v24 = v36 >= 0 ? src : *(unsigned __int8 **)src;
                  *(_DWORD *)buf = 67109378;
                  v38 = v21;
                  v39 = 2080;
                  v40 = v24;
                  _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Found invalid call in current calls at index %d (call: %s)", buf, 0x12u);
                  if (v36 < 0)
                    operator delete(*(void **)src);
                }
              }
              v20 = v21;
            }
            v19 += 13;
          }
          while (v19 != v30);
        }
      }
    }
    if (uuid_is_null(uu))
    {
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FB788();
      v8 = 21;
    }
    else
    {
      if (qword_10097AB08 != -1)
        dispatch_once(&qword_10097AB08, &stru_100933E48);
      v25 = off_10097AB00;
      v26 = sub_100030DF4(uu);
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      if (sub_1005D4A90((uint64_t)v25))
        v8 = 0;
      else
        v8 = 255;

    }
  }
  else
  {
    v8 = 4;
  }
  *(_QWORD *)uu = &v29;
  sub_10026BD18((void ***)uu);
  v29 = (void **)&v32;
  sub_10026BD18(&v29);
  return v8;
}

void sub_1004DD724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  *(_QWORD *)(v14 - 104) = &a11;
  sub_10026BD18((void ***)(v14 - 104));
  a11 = (void **)&a14;
  sub_10026BD18(&a11);
  _Unwind_Resume(a1);
}

void sub_1004DD7CC(uint64_t a1, int a2, unsigned int a3, int a4)
{
  uint64_t *v5;

  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FB7E8();
  }
  else if (a3)
  {
    v5 = sub_1004CCD90(a1, a3);
    if (v5)
      sub_10026BB4C((uint64_t)(v5 + 50), a4);
  }
}

_BYTE *sub_1004DD840(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v6;
  int v7;
  char v8;
  NSObject *v9;
  int v10;
  _BOOL4 v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  unsigned int v38;
  __int16 v39;
  int v40;

  v34 = 0;
  sub_100043758(&v34);
  v6 = a2 + 400;
  v7 = sub_10026B8E4(v6);
  v8 = sub_100155660(v7);
  sub_10004339C(&v34);
  v9 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    v10 = sub_10026BAFC(v6);
    *(_DWORD *)buf = 67109632;
    v36 = a3;
    v37 = 1024;
    v38 = a5;
    v39 = 1024;
    v40 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Initiating SCO connection with delay of %d milliseconds, codec %d, lastCodec %d", buf, 0x14u);
  }
  if (sub_10026BAFC(v6) == a5)
  {
    v11 = 0;
    if ((v8 & 0x80) == 0)
    {
LABEL_5:
      v12 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v11 = sub_10026BAFC(v6) != 0;
    if ((v8 & 0x80) == 0)
      goto LABEL_5;
  }
  v12 = sub_10026B914(v6) != 5 || v11;
LABEL_10:
  v13 = (unsigned __int8 *)sub_10026B8EC(v6);
  v14 = v13[128];
  v15 = v13[129];
  v16 = v13[130];
  v17 = v13[131];
  v18 = v13[132];
  v19 = v13[133];
  v20 = sub_1000438A4();
  sub_10043F854((uint64_t)v13);
  v31 = (v16 << 16) | (v15 << 8) | (v17 << 24) | (v18 << 32) | (v19 << 40) | v14;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 80))(v20);
  v22 = sub_1004D1A30(v21, a5);
  v23 = (v14 << 40) | (v15 << 32) | (v16 << 24) | (v17 << 16) | (v18 << 8) | v19;
  sub_1004D9CF0(v22, v23, v22 ^ 1);
  if (!v12)
  {
    v29 = sub_10026B8E4(v6);
    sub_1004D0D94(v29, v29, a3);
  }
  sub_10006D81C(&v34);
  v24 = sub_10026B8E4(v6);
  v25 = sub_100156F08(v24, a5);
  sub_10004339C(&v34);
  if (v25)
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FB848();
    v26 = sub_1000438A4();
    v27 = sub_10043F854((uint64_t)v13);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v26 + 80))(v26, v31, v27, 1, 0, 0, 1, 0);
    sub_1004D9CF0(v28, v23, 0);
  }
  if (sub_10026BAFC(v6) != a5)
    sub_10026BAF4(v6, a5);
  return sub_100043728(&v34);
}

void sub_1004DDB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100043728(&a15);
  _Unwind_Resume(a1);
}

void sub_1004DDB48(uint64_t a1)
{
  sub_10026B180(*(_QWORD *)(a1 + 32));
}

void sub_1004DDB50(int a1, uint64_t a2, int a3, __int16 a4)
{
  __int16 v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;
  int v11;
  __int16 v12;
  __int16 v13;

  if (a2)
  {
    v7 = sub_10015C5CC(a2);
    v8 = sub_100475960();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1004E6A44;
    v9[3] = &unk_1009173C0;
    v12 = v7;
    v10 = a1;
    v11 = a3;
    v13 = a4;
    sub_100041A34(v8, v9);
  }
}

uint64_t sub_1004DDBD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  void **v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  void *__p[2];
  char v17;
  uint8_t buf[4];
  void **v19;
  __int16 v20;
  int v21;

  v4 = sub_1004CD5FC(a1, a2);
  v5 = sub_10026BCF0(v4 + 400);
  v6 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v7 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v19 = v7;
    v20 = 1024;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Transitioning to HandsfreeAoS - device:%{public}s isInAdvancedSniff:%d", buf, 0x12u);
    if (v17 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v8 = a2 + 128;
  v9 = (unsigned __int16 *)sub_10019AEA4(a2 + 128);
  sub_10004339C(__p);
  if (v5)
  {
    v10 = sub_1004D14F8(a1, v8);
    sub_10006D81C(__p);
    v11 = sub_100157228(v10);
  }
  else
  {
    v12 = sub_10025A90C(v8);
    v13 = sub_1000438A4();
    BYTE2(v15) = 1;
    LOWORD(v15) = 2;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, int))(*(_QWORD *)v13 + 1536))(v13, *v9, 24, 20, 8, 1, 0, v12, 0x2D000000001, v15);
    v11 = 0;
  }
  sub_100043728(__p);
  return v11;
}

void sub_1004DDD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

void (*sub_1004DDDB4(_QWORD *a1, _QWORD *a2, void (*a3)(_QWORD, _QWORD)))(_QWORD, _QWORD)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      a3(*((unsigned __int16 *)v5 + 16), v5[5]);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

_BYTE *sub_1004DDE30(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *result;
  int v5;
  char v6;

  v3 = a2 + 400;
  result = (_BYTE *)sub_10026B98C(a2 + 400);
  if ((_DWORD)result)
  {
    sub_10026B994(v3, 0);
    v6 = 0;
    sub_100043758(&v6);
    v5 = sub_100156728(a1, 0);
    sub_10004339C(&v6);
    if (v5)
    {
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FB8A8();
    }
    return sub_100043728(&v6);
  }
  return result;
}

void sub_1004DDEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004DDEDC(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t *v5;
  NSObject *v6;
  uint64_t result;
  int v8;
  void **v9;
  void **v10;
  void **v11;
  int v12;
  void *__p[2];
  char v14;
  int v15;
  void *v16[2];
  char v17;
  uint8_t buf[4];
  void **v19;
  __int16 v20;
  void **v21;

  v4 = a1 + 360;
  sub_10026ABA8(a1 + 360);
  v5 = sub_1004CCD90(a1, a2);
  if (v5)
    sub_100263F60((uint64_t)(v5 + 50), 0);
  if (sub_10026AAEC(v4) || sub_10026AAF4(v4))
  {
    if (!sub_10026AD34(v4, 1))
    {
      v6 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      {
        v15 = sub_10026ACF0(v4);
        sub_10026A9F4(&v15, v16);
        v8 = v17;
        v9 = (void **)v16[0];
        v12 = 1;
        sub_10026A9F4(&v12, __p);
        v10 = v16;
        if (v8 < 0)
          v10 = v9;
        if (v14 >= 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        v19 = v10;
        v20 = 2082;
        v21 = v11;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Attempting to reject incoming call but call setup is \"%{public}s\" instead of \"%{public}s\"", buf, 0x16u);
        if (v14 < 0)
          operator delete(__p[0]);
        if (v17 < 0)
          operator delete(v16[0]);
      }
    }
    if (qword_10097AB08 != -1)
      dispatch_once(&qword_10097AB08, &stru_100933E48);
    if (sub_1005D4910((uint64_t)off_10097AB00))
      return 0;
    else
      return 255;
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      sub_1006FB8D4();
      return 0;
    }
  }
  return result;
}

void sub_1004DE0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1004DE0EC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  void **v6;
  const char *v7;
  unsigned int v8;
  const char *v9;
  int v10;
  int v11;
  int v12;
  id v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  void *__p[2];
  char v21;
  char __str[16];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  *(_OWORD *)__str = 0u;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 12);
  v6 = __p;
  sub_1005D4330((char *)(a1 + 24), (uint64_t)__p);
  if (v21 < 0)
    v6 = (void **)__p[0];
  v7 = (const char *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    v7 = *(const char **)v7;
  v8 = *(_DWORD *)(a1 + 16) - 1;
  if (v8 > 6)
    v9 = "unknown";
  else
    v9 = off_100933F70[v8];
  v10 = *(unsigned __int8 *)(a1 + 13);
  v11 = *(unsigned __int8 *)(a1 + 14);
  v12 = *(unsigned __int8 *)(a1 + 15);
  v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)a1, "UUIDString")));
  v14 = (const char *)objc_msgSend(v13, "UTF8String");
  v15 = " (CallScreening)";
  v16 = "";
  if (!v12)
    v15 = "";
  v17 = " (Expanse)";
  if (!v11)
    v17 = "";
  if (v10)
    v16 = ", conf";
  v18 = "Outgoing to";
  if (!v5)
    v18 = "Incoming from";
  snprintf(__str, 0x100uLL, "[#%d: %s %s \"%s\" (%s%s%s%s ID:%s)]", v4, v18, (const char *)v6, v7, v9, v16, v17, v15, v14);

  if (v21 < 0)
    operator delete(__p[0]);
  return sub_100091AE8(a2, __str);
}

void sub_1004DE2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1004DE2D8(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  NSObject *v6;
  char *v7;
  void **v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  char *v15;
  __int16 v16;
  void **v17;

  v5 = sub_1004CD5FC(a1, a2);
  v6 = qword_100999808;
  if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    goto LABEL_8;
  v7 = a3;
  if (a3[23] < 0)
    v7 = *(char **)a3;
  sub_10043E5F8(a2, __p);
  v8 = v13 >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)buf = 136446466;
  v15 = v7;
  v16 = 2082;
  v17 = v8;
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending '%{public}s Siri status event for device %{public}s", buf, 0x16u);
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (!v5)
      return;
  }
  else
  {
LABEL_8:
    if (!v5)
      return;
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v9 = sub_10026B8E4(v5 + 400);
  if (a3[23] < 0)
  {
    v11 = a3;
    a3 = *(char **)a3;
    v10 = *((_QWORD *)v11 + 1);
  }
  else
  {
    LOWORD(v10) = a3[23];
  }
  sub_100155354(v9, a3, (unsigned __int16)v10);
  sub_10004339C(__p);
  sub_100043728(__p);
}

void sub_1004DE430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_1004DE44C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id *v5;
  id *v6;
  std::string __p;
  _BYTE __dst[56];
  void ***v9;
  uint64_t v10;
  void **v11[3];
  id *v12;
  id *v13;
  uint64_t v14;
  void ***v15;

  v3 = a2;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  sub_1005C5C20(&v12);
  memset(v11, 0, sizeof(v11));
  sub_1005C5C20(v11);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  if (sub_1005D4818((uint64_t)off_10097AB00))
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FA53C();
  }
  else
  {
    v4 = a1 + 360;
    sub_10026AD84(a1 + 360, (int)&v9);
    sub_10026BDD4((uint64_t)v11, (uint64_t)v9, v10, 0x4EC4EC4EC4EC4EC5 * ((v10 - (uint64_t)v9) >> 3));
    v15 = (void ***)&v9;
    sub_10026BD18((void ***)&v15);
    if ((sub_10026AE68(a1 + 360, (uint64_t *)&v12) & 1) == 0)
    {
      if (sub_1005C61FC((uint64_t *)v11, (uint64_t *)&v12))
      {
        sub_1004D427C(a1, (uint64_t *)&v12, v3);
      }
      else
      {
        v5 = sub_1005C5DCC(&v12, v3);
        v6 = v5;
        if (v13 != v5 && *((_DWORD *)v5 + 4) == 5)
        {
          sub_1005D4200(__dst);
          if (*((char *)v6 + 103) < 0)
            sub_10003430C(&__p, v6[10], (unint64_t)v6[11]);
          else
            __p = *(std::string *)(v6 + 10);
          sub_10026ABF4(v4, (uint64_t)__dst, &__p, 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          sub_1005D4204(__dst);
        }
      }
    }
  }
  v9 = v11;
  sub_10026BD18((void ***)&v9);
  v11[0] = (void **)&v12;
  sub_10026BD18(v11);

}

void sub_1004DE630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  uint64_t v23;

  sub_1005D4204(&a15);
  a22 = v23 - 88;
  sub_10026BD18((void ***)&a22);
  *(_QWORD *)(v23 - 88) = v23 - 64;
  sub_10026BD18((void ***)(v23 - 88));

  _Unwind_Resume(a1);
}

void sub_1004DE6BC(uint64_t a1, void *a2)
{
  sub_1004DE44C(a1 - 256, a2);
}

void sub_1004DE6C4(uint64_t a1)
{
  int v2;
  __int128 __p;
  void *v4;
  void *v5[4];

  memset(v5, 0, sizeof(v5));
  sub_100091AE8(&v5[1], "");
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  if (sub_1005D47E8((uint64_t)off_10097AB00))
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FA510();
  }
  else
  {
    v2 = (int)v5[0];
    if (SHIBYTE(v5[3]) < 0)
    {
      sub_10003430C(&__p, v5[1], (unint64_t)v5[2]);
    }
    else
    {
      __p = *(_OWORD *)&v5[1];
      v4 = v5[3];
    }
    sub_10026AAA0(a1 + 360, (uint64_t)&v2);
    if (SHIBYTE(v4) < 0)
      operator delete((void *)__p);
  }
  if (SHIBYTE(v5[3]) < 0)
    operator delete(v5[1]);
}

void sub_1004DE7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_1004DE800(uint64_t a1)
{
  sub_1004DE6C4(a1 - 256);
}

_BYTE *sub_1004DE808(uint64_t a1)
{
  uint64_t v1;
  __int16 v2;
  char v3;
  char v5;

  v1 = a1;
  sub_1004D1F44(a1);
  v5 = 0;
  sub_100043758(&v5);
  v1 += 360;
  v2 = sub_10026AA54(v1);
  sub_1001552B4(v2);
  v3 = sub_10026AA64(v1);
  sub_1001552D8(v3);
  return sub_100043728(&v5);
}

void sub_1004DE860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

_BYTE *sub_1004DE874(uint64_t a1)
{
  return sub_1004DE808(a1 - 256);
}

void sub_1004DE87C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100933E48);
  v2 = sub_1005D47F8((uint64_t)off_10097AB00);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    sub_1004DE92C(a1, 0, 0, v3);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
  {
    sub_1006FA4E4();
  }

}

void sub_1004DE91C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004DE92C(_QWORD *a1, char *a2, _BYTE *a3, void *a4)
{
  id v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  char v37;
  _QWORD v38[2];

  v7 = a4;
  v38[0] = 0;
  v38[1] = 0;
  sub_10003415C((uint64_t)v38, (uint64_t)(a1 + 95));
  v8 = (uint64_t)(a1 + 45);
  if (a2)
  {
    v9 = *a2;
    v10 = v9 != sub_10026AD4C((uint64_t)(a1 + 45));
    sub_10026AD44((uint64_t)(a1 + 45), *a2);
    if (a3)
      goto LABEL_3;
  }
  else
  {
    v10 = 0;
    if (a3)
    {
LABEL_3:
      if (*a3 == 100)
        v11 = 5;
      else
        v11 = *a3 / 0x14u + 1;
      v12 = sub_10026AD5C((uint64_t)(a1 + 45));
      sub_10026AD54((uint64_t)(a1 + 45), v11);
      v13 = v11 != v12;
      if (v7)
        goto LABEL_7;
LABEL_10:
      v18 = 0;
      v19 = 0;
      goto LABEL_11;
    }
  }
  v13 = 0;
  if (!v7)
    goto LABEL_10;
LABEL_7:
  v14 = objc_msgSend(v7, "service");
  v15 = sub_10026AAD4((uint64_t)(a1 + 45));
  v16 = objc_msgSend(v7, "roaming");
  v17 = sub_10026AADC((uint64_t)(a1 + 45));
  sub_10026AAE4((uint64_t)(a1 + 45), v7);
  v18 = v14 ^ v15;
  v19 = v16 ^ v17;
LABEL_11:
  if (v10 || v13 || (v18 & 1) != 0 || v19)
  {
    v37 = 0;
    sub_100043758(&v37);
    if (a1[105])
    {
      v20 = (_QWORD *)a1[103];
      v21 = a1 + 104;
      if (v20 != a1 + 104)
      {
        do
        {
          if (v10)
          {
            v22 = *((unsigned __int16 *)v20 + 16);
            v23 = sub_10026AD4C(v8);
            sub_1001561A8(v22, v23);
          }
          if (v13)
          {
            v24 = *((unsigned __int16 *)v20 + 16);
            v25 = sub_10026AD5C(v8);
            sub_100156064(v24, v25);
          }
          if (v18)
          {
            v26 = *((unsigned __int16 *)v20 + 16);
            v27 = sub_10026AAD4(v8);
            sub_100155AEC(v26, v27);
          }
          if (v19)
          {
            v28 = *((unsigned __int16 *)v20 + 16);
            v29 = sub_10026AADC(v8);
            sub_100156328(v28, v29);
          }
          v30 = (_QWORD *)v20[1];
          if (v30)
          {
            do
            {
              v31 = v30;
              v30 = (_QWORD *)*v30;
            }
            while (v30);
          }
          else
          {
            do
            {
              v31 = (_QWORD *)v20[2];
              v32 = *v31 == (_QWORD)v20;
              v20 = v31;
            }
            while (!v32);
          }
          v20 = v31;
        }
        while (v31 != v21);
      }
    }
    else
    {
      if (v10)
      {
        v33 = sub_10026AD4C((uint64_t)(a1 + 45));
        sub_1001561A8(0, v33);
      }
      if (v13)
      {
        v34 = sub_10026AD5C((uint64_t)(a1 + 45));
        sub_100156064(0, v34);
      }
      if (v18)
      {
        v35 = sub_10026AAD4((uint64_t)(a1 + 45));
        sub_100155AEC(0, v35);
      }
      if (v19)
      {
        v36 = sub_10026AADC((uint64_t)(a1 + 45));
        sub_100156328(0, v36);
      }
    }
    sub_100043728(&v37);
  }
  sub_100034234((uint64_t)v38);

}

void sub_1004DEBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1004DEBEC(uint64_t a1)
{
  sub_1004DE87C((_QWORD *)(a1 - 256));
}

void sub_1004DEBF4(_QWORD *a1, char a2)
{
  char v2;

  v2 = a2;
  sub_1004DE92C(a1, &v2, 0, 0);
}

void sub_1004DEC20(uint64_t a1, char a2)
{
  char v2;

  v2 = a2;
  sub_1004DE92C((_QWORD *)(a1 - 256), &v2, 0, 0);
}

void sub_1004DEC50(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[3];
  char v7;

  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x2020000000;
  v7 = a3;
  v4 = sub_100475960();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004DECEC;
  v5[3] = &unk_100919528;
  v5[4] = v6;
  v5[5] = a1;
  sub_100041A34(v4, v5);
  _Block_object_dispose(v6, 8);
}

void sub_1004DECD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004DECEC(uint64_t a1)
{
  sub_1004DE92C(*(_QWORD **)(a1 + 40), 0, (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), 0);
}

void sub_1004DED08(uint64_t a1, uint64_t a2, char a3)
{
  sub_1004DEC50(a1 - 272, 0, a3);
}

void sub_1004DED14(uint64_t a1, uint64_t *a2, _BYTE *a3, _BYTE *a4, BOOL *a5, _BYTE *a6, int *a7, int *a8, std::string *a9, std::string *a10)
{
  id v12;
  uint64_t v13;
  int v14;
  int v15;
  id v16;
  BOOL v17;
  uint64_t v18;
  void **v19;
  NSObject *v20;
  const char *v21;
  id v22;
  id *v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  void **v27;
  id v28;
  id *v29;
  char v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  void **v34;
  char v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  void **v39;
  _BOOL4 v40;
  BOOL v41;
  int v42;
  int v43;
  BOOL v44;
  NSObject *v45;
  uint64_t v51;
  int v52;
  void *__p[2];
  char v54;
  id *v55;
  id *v56;
  uint64_t v57;
  uint8_t buf[4];
  void **v59;
  _QWORD v60[2];

  v55 = 0;
  v56 = 0;
  v57 = 0;
  v51 = a1 + 360;
  sub_10026AD84(a1 + 360, (int)&v55);
  v60[0] = 0;
  v60[1] = 0;
  v12 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v60);
  *a4 = 0;
  v13 = *a2;
  if (*a2 == a2[1])
  {
    v52 = 0;
    v15 = 0;
    v14 = 0;
LABEL_59:
    v40 = v15 > 0;
    if (v14 > 0)
      v40 = 1;
    v41 = !v40;
    v42 = 1;
    if (v41)
      v43 = 2;
    else
      v43 = 1;
    if (v52 <= 0)
      v43 = 0;
    *a7 = v43;
    v44 = v15 > 0 || v52 > 0;
    *a5 = v44;
    if ((*a4 & 0xC) == 0)
    {
      if ((*a4 & 1) != 0 || *a3)
      {
        v42 = 2;
      }
      else
      {
        if ((*a4 & 2) == 0)
          goto LABEL_76;
        v42 = 3;
      }
    }
    *a8 = v42;
    goto LABEL_76;
  }
  v14 = 0;
  v15 = 0;
  v52 = 0;
  while (2)
  {
    v16 = *(id *)v13;
    if (objc_msgSend(v16, "isEqual:", v12))
    {
      v17 = *(_DWORD *)(v13 + 16) == 7;

      if (!v17)
      {
        v18 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        {
          sub_1004DE0EC(v13, __p);
          v19 = __p;
          if (v54 < 0)
            v19 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v59 = v19;
          v20 = v18;
          v21 = "Invalid call status - empty identifier is reserved for virtual calls: %s";
LABEL_54:
          _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, v21, buf, 0xCu);
          if (v54 < 0)
            operator delete(__p[0]);
        }
        goto LABEL_56;
      }
    }
    else
    {

    }
    switch(*(_DWORD *)(v13 + 16))
    {
      case 1:
        v22 = *(id *)v13;
        v23 = sub_1005C5DCC(&v55, v22);

        ++v15;
        if (v56 == v23 || *((_DWORD *)v23 + 4) != 2)
          goto LABEL_56;
        goto LABEL_28;
      case 2:
        v28 = *(id *)v13;
        v29 = sub_1005C5DCC(&v55, v28);

        ++v52;
        if (v56 == v29 || *((_DWORD *)v29 + 4) != 1)
          goto LABEL_56;
        if (!sub_10026AD7C(v51))
        {
LABEL_28:
          *a6 = 1;
LABEL_56:
          v13 += 104;
          if (v13 == a2[1])
            goto LABEL_59;
          continue;
        }
        sub_10026AD74(v51, 0);
        v45 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "We're actually dialing a call and putting another one on hold. This is TC_AG_TWC_BV_05_I!", (uint8_t *)__p, 2u);
        }
LABEL_76:

        __p[0] = &v55;
        sub_10026BD18((void ***)__p);
        return;
      case 3:
        ++v14;
        if (*(_BYTE *)(v13 + 12))
        {
          *a4 |= 1u;
          sub_10026AD74(v51, 0);
          goto LABEL_56;
        }
        v33 = qword_100999808;
        if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          goto LABEL_56;
        sub_1004DE0EC(v13, __p);
        v34 = __p;
        if (v54 < 0)
          v34 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v59 = v34;
        v20 = v33;
        v21 = "Invalid call status - dialed calls should be outgoing only: %s";
        goto LABEL_54;
      case 4:
        ++v14;
        if (*(_BYTE *)(v13 + 12))
        {
          v30 = *a4 | 2;
          goto LABEL_38;
        }
        v36 = qword_100999808;
        if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          goto LABEL_56;
        sub_1004DE0EC(v13, __p);
        v37 = __p;
        if (v54 < 0)
          v37 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v59 = v37;
        v20 = v36;
        v21 = "Invalid call status - alerting calls should be outgoing only: %s";
        goto LABEL_54;
      case 5:
        if (!*(_BYTE *)(v13 + 12))
        {
          v35 = 4;
          goto LABEL_49;
        }
        v24 = qword_100999808;
        if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          goto LABEL_56;
        sub_1004DE0EC(v13, __p);
        v25 = __p;
        if (v54 < 0)
          v25 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v59 = v25;
        v20 = v24;
        v21 = "Invalid call status - found incoming call tagged as outgoing: %s";
        goto LABEL_54;
      case 6:
        if (!*(_BYTE *)(v13 + 12))
        {
          v35 = 8;
LABEL_49:
          *a4 |= v35;
          sub_1005D4228(a9, v13 + 24);
          std::string::operator=(a10, (const std::string *)(v13 + 80));
          goto LABEL_56;
        }
        v31 = qword_100999808;
        if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          goto LABEL_56;
        sub_1004DE0EC(v13, __p);
        v32 = __p;
        if (v54 < 0)
          v32 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v59 = v32;
        v20 = v31;
        v21 = "Invalid call status - waiting calls should be incoming only: %s";
        goto LABEL_54;
      case 7:
        if (*(_BYTE *)(v13 + 12))
        {
          *a3 = 1;
          v30 = *a4 | 1;
LABEL_38:
          *a4 = v30;
          goto LABEL_56;
        }
        v38 = qword_100999808;
        if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          goto LABEL_56;
        sub_1004DE0EC(v13, __p);
        v39 = __p;
        if (v54 < 0)
          v39 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v59 = v39;
        v20 = v38;
        v21 = "Invalid call status - visualVoicemail calls should be outgoing only: %s";
        goto LABEL_54;
      default:
        v26 = qword_100999808;
        if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          goto LABEL_56;
        sub_1004DE0EC(v13, __p);
        v27 = __p;
        if (v54 < 0)
          v27 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v59 = v27;
        v20 = v26;
        v21 = "Invalid call status - unknown type: %s";
        goto LABEL_54;
    }
  }
}

void sub_1004DF354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  a21 = (void **)&a24;
  sub_10026BD18(&a21);
  _Unwind_Resume(a1);
}

void sub_1004DF3CC(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  void *__p[2];
  char v15;
  char v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  void **v20;

  v16 = a3;
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v5 = a1 + 360;
    do
    {
      v6 = sub_10026B8EC(v4[5] + 400);
      if (sub_10026AC38(v5, 1))
      {
        if (*(_BYTE *)(v6 + 128))
        {
LABEL_5:
          if (*(_BYTE *)(v6 + 976))
          {
            v7 = qword_100999808;
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043F6EC(v6, (uint64_t)__p);
              v8 = __p;
              if (v15 < 0)
                v8 = (void **)__p[0];
              *(_DWORD *)buf = 141558275;
              v18 = 1752392040;
              v19 = 2081;
              v20 = v8;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Wireless Splitter suppressing UpdateCallStatus for device %{private, mask.hash}s due to WS being enabled", buf, 0x16u);
              if (v15 < 0)
                operator delete(__p[0]);
            }
            goto LABEL_16;
          }
        }
        else
        {
          v9 = 0;
          while (v9 != 5)
          {
            if (*(unsigned __int8 *)(v6 + 129 + v9++))
            {
              if ((unint64_t)(v9 - 1) <= 4)
                goto LABEL_5;
              break;
            }
          }
        }
      }
      sub_1004E7628(&v16, *((_WORD *)v4 + 16), v4[5]);
LABEL_16:
      v11 = (_QWORD *)v4[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v4[2];
          v13 = *v12 == (_QWORD)v4;
          v4 = v12;
        }
        while (!v13);
      }
      v4 = v12;
    }
    while (v12 != v3);
  }
}

void sub_1004DF598(uint64_t a1, _QWORD *a2, void (*a3)(_QWORD, _QWORD))
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  void **v20;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v6 = a1 + 360;
    do
    {
      v7 = sub_10026B8EC(v4[5] + 400);
      if (sub_10026AC38(v6, 1))
      {
        if (*(_BYTE *)(v7 + 128))
        {
LABEL_5:
          if (*(_BYTE *)(v7 + 976))
          {
            v8 = qword_100999808;
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043F6EC(v7, (uint64_t)__p);
              v9 = __p;
              if (v16 < 0)
                v9 = (void **)__p[0];
              *(_DWORD *)buf = 141558275;
              v18 = 1752392040;
              v19 = 2081;
              v20 = v9;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Wireless Splitter suppressing UpdateCallStatus for device %{private, mask.hash}s due to WS being enabled", buf, 0x16u);
              if (v16 < 0)
                operator delete(__p[0]);
            }
            goto LABEL_16;
          }
        }
        else
        {
          v10 = 0;
          while (v10 != 5)
          {
            if (*(unsigned __int8 *)(v7 + 129 + v10++))
            {
              if ((unint64_t)(v10 - 1) <= 4)
                goto LABEL_5;
              break;
            }
          }
        }
      }
      a3(*((unsigned __int16 *)v4 + 16), v4[5]);
LABEL_16:
      v12 = (_QWORD *)v4[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v4[2];
          v14 = *v13 == (_QWORD)v4;
          v4 = v13;
        }
        while (!v14);
      }
      v4 = v13;
    }
    while (v13 != v3);
  }
}

void sub_1004DF760(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  void **v6;
  const char *v7;
  int v8;
  NSObject *v9;
  void **v10;
  int v11;
  int v12;
  void *v13[2];
  char v14;
  _BYTE __p[12];
  char v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  const char *v20;

  if (sub_10026B9B4(a2 + 400))
  {
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100933D88);
    v3 = sub_1004D1420((uint64_t)off_10097AA38, a1);
    v4 = sub_10003BE44();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 384))(v4) & 1) == 0)
    {
      v5 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        v12 = 2;
        v6 = v13;
        sub_10026A9F4(&v12, v13);
        if (v14 < 0)
          v6 = (void **)v13[0];
        if (v3)
        {
          sub_10043E5F8(v3, __p);
          if (v16 >= 0)
            v7 = __p;
          else
            v7 = *(const char **)__p;
          *(_DWORD *)buf = 136446466;
          v18 = v6;
          v19 = 2082;
          v20 = v7;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
          if (v16 < 0)
            operator delete(*(void **)__p);
        }
        else
        {
          *(_DWORD *)buf = 136446466;
          v18 = v6;
          v19 = 2082;
          v20 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
        }
        if (v14 < 0)
          operator delete(v13[0]);
      }
      LOBYTE(v13[0]) = 0;
      sub_100043758(v13);
      v8 = sub_100155D2C(a1, 2u);
      sub_100043728(v13);
      if (v8)
        goto LABEL_31;
    }
    v9 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      if (v3)
      {
        sub_10043E5F8(v3, v13);
        if (v14 >= 0)
          v10 = v13;
        else
          v10 = (void **)v13[0];
        *(_DWORD *)__p = 136446210;
        *(_QWORD *)&__p[4] = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending call status \"call active\" to device %{public}s", __p, 0xCu);
        if (v14 < 0)
          operator delete(v13[0]);
      }
      else
      {
        *(_DWORD *)__p = 136446210;
        *(_QWORD *)&__p[4] = "NULL";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending call status \"call active\" to device %{public}s", __p, 0xCu);
      }
    }
    LOBYTE(v13[0]) = 0;
    sub_100043758(v13);
    v11 = sub_100155C08(a1, 1);
    sub_100043728(v13);
    if (v11)
    {
LABEL_31:
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FB900();
    }
  }
}

void sub_1004DFA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004DFA94(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  void *__p[2];
  char v15;
  __int16 v16;
  char v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  void **v21;

  v16 = a3;
  v17 = BYTE2(a3);
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v5 = a1 + 360;
    do
    {
      v6 = sub_10026B8EC(v4[5] + 400);
      if (sub_10026AC38(v5, 1))
      {
        if (*(_BYTE *)(v6 + 128))
        {
LABEL_5:
          if (*(_BYTE *)(v6 + 976))
          {
            v7 = qword_100999808;
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043F6EC(v6, (uint64_t)__p);
              v8 = __p;
              if (v15 < 0)
                v8 = (void **)__p[0];
              *(_DWORD *)buf = 141558275;
              v19 = 1752392040;
              v20 = 2081;
              v21 = v8;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Wireless Splitter suppressing UpdateCallStatus for device %{private, mask.hash}s due to WS being enabled", buf, 0x16u);
              if (v15 < 0)
                operator delete(__p[0]);
            }
            goto LABEL_16;
          }
        }
        else
        {
          v9 = 0;
          while (v9 != 5)
          {
            if (*(unsigned __int8 *)(v6 + 129 + v9++))
            {
              if ((unint64_t)(v9 - 1) <= 4)
                goto LABEL_5;
              break;
            }
          }
        }
      }
      sub_1004E7B48((unsigned __int8 *)&v16, *((_WORD *)v4 + 16), v4[5]);
LABEL_16:
      v11 = (_QWORD *)v4[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v4[2];
          v13 = *v12 == (_QWORD)v4;
          v4 = v12;
        }
        while (!v13);
      }
      v4 = v12;
    }
    while (v12 != v3);
  }
}

uint64_t sub_1004DFC68(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v5[3];
  uint8_t buf[16];
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 760);
  if (sub_10026AC38(a1 + 360, 0))
  {
    v2 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v3 = "Cannot send ring because ring status is not ringing";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, v3, buf, 2u);
    }
  }
  else if (sub_10026AD34(a1 + 360, 1))
  {
    if (sub_100481CB4(a1))
    {
      if (sub_10026AC38(a1 + 360, 1))
      {
        sub_1004E7840(v5, a1 + 824);
        sub_1004DF598(a1, v5, (void (*)(_QWORD, _QWORD))sub_1004E0794);
        sub_10001A82C((uint64_t)v5, (_QWORD *)v5[1]);
      }
      sub_10026AC48(a1 + 360);
      operator new();
    }
    v2 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v3 = "Cannot send ring because we are not connected";
      goto LABEL_13;
    }
  }
  else
  {
    v2 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      v3 = "Cannot send ring because is not incoming";
      goto LABEL_13;
    }
  }
  return sub_100034234((uint64_t)v7);
}

void sub_1004DFDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;

  sub_10001A82C((uint64_t)&a10, a11);
  sub_100034234(v11 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1004DFE48(uint64_t a1)
{
  NSObject *v2;
  uint64_t v4[3];
  uint8_t buf[16];
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 760);
  v2 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending call waiting notification to all connected devices", buf, 2u);
  }
  sub_1004E7840(v4, a1 + 824);
  sub_1004DF598(a1, v4, (void (*)(_QWORD, _QWORD))sub_1004E02BC);
  sub_10001A82C((uint64_t)v4, (_QWORD *)v4[1]);
  sub_10026AC48(a1 + 360);
  return sub_100034234((uint64_t)v6);
}

void sub_1004DFEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;

  sub_10001A82C((uint64_t)&a10, a11);
  sub_100034234(v11 - 32);
  _Unwind_Resume(a1);
}

void sub_1004DFF24(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  void *__p[2];
  char v15;
  int v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  void **v20;

  v16 = a3;
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v5 = a1 + 360;
    do
    {
      v6 = sub_10026B8EC(v4[5] + 400);
      if (sub_10026AC38(v5, 1))
      {
        if (*(_BYTE *)(v6 + 128))
        {
LABEL_5:
          if (*(_BYTE *)(v6 + 976))
          {
            v7 = qword_100999808;
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043F6EC(v6, (uint64_t)__p);
              v8 = __p;
              if (v15 < 0)
                v8 = (void **)__p[0];
              *(_DWORD *)buf = 141558275;
              v18 = 1752392040;
              v19 = 2081;
              v20 = v8;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Wireless Splitter suppressing UpdateCallStatus for device %{private, mask.hash}s due to WS being enabled", buf, 0x16u);
              if (v15 < 0)
                operator delete(__p[0]);
            }
            goto LABEL_16;
          }
        }
        else
        {
          v9 = 0;
          while (v9 != 5)
          {
            if (*(unsigned __int8 *)(v6 + 129 + v9++))
            {
              if ((unint64_t)(v9 - 1) <= 4)
                goto LABEL_5;
              break;
            }
          }
        }
      }
      sub_1004E8034((unsigned __int8 *)&v16, *((_WORD *)v4 + 16), v4[5]);
LABEL_16:
      v11 = (_QWORD *)v4[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v4[2];
          v13 = *v12 == (_QWORD)v4;
          v4 = v12;
        }
        while (!v13);
      }
      v4 = v12;
    }
    while (v12 != v3);
  }
}

void sub_1004E00F0(uint64_t a1, _QWORD *a2, unsigned __int8 a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  void *__p[2];
  char v15;
  unsigned __int8 v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  void **v20;

  v16 = a3;
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v5 = a1 + 360;
    do
    {
      v6 = sub_10026B8EC(v4[5] + 400);
      if (sub_10026AC38(v5, 1))
      {
        if (*(_BYTE *)(v6 + 128))
        {
LABEL_5:
          if (*(_BYTE *)(v6 + 976))
          {
            v7 = qword_100999808;
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043F6EC(v6, (uint64_t)__p);
              v8 = __p;
              if (v15 < 0)
                v8 = (void **)__p[0];
              *(_DWORD *)buf = 141558275;
              v18 = 1752392040;
              v19 = 2081;
              v20 = v8;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Wireless Splitter suppressing UpdateCallStatus for device %{private, mask.hash}s due to WS being enabled", buf, 0x16u);
              if (v15 < 0)
                operator delete(__p[0]);
            }
            goto LABEL_16;
          }
        }
        else
        {
          v9 = 0;
          while (v9 != 5)
          {
            if (*(unsigned __int8 *)(v6 + 129 + v9++))
            {
              if ((unint64_t)(v9 - 1) <= 4)
                goto LABEL_5;
              break;
            }
          }
        }
      }
      sub_1004E8580(&v16, *((_WORD *)v4 + 16), v4[5]);
LABEL_16:
      v11 = (_QWORD *)v4[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v4[2];
          v13 = *v12 == (_QWORD)v4;
          v4 = v12;
        }
        while (!v13);
      }
      v4 = v12;
    }
    while (v12 != v3);
  }
}

void sub_1004E02BC(unsigned __int16 a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  char *v8;
  NSObject *v9;
  std::string *v10;
  void **v11;
  void **v12;
  NSObject *v13;
  std::string *v14;
  void *v15;
  int v16;
  std::string::size_type v17;
  uint64_t v18;
  std::string *p_buf;
  std::string *v20;
  int v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  std::string v26;
  std::string v27;
  std::string buf;
  const char *v29;

  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100933D88);
  v4 = (char *)off_10097AA38;
  if (sub_10026B9B4(a2 + 400))
  {
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100933D88);
    v5 = sub_1004D1420((uint64_t)off_10097AA38, a1);
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100933D88);
    v6 = sub_1004CCD90((uint64_t)off_10097AA38, a1);
    if ((sub_10026B954((uint64_t)(v6 + 50)) & 1) != 0)
      goto LABEL_12;
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100933D88);
    v7 = sub_1004CCD90((uint64_t)off_10097AA38, a1);
    if ((sub_10026B974((uint64_t)(v7 + 50)) & 1) != 0)
    {
LABEL_12:
      v8 = v4 + 360;
      v9 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        v10 = &v27;
        sub_10026AC68((uint64_t)v8, &v27);
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v10 = (std::string *)v27.__r_.__value_.__r.__words[0];
        v11 = v24;
        sub_10026AC70(v8, (uint64_t)v24);
        if (v25 < 0)
          v11 = (void **)v24[0];
        if (v5)
        {
          sub_10043E5F8(v5, __p);
          if (v23 >= 0)
            v12 = __p;
          else
            v12 = (void **)__p[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v11;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
          v29 = (const char *)v12;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending call waiting notification for call %s \"%s\" to device %{public}s", (uint8_t *)&buf, 0x20u);
          if (v23 < 0)
            operator delete(__p[0]);
        }
        else
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v11;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
          v29 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending call waiting notification for call %s \"%s\" to device %{public}s", (uint8_t *)&buf, 0x20u);
        }
        if (v25 < 0)
          operator delete(v24[0]);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
      }
      sub_10026AC70(v8, (uint64_t)&v27);
      sub_1004D18B0((uint64_t)&v27, v5, &buf);
      v26 = buf;
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      v27.__r_.__value_.__s.__data_[0] = 0;
      sub_100043758(&v27);
      sub_10026AC68((uint64_t)v8, &buf);
      v16 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
      v17 = buf.__r_.__value_.__r.__words[0];
      v18 = sub_10026AC9C((uint64_t)v8);
      if (v16 >= 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)v17;
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v26;
      else
        v20 = (std::string *)v26.__r_.__value_.__r.__words[0];
      v21 = sub_1001568E8(a1, (const char *)p_buf, v18, (const char *)v20);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_10004339C(&v27);
      if (v21)
      {
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          sub_1006FB960();
      }
      sub_100043728(&v27);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      {
        v15 = (void *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_50;
      }
    }
    else
    {
      v13 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        if (!v5)
        {
          LODWORD(v27.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)"NULL";
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Device %{public}s does not support call waiting!", (uint8_t *)&v27, 0xCu);
          return;
        }
        sub_10043E5F8(v5, &buf);
        v14 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v27.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Device %{public}s does not support call waiting!", (uint8_t *)&v27, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          v15 = (void *)buf.__r_.__value_.__r.__words[0];
LABEL_50:
          operator delete(v15);
        }
      }
    }
  }
}

void sub_1004E070C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a17 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_1004E0794(unsigned __int16 a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string *p_buf;
  uint64_t v13;
  int v14;
  std::string::size_type v15;
  int v16;
  std::string *v17;
  int v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  std::string v23;
  std::string v24;
  std::string buf;
  const char *v26;

  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100933D88);
  v4 = (char *)off_10097AA38;
  v5 = a2 + 400;
  if (sub_10026B9B4(v5))
  {
    v6 = v4 + 360;
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100933D88);
    v7 = sub_1004D1420((uint64_t)off_10097AA38, a1);
    v8 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      v9 = &v23;
      sub_10026AC68((uint64_t)v6, &v23);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = (std::string *)v23.__r_.__value_.__r.__words[0];
      v10 = v21;
      sub_10026AC70(v6, (uint64_t)v21);
      if (v22 < 0)
        v10 = (void **)v21[0];
      if (v7)
      {
        sub_10043E5F8(v7, __p);
        if (v20 >= 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v10;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
        v26 = (const char *)v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending ring notification for call %s \"%s\" to device %{public}s", (uint8_t *)&buf, 0x20u);
        if (v20 < 0)
          operator delete(__p[0]);
      }
      else
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v10;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
        v26 = "NULL";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending ring notification for call %s \"%s\" to device %{public}s", (uint8_t *)&buf, 0x20u);
      }
      if (v22 < 0)
        operator delete(v21[0]);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
    }
    sub_10026AC70(v6, (uint64_t)&v23);
    sub_1004D18B0((uint64_t)&v23, v7, &buf);
    v24 = buf;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    v23.__r_.__value_.__s.__data_[0] = 0;
    sub_100043758(&v23);
    p_buf = &buf;
    sub_10026AC68((uint64_t)v6, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v13 = sub_10026AC9C((uint64_t)v6);
    v14 = SHIBYTE(v24.__r_.__value_.__r.__words[2]);
    v15 = v24.__r_.__value_.__r.__words[0];
    v16 = sub_10026B9DC(v5);
    if (v14 >= 0)
      v17 = &v24;
    else
      v17 = (std::string *)v15;
    v18 = sub_1001564D4(a1, (const char *)p_buf, v13, (const char *)v17, v16);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    sub_10004339C(&v23);
    if (v18 && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FB9C0();
    sub_100043728(&v23);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1004E0AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  _Unwind_Resume(exception_object);
}

void sub_1004E0B58()
{
  NSObject *v0;
  uint8_t v1[16];

  sub_1000438A4();
  if (sub_100333540())
  {
    v0 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v1 = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Reserve Voice Buf", v1, 2u);
    }
    sub_10019F240();
  }
}

_BYTE *sub_1004E0BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v9;

  v5 = a3 + 400;
  if (sub_10026B5EC(a3 + 400))
  {
    v9 = 0;
    sub_100043758(&v9);
    sub_100187584(a2 + 128);
    sub_100043728(&v9);
    v6 = 2000;
  }
  else
  {
    v6 = 0;
  }
  if (sub_10026B914(v5) == 5)
    v6 = 0;
  v7 = sub_10026BA9C(v5);
  return sub_1004DD840(v7, a3, v6, 0, v7);
}

void sub_1004E0C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

_BYTE *sub_1004E0C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  const char *v12;

  v5 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_10026B98C(a3 + 400);
    v7 = "ringtones";
    if (v6)
      v7 = "voice-command";
    v11 = 136446210;
    v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Making sco connection for playing %{public}s", (uint8_t *)&v11, 0xCu);
  }
  v8 = a1 + 360;
  if (sub_10026ACF0(v8) != 1 && (sub_10026AD64(v8) & 1) == 0 && (sub_10026B98C(a3 + 400) & 1) == 0)
  {
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100933D88);
    sub_1004D3FC8((uint64_t)off_10097AA38);
  }
  v9 = sub_10026BA9C(a3 + 400);
  return sub_1004DD840(v9, a3, 0, 0, v9);
}

_BYTE *sub_1004E0DBC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  NSObject *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;

  v6 = sub_1004D1348(a1, a2);
  if (qword_10097AB18 != -1)
    dispatch_once(&qword_10097AB18, &stru_100933EA8);
  v8 = !sub_1002CC2D4(qword_10097AB10, a2)
    && (v7 = sub_10026B9AC(a3 + 400), (v7 & 1) == 0)
    && sub_1004CF638(v7, a2) == 2;
  if (!sub_10026BA4C(a3 + 400) || v8)
  {
    sub_1004D3FC8(a1);
  }
  else
  {
    v9 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v10 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Starting voice command session for device %{public}s", buf, 0xCu);
      if (v14 < 0)
        operator delete(__p[0]);
    }
    if ((sub_10026B98C(a3 + 400) & 1) == 0)
    {
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      sub_100156728(v6, 1);
      sub_10004339C(__p);
      sub_10026B994(a3 + 400, 1);
      sub_100043728(__p);
    }
  }
  sub_1002A8D18(6);
  v11 = sub_10026BA9C(a3 + 400);
  return sub_1004DD840(v11, a3, 0, 0, v11);
}

void sub_1004E0F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E0FAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  NSObject *v7;
  _BOOL8 v8;
  const char *v9;
  _UNKNOWN **v10;
  _WORD *v11;
  int v12;
  NSObject *v13;
  std::string *p_buf;
  const char *v15;
  char v16;
  uint64_t v17;
  int v18;
  _QWORD v20[2];
  uint8_t v21[4];
  std::string *v22;
  __int16 v23;
  const char *v24;
  std::string buf;

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 760);
  v7 = qword_100999808;
  v8 = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    v9 = sub_1004CF258(v8, a3);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "RegisterScoChannel codecID: %s\n", (uint8_t *)&buf, 0xCu);
  }
  if (a3 <= 254)
  {
    v10 = &off_10097B4B8;
    v11 = &unk_10097B4D0;
    switch(a3)
    {
      case 127:
        goto LABEL_32;
      case 128:
        v10 = (_UNKNOWN **)&unk_10097B530;
        v11 = &unk_10097B548;
        goto LABEL_32;
      case 129:
        v10 = (_UNKNOWN **)&unk_10097B558;
        v11 = &unk_10097B570;
        goto LABEL_14;
      case 130:
        v10 = (_UNKNOWN **)&unk_10097B580;
        v11 = &unk_10097B598;
        goto LABEL_14;
      default:
        if (a3 != 2)
          goto LABEL_27;
        v10 = &off_10097B5A8;
        v11 = &unk_10097B5C0;
        goto LABEL_28;
    }
  }
  if (a3 != 255)
  {
    if (a3 == 256)
    {
      v10 = (_UNKNOWN **)&unk_10097B508;
      v11 = &unk_10097B520;
      goto LABEL_32;
    }
LABEL_27:
    v10 = (_UNKNOWN **)&unk_10097B5D0;
    v11 = &unk_10097B5E8;
    goto LABEL_28;
  }
  v10 = (_UNKNOWN **)&unk_10097B4E0;
  v11 = &unk_10097B4F8;
LABEL_14:
  memset(&buf, 0, sizeof(buf));
  sub_100091AE8(&buf, "4-EV5");
  v12 = sub_10026BADC(a4 + 400);
  if ((v12 & 1) == 0)
  {
    *((_WORD *)v10 + 11) = 16064;
    std::string::assign(&buf, "2-EV5");
  }
  v13 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    p_buf = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    v15 = "";
    if (!v12)
      v15 = " not";
    *(_DWORD *)v21 = 136315394;
    v22 = p_buf;
    v23 = 2080;
    v24 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Setting up call using %s packets as HDR eSCO is%s supported", v21, 0x16u);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((a3 - 129) >= 2 && a3 != 255)
  {
LABEL_28:
    if (sub_10026AA98(a4 + 400) == 2)
    {
      v11[4] = 28;
      v16 = 1;
    }
    else
    {
      v11[4] = -1;
      v16 = -1;
    }
    *((_BYTE *)v11 + 12) = v16;
  }
LABEL_32:
  sub_10026BAEC(a4 + 400, a3);
  buf.__r_.__value_.__s.__data_[0] = 0;
  sub_100043758(&buf);
  v17 = a2 + 128;
  v18 = sub_10018D068((uint64_t)off_100933AC0, v17, a4);
  if (v18 && v18 != 1327 && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    sub_1006FBAE0();
  if (sub_10018D0F8((uint64_t)v10, (uint64_t)v11, v17))
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FBA80();
    if (sub_10018D16C(v17) && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FBA20();
  }
  sub_10004339C(&buf);
  sub_100043728(&buf);
  return sub_100034234((uint64_t)v20);
}

void sub_1004E1354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E13A0(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 760);
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    sub_1006FBB40();
  sub_10026AB98(a1 + 360, a2);
  return sub_100034234((uint64_t)v5);
}

void sub_1004E1420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E1434(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  uint8_t v7[16];
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 760);
  v4 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HFP stream will start", v7, 2u);
  }
  if ((sub_1002D5A20(a2) & 1) != 0)
  {
    sub_10026BB34(a2 + 400, 1);
    sub_1004D0228(a1, a2);
    sub_10057D374(a2);
  }
  else
  {
    v5 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling streamWillStart", v7, 2u);
    }
  }
  return sub_100034234((uint64_t)v8);
}

void sub_1004E152C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E1540(uint64_t a1, uint64_t a2)
{
  return sub_1004E1434(a1 - 280, a2);
}

uint64_t sub_1004E1548(uint64_t a1, uint64_t a2)
{
  char v3;
  NSObject *v4;
  uint8_t v6[16];
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 760);
  v3 = sub_1002D5A20(a2);
  v4 = qword_100999808;
  if ((v3 & 1) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEBUG))
    {
      sub_1006FBBD0();
      if (a2)
        goto LABEL_4;
    }
    else if (a2)
    {
LABEL_4:
      sub_10057D500(a2);
      return sub_100034234((uint64_t)v7);
    }
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FBBA4();
  }
  else if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling streamAudioAvailable", v6, 2u);
  }
  return sub_100034234((uint64_t)v7);
}

void sub_1004E162C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E1640(uint64_t a1, uint64_t a2)
{
  return sub_1004E1548(a1 - 280, a2);
}

uint64_t sub_1004E1648(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  uint8_t v6[16];
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 760);
  v3 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stream did stop!", v6, 2u);
  }
  if ((sub_1002D5A20(a2) & 1) != 0)
  {
    if (a2)
    {
      sub_10057C514(a2);
      sub_10026BB34(a2 + 400, 0);
    }
  }
  else
  {
    v4 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling streamDidStop", v6, 2u);
    }
  }
  return sub_100034234((uint64_t)v7);
}

void sub_1004E1734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E1748(uint64_t a1, uint64_t a2)
{
  return sub_1004E1648(a1 - 280, a2);
}

void sub_1004E1750(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  v4 = sub_100475960();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004E17B4;
  v5[3] = &unk_100918090;
  v5[4] = a1;
  v5[5] = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_1004E17B4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  unsigned int v5;
  NSObject *v6;
  uint8_t v8[16];
  _QWORD v9[2];

  v2 = *(_QWORD *)(a1 + 32);
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, v2 + 760);
  v3 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stream reset, closing SCO if it wasn't closed", v8, 2u);
  }
  if ((sub_1002D5A20(*(_QWORD *)(a1 + 40)) & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 && sub_10026B8EC(v4 + 400) && sub_10026B914(*(_QWORD *)(a1 + 40) + 400))
    {
      v5 = sub_10026B8E4(*(_QWORD *)(a1 + 40) + 400);
      sub_1004D9E20(v2, v5, 0, 0);
    }
  }
  else
  {
    v6 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling streamDidReset", v8, 2u);
    }
  }
  return sub_100034234((uint64_t)v9);
}

void sub_1004E18D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004E18E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = a1 - 280;
  v4 = sub_100475960();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004E17B4;
  v5[3] = &unk_100918090;
  v5[4] = v3;
  v5[5] = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_1004E194C(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  int v13;
  NSObject *v14;
  _BOOL4 v15;
  _QWORD v17[2];
  uint8_t buf[4];
  int v19;

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 760);
  if ((sub_1002D5A20(a2) & 1) != 0)
  {
    if (a2)
    {
      v5 = a2 + 400;
      v6 = sub_10026B8E4(v5);
      v7 = sub_10026B8EC(v5);
      if (v7 && sub_10044FB48(v7) == 1)
        v8 = roundf(a3 * 15.0);
      else
        v8 = a3 * 15.0;
      v13 = sub_10026B934(v5);
      v14 = qword_100999808;
      v15 = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT);
      if (v13 == (int)v8)
      {
        if (v15)
        {
          *(_DWORD *)buf = 67109120;
          v19 = (int)v8;
          v10 = "Speaker volume is a duplicate value %d, not sending to external device";
          v11 = v14;
          v12 = 8;
          goto LABEL_12;
        }
      }
      else
      {
        if (v15)
        {
          *(_DWORD *)buf = 67109120;
          v19 = (int)v8;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Volume did update to %d", buf, 8u);
        }
        buf[0] = 0;
        sub_100043758(buf);
        sub_100155A18(v6, (int)v8);
        sub_10004339C(buf);
        sub_10026B93C(v5, (int)v8);
        sub_100043728(buf);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    {
      sub_1006FBBFC();
    }
  }
  else
  {
    v9 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v10 = "Audio device is not valid, not handling volumeDidUpdate";
      v11 = v9;
      v12 = 2;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
    }
  }
  return sub_100034234((uint64_t)v17);
}

void sub_1004E1B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E1BA0(uint64_t a1, uint64_t a2, float a3)
{
  return sub_1004E194C(a1 - 280, a2, a3);
}

uint64_t sub_1004E1BA8(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  int v13;
  NSObject *v14;
  _BOOL4 v15;
  _QWORD v17[2];
  uint8_t buf[4];
  int v19;

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 760);
  if ((sub_1002D5A20(a2) & 1) != 0)
  {
    if (a2)
    {
      v5 = a2 + 400;
      v6 = sub_10026B8E4(v5);
      v7 = sub_10026B8EC(v5);
      if (v7 && sub_10044FB48(v7) == 1)
        v8 = roundf(a3 * 15.0);
      else
        v8 = a3 * 15.0;
      v13 = sub_10026B924(v5);
      v14 = qword_100999808;
      v15 = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT);
      if (v13 == (int)v8)
      {
        if (v15)
        {
          *(_DWORD *)buf = 67109120;
          v19 = (int)v8;
          v10 = "Input volume is a duplicate value %d, not sending to external device";
          v11 = v14;
          v12 = 8;
          goto LABEL_12;
        }
      }
      else
      {
        if (v15)
        {
          *(_DWORD *)buf = 67109120;
          v19 = (int)v8;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Input volume did update to %d", buf, 8u);
        }
        buf[0] = 0;
        sub_100043758(buf);
        sub_100155944(v6, (int)v8);
        sub_10004339C(buf);
        sub_10026B92C(v5, (int)v8);
        sub_100043728(buf);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    {
      sub_1006FBBFC();
    }
  }
  else
  {
    v9 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v10 = "Audio device is not valid, not handling inputVolumeDidUpdate";
      v11 = v9;
      v12 = 2;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
    }
  }
  return sub_100034234((uint64_t)v17);
}

void sub_1004E1DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E1DFC(uint64_t a1, uint64_t a2, float a3)
{
  return sub_1004E1BA8(a1 - 280, a2, a3);
}

void sub_1004E1E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  _DWORD v8[2];

  v6 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SCO sample Rate updated to %d ", (uint8_t *)v8, 8u);
  }
  if ((sub_1002D5A20(a2) & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 264))(a1, a2, a3, 0, 0);
  }
  else
  {
    v7 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling scoSampleRateDidUpdate", (uint8_t *)v8, 2u);
    }
  }
}

void sub_1004E1F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1004E1E04(a1 - 280, a2, a3);
}

void sub_1004E1F30(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD v7[6];
  char v8;

  v6 = sub_100475960();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004E1FA4;
  v7[3] = &unk_10091FF68;
  v7[4] = a1;
  v7[5] = a2;
  v8 = a3;
  sub_100041A34(v6, v7);
}

uint64_t sub_1004E1FA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  void **v7;
  NSObject *v8;
  void *__p[2];
  char v11;
  _QWORD v12[2];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  void **v16;

  v2 = *(_QWORD *)(a1 + 32);
  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, v2 + 760);
  if ((sub_1002D5A20(*(_QWORD *)(a1 + 40)) & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3)
    {
      v4 = sub_10026B8EC(v3 + 400);
      if (v4)
      {
        v5 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          v6 = *(unsigned __int8 *)(a1 + 48);
          sub_10043E5F8(v4, __p);
          if (v11 >= 0)
            v7 = __p;
          else
            v7 = (void **)__p[0];
          *(_DWORD *)buf = 67109378;
          v14 = v6;
          v15 = 2082;
          v16 = v7;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting allowScoForTBT to %d for device %{public}s", buf, 0x12u);
          if (v11 < 0)
            operator delete(__p[0]);
        }
        sub_10044A298(v4, *(unsigned __int8 *)(a1 + 48));
      }
    }
  }
  else
  {
    v8 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling allowSCOForTBTDidUpdate", (uint8_t *)__p, 2u);
    }
  }
  return sub_100034234((uint64_t)v12);
}

void sub_1004E2128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004E214C(uint64_t a1, uint64_t a2, char a3)
{
  sub_1004E1F30(a1 - 280, a2, a3);
}

void sub_1004E2154(uint64_t a1, uint64_t a2, char a3)
{
  __int16 v5;
  uint64_t v6;
  _QWORD v7[5];
  __int16 v8;
  char v9;

  v5 = sub_10026B8E4(a2 + 400);
  v6 = sub_100475960();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004E21D4;
  v7[3] = &unk_10092CB18;
  v7[4] = a1;
  v8 = v5;
  v9 = a3;
  sub_100041A34(v6, v7);
}

uint64_t sub_1004E21D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  NSObject *v12;
  _BOOL4 v13;
  uint8_t *v14;
  NSObject *v15;
  std::string *v16;
  uint8_t *i;
  uint8_t *v18;
  NSObject *v19;
  std::string *v20;
  std::string *v21;
  std::string::size_type v22;
  id v23;
  id *v24;
  BOOL v25;
  BOOL v26;
  NSObject *v27;
  id v28;
  NSObject *v29;
  id v30;
  uint64_t v32[3];
  uint64_t v33[3];
  _QWORD v34[2];
  std::string v35;
  uint8_t v36[4];
  std::string *v37;
  std::string buf;
  uint8_t v39[8];
  id *v40;
  uint64_t v41;

  v2 = *(_QWORD *)(a1 + 32);
  v34[0] = 0;
  v34[1] = 0;
  sub_10003415C((uint64_t)v34, v2 + 760);
  v3 = sub_1004CCD90(v2, *(unsigned __int16 *)(a1 + 40));
  if (v3)
  {
    v4 = (uint64_t)(v3 + 50);
    v5 = sub_10026B8EC((uint64_t)(v3 + 50));
    if (sub_100442118(v5, 12))
    {
      v6 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v5, v39);
        if (v41 >= 0)
          v7 = v39;
        else
          v7 = *(uint8_t **)v39;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received expanseInA2DP for Apple audio device %{public}s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(v41) < 0)
          operator delete(*(void **)v39);
      }
    }
    else
    {
      v8 = sub_10026B3F0(v2 + 360);
      sub_10026B3AC(v2 + 360, *(_BYTE *)(a1 + 42));
      v9 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(unsigned __int8 *)(a1 + 42);
        *(_DWORD *)v39 = 67109376;
        *(_DWORD *)&v39[4] = v8;
        LOWORD(v40) = 1024;
        *(_DWORD *)((char *)&v40 + 2) = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Expanse in A2DP state changed from %d to %d", v39, 0xEu);
      }
      v11 = *(unsigned __int8 *)(a1 + 42);
      v12 = qword_100999808;
      v13 = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        if (v13)
        {
          sub_10043E5F8(v5, v39);
          v14 = v41 >= 0 ? v39 : *(uint8_t **)v39;
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Setting IsInExpanseOverA2DP to true for device %{public}s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v41) < 0)
            operator delete(*(void **)v39);
        }
        sub_10026BCD8(v4, 1);
        *(_QWORD *)v39 = 0;
        v40 = 0;
        v41 = 0;
        sub_1005C5C20(v39);
        if (qword_10097AB08 != -1)
          dispatch_once(&qword_10097AB08, &stru_100933E48);
        sub_1005D4828((uint64_t)off_10097AB00);
        v15 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          sub_1005C5ED4((uint64_t *)v39, &buf);
          v16 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v35.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Current Call(s) in expanse: %s", (uint8_t *)&v35, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        sub_1005C5CA8((int)v33);
        sub_10026B494(v2 + 360, v33);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
        sub_10026BD18((void ***)&buf);
        for (i = *(uint8_t **)v39; i != (uint8_t *)v40; i += 104)
        {
          if (*((_DWORD *)i + 4) == 1)
          {
            v27 = qword_100999808;
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Update overall call(s) status after a current active call has entered expanse", (uint8_t *)&buf, 2u);
            }
            memset(&buf, 0, sizeof(buf));
            sub_1005C5C20(&buf);
            if (qword_10097AB08 != -1)
              dispatch_once(&qword_10097AB08, &stru_100933E48);
            sub_1005D4818((uint64_t)off_10097AB00);
            *(_OWORD *)&v35.__r_.__value_.__l.__data_ = 0uLL;
            v28 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", &v35);
            sub_1004D427C(v2, (uint64_t *)&buf, v28);

            goto LABEL_71;
          }
        }
      }
      else
      {
        if (v13)
        {
          sub_10043E5F8(v5, v39);
          v18 = v41 >= 0 ? v39 : *(uint8_t **)v39;
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Setting IsInExpanseOverA2DP to false for device %{public}s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(v41) < 0)
            operator delete(*(void **)v39);
        }
        sub_10026BCD8(v4, 0);
        *(_QWORD *)v39 = 0;
        v40 = 0;
        v41 = 0;
        sub_1005C5C20(v39);
        if (qword_10097AB08 != -1)
          dispatch_once(&qword_10097AB08, &stru_100933E48);
        sub_1005D4818((uint64_t)off_10097AB00);
        memset(&buf, 0, sizeof(buf));
        sub_10026B434(v2 + 360, (int)&buf);
        v19 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          sub_1005C5ED4((uint64_t *)&buf, &v35);
          if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = &v35;
          else
            v20 = (std::string *)v35.__r_.__value_.__r.__words[0];
          *(_DWORD *)v36 = 136315138;
          v37 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Call(s) in A2DP expanse: %s", v36, 0xCu);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v35.__r_.__value_.__l.__data_);
          v19 = qword_100999808;
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          sub_1005C5ED4((uint64_t *)v39, &v35);
          v21 = (v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v35
              : (std::string *)v35.__r_.__value_.__r.__words[0];
          *(_DWORD *)v36 = 136315138;
          v37 = v21;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Current Call(s): %s", v36, 0xCu);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v35.__r_.__value_.__l.__data_);
        }
        if (buf.__r_.__value_.__r.__words[0] == buf.__r_.__value_.__l.__size_)
        {
          v25 = 1;
        }
        else
        {
          v22 = buf.__r_.__value_.__r.__words[0] + 104;
          do
          {
            v23 = *(id *)(v22 - 104);
            v24 = sub_1005C5DCC((id **)v39, v23);

            v25 = v40 == v24;
            v26 = v40 != v24 || v22 == buf.__r_.__value_.__l.__size_;
            v22 += 104;
          }
          while (!v26);
        }
        sub_1005C5CFC((uint64_t *)&buf);
        sub_1005C5CA8((int)v32);
        sub_10026B494(v2 + 360, v32);
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
        sub_10026BD18((void ***)&v35);
        if (!v25)
        {
          v29 = qword_100999808;
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v35.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Update overall call(s) status since a current active call has exited expanse", (uint8_t *)&v35, 2u);
          }
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = 0uLL;
          v30 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", &v35);
          sub_1004D427C(v2, (uint64_t *)v39, v30);

        }
LABEL_71:
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
        sub_10026BD18((void ***)&v35);
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
      sub_10026BD18((void ***)&buf);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
  {
    sub_1006FBC28();
  }
  return sub_100034234((uint64_t)v34);
}

void sub_1004E28D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void ***a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  void *v23;
  uint64_t v24;

  a17 = &a23;
  sub_10026BD18((void ***)&a17);
  a23 = (void **)(v24 - 112);
  sub_10026BD18(&a23);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1004E29A8(uint64_t a1, uint64_t a2, char a3)
{
  sub_1004E2154(a1 - 280, a2, a3);
}

void sub_1004E29B0(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v4;
  _BOOL4 v5;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  __int16 v9;

  v4 = qword_100999808;
  v5 = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT);
  if (a3)
  {
    if (!v5)
      return;
    v9 = 0;
    v6 = "Call Screening Property is set.";
    v7 = (uint8_t *)&v9;
  }
  else
  {
    if (!v5)
      return;
    v8 = 0;
    v6 = "Call Screening Property is cleared.";
    v7 = (uint8_t *)&v8;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
}

void sub_1004E2A40()
{
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    sub_1006FBC8C();
}

_BYTE *sub_1004E2A84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  void **v5;
  unsigned int v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;

  v2 = a2 + 400;
  v3 = sub_10026B8EC(a2 + 400);
  v4 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v3, __p);
    if (v9 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Transitioning HFP audio to unidirectional for device %{public}s", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  v6 = sub_10026B8E4(v2);
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  sub_100157514(v6);
  return sub_100043728(__p);
}

void sub_1004E2B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

void sub_1004E2BB0(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v4;
  _DWORD v5[2];

  sub_10026BAB4(a2 + 400, a3);
  v4 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HandsfreeGateway setAudioTransport to advanced sniff %d", (uint8_t *)v5, 8u);
  }
}

void sub_1004E2C60(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  int v21;
  NSObject *v22;
  _BOOL8 v23;
  const char *v24;
  void **v25;
  void *__p[2];
  char v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  _BYTE v31[10];
  _BYTE v32[6];
  uint64_t v33;
  __int16 v34;
  void **v35;

  v10 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    v29 = a4;
    v30 = 1024;
    *(_DWORD *)v31 = a5;
    *(_WORD *)&v31[4] = 1024;
    *(_DWORD *)&v31[6] = sub_10026BA9C(a2 + 400);
    *(_WORD *)v32 = 1024;
    *(_DWORD *)&v32[2] = sub_10026BAAC(a2 + 400);
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "setAudioCodec updateStereoCodec %d, inputCodecID %d callcodec %d AoS %d", buf, 0x1Au);
  }
  if (a2)
  {
    v11 = a2 + 400;
    v12 = sub_10026B8EC(a2 + 400);
    if (v12)
    {
      v13 = v12;
      v14 = a5;
      if ((a4 & 1) == 0)
        v14 = sub_10026BA9C(v11);
      if (a3 == 48000 && v14 == 130)
      {
        v15 = 0;
        v16 = 130;
      }
      else if (a3 == 48000 && v14 == 129)
      {
        v15 = 0;
        v16 = 129;
      }
      else if (a3 == 48000 && v14 == 255)
      {
        v15 = 0;
        v16 = 255;
      }
      else if (a3 == 24000 && v14 == 128)
      {
        v15 = 0;
        v16 = 128;
      }
      else
      {
        v17 = sub_1004CD5FC(a1, v13);
        if (v17 && (v18 = sub_10026BA2C(v17 + 400), a3 == 24000) && (v18 & 1) != 0)
        {
          v15 = 0;
          v16 = 127;
        }
        else
        {
          v19 = sub_1004CF8A8(a1, v13);
          if (a3 == 24000 && (v19 & 1) != 0)
          {
            v15 = 0;
            v16 = 256;
          }
          else
          {
            v20 = sub_1004CF884(a1, v13);
            if (a3 == 16000 && (v20 & 1) != 0)
            {
              v15 = 0;
              v16 = 2;
            }
            else if (a3 == 8000)
            {
              v15 = 0;
              v16 = 1;
            }
            else
            {
              if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
                sub_1006FBD10();
              v16 = 0;
              v15 = 1;
            }
          }
        }
      }
      if (a5 || (a4 & 1) != 0 || (v21 = sub_10026BAAC(v11), a3 != 48000) || !v21)
      {
        if ((v15 & 1) != 0)
        {
          v16 = 0;
          goto LABEL_46;
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          sub_1006FBCE4();
        v16 = 130;
      }
      sub_10026BAA4(v11, v16);
LABEL_46:
      v22 = qword_100999808;
      v23 = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT);
      if (v23)
      {
        v24 = sub_1004CF258(v23, v16);
        sub_10043F6EC(v13, (uint64_t)__p);
        if (v27 >= 0)
          v25 = __p;
        else
          v25 = (void **)__p[0];
        *(_DWORD *)buf = 67110147;
        v29 = v14;
        v30 = 2080;
        *(_QWORD *)v31 = v24;
        *(_WORD *)&v31[8] = 1024;
        *(_DWORD *)v32 = a3;
        *(_WORD *)&v32[4] = 2160;
        v33 = 1752392040;
        v34 = 2081;
        v35 = v25;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "setAudioCodec stereoCodecID %d, new codec %s sampleRate %d for device %{private, mask.hash}s", buf, 0x2Cu);
        if (v27 < 0)
          operator delete(__p[0]);
      }
      return;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    sub_1006FBCB8();
}

void sub_1004E300C(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  sub_1004E2C60(a1 - 280, a2, a3, a4, a5);
}

void sub_1004E3014(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void **v9;
  int v10;
  int v11;
  NSObject *v12;
  void **v13;
  NSObject *v14;
  void **v15;
  NSObject *v16;
  void **p_p;
  uint64_t v18;
  int v19;
  NSObject *v20;
  _BYTE *v21;
  void **v22;
  _BYTE v23[12];
  __int16 v24;
  void **v25;
  char v26;
  void *__p;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  _BYTE *v31;

  v6 = a2 + 400;
  v7 = sub_10026B8EC(a2 + 400);
  if (a3 > 1935827570)
  {
    if (a3 != 1935827571)
    {
      if (a3 == 1936221033)
      {
        v12 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043F6EC(v7, (uint64_t)&__p);
          v13 = SBYTE3(v31) >= 0 ? &__p : (void **)__p;
          *(_DWORD *)v23 = 141558275;
          *(_QWORD *)&v23[4] = 1752392040;
          v24 = 2081;
          v25 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Sco data source selected for HCI for device %{private, mask.hash}s", v23, 0x16u);
          if (SBYTE3(v31) < 0)
            operator delete(__p);
        }
        v10 = 2;
        v11 = 2;
        goto LABEL_38;
      }
      goto LABEL_40;
    }
    v16 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(v7, (uint64_t)&__p);
      if (SBYTE3(v31) >= 0)
        p_p = &__p;
      else
        p_p = (void **)__p;
      *(_DWORD *)v23 = 141558275;
      *(_QWORD *)&v23[4] = 1752392040;
      v24 = 2081;
      v25 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Sco data source selected for baseband to PCM for device %{private, mask.hash}s", v23, 0x16u);
      if (SBYTE3(v31) < 0)
        operator delete(__p);
      v16 = qword_100999808;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Highland Park I2S to PCM route selected. Forcing CVSD.", (uint8_t *)&__p, 2u);
    }
    v10 = 1;
    sub_10026BAA4(v6, 1);
LABEL_37:
    v11 = 3;
LABEL_38:
    v18 = sub_1000438A4();
    sub_1003334D8(v18, v7, v10);
    sub_10026BAE4(v6, v11);
    v19 = sub_10026BA9C(v6);
    sub_1004E0FAC(a1, v7, v19, a2);
    return;
  }
  if (a3 == 1935765619)
  {
    v14 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(v7, (uint64_t)&__p);
      v15 = SBYTE3(v31) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)v23 = 141558275;
      *(_QWORD *)&v23[4] = 1752392040;
      v24 = 2081;
      v25 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Sco data source selected for AP I2S 8kHz for device %{private, mask.hash}s", v23, 0x16u);
      if (SBYTE3(v31) < 0)
        operator delete(__p);
    }
    v10 = 3;
    goto LABEL_37;
  }
  if (a3 == 1935765620)
  {
    v8 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(v7, (uint64_t)&__p);
      if (SBYTE3(v31) >= 0)
        v9 = &__p;
      else
        v9 = (void **)__p;
      *(_DWORD *)v23 = 141558275;
      *(_QWORD *)&v23[4] = 1752392040;
      v24 = 2081;
      v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sco data source selected for AP I2S 16kHz for device %{private, mask.hash}s", v23, 0x16u);
      if (SBYTE3(v31) < 0)
        operator delete(__p);
    }
    v10 = 4;
    v11 = 4;
    goto LABEL_38;
  }
LABEL_40:
  v20 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
  {
    sub_10043F6EC(v7, (uint64_t)&__p);
    if (SBYTE3(v31) >= 0)
      v22 = &__p;
    else
      v22 = (void **)__p;
    *(_DWORD *)v23 = 141558275;
    *(_QWORD *)&v23[4] = 1752392040;
    v24 = 2081;
    v25 = v22;
    _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Unknown SCO data source selected for device %{private, mask.hash}s", v23, 0x16u);
    if (SBYTE3(v31) < 0)
      operator delete(__p);
    v20 = qword_100999808;
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    sub_10043F6EC(v7, (uint64_t)v23);
    v21 = v26 >= 0 ? v23 : *(_BYTE **)v23;
    LODWORD(__p) = 67109635;
    HIDWORD(__p) = a3;
    v28 = 2160;
    v29 = 1752392040;
    v30 = 2081;
    v31 = v21;
    _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Sco route and audio channel not set because an unknown datasource of %d selected for device %{private, mask.hash}s", (uint8_t *)&__p, 0x1Cu);
    if (v26 < 0)
      operator delete(*(void **)v23);
  }
}

void sub_1004E3510(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  __int16 v9;
  uint64_t v10;
  _QWORD v11[5];
  int v12;
  int v13;
  int v14;
  __int16 v15;

  v9 = sub_10026B8E4(a2 + 400);
  v10 = sub_100475960();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1004E35A4;
  v11[3] = &unk_100933AE8;
  v11[4] = a1;
  v15 = v9;
  v12 = a4;
  v13 = a5;
  v14 = a3;
  sub_100041A34(v10, v11);
}

uint64_t sub_1004E35A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  NSObject *v20;
  uint8_t *v21;
  unsigned int v22;
  NSObject *v23;
  void **v24;
  uint64_t v26;
  void *__p[2];
  char v28;
  char v29;
  _QWORD v30[2];
  uint8_t v31[4];
  void *v32;
  __int16 v33;
  _BOOL4 v34;
  __int16 v35;
  _BOOL4 v36;
  __int16 v37;
  _BOOL4 v38;
  uint8_t buf[16];
  __int128 v40;
  uint64_t v41;

  v2 = *(_QWORD *)(a1 + 32);
  v30[0] = 0;
  v30[1] = 0;
  sub_10003415C((uint64_t)v30, v2 + 760);
  v3 = sub_1004CCD90(v2, *(unsigned __int16 *)(a1 + 52));
  v4 = v3;
  if (!v3)
  {
    v15 = qword_100999808;
    if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      return sub_100034234((uint64_t)v30);
    v16 = *(unsigned __int16 *)(a1 + 52);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v16;
    v17 = "No AudioDevice found for handle %d, not handling selectScoDataSource";
    v18 = v15;
    v19 = 8;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
    return sub_100034234((uint64_t)v30);
  }
  v5 = (uint64_t)(v3 + 50);
  v6 = sub_10026B8EC((uint64_t)(v3 + 50));
  if (!v6)
    return sub_100034234((uint64_t)v30);
  v7 = *(_DWORD *)(a1 + 40);
  if (!v7)
  {
    v20 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v6, buf);
      v21 = (SBYTE7(v40) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v31 = 136446210;
      v32 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Sco route is disabled for device %{public}s", v31, 0xCu);
      if (SBYTE7(v40) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_10026B914(v5))
    {
      v22 = sub_10026B8E4(v5);
      sub_1004D9E20(v2, v22, 0, 116);
      return sub_100034234((uint64_t)v30);
    }
    v26 = qword_100999808;
    if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      return sub_100034234((uint64_t)v30);
    *(_WORD *)buf = 0;
    v17 = "already disconnected no need disconnect audio";
    v18 = v26;
    v19 = 2;
    goto LABEL_8;
  }
  sub_10026ACA4((uint64_t)(v4 + 50), v7);
  v8 = sub_10026B8E4((uint64_t)(v4 + 50));
  v29 = 0;
  sub_100043758(&v29);
  v9 = sub_10018DC98(0);
  v10 = sub_10015C368(v8);
  v11 = sub_10015C204(v8);
  sub_10004339C(&v29);
  v41 = 0;
  *(_OWORD *)buf = 0u;
  v40 = 0u;
  v12 = *(_DWORD *)(a1 + 44);
  v13 = sub_1004CD5FC(v2, v6);
  if (v13)
    v14 = sub_10026B9FC(v13 + 400);
  else
    v14 = 0;
  sub_1004E3A2C(v12, v14, (uint64_t)buf);
  if (v10)
  {
    *(_DWORD *)v31 = sub_10026BA9C((uint64_t)(v4 + 50));
    v10 = sub_1004E87CC(buf, (unsigned int *)v31) == 0;
  }
  if (v9 || v10 || v11 == 4)
  {
    v23 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(v6, (uint64_t)__p);
      if (v28 >= 0)
        v24 = __p;
      else
        v24 = (void **)__p[0];
      *(_DWORD *)v31 = 136446978;
      v32 = v24;
      v33 = 1024;
      v34 = v9;
      v35 = 1024;
      v36 = v10;
      v37 = 1024;
      v38 = v11 == 4;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Deferring route change to %{public}s, will retry when disconnect stack event fires - possibleSCOActivity:%d sampleRateChangedWhileScoWasOpen:%d isHandsfreeAoSDisconnecting:%d", v31, 0x1Eu);
      if (v28 < 0)
        operator delete(__p[0]);
    }
    sub_10026AF18(v2 + 360);
  }
  (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 144))(v2, v4, *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  sub_1000B69C0((uint64_t)buf);
  sub_100043728(&v29);
  return sub_100034234((uint64_t)v30);
}

void sub_1004E39C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_1000B69C0((uint64_t)&a22);
  sub_100043728(&a15);
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E3A2C@<X0>(int a1@<W1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;

  if (a1 <= 23999)
  {
    if (a1 == 8000)
    {
      LODWORD(v8) = 1;
LABEL_19:
      v4 = a3;
      v5 = 1;
      return sub_1004E8880(v4, (unsigned int *)&v8, v5);
    }
    if (a1 != 16000)
      goto LABEL_14;
    v6 = 2;
LABEL_18:
    LODWORD(v8) = v6;
    goto LABEL_19;
  }
  if (a1 == 24000)
  {
    if (a2)
      v6 = 128;
    else
      v6 = 256;
    goto LABEL_18;
  }
  if (a1 == 32000)
  {
    v6 = 127;
    goto LABEL_18;
  }
  if (a1 != 48000)
  {
LABEL_14:
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FBD78();
    goto LABEL_16;
  }
  if (!a2)
  {
LABEL_16:
    LODWORD(v8) = 0;
    goto LABEL_19;
  }
  v8 = 0x8200000081;
  v4 = a3;
  v5 = 2;
  return sub_1004E8880(v4, (unsigned int *)&v8, v5);
}

uint64_t sub_1004E3B64(uint64_t a1, int a2)
{
  uint64_t result;

  result = 24000;
  if (a2 > 128)
  {
    if ((a2 - 129) < 2 || a2 == 255)
      return 48000;
    if (a2 == 256)
      return result;
  }
  else
  {
    if ((a2 - 127) < 2)
      return result;
    if (a2 == 1)
      return 8000;
    if (a2 == 2)
      return 16000;
  }
  result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    sub_1006FBDD8();
    return 0;
  }
  return result;
}

void sub_1004E3C08(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  sub_1004E3510(a1 - 280, a2, a3, a4, a5);
}

uint64_t sub_1004E3C10(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  _BOOL8 v16;
  char v18;
  _QWORD v19[2];
  uint8_t buf[4];
  int v21;

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 760);
  if ((sub_1002D5A20(a2) & 1) != 0)
  {
    if (a2)
      v10 = sub_10026B8EC(a2 + 400);
    else
      v10 = 0;
    v18 = 0;
    sub_100043758(&v18);
    sub_1004E0B58();
    sub_10004339C(&v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 264))(a1, a2, a5, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, a2, a3);
    switch(a4)
    {
      case 1918989668:
        v13 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v21 = a5;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Sco route reason is kBluetoothAudioDeviceSCOEnableReasonAudioIO:%d", buf, 8u);
        }
        sub_1004E0C74(a1, v14, a2);
        break;
      case 1919115628:
        v15 = qword_100999808;
        v16 = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT);
        if (v16)
        {
          *(_DWORD *)buf = 67109120;
          v21 = a5;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sco route reason is kBluetoothAudioDeviceSCOEnableReasonCall:%d", buf, 8u);
        }
        sub_1004E0BCC(v16, v10, a2);
        break;
      case 1920364387:
        v12 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v21 = a5;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Sco route reason is kBluetoothAudioDeviceSCOEnableReasonVoiceCommand:%d", buf, 8u);
        }
        sub_1004E0DBC(a1, v10, a2);
        break;
    }
    sub_100043728(&v18);
  }
  else
  {
    v11 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not setting sco data source", buf, 2u);
    }
  }
  return sub_100034234((uint64_t)v19);
}

void sub_1004E3EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E3EE0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  return sub_1004E3C10(a1 - 280, a2, a3, a4, a5);
}

uint64_t sub_1004E3EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  int v8;
  uint64_t v9;

  v3 = sub_1004CD5FC(a1, a2);
  if (!v3)
    return 1;
  v4 = v3;
  v9 = 0;
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100933E08);
  v5 = sub_1002835F4((uint64_t)off_100977A80, a2, (int *)&v9 + 1, (int *)&v9);
  sub_1002D4E2C(v4, BYTE4(v9), v9);
  v8 = 3;
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100933E08);
  sub_100283884((uint64_t)off_100977A80, a2, &v8);
  sub_1002D4E3C(v4, v8);
  v6 = sub_10044F5D0(a2);
  sub_1002D4E4C(v4, v6);
  return v5;
}

uint64_t sub_1004E3FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = sub_1004CD5FC(a1, a2);
  if (!v3)
    return 1;
  v4 = v3;
  v5 = sub_10044F708(a2);
  sub_1002D4E7C(v4, v5);
  return 0;
}

uint64_t sub_1004E4030(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = sub_1004CD5FC(a1, a2);
  if (!v3)
    return 1;
  v4 = v3;
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100933E08);
  v5 = sub_1002834CC((uint64_t)off_100977A80, a2);
  sub_1002D4E04(v4, v5);
  return 0;
}

uint64_t sub_1004E40A8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;

  v4 = sub_1004CD5FC(a1, a2);
  if (!v4)
    return 1;
  sub_1002D4E5C(v4, a3);
  return 0;
}

uint64_t sub_1004E40E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = sub_1004CD5FC(a1, a2);
  if (!v3)
    return 1;
  v4 = v3;
  v5 = sub_100451434(a2);
  sub_1002D5428(v4, v5);
  return 0;
}

uint64_t sub_1004E4128(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = sub_1004CD5FC(a1, a2);
  if (!v3)
    return 1;
  v4 = v3;
  v5 = sub_10044F96C(a2);
  sub_1002D518C(v4, v5);
  return 0;
}

uint64_t sub_1004E4170(uint64_t a1, int *a2, _WORD *a3, _WORD *a4)
{
  uint64_t v4;

  v4 = sub_10015C698(a2, 8, a3, a4, 0);
  if ((_DWORD)v4 && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    sub_1006FBE38();
  return v4;
}

_BYTE *sub_1004E41CC(uint64_t a1, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t v8;
  char v10;

  v8 = sub_1004D1420(a1, *a4);
  if (v8)
    sub_1004D08EC(a1, v8, *a4);
  v10 = 0;
  sub_100043758(&v10);
  sub_100157998(a2, *a3, *a4);
  return sub_100043728(&v10);
}

void sub_1004E4244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E4258(uint64_t a1, uint64_t a2, unint64_t a3, __int16 *a4, unsigned __int16 *a5, int a6)
{
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  unsigned int v15;
  __int16 v16;
  __int16 v18;
  char v19;
  __int16 v20;
  __int16 v21;
  char v22;
  __int16 v23;
  char v24[8];
  char __src[8];
  unsigned int v26;
  __int16 v27;

  v27 = 0;
  v26 = 0;
  *(_DWORD *)&__src[3] = 33621253;
  *(_DWORD *)__src = 84082945;
  *(_DWORD *)&v24[3] = 0;
  *(_DWORD *)v24 = 0;
  v11 = sub_10015C688();
  sub_100158014(*a5, &v26);
  sub_10015809C(*a5, (uint64_t)__src, 7u);
  sub_10015802C(*a5, (BOOL *)v24, 7u);
  sub_1001580EC(*a5, &v27);
  if (qword_10097AB18 != -1)
    dispatch_once(&qword_10097AB18, &stru_100933EA8);
  v12 = sub_1002CBABC(qword_10097AB10, a3);
  sub_1004806E0(a2, 3);
  sub_1004806E0(a2, 2);
  sub_10048071C(a2, 104);
  sub_1004806E0(a2, 16);
  sub_1004806E0(a2, 4);
  sub_10048076C(a2, v26);
  sub_1004806E0(a2, 18);
  sub_1004806E0(a2, 7);
  sub_1004806C4(a2, __src, 7);
  sub_1004806E0(a2, 19);
  sub_1004806E0(a2, 7);
  sub_1004806C4(a2, v24, 7);
  sub_1004806E0(a2, 21);
  sub_1004806E0(a2, 2);
  sub_10048071C(a2, v27);
  sub_1004806E0(a2, 27);
  sub_1004806E0(a2, 2);
  if (v12)
    v13 = 15;
  else
    v13 = 7;
  sub_10048071C(a2, v13);
  v23 = 0;
  v22 = 0;
  v21 = 0;
  v14 = sub_1001DCC5C((unsigned __int16)*a4, &v21, &v23, &v22);
  if ((_DWORD)v14)
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FBEC4();
  }
  else
  {
    sub_1004806E0(a2, 1);
    sub_1004806E0(a2, 7);
    sub_10048071C(a2, *a4);
    sub_10048071C(a2, v21);
    sub_10048071C(a2, v23);
    sub_1004806E0(a2, v22);
  }
  sub_1004806E0(a2, 26);
  sub_1004806E0(a2, 6);
  sub_1004806E0(a2, 8);
  sub_1004806E0(a2, 1);
  sub_1004806E0(a2, 255);
  sub_1004806E0(a2, 0);
  sub_10048071C(a2, v11);
  if (a6)
  {
    v20 = 0;
    v19 = 0;
    v18 = 0;
    v15 = sub_10025AB48(a3 + 128);
    v16 = v15;
    v14 = sub_1001DCC5C(v15, &v18, &v20, &v19);
    if ((_DWORD)v14)
    {
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FBE64();
    }
    else
    {
      sub_1004806E0(a2, 28);
      sub_1004806E0(a2, 7);
      sub_10048071C(a2, v16);
      sub_10048071C(a2, v18);
      sub_10048071C(a2, v20);
      sub_1004806E0(a2, v19);
    }
  }
  return v14;
}

uint64_t sub_1004E45CC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 *a5, _BYTE *a6, _BYTE *a7, _BYTE *a8)
{
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned __int16 v15;
  __int16 v16;
  __int16 v17;
  NSObject *v18;
  NSObject *v19;
  __int16 v20;
  void *v21;
  int v22;
  char v23;
  int v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  __int16 v28;
  unsigned int v29;
  NSObject *v30;
  NSObject *v31;
  uint8_t *v32;
  uint64_t v34;
  uint8_t v41;
  _BYTE v42[14];
  char v43;
  uint8_t v44;
  _BYTE v45[15];
  int *v46;
  _DWORD v47[2];
  _QWORD v48[2];
  uint8_t buf[8];
  __int16 v50;
  int v51;
  __int16 v52;
  unsigned int v53;

  v48[0] = 0;
  v48[1] = 0;
  sub_10003415C((uint64_t)v48, a1 + 760);
  v9 = sub_10003F8C4(a2 + 8) - *(_DWORD *)(a2 + 24);
  *(_DWORD *)((char *)v47 + 3) = 0;
  v47[0] = 0;
  v46 = 0;
  *a8 = 0;
  v10 = v9 << 16;
  if (v9 << 16 < 1)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v34 = a3 + 128;
    do
    {
      v12 = (char)sub_100480558(a2);
      if (v12 < 0)
      {
        v13 = sub_1004805A4(a2);
        v9 = HIWORD(v10) - 3;
      }
      else
      {
        v13 = sub_100480558(a2);
        LOWORD(v9) = v9 - 2;
      }
      v14 = v12 & 0x7F;
      switch(v12 & 0x7F)
      {
        case 1:
          v15 = v13 - 7;
          if (v13 < 7)
            goto LABEL_39;
          v16 = sub_1004805A4(a2);
          sub_1004805A4(a2);
          v17 = sub_1004805A4(a2);
          sub_100480558(a2);
          buf[0] = 0;
          sub_100043758(buf);
          if (sub_1001DB044(a4, (uint64_t *)&v46) || !sub_1001E3CCC(v46))
          {
            v18 = qword_100999808;
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
              sub_1006FBEF0(&v44, v45, v18);
          }
          else
          {
            *(_WORD *)(sub_1001E3CCC(v46) + 8) = v16;
            *(_WORD *)(sub_1001E3CCC(v46) + 32) = v17;
            sub_10023F358(v34, a4);
          }
          sub_10004339C(buf);
          goto LABEL_49;
        case 3:
          if (v13 != 2)
            goto LABEL_39;
          sub_1004805A4(a2);
          goto LABEL_44;
        case 0x10:
          if (v13 != 4)
            goto LABEL_39;
          v20 = sub_100480608(a2);
          buf[0] = 0;
          sub_100043758(buf);
          sub_100157FCC(*a5, v20);
          sub_10004339C(buf);
          goto LABEL_21;
        case 0x11:
          v21 = sub_100052DC0(v13);
          if (!v21)
            goto LABEL_39;
          sub_100480520(a2, v21, v13);
          buf[0] = 0;
          sub_100043758(buf);
          sub_100157B3C(*a5, (unsigned __int8 *)v21, v13);
          sub_10004339C(buf);
          sub_100053298(v21);
          goto LABEL_21;
        case 0x14:
          if (v13 != 1)
            goto LABEL_39;
          v22 = sub_100480558(a2);
          buf[0] = 0;
          sub_100043758(buf);
          sub_100157AD0(*a5, v22 == 1);
          sub_10004339C(buf);
LABEL_21:
          sub_100043728(buf);
          goto LABEL_44;
        case 0x16:
          if (v13 != 1)
            goto LABEL_39;
          *a6 = sub_100480558(a2) + 1;
          goto LABEL_44;
        case 0x17:
          if (v13 != 1)
            goto LABEL_39;
          *a7 = sub_100480558(a2);
          goto LABEL_44;
        case 0x18:
          v15 = v13 - 7;
          if (v13 < 7)
            goto LABEL_39;
          sub_100480520(a2, v47, 7uLL);
          buf[0] = 0;
          sub_100043758(buf);
          sub_100157E68(*a5, v47, 7u);
          sub_10004339C(buf);
LABEL_49:
          v32 = buf;
          goto LABEL_53;
        case 0x19:
          if (v13 != 1)
            goto LABEL_39;
          sub_100480558(a2);
          *a8 = 1;
          goto LABEL_44;
        case 0x1A:
          v15 = v13;
          if (v13 >= 6)
          {
            v23 = sub_100480558(a2);
            v24 = sub_100480558(a2);
            v25 = sub_100480558(a2);
            sub_100480558(a2);
            v26 = sub_1004805A4(a2);
            buf[0] = 0;
            sub_100043758(buf);
            v11 = sub_100243990(a4, v23, v26, v25, v24);
            sub_10004339C(buf);
            sub_100043728(buf);
            v15 = v13 - 6;
          }
          break;
        case 0x1B:
          v15 = v13 - 8;
          if (v13 < 8)
            goto LABEL_39;
          sub_1004805A4(a2);
          sub_1004805A4(a2);
          sub_1004805A4(a2);
          sub_1004805A4(a2);
          *(_WORD *)(a3 + 576) = 257;
          break;
        case 0x1C:
          v15 = v13 - 7;
          if (v13 < 7)
            goto LABEL_39;
          v27 = sub_1004805A4(a2);
          sub_1004805A4(a2);
          v28 = sub_1004805A4(a2);
          sub_100480558(a2);
          *(_QWORD *)buf = 0;
          v43 = 0;
          sub_100043758(&v43);
          v29 = sub_10025AB48(v34);
          if (sub_1001DB044(v29, (uint64_t *)buf) || !sub_1001E3CCC(*(int **)buf))
          {
            v30 = qword_100999808;
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
              sub_1006FBF24(&v41, v42, v30);
            v11 = 114;
          }
          else
          {
            *(_WORD *)(sub_1001E3CCC(*(int **)buf) + 8) = v27;
            *(_WORD *)(sub_1001E3CCC(*(int **)buf) + 32) = v28;
          }
          v32 = (uint8_t *)&v43;
LABEL_53:
          sub_100043728(v32);
          break;
        default:
          v19 = qword_100999808;
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v12 & 0x7F;
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "parseHFPDescriptor Key not recognized %d", buf, 8u);
          }
LABEL_39:
          v15 = v13;
          break;
      }
      if (v15)
      {
        v31 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&buf[4] = v14;
          v50 = 1024;
          v51 = v15;
          v52 = 1024;
          v53 = v13;
          _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "parseHFPDescriptor Key:%d Dumped %d of %d bytes ", buf, 0x14u);
        }
        sub_100480664(a2, v15);
      }
LABEL_44:
      v9 = (__int16)v9 - v13;
      v10 = v9 << 16;
    }
    while (v9 << 16 > 0);
  }
  sub_100034234((uint64_t)v48);
  return v11;
}

void sub_1004E4BDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100034234(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_1004E4C58(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;

  v4 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    if (v7 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fast Connect HFP Report Connection attempt for %{public}s", buf, 0xCu);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  sub_1004816DC(a1, a2);
}

void sub_1004E4D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  NSObject *v10;
  int v11;
  int v12;
  _DWORD v13[2];

  v10 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 67109120;
    v13[1] = a7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Fast Connect HFP Setup Complete result %d", (uint8_t *)v13, 8u);
  }
  if ((_DWORD)a7)
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100933D68);
    v11 = sub_1004A35C0((uint64_t)off_100977A50, a7, 20000);
    sub_10048183C(a1, a2, v11);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100933D68);
  v12 = sub_1004A35C0((uint64_t)off_100977A50, 0, 20000);
  sub_10048183C(a1, a2, v12);
}

void sub_1004E4F30(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1004E4FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1004E4FEC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
}

uint64_t sub_1004E500C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
}

uint64_t sub_1004E5028(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned __int16 *)(a1 + 48);
  v4 = *(unsigned __int8 *)(a1 + 50);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = sub_10026BCF0(*(_QWORD *)(a1 + 40) + 400);
  return (**a2)(a2, v5, v3, v4, v6);
}

uint64_t sub_1004E507C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void **v8;
  const char *v9;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  void **v14;
  __int16 v15;
  const char *v16;

  v5 = sub_1004CD5FC(a1, a2);
  v6 = qword_100999808;
  if (v5)
  {
    v7 = v5;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v8 = (void **)__p[0];
      v9 = "No";
      if (v12 >= 0)
        v8 = __p;
      if (a3)
        v9 = "Yes";
      *(_DWORD *)buf = 136446466;
      v14 = v8;
      v15 = 2082;
      v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setAllowsAutoRoute: %{public}s, allows %{public}s", buf, 0x16u);
      if (v12 < 0)
        operator delete(__p[0]);
    }
    sub_1002D57FC(v7, a3);
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FBF58();
    return 1;
  }
}

uint64_t sub_1004E51C4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void **v8;
  const char *v9;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  void **v14;
  __int16 v15;
  const char *v16;

  v5 = sub_1004CD5FC(a1, a2);
  v6 = qword_100999808;
  if (v5)
  {
    v7 = v5;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v8 = (void **)__p[0];
      v9 = "No";
      if (v12 >= 0)
        v8 = __p;
      if (a3)
        v9 = "Yes";
      *(_DWORD *)buf = 136446466;
      v14 = v8;
      v15 = 2082;
      v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setAudioRouteHidden: %{public}s, %{public}s", buf, 0x16u);
      if (v12 < 0)
        operator delete(__p[0]);
    }
    sub_1002D585C(v7, a3);
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FBF84();
    return 1;
  }
}

uint64_t sub_1004E530C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;

  v4 = sub_1004CD5FC(a1, a2);
  if (v4)
  {
    sub_1002D579C(v4, a3);
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FBFB0();
    return 1;
  }
}

uint64_t sub_1004E536C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  int v9;
  const char *v10;

  v4 = sub_1004CD5FC(a1, a2);
  v5 = qword_100999808;
  if (v4)
  {
    v6 = v4;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      v7 = "No";
      if (a3)
        v7 = "Yes";
      v9 = 136315138;
      v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Smart Route: [HFP] Tipi Connection status : %s", (uint8_t *)&v9, 0xCu);
    }
    sub_1002D4AEC(v6, a3);
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FBFDC();
    return 1;
  }
}

void sub_1004E546C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  void **v19;

  v5 = sub_1004CD5FC(a1, a2);
  if (v5)
  {
    v6 = v5;
    if ((a3 - 1) > 4)
      v7 = 0;
    else
      v7 = dword_100741E7C[a3 - 1];
    v8 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      if (v13 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      v15 = a3;
      v16 = 1024;
      v17 = v7;
      v18 = 2082;
      v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "User selected device type is %d. Setting category as %d for device %{public}s.", buf, 0x18u);
      if (v13 < 0)
        operator delete(__p[0]);
    }
    sub_10057D0B4(v6, v7);
    v11 = sub_1004CF638(v10, a2);
    sub_10057CE64(v6, v11);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
  {
    sub_1006FC008();
  }
}

void sub_1004E55DC(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v8;
  _QWORD v9[6];
  char v10;
  char v11;

  v8 = sub_100475960();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1004E5658;
  v9[3] = &unk_1009186D0;
  v9[4] = a1;
  v9[5] = a3;
  v10 = a4;
  v11 = a2;
  sub_100041A34(v8, v9);
}

void sub_1004E5658(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  void **v10;
  const char *v11;
  int v12;
  const char *v13;
  int v14;
  BOOL v15;
  char v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *__p[2];
  char v22;
  int v23;
  uint8_t buf[4];
  void **v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_1004D14F8(v2, *(_QWORD *)(a1 + 40));
  v4 = sub_1004CCD90(v2, v3);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = (uint64_t)(v4 + 50);
    v23 = sub_10026B914((uint64_t)(v4 + 50));
    v7 = sub_10026B8EC(v6);
    v8 = sub_10026BCF0(v6);
    v9 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v7, __p);
      v20 = v7;
      if (v22 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      v11 = sub_1003321F8(*(unsigned __int8 *)(a1 + 48));
      v12 = *(unsigned __int8 *)(a1 + 49);
      v13 = sub_10026AA24(&v23);
      *(_DWORD *)buf = 136447234;
      v25 = v10;
      v26 = 2080;
      v27 = v11;
      v28 = 1024;
      v29 = v12;
      v30 = 2080;
      v31 = v13;
      v32 = 1024;
      v33 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "advancedSniffModeChanged - device:%{public}s mode:\"%s\" status:%d audioState:\"%s\" isInAdvancedSniff:%d", buf, 0x2Cu);
      if (v22 < 0)
        operator delete(__p[0]);
      v7 = v20;
    }
    v14 = *(unsigned __int8 *)(a1 + 48);
    v15 = v14 == 240;
    if (v14 == 240)
      v16 = v8;
    else
      v16 = 0;
    if ((v16 & 1) == 0)
    {
      v17 = v15;
      sub_10026BCE8(v6, v17);
      if (v23 != 1)
        goto LABEL_24;
      if (*(_BYTE *)(a1 + 49))
      {
        sub_1004E5900(v2, v5);
        return;
      }
      if (*(unsigned __int8 *)(a1 + 48) != 240
        || (v18 = sub_10026BD08(v6),
            sub_1004E5AA0(v18, *(_QWORD *)(a1 + 40)),
            buf[0] = 0,
            sub_100043758(buf),
            sub_100157228(v3),
            sub_100043728(buf),
            v23 == 1))
      {
        v19 = 3;
      }
      else
      {
LABEL_24:
        v19 = 1;
      }
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100933E28);
      sub_100528008((uint64_t)off_100977A90, v7, v19);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
  {
    sub_1006FC034();
  }
}

void sub_1004E58CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_100043728(&a18);
  _Unwind_Resume(a1);
}

void sub_1004E5900(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD v11[6];
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  int v17;

  v4 = a2 + 400;
  sub_10026BCF8(a2 + 400);
  v5 = sub_10026BD10(v4);
  v6 = sub_10026B8EC(v4);
  v7 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v6, __p);
    v8 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v15 = v8;
    v16 = 1024;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "retryHandsfreeAoSCall - device:%{public}s handsfreeAoSRetryCount:%d", buf, 0x12u);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  if (v5 == 2)
  {
    sub_10057CD58(a2, 0, 114);
    sub_10026B91C(v4, 0);
    v9 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
      sub_1006FC098(v9);
  }
  else
  {
    v10 = sub_100475960();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1004E5BA0;
    v11[3] = &unk_100918090;
    v11[4] = a1;
    v11[5] = v6;
    sub_100475CEC(v10, 250, v11);
  }
}

_BYTE *sub_1004E5AA0(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v7 = 0;
  sub_100043758(&v7);
  v3 = (unsigned __int16 *)sub_10019AEA4(a2);
  sub_10004339C(&v7);
  v4 = *v3;
  v5 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 1576))(v5, v4, 1, 1);
  return sub_100043728(&v7);
}

void sub_1004E5B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_1004E5B24(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];
  char v10;
  char v11;

  v7 = a1 - 296;
  v8 = sub_100475960();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1004E5658;
  v9[3] = &unk_1009186D0;
  v9[4] = v7;
  v9[5] = a3;
  v10 = a4;
  v11 = a2;
  sub_100041A34(v8, v9);
}

uint64_t sub_1004E5BA0(uint64_t a1)
{
  return sub_1004DDBD8(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_1004E5BAC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1009336C0;
  *(_QWORD *)(a1 + 256) = off_100933850;
  *(_QWORD *)(a1 + 264) = off_100933890;
  *(_QWORD *)(a1 + 272) = &off_1009338C0;
  *(_QWORD *)(a1 + 280) = off_1009338D8;
  *(_QWORD *)(a1 + 288) = &off_100933970;
  *(_QWORD *)(a1 + 296) = off_100933998;
  *(_QWORD *)(a1 + 304) = off_100933A00;
  *(_QWORD *)(a1 + 312) = off_100933A40;
  *(_QWORD *)(a1 + 320) = &off_100933A70;
  sub_10001A82C(a1 + 824, *(_QWORD **)(a1 + 832));
  sub_100069BDC(a1 + 760);
  sub_10026A9C0(a1 + 360);
  v2 = *(void **)(a1 + 336);
  if (v2)
  {
    *(_QWORD *)(a1 + 344) = v2;
    operator delete(v2);
  }
  return sub_100278464(a1);
}

void sub_1004E5C3C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1009336C0;
  *(_QWORD *)(a1 + 256) = off_100933850;
  *(_QWORD *)(a1 + 264) = off_100933890;
  *(_QWORD *)(a1 + 272) = &off_1009338C0;
  *(_QWORD *)(a1 + 280) = off_1009338D8;
  *(_QWORD *)(a1 + 288) = &off_100933970;
  *(_QWORD *)(a1 + 296) = off_100933998;
  *(_QWORD *)(a1 + 304) = off_100933A00;
  *(_QWORD *)(a1 + 312) = off_100933A40;
  *(_QWORD *)(a1 + 320) = &off_100933A70;
  sub_10001A82C(a1 + 824, *(_QWORD **)(a1 + 832));
  sub_100069BDC(a1 + 760);
  sub_10026A9C0(a1 + 360);
  v2 = *(void **)(a1 + 336);
  if (v2)
  {
    *(_QWORD *)(a1 + 344) = v2;
    operator delete(v2);
  }
  sub_100278464(a1);
  operator delete();
}

uint64_t sub_1004E5D34(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1 - 304;
  *(_QWORD *)(a1 - 304) = off_1009336C0;
  *(_QWORD *)(a1 - 48) = off_100933850;
  *(_QWORD *)(a1 - 40) = off_100933890;
  *(_QWORD *)(a1 - 32) = &off_1009338C0;
  *(_QWORD *)(a1 - 24) = off_1009338D8;
  *(_QWORD *)(a1 - 16) = &off_100933970;
  *(_QWORD *)(a1 - 8) = off_100933998;
  *(_QWORD *)a1 = off_100933A00;
  *(_QWORD *)(a1 + 8) = off_100933A40;
  *(_QWORD *)(a1 + 16) = &off_100933A70;
  sub_10001A82C(a1 + 520, *(_QWORD **)(a1 + 528));
  sub_100069BDC(a1 + 456);
  sub_10026A9C0(a1 + 56);
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  return sub_100278464(v2);
}

void sub_1004E5DC8(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1 - 304;
  *(_QWORD *)(a1 - 304) = off_1009336C0;
  *(_QWORD *)(a1 - 48) = off_100933850;
  *(_QWORD *)(a1 - 40) = off_100933890;
  *(_QWORD *)(a1 - 32) = &off_1009338C0;
  *(_QWORD *)(a1 - 24) = off_1009338D8;
  *(_QWORD *)(a1 - 16) = &off_100933970;
  *(_QWORD *)(a1 - 8) = off_100933998;
  *(_QWORD *)a1 = off_100933A00;
  *(_QWORD *)(a1 + 8) = off_100933A40;
  *(_QWORD *)(a1 + 16) = &off_100933A70;
  sub_10001A82C(a1 + 520, *(_QWORD **)(a1 + 528));
  sub_100069BDC(a1 + 456);
  sub_10026A9C0(a1 + 56);
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  sub_100278464(v2);
  operator delete();
}

void sub_1004E5E7C(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_1004E5F30(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1004E5F30(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1004E6134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E616C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_100933B78;
  sub_1005C5CA8(a1 + 16);
  *(_QWORD *)(a1 + 40) = v4;
  return a1;
}

void sub_1004E61C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004E61D4(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_100933B78;

  v3 = (void **)(a1 + 16);
  sub_10026BD18(&v3);
  return a1;
}

void sub_1004E6220(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_100933B78;

  v2 = (void **)(a1 + 16);
  sub_10026BD18(&v2);
  operator delete();
}

void sub_1004E6280(uint64_t a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100933D88);
  sub_1004D427C((uint64_t)off_10097AA38, (uint64_t *)(a1 + 16), *(void **)(a1 + 40));
}

void sub_1004E62D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  v3 = 0;
  LOBYTE(v3) = *(_BYTE *)(a1 + 50);
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100933D88);
  sub_1004CC668((os_unfair_lock_s *)off_10097AA38, *(unsigned __int16 *)(a1 + 48), *(unsigned __int8 *)(a1 + 51), a1 + 32, (uint64_t)&v2);
}

uint64_t sub_1004E634C(uint64_t a1, __int128 *a2)
{
  _QWORD *v4;
  __int128 v5;
  int v6;
  size_t v7;
  const char *v8;
  size_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  char v16;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_100933BE0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = malloc_type_malloc(0x18uLL, 0x10320400E551A55uLL);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = *a2;
    v4[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
    v6 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 < 2u)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) = malloc_type_malloc(6uLL, 0x1000040274DC3F3uLL);
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
      v13 = *((_QWORD *)a2 + 1);
      v14 = *(_WORD *)(v13 + 4);
      *(_DWORD *)v12 = *(_DWORD *)v13;
      *(_WORD *)(v12 + 4) = v14;
    }
    else
    {
      if (v6 == 7)
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) = malloc_type_malloc(*((unsigned __int16 *)a2 + 8), 0xB5B7E338uLL);
        v10 = *(void **)(*(_QWORD *)(a1 + 16) + 8);
        v11 = (const char *)*((_QWORD *)a2 + 1);
        v9 = *((unsigned __int16 *)a2 + 8);
        goto LABEL_9;
      }
      if (v6 == 10)
      {
        v7 = strlen(*((const char **)a2 + 1));
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) = malloc_type_malloc(v7 + 1, 0x95034959uLL);
        v8 = (const char *)*((_QWORD *)a2 + 1);
        v9 = strlen(v8) + 1;
        v10 = *(void **)(*(_QWORD *)(a1 + 16) + 8);
        v11 = v8;
LABEL_9:
        memmove(v10, v11, v9);
      }
    }
  }
  else
  {
    v16 = 0;
    sub_100043758(&v16);
    sub_100155758(*((unsigned __int16 *)a2 + 2), 2701);
    sub_100043728(&v16);
  }
  return a1;
}

void sub_1004E64B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_1004E64D0(uint64_t a1)
{
  sub_1004E6544(a1);
  operator delete();
}

uint64_t sub_1004E64F4(uint64_t a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100933D88);
  return sub_1004D51DC(off_10097AA38, *(_QWORD *)(a1 + 16));
}

uint64_t sub_1004E6544(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100933BE0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    if (*(_DWORD *)v2 <= 0xAu && ((1 << *(_DWORD *)v2) & 0x483) != 0)
      free(*(void **)(v2 + 8));
    free(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_1004E65A8(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v5;
  _WORD *v6;
  size_t v7;
  char *v8;
  NSObject *v9;
  size_t v10;
  _QWORD *v11;
  __int128 *v12;
  __int128 v13;
  void *v14;
  NSObject *v15;
  size_t v17;
  int v18;
  _BYTE v19[24];

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_100933C18;
  *(_WORD *)(a1 + 10) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = a1 + 16;
  v6 = malloc_type_malloc(0x28uLL, 0x103004048DB3EE6uLL);
  *(_QWORD *)v5 = v6;
  *(_DWORD *)v6 = *(_DWORD *)a3;
  v6[8] = *(_WORD *)(a3 + 16);
  v7 = strlen(*(const char **)(a3 + 8));
  v8 = (char *)malloc_type_malloc(v7 + 1, 0x417B56F7uLL);
  *(_QWORD *)(*(_QWORD *)v5 + 8) = v8;
  if (!v8)
  {
    v9 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
    {
      v17 = strlen(*(const char **)(a3 + 8));
      *(_DWORD *)v19 = 134217984;
      *(_QWORD *)&v19[4] = v17 + 1;
      _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Could not allocate %lu bytes", v19, 0xCu);
      v8 = *(char **)(*(_QWORD *)v5 + 8);
    }
    else
    {
      v8 = 0;
    }
  }
  v10 = strlen(*(const char **)(a3 + 8));
  strlcpy(v8, *(const char **)(a3 + 8), v10 + 1);
  v11 = malloc_type_malloc(0x18uLL, 0x10900404FFA3EDEuLL);
  *(_QWORD *)(*(_QWORD *)v5 + 32) = v11;
  if (!v11)
  {
    sub_1006FC110(v5, v19);
    v11 = *(_QWORD **)v19;
  }
  v12 = *(__int128 **)(a3 + 32);
  v13 = *v12;
  v11[2] = *((_QWORD *)v12 + 2);
  *(_OWORD *)v11 = v13;
  v14 = malloc_type_malloc(*(unsigned __int16 *)(*(_QWORD *)(a3 + 32) + 18), 0x1B1BF935uLL);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 32) + 8) = v14;
  if (!v14)
  {
    v15 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
    {
      v18 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 32) + 18);
      *(_DWORD *)v19 = 67109120;
      *(_DWORD *)&v19[4] = v18;
      _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Could not allocate %d bytes", v19, 8u);
      v14 = *(void **)(*(_QWORD *)(*(_QWORD *)v5 + 32) + 8);
    }
    else
    {
      v14 = 0;
    }
  }
  memcpy(v14, *(const void **)(*(_QWORD *)(a3 + 32) + 8), *(unsigned __int16 *)(*(_QWORD *)(a3 + 32) + 18));
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 8)
                                           + *(_QWORD *)(a3 + 24)
                                           - *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8);
  return a1;
}

void sub_1004E681C(uint64_t a1)
{
  sub_1004E6894(a1);
  operator delete();
}

_BYTE *sub_1004E6840(uint64_t a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100933D88);
  return sub_1004DA434((uint64_t)off_10097AA38, *(unsigned __int16 *)(a1 + 10));
}

uint64_t sub_1004E6894(uint64_t a1)
{
  *(_QWORD *)a1 = off_100933C18;
  free(*(void **)(*(_QWORD *)(a1 + 16) + 8));
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 8));
  free(*(void **)(*(_QWORD *)(a1 + 16) + 32));
  free(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1004E68F0(uint64_t a1)
{
  void *v2;

  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100933D88);
  v2 = off_10097AA38;
  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)a1 = off_100933C50;
  return a1;
}

void sub_1004E695C()
{
  operator delete();
}

_QWORD *sub_1004E6970(_QWORD *result)
{
  if (*(_DWORD *)(result[3] + 80) == 1)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
  return result;
}

uint64_t sub_1004E6990(uint64_t a1, uint64_t a2)
{
  return sub_1004DFC68(a2);
}

uint64_t sub_1004E6998(uint64_t a1, __int16 a2, char a3)
{
  void *v6;

  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100933D88);
  v6 = off_10097AA38;
  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)a1 = off_100933C90;
  *(_WORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 34) = a3;
  return a1;
}

void sub_1004E6A1C()
{
  operator delete();
}

uint64_t sub_1004E6A30(uint64_t a1, uint64_t a2)
{
  return sub_1004D0CBC(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

void sub_1004E6A44(uint64_t a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100933D88);
  sub_1004DD7CC((uint64_t)off_10097AA38, *(_DWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40), *(_DWORD *)(a1 + 36));
}

void sub_1004E6AA0()
{
  operator delete();
}

uint64_t sub_1004E6AB4()
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100933D88);
  return sub_1004E13A0((uint64_t)off_10097AA38, 0);
}

void sub_1004E6AF8()
{
  uint64_t v0;

  v0 = sub_100475960();
  sub_100041A34(v0, &stru_100933CF8);
}

void sub_1004E6B14(uint64_t a1, char a2, const void *a3, unsigned int a4, uint64_t a5, uint64_t *a6)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  uint64_t (**v13)();
  unsigned int *v14;
  __int16 v15;
  char v16;
  char v17;
  uint64_t (**v18)();
  unsigned int *v19;

  v18 = 0;
  v19 = 0;
  sub_10003994C(&v18, a3, a4);
  LOWORD(a1) = sub_10015C51C(a1);
  v9 = *((_BYTE *)a6 + 8);
  v10 = *a6;
  v11 = sub_100475960();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3321888768;
  v12[2] = sub_1004E6DBC;
  v12[3] = &unk_100933D18;
  v16 = v9;
  v15 = a1;
  v17 = a2;
  v12[4] = v10;
  v13 = &off_100918258;
  v14 = v19;
  if (v19)
    sub_10003C37C((uint64_t)v19);
  sub_100041A34(v11, v12);
  v13 = &off_100918258;
  if (v14)
    sub_100056AAC(v14);
  v18 = &off_100918258;
  if (v19)
    sub_100056AAC(v19);
}

void sub_1004E6C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int *a15, uint64_t a16, uint64_t a17, unsigned int *a18)
{
  if (a15)
    sub_100056AAC(a15);
  if (a18)
    sub_100056AAC(a18);
  _Unwind_Resume(exception_object);
}

void sub_1004E6C44()
{
  uint64_t v0;

  v0 = sub_100475960();
  sub_100041A34(v0, &stru_100933D48);
}

void sub_1004E6C60(uint64_t a1, __int16 a2)
{
  __int16 v3;
  uint64_t v4;
  _QWORD v5[4];
  __int16 v6;
  __int16 v7;

  v3 = sub_10015C51C(a1);
  v4 = sub_100475960();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004E6EAC;
  v5[3] = &unk_100918130;
  v6 = v3;
  v7 = a2;
  sub_100041A34(v4, v5);
}

void sub_1004E6CCC(int a1, uint64_t a2, char a3, char a4, __int16 a5, __int16 a6, char a7)
{
  __int16 v14;
  uint64_t v15;
  _QWORD v16[5];
  int v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  char v21;
  char v22;
  char v23;

  v14 = sub_10015C51C(a2);
  v15 = sub_100475960();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1004E6EF8;
  v16[3] = &unk_1009226D0;
  v17 = a1;
  v18 = v14;
  v16[4] = a2;
  v21 = a3;
  v22 = a4;
  v19 = a5;
  v20 = a6;
  v23 = a7;
  sub_100041A34(v15, v16);
}

void sub_1004E6D84(id a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100933D88);
  sub_1004CC604();
}

void sub_1004E6DBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = 0;
  LOBYTE(v3) = *(_BYTE *)(a1 + 58);
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100933D88);
  sub_1004CC668((os_unfair_lock_s *)off_10097AA38, *(unsigned __int16 *)(a1 + 56), *(unsigned __int8 *)(a1 + 59), a1 + 40, (uint64_t)&v2);
}

void sub_1004E6E38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = &off_100918258;
  *(_QWORD *)(a1 + 48) = v3;
  if (v3)
    sub_10003C37C(v3);
}

void sub_1004E6E58(uint64_t a1)
{
  unsigned int *v1;

  *(_QWORD *)(a1 + 40) = &off_100918258;
  v1 = *(unsigned int **)(a1 + 48);
  if (v1)
    sub_100056AAC(v1);
}

void sub_1004E6E74(id a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100933D88);
  sub_1004CD138();
}

void sub_1004E6EAC(uint64_t a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100933D88);
  sub_1004CD19C(a1, 0, *(unsigned __int16 *)(a1 + 34));
}

uint64_t sub_1004E6EF8(uint64_t a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100933D88);
  return sub_1004CD23C((uint64_t)off_10097AA38, *(_DWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 44), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 50), *(unsigned __int8 *)(a1 + 51), *(unsigned __int16 *)(a1 + 46), *(unsigned __int16 *)(a1 + 48), *(_BYTE *)(a1 + 52));
}

void sub_1004E6F74(id a1)
{
  operator new();
}

void sub_1004E6FB4()
{
  operator delete();
}

void sub_1004E6FD8(id a1)
{
  operator new();
}

void sub_1004E7018()
{
  operator delete();
}

void sub_1004E703C(id a1)
{
  operator new();
}

void sub_1004E707C()
{
  operator delete();
}

void sub_1004E70A0(id a1)
{
  operator new();
}

void sub_1004E70E0()
{
  operator delete();
}

void sub_1004E7104(id a1)
{
  operator new();
}

void sub_1004E7144()
{
  operator delete();
}

void sub_1004E7168(id a1)
{
  operator new();
}

void sub_1004E71A8()
{
  operator delete();
}

void sub_1004E71CC(id a1)
{
  operator new();
}

void sub_1004E720C()
{
  operator delete();
}

void sub_1004E7230(id a1)
{
  operator new();
}

void sub_1004E7270()
{
  operator delete();
}

void sub_1004E7294(id a1)
{
  operator new();
}

void sub_1004E72D4()
{
  operator delete();
}

void sub_1004E72F8(id a1)
{
  operator new();
}

void sub_1004E7338()
{
  operator delete();
}

void sub_1004E735C(id a1)
{
  operator new();
}

void sub_1004E739C()
{
  operator delete();
}

void sub_1004E73C0(id a1)
{
  operator new();
}

void sub_1004E7400()
{
  operator delete();
}

void sub_1004E7424(id a1)
{
  operator new();
}

void sub_1004E7464()
{
  operator delete();
}

void sub_1004E7488(id a1)
{
  operator new();
}

void sub_1004E75A0()
{
  operator delete();
}

void sub_1004E75C4(id a1)
{
  operator new();
}

void sub_1004E7604()
{
  operator delete();
}

_BYTE *sub_1004E7628(_BYTE *a1, unsigned __int16 a2, uint64_t a3)
{
  _BYTE *result;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  void **v9;
  int v10;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  const char *v16;

  result = (_BYTE *)sub_10026B9B4(a3 + 400);
  if ((_DWORD)result)
  {
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100933D88);
    v6 = sub_1004D1420((uint64_t)off_10097AA38, a2);
    v7 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      if (*a1)
        v8 = "call active";
      else
        v8 = "no call active";
      if (v6)
      {
        sub_10043E5F8(v6, __p);
        if (v12 >= 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        v14 = v8;
        v15 = 2082;
        v16 = (const char *)v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending call status \"%{public}s\" to device %{public}s", buf, 0x16u);
        if (v12 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 136446466;
        v14 = v8;
        v15 = 2082;
        v16 = "NULL";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending call status \"%{public}s\" to device %{public}s", buf, 0x16u);
      }
    }
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    v10 = sub_100155C08(a2, *a1);
    sub_10004339C(__p);
    if (v10)
    {
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FC1C0();
    }
    return sub_100043728(__p);
  }
  return result;
}

void sub_1004E7824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1004E7840(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1004E7894(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_1004E787C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1004E7894(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned __int16 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1004E7918(v5, v6, v4 + 16, (_OWORD *)v4 + 2);
      v7 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int16 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1004E7918(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v10 = 0;
  v11 = 0;
  v6 = sub_1004E79A0(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_100004078(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1004E79A0(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int16 *)a2 + 16), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int16 *)v10 + 16) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int16 *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 16))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int16 *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_1004E7B48(unsigned __int8 *a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  void **v9;
  void **v10;
  NSObject *v11;
  void **v12;
  void **v13;
  int v14;
  NSObject *v15;
  void **v16;
  void **v17;
  void **v18;
  char v19;
  void *__p[2];
  char v21;
  int v22;
  void *v23[2];
  char v24;
  uint8_t buf[4];
  void **v26;
  __int16 v27;
  const char *v28;

  v5 = a3 + 400;
  v6 = sub_10026B974(a3 + 400);
  if (sub_10026B9B4(v5))
  {
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100933D88);
    v7 = sub_1004D1420((uint64_t)off_10097AA38, a2);
    if (v6)
    {
      v8 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        v22 = a1[1];
        v9 = v23;
        sub_10026A9C4(&v22, v23);
        if (v24 < 0)
          v9 = (void **)v23[0];
        if (v7)
        {
          sub_10043E5F8(v7, __p);
          if (v21 >= 0)
            v10 = __p;
          else
            v10 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v26 = v9;
          v27 = 2082;
          v28 = (const char *)v10;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending call held status \"%{public}s\" to device %{public}s", buf, 0x16u);
          if (v21 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446466;
          v26 = v9;
          v27 = 2082;
          v28 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending call held status \"%{public}s\" to device %{public}s", buf, 0x16u);
        }
        if (v24 < 0)
          operator delete(v23[0]);
      }
      v19 = 0;
      sub_100043758(&v19);
      v14 = sub_100155EB8(a2, a1[1]);
      if (!v14)
      {
        v15 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          v22 = *a1;
          v16 = v23;
          sub_10026A9F4(&v22, v23);
          if (v24 < 0)
            v16 = (void **)v23[0];
          if (v7)
          {
            sub_10043E5F8(v7, __p);
            if (v21 >= 0)
              v17 = __p;
            else
              v17 = (void **)__p[0];
            *(_DWORD *)buf = 136446466;
            v26 = v16;
            v27 = 2082;
            v28 = (const char *)v17;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
            if (v21 < 0)
              operator delete(__p[0]);
          }
          else
          {
            *(_DWORD *)buf = 136446466;
            v26 = v16;
            v27 = 2082;
            v28 = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
          }
          if (v24 < 0)
            operator delete(v23[0]);
        }
        v14 = sub_100155D2C(a2, *a1);
      }
      v18 = (void **)&v19;
    }
    else
    {
      if (!a1[2])
        return;
      v11 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *a1;
        v12 = v23;
        sub_10026A9F4(&v22, v23);
        if (v24 < 0)
          v12 = (void **)v23[0];
        if (v7)
        {
          sub_10043E5F8(v7, __p);
          if (v21 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v26 = v12;
          v27 = 2082;
          v28 = (const char *)v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
          if (v21 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446466;
          v26 = v12;
          v27 = 2082;
          v28 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
        }
        if (v24 < 0)
          operator delete(v23[0]);
      }
      LOBYTE(v23[0]) = 0;
      sub_100043758(v23);
      v14 = sub_100155D2C(a2, *a1);
      v18 = v23;
    }
    sub_100043728(v18);
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FB900();
    }
  }
}

void sub_1004E7FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

void sub_1004E8034(unsigned __int8 *a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  void **v9;
  void **v10;
  NSObject *v11;
  void **v12;
  void **v13;
  int v14;
  NSObject *v15;
  void **v16;
  void **v17;
  void **v18;
  char v19;
  void *__p[2];
  char v21;
  int v22;
  void *v23[2];
  char v24;
  uint8_t buf[4];
  void **v26;
  __int16 v27;
  const char *v28;

  v5 = a3 + 400;
  v6 = sub_10026B974(a3 + 400);
  if (sub_10026B9B4(v5))
  {
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100933D88);
    v7 = sub_1004D1420((uint64_t)off_10097AA38, a2);
    if (v6)
    {
      v8 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *a1;
        v9 = v23;
        sub_10026A9F4(&v22, v23);
        if (v24 < 0)
          v9 = (void **)v23[0];
        if (v7)
        {
          sub_10043E5F8(v7, __p);
          if (v21 >= 0)
            v10 = __p;
          else
            v10 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v26 = v9;
          v27 = 2082;
          v28 = (const char *)v10;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
          if (v21 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446466;
          v26 = v9;
          v27 = 2082;
          v28 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
        }
        if (v24 < 0)
          operator delete(v23[0]);
      }
      if (a1[2] && a1[1] != 1)
      {
        LOBYTE(v23[0]) = 0;
        sub_100043758(v23);
        if (sub_100155D2C(a2, 1u) && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
          sub_1006FB900();
        sub_100043728(v23);
      }
      v19 = 0;
      sub_100043758(&v19);
      v14 = sub_100155D2C(a2, *a1);
      if (!v14)
      {
        v15 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
        {
          v22 = a1[1];
          v16 = v23;
          sub_10026A9C4(&v22, v23);
          if (v24 < 0)
            v16 = (void **)v23[0];
          if (v7)
          {
            sub_10043E5F8(v7, __p);
            if (v21 >= 0)
              v17 = __p;
            else
              v17 = (void **)__p[0];
            *(_DWORD *)buf = 136446466;
            v26 = v16;
            v27 = 2082;
            v28 = (const char *)v17;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending call held status \"%{public}s\" to device %{public}s", buf, 0x16u);
            if (v21 < 0)
              operator delete(__p[0]);
          }
          else
          {
            *(_DWORD *)buf = 136446466;
            v26 = v16;
            v27 = 2082;
            v28 = "NULL";
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending call held status \"%{public}s\" to device %{public}s", buf, 0x16u);
          }
          if (v24 < 0)
            operator delete(v23[0]);
        }
        v14 = sub_100155EB8(a2, a1[1]);
      }
      v18 = (void **)&v19;
    }
    else
    {
      if (!a1[3])
        return;
      v11 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *a1;
        v12 = v23;
        sub_10026A9F4(&v22, v23);
        if (v24 < 0)
          v12 = (void **)v23[0];
        if (v7)
        {
          sub_10043E5F8(v7, __p);
          if (v21 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v26 = v12;
          v27 = 2082;
          v28 = (const char *)v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
          if (v21 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446466;
          v26 = v12;
          v27 = 2082;
          v28 = "NULL";
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
        }
        if (v24 < 0)
          operator delete(v23[0]);
      }
      LOBYTE(v23[0]) = 0;
      sub_100043758(v23);
      v14 = sub_100155D2C(a2, *a1);
      v18 = v23;
    }
    sub_100043728(v18);
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FB900();
    }
  }
}

void sub_1004E851C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

_BYTE *sub_1004E8580(unsigned __int8 *a1, unsigned __int16 a2, uint64_t a3)
{
  _BYTE *result;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  void **v9;
  int v10;
  void *__p[2];
  char v12;
  int v13;
  void *v14[2];
  char v15;
  uint8_t buf[4];
  void **v17;
  __int16 v18;
  const char *v19;

  result = (_BYTE *)sub_10026B9B4(a3 + 400);
  if ((_DWORD)result)
  {
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100933D88);
    v6 = sub_1004D1420((uint64_t)off_10097AA38, a2);
    v7 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *a1;
      v8 = v14;
      sub_10026A9F4(&v13, v14);
      if (v15 < 0)
        v8 = (void **)v14[0];
      if (v6)
      {
        sub_10043E5F8(v6, __p);
        if (v12 >= 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        v17 = v8;
        v18 = 2082;
        v19 = (const char *)v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
        if (v12 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 136446466;
        v17 = v8;
        v18 = 2082;
        v19 = "NULL";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending call setup \"%{public}s\" to device %{public}s", buf, 0x16u);
      }
      if (v15 < 0)
        operator delete(v14[0]);
    }
    LOBYTE(v14[0]) = 0;
    sub_100043758(v14);
    v10 = sub_100155D2C(a2, *a1);
    sub_10004339C(v14);
    if (v10)
    {
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006FC220();
    }
    return sub_100043728(v14);
  }
  return result;
}

void sub_1004E8798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1004E87CC(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t sub_1004E8880(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      sub_1004E88F4(a1, a2, a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_1004E88E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1000B69C0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004E88F4(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = *a2;
      if (v6 <= v5)
        v8 = v5 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v5)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v5)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v14 = 1;
    if (v6 >= 3)
      v14 = (v6 & (v6 - 1)) != 0;
    v15 = v14 | (2 * v6);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_1000B678C(a1, v17);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6)
        v20 %= v6;
    }
    else
    {
      v20 &= v6 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1004E8B00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004E8B14(_QWORD *result, uint64_t a2, int a3, float a4)
{
  int v4;
  _QWORD *v5;

  if (v4 >= 0)
    v5 = result;
  else
    v5 = (_QWORD *)*result;
  *(float *)a2 = a4;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2080;
  *(_QWORD *)(a2 + 10) = v5;
  return result;
}

uint64_t sub_1004E8B48(uint64_t result, uint64_t a2, float a3)
{
  *(float *)result = a3;
  *(_QWORD *)(result + 4) = a2;
  *(_WORD *)(result + 12) = 1024;
  *(_DWORD *)(result + 14) = 2;
  return result;
}

uint64_t sub_1004E8B74@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(result + 4) = a3;
  *(_WORD *)(result + 12) = 1024;
  *(_DWORD *)(result + 14) = a2;
  return result;
}

_QWORD *sub_1004E8B88(_QWORD *a1)
{
  id v2;

  *a1 = &off_100933FB8;
  v2 = +[CloudPairing sharedInstance](CloudPairing, "sharedInstance");
  return a1;
}

void sub_1004E8BC8(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[16];
  _BYTE v22[128];

  v2 = a2;
  v3 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CloudPairing start", buf, 2u);
  }
  if (NSClassFromString(CFSTR("UMUserManager")))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UMUserManager sharedManager](UMUserManager, "sharedManager"));
    if (objc_msgSend(v4, "isMultiUser"))
    {
      v5 = qword_1009997F8;
      if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Disabling cloud pairing for multi-user mode", buf, 2u);
      }

      goto LABEL_19;
    }

  }
  else if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_ERROR))
  {
    sub_1006FC280();
  }
  v6 = objc_autoreleasePoolPush();
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v9 = v2;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v11)
          objc_enumerationMutation(v9);
        v13 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "UUIDString", (_QWORD)v17));
        objc_msgSend(v7, "addObject:", v14);

        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v13));
        objc_msgSend(v8, "addObject:", v15);

      }
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v10);
  }

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
  objc_msgSend(v16, "registerWithCloudPairedDevices:identifiers:", v7, v8);

  objc_autoreleasePoolPop(v6);
LABEL_19:

}

void sub_1004E8E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1004E8EBC()
{
  id v0;

  v0 = (id)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
  objc_msgSend(v0, "printDebug");

}

void sub_1004E8EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1004E8F0C()
{
  id v0;

  v0 = (id)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
  objc_msgSend(v0, "sendCloudKitPush");

}

void sub_1004E8F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1004E8F5C(uint64_t a1, _BYTE *a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
  *a2 = objc_msgSend(v3, "getAccessibilityHeadtrackingEnabled");

}

void sub_1004E8FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1004E8FB4()
{
  id v0;

  v0 = (id)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
  objc_msgSend(v0, "fetchManateeStatus");

}

void sub_1004E8FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1004E9004()
{
  void *v0;
  id v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
  v1 = objc_msgSend(v0, "getAccountStatus");

  return v1;
}

void sub_1004E9040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004E9050(uint64_t a1, uint64_t *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cloudClient"));
  if (*((char *)a2 + 23) < 0)
    a2 = (uint64_t *)*a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
  objc_msgSend(v3, "deviceRecord:completion:", v4, &stru_100934030);

}

void sub_1004E90D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1004E9108(id a1, BTCloudDevice *a2, NSError *a3)
{
  BTCloudDevice *v4;
  NSError *v5;
  NSError *v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  id v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  uint8_t buf[4];
  BTCloudDevice *v16;

  v4 = a2;
  v5 = a3;
  v6 = v5;
  v7 = qword_1009997F8;
  if (!v4 || v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_ERROR))
      sub_1006FC2AC();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[Inquiry] fetched cloud device: %@", buf, 0xCu);
    }
    v8 = sub_100350078();
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(-[BTCloudDevice bluetoothAddress](v4, "bluetoothAddress")));
    sub_100091AE8(v13, (char *)objc_msgSend(v9, "UTF8String"));
    v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(-[BTCloudDevice nickname](v4, "nickname")));
    sub_100091AE8(__p, (char *)objc_msgSend(v10, "UTF8String"));
    (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v8 + 176))(v8, v13, __p);
    if (v12 < 0)
      operator delete(__p[0]);

    if (v14 < 0)
      operator delete(v13[0]);

  }
}

void sub_1004E928C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  if (a14 < 0)
    operator delete(__p);

  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_1004E92EC(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
  objc_msgSend(v3, "multipleAdvInstancesInitialized:", a2);

}

void sub_1004E9330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1004E9344(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1])
      return;
  }
  else if (!*((_BYTE *)a2 + 23))
  {
    return;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CloudPairing sharedInstance](CloudPairing, "sharedInstance"));
  if (*((char *)v2 + 23) < 0)
    v2 = (uint64_t *)*v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2));
  v6 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v6, 1));
  objc_msgSend(v3, "sendCloudpairingRetry:", v5);

}

void sub_1004E9428(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1004E949C(id a1)
{
  CloudPairing *v1;
  void *v2;

  v1 = objc_alloc_init(CloudPairing);
  v2 = (void *)qword_1009931F0;
  qword_1009931F0 = (uint64_t)v1;

}

void sub_1004E9504(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)BTCloudServicesClient);
  v2 = (void *)qword_100993200;
  qword_100993200 = (uint64_t)v1;

  objc_msgSend((id)qword_100993200, "setInterruptionHandler:", &stru_100934090);
  objc_msgSend((id)qword_100993200, "setInvalidationHandler:", &stru_1009340B0);
}

void sub_1004E9554(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Cloud InterruptionHandler", v2, 2u);
  }
}

void sub_1004E95B8(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Cloud InvalidationHandler", v2, 2u);
  }
}

void sub_1004E9B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

uint64_t sub_1004E9B88(uint64_t a1, int a2)
{
  NSObject *v4;
  id WeakRetained;
  _DWORD v7[2];

  v4 = (id)qword_1009997F8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = MKBDeviceUnlockedSinceBoot();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received first unlock notification. returns : %d", (uint8_t *)v7, 8u);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "startUpServices");

  return notify_cancel(a2);
}

void sub_1004E9C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1004E9E2C(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BTAudioCloudSyncMonitor: BTCloudSoundProfileChangedNotification Received", v4, 2u);
  }
  return objc_msgSend(*(id *)(a1 + 32), "soundProfileChanged");
}

void sub_1004E9FF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004EA0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1004EA0EC(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "_generateKeys");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1004EA458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004EA6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;
  id *v17;
  void *v18;

  v18 = v16;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1004EA70C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "_handleMsg:", v3);

}

void sub_1004EA754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1004F0184(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (*(char *)(v1 + 1655) < 0)
    operator delete(*(void **)(v1 + 1632));

  if (*(char *)(v1 + 2055) < 0)
    operator delete(*(void **)(v1 + 2032));

  _Unwind_Resume(a1);
}

id sub_1004F10B4(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "handleXPCUnpairCommand:", *(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1004F10E8(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v4;

  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100934270);
  v2 = qword_1009778B0;
  sub_100091AE8(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"));
  sub_10069939C(v2, (unsigned __int8 *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1004F1170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004F118C(uint64_t a1)
{
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100934270);
  sub_100699674(qword_1009778B0, *(void **)(a1 + 32));
}

void sub_1004F11DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  int v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  _OWORD *v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  int64x2_t v36;
  uint64_t v37;
  __int128 v38;
  char *v39;
  __int128 v40;
  char *v41;
  __int128 v42;
  char *v43;
  _OWORD *v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  int64x2_t v56;
  char *v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  __int128 v71;
  int64x2_t v72;
  uint64_t v73;
  __int128 v74;
  char *v75;
  _OWORD *v76;
  __int128 v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  __int128 v88;
  int64x2_t v89;
  uint64_t v90;
  __int128 v91;
  char *v92;
  __int128 v93;
  char *v94;
  __int128 v95;
  char *v96;
  __int128 *v97;
  __int128 v98;
  char *v99;
  __int128 *v100;
  __int128 v101;
  char *v102;
  __int128 *v103;
  __int128 v104;
  char *v105;
  __int128 *v106;
  __int128 v107;
  uint64_t v108;
  void *v109[3];
  void *__p[2];
  uint64_t v111;
  int64x2_t v112;
  _QWORD v113[2];
  void *v114[2];
  uint64_t v115;
  void *v116[2];
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  __int128 __dst;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void **v131;
  int64x2_t v132;
  uint64_t v133;
  _QWORD *v134;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5 && !v6)
  {
    v128 = 0;
    v129 = 0;
    v130 = 0;
    v8 = sub_100448DAC(*(_QWORD *)(a1 + 40), (uint64_t)&v128);
    __dst = 0uLL;
    v127 = 0;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "modelNumber"));
    if ((unint64_t)objc_msgSend(v9, "length") < 2)
    {
      if (v8)
      {
        if (*(char *)(v128 + 47) < 0)
        {
          sub_10003430C(&__dst, *(void **)(v128 + 24), *(_QWORD *)(v128 + 32));
        }
        else
        {
          __dst = *(_OWORD *)(v128 + 24);
          v127 = *(_QWORD *)(v128 + 40);
        }
      }
      else
      {
        sub_100091AE8(&__dst, "");
      }
    }
    else
    {
      v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "modelNumber")));
      sub_100091AE8(&__dst, (char *)objc_msgSend(v10, "UTF8String"));

    }
    v124 = 0uLL;
    v125 = 0;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "manufacturer"));
    if ((unint64_t)objc_msgSend(v11, "length") < 2)
    {
      if (v8)
      {
        if (*(char *)(v128 + 71) < 0)
        {
          sub_10003430C(&v124, *(void **)(v128 + 48), *(_QWORD *)(v128 + 56));
        }
        else
        {
          v124 = *(_OWORD *)(v128 + 48);
          v125 = *(_QWORD *)(v128 + 64);
        }
      }
      else
      {
        sub_100091AE8(&v124, "");
      }
    }
    else
    {
      v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "manufacturer")));
      sub_100091AE8(&v124, (char *)objc_msgSend(v12, "UTF8String"));

    }
    v122 = 0uLL;
    v123 = 0;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "caseSerialNumber"));
    if ((unint64_t)objc_msgSend(v13, "length") < 2)
    {
      if (v8)
      {
        if (*(char *)(v128 + 95) < 0)
        {
          sub_10003430C(&v122, *(void **)(v128 + 72), *(_QWORD *)(v128 + 80));
        }
        else
        {
          v122 = *(_OWORD *)(v128 + 72);
          v123 = *(_QWORD *)(v128 + 88);
        }
      }
      else
      {
        sub_100091AE8(&v122, "");
      }
    }
    else
    {
      v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "caseSerialNumber")));
      sub_100091AE8(&v122, (char *)objc_msgSend(v14, "UTF8String"));

    }
    v120 = 0uLL;
    v121 = 0;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "hardwareVersion"));
    if ((unint64_t)objc_msgSend(v15, "length") < 2)
    {
      if (v8)
      {
        if (*(char *)(v128 + 167) < 0)
        {
          sub_10003430C(&v120, *(void **)(v128 + 144), *(_QWORD *)(v128 + 152));
        }
        else
        {
          v120 = *(_OWORD *)(v128 + 144);
          v121 = *(_QWORD *)(v128 + 160);
        }
      }
      else
      {
        sub_100091AE8(&v120, "");
      }
    }
    else
    {
      v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "hardwareVersion")));
      sub_100091AE8(&v120, (char *)objc_msgSend(v16, "UTF8String"));

    }
    v118 = 0uLL;
    v119 = 0;
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "leftBudSerialNumber"));
    if ((unint64_t)objc_msgSend(v17, "length") < 2)
    {
      if (v8)
      {
        if (*(char *)(v128 + 215) < 0)
        {
          sub_10003430C(&v118, *(void **)(v128 + 192), *(_QWORD *)(v128 + 200));
        }
        else
        {
          v118 = *(_OWORD *)(v128 + 192);
          v119 = *(_QWORD *)(v128 + 208);
        }
      }
      else
      {
        sub_100091AE8(&v118, "");
      }
    }
    else
    {
      v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "leftBudSerialNumber")));
      sub_100091AE8(&v118, (char *)objc_msgSend(v18, "UTF8String"));

    }
    v116[0] = 0;
    v116[1] = 0;
    v117 = 0;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rightBudSerialNumber"));
    if ((unint64_t)objc_msgSend(v19, "length") < 2)
    {
      if (v8)
      {
        if (*(char *)(v128 + 239) < 0)
        {
          sub_10003430C(v116, *(void **)(v128 + 216), *(_QWORD *)(v128 + 224));
        }
        else
        {
          *(_OWORD *)v116 = *(_OWORD *)(v128 + 216);
          v117 = *(_QWORD *)(v128 + 232);
        }
      }
      else
      {
        sub_100091AE8(v116, "");
      }
    }
    else
    {
      v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rightBudSerialNumber")));
      sub_100091AE8(v116, (char *)objc_msgSend(v20, "UTF8String"));

    }
    v114[0] = 0;
    v114[1] = 0;
    v115 = 0;
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "budsFirmwareVersion"));
    if ((unint64_t)objc_msgSend(v21, "length") < 2)
    {
      if (v8)
      {
        if (*(char *)(v128 + 263) < 0)
        {
          sub_10003430C(v114, *(void **)(v128 + 240), *(_QWORD *)(v128 + 248));
        }
        else
        {
          *(_OWORD *)v114 = *(_OWORD *)(v128 + 240);
          v115 = *(_QWORD *)(v128 + 256);
        }
      }
      else
      {
        sub_100091AE8(v114, "");
      }
    }
    else
    {
      v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "budsFirmwareVersion")));
      sub_100091AE8(v114, (char *)objc_msgSend(v22, "UTF8String"));

    }
    v112 = 0uLL;
    v113[0] = 0;
    sub_100091AE8(__p, "");
    v23 = (_OWORD *)v112.i64[1];
    if (v112.i64[1] >= v113[0])
    {
      v26 = 0xAAAAAAAAAAAAAAABLL * ((v112.i64[1] - v112.i64[0]) >> 3);
      v27 = v26 + 1;
      if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3) > v27)
        v27 = 0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v113[0] - v112.i64[0]) >> 3) >= 0x555555555555555)
        v28 = 0xAAAAAAAAAAAAAAALL;
      else
        v28 = v27;
      v134 = v113;
      if (v28)
        v29 = (char *)sub_1002A479C((uint64_t)v113, v28);
      else
        v29 = 0;
      v30 = &v29[24 * v26];
      v31 = *(_OWORD *)__p;
      *((_QWORD *)v30 + 2) = v111;
      *(_OWORD *)v30 = v31;
      __p[1] = 0;
      v111 = 0;
      __p[0] = 0;
      v32 = v112.i64[1];
      v33 = v112.i64[0];
      if (v112.i64[1] == v112.i64[0])
      {
        v36 = vdupq_n_s64(v112.u64[1]);
        v34 = &v29[24 * v26];
      }
      else
      {
        v34 = &v29[24 * v26];
        do
        {
          v35 = *(_OWORD *)(v32 - 24);
          *((_QWORD *)v34 - 1) = *(_QWORD *)(v32 - 8);
          *(_OWORD *)(v34 - 24) = v35;
          v34 -= 24;
          *(_QWORD *)(v32 - 16) = 0;
          *(_QWORD *)(v32 - 8) = 0;
          *(_QWORD *)(v32 - 24) = 0;
          v32 -= 24;
        }
        while (v32 != v33);
        v36 = v112;
      }
      v25 = v30 + 24;
      v112.i64[0] = (uint64_t)v34;
      v112.i64[1] = (uint64_t)(v30 + 24);
      v132 = v36;
      v37 = v113[0];
      v113[0] = &v29[24 * v28];
      v133 = v37;
      v131 = (void **)v36.i64[0];
      sub_1002A56A4((uint64_t)&v131);
      v112.i64[1] = (uint64_t)v25;
      if (SHIBYTE(v111) < 0)
      {
        operator delete(__p[0]);
        v25 = (char *)v112.i64[1];
      }
    }
    else
    {
      v24 = *(_OWORD *)__p;
      *(_QWORD *)(v112.i64[1] + 16) = v111;
      *v23 = v24;
      v25 = (char *)v23 + 24;
      v112.i64[1] = (uint64_t)v23 + 24;
    }
    if ((unint64_t)v25 >= v113[0])
    {
      v39 = sub_1002A553C((char **)&v112, &__dst);
    }
    else
    {
      if (SHIBYTE(v127) < 0)
      {
        sub_10003430C(v25, (void *)__dst, *((unint64_t *)&__dst + 1));
      }
      else
      {
        v38 = __dst;
        *((_QWORD *)v25 + 2) = v127;
        *(_OWORD *)v25 = v38;
      }
      v39 = v25 + 24;
    }
    v112.i64[1] = (uint64_t)v39;
    if ((unint64_t)v39 >= v113[0])
    {
      v41 = sub_1002A553C((char **)&v112, &v124);
    }
    else
    {
      if (SHIBYTE(v125) < 0)
      {
        sub_10003430C(v39, (void *)v124, *((unint64_t *)&v124 + 1));
      }
      else
      {
        v40 = v124;
        *((_QWORD *)v39 + 2) = v125;
        *(_OWORD *)v39 = v40;
      }
      v41 = v39 + 24;
    }
    v112.i64[1] = (uint64_t)v41;
    if ((unint64_t)v41 >= v113[0])
    {
      v43 = sub_1002A553C((char **)&v112, &v122);
    }
    else
    {
      if (SHIBYTE(v123) < 0)
      {
        sub_10003430C(v41, (void *)v122, *((unint64_t *)&v122 + 1));
      }
      else
      {
        v42 = v122;
        *((_QWORD *)v41 + 2) = v123;
        *(_OWORD *)v41 = v42;
      }
      v43 = v41 + 24;
    }
    v112.i64[1] = (uint64_t)v43;
    if (v8)
    {
      if (*(char *)(v128 + 119) < 0)
      {
        sub_10003430C(__p, *(void **)(v128 + 96), *(_QWORD *)(v128 + 104));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(v128 + 96);
        v111 = *(_QWORD *)(v128 + 112);
      }
    }
    else
    {
      sub_100091AE8(__p, "");
    }
    v44 = (_OWORD *)v112.i64[1];
    if (v112.i64[1] >= v113[0])
    {
      v46 = 0xAAAAAAAAAAAAAAABLL * ((v112.i64[1] - v112.i64[0]) >> 3);
      v47 = v46 + 1;
      if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3) > v47)
        v47 = 0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v113[0] - v112.i64[0]) >> 3) >= 0x555555555555555)
        v48 = 0xAAAAAAAAAAAAAAALL;
      else
        v48 = v47;
      v134 = v113;
      if (v48)
        v49 = (char *)sub_1002A479C((uint64_t)v113, v48);
      else
        v49 = 0;
      v50 = &v49[24 * v46];
      v51 = *(_OWORD *)__p;
      *((_QWORD *)v50 + 2) = v111;
      *(_OWORD *)v50 = v51;
      __p[1] = 0;
      v111 = 0;
      __p[0] = 0;
      v52 = v112.i64[1];
      v53 = v112.i64[0];
      if (v112.i64[1] == v112.i64[0])
      {
        v56 = vdupq_n_s64(v112.u64[1]);
        v54 = &v49[24 * v46];
      }
      else
      {
        v54 = &v49[24 * v46];
        do
        {
          v55 = *(_OWORD *)(v52 - 24);
          *((_QWORD *)v54 - 1) = *(_QWORD *)(v52 - 8);
          *(_OWORD *)(v54 - 24) = v55;
          v54 -= 24;
          *(_QWORD *)(v52 - 16) = 0;
          *(_QWORD *)(v52 - 8) = 0;
          *(_QWORD *)(v52 - 24) = 0;
          v52 -= 24;
        }
        while (v52 != v53);
        v56 = v112;
      }
      v57 = v50 + 24;
      v112.i64[0] = (uint64_t)v54;
      v112.i64[1] = (uint64_t)(v50 + 24);
      v132 = v56;
      v58 = v113[0];
      v113[0] = &v49[24 * v48];
      v133 = v58;
      v131 = (void **)v56.i64[0];
      sub_1002A56A4((uint64_t)&v131);
      v112.i64[1] = (uint64_t)v57;
      if (SHIBYTE(v111) < 0)
      {
        operator delete(__p[0]);
        if (!v8)
          goto LABEL_97;
      }
      else if (!v8)
      {
        goto LABEL_97;
      }
    }
    else
    {
      v45 = *(_OWORD *)__p;
      *(_QWORD *)(v112.i64[1] + 16) = v111;
      *v44 = v45;
      v112.i64[1] = (uint64_t)v44 + 24;
      if (!v8)
      {
LABEL_97:
        sub_100091AE8(__p, "");
LABEL_117:
        v59 = (_OWORD *)v112.i64[1];
        if (v112.i64[1] >= v113[0])
        {
          v62 = 0xAAAAAAAAAAAAAAABLL * ((v112.i64[1] - v112.i64[0]) >> 3);
          v63 = v62 + 1;
          if (v62 + 1 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3) > v63)
            v63 = 0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v113[0] - v112.i64[0]) >> 3) >= 0x555555555555555)
            v64 = 0xAAAAAAAAAAAAAAALL;
          else
            v64 = v63;
          v134 = v113;
          if (v64)
            v65 = (char *)sub_1002A479C((uint64_t)v113, v64);
          else
            v65 = 0;
          v66 = &v65[24 * v62];
          v67 = *(_OWORD *)__p;
          *((_QWORD *)v66 + 2) = v111;
          *(_OWORD *)v66 = v67;
          __p[1] = 0;
          v111 = 0;
          __p[0] = 0;
          v68 = v112.i64[1];
          v69 = v112.i64[0];
          if (v112.i64[1] == v112.i64[0])
          {
            v72 = vdupq_n_s64(v112.u64[1]);
            v70 = &v65[24 * v62];
          }
          else
          {
            v70 = &v65[24 * v62];
            do
            {
              v71 = *(_OWORD *)(v68 - 24);
              *((_QWORD *)v70 - 1) = *(_QWORD *)(v68 - 8);
              *(_OWORD *)(v70 - 24) = v71;
              v70 -= 24;
              *(_QWORD *)(v68 - 16) = 0;
              *(_QWORD *)(v68 - 8) = 0;
              *(_QWORD *)(v68 - 24) = 0;
              v68 -= 24;
            }
            while (v68 != v69);
            v72 = v112;
          }
          v61 = v66 + 24;
          v112.i64[0] = (uint64_t)v70;
          v112.i64[1] = (uint64_t)(v66 + 24);
          v132 = v72;
          v73 = v113[0];
          v113[0] = &v65[24 * v64];
          v133 = v73;
          v131 = (void **)v72.i64[0];
          sub_1002A56A4((uint64_t)&v131);
          v112.i64[1] = (uint64_t)v61;
          if (SHIBYTE(v111) < 0)
          {
            operator delete(__p[0]);
            v61 = (char *)v112.i64[1];
          }
        }
        else
        {
          v60 = *(_OWORD *)__p;
          *(_QWORD *)(v112.i64[1] + 16) = v111;
          *v59 = v60;
          v61 = (char *)v59 + 24;
          v112.i64[1] = (uint64_t)v59 + 24;
        }
        if ((unint64_t)v61 >= v113[0])
        {
          v75 = sub_1002A553C((char **)&v112, &v120);
        }
        else
        {
          if (SHIBYTE(v121) < 0)
          {
            sub_10003430C(v61, (void *)v120, *((unint64_t *)&v120 + 1));
          }
          else
          {
            v74 = v120;
            *((_QWORD *)v61 + 2) = v121;
            *(_OWORD *)v61 = v74;
          }
          v75 = v61 + 24;
        }
        v112.i64[1] = (uint64_t)v75;
        if (v8)
        {
          if (*(char *)(v128 + 191) < 0)
          {
            sub_10003430C(__p, *(void **)(v128 + 168), *(_QWORD *)(v128 + 176));
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)(v128 + 168);
            v111 = *(_QWORD *)(v128 + 184);
          }
        }
        else
        {
          sub_100091AE8(__p, "");
        }
        v76 = (_OWORD *)v112.i64[1];
        if (v112.i64[1] >= v113[0])
        {
          v79 = 0xAAAAAAAAAAAAAAABLL * ((v112.i64[1] - v112.i64[0]) >> 3);
          v80 = v79 + 1;
          if (v79 + 1 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3) > v80)
            v80 = 0x5555555555555556 * ((v113[0] - v112.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v113[0] - v112.i64[0]) >> 3) >= 0x555555555555555)
            v81 = 0xAAAAAAAAAAAAAAALL;
          else
            v81 = v80;
          v134 = v113;
          if (v81)
            v82 = (char *)sub_1002A479C((uint64_t)v113, v81);
          else
            v82 = 0;
          v83 = &v82[24 * v79];
          v84 = *(_OWORD *)__p;
          *((_QWORD *)v83 + 2) = v111;
          *(_OWORD *)v83 = v84;
          __p[1] = 0;
          v111 = 0;
          __p[0] = 0;
          v85 = v112.i64[1];
          v86 = v112.i64[0];
          if (v112.i64[1] == v112.i64[0])
          {
            v89 = vdupq_n_s64(v112.u64[1]);
            v87 = &v82[24 * v79];
          }
          else
          {
            v87 = &v82[24 * v79];
            do
            {
              v88 = *(_OWORD *)(v85 - 24);
              *((_QWORD *)v87 - 1) = *(_QWORD *)(v85 - 8);
              *(_OWORD *)(v87 - 24) = v88;
              v87 -= 24;
              *(_QWORD *)(v85 - 16) = 0;
              *(_QWORD *)(v85 - 8) = 0;
              *(_QWORD *)(v85 - 24) = 0;
              v85 -= 24;
            }
            while (v85 != v86);
            v89 = v112;
          }
          v78 = v83 + 24;
          v112.i64[0] = (uint64_t)v87;
          v112.i64[1] = (uint64_t)(v83 + 24);
          v132 = v89;
          v90 = v113[0];
          v113[0] = &v82[24 * v81];
          v133 = v90;
          v131 = (void **)v89.i64[0];
          sub_1002A56A4((uint64_t)&v131);
          v112.i64[1] = (uint64_t)v78;
          if (SHIBYTE(v111) < 0)
          {
            operator delete(__p[0]);
            v78 = (char *)v112.i64[1];
          }
        }
        else
        {
          v77 = *(_OWORD *)__p;
          *(_QWORD *)(v112.i64[1] + 16) = v111;
          *v76 = v77;
          v78 = (char *)v76 + 24;
          v112.i64[1] = (uint64_t)v76 + 24;
        }
        if ((unint64_t)v78 >= v113[0])
        {
          v92 = sub_1002A553C((char **)&v112, &v118);
        }
        else
        {
          if (SHIBYTE(v119) < 0)
          {
            sub_10003430C(v78, (void *)v118, *((unint64_t *)&v118 + 1));
          }
          else
          {
            v91 = v118;
            *((_QWORD *)v78 + 2) = v119;
            *(_OWORD *)v78 = v91;
          }
          v92 = v78 + 24;
        }
        v112.i64[1] = (uint64_t)v92;
        if ((unint64_t)v92 >= v113[0])
        {
          v94 = sub_1002A553C((char **)&v112, (__int128 *)v116);
        }
        else
        {
          if (SHIBYTE(v117) < 0)
          {
            sub_10003430C(v92, v116[0], (unint64_t)v116[1]);
          }
          else
          {
            v93 = *(_OWORD *)v116;
            *((_QWORD *)v92 + 2) = v117;
            *(_OWORD *)v92 = v93;
          }
          v94 = v92 + 24;
        }
        v112.i64[1] = (uint64_t)v94;
        if ((unint64_t)v94 >= v113[0])
        {
          v96 = sub_1002A553C((char **)&v112, (__int128 *)v114);
        }
        else
        {
          if (SHIBYTE(v115) < 0)
          {
            sub_10003430C(v94, v114[0], (unint64_t)v114[1]);
          }
          else
          {
            v95 = *(_OWORD *)v114;
            *((_QWORD *)v94 + 2) = v115;
            *(_OWORD *)v94 = v95;
          }
          v96 = v94 + 24;
        }
        v112.i64[1] = (uint64_t)v96;
        if (v8 && 0xAAAAAAAAAAAAAAABLL * ((v129 - v128) >> 3) >= 0xF)
        {
          v97 = (__int128 *)(v128 + 264);
          if ((unint64_t)v96 >= v113[0])
          {
            v99 = sub_1002A553C((char **)&v112, v97);
          }
          else
          {
            if (*(char *)(v128 + 287) < 0)
            {
              sub_10003430C(v96, *(void **)(v128 + 264), *(_QWORD *)(v128 + 272));
            }
            else
            {
              v98 = *v97;
              *((_QWORD *)v96 + 2) = *(_QWORD *)(v128 + 280);
              *(_OWORD *)v96 = v98;
            }
            v99 = v96 + 24;
          }
          v112.i64[1] = (uint64_t)v99;
          v100 = (__int128 *)(v128 + 288);
          if ((unint64_t)v99 >= v113[0])
          {
            v102 = sub_1002A553C((char **)&v112, v100);
          }
          else
          {
            if (*(char *)(v128 + 311) < 0)
            {
              sub_10003430C(v99, *(void **)(v128 + 288), *(_QWORD *)(v128 + 296));
            }
            else
            {
              v101 = *v100;
              *((_QWORD *)v99 + 2) = *(_QWORD *)(v128 + 304);
              *(_OWORD *)v99 = v101;
            }
            v102 = v99 + 24;
          }
          v112.i64[1] = (uint64_t)v102;
          v103 = (__int128 *)(v128 + 312);
          if ((unint64_t)v102 >= v113[0])
          {
            v105 = sub_1002A553C((char **)&v112, v103);
          }
          else
          {
            if (*(char *)(v128 + 335) < 0)
            {
              sub_10003430C(v102, *(void **)(v128 + 312), *(_QWORD *)(v128 + 320));
            }
            else
            {
              v104 = *v103;
              *((_QWORD *)v102 + 2) = *(_QWORD *)(v128 + 328);
              *(_OWORD *)v102 = v104;
            }
            v105 = v102 + 24;
          }
          v112.i64[1] = (uint64_t)v105;
          v106 = (__int128 *)(v128 + 336);
          if ((unint64_t)v105 >= v113[0])
          {
            v96 = sub_1002A553C((char **)&v112, v106);
          }
          else
          {
            if (*(char *)(v128 + 359) < 0)
            {
              sub_10003430C(v105, *(void **)(v128 + 336), *(_QWORD *)(v128 + 344));
            }
            else
            {
              v107 = *v106;
              *((_QWORD *)v105 + 2) = *(_QWORD *)(v128 + 352);
              *(_OWORD *)v105 = v107;
            }
            v96 = v105 + 24;
          }
          v112.i64[1] = (uint64_t)v96;
        }
        v108 = *(_QWORD *)(a1 + 40);
        memset(v109, 0, sizeof(v109));
        sub_1002A46F4((char *)v109, (__int128 *)v112.i64[0], (__int128 *)v96, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v96[-v112.i64[0]] >> 3));
        sub_100448E60(v108, (uint64_t)v109);
        v131 = v109;
        sub_100091BF8(&v131);
        v131 = (void **)&v112;
        sub_100091BF8(&v131);
        if (SHIBYTE(v115) < 0)
          operator delete(v114[0]);
        if (SHIBYTE(v117) < 0)
          operator delete(v116[0]);
        if (SHIBYTE(v119) < 0)
          operator delete((void *)v118);
        if (SHIBYTE(v121) < 0)
          operator delete((void *)v120);
        if (SHIBYTE(v123) < 0)
          operator delete((void *)v122);
        if (SHIBYTE(v125) < 0)
          operator delete((void *)v124);
        if (SHIBYTE(v127) < 0)
          operator delete((void *)__dst);
        v131 = (void **)&v128;
        sub_100091BF8(&v131);
        goto LABEL_226;
      }
    }
    if (*(char *)(v128 + 143) < 0)
    {
      sub_10003430C(__p, *(void **)(v128 + 120), *(_QWORD *)(v128 + 128));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v128 + 120);
      v111 = *(_QWORD *)(v128 + 136);
    }
    goto LABEL_117;
  }
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
    sub_1006FC718();
LABEL_226:

}

void sub_1004F211C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  void *v57;
  uint64_t v58;

  a13 = &a20;
  sub_100091BF8((void ***)&a13);
  if (a29 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a43 < 0)
    operator delete(a38);
  if (a50 < 0)
    operator delete(a45);
  if (a57 < 0)
    operator delete(a52);
  if (*(char *)(v58 - 185) < 0)
    operator delete(*(void **)(v58 - 208));
  if (*(char *)(v58 - 153) < 0)
    operator delete(*(void **)(v58 - 176));
  *(_QWORD *)(v58 - 176) = v58 - 144;
  sub_100091BF8((void ***)(v58 - 176));

  _Unwind_Resume(a1);
}

void sub_1004F2348(id a1, BTCloudDevice *a2, NSError *a3)
{
  BTCloudDevice *v4;
  NSError *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;

  v4 = a2;
  v5 = a3;
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[BTCloudDevice nickname](v4, "nickname"));
    v7 = objc_msgSend(v6, "length");

    if (v7)
    {
      v8 = (id)qword_100999870;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(-[BTCloudDevice bluetoothAddress](v4, "bluetoothAddress"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(-[BTCloudDevice nickname](v4, "nickname"));
        *(_DWORD *)buf = 138412546;
        v19 = v9;
        v20 = 2112;
        v21 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Cloud: Magic Settings Update Fetch Name for device: %@ - %@", buf, 0x16u);

      }
      v11 = sub_100350078();
      v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(-[BTCloudDevice bluetoothAddress](v4, "bluetoothAddress")));
      sub_100091AE8(v16, (char *)objc_msgSend(v12, "UTF8String"));
      v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(-[BTCloudDevice nickname](v4, "nickname")));
      sub_100091AE8(__p, (char *)objc_msgSend(v13, "UTF8String"));
      (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v11 + 176))(v11, v16, __p);
      if (v15 < 0)
        operator delete(__p[0]);

      if (v17 < 0)
        operator delete(v16[0]);

    }
  }

}

void sub_1004F2500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1004F263C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1004F2650(id a1, BTCloudSoundProfileRecord *a2, NSError *a3)
{
  BTCloudSoundProfileRecord *v4;
  NSError *v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  BOOL v9;
  void *v10;
  void *v11;
  int v12;
  NSError *v13;
  __int16 v14;
  BTCloudSoundProfileRecord *v15;

  v4 = a2;
  v5 = a3;
  v6 = qword_1009997F8;
  v7 = os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT);
  if (!v4 || v5)
  {
    if (v7)
    {
      v12 = 138412290;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BTAudioCloudSyncMonitor: Unable to fetch Spatial Profile:Error: %@", (uint8_t *)&v12, 0xCu);
    }
    if (qword_100977A98 == -1)
      goto LABEL_14;
    goto LABEL_16;
  }
  if (v7)
  {
    v12 = 138412546;
    v13 = 0;
    v14 = 2112;
    v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BTAudioCloudSyncMonitor: fetched Spatial Profile:Error: %@ Profile %@", (uint8_t *)&v12, 0x16u);
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(-[BTCloudSoundProfileRecord soundProfileData](v4, "soundProfileData"));
  v9 = v8 == 0;

  if (v9)
  {
    if (qword_100977A98 == -1)
    {
LABEL_14:
      sub_100527788((uint64_t)off_100977A90, 0);
      goto LABEL_15;
    }
LABEL_16:
    dispatch_once(&qword_100977A98, &stru_1009342F0);
    goto LABEL_14;
  }
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_1009342F0);
  v10 = off_100977A90;
  v11 = (void *)objc_claimAutoreleasedReturnValue(-[BTCloudSoundProfileRecord soundProfileData](v4, "soundProfileData"));
  sub_100527788((uint64_t)v10, v11);

LABEL_15:
}

void sub_1004F280C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1004F2A00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004F2B1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1004F2D6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1004F2FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1004F3038(uint64_t a1)
{
  void *v2;
  _QWORD *WeakRetained;
  id v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL4 v7;
  xpc_connection_t mach_service;
  void *v9;
  _xpc_connection_s *v10;
  _QWORD handler[4];
  id v12;
  uint8_t buf[16];

  v2 = objc_autoreleasePoolPush();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = WeakRetained[30];
    v6 = qword_1009997F8;
    v7 = os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v7)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Already Registered cloudkit.xpc service", buf, 2u);
      }
    }
    else
    {
      if (v7)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Register cloudkit.xpc service", buf, 2u);
      }
      mach_service = xpc_connection_create_mach_service("com.apple.bluetooth.cloudkit.xpc", *((dispatch_queue_t *)v4 + 43), 1uLL);
      v9 = (void *)*((_QWORD *)v4 + 30);
      *((_QWORD *)v4 + 30) = mach_service;

      v10 = (_xpc_connection_s *)*((_QWORD *)v4 + 30);
      if (v10)
      {
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_1004F31CC;
        handler[3] = &unk_1009182F0;
        v12 = v4;
        xpc_connection_set_event_handler(v10, handler);
        xpc_connection_resume(*((xpc_connection_t *)v4 + 30));

      }
      else if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_ERROR))
      {
        sub_1006FC80C();
      }
    }
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1004F31A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id sub_1004F31CC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleConnectionEvent:", a2);
}

void sub_1004F347C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1004F34C8(id a1, NSString *a2, NSDictionary *a3, BOOL *a4)
{
  NSString *v5;
  NSDictionary *v6;
  NSObject *v7;
  int v8;
  NSString *v9;
  __int16 v10;
  NSDictionary *v11;

  v5 = a2;
  v6 = a3;
  v7 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412546;
    v9 = v5;
    v10 = 2112;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:        Address: %@ - Dict: %@", (uint8_t *)&v8, 0x16u);
  }

}

void sub_1004F36C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004F3D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

void sub_1004F42A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1004F44C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1004F4518(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_generateCloudPairingIDWithResponse:localKeys:from:forProtocolID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1004F5E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,unsigned int *a50)
{
  void *v50;
  void *v51;
  void *v52;
  void *v53;

  if (a50)
    sub_100056AAC(a50);

  _Unwind_Resume(a1);
}

_QWORD *sub_1004F6324(_QWORD *a1)
{
  unsigned int *v2;

  *a1 = &off_100934340;
  v2 = (unsigned int *)a1[1];
  if (v2)
    sub_100056AAC(v2);
  return a1;
}

void sub_1004F6478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1004F6554(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004F69E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  _Block_object_dispose((const void *)(v18 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1004F6A5C(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v8;
  void *v9;
  unsigned int v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v8 = a2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("IDSLocalID")));
  v10 = objc_msgSend(v9, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if (v10)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    v11 = qword_1009997F8;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      v13 = 138412290;
      v14 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "MUC - RSA found: %@", (uint8_t *)&v13, 0xCu);
    }
    *a4 = 1;
  }

}

void sub_1004F6B78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1004F6D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  void *v25;

  sub_100043728(&a13);

  _Block_object_dispose(&a20, 8);
  _Unwind_Resume(a1);
}

void sub_1004F6DA0(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v8;
  void *v9;
  unsigned int v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v8 = a2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("IDSLocalID")));
  v10 = objc_msgSend(v9, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if (v10)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    v11 = qword_1009997F8;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      v13 = 138412290;
      v14 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "MUC - RSA found: %@", (uint8_t *)&v13, 0xCu);
    }
    *a4 = 1;
  }

}

void sub_1004F6EBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1004F6FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1004F6FF4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  int v13;
  void *v14;
  __int16 v15;
  uint64_t v16;

  v5 = a2;
  v6 = a3;
  if (objc_msgSend(v5, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("IRK")));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

    v10 = (id)qword_1009997F8;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("IRK")));
      v12 = *(_QWORD *)(a1 + 32);
      v13 = 138412546;
      v14 = v11;
      v15 = 2112;
      v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "MUC - IRK: %@ found for RSA: %@", (uint8_t *)&v13, 0x16u);

    }
  }

}

void sub_1004F712C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1004F7344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void *v13;
  void *v14;

  sub_100043728(&a13);

  _Unwind_Resume(a1);
}

void sub_1004F7678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  sub_100043728(va);

  _Unwind_Resume(a1);
}

void sub_1004F77E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1004F7820(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_getPairedDeviceForIDSIdentifier:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1004F7E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;

  _Block_object_dispose((const void *)(v43 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1004F7FA8(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v8;
  void *v9;
  unsigned int v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v8 = a2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("IDSLocalID")));
  v10 = objc_msgSend(v9, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if (v10)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    v11 = qword_1009997F8;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
      v13 = 138412290;
      v14 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "MUC - RSA found: %@", (uint8_t *)&v13, 0xCu);
    }
    *a4 = 1;
  }

}

void sub_1004F80C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1004F82A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v2;

  _Unwind_Resume(a1);
}

void sub_1004F838C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1004F83E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1004F8648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1004F88EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1004F8B68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004F8D30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1004F8F68()
{
  operator delete();
}

uint64_t sub_1004F8F7C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_100934260;
  sub_100398F94(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_1004F8FB0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_100934260;
  sub_100398F94(a1 + 16, *(_QWORD **)(a1 + 24));
  operator delete();
}

void sub_1004F8FF4(id a1)
{
  operator new();
}

void sub_1004F9034()
{
  operator delete();
}

void sub_1004F9058(id a1)
{
  operator new();
}

void sub_1004F9098()
{
  operator delete();
}

void sub_1004F90BC(id a1)
{
  operator new();
}

void sub_1004F90FC()
{
  operator delete();
}

void sub_1004F9120(id a1)
{
  operator new();
}

void sub_1004F9160()
{
  operator delete();
}

void sub_1004F9184(id a1)
{
  operator new();
}

void sub_1004F91C4()
{
  operator delete();
}

void sub_1004F91E8(id a1)
{
  operator new();
}

void sub_1004F9228()
{
  operator delete();
}

void sub_1004F924C(_QWORD *a1)
{
  unsigned int *v1;

  *a1 = &off_100934340;
  v1 = (unsigned int *)a1[1];
  if (v1)
    sub_100056AAC(v1);
  operator delete();
}

void sub_1004F9294(id a1)
{
  operator new();
}

void sub_1004F92D4()
{
  operator delete();
}

uint64_t sub_1004F92F8(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = 1752392040;
  *(_WORD *)(a3 + 12) = 2081;
  *(_QWORD *)(a3 + 14) = result;
  *(_WORD *)(a3 + 22) = 2112;
  *(_QWORD *)(a3 + 24) = a2;
  return result;
}

void sub_1004F9324(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_fault_impl(a1, a4, OS_LOG_TYPE_FAULT, a2, a3, 0x20u);
}

uint64_t sub_1004F9334()
{
  if (qword_100993210 != -1)
    dispatch_once(&qword_100993210, &stru_100934370);
  return byte_100993218;
}

void sub_1004F9374(id a1)
{
  byte_100993218 = NSClassFromString(CFSTR("CNContactStore")) != 0;
}

BOOL sub_1004F93A0()
{
  return &_CRIsCarPlayAllowed != 0;
}

uint64_t sub_1004F93B4()
{
  if (qword_100993220 != -1)
    dispatch_once(&qword_100993220, &stru_100934390);
  return byte_100993228;
}

void sub_1004F93F4(id a1)
{
  byte_100993228 = NSClassFromString(CFSTR("_CDContextualKeyPath")) != 0;
}

uint64_t sub_1004F9420()
{
  if (qword_100993230 != -1)
    dispatch_once(&qword_100993230, &stru_1009343B0);
  return byte_100993238;
}

void sub_1004F9460(id a1)
{
  byte_100993238 = NSClassFromString(CFSTR("CMDeviceOrientationManager")) != 0;
}

BOOL sub_1004F948C()
{
  return &__CTServerConnectionRegisterBlockForNotification != 0;
}

uint64_t sub_1004F94A0()
{
  if (qword_100993240 != -1)
    dispatch_once(&qword_100993240, &stru_1009343D0);
  return byte_100993248;
}

void sub_1004F94E0(id a1)
{
  byte_100993248 = NSClassFromString(CFSTR("MAAsset")) != 0;
}

BOOL sub_1004F950C()
{
  return &_WiFiManagerClientCreate != 0;
}

BOOL sub_1004F9520()
{
  return &__NETRBClientCreate != 0;
}

BOOL sub_1004F9534()
{
  return &_BYSetupAssistantNeedsToRun != 0;
}

uint64_t sub_1004F9548()
{
  if (qword_100993250 != -1)
    dispatch_once(&qword_100993250, &stru_1009343F0);
  return byte_100993258;
}

void sub_1004F9588(id a1)
{
  byte_100993258 = NSClassFromString(CFSTR("VTPreferences")) != 0;
}

void sub_1004F95B4(id a1)
{
  byte_100993268 = NSClassFromString(CFSTR("AWDServerConnection")) != 0;
}

uint64_t sub_1004F95E0()
{
  if (qword_100993270 != -1)
    dispatch_once(&qword_100993270, &stru_100934430);
  return byte_100993278;
}

void sub_1004F9620(id a1)
{
  Class v1;

  v1 = NSClassFromString(CFSTR("BMDeviceBluetoothGATTSession"));
  byte_100993278 = v1 != 0;
  if (!v1 && os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
    sub_1006FCCF0();
}

uint64_t sub_1004F9680()
{
  if (qword_100993280 != -1)
    dispatch_once(&qword_100993280, &stru_100934450);
  return byte_100993288;
}

void sub_1004F96C0(id a1)
{
  Class v1;

  v1 = NSClassFromString(CFSTR("BMDeviceBluetoothPowerEnabled"));
  byte_100993288 = v1 != 0;
  if (!v1 && os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
    sub_1006FCD1C();
}

uint64_t sub_1004F9720()
{
  if (qword_100993290 != -1)
    dispatch_once(&qword_100993290, &stru_100934470);
  return byte_100993298;
}

void sub_1004F9760(id a1)
{
  byte_100993298 = NSClassFromString(CFSTR("BTCloudSoundProfileRecord")) != 0;
}

uint64_t sub_1004F978C()
{
  if (qword_1009932A0 != -1)
    dispatch_once(&qword_1009932A0, &stru_100934490);
  return byte_1009932A8;
}

void sub_1004F97CC(id a1)
{
  byte_1009932A8 = NSClassFromString(CFSTR("AVAudioSession")) != 0;
}

uint64_t sub_1004F97F8()
{
  if (qword_1009932B0 != -1)
    dispatch_once(&qword_1009932B0, &stru_1009344B0);
  return byte_1009932B8;
}

void sub_1004F9838(id a1)
{
  byte_1009932B8 = NSClassFromString(CFSTR("NWConnection")) != 0;
}

uint64_t sub_1004F9864()
{
  if (qword_1009932C0 != -1)
    dispatch_once(&qword_1009932C0, &stru_1009344D0);
  return byte_1009932C8;
}

void sub_1004F98A4(id a1)
{
  Class v1;

  v1 = NSClassFromString(CFSTR("RDEstimate"));
  byte_1009932C8 = v1 != 0;
  if (!v1 && os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
    sub_1006FCD48();
}

uint64_t sub_1004F9904()
{
  if (qword_1009932D0 != -1)
    dispatch_once(&qword_1009932D0, &stru_1009344F0);
  return byte_1009932D8;
}

void sub_1004F9944(id a1)
{
  Class v1;

  v1 = NSClassFromString(CFSTR("APSubject"));
  byte_1009932D8 = v1 != 0;
  if (!v1 && os_log_type_enabled((os_log_t)qword_1009999E0, OS_LOG_TYPE_ERROR))
    sub_1006FCD74();
}

_QWORD *sub_1004F99A4(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;

  v2 = (_QWORD *)sub_10048D2F0((uint64_t)a1, "HandsfreeService", 1);
  *v2 = off_100934520;
  sub_1000160D0(v2 + 41);
  a1[49] = 0;
  sub_1000160D0(a1 + 50);
  a1[58] = 0;
  a1[59] = 0;
  a1[62] = 0;
  a1[63] = 0;
  a1[60] = 0;
  a1[61] = a1 + 62;
  sub_1000160D0(a1 + 64);
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100934610);
  v3 = off_10097AA38;
  a1[49] = off_10097AA38;
  sub_10048D5B0((uint64_t)a1, (uint64_t)v3);
  return a1;
}

void sub_1004F9A64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  void *v8;

  v6 = v4;
  sub_100069BDC(v6);
  sub_10001A82C(v1 + 488, *v5);
  v8 = *(void **)(v1 + 464);
  if (v8)
  {
    *(_QWORD *)(v1 + 472) = v8;
    operator delete(v8);
  }
  sub_100069BDC(v3);
  sub_100069BDC(v2);
  sub_10048D3E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F9AD0(uint64_t a1, uint64_t a2)
{
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  BOOL v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v12;
  int v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[15];

  v15 = xmmword_100741E90;
  memset(v17, 0, sizeof(v17));
  v14 = 0;
  v13 = 0;
  if (sub_100444790(a2))
  {
    if (sub_100442444(a2, &v15, 4u))
      v4 = 4;
    else
      v4 = 1;
    goto LABEL_24;
  }
  v5 = sub_100452168(a2, v17, &v14);
  if (v14)
    v6 = v5;
  else
    v6 = 0;
  if (v6)
  {
    v7 = sub_10018F848((unsigned __int8 *)v17, 4382, &v13) == 0;
LABEL_20:
    v9 = v7;
    v4 = 4 * v9;
    goto LABEL_24;
  }
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_100934630);
  if (!sub_100420EFC((uint64_t)off_1009778D0, a2))
  {
    v7 = sub_10043F65C(a2, 1u) == 4;
    goto LABEL_20;
  }
  LODWORD(v12) = 0;
  sub_10043FA40(a2, &v12);
  if ((v12 & 0x1F00) == 0x400)
    v8 = 4;
  else
    v8 = 1;
  if ((_DWORD)v12)
    v4 = v8;
  else
    v4 = 0;
LABEL_24:
  v10 = *(_DWORD *)(a1 + 32);
  v16 = 0;
  sub_10004AD30((uint64_t)&v16);
  *(_QWORD *)&v12 = (int)v16;
  *((_QWORD *)&v12 + 1) = SWORD2(v16);
  return sub_1004415B0(a2, v10, v4, &v12, 0);
}

uint64_t sub_1004F9C90(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;
  int v6;
  BOOL v7;
  int v8;
  char v9;
  int v10;
  __int128 v11;
  _OWORD v12[15];

  v10 = 0;
  v11 = xmmword_100741E90;
  memset(v12, 0, sizeof(v12));
  v9 = 0;
  v8 = 0;
  *a3 = 0;
  if (sub_100444790(a2))
  {
    result = sub_100442444(a2, &v11, 4u);
    if ((result & 1) == 0)
      return result;
LABEL_17:
    *a3 = 1;
    return result;
  }
  if (sub_100452168(a2, v12, &v9))
  {
    if (v9)
    {
      result = sub_10018F848((unsigned __int8 *)v12, 4382, &v8);
      if (!(_DWORD)result)
        goto LABEL_17;
    }
  }
  result = sub_10043FA40(a2, &v10);
  if ((_DWORD)result && (v10 & 0x200000) != 0)
  {
    v6 = v10 & 0x1F00;
    v7 = (v10 & 0xFC) != 0x1C && v6 == 1024;
    if (v7 || (v10 & 0x1FFC) == 0x118 || v6 == 1792 && ((v10 & 0xF4) == 4 || (v10 & 0xF8) == 0x10))
      goto LABEL_17;
  }
  return result;
}

uint64_t sub_1004F9DEC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  int v5;
  uint64_t result;

  v5 = a4;
  result = sub_10048F860(a1, (unsigned __int8 *)a2, a3, a4, a5);
  if (!v5)
  {
    if (sub_1004473C0(a2))
      sub_10044744C(a2);
    if (*(_BYTE *)(a2 + 576))
      *(_WORD *)(a2 + 576) = 0;
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_100934630);
    result = sub_100420EFC((uint64_t)off_1009778D0, a2);
    if ((_DWORD)result)
    {
      if (qword_1009778D8 != -1)
        dispatch_once(&qword_1009778D8, &stru_100934630);
      return sub_10042197C((uint64_t)off_1009778D0, a2);
    }
  }
  return result;
}

uint64_t sub_1004F9EB4(uint64_t a1, uint64_t a2, char *__s1, _BYTE *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  if (__s1 && a4)
  {
    if (!strncmp(__s1, "com.apple.BT.VoiceCommand.State", 0x1FuLL))
    {
      result = *(_QWORD *)(a1 + 392);
      if (!result)
        return result;
      sub_1004D50F0(result, a2, (uint64_t)a4);
    }
    else if (!strncmp(__s1, "BT_KEY_ALLOW_SCO_FOR_TBT", 0x18uLL))
    {
      sub_10044A298(a2, *a4 != 0);
    }
    return 0;
  }
  else
  {
    v8 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FCDA0(v8, v9, v10, v11, v12, v13, v14, v15);
    return 1;
  }
}

uint64_t sub_1004F9F7C(uint64_t a1, unint64_t a2, char *__s1, __int16 *a4)
{
  int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  __int16 v20;

  if (!__s1 || !a4)
  {
    v9 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      sub_1006FCDA0(v9, v10, v11, v12, v13, v14, v15, v16);
    return 1;
  }
  if (!strncmp(__s1, "BT_KEY_HFP_AG_ECNR_STATE", 0x18uLL))
  {
    v18 = sub_1004CD5FC(*(_QWORD *)(a1 + 392), a2);
    if (v18)
    {
      v8 = sub_10026B944(v18 + 400);
      goto LABEL_19;
    }
    return 1;
  }
  if (!strncmp(__s1, "BT_KEY_SIRI_EYESFREE_MODE", 0x19uLL))
  {
    if (qword_10097AB18 != -1)
      dispatch_once(&qword_10097AB18, &stru_100934650);
    v8 = sub_1002CC1B4(qword_10097AB10, a2);
    goto LABEL_19;
  }
  if (!strncmp(__s1, "BT_KEY_SIRI_AUDIO_STATE", 0x17uLL))
  {
    if (qword_10097AB18 != -1)
      dispatch_once(&qword_10097AB18, &stru_100934650);
    v8 = sub_1002CC244(qword_10097AB10, a2);
    goto LABEL_19;
  }
  if (strncmp(__s1, "BT_KEY_ALLOW_SCO_FOR_TBT", 0x18uLL))
    return 1;
  v8 = sub_10044A290(a2);
LABEL_19:
  v19 = v8;
  result = 0;
  if (v19)
    v20 = 49;
  else
    v20 = 48;
  *a4 = v20;
  return result;
}

void sub_1004FA0FC(uint64_t a1)
{
  sub_1004FA120(a1);
  operator delete();
}

uint64_t sub_1004FA120(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_100934520;
  sub_100069BDC(a1 + 512);
  sub_10001A82C(a1 + 488, *(_QWORD **)(a1 + 496));
  v2 = *(void **)(a1 + 464);
  if (v2)
  {
    *(_QWORD *)(a1 + 472) = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 400);
  sub_100069BDC(a1 + 328);
  return sub_10048D3E0(a1);
}

void sub_1004FA180(id a1)
{
  operator new();
}

void sub_1004FA1C0()
{
  operator delete();
}

void sub_1004FA1E4(id a1)
{
  operator new();
}

void sub_1004FA224()
{
  operator delete();
}

void sub_1004FA248(id a1)
{
  operator new();
}

void sub_1004FA288()
{
  operator delete();
}

void sub_1004FA3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)BTVCLinkScanner;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1004FA548(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004FA5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  void *v10;

  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1004FA744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1004FA778(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 184), *(id *)(a1 + 40));
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 192), *(id *)(a1 + 48));
}

double sub_1004FA804(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  double result;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  if (v2)
  {
    v3 = v2;
    dispatch_source_cancel(v3);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 48);
    *(_QWORD *)(v4 + 48) = 0;

  }
  result = *(double *)(a1 + 40);
  *(double *)(*(_QWORD *)(a1 + 32) + 224) = result;
  return result;
}

id sub_1004FA900(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) = 1;
  return objc_msgSend(*(id *)(a1 + 32), "_activateWithCompletion:", *(_QWORD *)(a1 + 40));
}

void sub_1004FAC00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1004FACCC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_scanEnable:", *(unsigned __int8 *)(a1 + 40));
}

void sub_1004FAECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004FAEF8(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  int v3;
  const char *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136315138;
    v4 = "-[BTVCLinkScanner _scanEnable:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s startRetrier\n", (uint8_t *)&v3, 0xCu);
  }
  objc_msgSend(WeakRetained, "_restartIfNeeded:", 1);

}

void sub_1004FAFB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1004FB028(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

void sub_1004FB21C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004FB2EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004FB2FC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 72) = 1;
  return result;
}

_BYTE *sub_1004FB30C(uint64_t a1)
{
  _BYTE *result;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 72) = 0;
  result = *(_BYTE **)(a1 + 32);
  if (result[9])
  {
    if (!result[11])
      return objc_msgSend(result, "_restartIfNeeded");
  }
  return result;
}

void sub_1004FB3E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

_BYTE *sub_1004FB400(uint64_t a1)
{
  _BYTE *result;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  result = *(_BYTE **)(a1 + 32);
  if (!result[72])
    return objc_msgSend(result, "_restartIfNeeded");
  return result;
}

id sub_1004FB964(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_timeoutTimerFired");
}

void sub_1004FBB24(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1004FBBFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004FBD04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1004FBEA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1004FBFAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004FC11C(uint64_t *a1)
{
  int v2;
  BOOL v3;
  pthread_t *v4;
  BOOL v5;

  v5 = 0;
  sub_1002D6D20(*a1, &v5);
  if (!v5 || ((v2 = *(_DWORD *)(a1[1] + 8)) != 0 ? (v3 = v2 == 2) : (v3 = 1), v3))
    operator new();
  if (v2 == 1)
    operator new();
  v4 = (pthread_t *)a1[3];
  if (v4)
    sub_1002A9268(v4);
}

void sub_1004FC1E4()
{
  operator delete();
}

uint64_t sub_1004FC21C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t result;
  int v7;

  v1 = *(unsigned __int8 **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == 2)
  {
    if (*(_BYTE *)a1 != 5)
      return 0;
    v5 = *v1;
    if (v5 != 214)
    {
      if (v5 != 213)
        return 0;
      v4 = v1[1];
      goto LABEL_11;
    }
    v7 = v1[1];
LABEL_17:
    if (v7 == 52 || v7 == 10)
      return 1;
    if (v7)
      return 0;
    return 2;
  }
  if (v2 != 3 || *v1 != 83)
    return 0;
  v3 = v1[1];
  if (v3 == 214)
  {
    v7 = v1[2];
    goto LABEL_17;
  }
  if (v3 != 213)
    return 0;
  v4 = v1[2];
LABEL_11:
  result = 1;
  if (v4 <= 11)
  {
    if (v4)
    {
      if (v4 == 7)
        return result;
      return 0;
    }
    return 2;
  }
  if (v4 != 12 && v4 != 15)
    return 0;
  return result;
}

uint64_t sub_1004FC2DC(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)sub_100278350(a1, 10);
  *v2 = off_1009346F8;
  v2[32] = off_1009347F0;
  v2[33] = off_100934828;
  v2[34] = off_100934850;
  v2[35] = &off_100934890;
  v2[36] = off_1009348A8;
  v2[37] = off_1009348D8;
  v2[38] = &off_100934988;
  v2[39] = off_1009349A0;
  sub_1000160D0(v2 + 40);
  *(_DWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  sub_1000160D0(a1 + 448);
  sub_1002A90C4((pthread_cond_t *)(a1 + 512));
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 564) = 0;
  *(_QWORD *)(a1 + 576) = a1 + 584;
  return a1;
}

void sub_1004FC3A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;

  v4 = v3;
  sub_100069BDC(v4);

  v6 = *(void **)(v1 + 392);
  if (v6)
  {
    *(_QWORD *)(v1 + 400) = v6;
    operator delete(v6);
  }
  sub_100069BDC(v2);
  sub_100278464(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FC3FC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1009346F8;
  *(_QWORD *)(a1 + 256) = off_1009347F0;
  *(_QWORD *)(a1 + 264) = off_100934828;
  *(_QWORD *)(a1 + 272) = off_100934850;
  *(_QWORD *)(a1 + 280) = &off_100934890;
  *(_QWORD *)(a1 + 288) = off_1009348A8;
  *(_QWORD *)(a1 + 296) = off_1009348D8;
  *(_QWORD *)(a1 + 304) = &off_100934988;
  *(_QWORD *)(a1 + 312) = off_1009349A0;
  sub_1005057C0(a1 + 576, *(_QWORD **)(a1 + 584));

  sub_1002A912C(a1 + 512);
  sub_100069BDC(a1 + 448);

  v2 = *(void **)(a1 + 392);
  if (v2)
  {
    *(_QWORD *)(a1 + 400) = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 320);
  return sub_100278464(a1);
}

uint64_t sub_1004FC4A8(uint64_t a1)
{
  return sub_1004FC3FC(a1 - 264);
}

uint64_t sub_1004FC4B0(uint64_t a1)
{
  return sub_1004FC3FC(a1 - 272);
}

void sub_1004FC4B8(uint64_t a1)
{
  sub_1004FC3FC(a1);
  operator delete();
}

void sub_1004FC4DC(uint64_t a1)
{
  sub_1004FC3FC(a1 - 264);
  operator delete();
}

void sub_1004FC504(uint64_t a1)
{
  sub_1004FC3FC(a1 - 272);
  operator delete();
}

uint64_t sub_1004FC52C(uint64_t a1)
{
  os_log_t v2;
  void *v3;
  os_log_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint8_t v14[16];

  v2 = os_log_create("com.apple.bluetooth", "HIDProfileDispatch");
  v3 = *(void **)(a1 + 416);
  *(_QWORD *)(a1 + 416) = v2;

  *(_QWORD *)(a1 + 432) = os_signpost_id_make_with_pointer(*(os_log_t *)(a1 + 416), (const void *)a1);
  v4 = os_log_create("com.apple.bluetooth", "HIDProfileMutex");
  v5 = *(void **)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v4;

  *(_QWORD *)(a1 + 440) = os_signpost_id_make_with_pointer(*(os_log_t *)(a1 + 424), (const void *)a1);
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_100934AF8);
  sub_1005B40C8(off_100978148, a1 + 272);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100934B18);
  sub_10061F358((uint64_t)off_1009778A0, a1 + 296, 0);
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_100934B38);
  sub_10007AEA4(qword_1009778F0 + 40, a1 + 312);
  v6 = sub_100038E50();
  sub_10043B4A8(v6 + 728, a1 + 280);
  v7 = sub_100038E50();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 152))(v7, a1 + 562);
  v8 = sub_100038E50();
  sub_100260C8C(v8 + 368, a1 + 288);
  v9 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 280))(v9))
  {
    v10 = sub_100038E50();
    sub_100504D04(v10 + 1168, a1 + 304);
    v11 = sub_100038E50();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 200))(v11, a1 + 563);
  }
  else
  {
    v12 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Low Latency Gaming not eligible for this device", v14, 2u);
    }
  }
  return 0;
}

uint64_t sub_1004FC718()
{
  uint64_t v0;
  char v2;

  v2 = 0;
  sub_100043758(&v2);
  v0 = sub_10015EFD0(&dword_100741ED0, off_1009349D0);
  sub_10004339C(&v2);
  if ((_DWORD)v0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FCF08();
    v0 = 1;
  }
  sub_100043728(&v2);
  return v0;
}

void sub_1004FC7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FC7B8()
{
  uint64_t v0;
  char v2;

  v2 = 0;
  sub_100043758(&v2);
  v0 = sub_10015F444();
  if ((_DWORD)v0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FCF68();
    v0 = 1;
  }
  sub_100043728(&v2);
  return v0;
}

void sub_1004FC82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FC840(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_100038E50();
  sub_1002B43D4(v2 + 368, a1 + 288);
  v3 = sub_100038E50();
  sub_1002B43D4(v3 + 728, a1 + 280);
  v4 = sub_100038E50();
  sub_1002B43D4(v4 + 1168, a1 + 304);
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_100934AF8);
  sub_1005B4200((uint64_t)off_100978148, a1 + 272);
  return 0;
}

_BYTE *sub_1004FC8D0(uint64_t a1, unint64_t a2, int a3)
{
  NSObject *v6;
  _BOOL4 v7;
  const char *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  BOOL v13;
  NSObject *v14;
  _BOOL4 v15;
  const char *v16;
  char v18;
  void *__p[2];
  char v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  void **v24;

  v6 = (id)qword_1009999B0;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = sub_10043FC5C(a2);
    sub_10043E5F8(a2, __p);
    v8 = "Not Connected";
    if (v7)
      v8 = "Connected";
    if (v20 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v22 = v8;
    v23 = 2082;
    v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s HID device %{public}s will unpair", buf, 0x16u);
    if (v20 < 0)
      operator delete(__p[0]);
  }

  v18 = 0;
  sub_100043758(&v18);
  v10 = sub_10015D5B8(a2 + 128);
  v11 = v10;
  if (v10)
    v12 = *(_BYTE *)(v10 + 7) != 0;
  else
    v12 = 0;
  sub_10004339C(&v18);
  if (!a3 && ((v12 | !sub_10043FC5C(a2)) & 1) == 0)
  {
    sub_10006D81C(&v18);
    sub_1004FCB40(a1, a2);
    sub_10004339C(&v18);
    if (!v11)
    {
LABEL_22:
      *(_WORD *)(a1 + 560) = 0;
      return sub_100043728(&v18);
    }
    __p[0] = 0;
    __p[1] = 0;
    sub_10003415C((uint64_t)__p, a1 + 448);
    v13 = sub_100043714((pthread_cond_t *)(a1 + 512), (pthread_mutex_t **)__p, 0x7D0uLL);
    v14 = qword_1009999B0;
    v15 = os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      if (v15)
      {
        *(_WORD *)buf = 0;
        v16 = "HID recanted Successfully";
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 2u);
      }
    }
    else if (v15)
    {
      *(_WORD *)buf = 0;
      v16 = "HID timedout waiting to recant";
      goto LABEL_20;
    }
    sub_100034234((uint64_t)__p);
    goto LABEL_22;
  }
  return sub_100043728(&v18);
}

void sub_1004FCAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, char a13)
{
  sub_100034234((uint64_t)&a13);
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FCB40(uint64_t a1, unint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  NSObject *v14;
  void **v15;
  int v16;
  char *v17;
  size_t v18;
  int v19;
  int v20;
  NSObject *v21;
  void *__p[2];
  char v24;
  uint8_t buf[4];
  const char *v26;

  if ((sub_10005549C() & 1) == 0)
  {
    v4 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_FAULT))
      sub_1006FD060(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = sub_1004821D4((_QWORD *)a1, a2);
  v13 = sub_10015D5B8(a2 + 128);
  if (v13)
    *(_BYTE *)(v13 + 7) = 1;
  v14 = (id)qword_1009999B0;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
    {
      sub_10043E5F8(a2, __p);
      if (v24 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v26 = (const char *)v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Unplugging virtual cable to device %{public}s", buf, 0xCu);
      if (v24 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 136446210;
      v26 = "NULL";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Unplugging virtual cable to device %{public}s", buf, 0xCu);
    }
  }

  if (sub_100444C24(a2))
  {
    v16 = sub_100444C30(a2);
    if (v16)
      v17 = (char *)&unk_100741ED4;
    else
      v17 = (char *)&unk_100741ED6;
    *(_WORD *)(a1 + 560) = v12;
    if (v16)
      v18 = 2;
    else
      v18 = 1;
    v19 = sub_10015FB5C(v12, 3, v17, v18);
  }
  else
  {
    v19 = sub_10015F594(v12, 5u, (uint64_t)sub_1004FDB18);
  }
  v20 = v19;
  if (!v19)
    return 0;
  v21 = (id)qword_1009999B0;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    if (a2)
    {
      sub_10043E5F8(a2, __p);
      sub_1006FD018();
    }
    else
    {
      sub_1006FCFC8((uint64_t)buf, v20, v21);
    }
  }

  return 1;
}

void sub_1004FCD7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_BYTE *sub_1004FCD98(uint64_t a1, unint64_t a2, int a3)
{
  return sub_1004FC8D0(a1 - 272, a2, a3);
}

uint64_t sub_1004FCDA0(uint64_t a1, unint64_t a2)
{
  NSObject *v4;
  void **v5;
  void *v6;
  int v7;
  void **v8;
  NSObject *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  __int16 v15;
  char v16;
  uint8_t buf[4];
  void **v18;

  v16 = 0;
  sub_100043758(&v16);
  v15 = 0;
  if (sub_100444F04(a2))
  {
    v4 = (id)qword_1009999B0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v5 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Connecting to device %{public}s using Type S connection policy", buf, 0xCu);
      if (v14 < 0)
        operator delete(__p[0]);
    }
    v6 = &unk_100934A78;
LABEL_9:

    v7 = sub_10015F570((int *)(a2 + 128), (uint64_t *)&off_100934A58, &v15, v6);
    goto LABEL_26;
  }
  if (sub_100444D3C(a2) && sub_100444D4C(a2))
  {
    v4 = (id)qword_1009999B0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v8 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Connecting to device %{public}s using Apple Mouse/TP connection policy", buf, 0xCu);
      if (v14 < 0)
        operator delete(__p[0]);
    }
    v6 = &unk_100934AA8;
    goto LABEL_9;
  }
  v9 = (id)qword_1009999B0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v10 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Connecting to device %{public}s using default connection policy", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
  }

  v7 = sub_10015F570((int *)(a2 + 128), (uint64_t *)&off_100934A58, &v15, 0);
LABEL_26:
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FD0D0();
    v11 = 1;
  }
  else
  {
    sub_1004820E0(a1, a2, v15);
    v11 = 0;
  }
  sub_100043728(&v16);
  return v11;
}

void sub_1004FD064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  sub_100043728(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FD0A4(_QWORD *a1, unint64_t a2)
{
  NSObject *v4;
  void **v5;
  int v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  char v11;
  __int16 v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;

  v12 = 0;
  v11 = 0;
  sub_100043758(&v11);
  if (!sub_100182F58(a2 + 128, &v12) && v12 == 97 && sub_100440D90(a2))
  {
    v4 = (id)qword_1009999B0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v5 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Forcing disconnect for unauthorized Type S device %{public}s", buf, 0xCu);
      if (v14 < 0)
        operator delete(__p[0]);
    }

    v6 = sub_10018070C(a2 + 128);
    if (!v6)
    {
      v9 = 0;
      goto LABEL_17;
    }
    v7 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to force disconnect unauthorized Type S device with result %{bluetooth:OI_STATUS}u", (uint8_t *)__p, 8u);
    }
    goto LABEL_16;
  }
  v8 = sub_1004821D4(a1, a2);
  v9 = sub_10015F590(v8);
  if ((_DWORD)v9)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FD130();
LABEL_16:
    v9 = 1;
  }
LABEL_17:
  sub_100043728(&v11);
  return v9;
}

void sub_1004FD280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12)
{
  void *v12;

  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

void sub_1004FD2A8(uint64_t a1, uint64_t a2)
{
  sub_1004FD2B0(a1 + 384, a2);
}

void sub_1004FD2B0(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_100505950(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1004FD338(uint64_t a1, uint64_t a2)
{
  sub_100069060(a1 + 384, a2);
}

void sub_1004FD340(_QWORD *a1, int a2, int a3, int a4)
{
  NSObject *v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  unsigned __int16 v20;
  BOOL v21;
  int v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  const char *v26;
  void *v27;
  char v28[2];
  unsigned __int16 v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint8_t v34[14];
  unsigned __int16 v35;
  _BYTE buf[32];
  uint64_t v37;
  __int16 v38;
  int v39;
  __int16 v40;
  char *v41;

  v35 = a2;
  v8 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = a3;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a2;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "sendControlOpCfm for op 0x%x with handle 0x%x returned status %d", buf, 0x14u);
  }
  v9 = (uint64_t **)a1[73];
  if (!v9)
  {
LABEL_8:
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FD190();
    return;
  }
  while (1)
  {
    v10 = *((unsigned __int16 *)v9 + 16);
    if (v35 >= v10)
      break;
LABEL_7:
    v9 = (uint64_t **)*v9;
    if (!v9)
      goto LABEL_8;
  }
  if (v10 < v35)
  {
    ++v9;
    goto LABEL_7;
  }
  if (!sub_1004822D0(a1, v35) || (sub_100049F50() & 1) == 0)
  {
    v11 = sub_1003D9E10((uint64_t)(a1 + 72), &v35);
    v12 = v11;
    if (*((_BYTE *)v11 + 72))
    {
      v13 = *((unsigned __int8 *)v11 + 73);
      v14 = *((unsigned __int8 *)v11 + 74);
      v15 = *((_DWORD *)v11 + 19);
      v16 = (char *)v11[10];
      v17 = v11[11];
      if (*((_BYTE *)v11 + 73))
      {
        v18 = sub_10015FA48(v35, *((_BYTE *)v11 + 74), *((_DWORD *)v11 + 19), 0xFFFF);
        goto LABEL_43;
      }
      *(_OWORD *)buf = 0u;
      v20 = v35;
      buf[0] = 5;
      *(_WORD *)&buf[2] = v35;
      *(_WORD *)&buf[4] = 255;
      *(_OWORD *)&buf[16] = (unint64_t)v17;
      if (v16)
        v21 = v17 == 0;
      else
        v21 = 1;
      if (!v21)
        operator new[]();
      buf[24] = 0;
      if (!*((_BYTE *)v11 + 64))
      {
LABEL_28:
        v33 = 1;
        v28[0] = 5;
        v29 = v20;
        v30 = 255;
        v31 = 0;
        v32 = v17;
        if (v17)
          operator new[]();
        LOBYTE(v33) = 0;
        sub_10050568C((uint64_t)(v12 + 4), (uint64_t)v28);
        if ((_BYTE)v33 && v31)
          operator delete[]();
        if (v14 == 2)
        {
          v24 = sub_10015FCD8(v35, 2, v16, 0);
        }
        else
        {
          if (v14 != 3)
          {
            v18 = 101;
            goto LABEL_43;
          }
          v24 = sub_10015FB5C(v35, 3, v16, 0);
        }
        v18 = v24;
        goto LABEL_43;
      }
      v22 = sub_1004FC21C((uint64_t)buf);
      v23 = qword_1009999B0;
      if (v22 == 2)
      {
        if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v34 = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "HID Perf Mode is stopping", v34, 2u);
        }
        *((_BYTE *)v12 + 64) = 0;
        goto LABEL_28;
      }
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
        sub_1006FD250();
      v18 = 104;
LABEL_43:
      v25 = qword_1009999B0;
      if (v18)
      {
        if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
          sub_1006FD1F0();
      }
      else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
      {
        v26 = "get";
        *(_DWORD *)buf = 136316674;
        if (!v13)
          v26 = "set";
        *(_QWORD *)&buf[4] = v26;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v35;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v14;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v15;
        *(_WORD *)&buf[30] = 2048;
        v37 = v17;
        v38 = 1040;
        v39 = v17;
        v40 = 2098;
        v41 = v16;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Sent queued %s report {handle: 0x%x, type: %d, ID: %d, size: %zu, {%{public}.*P}", buf, 0x38u);
      }
      *((_BYTE *)v12 + 72) = 0;
      v27 = (void *)v12[10];
      if (v27)
        free(v27);
      v12[10] = 0;
    }
    else
    {
      v19 = qword_1009999B0;
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "sendControlOpCfm No pending reports", buf, 2u);
      }
    }
  }
}

void sub_1004FD7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15 && a13)
    operator delete[]();
  if (!a11)
    a10 = 1;
  if ((a10 & 1) == 0)
    operator delete[]();
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004FD864(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t **v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t *v10;
  NSObject *v11;
  _BOOL4 v12;
  uint64_t v13;
  NSObject *v14;
  uint8_t *v15;
  const char *v16;
  unsigned __int16 v17;
  uint8_t buf[8];
  __int16 v19;
  int v20;
  char v21;
  uint8_t v22[4];
  uint8_t *v23;
  __int16 v24;
  const char *v25;

  v17 = a2;
  v4 = (uint64_t **)a1[73];
  if (!v4)
  {
LABEL_7:
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FD27C();
    return 1;
  }
  v6 = (uint64_t)(a1 + 72);
  while (1)
  {
    v7 = *((unsigned __int16 *)v4 + 16);
    if (v7 <= a2)
      break;
LABEL_6:
    v4 = (uint64_t **)*v4;
    if (!v4)
      goto LABEL_7;
  }
  if (v7 < a2)
  {
    ++v4;
    goto LABEL_6;
  }
  v9 = sub_1003D9E10(v6, &v17);
  v10 = v9;
  if (!*((_BYTE *)v9 + 9))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FD314();
    return 1;
  }
  if (*((_BYTE *)v9 + 8))
  {
    v11 = qword_1009999B0;
    v12 = os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v12)
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = a3;
      v19 = 1024;
      v20 = v17;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device already suspended with reason %d for handle 0x%x, do nothing", buf, 0xEu);
      return 0;
    }
  }
  else
  {
    v13 = sub_1004822D0(a1, v17);
    result = sub_100444C24(v13);
    if ((_DWORD)result)
    {
      v14 = (id)qword_1009999B0;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v13, buf);
        if (v21 >= 0)
          v15 = buf;
        else
          v15 = *(uint8_t **)buf;
        if (a3 > 3)
          v16 = "??";
        else
          v16 = off_100934C18[a3];
        *(_DWORD *)v22 = 136446466;
        v23 = v15;
        v24 = 2082;
        v25 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Sending SUSPEND command to device %{public}s due to reason %{public}s", v22, 0x16u);
        if (v21 < 0)
          operator delete(*(void **)buf);
      }

      if (sub_10015F594(v17, 3u, (uint64_t)sub_1004FDB18))
      {
        result = os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR);
        if ((_DWORD)result)
        {
          sub_1006FD374();
          return 0;
        }
      }
      else
      {
        result = 0;
        *((_BYTE *)v10 + 8) = 1;
        *((_DWORD *)v10 + 17) = 0;
      }
    }
  }
  return result;
}

void sub_1004FDB00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004FDB18(int a1, int a2, int a3)
{
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  sub_1004FD340((_QWORD *)qword_10097ADB0, a1, a2, a3);
}

uint64_t sub_1004FDB80(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t **v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t result;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  NSObject *v18;
  void *__p[2];
  char v20;
  unsigned __int16 v21;
  uint8_t buf[4];
  void **v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  char *v27;

  v21 = a2;
  v3 = (uint64_t **)a1[73];
  if (!v3)
  {
LABEL_7:
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FD3D4();
    return 1;
  }
  v6 = (uint64_t)(a1 + 72);
  while (1)
  {
    v7 = *((unsigned __int16 *)v3 + 16);
    if (v7 <= a2)
      break;
LABEL_6:
    v3 = (uint64_t **)*v3;
    if (!v3)
      goto LABEL_7;
  }
  if (v7 < a2)
  {
    ++v3;
    goto LABEL_6;
  }
  v9 = sub_1003D9E10(v6, &v21);
  v10 = v9;
  if (!*((_BYTE *)v9 + 9))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FD438();
    return 1;
  }
  if (!*((_BYTE *)v9 + 8))
    return 0;
  v11 = sub_1004822D0(a1, v21);
  result = sub_100444C24(v11);
  if ((_DWORD)result)
  {
    v12 = (id)qword_1009999B0;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v11, __p);
      v13 = v20 >= 0 ? __p : (void **)__p[0];
      v14 = *((int *)v10 + 17);
      v15 = v14 > 5 ? "??" : off_100934C38[v14];
      v16 = a3 > 5 ? "??" : off_100934C38[a3];
      *(_DWORD *)buf = 136446722;
      v23 = v13;
      v24 = 2082;
      v25 = v15;
      v26 = 2082;
      v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Sending EXIT_SUSPEND command to device %{public}s, reason %{public}s -> %{public}s", buf, 0x20u);
      if (v20 < 0)
        operator delete(__p[0]);
    }

    v17 = sub_10015F594(v21, 4u, (uint64_t)sub_1004FDB18);
    v18 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v23) = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Exit Suspend returned status: %{bluetooth:OI_STATUS}u", buf, 8u);
    }
    if (v17)
    {
      result = os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        sub_1006FD498();
        return 0;
      }
    }
    else
    {
      *((_BYTE *)v10 + 8) = 0;
      *((_DWORD *)v10 + 17) = a3;
      return 335;
    }
  }
  return result;
}

void sub_1004FDE1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1004FDE34(uint64_t a1, unsigned int a2)
{
  uint64_t **v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned __int16 v8;

  v8 = a2;
  v2 = *(uint64_t ***)(a1 + 584);
  if (!v2)
    return 0;
  v4 = a1 + 576;
  while (1)
  {
    v5 = *((unsigned __int16 *)v2 + 16);
    if (v5 <= a2)
      break;
LABEL_6:
    v2 = (uint64_t **)*v2;
    if (!v2)
      return 0;
  }
  if (v5 < a2)
  {
    ++v2;
    goto LABEL_6;
  }
  v6 = sub_1003D9E10(v4, &v8);
  if (*(_BYTE *)(a1 + 562))
    return 0;
  return *((_DWORD *)v6 + 17) == 2;
}

BOOL sub_1004FDEAC(uint64_t a1, unsigned int a2)
{
  return sub_1004FDE34(a1 - 256, a2);
}

_BYTE *sub_1004FDEB4(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  char v7;
  uint8_t buf[4];
  const char *v9;

  v7 = 0;
  sub_100043758(&v7);
  v4 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "Off";
    if (a2)
      v5 = "On";
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Screen state changed to %{public}s", buf, 0xCu);
  }
  *(_BYTE *)(a1 + 562) = a2;
  if (a2)
    sub_1004FDFCC(a1, 1);
  else
    sub_1004FE0A8((_QWORD *)a1, 1u);
  return sub_100043728(&v7);
}

void sub_1004FDFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FDFCC(uint64_t a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  __int16 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD v12[5];
  int v13;
  __int16 v14;

  v2 = *(_QWORD **)(a1 + 576);
  v3 = (_QWORD *)(a1 + 584);
  if (v2 != (_QWORD *)(a1 + 584))
  {
    do
    {
      v6 = *((_WORD *)v2 + 16);
      v7 = sub_10006BBEC();
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1004FF694;
      v12[3] = &unk_10092D0A8;
      v12[4] = a1;
      v14 = v6;
      v13 = a2;
      sub_100041A34(v7, v12);
      v8 = (_QWORD *)v2[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v2[2];
          v10 = *v9 == (_QWORD)v2;
          v2 = v9;
        }
        while (!v10);
      }
      v2 = v9;
    }
    while (v9 != v3);
  }
  return 1;
}

uint64_t sub_1004FE0A8(_QWORD *a1, unsigned int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = (_QWORD *)a1[72];
  v3 = a1 + 73;
  if (v2 != a1 + 73)
  {
    do
    {
      sub_1004FD864(a1, *((unsigned __int16 *)v2 + 16), a2);
      v6 = (_QWORD *)v2[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
  return 1;
}

_BYTE *sub_1004FE12C(uint64_t a1, int a2)
{
  return sub_1004FDEB4(a1 - 280, a2);
}

uint64_t sub_1004FE134(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[15];
  char v5;

  v5 = 0;
  sub_100043758(&v5);
  v2 = qword_1009999B0;
  if (*(_BYTE *)(a1 + 562))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FD4F8();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "System can sleep and screen state is off, suspending HID", v4, 2u);
    }
    sub_1004FE0A8((_QWORD *)a1, 2u);
  }
  sub_100043728(&v5);
  return 1;
}

void sub_1004FE1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FE1F4(uint64_t a1)
{
  sub_1004FE134(a1 - 288);
  return 1;
}

void sub_1004FE210(uint64_t a1)
{
  dispatch_queue_global_t global_queue;
  NSObject *v3;
  _QWORD block[5];

  global_queue = dispatch_get_global_queue(0, 0);
  v3 = objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004FE284;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_sync(v3, block);

}

void sub_1004FE284(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  NSObject *v18;
  void **v19;
  int v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  NSObject *v26;
  const char *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  void *__p[2];
  char v32;
  uint8_t buf[4];
  void **v34;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(v1 + 576);
  v3 = (_QWORD *)(v1 + 584);
  if (v2 != (_QWORD *)(v1 + 584))
  {
    do
    {
      v4 = *((unsigned __int16 *)v2 + 32);
      v5 = sub_100027F68();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5) & 1) != 0
        || (v6 = sub_100027F68(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 480))(v6)))
      {
        v7 = sub_10019ACEC(v4);
        v8 = sub_100065478();
        (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v8 + 560))(v8, v7, v4);
        if (!byte_1009932D9)
        {
          v9 = sub_1000438A4();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 1048))(v9, v4, 1, 0))
          {
            v10 = qword_1009999B0;
            if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
            {
              LODWORD(__p[0]) = 67109120;
              HIDWORD(__p[0]) = v4;
              _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to disable HID Latency Statistics for connection handle 0x%02x", (uint8_t *)__p, 8u);
            }
          }
        }
      }
      v11 = sub_100027F68();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11) & 1) == 0)
      {
        v12 = sub_100027F68();
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 472))(v12))
          goto LABEL_32;
      }
      v13 = sub_10019ACEC(v4);
      if (!v13)
        goto LABEL_32;
      v14 = sub_10019B144((uint64_t)v13);
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_100934B58);
      v15 = *(_DWORD *)v14;
      WORD2(__p[0]) = *(_WORD *)(v14 + 4);
      LODWORD(__p[0]) = v15;
      v16 = (unsigned __int8 *)sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
      v17 = qword_1009999B0;
      if (v16)
      {
        v18 = (id)qword_1009999B0;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8((uint64_t)v16, __p);
          v19 = __p;
          if (v32 < 0)
            v19 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v34 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "PowerManagementEventSystemWillSleep: device %{public}s", buf, 0xCu);
          if (v32 < 0)
            operator delete(__p[0]);
        }

        v20 = sub_10043E93C(v16);
        v21 = qword_1009999B0;
        v22 = os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT);
        if (v20)
        {
          if (v22)
          {
            LODWORD(__p[0]) = 67109120;
            HIDWORD(__p[0]) = v4;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Disabling phy stats for HCI LM Handle 0x%02X", (uint8_t *)__p, 8u);
          }
          v23 = sub_1000438A4();
          (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v23 + 336))(v23, 0, 1, ((unint64_t)v16[128] << 40) | ((unint64_t)v16[129] << 32) | ((unint64_t)v16[130] << 24) | ((unint64_t)v16[131] << 16) | ((unint64_t)v16[132] << 8) | v16[133], 1);
          v16[1114] = 0;
          v24 = (id)qword_1009999B0;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            if (qword_1009778E8 != -1)
              dispatch_once(&qword_1009778E8, &stru_100934B58);
            v25 = sub_1004727F0((uint64_t)off_1009778E0);
            LODWORD(__p[0]) = 67109120;
            HIDWORD(__p[0]) = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "disablePhyStats, current number of devices %d", (uint8_t *)__p, 8u);
          }

          goto LABEL_32;
        }
        if (v22)
        {
          LOWORD(__p[0]) = 0;
          v26 = v21;
          v27 = "disablePhyStats: device is not paired!!!";
          goto LABEL_31;
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        v26 = v17;
        v27 = "PowerManagementEventSystemWillSleep: device is NULL";
LABEL_31:
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v27, (uint8_t *)__p, 2u);
      }
LABEL_32:
      v28 = (_QWORD *)v2[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v2[2];
          v30 = *v29 == (_QWORD)v2;
          v2 = v29;
        }
        while (!v30);
      }
      v2 = v29;
    }
    while (v29 != v3);
  }
}

void sub_1004FE6B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004FE6CC(uint64_t a1)
{
  sub_1004FE210(a1 - 288);
}

void sub_1004FE6D4(uint64_t a1)
{
  dispatch_queue_global_t global_queue;
  NSObject *v3;
  _QWORD block[5];

  global_queue = dispatch_get_global_queue(0, 0);
  v3 = objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004FE748;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_async(v3, block);

}

void sub_1004FE748(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  void **v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  void *__p[2];
  char v26;
  uint8_t buf[4];
  void **v28;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(v1 + 576);
  v3 = (_QWORD *)(v1 + 584);
  if (v2 != (_QWORD *)(v1 + 584))
  {
    do
    {
      v4 = *((unsigned __int16 *)v2 + 32);
      v5 = sub_100027F68();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5) & 1) != 0
        || (v6 = sub_100027F68(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 480))(v6)))
      {
        v7 = sub_10019ACEC(v4);
        v8 = *((unsigned __int16 *)v2 + 68);
        v9 = sub_100065478();
        (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v9 + 544))(v9, v4, v7, 1, v8);
        if (!byte_1009932D9)
        {
          v10 = sub_1000438A4();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 1048))(v10, v4, 1, 1))
          {
            v11 = qword_1009999B0;
            if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
            {
              LODWORD(__p[0]) = 67109120;
              HIDWORD(__p[0]) = v4;
              _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to enable HID Latency Statistics for connection handle 0x%02x", (uint8_t *)__p, 8u);
            }
          }
        }
      }
      v12 = sub_100027F68();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12) & 1) != 0
        || (v13 = sub_100027F68(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 472))(v13)))
      {
        v14 = sub_10019ACEC(v4);
        if (v14)
        {
          v15 = sub_10019B144((uint64_t)v14);
          if (qword_1009778E8 != -1)
            dispatch_once(&qword_1009778E8, &stru_100934B58);
          v16 = *(_DWORD *)v15;
          WORD2(__p[0]) = *(_WORD *)(v15 + 4);
          LODWORD(__p[0]) = v16;
          v17 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
          v18 = qword_1009999B0;
          if (v17)
          {
            v19 = (id)qword_1009999B0;
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(v17, __p);
              v20 = __p;
              if (v26 < 0)
                v20 = (void **)__p[0];
              *(_DWORD *)buf = 136446210;
              v28 = v20;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "PowerManagementEventSystemWillSleep: device %{public}s", buf, 0xCu);
              if (v26 < 0)
                operator delete(__p[0]);
            }

            sub_1004FEA58(v21, v17);
          }
          else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "PowerManagementEventSystemWillSleep: device is NULL", (uint8_t *)__p, 2u);
          }
        }
      }
      v22 = (_QWORD *)v2[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v2[2];
          v24 = *v23 == (_QWORD)v2;
          v2 = v23;
        }
        while (!v24);
      }
      v2 = v23;
    }
    while (v23 != v3);
  }
}

void sub_1004FEA40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004FEA58(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  NSObject *v6;
  _BOOL4 v7;
  dispatch_queue_global_t global_queue;
  NSObject *v9;
  _QWORD block[5];
  uint8_t buf[4];
  unsigned int v12;
  __int16 v13;
  unsigned int v14;

  sub_1000438A4();
  v3 = sub_1003335B0();
  v4 = sub_1000438A4();
  if (sub_1003335A8(v4) && v3)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100934B58);
    v5 = sub_1004727F0((uint64_t)off_1009778E0);
    v6 = qword_1009999B0;
    v7 = os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT);
    if (v5 >= v3)
    {
      if (v7)
      {
        *(_DWORD *)buf = 67109376;
        v12 = v5;
        v13 = 1024;
        v14 = v3;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Max HID GCs reached, not adding current %d max %d", buf, 0xEu);
      }
    }
    else
    {
      if (v7)
      {
        *(_DWORD *)buf = 67109376;
        v12 = v5;
        v13 = 1024;
        v14 = v3;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "HID GCs connected, enabling stat, current number of devices %d max %d", buf, 0xEu);
      }
      global_queue = dispatch_get_global_queue(0, 0);
      v9 = objc_claimAutoreleasedReturnValue(global_queue);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1005049D4;
      block[3] = &unk_100917378;
      block[4] = a2;
      dispatch_async(v9, block);

    }
  }
}

void sub_1004FEC00(uint64_t a1)
{
  sub_1004FE6D4(a1 - 288);
}

uint64_t sub_1004FEC08(_QWORD *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t *v5;
  unsigned __int16 v6;

  result = sub_1004821D4(a1, a2);
  v6 = result;
  if ((_DWORD)result)
  {
    v5 = sub_1003D9E10((uint64_t)(a1 + 72), &v6);
    return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)*v5 + 24))(*v5, a2);
  }
  return result;
}

void sub_1004FEC5C(uint64_t a1, unsigned __int16 a2, uint64_t a3, unsigned int a4)
{
  uint64_t *v7;
  unsigned __int16 v8;

  v8 = a2;
  v7 = sub_1003D9E10(a1 + 576, &v8);
  sub_1004FECCC(a1);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v7 + 64))(*v7, a3, a4);
  sub_1004FED58(a1);
}

void sub_1004FECCC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (IsAppleInternalBuild())
  {
    v2 = *(id *)(a1 + 416);
    v3 = v2;
    v4 = *(_QWORD *)(a1 + 432);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
    {
      *(_WORD *)v5 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "HIDInterruptData", (const char *)&unk_1008B3D9D, v5, 2u);
    }

  }
}

void sub_1004FED58(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  if (IsAppleInternalBuild())
  {
    v2 = *(id *)(a1 + 416);
    v3 = v2;
    v4 = *(_QWORD *)(a1 + 432);
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
    {
      *(_WORD *)v5 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_END, v4, "HIDInterruptData", (const char *)&unk_1008B3D9D, v5, 2u);
    }

  }
}

void sub_1004FEDE4(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  unsigned int v6;
  int v7;
  _BYTE *v8;
  NSObject *v9;
  int v10;
  int v11;
  unsigned int v12;
  __int16 v13;
  int v14;

  v3 = sub_10015D394(a2);
  if (v3)
  {
    v4 = v3;
    if (*(_BYTE *)(v3 + 76))
    {
      v5 = qword_1009999B0;
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(unsigned __int8 *)(v4 + 77);
        v7 = *(unsigned __int8 *)(v4 + 76);
        v11 = 67109376;
        v12 = v6;
        v13 = 1024;
        v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Could not send pending control channel operation 0x%x due to pending operation 0x%x", (uint8_t *)&v11, 0xEu);
      }
    }
    else
    {
      v8 = (_BYTE *)(v3 + 77);
      if (*(_BYTE *)(v3 + 77) == 5)
      {
        v9 = qword_1009999B0;
        if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *v8;
          v11 = 67109376;
          v12 = a2;
          v13 = 1024;
          v14 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending pending control virtual cable unpluged for handle 0x%x, queued operation 0x%x", (uint8_t *)&v11, 0xEu);
        }
        if (sub_10015F594(a2, 5u, (uint64_t)sub_1004FDB18))
        {
          if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
            sub_1006FD524();
        }
        else
        {
          *v8 &= 0xFAu;
        }
      }
    }
  }
}

uint64_t sub_1004FEF7C(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t *v10;
  NSObject *v11;
  _BOOL8 v12;
  unsigned __int16 v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;

  v14 = a2;
  v10 = sub_1003D9E10(a1 + 576, &v14);
  v11 = qword_1009999B0;
  v12 = os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    *(_DWORD *)buf = 67109376;
    v16 = v14;
    v17 = 1024;
    v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "getReportResponse for handle 0x%x success %d", buf, 0xEu);
  }
  sub_1004FEDE4(v12, v14);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v10 + 72))(*v10, a3, a4, a5, a6);
}

uint64_t sub_1004FF084(uint64_t a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  NSObject *v7;
  _BOOL8 v8;
  NSObject *v10;
  unsigned __int16 v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  v11 = a2;
  v6 = sub_1003D9E10(a1 + 576, &v11);
  v7 = qword_1009999B0;
  v8 = os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    *(_DWORD *)buf = 67109376;
    v13 = v11;
    v14 = 1024;
    v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "setReportResponse for handle 0x%x success %d", buf, 0xEu);
  }
  if (*((_BYTE *)v6 + 9))
  {
    sub_1004FEDE4(v8, v11);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v6 + 80))(*v6, a3, a4);
  }
  else
  {
    v10 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device start pending on setReportResponse - starting device with status %d", buf, 8u);
    }
    *((_BYTE *)v6 + 9) = 1;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v6 + 32))(*v6);
  }
}

uint64_t sub_1004FF1E8(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 320);
  v4 = *(_QWORD **)(a1 + 576);
  if (v4 == (_QWORD *)(a1 + 584))
  {
LABEL_9:
    v8 = 0;
  }
  else
  {
    while (*((unsigned __int16 *)v4 + 32) != a2)
    {
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
      if (v6 == (_QWORD *)(a1 + 584))
        goto LABEL_9;
    }
    v8 = *((unsigned __int16 *)v4 + 16);
  }
  sub_100034234((uint64_t)v10);
  return v8;
}

uint64_t sub_1004FF28C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v2 = *(_QWORD **)(a1 + 576);
  if (v2 == (_QWORD *)(a1 + 584))
    return 0;
  while (v2[5] != a2)
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    v2 = v4;
    if (v4 == (_QWORD *)(a1 + 584))
      return 0;
  }
  return *((unsigned __int16 *)v2 + 16);
}

uint64_t sub_1004FF2F0(_QWORD *a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void **v15;
  __int128 *v16;
  __int128 *v17;
  BOOL v18;
  uint64_t v19;
  __int128 v21;
  void *__p;
  __int128 *v23;
  uint64_t v24;
  unsigned __int16 v25;
  uint8_t buf[24];

  v25 = a3;
  v5 = sub_1003D9E10((uint64_t)(a1 + 72), &v25);
  if (!sub_100444790(a2))
  {
    v6 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_FAULT))
      sub_1006FD5E8(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = (id)qword_1009999B0;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F78C(a2, (uint64_t)&__p);
    v15 = v24 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Performing HID handshake for device %{public}s", buf, 0xCu);
    if (SHIBYTE(v24) < 0)
      operator delete(__p);
  }

  if ((sub_100049F50() & 1) == 0
    && !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, a2))
  {
    return 1;
  }
  *(_OWORD *)buf = xmmword_100741FB0;
  __p = 0;
  v23 = 0;
  v24 = 0;
  if (!sub_1004442A0(a2, (uint64_t)buf, 0x20Eu, &__p))
    goto LABEL_24;
  v17 = (__int128 *)__p;
  v16 = v23;
  v18 = (char *)v23 - (_BYTE *)__p == 16 && (*((_WORD *)__p + 1) == 1) & *((_BYTE *)__p + 8);
  while (v17 != v16)
  {
    v21 = *v17;
    sub_1002C3FB4(&v21);
    ++v17;
    v16 = v23;
  }
  if (v18)
  {
    v19 = sub_10015FC00(v25, 1);
    if ((_DWORD)v19)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
        sub_1006FD588();
      v19 = 1;
    }
  }
  else
  {
LABEL_24:
    sub_1004FF560(a1, v25);
    v19 = 0;
  }
  if (__p)
  {
    v23 = (__int128 *)__p;
    operator delete(__p);
  }
  return v19;
}

void sub_1004FF528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004FF560(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD v8[5];
  __int16 v9;
  uint8_t buf[14];
  unsigned __int16 v11;

  v11 = a2;
  v4 = sub_1004822D0(a1, a2);
  if (sub_100444D3C(v4) && (sub_100444D4C(v4) & 1) == 0 && sub_100444D58(v4))
  {
    if (sub_100444D30(v4))
    {
      v5 = qword_1009999B0;
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Delaying setting sniff rate for 250ms", buf, 2u);
      }
      v6 = sub_10006BBEC();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100501800;
      v8[3] = &unk_100920960;
      v8[4] = a1;
      v9 = a2;
      sub_100475CEC(v6, 250, v8);
    }
    else
    {
      sub_1005016A8((uint64_t)a1, a2);
    }
  }
  else
  {
    v7 = sub_1003D9E10((uint64_t)(a1 + 72), &v11);
    *((_BYTE *)v7 + 9) = 1;
    (*(void (**)(uint64_t))(*(_QWORD *)*v7 + 32))(*v7);
  }
}

_BYTE *sub_1004FF694(uint64_t a1)
{
  _QWORD *v2;
  char v4;

  v2 = *(_QWORD **)(a1 + 32);
  v4 = 0;
  sub_100043758(&v4);
  sub_1004FDB80(v2, *(unsigned __int16 *)(a1 + 44), *(_DWORD *)(a1 + 40));
  return sub_100043728(&v4);
}

void sub_1004FF6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FF6F4(_QWORD *a1, unint64_t a2, int a3, int a4, char a5)
{
  int v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  void **v14;
  uint64_t result;
  NSObject *v16;
  void **v17;
  NSObject *v18;
  void **v19;
  char v20;
  void *__p[2];
  char v22;
  uint8_t buf[4];
  void **v24;

  v10 = sub_100481EC8((uint64_t)a1, a2);
  if (a4)
    v11 = 0;
  else
    v11 = v10;
  if ((v11 & 1) == 0)
  {
    v12 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Denying connection attempt", (uint8_t *)__p, 2u);
    }
  }
  if (sub_100444F04(a2))
  {
    v13 = (id)qword_1009999B0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v14 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v24 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Accepting connection from device %{public}s using Type S connection policy", buf, 0xCu);
      if (v22 < 0)
        operator delete(__p[0]);
    }

    result = sub_10015F58C(a3, (uint64_t)&off_100934A58, &unk_100934A78, v11);
  }
  else if (sub_100444D3C(a2) && sub_100444D4C(a2))
  {
    v16 = (id)qword_1009999B0;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v17 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v24 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Accepting connection from device %{public}s using Apple Mouse/TP connection policy", buf, 0xCu);
      if (v22 < 0)
        operator delete(__p[0]);
    }

    result = sub_10015F58C(a3, (uint64_t)&off_100934A58, &unk_100934AA8, v11);
  }
  else
  {
    v18 = (id)qword_1009999B0;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v19 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Accepting connection from device %{public}s using default connection policy", buf, 0xCu);
      if (v22 < 0)
        operator delete(__p[0]);
    }

    result = sub_10015F58C(a3, (uint64_t)&off_100934A58, 0, v11);
  }
  v20 = v11 ^ 1;
  if ((_DWORD)result)
    v20 = 1;
  if ((v20 & 1) == 0)
  {
    result = sub_1004820E0((uint64_t)a1, a2, a3);
    if ((a5 & 1) == 0)
      sub_1004816DC(a1, a2);
  }
  return result;
}

void sub_1004FFA08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004FFA28(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  void **v8;
  NSObject *v10;
  void **v11;
  NSObject *v12;
  void **v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100934B58);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v7 = (id)qword_1009999B0;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v6, __p);
    v8 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received incoming connection attempt from HID device %{public}s", buf, 0xCu);
    if (v15 < 0)
      operator delete(__p[0]);
  }

  if (!sub_100444790(v6))
  {
    if (sub_1004820D0((uint64_t)a1))
    {
      v10 = (id)qword_1009999B0;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v6, __p);
        if (v15 >= 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v17 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Outgoing attempt already exists, withdraw outgoing attempt for device %{public}s", buf, 0xCu);
        if (v15 < 0)
          operator delete(__p[0]);
      }

      sub_10048183C((uint64_t)a1, v6, 314);
    }
    v12 = (id)qword_1009999B0;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v6, __p);
      v13 = v15 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v17 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Delaying response to incoming HID connection request for device %{public}s as SDP is missing", buf, 0xCu);
      if (v15 < 0)
        operator delete(__p[0]);
    }

    if (qword_10097B080 != -1)
      dispatch_once(&qword_10097B080, &stru_100934B78);
    sub_10048BB30(qword_10097B078, v6);
  }
  return sub_1004FF6F4(a1, v6, a3, 0, 0);
}

void sub_1004FFD04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004FFD24(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  uint8_t *v11;
  __int16 v12;
  uint8_t buf[8];
  __int16 v14;
  uint8_t *v15;
  __int16 v16;
  int v17;
  uint8_t v18[8];
  char v19;

  v12 = a2;
  v6 = sub_1004822D0(a1, a2);
  if (v6)
  {
    v7 = v6;
    v8 = (id)qword_1009999B0;
    v9 = v8;
    if ((_DWORD)a3)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v7, buf);
        sub_1006EB7AC();
      }

      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_100934B98);
      v10 = sub_1004A35C0((uint64_t)off_100977A50, a3, 20000);
      sub_10048183C((uint64_t)a1, v7, v10);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v7, v18);
      v11 = v19 >= 0 ? v18 : *(uint8_t **)v18;
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = a2;
      v14 = 2082;
      v15 = v11;
      v16 = 1024;
      v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "HID connection on handle 0x%x for device %{public}s with status %d", buf, 0x18u);
      if (v19 < 0)
        operator delete(*(void **)v18);
    }

    sub_10048183C((uint64_t)a1, v7, 0);
  }
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
    sub_1006FD658();
}

void sub_1005006BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  void *v44;

  _Unwind_Resume(a1);
}

void sub_1005007BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11[16];

  v4 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Overriding connection packet type to single slot", v11, 2u);
  }
  if (sub_10019284C(a3, 13080, v5, v6, v7, v8, v9, v10))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FD7A8();
  }
}

uint64_t sub_100500864(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;

  v2 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int16 *)(a1 + 40);
    v7 = 136315394;
    v8 = "connectionCallback_block_invoke";
    v9 = 1024;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s -- Enable HID Latency Statistics event for connection handle 0x%02x", (uint8_t *)&v7, 0x12u);
  }
  v4 = sub_1000438A4();
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v4 + 1048))(v4, *(unsigned __int16 *)(a1 + 40), 1, 1);
  if ((_DWORD)result)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FD808();
    result = sub_100065478();
    if (result)
    {
      v6 = sub_100065478();
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v6 + 536))(v6, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
    }
  }
  return result;
}

uint64_t sub_100500994(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 3400))(v2, 0, *(_QWORD *)(a1 + 32));
}

void sub_1005009C4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  dispatch_time_t v5;
  _QWORD v6[6];
  uint8_t buf[16];

  v4 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting active mode check timer", buf, 2u);
  }
  v5 = dispatch_time(0, 6000000000);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10050321C;
  v6[3] = &unk_100918090;
  v6[4] = a1;
  v6[5] = a2;
  dispatch_after(v5, (dispatch_queue_t)&_dispatch_main_q, v6);
}

void sub_100500A8C(uint64_t a1)
{
  sub_100500A94(*(_QWORD *)(a1 + 32));
}

void sub_100500A94(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  _QWORD *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned __int16 *v13;
  __int16 v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  __objc2_class *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  int v35;
  unsigned int v36;
  NSObject *v37;
  NSObject *v38;
  void *v39;
  id v40;
  void *v41;
  int v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD v52[2];
  uint8_t buf[8];
  unsigned __int16 *v54;
  char *v55;
  uint8_t v56[4];
  int v57;
  _BYTE v58[128];

  v2 = qword_1009999B0;
  v3 = os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Evaluating Low Latency Gaming Topology", buf, 2u);
  }
  if (*(_BYTE *)(a1 + 563))
  {
    *(_QWORD *)buf = 0;
    v54 = 0;
    v55 = 0;
    v52[0] = 0;
    v52[1] = 0;
    sub_10003415C((uint64_t)v52, a1 + 320);
    v4 = *(_QWORD **)(a1 + 576);
    if (v4 != (_QWORD *)(a1 + 584))
    {
      v5 = v54;
      do
      {
        if (v5 >= (unsigned __int16 *)v55)
        {
          v6 = *(unsigned __int16 **)buf;
          v7 = (uint64_t)v5 - *(_QWORD *)buf;
          if ((uint64_t)v5 - *(_QWORD *)buf <= -3)
            abort();
          v8 = v7 >> 1;
          if ((unint64_t)&v55[-*(_QWORD *)buf] <= (v7 >> 1) + 1)
            v9 = v8 + 1;
          else
            v9 = (uint64_t)&v55[-*(_QWORD *)buf];
          if ((unint64_t)&v55[-*(_QWORD *)buf] >= 0x7FFFFFFFFFFFFFFELL)
            v10 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v10 = v9;
          if (v10)
          {
            v11 = (char *)sub_1002B54AC((uint64_t)&v55, v10);
            v6 = *(unsigned __int16 **)buf;
            v5 = v54;
          }
          else
          {
            v11 = 0;
          }
          v12 = &v11[2 * v8];
          *(_WORD *)v12 = *((_WORD *)v4 + 16);
          v13 = (unsigned __int16 *)(v12 + 2);
          while (v5 != v6)
          {
            v14 = *--v5;
            *((_WORD *)v12 - 1) = v14;
            v12 -= 2;
          }
          *(_QWORD *)buf = v12;
          v54 = v13;
          v55 = &v11[2 * v10];
          if (v6)
            operator delete(v6);
          v5 = v13;
        }
        else
        {
          *v5++ = *((_WORD *)v4 + 16);
        }
        v54 = v5;
        v15 = (_QWORD *)v4[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (_QWORD *)v4[2];
            v17 = *v16 == (_QWORD)v4;
            v4 = v16;
          }
          while (!v17);
        }
        v4 = v16;
      }
      while (v16 != (_QWORD *)(a1 + 584));
    }
    sub_100034264((uint64_t)v52);
    v18 = *(unsigned __int16 **)buf;
    v19 = v54;
    if (*(unsigned __int16 **)buf == v54)
    {
      v21 = 0;
      v20 = 0;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      do
      {
        v22 = sub_1004822D0((_QWORD *)a1, *v18);
        v23 = v22;
        if (v22)
        {
          if (sub_10043F854(v22) == 26)
          {
            ++v21;
            if (sub_100444CA8(v23))
              v20 = v23;
          }
        }
        ++v18;
      }
      while (v18 != v19);
    }
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100934B18);
    v25 = sub_100069E14((uint64_t)off_1009778A0);
    v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    v27 = (uint64_t)objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v48, v58, 16);
    v28 = v27;
    v46 = a1;
    v29 = &OBJC_METACLASS___BTVCLinkAdvertiseSet;
    v30 = 0;
    if (v27)
    {
      v47 = 0;
      v31 = *(_QWORD *)v49;
      do
      {
        v32 = 0;
        do
        {
          if (*(_QWORD *)v49 != v31)
            objc_enumerationMutation(v26);
          v33 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * v32);
          if (sub_10050349C(v27, v33))
          {
            ++v21;
            if (!v20)
            {
              v34 = v33;

              v47 = v34;
              v20 = 0;
              v29 = &OBJC_METACLASS___BTVCLinkAdvertiseSet;
            }
          }
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_100934BF8);
          v27 = sub_10065E0D4((uint64_t)v29[56].isa, v33);
          v30 += v27;
          ++v32;
        }
        while (v28 != v32);
        v27 = (uint64_t)objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v48, v58, 16);
        v28 = v27;
      }
      while (v27);
    }
    else
    {
      v47 = 0;
    }

    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100934BF8);
    v35 = sub_100661CF8((uint64_t)off_1009778C0);
    v36 = v30 - v21 - v35 + (((_DWORD)v54 - *(_DWORD *)buf) >> 1);
    if (v21 != 1)
    {
      v37 = qword_1009999B0;
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v56 = 67109120;
        v57 = v21;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Low Latency Gaming not eligible, due to %d connected game controllers", v56, 8u);
      }
    }
    if (v36 >= 3u)
    {
      v38 = qword_1009999B0;
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v56 = 67109120;
        v57 = v36;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Low Latency Gaming not eligible, due to %d non-GC HIDs", v56, 8u);
      }
      v39 = v47;
      if (!v20)
      {
LABEL_74:
        if (!v39)
          goto LABEL_77;
        goto LABEL_75;
      }
LABEL_73:
      *(_WORD *)(v46 + 564) = 0;
      sub_1005038D4((_QWORD *)v46, v20, 0);
      goto LABEL_74;
    }
    v39 = v47;
    if (v20)
    {
      if (v21 != 1)
        goto LABEL_73;
      *(_WORD *)(v46 + 564) = sub_1004821D4((_QWORD *)v46, v20);
      sub_1005038D4((_QWORD *)v46, v20, 1);
    }
    if (!v47)
      goto LABEL_77;
    if (v21 == 1)
    {
      v40 = v47;
      v41 = *(void **)(v46 + 568);
      *(_QWORD *)(v46 + 568) = v40;
      v42 = 1;
LABEL_76:

      v39 = v47;
      sub_100503B44(v43, v47, v42);
LABEL_77:

      sub_100034234((uint64_t)v52);
      if (*(_QWORD *)buf)
      {
        v54 = *(unsigned __int16 **)buf;
        operator delete(*(void **)buf);
      }
      return;
    }
LABEL_75:
    v42 = 0;
    v41 = *(void **)(v46 + 568);
    *(_QWORD *)(v46 + 568) = 0;
    goto LABEL_76;
  }
  if (*(_WORD *)(a1 + 564))
  {
    v24 = sub_1004822D0((_QWORD *)a1, *(unsigned __int16 *)(a1 + 564));
    sub_1005038D4((_QWORD *)a1, v24, 0);
    *(_WORD *)(a1 + 564) = 0;
  }
  else
  {
    v44 = *(void **)(a1 + 568);
    if (v44)
    {
      sub_100503B44(v3, v44, 0);
      v45 = *(void **)(a1 + 568);
      *(_QWORD *)(a1 + 568) = 0;

    }
  }
}

void sub_100501024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22)
{

  sub_100034234((uint64_t)&a19);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_1005010AC(uint64_t a1)
{
  return sub_1005010B4(*(os_unfair_lock_s **)(a1 + 32));
}

_QWORD *sub_1005010B4(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  _WORD *v4;
  _WORD *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  BOOL v8;
  void **v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  __int16 v16;
  __int16 v17;
  id v18;
  id v19;
  char v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  char v27;
  void *v28;
  void *v29;
  int v30;
  os_unfair_lock_s *v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  id obj;
  char v39;
  _QWORD v40[4];
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  void *__p[2];
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[2];
  _WORD *v55;
  void **v56;
  uint64_t v57;
  unsigned __int8 v58[16];
  unsigned __int8 v59[16];
  _BYTE v60[128];

  v55 = &v55;
  v56 = (void **)&v55;
  v57 = 0;
  v54[0] = 0;
  v54[1] = 0;
  sub_10003415C((uint64_t)v54, (uint64_t)&a1[80]);
  v2 = *(os_unfair_lock_s **)&a1[144]._os_unfair_lock_opaque;
  if (v2 != &a1[146])
  {
    v3 = v57;
    v4 = v55;
    do
    {
      v5 = operator new(0x18uLL);
      v5[8] = v2[8]._os_unfair_lock_opaque;
      *(_QWORD *)v5 = v4;
      *((_QWORD *)v5 + 1) = &v55;
      *((_QWORD *)v4 + 1) = v5;
      ++v3;
      v55 = v5;
      v57 = v3;
      v6 = *(os_unfair_lock_s **)&v2[2]._os_unfair_lock_opaque;
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(os_unfair_lock_s **)&v6->_os_unfair_lock_opaque;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = *(os_unfair_lock_s **)&v2[4]._os_unfair_lock_opaque;
          v8 = *(_QWORD *)&v7->_os_unfair_lock_opaque == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
      v4 = v5;
    }
    while (v7 != &a1[146]);
  }
  sub_100034264((uint64_t)v54);
  v9 = v56;
  if (v56 == (void **)&v55)
  {
    v11 = 0;
    v10 = 0;
    v39 = 0;
    v33 = 0;
    v36 = 0;
    v37 = 1;
  }
  else
  {
    v33 = 0;
    v39 = 0;
    v10 = 0;
    v11 = 0;
    v36 = 0;
    v37 = 1;
    do
    {
      v12 = sub_1004822D0(a1, *((unsigned __int16 *)v9 + 8));
      v13 = v12;
      if (v12)
      {
        v14 = sub_10044FDAC(v12);
        switch(v14)
        {
          case 12:
            ++v36;
            break;
          case 18:
            ++v11;
            break;
          case 24:
            ++v10;
            break;
        }
        v15 = sub_100444C3C(v13);
        v16 = sub_10044FDAC(v13);
        ++v33;
        v39 += v15;
        if ((unsigned __int16)((24576 * v16) | ((unsigned __int16)(-21845 * v16) >> 3)) >= 0xAABu
          && !sub_100444C3C(v13)
          || (v17 = sub_10044FDAC(v13),
              (unsigned __int16)((24576 * v17) | ((unsigned __int16)(-21845 * v17) >> 3)) >= 0xAABu)
          && sub_10044FDAC(v13) != 12
          && sub_100444C3C(v13))
        {
          v37 = 0;
        }
      }
      v9 = (void **)v9[1];
    }
    while (v9 != (void **)&v55);
  }
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v34 = v11;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100934B18);
  v18 = sub_100069E14((uint64_t)off_1009778A0);
  obj = (id)objc_claimAutoreleasedReturnValue(v18);
  v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v60, 16);
  v35 = v10;
  v32 = a1;
  v20 = 0;
  if (v19)
  {
    v21 = *(_QWORD *)v51;
    do
    {
      v22 = 0;
      do
      {
        if (*(_QWORD *)v51 != v21)
          objc_enumerationMutation(obj);
        v23 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)v22);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_100934BF8);
        if (sub_10065E0D4((uint64_t)off_1009778C0, v23))
        {
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_100934B18);
          v24 = off_1009778A0;
          sub_100030BCC(v59, v23);
          v25 = sub_1006249C4((uint64_t)v24, v59);
          switch(v25)
          {
            case 6:
              ++v36;
              break;
            case 9:
              ++v34;
              break;
            case 12:
              ++v35;
              break;
          }
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_100934BF8);
          v26 = off_1009778C0;
          sub_100091AE8(__p, "IsXboxBLEController");
          v27 = sub_10000628C((uint64_t)v26, v23, (uint64_t)__p);
          if (v49 < 0)
            operator delete(__p[0]);
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_100934B18);
          v28 = off_1009778A0;
          sub_100030BCC(v59, v23);
          ++v20;
          v39 += v27;
          if (sub_1006249C4((uint64_t)v28, v59) != 6)
          {
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_100934B18);
            v29 = off_1009778A0;
            sub_100030BCC(v58, v23);
            v30 = sub_1006249C4((uint64_t)v29, v58);
            v37 &= (unsigned __int16)((unsigned __int16)((((-21845 * v30) & 0xFFF8u) >> 2) | (-16384 * v30)) >> 1) < 0xAABu;
          }
        }
        v22 = (char *)v22 + 1;
      }
      while (v19 != v22);
      v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v50, v60, 16, v32);
    }
    while (v19);
  }

  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_1005037A8;
  v40[3] = &unk_100934AD8;
  v41 = v33;
  v42 = v20;
  v43 = v39;
  v44 = v36;
  v45 = v34;
  v46 = v35;
  v47 = v37 & 1;
  sub_1005036EC(v32 + 96, v40);
  sub_100034234((uint64_t)v54);
  return sub_10002074C(&v55);
}

void sub_100501634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37)
{

  sub_100034234((uint64_t)&a35);
  sub_10002074C(&a37);
  _Unwind_Resume(a1);
}

void sub_1005016A8(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  char v12;
  uint8_t buf[14];
  unsigned __int16 v14;

  v14 = a2;
  v4 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Attempting to force HID sniff rate", buf, 2u);
  }
  v12 = 33;
  v11 = 35127750;
  if (sub_10015FB5C(a2, 3, (char *)&v11, 5uLL))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FD898();
    v5 = *(_QWORD *)(a1 + 584);
    if (!v5)
      goto LABEL_22;
    v6 = a1 + 584;
    do
    {
      v7 = *(unsigned __int16 *)(v5 + 32);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t *)v5;
      else
        v9 = (uint64_t *)(v5 + 8);
      if (v8)
        v6 = v5;
      v5 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 584 && *(unsigned __int16 *)(v6 + 32) <= a2)
    {
      v10 = sub_1003D9E10(a1 + 576, &v14);
      *((_BYTE *)v10 + 9) = 1;
      (*(void (**)(uint64_t))(*(_QWORD *)*v10 + 32))(*v10);
    }
    else
    {
LABEL_22:
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
        sub_1006FD86C();
    }
  }
}

_BYTE *sub_100501800(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(_QWORD *)(a1 + 32);
  v4 = 0;
  sub_100043758(&v4);
  sub_1005016A8(v2, *(unsigned __int16 *)(a1 + 40));
  return sub_100043728(&v4);
}

void sub_100501848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10050185C(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  NSObject *v13;
  uint64_t *v14;
  NSObject *v15;
  uint8_t *v16;
  uint64_t v17;
  _BOOL8 v18;
  int v19;
  unsigned int v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[5];
  _QWORD v43[5];
  _QWORD v44[4];
  __int16 v45;
  char v46;
  uint64_t v47;
  _QWORD v48[2];
  unsigned __int16 v49;
  uint8_t buf[8];
  char v51;
  uint8_t v52[4];
  uint8_t *v53;
  __int16 v54;
  int v55;

  v49 = a2;
  v6 = sub_1004822D0((_QWORD *)a1, a2);
  v48[0] = 0;
  v48[1] = 0;
  sub_10003415C((uint64_t)v48, a1 + 320);
  v7 = *(_QWORD *)(a1 + 584);
  if (!v7)
    goto LABEL_12;
  v8 = (uint64_t *)(a1 + 584);
  v9 = a1 + 584;
  do
  {
    v10 = *(unsigned __int16 *)(v7 + 32);
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = (uint64_t *)v7;
    else
      v12 = (uint64_t *)(v7 + 8);
    if (v11)
      v9 = v7;
    v7 = *v12;
  }
  while (*v12);
  if ((uint64_t *)v9 != v8 && *(unsigned __int16 *)(v9 + 32) <= a2)
  {
    v14 = sub_1003D9E10(a1 + 576, &v49);
    sub_100034264((uint64_t)v48);
    v15 = (id)qword_1009999B0;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F78C(v6, (uint64_t)buf);
      v16 = v51 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v52 = 136446466;
      v53 = v16;
      v54 = 1024;
      v55 = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Received disconnection indication on device %{public}s reason %d", v52, 0x12u);
      if (v51 < 0)
        operator delete(*(void **)buf);
    }

    v17 = v14[2];
    *(_DWORD *)buf = 0;
    *(_DWORD *)v52 = 0;
    v47 = 0;
    v18 = sub_100444BF0(v6, buf, v52, (_DWORD *)&v47 + 1, &v47);
    v19 = *(_DWORD *)(v6 + 1156);
    if (v19)
      v19 = *(_DWORD *)(v6 + 1160) / v19;
    v20 = *(_DWORD *)(v6 + 1148);
    if (v20)
      v20 = *(_DWORD *)(v6 + 1152) / v20;
    if (*(_BYTE *)(v6 + 1114))
      v21 = v19;
    else
      v21 = 128;
    if (*(_BYTE *)(v6 + 1114))
      v22 = v20;
    else
      v22 = -1;
    sub_100501D14(v18, a3, *(int *)v52, SHIDWORD(v47), v17, v21, v22);
    v23 = sub_1000438A4();
    v24 = sub_1003335A8(v23);
    if ((_DWORD)v24 && *(_BYTE *)(v6 + 1114))
      sub_100501DC0(v24, v6);
    v25 = sub_10003BE44();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 384))(v25) & 1) != 0
      || (v26 = sub_100027F68(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26)))
    {
      sub_100034188((uint64_t)v48);
      v27 = *v8;
      if (!*v8)
        goto LABEL_46;
      v28 = a1 + 584;
      do
      {
        v29 = *(unsigned __int16 *)(v27 + 32);
        v30 = v29 >= v49;
        if (v29 >= v49)
          v31 = (uint64_t *)v27;
        else
          v31 = (uint64_t *)(v27 + 8);
        if (v30)
          v28 = v27;
        v27 = *v31;
      }
      while (*v31);
      if ((uint64_t *)v28 != v8 && v49 >= *(unsigned __int16 *)(v28 + 32))
        v32 = *(unsigned __int16 *)(v28 + 64);
      else
LABEL_46:
        v32 = 0;
      sub_100034264((uint64_t)v48);
      if ((_DWORD)v32)
      {
        v46 = 0;
        sub_100043758(&v46);
        v33 = sub_10019ACEC(v32);
        sub_10004339C(&v46);
        v34 = sub_100065478();
        (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v34 + 560))(v34, v33, v32);
        v35 = sub_100065478();
        (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v35 + 536))(v35, v33, v32);
        v36 = sub_10006BBEC();
        v44[0] = _NSConcreteStackBlock;
        v44[1] = 3221225472;
        v44[2] = sub_100501E34;
        v44[3] = &unk_10092D5B8;
        v45 = v32;
        sub_100041A34(v36, v44);
        sub_100043728(&v46);
      }
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*v14 + 40))(*v14, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)*v14 + 48))(*v14);
    *((_BYTE *)v14 + 72) = 0;
    v37 = (void *)v14[10];
    if (v37)
      free(v37);
    v14[10] = 0;
    sub_100034188((uint64_t)v48);
    sub_100505E8C(a1 + 576, &v49);
    sub_100034264((uint64_t)v48);
    v38 = *(unsigned __int16 *)(a1 + 560);
    if (v38 == v49)
      LOWORD(v38) = 0;
    *(_WORD *)(a1 + 560) = v38;
    sub_10048257C(a1, v6, 0);
    if (*(_BYTE *)(a1 + 563))
    {
      v39 = sub_10006BBEC();
      v43[0] = _NSConcreteStackBlock;
      v43[1] = 3221225472;
      v43[2] = sub_100501E9C;
      v43[3] = &unk_100917378;
      v43[4] = a1;
      sub_100041A34(v39, v43);
    }
    v40 = sub_10006BBEC();
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_100501EA4;
    v42[3] = &unk_100917378;
    v42[4] = a1;
    sub_100041A34(v40, v42);
  }
  else
  {
LABEL_12:
    v13 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v49;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "No session for handle %d, likely because the interrupt channel failed to establish", buf, 8u);
    }
  }
  return sub_100034234((uint64_t)v48);
}

void sub_100501CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_100034234((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_100501D14(uint64_t a1, int a2, int a3, int a4, uint64_t a5, int a6, char a7)
{
  dispatch_queue_global_t global_queue;
  NSObject *v14;
  _QWORD v15[5];
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;

  global_queue = dispatch_get_global_queue(0, 0);
  v14 = objc_claimAutoreleasedReturnValue(global_queue);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10050485C;
  v15[3] = &unk_100920450;
  v16 = a4;
  v17 = a3;
  v15[4] = a5;
  v20 = a7;
  v18 = a6;
  v19 = a2;
  dispatch_async(v14, v15);

}

void sub_100501DC0(uint64_t a1, uint64_t a2)
{
  dispatch_queue_global_t global_queue;
  NSObject *v4;
  _QWORD block[5];

  global_queue = dispatch_get_global_queue(0, 0);
  v4 = objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100504AE4;
  block[3] = &unk_100917378;
  block[4] = a2;
  dispatch_async(v4, block);

}

void sub_100501E34(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v2 + 1048))(v2, *(unsigned __int16 *)(a1 + 32), 1, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FD8F8();
  }
}

void sub_100501E9C(uint64_t a1)
{
  sub_100500A94(*(_QWORD *)(a1 + 32));
}

_QWORD *sub_100501EA4(uint64_t a1)
{
  return sub_1005010B4(*(os_unfair_lock_s **)(a1 + 32));
}

_BYTE *sub_100501EAC(_QWORD *a1, unint64_t a2, int a3)
{
  int v6;
  NSObject *v7;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v21;
  char v22;
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  int v26;

  v6 = sub_1004821D4(a1, a2);
  v22 = 0;
  sub_100043758(&v22);
  if (v6)
  {
    if (a3)
    {
      v7 = (id)qword_1009999B0;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(a2, __p);
        sub_1006FDA14();
      }
LABEL_22:

      return sub_100043728(&v22);
    }
    if (qword_10097B1B0 != -1)
      dispatch_once(&qword_10097B1B0, &stru_100934BB8);
    (*(void (**)(void *, unint64_t))(*(_QWORD *)off_10097B1A8 + 40))(off_10097B1A8, a2);
    if (sub_1004FF2F0(a1, a2, v6))
    {
      v11 = qword_1009999B0;
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
        sub_1006FD9A8(v11, v12, v13, v14, v15, v16, v17, v18);
      sub_10015F590(v6);
    }
  }
  else
  {
    v8 = (id)qword_1009999B0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v9 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v24 = v9;
      v25 = 1024;
      v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HID Host handle for device %{public}s is %d. Responding to delayed incoming connection request", buf, 0x12u);
      if (v21 < 0)
        operator delete(__p[0]);
    }

    v10 = sub_10015D5B8(a2 + 128);
    if (!v10)
    {
      v7 = (id)qword_1009999B0;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(a2, __p);
        sub_1006FD958();
      }
      goto LABEL_22;
    }
    sub_1004FF6F4(a1, a2, *(unsigned __int16 *)(v10 + 192), a3, 1);
    if (a3)
      sub_10048183C((uint64_t)a1, a2, a3);
  }
  return sub_100043728(&v22);
}

void sub_100502108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  sub_100043728(&a15);
  _Unwind_Resume(a1);
}

_BYTE *sub_100502148(uint64_t a1, unint64_t a2, int a3)
{
  return sub_100501EAC((_QWORD *)(a1 - 264), a2, a3);
}

void sub_100502150(_QWORD *a1, int a2)
{
  unsigned __int8 *v3;
  int v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  const char *v10;

  v3 = (unsigned __int8 *)sub_1004822D0(a1, a2);
  v4 = sub_10015F590(a2);
  v5 = (id)qword_1009999B0;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v3)
    {
      sub_10043E5F8((uint64_t)v3, __p);
      if (v8 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v10 = (const char *)v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Remote unplugging virtual cable to device %{public}s", buf, 0xCu);
      if (v8 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 136446210;
      v10 = "NULL";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Remote unplugging virtual cable to device %{public}s", buf, 0xCu);
    }
  }

  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_100934AF8);
  sub_1005B8744((uint64_t)off_100978148, v3);
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FD130();
  }
}

void sub_1005022EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100502304(_QWORD *a1, unsigned int a2, int a3, int a4)
{
  if (a3 && os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
  {
    sub_1006FDABC();
    if (a4)
      goto LABEL_4;
LABEL_8:
    sub_1004FF560(a1, a2);
    return;
  }
  if (!a4)
    goto LABEL_8;
LABEL_4:
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
    sub_1006FDA5C();
  sub_10015F590(a2);
}

void sub_1005023A4(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5, int a6, uint64_t a7)
{
  NSObject *v14;
  const char *v15;
  const char *v16;
  NSObject *v17;
  int v18;
  int v19;
  unsigned int v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;

  v14 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_INFO))
  {
    v15 = "no";
    v21 = 1024;
    v19 = 67109890;
    if (a5)
      v16 = "yes";
    else
      v16 = "no";
    v20 = a2;
    v22 = a4;
    if (a6)
      v15 = "yes";
    v23 = 2082;
    v24 = v16;
    v25 = 2082;
    v26 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Received input report indication: handle=%d, length=%d, first=%{public}s, final=%{public}s", (uint8_t *)&v19, 0x22u);
  }
  if (*(_BYTE *)(a7 + 9))
  {
    v17 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEBUG))
    {
      v18 = *(_DWORD *)(a7 + 12);
      v19 = 67109632;
      v20 = a2;
      v21 = 1024;
      v22 = a4;
      v23 = 1024;
      LODWORD(v24) = v18;
      _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "attrs BTCLK: handle=%d, length=%d, BTCLK=%08x", (uint8_t *)&v19, 0x14u);
    }
  }
  sub_1004FDB80(a1, a2, 2u);
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  sub_1004FEC5C(qword_10097ADB0, a2, a3, a4);
}

uint64_t sub_100502578(uint64_t a1, int a2, char a3)
{
  if (!a2)
    return dword_100741F64[a3 & 0xF];
  if (a2 == 2604)
    return 3758097110;
  return 3758097084;
}

uint64_t sub_1005025A8(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;

  v8 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_INFO))
  {
    v12[0] = 67109632;
    v12[1] = a2;
    v13 = 1024;
    v14 = a4;
    v15 = 1024;
    v16 = a5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Received output report confirmation: handle=%d, length=%d, status=%{bluetooth:OI_STATUS}u", (uint8_t *)v12, 0x14u);
  }
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  if (a5 == 2604)
    v9 = -536870186;
  else
    v9 = -536870212;
  if (a5)
    v10 = v9;
  else
    v10 = 0;
  return sub_1004FF084(qword_10097ADB0, a2, a5 == 0, v10);
}

void sub_1005026C4()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Received boot-mode keyboard report", v1, 2u);
  }
}

uint64_t sub_100502728(uint64_t a1, unsigned __int16 a2, int a3, int a4, uint64_t a5, unsigned int a6, int a7, int a8)
{
  NSObject *v15;
  _BOOL8 v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD v22[2];
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;

  v15 = qword_1009999B0;
  v16 = os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_INFO);
  if (v16)
  {
    v17 = "no";
    v22[0] = 67109890;
    v22[1] = a4;
    if (a7)
      v18 = "yes";
    else
      v18 = "no";
    v23 = 1024;
    v24 = a6;
    if (a8)
      v17 = "yes";
    v25 = 2082;
    v26 = v18;
    v27 = 2082;
    v28 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Received get report confirmation: reportType=%d, length=%d, first=%{public}s, final=%{public}s", (uint8_t *)v22, 0x22u);
  }
  if (a3)
  {
    v16 = os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR);
    if (v16)
      sub_1006FDAE8();
  }
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  v19 = qword_10097ADB0;
  v20 = sub_100502578(v16, 0, a3);
  return sub_1004FEF7C(v19, a2, a3 == 0, v20, a5, a6);
}

uint64_t sub_1005028C8(uint64_t a1, int a2, int a3, _BYTE *a4, int a5, int a6)
{
  NSObject *v12;
  uint64_t **i;
  unsigned int v14;
  uint64_t *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint8_t v22[8];
  _QWORD v23[2];
  unsigned __int16 v24;
  uint8_t buf[16];
  __int128 v26;

  v24 = a2;
  v12 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v26) = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Received set report confirmation: handle=%d, handshake=%d, status=%d", buf, 0x14u);
  }
  v23[0] = 0;
  v23[1] = 0;
  sub_10003415C((uint64_t)v23, a1 + 320);
  for (i = *(uint64_t ***)(a1 + 584); i; i = (uint64_t **)*i)
  {
    v14 = *((unsigned __int16 *)i + 16);
    if (v24 >= v14)
    {
      if (v14 >= v24)
      {
        v15 = sub_1003D9E10(a1 + 576, &v24);
        *(_OWORD *)buf = 0u;
        v26 = 0u;
        buf[0] = *((_BYTE *)v15 + 32);
        *(_DWORD *)&buf[2] = *(_DWORD *)((char *)v15 + 34);
        *(_QWORD *)&v26 = v15[6];
        BYTE9(v26) = *((_BYTE *)v15 + 57);
        if ((_QWORD)v26)
          operator new[]();
        BYTE8(v26) = 0;
        if (sub_1004FC21C((uint64_t)buf) == 1 && !a3 && !a6)
        {
          v16 = qword_1009999B0;
          if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v22 = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "HID Perf Mode is running", v22, 2u);
          }
          *((_BYTE *)v15 + 64) = 1;
        }
        break;
      }
      ++i;
    }
  }
  sub_100034264((uint64_t)v23);
  if (a3)
  {
    v17 = os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR);
    if ((_DWORD)v17)
      sub_1006FDAE8();
  }
  else if (*(_WORD *)(a1 + 560) && *(unsigned __int16 *)(a1 + 560) == v24)
  {
    if (a5 == 1)
    {
      if (*a4 != 65)
        goto LABEL_29;
    }
    else if (a5 != 2 || *a4 != 64 || a4[1] != 3)
    {
      goto LABEL_29;
    }
    *(_WORD *)(a1 + 560) = 0;
    memset(buf, 0, sizeof(buf));
    sub_10003415C((uint64_t)buf, a1 + 448);
    sub_1002A9188((pthread_cond_t *)(a1 + 512));
    v17 = sub_100034234((uint64_t)buf);
  }
LABEL_29:
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  v18 = qword_10097ADB0;
  v19 = v24;
  v20 = sub_100502578(v17, a6, a3);
  sub_1004FF084(v18, v19, (a3 | a6) == 0, v20);
  return sub_100034234((uint64_t)v23);
}

void sub_100502BF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100034234((uint64_t)va1);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100502C2C(_QWORD *a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t result;
  _DWORD v7[2];

  v4 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received idle indication on handle %d", (uint8_t *)v7, 8u);
  }
  v5 = sub_10003BE44();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 408))(v5);
  if ((_DWORD)result)
    return sub_1004FD864(a1, a2, 3u);
  return result;
}

void sub_100502CFC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  NSObject *v8;
  void **v9;
  const char *v10;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  void **v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100934B58);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v14) = *(_WORD *)(a2 + 4);
  v7 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  if (v7)
  {
    v8 = (id)qword_1009999B0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v7, __p);
      if (v12 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      v10 = "good";
      *(_DWORD *)buf = 136446722;
      if (a4)
        v10 = "poor";
      v14 = v9;
      v15 = 2080;
      v16 = v10;
      v17 = 1024;
      v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device %{public}s identified with %s sniff interval %u", buf, 0x1Cu);
      if (v12 < 0)
        operator delete(__p[0]);
    }

    sub_10044D298(v7, a4);
  }
}

void sub_100502E7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100502E94(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int16 v25;

  v8 = sub_10019AE90(a2);
  v9 = sub_1004FF1E8(a1, v8);
  v10 = sub_10019AEA4(a2);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100934B58);
  v24 = *(_DWORD *)a2;
  v25 = *(_WORD *)(a2 + 4);
  v11 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v24, 1);
  if (v9)
  {
    v12 = *(_QWORD *)(a1 + 584);
    if (!v12)
      goto LABEL_26;
    v13 = (unsigned __int16 *)(a1 + 584);
    v14 = (unsigned __int16 *)(a1 + 584);
    do
    {
      v15 = *(unsigned __int16 *)(v12 + 32);
      v16 = v15 >= v9;
      if (v15 >= v9)
        v17 = (uint64_t *)v12;
      else
        v17 = (uint64_t *)(v12 + 8);
      if (v16)
        v14 = (unsigned __int16 *)v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 != v13 && v9 >= v14[16])
    {
      if (a4 == 2)
      {
        v14[68] = a3;
        if (v11)
          sub_100455800(v11, a3);
        v18 = sub_10003BE44();
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 384))(v18) & 1) != 0
          || (v19 = sub_100027F68(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19)))
        {
          v20 = sub_100065478();
          v21 = sub_10019AE90(a2);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 560))(v20, v10, v21);
          v22 = sub_100065478();
          v23 = sub_10019AE90(a2);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 544))(v22, v23, v10, 1, a3);
        }
      }
      v14[69] = a4;
    }
    else
    {
LABEL_26:
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
        sub_1006FDB48();
    }
  }
}

void sub_10050304C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  void **v9;
  uint64_t v10;
  _QWORD v11[5];
  void *__p;
  char v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  void **v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;

  v8 = (id)qword_1009999B0;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10064960C(((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5]);
    v9 = v13 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315906;
    v15 = "void BT::HIDProfile::modeChangedInd(const OI_BD_ADDR *, uint16_t, uint8_t)";
    v16 = 2080;
    v17 = v9;
    v18 = 1024;
    v19 = 625 * a3;
    v20 = 1024;
    v21 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s: Sniff interval changed: device %s, interval %u us, mode %d", buf, 0x22u);
    if (v13 < 0)
      operator delete(__p);
  }

  sub_100502E94(a1, (uint64_t)a2, a3, a4);
  if (a3 <= 0x18 && a4 == 2)
  {
    v10 = sub_10006BBEC();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100503214;
    v11[3] = &unk_100917378;
    v11[4] = a1;
    sub_100041A34(v10, v11);
  }
}

void sub_1005031FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_100503214(uint64_t a1)
{
  return sub_1005010B4(*(os_unfair_lock_s **)(a1 + 32));
}

void sub_10050321C(uint64_t a1)
{
  _QWORD *v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  uint8_t v10[14];
  unsigned __int16 v11;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = sub_1004821D4(v2, *(_QWORD *)(a1 + 40));
  v11 = v3;
  v4 = v2[73];
  if (!v4)
    goto LABEL_21;
  v5 = v2 + 73;
  do
  {
    v6 = *(unsigned __int16 *)(v4 + 32);
    v7 = v6 >= v3;
    if (v6 >= v3)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (v7)
      v5 = (_QWORD *)v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != v2 + 73 && v3 >= *((unsigned __int16 *)v5 + 16))
  {
    if (!*((_WORD *)sub_1003D9E10((uint64_t)(v2 + 72), &v11) + 49))
    {
      v9 = qword_1009999B0;
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Active mode HID detected, marking as Poor", v10, 2u);
      }
      sub_10044D298(*(_QWORD *)(a1 + 40), 1);
    }
  }
  else
  {
LABEL_21:
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FDB74();
  }
}

void sub_100503324(os_unfair_lock_s *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  v5 = v3;
  if (qword_1009778C8 == -1)
  {
    v4 = v3;
  }
  else
  {
    dispatch_once(&qword_1009778C8, &stru_100934BF8);
    v4 = v5;
  }
  if (sub_10065E0D4((uint64_t)off_1009778C0, v4))
    sub_1005010B4(a1);

}

void sub_10050339C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1005033B0(uint64_t a1, void *a2)
{
  sub_100503324((os_unfair_lock_s *)(a1 - 312), a2);
}

void sub_1005033B8(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[5];
  uint8_t buf[16];

  v3 = a2;
  v4 = sub_1005010B4((os_unfair_lock_s *)a1);
  if (*(_BYTE *)(a1 + 563) && sub_10050349C((uint64_t)v4, v3))
  {
    v5 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Low latency LE Game Controller disconnected", buf, 2u);
    }
    v6 = sub_10006BBEC();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1005035A0;
    v7[3] = &unk_100917378;
    v7[4] = a1;
    sub_100041A34(v6, v7);
  }

}

void sub_10050348C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t sub_10050349C(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  unint64_t v4;
  void *__p[2];
  char v7;

  v2 = a2;
  if (!v2)
    goto LABEL_9;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100934BF8);
  if (sub_10065E0D4((uint64_t)off_1009778C0, v2))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100934BF8);
    v3 = off_1009778C0;
    sub_100091AE8(__p, "IsXboxBLEController");
    v4 = sub_10000628C((uint64_t)v3, v2, (uint64_t)__p);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
LABEL_9:
    v4 = 0;
  }

  return v4;
}

void sub_100503578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1005035A0(uint64_t a1)
{
  sub_100500A94(*(_QWORD *)(a1 + 32));
}

void sub_1005035A8(uint64_t a1, void *a2)
{
  sub_1005033B8(a1 - 296, a2);
}

void sub_1005035B0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v8[5];
  uint8_t buf[8];
  _QWORD v10[5];

  v3 = a2;
  v4 = sub_10006BBEC();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1005036C0;
  v10[3] = &unk_100917378;
  v10[4] = a1;
  sub_100041A34(v4, v10);
  if (*(_BYTE *)(a1 + 563) && sub_10050349C(v5, v3))
  {
    v6 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Low latency LE Game Controller Connection Params Updated", buf, 2u);
    }
    v7 = sub_10006BBEC();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1005036C8;
    v8[3] = &unk_100917378;
    v8[4] = a1;
    sub_100041A34(v7, v8);
  }

}

void sub_1005036B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1005036C0(uint64_t a1)
{
  return sub_1005010B4(*(os_unfair_lock_s **)(a1 + 32));
}

void sub_1005036C8(uint64_t a1)
{
  sub_100500A94(*(_QWORD *)(a1 + 32));
}

void sub_1005036D0(uint64_t a1, void *a2)
{
  sub_1005035B0(a1 - 296, a2);
}

void sub_1005036EC(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_100503780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1005037A8(unsigned __int8 *a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return (**a2)(a2, a1[32], a1[33], a1[34], a1[35], a1[36], a1[37], a1[38]);
}

void sub_1005037D8(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD v6[5];
  uint8_t buf[4];
  int v8;

  v4 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Console mode enablement changed to %d", buf, 8u);
  }
  *(_BYTE *)(a1 + 563) = a2;
  v5 = sub_10006BBEC();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005038C4;
  v6[3] = &unk_100917378;
  v6[4] = a1;
  sub_100041A34(v5, v6);
}

void sub_1005038C4(uint64_t a1)
{
  sub_100500A94(*(_QWORD *)(a1 + 32));
}

void sub_1005038CC(uint64_t a1, int a2)
{
  sub_1005037D8(a1 - 304, a2);
}

void sub_1005038D4(_QWORD *a1, unint64_t a2, int a3)
{
  int v6;
  uint64_t *v7;
  int v8;
  NSObject *v9;
  void **v10;
  _BYTE *v11;
  NSObject *v12;
  void **v13;
  void *__p[2];
  char v15;
  unsigned __int16 v16;
  uint8_t buf[4];
  void **v18;

  v6 = sub_1004821D4(a1, a2);
  v16 = v6;
  if (v6)
  {
    v7 = sub_1003D9E10((uint64_t)(a1 + 72), &v16);
    v8 = *((_DWORD *)v7 + 25);
    if (a3)
    {
      if (v8)
        return;
      v9 = (id)qword_1009999B0;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        if (v15 >= 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Enabling Low Latency Gaming connection policy for %{public}s", buf, 0xCu);
        if (v15 < 0)
          operator delete(__p[0]);
      }

      LODWORD(__p[0]) = 0;
      buf[0] = 0;
      sub_100043758(buf);
      sub_100254EF0((uint64_t)nullsub_429, a2 + 128, (__int128 *)&unk_10097B628, (int *)__p);
      *((_DWORD *)v7 + 25) = __p[0];
      sub_10004339C(buf);
      v11 = buf;
    }
    else
    {
      if (!v8)
        return;
      v12 = (id)qword_1009999B0;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v13 = v15 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v18 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Removing Low Latency Gaming connection policy for %{public}s", buf, 0xCu);
        if (v15 < 0)
          operator delete(__p[0]);
      }

      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      sub_1002553C4(*((_DWORD *)v7 + 25));
      *((_DWORD *)v7 + 25) = 0;
      sub_10004339C(__p);
      v11 = __p;
    }
    sub_100043728(v11);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
  {
    sub_1006FDBA0();
  }
}

void sub_100503B04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100503B44(uint64_t a1, void *a2, int a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  _BOOL4 v7;
  int v8;
  __int16 v9;
  void *v10;
  unsigned __int16 v11;
  int v12;
  int v13;
  uint8_t buf[24];

  v4 = a2;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100934B18);
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v5 = off_1009778A0;
  sub_100030BCC(buf, v4);
  if (!sub_10063B1EC((uint64_t)v5, buf, (_WORD *)&v13 + 1, &v13, (_WORD *)&v12 + 1, &v12, &v11))
  {
    v6 = qword_1009999B0;
    v7 = os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT);
    if (a3)
    {
      if (v7)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Enabling LE Low Latency Gaming connection policy", buf, 2u);
      }
      v8 = 6;
    }
    else
    {
      if (v7)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing LE Low Latency Gaming connection policy", buf, 2u);
      }
      v8 = 12;
    }
    if (v8 != HIWORD(v13))
    {
      v11 = 720;
      v9 = v13;
      if ((unsigned __int16)v13 >= 4u)
        v9 = 4;
      LOWORD(v13) = v9;
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_100934B18);
      v10 = off_1009778A0;
      sub_100030BCC(buf, v4);
      sub_10063AA04((uint64_t)v10, buf, 4, 4, (unsigned __int16)v13, v13, v11, (float)v8 * 1.25, (float)v8 * 1.25, (float)v8 * 1.25);
    }
  }

}

void sub_100503D2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100503D4C(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  unsigned int v8;
  NSObject *v9;
  uint64_t **v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int v15;
  int v16;
  int v17;
  NSObject *v18;
  unsigned __int16 v20;
  char v21;
  uint8_t buf[4];
  unsigned int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v21 = 0;
  sub_100043758(&v21);
  v8 = sub_1004FF28C((uint64_t)a1, a2);
  v20 = v8;
  v9 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    v23 = v8;
    v24 = 1024;
    v25 = a3;
    v26 = 1024;
    v27 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Getting report - {handle: 0x%x, type %d, ID: %d}", buf, 0x14u);
  }
  if (sub_1004FDB80(a1, v8, 3u) != 335)
  {
    if (sub_10015FA48(v8, a3, a4, 0xFFFF))
      goto LABEL_18;
    v12 = 1;
    goto LABEL_21;
  }
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
    sub_1006FDC58();
  v10 = (uint64_t **)a1[73];
  if (!v10)
  {
LABEL_11:
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FDC2C();
    goto LABEL_18;
  }
  while (1)
  {
    v11 = *((unsigned __int16 *)v10 + 16);
    if (v8 >= v11)
      break;
LABEL_10:
    v10 = (uint64_t **)*v10;
    if (!v10)
      goto LABEL_11;
  }
  if (v11 < v8)
  {
    ++v10;
    goto LABEL_10;
  }
  v13 = sub_1003D9E10((uint64_t)(a1 + 72), &v20);
  v14 = v13;
  v15 = *((unsigned __int8 *)v13 + 72);
  if (*((_BYTE *)v13 + 72))
  {
    v16 = *((unsigned __int8 *)v13 + 74);
    v17 = *((_DWORD *)v13 + 19);
    v18 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109632;
      v23 = v15;
      v24 = 1024;
      v25 = v16;
      v26 = 1024;
      v27 = v17;
      _os_log_fault_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Get report queue already occupied - {isEntryValid %d, reportType %d, reportID %d}", buf, 0x14u);
    }
LABEL_18:
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FDBCC();
    v12 = 0;
  }
  else
  {
    *((_BYTE *)v13 + 74) = a3;
    *((_DWORD *)v13 + 19) = a4;
    v12 = 1;
    *((_BYTE *)v13 + 72) = 1;
    v13[11] = 0;
    v13[10] = (uint64_t)malloc_type_malloc(0, 0xFFED3218uLL);
    *((_BYTE *)v14 + 73) = 1;
  }
LABEL_21:
  sub_100043728(&v21);
  return v12;
}

void sub_100503FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100503FE4(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return sub_100503D4C((_QWORD *)(a1 - 256), a2, a3, a4);
}

uint64_t sub_100503FEC(_QWORD *a1, uint64_t a2, int a3, int a4, char *a5, size_t a6)
{
  int v12;
  NSObject *v13;
  uint64_t **v14;
  unsigned int v15;
  uint64_t **v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  NSObject *v21;
  uint64_t *v22;
  unsigned __int16 v23;
  BOOL v24;
  int v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  char v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v38;
  int v39;
  int v40;
  char v41[2];
  unsigned __int16 v42;
  __int16 v43;
  uint64_t v44;
  size_t v45;
  __int16 v46;
  uint8_t v47[8];
  _QWORD v48[2];
  unsigned __int16 v49;
  char v50;
  _BYTE buf[32];
  _BYTE v52[14];
  __int16 v53;
  uint64_t v54;

  v50 = 0;
  sub_100043758(&v50);
  v12 = sub_1004FF28C((uint64_t)a1, a2);
  v49 = v12;
  v13 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&buf[4] = v12;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = a4;
    *(_WORD *)&buf[20] = 2048;
    *(_QWORD *)&buf[22] = a6;
    *(_WORD *)&buf[30] = 1040;
    *(_DWORD *)v52 = a6;
    *(_WORD *)&v52[4] = 2098;
    *(_QWORD *)&v52[6] = a5;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Set report {handle: %d, type: %d, ID: %d, size: %zu, {%{public}.*P}", buf, 0x2Eu);
  }
  if (sub_1004FDB80(a1, v49, 4u) != 335)
  {
    v48[0] = 0;
    v48[1] = 0;
    sub_10003415C((uint64_t)v48, (uint64_t)(a1 + 40));
    v16 = (uint64_t **)a1[73];
    if (!v16)
      goto LABEL_46;
    while (1)
    {
      v17 = *((unsigned __int16 *)v16 + 16);
      if (v49 >= v17)
      {
        if (v17 >= v49)
        {
          v22 = sub_1003D9E10((uint64_t)(a1 + 72), &v49);
          *(_OWORD *)buf = 0u;
          v23 = v49;
          buf[0] = 5;
          *(_WORD *)&buf[2] = v49;
          *(_WORD *)&buf[4] = 255;
          *(_OWORD *)&buf[16] = a6;
          if (a5)
            v24 = a6 == 0;
          else
            v24 = 1;
          if (!v24)
            operator new[]();
          buf[24] = 0;
          if (*((_BYTE *)v22 + 64))
          {
            v25 = sub_1004FC21C((uint64_t)buf);
            v26 = qword_1009999B0;
            if (v25 == 2)
            {
              if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)v47 = 0;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "HID Perf Mode is stopping", v47, 2u);
              }
              *((_BYTE *)v22 + 64) = 0;
              goto LABEL_33;
            }
            if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
              sub_1006FD250();
            v33 = 1;
          }
          else
          {
LABEL_33:
            v46 = 1;
            v41[0] = 5;
            v42 = v23;
            v43 = 255;
            v44 = 0;
            v45 = a6;
            if (a6)
              operator new[]();
            LOBYTE(v46) = 0;
            sub_10050568C((uint64_t)(v22 + 4), (uint64_t)v41);
            if ((_BYTE)v46 && v44)
              operator delete[]();
            v33 = 0;
          }
          if ((v33 & 1) != 0)
          {
            sub_100034234((uint64_t)v48);
LABEL_55:
            v36 = 0;
            goto LABEL_56;
          }
LABEL_46:
          sub_100034264((uint64_t)v48);
          if (a3 == 2)
          {
            v34 = sub_10015FCD8(v49, 2, a5, (unsigned __int16)a6);
          }
          else
          {
            if (a3 != 3)
            {
              sub_100034234((uint64_t)v48);
              goto LABEL_53;
            }
            v34 = sub_10015FB5C(v49, 3, a5, (unsigned __int16)a6);
          }
          v35 = v34;
          sub_100034234((uint64_t)v48);
          if (!v35)
            goto LABEL_51;
LABEL_53:
          if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
            sub_1006FDC84();
          goto LABEL_55;
        }
        ++v16;
      }
      v16 = (uint64_t **)*v16;
      if (!v16)
        goto LABEL_46;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
    sub_1006FDD10();
  v14 = (uint64_t **)a1[73];
  if (!v14)
  {
LABEL_11:
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FDCE4();
    goto LABEL_53;
  }
  while (1)
  {
    v15 = *((unsigned __int16 *)v14 + 16);
    if (v49 >= v15)
      break;
LABEL_10:
    v14 = (uint64_t **)*v14;
    if (!v14)
      goto LABEL_11;
  }
  if (v15 < v49)
  {
    ++v14;
    goto LABEL_10;
  }
  v18 = sub_1003D9E10((uint64_t)(a1 + 72), &v49);
  v19 = v18;
  v20 = *((unsigned __int8 *)v18 + 72);
  if (*((_BYTE *)v18 + 72))
  {
    v21 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_FAULT))
    {
      v38 = v19[11];
      v39 = *((_DWORD *)v19 + 19);
      v40 = *((unsigned __int8 *)v19 + 74);
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = v20;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v40;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&buf[16] = v39;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v38;
      _os_log_fault_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Set report queue already occupied - {isEntryValid %d, reportType %d, reportID %d, size %d}", buf, 0x1Au);
    }
    goto LABEL_53;
  }
  *((_BYTE *)v18 + 74) = a3;
  *((_DWORD *)v18 + 19) = a4;
  *((_BYTE *)v18 + 72) = 1;
  v18[11] = a6;
  v27 = malloc_type_malloc(a6, 0xFFED3218uLL);
  v19[10] = (uint64_t)v27;
  memcpy(v27, a5, a6);
  *((_BYTE *)v19 + 73) = 0;
  v28 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    v30 = v19[10];
    v29 = v19[11];
    v31 = *((_DWORD *)v19 + 19);
    v32 = *((unsigned __int8 *)v19 + 74);
    *(_DWORD *)buf = 136316674;
    *(_QWORD *)&buf[4] = "set";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v49;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v32;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v31;
    *(_WORD *)&buf[30] = 2048;
    *(_QWORD *)v52 = v29;
    *(_WORD *)&v52[8] = 1040;
    *(_DWORD *)&v52[10] = v29;
    v53 = 2098;
    v54 = v30;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Queued %s report {handle: 0x%x, type: %d, ID: %d, size: %zu, {%{public}.*P}", buf, 0x38u);
  }
LABEL_51:
  v36 = 1;
LABEL_56:
  sub_100043728(&v50);
  return v36;
}

void sub_10050459C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  char v20;
  char v22;

  if (v19)
    v22 = v20;
  else
    v22 = 1;
  if ((v22 & 1) == 0)
    operator delete[]();
  sub_100034234((uint64_t)&a14);
  sub_100043728(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100504630(uint64_t a1, uint64_t a2, int a3, int a4, char *a5, size_t a6)
{
  return sub_100503FEC((_QWORD *)(a1 - 256), a2, a3, a4, a5, a6);
}

uint64_t sub_100504638(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  NSObject *v7;
  uint64_t v8;
  char v10;
  uint8_t buf[4];
  unsigned int v12;
  __int16 v13;
  unsigned int v14;

  v10 = 0;
  sub_100043758(&v10);
  v6 = sub_1004FF28C(a1, a2);
  v7 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v12 = v6;
    v13 = 1024;
    v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Send Hid Control {handle: %d, controlOP: %d}", buf, 0xEu);
  }
  if ((a3 - 3) > 1u || sub_10015F594(v6, a3, (uint64_t)sub_1004FDB18))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FDD3C();
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  sub_100043728(&v10);
  return v8;
}

void sub_100504778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100504794(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_100504638(a1 - 256, a2, a3);
}

_BYTE *sub_10050479C(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  char v8;
  uint8_t buf[16];

  v4 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Clearing SDP record", buf, 2u);
  }
  v8 = 0;
  sub_100043758(&v8);
  v5 = sub_1004FF28C((uint64_t)a1, a2);
  v6 = sub_1004822D0(a1, v5);
  sub_10043E330(v6);
  return sub_100043728(&v8);
}

void sub_100504840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

_BYTE *sub_100504854(uint64_t a1, uint64_t a2)
{
  return sub_10050479C((_QWORD *)(a1 - 256), a2);
}

uint64_t sub_10050485C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  NSObject *v9;
  uint64_t result;
  uint64_t v11;
  _DWORD v12[5];
  mach_timebase_info info;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  v2 = *(_DWORD *)(a1 + 44) | (*(_DWORD *)(a1 + 40) << 16);
  v3 = mach_continuous_time() - *(_QWORD *)(a1 + 32);
  info = 0;
  mach_timebase_info(&info);
  v4 = v3 * info.numer / info.denom / 0x3B9ACA00;
  v5 = *(char *)(a1 + 56);
  if (v5 >= 11)
    LOBYTE(v5) = 10 * (*(_BYTE *)(a1 + 56) / 0xAu);
  v6 = (char)v5;
  v8 = *(_DWORD *)(a1 + 48);
  v7 = *(_DWORD *)(a1 + 52);
  v12[0] = v2;
  v12[1] = v8;
  v12[2] = (char)v5;
  v12[3] = v4;
  v12[4] = v7;
  v9 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110144;
    v15 = v2;
    v16 = 1024;
    v17 = v8;
    v18 = 1024;
    v19 = v6;
    v20 = 1024;
    v21 = v4;
    v22 = 1024;
    v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Posting HID Session Metric: Pid|Vid %x, RSSI Average %d, PER Average %d%%, Duration %ds, Disconnection Reason %d", buf, 0x20u);
  }
  result = sub_100065478();
  if (result)
  {
    v11 = sub_100065478();
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v11 + 160))(v11, v12);
  }
  return result;
}

void sub_1005049D4(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  uint8_t v7[16];
  uint8_t buf[16];

  if (sub_10043E93C(*(unsigned __int8 **)(a1 + 32)))
  {
    v2 = sub_1000438A4();
    v3 = *(unsigned __int8 **)(a1 + 32);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v2 + 336))(v2, 1, 1, ((unint64_t)v3[128] << 40) | ((unint64_t)v3[129] << 32) | ((unint64_t)v3[130] << 24) | ((unint64_t)v3[131] << 16) | ((unint64_t)v3[132] << 8) | v3[133], 1);
    v5 = qword_1009999B0;
    v6 = os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        *(_WORD *)v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to enable phy stats", v7, 2u);
      }
    }
    else
    {
      if (v6)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Enabled phy stats", buf, 2u);
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1114) = 1;
    }
  }
}

void sub_100504AE4(uint64_t a1)
{
  int v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;

  v2 = sub_10043E93C(*(unsigned __int8 **)(a1 + 32));
  v3 = qword_1009999B0;
  if (v2)
  {
    v4 = (id)qword_1009999B0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = sub_10019AE90(*(_QWORD *)(a1 + 32) + 128);
      v10 = 67109120;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Disabling phy stats for HCI LM Handle 0x%02X", (uint8_t *)&v10, 8u);
    }

    v6 = sub_1000438A4();
    v7 = *(unsigned __int8 **)(a1 + 32);
    (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v6 + 336))(v6, 0, 1, ((unint64_t)v7[128] << 40) | ((unint64_t)v7[129] << 32) | ((unint64_t)v7[130] << 24) | ((unint64_t)v7[131] << 16) | ((unint64_t)v7[132] << 8) | v7[133], 1);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1114) = 0;
    v8 = (id)qword_1009999B0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_100934B58);
      v9 = sub_1004727F0((uint64_t)off_1009778E0);
      v10 = 67109120;
      v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "disablePhyStats, current number of devices %d", (uint8_t *)&v10, 8u);
    }

  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "disablePhyStats: device is not paired!!!", (uint8_t *)&v10, 2u);
  }
}

void sub_100504CC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100504CE8()
{
  return 5;
}

void sub_100504D04(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_100504DB8(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100504DB8(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100504FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100504FF4(uint64_t a1, int a2)
{
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  return sub_1004FFA28((_QWORD *)qword_10097ADB0, a1, a2);
}

void sub_10050504C(int a1, uint64_t a2)
{
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  sub_1004FFD24((_QWORD *)qword_10097ADB0, a1, a2);
}

void sub_1005050A4(__int16 a1, int a2)
{
  dispatch_queue_global_t global_queue;
  NSObject *v5;
  _QWORD block[4];
  int v7;
  __int16 v8;

  global_queue = dispatch_get_global_queue(0, 0);
  v5 = objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100505590;
  block[3] = &unk_1009186B0;
  v8 = a1;
  v7 = a2;
  dispatch_async(v5, block);

}

void sub_100505128(int a1)
{
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  sub_100502150((_QWORD *)qword_10097ADB0, a1);
}

uint64_t sub_100505178(uint64_t a1, int a2, int a3, uint64_t a4, unsigned int a5, int a6, int a7)
{
  unsigned __int16 v13;

  v13 = a1;
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  return sub_100502728(a1, v13, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_100505208(int a1, int a2, _BYTE *a3, int a4, int a5)
{
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  return sub_1005028C8(qword_10097ADB0, a1, a2, a3, a4, a5);
}

void sub_100505288(unsigned int a1, int a2, int a3)
{
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  sub_100502304((_QWORD *)qword_10097ADB0, a1, a2, a3);
}

void sub_1005052F0(unsigned int a1, uint64_t a2, unsigned int a3, int a4, int a5, uint64_t a6)
{
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  sub_1005023A4((_QWORD *)qword_10097ADB0, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100505378(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v5;
  int v6;

  v5 = a3;
  v6 = a1;
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  return sub_1005025A8(a1, v6, a3, v5, a4);
}

void sub_1005053D8()
{
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  sub_1005026C4();
}

uint64_t sub_100505418(unsigned int a1)
{
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  return sub_100502C2C((_QWORD *)qword_10097ADB0, a1);
}

void sub_100505468(int *a1, __int16 a2, char a3)
{
  dispatch_queue_global_t global_queue;
  NSObject *v6;
  _QWORD v7[4];
  __int16 v8;
  int v9;
  __int16 v10;
  char v11;

  v9 = *a1;
  v10 = *((_WORD *)a1 + 2);
  global_queue = dispatch_get_global_queue(0, 0);
  v6 = objc_claimAutoreleasedReturnValue(global_queue);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1005055E4;
  v7[3] = &unk_100918888;
  v8 = a2;
  v11 = a3;
  dispatch_async(v6, v7);

}

void sub_1005054FC(int *a1, __int16 a2, char a3)
{
  dispatch_queue_global_t global_queue;
  NSObject *v6;
  _QWORD v7[4];
  __int16 v8;
  int v9;
  __int16 v10;
  char v11;

  v9 = *a1;
  v10 = *((_WORD *)a1 + 2);
  global_queue = dispatch_get_global_queue(0, 0);
  v6 = objc_claimAutoreleasedReturnValue(global_queue);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100505634;
  v7[3] = &unk_100918888;
  v8 = a2;
  v11 = a3;
  dispatch_async(v6, v7);

}

uint64_t sub_100505590(uint64_t a1)
{
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  return sub_10050185C(qword_10097ADB0, *(unsigned __int16 *)(a1 + 36), *(_DWORD *)(a1 + 32));
}

void sub_1005055E4(uint64_t a1)
{
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  sub_100502CFC(a1, a1 + 34, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_100505634(uint64_t a1)
{
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934BD8);
  sub_10050304C(qword_10097ADB0, (unsigned __int8 *)(a1 + 34), *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10050568C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  if (*(_QWORD *)(a1 + 8) && *(_BYTE *)(a1 + 24))
    operator delete[]();
  if (v3)
    operator new[]();
  *(_BYTE *)(a1 + 24) = 0;
  return a1;
}

uint64_t sub_100505738(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 24) = 1;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  if (v3)
    operator new[]();
  *(_BYTE *)(a1 + 24) = 0;
  return a1;
}

void sub_1005057C0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1005057C0(a1, *a2);
    sub_1005057C0(a1, a2[1]);
    if (*((_BYTE *)a2 + 96))
    {
      if (a2[10])
        operator delete[]();
    }
    operator delete(a2);
  }
}

void sub_100505824(id a1)
{
  operator new();
}

void sub_100505864()
{
  operator delete();
}

void sub_100505888(id a1)
{
  operator new();
}

void sub_1005058C8()
{
  operator delete();
}

void sub_1005058EC(id a1)
{
  operator new();
}

void sub_10050592C()
{
  operator delete();
}

char *sub_100505950(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100505B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100505B8C(id a1)
{
  operator new();
}

void sub_100505BCC()
{
  operator delete();
}

void sub_100505BF0(id a1)
{
  operator new();
}

void sub_100505C30()
{
  operator delete();
}

void sub_100505C54(id a1)
{
  operator new();
}

void sub_100505C94()
{
  operator delete();
}

uint64_t *sub_100505CB8(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t **v5;
  unsigned int v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v10[3];

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = *((unsigned __int16 *)v4 + 16);
        if (v6 >= v8)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    memset(v10, 0, sizeof(v10));
    sub_100505D70(a1, a3, v10);
    sub_100004078((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    return v10[0];
  }
  return (uint64_t *)v7;
}

__n128 sub_100505D70@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  __n128 result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x98uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  *((_WORD *)v7 + 16) = *(_WORD *)a2;
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v7 + 50) = *(_OWORD *)(a2 + 18);
  sub_100505738((uint64_t)(v7 + 72), a2 + 40);
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v7 + 120) = *(_OWORD *)(a2 + 88);
  result = *(__n128 *)(a2 + 104);
  *(__n128 *)(v7 + 136) = result;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100505E10(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  *v1 = 0;
  sub_100505E2C(v2, v3);
  _Unwind_Resume(a1);
}

void sub_100505E2C(uint64_t a1, _QWORD *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((_BYTE *)__p + 96))
    {
      if (__p[10])
        operator delete[]();
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_100505E8C(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(unsigned __int16 *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int16 *)(v4 + 32))
    return 0;
  sub_100505EF0((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_100505EF0(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_1000040CC(a1, (uint64_t *)a2);
  if (*(_BYTE *)(a2 + 96) && *(_QWORD *)(a2 + 80))
    operator delete[]();
  operator delete((void *)a2);
  return v3;
}

void sub_100505F44(id a1)
{
  operator new();
}

void sub_100505F84()
{
  operator delete();
}

void sub_100505FA8(id a1)
{
  operator new();
}

void sub_100505FE8()
{
  operator delete();
}

void sub_10050600C(id a1)
{
  operator new();
}

void sub_10050604C()
{
  operator delete();
}

void sub_100506088(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 352))(v2))
  {
    if (qword_10097B180 != -1)
      dispatch_once(&qword_10097B180, &stru_100934D40);
    sub_100507D78((uint64_t)off_10097B178 + 176, a1);
    if (qword_100978130 != -1)
      dispatch_once(&qword_100978130, &stru_100934D60);
    sub_1002B4110((uint64_t)off_100978128 + 80, a1 + 8);
    sub_100506140(a1);
  }
}

void sub_100506140(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  uint8_t *v10;
  uint8_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  NSObject *v26;
  void *v27;
  unsigned __int8 v28;
  id v29;
  void *v30;
  unsigned __int8 v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[4];
  __CFString *v52;
  uint64_t v53;
  id v54;
  id v55;
  int v56;
  int v57;
  int v58;
  void *v59[2];
  char v60;
  int v61;
  _BYTE __p[12];
  char v63;
  uint8_t buf[8];
  uint64_t v65;
  uint64_t v66;

  if (*(_QWORD *)(a1 + 24))
    return;
  v2 = CFSTR("/var/mobile/Library/ExposureNotification/Advertisements/");
  v3 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3))
  {
    v61 = 0;
    v4 = sub_100027F68();
    sub_100091AE8(buf, "ContactTracing");
    sub_100091AE8(__p, "databaseFlushInterval");
    v5 = (*(uint64_t (**)(uint64_t, uint8_t *, _BYTE *, int *))(*(_QWORD *)v4 + 88))(v4, buf, __p, &v61);
    if (v63 < 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v66) < 0)
      operator delete(*(void **)buf);
    if (v5)
    {
      v6 = qword_100999940;
      if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v61;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "overriding contact tracing database flush interval: %d", buf, 8u);
      }
      *(_DWORD *)(a1 + 40) = v61;
    }
    *(_QWORD *)buf = 0;
    v65 = 0;
    v66 = 0;
    v7 = sub_100027F68();
    sub_100091AE8(__p, "ContactTracing");
    sub_100091AE8(v59, "databaseFolderPath");
    v8 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, uint8_t *))(*(_QWORD *)v7 + 56))(v7, __p, v59, buf);
    if (v60 < 0)
      operator delete(v59[0]);
    if (v63 < 0)
    {
      operator delete(*(void **)__p);
      if (v8)
        goto LABEL_15;
    }
    else if (v8)
    {
LABEL_15:
      v9 = qword_100999940;
      if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_INFO))
      {
        v10 = buf;
        if (v66 < 0)
          v10 = *(uint8_t **)buf;
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "overriding contact tracing database folder path: %s", __p, 0xCu);
      }
      if (v66 >= 0)
        v11 = buf;
      else
        v11 = *(uint8_t **)buf;
      v2 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
      goto LABEL_25;
    }
    v2 = CFSTR("/var/mobile/Library/ExposureNotification/Advertisements/");
LABEL_25:
    v58 = 0;
    v12 = sub_100027F68();
    sub_100091AE8(__p, "ContactTracing");
    sub_100091AE8(v59, "databaseCacheCount");
    v13 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v12 + 88))(v12, __p, v59, &v58);
    if (v60 < 0)
      operator delete(v59[0]);
    if (v63 < 0)
      operator delete(*(void **)__p);
    v14 = v58;
    if (v58)
      v15 = v13;
    else
      v15 = 0;
    if (v15 == 1)
    {
      v16 = qword_100999940;
      if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__p = 67109120;
        *(_DWORD *)&__p[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "overriding contact tracing database cache count: %d", __p, 8u);
        v14 = v58;
      }
      *(_DWORD *)(a1 + 44) = v14;
    }
    v57 = 0;
    v17 = sub_100027F68();
    sub_100091AE8(__p, "ContactTracing");
    sub_100091AE8(v59, "scanTimestampOffset");
    v18 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v17 + 88))(v17, __p, v59, &v57);
    if (v60 < 0)
      operator delete(v59[0]);
    if (v63 < 0)
      operator delete(*(void **)__p);
    if (v18)
    {
      v19 = qword_100999940;
      if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__p = 67109120;
        *(_DWORD *)&__p[4] = v57;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "overriding contact tracing scantimestamp offset: %d", __p, 8u);
      }
      *(_DWORD *)(a1 + 52) = v57;
    }
    v56 = 0;
    v20 = sub_100027F68();
    sub_100091AE8(__p, "ContactTracing");
    sub_100091AE8(v59, "storageFullAlertInterval");
    v21 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v20 + 88))(v20, __p, v59, &v56);
    if (v60 < 0)
      operator delete(v59[0]);
    if (v63 < 0)
      operator delete(*(void **)__p);
    if (v21)
    {
      v22 = qword_100999940;
      if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__p = 67109120;
        *(_DWORD *)&__p[4] = v56;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "overriding contact tracing storage full alert interval: %d", __p, 8u);
      }
      *(_DWORD *)(a1 + 48) = v56;
    }
    sub_1005069C4();
    if (SHIBYTE(v66) < 0)
      operator delete(*(void **)buf);
  }
  v23 = sub_100027F68();
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 192))(v23);
  *(_BYTE *)(a1 + 56) = v24;
  if (v24)
  {
    v25 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 176))(v25))
    {
      v26 = qword_100999940;
      if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "enabling insecure database path", buf, 2u);
      }
    }

    v2 = CFSTR("/var/mobile/Library/Logs/Bluetooth/ENDatabase");
  }
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v55 = 0;
  v28 = objc_msgSend(v27, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v2, 1, 0, &v55);
  v29 = v55;

  if ((v28 & 1) != 0)
  {
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v2));
    v54 = v29;
    v31 = objc_msgSend(v30, "setResourceValue:forKey:error:", &__kCFBooleanTrue, NSURLIsExcludedFromBackupKey, &v54);
    v32 = v54;

    v29 = v32;
    if ((v31 & 1) != 0)
    {
      v33 = sub_100475A60();
      v51[0] = _NSConcreteStackBlock;
      v51[1] = 3221225472;
      v51[2] = sub_100506BD0;
      v51[3] = &unk_100918868;
      v53 = a1;
      v52 = v2;
      sub_100023D84(v33, v51);
      *(_QWORD *)(a1 + 32) = clock_gettime_nsec_np(_CLOCK_MONOTONIC);

    }
    else
    {
      v43 = qword_100999928;
      if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
        sub_1006FDD9C((uint64_t)v32, v43, v44, v45, v46, v47, v48, v49);
      v50 = sub_100065478();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 480))(v50, 1008);
    }

  }
  else
  {
    v34 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 176))(v34))
    {
      v35 = qword_100999940;
      if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_ERROR))
        sub_1006FDE04((uint64_t)v29, v35, v36, v37, v38, v39, v40, v41);
    }
    v42 = sub_100065478();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 480))(v42, 1007);
  }

}

void sub_100506844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

double sub_100506998(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_100934C78;
  *(_QWORD *)(a1 + 8) = &off_100934CA8;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)&result = 0x4C400000708;
  *(_OWORD *)(a1 + 40) = xmmword_100741FD0;
  *(_BYTE *)(a1 + 56) = 0;
  return result;
}

void sub_1005069C4()
{
  uint64_t v0;
  void **v1;
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  unsigned __int8 v7;
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  id v12;
  void *__p[2];
  uint64_t v14;
  uint8_t buf[4];
  id v16;

  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  v0 = sub_100038E50();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v0 + 168))(v0, __p);
  if (v14 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("/Library/ContactTracingDatabase")));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v5 = objc_msgSend(v4, "fileExistsAtPath:", v3);

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v12 = 0;
    v7 = objc_msgSend(v6, "removeItemAtPath:error:", v3, &v12);
    v8 = v12;

    if ((v7 & 1) == 0)
    {
      v9 = qword_100999928;
      if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
      {
        v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedDescription")));
        v11 = objc_msgSend(v10, "UTF8String");
        *(_DWORD *)buf = 136315138;
        v16 = v11;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed to cleanup original database directory (%s)", buf, 0xCu);

      }
    }

  }
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
}

void sub_100506B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id sub_100506BD0(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = objc_msgSend(objc_alloc((Class)ENAdvertisementDatabase), "initWithDatabaseFolderPath:cacheCount:errorMetricReporter:", *(_QWORD *)(a1 + 32), *(unsigned int *)(v1 + 44), &stru_100934CD0);
  v3 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v2;

  if (!*(_BYTE *)(v1 + 56) && objc_msgSend(*(id *)(v1 + 24), "currentStoreType") == (id)1)
    objc_msgSend(*(id *)(v1 + 24), "mergeStoresFromFolderPath:", CFSTR("/var/mobile/Library/Logs/Bluetooth/ENDatabase"));
  LODWORD(v4) = *(_DWORD *)(v1 + 48);
  return objc_msgSend(*(id *)(v1 + 24), "setStorageFullAlertInterval:", (double)v4);
}

void sub_100506C50(id a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)&a2;
  v3 = sub_100065478();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 480))(v3, v2);
}

id sub_100506C7C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  int v7;
  id v8;

  v3 = a2;
  v4 = qword_100999940;
  if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138412290;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "purging advertisements older than %@", (uint8_t *)&v7, 0xCu);
  }
  v5 = objc_msgSend(*(id *)(a1 + 24), "purgeAdvertismentsSeenBeforeDate:", v3);

  return v5;
}

void sub_100506D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100506D5C()
{
  void *v0;
  unsigned int v1;
  NSObject *v2;
  void *v3;
  id v4;
  uint8_t v6[16];

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v1 = objc_msgSend(v0, "fileExistsAtPath:", CFSTR("/var/mobile/Library/Logs/Bluetooth/ENDatabase/sysdiagnose"));

  if (!v1)
    return 1;
  v2 = qword_100999940;
  if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "purging database clones", v6, 2u);
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v4 = objc_msgSend(v3, "removeItemAtPath:error:", CFSTR("/var/mobile/Library/Logs/Bluetooth/ENDatabase/sysdiagnose"), 0);

  return (uint64_t)v4;
}

void sub_100506E28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100506E3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 1;
  v2 = sub_100475A60();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100506EE8;
  v5[3] = &unk_100919528;
  v5[4] = &v6;
  v5[5] = a1;
  sub_100023D84(v2, v5);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_100506ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100506EE8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  __CFString *v4;

  v2 = *(_QWORD *)(a1 + 40);
  if ((sub_100506D5C() & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
      sub_1006FDE6C();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
  if (*(_BYTE *)(v2 + 56))
    v3 = CFSTR("/var/mobile/Library/ExposureNotification/Advertisements/");
  else
    v3 = CFSTR("/var/mobile/Library/Logs/Bluetooth/ENDatabase");
  v4 = v3;
  if ((+[ENAdvertisementDatabase purgeAllStoresInPath:](ENAdvertisementDatabase, "purgeAllStoresInPath:", v4) & 1) == 0)*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  if ((objc_msgSend(*(id *)(v2 + 24), "purgeAllStoresInActiveDatabasePath") & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;

}

void sub_100506FAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100506FBC(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_100475A60();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10050701C;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

id sub_10050701C(uint64_t a1)
{
  uint64_t v1;
  id result;

  v1 = *(_QWORD *)(a1 + 32);
  if (objc_msgSend(*(id *)(v1 + 24), "currentStoreType") != (id)1)
    objc_msgSend(*(id *)(v1 + 24), "switchToCentralStore");
  result = objc_msgSend(*(id *)(v1 + 24), "currentStoreType");
  if (result == (id)1)
  {
    result = objc_msgSend(*(id *)(v1 + 24), "temporaryStoresPresent");
    if ((_DWORD)result)
      result = objc_msgSend(*(id *)(v1 + 24), "mergeTemporaryStores");
    if (!*(_BYTE *)(v1 + 56))
      return objc_msgSend(*(id *)(v1 + 24), "mergeStoresFromFolderPath:", CFSTR("/var/mobile/Library/Logs/Bluetooth/ENDatabase"));
  }
  return result;
}

void sub_100507094(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;
  uint8_t buf[16];

  v3 = a2;
  v4 = qword_100999940;
  if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "xpc activity triggered database purge", buf, 2u);
  }
  v5 = sub_100475A60();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100507188;
  v7[3] = &unk_100918868;
  v9 = a1;
  v6 = v3;
  v8 = v6;
  sub_100023D84(v5, v7);

}

void sub_100507168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_100507188(uint64_t a1)
{
  if ((sub_100506C7C(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32)) & 1) == 0
    && os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
  {
    sub_1006FDEC4();
  }
  if ((sub_100506D5C() & 1) == 0 && os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
    sub_1006FDE98();
}

id sub_100507200(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  _QWORD v9[7];
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = sub_100062664;
  v15 = sub_1000623E8;
  v16 = 0;
  v6 = sub_100475A60();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1005072EC;
  v9[3] = &unk_100934CF8;
  v9[4] = &v11;
  v9[5] = a1;
  v10 = a2;
  v9[6] = a3;
  sub_100023D84(v6, v9);
  v7 = (id)v12[5];
  _Block_object_dispose(&v11, 8);

  return v7;
}

void sub_1005072CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_1005072EC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "createQuerySessionWithAttenuationThreshold:queue:error:", *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(sub_100475A60() + 8), *(_QWORD *)(a1 + 48));
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

uint64_t sub_100507348(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = sub_100475A60();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005073F0;
  v5[3] = &unk_100919528;
  v5[4] = &v6;
  v5[5] = a1;
  sub_100023D84(v2, v5);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1005073D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005073F0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "storedAdvertisementCount"));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(v2, "unsignedIntValue");

}

void sub_10050743C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100507450(uint64_t a1, void *a2, void *a3, __int16 a4, int a5, int a6, int a7, double a8)
{
  id v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint64_t v25;
  double v26;
  __int16 v27;
  __int16 v28;
  char v29;
  char v30;
  uint8_t buf[4];
  id v32;
  __int16 v33;
  id v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  double v44;
  __int16 v45;
  int v46;

  v15 = a2;
  v16 = a3;
  v17 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 184))(v17))
  {
    v18 = qword_100999940;
    if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138414082;
      v32 = v15;
      v33 = 2112;
      v34 = v16;
      v35 = 1024;
      v36 = (char)a4;
      v37 = 1024;
      v38 = SHIBYTE(a4);
      v39 = 1024;
      v40 = a5;
      v41 = 1024;
      v42 = a6;
      v43 = 2048;
      v44 = a8;
      v45 = 1024;
      v46 = a7;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "saving contact tracing advertisement data:%@ encryptedAEM:%@ avgRSSI:%d maxRSSI:%d reportCount:%d saturated:%d timestamp:%f deltaSinceLastStop:%d", buf, 0x3Eu);
    }
  }
  v19 = sub_100475A60();
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100507664;
  v22[3] = &unk_100934D20;
  v25 = a1;
  v26 = a8;
  v20 = v15;
  v23 = v20;
  v21 = v16;
  v24 = v21;
  v27 = a7;
  v28 = a4;
  v29 = a6;
  v30 = a5;
  sub_100041A34(v19, v22);

}

void sub_100507630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_100507664(uint64_t a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  id v5;
  id v6;
  __uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint8_t buf[4];
  __uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(double *)(a1 + 56);
  v4 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4))
    v3 = v3 + (double)*(int *)(v2 + 52);
  v5 = objc_alloc((Class)ENAdvertisement);
  LOBYTE(v12) = *(_BYTE *)(a1 + 69);
  v6 = objc_msgSend(v5, "initWithRPI:encryptedAEM:timestamp:scanInterval:typicalRSSI:maxRSSI:saturated:counter:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 64), *(char *)(a1 + 66), *(char *)(a1 + 67), *(unsigned __int8 *)(a1 + 68), v3, v12);
  objc_msgSend(*(id *)(v2 + 24), "saveContactTracingAdvertisement:", v6);
  v7 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  if (v7 > *(_QWORD *)(v2 + 32) + 1000000000 * (unint64_t)*(unsigned int *)(v2 + 40))
  {
    v8 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 176))(v8))
    {
      v9 = qword_100999940;
      if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(_QWORD *)(v2 + 32);
        v11 = *(_DWORD *)(v2 + 40);
        *(_DWORD *)buf = 134218496;
        v14 = v7;
        v15 = 2048;
        v16 = v10;
        v17 = 1024;
        v18 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "database flush interval hit flushTime:%llu lastFlush:%llu flushInterval:%u", buf, 0x1Cu);
      }
    }
    objc_msgSend(*(id *)(v2 + 24), "flushCache");
    *(_QWORD *)(v2 + 32) = v7;
  }

}

void sub_1005077E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100507808(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[9];

  if (a3 == 4)
  {
    v7[7] = v3;
    v7[8] = v4;
    v6 = sub_100475A60();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100507870;
    v7[3] = &unk_100917378;
    v7[4] = a1;
    sub_100023D84(v6, v7);
  }
}

__uint64_t sub_100507870(uint64_t a1)
{
  uint64_t v1;
  __uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  __uint64_t result;
  int v7;
  __uint64_t v8;
  __int16 v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  v3 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 176))(v3))
  {
    v4 = qword_100999940;
    if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(v1 + 32);
      v7 = 134218240;
      v8 = v2;
      v9 = 2048;
      v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "flush database due to power off flushTime:%llu lastFlush:%llu", (uint8_t *)&v7, 0x16u);
    }
  }
  objc_msgSend(*(id *)(v1 + 24), "flushCache");
  result = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  *(_QWORD *)(v1 + 32) = result;
  return result;
}

void sub_10050795C(uint64_t a1, uint64_t a2, int a3)
{
  sub_100507808(a1 - 8, a2, a3);
}

void sub_100507964(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_100475A60();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1005079C4;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100023D84(v2, v3);
}

void sub_1005079C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  int v11;
  id v12;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2))
  {
    v3 = qword_100999940;
    if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: ---------------- ContactTracing Database ----------------", (uint8_t *)&v11, 2u);
    }
  }
  v4 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4))
  {
    v5 = qword_100999940;
    if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 24), "storedAdvertisementCount"));
      v7 = objc_msgSend(v6, "intValue");
      v11 = 67109120;
      LODWORD(v12) = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: Record Count:%d", (uint8_t *)&v11, 8u);

    }
  }
  v8 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 176))(v8))
  {
    v9 = qword_100999940;
    if (os_log_type_enabled((os_log_t)qword_100999940, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(*(id *)(v1 + 24), "droppedAdvertisementCount");
      v11 = 134217984;
      v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump: Filtered Advertisements:%lu", (uint8_t *)&v11, 0xCu);
    }
  }
}

void sub_100507B5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_100507B74(uint64_t a1, std::string *a2)
{
  void *v4;
  unsigned __int8 v5;
  uint64_t v6;
  _BOOL8 v7;
  NSObject *v8;
  _QWORD v10[6];
  uint8_t buf[8];
  uint8_t *v12;
  uint64_t v13;
  char v14;

  if (!*(_BYTE *)(a1 + 56))
  {
    v8 = qword_100999928;
    v7 = 0;
    if (!os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_DEFAULT))
      return v7;
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "database clone not allowed", buf, 2u);
    return 0;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v5 = objc_msgSend(v4, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", CFSTR("/var/mobile/Library/Logs/Bluetooth/ENDatabase/sysdiagnose"), 1, 0, 0);

  if ((v5 & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
      sub_1006FDF1C();
    return 0;
  }
  *(_QWORD *)buf = 0;
  v12 = buf;
  v13 = 0x2020000000;
  v14 = 0;
  v6 = sub_100475A60();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100507D38;
  v10[3] = &unk_100919528;
  v10[4] = buf;
  v10[5] = a1;
  sub_100023D84(v6, v10);
  v7 = v12[24] != 0;
  if (v12[24])
  {
    std::string::assign(a2, "/var/mobile/Library/Logs/Bluetooth/ENDatabase/sysdiagnose");
  }
  else if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
  {
    sub_1006FDEF0();
  }
  _Block_object_dispose(buf, 8);
  return v7;
}

void sub_100507D14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100507D38(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "cloneDatabaseTo:", CFSTR("/var/mobile/Library/Logs/Bluetooth/ENDatabase/sysdiagnose"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100507D78(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_100507E00(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100507E00(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100508004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10050803C(id a1)
{
  operator new();
}

void sub_10050807C()
{
  operator delete();
}

void sub_1005080A0(id a1)
{
  operator new();
}

void sub_1005080E0()
{
  operator delete();
}

uint64_t sub_100508104(uint64_t a1)
{
  *(_QWORD *)sub_10048D2F0(a1, "HidService", 32) = &off_100934D90;
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934E88);
  sub_10048D5B0(a1, qword_10097ADB0);
  return a1;
}

void sub_100508178(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048D3E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100508190(uint64_t a1, _WORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  char *i;
  NSObject *v9;
  void **v10;
  uint64_t v11;
  NSObject *v12;
  const void *v14;
  void *v15;
  void *__p[2];
  char v17;
  char v18;
  char v19[15];
  char v20;
  char v21[15];
  char v22;
  char v23[15];
  char v24;
  char v25[15];
  char v26;
  char v27[15];
  int v28;
  int v29;
  void *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  _BYTE buf[18];
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  v33 = xmmword_100741FB0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v28 = 0;
  v29 = 0;
  if ((sub_1004442A0((uint64_t)a2, (uint64_t)&v33, 0x206u, &v30) & 1) == 0)
    goto LABEL_35;
  if (v30 == v31)
  {
LABEL_20:
    LODWORD(v6) = 0;
    v7 = 0;
    goto LABEL_21;
  }
  v3 = (char *)v30 + 2;
  while (1)
  {
    v4 = v3 - 2;
    if (*(v3 - 2) != 6)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
        sub_1006FDFBC(&v26, v27);
      goto LABEL_19;
    }
    if (*(_WORD *)v3 != 2)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
        sub_1006FDFBC(&v24, v25);
      goto LABEL_19;
    }
    v5 = *(_QWORD *)(v3 + 6);
    if (*(_BYTE *)v5 != 1)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
        sub_1006FDFBC(&v22, v23);
      goto LABEL_19;
    }
    if (*(_DWORD *)(v5 + 8) != 34)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
        sub_1006FDFE4(&v20, v21);
      goto LABEL_19;
    }
    if (*(_BYTE *)(v5 + 16) == 4)
      break;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006FDFBC(&v18, v19);
LABEL_19:
    v3 += 16;
    if (v4 + 16 == v31)
      goto LABEL_20;
  }
  v6 = *(unsigned __int16 *)(v5 + 18);
  v14 = *(const void **)(v5 + 24);
  v15 = malloc_type_malloc(v6, 0xC3617C00uLL);
  v7 = v15;
  if (v15)
    memcpy(v15, v14, v6);
  else
    LODWORD(v6) = 0;
LABEL_21:
  for (i = (char *)v30; i != v31; i += 16)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_OWORD *)buf = *(_OWORD *)i;
    sub_1002C3FB4(buf);
  }
  if (!v7)
  {
LABEL_35:
    v11 = 1;
    goto LABEL_42;
  }
  sub_10050863C((uint64_t)a2, 0x201u, (_WORD *)&v29 + 1);
  sub_10050863C((uint64_t)a2, 0x205u, &v29);
  sub_10050863C((uint64_t)a2, 0x202u, (_WORD *)&v28 + 1);
  sub_10050863C((uint64_t)a2, 0x203u, &v28);
  v9 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8((uint64_t)a2, __p);
    v10 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = HIWORD(v29);
    v35 = 1024;
    v36 = (unsigned __int16)v29;
    v37 = 1024;
    v38 = HIWORD(v28);
    v39 = 1024;
    v40 = (unsigned __int16)v28;
    v41 = 1024;
    v42 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Caching HID info for %s: vendorID=0x%x vendorIDSource=0x%x productID=0x%x version=0x%x descriptorSize=%u", buf, 0x2Au);
    if (v17 < 0)
      operator delete(__p[0]);
  }
  if (v6 > 0x1000)
  {
    v12 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v6;
      _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Read HID descriptor size %u from SDP which is too large!", buf, 8u);
      v12 = qword_1009999B0;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_1006FDF48(v6, v12);
    v11 = 1;
  }
  else
  {
    sub_10003994C(buf, v7, v6);
    sub_100444970(a2, (uint64_t)buf, SHIWORD(v29), v29, SHIWORD(v28), v28);
    *(_QWORD *)buf = &off_100918258;
    if (*(_QWORD *)&buf[8])
      sub_100056AAC(*(unsigned int **)&buf[8]);
    v11 = 0;
  }
  free(v7);
LABEL_42:
  if (v30)
  {
    v31 = (char *)v30;
    operator delete(v30);
  }
  return v11;
}

void sub_1005085E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10050863C(uint64_t a1, unsigned int a2, _WORD *a3)
{
  int v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  void *__p;
  _OWORD *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 131075;
  v11[1] = 4608;
  __p = 0;
  v9 = 0;
  v10 = 0;
  v4 = sub_1004442A0(a1, (uint64_t)v11, a2, &__p);
  v5 = __p;
  if (v4)
  {
    v6 = v9;
    if ((char *)v9 - (_BYTE *)__p == 16 && *((_WORD *)__p + 1) == 2)
      *a3 = *((_DWORD *)__p + 2);
    if (v5 != v6)
    {
      do
      {
        v7 = *v5;
        sub_1002C3FB4(&v7);
        ++v5;
      }
      while (v5 != v9);
      v5 = __p;
    }
  }
  if (v5)
  {
    v9 = v5;
    operator delete(v5);
  }
}

void sub_1005086F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100508718(uint64_t a1, _WORD *a2)
{
  _BOOL8 v4;
  _BOOL4 v5;
  _BOOL4 v6;
  int v7;
  NSObject *v8;
  unsigned int v9;
  __int128 v11;
  int v12;
  char v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[15];

  v15 = xmmword_100741FB0;
  v14 = 0;
  memset(v17, 0, sizeof(v17));
  v13 = 0;
  v12 = 0;
  if (sub_100444790((uint64_t)a2))
  {
    v4 = sub_100442444((uint64_t)a2, &v15, 4u);
    if (v4)
    {
      sub_100508190(v4, a2);
LABEL_11:
      v7 = 4;
      goto LABEL_16;
    }
LABEL_15:
    v7 = 1;
    goto LABEL_16;
  }
  v5 = sub_100452168((uint64_t)a2, v17, &v13);
  if (v13)
    v6 = v5;
  else
    v6 = 0;
  if (!v6)
  {
    if (!sub_10043FA40((uint64_t)a2, &v14))
    {
      v7 = 0;
      goto LABEL_16;
    }
    if ((v14 & 0x1F00) == 0x500)
      goto LABEL_11;
    v8 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Service is not capable because major is not peripheral", (uint8_t *)&v11, 2u);
    }
    goto LABEL_15;
  }
  v7 = 4 * (sub_10018F848((unsigned __int8 *)v17, 4388, &v12) == 0);
LABEL_16:
  v9 = *(_DWORD *)(a1 + 32);
  v16 = 0;
  sub_10004AD30((uint64_t)&v16);
  *(_QWORD *)&v11 = (int)v16;
  *((_QWORD *)&v11 + 1) = SWORD2(v16);
  return sub_1004415B0((uint64_t)a2, v9, v7, &v11, 0);
}

void sub_1005088D4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  NSObject *v9;
  void **v10;
  void *__p[2];
  char v12;
  int v13;
  int v14;
  char v15;
  __int128 v16;
  uint8_t buf[4];
  void **v18;
  _OWORD v19[15];

  v16 = xmmword_100741FB0;
  memset(v19, 0, sizeof(v19));
  v15 = 0;
  v13 = 0;
  v14 = 0;
  *a3 = 0;
  sub_1004449C8(a2);
  if (sub_10043FA40(a2, &v13))
  {
    if ((v13 & 0x1F00) != 0x500)
      return;
    if ((v13 & 0x40) != 0)
      goto LABEL_14;
    if ((v13 & 0x80) == 0)
    {
      if (sub_10043F854(a2) != 26)
        return;
      goto LABEL_14;
    }
    v5 = sub_10003BE44();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 360))(v5) & 1) != 0
      || (v6 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 424))(v6)))
    {
      v7 = qword_1009999B0;
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043F6EC(a2, (uint64_t)__p);
        if (v12 >= 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Allowing HID Pointing Device %s", buf, 0xCu);
        if (v12 < 0)
          operator delete(__p[0]);
      }
      goto LABEL_14;
    }
    v9 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F78C(a2, (uint64_t)__p);
      v10 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Rejecting HID Pointing Device %s", buf, 0xCu);
      if (v12 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    if (sub_100444790(a2))
    {
      if (!sub_100442444(a2, &v16, 4u))
        return;
      goto LABEL_14;
    }
    if (sub_100452168(a2, v19, &v15) && v15 && !sub_10018F848((unsigned __int8 *)v19, 4388, &v14)
      || sub_10043F854(a2) == 24)
    {
LABEL_14:
      *a3 = 1;
    }
  }
}

uint64_t sub_100508B5C(uint64_t a1, unint64_t a2, const char *a3)
{
  uint64_t v5;
  char v7;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
    return 105;
  if (strcmp(a3, "BT_KEY_HID_VIRTUAL_CABLE_UNPLUG"))
    return 2;
  v7 = 0;
  sub_100043758(&v7);
  if (qword_10097ADB8 != -1)
    dispatch_once(&qword_10097ADB8, &stru_100934E88);
  v5 = sub_1004FCB40(qword_10097ADB0, a2);
  sub_100043728(&v7);
  return v5;
}

void sub_100508C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100508C20(uint64_t a1, _BYTE *a2, int a3, char a4)
{
  uint64_t result;

  sub_100444FA0(a2, a3 != 0, a4);
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_100934EA8);
  result = sub_1004392D8((uint64_t)off_100978188, (uint64_t)a2, 32);
  if ((_DWORD)result)
  {
    if (qword_10097ADB8 != -1)
      dispatch_once(&qword_10097ADB8, &stru_100934E88);
    return sub_1004FEC08((_QWORD *)qword_10097ADB0, (unint64_t)a2);
  }
  return result;
}

void sub_100508CD4(uint64_t a1)
{
  sub_10048D3E0(a1);
  operator delete();
}

void sub_100508CF8(id a1)
{
  operator new();
}

void sub_100508D38()
{
  operator delete();
}

void sub_100508D5C(id a1)
{
  operator new();
}

void sub_100508D9C()
{
  operator delete();
}

uint64_t sub_100508DC0(unint64_t *a1)
{
  uint64_t result;

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100934EC8);
  result = sub_10000B174(qword_100977B48, *a1);
  if (!(_DWORD)result)
    *a1 = 0;
  return result;
}

void sub_100508E1C(id a1)
{
  operator new();
}

void sub_100508E5C()
{
  operator delete();
}

void sub_100508E80(uint64_t a1)
{
  *(_QWORD *)a1 = off_100934EF8;
  *(_QWORD *)(a1 + 8) = off_100934F48;
  *(_QWORD *)(a1 + 16) = &off_100934F68;
  sub_1000160D0(a1 + 24);
  *(_BYTE *)(a1 + 88) = 0;
  operator new();
}

void sub_100508EFC()
{
  operator delete();
}

_QWORD *sub_100508F34(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_100934EF8;
  a1[1] = off_100934F48;
  a1[2] = &off_100934F68;
  v2 = a1[12];
  if (v2)
  {
    sub_100475CC8(v2);
    operator delete();
  }
  sub_100069BDC(a1 + 3);
  return a1;
}

void sub_100508F98(_QWORD *a1)
{
  sub_100508F34(a1);
  operator delete();
}

uint64_t sub_100508FBC(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 24);
  sub_100475868(*(_QWORD *)(a1 + 96), QOS_CLASS_USER_INITIATED);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100934F88);
  sub_10042381C(qword_100977B48 + 8, a1 + 8);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100934FA8);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 16);
  return sub_100034234((uint64_t)v3);
}

void sub_10050907C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100509090(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 24);
  sub_100475C60(*(_QWORD *)(a1 + 96));
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100934F88);
  sub_100069060(qword_100977B48 + 8, a1 + 8);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100934FA8);
  sub_100069060((uint64_t)off_100977A50 + 64, a1 + 16);
  return sub_100034234((uint64_t)v3);
}

void sub_10050914C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100509160(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 24);
  *(_BYTE *)(a1 + 88) = 1;
  return sub_100034234((uint64_t)v3);
}

uint64_t sub_1005091A4(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 8);
  *(_BYTE *)(a1 + 72) = 1;
  return sub_100034234((uint64_t)v3);
}

uint64_t sub_1005091E8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v5[16];
  uint8_t buf[8];
  uint64_t v7;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CallbackManager::stackWillStop enter", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v7 = 0;
  sub_10003415C((uint64_t)buf, a1 + 24);
  *(_BYTE *)(a1 + 88) = 0;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CallbackManager::stackWillStop exit", v5, 2u);
  }
  return sub_100034234((uint64_t)buf);
}

uint64_t sub_1005092B0(uint64_t a1)
{
  return sub_1005091E8(a1 - 16);
}

uint64_t sub_1005092B8(uint64_t a1, _BYTE *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 24);
  sub_10006BB10(*(_QWORD *)(a1 + 96), a2);
  return sub_100034234((uint64_t)v5);
}

void sub_100509304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100509320(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[2];

  v3 = a2;
  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 24);
  sub_100041A34(*(_QWORD *)(a1 + 96), v3);
  sub_100034234((uint64_t)v4);

}

void sub_100509374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100509394(id a1)
{
  operator new();
}

void sub_1005093D4()
{
  operator delete();
}

void sub_1005093F8(id a1)
{
  operator new();
}

void sub_100509438()
{
  operator delete();
}

uint64_t sub_10050945C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  int v12;
  std::string::size_type v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int64_t v31;
  _BYTE *v32;
  void *v33;
  _BYTE *v34;
  _QWORD v36[2];
  char v37;

  v36[0] = 0;
  v36[1] = 0;
  sub_10003415C((uint64_t)v36, a1);
  v4 = *(unsigned __int8 *)(a1 + 103);
  if (*(char *)(a1 + 103) < 0)
  {
    v5 = *(_BYTE **)(a1 + 80);
    v6 = *(_QWORD *)(a1 + 88);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v5 = (_BYTE *)(a1 + 80);
    v6 = *(unsigned __int8 *)(a1 + 103);
    if (!*(_BYTE *)(a1 + 103))
      goto LABEL_17;
  }
  v7 = &v5[v6];
  v8 = v5;
  v9 = v7;
  do
  {
    if (*v8 == 45)
    {
      v10 = &_mh_execute_header.magic + 1;
      while (v10 != 8)
      {
        if (&v8[v10] == v7)
          goto LABEL_15;
        v11 = v8[v10];
        v12 = aCentral_1[v10++];
        if (v11 != v12)
          goto LABEL_7;
      }
      v9 = v8;
    }
LABEL_7:
    ++v8;
  }
  while (v8 != v7);
LABEL_15:
  if (v9 != v7)
  {
    v13 = v9 - v5;
    if (v9 - v5 != -1)
      goto LABEL_63;
  }
LABEL_17:
  if ((v4 & 0x80) == 0)
  {
    v14 = (_BYTE *)(a1 + 80);
    v15 = *(unsigned __int8 *)(a1 + 103);
    if (!*(_BYTE *)(a1 + 103))
      goto LABEL_33;
LABEL_21:
    v16 = &v14[v15];
    v17 = v14;
    v18 = v16;
    do
    {
      if (*v17 == 45)
      {
        v19 = &_mh_execute_header.magic + 1;
        while (v19 != 11)
        {
          if (&v17[v19] == v16)
            goto LABEL_31;
          v20 = v17[v19];
          v21 = aPeripheral_1[v19++];
          if (v20 != v21)
            goto LABEL_23;
        }
        v18 = v17;
      }
LABEL_23:
      ++v17;
    }
    while (v17 != v16);
LABEL_31:
    if (v18 != v16)
    {
      v13 = v18 - v14;
      if (v18 - v14 != -1)
        goto LABEL_63;
    }
    goto LABEL_33;
  }
  v14 = *(_BYTE **)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 88);
  if (v15)
    goto LABEL_21;
LABEL_33:
  if ((v4 & 0x80) != 0)
  {
    v22 = *(_BYTE **)(a1 + 80);
    v23 = *(_QWORD *)(a1 + 88);
    if (!v23)
    {
LABEL_49:
      if ((v4 & 0x80) != 0)
      {
        v30 = *(_QWORD *)(a1 + 80);
        v31 = *(_QWORD *)(a1 + 88);
      }
      else
      {
        v30 = a1 + 80;
        v31 = *(unsigned __int8 *)(a1 + 103);
      }
      if (v31 >= 1)
      {
        v32 = (_BYTE *)(v30 + v31);
        v33 = (void *)v30;
        do
        {
          v34 = memchr(v33, 45, v31);
          if (!v34)
            break;
          if (*v34 == 45)
          {
            if (v34 != v32)
            {
              v13 = (std::string::size_type)&v34[-v30];
              if (&v34[-v30] != (_BYTE *)-1)
                goto LABEL_63;
            }
            break;
          }
          v33 = v34 + 1;
          v31 = v32 - (_BYTE *)v33;
        }
        while (v32 - (_BYTE *)v33 >= 1);
      }
      if ((v4 & 0x80) != 0)
        v13 = *(_QWORD *)(a1 + 88);
      else
        v13 = v4;
      goto LABEL_63;
    }
  }
  else
  {
    v22 = (_BYTE *)(a1 + 80);
    v23 = *(unsigned __int8 *)(a1 + 103);
    if (!*(_BYTE *)(a1 + 103))
      goto LABEL_49;
  }
  v24 = &v22[v23];
  v25 = v22;
  v26 = v24;
  do
  {
    if (*v25 == 45)
    {
      v27 = &_mh_execute_header.magic + 1;
      while (v27 != 13)
      {
        if (&v25[v27] == v24)
          goto LABEL_47;
        v28 = v25[v27];
        v29 = aScalablepipe[v27++];
        if (v28 != v29)
          goto LABEL_39;
      }
      v26 = v25;
    }
LABEL_39:
    ++v25;
  }
  while (v25 != v24);
LABEL_47:
  if (v26 == v24)
    goto LABEL_49;
  v13 = v26 - v22;
  if (v26 - v22 == -1)
    goto LABEL_49;
LABEL_63:
  std::string::basic_string(a2, (const std::string *)(a1 + 80), 0, v13, (std::allocator<char> *)&v37);
  return sub_100034234((uint64_t)v36);
}

void sub_100509708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10050971C(uint64_t a1, const std::string *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  std::string::operator=((std::string *)(a1 + 80), a2);
  return sub_100034234((uint64_t)v5);
}

void sub_100509768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10050977C(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  _QWORD *v6;
  void **v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  _QWORD *v17;
  __int16 v18;
  void **v19;

  v2 = *(unsigned __int8 *)(a1 + 72);
  v3 = qword_1009997E8;
  v4 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4)
      return;
    v5 = *(_QWORD *)(a1 + 64);
    v6 = (_QWORD *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0)
      v6 = (_QWORD *)*v6;
    sub_100013A3C(a1, __p);
    if (v13 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 134218498;
    v15 = v5;
    v16 = 2082;
    v17 = v6;
    v18 = 2082;
    v19 = v7;
    v8 = "statedump: SM: %p Detached \"%{public}s\" type:\"%{public}s\"";
  }
  else
  {
    if (!v4)
      return;
    v9 = *(_QWORD *)(a1 + 64);
    v10 = (_QWORD *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0)
      v10 = (_QWORD *)*v10;
    sub_100013A3C(a1, __p);
    if (v13 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    *(_DWORD *)buf = 134218498;
    v15 = v9;
    v16 = 2082;
    v17 = v10;
    v18 = 2082;
    v19 = v11;
    v8 = "statedump: SM: %p Attached \"%{public}s\" type:\"%{public}s\"";
  }
  _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v8, buf, 0x20u);
  if (v13 < 0)
    operator delete(__p[0]);
}

uint64_t sub_1005098FC(uint64_t a1)
{
  unint64_t v3;
  unint64_t *v4;

  *(_QWORD *)a1 = off_100935008;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1000160D0(a1 + 40);
  *(_WORD *)(a1 + 106) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  *(_QWORD *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 104) = getpid();
  v3 = 4294901760;
  v4 = &v3;
  sub_10002252C((uint64_t **)(a1 + 144), &v3, (uint64_t)&unk_100740F58, (uint64_t **)&v4)[5] = 4294901760;
  v3 = 4294901762;
  v4 = &v3;
  sub_10002252C((uint64_t **)(a1 + 144), &v3, (uint64_t)&unk_100740F58, (uint64_t **)&v4)[5] = 4294901760;
  v3 = 4294901761;
  v4 = &v3;
  sub_10002252C((uint64_t **)(a1 + 144), &v3, (uint64_t)&unk_100740F58, (uint64_t **)&v4)[5] = 4294901760;
  return a1;
}

void sub_100509AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD **a13, uint64_t a14, char **a15, uint64_t a16, void **a17)
{
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD **v22;
  _QWORD **v23;
  uint64_t v24;
  void *v26;

  sub_10001A82C(a9, *v18);
  sub_10001A82C(v24, *v23);
  sub_10001A82C(a10, *v22);
  sub_10001A82C(a11, *v21);
  sub_10001A82C(a12, *v19);
  sub_10001A82C(v20, *a13);
  sub_100056BAC(a14, *a15);
  sub_100069BDC(a16);
  v26 = *a17;
  if (*a17)
  {
    *(_QWORD *)(v17 + 24) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100509B50(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_100935008;
  sub_10050A654(a1);
  sub_10001A82C(a1 + 264, *(_QWORD **)(a1 + 272));
  sub_10001A82C(a1 + 240, *(_QWORD **)(a1 + 248));
  sub_10001A82C(a1 + 216, *(_QWORD **)(a1 + 224));
  sub_10001A82C(a1 + 192, *(_QWORD **)(a1 + 200));
  sub_10001A82C(a1 + 168, *(_QWORD **)(a1 + 176));
  sub_10001A82C(a1 + 144, *(_QWORD **)(a1 + 152));
  sub_100056BAC(a1 + 120, *(char **)(a1 + 128));
  sub_100069BDC(a1 + 40);
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100509BEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  sub_10001A82C(v1 + 264, *(_QWORD **)(v1 + 272));
  sub_10001A82C(v1 + 240, *(_QWORD **)(v1 + 248));
  sub_10001A82C(v1 + 216, *(_QWORD **)(v1 + 224));
  sub_10001A82C(v1 + 192, *(_QWORD **)(v1 + 200));
  sub_10001A82C(v1 + 168, *(_QWORD **)(v1 + 176));
  sub_10001A82C(v1 + 144, *(_QWORD **)(v1 + 152));
  sub_100056BAC(v1 + 120, *(char **)(v1 + 128));
  sub_100069BDC(v1 + 40);
  v3 = *(void **)(v1 + 16);
  if (v3)
  {
    *(_QWORD *)(v1 + 24) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_100509C68(uint64_t a1)
{
  sub_100509B50(a1);
  operator delete();
}

uint64_t sub_100509C8C(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 40);
  if (!*(_BYTE *)(a1 + 108))
  {
    *(_BYTE *)(a1 + 108) = 1;
    sub_100034264((uint64_t)v3);
    sub_100027F68();
    if (qword_10097AC70 != -1)
      dispatch_once(&qword_10097AC70, &stru_100935088);
    sub_1002F768C();
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_1009350A8);
    sub_1004B9280((uint64_t)off_100977B38);
    if (qword_10097AB48 != -1)
      dispatch_once(&qword_10097AB48, &stru_1009350C8);
    (**(void (***)(void *))off_10097AB40)(off_10097AB40);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_1009350E8);
    (**(void (***)(void *))off_1009778E0)(off_1009778E0);
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_100935108);
    (**(void (***)(void *))off_100977890)(off_100977890);
    if (qword_100978160 != -1)
      dispatch_once(&qword_100978160, &stru_100935128);
    (**(void (***)(void *))off_100978158)(off_100978158);
    if (qword_100978150 != -1)
      dispatch_once(&qword_100978150, &stru_100935148);
    (**(void (***)(void *))off_100978148)(off_100978148);
    if (qword_100978190 != -1)
      dispatch_once(&qword_100978190, &stru_100935168);
    (**(void (***)(void *))off_100978188)(off_100978188);
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_100935188);
    (**(void (***)(void *))off_100977A70)(off_100977A70);
    if (qword_100977D80 != -1)
      dispatch_once(&qword_100977D80, &stru_1009351A8);
    (*(void (**)(void *))(*(_QWORD *)off_100977D78 + 72))(off_100977D78);
    if (qword_10097AB08 != -1)
      dispatch_once(&qword_10097AB08, &stru_1009351C8);
    (**(void (***)(void *))off_10097AB00)(off_10097AB00);
    if (qword_10097AB78 != -1)
      dispatch_once(&qword_10097AB78, &stru_1009351E8);
    sub_1006B69E4();
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100935068);
    (**(void (***)(void *))off_100977A50)(off_100977A50);
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_100935208);
    (**(void (***)(void *))off_1009778D0)(off_1009778D0);
    if (qword_10097B080 != -1)
      dispatch_once(&qword_10097B080, &stru_100935228);
    sub_10048B22C();
  }
  return sub_100034234((uint64_t)v3);
}

void sub_10050A620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10050A654(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 40);
  if (*(_BYTE *)(a1 + 108))
  {
    sub_100034264((uint64_t)v3);
    if (qword_100978130 != -1)
      dispatch_once(&qword_100978130, &stru_100935468);
    (*(void (**)(void *))(*(_QWORD *)off_100978128 + 8))(off_100978128);
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_1009353E8);
    sub_10050DE9C((unint64_t)off_100977A90);
    if (qword_10097ADA0 != -1)
      dispatch_once(&qword_10097ADA0, &stru_1009353A8);
    sub_100570AF8((uint64_t)off_10097AD98);
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100935068);
    (*(void (**)(void *))(*(_QWORD *)off_100977A50 + 8))(off_100977A50);
    if (qword_10097AB08 != -1)
      dispatch_once(&qword_10097AB08, &stru_1009351C8);
    (*(void (**)(void *))(*(_QWORD *)off_10097AB00 + 8))(off_10097AB00);
    if (qword_100977D80 != -1)
      dispatch_once(&qword_100977D80, &stru_1009351A8);
    (*(void (**)(void *))(*(_QWORD *)off_100977D78 + 80))(off_100977D78);
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_100935188);
    (*(void (**)(void *))(*(_QWORD *)off_100977A70 + 8))(off_100977A70);
    if (qword_100978150 != -1)
      dispatch_once(&qword_100978150, &stru_100935148);
    (*(void (**)(void *))(*(_QWORD *)off_100978148 + 8))(off_100978148);
    if (qword_100978190 != -1)
      dispatch_once(&qword_100978190, &stru_100935168);
    (*(void (**)(void *))(*(_QWORD *)off_100978188 + 8))(off_100978188);
    if (qword_100978160 != -1)
      dispatch_once(&qword_100978160, &stru_100935128);
    (*(void (**)(void *))(*(_QWORD *)off_100978158 + 8))(off_100978158);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_1009350E8);
    (*(void (**)(void *))(*(_QWORD *)off_1009778E0 + 8))(off_1009778E0);
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_100935108);
    (*(void (**)(void *))(*(_QWORD *)off_100977890 + 8))(off_100977890);
    if (qword_10097AB48 != -1)
      dispatch_once(&qword_10097AB48, &stru_1009350C8);
    (*(void (**)(void *))(*(_QWORD *)off_10097AB40 + 8))(off_10097AB40);
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_100935208);
    (*(void (**)(void *))(*(_QWORD *)off_1009778D0 + 8))(off_1009778D0);
    if (qword_100977FB0 != -1)
      dispatch_once(&qword_100977FB0, &stru_1009352C8);
    sub_100677CB8((uint64_t)off_100977FA8);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100935248);
    (*(void (**)(void *))(*(_QWORD *)off_1009778C0 + 8))(off_1009778C0);
    if (qword_10097AC28 != -1)
      dispatch_once(&qword_10097AC28, &stru_100935408);
    sub_100483114(qword_10097AC20);
    if (qword_10097AC70 != -1)
      dispatch_once(&qword_10097AC70, &stru_100935088);
    sub_1002F7C38((_QWORD *)qword_10097AC68);
    if (qword_10097B670 != -1)
      dispatch_once(&qword_10097B670, &stru_100935388);
    sub_1005A9A64((uint64_t)off_10097B668);
    if (qword_100977FD0 != -1)
      dispatch_once(&qword_100977FD0, &stru_1009354E8);
    sub_10039F6AC(qword_100977FC8);
    sub_100034188((uint64_t)v3);
    *(_BYTE *)(a1 + 108) = 0;
  }
  return sub_100034234((uint64_t)v3);
}

void sub_10050AB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_10050AB38(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _BOOL8 v11;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 40);
  if (a2)
  {
    v6 = *(_QWORD **)(a1 + 152);
    v5 = (_QWORD *)(a1 + 152);
    v4 = v6;
    if (!v6)
      goto LABEL_13;
    v7 = v5;
    do
    {
      v8 = v4[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v4;
      else
        v10 = v4 + 1;
      if (v9)
        v7 = v4;
      v4 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 == v5 || v7[4] > a2)
LABEL_13:
      v7 = v5;
    v11 = v7 != v5;
  }
  else
  {
    v11 = 0;
  }
  sub_100034234((uint64_t)v13);
  return v11;
}

uint64_t sub_10050ABD0(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 40);
  if (a2)
  {
    v6 = *(_QWORD **)(a1 + 152);
    v5 = (uint64_t *)(a1 + 152);
    v4 = v6;
    if (v6)
    {
      v7 = v5;
      do
      {
        v8 = v4[4];
        v9 = v8 >= a2;
        if (v8 >= a2)
          v10 = v4;
        else
          v10 = v4 + 1;
        if (v9)
          v7 = v4;
        v4 = (_QWORD *)*v10;
      }
      while (*v10);
      if (v7 != v5 && v7[4] <= a2)
      {
        sub_1000040CC((uint64_t **)v5 - 1, v7);
        operator delete(v7);
      }
    }
  }
  return sub_100034234((uint64_t)v12);
}

uint64_t sub_10050AC6C(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 40);
  if (a2)
  {
    v6 = *(_QWORD **)(a1 + 200);
    v5 = (uint64_t *)(a1 + 200);
    v4 = v6;
    if (v6)
    {
      v7 = v5;
      do
      {
        v8 = v4[4];
        v9 = v8 >= a2;
        if (v8 >= a2)
          v10 = v4;
        else
          v10 = v4 + 1;
        if (v9)
          v7 = v4;
        v4 = (_QWORD *)*v10;
      }
      while (*v10);
      if (v7 != v5 && v7[4] <= a2)
      {
        sub_1000040CC((uint64_t **)v5 - 1, v7);
        operator delete(v7);
      }
    }
  }
  return sub_100034234((uint64_t)v12);
}

char *sub_10050AD08(uint64_t a1, int a2, char *a3, size_t a4)
{
  size_t v7;
  _BYTE v8[243];
  char v9[405];
  int v10[2];
  int v11;
  int v12;

  if (!a4)
    return 0;
  *(_QWORD *)v10 = 0xE00000001;
  v11 = 1;
  v12 = a2;
  bzero(v8, 0x288uLL);
  v7 = 648;
  if (sysctl(v10, 4u, v8, &v7, 0, 0))
    *a3 = 0;
  else
    strlcpy(a3, v9, a4);
  return a3;
}

BOOL sub_10050ADE0(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  _BOOL8 v10;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 40);
  v4 = (_QWORD *)(a1 + 272);
  v5 = *(_QWORD **)(a1 + 272);
  if (!v5)
    goto LABEL_12;
  v6 = (_QWORD *)(a1 + 272);
  do
  {
    v7 = v5[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (v8)
      v6 = v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v4 || v6[4] > a2)
LABEL_12:
    v6 = (_QWORD *)(a1 + 272);
  v10 = v6 != v4;
  sub_100034234((uint64_t)v12);
  return v10;
}

uint64_t sub_10050AE70(uint64_t a1, unint64_t a2, int a3, int a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void **v19;
  void *__p[2];
  char v21;
  _QWORD v22[2];
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, a1 + 40);
  if (!a2)
  {
LABEL_20:
    v15 = 0;
    goto LABEL_21;
  }
  v10 = *(_QWORD **)(a1 + 224);
  v9 = (_QWORD *)(a1 + 224);
  v8 = v10;
  if (!v10)
    goto LABEL_16;
  v11 = v9;
  do
  {
    v12 = v8[4];
    v13 = v12 >= a2;
    if (v12 >= a2)
      v14 = v8;
    else
      v14 = v8 + 1;
    if (v13)
      v11 = v8;
    v8 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 == v9 || v11[4] > a2 || *((_DWORD *)v11 + 10) != a3 || *((_DWORD *)v11 + 11) != a4)
  {
LABEL_16:
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100935048);
    v16 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
    if (v16)
    {
      v17 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        sub_1000340DC(v16, (uint64_t)__p);
        if (v21 >= 0)
          v19 = __p;
        else
          v19 = (void **)__p[0];
        *(_DWORD *)buf = 136446722;
        v24 = v19;
        v25 = 1024;
        v26 = a3;
        v27 = 1024;
        v28 = a4;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Invalid SessionProcessIdentifierMapping for session \"%{public}s\" with pid \"%d\", pidVersion \"%d\"", buf, 0x18u);
        if (v21 < 0)
          operator delete(__p[0]);
      }
    }
    goto LABEL_20;
  }
  v15 = 1;
LABEL_21:
  sub_100034234((uint64_t)v22);
  return v15;
}

void sub_10050B034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_10050B054(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  char v13[24];
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 40);
  if (a2)
  {
    v6 = *(_QWORD **)(a1 + 224);
    v5 = (uint64_t *)(a1 + 224);
    v4 = v6;
    if (!v6)
      goto LABEL_13;
    v7 = v5;
    do
    {
      v8 = v4[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v4;
      else
        v10 = v4 + 1;
      if (v9)
        v7 = v4;
      v4 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != v5 && v7[4] <= a2)
    {
      sub_1000040CC((uint64_t **)v5 - 1, v7);
      operator delete(v7);
      a2 = 1;
    }
    else
    {
LABEL_13:
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_100935048);
      v11 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
      if (v11 && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        sub_1000340DC(v11, (uint64_t)v13);
        sub_1006FE348();
      }
      a2 = 0;
    }
  }
  sub_100034234((uint64_t)v14);
  return a2;
}

void sub_10050B1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10050B1C4(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11[3];
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 40);
  if (a2)
  {
    v4 = *(_QWORD **)(a1 + 272);
    if (!v4)
      goto LABEL_13;
    v5 = (_QWORD *)(a1 + 272);
    do
    {
      v6 = v4[4];
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (v7)
        v5 = v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != (_QWORD *)(a1 + 272) && v5[4] <= a2)
    {
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_100935048);
      v10 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
      if (v10 && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        sub_1000340DC(v10, (uint64_t)v11);
        sub_1006FE390();
      }
    }
    else
    {
LABEL_13:
      v11[0] = a2;
      sub_10000F7A0((uint64_t **)(a1 + 264), (unint64_t *)v11, v11);
    }
  }
  return sub_100034234((uint64_t)v12);
}

void sub_10050B304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10050B328(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 40);
  if (a2)
  {
    v4 = *(_QWORD **)(a1 + 272);
    if (v4)
    {
      v5 = (uint64_t **)(a1 + 264);
      v6 = (uint64_t *)(a1 + 272);
      v7 = (uint64_t *)(a1 + 272);
      do
      {
        v8 = v4[4];
        v9 = v8 >= a2;
        if (v8 >= a2)
          v10 = v4;
        else
          v10 = v4 + 1;
        if (v9)
          v7 = v4;
        v4 = (_QWORD *)*v10;
      }
      while (*v10);
      if (v7 != v6 && v7[4] <= a2)
      {
        sub_1000040CC(v5, v7);
        operator delete(v7);
      }
    }
  }
  return sub_100034234((uint64_t)v12);
}

uint64_t sub_10050B3C0(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  void **v8;
  void *__p[2];
  char v11;
  _QWORD v12[2];
  unint64_t v13;
  uint8_t buf[8];
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  void **v18;

  v12[1] = 0;
  v13 = a2;
  v12[0] = 0;
  sub_10003415C((uint64_t)v12, a1 + 40);
  if (a2)
  {
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100935048);
    v6 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
    if (v6)
    {
      v7 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(v6, (uint64_t)__p);
        if (v11 >= 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = a3;
        v15 = 2048;
        v16 = a2;
        v17 = 2082;
        v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Local device event mask %x for handle : %p \t for session %{public}s", buf, 0x1Cu);
        if (v11 < 0)
          operator delete(__p[0]);
      }
      *(_QWORD *)buf = &v13;
      *((_DWORD *)sub_1004BF4C8((uint64_t **)(a1 + 240), &v13, (uint64_t)&unk_100740F58, (_QWORD **)buf) + 10) = a3;
    }
  }
  return sub_100034234((uint64_t)v12);
}

void sub_10050B548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10050B568(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[2];
  unint64_t v14;
  unint64_t *v15;

  v13[1] = 0;
  v14 = a2;
  v13[0] = 0;
  sub_10003415C((uint64_t)v13, a1 + 40);
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006FE3D8();
    goto LABEL_19;
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100935048);
  if (!sub_1000229D8((_QWORD *)qword_100977B48, a2))
    goto LABEL_19;
  v6 = *(_QWORD **)(a1 + 248);
  v5 = (_QWORD *)(a1 + 248);
  v4 = v6;
  if (!v6)
    goto LABEL_19;
  v7 = v5;
  do
  {
    v8 = v4[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == v5 || v7[4] > a2)
  {
LABEL_19:
    v11 = 0;
    goto LABEL_20;
  }
  v15 = &v14;
  v11 = *((unsigned int *)sub_1004BF4C8((uint64_t **)v5 - 1, &v14, (uint64_t)&unk_100740F58, &v15) + 10);
LABEL_20:
  sub_100034234((uint64_t)v13);
  return v11;
}

void sub_10050B684(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10050B69C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 112) = a2;
  return result;
}

void sub_10050B6A4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  int v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  NSObject *v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  void *__p[2];
  char v37;
  char v38;
  _BYTE buf[12];
  __int16 v40;
  _BYTE v41[10];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ Session Manager ------------------", buf, 2u);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int16 *)(a1 + 106);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Session count (lifetime): %d", buf, 8u);
    v2 = qword_1009997E8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Current sessions:", buf, 2u);
  }
  v4 = *(_QWORD **)(a1 + 120);
  if (v4 != (_QWORD *)(a1 + 128))
  {
    do
    {
      sub_10050977C(v4[7]);
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != (_QWORD *)(a1 + 128));
  }
  v38 = 0;
  v8 = sub_100027F68();
  sub_100091AE8(buf, "BTSessionManager");
  sub_100091AE8(__p, "StateDumpHandleMapLogging");
  v9 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v8 + 72))(v8, buf, __p, &v38);
  if (v38)
    v10 = v9;
  else
    v10 = 0;
  if (v37 < 0)
    operator delete(__p[0]);
  if ((v41[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v10)
      return;
  }
  else if (!v10)
  {
    return;
  }
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump: External handle map:", buf, 2u);
    v11 = qword_1009997E8;
  }
  v12 = *(_QWORD **)(a1 + 144);
  if (v12 != (_QWORD *)(a1 + 152))
  {
    do
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v13 = v12[4];
        v14 = v12[5];
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v13;
        v40 = 2048;
        *(_QWORD *)v41 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:    %p → %p", buf, 0x16u);
        v11 = qword_1009997E8;
      }
      v15 = (_QWORD *)v12[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v12[2];
          v7 = *v16 == (_QWORD)v12;
          v12 = v16;
        }
        while (!v7);
      }
      v12 = v16;
    }
    while (v16 != (_QWORD *)(a1 + 152));
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump: Handle identifier map:", buf, 2u);
    v11 = qword_1009997E8;
  }
  v17 = *(_QWORD **)(a1 + 192);
  if (v17 != (_QWORD *)(a1 + 200))
  {
    do
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v18 = v17[4];
        v19 = *((_DWORD *)v17 + 10);
        v20 = *((_DWORD *)v17 + 11);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v18;
        v40 = 1024;
        *(_DWORD *)v41 = v19;
        *(_WORD *)&v41[4] = 1024;
        *(_DWORD *)&v41[6] = v20;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:    %p → %d, %u", buf, 0x18u);
        v11 = qword_1009997E8;
      }
      v21 = (_QWORD *)v17[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v17[2];
          v7 = *v22 == (_QWORD)v17;
          v17 = v22;
        }
        while (!v7);
      }
      v17 = v22;
    }
    while (v22 != (_QWORD *)(a1 + 200));
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump: Session-Process identifier map:", buf, 2u);
    v11 = qword_1009997E8;
  }
  v23 = *(_QWORD **)(a1 + 216);
  if (v23 != (_QWORD *)(a1 + 224))
  {
    do
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v24 = v23[4];
        v25 = *((_DWORD *)v23 + 10);
        v26 = *((_DWORD *)v23 + 11);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v24;
        v40 = 1024;
        *(_DWORD *)v41 = v25;
        *(_WORD *)&v41[4] = 1024;
        *(_DWORD *)&v41[6] = v26;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:    %p → %d, %u", buf, 0x18u);
        v11 = qword_1009997E8;
      }
      v27 = (_QWORD *)v23[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v23[2];
          v7 = *v28 == (_QWORD)v23;
          v23 = v28;
        }
        while (!v7);
      }
      v23 = v28;
    }
    while (v28 != (_QWORD *)(a1 + 224));
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump: Handle-Masked Local device events map:", buf, 2u);
  }
  v29 = *(_QWORD **)(a1 + 240);
  v30 = (_QWORD *)(a1 + 248);
  if (v29 != (_QWORD *)(a1 + 248))
  {
    v31 = qword_1009997E8;
    do
    {
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v32 = v29[4];
        v33 = *((_DWORD *)v29 + 10);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v32;
        v40 = 1024;
        *(_DWORD *)v41 = v33;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "statedump:    %p → %u", buf, 0x12u);
        v31 = qword_1009997E8;
      }
      v34 = (_QWORD *)v29[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v29[2];
          v7 = *v35 == (_QWORD)v29;
          v29 = v35;
        }
        while (!v7);
      }
      v29 = v35;
    }
    while (v35 != v30);
  }
}

void sub_10050BC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_10050BCB4(id a1)
{
  operator new();
}

void sub_10050BCF4()
{
  operator delete();
}

void sub_10050BD18(id a1)
{
  operator new();
}

void sub_10050BD58()
{
  operator delete();
}

void sub_10050BD7C(id a1)
{
  operator new();
}

void sub_10050BDFC()
{
  uint64_t v0;
  uint64_t v1;
  void **v2;
  void *v3;

  v3 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v0 + 48) = v3;
    operator delete(v3);
  }
  sub_1002F95D8(v1, *(_QWORD **)(v0 + 16));

  operator delete();
}

void sub_10050BE48(id a1)
{
  operator new();
}

void sub_10050BF60()
{
  operator delete();
}

void sub_10050BF84(id a1)
{
  operator new();
}

void sub_10050BFC4()
{
  operator delete();
}

void sub_10050BFE8(id a1)
{
  operator new();
}

void sub_10050C028()
{
  operator delete();
}

void sub_10050C04C(id a1)
{
  operator new();
}

void sub_10050C08C()
{
  operator delete();
}

void sub_10050C0B0(id a1)
{
  operator new();
}

void sub_10050C0F0()
{
  operator delete();
}

void sub_10050C114(id a1)
{
  operator new();
}

void sub_10050C154()
{
  operator delete();
}

void sub_10050C178(id a1)
{
  operator new();
}

void sub_10050C1B8()
{
  operator delete();
}

void sub_10050C1DC(id a1)
{
  operator new();
}

void sub_10050C21C()
{
  operator delete();
}

void sub_10050C240(id a1)
{
  operator new();
}

void sub_10050C280()
{
  operator delete();
}

void sub_10050C2A4(id a1)
{
  operator new();
}

void sub_10050C2E4()
{
  operator delete();
}

void sub_10050C308(id a1)
{
  operator new();
}

void sub_10050C334(id a1)
{
  operator new();
}

void sub_10050C374()
{
  operator delete();
}

void sub_10050C398(id a1)
{
  operator new();
}

void sub_10050C3D8()
{
  operator delete();
}

void sub_10050C3FC(id a1)
{
  operator new();
}

void sub_10050C43C()
{
  operator delete();
}

void sub_10050C460(id a1)
{
  operator new();
}

void sub_10050C4A0()
{
  operator delete();
}

void sub_10050C4C4(id a1)
{
  operator new();
}

void sub_10050C504()
{
  operator delete();
}

void sub_10050C528(id a1)
{
  operator new();
}

void sub_10050C568()
{
  operator delete();
}

void sub_10050C58C(id a1)
{
  operator new();
}

void sub_10050C5CC()
{
  operator delete();
}

void sub_10050C5F0(id a1)
{
  operator new();
}

void sub_10050C630()
{
  operator delete();
}

void sub_10050C654(id a1)
{
  operator new();
}

void sub_10050C694()
{
  operator delete();
}

void sub_10050C6B8(id a1)
{
  operator new();
}

void sub_10050C6F8()
{
  operator delete();
}

void sub_10050C71C(id a1)
{
  operator new();
}

void sub_10050C75C()
{
  operator delete();
}

void sub_10050C780(id a1)
{
  operator new();
}

void sub_10050C7C0()
{
  operator delete();
}

void sub_10050C7E4(id a1)
{
  operator new();
}

void sub_10050C824()
{
  operator delete();
}

void sub_10050C848(id a1)
{
  operator new();
}

void sub_10050C888()
{
  operator delete();
}

void sub_10050C8AC(id a1)
{
  operator new();
}

void sub_10050C8EC()
{
  operator delete();
}

void sub_10050C910(id a1)
{
  operator new();
}

void sub_10050C950()
{
  operator delete();
}

void sub_10050C974(id a1)
{
  operator new();
}

void sub_10050C9B4()
{
  operator delete();
}

void sub_10050C9D8(id a1)
{
  operator new();
}

void sub_10050CA18()
{
  operator delete();
}

void sub_10050CA3C(id a1)
{
  operator new();
}

void sub_10050CA7C(id a1)
{
  operator new();
}

void sub_10050CABC()
{
  operator delete();
}

void sub_10050CAE0(id a1)
{
  operator new();
}

void sub_10050CB20()
{
  operator delete();
}

void sub_10050CB44(id a1)
{
  operator new();
}

void sub_10050CB84()
{
  operator delete();
}

void sub_10050CBA8(id a1)
{
  operator new();
}

void sub_10050CBE8()
{
  operator delete();
}

void sub_10050CC0C(id a1)
{
  operator new();
}

void sub_10050CC4C()
{
  operator delete();
}

void sub_10050CC70(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_100935518;
  *(_QWORD *)(a1 + 8) = off_1009356C8;
  *(_QWORD *)(a1 + 16) = off_1009356F8;
  *(_QWORD *)(a1 + 24) = off_100935738;
  *(_QWORD *)(a1 + 32) = &off_1009357C8;
  *(_QWORD *)(a1 + 40) = &off_1009357E0;
  *(_QWORD *)(a1 + 48) = &off_1009357F8;
  *(_QWORD *)(a1 + 56) = &off_100935810;
  *(_QWORD *)(a1 + 64) = &off_100935828;
  *(_QWORD *)(a1 + 72) = off_100935840;
  *(_QWORD *)(a1 + 80) = &off_100935868;
  *(_QWORD *)(a1 + 88) = off_100935880;
  *(_QWORD *)(a1 + 96) = &off_1009358A0;
  *(_QWORD *)(a1 + 104) = &off_1009358B8;
  *(_QWORD *)(a1 + 112) = &off_1009358D0;
  *(_QWORD *)(a1 + 120) = &off_1009358E8;
  *(_QWORD *)(a1 + 128) = off_100935900;
  *(_QWORD *)(a1 + 136) = off_100935950;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  sub_1000160D0(a1 + 272);
  *(_WORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 355) = 0;
  *(_OWORD *)(a1 + 339) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0x404E000000000000;
  *(_BYTE *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 818) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_DWORD *)(a1 + 856) = 3;
  *(_BYTE *)(a1 + 861) = 0;
  *(_DWORD *)(a1 + 864) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_QWORD *)(a1 + 904) = 0;
  *(_QWORD *)(a1 + 1096) = a1 + 1104;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_QWORD *)(a1 + 1128) = a1 + 1136;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, -1);
  *(_QWORD *)(a1 + 248) = dispatch_queue_create("com.apple.AudioLinkManagerSerialQueue", v2);
  v3 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, -1);
  *(_QWORD *)(a1 + 256) = dispatch_queue_create("com.apple.AudioLinkManagerLowLatencyQueue", v3);
  mach_timebase_info((mach_timebase_info_t)(a1 + 264));
  v4 = 0;
  *(_WORD *)(a1 + 990) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  *(_WORD *)(a1 + 860) = 1;
  *(_WORD *)(a1 + 912) = 1;
  *(_DWORD *)(a1 + 920) = 0;
  *(_DWORD *)(a1 + 1068) = 0;
  *(_QWORD *)(a1 + 1052) = 0;
  *(_QWORD *)(a1 + 1060) = 0;
  *(_QWORD *)(a1 + 1044) = 0;
  do
  {
    *(_WORD *)(a1 + v4 + 924) = -25444;
    v4 += 6;
  }
  while (v4 != 18);
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 942) = 0;
  operator new();
}

void sub_10050CED4()
{
  operator delete();
}

void sub_10050CFC8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[5];

  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100935B90);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 8);
  v2 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10050D0A8;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_async(v2, block);
  v3 = sub_1000438A4();
  sub_100333414(v3, a1);
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_100935C50);
  sub_1004B983C((uint64_t)off_100977B38, a1 + 128);
}

uint64_t sub_10050D0A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD v22[2];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100935BB0);
  sub_100529114((uint64_t)off_10097AA38 + 328, v1 + 72);
  v2 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2) & 1) != 0
    || (v3 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 152))(v3)))
  {
    v4 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v22[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Current platform supports enhanced diversity, subscribing to device orientation update", (uint8_t *)v22, 2u);
    }
    v5 = sub_100038E50();
    sub_1005293D8(v5 + 848, v1 + 64);
    v6 = sub_100038E50();
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 248))(v6);
    *(_DWORD *)(v1 + 864) = v7;
    v8 = qword_1009997E0;
    if (v7)
    {
      v9 = v7;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v22[0] = 67109120;
        v22[1] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device orientation initialized to %u", (uint8_t *)v22, 8u);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
    {
      sub_1006FE430();
    }
  }
  v10 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 792))(v10, 0))
  {
    v11 = sub_100038E50();
    sub_1005296C8(v11 + 888, v1 + 80);
    v12 = sub_100038E50();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 216))(v12, *(_QWORD *)(v1 + 208) + 2);
  }
  v13 = sub_100038E50();
  sub_1005299B8(v13 + 968, v1 + 104);
  v14 = sub_100038E50();
  sub_100504D04(v14 + 1168, v1 + 120);
  v15 = sub_100038E50();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 200))(v15, *(_QWORD *)(v1 + 208) + 4);
  v16 = sub_100038E50();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 224))(v16, v1 + 912);
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100935BD0);
  sub_100529CA8(qword_100977DF8 + 432, v1 + 24);
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100935BF0);
  sub_100494088(off_100977A70, v1 + 40);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100935C10);
  sub_10042381C(qword_100977B48 + 8, v1 + 88);
  if (_os_feature_enabled_impl("BluetoothFeatures", "BandSwitchManager"))
  {
    if (qword_100977B18 != -1)
      dispatch_once(&qword_100977B18, &stru_100935C30);
    sub_1002BD258(qword_100977B10, v1 + 136);
  }
  if (*(_BYTE *)(v1 + 336))
  {
    sub_10050D4A8(v1);
    sub_10050D788(v1);
    v17 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 792))(v17, 1))
    {
      v18 = sub_100038E50();
      sub_100529F6C(v18 + 928, v1 + 96);
      v19 = sub_100038E50();
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 232))(v19);
      v20 = sub_100038E50();
      sub_10052A25C(v20 + 1008, v1 + 112);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006FE404();
  }
  *(_BYTE *)(v1 + 1152) = 0;
  *(_QWORD *)(v1 + 1120) = 0;
  *(_QWORD *)(v1 + 1168) = 0xFFFFFFFF00000000;
  std::string::assign((std::string *)(v1 + 1176), "");
  notify_register_check("com.apple.bluetooth.GuestConnected", (int *)(v1 + 1172));
  std::string::assign((std::string *)(v1 + 1072), "Off");
  *(_DWORD *)(v1 + 1040) = -1;
  return notify_register_check("com.apple.bluetooth.SmartRoutingDisconnectReason", (int *)(v1 + 1040));
}

void sub_10050D4A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  void *__p[2];
  char v17;
  uint8_t buf[8];
  char v19;

  v2 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2))
    goto LABEL_28;
  v3 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 384))(v3))
  {
    v4 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 320))(v4))
    {
      v5 = sub_100027F68();
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 328))(v5);
    }
    goto LABEL_28;
  }
  sub_100523B20();
  v6 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 424))(v6))
  {
    v7 = sub_100027F68();
    sub_100091AE8(buf, "MRC");
    sub_100091AE8(__p, "DisableMRC");
    v8 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t))(*(_QWORD *)v7 + 72))(v7, buf, __p, a1 + 1000);
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(*(void **)buf);
    if (*(_BYTE *)(a1 + 1000))
    {
      if (sub_100523034(v8, 1, 0, 0))
        goto LABEL_18;
      v9 = qword_1009997E0;
      if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_18;
      *(_WORD *)buf = 0;
      v10 = "Global MRC disabled for this platform";
    }
    else
    {
      if (sub_100523034(v8, 1, 0, 1))
        goto LABEL_18;
      v9 = qword_1009997E0;
      if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_18;
      *(_WORD *)buf = 0;
      v10 = "Global MRC enabled for this platform";
    }
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
  }
LABEL_18:
  v11 = sub_1000438A4();
  if (*(_DWORD *)(v11 + 712) <= 0x13u)
    sub_100523C50(v11, 1);
  if (sub_10005F864() == 28 || sub_10005F864() == 23)
    sub_100523D60(a1, 0, 3);
  v12 = sub_10005F864();
  if ((_DWORD)v12 == 125 || (v12 = sub_10005F864(), (_DWORD)v12 == 127))
  {
    if (!sub_100523034(v12, 1, 0, 1))
    {
      v13 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Global MRC enabled for this platform", buf, 2u);
      }
    }
  }
LABEL_28:
  v14 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 144))(v14))
  {
    v15 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Current platform supports enhanced diversity", buf, 2u);
    }
  }
}

void sub_10050D754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_10050D788(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  void *v11;
  int v12;
  NSObject *v13;
  void **v14;
  void *v15[2];
  uint64_t v16;
  void *__dst[2];
  uint64_t v18;
  void *__p[2];
  char v20;
  void *v21[2];
  uint64_t v22;
  void *v23[2];
  uint64_t v24;
  int v25;
  unsigned __int8 v26;
  _BYTE buf[12];
  char v28;

  if (*(_BYTE *)(a1 + 339))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEBUG))
      sub_1006FE45C();
  }
  else
  {
    v26 = 2;
    v25 = 5;
    v23[0] = 0;
    v23[1] = 0;
    v24 = 0;
    v21[0] = 0;
    v21[1] = 0;
    v22 = 0;
    v2 = sub_100027F68();
    sub_100091AE8(buf, "LinkAdaptiveBitrateAAC");
    sub_100091AE8(__p, "configs");
    (*(void (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v2 + 88))(v2, buf, __p, &v26);
    if (v20 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      operator delete(*(void **)buf);
    v3 = v26;
    if (v26 >= 2u)
      v3 = 2;
    v26 = v3;
    v4 = sub_100027F68();
    sub_100091AE8(buf, "LinkAdaptiveBitrateAAC");
    sub_100091AE8(__p, "bitrateCount");
    (*(void (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v4 + 88))(v4, buf, __p, &v25);
    if (v20 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      operator delete(*(void **)buf);
    v5 = sub_100027F68();
    sub_100091AE8(buf, "LinkAdaptiveBitrateAAC");
    sub_100091AE8(__p, "thresholds");
    (*(void (**)(uint64_t, _BYTE *, void **, void **))(*(_QWORD *)v5 + 56))(v5, buf, __p, v23);
    if (v20 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      operator delete(*(void **)buf);
    v6 = (void *)HIBYTE(v24);
    v7 = SHIBYTE(v24);
    if (v24 < 0)
      v6 = v23[1];
    if (v6)
    {
      v8 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (void **)v23[0];
        if (v7 >= 0)
          v9 = v23;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Setting custom AAC Link Adaptive bitrate thresholds based on defaults write: %s", buf, 0xCu);
      }
    }
    v10 = sub_100027F68();
    sub_100091AE8(buf, "LinkAdaptiveBitrateAAC");
    sub_100091AE8(__p, "rates");
    (*(void (**)(uint64_t, _BYTE *, void **, void **))(*(_QWORD *)v10 + 56))(v10, buf, __p, v21);
    if (v20 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      operator delete(*(void **)buf);
    v11 = (void *)HIBYTE(v22);
    v12 = SHIBYTE(v22);
    if (v22 < 0)
      v11 = v21[1];
    if (v11)
    {
      v13 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v14 = (void **)v21[0];
        if (v12 >= 0)
          v14 = v21;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Setting custom AAC Link Adaptive bitrates based on defaults write: %s", buf, 0xCu);
      }
    }
    *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a1 + 1008);
    if (v26)
      operator new();
    if (SHIBYTE(v24) < 0)
    {
      sub_10003430C(__dst, v23[0], (unint64_t)v23[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v23;
      v18 = v24;
    }
    if (SHIBYTE(v22) < 0)
    {
      sub_10003430C(v15, v21[0], (unint64_t)v21[1]);
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)v21;
      v16 = v22;
    }
    sub_100520F24(a1, (uint64_t)__dst, (uint64_t)v15, v26);
    if (SHIBYTE(v16) < 0)
      operator delete(v15[0]);
    if (SHIBYTE(v18) < 0)
      operator delete(__dst[0]);
    sub_10052127C(a1);
    *(_QWORD *)(a1 + 1032) = 0x100007F00A000F4;
    *(_BYTE *)(a1 + 339) = 1;
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
    if (SHIBYTE(v24) < 0)
      operator delete(v23[0]);
  }
}

void sub_10050DDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  _Unwind_Resume(exception_object);
}

void sub_10050DE9C(unint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[5];

  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100935B90);
  sub_100069060((uint64_t)off_100977A50 + 64, a1 + 8);
  v2 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10050DF7C;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_async(v2, block);
  v3 = sub_1000438A4();
  sub_100333478(v3, a1);
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_100935C50);
  sub_1004B98CC((uint64_t)off_100977B38, a1 + 128);
}

uint64_t sub_10050DF7C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  __int128 v27;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 200))
  {
    v2 = (_QWORD *)(v1 + 184);
    v3 = *(_QWORD **)(v1 + 184);
    v4 = (_QWORD *)(v1 + 192);
    if (v3 == (_QWORD *)(v1 + 192))
      goto LABEL_14;
    do
    {
      v5 = v3[4];
      if (*(_QWORD *)v3[5])
        sub_10050E354(v1, v3[4]);
      *(_QWORD *)&v27 = v5;
      sub_100015ECC(v1 + 184, (unint64_t *)&v27);
      if (qword_100978120 != -1)
        dispatch_once(&qword_100978120, &stru_100935C70);
      sub_100264FF4(qword_100978118, v5);
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
    if (*(_QWORD *)(v1 + 200))
    {
LABEL_14:
      v9 = (_QWORD *)*v2;
      if ((_QWORD *)*v2 != v4)
      {
        do
        {
          v10 = v9[4];
          if (*(_QWORD *)(v9[5] + 8))
            sub_10050EB98((uint64_t *)v1, v9[4]);
          *(_QWORD *)&v27 = v10;
          sub_100015ECC(v1 + 184, (unint64_t *)&v27);
          if (qword_100978120 != -1)
            dispatch_once(&qword_100978120, &stru_100935C70);
          sub_100264FF4(qword_100978118, v10);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v9[2];
              v8 = *v12 == (_QWORD)v9;
              v9 = v12;
            }
            while (!v8);
          }
          v9 = v12;
        }
        while (v12 != v4);
      }
    }
  }
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100935BB0);
  sub_100069060((uint64_t)off_10097AA38 + 328, v1 + 72);
  v13 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 144))(v13) & 1) != 0
    || (v14 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 152))(v14)))
  {
    v15 = sub_100038E50();
    sub_1002B43D4(v15 + 848, v1 + 64);
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100935C10);
  sub_100069060(qword_100977B48 + 8, v1 + 88);
  v27 = 0uLL;
  sub_100274874(v1 + 888, &v27);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = sub_100038E50();
  sub_1002B43D4(v19 + 968, v1 + 104);
  v20 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 792))(v20, 0))
  {
    v21 = sub_100038E50();
    sub_1002B43D4(v21 + 888, v1 + 80);
  }
  v22 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 792))(v22, 1))
  {
    v23 = sub_100038E50();
    sub_1002B43D4(v23 + 928, v1 + 96);
    v24 = sub_100038E50();
    sub_1002B43D4(v24 + 1008, v1 + 112);
  }
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100935BD0);
  sub_100069060(qword_100977DF8 + 432, v1 + 24);
  v25 = *(_QWORD *)(v1 + 1008);
  if (v25 != *(_QWORD *)(v1 + 1016))
  {
    if (*(_QWORD *)(*(_QWORD *)v25 + 16))
      operator delete[]();
    if (*(_QWORD *)(*(_QWORD *)v25 + 8))
      operator delete[]();
    operator delete();
  }
  *(_BYTE *)(v1 + 339) = 0;
  result = notify_cancel(*(_DWORD *)(v1 + 1040));
  *(_DWORD *)(v1 + 1040) = -1;
  return result;
}

uint64_t sub_10050E354(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t **v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  CFAbsoluteTime Current;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint8_t buf[16];

  v12 = a2;
  if (a2)
  {
    v2 = *(_QWORD **)(a1 + 192);
    if (v2)
    {
      v3 = (uint64_t **)(a1 + 184);
      v4 = (_QWORD *)(a1 + 192);
      do
      {
        v5 = v2[4];
        v6 = v5 >= a2;
        if (v5 >= a2)
          v7 = v2;
        else
          v7 = v2 + 1;
        if (v6)
          v4 = v2;
        v2 = (_QWORD *)*v7;
      }
      while (*v7);
      if (v4 != (_QWORD *)(a1 + 192) && v4[4] <= a2)
      {
        *(_QWORD *)buf = &v12;
        if (*(_QWORD *)sub_10002252C(v3, &v12, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5])
        {
          Current = CFAbsoluteTimeGetCurrent();
          *(_QWORD *)buf = &v12;
          *(CFAbsoluteTime *)(*(_QWORD *)sub_10002252C(v3, &v12, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 96) = Current;
          *(_QWORD *)buf = &v12;
          sub_10002252C(v3, &v12, (uint64_t)&unk_100740F58, (uint64_t **)buf);
          *(_QWORD *)buf = &v12;
          sub_10002252C(v3, &v12, (uint64_t)&unk_100740F58, (uint64_t **)buf);
          *(_QWORD *)buf = &v12;
          sub_10002252C(v3, &v12, (uint64_t)&unk_100740F58, (uint64_t **)buf);
          sub_10051DE30();
        }
        *(_QWORD *)buf = &v12;
        if (*(_QWORD *)(sub_10002252C(v3, &v12, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 16))
        {
          *(_QWORD *)buf = &v12;
          v9 = *(_QWORD *)(sub_10002252C(v3, &v12, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 16);
          if (v9)
          {
            sub_10039365C(v9);
            operator delete();
          }
          *(_QWORD *)buf = &v12;
          *(_QWORD *)(sub_10002252C(v3, &v12, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 16) = 0;
        }
        *(_QWORD *)buf = &v12;
        if (*(_QWORD *)(sub_10002252C(v3, &v12, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 24))
        {
          *(_QWORD *)buf = &v12;
          if (*(_QWORD *)(sub_10002252C(v3, &v12, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 24))
            operator delete();
          *(_QWORD *)buf = &v12;
          *(_QWORD *)(sub_10002252C(v3, &v12, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 24) = 0;
        }
      }
    }
  }
  result = sub_1000438A4();
  if (*(_DWORD *)(result + 712) >= 0x7D0u)
  {
    result = sub_1000438A4();
    if (*(_DWORD *)(result + 712) <= 0xF9Fu)
    {
      v11 = sub_1000438A4();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1240))(v11);
    }
  }
  return result;
}

void sub_10050EB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10050EB98(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t **v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  CFAbsoluteTime Current;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t buf[8];
  __int16 v34;
  int v35;

  v32 = a2;
  if (a2)
  {
    v2 = result;
    v3 = (_QWORD *)result[24];
    if (v3)
    {
      v4 = (uint64_t **)(result + 23);
      v5 = result + 24;
      do
      {
        v6 = v3[4];
        v7 = v6 >= a2;
        if (v6 >= a2)
          v8 = v3;
        else
          v8 = v3 + 1;
        if (v7)
          v5 = v3;
        v3 = (_QWORD *)*v8;
      }
      while (*v8);
      if (v5 != result + 24 && v5[4] <= a2)
      {
        *(_QWORD *)buf = &v32;
        result = sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf);
        if (*(_QWORD *)(result[5] + 8))
        {
          v9 = sub_100027F68();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9))
          {
            v10 = qword_1009997E0;
            if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)buf = &v32;
              v11 = *(_DWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]
                              + 100);
              v12 = *((_DWORD *)v2 + 263);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&buf[4] = v11;
              v34 = 1024;
              v35 = v12;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "AudioQuality trigger %d, codec %u", buf, 0xEu);
            }
            v13 = sub_10003BE44();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 328))(v13))
            {
              *(_QWORD *)buf = &v32;
              v14 = sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf);
              if (*(_DWORD *)(v14[5] + 96))
              {
                v15 = *((_DWORD *)v2 + 263);
                if ((v15 - 128) >= 2 && v15 != 255)
                  sub_10051E484((uint64_t)v14, v32);
              }
            }
            *(_QWORD *)buf = &v32;
            *(_DWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 100) = 0;
          }
          v16 = *((_DWORD *)v2 + 56);
          *(_QWORD *)buf = &v32;
          *(_DWORD *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]
                                + 8)
                    + 232) = v16;
          *(_QWORD *)buf = &v32;
          v17 = sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf);
          std::string::assign((std::string *)(*(_QWORD *)(v17[5] + 8) + 136), "2.4G");
          *(_QWORD *)buf = &v32;
          *(_BYTE *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]
                               + 8)
                   + 160) = 0;
          if (*(_BYTE *)(v32 + 1365))
          {
            *(_QWORD *)buf = &v32;
            v18 = sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf);
            std::string::assign((std::string *)(*(_QWORD *)(v18[5] + 8) + 136), "5G");
          }
          *(_QWORD *)buf = &v32;
          if (*(_BYTE *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 32))
          {
            *(_QWORD *)buf = &v32;
            *(_BYTE *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]
                                 + 8)
                     + 160) = 1;
          }
          Current = CFAbsoluteTimeGetCurrent();
          *(_QWORD *)buf = &v32;
          *(CFAbsoluteTime *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 8)+ 88) = Current;
          *(_QWORD *)buf = &v32;
          v20 = *(double *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 8)+ 88);
          *(_QWORD *)buf = &v32;
          v21 = v20
              - *(double *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 8)+ 80);
          *(_QWORD *)buf = &v32;
          *(_DWORD *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]
                                + 8)
                    + 164) = v21;
          *(_QWORD *)buf = &v32;
          *(_DWORD *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]
                                + 8)
                    + 176) = *((_DWORD *)v2 + 261);
          *(_QWORD *)buf = &v32;
          *(_DWORD *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]
                                + 8)
                    + 180) = *((_DWORD *)v2 + 262);
          v22 = sub_100065478();
          *(_QWORD *)buf = &v32;
          v23 = sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 96))(v22, *(_QWORD *)(v23[5] + 8));
          sub_100516484((uint64_t)v2, v32);
          v24 = sub_10003BE44();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 128))(v24))
          {
            *(_QWORD *)buf = &v32;
            if (*(_DWORD *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 8)+ 104))
            {
              *(_QWORD *)buf = &v32;
              v25 = (float)*(unsigned int *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 8)+ 128);
              *(_QWORD *)buf = &v32;
              v26 = (float)((float)(v25
                                                / (float)*(unsigned int *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 8)+ 104))* 100.0);
            }
            else
            {
              v26 = 0;
            }
            *(_QWORD *)buf = &v32;
            if (*(_DWORD *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 8)+ 108))
            {
              *(_QWORD *)buf = &v32;
              v27 = (float)*(unsigned int *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 8)+ 132);
              *(_QWORD *)buf = &v32;
              v28 = (float)((float)(v27
                                                / (float)*(unsigned int *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 8)+ 108))* 100.0);
            }
            else
            {
              v28 = 0;
            }
            v29 = sub_10005D5A4();
            *(_QWORD *)buf = &v32;
            v30 = sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf);
            (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v29 + 24))(v29, *(unsigned int *)(*(_QWORD *)(v30[5] + 8) + 164), v26, (100 - v26), v28, (100 - v28));
          }
          *(_QWORD *)buf = &v32;
          v31 = *(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 8);
          if (v31)
          {
            if (*(char *)(v31 + 159) < 0)
              operator delete(*(void **)(v31 + 136));
            operator delete();
          }
          *(_QWORD *)buf = &v32;
          result = sub_10002252C(v4, (unint64_t *)&v32, (uint64_t)&unk_100740F58, (uint64_t **)buf);
          *(_QWORD *)(result[5] + 8) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_10050F284(uint64_t a1)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[5];
  uint8_t buf[16];

  *(_BYTE *)(a1 + 336) = 1;
  sub_10050D4A8(a1);
  sub_10050D788(a1);
  v2 = *(_DWORD *)(sub_1000438A4() + 712);
  if ((v2 - 1) > 0x7CE)
  {
    if ((v2 - 2000) <= 0x7CF)
    {
      sub_10050F544((_WORD *)a1, v2);
      sub_10050F6F8(a1, v2);
      sub_10050F8E8(a1, v2);
    }
  }
  else if (v2 == 19 || v2 == 15)
  {
    v4 = sub_10003BE44();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 144))(v4) & 1) == 0)
    {
      *(_WORD *)(a1 + 818) = 256;
      if (v2 == 19)
        v5 = 97;
      else
        v5 = 81;
      v6 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Reading back ptb", buf, 2u);
      }
      v7 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 600))(v7, v5, a1 + 818, a1 + 392);
    }
  }
  v8 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 792))(v8, 1))
  {
    v9 = sub_100038E50();
    sub_100529F6C(v9 + 928, a1 + 96);
    v10 = sub_100038E50();
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 232))(v10);
    v11 = sub_100038E50();
    sub_1005299B8(v11 + 968, a1 + 104);
    v12 = sub_100038E50();
    sub_10052A25C(v12 + 1008, a1 + 112);
  }
  v13 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(v13, 1, 0);
  if (sub_1004F978C())
  {
    v14 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 352))(v14))
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](AVAudioSession, "sharedInstance"));
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_10050FA5C;
      v20[3] = &unk_100935968;
      v20[4] = a1;
      v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "addObserverForName:object:queue:usingBlock:", AVAudioSessionRouteChangeNotification, v16, 0, v20));
      v18 = *(void **)(a1 + 232);
      *(_QWORD *)(a1 + 232) = v17;

    }
  }
  if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming")
    && sub_100186524((uint64_t)sub_10050FDD0, 0)
    && os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006FE48C();
  }
  return sub_10050FF20(a1);
}

void sub_10050F528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10050F544(_WORD *a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  __int16 v13;

  v4 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Reading back PPR power table for N1x1", (uint8_t *)v12, 2u);
  }
  if (a2 == 2000)
  {
    a1[410] = 10;
    v5 = sub_1000438A4();
    return (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _WORD *))(*(_QWORD *)v5 + 600))(v5, 145, a1 + 410, a1 + 324);
  }
  else
  {
    v12[0] = 0;
    v12[1] = 0;
    v13 = 0;
    a1[410] = 18;
    v7 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, _WORD *, _QWORD *))(*(_QWORD *)v7 + 600))(v7, 148, a1 + 410, v12);
    a1[324] = *(_WORD *)((char *)v12 + 1);
    a1[410] = 18;
    v8 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, _WORD *, _QWORD *))(*(_QWORD *)v8 + 600))(v8, 149, a1 + 410, v12);
    a1[325] = *(_WORD *)((char *)v12 + 1);
    a1[410] = 18;
    v9 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, _WORD *, _QWORD *))(*(_QWORD *)v9 + 600))(v9, 150, a1 + 410, v12);
    a1[326] = *(_WORD *)((char *)v12 + 1);
    a1[410] = 18;
    v10 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, _WORD *, _QWORD *))(*(_QWORD *)v10 + 600))(v10, 152, a1 + 410, v12);
    a1[327] = *(_WORD *)((char *)v12 + 1);
    a1[410] = 18;
    v11 = sub_1000438A4();
    result = (*(uint64_t (**)(uint64_t, uint64_t, _WORD *, _QWORD *))(*(_QWORD *)v11 + 600))(v11, 153, a1 + 410, v12);
    a1[328] = *(_WORD *)((char *)v12 + 1);
    a1[410] = 10;
  }
  return result;
}

uint64_t sub_10050F6F8(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t result;
  __int16 v7;
  uint64_t v8;
  int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t v16[14];
  __int16 v17;

  v17 = 128;
  *(_WORD *)(a1 + 822) = 0;
  v4 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Reading back REG power table for N1x1", v16, 2u);
  }
  if (a2 != 2000)
  {
    v17 = 128;
    v8 = sub_1000438A4();
    result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(_QWORD *)v8 + 600))(v8, 154, &v17, a1 + 658);
    v9 = result;
    v10 = v17;
    if ((_DWORD)result)
      v10 = 0;
    v11 = v10;
    if (!(_DWORD)result && ((char)v10 & 0x80000000) == 0)
    {
      v17 = 128 - v10;
      v12 = sub_1000438A4();
      result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(_QWORD *)v12 + 600))(v12, 155, &v17, a1 + v11 + 658);
      if ((_DWORD)result)
        goto LABEL_24;
      v11 += v17;
    }
    if (!v9 && (v11 & 0x80) == 0)
    {
      v17 = 128 - v11;
      v13 = sub_1000438A4();
      result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(_QWORD *)v13 + 600))(v13, 156, &v17, a1 + v11 + 658);
      if ((_DWORD)result)
        goto LABEL_24;
      v11 += v17;
    }
    if (v9 || (v11 & 0x80) != 0)
    {
LABEL_20:
      if (!v9 && (v11 & 0x80) == 0)
      {
        v17 = 128 - v11;
        v15 = sub_1000438A4();
        result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(_QWORD *)v15 + 600))(v15, 162, &v17, a1 + v11 + 658);
        if (!(_DWORD)result)
          v11 += v17;
      }
      goto LABEL_24;
    }
    v17 = 128 - v11;
    v14 = sub_1000438A4();
    result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(_QWORD *)v14 + 600))(v14, 161, &v17, a1 + v11 + 658);
    if (!(_DWORD)result)
    {
      v11 += v17;
      goto LABEL_20;
    }
LABEL_24:
    v7 = v11;
    goto LABEL_25;
  }
  v5 = sub_1000438A4();
  result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(_QWORD *)v5 + 600))(v5, 146, &v17, a1 + 658);
  if ((_DWORD)result)
    return result;
  v7 = v17;
LABEL_25:
  *(_WORD *)(a1 + 822) = v7;
  return result;
}

uint64_t sub_10050F8E8(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t result;
  __int16 v7;
  uint64_t v8;
  int v9;
  unsigned __int8 v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint8_t v15[14];
  __int16 v16;

  v16 = 32;
  *(_WORD *)(a1 + 824) = 0;
  v4 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Reading back SAR power table for N1x1", v15, 2u);
  }
  if (a2 != 2000)
  {
    v16 = 32;
    v8 = sub_1000438A4();
    result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(_QWORD *)v8 + 600))(v8, 163, &v16, a1 + 786);
    v9 = result;
    if ((_DWORD)result)
      v10 = 0;
    else
      v10 = v16;
    if ((_DWORD)result)
      v11 = 1;
    else
      v11 = v10 > 0x1Fu;
    if (!v11)
    {
      v16 = 32 - v10;
      v12 = sub_1000438A4();
      result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(_QWORD *)v12 + 600))(v12, 164, &v16, a1 + v10 + 786);
      if ((_DWORD)result)
      {
LABEL_21:
        v7 = v10;
        goto LABEL_22;
      }
      v10 += v16;
    }
    if (v9)
      v13 = 1;
    else
      v13 = v10 > 0x1Fu;
    if (!v13)
    {
      v16 = 32 - v10;
      v14 = sub_1000438A4();
      result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(_QWORD *)v14 + 600))(v14, 165, &v16, a1 + v10 + 786);
      if (!(_DWORD)result)
        v10 += v16;
    }
    goto LABEL_21;
  }
  v5 = sub_1000438A4();
  result = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(_QWORD *)v5 + 600))(v5, 147, &v16, a1 + 786);
  if ((_DWORD)result)
    return result;
  v7 = v16;
LABEL_22:
  *(_WORD *)(a1 + 824) = v7;
  return result;
}

void sub_10050FA5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_10006BBEC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10050FABC;
  v3[3] = &unk_100917378;
  v3[4] = v1;
  sub_100041A34(v2, v3);
}

void sub_10050FABC(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFAbsoluteTime Current;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id obj;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v21 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v21 + 240) = 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](AVAudioSession, "sharedInstance"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "currentRoute"));

  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v20 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "outputs"));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (!v4)
    goto LABEL_16;
  v5 = *(_QWORD *)v24;
  obj = v3;
  while (2)
  {
    for (i = 0; i != v4; i = (char *)i + 1)
    {
      if (*(_QWORD *)v24 != v5)
        objc_enumerationMutation(obj);
      v7 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "portType"));
      if (objc_msgSend(v8, "isEqualToString:", AVAudioSessionPortBluetoothA2DP))
      {

LABEL_9:
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "UID"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "componentsSeparatedByString:", CFSTR("-")));

        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "firstObject"));
        v14 = sub_100649C7C(v13);

        v15 = 1;
        goto LABEL_11;
      }
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "portType"));
      v10 = objc_msgSend(v9, "isEqualToString:", AVAudioSessionPortBluetoothHFP);

      if (v10)
        goto LABEL_9;
      v15 = 0;
      v14 = 0;
LABEL_11:
      v16 = sub_100065478();
      Current = CFAbsoluteTimeGetCurrent();
      (*(void (**)(uint64_t, uint64_t, unint64_t, CFAbsoluteTime))(*(_QWORD *)v16 + 440))(v16, v15, v14, Current);
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "portType"));
      LODWORD(v16) = objc_msgSend(v18, "isEqualToString:", AVAudioSessionPortBuiltInReceiver);

      if ((_DWORD)v16)
      {
        v3 = obj;
        *(_BYTE *)(v21 + 240) = 1;
        goto LABEL_16;
      }
    }
    v3 = obj;
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v4)
      continue;
    break;
  }
LABEL_16:

  v19 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v19 + 96))(v19, 1, *(unsigned __int8 *)(v21 + 240));

}

void sub_10050FD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10050FDD0(int a1, uint64_t a2, int a3, __int16 a4, uint64_t a5)
{
  uint64_t v10;
  NSObject *v11;
  _DWORD v12[2];

  v10 = sub_10019AEA4(a2);
  if (!a1)
  {
    if ((a3 & 0xFFFFFFFD) != 0)
    {
      v11 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v12[0] = 67109120;
        v12[1] = a3;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "legacyModeChangeEvent received with invalid mode: %d", (uint8_t *)v12, 8u);
      }
    }
    else if (v10)
    {
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100935B70);
      sub_100528124((uint64_t)off_100977A90, 0, a2, a3, a4, a5);
    }
  }
}

uint64_t sub_10050FF20(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;

  v17 = 0;
  v16 = 0;
  v15 = 10;
  v2 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 152))(v2))
    return 2;
  v3 = *(_DWORD *)(a1 + 864);
  if (v3 == 6)
  {
    v4 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 400))(v4))
    {
      v5 = sub_100027F68();
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 408))(v5);
    }
    else
    {
      v6 = 186;
    }
    v10 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 416))(v10))
    {
      v11 = sub_100027F68();
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 424))(v11);
    }
    else
    {
      v8 = 186;
    }
    *(_BYTE *)(a1 + 861) = 1;
    v9 = 3;
  }
  else
  {
    v8 = 0;
    v6 = 0;
    v9 = 0;
    if (!*(_BYTE *)(a1 + 861))
      return 0;
  }
  v12 = sub_1000438A4();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, uint64_t *))(*(_QWORD *)v12 + 912))(v12, 4095, 9, v9, v6, v8, &v15, &v16);
  if ((_DWORD)result)
    v13 = 0;
  else
    v13 = v3 == 6;
  v14 = v13;
  *(_BYTE *)(a1 + 861) = v14;
  return result;
}

uint64_t sub_10051007C(uint64_t a1)
{
  return sub_10050F284(a1 - 8);
}

void sub_100510084(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AudioLinkManager::stackWillStop enter", buf, 2u);
  }
  *(_BYTE *)(a1 + 336) = 0;
  v3 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005101F8;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_sync(v3, block);
  if (*(_QWORD *)(a1 + 232))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v4, "removeObserver:", *(_QWORD *)(a1 + 232));

  }
  v5 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AudioLinkManager::stackWillStop enter", buf, 2u);
  }
  if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming")
    && sub_100186534((uint64_t)sub_10050FDD0)
    && os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006FE4EC();
  }
}

void sub_1005101E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1005101F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;

  v1 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD *)(v1 + 872);
  if (result)
  {
    v3 = (_QWORD *)(v1 + 872);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void sub_100510230(uint64_t a1)
{
  sub_100510084(a1 - 8);
}

void sub_100510238(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  *(_OWORD *)(a1 + 958) = 0u;
  *(_OWORD *)(a1 + 974) = 0u;
  *(_OWORD *)(a1 + 942) = 0u;
  v2 = *(NSObject **)(a1 + 248);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1005102A0;
  v3[3] = &unk_100918090;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_async(v2, v3);
}

void sub_1005102A0(uint64_t a1)
{
  sub_1000967DC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 216), *(_QWORD *)(a1 + 40));
}

void sub_1005102AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];

  v2 = a1 - 136;
  *(_OWORD *)(a1 + 822) = 0u;
  *(_OWORD *)(a1 + 838) = 0u;
  *(_OWORD *)(a1 + 806) = 0u;
  v3 = *(NSObject **)(a1 + 112);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1005102A0;
  v4[3] = &unk_100918090;
  v4[4] = v2;
  v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_100510314(uint64_t a1, char a2)
{
  NSObject *v2;
  _QWORD v3[5];
  char v4;

  v2 = *(NSObject **)(a1 + 248);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100510370;
  v3[3] = &unk_100918888;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

uint64_t sub_100510370(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v1 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(v1 + 200))
  {
    v2 = result;
    result = sub_1000438A4();
    v3 = *(_DWORD *)(result + 712);
    if (v3 - 1 <= 0x7CE && (v3 != 15 ? (v4 = v3 >= 0x13) : (v4 = 1), v4))
    {
      v5 = sub_1000438A4();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 576))(v5, *(unsigned __int8 *)(v2 + 40), 1);
    }
    else
    {
      v6 = *(_QWORD **)(v1 + 184);
      if (v6 != (_QWORD *)(v1 + 192))
      {
        do
        {
          sub_100510480(v1, v6[4], *(_DWORD *)(v6[5] + 76), (char *)(v1 + 870));
          sub_1005106B0(v1, *(_BYTE *)(v2 + 40), (_BYTE *)(v1 + 868), (_BYTE *)(v1 + 869));
          result = sub_100510734(v1);
          v7 = (_QWORD *)v6[1];
          if (v7)
          {
            do
            {
              v8 = v7;
              v7 = (_QWORD *)*v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              v8 = (_QWORD *)v6[2];
              v9 = *v8 == (_QWORD)v6;
              v6 = v8;
            }
            while (!v9);
          }
          v6 = v8;
        }
        while (v8 != (_QWORD *)(v1 + 192));
      }
    }
  }
  return result;
}

void sub_100510480(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  uint64_t v7;
  int v8;
  char v9;
  NSObject *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  void *__p[2];
  char v19;
  int v20;
  uint8_t buf[8];
  char v22;

  v20 = 0;
  v7 = sub_100027F68();
  sub_100091AE8(buf, "ePA");
  sub_100091AE8(__p, "ePAThreshold");
  v8 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v7 + 88))(v7, buf, __p, &v20);
  if (v19 < 0)
    operator delete(__p[0]);
  if ((v22 & 0x80000000) == 0)
  {
    if (v8)
      goto LABEL_5;
LABEL_8:
    v11 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 384))(v11))
    {
      v12 = -62;
LABEL_25:
      *a4 = v12;
      return;
    }
    if (a3 == 1)
    {
      v15 = sub_100442118(a2, 12);
      if ((v15 & 1) != 0 || (sub_1005172B0(v15, a2) & 1) != 0)
      {
        v14 = -57;
        goto LABEL_22;
      }
      v16 = !sub_10043FE60(a2);
      v14 = -68;
      v17 = -73;
    }
    else
    {
      if (a3 != 2)
      {
LABEL_23:
        if (sub_10005F864() != 147)
          return;
        v12 = *a4 + 12;
        goto LABEL_25;
      }
      v13 = sub_100442118(a2, 12);
      if ((v13 & 1) != 0 || (sub_1005172B0(v13, a2) & 1) != 0)
      {
        v14 = -62;
LABEL_22:
        *a4 = v14;
        goto LABEL_23;
      }
      v16 = !sub_10043FE60(a2);
      v14 = -69;
      v17 = -74;
    }
    if (!v16)
      v14 = v17;
    goto LABEL_22;
  }
  operator delete(*(void **)buf);
  if (!v8)
    goto LABEL_8;
LABEL_5:
  v9 = v20;
  *a4 = v20;
  v10 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined ePA threshold to %d dBm through defaults write", buf, 8u);
  }
}

void sub_100510674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005106B0(uint64_t a1, char a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t result;

  sub_1000438A4();
  *a3 = sub_100331C58();
  sub_1000438A4();
  *a4 = sub_100331ADC();
  sub_1000438A4();
  if (sub_100331ABC() && (a2 & 1) == 0)
  {
    sub_1000438A4();
    *a4 = sub_100331E84();
  }
  result = sub_10051F7A4(a1);
  if ((_DWORD)result)
  {
    result = sub_10005F864();
    if ((_DWORD)result == 147)
      *a3 = 48;
  }
  return result;
}

uint64_t sub_100510734(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  uint8_t buf[8];
  char v9;
  char v10;

  if (!*(_BYTE *)(result + 337))
  {
    v1 = result;
    if (*(_DWORD *)(sub_1000438A4() + 712) >= 0x13u)
    {
      v10 = 0;
      v2 = sub_100027F68();
      sub_100091AE8(buf, "ePA");
      sub_100091AE8(__p, "DisableReTxEPA");
      (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v2 + 72))(v2, buf, __p, &v10);
      if (v7 < 0)
        operator delete(__p[0]);
      if (v9 < 0)
        operator delete(*(void **)buf);
      if (!v10)
      {
        v4 = 2;
        goto LABEL_12;
      }
      v3 = qword_1009997E0;
      v4 = 0;
      if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
LABEL_12:
        v5 = sub_1000438A4();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 88))(v5, 1, v4, *(unsigned __int8 *)(v1 + 868), *(unsigned __int8 *)(v1 + 869), *(char *)(v1 + 870));
      }
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: Disabling ePA for retransmission policy through defaults write", buf, 2u);
    }
    v4 = 0;
    goto LABEL_12;
  }
  return result;
}

void sub_100510860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100510894(uint64_t a1, char a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[5];
  char v5;

  v2 = a1 - 16;
  v3 = *(NSObject **)(a1 + 232);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100510370;
  v4[3] = &unk_100918888;
  v4[4] = v2;
  v5 = a2;
  dispatch_async(v3, v4);
}

void sub_1005108F0(uint64_t a1, __int128 *a2, int *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD block[7];
  int v13;
  __int16 v14;
  _QWORD v15[6];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];

  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x11012000000;
  v15[3] = sub_100062674;
  v15[4] = nullsub_22;
  v15[5] = &unk_10083E079;
  v4 = a2[11];
  v26 = a2[10];
  v27 = v4;
  v28[0] = a2[12];
  *(_OWORD *)((char *)v28 + 15) = *(__int128 *)((char *)a2 + 207);
  v5 = a2[7];
  v22 = a2[6];
  v23 = v5;
  v6 = a2[9];
  v24 = a2[8];
  v25 = v6;
  v7 = a2[3];
  v18 = a2[2];
  v19 = v7;
  v8 = a2[5];
  v20 = a2[4];
  v21 = v8;
  v9 = a2[1];
  v16 = *a2;
  v17 = v9;
  v13 = *a3;
  v14 = *((_WORD *)a3 + 2);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100935C90);
  v10 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v13, 0);
  v11 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100510A98;
  block[3] = &unk_100918690;
  block[5] = a1;
  block[6] = v10;
  block[4] = v15;
  dispatch_async(v11, block);
  _Block_object_dispose(v15, 8);
}

void sub_100510A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double sub_100510A98(_QWORD *a1, double result)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t **v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  float v23;
  _BYTE *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  float v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  __int16 *v52;
  __int16 v53;
  uint64_t v54;
  uint64_t *v55;
  __int16 v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;

  v3 = a1 + 6;
  v2 = a1[6];
  if (v2)
  {
    v4 = a1[5];
    v5 = *(_QWORD **)(v4 + 192);
    if (v5)
    {
      v7 = (uint64_t **)(v4 + 184);
      v8 = v4 + 192;
      do
      {
        v9 = v5[4];
        v10 = v9 >= v2;
        if (v9 >= v2)
          v11 = v5;
        else
          v11 = v5 + 1;
        if (v10)
          v8 = (uint64_t)v5;
        v5 = (_QWORD *)*v11;
      }
      while (*v11);
      if (v8 != v4 + 192 && v2 >= *(_QWORD *)(v8 + 32))
      {
        sub_10051165C(a1[5], v2, (_BYTE *)(*(_QWORD *)(a1[4] + 8) + 48));
        sub_1000438A4();
        if (!sub_100331430())
          *(_WORD *)(*(_QWORD *)(a1[4] + 8) + 225) = 0;
        v12 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 136))(v12) && *(_DWORD *)(v4 + 856) != 3)
          sub_100511CAC(v4, a1[6], *(_QWORD *)(a1[4] + 8) + 48);
        v13 = sub_100027F68();
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 288))(v13);
        if ((v14 & 1) == 0 && *(_DWORD *)(v4 + 856) != 3)
          sub_100511DB8(v14, *(unsigned __int8 *)(*(_QWORD *)(a1[4] + 8) + 49), (unsigned __int16 *)(*(_QWORD *)(a1[4] + 8) + 213));
        v64 = v3;
        if (*(_QWORD *)sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5]
          && *(unsigned __int16 *)(*(_QWORD *)(a1[4] + 8) + 66) <= *(unsigned __int16 *)(*(_QWORD *)(a1[4] + 8) + 64))
        {
          v64 = v3;
          v15 = *(_QWORD *)sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5];
          *(_QWORD *)(v15 + 416) += *(char *)(*(_QWORD *)(a1[4] + 8) + 54);
          ++*(_DWORD *)(v15 + 424);
          v64 = v3;
          v16 = *(_QWORD *)sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5];
          v17 = *(char *)(*(_QWORD *)(a1[4] + 8) + 55);
          if (*(_DWORD *)(v16 + 428) > v17)
            *(_DWORD *)(v16 + 428) = v17;
          v64 = v3;
          v18 = *(_QWORD *)sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5];
          v19 = *(char *)(*(_QWORD *)(a1[4] + 8) + 56);
          if (*(_DWORD *)(v18 + 432) < v19)
            *(_DWORD *)(v18 + 432) = v19;
          v64 = v3;
          if (*(_QWORD *)(sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5] + 24))
          {
            v20 = *(char *)(*(_QWORD *)(a1[4] + 8) + 54);
            v64 = v3;
            *(_QWORD *)(*(_QWORD *)(sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5] + 24)
                      + 80) = v20;
            v22 = *(_QWORD *)(a1[4] + 8);
            if (*(_WORD *)(v22 + 64))
            {
              LOWORD(v21) = *(_WORD *)(v22 + 66);
              v23 = (float)((float)v21 * 100.0) / (float)*(unsigned __int16 *)(v22 + 64);
            }
            else
            {
              v23 = 0.0;
            }
            v64 = v3;
            *(_QWORD *)(*(_QWORD *)(sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5] + 24)
                      + 72) = (uint64_t)v23;
          }
          v24 = *(_BYTE **)(v4 + 208);
          if (v24[8])
          {
            v64 = v3;
            v25 = sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
            *(_DWORD *)(*(_QWORD *)v25[5] + 436) |= 2u;
            v24 = *(_BYTE **)(v4 + 208);
          }
          if (v24[7])
          {
            v64 = v3;
            sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
            v24 = *(_BYTE **)(v4 + 208);
          }
          if (v24[5])
          {
            v64 = v3;
            v26 = sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
            *(_DWORD *)(*(_QWORD *)v26[5] + 436) |= 4u;
            v24 = *(_BYTE **)(v4 + 208);
          }
          if (v24[6])
          {
            v64 = v3;
            v27 = sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
            *(_DWORD *)(*(_QWORD *)v27[5] + 436) |= 8u;
            v24 = *(_BYTE **)(v4 + 208);
          }
          if (v24[1])
          {
            v64 = v3;
            v28 = sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
            *(_DWORD *)(*(_QWORD *)v28[5] + 436) |= 0x20u;
            v24 = *(_BYTE **)(v4 + 208);
          }
          if (v24[4])
          {
            v64 = v3;
            v29 = sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
            *(_DWORD *)(*(_QWORD *)v29[5] + 436) |= 0x80u;
            v24 = *(_BYTE **)(v4 + 208);
          }
          if (v24[3])
          {
            v64 = v3;
            v30 = sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
            *(_DWORD *)(*(_QWORD *)v30[5] + 436) |= 0x10u;
            v24 = *(_BYTE **)(v4 + 208);
          }
          if (v24[2])
          {
            v64 = v3;
            v31 = sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
            *(_DWORD *)(*(_QWORD *)v31[5] + 436) |= 0x40u;
          }
          v32 = *(_QWORD *)(a1[4] + 8);
          if (*(_WORD *)(v32 + 64))
            v33 = 100 * *(unsigned __int16 *)(v32 + 66) / *(unsigned __int16 *)(v32 + 64);
          else
            v33 = 0;
          v64 = v3;
          if (*(_DWORD *)(sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5] + 64) == 1)
          {
            v34 = *v3;
            v64 = v3;
            v35 = sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
            sub_100511F08(v4, v34, v33, *(unsigned __int8 *)(v35[5] + 70));
          }
          sub_1000A4E80(*(_QWORD *)(v4 + 208), a1[6], v33, *(_QWORD *)(a1[4] + 8) + 48, 0);
          sub_1000A7E2C(*(_QWORD *)(v4 + 208), a1[6], v33, *(_QWORD *)(a1[4] + 8) + 48);
          v64 = v3;
          if (*(_BYTE *)(sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5] + 56))
          {
            v36 = *v3;
            v64 = v3;
            v37 = sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
            sub_100512320(v4, v36, v33, *(_BYTE *)(v37[5] + 70));
          }
          v64 = v3;
          v38 = sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
          *(_DWORD *)(*(_QWORD *)v38[5] + 104) += *(unsigned __int16 *)(*(_QWORD *)(a1[4] + 8) + 60);
          v64 = v3;
          v39 = *(_QWORD *)sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5];
          v40 = *(unsigned __int16 *)(*(_QWORD *)(a1[4] + 8) + 64);
          *(_DWORD *)(v39 + 108) += v40;
          if (v40 <= 0x1D)
            ++*(_QWORD *)(v39 + 512);
          v64 = v3;
          *(_BYTE *)(*(_QWORD *)sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5] + 388) = *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 54);
          v64 = v3;
          v41 = sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
          *(int32x2_t *)(*(_QWORD *)v41[5] + 404) = vadd_s32(*(int32x2_t *)(*(_QWORD *)v41[5] + 404), (int32x2_t)(v33 | 0x100000000));
          v42 = sub_100027F68();
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 288))(v42) & 1) == 0)
          {
            v43 = *(_QWORD *)(a1[4] + 8) + 48;
            v64 = v3;
            v44 = *(unsigned __int16 *)(sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5] + 58);
            v64 = v3;
            if (v44 >= *(unsigned __int16 *)(sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5]
                                            + 60))
            {
              v64 = v3;
              v45 = sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
              v47 = (unsigned __int16 *)(v45[5] + 60);
            }
            else
            {
              v64 = v3;
              v45 = sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
              v47 = (unsigned __int16 *)(v45[5] + 58);
            }
            sub_10051284C(v46, (uint64_t)v45, v43, *v47, *v3);
            if (qword_100978120 != -1)
              dispatch_once(&qword_100978120, &stru_100935C70);
            v48 = qword_100978118;
            v49 = a1[6];
            v50 = *(_QWORD *)(a1[4] + 8) + 48;
            v64 = v3;
            v51 = *(unsigned __int16 *)(sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5] + 58);
            v64 = v3;
            if (v51 >= *(unsigned __int16 *)(sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5]
                                            + 60))
            {
              v64 = v3;
              v52 = (__int16 *)(sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5] + 60);
            }
            else
            {
              v64 = v3;
              v52 = (__int16 *)(sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5] + 58);
            }
            v53 = *v52;
            v54 = *(_QWORD *)(v4 + 208);
            v64 = v3;
            v55 = sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
            v56 = sub_1000A5A80(v54, *(_DWORD *)(*(_QWORD *)(v55[5] + 40) + 20), *v3);
            sub_1002656F0(v48, v49, v50, v53, v56);
          }
        }
        v64 = v3;
        if (!*(_QWORD *)sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5])
          goto LABEL_73;
        v64 = v3;
        v57 = *(unsigned __int16 *)(*(_QWORD *)(sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5]
                                              + 40)
                                  + 16);
        if (v57 < 0x97)
        {
          if (v57 == 150)
            goto LABEL_73;
        }
        else
        {
          v64 = v3;
          if (*(_DWORD *)(*(_QWORD *)sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5] + 312) <= 0x95u)
          {
LABEL_73:
            v64 = v3;
            if (*(_QWORD *)(sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5] + 8))
            {
              sub_1005131F4(v4, a1[6], *(_QWORD *)(a1[4] + 8) + 48);
              v58 = sub_100027F68();
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 288))(v58) & 1) == 0)
              {
                sub_1005138B4(v4, *(_QWORD *)(a1[4] + 8) + 48, a1[6]);
                sub_100096BAC(*(_QWORD *)(v4 + 216), a1[6], *(_QWORD *)(a1[4] + 8) + 48);
                if (qword_100978120 != -1)
                  dispatch_once(&qword_100978120, &stru_100935C70);
                v59 = qword_100978118;
                v60 = a1[6];
                v61 = *(_QWORD *)(a1[4] + 8) + 48;
                v64 = v3;
                v62 = sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64);
                sub_1002656F0(v59, v60, v61, 0, *(_WORD *)(*(_QWORD *)(v62[5] + 40) + 16));
              }
            }
            v64 = v3;
            if (*(_BYTE *)(sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5] + 72))
            {
              v64 = v3;
              if (*(_DWORD *)(sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5] + 76) == 2)
              {
                v63 = sub_100027F68();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63))
                  sub_1000A675C(*(_QWORD *)(v4 + 208), *v3);
              }
            }
            return sub_100513F00(v4, a1[6], *(_QWORD *)(a1[4] + 8) + 48);
          }
        }
        v64 = v3;
        *(_DWORD *)(*(_QWORD *)sub_10002252C(v7, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v64)[5] + 312) = v57;
        goto LABEL_73;
      }
    }
  }
  return result;
}

void sub_10051165C(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  unsigned int v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char v27;
  int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  size_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  double v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  double v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t **v56;
  _QWORD *v57;
  unint64_t v58;
  BOOL v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  unint64_t v65;
  unint64_t *v66;

  v65 = a2;
  v4 = *(unsigned __int8 *)(a1 + 942);
  if (v4 <= 1)
  {
    a3[221] = v4;
LABEL_48:
    v29 = 0;
    LOBYTE(v6) = 0;
    v7 = 0;
    v30 = 0;
    v31 = 0;
    v32 = a3 + 86;
    do
    {
      if (((a3[(v29 >> 3) + 76] >> (v29 & 7)) & 1) != 0)
      {
        LOBYTE(v6) = v6 + 1;
        if (v30 >= v31)
        {
          v33 = (uint64_t)&v30[-v7 + 1];
          if (v33 < 0)
            abort();
          if (2 * (uint64_t)&v31[-v7] > (unint64_t)v33)
            v33 = 2 * (_QWORD)&v31[-v7];
          if ((unint64_t)&v31[-v7] >= 0x3FFFFFFFFFFFFFFFLL)
            v34 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
            v35 = (char *)operator new(v34);
          else
            v35 = 0;
          v36 = &v30[(_QWORD)v35 - v7];
          *v36 = v32[v29];
          v37 = v36 + 1;
          if (v30 != (char *)v7)
          {
            v38 = &v30[~v7];
            do
            {
              v39 = *--v30;
              (v38--)[(_QWORD)v35] = v39;
            }
            while (v30 != (char *)v7);
            v36 = v35;
          }
          v31 = &v35[v34];
          if (v7)
            operator delete((void *)v7);
          v30 = v37;
          v7 = (uint64_t)v36;
        }
        else
        {
          *v30++ = v32[v29];
        }
      }
      ++v29;
    }
    while (v29 != 79);
    if ((_BYTE)v6)
    {
      v40 = 126 - 2 * __clz((unint64_t)&v30[-v7]);
      v41 = &v30[-v7];
      if (v30 == (char *)v7)
        v42 = 0;
      else
        v42 = v40;
      sub_10052C634(v7, v30, v42, 1);
      v43 = (double)v6;
      v44 = (unint64_t)(ceil(v43 * 0.5) + -1.0);
      if ((unint64_t)v41 <= v44
        || (a3[217] = *(_BYTE *)(v7 + v44),
            v45 = (unint64_t)(ceil(v43 * 0.75) + -1.0),
            (unint64_t)v41 <= v45)
        || (a3[218] = *(_BYTE *)(v7 + v45),
            v46 = (unint64_t)(ceil(v43 * 0.9) + -1.0),
            (unint64_t)v41 <= v46))
      {
        abort();
      }
      a3[219] = *(_BYTE *)(v7 + v46);
    }
    else
    {
      LOBYTE(v6) = 0;
      *(_WORD *)(a3 + 217) = 0;
      a3[219] = 0;
    }
    goto LABEL_86;
  }
  if (!*(_BYTE *)(a1 + 943))
    LOBYTE(v4) = 0;
  a3[221] = v4;
  if (!*(_BYTE *)(a1 + 943))
    goto LABEL_48;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = a3 + 86;
  do
  {
    v11 = a3[(v5 >> 3) + 76];
    if (v8 >= v9)
    {
      v12 = (uint64_t)&v8[-v7 + 1];
      if (v12 < 0)
        abort();
      if (2 * (uint64_t)&v9[-v7] > (unint64_t)v12)
        v12 = 2 * (_QWORD)&v9[-v7];
      if ((unint64_t)&v9[-v7] >= 0x3FFFFFFFFFFFFFFFLL)
        v13 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)operator new(v13);
      else
        v14 = 0;
      v15 = &v8[(_QWORD)v14 - v7];
      *v15 = v10[v5];
      v16 = v15 + 1;
      if (v8 != (char *)v7)
      {
        v17 = &v8[~v7];
        do
        {
          v18 = *--v8;
          (v17--)[(_QWORD)v14] = v18;
        }
        while (v8 != (char *)v7);
        v15 = v14;
      }
      v9 = &v14[v13];
      if (v7)
        operator delete((void *)v7);
      v7 = (uint64_t)v15;
      v8 = v16;
    }
    else
    {
      *v8++ = v10[v5];
    }
    v6 += (v11 >> (v5++ & 7)) & 1;
  }
  while (v5 != 79);
  v19 = 0;
  while (1)
  {
    v20 = *(_BYTE *)(a1 + v19 + 943);
    if (!v20)
      break;
    if (v8 >= v9)
    {
      v21 = (uint64_t)&v8[-v7 + 1];
      if (v21 < 0)
        abort();
      if (2 * (uint64_t)&v9[-v7] > (unint64_t)v21)
        v21 = 2 * (_QWORD)&v9[-v7];
      if ((unint64_t)&v9[-v7] >= 0x3FFFFFFFFFFFFFFFLL)
        v22 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v23 = (char *)operator new(v22);
      else
        v23 = 0;
      v24 = &v8[(_QWORD)v23 - v7];
      *v24 = v20;
      v25 = v24 + 1;
      if (v8 != (char *)v7)
      {
        v26 = &v8[~v7];
        do
        {
          v27 = *--v8;
          (v26--)[(_QWORD)v23] = v27;
        }
        while (v8 != (char *)v7);
        v24 = v23;
      }
      v9 = &v23[v22];
      if (v7)
        operator delete((void *)v7);
      v7 = (uint64_t)v24;
      v8 = v25;
    }
    else
    {
      *v8++ = v20;
    }
    if (++v19 == 47)
    {
      v28 = 126;
      goto LABEL_79;
    }
  }
  v28 = v19 + 79;
LABEL_79:
  v47 = 126 - 2 * __clz((unint64_t)&v8[-v7]);
  v48 = &v8[-v7];
  if (v8 == (char *)v7)
    v49 = 0;
  else
    v49 = v47;
  sub_10052BD14(v7, v8, v49, 1);
  v50 = (double)v28;
  v51 = (unint64_t)(ceil((double)v28 * 0.5) + -1.0);
  if ((unint64_t)v48 <= v51
    || (a3[217] = *(_BYTE *)(v7 + v51), v52 = (unint64_t)(ceil(v50 * 0.75) + -1.0), (unint64_t)v48 <= v52)
    || (a3[218] = *(_BYTE *)(v7 + v52), v53 = (unint64_t)(ceil(v50 * 0.9) + -1.0), (unint64_t)v48 <= v53))
  {
    abort();
  }
  a3[219] = *(_BYTE *)(v7 + v53);
  a3[222] = v28;
LABEL_86:
  a3[220] = v6;
  v54 = v65;
  *(_BYTE *)(a1 + 942) = 0;
  if (v54)
  {
    v55 = *(_QWORD **)(a1 + 192);
    if (v55)
    {
      v56 = (uint64_t **)(a1 + 184);
      v57 = (_QWORD *)(a1 + 192);
      do
      {
        v58 = v55[4];
        v59 = v58 >= v54;
        if (v58 >= v54)
          v60 = v55;
        else
          v60 = v55 + 1;
        if (v59)
          v57 = v55;
        v55 = (_QWORD *)*v60;
      }
      while (*v60);
      if (v57 != (_QWORD *)(a1 + 192) && v54 >= v57[4])
      {
        v66 = &v65;
        if (*(_QWORD *)sub_10002252C((uint64_t **)(a1 + 184), &v65, (uint64_t)&unk_100740F58, (uint64_t **)&v66)[5])
        {
          v66 = &v65;
          v61 = sub_10002252C(v56, &v65, (uint64_t)&unk_100740F58, (uint64_t **)&v66);
          sub_100521544((uint64_t)v61, *(_DWORD **)v61[5], (uint64_t)a3);
        }
        v66 = &v65;
        if (*(_QWORD *)(sub_10002252C(v56, &v65, (uint64_t)&unk_100740F58, (uint64_t **)&v66)[5] + 8))
        {
          v66 = &v65;
          v62 = sub_10002252C(v56, &v65, (uint64_t)&unk_100740F58, (uint64_t **)&v66);
          sub_100521544((uint64_t)v62, *(_DWORD **)(v62[5] + 8), (uint64_t)a3);
        }
        v66 = &v65;
        if (*(_QWORD *)(sub_10002252C(v56, &v65, (uint64_t)&unk_100740F58, (uint64_t **)&v66)[5] + 16))
        {
          v66 = &v65;
          v63 = sub_10002252C(v56, &v65, (uint64_t)&unk_100740F58, (uint64_t **)&v66);
          sub_100521544((uint64_t)v63, *(_DWORD **)(v63[5] + 16), (uint64_t)a3);
        }
      }
    }
  }
  if (v7)
    operator delete((void *)v7);
}

void sub_100511C7C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_100511CAC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t *v12;

  v11 = a2;
  v4 = (uint64_t **)(a1 + 184);
  v12 = &v11;
  if (*(_QWORD *)sub_10002252C((uint64_t **)(a1 + 184), &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12)[5])
  {
    v12 = &v11;
    v5 = sub_10002252C(v4, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12);
    v6 = *(_QWORD *)v5[5];
    if (v6)
      v7 = (_DWORD *)(v6 + 36);
    else
      v7 = 0;
    sub_1005214F8((uint64_t)v5, v7, a3);
  }
  v12 = &v11;
  if (*(_QWORD *)(sub_10002252C(v4, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12)[5] + 8))
  {
    v12 = &v11;
    v8 = sub_10002252C(v4, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12);
    v9 = *(_QWORD *)(v8[5] + 8);
    if (v9)
      v10 = (_DWORD *)(v9 + 36);
    else
      v10 = 0;
    sub_1005214F8((uint64_t)v8, v10, a3);
  }
}

double sub_100511DB8(uint64_t a1, int a2, unsigned __int16 *a3)
{
  uint64_t v5;
  double result;
  NSObject *v7;
  unsigned int v8;
  double v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;

  v5 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 136))(v5))
  {
    v7 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v8 = a3[2];
      v9 = (double)(v8 >> 1) * 100.0;
      v10 = *a3;
      v11 = a3[1];
      v14[0] = 67111424;
      v12 = a3[3];
      v13 = a3[4];
      v14[1] = v8;
      v15 = 1024;
      v16 = a2;
      v17 = 2048;
      v18 = v9 / (double)v10;
      v19 = 2048;
      v20 = v9 / (double)v11;
      v21 = 1024;
      v22 = v8 >> 1;
      v23 = 1024;
      v24 = (v8 & 1) + (v8 >> 1);
      v25 = 1024;
      v26 = v10;
      v27 = 1024;
      v28 = v11;
      v29 = 1024;
      v30 = v12;
      v31 = 1024;
      v32 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DiversityReport:%3d switches in%3d sec. ReTx for {Ant0,Ant1} ~= {%3.0f%%,%3.0f%%} ((%2d ..%3d) / {%3d,%3d}). Good pkts b/w switches min =%3d, max =%3d", (uint8_t *)v14, 0x46u);
    }
  }
  return result;
}

uint64_t *sub_100511F08(uint64_t a1, unint64_t a2, unsigned int a3, int a4)
{
  uint64_t **v7;
  uint64_t *result;
  uint64_t *v9;
  NSObject *v10;
  __int16 v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t **v14;
  NSObject *v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  unint64_t v23;
  uint8_t buf[8];
  __int16 v25;
  const char *v26;

  v23 = a2;
  v7 = (uint64_t **)(a1 + 184);
  *(_QWORD *)buf = &v23;
  if (*(__int16 *)(sub_10002252C((uint64_t **)(a1 + 184), &v23, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 68) < 0)
  {
    v13 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "A2DP Link Adaptive Packet Type: Ignoring first retransmission rate report (%d%%)", buf, 8u);
    }
    goto LABEL_13;
  }
  *(_QWORD *)buf = &v23;
  result = sub_10002252C(v7, &v23, (uint64_t)&unk_100740F58, (uint64_t **)buf);
  if (*(_BYTE *)(*(_QWORD *)(result[5] + 40) + 2))
    return result;
  if (a3 <= 0x1D && !a4)
  {
    if (a3 <= 0xA)
    {
      *(_QWORD *)buf = &v23;
      result = sub_10002252C(v7, &v23, (uint64_t)&unk_100740F58, (uint64_t **)buf);
      if (*(_BYTE *)(result[5] + 71))
      {
        *(_QWORD *)buf = &v23;
        v9 = sub_10002252C(v7, &v23, (uint64_t)&unk_100740F58, (uint64_t **)buf);
        ++*(_WORD *)(v9[5] + 68);
        *(_QWORD *)buf = &v23;
        result = sub_10002252C(v7, &v23, (uint64_t)&unk_100740F58, (uint64_t **)buf);
        if (*(__int16 *)(result[5] + 68) >= 6)
        {
          v10 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)&buf[4] = a3;
            v25 = 2082;
            v26 = "No";
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "A2DP Link Adaptive Packet Type: Reverting to default support (%d%%) Purged %{public}s", buf, 0x12u);
          }
          v11 = sub_10051F8C4(a1, v23);
          v12 = sub_1004759E0();
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472;
          v19[2] = sub_10051FA88;
          v19[3] = &unk_10092D5B8;
          v20 = v11;
          sub_100041A34(v12, v19);
          *(_QWORD *)buf = &v23;
          *(_BYTE *)(sub_10002252C(v7, &v23, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 71) = 0;
LABEL_22:
          *(_QWORD *)buf = &v23;
          v14 = v7;
          goto LABEL_14;
        }
      }
      return result;
    }
LABEL_13:
    *(_QWORD *)buf = &v23;
    v14 = v7;
LABEL_14:
    result = sub_10002252C(v14, &v23, (uint64_t)&unk_100740F58, (uint64_t **)buf);
    *(_WORD *)(result[5] + 68) = 0;
    return result;
  }
  *(_QWORD *)buf = &v23;
  result = sub_10002252C(v7, &v23, (uint64_t)&unk_100740F58, (uint64_t **)buf);
  if (!*(_BYTE *)(result[5] + 71))
  {
    v15 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v16 = "No";
      if (a4)
        v16 = "Yes";
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = a3;
      v25 = 2082;
      v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "A2DP Link Adaptive Packet Type: Scaling back to 2Mbps Packets support (%d%%) Purged %{public}s", buf, 0x12u);
    }
    v17 = sub_10051F8C4(a1, v23);
    v18 = sub_1004759E0();
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10051FA34;
    v21[3] = &unk_10092D5B8;
    v22 = v17;
    sub_100041A34(v18, v21);
    *(_QWORD *)buf = &v23;
    *(_BYTE *)(sub_10002252C(v7, &v23, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 71) = 1;
    goto LABEL_22;
  }
  return result;
}

void sub_100512320(uint64_t a1, unint64_t a2, unsigned int a3, char a4)
{
  uint64_t **v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  unsigned __int8 v16;
  unsigned __int8 *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  unsigned int v25;
  unsigned __int16 *v26;
  int v27;
  int v28;
  unint64_t v29;
  uint8_t buf[8];
  __int16 v31;
  int v32;
  __int16 v33;
  unsigned int v34;

  v29 = a2;
  v7 = (uint64_t **)(a1 + 184);
  *(_QWORD *)buf = &v29;
  v8 = *(_DWORD *)(sub_10002252C((uint64_t **)(a1 + 184), &v29, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 80) == 33023;
  v9 = *(_QWORD *)(a1 + 1008);
  if ((*(_QWORD *)(a1 + 1016) - v9) >> 3 <= v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006FE5A4();
  }
  else
  {
    v10 = *(unsigned __int8 **)(v9 + 8 * v8);
    if (v10)
    {
      v11 = *(_QWORD **)(a1 + 192);
      if (!v11)
        goto LABEL_54;
      v12 = a1 + 192;
      do
      {
        v13 = v11[4];
        v14 = v13 >= v29;
        if (v13 >= v29)
          v15 = v11;
        else
          v15 = v11 + 1;
        if (v14)
          v12 = (uint64_t)v11;
        v11 = (_QWORD *)*v15;
      }
      while (*v15);
      if (v12 == a1 + 192 || v29 < *(_QWORD *)(v12 + 32))
      {
LABEL_54:
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
          sub_1006FE578();
        return;
      }
      v16 = *v10 - 1;
      if ((a4 & 1) == 0)
      {
        v17 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
        if (*v17 <= a3)
        {
          if ((*v10 - 1) >= 2u)
          {
            v18 = 0;
            while (v17[v18] > a3 || v17[v18 + 1] <= a3)
            {
              if ((*v10 - 1) - 1 == ++v18)
                goto LABEL_30;
            }
            v16 = v18 + 1;
          }
        }
        else
        {
          v16 = 0;
        }
      }
LABEL_30:
      v19 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEBUG))
      {
        *(_QWORD *)buf = &v29;
        v25 = *(unsigned __int16 *)(sub_10002252C(v7, &v29, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 58);
        *(_QWORD *)buf = &v29;
        if (v25 >= *(unsigned __int16 *)(sub_10002252C(v7, &v29, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 60))
        {
          *(_QWORD *)buf = &v29;
          v26 = (unsigned __int16 *)(sub_10002252C(v7, &v29, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 60);
        }
        else
        {
          *(_QWORD *)buf = &v29;
          v26 = (unsigned __int16 *)(sub_10002252C(v7, &v29, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 58);
        }
        v27 = *v26;
        *(_QWORD *)buf = &v29;
        v28 = *(unsigned __int16 *)(sub_10002252C(v7, &v29, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 58);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v27;
        v31 = 1024;
        v32 = v28;
        v33 = 1024;
        v34 = a3;
        _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "A2DP Link Adaptive Bitrate: currentRate: %3d currentIndexedRate: %3d reTransmissionStats: %3d", buf, 0x14u);
      }
      *(_QWORD *)buf = &v29;
      if (*(unsigned __int16 *)(sub_10002252C(v7, &v29, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 58) <= *(unsigned __int16 *)(*((_QWORD *)v10 + 2) + 2 * v16))
      {
        *(_QWORD *)buf = &v29;
        if (*(unsigned __int16 *)(sub_10002252C(v7, &v29, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 58) < *(unsigned __int16 *)(*((_QWORD *)v10 + 2) + 2 * v16))
        {
          *(_QWORD *)buf = &v29;
          v20 = sub_10002252C(v7, &v29, (uint64_t)&unk_100740F58, (uint64_t **)buf);
          v21 = *v10;
          if (*v10)
          {
            v22 = 0;
            v23 = *((_QWORD *)v10 + 2);
            while (*(unsigned __int16 *)(v23 + 2 * v22) > *(unsigned __int8 *)(v20[5] + 58))
            {
              if (v21 == ++v22)
              {
                LODWORD(v22) = *v10;
                break;
              }
            }
            if ((int)v22 >= 1 && (int)v22 <= (int)v21)
              sub_10051FE2C(a1, v29, *(unsigned __int16 *)(v23 + 2 * (v22 - 1)));
          }
          goto LABEL_46;
        }
      }
      else
      {
        *(_QWORD *)buf = &v29;
        if (*(__int16 *)(sub_10002252C(v7, &v29, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 62) < 0)
        {
          v24 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a3;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "A2DP Link Adaptive Bitrate: Ignoring first retransmission rate report (%d%%)", buf, 8u);
          }
        }
        else
        {
          sub_10051FADC(a1, v29, *(unsigned __int16 *)(*((_QWORD *)v10 + 2) + 2 * v16));
        }
      }
      *(_QWORD *)buf = &v29;
      *(_WORD *)(sub_10002252C(v7, &v29, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 62) = 0;
LABEL_46:
      *(_QWORD *)buf = &v29;
      *(_BYTE *)(sub_10002252C(v7, &v29, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 70) = 0;
      return;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006FE54C();
  }
}

void sub_10051284C(float a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  void **v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  void **v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _BOOL4 v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  void **v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  void **v68;
  const char *v69;
  NSObject *v70;
  uint32_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  void *__p[2];
  char v117;
  uint8_t buf[4];
  int v119;
  __int16 v120;
  double v121;
  __int16 v122;
  int v123;
  __int16 v124;
  int v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  int v137;
  __int16 v138;
  int v139;
  __int16 v140;
  int v141;
  __int16 v142;
  int v143;
  __int16 v144;
  _BYTE v145[10];
  __int16 v146;
  _BYTE v147[10];
  __int16 v148;
  int v149;
  __int16 v150;
  int v151;
  __int16 v152;
  int v153;
  __int16 v154;
  _BYTE v155[10];
  __int16 v156;
  int v157;
  __int16 v158;
  int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  int v163;
  __int16 v164;
  int v165;
  __int16 v166;
  int v167;
  __int16 v168;
  int v169;
  __int16 v170;
  int v171;
  __int16 v172;
  int v173;
  __int16 v174;
  void **v175;

  if (*(_WORD *)(a3 + 16))
  {
    LOWORD(a1) = *(_WORD *)(a3 + 18);
    v8 = (float)((float)((float)LODWORD(a1) * 100.0) / (float)*(unsigned __int16 *)(a3 + 16));
  }
  else
  {
    v8 = 0.0;
  }
  v9 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 176))(v9))
  {
    v10 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 2496))(v10))
    {
      v11 = qword_1009997E0;
      if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        return;
      v12 = *(unsigned __int16 *)(a3 + 2);
      v13 = *(unsigned __int16 *)(a3 + 18);
      v14 = *(unsigned __int16 *)(a3 + 16);
      v15 = *(unsigned __int16 *)(a3 + 179);
      v77 = *(char *)(a3 + 217);
      v79 = *(char *)(a3 + 218);
      v81 = *(char *)(a3 + 219);
      v16 = 222;
      if (*(unsigned __int8 *)(a3 + 221) < 2u)
        v16 = 220;
      v112 = a4;
      v17 = *(unsigned __int8 *)(a3 + v16);
      v18 = *(unsigned __int16 *)(a3 + 14);
      v72 = *(unsigned __int16 *)(a3 + 183);
      v73 = *(char *)(a3 + 9);
      v74 = *(unsigned __int16 *)(a3 + 185);
      v75 = *(char *)(a3 + 6);
      v76 = *(unsigned __int16 *)(a3 + 187);
      v78 = *(unsigned __int16 *)(a3 + 189);
      v80 = *(unsigned __int16 *)(a3 + 191);
      v82 = *(unsigned __int16 *)(a3 + 193);
      v84 = *(unsigned __int16 *)(a3 + 195);
      v86 = *(unsigned __int16 *)(a3 + 197);
      v88 = *(unsigned __int16 *)(a3 + 199);
      v90 = *(unsigned __int16 *)(a3 + 201);
      v92 = *(unsigned __int16 *)(a3 + 203);
      v94 = *(unsigned __int16 *)(a3 + 205);
      v96 = *(unsigned __int16 *)(a3 + 207);
      v98 = *(unsigned __int16 *)(a3 + 209);
      v101 = *(unsigned __int16 *)(a3 + 211);
      v104 = *(unsigned __int16 *)(a3 + 213);
      v108 = *(unsigned __int16 *)(a3 + 177);
      sub_10043F78C(a5, (uint64_t)__p);
      v119 = v12;
      v19 = (void **)__p[0];
      if (v117 >= 0)
        v19 = __p;
      v120 = 2048;
      *(_DWORD *)buf = 67117058;
      v121 = v8;
      v123 = v13;
      v122 = 1024;
      v124 = 1024;
      v125 = v14;
      v126 = 1024;
      v127 = v15;
      v128 = 1024;
      v129 = v13 - v15;
      v130 = 1024;
      v131 = v73;
      v132 = 1024;
      v133 = v75;
      v134 = 1024;
      v135 = v77;
      v136 = 1024;
      v137 = v79;
      v138 = 1024;
      v139 = v81;
      v140 = 1024;
      v141 = v17;
      v142 = 1024;
      v143 = v18;
      v144 = 1024;
      *(_DWORD *)v145 = v72;
      *(_WORD *)&v145[4] = 1024;
      *(_DWORD *)&v145[6] = v74;
      v146 = 1024;
      *(_DWORD *)v147 = v76;
      *(_WORD *)&v147[4] = 1024;
      *(_DWORD *)&v147[6] = v78;
      v148 = 1024;
      v149 = v80;
      v150 = 1024;
      v151 = v82;
      v152 = 1024;
      v153 = v84;
      v154 = 1024;
      *(_DWORD *)v155 = v86;
      *(_WORD *)&v155[4] = 1024;
      *(_DWORD *)&v155[6] = v88;
      v156 = 1024;
      v157 = v90;
      v158 = 1024;
      v159 = v92;
      v160 = 1024;
      v161 = v94;
      v162 = 1024;
      v163 = v96;
      v164 = 1024;
      v165 = v98;
      v166 = 1024;
      v167 = v101;
      v168 = 1024;
      v169 = v104;
      v170 = 1024;
      v171 = v112;
      v172 = 1024;
      v173 = v108;
      v174 = 2080;
      v175 = v19;
      v20 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d / %3d), NAK = %4d, NoSync = %4d, TxPwr = %2d dBm, RS"
            "SI = %4d, {50,75,90}th Noise = {%4d,%4d,%4d} for %2d ch, 2EDR pkts = %3d, 3EDRTx pkts = %3d, HDR4Tx pkts = %"
            "3d, HDR8Tx pkts = %3d,  1SlotTx pkts = %3d, 3SlotTx pkts = %3d, 5SlotTx pkts = %3d, CoexDenial = %3d, CoexRe"
            "quest = %3d, 3EDRRx pkts = %3d, HDR4Rx pkts = %3d, HDR8Rx pkts = %3d, 1SlotRx pkts = %3d, 3SlotRx pkts = %3d"
            ", 5SlotRx pkts = %3d, TxFlush pkts =%3d, Tx2Flush pkts = %3d, rate = %3d kbps Flow off = %d devicename = %s";
      v21 = v11;
      v22 = 202;
      goto LABEL_36;
    }
  }
  v23 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 176))(v23) && sub_10043FCAC(a5))
  {
    v24 = qword_1009997E0;
    if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      return;
    v113 = a4;
    v25 = *(unsigned __int16 *)(a3 + 2);
    v26 = *(unsigned __int16 *)(a3 + 18);
    v27 = *(unsigned __int16 *)(a3 + 16);
    v28 = *(unsigned __int16 *)(a3 + 179);
    v95 = *(char *)(a3 + 217);
    v99 = *(char *)(a3 + 218);
    v105 = *(char *)(a3 + 219);
    v29 = 222;
    if (*(unsigned __int8 *)(a3 + 221) < 2u)
      v29 = 220;
    v30 = *(unsigned __int8 *)(a3 + v29);
    v83 = *(unsigned __int16 *)(a3 + 14);
    v85 = *(unsigned __int16 *)(a3 + 183);
    v87 = *(char *)(a3 + 9);
    v89 = *(unsigned __int16 *)(a3 + 185);
    v91 = *(char *)(a3 + 6);
    v93 = *(unsigned __int16 *)(a3 + 187);
    v97 = *(unsigned __int16 *)(a3 + 195);
    v102 = *(unsigned __int16 *)(a3 + 197);
    v109 = *(unsigned __int16 *)(a3 + 177);
    sub_10043F78C(a5, (uint64_t)__p);
    if (v117 >= 0)
      v31 = __p;
    else
      v31 = (void **)__p[0];
    *(_DWORD *)buf = 67114242;
    v119 = v25;
    v120 = 2048;
    v121 = v8;
    v122 = 1024;
    v123 = v26;
    v124 = 1024;
    v125 = v27;
    v126 = 1024;
    v127 = v28;
    v128 = 1024;
    v129 = v26 - v28;
    v130 = 1024;
    v131 = v87;
    v132 = 1024;
    v133 = v91;
    v134 = 1024;
    v135 = v95;
    v136 = 1024;
    v137 = v99;
    v138 = 1024;
    v139 = v105;
    v140 = 1024;
    v141 = v30;
    v142 = 1024;
    v143 = v83;
    v144 = 1024;
    *(_DWORD *)v145 = v85;
    *(_WORD *)&v145[4] = 1024;
    *(_DWORD *)&v145[6] = v89;
    v146 = 1024;
    *(_DWORD *)v147 = v93;
    *(_WORD *)&v147[4] = 1024;
    *(_DWORD *)&v147[6] = v97;
    v148 = 1024;
    v149 = v102;
    v150 = 1024;
    v151 = v113;
    v152 = 1024;
    v153 = v109;
    v154 = 2080;
    *(_QWORD *)v155 = v31;
    v20 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d / %3d), NAK = %4d, NoSync = %4d, TxPwr = %2d dBm, RSSI"
          " = %4d, {50,75,90}th Noise = {%4d,%4d,%4d} for %2d ch, 2EDR pkts = %3d, 3EDR pkts = %3d, HDR4 pkts = %3d, HDR8"
          " pkts = %3d, CoexDenial = %3d, CoexRequest = %3d, rate = %3d kbps Flow off = %d devicename = %s";
    v21 = v24;
    v22 = 136;
    goto LABEL_36;
  }
  v32 = sub_10003BE44();
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 816))(v32);
  v34 = qword_1009997E0;
  v35 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
  if (!v33)
  {
    if (!v35)
      return;
    v115 = a4;
    v53 = *(unsigned __int16 *)(a3 + 2);
    v54 = *(unsigned __int16 *)(a3 + 18);
    v55 = *(unsigned __int16 *)(a3 + 16);
    v56 = *(char *)(a3 + 9);
    v57 = *(char *)(a3 + 6);
    v58 = *(char *)(a3 + 217);
    v59 = *(char *)(a3 + 218);
    v60 = *(char *)(a3 + 219);
    v61 = 222;
    if (*(unsigned __int8 *)(a3 + 221) < 2u)
      v61 = 220;
    v62 = *(unsigned __int8 *)(a3 + v61);
    v63 = *(unsigned __int16 *)(a3 + 14);
    v64 = *(unsigned __int16 *)(a3 + 177);
    if (a5)
    {
      v65 = a5;
      v66 = *(char *)(a3 + 219);
      v107 = *(unsigned __int16 *)(a3 + 14);
      v111 = *(unsigned __int16 *)(a3 + 177);
      v67 = *(unsigned __int8 *)(a3 + v61);
      sub_10043F78C(v65, (uint64_t)__p);
      v68 = __p;
      if (v117 < 0)
        v68 = (void **)__p[0];
      *(_DWORD *)buf = 67112450;
      v119 = v53;
      v120 = 2048;
      v121 = v8;
      v122 = 1024;
      v123 = v54;
      v124 = 1024;
      v125 = v55;
      v126 = 1024;
      v127 = v56;
      v128 = 1024;
      v129 = v57;
      v130 = 1024;
      v131 = v58;
      v132 = 1024;
      v133 = v59;
      v134 = 1024;
      v135 = v66;
      v136 = 1024;
      v137 = v67;
      v138 = 1024;
      v139 = v107;
      v140 = 1024;
      v141 = v115;
      v142 = 1024;
      v143 = v111;
      v144 = 2080;
      *(_QWORD *)v145 = v68;
      v20 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d /%3d), TxPwr =%2d dBm, RSSI =%4d, {50,75,90}th Noise"
            " = {%4d,%4d,%4d} for %2d ch, 2EDR pkts =%3d, rate = %3d kbps Flow off=%d devicename=%s";
      v21 = v34;
      v22 = 94;
      goto LABEL_36;
    }
    *(_DWORD *)buf = 67112450;
    v119 = v53;
    v120 = 2048;
    v121 = v8;
    v122 = 1024;
    v123 = v54;
    v124 = 1024;
    v125 = v55;
    v126 = 1024;
    v127 = v56;
    v128 = 1024;
    v129 = v57;
    v130 = 1024;
    v131 = v58;
    v132 = 1024;
    v133 = v59;
    v134 = 1024;
    v135 = v60;
    v136 = 1024;
    v137 = v62;
    v138 = 1024;
    v139 = v63;
    v140 = 1024;
    v141 = v115;
    v142 = 1024;
    v143 = v64;
    v144 = 2080;
    *(_QWORD *)v145 = "(NULL)";
    v69 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d /%3d), TxPwr =%2d dBm, RSSI =%4d, {50,75,90}th Noise ="
          " {%4d,%4d,%4d} for %2d ch, 2EDR pkts =%3d, rate = %3d kbps Flow off=%d devicename=%s";
    v70 = v34;
    v71 = 94;
LABEL_40:
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, v69, buf, v71);
    return;
  }
  if (!v35)
    return;
  v114 = a4;
  v36 = *(unsigned __int16 *)(a3 + 2);
  v37 = *(unsigned __int16 *)(a3 + 18);
  v38 = *(unsigned __int16 *)(a3 + 16);
  v39 = *(unsigned __int16 *)(a3 + 179);
  v40 = *(char *)(a3 + 9);
  v41 = *(char *)(a3 + 6);
  v42 = *(char *)(a3 + 217);
  v43 = *(char *)(a3 + 218);
  v44 = *(char *)(a3 + 219);
  v45 = 222;
  if (*(unsigned __int8 *)(a3 + 221) < 2u)
    v45 = 220;
  v46 = *(unsigned __int8 *)(a3 + v45);
  v47 = *(unsigned __int16 *)(a3 + 14);
  v48 = *(unsigned __int16 *)(a3 + 177);
  if (!a5)
  {
    *(_DWORD *)buf = 67112962;
    v119 = v36;
    v120 = 2048;
    v121 = v8;
    v122 = 1024;
    v123 = v37;
    v124 = 1024;
    v125 = v38;
    v126 = 1024;
    v127 = v39;
    v128 = 1024;
    v129 = v37 - v39;
    v130 = 1024;
    v131 = v40;
    v132 = 1024;
    v133 = v41;
    v134 = 1024;
    v135 = v42;
    v136 = 1024;
    v137 = v43;
    v138 = 1024;
    v139 = v44;
    v140 = 1024;
    v141 = v46;
    v142 = 1024;
    v143 = v47;
    v144 = 1024;
    *(_DWORD *)v145 = v114;
    *(_WORD *)&v145[4] = 1024;
    *(_DWORD *)&v145[6] = v48;
    v146 = 2080;
    *(_QWORD *)v147 = "(NULL)";
    v69 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d /%3d), NAK =%4d, NoSync =%4d, TxPwr =%2d dBm, RSSI =%4"
          "d, {50,75,90}th Noise = {%4d,%4d,%4d} for %2d ch, 2EDR pkts =%3d, rate = %3d kbps Flow off=%d devicename=%s";
    v70 = v34;
    v71 = 106;
    goto LABEL_40;
  }
  v49 = a5;
  v106 = *(unsigned __int16 *)(a3 + 14);
  v110 = *(unsigned __int16 *)(a3 + 177);
  v100 = *(char *)(a3 + 219);
  v103 = *(unsigned __int8 *)(a3 + v45);
  v50 = *(char *)(a3 + 218);
  v51 = *(char *)(a3 + 9);
  sub_10043F78C(v49, (uint64_t)__p);
  v52 = __p;
  if (v117 < 0)
    v52 = (void **)__p[0];
  *(_DWORD *)buf = 67112962;
  v119 = v36;
  v120 = 2048;
  v121 = v8;
  v122 = 1024;
  v123 = v37;
  v124 = 1024;
  v125 = v38;
  v126 = 1024;
  v127 = v39;
  v128 = 1024;
  v129 = v37 - v39;
  v130 = 1024;
  v131 = v51;
  v132 = 1024;
  v133 = v41;
  v134 = 1024;
  v135 = v42;
  v136 = 1024;
  v137 = v50;
  v138 = 1024;
  v139 = v100;
  v140 = 1024;
  v141 = v103;
  v142 = 1024;
  v143 = v106;
  v144 = 1024;
  *(_DWORD *)v145 = v114;
  *(_WORD *)&v145[4] = 1024;
  *(_DWORD *)&v145[6] = v110;
  v146 = 2080;
  *(_QWORD *)v147 = v52;
  v20 = "A2DP LinkQualityReport: Handle = %d ReTx = %4.1f%% (%3d /%3d), NAK =%4d, NoSync =%4d, TxPwr =%2d dBm, RSSI =%4d,"
        " {50,75,90}th Noise = {%4d,%4d,%4d} for %2d ch, 2EDR pkts =%3d, rate = %3d kbps Flow off=%d devicename=%s";
  v21 = v34;
  v22 = 106;
LABEL_36:
  _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v20, buf, v22);
  if (v117 < 0)
    operator delete(__p[0]);
}

uint64_t *sub_1005131F4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t *result;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  double v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t *v42;

  v41 = a2;
  v4 = (uint64_t **)(a1 + 184);
  v42 = &v41;
  *(_BYTE *)(*(_QWORD *)(sub_10002252C((uint64_t **)(a1 + 184), &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42)[5] + 8)
           + 168) = *(_BYTE *)(a3 + 6);
  v42 = &v41;
  v5 = *(_QWORD *)(sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42)[5] + 8);
  *(_QWORD *)(v5 + 192) += *(char *)(a3 + 6);
  ++*(_DWORD *)(v5 + 200);
  v42 = &v41;
  v6 = *(_QWORD *)(sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42)[5] + 8);
  v7 = *(char *)(a3 + 7);
  if (*(_DWORD *)(v6 + 204) > v7)
    *(_DWORD *)(v6 + 204) = v7;
  v42 = &v41;
  v8 = *(_QWORD *)(sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42)[5] + 8);
  v9 = *(char *)(a3 + 8);
  if (*(_DWORD *)(v8 + 208) < v9)
    *(_DWORD *)(v8 + 208) = v9;
  v42 = &v41;
  v10 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
  *(_DWORD *)(*(_QWORD *)(v10[5] + 8) + 96) += *(unsigned __int16 *)(a3 + 34);
  v42 = &v41;
  v11 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
  *(_DWORD *)(*(_QWORD *)(v11[5] + 8) + 100) += *(unsigned __int16 *)(a3 + 58);
  v42 = &v41;
  v12 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
  *(_DWORD *)(*(_QWORD *)(v12[5] + 8) + 104) += *(unsigned __int16 *)(a3 + 46);
  v42 = &v41;
  v13 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
  *(_DWORD *)(*(_QWORD *)(v13[5] + 8) + 108) += *(unsigned __int16 *)(a3 + 70);
  v42 = &v41;
  v14 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
  *(_DWORD *)(*(_QWORD *)(v14[5] + 8) + 112) += *(unsigned __int16 *)(a3 + 40)
                                                + *(unsigned __int16 *)(a3 + 28)
                                                + *(unsigned __int16 *)(a3 + 50);
  v42 = &v41;
  v15 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
  *(_DWORD *)(*(_QWORD *)(v15[5] + 8) + 116) += *(unsigned __int16 *)(a3 + 64) + 2 * *(unsigned __int16 *)(a3 + 74);
  v42 = &v41;
  v16 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
  *(_DWORD *)(*(_QWORD *)(v16[5] + 8) + 120) += *(unsigned __int16 *)(a3 + 36) + *(unsigned __int16 *)(a3 + 32);
  v42 = &v41;
  v17 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
  *(_DWORD *)(*(_QWORD *)(v17[5] + 8) + 124) += *(unsigned __int16 *)(a3 + 60) + *(unsigned __int16 *)(a3 + 56);
  v42 = &v41;
  v18 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
  *(_DWORD *)(*(_QWORD *)(v18[5] + 8) + 128) += *(unsigned __int16 *)(a3 + 44);
  v42 = &v41;
  v19 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
  *(_DWORD *)(*(_QWORD *)(v19[5] + 8) + 132) += *(unsigned __int16 *)(a3 + 68);
  if (*(_WORD *)(a3 + 70))
  {
    v42 = &v41;
    v20 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
    LOWORD(v21) = *(_WORD *)(a3 + 70);
    *(_DWORD *)(*(_QWORD *)(v20[5] + 8) + 216) = (float)((float)((float)(*(unsigned __int16 *)(a3 + 64)
                                                                                       + 2
                                                                                       * *(unsigned __int16 *)(a3 + 74))
                                                                               * 100.0)
                                                                       / (float)v21);
    v42 = &v41;
    v22 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
    LOWORD(v23) = *(_WORD *)(a3 + 70);
    *(_DWORD *)(*(_QWORD *)(v22[5] + 8) + 220) = (float)((float)((float)(*(unsigned __int16 *)(a3 + 60)
                                                                                       + *(unsigned __int16 *)(a3 + 56))
                                                                               * 100.0)
                                                                       / (float)v23);
  }
  v42 = &v41;
  result = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
  if (*(_BYTE *)(*(_QWORD *)(result[5] + 8) + 237))
  {
    if (*(_BYTE *)(v41 + 1365))
    {
      v42 = &v41;
      v25 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
      ++*(_DWORD *)(*(_QWORD *)(v25[5] + 8) + 244);
    }
    else
    {
      v42 = &v41;
      v26 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
      ++*(_DWORD *)(*(_QWORD *)(v26[5] + 8) + 240);
    }
    v27 = *(unsigned __int16 *)(a3 + 12);
    v42 = &v41;
    v28 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
    *(_QWORD *)(*(_QWORD *)(v28[5] + 8) + 248) += v27;
    v29 = *(unsigned __int16 *)(a3 + 18);
    v42 = &v41;
    v30 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
    *(_QWORD *)(*(_QWORD *)(v30[5] + 8) + 256) += v29;
    v31 = *(unsigned __int16 *)(a3 + 211);
    v42 = &v41;
    v32 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
    *(_QWORD *)(*(_QWORD *)(v32[5] + 8) + 264) += v31;
    v33 = *(unsigned __int16 *)(a3 + 213);
    v42 = &v41;
    v34 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
    *(_QWORD *)(*(_QWORD *)(v34[5] + 8) + 272) += v33;
    v35 = *(unsigned __int16 *)(a3 + 16);
    v42 = &v41;
    v36 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
    *(_QWORD *)(*(_QWORD *)(v36[5] + 8) + 280) += v35;
    v42 = &v41;
    v37 = (double)*(unint64_t *)(*(_QWORD *)(sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42)[5]
                                                  + 8)
                                      + 256);
    v42 = &v41;
    LODWORD(v35) = (v37
                                / (double)*(unint64_t *)(*(_QWORD *)(sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42)[5]+ 8)+ 280)* 100.0);
    v42 = &v41;
    *(_DWORD *)(*(_QWORD *)(sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42)[5] + 8) + 216) = v35;
    v38 = *(unsigned __int16 *)(a3 + 20);
    v42 = &v41;
    v39 = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
    *(_QWORD *)(*(_QWORD *)(v39[5] + 8) + 288) += v38;
    v40 = *(unsigned __int16 *)(a3 + 22);
    v42 = &v41;
    result = sub_10002252C(v4, &v41, (uint64_t)&unk_100740F58, (uint64_t **)&v42);
    *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 296) += v40;
  }
  return result;
}

void sub_1005138B4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BOOL4 v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  float v13;
  double v14;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  unsigned int v19;
  int v20;
  int v21;
  double v22;
  double v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  void **v32;
  const char *v33;
  NSObject *v34;
  uint32_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  double v41;
  unsigned int v42;
  double v43;
  double v44;
  double v45;
  unsigned int v46;
  double v47;
  double v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  void **v57;
  const char *v58;
  NSObject *v59;
  uint32_t v60;
  int v61;
  void *__p[2];
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t buf[4];
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  double v77;
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  _BYTE v97[14];

  v64 = 0;
  v65 = 0;
  sub_1005242D4(a1, a3, (unsigned int *)&v65 + 1, (unsigned int *)&v65, (unsigned int *)&v64, (_DWORD *)&v64 + 1, a2);
  v5 = sub_1000438A4();
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 2496))(v5);
  v7 = qword_1009997E0;
  v8 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
  if (!v6)
  {
    if (!v8)
      return;
    v36 = *(char *)(a2 + 6);
    v37 = *(char *)(a2 + 9);
    v38 = v65;
    v39 = HIDWORD(v65);
    v40 = *(unsigned __int16 *)(a2 + 46);
    v41 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 40)
                                + *(unsigned __int16 *)(a2 + 28)
                                + *(unsigned __int16 *)(a2 + 50))
                        * 100.0)
                / (float)v40);
    v42 = *(unsigned __int16 *)(a2 + 70);
    v43 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 64)
                                + *(unsigned __int16 *)(a2 + 52)
                                + *(unsigned __int16 *)(a2 + 74))
                        * 100.0)
                / (float)v42);
    v44 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 36) + *(unsigned __int16 *)(a2 + 32)) * 100.0) / (float)v40);
    v45 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 60) + *(unsigned __int16 *)(a2 + 56)) * 100.0) / (float)v42);
    v46 = *(unsigned __int16 *)(a2 + 44);
    v47 = (float)((float)((float)(int)(*(unsigned __int16 *)(a2 + 68) + v46) * 100.0) / (float)(int)(v42 + v40));
    v48 = (float)((float)((float)v46 * 100.0) / (float)v40);
    v49 = *(char *)(a2 + 217);
    v50 = *(char *)(a2 + 218);
    v51 = *(char *)(a2 + 219);
    v52 = *(unsigned __int8 *)(a2 + 220);
    if (a3)
    {
      v53 = a3;
      v54 = HIDWORD(v64);
      v55 = *(char *)(a2 + 9);
      v56 = v51;
      sub_10043F78C(v53, (uint64_t)__p);
      v57 = __p;
      if (v63 < 0)
        v57 = (void **)__p[0];
      *(_DWORD *)buf = 67112962;
      v67 = v36;
      v68 = 1024;
      v69 = v55;
      v70 = 1024;
      v71 = v39;
      v72 = 1024;
      v73 = v38;
      v74 = 1024;
      v75 = v54;
      v76 = 2048;
      v77 = v41;
      v78 = 2048;
      v79 = v43;
      v80 = 2048;
      v81 = v44;
      v82 = 2048;
      v83 = v45;
      v84 = 2048;
      v85 = v47;
      v86 = 2048;
      v87 = v48;
      v88 = 1024;
      v89 = v49;
      v90 = 1024;
      v91 = v50;
      v92 = 1024;
      v93 = v56;
      v94 = 1024;
      v95 = v52;
      v96 = 2080;
      *(_QWORD *)v97 = v57;
      v33 = "HFP LinkQualityReport: RSSI =%4d, TxPower =%2d, PLC count = %u, Received SCO count = %u, AudioInput: %u, TX "
            "[TX: %4.1f%%, ReTX: %4.1f%%], RX [TX: %4.1f%%, ReTX: %4.1f%%] ,ePA Packets = %4.1f%%, ePA CallTime = %4.1f%%"
            ", 50/75/90th Noise = (%4d,%4d,%4d) for %2d ch devicename= %s";
      v34 = v7;
      v35 = 126;
      goto LABEL_12;
    }
    *(_DWORD *)buf = 67112962;
    v67 = v36;
    v68 = 1024;
    v69 = v37;
    v70 = 1024;
    v71 = HIDWORD(v65);
    v72 = 1024;
    v73 = v65;
    v74 = 1024;
    v75 = HIDWORD(v64);
    v76 = 2048;
    v77 = v41;
    v78 = 2048;
    v79 = v43;
    v80 = 2048;
    v81 = v44;
    v82 = 2048;
    v83 = v45;
    v84 = 2048;
    v85 = v47;
    v86 = 2048;
    v87 = (float)((float)((float)v46 * 100.0) / (float)v40);
    v88 = 1024;
    v89 = v49;
    v90 = 1024;
    v91 = v50;
    v92 = 1024;
    v93 = v51;
    v94 = 1024;
    v95 = v52;
    v96 = 2080;
    *(_QWORD *)v97 = "(NULL)";
    v58 = "HFP LinkQualityReport: RSSI =%4d, TxPower =%2d, PLC count = %u, Received SCO count = %u, AudioInput: %u, TX [T"
          "X: %4.1f%%, ReTX: %4.1f%%], RX [TX: %4.1f%%, ReTX: %4.1f%%] ,ePA Packets = %4.1f%%, ePA CallTime = %4.1f%%, 50"
          "/75/90th Noise = (%4d,%4d,%4d) for %2d ch devicename= %s";
    v59 = v7;
    v60 = 126;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, v58, buf, v60);
    return;
  }
  if (!v8)
    return;
  v9 = *(char *)(a2 + 6);
  v10 = *(char *)(a2 + 9);
  v11 = v65;
  v12 = *(unsigned __int16 *)(a2 + 46);
  v13 = (float)v12;
  v14 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 40)
                              + *(unsigned __int16 *)(a2 + 28)
                              + *(unsigned __int16 *)(a2 + 50))
                      * 100.0)
              / (float)v12);
  v15 = *(unsigned __int16 *)(a2 + 70);
  v16 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 64)
                              + *(unsigned __int16 *)(a2 + 52)
                              + *(unsigned __int16 *)(a2 + 74))
                      * 100.0)
              / (float)v15);
  v17 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 36) + *(unsigned __int16 *)(a2 + 32)) * 100.0) / (float)v12);
  v18 = (float)((float)((float)(*(unsigned __int16 *)(a2 + 60) + *(unsigned __int16 *)(a2 + 56)) * 100.0) / (float)v15);
  v19 = *(unsigned __int16 *)(a2 + 44);
  v20 = *(unsigned __int16 *)(a2 + 68) + v19;
  v21 = v15 + v12;
  v22 = (float)((float)((float)v20 * 100.0) / (float)v21);
  v23 = (float)((float)((float)v19 * 100.0) / v13);
  v24 = *(char *)(a2 + 217);
  v25 = *(char *)(a2 + 218);
  v26 = *(char *)(a2 + 219);
  v27 = *(unsigned __int8 *)(a2 + 220);
  v28 = *(unsigned __int16 *)(a2 + 215);
  if (!a3)
  {
    *(_DWORD *)buf = 67113218;
    v67 = v9;
    v68 = 1024;
    v69 = v10;
    v70 = 1024;
    v71 = HIDWORD(v65);
    v72 = 1024;
    v73 = v65;
    v74 = 1024;
    v75 = HIDWORD(v64);
    v76 = 2048;
    v77 = v14;
    v78 = 2048;
    v79 = v16;
    v80 = 2048;
    v81 = v17;
    v82 = 2048;
    v83 = v18;
    v84 = 2048;
    v85 = (float)((float)((float)v20 * 100.0) / (float)v21);
    v86 = 2048;
    v87 = v23;
    v88 = 1024;
    v89 = v24;
    v90 = 1024;
    v91 = v25;
    v92 = 1024;
    v93 = v26;
    v94 = 1024;
    v95 = v27;
    v96 = 1024;
    *(_DWORD *)v97 = v28;
    *(_WORD *)&v97[4] = 2080;
    *(_QWORD *)&v97[6] = "(NULL)";
    v58 = "HFP LinkQualityReport: RSSI =%4d, TxPower =%2d, PLC count = %u, Received SCO count = %u, AudioInput: %u, TX [T"
          "X: %4.1f%%, ReTX: %4.1f%%], RX [TX: %4.1f%%, ReTX: %4.1f%%] ,ePA Packets = %4.1f%%, ePA CallTime = %4.1f%%, 50"
          "/75/90th Noise = (%4d,%4d,%4d) for %2d, eSCONak pkts = %3d, ch devicename= %s";
    v59 = v7;
    v60 = 132;
    goto LABEL_16;
  }
  v29 = a3;
  v30 = HIDWORD(v64);
  v31 = HIDWORD(v65);
  v61 = v28;
  sub_10043F78C(v29, (uint64_t)__p);
  v32 = __p;
  if (v63 < 0)
    v32 = (void **)__p[0];
  *(_DWORD *)buf = 67113218;
  v67 = v9;
  v68 = 1024;
  v69 = v10;
  v70 = 1024;
  v71 = v31;
  v72 = 1024;
  v73 = v11;
  v74 = 1024;
  v75 = v30;
  v76 = 2048;
  v77 = v14;
  v78 = 2048;
  v79 = v16;
  v80 = 2048;
  v81 = v17;
  v82 = 2048;
  v83 = v18;
  v84 = 2048;
  v85 = v22;
  v86 = 2048;
  v87 = v23;
  v88 = 1024;
  v89 = v24;
  v90 = 1024;
  v91 = v25;
  v92 = 1024;
  v93 = v26;
  v94 = 1024;
  v95 = v27;
  v96 = 1024;
  *(_DWORD *)v97 = v61;
  *(_WORD *)&v97[4] = 2080;
  *(_QWORD *)&v97[6] = v32;
  v33 = "HFP LinkQualityReport: RSSI =%4d, TxPower =%2d, PLC count = %u, Received SCO count = %u, AudioInput: %u, TX [TX:"
        " %4.1f%%, ReTX: %4.1f%%], RX [TX: %4.1f%%, ReTX: %4.1f%%] ,ePA Packets = %4.1f%%, ePA CallTime = %4.1f%%, 50/75/"
        "90th Noise = (%4d,%4d,%4d) for %2d, eSCONak pkts = %3d, ch devicename= %s";
  v34 = v7;
  v35 = 132;
LABEL_12:
  _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, v33, buf, v35);
  if (v63 < 0)
    operator delete(__p[0]);
}

double sub_100513F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  double result;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t *v16;

  v15 = a2;
  v5 = (uint64_t **)(a1 + 184);
  v16 = &v15;
  if (*(_QWORD *)(sub_10002252C((uint64_t **)(a1 + 184), &v15, (uint64_t)&unk_100740F58, (uint64_t **)&v16)[5] + 16))
  {
    v16 = &v15;
    if (*(_QWORD *)sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)&v16)[5])
    {
      v16 = &v15;
      if (*(_DWORD *)(*(_QWORD *)(sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)&v16)[5] + 16) + 180))
      {
        if (*(_WORD *)(a3 + 16))
          v7 = 100 * *(unsigned __int16 *)(a3 + 18) / *(unsigned __int16 *)(a3 + 16);
        else
          v7 = 0;
        v16 = &v15;
        v8 = *(_QWORD *)(sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)&v16)[5] + 16);
        *(_DWORD *)(v8 + 172) += v7;
        ++*(_DWORD *)(v8 + 148);
        v16 = &v15;
        v9 = *(_QWORD *)(sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)&v16)[5] + 16);
        *(_DWORD *)(v9 + 176) += *(char *)(a3 + 6);
        ++*(_DWORD *)(v9 + 168);
        v16 = &v15;
        v10 = *(_QWORD *)(sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)&v16)[5] + 16);
        v11 = *(char *)(a3 + 7);
        if (*(_DWORD *)(v10 + 160) > v11)
          *(_DWORD *)(v10 + 160) = v11;
        v16 = &v15;
        v12 = *(_QWORD *)(sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)&v16)[5] + 16);
        v13 = *(char *)(a3 + 8);
        if (*(_DWORD *)(v12 + 156) < v13)
          *(_DWORD *)(v12 + 156) = v13;
      }
      v16 = &v15;
      v14 = sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)&v16);
      ++*(_DWORD *)(*(_QWORD *)(v14[5] + 16) + 184);
      v16 = &v15;
      if (*(_DWORD *)(*(_QWORD *)(sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)&v16)[5] + 16) + 184) >= 0x3Cu)
        return sub_100514168(a1, v15);
    }
  }
  return result;
}

double sub_100514168(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  double result;
  unint64_t v10;
  uint8_t buf[8];

  v10 = a2;
  v3 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Trigger A2dpPacketFlush metrics", buf, 2u);
  }
  v4 = (uint64_t **)(a1 + 184);
  *(_QWORD *)buf = &v10;
  if (*(_BYTE *)(sub_10002252C((uint64_t **)(a1 + 184), &v10, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 72))
  {
    *(_QWORD *)buf = &v10;
    if (*(_DWORD *)(sub_10002252C((uint64_t **)(a1 + 184), &v10, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 76) == 2)
    {
      *(_QWORD *)buf = &v10;
      if (*(_DWORD *)(*(_QWORD *)(sub_10002252C((uint64_t **)(a1 + 184), &v10, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]
                                 + 16)
                     + 180) >= 0xAu)
      {
        sub_100528818(a1, v10);
        v5 = sub_100065478();
        *(_QWORD *)buf = &v10;
        v6 = sub_10002252C(v4, &v10, (uint64_t)&unk_100740F58, (uint64_t **)buf);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 88))(v5, *(_QWORD *)(v6[5] + 16));
        *(_QWORD *)buf = &v10;
        if (*(_QWORD *)sub_10002252C(v4, &v10, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5])
        {
          *(_QWORD *)buf = &v10;
          v7 = sub_10002252C(v4, &v10, (uint64_t)&unk_100740F58, (uint64_t **)buf);
          ++*(_DWORD *)(*(_QWORD *)v7[5] + 256);
        }
      }
    }
  }
  *(_QWORD *)buf = &v10;
  v8 = *(_QWORD *)(sub_10002252C(v4, &v10, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 16);
  *(_DWORD *)(v8 + 148) = 0;
  *(_QWORD *)(v8 + 156) = 4294967169;
  *(_QWORD *)(v8 + 168) = 0;
  *(_QWORD *)(v8 + 176) = 0;
  *(_DWORD *)(v8 + 184) = 0;
  result = *(double *)"";
  *(_OWORD *)v8 = *(_OWORD *)"";
  *(_OWORD *)(v8 + 16) = xmmword_100742090;
  *(_DWORD *)(v8 + 32) = 0;
  return result;
}

void sub_100514388(uint64_t a1, __int128 *a2, int *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD block[7];
  int v13;
  __int16 v14;
  _QWORD v15[6];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[2];

  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x10C12000000;
  v15[3] = sub_100514530;
  v15[4] = nullsub_438;
  v15[5] = &unk_10083E079;
  v4 = a2[11];
  v26 = a2[10];
  v27 = v4;
  v28[0] = a2[12];
  *(_OWORD *)((char *)v28 + 12) = *(__int128 *)((char *)a2 + 204);
  v5 = a2[7];
  v22 = a2[6];
  v23 = v5;
  v6 = a2[9];
  v24 = a2[8];
  v25 = v6;
  v7 = a2[3];
  v18 = a2[2];
  v19 = v7;
  v8 = a2[5];
  v20 = a2[4];
  v21 = v8;
  v9 = a2[1];
  v16 = *a2;
  v17 = v9;
  v13 = *a3;
  v14 = *((_WORD *)a3 + 2);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100935C90);
  v10 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v13, 0);
  v11 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100514578;
  block[3] = &unk_100918690;
  block[5] = a1;
  block[6] = v10;
  block[4] = v15;
  dispatch_async(v11, block);
  _Block_object_dispose(v15, 8);
}

void sub_100514518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_100514530(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  v3 = *(_OWORD *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  v6 = *(_OWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 160);
  v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v7;
  result = *(__n128 *)(a2 + 208);
  v10 = *(_OWORD *)(a2 + 224);
  v11 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 252) = *(_OWORD *)(a2 + 252);
  *(_OWORD *)(a1 + 224) = v10;
  *(_OWORD *)(a1 + 240) = v11;
  *(__n128 *)(a1 + 208) = result;
  return result;
}

void sub_100514578(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v1 = a1[6];
  if (v1)
  {
    v3 = a1[5];
    v4 = *(_QWORD **)(v3 + 192);
    if (v4)
    {
      v5 = (_QWORD *)(v3 + 192);
      do
      {
        v6 = v4[4];
        v7 = v6 >= v1;
        if (v6 >= v1)
          v8 = v4;
        else
          v8 = v4 + 1;
        if (v7)
          v5 = v4;
        v4 = (_QWORD *)*v8;
      }
      while (*v8);
      if (v5 != (_QWORD *)(v3 + 192) && v1 >= v5[4])
      {
        v9 = sub_100027F68();
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 288))(v9);
        if ((v10 & 1) == 0)
        {
          *(_BYTE *)(v3 + 942) = *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 220);
          v11 = *(_QWORD *)(a1[4] + 8);
          v12 = *(_OWORD *)(v11 + 221);
          v13 = *(_OWORD *)(v11 + 237);
          *(_OWORD *)(v3 + 974) = *(_OWORD *)(v11 + 252);
          *(_OWORD *)(v3 + 943) = v12;
          *(_OWORD *)(v3 + 959) = v13;
          sub_100514640(v10, (unsigned __int16 *)(*(_QWORD *)(a1[4] + 8) + 48), a1[6]);
        }
      }
    }
  }
}

void sub_100514640(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t i;
  NSObject *v10;
  int v11;
  void **v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void **v24;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithFormat:](NSMutableString, "stringWithFormat:", &stru_100941758));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithFormat:](NSMutableString, "stringWithFormat:", &stru_100941758));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithFormat:](NSMutableString, "stringWithFormat:", &stru_100941758));
  v8 = *((_BYTE *)a2 + 172);
  if ((v8 & 1) != 0)
  {
    objc_msgSend(v5, "appendString:", CFSTR("ISM 2.4"));
    v8 = *((_BYTE *)a2 + 172);
  }
  if ((v8 & 2) != 0)
  {
    objc_msgSend(v5, "appendString:", CFSTR("UNII-1 "));
    v8 = *((_BYTE *)a2 + 172);
  }
  if ((v8 & 4) != 0)
  {
    objc_msgSend(v5, "appendString:", CFSTR("UNII-3 "));
    v8 = *((_BYTE *)a2 + 172);
  }
  if ((v8 & 8) != 0)
  {
    objc_msgSend(v5, "appendString:", CFSTR("UNII-4 "));
    v8 = *((_BYTE *)a2 + 172);
  }
  if ((v8 & 0x10) != 0)
  {
    objc_msgSend(v5, "appendString:", CFSTR("UNII-5A "));
    v8 = *((_BYTE *)a2 + 172);
  }
  if ((v8 & 0x20) != 0)
  {
    objc_msgSend(v5, "appendString:", CFSTR("UNII-5B "));
    v8 = *((_BYTE *)a2 + 172);
  }
  if ((v8 & 0x40) != 0)
  {
    objc_msgSend(v5, "appendString:", CFSTR("UNII-5C "));
    v8 = *((_BYTE *)a2 + 172);
  }
  if (v8 < 0)
    objc_msgSend(v5, "appendString:", CFSTR("UNII-5D "));
  for (i = 2; i != 12; ++i)
    objc_msgSend(v6, "appendFormat:", CFSTR("%02X "), *((unsigned __int8 *)a2 + i));
  do
  {
    objc_msgSend(v7, "appendFormat:", CFSTR("%d "), *(unsigned __int16 *)((char *)a2 + i));
    i += 2;
  }
  while (i != 172);
  v10 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *a2;
    sub_10043F78C(a3, (uint64_t)__p);
    if (v14 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    *(_DWORD *)buf = 67110146;
    v16 = v11;
    v17 = 2112;
    v18 = v5;
    v19 = 2112;
    v20 = v6;
    v21 = 2112;
    v22 = v7;
    v23 = 2080;
    v24 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "A2DP HRB LinkQualityReport: Handle = %d, band = %@, AFH Channel Map: [%@], AFH Frequency Map: [%@], devicename = %s", buf, 0x30u);
    if (v14 < 0)
      operator delete(__p[0]);
  }

}

void sub_1005148C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100514900(uint64_t a1, __int128 *a2, int *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD block[7];
  int v12;
  __int16 v13;
  _QWORD v14[6];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];

  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0xF012000000;
  v14[3] = sub_100514A94;
  v14[4] = nullsub_439;
  v14[5] = &unk_10083E079;
  v4 = a2[9];
  v23 = a2[8];
  v24 = v4;
  v25[0] = a2[10];
  *(_OWORD *)((char *)v25 + 13) = *(__int128 *)((char *)a2 + 173);
  v5 = a2[5];
  v19 = a2[4];
  v20 = v5;
  v6 = a2[7];
  v21 = a2[6];
  v22 = v6;
  v7 = a2[1];
  v15 = *a2;
  v16 = v7;
  v8 = a2[3];
  v17 = a2[2];
  v18 = v8;
  v12 = *a3;
  v13 = *((_WORD *)a3 + 2);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100935C90);
  v9 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v12, 0);
  v10 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100514AD4;
  block[3] = &unk_100918690;
  block[5] = a1;
  block[6] = v9;
  block[4] = v14;
  dispatch_async(v10, block);
  _Block_object_dispose(v14, 8);
}

void sub_100514A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_100514A94(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *(_OWORD *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = v3;
  v5 = *(_OWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 128) = v6;
  result = *(__n128 *)(a2 + 176);
  v9 = *(_OWORD *)(a2 + 192);
  v10 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 221) = *(_OWORD *)(a2 + 221);
  *(_OWORD *)(a1 + 192) = v9;
  *(_OWORD *)(a1 + 208) = v10;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

void sub_100514AD4(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = a1[6];
  if (v1)
  {
    v3 = a1[5];
    v6 = *(_QWORD **)(v3 + 192);
    v4 = (_QWORD *)(v3 + 192);
    v5 = v6;
    if (v6)
    {
      v7 = v4;
      do
      {
        v8 = v5[4];
        v9 = v8 >= v1;
        if (v8 >= v1)
          v10 = v5;
        else
          v10 = v5 + 1;
        if (v9)
          v7 = v5;
        v5 = (_QWORD *)*v10;
      }
      while (*v10);
      if (v7 != v4 && v1 >= v7[4])
      {
        v11 = sub_100027F68();
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 288))(v11);
        if ((v12 & 1) == 0)
          sub_100514B68(v12, (unsigned __int16 *)(*(_QWORD *)(a1[4] + 8) + 48), a1[6]);
      }
    }
  }
}

void sub_100514B68(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  void **v37;
  int v38;
  int v39;
  NSObject *log;
  unsigned __int8 v41;
  int v42;
  unsigned __int8 v43;
  int v44;
  unsigned __int8 v45;
  int v46;
  int v48;
  void *__p[2];
  char v50;
  uint8_t buf[4];
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  const char *v84;

  v4 = 0;
  v5 = *((_BYTE *)a2 + 9);
  v6 = *((_BYTE *)a2 + 39);
  v7 = v6;
  v8 = v5;
  do
  {
    v9 = *((char *)a2 + v4 + 10);
    if (v9 < v8)
      v8 = *((_BYTE *)a2 + v4 + 10);
    if (v9 > v5)
      v5 = *((_BYTE *)a2 + v4 + 10);
    v10 = *((char *)a2 + v4 + 40);
    if (v10 < v7)
      v7 = *((_BYTE *)a2 + v4 + 40);
    if (v10 > v6)
      v6 = *((_BYTE *)a2 + v4 + 40);
    ++v4;
  }
  while (v4 != 29);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  do
  {
    switch(HIBYTE(a2[v11 + 34]))
    {
      case 0:
        ++v19;
        break;
      case 1:
        ++v18;
        break;
      case 2:
        ++v17;
        break;
      case 3:
        ++v16;
        break;
      default:
        break;
    }
    switch(LOBYTE(a2[v11 + 35]))
    {
      case 0:
        ++v15;
        break;
      case 1:
        ++v14;
        break;
      case 2:
        ++v13;
        break;
      case 3:
        ++v12;
        break;
      default:
        break;
    }
    ++v11;
  }
  while ((unint64_t)(v11 * 2 - 2) < 0x39);
  v41 = v18;
  v43 = v17;
  v45 = v16;
  log = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v20 = *(unsigned __int16 *)((char *)a2 + 7);
    v21 = *a2;
    v22 = v5;
    v23 = v15;
    v24 = *(unsigned __int16 *)((char *)a2 + 3);
    v25 = v7;
    v26 = v6;
    v27 = *(unsigned __int16 *)((char *)a2 + 5);
    v28 = v41;
    v29 = v45;
    v30 = a3;
    if (a3)
    {
      v46 = v43;
      v48 = v29;
      v42 = v19;
      v44 = v28;
      v38 = v13;
      v39 = v12;
      v31 = v14;
      v32 = v23;
      v33 = v21;
      v34 = v20;
      v35 = v22;
      v36 = v25;
      sub_10043F78C(v30, (uint64_t)__p);
      v37 = __p;
      if (v50 < 0)
        v37 = (void **)__p[0];
      *(_DWORD *)buf = 67113218;
      v52 = v34;
      v53 = 1024;
      v54 = v33;
      v55 = 1024;
      v56 = v24;
      v57 = 1024;
      v58 = v27;
      v59 = 1024;
      v60 = v8;
      v61 = 1024;
      v62 = v35;
      v63 = 1024;
      v64 = v36;
      v65 = 1024;
      v66 = v26;
      v67 = 1024;
      v68 = v32;
      v69 = 1024;
      v70 = v31;
      v71 = 1024;
      v72 = v38;
      v73 = 1024;
      v74 = v39;
      v75 = 1024;
      v76 = v42;
      v77 = 1024;
      v78 = v44;
      v79 = 1024;
      v80 = v46;
      v81 = 1024;
      v82 = v48;
      v83 = 2080;
      v84 = (const char *)v37;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "A2DP BtCoexLinkStats: Handle = %d, BtClock = %5d, CoexReq = %4d, CoexReqDenied = %4d, SNR-Last30Tran (min, max): (%3d, %3d), RSSI-Last30Tran (min, max): (%4d, %4d), TxInfo-Last30Pkts (Good, ReTxNak, ReTxNoSync, Poll) (%2d, %2d, %2d, %2d),  RxInfo-Last30Pkts (Good, CrcErr, HeaderErr, NoSync) (%2d, %2d, %2d, %2d), devicename = %s", buf, 0x6Cu);
      if (v50 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 67113218;
      v52 = v20;
      v53 = 1024;
      v54 = v21;
      v55 = 1024;
      v56 = v24;
      v57 = 1024;
      v58 = v27;
      v59 = 1024;
      v60 = v8;
      v61 = 1024;
      v62 = v22;
      v63 = 1024;
      v64 = v7;
      v65 = 1024;
      v66 = v6;
      v67 = 1024;
      v68 = v23;
      v69 = 1024;
      v70 = v14;
      v71 = 1024;
      v72 = v13;
      v73 = 1024;
      v74 = v12;
      v75 = 1024;
      v76 = v19;
      v77 = 1024;
      v78 = v41;
      v79 = 1024;
      v80 = v43;
      v81 = 1024;
      v82 = v45;
      v83 = 2080;
      v84 = "(NULL)";
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "A2DP BtCoexLinkStats: Handle = %d, BtClock = %5d, CoexReq = %4d, CoexReqDenied = %4d, SNR-Last30Tran (min, max): (%3d, %3d), RSSI-Last30Tran (min, max): (%4d, %4d), TxInfo-Last30Pkts (Good, ReTxNak, ReTxNoSync, Poll) (%2d, %2d, %2d, %2d),  RxInfo-Last30Pkts (Good, CrcErr, HeaderErr, NoSync) (%2d, %2d, %2d, %2d), devicename = %s", buf, 0x6Cu);
    }
  }
}

void sub_100514F54(uint64_t a1, __int128 *a2, int *a3)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD block[7];
  int v7;
  __int16 v8;
  _QWORD v9[6];
  __int128 v10;
  uint64_t v11;

  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x4812000000;
  v9[3] = sub_100515074;
  v9[4] = nullsub_440;
  v9[5] = &unk_10083E079;
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v7 = *a3;
  v8 = *((_WORD *)a3 + 2);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100935C90);
  v4 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v7, 0);
  v5 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051508C;
  block[3] = &unk_100918690;
  block[5] = a1;
  block[6] = v4;
  block[4] = v9;
  dispatch_async(v5, block);
  _Block_object_dispose(v9, 8);
}

void sub_10051505C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_100515074(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void sub_10051508C(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = a1[6];
  if (v1)
  {
    v3 = a1[5];
    v4 = *(_QWORD **)(v3 + 192);
    if (v4)
    {
      v5 = v3 + 192;
      do
      {
        v6 = v4[4];
        v7 = v6 >= v1;
        if (v6 >= v1)
          v8 = v4;
        else
          v8 = v4 + 1;
        if (v7)
          v5 = (uint64_t)v4;
        v4 = (_QWORD *)*v8;
      }
      while (*v8);
      if (v5 != v3 + 192 && v1 >= *(_QWORD *)(v5 + 32))
      {
        v9 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 160))(v9) && *(_DWORD *)(v3 + 856) != 3)
          sub_100515164(v3, a1[6], (unsigned __int16 *)(*(_QWORD *)(a1[4] + 8) + 48));
        v10 = sub_100027F68();
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 288))(v10);
        if ((v11 & 1) == 0 && *(_DWORD *)(v3 + 856) != 3)
          sub_1005152B8(v11, *(_QWORD *)(a1[4] + 8) + 48);
      }
    }
  }
}

uint64_t *sub_100515164(uint64_t a1, unint64_t a2, unsigned __int16 *a3)
{
  uint64_t **v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  uint64_t *result;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  unint64_t v12;
  unint64_t *v13;

  v12 = a2;
  v4 = (uint64_t **)(a1 + 184);
  v13 = &v12;
  if (*(_QWORD *)sub_10002252C((uint64_t **)(a1 + 184), &v12, (uint64_t)&unk_100740F58, (uint64_t **)&v13)[5])
  {
    v13 = &v12;
    v5 = *(_QWORD *)sub_10002252C(v4, &v12, (uint64_t)&unk_100740F58, (uint64_t **)&v13)[5];
    if (v5)
      v6 = (_DWORD *)(v5 + 36);
    else
      v6 = 0;
    v7 = v6[1];
    *v6 += a3[3];
    v6[1] = v7 + a3[4];
    v6[6] += a3[5];
  }
  v13 = &v12;
  result = sub_10002252C(v4, &v12, (uint64_t)&unk_100740F58, (uint64_t **)&v13);
  if (*(_QWORD *)(result[5] + 8))
  {
    v13 = &v12;
    result = sub_10002252C(v4, &v12, (uint64_t)&unk_100740F58, (uint64_t **)&v13);
    v9 = *(_QWORD *)(result[5] + 8);
    if (v9)
      v10 = (_DWORD *)(v9 + 36);
    else
      v10 = 0;
    v11 = v10[1];
    *v10 += a3[3];
    v10[1] = v11 + a3[4];
    v10[6] += a3[5];
  }
  return result;
}

void sub_1005152B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  __int16 v18;
  unsigned int v19;
  __int16 v20;
  unsigned int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;

  v3 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 160))(v3))
  {
    v4 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(unsigned __int16 *)(a2 + 6);
      v6 = *(unsigned __int16 *)(a2 + 8);
      v7 = *(unsigned __int16 *)(a2 + 10);
      v8 = *(unsigned __int16 *)(a2 + 12);
      v9 = *(unsigned __int16 *)(a2 + 14);
      v10 = *(unsigned __int16 *)(a2 + 16);
      v11 = *(unsigned __int16 *)(a2 + 22);
      v12 = *(unsigned __int16 *)(a2 + 18);
      v13 = *(char *)(a2 + 20);
      v14 = *(char *)(a2 + 21);
      v15[0] = 67112192;
      v15[1] = v5;
      v16 = 1024;
      v17 = v6;
      v18 = 1024;
      v19 = v7;
      v20 = 1024;
      v21 = v8;
      v22 = 1024;
      v23 = v9;
      v24 = 1024;
      v25 = v10;
      v26 = 1024;
      v27 = v11;
      v28 = 1024;
      v29 = v12;
      v30 = 1024;
      v31 = v13;
      v32 = 1024;
      v33 = v14;
      v34 = 2048;
      v35 = (float)((float)((float)v10 * 100.0) / (float)v8);
      v36 = 2048;
      v37 = (float)((float)((float)v7 * 100.0) / (float)v8);
      v38 = 2048;
      v39 = (float)((float)((float)v11 * 100.0) / (float)v8);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BeamformingReport: Packets on {Ant0, Ant1, Beamforming} = {%3d, %3d, %3d}; Total tx packets = %3d, Total retx pa"
        "ckets = %3d; Total ePA packets = %3d; Total packets beamforming+ePA = %3d; Sync Timeout = %3d; RSSI{Ant0, Ant1} "
        "= {%4d, %4d}; {ePA, Beamforming, ePA+Beamforming} Usage = {%4.1f%%, %4.1f%%, %4.1f%%}",
        (uint8_t *)v15,
        0x5Cu);
    }
  }
}

void sub_100515438(uint64_t a1, uint64_t a2, __int16 a3, int a4, __int16 a5, __int16 a6)
{
  __int16 v8;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  _QWORD block[6];
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  uint8_t buf[4];
  int v20;

  if (a4)
  {
    v8 = a4;
    *(_DWORD *)buf = *(_DWORD *)a2;
    LOWORD(v20) = *(_WORD *)(a2 + 4);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100935C90);
    v11 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 0);
    v12 = *(NSObject **)(a1 + 248);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10051559C;
    block[3] = &unk_1009210D8;
    block[4] = a1;
    block[5] = v11;
    v15 = a3;
    v16 = v8;
    v17 = a5;
    v18 = a6;
    dispatch_async(v12, block);
  }
  else
  {
    v13 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "A2DP LinkQualityReport Error - totalTxPacketCount is %d", buf, 8u);
    }
  }
}

void sub_10051559C(uint64_t a1)
{
  unint64_t v1;
  unint64_t *v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  NSObject *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  char v21;
  uint8_t buf[8];
  __int16 v23;
  double v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  unsigned int v28;

  v2 = (unint64_t *)(a1 + 40);
  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD **)(v4 + 192);
    v5 = (_QWORD *)(v4 + 192);
    v6 = v7;
    if (v7)
    {
      v8 = (uint64_t **)(v5 - 1);
      v9 = v5;
      do
      {
        v10 = v6[4];
        v11 = v10 >= v1;
        if (v10 >= v1)
          v12 = v6;
        else
          v12 = v6 + 1;
        if (v11)
          v9 = v6;
        v6 = (_QWORD *)*v12;
      }
      while (*v12);
      if (v9 != v5 && v1 >= v9[4])
      {
        *(_QWORD *)buf = a1 + 40;
        if (*(_QWORD *)sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5])
        {
          v21 = 0;
          if (*v2)
          {
            v13 = sub_100027F68();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 280))(v13))
            {
              v14 = sub_1000438A4();
              (*(void (**)(uint64_t, unint64_t, char *))(*(_QWORD *)v14 + 320))(v14, *v2 + 128, &v21);
            }
          }
          v15 = *(unsigned __int16 *)(a1 + 48);
          v16 = *(unsigned __int16 *)(a1 + 50);
          v17 = qword_1009997E0;
          if (v15 > v16 && os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = 100 * v15 / v16;
            _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "A2DP LinkQualityReport - re-transmission stats are invalid %u", buf, 8u);
            v17 = qword_1009997E0;
          }
          if (*(unsigned __int16 *)(a1 + 52) > *(unsigned __int16 *)(a1 + 54)
            && os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = 100;
            _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "A2DP LinkQualityReport - CRC Rate is invalid %u", buf, 8u);
            v17 = qword_1009997E0;
          }
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            v18 = *(unsigned __int16 *)(a1 + 48);
            v19 = *(unsigned __int16 *)(a1 + 50);
            *(_DWORD *)buf = 67109888;
            *(_DWORD *)&buf[4] = v21;
            v23 = 2048;
            v24 = (double)v18 * 100.0 / (double)v19;
            v25 = 1024;
            v26 = v18;
            v27 = 1024;
            v28 = v19;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "A2DP LinkQualityReport: RSSI =%4d, ReTx = %3.1f (%3d/%3d)", buf, 0x1Eu);
          }
          *(_QWORD *)buf = v2;
          v20 = sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf);
          sub_100515854(*(_QWORD **)v20[5], 100 * *(unsigned __int16 *)(a1 + 48) / *(unsigned __int16 *)(a1 + 50));
        }
      }
    }
  }
}

void sub_100515854(_QWORD *a1, int a2)
{
  unint64_t v4;
  char *v5;
  _DWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;

  v5 = (char *)a1[45];
  v4 = a1[46];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (char *)a1[44];
    v8 = (v5 - v7) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)sub_1002B46E0((uint64_t)(a1 + 46), v11);
      v7 = (char *)a1[44];
      v5 = (char *)a1[45];
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[4 * v8];
    v14 = &v12[4 * v11];
    *(_DWORD *)v13 = a2;
    v6 = v13 + 4;
    while (v5 != v7)
    {
      v15 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    a1[44] = v13;
    a1[45] = v6;
    a1[46] = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_DWORD *)v5 = a2;
    v6 = v5 + 4;
  }
  a1[45] = v6;
}

void sub_100515924(uint64_t a1, int a2)
{
  NSObject *v3;
  _DWORD v4[2];

  if (*(unsigned __int8 *)(a1 + 340) != a2)
  {
    *(_BYTE *)(a1 + 340) = a2;
    v3 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109120;
      v4[1] = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fDynamicTimelineLogging set to %d ", (uint8_t *)v4, 8u);
    }
  }
}

void sub_1005159D4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  NSObject *v11;
  const __CFString *v12;
  void *v13;
  double v14;
  double v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  dispatch_time_t v23;
  NSObject *v24;
  _QWORD v25[5];
  void *__p[2];
  char v27;
  char v28;
  unint64_t v29;
  __int128 buf;
  void (*v31)(uint64_t);
  void *v32;
  uint64_t v33;
  unint64_t v34;

  v29 = a2;
  v6 = sub_100027F68();
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 272))(v6);
  v28 = 1;
  v8 = sub_100027F68();
  sub_100091AE8(&buf, "Enable FW Logs");
  sub_100091AE8(__p, "FWEnhancedLoggingEnable");
  (*(void (**)(uint64_t, __int128 *, void **, char *))(*(_QWORD *)v8 + 72))(v8, &buf, __p, &v28);
  if (v27 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v31) < 0)
    operator delete((void *)buf);
  v9 = sub_100027F68();
  v10 = ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9) & (v7 == 0)) == 1 && v28 != 0;
  v11 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v12 = CFSTR("Skipping");
    if (v10)
      v12 = CFSTR("Evaluating");
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Dynamic Timeline Logging Trigger : %@ ", (uint8_t *)&buf, 0xCu);
  }
  if (v10)
  {
    if (*(_QWORD *)(a1 + 360))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v13, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 360));
      v15 = v14;

    }
    else
    {
      v15 = 80.0;
    }
    if (*(_BYTE *)(a1 + 340))
    {
      v16 = qword_1009997E0;
      if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        return;
      LOWORD(buf) = 0;
      v17 = "Timeline logging currently running";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&buf, 2u);
      return;
    }
    if (v15 < *(double *)(a1 + 368))
    {
      v16 = qword_1009997E0;
      if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        return;
      LOWORD(buf) = 0;
      v17 = "Timeline logging ran less than 60 secs ago";
      goto LABEL_22;
    }
    sub_100515924(a1, 1);
    v18 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Enabling firmware logs", (uint8_t *)&buf, 2u);
    }
    sub_1000438A4();
    if (sub_100331A98())
    {
      v19 = *(NSObject **)(a1 + 248);
      *(_QWORD *)&buf = _NSConcreteStackBlock;
      *((_QWORD *)&buf + 1) = 3221225472;
      v31 = sub_10051F1F8;
      v32 = &unk_100918090;
      v33 = a1;
      v34 = a2;
      dispatch_async(v19, &buf);
      if (*(_DWORD *)(sub_1000438A4() + 712) == 15)
        v20 = 2048;
      else
        v20 = 3072;
      if (*(_DWORD *)(a1 + 344) != v20)
        *(_DWORD *)(a1 + 344) = v20;
      if (*(_DWORD *)(a1 + 348) != 4)
        *(_DWORD *)(a1 + 348) = 4;
      *(_DWORD *)(a1 + 352) = 531;
      *(_QWORD *)&buf = &v29;
      if (*(_DWORD *)(sub_10002252C((uint64_t **)(a1 + 184), &v29, (uint64_t)&unk_100740F58, (uint64_t **)&buf)[5] + 76) == 1
        || (*(_QWORD *)&buf = &v29,
            *(_DWORD *)(sub_10002252C((uint64_t **)(a1 + 184), &v29, (uint64_t)&unk_100740F58, (uint64_t **)&buf)[5] + 76) == 5))
      {
        *(_DWORD *)(a1 + 352) |= 8u;
      }
      v21 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v21 + 1248))(v21, 1, *(unsigned int *)(a1 + 344), *(unsigned int *)(a1 + 348));
      v22 = sub_1000438A4();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 3368))(v22, *(unsigned int *)(a1 + 352));
    }
    v23 = dispatch_time(0, 1000000000 * a3);
    v24 = *(NSObject **)(a1 + 248);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100515E84;
    v25[3] = &unk_100917378;
    v25[4] = a1;
    dispatch_after(v23, v24, v25);
  }
}

void sub_100515DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  _Unwind_Resume(a1);
}

void sub_100515E2C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 248);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10051F1F8;
  v3[3] = &unk_100918090;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_async(v2, v3);
}

void sub_100515E84(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint8_t v6[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 340))
  {
    v2 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Disabling firmware logs", v6, 2u);
    }
    v3 = sub_1000438A4();
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v3 + 1248))(v3, 0, 0, 0);
    v4 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v5 = *(void **)(v1 + 360);
    *(_QWORD *)(v1 + 360) = v4;

    sub_100515924(v1, 0);
    *(_BYTE *)(v1 + 376) = 0;
  }
}

void sub_100515F3C(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
  NSObject *v6;
  _QWORD block[5];
  uint64_t (**v8)();
  unsigned int *v9;
  uint64_t (**v10)();
  unsigned int *v11;

  if (a2 && a3)
  {
    v10 = 0;
    v11 = 0;
    sub_10003994C(&v10, a3, a4);
    v6 = *(NSObject **)(a1 + 256);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_10051601C;
    block[3] = &unk_1009359B8;
    block[4] = a2 + 128;
    v8 = &off_100918258;
    v9 = v11;
    if (v11)
      sub_10003C37C((uint64_t)v11);
    dispatch_async(v6, block);
    v8 = &off_100918258;
    if (v9)
      sub_100056AAC(v9);
    v10 = &off_100918258;
    if (v11)
      sub_100056AAC(v11);
  }
}

void sub_100516000(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;

  *(_QWORD *)(v2 - 32) = v1;
  v4 = *(unsigned int **)(v2 - 24);
  if (v4)
    sub_100056AAC(v4);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10051601C(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100935CB0);
  return sub_10028D8B4((uint64_t)off_100977A80, *(_QWORD *)(a1 + 32), 0x100000, a1 + 40);
}

void sub_100516074(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
  sub_100515F3C(a1 - 72, a2, a3, a4);
}

void sub_10051607C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  NSObject *v4;
  _QWORD block[6];
  char v6;

  v4 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005160D8;
  block[3] = &unk_10091FF68;
  v6 = a4;
  block[4] = a1;
  block[5] = a2;
  dispatch_async(v4, block);
}

void sub_1005160D8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  unint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t *v19;
  _BYTE buf[12];
  __int16 v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(a1 + 48))
      v5 = "Publish ";
    else
      v5 = "Unpublish ";
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v5;
    v21 = 2048;
    v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Dynamic Latency : HFP Device %{public}s, device: %p", buf, 0x16u);
  }
  v7 = (unint64_t *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v10 = *(_QWORD **)(v2 + 192);
    v9 = (_QWORD *)(v2 + 192);
    v8 = v10;
    if (*(_BYTE *)(a1 + 48))
    {
      if (!v8)
        goto LABEL_19;
      v11 = v9;
      do
      {
        v12 = v8[4];
        v13 = v12 >= v6;
        if (v12 >= v6)
          v14 = v8;
        else
          v14 = v8 + 1;
        if (v13)
          v11 = v8;
        v8 = (_QWORD *)*v14;
      }
      while (*v14);
      if (v11 == v9 || v6 < v11[4])
LABEL_19:
        operator new();
      *(_QWORD *)buf = a1 + 40;
      *(_BYTE *)(sub_10002252C((uint64_t **)v9 - 1, v7, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 87) = 1;
      if (qword_100978120 != -1)
        dispatch_once(&qword_100978120, &stru_100935C70);
      sub_100264E58(qword_100978118, *v7);
    }
    else if (v8)
    {
      v15 = v9;
      do
      {
        v16 = v8[4];
        v17 = v16 >= v6;
        if (v16 >= v6)
          v18 = v8;
        else
          v18 = v8 + 1;
        if (v17)
          v15 = v8;
        v8 = (_QWORD *)*v18;
      }
      while (*v18);
      if (v15 != v9 && v6 >= v15[4])
      {
        *(_QWORD *)buf = a1 + 40;
        *(_BYTE *)(sub_10002252C((uint64_t **)v9 - 1, v7, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 87) = 0;
        *(_QWORD *)buf = a1 + 40;
        if (!*(_BYTE *)(sub_10002252C((uint64_t **)v9 - 1, v7, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 87))
        {
          *(_QWORD *)buf = a1 + 40;
          if (!*(_BYTE *)(sub_10002252C((uint64_t **)v9 - 1, v7, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 88))
          {
            *(_QWORD *)buf = a1 + 40;
            v19 = (uint64_t *)sub_10002252C((uint64_t **)v9 - 1, v7, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5];
            if (v19)
            {
              sub_10052A54C(v19);
              operator delete();
            }
            sub_100015ECC((uint64_t)(v9 - 1), v7);
            if (qword_100978120 != -1)
              dispatch_once(&qword_100978120, &stru_100935C70);
            sub_100264FF4(qword_100978118, *v7);
          }
        }
      }
    }
  }
}

void sub_1005163F8()
{
  operator delete();
}

void sub_100516424(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  NSObject *v4;
  _QWORD block[6];
  char v6;

  v4 = *(NSObject **)(a1 + 176);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005160D8;
  block[3] = &unk_10091FF68;
  v6 = a4;
  block[4] = a1 - 72;
  block[5] = a2;
  dispatch_async(v4, block);
}

uint64_t sub_100516484(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 1068) = 0;
  *(_QWORD *)(a1 + 1060) = 0;
  *(_OWORD *)(a1 + 1044) = 0u;
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100935BB0);
  return sub_1004CD840((uint64_t)off_10097AA38, a2);
}

void sub_1005164E8(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5)
{
  NSObject *v5;
  _QWORD block[6];
  __int16 v7;
  char v8;
  char v9;

  v5 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051654C;
  block[3] = &unk_1009180B0;
  v8 = a4;
  v9 = a5;
  block[4] = a1;
  block[5] = a2;
  v7 = a3;
  dispatch_async(v5, block);
}

void sub_10051654C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  const char *v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  NSObject *v21;
  char v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  _BYTE *v27;
  char v28;
  _BYTE v29[12];
  char v30;
  _BYTE buf[12];
  __int16 v32;
  const char *v33;
  char v34;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 50))
      v4 = "Start";
    else
      v4 = "Stop";
    v5 = "enabled";
    if (!*(_BYTE *)(a1 + 51))
      v5 = "disabled";
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v4;
    v32 = 2080;
    v33 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HFP Stream State: %s Advanced Transport: %s", buf, 0x16u);
  }
  sub_100516A6C(v2, *(_BYTE *)(a1 + 50));
  v6 = *(_BYTE *)(a1 + 50);
  v7 = v2 + 192;
  v8 = *(_QWORD **)(v2 + 192);
  v9 = (unint64_t *)(a1 + 40);
  if (v6)
  {
    if (!v8)
      goto LABEL_20;
    v10 = *v9;
    v11 = v2 + 192;
    do
    {
      v12 = v8[4];
      v13 = v12 >= v10;
      if (v12 >= v10)
        v14 = v8;
      else
        v14 = v8 + 1;
      if (v13)
        v11 = (uint64_t)v8;
      v8 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v11 == v7 || v10 < *(_QWORD *)(v11 + 32))
LABEL_20:
      operator new();
    v26 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F918(v10, (uint64_t)buf);
      if (v34 >= 0)
        v27 = buf;
      else
        v27 = *(_BYTE **)buf;
      *(_DWORD *)v29 = 136315138;
      *(_QWORD *)&v29[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Device %s, already exists in AudioLinkManagerDevices updating values", v29, 0xCu);
      if (v34 < 0)
        operator delete(*(void **)buf);
      v6 = *(_BYTE *)(a1 + 50);
    }
    *(_QWORD *)buf = a1 + 40;
    *(_BYTE *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 72) = v6;
    *(_QWORD *)buf = a1 + 40;
    v15 = sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)buf);
    *(_DWORD *)(v15[5] + 76) = 1;
    if (*(_BYTE *)(a1 + 51))
      sub_100096A48(*(_QWORD *)(v2 + 216), *(unsigned __int8 *)(a1 + 50), *(_QWORD *)(a1 + 40));
    sub_100516B78((uint64_t)v15, *(_QWORD *)(a1 + 40), 1);
    sub_100516DC0(v2, *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
  }
  else
  {
    if (v8)
    {
      v16 = *v9;
      v17 = v2 + 192;
      do
      {
        v18 = v8[4];
        v19 = v18 >= v16;
        if (v18 >= v16)
          v20 = v8;
        else
          v20 = v8 + 1;
        if (v19)
          v17 = (uint64_t)v8;
        v8 = (_QWORD *)*v20;
      }
      while (*v20);
      if (v17 != v7 && v16 >= *(_QWORD *)(v17 + 32))
      {
        v21 = qword_1009997E0;
        v22 = 0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043F918(v16, (uint64_t)buf);
          if (v34 >= 0)
            v23 = buf;
          else
            v23 = *(_BYTE **)buf;
          *(_DWORD *)v29 = 136315138;
          *(_QWORD *)&v29[4] = v23;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Device %s, already exists in AudioLinkManagerDevices updating values", v29, 0xCu);
          if (v34 < 0)
            operator delete(*(void **)buf);
          v22 = *(_BYTE *)(a1 + 50);
        }
        *(_QWORD *)buf = a1 + 40;
        *(_BYTE *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 72) = v22;
        *(_QWORD *)buf = a1 + 40;
        *(_DWORD *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 76) = 0;
        if (*(_BYTE *)(sub_100094DE4(*(_QWORD *)(v2 + 216), *v9) + 3))
          sub_100096A48(*(_QWORD *)(v2 + 216), *(unsigned __int8 *)(a1 + 50), *(_QWORD *)(a1 + 40));
        sub_10050EB98((uint64_t *)v2, *v9);
      }
    }
    if (*(_QWORD *)(v2 + 200))
      sub_100517200(v2, *v9, 1);
    v28 = 0;
    v24 = sub_100027F68();
    sub_100091AE8(buf, "HFP");
    sub_100091AE8(v29, "audioFeedback");
    (*(void (**)(uint64_t, _BYTE *, _BYTE *, char *))(*(_QWORD *)v24 + 72))(v24, buf, v29, &v28);
    if (v30 < 0)
      operator delete(*(void **)v29);
    if (v34 < 0)
      operator delete(*(void **)buf);
    if (v28)
    {
      v25 = sub_100442118(*v9, 12);
      if ((v25 & 1) != 0 || sub_1005172B0(v25, *v9))
        notify_post("com.apple.bluetooth.audioQuality");
    }
  }
  sub_100517324(v2, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 50), 1);
}

void sub_100516A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_100516A6C(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  char v18;
  uint8_t buf[16];

  if (*(_BYTE *)(a1 + 336))
  {
    v18 = 0;
    sub_100043758(&v18);
    if (sub_1001892D4(a2, v3, v4, v5, v6, v7, v8, v9)
      && os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
    {
      sub_1006FE640();
    }
    if (sub_10018948C(a2, v10, v11, v12, v13, v14, v15, v16))
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
        sub_1006FE614();
    }
    sub_10004339C(&v18);
    sub_100043728(&v18);
  }
  else
  {
    v17 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Stack is not ready, cannot configure interlaced inquiry scans", buf, 2u);
    }
  }
}

void sub_100516B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_100516B78(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  __int16 v23;
  char v24;
  char v25;
  _BYTE v26[14];

  if (a2 && a3 == 2)
  {
    v4 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Enabling A2DP Link Quality Mode", (uint8_t *)&v23, 2u);
    }
    v5 = sub_100027F68();
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 280))(v5);
    *(_DWORD *)&v26[10] = 0;
    *(_QWORD *)&v26[2] = 0;
    v23 = 1;
    v7 = sub_10003BE44();
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 136))(v7);
    v8 = sub_10003BE44();
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 160))(v8);
    v26[1] = 0;
    v9 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 816))(v9))
      v26[1] = 1;
    v10 = sub_10003BE44();
    v26[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 160))(v10);
    if (v6)
      v11 = 5;
    else
      v11 = 20;
    *(_WORD *)&v26[4] = v11;
    *(_WORD *)&v26[6] = -1;
    *(_WORD *)&v26[8] = v11;
    *(_WORD *)&v26[10] = -1;
    v26[12] = 1;
    v12 = sub_10003BE44();
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 176))(v12);
    if (v13)
      LOBYTE(v13) = sub_10043FCAC(a2);
    v26[2] = v13;
    v26[13] = 1;
LABEL_21:
    v22 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, __int16 *, uint64_t))(*(_QWORD *)v22 + 552))(v22, 18, &v23, a2);
    return;
  }
  if (a2)
  {
    if (a3 == 1)
    {
      v14 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 128))(v14))
      {
        v15 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          v23 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Enabling HFP Link Quality Mode", (uint8_t *)&v23, 2u);
        }
        *(_DWORD *)&v26[8] = 0;
        *(_QWORD *)v26 = 0;
        v23 = 1;
        v16 = sub_10003BE44();
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 136))(v16);
        v17 = sub_10003BE44();
        v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 160))(v17);
        v18 = sub_10003BE44();
        v26[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 160))(v18);
        v19 = sub_10003BE44();
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 176))(v19);
        v21 = 0;
        if (v20)
          v21 = sub_10043FCAC(a2);
        v26[2] = v21;
        *(_WORD *)&v26[12] = 513;
        goto LABEL_21;
      }
    }
  }
}

void sub_100516DC0(uint64_t a1, unint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t **v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint8_t buf[8];

  v13 = a2;
  if (*(_BYTE *)(a1 + 336))
  {
    if (a2)
    {
      v3 = *(_QWORD **)(a1 + 192);
      if (v3)
      {
        v5 = (uint64_t **)(a1 + 184);
        v6 = (_QWORD *)(a1 + 192);
        do
        {
          v7 = v3[4];
          v8 = v7 >= a2;
          if (v7 >= a2)
            v9 = v3;
          else
            v9 = v3 + 1;
          if (v8)
            v6 = v3;
          v3 = (_QWORD *)*v9;
        }
        while (*v9);
        if (v6 != (_QWORD *)(a1 + 192) && v6[4] <= a2)
        {
          v12 = 0;
          sub_100043758(&v12);
          sub_10019C1AC();
          sub_100185E60(v13 + 128);
          sub_100157688(a3);
          sub_10004339C(&v12);
          *(_QWORD *)buf = &v13;
          if (*(_QWORD *)(sub_10002252C(v5, &v13, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 8))
          {
            if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
              sub_1006FE698();
            *(_QWORD *)buf = &v13;
            v11 = *(_QWORD *)(sub_10002252C(v5, &v13, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 8);
            if (v11)
            {
              if (*(char *)(v11 + 159) < 0)
                operator delete(*(void **)(v11 + 136));
              operator delete();
            }
            *(_QWORD *)buf = &v13;
            *(_QWORD *)(sub_10002252C(v5, &v13, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 8) = 0;
          }
          operator new();
        }
      }
    }
    v10 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "HFP start, but no valid device handler", buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006FE66C();
  }
}

void sub_1005171C4()
{
  operator delete();
}

uint64_t sub_100517200(uint64_t result, uint64_t a2, int a3)
{
  NSObject *v5;
  char v6;
  uint64_t v7;
  _QWORD v8[2];
  __int16 v9;

  if (*(_QWORD *)(result + 200))
  {
    v5 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Disabling Link Quality Mode", (uint8_t *)v8, 2u);
    }
    v9 = 0;
    if (a3 == 1)
      v6 = 2;
    else
      v6 = 1;
    v8[0] = 0;
    v8[1] = 0;
    HIBYTE(v9) = v6;
    v7 = sub_1000438A4();
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v7 + 552))(v7, 18, v8, a2);
  }
  return result;
}

uint64_t sub_1005172B0(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;

  v6 = 0;
  v5 = 0;
  v4 = 0;
  v2 = sub_100444BF0(a2, &v6, &v5, (_DWORD *)&v4 + 1, &v4);
  result = 0;
  if (v2 && v5 == 76)
  {
    if ((HIDWORD(v4) - 8209) <= 6)
      return (0x61u >> (BYTE4(v4) - 17)) & 1;
    else
      return 0;
  }
  return result;
}

void sub_100517324(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  __int16 v19;
  __int16 v20;
  _QWORD v21[5];
  _QWORD v22[5];
  uint64_t v23;
  unint64_t *v24;

  v6 = a2;
  v23 = a2;
  sub_100523454(a1, a2, a3, a4);
  if (a3)
  {
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_100935C50);
    sub_1005227B0((_BYTE *)a1, v6, *((_BYTE *)off_100977B38 + 203), a4);
    v8 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8))
    {
      v9 = sub_100475960();
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_100523A80;
      v22[3] = &unk_100917378;
      v22[4] = a1;
      sub_100023D84(v9, v22);
    }
  }
  else
  {
    v10 = sub_10003BE44();
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 112))(v10);
    if ((_DWORD)v11)
    {
      v12 = sub_100475960();
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_100523AD0;
      v21[3] = &unk_100917378;
      v21[4] = a1;
      sub_100023D84(v12, v21);
    }
    sub_100523210(v11, v6);
    v13 = *(_QWORD **)(a1 + 192);
    if (v13)
    {
      v14 = (uint64_t **)(a1 + 184);
      v15 = a1 + 192;
      do
      {
        v16 = v13[4];
        v17 = v16 >= v6;
        if (v16 >= v6)
          v18 = v13;
        else
          v18 = v13 + 1;
        if (v17)
          v15 = (uint64_t)v13;
        v13 = (_QWORD *)*v18;
      }
      while (*v18);
      if (v15 != a1 + 192 && *(_QWORD *)(v15 + 32) <= v6)
      {
        v24 = (unint64_t *)&v23;
        *(_BYTE *)(sub_10002252C(v14, (unint64_t *)&v23, (uint64_t)&unk_100740F58, (uint64_t **)&v24)[5] + 72) = 0;
        v19 = *(_WORD *)(a1 + 1038);
        v24 = (unint64_t *)&v23;
        *(_WORD *)(sub_10002252C(v14, (unint64_t *)&v23, (uint64_t)&unk_100740F58, (uint64_t **)&v24)[5] + 58) = v19;
        v20 = *(_WORD *)(a1 + 1038);
        v24 = (unint64_t *)&v23;
        *(_WORD *)(sub_10002252C(v14, (unint64_t *)&v23, (uint64_t)&unk_100740F58, (uint64_t **)&v24)[5] + 60) = v20;
        v24 = (unint64_t *)&v23;
        *(_DWORD *)(sub_10002252C(v14, (unint64_t *)&v23, (uint64_t)&unk_100740F58, (uint64_t **)&v24)[5] + 76) = 0;
        v6 = v23;
      }
    }
  }
  sub_1000A7330(*(_QWORD *)(a1 + 208), v6, a3);
}

void sub_100517568(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5)
{
  NSObject *v5;
  _QWORD block[6];
  __int16 v7;
  char v8;
  char v9;

  v5 = *(NSObject **)(a1 + 176);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051654C;
  block[3] = &unk_1009180B0;
  v8 = a4;
  v9 = a5;
  block[4] = a1 - 72;
  block[5] = a2;
  v7 = a3;
  dispatch_async(v5, block);
}

void sub_1005175D0(_QWORD *a1, uint64_t a2, __int16 a3, char a4, char a5, __int16 a6, __int16 a7)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD block[7];
  std::__shared_weak_count *v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  char v19;
  char v20;

  v7 = a1[111];
  v8 = (std::__shared_weak_count *)a1[112];
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = a1[31];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100517698;
  block[3] = &unk_1009359E8;
  v16 = a3;
  block[4] = a1;
  block[5] = a2;
  v19 = a4;
  v17 = a6;
  block[6] = v7;
  v15 = v8;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v20 = a5;
  v18 = a7;
  dispatch_async(v11, block);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_100517698(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  NSObject *v21;
  void *p_p;
  uint64_t v23;
  uint64_t *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  void *v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  NSObject *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  _BYTE *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  NSObject *v53;
  void **v54;
  char v55;
  __int16 v56;
  __int16 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  _BYTE *v61;
  NSObject *v62;
  void *v63;
  __int16 v64;
  __int16 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  NSObject *v75;
  int v76;
  const char *v77;
  int v78;
  int v79;
  const char *v80;
  int v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[4];
  __int16 v87;
  _QWORD v88[5];
  void *__p;
  _BYTE v90[10];
  __int16 v91;
  const char *v92;
  __int16 v93;
  const char *v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  _BYTE buf[24];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 1104);
  if (!v3)
    goto LABEL_12;
  v4 = *(unsigned __int16 *)(a1 + 64);
  v5 = v2 + 1104;
  do
  {
    v6 = *(unsigned __int16 *)(v3 + 32);
    v7 = v6 >= v4;
    if (v6 >= v4)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 + 1104 && v4 >= *(unsigned __int16 *)(v5 + 32))
  {
    sub_10044028C(*(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 70));
    v9 = 1;
  }
  else
  {
LABEL_12:
    v9 = 0;
  }
  v10 = sub_1005182E8(v2, *(unsigned __int16 *)(a1 + 64));
  v11 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11))
  {
    v12 = sub_1004759E0();
    v88[0] = _NSConcreteStackBlock;
    v88[1] = 3221225472;
    v88[2] = sub_10051841C;
    v88[3] = &unk_100917378;
    v88[4] = *(_QWORD *)(a1 + 40);
    sub_100041A34(v12, v88);
  }
  v13 = (unint64_t *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
  {
    v15 = *(_BYTE *)(a1 + 70);
    if (v15)
    {
      v16 = *(_QWORD **)(v2 + 192);
      if (!v16)
        goto LABEL_28;
      v17 = v2 + 192;
      do
      {
        v18 = v16[4];
        v19 = v18 >= v14;
        if (v18 >= v14)
          v20 = v16;
        else
          v20 = v16 + 1;
        if (v19)
          v17 = (uint64_t)v16;
        v16 = (_QWORD *)*v20;
      }
      while (*v20);
      if (v17 == v2 + 192 || v14 < *(_QWORD *)(v17 + 32))
      {
LABEL_28:
        v21 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043F918(v14, (uint64_t)&__p);
          if (SBYTE3(v92) >= 0)
            p_p = &__p;
          else
            p_p = __p;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = p_p;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Adding device %s, to AudioLinkManagerDevices", buf, 0xCu);
          if (SBYTE3(v92) < 0)
            operator delete(__p);
        }
        operator new();
      }
      v62 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043F918(v14, (uint64_t)&__p);
        if (SBYTE3(v92) >= 0)
          v63 = &__p;
        else
          v63 = __p;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v63;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Device %s, already exists in AudioLinkManagerDevices updating values", buf, 0xCu);
        if (SBYTE3(v92) < 0)
          operator delete(__p);
        v15 = *(_BYTE *)(a1 + 70);
      }
      __p = (void *)(a1 + 40);
      *(_BYTE *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)&__p)[5]+ 72) = v15;
      v64 = *(_WORD *)(a1 + 66);
      __p = (void *)(a1 + 40);
      *(_WORD *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)&__p)[5]+ 58) = v64;
      v65 = *(_WORD *)(a1 + 66);
      __p = (void *)(a1 + 40);
      *(_WORD *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)&__p)[5]+ 60) = v65;
      __p = (void *)(a1 + 40);
      *(_DWORD *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)&__p)[5]+ 76) = 2;
      v66 = sub_100027F68();
      v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
      if ((v67 & 1) != 0)
        sub_1000A675C(*(_QWORD *)(v2 + 208), *v13);
      v23 = sub_10003BE44();
      v24 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 792))(v23, 2);
      if ((_DWORD)v24)
      {
        v25 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p) = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Adaptive Latency reset counter when streaming start", (uint8_t *)&__p, 2u);
        }
        __p = (void *)(a1 + 40);
        v24 = sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)&__p);
        *(_WORD *)(*(_QWORD *)(v24[5] + 40) + 44) = -1;
      }
      sub_100516B78((uint64_t)v24, *(_QWORD *)(a1 + 40), 2);
      sub_100518488(v2, *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 64));
      if (v10)
        operator new();
      __p = 0;
      *(_QWORD *)v90 = 0;
      v26 = *(std::__shared_weak_count **)(a1 + 56);
      if (v26)
      {
        v27 = std::__shared_weak_count::lock(v26);
        *(_QWORD *)v90 = v27;
        if (v27)
        {
          v28 = *(void **)(a1 + 48);
          __p = v28;
          v29 = v28 ? v9 : 1;
          if ((v29 & 1) == 0)
            sub_1002D8B88((uint64_t)v28, *v13, 1, 0);
        }
      }
      else
      {
        v27 = 0;
      }
      v42 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v42 + 792))(v42, 0))
      {
        if (*(_BYTE *)(a1 + 71))
        {
          v43 = *(_WORD *)(a1 + 64);
          v44 = *(_QWORD *)(a1 + 40);
          v45 = sub_1000A5D8C(*(_QWORD *)(v2 + 208), *(unsigned __int16 *)(a1 + 68));
          sub_1005189DC(v2, v43, v44, v45);
        }
        else if (v9)
        {
          sub_1000A1FAC(*(_QWORD *)(v2 + 208), *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 64));
        }
      }
      v68 = sub_100027F68();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v68 + 432))(v68) && sub_10052A638(0))
      {
        *(_BYTE *)(v2 + 990) = 1;
        sub_100518CB4(v2);
      }
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v70 = __ldaxr(p_shared_owners);
        while (__stlxr(v70 - 1, p_shared_owners));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
LABEL_130:
      v75 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v76 = *(unsigned __int16 *)(a1 + 64);
        v77 = "disabled";
        v78 = *(unsigned __int8 *)(a1 + 71);
        if (v9)
          v77 = "enabled";
        v79 = *(unsigned __int16 *)(a1 + 66);
        v80 = "started";
        v81 = *(unsigned __int16 *)(a1 + 68);
        if (!*(_BYTE *)(a1 + 70))
          v80 = "stopped";
        LODWORD(__p) = 67110402;
        HIDWORD(__p) = v76;
        v82 = "not supported";
        *(_WORD *)v90 = 2080;
        *(_QWORD *)&v90[2] = v77;
        if (v78)
          v82 = "supported";
        v91 = 2080;
        v92 = v80;
        v93 = 2080;
        v94 = v82;
        v95 = 1024;
        v96 = v79;
        v97 = 1024;
        v98 = v81;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "StreamStateChanged for handle %d Wireless Splitter aggregation is %s music playback is %s with latency %s with bitrate %u Dynamic Latency JBL %d", (uint8_t *)&__p, 0x32u);
      }
      if (*(_QWORD *)(v2 + 1112) >= 2uLL)
        sub_100519AF8(v2, *(unsigned __int8 *)(a1 + 70));
      v84 = *(_QWORD *)(a1 + 40);
      v83 = a1 + 40;
      sub_100519BA4(v2, v84, *(unsigned __int8 *)(v83 + 30));
      sub_100517324(v2, *(_QWORD *)v83, *(unsigned __int8 *)(v83 + 30), 2);
      sub_100519E90(v85, *(_QWORD *)v83, *(unsigned __int8 *)(v83 + 30));
      return;
    }
  }
  v30 = *(_QWORD **)(v2 + 192);
  if (v30)
  {
    v31 = v2 + 192;
    do
    {
      v32 = v30[4];
      v33 = v32 >= v14;
      if (v32 >= v14)
        v34 = v30;
      else
        v34 = v30 + 1;
      if (v33)
        v31 = (uint64_t)v30;
      v30 = (_QWORD *)*v34;
    }
    while (*v34);
    if (v31 != v2 + 192 && v14 >= *(_QWORD *)(v31 + 32))
    {
      sub_100518ECC(v2, 0xBu, *(_QWORD *)(a1 + 40));
      v46 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 792))(v46, 2))
      {
        v47 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p) = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Adaptive Latency stream stop", (uint8_t *)&__p, 2u);
        }
        sub_1000A4E78(*(_QWORD *)(v2 + 208), 150);
        v48 = *(_QWORD *)(a1 + 40);
        v49 = *(_QWORD *)(v2 + 208);
        __p = (void *)(a1 + 40);
        v50 = sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)&__p);
        v51 = sub_1000A4AC0(v49, v48, *(_DWORD *)(*(_QWORD *)(v50[5] + 40) + 20), 6);
        sub_1005194E4(v2, v48, v51);
        v52 = sub_1004759E0();
        v86[0] = _NSConcreteStackBlock;
        v86[1] = 3221225472;
        v86[2] = sub_100519670;
        v86[3] = &unk_10092D5B8;
        v87 = *(_WORD *)(a1 + 64);
        sub_100041A34(v52, v86);
        sub_1005196C4(v2, *(_QWORD *)(a1 + 40));
      }
      v53 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043F918(*v13, (uint64_t)&__p);
        v54 = SBYTE3(v92) >= 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v54;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Device %s, already exists in AudioLinkManagerDevices updating values", buf, 0xCu);
        if (SBYTE3(v92) < 0)
          operator delete(__p);
      }
      v55 = *(_BYTE *)(a1 + 70);
      __p = (void *)(a1 + 40);
      *(_BYTE *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)&__p)[5]+ 72) = v55;
      v56 = *(_WORD *)(a1 + 66);
      __p = (void *)(a1 + 40);
      *(_WORD *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)&__p)[5]+ 58) = v56;
      v57 = *(_WORD *)(a1 + 66);
      __p = (void *)(a1 + 40);
      *(_WORD *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)&__p)[5]+ 60) = v57;
      __p = (void *)(a1 + 40);
      *(_DWORD *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)&__p)[5]+ 76) = 0;
      sub_10050E354(v2, *(_QWORD *)(a1 + 40));
      __p = (void *)(a1 + 40);
      if (*(_DWORD *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)&__p)[5]+ 64))
      {
        __p = (void *)(a1 + 40);
        *(_WORD *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)&__p)[5]+ 68) = 0;
      }
      v58 = *(_QWORD *)(v2 + 872);
      if (v58)
      {
        *(_QWORD *)(v2 + 880) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
        *(_QWORD *)(v2 + 872) = 0;
      }
      __p = 0;
      *(_QWORD *)v90 = 0;
      v59 = *(std::__shared_weak_count **)(a1 + 56);
      if (v59)
      {
        v60 = std::__shared_weak_count::lock(v59);
        *(_QWORD *)v90 = v60;
        if (v60)
        {
          v61 = *(_BYTE **)(a1 + 48);
          __p = v61;
          if (v61)
          {
            if (v61[77])
              sub_1002D8B88((uint64_t)v61, *v13, 0, 0);
          }
        }
      }
      else
      {
        v60 = 0;
      }
      v71 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 792))(v71, 0))
      {
        if (*(_BYTE *)(a1 + 71)
          || (*(_QWORD *)buf = a1 + 40,
              *(_BYTE *)(*(_QWORD *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 40)+ 3)))
        {
          sub_1005196C4(v2, *v13);
        }
      }
      v72 = sub_100027F68();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v72 + 432))(v72) && *(_BYTE *)(v2 + 990))
        sub_1005199B4(v2);
      if (v60)
      {
        v73 = (unint64_t *)&v60->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      goto LABEL_128;
    }
  }
  if (!v14)
  {
LABEL_128:
    if (*(_QWORD *)(v2 + 200))
      sub_100517200(v2, *v13, 2);
    goto LABEL_130;
  }
  v35 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
    sub_1006FE6C4(v14, v35);
  v36 = *(std::__shared_weak_count **)(a1 + 56);
  if (v36)
  {
    v37 = std::__shared_weak_count::lock(v36);
    *(_QWORD *)v90 = v37;
    if (v37)
    {
      v38 = v37;
      v39 = *(_BYTE **)(a1 + 48);
      __p = v39;
      if (v39 && v39[77])
        sub_1002D8B88((uint64_t)v39, *v13, 0, 0);
      v40 = (unint64_t *)&v38->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
}

void sub_100518288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_10009F88C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005182E8(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  NSObject *v8;
  int v9;
  uint64_t result;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  __int16 v14;
  _BOOL4 v15;

  v2 = a1 + 1104;
  v3 = *(_QWORD *)(a1 + 1104);
  if (!v3)
    goto LABEL_12;
  v4 = a1 + 1104;
  do
  {
    v5 = *(unsigned __int16 *)(v3 + 32);
    v6 = v5 >= a2;
    if (v5 >= a2)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (v6)
      v4 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 == v2 || *(unsigned __int16 *)(v4 + 32) > a2)
LABEL_12:
    v4 = a1 + 1104;
  v8 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v9 = sub_10051EC6C();
    sub_1000438A4();
    v11[0] = 67109632;
    v11[1] = v4 != v2;
    v12 = 1024;
    v13 = v9;
    v14 = 1024;
    v15 = sub_100331A98();
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Dynamic Audio Delivery aggregation=%d, Timesync Support=%d GPIO Toggle=%d", (uint8_t *)v11, 0x14u);
  }
  result = sub_10051EC6C();
  if ((_DWORD)result)
  {
    sub_1000438A4();
    LODWORD(result) = sub_100331A98();
    if (v4 == v2)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t sub_10051841C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100935BD0);
  v2 = (_QWORD *)qword_100977DF8;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = sub_100027F68();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 584))(v4);
  return sub_1003E4928(v2, v3, v5);
}

uint64_t sub_100518488(uint64_t result, unint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t *v11;

  v10 = a2;
  if (a2)
  {
    v4 = result;
    v9 = 0;
    sub_100043758(&v9);
    sub_10019C1AC();
    sub_100185E60(v10 + 128);
    sub_10004339C(&v9);
    if (*(_QWORD *)(v4 + 1112) >= 2uLL)
    {
      v5 = *(_QWORD *)(v4 + 1104);
      if (v5)
      {
        do
        {
          if (*(unsigned __int16 *)(v5 + 32) >= a3)
            v6 = (uint64_t *)v5;
          else
            v6 = (uint64_t *)(v5 + 8);
          v5 = *v6;
        }
        while (*v6);
      }
    }
    v7 = (uint64_t **)(v4 + 184);
    v11 = &v10;
    if (*(_QWORD *)sub_10002252C(v7, &v10, (uint64_t)&unk_100740F58, (uint64_t **)&v11)[5])
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
        sub_1006FE7C8();
      v11 = &v10;
      v8 = *(_QWORD *)sub_10002252C(v7, &v10, (uint64_t)&unk_100740F58, (uint64_t **)&v11)[5];
      if (v8)
      {
        sub_10052A7D8(v8);
        operator delete();
      }
      v11 = &v10;
      *(_QWORD *)sub_10002252C(v7, &v10, (uint64_t)&unk_100740F58, (uint64_t **)&v11)[5] = 0;
    }
    operator new();
  }
  return result;
}

void sub_100518984()
{
  operator delete();
}

uint64_t *sub_1005189DC(uint64_t a1, __int16 a2, unint64_t a3, int a4)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *result;
  unint64_t v16;
  unint64_t *v17;

  v16 = a3;
  v6 = (uint64_t **)(a1 + 184);
  v17 = &v16;
  *(_WORD *)(sub_10002252C((uint64_t **)(a1 + 184), &v16, (uint64_t)&unk_100740F58, (uint64_t **)&v17)[5] + 84) = a2;
  v17 = &v16;
  *(_BYTE *)(*(_QWORD *)(sub_10002252C(v6, &v16, (uint64_t)&unk_100740F58, (uint64_t **)&v17)[5] + 40) + 1) = 0;
  v17 = &v16;
  *(_BYTE *)(*(_QWORD *)(sub_10002252C(v6, &v16, (uint64_t)&unk_100740F58, (uint64_t **)&v17)[5] + 40) + 2) = 1;
  v17 = &v16;
  *(_BYTE *)(*(_QWORD *)(sub_10002252C(v6, &v16, (uint64_t)&unk_100740F58, (uint64_t **)&v17)[5] + 40) + 3) = 1;
  v17 = &v16;
  *(_DWORD *)(*(_QWORD *)(sub_10002252C(v6, &v16, (uint64_t)&unk_100740F58, (uint64_t **)&v17)[5] + 40) + 20) = a4;
  sub_1000A675C(*(_QWORD *)(a1 + 208), v16);
  v17 = &v16;
  if (**(_BYTE **)(sub_10002252C(v6, &v16, (uint64_t)&unk_100740F58, (uint64_t **)&v17)[5] + 40))
  {
    v7 = sub_100038E50();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 152))(v7, *(_QWORD *)(a1 + 208));
    v8 = sub_100038E50();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 208))(v8, *(_QWORD *)(a1 + 208) + 1, 1);
    v9 = sub_100038E50();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 200))(v9, *(_QWORD *)(a1 + 208) + 4);
    v10 = sub_100038E50();
    sub_10043B4A8(v10 + 728, a1 + 32);
    v11 = sub_100038E50();
    sub_10052B2B8(v11 + 808, a1 + 48);
    v12 = *(_QWORD *)(a1 + 208);
    v13 = v16;
    v17 = &v16;
    v14 = sub_10002252C(v6, &v16, (uint64_t)&unk_100740F58, (uint64_t **)&v17);
    sub_1000A1FAC(v12, v13, *(unsigned __int16 *)(v14[5] + 84));
  }
  v17 = &v16;
  result = sub_10002252C(v6, &v16, (uint64_t)&unk_100740F58, (uint64_t **)&v17);
  if (*(_QWORD *)result[5])
  {
    v17 = &v16;
    *(_QWORD *)(*(_QWORD *)sub_10002252C(v6, &v16, (uint64_t)&unk_100740F58, (uint64_t **)&v17)[5] + 144) = 0;
    v17 = &v16;
    *(_QWORD *)(*(_QWORD *)sub_10002252C(v6, &v16, (uint64_t)&unk_100740F58, (uint64_t **)&v17)[5] + 152) = 0;
    v17 = &v16;
    *(_QWORD *)(*(_QWORD *)sub_10002252C(v6, &v16, (uint64_t)&unk_100740F58, (uint64_t **)&v17)[5] + 128) = 0;
    v17 = &v16;
    *(_QWORD *)(*(_QWORD *)sub_10002252C(v6, &v16, (uint64_t)&unk_100740F58, (uint64_t **)&v17)[5] + 136) = 0;
    return sub_100520C04((uint64_t *)a1, v16);
  }
  return result;
}

void sub_100518CB4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;

  *(_BYTE *)(a1 + 991) = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v2 = off_1009932F0;
  v13 = off_1009932F0;
  if (!off_1009932F0)
  {
    v3 = sub_10052A708();
    v2 = dlsym(v3, "tailspin_config_create_with_current_state");
    v11[3] = (uint64_t)v2;
    off_1009932F0 = v2;
  }
  _Block_object_dispose(&v10, 8);
  if (!v2)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "tailspin_config_t BT::soft_tailspin_config_create_with_current_state()"));
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("AudioLinkManager.mm"), 94, CFSTR("%s"), dlerror());
LABEL_12:

    __break(1u);
    return;
  }
  v4 = ((uint64_t (*)(void))v2)();
  *(_QWORD *)(a1 + 992) = v4;
  if (!v4)
    return;
  v5 = v4;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v6 = off_1009932F8;
  v13 = off_1009932F8;
  if (!off_1009932F8)
  {
    v7 = sub_10052A708();
    v6 = dlsym(v7, "tailspin_enabled_set");
    v11[3] = (uint64_t)v6;
    off_1009932F8 = v6;
  }
  _Block_object_dispose(&v10, 8);
  if (!v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void BT::soft_tailspin_enabled_set(tailspin_config_t, BOOL)"));
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("AudioLinkManager.mm"), 106, CFSTR("%s"), dlerror());
    goto LABEL_12;
  }
  ((void (*)(uint64_t, uint64_t))v6)(v5, 1);
  sub_100524EA8(*(_QWORD *)(a1 + 992), 64);
  sub_100524EA8(*(_QWORD *)(a1 + 992), 48);
  sub_100524FD8(*(_QWORD *)(a1 + 992));
}

void sub_100518E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100518ECC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  NSObject *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  _BYTE buf[12];
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;

  v42 = a3;
  if (!_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
    return 1;
  v6 = *(_QWORD *)(a1 + 216);
  if (v6)
  {
    if (!sub_100094BB4(v6, a3))
      return 1;
  }
  v43 = a3;
  *(_QWORD *)buf = &v43;
  v7 = *(unsigned int *)(*(_QWORD *)(sub_10002252C((uint64_t **)(a1 + 184), &v43, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 40)+ 24);
  v43 = v42;
  *(_QWORD *)buf = &v43;
  v8 = *(_QWORD *)(sub_10002252C((uint64_t **)(a1 + 184), &v43, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 40);
  v9 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_INFO))
  {
    v10 = *(_QWORD *)(a1 + 208);
    v11 = *(_QWORD *)(v10 + 8 * a2 + 168);
    v10 += 48;
    v12 = *(_QWORD *)(v10 + 8 * v7);
    v13 = *(_QWORD *)(v10 + 8 * *(unsigned int *)(v8 + 24));
    v43 = v42;
    *(_QWORD *)buf = &v43;
    v14 = *(_DWORD *)(*(_QWORD *)(sub_10002252C((uint64_t **)(a1 + 184), &v43, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]
                                + 40)
                    + 20);
    *(_DWORD *)buf = 136447234;
    *(_QWORD *)&buf[4] = v11;
    v45 = 2082;
    v46 = v12;
    v47 = 2082;
    v48 = v13;
    v49 = 1024;
    v50 = 0;
    v51 = 1024;
    v52 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Low Latency Game pre Transition: %{public}s. State: %{public}s -> %{public}s. handled %d. latency %d", buf, 0x2Cu);
  }
  switch(a2)
  {
    case 0u:
      if ((_DWORD)v7 != 9)
        goto LABEL_50;
      *(_DWORD *)(v8 + 24) = 1;
      v15 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Low Latency Game exit completed, re-evaluate latency mode", buf, 2u);
      }
      goto LABEL_39;
    case 2u:
      if ((_DWORD)v7 == 12)
      {
        *(_DWORD *)(v8 + 24) = 13;
        sub_100096940(*(_QWORD *)(a1 + 216), 2, v42);
        goto LABEL_47;
      }
      if ((_DWORD)v7 != 2 && (_DWORD)v7 != 1)
        goto LABEL_50;
      *(_DWORD *)(v8 + 24) = 5;
      v17 = *(_QWORD *)(a1 + 216);
      v18 = v42;
      v16 = 1;
      v19 = 1;
LABEL_25:
      sub_1000969F4(v17, v19, v18);
      goto LABEL_51;
    case 3u:
      if ((_DWORD)v7 == 8)
      {
        v20 = 7;
LABEL_38:
        *(_DWORD *)(v8 + 24) = v20;
LABEL_39:
        v26 = *(_QWORD *)(a1 + 208);
        v27 = v42;
        *(_QWORD *)buf = &v42;
        v28 = sub_10002252C((uint64_t **)(a1 + 184), (unint64_t *)&v42, (uint64_t)&unk_100740F58, (uint64_t **)buf);
        sub_1000A1FAC(v26, v27, *(unsigned __int16 *)(v28[5] + 84));
        goto LABEL_47;
      }
      if ((_DWORD)v7 == 5)
      {
        v20 = 4;
        goto LABEL_38;
      }
      v29 = qword_1009997E0;
      v16 = 0;
      if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_51;
      v30 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * v7 + 48);
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Low Latency Game transitionStateMachine: got FTO in state %{public}s", buf, 0xCu);
LABEL_50:
      v16 = 0;
      goto LABEL_51;
    case 4u:
      if ((_DWORD)v7 != 6)
        goto LABEL_50;
      *(_DWORD *)(v8 + 24) = 13;
      sub_100096940(*(_QWORD *)(a1 + 216), 2, v42);
      sub_100525B7C(a1, v42);
      goto LABEL_47;
    case 6u:
      if ((_DWORD)v7 != 13)
        goto LABEL_50;
      *(_DWORD *)(v8 + 24) = 10;
      goto LABEL_47;
    case 8u:
      sub_1000A877C(*(_QWORD *)(a1 + 208), v42);
      sub_100096B7C(*(_QWORD *)(a1 + 216), v42);
      if ((v7 - 10) > 3)
        goto LABEL_50;
      v16 = 1;
      sub_100096940(*(_QWORD *)(a1 + 216), 1, v42);
      *(_DWORD *)(v8 + 24) = 8;
      v17 = *(_QWORD *)(a1 + 216);
      v18 = v42;
      v19 = 3;
      goto LABEL_25;
    case 0xAu:
      if ((_DWORD)v7 == 7)
      {
        *(_DWORD *)(v8 + 24) = 9;
        v31 = *(_QWORD *)(a1 + 216);
        v32 = v42;
        v33 = 0;
LABEL_46:
        sub_1000969F4(v31, v33, v32);
LABEL_47:
        v16 = 1;
        goto LABEL_51;
      }
      if ((_DWORD)v7 == 4)
      {
        if (*(_DWORD *)(sub_1005214B0(a1, v42) + 20) != 10)
        {
          v34 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
            sub_1006FE7F4((unint64_t *)&v42, a1, v34);
          goto LABEL_50;
        }
        *(_DWORD *)(v8 + 24) = 6;
        v31 = *(_QWORD *)(a1 + 216);
        v32 = v42;
        v33 = 2;
        goto LABEL_46;
      }
      if ((_DWORD)v7)
        goto LABEL_50;
      v16 = 1;
      *(_DWORD *)(v8 + 24) = 1;
      sub_100525AF0(a1);
LABEL_51:
      v35 = *(unsigned int *)(v8 + 24);
      if ((_DWORD)v7 != (_DWORD)v35)
      {
        v36 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          v37 = *(_QWORD *)(a1 + 208);
          v38 = *(_QWORD *)(v37 + 8 * a2 + 168);
          v37 += 48;
          v39 = *(_QWORD *)(v37 + 8 * v7);
          v40 = *(_QWORD *)(v37 + 8 * v35);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = v38;
          v45 = 2082;
          v46 = v39;
          v47 = 2082;
          v48 = v40;
          v49 = 1024;
          v50 = v16;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Low Latency Game Transition: %{public}s. State: %{public}s -> %{public}s. handled %d", buf, 0x26u);
        }
      }
      return v16;
    case 0xBu:
      sub_1000A877C(*(_QWORD *)(a1 + 208), v42);
      sub_100096B7C(*(_QWORD *)(a1 + 216), v42);
      if ((_DWORD)v7)
        v21 = (_DWORD)v7 == 14;
      else
        v21 = 1;
      if (!v21)
      {
        *(_DWORD *)(v8 + 24) = 0;
        sub_1000969F4(*(_QWORD *)(a1 + 216), 0, v42);
        sub_100096940(*(_QWORD *)(a1 + 216), 1, v42);
        v22 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Low Latency Game stopped, re-evaluate latency mode", buf, 2u);
        }
        v23 = *(_QWORD *)(a1 + 208);
        v24 = v42;
        *(_QWORD *)buf = &v42;
        v25 = sub_10002252C((uint64_t **)(a1 + 184), (unint64_t *)&v42, (uint64_t)&unk_100740F58, (uint64_t **)buf);
        sub_1000A1FAC(v23, v24, *(unsigned __int16 *)(v25[5] + 84));
      }
      goto LABEL_50;
    default:
      v16 = sub_1005281F0(a1, a2, v42);
      goto LABEL_51;
  }
}

void sub_1005194E4(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  const char *v7;
  int v8;
  const char *v9;

  if (a3 == 1)
  {
    if (!*(_BYTE *)(a1 + 343))
    {
      if (qword_100977A78 != -1)
        dispatch_once(&qword_100977A78, &stru_100935BF0);
      sub_100497FB4((uint64_t)off_100977A70, a2, 16, 9, 110, 0);
      *(_BYTE *)(a1 + 343) = 1;
      return;
    }
    goto LABEL_11;
  }
  if (a3 != 2 || !*(_BYTE *)(a1 + 343))
  {
LABEL_11:
    v6 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v7 = "dynamicLowLatencyExit";
      if (a3 == 1)
        v7 = "dynamicLowLatencyEnter";
      v8 = 136315138;
      v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: Recieved duplicate notification for %s", (uint8_t *)&v8, 0xCu);
    }
    return;
  }
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100935BF0);
  sub_100497FB4((uint64_t)off_100977A70, a2, 16, 9, 111, 0);
  *(_BYTE *)(a1 + 343) = 0;
}

uint64_t sub_100519670(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100935BD0);
  return sub_1003E84B0(qword_100977DF8, *(unsigned __int16 *)(a1 + 32), 6);
}

uint64_t *sub_1005196C4(uint64_t a1, unint64_t a2)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *result;
  unint64_t v15;
  uint8_t buf[8];
  __int16 v17;
  int v18;

  v15 = a2;
  v3 = (uint64_t **)(a1 + 184);
  *(_QWORD *)buf = &v15;
  if (**(_BYTE **)(sub_10002252C((uint64_t **)(a1 + 184), &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 40))
  {
    v4 = sub_100038E50();
    sub_1002B43D4(v4 + 728, a1 + 32);
    v5 = sub_100038E50();
    sub_1002B43D4(v5 + 808, a1 + 48);
  }
  *(_QWORD *)buf = &v15;
  *(_DWORD *)(*(_QWORD *)(sub_10002252C(v3, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 40) + 20) = 6;
  *(_QWORD *)buf = &v15;
  *(_BYTE *)(*(_QWORD *)(sub_10002252C(v3, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 40) + 1) = 0;
  *(_QWORD *)buf = &v15;
  *(_QWORD *)(*(_QWORD *)(sub_10002252C(v3, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 40) + 8) = 0;
  *(_QWORD *)buf = &v15;
  *(_BYTE *)(*(_QWORD *)(sub_10002252C(v3, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 40) + 2) = 0;
  *(_QWORD *)buf = &v15;
  *(_BYTE *)(*(_QWORD *)(sub_10002252C(v3, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 40) + 3) = 0;
  *(_QWORD *)buf = &v15;
  *(_DWORD *)(*(_QWORD *)(sub_10002252C(v3, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 40) + 24) = 0;
  v6 = sub_100038E50();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 216))(v6, *(_QWORD *)(a1 + 208) + 2);
  v7 = sub_100038E50();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 224))(v7, a1 + 912);
  v8 = *(_QWORD *)(a1 + 208);
  *(_WORD *)(v8 + 5) = 0;
  *(_WORD *)v8 = 1;
  *(_BYTE *)(v8 + 3) = 0;
  **(_BYTE **)(a1 + 216) = 0;
  if (*(_BYTE *)(v8 + 2) || *(_BYTE *)(v8 + 8) || *(_BYTE *)(v8 + 7))
  {
    v9 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(unsigned __int8 *)(v8 + 8);
      v11 = *(unsigned __int8 *)(v8 + 7);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v10;
      v17 = 1024;
      v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Dynamic Latency: Re-enable LLM, fSpatialVideoOn = %d fSpatialMusicOn = %d", buf, 0xEu);
      v8 = *(_QWORD *)(a1 + 208);
    }
    v12 = v15;
    *(_QWORD *)buf = &v15;
    v13 = sub_10002252C(v3, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf);
    sub_1000A1FAC(v8, v12, *(unsigned __int16 *)(v13[5] + 84));
  }
  *(_QWORD *)buf = &v15;
  result = sub_10002252C(v3, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf);
  if (*(_QWORD *)result[5])
    return sub_100520C04((uint64_t *)a1, v15);
  return result;
}

void sub_1005199B4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;

  *(_BYTE *)(a1 + 991) = 0;
  v2 = *(_QWORD *)(a1 + 992);
  if (v2)
    sub_1005250F8(v2);
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v3 = off_100993318;
  v11 = off_100993318;
  if (!off_100993318)
  {
    v4 = sub_10052A708();
    v3 = dlsym(v4, "tailspin_config_create_with_default_config");
    v9[3] = (uint64_t)v3;
    off_100993318 = v3;
  }
  _Block_object_dispose(&v8, 8);
  if (v3)
  {
    v5 = ((uint64_t (*)(void))v3)();
    *(_QWORD *)(a1 + 992) = v5;
    if (v5)
    {
      sub_100524FD8(v5);
      sub_1005250F8(*(_QWORD *)(a1 + 992));
      *(_QWORD *)(a1 + 992) = 0;
    }
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "tailspin_config_t BT::soft_tailspin_config_create_with_default_config()"));
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("AudioLinkManager.mm"), 100, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_100519AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100519AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  if (*(unsigned __int8 *)(a1 + 1152) == (_DWORD)a2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 1096) + 40);
    v4 = *(_QWORD **)(a1 + 1104);
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = (_QWORD *)v4[1];
      }
      while (v4);
    }
    else
    {
      v6 = (_QWORD *)(a1 + 1104);
      do
      {
        v5 = (_QWORD *)v6[2];
        v7 = *v5 == (_QWORD)v6;
        v6 = v5;
      }
      while (v7);
    }
    v8 = v5[5];
    v9 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v9 + 3336))(v9, a2, *(_QWORD *)(v3 + 8), *(_QWORD *)(v8 + 8), *(unsigned __int16 *)(v3 + 16), *(unsigned __int16 *)(v8 + 16), *(unsigned __int16 *)(v3 + 18), *(unsigned __int16 *)(v8 + 18));
  }
  else
  {
    *(_BYTE *)(a1 + 1152) = a2;
    sub_1005256AC(a1, a2);
  }
}

uint64_t *sub_100519BA4(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  uint64_t **v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  uint64_t *result;
  __int16 v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[6];
  uint64_t v22;
  uint8_t buf[8];

  v22 = a2;
  v5 = sub_10051F728(a1, a2);
  v6 = (uint64_t **)(a1 + 184);
  *(_QWORD *)buf = &v22;
  *(_DWORD *)(sub_10002252C((uint64_t **)(a1 + 184), (unint64_t *)&v22, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]
            + 64) = v5;
  v7 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = &v22;
    v8 = *(_DWORD *)(sub_10002252C((uint64_t **)(a1 + 184), (unint64_t *)&v22, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 64);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "A2DP Link Adaptive Packet Type: Link Adaptive Packet type support=%d", buf, 8u);
  }
  if (sub_10051F7A4(a1))
  {
    v9 = sub_1004759E0();
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10051F864;
    v21[3] = &unk_100918090;
    v21[4] = a1;
    v21[5] = v22;
    sub_100041A34(v9, v21);
  }
  *(_QWORD *)buf = &v22;
  result = sub_10002252C((uint64_t **)(a1 + 184), (unint64_t *)&v22, (uint64_t)&unk_100740F58, (uint64_t **)buf);
  if (*(_DWORD *)(result[5] + 64))
  {
    v11 = sub_10051F8C4(a1, v22);
    if (a3)
    {
      *(_QWORD *)buf = &v22;
      if (*(_DWORD *)(sub_10002252C(v6, (unint64_t *)&v22, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 64) == 2)
      {
        v12 = sub_1004759E0();
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_10051F98C;
        v19[3] = &unk_10092D5B8;
        v20 = v11;
        sub_100041A34(v12, v19);
        *(_QWORD *)buf = &v22;
        v13 = sub_10002252C(v6, (unint64_t *)&v22, (uint64_t)&unk_100740F58, (uint64_t **)buf) + 5;
        v14 = 1;
LABEL_12:
        *(_BYTE *)(*v13 + 71) = v14;
        *(_QWORD *)buf = &v22;
        result = sub_10002252C(v6, (unint64_t *)&v22, (uint64_t)&unk_100740F58, (uint64_t **)buf);
        *(_WORD *)(result[5] + 68) = -1;
        return result;
      }
      *(_QWORD *)buf = &v22;
    }
    else
    {
      v15 = sub_1004759E0();
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10051F9E0;
      v17[3] = &unk_10092D5B8;
      v18 = v11;
      sub_100041A34(v15, v17);
      *(_QWORD *)buf = &v22;
    }
    v16 = sub_10002252C(v6, (unint64_t *)&v22, (uint64_t)&unk_100740F58, (uint64_t **)buf);
    v14 = 0;
    v13 = v16 + 5;
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_100519E90(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const char *v22;
  __int16 v23;
  const char *v24;

  v5 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    if (a3)
      v6 = "Start";
    else
      v6 = "Stop";
    v7 = sub_100027F68();
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 616))(v7);
    v9 = "NOT FORCED";
    if (v8)
      v9 = "FORCED";
    v21 = 136315394;
    v22 = v6;
    v23 = 2080;
    v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Audio Debug Stream State : %s Ultra High Priority %s ", (uint8_t *)&v21, 0x16u);
  }
  v10 = sub_100027F68();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 616))(v10);
  if (a3)
  {
    if (!(_DWORD)result)
      return result;
    v12 = sub_1000438A4();
    v13 = *(unsigned int *)(a2 + 128) | ((unint64_t)*(unsigned __int16 *)(a2 + 132) << 32);
    v14 = sub_10043F854(a2);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 80))(v12, v13, v14, 2, 1, 1, 1, 0);
    v15 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 960))(v15, 1, 1);
    v16 = *(uint64_t (**)(void))(*(_QWORD *)sub_1000438A4() + 104);
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v17 = sub_1000438A4();
    v18 = *(unsigned int *)(a2 + 128) | ((unint64_t)*(unsigned __int16 *)(a2 + 132) << 32);
    v19 = sub_10043F854(a2);
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v17 + 80))(v17, v18, v19, 2, 0, 1, 1, 0);
    v20 = sub_1000438A4();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v20 + 960))(v20, 0, 1);
    v16 = *(uint64_t (**)(void))(*(_QWORD *)sub_1000438A4() + 104);
  }
  return v16();
}

uint64_t sub_10051A094(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_10051A0B8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_10051A0C8(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, __int16 a6, __int16 a7)
{
  sub_1005175D0((_QWORD *)(a1 - 24), a2, a3, a4, a5, a6, a7);
}

void sub_10051A0D0(uint64_t a1, uint64_t a2, __int16 a3, int a4)
{
  NSObject *v4;
  _QWORD block[6];
  int v6;
  __int16 v7;

  v4 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051A130;
  block[3] = &unk_100933AE8;
  block[4] = a1;
  block[5] = a2;
  v7 = a3;
  v6 = a4;
  dispatch_async(v4, block);
}

void sub_10051A130(uint64_t a1)
{
  unint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t **v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  NSObject *v15;
  uint64_t *v16;
  id v17;
  void *v18;
  int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t *v27;
  __int16 v28;
  BOOL v29;
  uint64_t v30;
  _QWORD v31[4];
  __int16 v32;
  __int16 v33;
  BOOL v34;
  unint64_t *v35;
  _BYTE buf[12];
  __int16 v37;
  int v38;

  v2 = (unint64_t *)(a1 + 40);
  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD **)(v3 + 192);
    if (v4)
    {
      v6 = (uint64_t **)(v3 + 184);
      v7 = (_QWORD *)(v3 + 192);
      do
      {
        v8 = v4[4];
        v9 = v8 >= v1;
        if (v8 >= v1)
          v10 = v4;
        else
          v10 = v4 + 1;
        if (v9)
          v7 = v4;
        v4 = (_QWORD *)*v10;
      }
      while (*v10);
      if (v7 != (_QWORD *)(v3 + 192) && v1 >= v7[4])
      {
        v11 = *(_WORD *)(a1 + 52);
        *(_QWORD *)buf = a1 + 40;
        *(_WORD *)(sub_10002252C(v6, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 60) = v11;
        if (qword_100978120 != -1)
          dispatch_once(&qword_100978120, &stru_100935C70);
        sub_1002651A0(qword_100978118, *(_QWORD *)(a1 + 40), 0, *(unsigned __int16 *)(a1 + 48));
        v12 = *(_DWORD *)(a1 + 48);
        *(_QWORD *)buf = v2;
        *(_DWORD *)(sub_10002252C(v6, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 80) = v12;
        v13 = sub_100027F68();
        LOBYTE(v12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 296))(v13);
        *(_QWORD *)buf = v2;
        *(_BYTE *)(sub_10002252C(v6, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 56) = v12 ^ 1;
        *(_QWORD *)buf = v2;
        if (*(_BYTE *)(sub_10002252C(v6, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 56))
        {
          *(_QWORD *)buf = v2;
          if (*(_QWORD *)sub_10002252C(v6, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5])
          {
            if (*(unsigned __int16 *)(a1 + 52) >= *(unsigned __int16 *)(v3 + 1038))
              v14 = *(_WORD *)(v3 + 1038);
            else
              v14 = *(_WORD *)(a1 + 52);
            *(_QWORD *)buf = v2;
            *(_WORD *)(sub_10002252C(v6, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 58) = v14;
            v15 = qword_1009997E0;
            if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
            {
              v35 = v2;
              v16 = sub_10002252C(v6, v2, (uint64_t)&unk_100740F58, (uint64_t **)&v35);
              v17 = sub_10051A504((uint64_t)v16, *(_DWORD *)(v16[5] + 80));
              v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
              v35 = v2;
              v19 = *(unsigned __int16 *)(sub_10002252C(v6, v2, (uint64_t)&unk_100740F58, (uint64_t **)&v35)[5] + 58);
              *(_DWORD *)buf = 138412546;
              *(_QWORD *)&buf[4] = v18;
              v37 = 1024;
              v38 = v19;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "A2DP Link Adaptive Bitrate for %@ started with initial bitrate of %3d", buf, 0x12u);

            }
            *(_QWORD *)buf = v2;
            v20 = *(unsigned __int16 *)(sub_10002252C(v6, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 84);
            *(_QWORD *)buf = v2;
            v21 = sub_10002252C(v6, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf);
            v22 = v3 + 1104;
            v23 = *(_QWORD *)(v3 + 1104);
            if (!v23)
              goto LABEL_33;
            v24 = v3 + 1104;
            do
            {
              v25 = *(unsigned __int16 *)(v23 + 32);
              v26 = v25 >= v20;
              if (v25 >= v20)
                v27 = (uint64_t *)v23;
              else
                v27 = (uint64_t *)(v23 + 8);
              if (v26)
                v24 = v23;
              v23 = *v27;
            }
            while (*v27);
            if (v24 == v22 || v20 < *(unsigned __int16 *)(v24 + 32))
LABEL_33:
              v24 = v3 + 1104;
            v28 = *(_WORD *)(v21[5] + 58);
            v29 = v24 != v22;
            v30 = sub_1004759E0();
            v31[0] = _NSConcreteStackBlock;
            v31[1] = 3221225472;
            v31[2] = sub_10051A5F0;
            v31[3] = &unk_100931E78;
            v34 = v29;
            v32 = v20;
            v33 = v28;
            sub_100041A34(v30, v31);
          }
        }
      }
    }
  }
}

void sub_10051A4EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10051A504(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  const __CFString *v5;
  NSObject *v7;
  uint8_t v8[16];

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithFormat:](NSMutableString, "stringWithFormat:", &stru_100941758));
  v4 = v3;
  switch(a2)
  {
    case 0:
      v5 = CFSTR("SBC");
      goto LABEL_7;
    case 33023:
      v5 = CFSTR("AAC-ELD");
      goto LABEL_7;
    case 2:
      v5 = CFSTR("AAC-LC");
LABEL_7:
      objc_msgSend(v3, "appendString:", v5);
      return v4;
  }
  objc_msgSend(v3, "appendString:", CFSTR("Unknown Codec"));
  v7 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Unknown codec", v8, 2u);
  }
  return v4;
}

void sub_10051A5E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10051A5F0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 36))
  {
    if (qword_100977E00 != -1)
      dispatch_once(&qword_100977E00, &stru_100935BD0);
    sub_1003E8A50(qword_100977DF8, *(unsigned __int16 *)(a1 + 32), *(unsigned __int16 *)(a1 + 34));
  }
}

void sub_10051A658(uint64_t a1, uint64_t a2, __int16 a3, int a4)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD block[6];
  int v7;
  __int16 v8;

  v4 = a1 - 24;
  v5 = *(NSObject **)(a1 + 224);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051A130;
  block[3] = &unk_100933AE8;
  block[4] = v4;
  block[5] = a2;
  v8 = a3;
  v7 = a4;
  dispatch_async(v5, block);
}

void sub_10051A6B8(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 248);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10051A710;
  v3[3] = &unk_100918090;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_async(v2, v3);
}

uint64_t *sub_10051A710(uint64_t *result)
{
  unint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  __int16 v10;
  __int16 v11;
  unint64_t *v12;

  v2 = (unint64_t *)(result + 5);
  v1 = result[5];
  if (v1)
  {
    v3 = result[4];
    v4 = *(_QWORD **)(v3 + 192);
    if (v4)
    {
      v5 = (uint64_t **)(v3 + 184);
      v6 = (_QWORD *)(v3 + 192);
      do
      {
        v7 = v4[4];
        v8 = v7 >= v1;
        if (v7 >= v1)
          v9 = v4;
        else
          v9 = v4 + 1;
        if (v8)
          v6 = v4;
        v4 = (_QWORD *)*v9;
      }
      while (*v9);
      if (v6 != (_QWORD *)(v3 + 192) && v1 >= v6[4])
      {
        v12 = (unint64_t *)(result + 5);
        *(_BYTE *)(sub_10002252C(v5, v2, (uint64_t)&unk_100740F58, (uint64_t **)&v12)[5] + 56) = 0;
        v10 = *(_WORD *)(v3 + 1038);
        v12 = v2;
        *(_WORD *)(sub_10002252C(v5, v2, (uint64_t)&unk_100740F58, (uint64_t **)&v12)[5] + 58) = v10;
        v12 = v2;
        *(_WORD *)(sub_10002252C(v5, v2, (uint64_t)&unk_100740F58, (uint64_t **)&v12)[5] + 62) = -1;
        v11 = *(_WORD *)(v3 + 1038);
        v12 = v2;
        *(_WORD *)(sub_10002252C(v5, v2, (uint64_t)&unk_100740F58, (uint64_t **)&v12)[5] + 60) = v11;
        v12 = v2;
        result = sub_10002252C(v5, v2, (uint64_t)&unk_100740F58, (uint64_t **)&v12);
        *(_DWORD *)(result[5] + 80) = 0;
      }
    }
  }
  return result;
}

void sub_10051A85C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];

  v2 = a1 - 24;
  v3 = *(NSObject **)(a1 + 224);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051A710;
  v4[3] = &unk_100918090;
  v4[4] = v2;
  v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_10051A8B4(uint64_t a1, __int16 a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;
  char v6;

  v3 = *(NSObject **)(a1 + 248);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051A914;
  v4[3] = &unk_10092CB18;
  v4[4] = a1;
  v5 = a2;
  v6 = a3;
  dispatch_async(v3, v4);
}

void sub_10051A914(uint64_t a1)
{
  sub_1000A3F30(*(_BYTE **)(*(_QWORD *)(a1 + 32) + 208), *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
}

void sub_10051A92C(uint64_t a1, __int16 a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;
  char v6;

  v3 = *(NSObject **)(a1 + 224);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051A914;
  v4[3] = &unk_10092CB18;
  v4[4] = a1 - 24;
  v5 = a2;
  v6 = a3;
  dispatch_async(v3, v4);
}

void sub_10051A990(uint64_t a1, __int16 a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;
  char v6;

  v3 = *(NSObject **)(a1 + 248);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051A9F0;
  v4[3] = &unk_10092CB18;
  v4[4] = a1;
  v5 = a2;
  v6 = a3;
  dispatch_async(v3, v4);
}

void sub_10051A9F0(uint64_t a1)
{
  sub_1000A4020(*(_BYTE **)(*(_QWORD *)(a1 + 32) + 208), *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
}

void sub_10051AA08(uint64_t a1, __int16 a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;
  char v6;

  v3 = *(NSObject **)(a1 + 224);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051A9F0;
  v4[3] = &unk_10092CB18;
  v4[4] = a1 - 24;
  v5 = a2;
  v6 = a3;
  dispatch_async(v3, v4);
}

void sub_10051AA6C(uint64_t a1, __int16 a2)
{
  NSObject *v2;
  _QWORD v3[5];
  __int16 v4;

  v2 = *(NSObject **)(a1 + 248);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10051AAC8;
  v3[3] = &unk_100920960;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_10051AAC8(uint64_t a1)
{
  sub_1000A1F54(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208), *(unsigned __int16 *)(a1 + 40));
}

void sub_10051AADC(uint64_t a1, __int16 a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;

  v2 = a1 - 24;
  v3 = *(NSObject **)(a1 + 224);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051AAC8;
  v4[3] = &unk_100920960;
  v4[4] = v2;
  v5 = a2;
  dispatch_async(v3, v4);
}

double sub_10051AB38(_QWORD *a1, int a2)
{
  __uint64_t v4;
  double result;

  v4 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (a2)
  {
    a1[104] = v4;
  }
  else
  {
    result = (double)(v4 - a1[104]) * 0.000000001;
    a1[105] = (unint64_t)result;
    a1[106] += (unint64_t)result;
  }
  return result;
}

void sub_10051AB98(uint64_t a1, __int16 a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;
  char v6;

  v3 = *(NSObject **)(a1 + 248);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051ABF8;
  v4[3] = &unk_10092CB18;
  v4[4] = a1;
  v5 = a2;
  v6 = a3;
  dispatch_async(v3, v4);
}

void sub_10051ABF8(uint64_t a1)
{
  sub_1000A297C(*(_BYTE **)(*(_QWORD *)(a1 + 32) + 208), *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
}

void sub_10051AC10(uint64_t a1, __int16 a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;
  char v6;

  v3 = *(NSObject **)(a1 + 224);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051ABF8;
  v4[3] = &unk_10092CB18;
  v4[4] = a1 - 24;
  v5 = a2;
  v6 = a3;
  dispatch_async(v3, v4);
}

void sub_10051AC74(uint64_t a1, __int16 a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;
  char v6;

  v3 = *(NSObject **)(a1 + 248);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051ACD4;
  v4[3] = &unk_10092CB18;
  v4[4] = a1;
  v5 = a2;
  v6 = a3;
  dispatch_async(v3, v4);
}

void sub_10051ACD4(uint64_t a1)
{
  sub_1000A2FEC(*(_BYTE **)(*(_QWORD *)(a1 + 32) + 208), *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
}

void sub_10051ACEC(uint64_t a1, __int16 a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;
  char v6;

  v3 = *(NSObject **)(a1 + 224);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051ACD4;
  v4[3] = &unk_10092CB18;
  v4[4] = a1 - 24;
  v5 = a2;
  v6 = a3;
  dispatch_async(v3, v4);
}

void sub_10051AD50(uint64_t a1, __int16 a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;
  char v6;

  v3 = *(NSObject **)(a1 + 248);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051ADB0;
  v4[3] = &unk_10092CB18;
  v4[4] = a1;
  v5 = a2;
  v6 = a3;
  dispatch_async(v3, v4);
}

void sub_10051ADB0(uint64_t a1)
{
  sub_1000A337C(*(_BYTE **)(*(_QWORD *)(a1 + 32) + 208), *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
}

void sub_10051ADC8(uint64_t a1, __int16 a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;
  char v6;

  v3 = *(NSObject **)(a1 + 224);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051ADB0;
  v4[3] = &unk_10092CB18;
  v4[4] = a1 - 24;
  v5 = a2;
  v6 = a3;
  dispatch_async(v3, v4);
}

void sub_10051AE2C(uint64_t a1, __int16 a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;
  char v6;

  v3 = *(NSObject **)(a1 + 248);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051AE8C;
  v4[3] = &unk_10092CB18;
  v4[4] = a1;
  v5 = a2;
  v6 = a3;
  dispatch_async(v3, v4);
}

void sub_10051AE8C(uint64_t a1)
{
  sub_1000A35D4(*(_BYTE **)(*(_QWORD *)(a1 + 32) + 208), *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
}

void sub_10051AEA4(uint64_t a1, __int16 a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;
  char v6;

  v3 = *(NSObject **)(a1 + 224);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051AE8C;
  v4[3] = &unk_10092CB18;
  v4[4] = a1 - 24;
  v5 = a2;
  v6 = a3;
  dispatch_async(v3, v4);
}

void sub_10051AF08(uint64_t a1, __int16 a2)
{
  NSObject *v2;
  _QWORD v3[5];
  __int16 v4;

  v2 = *(NSObject **)(a1 + 248);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10051AF64;
  v3[3] = &unk_100920960;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_10051AF64(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 872))
    sub_1005C54D8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 872), *(unsigned __int16 *)(a1 + 40));
}

void sub_10051AF80(uint64_t a1, __int16 a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;

  v2 = a1 - 24;
  v3 = *(NSObject **)(a1 + 224);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051AF64;
  v4[3] = &unk_100920960;
  v4[4] = v2;
  v5 = a2;
  dispatch_async(v3, v4);
}

void sub_10051AFDC(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  NSObject *v4;
  _QWORD block[6];
  __int16 v6;
  char v7;

  v4 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051B03C;
  block[3] = &unk_100922690;
  v7 = a4;
  block[4] = a1;
  block[5] = a2;
  v6 = a3;
  dispatch_async(v4, block);
}

void sub_10051B03C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  unint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  __int16 v14;
  NSObject *v15;
  _QWORD *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t *v20;
  _BYTE buf[12];
  __int16 v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (*(_BYTE *)(a1 + 50))
      v5 = "Publish ";
    else
      v5 = "Unpublish ";
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v5;
    v22 = 2048;
    v23 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Dynamic Latency : A2DP Device %{public}s, device: %p", buf, 0x16u);
  }
  v7 = (unint64_t *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v8 = (_QWORD *)(v2 + 192);
    v9 = *(_QWORD **)(v2 + 192);
    if (*(_BYTE *)(a1 + 50))
    {
      if (!v9)
        goto LABEL_19;
      v10 = (_QWORD *)(v2 + 192);
      do
      {
        v11 = v9[4];
        v12 = v11 >= v6;
        if (v11 >= v6)
          v13 = v9;
        else
          v13 = v9 + 1;
        if (v12)
          v10 = v9;
        v9 = (_QWORD *)*v13;
      }
      while (*v13);
      if (v10 == v8 || v6 < v10[4])
LABEL_19:
        operator new();
      if (qword_100978120 != -1)
        dispatch_once(&qword_100978120, &stru_100935C70);
      sub_100264E58(qword_100978118, *(_QWORD *)(a1 + 40));
      v14 = *(_WORD *)(a1 + 48);
      *(_QWORD *)buf = v7;
      *(_WORD *)(sub_10002252C((uint64_t **)(v2 + 184), v7, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 84) = v14;
      *(_QWORD *)buf = v7;
      *(_BYTE *)(sub_10002252C((uint64_t **)(v2 + 184), v7, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 88) = 1;
      v15 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Initialize the fCurrentMode to %d", buf, 8u);
      }
      *(_QWORD *)buf = v7;
      **(_BYTE **)(sub_10002252C((uint64_t **)(v2 + 184), v7, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 48) = 0;
      sub_1000A87C8(*(_QWORD *)(v2 + 208), *v7);
    }
    else if (v9)
    {
      v16 = (_QWORD *)(v2 + 192);
      do
      {
        v17 = v9[4];
        v18 = v17 >= v6;
        if (v17 >= v6)
          v19 = v9;
        else
          v19 = v9 + 1;
        if (v18)
          v16 = v9;
        v9 = (_QWORD *)*v19;
      }
      while (*v19);
      if (v16 != v8 && v6 >= v16[4])
      {
        *(_QWORD *)buf = a1 + 40;
        *(_BYTE *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 88) = 0;
        *(_QWORD *)buf = a1 + 40;
        if (!*(_BYTE *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 87))
        {
          *(_QWORD *)buf = a1 + 40;
          if (!*(_BYTE *)(sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 88))
          {
            *(_QWORD *)buf = a1 + 40;
            v20 = (uint64_t *)sub_10002252C((uint64_t **)(v2 + 184), (unint64_t *)(a1 + 40), (uint64_t)&unk_100740F58, (uint64_t **)buf)[5];
            if (v20)
            {
              sub_10052A54C(v20);
              operator delete();
            }
            sub_100015ECC(v2 + 184, (unint64_t *)(a1 + 40));
            if (qword_100978120 != -1)
              dispatch_once(&qword_100978120, &stru_100935C70);
            sub_100264FF4(qword_100978118, *v7);
          }
        }
      }
    }
  }
}

void sub_10051B450()
{
  operator delete();
}

void sub_10051B47C(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD block[6];
  __int16 v7;
  char v8;

  v4 = a1 - 24;
  v5 = *(NSObject **)(a1 + 224);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051B03C;
  block[3] = &unk_100922690;
  v8 = a4;
  block[4] = v4;
  block[5] = a2;
  v7 = a3;
  dispatch_async(v5, block);
}

void sub_10051B4DC(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  NSObject *v4;
  _QWORD block[6];
  __int16 v6;
  char v7;

  v4 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051B53C;
  block[3] = &unk_100922690;
  v7 = a4;
  v6 = a3;
  block[4] = a1;
  block[5] = a2;
  dispatch_async(v4, block);
}

void sub_10051B53C(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  int v4;
  int v5;
  int *v6;
  int v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  NSObject *v15;
  uint64_t v16;
  void **v17;
  unsigned __int16 *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t **v26;
  int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t *v34;
  NSObject *v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  void **v39;
  NSObject *v40;
  uint64_t v41;
  void **v42;
  uint64_t **v43;
  int v44;
  char v45;
  BOOL v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t state64;
  void *__p[2];
  char v55;
  uint8_t buf[4];
  const char *v57;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (int *)(v2 + 1168);
  v4 = *(_DWORD *)(v2 + 1168);
  if (!v4)
  {
    notify_register_check("com.apple.bluetooth.WirelessSplitterOn", (int *)(v2 + 1168));
    v4 = *v3;
  }
  state64 = 0;
  notify_get_state(v4, &state64);
  v5 = state64 & 1;
  v6 = (int *)(v2 + 1172);
  v7 = *(_DWORD *)(v2 + 1172);
  if (v7 == -1)
  {
    notify_register_check("com.apple.bluetooth.GuestConnected", (int *)(v2 + 1172));
    v7 = *v6;
  }
  v52 = 0;
  notify_get_state(v7, &v52);
  v8 = v52;
  if (*(_BYTE *)(a1 + 50))
  {
    if (!*(_QWORD *)(v2 + 1112))
      goto LABEL_18;
    v9 = *(_QWORD *)(v2 + 1104);
    if (!v9)
      goto LABEL_18;
    v10 = *(unsigned __int16 *)(a1 + 48);
    v11 = v2 + 1104;
    do
    {
      v12 = *(unsigned __int16 *)(v9 + 32);
      v13 = v12 >= v10;
      if (v12 >= v10)
        v14 = (uint64_t *)v9;
      else
        v14 = (uint64_t *)(v9 + 8);
      if (v13)
        v11 = v9;
      v9 = *v14;
    }
    while (*v14);
    if (v11 == v2 + 1104 || v10 < *(unsigned __int16 *)(v11 + 32))
    {
LABEL_18:
      v15 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(_QWORD *)(a1 + 40);
        if (v16)
        {
          sub_10043E5F8(v16, __p);
          if (v55 >= 0)
            v17 = __p;
          else
            v17 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v57 = (const char *)v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Wireless Splitter Mode is enabled for device %{public}s", buf, 0xCu);
          if (v55 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v57 = "null";
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Wireless Splitter Mode is enabled for device %{public}s", buf, 0xCu);
        }
      }
      sub_10051BC34(v2, *(_QWORD *)(a1 + 40), *(_WORD *)(a1 + 48));
    }
    v37 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v38 = *(_QWORD *)(a1 + 40);
      if (v38)
      {
        sub_10043E5F8(v38, __p);
        if (v55 >= 0)
          v39 = __p;
        else
          v39 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v57 = (const char *)v39;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Wireless Splitter Mode is already enabled for device %{public}s", buf, 0xCu);
        if (v55 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 136446210;
        v57 = "null";
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Wireless Splitter Mode is already enabled for device %{public}s", buf, 0xCu);
      }
    }
    __p[0] = (void *)(a1 + 48);
    v43 = sub_1002BB704((uint64_t **)(v2 + 1096), (unsigned __int16 *)(a1 + 48), (uint64_t)&unk_100740F58, (_WORD **)__p);
    v44 = *(unsigned __int8 *)(a1 + 50);
    if (*((unsigned __int8 *)v43[5] + 20) != v44
      && !sub_10051BDFC((uint64_t)v43, *(_QWORD *)(a1 + 40), v44 != 0))
    {
      v45 = *(_BYTE *)(a1 + 50);
      __p[0] = (void *)(a1 + 48);
      *((_BYTE *)sub_1002BB704((uint64_t **)(v2 + 1096), (unsigned __int16 *)(a1 + 48), (uint64_t)&unk_100740F58, (_WORD **)__p)[5]+ 20) = v45;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 952))
      v46 = (v8 & 1) == 0;
    else
      v46 = 1;
    if (!v46)
    {
      v47 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Wireless Splitter aggregation enabled setting fGuestConnectedToken to disabled", (uint8_t *)__p, 2u);
      }
      v48 = 0;
LABEL_91:
      notify_set_state(*v6, v48);
      notify_post("com.apple.bluetooth.GuestConnected");
    }
  }
  else
  {
    v18 = (unsigned __int16 *)(a1 + 48);
    v19 = (uint64_t *)(v2 + 1104);
    v20 = *(_QWORD *)(v2 + 1104);
    if (v20)
    {
      v21 = *v18;
      v22 = v2 + 1104;
      do
      {
        v23 = *(unsigned __int16 *)(v20 + 32);
        v24 = v23 >= v21;
        if (v23 >= v21)
          v25 = (uint64_t *)v20;
        else
          v25 = (uint64_t *)(v20 + 8);
        if (v24)
          v22 = v20;
        v20 = *v25;
      }
      while (*v25);
      if ((uint64_t *)v22 != v19 && v21 >= *(unsigned __int16 *)(v22 + 32))
      {
        __p[0] = (void *)(a1 + 48);
        v26 = sub_1002BB704((uint64_t **)(v2 + 1096), (unsigned __int16 *)(a1 + 48), (uint64_t)&unk_100740F58, (_WORD **)__p);
        v27 = *(unsigned __int8 *)(a1 + 50);
        if (*((unsigned __int8 *)v26[5] + 20) != v27
          && !sub_10051BDFC((uint64_t)v26, *(_QWORD *)(a1 + 40), v27 != 0))
        {
          v28 = *(_BYTE *)(a1 + 50);
          __p[0] = (void *)(a1 + 48);
          *((_BYTE *)sub_1002BB704((uint64_t **)(v2 + 1096), (unsigned __int16 *)(a1 + 48), (uint64_t)&unk_100740F58, (_WORD **)__p)[5]+ 20) = v28;
        }
      }
    }
    sub_10044028C(*(_QWORD *)(a1 + 40), 0);
    v29 = *v19;
    if (!*v19)
      goto LABEL_50;
    v30 = *v18;
    v31 = v2 + 1104;
    do
    {
      v32 = *(unsigned __int16 *)(v29 + 32);
      v33 = v32 >= v30;
      if (v32 >= v30)
        v34 = (uint64_t *)v29;
      else
        v34 = (uint64_t *)(v29 + 8);
      if (v33)
        v31 = v29;
      v29 = *v34;
    }
    while (*v34);
    if ((uint64_t *)v31 != v19 && v30 >= *(unsigned __int16 *)(v31 + 32))
    {
      v40 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v41 = *(_QWORD *)(a1 + 40);
        if (v41)
        {
          sub_10043E5F8(v41, __p);
          if (v55 >= 0)
            v42 = __p;
          else
            v42 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v57 = (const char *)v42;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Wireless Splitter Mode is disabled for device %{public}s", buf, 0xCu);
          if (v55 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v57 = "null";
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Wireless Splitter Mode is disabled for device %{public}s", buf, 0xCu);
        }
      }
      std::string::assign((std::string *)(v2 + 1176), "WS_ERROR_DISCONNECTION_MODE_DISABLED");
      sub_1004402D0(*(_QWORD *)(a1 + 40), 0);
      sub_10051C090(v2, *(_WORD *)(a1 + 48));
    }
    else
    {
LABEL_50:
      std::string::assign((std::string *)(v2 + 1176), "WS_ERROR_DISCONNECTION_NO_DEVICE_FOR_HANDLE");
      sub_10051C1AC(v2);
      v35 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v36 = *v18;
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Wireless Splitter device does not exists with handle %d, it's already deleted", (uint8_t *)__p, 8u);
      }
    }
    v49 = *(unsigned __int8 *)(a1 + 50);
    if ((_DWORD)v49 != v5)
    {
      notify_set_state(*v3, v49);
      notify_post("com.apple.bluetooth.WirelessSplitterOn");
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 952))
      v50 = (v8 & 1) == 0;
    else
      v50 = 0;
    if (v50)
    {
      std::string::assign((std::string *)(v2 + 1176), "WS_ERROR_START_AGGREGATION_DISABLED");
      sub_10051C1AC(v2);
      v51 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Wireless Splitter aggregation disabled setting fGuestConnectedToken to enabled", (uint8_t *)__p, 2u);
      }
      v48 = 1;
      goto LABEL_91;
    }
  }
  sub_1000A1FAC(*(_QWORD *)(v2 + 208), 0, *(unsigned __int16 *)(a1 + 48));
}

void sub_10051BC34(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4;
  int v5;
  unsigned int __val[2];
  int v7;
  __int16 v8;

  v8 = a3;
  if (*(_QWORD *)(a1 + 1112))
    v4 = 4096;
  else
    v4 = 2048;
  sub_1004402D0(a2, v4);
  v7 = 0;
  *(_QWORD *)__val = 0;
  v5 = 0;
  if (a2)
    sub_100444BF0(a2, &v7, &__val[1], __val, &v5);
  operator new();
}

void sub_10051BDD8()
{
  operator delete();
}

uint64_t sub_10051BDFC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  _BOOL8 v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  _BYTE *v13;
  NSObject *v14;
  _BYTE *v15;
  char v17;
  _BYTE __p[12];
  char v19;
  _BYTE buf[12];
  __int16 v21;
  const char *v22;
  __int16 v23;
  _BYTE *v24;

  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100935BB0);
  v5 = sub_1004CD5FC((uint64_t)off_10097AA38, a2);
  if (v5)
  {
    v6 = v5;
    v17 = 0;
    sub_100043758(&v17);
    v7 = sub_10026B8E4(v6 + 400);
    v8 = sub_100156A54(v7, a3 ^ 1u);
    sub_10004339C(&v17);
    v9 = v8 != 0;
    v10 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v11 = "re-enabled";
      if (a3)
        v11 = "disabled";
      v12 = "successfully";
      if (v8)
        v12 = "not successfully";
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v12;
      if (v19 >= 0)
        v13 = __p;
      else
        v13 = *(_BYTE **)__p;
      v21 = 2080;
      v22 = v11;
      v23 = 2082;
      v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Wireless Splitter %s %s inband ringtone for phone call support for device %{public}s", buf, 0x20u);
      if (v19 < 0)
        operator delete(*(void **)__p);
    }
    sub_100043728(&v17);
  }
  else
  {
    v14 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      if (a2)
      {
        sub_10043E5F8(a2, buf);
        if (v23 >= 0)
          v15 = buf;
        else
          v15 = *(_BYTE **)buf;
        *(_DWORD *)__p = 136446210;
        *(_QWORD *)&__p[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Wireless Splitter looks like HFP Service for device %{public}s is not available", __p, 0xCu);
        if (SHIBYTE(v23) < 0)
          operator delete(*(void **)buf);
      }
      else
      {
        *(_DWORD *)__p = 136446210;
        *(_QWORD *)&__p[4] = "NULL";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Wireless Splitter looks like HFP Service for device %{public}s is not available", __p, 0xCu);
      }
    }
    return 1;
  }
  return v9;
}

void sub_10051C070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_10051C090(uint64_t a1, unsigned __int16 a2)
{
  NSObject *v3;
  uint64_t v4;
  unsigned __int16 v5;
  uint8_t buf[8];
  __int16 v7;
  uint64_t v8;

  v5 = a2;
  sub_100519AF8(a1, 0);
  sub_10051C1AC(a1);
  *(_QWORD *)buf = &v5;
  if (sub_1002BB704((uint64_t **)(a1 + 1096), &v5, (uint64_t)&unk_100740F58, (_WORD **)buf)[5])
    operator delete();
  sub_100394984(a1 + 1096, &v5);
  *(_BYTE *)(a1 + 1152) = 0;
  v3 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 1112);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v5;
    v7 = 2048;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Wireless Splitter destroying aggregate device with handle %hu fWirelessSplitterA2dpDevices devices %lu left", buf, 0x12u);
  }
}

void sub_10051C1AC(uint64_t a1)
{
  uint64_t v2;
  CFAbsoluteTime Current;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  const std::string::value_type *v15;
  const std::string::value_type *v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  _BYTE v41[26];
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  _QWORD *v51;
  __int16 v52;
  _QWORD *v53;
  __int16 v54;
  _QWORD *v55;
  __int16 v56;
  _QWORD *v57;
  _QWORD v58[2];

  v2 = sub_100038E50();
  sub_1002B43D4(v2 + 728, a1 + 32);
  **(_BYTE **)(a1 + 208) = 1;
  if (*(_QWORD *)(a1 + 1120))
  {
    Current = CFAbsoluteTimeGetCurrent();
    v4 = *(_QWORD *)(a1 + 1120);
    v5 = *(_QWORD *)v4;
    LODWORD(v5) = *(_DWORD *)(v4 + 32);
    *(_DWORD *)(v4 + 32) = (Current - *(double *)v4 + (double)v5);
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_100935C50);
    v6 = *(_QWORD *)(a1 + 1120);
    *(_DWORD *)(v6 + 36) += *((_DWORD *)off_100977B38 + 52);
    if (*(char *)(v6 + 103) >= 0)
      v7 = *(unsigned __int8 *)(v6 + 103);
    else
      v7 = *(_QWORD *)(v6 + 88);
    memset(v41, 0, 24);
    v8 = v41;
    sub_1002D6774((uint64_t)v41, v7 + 1);
    if (v41[23] < 0)
      v8 = *(_BYTE **)v41;
    if (v7)
    {
      v11 = *(char **)(v6 + 80);
      v10 = (char *)(v6 + 80);
      v9 = v11;
      if (v10[23] >= 0)
        v12 = v10;
      else
        v12 = v9;
      memmove(v8, v12, v7);
    }
    *(_WORD *)&v8[v7] = 45;
    v13 = *(_QWORD *)(a1 + 1120);
    v16 = *(const std::string::value_type **)(v13 + 104);
    v14 = v13 + 104;
    v15 = v16;
    v17 = *(char *)(v14 + 23);
    if (v17 >= 0)
      v18 = (const std::string::value_type *)v14;
    else
      v18 = v15;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(v14 + 23);
    else
      v19 = *(_QWORD *)(v14 + 8);
    v20 = std::string::append((std::string *)v41, v18, v19);
    v21 = v20->__r_.__value_.__r.__words[0];
    v58[0] = v20->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v58 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v23 = *(_QWORD *)(a1 + 1120);
    if (*(char *)(v23 + 151) < 0)
      operator delete(*(void **)(v23 + 128));
    v24 = v58[0];
    *(_QWORD *)(v23 + 128) = v21;
    *(_QWORD *)(v23 + 136) = v24;
    *(_QWORD *)(v23 + 143) = *(_QWORD *)((char *)v58 + 7);
    *(_BYTE *)(v23 + 151) = v22;
    if ((v41[23] & 0x80000000) != 0)
      operator delete(*(void **)v41);
    std::string::operator=((std::string *)(*(_QWORD *)(a1 + 1120) + 152), (const std::string *)(a1 + 1176));
    v25 = sub_100065478();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 168))(v25, *(_QWORD *)(a1 + 1120));
    v26 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v27 = *(_QWORD *)(a1 + 1120);
      v28 = (_QWORD *)(v27 + 80);
      if (*(char *)(v27 + 103) < 0)
        v28 = (_QWORD *)*v28;
      v29 = (_QWORD *)(v27 + 104);
      if (*(char *)(v27 + 127) < 0)
        v29 = (_QWORD *)*v29;
      v30 = (_QWORD *)(v27 + 128);
      if (*(char *)(v27 + 151) < 0)
        v30 = (_QWORD *)*v30;
      v32 = *(_DWORD *)(v27 + 32);
      v31 = *(_DWORD *)(v27 + 36);
      v33 = *(_DWORD *)(v27 + 40);
      v34 = *(_DWORD *)(v27 + 44);
      v36 = *(_DWORD *)(v27 + 48);
      v35 = *(_DWORD *)(v27 + 52);
      v38 = *(_DWORD *)(v27 + 68);
      v37 = *(_DWORD *)(v27 + 72);
      v39 = (_QWORD *)(v27 + 152);
      if (*(char *)(v27 + 175) < 0)
        v39 = (_QWORD *)*v39;
      *(_DWORD *)v41 = 67111938;
      *(_DWORD *)&v41[4] = v32;
      *(_WORD *)&v41[8] = 1024;
      *(_DWORD *)&v41[10] = v31;
      *(_WORD *)&v41[14] = 1024;
      *(_DWORD *)&v41[16] = v33;
      *(_WORD *)&v41[20] = 1024;
      *(_DWORD *)&v41[22] = v34;
      v42 = 1024;
      v43 = v36;
      v44 = 1024;
      v45 = v35;
      v46 = 1024;
      v47 = v38;
      v48 = 1024;
      v49 = v37;
      v50 = 2080;
      v51 = v28;
      v52 = 2080;
      v53 = v29;
      v54 = 2080;
      v55 = v30;
      v56 = 2080;
      v57 = v39;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Wireless Splitter submitting following metric: fTotalDurationSharingSession:%us fTotalSiriActivationDuringSession:%u Sessions fTotalIncomingCallsDuringSessio:%u Calls fTotalOutgoingCallsDuringSession:%u Calls fTotalMusicPlaybackDuration:%us fTotalVideoPlaybackDuration:%us fSharingSessionStart:%u [0:Owner,1:Prox,2:Boop,3:ReConn], fSharingSessionStop:%u, fOwnerWxProductID %s, fGuestWxProductID %s, fOwnerGuestWxProductID %s fErrorCode %s", v41, 0x5Au);
    }
    v40 = *(_QWORD *)(a1 + 1120);
    if (v40)
    {
      if (*(char *)(v40 + 175) < 0)
        operator delete(*(void **)(v40 + 152));
      if (*(char *)(v40 + 151) < 0)
        operator delete(*(void **)(v40 + 128));
      if (*(char *)(v40 + 127) < 0)
        operator delete(*(void **)(v40 + 104));
      if (*(char *)(v40 + 103) < 0)
        operator delete(*(void **)(v40 + 80));
      operator delete();
    }
    *(_QWORD *)(a1 + 1120) = 0;
  }
}

void sub_10051C504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10051C528(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD block[6];
  __int16 v7;
  char v8;

  v4 = a1 - 24;
  v5 = *(NSObject **)(a1 + 224);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051B53C;
  block[3] = &unk_100922690;
  v8 = a4;
  v7 = a3;
  block[4] = v4;
  block[5] = a2;
  dispatch_async(v5, block);
}

uint64_t sub_10051C588(uint64_t a1, int a2)
{
  return sub_1000A4934(*(_QWORD *)(a1 + 208), a2);
}

uint64_t sub_10051C590(uint64_t a1, int a2)
{
  return sub_1000A6DC4(*(_QWORD *)(a1 + 208), a2);
}

void sub_10051C598(uint64_t a1, __int16 a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;
  char v6;

  v3 = *(NSObject **)(a1 + 248);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051C5F8;
  v4[3] = &unk_10092CB18;
  v4[4] = a1;
  v5 = a2;
  v6 = a3;
  dispatch_async(v3, v4);
}

void sub_10051C5F8(uint64_t a1)
{
  sub_1000A45B0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208), *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
}

void sub_10051C610(uint64_t a1, __int16 a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  __int16 v5;
  char v6;

  v3 = *(NSObject **)(a1 + 224);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051C5F8;
  v4[3] = &unk_10092CB18;
  v4[4] = a1 - 24;
  v5 = a2;
  v6 = a3;
  dispatch_async(v3, v4);
}

uint64_t sub_10051C674(uint64_t a1, int a2)
{
  return sub_1000A485C(*(_QWORD *)(a1 + 208), a2);
}

void sub_10051C67C(uint64_t a1, uint64_t a2, __int16 a3)
{
  NSObject *v3;
  _QWORD block[6];
  __int16 v5;

  v3 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051C6D8;
  block[3] = &unk_1009186D0;
  block[4] = a1;
  block[5] = a2;
  v5 = a3;
  dispatch_async(v3, block);
}

void sub_10051C6D8(uint64_t a1)
{
  sub_1000A7128(*(_BYTE **)(*(_QWORD *)(a1 + 32) + 208), *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
}

void sub_10051C6EC(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  _QWORD block[6];
  int v5;

  v3 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051C748;
  block[3] = &unk_1009180B0;
  block[4] = a1;
  block[5] = a2;
  v5 = a3;
  dispatch_async(v3, block);
}

uint64_t *sub_10051C748(uint64_t *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t *v7;

  v1 = result[4];
  v2 = *(_QWORD **)(v1 + 192);
  if (v2)
  {
    v3 = result;
    result = (uint64_t *)(v1 + 184);
    v4 = v3[5];
    do
    {
      v5 = v2[4];
      if (v4 >= v5)
      {
        if (v5 >= v4)
        {
          v6 = *((_DWORD *)v3 + 12);
          v7 = v3 + 5;
          result = sub_10002252C((uint64_t **)result, (unint64_t *)v3 + 5, (uint64_t)&unk_100740F58, &v7);
          *(_DWORD *)(result[5] + 104) = v6;
          return result;
        }
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_10051C7CC(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051C860;
  block[3] = &unk_100918690;
  block[5] = a1;
  block[6] = a2;
  block[4] = &v6;
  dispatch_sync(v2, block);
  v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t *sub_10051C860(uint64_t *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;

  v1 = result[5];
  v2 = *(_QWORD **)(v1 + 192);
  if (v2)
  {
    v3 = result;
    result = (uint64_t *)(v1 + 184);
    v4 = v3[6];
    do
    {
      v5 = v2[4];
      if (v4 >= v5)
      {
        if (v5 >= v4)
        {
          v6 = v3 + 6;
          result = sub_10002252C((uint64_t **)result, (unint64_t *)v3 + 6, (uint64_t)&unk_100740F58, &v6);
          *(_DWORD *)(*(_QWORD *)(v3[4] + 8) + 24) = *(_DWORD *)(result[5] + 104);
          return result;
        }
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

BOOL sub_10051C8EC(uint64_t a1, unint64_t a2)
{
  return sub_1000A4A1C(*(_QWORD *)(a1 + 208), a2);
}

uint64_t sub_10051C8F4(uint64_t a1, uint64_t a2)
{
  return sub_1000A6E84(*(_QWORD *)(a1 + 208), a2);
}

void sub_10051C8FC(uint64_t a1, __int16 a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[6];
  __int16 v5;

  v3 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051C958;
  block[3] = &unk_1009186D0;
  block[4] = a1;
  block[5] = a3;
  v5 = a2;
  dispatch_async(v3, block);
}

void sub_10051C958(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  tm *v16;
  NSArray *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  const char *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  void *v35;
  _QWORD v36[4];
  id v37;
  uint64_t v38;
  int v39;
  time_t v40;
  unint64_t v41;
  _BYTE v42[16];
  char v43[16];
  __int128 v44;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (unint64_t *)(a1 + 40);
  kdebug_trace(730022152, *(_QWORD *)(a1 + 40), 0, 0, 0);
  v4 = sub_10051CDE8(v2, *(unsigned __int16 *)(a1 + 48));
  v41 = v4;
  if (v4)
  {
    v5 = *(_QWORD **)(v2 + 192);
    if (v5)
    {
      v6 = (uint64_t **)(v2 + 184);
      v7 = v2 + 192;
      do
      {
        v8 = v5[4];
        v9 = v8 >= v4;
        if (v8 >= v4)
          v10 = v5;
        else
          v10 = v5 + 1;
        if (v9)
          v7 = (uint64_t)v5;
        v5 = (_QWORD *)*v10;
      }
      while (*v10);
      if (v7 != v2 + 192 && v4 >= *(_QWORD *)(v7 + 32))
      {
        *(_QWORD *)v43 = &v41;
        if (*(_QWORD *)sub_10002252C(v6, &v41, (uint64_t)&unk_100740F58, (uint64_t **)v43)[5])
        {
          *(_QWORD *)v43 = &v41;
          *(_BYTE *)(*(_QWORD *)sub_10002252C(v6, &v41, (uint64_t)&unk_100740F58, (uint64_t **)v43)[5] + 112) = 1;
          v11 = mach_absolute_time();
          *(_QWORD *)v43 = &v41;
          *(_QWORD *)(*(_QWORD *)sub_10002252C(v6, &v41, (uint64_t)&unk_100740F58, (uint64_t **)v43)[5] + 120) = v11;
          *(_QWORD *)v43 = &v41;
          v12 = sub_10002252C(v6, &v41, (uint64_t)&unk_100740F58, (uint64_t **)v43);
          v13 = *v3;
          if (*v3 >= 0x33)
          {
            v14 = *(_QWORD *)v12[5];
            v15 = *(_QWORD *)(v14 + 504);
            ++*(_QWORD *)(v14 + 496);
            if (v15 < v13)
              *(_QWORD *)(v14 + 504) = v13;
          }
        }
        *(_OWORD *)v43 = 0u;
        v44 = 0u;
        v40 = time(0);
        v16 = localtime(&v40);
        strftime(v43, 0x20uLL, "%Y_%m_%d_%H:%M:%S", v16);
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
          sub_1006FE9A0();
        if (*v3 >= 0x1F && *(_BYTE *)(v2 + 990) && *(_QWORD *)(v2 + 992) && !*(_BYTE *)(v2 + 991))
        {
          *(_BYTE *)(v2 + 991) = 1;
          v17 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
          v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
          v19 = objc_alloc((Class)NSString);
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", 0));
          v21 = objc_msgSend(v19, "initWithFormat:", CFSTR("%@/Logs/Bluetooth"), v20);

          v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Overwait_A2DP_%s.tailspin"), v43));
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "stringByAppendingPathComponent:", v22));
          v24 = objc_msgSend(v23, "copy");

          v25 = objc_retainAutorelease(v24);
          v26 = (const char *)objc_msgSend(v25, "cStringUsingEncoding:", 4);
          v27 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
            sub_1006FE938((uint64_t)v25, v27, v28);
          if (v26)
          {
            v29 = open(v26, 1537, 434);
            if ((v29 & 0x80000000) == 0)
            {
              v30 = *(_QWORD *)(v2 + 248);
              v36[0] = _NSConcreteStackBlock;
              v36[1] = 3221225472;
              v36[2] = sub_10051CFAC;
              v36[3] = &unk_100935A20;
              v38 = v2;
              v31 = v21;
              v37 = v31;
              v39 = v29;
              sub_10051CE54(v29, v30, v36);

              return;
            }
            v34 = qword_1009997E0;
            if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
            {
              v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v29));
              sub_1006FE8EC(v35, (uint64_t)v42, v34);
            }
          }
          else
          {
            v32 = qword_1009997E0;
            if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
              sub_1006FE884((uint64_t)v21, v32, v33);
          }

        }
      }
    }
  }
}

void sub_10051CD7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_10051CDE8(uint64_t a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;
  int v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = *(_QWORD **)(a1 + 184);
  v3 = (_QWORD *)(a1 + 192);
  if (v2 == (_QWORD *)(a1 + 192))
    return 0;
  result = 0;
  do
  {
    v5 = *(unsigned __int16 *)(v2[5] + 84);
    v6 = v5 != a2 || v5 == 0;
    if (!v6)
      result = v2[4];
    v7 = (_QWORD *)v2[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v2[2];
        v6 = *v8 == (_QWORD)v2;
        v2 = v8;
      }
      while (!v6);
    }
    v2 = v8;
  }
  while (v8 != v3);
  return result;
}

void sub_10051CE54(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;

  v5 = a3;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v6 = off_1009932E8;
  v13 = off_1009932E8;
  if (!off_1009932E8)
  {
    v7 = sub_10052A708();
    v6 = dlsym(v7, "tailspin_dump_output_with_options");
    v11[3] = (uint64_t)v6;
    off_1009932E8 = v6;
  }
  _Block_object_dispose(&v10, 8);
  if (v6)
  {
    ((void (*)(uint64_t, _UNKNOWN **, uint64_t, id))v6)(a1, &off_1009610C8, a2, v5);

  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "int BT::soft_tailspin_dump_output_with_options(int, NSDictionary * _Nullable __strong, dispatch_queue_t _Nullable, void (^ _Nullable __strong)(BOOL))"));
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("AudioLinkManager.mm"), 131, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_10051CF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_10051CFAC(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  id v7;
  int v9;
  const char *v10;
  __int16 v11;
  id v12;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v6 = "successfully";
    else
      v6 = "not successfully";
    v7 = objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String");
    v9 = 136315394;
    v10 = v6;
    v11 = 2080;
    v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Captured tailspin %s at %s", (uint8_t *)&v9, 0x16u);
  }
  *(_BYTE *)(v4 + 991) = 0;
  return close(*(_DWORD *)(a1 + 48));
}

void sub_10051D098(uint64_t a1, __int16 a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[6];
  __int16 v5;

  v3 = *(NSObject **)(a1 + 224);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051C958;
  block[3] = &unk_1009186D0;
  block[4] = a1 - 24;
  block[5] = a3;
  v5 = a2;
  dispatch_async(v3, block);
}

void sub_10051D0F8(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  NSObject *v5;
  _QWORD v6[6];
  int v7;
  int v8;
  int v9;

  v5 = *(NSObject **)(a1 + 248);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10051D158;
  v6[3] = &unk_10092A420;
  v7 = a4;
  v8 = a3;
  v6[4] = a1;
  v6[5] = a2;
  v9 = a5;
  dispatch_async(v5, v6);
}

uint64_t sub_10051D158(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  int *v7;
  unsigned __int8 *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  NSObject *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  int *v22;
  uint8_t v23[16];
  uint8_t buf[16];

  v1 = result;
  v2 = *(_QWORD *)(result + 32);
  v3 = *(_DWORD *)(result + 48);
  if (v3 <= 100)
  {
    if (v3 != 11)
    {
      if (v3 == 12)
      {
        v4 = *(_DWORD *)(result + 52);
        if (v4 == 1)
          goto LABEL_10;
        if (v4 == 16 && *(_BYTE *)(*(_QWORD *)(result + 40) + 952))
        {
          v5 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v23 = 0;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Wireless Splitter guest device disconnected setting fGuestConnectedToken to disabled", v23, 2u);
          }
          std::string::assign((std::string *)(v2 + 1176), "WS_ERROR_DISCONNECTION_GUEST_DISCONNECTED");
          sub_10051C1AC(v2);
          notify_set_state(*(_DWORD *)(v2 + 1172), 0);
          notify_post("com.apple.bluetooth.GuestConnected");
          if (*(_DWORD *)(v1 + 52) == 1)
          {
LABEL_10:
            v6 = *(_DWORD *)(v2 + 1040);
            if (v6 == -1)
            {
              v7 = (int *)(v2 + 1040);
              notify_register_check("com.apple.bluetooth.SmartRoutingDisconnectReason", v7);
              v6 = *v7;
            }
            v8 = *(unsigned __int8 **)(v1 + 40);
            notify_set_state(v6, ((unint64_t)v8[128] << 40) | ((unint64_t)v8[129] << 32) | ((unint64_t)v8[130] << 24) | ((unint64_t)v8[131] << 16) | ((unint64_t)v8[132] << 8) | v8[133] | ((unint64_t)*(unsigned int *)(v1 + 56) << 48));
            notify_post("com.apple.bluetooth.SmartRoutingDisconnectReason");
          }
        }
        result = *(_QWORD *)(v1 + 40);
        if (*(_BYTE *)(result + 1363) != 1)
          return sub_10045596C(result, 1);
      }
      return result;
    }
    v9 = *(_DWORD *)(result + 52);
    if (v9 == 1)
    {
      if (*(_QWORD *)(v2 + 1112) < 2uLL || (v10 = *(_QWORD **)(v2 + 1096), v10 == (_QWORD *)(v2 + 1104)))
      {
        v9 = 1;
LABEL_52:
        v18 = *(unsigned __int8 **)(v1 + 40);
        v19 = v9 != 1 || v18 == 0;
        if (!v19)
        {
          v20 = ((unint64_t)v18[128] << 40) | ((unint64_t)v18[129] << 32) | ((unint64_t)v18[130] << 24) | ((unint64_t)v18[131] << 16) | ((unint64_t)v18[132] << 8) | v18[133];
          v21 = *(_DWORD *)(v2 + 1040);
          if (v21 == -1)
          {
            v22 = (int *)(v2 + 1040);
            notify_register_check("com.apple.bluetooth.SmartRoutingDisconnectReason", v22);
            v21 = *v22;
          }
          notify_set_state(v21, v20);
          return notify_post("com.apple.bluetooth.SmartRoutingDisconnectReason");
        }
        return result;
      }
      do
      {
        v11 = *(_QWORD *)(v1 + 40);
        if (v11)
        {
          v12 = (unsigned __int8 *)v10[5];
          if (*((_QWORD *)v12 + 1) == v11 + 128)
          {
            v13 = *v12;
            if (v12[20] != v13)
            {
              result = sub_10051BDFC(result, v11, v13 != 0);
              v12[20] = *v12;
            }
          }
        }
        v14 = (_QWORD *)v10[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v10[2];
            v19 = *v15 == (_QWORD)v10;
            v10 = v15;
          }
          while (!v19);
        }
        v10 = v15;
      }
      while (v15 != (_QWORD *)(v2 + 1104));
      v9 = *(_DWORD *)(v1 + 52);
    }
    if (v9 == 16)
    {
      if (*(_BYTE *)(*(_QWORD *)(v1 + 40) + 952) && *(_QWORD *)(v2 + 1112) != 2)
      {
        v16 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Wireless Splitter connected guest device setting fGuestConnectedToken to enabled", buf, 2u);
        }
        notify_set_state(*(_DWORD *)(v2 + 1172), 1uLL);
        return notify_post("com.apple.bluetooth.GuestConnected");
      }
      return result;
    }
    goto LABEL_52;
  }
  if (v3 == 101)
  {
    if (*(_QWORD *)(v2 + 1112) >= 2uLL && *(_QWORD *)(v2 + 1120))
    {
      if (qword_10097AA40 != -1)
        dispatch_once(&qword_10097AA40, &stru_100935BB0);
      result = sub_1004CD5FC((uint64_t)off_10097AA38, *(_QWORD *)(v1 + 40));
      if (result)
      {
        result = sub_10026BACC(result + 400);
        v17 = *(_QWORD *)(v2 + 1120);
        if ((_DWORD)result)
          ++*(_DWORD *)(v17 + 40);
        else
          ++*(_DWORD *)(v17 + 44);
      }
    }
  }
  else if (v3 == 103 && *(_QWORD *)(v2 + 1112) >= 2uLL && *(_QWORD *)(v2 + 1120))
  {
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100935BB0);
    result = sub_1004CD5FC((uint64_t)off_10097AA38, *(_QWORD *)(v1 + 40));
    if (result)
    {
      result = sub_10026B98C(result + 400);
      if ((_DWORD)result)
        ++*(_DWORD *)(*(_QWORD *)(v2 + 1120) + 36);
    }
  }
  return result;
}

void sub_10051D588(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  NSObject *v5;
  _QWORD v6[6];
  int v7;
  int v8;
  int v9;

  v5 = *(NSObject **)(a1 + 208);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10051D158;
  v6[3] = &unk_10092A420;
  v7 = a4;
  v8 = a3;
  v6[4] = a1 - 40;
  v6[5] = a2;
  v9 = a5;
  dispatch_async(v5, v6);
}

void sub_10051D5EC(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051D644;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_async(v1, block);
}

void sub_10051D644(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  BOOL v13;
  NSObject *v14;
  _BYTE buf[24];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int16 **)(v1 + 1096);
  v3 = (unsigned __int16 *)(v1 + 1104);
  if (v2 != (unsigned __int16 *)(v1 + 1104))
  {
    do
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_100935C90);
      v4 = *(_QWORD *)(*((_QWORD *)v2 + 5) + 8);
      v5 = *(_WORD *)(v4 + 4);
      *(_DWORD *)buf = *(_DWORD *)v4;
      *(_WORD *)&buf[4] = v5;
      v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
      if (v6)
      {
        v7 = v6;
        sub_10051BDFC(v6, v6, 0);
        v8 = *(_QWORD *)(v1 + 1120);
        if (v8 && *(_BYTE *)(v7 + 952))
          *(_DWORD *)(v8 + 72) = *(_DWORD *)(v7 + 972);
        sub_10044028C(v7, 0);
      }
      sub_10051C1AC(v1);
      *(_QWORD *)buf = v2 + 16;
      if (sub_1002BB704((uint64_t **)(v1 + 1096), v2 + 16, (uint64_t)&unk_100740F58, (_WORD **)buf)[5])
        operator delete();
      v9 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v10 = v2[16];
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Wireless Splitter destroying aggregate device with handle %hu", buf, 8u);
      }
      v11 = (unsigned __int16 *)*((_QWORD *)v2 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(unsigned __int16 **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (unsigned __int16 *)*((_QWORD *)v2 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v2;
          v2 = v12;
        }
        while (!v13);
      }
      v2 = v12;
    }
    while (v12 != v3);
  }
  *(_BYTE *)(v1 + 1152) = 0;
  sub_10001A82C(v1 + 1096, *(_QWORD **)(v1 + 1104));
  *(_QWORD *)(v1 + 1096) = v3;
  *(_OWORD *)(v1 + 1104) = 0u;
  v14 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Wireless Splitter size of fWirelessSplitterA2dpDevices %lu ", buf, 0xCu);
  }
}

void sub_10051D8A4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = a1 - 24;
  v2 = *(NSObject **)(a1 + 224);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051D644;
  block[3] = &unk_100917378;
  block[4] = v1;
  dispatch_async(v2, block);
}

void sub_10051D8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  v3 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051D958;
  block[3] = &unk_1009210D8;
  block[4] = a1;
  block[5] = a2;
  block[6] = a3;
  dispatch_async(v3, block);
}

uint64_t *sub_10051D958(uint64_t *result)
{
  unint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t **v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  uint8_t buf[8];

  v2 = (unint64_t *)(result + 5);
  v1 = result[5];
  if (v1)
  {
    v3 = result[4];
    v6 = *(_QWORD **)(v3 + 192);
    v4 = v3 + 192;
    v5 = v6;
    if (v6)
    {
      v7 = result;
      v8 = (uint64_t **)(v4 - 8);
      v9 = (_QWORD *)v4;
      do
      {
        v10 = v5[4];
        v11 = v10 >= v1;
        if (v10 >= v1)
          v12 = v5;
        else
          v12 = v5 + 1;
        if (v11)
          v9 = v5;
        v5 = (_QWORD *)*v12;
      }
      while (*v12);
      if (v9 != (_QWORD *)v4 && v1 >= v9[4])
      {
        *(_QWORD *)buf = result + 5;
        if (*(_BYTE *)(sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 56)
          || (*(_QWORD *)buf = v2,
              *(_DWORD *)(sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 64) == 1))
        {
          *(_QWORD *)buf = v2;
          *(_BYTE *)(sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 70) = 1;
        }
        *(_QWORD *)buf = v2;
        result = sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf);
        if (*(_QWORD *)result[5])
        {
          *(_QWORD *)buf = v2;
          v13 = sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf);
          ++*(_DWORD *)(*(_QWORD *)v13[5] + 316);
          *(_QWORD *)buf = v2;
          result = sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf);
          if (*(_QWORD *)(*(_QWORD *)result[5] + 80) <= (unint64_t)v7[6])
          {
            *(_QWORD *)buf = v2;
            *(_QWORD *)(*(_QWORD *)sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 80) = v7[6] + 60000000;
            v15 = 0;
            sub_1000438A4();
            if (sub_100331480())
            {
              *(_QWORD *)buf = v2;
              v15 = *(_BYTE *)(*(_QWORD *)sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 388);
            }
            else
            {
              v14 = sub_1000438A4();
              (*(void (**)(uint64_t, unint64_t, char *))(*(_QWORD *)v14 + 320))(v14, *v2 + 128, &v15);
            }
            *(_QWORD *)buf = v2;
            sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf);
            sub_10051DE30();
          }
        }
      }
    }
  }
  return result;
}

void sub_10051DE30()
{
  operator new();
}

float sub_10051DF38(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  float result;
  float v5;
  float v6;

  v3 = (unint64_t)*(unsigned int *)(a1 + 264) * a2 / *(unsigned int *)(a1 + 268) / 0x3E8;
  if (!a3)
  {
    v5 = (float)v3;
    v6 = 1000000.0;
    return v5 / v6;
  }
  if (a3 == 1)
  {
    v5 = (float)v3;
    v6 = 1000.0;
    return v5 / v6;
  }
  result = 0.0;
  if (a3 == 2)
    return (float)v3;
  return result;
}

void sub_10051DFA8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v4;
  unsigned __int16 **v5;
  int v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  size_t v11;
  std::string *p_p;
  const void *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  char v19;
  int v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  const std::string::value_type *v25;
  std::string::size_type v26;
  _BYTE *v27;
  std::string __p;
  __int128 v29;
  unsigned __int8 v30;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_100091AE8((_QWORD *)a2, "Audio");
  v4 = *(_BYTE **)(a1 + 208);
  if (v4[8])
  {
    std::string::assign((std::string *)a2, "Video");
    v4 = *(_BYTE **)(a1 + 208);
  }
  if (v4[7])
  {
    std::string::assign((std::string *)a2, "Audio");
    v4 = *(_BYTE **)(a1 + 208);
  }
  if (v4[5])
  {
    std::string::assign((std::string *)a2, "Game");
    v4 = *(_BYTE **)(a1 + 208);
  }
  if (v4[3])
  {
    std::string::assign((std::string *)a2, "VoiceOver");
    v4 = *(_BYTE **)(a1 + 208);
  }
  if (v4[2])
    std::string::assign((std::string *)a2, "GarageBand");
  v5 = (unsigned __int16 **)(a1 + 1072);
  v6 = *(unsigned __int8 *)(a1 + 1095);
  if ((*(char *)(a1 + 1095) & 0x80000000) == 0)
  {
    v7 = (unsigned __int16 *)(a1 + 1072);
    if (v6 != 3)
      goto LABEL_20;
LABEL_16:
    v8 = *v7;
    v9 = *((unsigned __int8 *)v7 + 2);
    if (v8 == 26191 && v9 == 102)
      goto LABEL_40;
    goto LABEL_20;
  }
  if (*(_QWORD *)(a1 + 1080) == 3)
  {
    v7 = *v5;
    goto LABEL_16;
  }
LABEL_20:
  if ((v6 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 1095);
  else
    v11 = *(_QWORD *)(a1 + 1080);
  memset(&__p, 0, sizeof(__p));
  p_p = &__p;
  sub_1002D6774((uint64_t)&__p, v11 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if (*(char *)(a1 + 1095) >= 0)
      v13 = (const void *)(a1 + 1072);
    else
      v13 = *(const void **)(a1 + 1072);
    memmove(p_p, v13, v11);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v11) = 32;
  v14 = *(char *)(a2 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)a2;
  else
    v15 = *(const std::string::value_type **)a2;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a2 + 23);
  else
    v16 = *(_QWORD *)(a2 + 8);
  v17 = std::string::append(&__p, v15, v16);
  v18 = v17->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v29 = v17->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v29 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
  v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v29;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)&v29 + 7);
  *(_BYTE *)(a2 + 23) = v19;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_40:
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 208) + 5))
    return;
  memset(&__p, 0, sizeof(__p));
  sub_100091AE8(&__p, "Game");
  v20 = *(char *)(a1 + 1095);
  if (v20 < 0)
  {
    if (*(_QWORD *)(a1 + 1080) != 3)
      goto LABEL_50;
    v21 = *v5;
  }
  else
  {
    v21 = (unsigned __int16 *)(a1 + 1072);
    if (v20 != 3)
      goto LABEL_50;
  }
  v22 = *v21;
  v23 = *((unsigned __int8 *)v21 + 2);
  if (v22 != 26191 || v23 != 102)
  {
LABEL_50:
    std::operator+<char>(&v29, " + ", a1 + 1072);
    if ((v30 & 0x80u) == 0)
      v25 = (const std::string::value_type *)&v29;
    else
      v25 = (const std::string::value_type *)v29;
    if ((v30 & 0x80u) == 0)
      v26 = v30;
    else
      v26 = *((_QWORD *)&v29 + 1);
    std::string::append(&__p, v25, v26);
    if ((char)v30 < 0)
      operator delete((void *)v29);
  }
  v27 = *(_BYTE **)(a1 + 208);
  if (v27[7])
  {
    std::string::append(&__p, " + Audio");
    v27 = *(_BYTE **)(a1 + 208);
  }
  if (v27[8])
  {
    std::string::append(&__p, " + Video");
    v27 = *(_BYTE **)(a1 + 208);
  }
  if (v27[2])
  {
    std::string::append(&__p, " + GarageBand");
    v27 = *(_BYTE **)(a1 + 208);
  }
  if (v27[3])
    std::string::append(&__p, " + VoiceOver");
  std::string::operator=((std::string *)a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_10051E318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void sub_10051E374(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  _QWORD block[6];
  int v5;

  v3 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051E3D0;
  block[3] = &unk_1009180B0;
  v5 = a3;
  block[4] = a1;
  block[5] = a2;
  dispatch_async(v3, block);
}

uint64_t *sub_10051E3D0(uint64_t a1)
{
  int v2;
  uint64_t *v3;

  v2 = *(_DWORD *)(a1 + 48);
  v3 = *(uint64_t **)(a1 + 32);
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100935B70);
  *((_DWORD *)off_100977A90 + 56) = v2;
  *((_QWORD *)off_100977A90 + 22) = 0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
    sub_1006FEA0C();
  sub_100516DC0((uint64_t)v3, *(_QWORD *)(a1 + 40), 0);
  return sub_10050EB98(v3, *(_QWORD *)(a1 + 40));
}

uint64_t sub_10051E484(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = _os_feature_enabled_impl("BluetoothFeatures", "AudioQualityMonitor");
  if ((_DWORD)result)
  {
    v4 = sub_100442118(a2, 12);
    if ((v4 & 1) != 0)
      return notify_post("com.apple.bluetooth.audioQuality");
    result = sub_1005172B0(v4, a2);
    if ((_DWORD)result)
      return notify_post("com.apple.bluetooth.audioQuality");
  }
  return result;
}

uint64_t sub_10051E4E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6)
{
  NSObject *v6;
  _QWORD block[8];
  int v9;
  char v10;

  v6 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051E550;
  block[3] = &unk_100935A40;
  block[4] = a1;
  block[5] = a2;
  v9 = a6;
  v10 = a4;
  block[6] = a3;
  block[7] = a5;
  dispatch_async(v6, block);
  return 0;
}

void sub_10051E550(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  NSObject *v11;
  const char *v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  NSObject *v20;
  const char *v21;
  _BYTE buf[18];

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100935C90);
  v3 = sub_10006D488((uint64_t)off_1009778E0, *(_QWORD *)(a1 + 40), 0);
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_100935C50);
  v4 = *(_DWORD *)(a1 + 64);
  if (!*(_BYTE *)(a1 + 68))
  {
    v16 = *(_QWORD *)(v2 + 888);
    v7 = *(std::__shared_weak_count **)(v2 + 896);
    *(_QWORD *)buf = v16;
    *(_QWORD *)&buf[8] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    if (v16)
    {
      if ((v4 - 1) <= 1)
        sub_1002D8B88(v16, v3, 0, *(_DWORD *)(a1 + 64));
      sub_100069060(v16 + 128, *(_QWORD *)(a1 + 56));
      v10 = sub_10051EA20(v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
      if (!v7)
        goto LABEL_36;
    }
    else
    {
      v10 = 0;
      if (!v7)
        goto LABEL_36;
    }
    v19 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v19);
    while (__stlxr(v15 - 1, v19));
LABEL_34:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    goto LABEL_36;
  }
  v5 = *((unsigned __int8 *)off_100977B38 + 197);
  if (!sub_10051E888(v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)))
  {
    v10 = 0;
    goto LABEL_36;
  }
  v6 = *(_QWORD *)(v2 + 888);
  v7 = *(std::__shared_weak_count **)(v2 + 896);
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = v6 != 0;
  if (v6)
  {
    sub_1002D9DD4(v6, *(_QWORD *)(a1 + 56));
    v11 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v12 = "Yes";
      v13 = *(unsigned __int8 *)(v6 + 77);
      if (!v5)
        v12 = "No";
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Stream Status %s  Already Running %d ", buf, 0x12u);
    }
    if (!*(_BYTE *)(v6 + 77) || (v4 - 1) <= 1)
      sub_1002D8B88(v6, v3, 1, *(_DWORD *)(a1 + 64));
  }
  if (v7)
  {
    v14 = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    goto LABEL_34;
  }
LABEL_36:
  v20 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v21 = "Enable";
    if (!*(_BYTE *)(a1 + 68))
      v21 = "Disable";
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v21;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Enable/Disable Remote Timesync operation %s: Status %x ", buf, 0x12u);
  }
}

void sub_10051E868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10009F88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10051E888(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  char v7;

  result = sub_10051EC6C();
  if ((_DWORD)result)
  {
    v7 = 0;
    if (!*(_QWORD *)(a1 + 888))
      operator new();
    return sub_1002D7EA0(*(_QWORD *)(a1 + 888), a2, a3, &v7);
  }
  return result;
}

void sub_10051E9C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10009F88C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10051E9F8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 896);
  *a2 = *(_QWORD *)(result + 888);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_10051EA20(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  if (!sub_10051EC6C())
    return 0;
  v6 = *(_QWORD *)(a1 + 888);
  v7 = *(std::__shared_weak_count **)(a1 + 896);
  v30 = v6;
  v31 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
    goto LABEL_30;
  v29 = 0;
  if (!sub_1002D86B4(v6, a2, a3, &v29))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006FEA70();
LABEL_30:
    v22 = 0;
    if (!v7)
      return v22;
    goto LABEL_31;
  }
  if (v29)
    goto LABEL_30;
  v10 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v26) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Deleting  mBTTimeSyncManager", (uint8_t *)&v26, 2u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100935B90);
  v11 = off_100977A50;
  v12 = *(std::__shared_weak_count **)(a1 + 896);
  v27 = *(_QWORD *)(a1 + 888);
  v28 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_10052AEF8((uint64_t)v11 + 96, &v27);
  v15 = a1 + 888;
  v16 = v28;
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v26 = 0uLL;
  sub_100274874(v15, &v26);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = 1;
  v7 = v31;
  if (v31)
  {
LABEL_31:
    v23 = (unint64_t *)&v7->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v22;
}

void sub_10051EC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_10009F88C((uint64_t)va);
  sub_10009F88C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10051EC6C()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100027F68();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 528))(v0) & 1) != 0)
    return 0;
  sub_1000438A4();
  if (sub_100331A98())
    return 1;
  v2 = sub_10003BE44();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 792))(v2, 0);
}

void sub_10051ECC0(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  sub_10052BBE8(&v2, a2);
}

uint64_t sub_10051ED30()
{
  uint64_t result;

  result = sub_10051EC6C();
  if ((_DWORD)result)
  {
    sub_1000438A4();
    if (sub_100331A98())
      return 1;
    else
      return 2;
  }
  return result;
}

uint64_t sub_10051ED5C(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD block[7];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v3 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
  v13 = TSNullClockIdentifier;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100935B70);
  v4 = *((_QWORD *)off_100977A90 + 31);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051EEE4;
  block[3] = &unk_100918690;
  block[5] = a1;
  block[6] = v3;
  block[4] = &v10;
  dispatch_sync(v4, block);
  v5 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v6 = v11[3];
    *(_DWORD *)buf = 134217984;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Reference Timestamp ID: %llx ", buf, 0xCu);
  }
  v7 = v11[3];
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_10051EEE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;

  v2 = a1[5];
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100935C90);
  v3 = a1 + 6;
  v4 = (unsigned __int8 *)sub_10006D488((uint64_t)off_1009778E0, a1[6], 0);
  if (v4)
  {
    v5 = *(_QWORD *)(v2 + 888);
    v6 = *(std::__shared_weak_count **)(v2 + 896);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (v5)
      sub_1002D9534(v5, (_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24), ((unint64_t)v4[128] << 40) | ((unint64_t)v4[129] << 32) | ((unint64_t)v4[130] << 24) | ((unint64_t)v4[131] << 16) | ((unint64_t)v4[132] << 8) | v4[133]);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v11 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006FEA9C(v3, v11, v12);
  }
}

void sub_10051F028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10009F88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10051F03C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v10[5];
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a1[111];
  v4 = (std::__shared_weak_count *)a1[112];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  v7 = a1[31];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  v10[2] = sub_10051F0EC;
  v10[3] = &unk_100935A60;
  v10[4] = v3;
  v11 = v4;
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v12 = a2;
  v13 = a3;
  dispatch_async(v7, v10);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void sub_10051F0EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  NSObject *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint8_t v8[16];
  uint64_t v9;
  std::__shared_weak_count *v10;

  v9 = 0;
  v10 = 0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v10 = v3;
    if (v3)
    {
      v4 = a1[4];
      v9 = v4;
      if (v4)
      {
        if (sub_1002DA940(v4))
        {
          sub_1002D7A10(v4, a1[6], a1[7], 0);
          sub_1002DA89C(v4);
LABEL_10:
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
          return;
        }
      }
    }
  }
  else
  {
    v3 = 0;
  }
  v5 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Legacy timesync trigger ended", v8, 2u);
  }
  if (v3)
    goto LABEL_10;
}

void sub_10051F1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10009F88C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10051F1F8(uint64_t a1)
{
  NSObject *v2;
  char v3;
  uint8_t buf[16];

  if (*(_QWORD *)(a1 + 40))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 336))
    {
      v3 = 0;
      sub_100043758(&v3);
      sub_1001929C8((uint64_t (*)())sub_10051F2C0, *(_QWORD *)(a1 + 40) + 128);
      sub_10004339C(&v3);
      sub_100043728(&v3);
    }
    else
    {
      v2 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stack is not running. So, cannot issue the readLocalBTClock command", buf, 2u);
      }
    }
  }
}

void sub_10051F2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_10051F2C0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v4;
  uint64_t v5;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100935B70);
  v4 = off_100977A90;
  v5 = mach_absolute_time();
  sub_10051F03C(v4, v5, 312500 * a3);
}

uint64_t sub_10051F324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  char v15;

  if (a2
    && (v15 = 0,
        sub_100043758(&v15),
        v11 = (unsigned __int16 *)sub_10019AEA4(a2 + 128),
        sub_10004339C(&v15),
        sub_100043728(&v15),
        v11))
  {
    v12 = *v11;
  }
  else
  {
    v12 = 0xFFFFLL;
  }
  v13 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 1608))(v13, a3, a4, v12, a5, a6);
}

void sub_10051F3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_10051F3DC(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051F434;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_async(v1, block);
}

uint64_t sub_10051F434(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 872);
  if (result)
    return sub_1005C3DF4(result);
  return result;
}

void sub_10051F448(uint64_t a1, char a2, char a3, char a4, const void *a5, size_t size)
{
  char v6;
  size_t v12;
  NSObject *v13;
  _QWORD block[6];
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;

  v6 = size;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v12 = size;
  v22 = malloc_type_malloc(size, 0x52EA556EuLL);
  memcpy((void *)v20[3], a5, v12);
  v13 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10051F534;
  block[3] = &unk_100935A98;
  v15 = a2;
  v16 = a3;
  v17 = a4;
  block[4] = &v19;
  block[5] = a1;
  v18 = v6;
  dispatch_async(v13, block);
  _Block_object_dispose(&v19, 8);
}

void sub_10051F534(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 872);
  if (v2)
    sub_1005C3FA4(v2, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(_BYTE *)(a1 + 50), *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

unint64_t sub_10051F588(uint64_t a1, int a2, float a3)
{
  unint64_t result;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t **v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  result = sub_10051CDE8(a1, a2);
  v15 = result;
  if (result)
  {
    v8 = *(_QWORD **)(a1 + 192);
    v7 = a1 + 192;
    v6 = v8;
    if (v8)
    {
      v9 = (uint64_t **)(v7 - 8);
      v10 = (_QWORD *)v7;
      do
      {
        v11 = v6[4];
        v12 = v11 >= result;
        if (v11 >= result)
          v13 = v6;
        else
          v13 = v6 + 1;
        if (v12)
          v10 = v6;
        v6 = (_QWORD *)*v13;
      }
      while (*v13);
      if (v10 != (_QWORD *)v7 && result >= v10[4])
      {
        v16 = &v15;
        result = (unint64_t)sub_10002252C(v9, &v15, (uint64_t)&unk_100740F58, (uint64_t **)&v16);
        if (**(_QWORD **)(result + 40))
        {
          v16 = &v15;
          result = (unint64_t)sub_10002252C(v9, &v15, (uint64_t)&unk_100740F58, (uint64_t **)&v16);
          v14 = **(_QWORD **)(result + 40);
          *(float *)(v14 + 396) = *(float *)(v14 + 396) + a3;
          ++*(_DWORD *)(v14 + 400);
        }
      }
    }
  }
  return result;
}

BOOL sub_10051F674(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 872);
  return v1 && *(_BYTE *)(v1 + 52) != 0;
}

BOOL sub_10051F694(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (!*(_QWORD *)(a1 + 872))
    return 0;
  v2 = *(_QWORD *)(a1 + 880);
  return v2 && v2 == a2;
}

uint64_t sub_10051F6B8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;

  v5 = 0;
  v4 = 0;
  v3 = 0;
  sub_100444BF0(a2, &v5, &v4, (_DWORD *)&v3 + 1, &v3);
  result = 0;
  if (v4 == 76)
  {
    if ((HIDWORD(v3) - 8202) <= 0x15)
      return (0x20033Fu >> (BYTE4(v3) - 10)) & 1;
    else
      return 0;
  }
  return result;
}

uint64_t sub_10051F728(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t result;

  v4 = sub_100027F68();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 304))(v4) & 1) != 0)
    return 0;
  v5 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 344))(v5) & 1) != 0)
    return 0;
  v6 = sub_10051F7A4(a1);
  if (v6)
    return 0;
  result = sub_10051F6B8(v6, a2);
  if ((_DWORD)result)
  {
    sub_1000438A4();
    if (sub_100331480())
      return 1;
    else
      return 2;
  }
  return result;
}

BOOL sub_10051F7A4(uint64_t a1)
{
  unint64_t v1;
  NSObject *v2;
  const char *v3;
  int v5;
  const char *v6;

  v1 = *(_QWORD *)(a1 + 1112);
  v2 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = "disabled";
    if (v1 > 1)
      v3 = "enabled";
    v5 = 136315138;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Wireless Splitter - isWirelessSplitterEnabled is %s ", (uint8_t *)&v5, 0xCu);
  }
  return v1 > 1;
}

uint64_t sub_10051F864(uint64_t a1)
{
  unsigned int v1;

  v1 = sub_10051F8C4(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100935BD0);
  return sub_1003DAD8C(qword_100977DF8, v1, 1);
}

uint64_t sub_10051F8C4(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  unint64_t v11;
  unint64_t *v12;

  v11 = a2;
  if (!a2)
    return 0;
  v4 = *(_QWORD **)(a1 + 192);
  v2 = (_QWORD *)(a1 + 192);
  v3 = v4;
  if (!v4)
    return 0;
  v5 = (uint64_t **)(v2 - 1);
  v6 = v2;
  do
  {
    v7 = v3[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v3;
    else
      v9 = v3 + 1;
    if (v8)
      v6 = v3;
    v3 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v2)
    return 0;
  if (v6[4] > a2)
    return 0;
  v12 = &v11;
  if (!*(_WORD *)(sub_10002252C((uint64_t **)v2 - 1, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12)[5] + 84))
    return 0;
  v12 = &v11;
  return *(unsigned __int16 *)(sub_10002252C(v5, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12)[5] + 84);
}

uint64_t sub_10051F98C(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100935BD0);
  return sub_1003DAD8C(qword_100977DF8, *(unsigned __int16 *)(a1 + 32), 1);
}

uint64_t sub_10051F9E0(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100935BD0);
  return sub_1003DAD8C(qword_100977DF8, *(unsigned __int16 *)(a1 + 32), 0);
}

uint64_t sub_10051FA34(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100935BD0);
  return sub_1003DAD8C(qword_100977DF8, *(unsigned __int16 *)(a1 + 32), 1);
}

uint64_t sub_10051FA88(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100935BD0);
  return sub_1003DAD8C(qword_100977DF8, *(unsigned __int16 *)(a1 + 32), 0);
}

void sub_10051FADC(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  NSObject *v9;
  __int16 v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  __int16 v14;
  unint64_t v15;
  uint8_t buf[8];

  v3 = a3;
  v15 = a2;
  v5 = (uint64_t **)(a1 + 184);
  *(_QWORD *)buf = &v15;
  *(_WORD *)(sub_10002252C((uint64_t **)(a1 + 184), &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 58) = a3;
  *(_QWORD *)buf = &v15;
  if (*(unsigned __int16 *)(sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 58) >= *(unsigned __int16 *)(a1 + 1032)
    && (*(_QWORD *)buf = &v15, *(_QWORD *)sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]))
  {
    *(_QWORD *)buf = &v15;
    v6 = sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf);
    ++*(_DWORD *)(*(_QWORD *)v6[5] + 384);
  }
  else
  {
    *(_QWORD *)buf = &v15;
    if (*(unsigned __int16 *)(sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 58) >= *(unsigned __int16 *)(a1 + 1034)
      && (*(_QWORD *)buf = &v15, *(_QWORD *)sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]))
    {
      *(_QWORD *)buf = &v15;
      v7 = sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf);
      ++*(_DWORD *)(*(_QWORD *)v7[5] + 380);
    }
    else
    {
      *(_QWORD *)buf = &v15;
      if (*(_QWORD *)sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5])
      {
        *(_QWORD *)buf = &v15;
        v8 = sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf);
        ++*(_DWORD *)(*(_QWORD *)v8[5] + 376);
      }
      else
      {
        v9 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "A2DP Link Adaptive Bitrate: Metrics not enabled", buf, 2u);
        }
      }
    }
  }
  v10 = sub_10051F8C4(a1, v15);
  *(_QWORD *)buf = &v15;
  if (*(unsigned __int16 *)(sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 60) < v3)
  {
    *(_QWORD *)buf = &v15;
    LOWORD(v3) = *(_WORD *)(sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 60);
  }
  v11 = sub_1004759E0();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10051FDD8;
  v12[3] = &unk_100918130;
  v13 = v10;
  v14 = v3;
  sub_100041A34(v11, v12);
}

void sub_10051FDD8(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100935BD0);
  sub_1003E8A50(qword_100977DF8, *(unsigned __int16 *)(a1 + 32), *(unsigned __int16 *)(a1 + 34));
}

uint64_t *sub_10051FE2C(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *result;
  unint64_t v8;
  unint64_t *v9;

  v8 = a2;
  v5 = (uint64_t **)(a1 + 184);
  v9 = &v8;
  v6 = sub_10002252C((uint64_t **)(a1 + 184), &v8, (uint64_t)&unk_100740F58, (uint64_t **)&v9);
  ++*(_WORD *)(v6[5] + 62);
  v9 = &v8;
  result = sub_10002252C(v5, &v8, (uint64_t)&unk_100740F58, (uint64_t **)&v9);
  if (*(__int16 *)(result[5] + 62) >= 6)
  {
    sub_10051FADC(a1, v8, a3);
    v9 = &v8;
    result = sub_10002252C(v5, &v8, (uint64_t)&unk_100740F58, (uint64_t **)&v9);
    *(_WORD *)(result[5] + 62) = 0;
  }
  return result;
}

uint64_t sub_10051FF08(uint64_t a1, int a2)
{
  return sub_1000A4C40(*(_BYTE **)(a1 + 208), a2);
}

void sub_10051FF10(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  NSObject *v5;
  _QWORD v6[7];
  char v7;
  char v8;

  v5 = *(NSObject **)(a1 + 248);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10051FF74;
  v6[3] = &unk_10092A3B8;
  v6[4] = a1;
  v6[5] = a2;
  v7 = a3;
  v6[6] = a4;
  v8 = a5;
  dispatch_async(v5, v6);
}

void sub_10051FF74(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1000A4E80(*(_QWORD *)(v2 + 208), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 57));
  sub_1000A7A34(*(_QWORD *)(v2 + 208), *(_QWORD *)(a1 + 40));
}

void sub_10051FFB0(uint64_t a1, char a2)
{
  NSObject *v2;
  _QWORD v3[5];
  char v4;

  v2 = *(NSObject **)(a1 + 248);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10052000C;
  v3[3] = &unk_100918888;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_10052000C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  const char *v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  int v9;
  double Current;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  const char *v15;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "on";
    if (**(_BYTE **)(v2 + 208))
      v5 = "on";
    else
      v5 = "off";
    if (!*(_BYTE *)(a1 + 40))
      v4 = "off";
    v12 = 136315394;
    v13 = v5;
    v14 = 2080;
    v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Dynamic Latency fScreenOn from %s -> %s", (uint8_t *)&v12, 0x16u);
  }
  v6 = *(_BYTE **)(v2 + 208);
  v7 = *(unsigned __int8 *)(a1 + 40);
  if (*v6 != v7)
  {
    *v6 = v7;
    if (sub_10051F7A4(v2) && (v8 = *(_QWORD *)(v2 + 1120)) != 0)
    {
      v9 = **(unsigned __int8 **)(v2 + 208);
      Current = CFAbsoluteTimeGetCurrent();
      v11 = *(_QWORD *)(v2 + 1120);
      if (v9)
      {
        *(_DWORD *)(v8 + 48) += (Current - *(double *)(v11 + 24));
        *(CFAbsoluteTime *)(*(_QWORD *)(v2 + 1120) + 16) = CFAbsoluteTimeGetCurrent();
      }
      else
      {
        *(_DWORD *)(v8 + 52) += (Current - *(double *)(v11 + 16));
        *(CFAbsoluteTime *)(*(_QWORD *)(v2 + 1120) + 24) = CFAbsoluteTimeGetCurrent();
      }
    }
    else
    {
      sub_1000A2EB8(*(_QWORD *)(v2 + 208));
    }
  }
}

void sub_10052018C(uint64_t a1, char a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[5];
  char v5;

  v2 = a1 - 32;
  v3 = *(NSObject **)(a1 + 216);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10052000C;
  v4[3] = &unk_100918888;
  v4[4] = v2;
  v5 = a2;
  dispatch_async(v3, v4);
}

void sub_1005201E8(uint64_t a1, char a2)
{
  NSObject *v2;
  _QWORD v3[5];
  char v4;

  v2 = *(NSObject **)(a1 + 248);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100520244;
  v3[3] = &unk_100918888;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100520244(uint64_t a1)
{
  sub_1005202BC(*(_QWORD **)(a1 + 32));
}

void sub_1005202BC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1[25] || (v1 = (_QWORD *)a1[23], v1 == a1 + 24))
  {
LABEL_11:
    v7 = 0;
    v8 = 0;
  }
  else
  {
    while (1)
    {
      v2 = v1[5];
      if (*(_DWORD *)(v2 + 76) == 2)
      {
        if (*(_BYTE *)(v2 + 72))
          break;
      }
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
      if (v4 == a1 + 24)
        goto LABEL_11;
    }
    v6 = v1[4];
    v7 = 0;
    v8 = 0;
    if (v6)
      sub_100444BF0(v6, (_DWORD *)&v8 + 1, &v8, (_DWORD *)&v7 + 1, &v7);
  }
  operator new();
}

void sub_1005204AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete();
}

uint64_t sub_1005204E8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v5[2];

  v2 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 32);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "notify A2DPClient Accessibility headTracking change:%u", (uint8_t *)v5, 8u);
  }
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100935BD0);
  return sub_1003E4504(qword_100977DF8, *(unsigned __int8 *)(a1 + 32));
}

void sub_1005205C4(uint64_t a1, char a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[5];
  char v5;

  v2 = a1 - 96;
  v3 = *(NSObject **)(a1 + 152);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100520244;
  v4[3] = &unk_100918888;
  v4[4] = v2;
  v5 = a2;
  dispatch_async(v3, v4);
}

void sub_100520620(uint64_t a1, __int128 *a2)
{
  NSObject *v2;
  _QWORD block[4];
  __int128 __p;
  uint64_t v5;

  v2 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1005206BC;
  block[3] = &unk_100927460;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(&__p, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __p = *a2;
    v5 = *((_QWORD *)a2 + 2);
  }
  dispatch_async(v2, block);
  if (SHIBYTE(v5) < 0)
    operator delete((void *)__p);
}

void sub_1005206BC(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[4];
  __int128 __p;
  uint64_t v5;

  v2 = sub_1004759E0();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_10052077C;
  v3[3] = &unk_100927460;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10003430C(&__p, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 48);
  }
  sub_100041A34(v2, v3);
  if (SHIBYTE(v5) < 0)
    operator delete((void *)__p);
}

void sub_100520760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10052077C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  id v4;
  _QWORD *v5;
  id v6;
  int v7;
  _QWORD *v8;

  v2 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v3 = (_QWORD *)*v3;
    v7 = 136315138;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "notify Foreground app changed :%s", (uint8_t *)&v7, 0xCu);
  }
  v4 = objc_alloc((Class)NSString);
  v5 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v5 = (_QWORD *)*v5;
  v6 = objc_msgSend(v4, "initWithUTF8String:", v5);
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100935BD0);
  sub_1003E4298(qword_100977DF8, v6);

}

void sub_10052088C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005208A4(uint64_t a1, __int128 *a2)
{
  sub_100520620(a1 - 104, a2);
}

void sub_1005208AC(uint64_t a1, char a2)
{
  NSObject *v2;
  _QWORD v3[5];
  char v4;

  v2 = *(NSObject **)(a1 + 248);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100520908;
  v3[3] = &unk_100918888;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100520908(uint64_t a1)
{
  sub_1000A3B44(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208), *(unsigned __int8 *)(a1 + 40));
}

void sub_10052091C(uint64_t a1, char a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[5];
  char v5;

  v2 = a1 - 120;
  v3 = *(NSObject **)(a1 + 128);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100520908;
  v4[3] = &unk_100918888;
  v4[4] = v2;
  v5 = a2;
  dispatch_async(v3, v4);
}

BOOL sub_100520978(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 208);
  return *(_BYTE *)(v1 + 4) || *(_BYTE *)(v1 + 5) != 0;
}

void sub_10052099C(uint64_t a1, char a2)
{
  NSObject *v2;
  _QWORD v3[5];
  char v4;

  v2 = *(NSObject **)(a1 + 248);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1005209F8;
  v3[3] = &unk_100918888;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_1005209F8(uint64_t a1)
{
  sub_1000A36F4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208), *(unsigned __int8 *)(a1 + 40));
}

void sub_100520A0C(uint64_t a1, char a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[5];
  char v5;

  v2 = a1 - 48;
  v3 = *(NSObject **)(a1 + 200);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1005209F8;
  v4[3] = &unk_100918888;
  v4[4] = v2;
  v5 = a2;
  dispatch_async(v3, v4);
}

void sub_100520A68(uint64_t a1, char a2)
{
  NSObject *v2;
  _QWORD v3[5];
  char v4;

  v2 = *(NSObject **)(a1 + 248);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100520AC4;
  v3[3] = &unk_100918888;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100520AC4(uint64_t a1)
{
  sub_1000A3864(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 208), *(unsigned __int8 *)(a1 + 40));
}

void sub_100520AD8(uint64_t a1, char a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[5];
  char v5;

  v2 = a1 - 80;
  v3 = *(NSObject **)(a1 + 168);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100520AC4;
  v4[3] = &unk_100918888;
  v4[4] = v2;
  v5 = a2;
  dispatch_async(v3, v4);
}

void sub_100520B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  v3 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100520B90;
  block[3] = &unk_1009210D8;
  block[4] = a1;
  block[5] = a2;
  block[6] = a3;
  dispatch_async(v3, block);
}

void sub_100520B90(uint64_t a1)
{
  sub_1000948EC(*(_BYTE **)(*(_QWORD *)(a1 + 32) + 216), *(_QWORD *)(a1 + 40));
}

void sub_100520BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  v3 = *(NSObject **)(a1 + 192);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100520B90;
  block[3] = &unk_1009210D8;
  block[4] = a1 - 56;
  block[5] = a2;
  block[6] = a3;
  dispatch_async(v3, block);
}

uint64_t *sub_100520C04(uint64_t *result, unint64_t a2)
{
  uint64_t **v2;
  CFAbsoluteTime Current;
  double v4;
  double v5;
  uint64_t *v6;
  CFAbsoluteTime v7;
  double v8;
  double v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t *v12;

  v11 = a2;
  if (a2)
  {
    v2 = (uint64_t **)(result + 23);
    v12 = &v11;
    result = sub_10002252C((uint64_t **)result + 23, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12);
    if (*(_QWORD *)result[5])
    {
      v12 = &v11;
      if (*(_DWORD *)(*(_QWORD *)(sub_10002252C(v2, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12)[5] + 40) + 20) == 1)
      {
        Current = CFAbsoluteTimeGetCurrent();
        v12 = &v11;
        result = sub_10002252C(v2, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12);
        *(CFAbsoluteTime *)(*(_QWORD *)result[5] + 144) = Current;
      }
      else
      {
        v12 = &v11;
        if (*(_DWORD *)(*(_QWORD *)(sub_10002252C(v2, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12)[5] + 40) + 20) == 6)
        {
          v12 = &v11;
          if (*(double *)(*(_QWORD *)sub_10002252C(v2, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12)[5] + 144) == 0.0)
          {
            v12 = &v11;
            result = sub_10002252C(v2, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12);
            if (*(double *)(*(_QWORD *)result[5] + 152) != 0.0)
            {
              v8 = CFAbsoluteTimeGetCurrent();
              v12 = &v11;
              v9 = v8
                 - *(double *)(*(_QWORD *)sub_10002252C(v2, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12)[5] + 152);
              v12 = &v11;
              v10 = sub_10002252C(v2, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12);
              *(double *)(*(_QWORD *)v10[5] + 136) = v9 + *(double *)(*(_QWORD *)v10[5] + 136);
              v12 = &v11;
              result = sub_10002252C(v2, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12);
              *(_QWORD *)(*(_QWORD *)result[5] + 152) = 0;
            }
          }
          else
          {
            v4 = CFAbsoluteTimeGetCurrent();
            v12 = &v11;
            v5 = v4
               - *(double *)(*(_QWORD *)sub_10002252C(v2, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12)[5] + 144);
            v12 = &v11;
            v6 = sub_10002252C(v2, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12);
            *(double *)(*(_QWORD *)v6[5] + 128) = v5 + *(double *)(*(_QWORD *)v6[5] + 128);
            v12 = &v11;
            result = sub_10002252C(v2, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12);
            *(_QWORD *)(*(_QWORD *)result[5] + 144) = 0;
          }
        }
        else
        {
          v12 = &v11;
          result = sub_10002252C(v2, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12);
          if (*(_DWORD *)(*(_QWORD *)(result[5] + 40) + 20) == 7)
          {
            v7 = CFAbsoluteTimeGetCurrent();
            v12 = &v11;
            result = sub_10002252C(v2, &v11, (uint64_t)&unk_100740F58, (uint64_t **)&v12);
            *(CFAbsoluteTime *)(*(_QWORD *)result[5] + 152) = v7;
          }
        }
      }
    }
  }
  return result;
}

void sub_100520F24(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(_QWORD *)(a3 + 8))
      return;
  }
  else if (!*(_BYTE *)(a3 + 23))
  {
    return;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (!a4 || !*(_BYTE *)(a2 + 23))
      return;
LABEL_11:
    operator new[]();
  }
  if (a4 && *(_QWORD *)(a2 + 8))
    goto LABEL_11;
}

void sub_10052127C(uint64_t a1)
{
  unsigned __int8 **i;
  unsigned __int8 *v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL8 v7;
  id v8;
  void *v9;
  int v10;
  NSObject *v11;
  unint64_t v12;
  NSObject *v13;
  _BOOL8 v14;
  id v15;
  void *v16;
  int v17;
  uint8_t v18;
  char v19[15];
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  for (i = *(unsigned __int8 ***)(a1 + 1008); i != *(unsigned __int8 ***)(a1 + 1016); ++i)
  {
    v3 = *i;
    if (*i && *((_QWORD *)v3 + 1) && *((_QWORD *)v3 + 2))
    {
      v4 = *v3;
      if (v4 >= 2)
      {
        v5 = 0;
        v6 = qword_1009997E0;
        do
        {
          v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
          if (v7)
          {
            v8 = sub_10051A504(v7, *((_DWORD *)v3 + 1));
            v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
            v10 = *(unsigned __int8 *)(*((_QWORD *)v3 + 1) + v5);
            *(_DWORD *)buf = 138412802;
            v21 = v9;
            v22 = 1024;
            v23 = v5;
            v24 = 1024;
            v25 = v10;
            _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "A2DP Link Adaptive %@ Threshold (%d): %3d", buf, 0x18u);

            v6 = qword_1009997E0;
            v4 = *v3;
          }
          ++v5;
        }
        while (v5 < v4 - 1);
      }
      if (v4)
      {
        v12 = 0;
        v13 = qword_1009997E0;
        do
        {
          v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG);
          if (v14)
          {
            v15 = sub_10051A504(v14, *((_DWORD *)v3 + 1));
            v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
            v17 = *(unsigned __int16 *)(*((_QWORD *)v3 + 2) + 2 * v12);
            *(_DWORD *)buf = 138412802;
            v21 = v16;
            v22 = 1024;
            v23 = v12;
            v24 = 1024;
            v25 = v17;
            _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "A2DP Link Adaptive %@ Rate (%d): %3d", buf, 0x18u);

            v13 = qword_1009997E0;
            v4 = *v3;
          }
          ++v12;
        }
        while (v12 < v4);
      }
    }
    else
    {
      v11 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEBUG))
        sub_1006FEB08(&v18, v19, v11);
    }
  }
}

uint64_t sub_1005214B0(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t *v4;

  v3 = a2;
  v4 = &v3;
  return *(_QWORD *)(sub_10002252C((uint64_t **)(a1 + 184), &v3, (uint64_t)&unk_100740F58, (uint64_t **)&v4)[5] + 40);
}

void sub_1005214F8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v3 = a2[3];
  v4 = a2[2] + *(unsigned __int8 *)(a3 + 1);
  v5 = a2[1] + *(unsigned __int16 *)(a3 + 167);
  *a2 += *(unsigned __int16 *)(a3 + 165);
  a2[1] = v5;
  v6 = v3 + *(unsigned __int16 *)(a3 + 169);
  a2[2] = v4;
  a2[3] = v6;
  v7 = a2[5] + *(unsigned __int16 *)(a3 + 171);
  a2[4] += *(unsigned __int16 *)(a3 + 173);
  a2[5] = v7;
}

void sub_100521544(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v3 = *(char *)(a3 + 217);
  v4 = a2[1];
  *a2 += v3;
  v5 = *(char *)(a3 + 218);
  a2[2] += v5;
  v6 = *(char *)(a3 + 219);
  a2[4] += v6;
  if (v4 < v3)
    a2[1] = v3;
  if (a2[3] < v5)
    a2[3] = v5;
  if (a2[5] < v6)
    a2[5] = v6;
  v7 = *(unsigned __int8 *)(a3 + 220);
  v8 = a2[7] + v7;
  ++a2[6];
  a2[7] = v8;
  v9 = a2[8];
  if (v9 >= v7)
    v10 = v7;
  else
    v10 = a2[8];
  if (v9)
    v11 = v10;
  else
    v11 = v7;
  a2[8] = v11;
}

id sub_1005215D0(uint64_t a1, char a2)
{
  void *v4;
  void *v5;
  unsigned int v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithFormat:](NSMutableString, "stringWithFormat:", &stru_100941758));
  v5 = v4;
  v6 = *(unsigned __int16 *)(a1 + 818);
  if (v6 - 212 >= 0xFFFFFF2D)
  {
    if ((a2 & 4) != 0)
      v8 = CFSTR("Cell Active ");
    else
      v8 = CFSTR("Cell Inactive ");
    objc_msgSend(v4, "appendString:", v8);
    if ((a2 & 2) != 0)
      v9 = CFSTR("/ WiFi5G Active ");
    else
      v9 = CFSTR("/ WiFi5G Inactive ");
    objc_msgSend(v5, "appendString:", v9);
    v10 = CFSTR("/ H ");
    v11 = CFSTR("/ B ");
  }
  else
  {
    if (v6 < 0xD4)
      return v5;
    if ((a2 & 8) != 0)
    {
      objc_msgSend(v4, "appendString:", CFSTR("Cell Inactive "));
      v7 = &stru_100941758;
    }
    else
    {
      objc_msgSend(v4, "appendString:", CFSTR("Cell Active "));
      if ((a2 & 4) != 0)
        v7 = CFSTR("/ Ant(2/4/6) ");
      else
        v7 = CFSTR("/ Ant(1/3/5) ");
    }
    objc_msgSend(v5, "appendString:", v7);
    if ((a2 & 2) != 0)
      v12 = CFSTR("/ B ");
    else
      v12 = CFSTR("/ H ");
    objc_msgSend(v5, "appendString:", v12);
    v10 = CFSTR("/ WiFi5G Active");
    v11 = CFSTR("/ WiFi5G Inactive");
  }
  if ((a2 & 1) != 0)
    v13 = v10;
  else
    v13 = v11;
  objc_msgSend(v5, "appendString:", v13);
  return v5;
}

void sub_100521714(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100521724(unsigned __int8 *a1, int a2)
{
  NSObject *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  NSObject *v9;
  unsigned int v10;
  const char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  double v17;
  NSObject *v18;
  int v19;
  double v20;

  v4 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: ----------------------------Packet------------------Target iPA Tx Power------------------------", (uint8_t *)&v19, 2u);
  }
  if (a2 == 2000)
  {
    if (a1[659] >= a1[650])
      v5 = a1[650];
    else
      v5 = a1[659];
    v6 = a1[652];
    if (a1[660] >= v6)
      v7 = a1[652];
    else
      v7 = a1[660];
    if (a1[661] >= v6)
      v8 = a1[652];
    else
      v8 = a1[661];
    v9 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v10 = a1[658];
      if (v10 >= a1[648])
        v10 = a1[648];
      v19 = 134217984;
      v20 = (double)v10 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                              BDR                         %.2f dBm", (uint8_t *)&v19, 0xCu);
      v9 = qword_1009997E0;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 134217984;
      v20 = (double)v5 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                              EDR                         %.2f dBm", (uint8_t *)&v19, 0xCu);
      v9 = qword_1009997E0;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 134217984;
      v20 = (double)v7 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                             LEData                       %.2f dBm", (uint8_t *)&v19, 0xCu);
      v9 = qword_1009997E0;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 134217984;
      v20 = (double)v8 * 0.5;
      v11 = "statedump:                             LEAdv                        %.2f dBm";
LABEL_50:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v19, 0xCu);
    }
  }
  else if ((a2 - 2001) <= 1)
  {
    if (a1[674] >= a1[650])
      v12 = a1[650];
    else
      v12 = a1[674];
    if (a1[690] >= a1[652])
      v13 = a1[652];
    else
      v13 = a1[690];
    if (a1[706] >= a1[654])
      v14 = a1[654];
    else
      v14 = a1[706];
    if (a1[722] >= a1[656])
      v15 = a1[656];
    else
      v15 = a1[722];
    v9 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v16 = a1[658];
      if (v16 >= a1[648])
        v16 = a1[648];
      v19 = 134217984;
      v20 = (double)v16 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                              BDR                         %.2f dBm", (uint8_t *)&v19, 0xCu);
      v9 = qword_1009997E0;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 134217984;
      v20 = (double)v12 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                              EDR                         %.2f dBm", (uint8_t *)&v19, 0xCu);
      v9 = qword_1009997E0;
    }
    v17 = (double)v13;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 134217984;
      v20 = v17 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                             LEData                       %.2f dBm", (uint8_t *)&v19, 0xCu);
      v9 = qword_1009997E0;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 134217984;
      v20 = v17 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                             LEAdv                        %.2f dBm", (uint8_t *)&v19, 0xCu);
      v9 = qword_1009997E0;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 134217984;
      v20 = (double)v14 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:                              HDR4                        %.2f dBm", (uint8_t *)&v19, 0xCu);
      v9 = qword_1009997E0;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 134217984;
      v20 = (double)v15 * 0.5;
      v11 = "statedump:                              HDR8                        %.2f dBm";
      goto LABEL_50;
    }
  }
  v18 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19) = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "statedump: ============================= End of bluetooth power targets dump ==========================", (uint8_t *)&v19, 2u);
  }
}

void sub_100521BD8(unsigned __int8 *a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  const char *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;

  v4 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v51) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: ========================= Bluetooth Tx Power Targets (CC0) ===============================", (uint8_t *)&v51, 2u);
  }
  if (a2 == 2000)
  {
    v5 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v51) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: ------Use Case-------Target ePA Tx Power-------------------Power Caps--------------------------", (uint8_t *)&v51, 2u);
      v5 = qword_1009997E0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = a1[786];
      v7 = a1[663];
      v8 = a1[651];
      if (v7 >= v6)
        v9 = a1[786];
      else
        v9 = a1[663];
      if (v8 < v9)
        v9 = a1[651];
      v51 = 134218752;
      v52 = (double)v9 * 0.5;
      v53 = 2048;
      v54 = (double)v8 * 0.5;
      v55 = 2048;
      v56 = (double)v7 * 0.5;
      v57 = 2048;
      v58 = (double)v6 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:     Cellular Off          %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      v5 = qword_1009997E0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v10 = a1[787];
      v11 = a1[663];
      v12 = a1[651];
      if (v11 >= v10)
        v13 = a1[787];
      else
        v13 = a1[663];
      if (v12 < v13)
        v13 = a1[651];
      v51 = 134218752;
      v52 = (double)v13 * 0.5;
      v53 = 2048;
      v54 = (double)v12 * 0.5;
      v55 = 2048;
      v56 = (double)v11 * 0.5;
      v57 = 2048;
      v58 = (double)v10 * 0.5;
      v14 = "statedump:     Cellular On           %.2f dBm                   [%.2f,%.2f,%.2f]";
LABEL_84:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v51, 0x2Au);
    }
  }
  else if ((a2 - 2001) <= 1)
  {
    v5 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v51) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: ------EDR-------Target ePA Tx Power-------------------Power Caps--------------------------", (uint8_t *)&v51, 2u);
      v5 = qword_1009997E0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v15 = a1[651];
      v16 = a1[675];
      v17 = a1[786];
      if (v16 >= v15)
        v18 = a1[651];
      else
        v18 = a1[675];
      if (v17 < v18)
        v18 = a1[786];
      v51 = 134218752;
      v52 = (double)v18 * 0.5;
      v53 = 2048;
      v54 = (double)v15 * 0.5;
      v55 = 2048;
      v56 = (double)v16 * 0.5;
      v57 = 2048;
      v58 = (double)v17 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:     Cellular Off          %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      v5 = qword_1009997E0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v19 = a1[651];
      v20 = a1[675];
      v21 = a1[794];
      if (v20 >= v19)
        v22 = a1[651];
      else
        v22 = a1[675];
      if (v21 < v22)
        v22 = a1[794];
      v51 = 134218752;
      v52 = (double)v22 * 0.5;
      v53 = 2048;
      v54 = (double)v19 * 0.5;
      v55 = 2048;
      v56 = (double)v20 * 0.5;
      v57 = 2048;
      v58 = (double)v21 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:     Cellular On           %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      v5 = qword_1009997E0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v23 = a1[651];
      v24 = a1[675];
      v25 = a1[802];
      if (v24 >= v23)
        v26 = a1[651];
      else
        v26 = a1[675];
      if (v25 < v26)
        v26 = a1[802];
      v51 = 134218752;
      v52 = (double)v26 * 0.5;
      v53 = 2048;
      v54 = (double)v23 * 0.5;
      v55 = 2048;
      v56 = (double)v24 * 0.5;
      v57 = 2048;
      v58 = (double)v25 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:      WiFi 5G On           %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      v5 = qword_1009997E0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v51) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: ------HDR4-------Target ePA Tx Power-------------------Power Caps--------------------------", (uint8_t *)&v51, 2u);
      v5 = qword_1009997E0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v28 = a1[655];
      v29 = a1[723];
      v30 = a1[786];
      if (v29 >= v28)
        v29 = a1[655];
      if (v30 < v29)
        v29 = a1[786];
      LOBYTE(v27) = a1[707];
      v51 = 134218752;
      v52 = (double)v29 * 0.5;
      v53 = 2048;
      v54 = (double)v28 * 0.5;
      v55 = 2048;
      v56 = (double)v27 * 0.5;
      v57 = 2048;
      v58 = (double)v30 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:     Cellular Off          %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      v5 = qword_1009997E0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v32 = a1[655];
      v33 = a1[723];
      v34 = a1[794];
      if (v33 >= v32)
        v33 = a1[655];
      if (v34 < v33)
        v33 = a1[794];
      LOBYTE(v31) = a1[707];
      v51 = 134218752;
      v52 = (double)v33 * 0.5;
      v53 = 2048;
      v54 = (double)v32 * 0.5;
      v55 = 2048;
      v56 = (double)v31 * 0.5;
      v57 = 2048;
      v58 = (double)v34 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:     Cellular On           %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      v5 = qword_1009997E0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v36 = a1[655];
      v37 = a1[723];
      v38 = a1[802];
      if (v37 >= v36)
        v37 = a1[655];
      if (v38 < v37)
        v37 = a1[802];
      LOBYTE(v35) = a1[707];
      v51 = 134218752;
      v52 = (double)v37 * 0.5;
      v53 = 2048;
      v54 = (double)v36 * 0.5;
      v55 = 2048;
      v56 = (double)v35 * 0.5;
      v57 = 2048;
      v58 = (double)v38 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:      WiFi 5G On           %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      v5 = qword_1009997E0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v51) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: ------HDR8-------Target ePA Tx Power-------------------Power Caps--------------------------", (uint8_t *)&v51, 2u);
      v5 = qword_1009997E0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v40 = a1[657];
      v41 = a1[739];
      v42 = a1[786];
      if (v41 >= v40)
        v41 = a1[657];
      if (v42 < v41)
        v41 = a1[786];
      LOBYTE(v39) = a1[723];
      v51 = 134218752;
      v52 = (double)v41 * 0.5;
      v53 = 2048;
      v54 = (double)v40 * 0.5;
      v55 = 2048;
      v56 = (double)v39 * 0.5;
      v57 = 2048;
      v58 = (double)v42 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:     Cellular Off          %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      v5 = qword_1009997E0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v44 = a1[657];
      v45 = a1[739];
      v46 = a1[794];
      if (v45 >= v44)
        v45 = a1[657];
      if (v46 < v45)
        v45 = a1[794];
      LOBYTE(v43) = a1[723];
      v51 = 134218752;
      v52 = (double)v45 * 0.5;
      v53 = 2048;
      v54 = (double)v44 * 0.5;
      v55 = 2048;
      v56 = (double)v43 * 0.5;
      v57 = 2048;
      v58 = (double)v46 * 0.5;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:     Cellular On           %.2f dBm                   [%.2f,%.2f,%.2f]", (uint8_t *)&v51, 0x2Au);
      v5 = qword_1009997E0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v48 = a1[657];
      v49 = a1[739];
      v50 = a1[802];
      if (v49 >= v48)
        v49 = a1[657];
      if (v50 < v49)
        v49 = a1[802];
      LOBYTE(v47) = a1[723];
      v51 = 134218752;
      v52 = (double)v49 * 0.5;
      v53 = 2048;
      v54 = (double)v48 * 0.5;
      v55 = 2048;
      v56 = (double)v47 * 0.5;
      v57 = 2048;
      v58 = (double)v50 * 0.5;
      v14 = "statedump:      WiFi 5G On           %.2f dBm                   [%.2f,%.2f,%.2f]";
      goto LABEL_84;
    }
  }
}

void sub_100522470(uint64_t a1, int a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  void *__p[2];
  char v22;
  uint8_t buf[8];
  char v24;
  char v25;
  __int16 v26;

  v26 = 0;
  v25 = 0;
  if (a2 == 2)
  {
    v13 = sub_100027F68();
    sub_100091AE8(buf, "ePA");
    sub_100091AE8(__p, "DisableA2DP");
    (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v13 + 72))(v13, buf, __p, (char *)&v26 + 1);
  }
  else
  {
    if (a2 != 1)
      goto LABEL_9;
    v14 = sub_100027F68();
    sub_100091AE8(buf, "ePA");
    sub_100091AE8(__p, "DisableHFP");
    (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v14 + 72))(v14, buf, __p, (char *)&v26 + 1);
  }
  if (v22 < 0)
    operator delete(__p[0]);
  if (v24 < 0)
    operator delete(*(void **)buf);
LABEL_9:
  v15 = sub_100027F68();
  sub_100091AE8(buf, "ePA");
  sub_100091AE8(__p, "DisableReTxEPA");
  (*(void (**)(uint64_t, uint8_t *, void **, __int16 *))(*(_QWORD *)v15 + 72))(v15, buf, __p, &v26);
  if (v22 < 0)
    operator delete(__p[0]);
  if (v24 < 0)
    operator delete(*(void **)buf);
  v16 = sub_100027F68();
  sub_100091AE8(buf, "ePA");
  sub_100091AE8(__p, "DisableThresholdEPA");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v16 + 72))(v16, buf, __p, &v25);
  if (v22 < 0)
    operator delete(__p[0]);
  if (v24 < 0)
    operator delete(*(void **)buf);
  *a3 = HIBYTE(v26);
  *a4 = v26;
  *a5 = v25;
  *a6 = 3;
  if (a2 == 2)
  {
    v17 = sub_10003BE44();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 160))(v17) & 1) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (a2 == 1)
  {
    v18 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 168))(v18))
    {
      if (!sub_10043FE60(a7))
LABEL_23:
        *a6 = 7;
    }
  }
LABEL_24:
  if (*a4)
  {
    *a6 &= ~2u;
    v19 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Warning: Disabling ePA for retransmission policy through defaults write", buf, 2u);
    }
  }
  if (*a5)
  {
    *a6 &= ~1u;
    v20 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Warning: Disabling threshold based ePA policy through defaults write", buf, 2u);
    }
  }
}

void sub_100522764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1005227B0(_BYTE *a1, uint64_t a2, char a3, int a4)
{
  NSObject *v8;
  char *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  int v27;
  int v28;
  const char *v29;
  NSObject *v30;
  uint32_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int16 v40;
  uint8_t buf[4];
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;

  v40 = 0;
  v39 = 0;
  sub_100522470((uint64_t)a1, a4, a1 + 337, &v40, &v39, (_BYTE *)&v40 + 1, a2);
  if (a1[337])
  {
    v8 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "ePA disabled by defaults write", buf, 2u);
    }
    return;
  }
  sub_1000438A4();
  if (!sub_1003317F8())
  {
    sub_1000438A4();
    if (!sub_1003316B4())
      return;
    v18 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Enable EPA for Marconi", buf, 2u);
    }
    v19 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v19 + 192))(v19, a2, 2, 0, 30, 10);
    goto LABEL_34;
  }
  v9 = a1 + 870;
  sub_100510480((uint64_t)a1, a2, a4, a1 + 870);
  v10 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 160))(v10))
  {
    v11 = sub_10005F864();
    if (a4 == 1)
      v12 = -75;
    else
      v12 = -80;
    if (v11 == 148)
      v13 = 4294967197;
    else
      v13 = v12;
    v14 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *v9;
      *(_DWORD *)buf = 67109888;
      v42 = HIBYTE(v40);
      v43 = 1024;
      v44 = v15;
      v45 = 1024;
      v46 = v13;
      v47 = 1024;
      v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Enabling beamforming, policy: %#x, iPA-Beamforming RSSI threshold: %d dBm, ePA-Beamforming RSSI threshold: %d dBm, beamforming gain threshold: %d dB", buf, 0x1Au);
    }
    if (qword_100977B18 != -1)
      dispatch_once(&qword_100977B18, &stru_100935C30);
    v16 = sub_1002BD7B0();
    if ((_DWORD)v16)
    {
      v17 = sub_100522C4C(v16, a2, HIBYTE(v40), *v9, 0, v13, -70, 0);
    }
    else
    {
      v32 = sub_1000438A4();
      v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v32 + 136))(v32, 0, a2, HIBYTE(v40), *v9, 0, v13);
    }
    sub_100522EA4(v17, a2, 1);
    v33 = sub_1000438A4();
    if ((*(_DWORD *)(v33 + 712) - 24) > 0x7B7)
      v34 = 2;
    else
      v34 = 4;
    sub_100523034(v33, v34, a2, 1);
    goto LABEL_34;
  }
  v20 = a1 + 868;
  v21 = a1 + 869;
  sub_1005106B0((uint64_t)a1, a3, a1 + 868, a1 + 869);
  sub_100510734((uint64_t)a1);
  sub_1000438A4();
  v22 = sub_100331ADC();
  v23 = a1[869];
  v24 = qword_1009997E0;
  v25 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
  v26 = HIBYTE(v40);
  if (v22 == v23)
  {
    if (v25)
    {
      v27 = *v9;
      v28 = 25 * *v20;
      *(_DWORD *)buf = 67109888;
      v42 = HIBYTE(v40);
      v43 = 1024;
      v44 = v27;
      v45 = 1024;
      v46 = v28;
      v47 = 1024;
      v48 = 25 * v22;
      v29 = "Enabling ePA, policy: %#x, Threshold: %d dBm, Tx power high: %d, low: %d";
      v30 = v24;
      v31 = 26;
LABEL_30:
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
    }
  }
  else if (v25)
  {
    v35 = *v9;
    v36 = 25 * *v20;
    *(_DWORD *)buf = 67110144;
    v42 = HIBYTE(v40);
    v43 = 1024;
    v44 = v35;
    v45 = 1024;
    v46 = v36;
    v47 = 1024;
    v48 = 25 * v23;
    v49 = 1024;
    v50 = 25 * v22;
    v29 = "Enabling ePA, policy: %#x, Threshold: %d dBm, Tx power high: %d, medium: %d, low (unused): %d";
    v30 = v24;
    v31 = 32;
    goto LABEL_30;
  }
  v37 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v37 + 112))(v37, a2, 1, v26, *v20, *v21, *v9);
  v38 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 128))(v38, 1);
LABEL_34:
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100935BF0);
  sub_100497FB4((uint64_t)off_100977A70, a2, 0xFFFFFFFFLL, 0, 702, 0);
}

uint64_t sub_100522C4C(uint64_t a1, uint64_t a2, int a3, char a4, char a5, char a6, char a7, int a8)
{
  int v15;
  char v17;
  int v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  unint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  void *__p[2];
  char v32;
  int v33;
  _QWORD v34[2];
  char v35;
  uint8_t buf[8];
  char v37;

  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  v15 = sub_10043F854(a2);
  if (v15 == 22 || v15 == 17)
    v17 = 60;
  else
    v17 = 45;
  if (a8)
    LOBYTE(v18) = 75;
  else
    LOBYTE(v18) = v17;
  v33 = 0;
  v19 = sub_100027F68();
  sub_100091AE8(buf, "ePA");
  sub_100091AE8(__p, "iPAMaxThreshold");
  v20 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v19 + 88))(v19, buf, __p, &v33);
  if (v32 < 0)
    operator delete(__p[0]);
  if ((v37 & 0x80000000) == 0)
  {
    if (!v20)
      goto LABEL_18;
LABEL_16:
    v18 = -v33;
    v21 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined iPA-Max threshold to -%d dBm through defaults write", buf, 8u);
    }
    goto LABEL_18;
  }
  operator delete(*(void **)buf);
  if (v20)
    goto LABEL_16;
LABEL_18:
  v22 = 0;
  v23 = 0;
  LOBYTE(v34[0]) = 2;
  v24 = 1;
  while (1)
  {
    v25 = v24;
    v26 = (unint64_t)&v34[v23];
    *(_BYTE *)(v26 + 1) = v23;
    *(_WORD *)(v26 + 2) = 6;
    *(_BYTE *)(v26 + 4) = *(_BYTE *)(v26 + 4) & 0xF8 | a3 & 7;
    *(_BYTE *)(v26 + 5) = v18;
    *(_BYTE *)(v26 + 6) = a4;
    v27 = (_BYTE *)(v26 | 7);
    v28 = (_BYTE *)(v26 + 8);
    if (a3)
    {
      if ((v22 & 1) != 0)
        break;
    }
    v24 = 0;
    *v27 = a6;
    *v28 = a5;
    v22 = 1;
    v23 = 1;
    if ((v25 & 1) == 0)
      goto LABEL_24;
  }
  *v27 = a7;
  *v28 = a5;
LABEL_24:
  v29 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v29 + 152))(v29, a2, 17, v34);
}

void sub_100522E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100522EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  _BOOL4 v15;
  _BOOL4 v16;
  const char *v17;
  uint8_t *v18;
  __int16 v20;
  __int16 v21;
  uint8_t buf[2];
  __int16 v23;

  v5 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5))
    return 0;
  v6 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 392))(v6))
    return 0;
  v7 = qword_1009997E0;
  v8 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)a3)
  {
    if (!v8)
      goto LABEL_9;
    v23 = 0;
    v9 = "Enabling beamforming VSE Logging";
    v10 = (uint8_t *)&v23;
  }
  else
  {
    if (!v8)
      goto LABEL_9;
    *(_WORD *)buf = 0;
    v9 = "Disabling beamforming VSE Logging";
    v10 = buf;
  }
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, v10, 2u);
LABEL_9:
  v11 = sub_1000438A4();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v11 + 136))(v11, 2, a2, a3, 0, 0, 0);
  v13 = qword_1009997E0;
  if (!(_DWORD)v12)
  {
    v16 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_INFO);
    if ((_DWORD)a3)
    {
      if (v16)
      {
        v21 = 0;
        v17 = "Beamforming VSE Logging enabled";
        v18 = (uint8_t *)&v21;
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, v17, v18, 2u);
      }
    }
    else if (v16)
    {
      v20 = 0;
      v17 = "Beamforming VSE Logging disabled";
      v18 = (uint8_t *)&v20;
      goto LABEL_20;
    }
    return 0;
  }
  v14 = v12;
  v15 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR);
  if ((_DWORD)a3)
  {
    if (v15)
      sub_1006FEB3C();
  }
  else if (v15)
  {
    sub_1006FEB9C();
  }
  return v14;
}

uint64_t sub_100523034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  NSObject *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  int v19;
  const char *v20;
  __int16 v21;
  const char *v22;

  v7 = (_DWORD)a2 == 4 || (_DWORD)a2 == 2;
  if ((_DWORD)a2 == 4 || (_DWORD)a2 == 2)
  {
    v8 = sub_100027F68();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 384))(v8))
      return 0;
  }
  v9 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 392))(v9) && v7)
    return 0;
  v13 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v14 = "Logging";
    if ((_DWORD)a2 == 1)
      v14 = "Global control";
    v15 = "Enable";
    if (!(_DWORD)a4)
      v15 = "Disable";
    v19 = 136315394;
    v20 = v14;
    v21 = 2080;
    v22 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Beamforming MRC %s %s", (uint8_t *)&v19, 0x16u);
  }
  v16 = sub_1000438A4();
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 160))(v16, a2, a3, a4);
  v11 = v17;
  if ((_DWORD)a2 == 1 && (_DWORD)v17)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006FEBFC();
  }
  else if ((_DWORD)v17)
  {
    v18 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR);
    if ((_DWORD)a4)
    {
      if (v18)
        sub_1006FEC78();
    }
    else if (v18)
    {
      sub_1006FECD8();
    }
  }
  return v11;
}

uint64_t sub_100523210(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15[16];
  uint8_t buf[16];

  sub_1000438A4();
  if (sub_1003317F8())
  {
    v3 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Disable Enhanced Power save ", buf, 2u);
    }
    v4 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 160))(v4))
    {
      v5 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Disable Enhanced Power and beamforming", v15, 2u);
      }
      if (qword_100977B18 != -1)
        dispatch_once(&qword_100977B18, &stru_100935C30);
      v6 = sub_1002BD7B0();
      if ((_DWORD)v6)
      {
        v7 = sub_100522C4C(v6, a2, 0, -69, 0, -80, -70, 0);
      }
      else
      {
        v12 = sub_1000438A4();
        v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 136))(v12, 0, a2, 0, 4294967227, 0, 4294967216);
      }
      sub_100522EA4(v7, a2, 0);
      v13 = sub_1000438A4();
      if ((*(_DWORD *)(v13 + 712) - 24) > 0x7B7)
        v14 = 2;
      else
        v14 = 4;
      sub_100523034(v13, v14, a2, 0);
    }
    else
    {
      v10 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v10 + 112))(v10, a2, 1, 0, 0, 0, 4294967227);
      v11 = sub_1000438A4();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 128))(v11, 0);
    }
  }
  else
  {
    sub_1000438A4();
    result = sub_1003316B4();
    if (!(_DWORD)result)
      return result;
    v9 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v9 + 192))(v9, a2, 0, 0, 0, 0);
  }
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100935BF0);
  return sub_100497FB4((uint64_t)off_100977A70, a2, 0xFFFFFFFFLL, 0, 703, 0);
}

void sub_100523454(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  const char *v19;
  const char *v20;
  unsigned __int16 *v21;
  NSObject *v22;
  NSObject *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  _BOOL4 v34;
  const char *v35;
  NSObject *v36;
  uint32_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  NSObject *v41;
  const char *v42;
  const char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  const char *v52;

  v8 = sub_10003BE44();
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 136))(v8);
  if (a2 && v9)
  {
    if (*(_BYTE *)(a1 + 336))
    {
      v48 = 0;
      sub_100043758(&v48);
      v10 = sub_100185E60(a2 + 128);
      sub_10004339C(&v48);
      v11 = sub_10003BE44();
      if ((((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 160))(v11) | v10) & 1) == 0)
      {
        v12 = sub_100027F68();
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 352))(v12))
        {
          v18 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          {
            v19 = "A2DP";
            if (a4 == 1)
              v19 = "HFP";
            v20 = "started";
            if (!a3)
              v20 = "stopped";
            *(_DWORD *)buf = 136315394;
            v50 = v19;
            v51 = 2080;
            v52 = v20;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%s stream %s: Diversity inactive since role is peripheral or not supporting TxBF", buf, 0x16u);
          }
          goto LABEL_72;
        }
      }
      v13 = *(_DWORD *)(sub_1000438A4() + 712);
      if (!a3)
      {
        v16 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          v17 = "A2DP";
          if (a4 == 1)
            v17 = "HFP";
          *(_DWORD *)buf = 136315138;
          v50 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%s stream stopped: Disabling diversity", buf, 0xCu);
        }
        if (v13 <= 0x13)
          sub_100523D60(a1, 0, 3);
        goto LABEL_72;
      }
      sub_10006D81C(&v48);
      if (a4 == 1)
      {
        v14 = sub_10019AEFC(a2 + 128);
      }
      else
      {
        if (a4 != 2)
        {
          v21 = 0;
          goto LABEL_27;
        }
        v14 = sub_10019AEA4(a2 + 128);
      }
      v21 = (unsigned __int16 *)v14;
LABEL_27:
      if (sub_10043FE04(a2) == 2 || sub_10043FE04(a2) == 3)
      {
        v22 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Low Latency Traffic detected, use ACL Connection instead", buf, 2u);
        }
        v21 = (unsigned __int16 *)sub_10019AEA4(a2 + 128);
      }
      sub_10004339C(&v48);
      if (!v21)
        goto LABEL_72;
      v23 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v24 = "A2DP";
        if (a4 == 1)
          v24 = "HFP";
        *(_DWORD *)buf = 136315138;
        v50 = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%s stream started: Enabling diversity/TxBF", buf, 0xCu);
      }
      if (v13 <= 0x13)
        sub_100523D60(a1, v21, 3);
      v25 = sub_10003BE44();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 144))(v25) & 1) == 0)
      {
        v26 = sub_10003BE44();
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 152))(v26))
          goto LABEL_66;
      }
      v27 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Platform supports enhanced diversity, configuring antenna pair before enabling diversity", buf, 2u);
      }
      v28 = sub_100027F68();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 368))(v28))
      {
        v29 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Warning: Forcing enhanced diversity antenna pair via defaults write", buf, 2u);
        }
        v30 = sub_100027F68();
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 376))(v30);
        v32 = sub_100523EC8(a1, v31);
        v33 = qword_1009997E0;
        v34 = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT);
        if (v32)
        {
          if (v34)
          {
            *(_WORD *)buf = 0;
            v35 = "Warning: Forcing enhanced diversity antenna pair via defaults write failed";
            v36 = v33;
            v37 = 2;
LABEL_65:
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v35, buf, v37);
          }
LABEL_66:
          if (v13 < 0x14)
            v44 = 5;
          else
            v44 = 6;
          v45 = sub_100027F68();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 320))(v45))
          {
            v46 = sub_100027F68();
            v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 328))(v46);
          }
          v47 = sub_100523D60(a1, v21, v44);
          sub_100524178(v47, v21, 1);
LABEL_72:
          sub_100043728(&v48);
          return;
        }
        if (!v34)
          goto LABEL_66;
        if (*(_BYTE *)(a1 + 860))
          v43 = "default";
        else
          v43 = "non-default";
        *(_DWORD *)buf = 136315138;
        v50 = v43;
        v35 = "Warning: Enhanced diversity antenna pair set to %s config at stream start based on defaults write";
      }
      else
      {
        v38 = sub_100038E50();
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 248))(v38);
        v40 = v39;
        if (v39 >= 2 && v39 != *(_DWORD *)(a1 + 864))
        {
          v41 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Device orientation outdated, updating orientation first", buf, 2u);
          }
          *(_DWORD *)(a1 + 864) = v40;
        }
        sub_100523FF4(a1);
        v33 = qword_1009997E0;
        if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          goto LABEL_66;
        if (*(_BYTE *)(a1 + 860))
          v42 = "default";
        else
          v42 = "non-default";
        *(_DWORD *)buf = 136315138;
        v50 = v42;
        v35 = "Enhanced diversity antenna pair set to %s config at stream start based on orientation";
      }
      v36 = v33;
      v37 = 12;
      goto LABEL_65;
    }
    v15 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Stack is not ready, cannot update diversity settings", buf, 2u);
    }
  }
}

void sub_100523A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_100523A80(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100935D08);
  sub_1005D458C((uint64_t)off_10097AB00, v1 + 16);
}

void sub_100523AD0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100935D08);
  sub_1005D4648((uint64_t)off_10097AB00, v1 + 16);
}

uint64_t sub_100523B20()
{
  _BOOL8 v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  __int16 v5;
  uint8_t buf[4];
  _BOOL4 v7;
  uint64_t v8;
  __int16 v9;

  v9 = 0;
  v8 = 0;
  v5 = 10;
  v0 = sub_10005F864() == 83 || sub_10005F864() == 28;
  v1 = sub_1000438A4();
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BOOL8, _QWORD, _QWORD, __int16 *, uint64_t *))(*(_QWORD *)v1 + 912))(v1, 4095, 2, v0, 0, 0, &v5, &v8);
  v3 = qword_1009997E0;
  if ((_DWORD)v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006FED38();
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v7 = v0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Default BT antenna set to %d", buf, 8u);
  }
  return v2;
}

uint64_t sub_100523C50(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  __int16 v7;
  uint8_t buf[4];
  int v9;
  uint64_t v10;
  __int16 v11;

  v11 = 0;
  v10 = 0;
  v7 = 10;
  v3 = sub_1000438A4();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, __int16 *, uint64_t *))(*(_QWORD *)v3 + 912))(v3, 4095, 6, a2, 0, 0, &v7, &v10);
  v5 = qword_1009997E0;
  if ((_DWORD)v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006FED9C();
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Diversity follow mode set to %d", buf, 8u);
  }
  return v4;
}

uint64_t sub_100523D60(uint64_t a1, unsigned __int16 *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;

  if (a2)
    v5 = *a2;
  else
    v5 = 4095;
  v6 = sub_10003BE44();
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 160))(v6);
  v8 = a3 > 5;
  v9 = sub_1000438A4();
  if ((v8 & v7) != 0)
    v10 = -125;
  else
    v10 = 0;
  if ((v8 & v7) != 0)
    v11 = 131;
  else
    v11 = 0;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 912))(v9, v5, 1, a3, 0, v11, 0, 0);
  v13 = qword_1009997E0;
  if ((_DWORD)v12)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006FEDFC();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_INFO))
    {
      v15[0] = 67109632;
      v15[1] = a3;
      v16 = 1024;
      v17 = v5;
      v18 = 1024;
      v19 = v10;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Diversity mode %d set on handle %d with beamforming/diversity threshold %d", (uint8_t *)v15, 0x14u);
    }
    *(_DWORD *)(a1 + 856) = a3;
  }
  return v12;
}

uint64_t sub_100523EC8(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  __int16 v8;
  uint8_t buf[4];
  int v10;
  uint64_t v11;
  __int16 v12;

  v12 = 0;
  v11 = 0;
  v8 = 10;
  v4 = sub_1000438A4();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, __int16 *, uint64_t *))(*(_QWORD *)v4 + 912))(v4, 4095, 8, 1, a2, 0, &v8, &v11);
  if ((_DWORD)v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006FEE5C();
  }
  else
  {
    *(_BYTE *)(a1 + 860) = a2 == 1;
    v6 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Diversity antenna pair set to (0, %d)", buf, 8u);
    }
  }
  return v5;
}

void sub_100523FF4(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  int v5;
  NSObject *v6;
  int v7;
  _DWORD v8[2];
  __int16 v9;
  int v10;

  v2 = 1;
  v3 = sub_10005F864();
  if (v3 > 72)
  {
    if (v3 > 124)
    {
      if (v3 == 125 || v3 == 127)
        return;
      goto LABEL_12;
    }
    if ((v3 - 73) >= 2)
    {
      if (v3 == 84)
      {
        if (*(_DWORD *)(a1 + 864) == 7)
          v2 = 1;
        else
          v2 = 2;
      }
      goto LABEL_12;
    }
  }
  else
  {
    if ((v3 - 67) < 2)
    {
LABEL_5:
      v4 = (*(_DWORD *)(a1 + 864) & 0xFFFFFFFE) == 6;
      goto LABEL_9;
    }
    if ((v3 - 69) >= 2)
    {
      if ((v3 - 71) >= 2)
        goto LABEL_12;
      goto LABEL_5;
    }
  }
  v4 = *(_DWORD *)(a1 + 864) == 2;
LABEL_9:
  if (v4)
    v2 = 2;
  else
    v2 = 1;
LABEL_12:
  v5 = sub_100523EC8(a1, v2);
  v6 = qword_1009997E0;
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006FEEBC();
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 864);
    v8[0] = 67109376;
    v8[1] = v7;
    v9 = 1024;
    v10 = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device orientation set to %d, setting diversity antenna to %d", (uint8_t *)v8, 0xEu);
  }
}

uint64_t sub_100524178(uint64_t a1, unsigned __int16 *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  __int16 v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;
  __int16 v18;

  v5 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 336))(v5))
    return 0;
  if (a3)
  {
    v6 = sub_100027F68();
    a3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 344))(v6);
  }
  v7 = *a2;
  v18 = 0;
  v17 = 0;
  v12 = 10;
  v8 = sub_1000438A4();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, __int16 *, uint64_t *))(*(_QWORD *)v8 + 912))(v8, v7, 3, a3, 0, 0, &v12, &v17);
  v10 = qword_1009997E0;
  if ((_DWORD)v9)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006FEF2C();
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109376;
    v14 = a3;
    v15 = 1024;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Diversity log mode %d set on handle %d", buf, 0xEu);
  }
  return v9;
}

uint64_t *sub_1005242D4(uint64_t a1, unint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, _DWORD *a6, uint64_t a7)
{
  uint64_t *result;
  unsigned __int32 v15;
  unsigned __int32 v16;
  unsigned __int32 v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  __n128 v23;
  int v24;

  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100935BB0);
  v23 = 0uLL;
  v24 = 0;
  result = (uint64_t *)sub_1004CD740((uint64_t)off_10097AA38, a2, &v23);
  if ((_DWORD)result)
  {
    v16 = v23.n128_u32[0];
    v15 = v23.n128_u32[1];
    v17 = v23.n128_u32[3];
    *(_DWORD *)(a1 + 1044) = v23.n128_u32[1];
    *(_DWORD *)(a1 + 1048) = v16;
    *(_DWORD *)(a1 + 1064) = v17;
    *a3 = v15 - *(_DWORD *)(a1 + 1056);
    *a4 = v16 - *(_DWORD *)(a1 + 1060);
    *a6 = v17 - *(_DWORD *)(a1 + 1068);
    v18 = *(_DWORD *)(a1 + 1052);
    if (v18 == 128)
    {
      v19 = *a4;
      if (*a4 <= 0x41)
      {
        v20 = 66;
        goto LABEL_10;
      }
    }
    else if (v18 == 256)
    {
      v19 = *a4;
      if (*a4 <= 0x84)
      {
        v20 = 133;
LABEL_10:
        *a5 = v20 - v19;
      }
    }
    *(_DWORD *)(a1 + 1056) = v15;
    *(_DWORD *)(a1 + 1060) = v16;
    *(_DWORD *)(a1 + 1068) = v17;
    v21 = sub_100027F68();
    result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if ((_DWORD)result)
    {
      v22 = *(_DWORD *)(a1 + 1052);
      if ((v22 - 127) < 3 || v22 == 256)
        return sub_100524444((uint64_t *)a1, a2, *a3, *a4, *a5, v23.n128_i32[2], (uint64_t)&v23, a7);
    }
  }
  return result;
}

uint64_t *sub_100524444(uint64_t *result, unint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  _BOOL4 v21;
  unsigned int v22;
  float v23;
  unsigned int v24;
  uint64_t **v25;
  uint64_t *v26;
  NSObject *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  NSObject *v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  uint8_t buf[8];
  __int16 v37;
  unsigned int v38;
  __int16 v39;
  unsigned int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;

  v35 = a2;
  if (a4 | a3 | a5)
  {
    v14 = result;
    v15 = *(char *)(a8 + 6);
    v16 = v15 < -90;
    if (v15 >= -90)
      v17 = 1;
    else
      v17 = 2;
    if (*(char *)(a8 + 217) > -85)
      v16 = v17;
    if (*(char *)(a8 + 218) > -85)
      ++v16;
    if (*(char *)(a8 + 219) > -85)
      ++v16;
    if (v16 <= 1)
      v18 = 15;
    else
      v18 = 45;
    v19 = v18 * (a5 + a4) / 0x64;
    if (v19 < a3
      || (a4 / 0x14 >= a5 ? (v20 = 1) : (v20 = 2),
          a6 ? (v21 = v20) : (v21 = a4 / 0x14 < a5),
          v19 < *(unsigned __int16 *)(a8 + 28)))
    {
      v21 = 1;
    }
    HIWORD(v22) = 17096;
    LOWORD(v22) = *(_WORD *)(a8 + 70);
    v23 = (float)((float)(*(unsigned __int16 *)(a8 + 64)
                        + *(unsigned __int16 *)(a8 + 52)
                        + *(unsigned __int16 *)(a8 + 74))
                * 100.0)
        / (float)v22;
    if (v23 <= 20.0)
    {
      if (v23 < 5.0)
        *((_BYTE *)result + 376) = 0;
    }
    else
    {
      v24 = ++*((_BYTE *)result + 376);
      if (v24 >= 0x3C)
        sub_1005159D4((uint64_t)result, a2, 60);
    }
    v25 = (uint64_t **)(v14 + 23);
    if (!v21)
    {
      *(_QWORD *)buf = &v35;
      v34 = v25;
LABEL_36:
      result = sub_10002252C(v34, &v35, (uint64_t)&unk_100740F58, (uint64_t **)buf);
      *(_DWORD *)(result[5] + 100) = 0;
      return result;
    }
    *(_QWORD *)buf = &v35;
    v26 = sub_10002252C(v25, &v35, (uint64_t)&unk_100740F58, (uint64_t **)buf);
    ++*(_DWORD *)(v26[5] + 100);
    v27 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)buf = &v35;
      v28 = *(_DWORD *)(sub_10002252C(v25, &v35, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 100);
      *(_QWORD *)buf = &v35;
      v29 = *(_DWORD *)(sub_10002252C(v25, &v35, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 96);
      v30 = *(unsigned __int8 *)(a7 + 16);
      v31 = *(unsigned __int16 *)(a8 + 28);
      *(_DWORD *)buf = 67110912;
      *(_DWORD *)&buf[4] = a3;
      v37 = 1024;
      v38 = a4;
      v39 = 1024;
      v40 = a5;
      v41 = 1024;
      v42 = a6;
      v43 = 1024;
      v44 = v28;
      v45 = 1024;
      v46 = v29;
      v47 = 1024;
      v48 = v30;
      v49 = 1024;
      v50 = v31;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "AudioQuality PLC %u,RxCnt %u,Miss %u,LengthErr %u,Credit %u, total credit:%u,isHDR:%u,NAK %u", buf, 0x32u);
    }
    *(_QWORD *)buf = &v35;
    result = sub_10002252C(v25, &v35, (uint64_t)&unk_100740F58, (uint64_t **)buf);
    if (*(_DWORD *)(result[5] + 100) >= 0xAu)
    {
      v32 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "AudioQuality need to trigger banner", buf, 2u);
      }
      *(_QWORD *)buf = &v35;
      v33 = sub_10002252C(v25, &v35, (uint64_t)&unk_100740F58, (uint64_t **)buf);
      ++*(_DWORD *)(v33[5] + 96);
      *(_QWORD *)buf = &v35;
      v34 = v25;
      goto LABEL_36;
    }
  }
  return result;
}

void sub_100524808(uint64_t a1, int a2, int a3, int a4)
{
  NSObject *v7;
  const __CFString *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  id v19;
  NSObject *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  __CFString *v31;
  int v32;
  int v33;
  uint8_t buf[4];
  const __CFString *v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;

  v7 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    if (a3 > 4u)
      v8 = &stru_100941758;
    else
      v8 = (const __CFString *)*((_QWORD *)&off_100935D48 + (char)a3);
    *(_DWORD *)buf = 138412290;
    v35 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump: ----------Use Case-----------------%@ Target ePA Tx Power,Ant0(Ant1)----------------Power Caps----------------", buf, 0xCu);
  }
  if (a2)
  {
    v9 = 0;
    v10 = 4 * a3 + 4;
    v11 = v10 + a4;
    v29 = a4 + 23;
    v12 = v10;
    do
    {
      v13 = 0;
      v32 = 0;
      v33 = 0;
      v14 = 1;
      do
      {
        v15 = v14;
        v16 = *(unsigned __int8 *)(a1 + 392 + (v12 | (2 * v13)));
        buf[v13 - 4] = v16;
        v17 = *(unsigned __int8 *)(a1 + 392 + v11 + 2 * (int)v13);
        *((_BYTE *)&v32 + v13 + 2) = v17;
        v18 = *(unsigned __int8 *)(a1 + 392 + (v29 + v9 + v13 * a2));
        *((_BYTE *)&v32 + v13) = v18;
        if (v16 >= v18)
          v16 = v18;
        if (v17 >= v16)
          LOBYTE(v17) = v16;
        buf[v13 - 2] = v17;
        v13 = 1;
        v14 = 0;
      }
      while ((v15 & 1) != 0);
      v19 = sub_1005215D0(a1, v9);
      v31 = (__CFString *)objc_claimAutoreleasedReturnValue(v19);
      v20 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        LOBYTE(v22) = HIBYTE(v33);
        LOBYTE(v21) = BYTE2(v33);
        LOBYTE(v24) = BYTE1(v33);
        LOBYTE(v23) = v33;
        LOBYTE(v26) = HIBYTE(v32);
        LOBYTE(v25) = BYTE2(v32);
        LOBYTE(v28) = BYTE1(v32);
        LOBYTE(v27) = v32;
        *(_DWORD *)buf = 138414338;
        v35 = v31;
        v36 = 2048;
        v37 = (double)v21 * 0.25;
        v38 = 2048;
        v39 = (double)v22 * 0.25;
        v40 = 2048;
        v41 = (double)v23 * 0.25;
        v42 = 2048;
        v43 = (double)v24 * 0.25;
        v44 = 2048;
        v45 = (double)v25 * 0.25;
        v46 = 2048;
        v47 = (double)v26 * 0.25;
        v48 = 2048;
        v49 = (double)v27 * 0.25;
        v50 = 2048;
        v51 = (double)v28 * 0.25;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "statedump: %@          %.2f(%.2f) dBm          [%.2f(%.2f),%.2f(%.2f),%.2f(%.2f)]", buf, 0x5Cu);
      }

      ++v9;
    }
    while (v9 != a2);
  }
}

void sub_100524AD4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  NSObject *v14;
  const __CFString *v15;
  uint8_t buf[4];
  const __CFString *v17;
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;

  v6 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump: -------------------------------Link------------------Target iPA Tx Power,Ant0(Ant1)-------------------------", buf, 2u);
  }
  if (a2)
  {
    v7 = 0;
    v8 = 0;
    v9 = a3;
    v10 = a2;
    v11 = (unsigned __int8 *)(a1 + 397);
    do
    {
      if (*(v11 - 2) >= v11[v9 - 2])
        v12 = v11[v9 - 2];
      else
        v12 = *(v11 - 2);
      if (*v11 >= v11[v9])
        v13 = v11[v9];
      else
        v13 = *v11;
      v14 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v15 = &stru_100941758;
        if (v8 <= 4u)
          v15 = *(const __CFString **)((char *)&off_100935D48 + (v7 >> 53));
        *(_DWORD *)buf = 138412802;
        v17 = v15;
        v18 = 2048;
        v19 = (double)v12 * 0.25;
        v20 = 2048;
        v21 = (double)v13 * 0.25;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "statedump:                              %5@                         %4.2f(%4.2f) dBm", buf, 0x20u);
      }
      v11 += 4;
      ++v8;
      v7 += 0x100000000000000;
    }
    while (v10 != v8);
  }
}

void sub_100524C90(uint64_t a1)
{
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  NSObject *v6;
  _DWORD v7[2];

  v2 = *(_DWORD *)(sub_1000438A4() + 712);
  if ((v2 - 1) > 0x7CE)
  {
    if ((v2 - 2000) <= 0x7CF && *(_WORD *)(a1 + 820) && *(_WORD *)(a1 + 822) && *(_WORD *)(a1 + 824))
    {
      sub_100521BD8((unsigned __int8 *)a1, v2);
      sub_100521724((unsigned __int8 *)a1, v2);
    }
  }
  else
  {
    v3 = *(unsigned __int16 *)(a1 + 818);
    if (*(_WORD *)(a1 + 818))
    {
      if (v3 <= 0xD3)
        v4 = 8;
      else
        v4 = 12;
      if (v3 <= 0xD3)
        v5 = 3;
      else
        v5 = 5;
      v6 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v7[0] = 67109120;
        v7[1] = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump: ===================================== Bluetooth Tx Power Targets (CC%d) ====================================", (uint8_t *)v7, 8u);
      }
      sub_100524808(a1, v4, 1, 23);
      if (v3 >= 0xD4)
      {
        sub_100524808(a1, 12, 3, 23);
        sub_100524808(a1, 12, 4, 23);
      }
      sub_100524AD4(a1, v5, 0x17u);
    }
  }
}

void sub_100524E38(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------- Audio Link Manager -------------------", v3, 2u);
  }
  sub_100524C90(a1);
}

void sub_100524EA8(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v4 = off_100993300;
  v11 = off_100993300;
  if (!off_100993300)
  {
    v5 = sub_10052A708();
    v4 = dlsym(v5, "tailspin_kdbg_filter_subclass_set");
    v9[3] = (uint64_t)v4;
    off_100993300 = v4;
  }
  _Block_object_dispose(&v8, 8);
  if (v4)
  {
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4)(a1, 1, a2, 1);
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void BT::soft_tailspin_kdbg_filter_subclass_set(tailspin_config_t, uint8_t, uint8_t, BOOL)"));
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("AudioLinkManager.mm"), 112, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_100524FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100524FD8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = off_100993308;
  v9 = off_100993308;
  if (!off_100993308)
  {
    v3 = sub_10052A708();
    v2 = dlsym(v3, "tailspin_config_apply_sync");
    v7[3] = (uint64_t)v2;
    off_100993308 = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    ((void (*)(uint64_t))v2)(a1);
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "BOOL BT::soft_tailspin_config_apply_sync(const tailspin_config_t)"));
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("AudioLinkManager.mm"), 124, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1005250C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005250F8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v2 = off_100993310;
  v9 = off_100993310;
  if (!off_100993310)
  {
    v3 = sub_10052A708();
    v2 = dlsym(v3, "tailspin_config_free");
    v7[3] = (uint64_t)v2;
    off_100993310 = v2;
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    ((void (*)(uint64_t))v2)(a1);
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void BT::soft_tailspin_config_free(tailspin_config_t)"));
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("AudioLinkManager.mm"), 118, CFSTR("%s"), dlerror());

    __break(1u);
  }
}

void sub_1005251E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100525218(uint64_t a1, int a2)
{
  NSObject *v2;
  _QWORD v3[5];
  int v4;

  v2 = *(NSObject **)(a1 + 248);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100525274;
  v3[3] = &unk_1009173C0;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100525274(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 40);
  if (*(_DWORD *)(v2 + 864) != v3)
  {
    *(_DWORD *)(v2 + 864) = v3;
    sub_100525298(v2);
  }
}

void sub_100525298(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint8_t v14[16];

  if (*(_BYTE *)(a1 + 336))
  {
    v2 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 152))(v2))
    {
      sub_10050FF20(a1);
    }
    else
    {
      v4 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 144))(v4))
      {
        if (*(_QWORD *)(a1 + 200))
        {
          v5 = *(_QWORD **)(a1 + 184);
          if (v5 != (_QWORD *)(a1 + 192))
          {
            v6 = 0;
            while (1)
            {
              v7 = v5[5];
              v8 = *(unsigned __int8 *)(v7 + 72);
              v9 = *(_BYTE *)(v7 + 72) != 0;
              if (v8)
                break;
              v10 = (_QWORD *)v5[1];
              if (v10)
              {
                do
                {
                  v11 = v10;
                  v10 = (_QWORD *)*v10;
                }
                while (v10);
              }
              else
              {
                do
                {
                  v11 = (_QWORD *)v5[2];
                  v12 = *v11 == (_QWORD)v5;
                  v5 = v11;
                }
                while (!v12);
              }
              v6 |= v9;
              v5 = v11;
              if (v11 == (_QWORD *)(a1 + 192))
              {
                if ((v6 & 1) == 0)
                  return;
                break;
              }
            }
            if (*(_DWORD *)(a1 + 856) != 3)
            {
              v13 = sub_100027F68();
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 368))(v13) & 1) == 0)
                sub_100523FF4(a1);
            }
          }
        }
      }
    }
  }
  else
  {
    v3 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Stack is not ready, cannot update device orientation", v14, 2u);
    }
  }
}

void sub_1005253EC(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[5];
  int v5;

  v2 = a1 - 64;
  v3 = *(NSObject **)(a1 + 184);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100525274;
  v4[3] = &unk_1009173C0;
  v4[4] = v2;
  v5 = a2;
  dispatch_async(v3, v4);
}

uint64_t sub_100525448(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  void **v18;
  int v19;
  void **v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  void *__p[2];
  char v27;
  unint64_t v28;
  uint8_t buf[4];
  void **v30;
  __int16 v31;
  int v32;

  v28 = a2;
  __p[0] = &v28;
  v3 = sub_10002252C((uint64_t **)(a1 + 184), &v28, (uint64_t)&unk_100740F58, (uint64_t **)__p);
  v4 = *(_QWORD *)(a1 + 1104);
  if (v4)
  {
    v5 = *(unsigned __int16 *)(v3[5] + 84);
    v6 = (_QWORD *)(a1 + 1104);
    v7 = a1 + 1104;
    do
    {
      v8 = *(unsigned __int16 *)(v4 + 32);
      v9 = v8 >= v5;
      if (v8 >= v5)
        v10 = (uint64_t *)v4;
      else
        v10 = (uint64_t *)(v4 + 8);
      if (v9)
        v7 = v4;
      v4 = *v10;
    }
    while (*v10);
    if ((_QWORD *)v7 != v6 && v5 >= *(unsigned __int16 *)(v7 + 32))
    {
      v11 = *(_QWORD **)(a1 + 1096);
      if (v11 != v6)
      {
        v12 = 0;
        while (1)
        {
          if (qword_1009778E8 != -1)
            dispatch_once(&qword_1009778E8, &stru_100935C90);
          v13 = *(_QWORD *)(v11[5] + 8);
          v14 = *(_WORD *)(v13 + 4);
          LODWORD(__p[0]) = *(_DWORD *)v13;
          WORD2(__p[0]) = v14;
          v15 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
          v16 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043F6EC(v15, (uint64_t)__p);
            v17 = v27;
            v18 = (void **)__p[0];
            v19 = sub_10044F6C4(v15);
            *(_DWORD *)buf = 136315394;
            v20 = __p;
            if (v17 < 0)
              v20 = v18;
            v30 = v20;
            v31 = 1024;
            v32 = v19;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Wireless Splitter %s spatial allowed %d", buf, 0x12u);
            if (v27 < 0)
              operator delete(__p[0]);
          }
          v21 = sub_10044F6C4(v15);
          if (v21 != 1)
            break;
          v22 = (_QWORD *)v11[1];
          if (v22)
          {
            do
            {
              v23 = v22;
              v22 = (_QWORD *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v23 = (_QWORD *)v11[2];
              v24 = *v23 == (_QWORD)v11;
              v11 = v23;
            }
            while (!v24);
          }
          v12 |= v21 == 1;
          v11 = v23;
          if (v23 == v6)
            return v12 & 1;
        }
      }
    }
  }
  v12 = 0;
  return v12 & 1;
}

void sub_100525688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005256AC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  double Current;
  uint64_t v8;
  int v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 1120);
  if (v2)
  {
    if (a2)
    {
      v4 = sub_100038E50();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 152))(v4, *(_QWORD *)(a1 + 208));
      v5 = sub_100038E50();
      sub_10043B4A8(v5 + 728, a1 + 32);
      v6 = **(unsigned __int8 **)(a1 + 208);
      Current = CFAbsoluteTimeGetCurrent();
      v8 = *(_QWORD *)(a1 + 1120);
      if (v6)
      {
        *(double *)(v8 + 16) = Current;
        *(_QWORD *)(v8 + 24) = 0;
      }
      else
      {
        *(double *)(v8 + 24) = Current;
        *(_QWORD *)(v8 + 16) = 0;
      }
    }
    else
    {
      v9 = **(unsigned __int8 **)(a1 + 208);
      v10 = CFAbsoluteTimeGetCurrent();
      v11 = 16;
      if (!v9)
        v11 = 24;
      *(_DWORD *)(v2 + 48) += (v10 - *(double *)(*(_QWORD *)(a1 + 1120) + v11));
      v12 = sub_100038E50();
      sub_1002B43D4(v12 + 728, a1 + 32);
      **(_BYTE **)(a1 + 208) = 1;
    }
  }
}

BOOL sub_100525780(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  NSObject *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  int *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  NSObject *v15;
  int v16;
  uint8_t *v17;
  uint8_t *v18;
  void **v19;
  void *__p[2];
  char v22;
  uint8_t buf[8];
  char v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint8_t v29[4];
  uint8_t *v30;
  __int16 v31;
  void **v32;

  v3 = a1[139];
  if (v3 < 2)
  {
    v7 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Wireless Splitter - getWirelessSplitterAddresses, disabled", buf, 2u);
    }
  }
  else
  {
    v5 = (_QWORD *)a1[138];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)v5[1];
      }
      while (v5);
    }
    else
    {
      v8 = a1 + 138;
      do
      {
        v6 = (_QWORD *)v8[2];
        v9 = *v6 == (_QWORD)v8;
        v8 = v6;
      }
      while (v9);
    }
    v10 = v6[5];
    v11 = *(int **)(*(_QWORD *)(a1[137] + 40) + 8);
    v12 = *((_WORD *)v11 + 2);
    v27 = *v11;
    v28 = v12;
    v13 = *(_QWORD *)(v10 + 8);
    v14 = *(_WORD *)(v13 + 4);
    LODWORD(v13) = *(_DWORD *)v13;
    v25 = v13;
    v26 = v14;
    *(_DWORD *)a2 = v27;
    *(_WORD *)(a2 + 4) = v12;
    *(_DWORD *)(a2 + 6) = v13;
    *(_WORD *)(a2 + 10) = v14;
    v15 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10046E9BC((unsigned __int8 *)&v27, buf);
      v16 = v24;
      v17 = *(uint8_t **)buf;
      sub_10046E9BC((unsigned __int8 *)&v25, __p);
      v18 = buf;
      if (v16 < 0)
        v18 = v17;
      if (v22 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      *(_DWORD *)v29 = 136315394;
      v30 = v18;
      v31 = 2080;
      v32 = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Wireless Splitter - getWirelessSplitterAddresses, enabled user1: %s user2: %s", v29, 0x16u);
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(*(void **)buf);
    }
    *a3 = 2;
  }
  return v3 > 1;
}

void sub_100525974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100525998(uint64_t a1@<X0>, char **a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v5;
  _QWORD *v6;
  __int16 v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *(_QWORD **)(a1 + 1096);
  v3 = (_QWORD *)(a1 + 1104);
  if (v2 != (_QWORD *)(a1 + 1104))
  {
    v5 = 0;
    v6 = a2 + 2;
    do
    {
      v7 = *((_WORD *)v2 + 16);
      if ((unint64_t)v5 >= *v6)
      {
        v8 = *a2;
        v9 = v5 - *a2;
        if (v9 <= -3)
          abort();
        v10 = v9 >> 1;
        v11 = *v6 - (_QWORD)v8;
        if (v11 <= (v9 >> 1) + 1)
          v12 = v10 + 1;
        else
          v12 = *v6 - (_QWORD)v8;
        if (v11 >= 0x7FFFFFFFFFFFFFFELL)
          v13 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
        {
          v14 = (char *)sub_1002B54AC((uint64_t)v6, v13);
          v8 = *a2;
          v5 = a2[1];
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[2 * v10];
        *(_WORD *)v15 = v7;
        v16 = v15 + 2;
        while (v5 != v8)
        {
          v17 = *((_WORD *)v5 - 1);
          v5 -= 2;
          *((_WORD *)v15 - 1) = v17;
          v15 -= 2;
        }
        *a2 = v15;
        a2[1] = v16;
        a2[2] = &v14[2 * v13];
        if (v8)
          operator delete(v8);
        v5 = v16;
      }
      else
      {
        *(_WORD *)v5 = v7;
        v5 += 2;
      }
      a2[1] = v5;
      v18 = (_QWORD *)v2[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v2[2];
          v20 = *v19 == (_QWORD)v2;
          v2 = v19;
        }
        while (!v20);
      }
      v2 = v19;
    }
    while (v19 != v3);
  }
}

void sub_100525AD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100525AF0(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100525B48;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_async(v1, block);
}

void sub_100525B48(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 342))
  {
    *(CFAbsoluteTime *)(v1 + 384) = CFAbsoluteTimeGetCurrent();
    *(_BYTE *)(v1 + 342) = 1;
  }
}

void sub_100525B7C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 248);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100525BD4;
  v3[3] = &unk_100918090;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_async(v2, v3);
}

uint64_t *sub_100525BD4(uint64_t *result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t *v3;
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  double Current;
  double v12;
  unint64_t *v13;

  v1 = result[4];
  if (!*(_BYTE *)(v1 + 341) && *(_BYTE *)(v1 + 342))
  {
    v3 = (unint64_t *)(result + 5);
    v2 = result[5];
    if (v2)
    {
      v4 = *(_QWORD **)(v1 + 192);
      if (v4)
      {
        v5 = (uint64_t **)(v1 + 184);
        v6 = (_QWORD *)(v1 + 192);
        do
        {
          v7 = v4[4];
          v8 = v7 >= v2;
          if (v7 >= v2)
            v9 = v4;
          else
            v9 = v4 + 1;
          if (v8)
            v6 = v4;
          v4 = (_QWORD *)*v9;
        }
        while (*v9);
        if (v6 != (_QWORD *)(v1 + 192) && v2 >= v6[4])
        {
          v13 = (unint64_t *)(result + 5);
          result = sub_10002252C(v5, v3, (uint64_t)&unk_100740F58, (uint64_t **)&v13);
          if (*(_QWORD *)(result[5] + 24))
          {
            v10 = *(_QWORD *)(v1 + 384);
            v13 = v3;
            *(_QWORD *)(*(_QWORD *)(sub_10002252C(v5, v3, (uint64_t)&unk_100740F58, (uint64_t **)&v13)[5] + 24) + 32) = v10;
            Current = CFAbsoluteTimeGetCurrent();
            v13 = v3;
            v12 = Current
                - *(double *)(*(_QWORD *)(sub_10002252C(v5, v3, (uint64_t)&unk_100740F58, (uint64_t **)&v13)[5] + 24)
                            + 32);
            v13 = v3;
            result = sub_10002252C(v5, v3, (uint64_t)&unk_100740F58, (uint64_t **)&v13);
            *(double *)(*(_QWORD *)(result[5] + 24) + 104) = v12;
          }
        }
      }
    }
    *(_BYTE *)(v1 + 341) = 1;
  }
  return result;
}

void sub_100525D2C(uint64_t a1, uint64_t a2, int a3, char a4)
{
  NSObject *v4;
  _QWORD block[6];
  int v6;
  char v7;

  v4 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100525D8C;
  block[3] = &unk_1009226D0;
  block[4] = a1;
  block[5] = a2;
  v7 = a4;
  v6 = a3;
  dispatch_async(v4, block);
}

uint64_t *sub_100525D8C(uint64_t *result)
{
  unint64_t v1;
  unint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  unint64_t *v18;

  v2 = (unint64_t *)(result + 5);
  v1 = result[5];
  if (v1)
  {
    v3 = result;
    v4 = result[4];
    v7 = *(_QWORD **)(v4 + 192);
    v5 = v4 + 192;
    v6 = v7;
    if (v7)
    {
      v8 = (uint64_t **)(v5 - 8);
      v9 = (_QWORD *)v5;
      do
      {
        v10 = v6[4];
        v11 = v10 >= v1;
        if (v10 >= v1)
          v12 = v6;
        else
          v12 = v6 + 1;
        if (v11)
          v9 = v6;
        v6 = (_QWORD *)*v12;
      }
      while (*v12);
      if (v9 != (_QWORD *)v5 && v1 >= v9[4])
      {
        v18 = (unint64_t *)(result + 5);
        result = sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)&v18);
        if (*(_QWORD *)result[5])
        {
          v18 = v2;
          v13 = sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)&v18);
          ++*(_QWORD *)(*(_QWORD *)v13[5] + 288);
          v18 = v2;
          v14 = sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)&v18);
          ++*(_QWORD *)(*(_QWORD *)v14[5] + 280);
          v15 = *((char *)v3 + 52);
          v18 = v2;
          v16 = sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)&v18);
          *(_QWORD *)(*(_QWORD *)v16[5] + 264) += v15;
          v17 = *((_DWORD *)v3 + 12);
          v18 = v2;
          result = sub_10002252C(v8, v2, (uint64_t)&unk_100740F58, (uint64_t **)&v18);
          *(_DWORD *)(*(_QWORD *)result[5] + 272) += v17;
        }
      }
    }
  }
  return result;
}

void sub_100525F0C(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  NSObject *v5;
  _QWORD v6[6];
  int v7;
  int v8;
  int v9;

  v5 = *(NSObject **)(a1 + 248);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100525F6C;
  v6[3] = &unk_10092A420;
  v6[4] = a1;
  v6[5] = a2;
  v7 = a3;
  v8 = a4;
  v9 = a5;
  dispatch_async(v5, v6);
}

uint64_t *sub_100525F6C(uint64_t *result)
{
  unint64_t v1;
  uint64_t *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  CFAbsoluteTime Current;
  CFAbsoluteTime v14;
  CFAbsoluteTime v15;
  CFAbsoluteTime v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;

  v2 = result + 5;
  v1 = result[5];
  if (v1)
  {
    v3 = (int *)result;
    v4 = result[4];
    v7 = *(_QWORD **)(v4 + 192);
    v5 = v4 + 192;
    v6 = v7;
    if (v7)
    {
      v8 = (uint64_t **)(v5 - 8);
      v9 = (_QWORD *)v5;
      do
      {
        v10 = v6[4];
        v11 = v10 >= v1;
        if (v10 >= v1)
          v12 = v6;
        else
          v12 = v6 + 1;
        if (v11)
          v9 = v6;
        v6 = (_QWORD *)*v12;
      }
      while (*v12);
      if (v9 != (_QWORD *)v5 && v1 >= v9[4])
      {
        v20 = result + 5;
        if (*(_QWORD *)sub_10002252C(v8, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v20)[5])
        {
          Current = CFAbsoluteTimeGetCurrent();
          v20 = v2;
          *(CFAbsoluteTime *)(*(_QWORD *)sub_10002252C(v8, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v20)[5]
                            + 200) = Current;
          v14 = CFAbsoluteTimeGetCurrent();
          v20 = v2;
          *(CFAbsoluteTime *)(*(_QWORD *)sub_10002252C(v8, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v20)[5]
                            + 216) = v14;
        }
        v20 = v2;
        result = sub_10002252C(v8, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v20);
        if (*(_QWORD *)(result[5] + 24))
        {
          v15 = CFAbsoluteTimeGetCurrent();
          v20 = v2;
          *(CFAbsoluteTime *)(*(_QWORD *)(sub_10002252C(v8, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v20)[5]
                                        + 24)
                            + 16) = v15;
          v16 = CFAbsoluteTimeGetCurrent();
          v20 = v2;
          *(CFAbsoluteTime *)(*(_QWORD *)(sub_10002252C(v8, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v20)[5]
                                        + 24)
                            + 40) = v16;
          v17 = v3[12];
          v20 = v2;
          *(_QWORD *)(*(_QWORD *)(sub_10002252C(v8, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v20)[5] + 24)
                    + 56) = v17;
          v18 = v3[13];
          v20 = v2;
          *(_QWORD *)(*(_QWORD *)(sub_10002252C(v8, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v20)[5] + 24)
                    + 64) = v18;
          v19 = v3[14];
          v20 = v2;
          result = sub_10002252C(v8, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v20);
          *(_DWORD *)(*(_QWORD *)(result[5] + 24) + 124) = v19;
        }
      }
    }
  }
  return result;
}

void sub_1005261A4(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  _QWORD block[6];
  int v5;

  v3 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100526200;
  block[3] = &unk_1009180B0;
  block[4] = a1;
  block[5] = a2;
  v5 = a3;
  dispatch_async(v3, block);
}

uint64_t *sub_100526200(uint64_t *result)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  CFAbsoluteTime Current;
  CFAbsoluteTime v12;
  double v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  CFAbsoluteTime v21;
  CFAbsoluteTime v22;
  double v23;
  unsigned int v24;
  double v25;
  unsigned int v26;
  int v27;
  uint64_t *v28;

  v2 = result + 5;
  v1 = result[5];
  if (v1)
  {
    v3 = (uint64_t *)result[4];
    v4 = (_QWORD *)v3[24];
    if (v4)
    {
      v5 = result;
      v6 = (uint64_t **)(v3 + 23);
      v7 = v3 + 24;
      do
      {
        v8 = v4[4];
        v9 = v8 >= v1;
        if (v8 >= v1)
          v10 = v4;
        else
          v10 = v4 + 1;
        if (v9)
          v7 = v4;
        v4 = (_QWORD *)*v10;
      }
      while (*v10);
      if (v7 != v3 + 24 && v1 >= v7[4])
      {
        v28 = result + 5;
        if (*(_QWORD *)sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5])
        {
          Current = CFAbsoluteTimeGetCurrent();
          v28 = v2;
          *(CFAbsoluteTime *)(*(_QWORD *)sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5]
                            + 208) = Current;
          v12 = CFAbsoluteTimeGetCurrent();
          v28 = v2;
          *(CFAbsoluteTime *)(*(_QWORD *)sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5]
                            + 224) = v12;
          v28 = v2;
          v13 = *(double *)(*(_QWORD *)sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5]
                          + 208);
          v28 = v2;
          v14 = v13
              - *(double *)(*(_QWORD *)sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5]
                          + 200);
          v28 = v2;
          v15 = *(_QWORD *)sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5];
          LODWORD(v16) = *(_DWORD *)(v15 + 232);
          *(_DWORD *)(v15 + 232) = (v14 + (double)v16);
          v28 = v2;
          v17 = *(double *)(*(_QWORD *)sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5]
                          + 224);
          v28 = v2;
          v18 = v17
              - *(double *)(*(_QWORD *)sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5]
                          + 216);
          v28 = v2;
          v19 = *(_QWORD *)sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5];
          LODWORD(v20) = *(_DWORD *)(v19 + 248);
          *(_DWORD *)(v19 + 248) = (v18 + (double)v20);
        }
        v28 = v2;
        result = sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28);
        if (*(_QWORD *)(result[5] + 24))
        {
          v21 = CFAbsoluteTimeGetCurrent();
          v28 = v2;
          *(CFAbsoluteTime *)(*(_QWORD *)(sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5]
                                        + 24)
                            + 24) = v21;
          v22 = CFAbsoluteTimeGetCurrent();
          v28 = v2;
          *(CFAbsoluteTime *)(*(_QWORD *)(sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5]
                                        + 24)
                            + 48) = v22;
          v28 = v2;
          v23 = *(double *)(*(_QWORD *)(sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5] + 24)
                          + 24);
          v28 = v2;
          v24 = (v23
                             - *(double *)(*(_QWORD *)(sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5]+ 24)+ 16));
          v28 = v2;
          *(_DWORD *)(*(_QWORD *)(sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5] + 24) + 8) = v24;
          v28 = v2;
          v25 = *(double *)(*(_QWORD *)(sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5] + 24)
                          + 48);
          v28 = v2;
          v26 = (v25
                             - *(double *)(*(_QWORD *)(sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5]+ 24)+ 40));
          v28 = v2;
          *(_DWORD *)(*(_QWORD *)(sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5] + 24) + 4) = v26;
          v27 = *((_DWORD *)v5 + 12);
          v28 = v2;
          *(_DWORD *)(*(_QWORD *)(sub_10002252C(v6, (unint64_t *)v2, (uint64_t)&unk_100740F58, &v28)[5] + 24)
                    + 120) = v27;
          return sub_100526608(v3, v5[5]);
        }
      }
    }
  }
  return result;
}

uint64_t *sub_100526608(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t **v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v14 = a2;
  if (a2)
  {
    v2 = result;
    v3 = (_QWORD *)result[24];
    if (v3)
    {
      v4 = (uint64_t **)(result + 23);
      v5 = result + 24;
      do
      {
        v6 = v3[4];
        v7 = v6 >= a2;
        if (v6 >= a2)
          v8 = v3;
        else
          v8 = v3 + 1;
        if (v7)
          v5 = v3;
        v3 = (_QWORD *)*v8;
      }
      while (*v8);
      if (v5 != result + 24 && v5[4] <= a2)
      {
        v15 = &v14;
        result = sub_10002252C(v4, (unint64_t *)&v14, (uint64_t)&unk_100740F58, &v15);
        if (*(_QWORD *)(result[5] + 24))
        {
          v12 = 0;
          v13 = 0;
          sub_100444BF0(v14, (_DWORD *)&v13 + 1, &v13, &v12, (_DWORD *)&v12 + 1);
          v9 = v12;
          v15 = &v14;
          *(_DWORD *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v14, (uint64_t)&unk_100740F58, &v15)[5] + 24)
                    + 112) = v9;
          v10 = sub_100065478();
          v15 = &v14;
          v11 = sub_10002252C(v4, (unint64_t *)&v14, (uint64_t)&unk_100740F58, &v15);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 72))(v10, *(_QWORD *)(v11[5] + 24));
          v15 = &v14;
          *(_DWORD *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v14, (uint64_t)&unk_100740F58, &v15)[5] + 24)
                    + 116) = 0;
          v15 = &v14;
          *(_DWORD *)(*(_QWORD *)(sub_10002252C(v4, (unint64_t *)&v14, (uint64_t)&unk_100740F58, &v15)[5] + 24)
                    + 8) = 0;
          v15 = &v14;
          result = sub_10002252C(v4, (unint64_t *)&v14, (uint64_t)&unk_100740F58, &v15);
          *(_DWORD *)(*(_QWORD *)(result[5] + 24) + 4) = 0;
          *(_WORD *)((char *)v2 + 341) = 0;
          v2[48] = 0;
        }
      }
    }
  }
  return result;
}

std::string *sub_1005267C8@<X0>(char a1@<W1>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = "";
  sub_100091AE8(a2, "");
  if ((a1 + 1) < 5u)
    v4 = off_100935D70[(char)(a1 + 1)];
  return std::string::assign(a2, v4);
}

void sub_100526838(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100526854(uint64_t a1, void *a2, int a3, char a4, int a5, int a6)
{
  id v10;
  NSObject *v11;
  std::string *v12;
  std::string::size_type size;
  std::string *p_buf;
  std::string *v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  void *v19;
  char v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  void *v26;
  char v27;
  char *v28;
  const std::string::value_type *v29;
  std::string v30;
  void *__p;
  __int128 v32;
  std::string v33;
  _QWORD v34[2];
  std::string buf;
  std::string *v36;

  v10 = a2;
  __p = 0;
  v32 = 0uLL;
  sub_100091AE8(&__p, "");
  if (a3 == 255)
  {
    memset(&v30, 0, sizeof(v30));
    sub_1005267C8(a4, &v30);
    v11 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v12 = &v30;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = (std::string *)v30.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v12;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      v36 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Overwriting the 'unknown->%s' spatial transition string with '%s->%s'", (uint8_t *)&buf, 0x20u);
    }
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    else
      size = v30.__r_.__value_.__l.__size_;
    memset(&buf, 0, sizeof(buf));
    p_buf = &buf;
    sub_1002D6774((uint64_t)&buf, size + 2);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v30;
      else
        v15 = (std::string *)v30.__r_.__value_.__r.__words[0];
      memmove(p_buf, v15, size);
    }
    strcpy((char *)p_buf + size, "->");
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v30;
    else
      v16 = (std::string *)v30.__r_.__value_.__r.__words[0];
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    else
      v17 = v30.__r_.__value_.__l.__size_;
    v18 = std::string::append(&buf, (const std::string::value_type *)v16, v17);
    v19 = (void *)v18->__r_.__value_.__r.__words[0];
    v33.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32) < 0)
      operator delete(__p);
    __p = v19;
    *(_QWORD *)&v32 = v33.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)&v32 + 7) = *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 7);
    HIBYTE(v32) = v20;
  }
  else
  {
    sub_1005267C8(a3, &v30);
    v21 = std::string::append(&v30, "->");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    sub_1005267C8(a4, &v33);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v33;
    else
      v23 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    else
      v24 = v33.__r_.__value_.__l.__size_;
    v25 = std::string::append(&buf, (const std::string::value_type *)v23, v24);
    v26 = (void *)v25->__r_.__value_.__r.__words[0];
    v34[0] = v25->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
    v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32) < 0)
      operator delete(__p);
    __p = v26;
    *(_QWORD *)&v32 = v34[0];
    *(_QWORD *)((char *)&v32 + 7) = *(_QWORD *)((char *)v34 + 7);
    HIBYTE(v32) = v27;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  memset(&buf, 0, sizeof(buf));
  if (a5)
    v28 = "On";
  else
    v28 = "Off";
  sub_100091AE8(&buf, v28);
  std::string::append(&buf, "->");
  if (a6)
    v29 = "On";
  else
    v29 = "Off";
  std::string::append(&buf, v29);
  operator new();
}

void sub_100526D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;

  if (a27 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

uint64_t sub_100526DD8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (*(_BYTE *)(result + 152))
  {
    v1 = result;
    if (*(_QWORD *)(result + 144))
    {
      sub_10051DFA8(result, (uint64_t)&v6);
      v2 = *(_QWORD *)(v1 + 144);
      v3 = v2 + 24;
      if (*(char *)(v2 + 47) < 0)
        operator delete(*(void **)v3);
      *(_OWORD *)v3 = v6;
      *(_QWORD *)(v3 + 16) = v7;
      v4 = sub_100065478();
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 184))(v4, *(_QWORD *)(v1 + 144));
      v5 = *(_QWORD *)(v1 + 144);
      if (v5)
      {
        if (*(char *)(v5 + 151) < 0)
          operator delete(*(void **)(v5 + 128));
        if (*(char *)(v5 + 111) < 0)
          operator delete(*(void **)(v5 + 88));
        if (*(char *)(v5 + 71) < 0)
          operator delete(*(void **)(v5 + 48));
        if (*(char *)(v5 + 47) < 0)
          operator delete(*(void **)(v5 + 24));
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        operator delete();
      }
      *(_QWORD *)(v1 + 144) = 0;
      *(_BYTE *)(v1 + 152) = 0;
    }
  }
  return result;
}

void sub_100526ECC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  _QWORD v15[2];
  _QWORD v16[2];
  uint8_t buf[4];
  id v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  v7 = a2;
  v8 = qword_1009997E0;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      v18 = v7;
      v19 = 1024;
      v20 = a3;
      v21 = 1024;
      v22 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "AudioLinkManager setSpatialModeWithBundleID：%@, mode:%u, headtrack:%u", buf, 0x18u);
    }
    if (*(_BYTE *)(a1 + 1152))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a4, CFSTR("kCBMsgArgParamSpatialHeadTracking")));
      v15[1] = CFSTR("kCBMsgArgParamSpatialMode");
      v16[0] = v9;
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3));
      v16[1] = v10;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 2));

      v12 = sub_100527108(a1);
      v13 = objc_claimAutoreleasedReturnValue(v12);
      v14 = *(void **)(a1 + 1160);
      *(_QWORD *)(a1 + 1160) = v13;

      objc_msgSend(*(id *)(a1 + 1160), "setObject:forKey:", v11, v7);
    }
    else
    {
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_100935B90);
      sub_1004A699C((uint64_t)off_100977A50, v7, a3, a4);
    }
    sub_100527168(a1, a4, a3);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006FEF8C();
  }

}

void sub_1005270C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_100527108(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;

  if (*(_BYTE *)(a1 + 1152) && (v1 = *(void **)(a1 + 1160)) != 0)
  {
    v2 = v1;
  }
  else
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100935B90);
    v3 = sub_1004A6B84((uint64_t)off_100977A50);
    v2 = (id)objc_claimAutoreleasedReturnValue(v3);
  }
  return v2;
}

std::string *sub_100527168(uint64_t a1, int a2, int a3)
{
  std::string *v3;
  const std::string::value_type *v4;

  if (!a3 || a3 == 255 || a3 == 3)
  {
    v3 = (std::string *)(a1 + 1072);
    v4 = "Off";
  }
  else
  {
    v3 = (std::string *)(a1 + 1072);
    if (a2)
      v4 = "Headtracked Spatial";
    else
      v4 = "Fixed Spatial";
  }
  return std::string::assign(v3, v4);
}

void sub_1005271AC(uint64_t a1, void *a2, unsigned __int8 *a3, int *a4)
{
  id v7;
  id v8;

  v7 = a2;
  v8 = v7;
  if (*(_BYTE *)(a1 + 1152))
  {
    *a3 = 0;
    *a4 = 1;
    sub_10052727C(a1, v7, a3, a4);
  }
  else
  {
    if (qword_100977A58 != -1)
    {
      dispatch_once(&qword_100977A58, &stru_100935B90);
      v7 = v8;
    }
    sub_1004A7268((uint64_t)off_100977A50, v7, a3, a4);
  }
  sub_100527168(a1, *a3, *a4);

}

void sub_100527268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10052727C(uint64_t a1, void *a2, unsigned __int8 *a3, int *a4)
{
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  int v17;
  NSObject *v18;
  int v19;
  int v20;
  int v21;
  id v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  v7 = a2;
  v8 = *(void **)(a1 + 1160);
  if (!v8)
  {
    v9 = sub_100527108(a1);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    v11 = *(void **)(a1 + 1160);
    *(_QWORD *)(a1 + 1160) = v10;

    v8 = *(void **)(a1 + 1160);
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v7));
  v13 = v12;
  if (v12)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKey:", CFSTR("kCBMsgArgParamSpatialMode")));
    v15 = v14;
    if (v14)
    {
      v16 = objc_msgSend(v14, "unsignedIntValue");
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
        sub_1006FEFE4();
      if (objc_msgSend(v7, "caseInsensitiveCompare:", CFSTR("com.apple.facetime")))
        v16 = 1;
      else
        v16 = 2;
    }
    *a4 = v16;

  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006FEFB8();
    if (objc_msgSend(v7, "caseInsensitiveCompare:", CFSTR("com.apple.facetime")))
      v17 = 1;
    else
      v17 = 2;
    *a4 = v17;
  }
  v18 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v19 = *a4;
    v20 = *a3;
    v21 = 138412802;
    v22 = v7;
    v23 = 1024;
    v24 = v19;
    v25 = 1024;
    v26 = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "AudioLinkManager getSpatialModeWithBundleIDInSplitter : %@=>%u,%u", (uint8_t *)&v21, 0x18u);
  }

}

void sub_10052744C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100527484(uint64_t a1, uint64_t a2, char a3)
{
  NSObject *v3;
  _QWORD block[6];
  char v5;

  v3 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005274E0;
  block[3] = &unk_10091FF68;
  block[4] = a1;
  block[5] = a2;
  v5 = a3;
  dispatch_async(v3, block);
}

void sub_1005274E0(uint64_t a1)
{
  unint64_t v1;
  unint64_t *v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  char v12;
  NSObject *v13;
  const char *v14;
  _BYTE buf[24];

  v2 = (unint64_t *)(a1 + 40);
  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD **)(v4 + 192);
    v5 = (_QWORD *)(v4 + 192);
    v6 = v7;
    if (v7)
    {
      v8 = v5;
      do
      {
        v9 = v6[4];
        v10 = v9 >= v1;
        if (v9 >= v1)
          v11 = v6;
        else
          v11 = v6 + 1;
        if (v10)
          v8 = v6;
        v6 = (_QWORD *)*v11;
      }
      while (*v11);
      if (v8 != v5 && v1 >= v8[4])
      {
        v12 = *(_BYTE *)(a1 + 48);
        *(_QWORD *)buf = a1 + 40;
        *(_BYTE *)(sub_10002252C((uint64_t **)v5 - 1, v2, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 86) = v12;
        if (qword_1009778D8 != -1)
          dispatch_once(&qword_1009778D8, &stru_100935D28);
        sub_100422400((uint64_t)off_1009778D0, *v2);
        v13 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          if (*(_BYTE *)(a1 + 48))
            v14 = "Active";
          else
            v14 = "Not Active";
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Spatial Audio %{public}s", buf, 0xCu);
        }
      }
    }
  }
}

uint64_t sub_100527654(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005276E8;
  block[3] = &unk_100918690;
  block[5] = a1;
  block[6] = a2;
  block[4] = &v6;
  dispatch_sync(v2, block);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t *sub_1005276E8(uint64_t *result)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t *v12;

  v1 = result + 6;
  v2 = result[6];
  if (v2)
  {
    v3 = result;
    v4 = result[5];
    v7 = *(_QWORD **)(v4 + 192);
    v5 = v4 + 192;
    v6 = v7;
    if (v7)
    {
      result = (uint64_t *)(v5 - 8);
      v8 = (_QWORD *)v5;
      do
      {
        v9 = v6[4];
        v10 = v9 >= v2;
        if (v9 >= v2)
          v11 = v6;
        else
          v11 = v6 + 1;
        if (v10)
          v8 = v6;
        v6 = (_QWORD *)*v11;
      }
      while (*v11);
      if (v8 != (_QWORD *)v5 && v2 >= v8[4])
      {
        v12 = v1;
        result = sub_10002252C((uint64_t **)result, (unint64_t *)v1, (uint64_t)&unk_100740F58, &v12);
        *(_BYTE *)(*(_QWORD *)(v3[4] + 8) + 24) = *(_BYTE *)(result[5] + 86);
      }
    }
  }
  return result;
}

void sub_100527788(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  _QWORD v6[2];

  v4 = a2;
  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 272);
  objc_storeStrong((id *)(a1 + 904), a2);
  *(_BYTE *)(a1 + 913) = v4 != 0;
  v5 = sub_1004759E0();
  sub_100041A34(v5, &stru_100935AB8);
  sub_100034234((uint64_t)v6);

}

void sub_100527804(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100527824(id a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100935BD0);
  sub_1003E46CC(qword_100977DF8);
}

id sub_100527864(uint64_t a1)
{
  id v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 272);
  v2 = *(id *)(a1 + 904);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_1005278B0()
{
  uint64_t v0;

  v0 = sub_10003BE44();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 792))(v0, 5);
}

void sub_1005278D0(uint64_t a1, char a2)
{
  NSObject *v2;
  _QWORD v3[5];
  char v4;

  v2 = *(NSObject **)(a1 + 248);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10052792C;
  v3[3] = &unk_100918888;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_10052792C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  int v5;
  uint64_t v6;
  _DWORD v7[2];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    v7[0] = 67109120;
    v7[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Spatial Profile Allowed change to %d ", (uint8_t *)v7, 8u);
  }
  *(_BYTE *)(v2 + 912) = *(_BYTE *)(a1 + 40);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100935B90);
  if (*(_BYTE *)(v2 + 912))
    v5 = 1;
  else
    v5 = 2;
  sub_1004A6760((uint64_t)off_100977A50, v5);
  v6 = sub_1004759E0();
  sub_100041A34(v6, &stru_100935AD8);
}

void sub_100527A38(id a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100935BD0);
  sub_1003E46CC(qword_100977DF8);
}

void sub_100527A78(uint64_t a1, char a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[5];
  char v5;

  v2 = a1 - 112;
  v3 = *(NSObject **)(a1 + 136);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10052792C;
  v4[3] = &unk_100918888;
  v4[4] = v2;
  v5 = a2;
  dispatch_async(v3, v4);
}

BOOL sub_100527AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  char v8;
  NSObject *v9;
  const char *v10;
  int v11;
  const char *v12;
  const char *v13;
  _BOOL8 v14;
  _QWORD v16[2];
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;

  if (sub_10044FE34(a2, 64))
  {
    v4 = sub_10003BE44();
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 792))(v4, 3);
  }
  else
  {
    v5 = 0;
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100935B90);
  v6 = sub_10049D5C4((uint64_t)off_100977A50);
  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 272);
  v7 = *(_QWORD *)(a1 + 904);
  sub_100034264((uint64_t)v16);
  if (a2)
    v8 = v5;
  else
    v8 = 0;
  if ((v8 & 1) != 0)
  {
    v9 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v10 = "NO";
      v11 = *(unsigned __int8 *)(a1 + 912);
      *(_DWORD *)buf = 136316162;
      if (v7)
        v12 = "YES";
      else
        v12 = "NO";
      v18 = "YES";
      if (v6 == 1)
        v13 = "YES";
      else
        v13 = "NO";
      v19 = 2080;
      v20 = v12;
      if (v11)
        v10 = "YES";
      v21 = 2080;
      v22 = v13;
      v23 = 2080;
      v24 = "YES";
      v25 = 2080;
      v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Spatial Profile User preference, Support = %s Enrollment = %s User Choice = %s Owned Device %s Allowed %s", buf, 0x34u);
    }
    v14 = 0;
    if (v7 && v6 == 1)
      v14 = *(_BYTE *)(a1 + 912) != 0;
  }
  else
  {
    v14 = 0;
  }
  sub_100034234((uint64_t)v16);
  return v14;
}

void sub_100527C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100527CB4(uint64_t a1, char a2)
{
  NSObject *v2;
  _QWORD v3[5];
  char v4;

  v2 = *(NSObject **)(a1 + 248);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100527D10;
  v3[3] = &unk_100918888;
  v3[4] = a1;
  v4 = a2;
  dispatch_async(v2, v3);
}

void sub_100527D10(uint64_t a1)
{
  sub_100095AFC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 216), *(unsigned __int8 *)(a1 + 40));
}

void sub_100527D24(uint64_t a1, char a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[5];
  char v5;

  v2 = a1 - 128;
  v3 = *(NSObject **)(a1 + 120);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100527D10;
  v4[3] = &unk_100918888;
  v4[4] = v2;
  v5 = a2;
  dispatch_async(v3, v4);
}

void sub_100527D80(uint64_t a1, char a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  _QWORD block[6];
  char v9;

  v6 = _os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming");
  if (a3 && v6)
  {
    if (sub_100094BB4(*(_QWORD *)(a1 + 216), a3))
    {
      v7 = *(NSObject **)(a1 + 248);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100527E20;
      block[3] = &unk_10091FF68;
      v9 = a2;
      block[4] = a1;
      block[5] = a3;
      dispatch_async(v7, block);
    }
  }
}

uint64_t sub_100527E20(uint64_t a1)
{
  return sub_100094AB0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 216), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

void sub_100527E34(uint64_t a1, unint64_t a2, int a3)
{
  __int16 v4;
  uint64_t v5;
  _QWORD v6[4];
  __int16 v7;
  BOOL v8;
  unint64_t v9;
  unint64_t *v10;

  v9 = a2;
  v10 = &v9;
  v4 = *(_WORD *)(sub_10002252C((uint64_t **)(a1 + 184), &v9, (uint64_t)&unk_100740F58, (uint64_t **)&v10)[5] + 84);
  v5 = sub_1004759E0();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100527ED0;
  v6[3] = &unk_100935AF8;
  v7 = v4;
  v8 = a3 == 240;
  sub_100041A34(v5, v6);
}

void sub_100527ED0(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100935BD0);
  sub_1003E8A84(qword_100977DF8, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

void sub_100527F24(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  _QWORD v7[5];
  char v8;

  if (a2 && ((sub_100094BB4(*(_QWORD *)(a1 + 216), a2) & 1) != 0 || !a4))
  {
    v6 = sub_1004759E0();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100527FA0;
    v7[3] = &unk_100918888;
    v7[4] = a2;
    v8 = a4;
    sub_100041A34(v6, v7);
  }
}

uint64_t sub_100527FA0(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 32))
  {
    v1 = result;
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100935BB0);
    return sub_1004CFE70((uint64_t)off_10097AA38, *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40));
  }
  return result;
}

void sub_100528008(uint64_t a1, uint64_t a2, int a3)
{
  char v3;

  v3 = a3;
  sub_10045596C(a2, a3);
  if (qword_100978120 != -1)
    dispatch_once(&qword_100978120, &stru_100935C70);
  sub_100265944(qword_100978118, a2, v3);
}

void sub_10052806C(uint64_t a1, char a2, uint64_t a3, char a4, int a5, int a6, char a7, char a8, __int16 a9)
{
  NSObject *v9;
  _QWORD v10[6];
  int v11;
  int v12;
  __int16 v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v9 = *(NSObject **)(a1 + 248);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1005280E0;
  v10[3] = &unk_100935B18;
  v14 = a2;
  v10[4] = a1;
  v10[5] = a3;
  v15 = a4;
  v11 = a5;
  v12 = a6;
  v16 = a7;
  v17 = a8;
  v13 = a9;
  dispatch_async(v9, v10);
}

void sub_1005280E0(uint64_t a1)
{
  sub_100095A90(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 216), *(unsigned __int8 *)(a1 + 58), *(unsigned __int8 **)(a1 + 40), *(unsigned __int8 *)(a1 + 59), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned __int8 *)(a1 + 60), *(unsigned __int8 *)(a1 + 61));
}

void sub_100528124(uint64_t a1, int a2, uint64_t a3, char a4, __int16 a5, uint64_t a6)
{
  NSObject *v12;
  _QWORD v13[7];
  int v14;
  __int16 v15;
  char v16;

  if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
  {
    v12 = *(NSObject **)(a1 + 248);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1005281D0;
    v13[3] = &unk_100935B38;
    v14 = a2;
    v13[4] = a1;
    v13[5] = a3;
    v16 = a4;
    v15 = a5;
    v13[6] = a6;
    dispatch_async(v12, v13);
  }
}

void sub_1005281D0(uint64_t a1)
{
  sub_10009501C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 216), *(unsigned int *)(a1 + 56), *(unsigned __int8 **)(a1 + 40), *(unsigned __int8 *)(a1 + 62));
}

uint64_t sub_1005281F0(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  _BYTE buf[12];
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  v17 = a3;
  v6 = (uint64_t **)(a1 + 184);
  *(_QWORD *)buf = &v17;
  v7 = *(unsigned int *)(*(_QWORD *)(sub_10002252C((uint64_t **)(a1 + 184), &v17, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5]+ 40)+ 24);
  v17 = a3;
  *(_QWORD *)buf = &v17;
  v8 = *(_QWORD *)(sub_10002252C(v6, &v17, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 40);
  if (a2 == 7)
  {
    if ((_DWORD)v7 != 13 && (_DWORD)v7 != 10)
    {
      if ((v7 - 11) <= 1)
      {
        *(_DWORD *)(v8 + 24) = 8;
        sub_1000969F4(*(_QWORD *)(a1 + 216), 3, a3);
        return 1;
      }
      return 0;
    }
    *(_DWORD *)(v8 + 24) = 12;
    v10 = 1;
    sub_100096940(*(_QWORD *)(a1 + 216), 1, a3);
  }
  else
  {
    v11 = qword_1009997E0;
    v10 = 0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 208);
      v13 = *(_QWORD *)(v12 + 8 * a2 + 168);
      v12 += 48;
      v14 = *(_QWORD *)(v12 + 8 * v7);
      v15 = *(_QWORD *)(v12 + 8 * *(unsigned int *)(v8 + 24));
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v13;
      v19 = 2082;
      v20 = v14;
      v21 = 2082;
      v22 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Unhandled Low Latency Game Transition: %{public}s. State: %{public}s -> %{public}s.", buf, 0x20u);
      return 0;
    }
  }
  return v10;
}

void sub_1005283B4(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void **block;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v16 = sub_10051CDE8(a1, a2);
  v7 = *(NSObject **)(a1 + 248);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1005284E0;
  v12[3] = &unk_100919528;
  v12[4] = &v13;
  v12[5] = a1;
  dispatch_async(v7, v12);
  if (a3 >= 0x33)
  {
    v8 = v14[3];
    v9 = *(NSObject **)(a1 + 248);
    block = _NSConcreteStackBlock;
    v18 = 3221225472;
    v19 = sub_10051D958;
    v20 = &unk_1009210D8;
    v21 = a1;
    v22 = v8;
    v23 = a4;
    dispatch_async(v9, &block);
    v10 = v14[3];
    v11 = *(NSObject **)(a1 + 248);
    block = _NSConcreteStackBlock;
    v18 = 3221225472;
    v19 = sub_10051FF74;
    v20 = &unk_10092A3B8;
    v21 = a1;
    v22 = v10;
    v24 = 256;
    v23 = 0;
    dispatch_async(v11, &block);
  }
  _Block_object_dispose(&v13, 8);
}

void sub_1005284E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t *v27;
  unint64_t *v28;

  v2 = *(_QWORD *)(a1 + 40);
  sub_1005159D4(v2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), 60);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 8);
  v7 = *(_QWORD *)(v4 + 24);
  v5 = (uint64_t *)(v4 + 24);
  v6 = v7;
  if (v7)
  {
    v8 = *(_QWORD **)(v2 + 192);
    if (v8)
    {
      v9 = (uint64_t **)(v2 + 184);
      v10 = v2 + 192;
      do
      {
        v11 = v8[4];
        v12 = v11 >= v6;
        if (v11 >= v6)
          v13 = v8;
        else
          v13 = v8 + 1;
        if (v12)
          v10 = (uint64_t)v8;
        v8 = (_QWORD *)*v13;
      }
      while (*v13);
      if (v10 != v2 + 192 && v6 >= *(_QWORD *)(v10 + 32))
      {
        v28 = (unint64_t *)v5;
        v14 = sub_10002252C(v9, (unint64_t *)v5, (uint64_t)&unk_100740F58, (uint64_t **)&v28);
        v3 = *(_QWORD *)(a1 + 32);
        if (*(_QWORD *)(v14[5] + 16))
        {
          v28 = (unint64_t *)(*(_QWORD *)(v3 + 8) + 24);
          v15 = sub_10002252C(v9, v28, (uint64_t)&unk_100740F58, (uint64_t **)&v28);
          ++*(_DWORD *)(*(_QWORD *)(v15[5] + 16) + 180);
          v3 = *(_QWORD *)(a1 + 32);
        }
      }
    }
  }
  v16 = *(_QWORD *)(v3 + 8);
  v19 = *(_QWORD *)(v16 + 24);
  v17 = (uint64_t *)(v16 + 24);
  v18 = v19;
  if (v19)
  {
    v22 = *(_QWORD **)(v2 + 192);
    v21 = v2 + 192;
    v20 = v22;
    if (v22)
    {
      v23 = (_QWORD *)v21;
      do
      {
        v24 = v20[4];
        v25 = v24 >= v18;
        if (v24 >= v18)
          v26 = v20;
        else
          v26 = v20 + 1;
        if (v25)
          v23 = v20;
        v20 = (_QWORD *)*v26;
      }
      while (*v26);
      if (v23 != (_QWORD *)v21 && v18 >= v23[4])
      {
        v28 = (unint64_t *)v17;
        if (*(_QWORD *)(sub_10002252C((uint64_t **)(v21 - 8), (unint64_t *)v17, (uint64_t)&unk_100740F58, (uint64_t **)&v28)[5]+ 24))
        {
          v28 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
          v27 = sub_10002252C((uint64_t **)(v21 - 8), v28, (uint64_t)&unk_100740F58, (uint64_t **)&v28);
          ++*(_DWORD *)(*(_QWORD *)(v27[5] + 24) + 116);
        }
      }
    }
  }
}

void sub_100528690(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  NSObject *v7;
  _QWORD block[6];
  char v9;
  uint8_t buf[4];
  int v11;

  v6 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "updating the tipiConnection state for a2dp audio packet flush metrics: %d", buf, 8u);
  }
  v7 = *(NSObject **)(a1 + 248);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100528780;
  block[3] = &unk_10091FF68;
  block[4] = a1;
  block[5] = a2;
  v9 = a3;
  dispatch_async(v7, block);
}

uint64_t *sub_100528780(uint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  char v10;
  uint64_t *v11;

  v1 = result[5];
  if (v1)
  {
    v2 = result[4];
    v5 = *(_QWORD **)(v2 + 192);
    v3 = v2 + 192;
    v4 = v5;
    if (v5)
    {
      v6 = (_QWORD *)v3;
      do
      {
        v7 = v4[4];
        v8 = v7 >= v1;
        if (v7 >= v1)
          v9 = v4;
        else
          v9 = v4 + 1;
        if (v8)
          v6 = v4;
        v4 = (_QWORD *)*v9;
      }
      while (*v9);
      if (v6 != (_QWORD *)v3 && v1 >= v6[4])
      {
        v10 = *((_BYTE *)result + 48);
        v11 = result + 5;
        result = sub_10002252C((uint64_t **)(v3 - 8), (unint64_t *)result + 5, (uint64_t)&unk_100740F58, &v11);
        *(_BYTE *)(result[5] + 32) = v10;
      }
    }
  }
  return result;
}

uint64_t *sub_100528818(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *result;
  int v8;
  unint64_t v9;
  uint64_t *v10;
  const std::string *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;

  v31 = a2;
  v3 = (uint64_t **)(a1 + 184);
  *(_QWORD *)&v27 = &v31;
  v4 = sub_10002252C((uint64_t **)(a1 + 184), (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27);
  std::string::assign((std::string *)(*(_QWORD *)(v4[5] + 16) + 40), "No");
  *(_QWORD *)&v27 = &v31;
  v5 = sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27);
  std::string::assign((std::string *)(*(_QWORD *)(v5[5] + 16) + 88), "2.4G");
  *(_QWORD *)&v27 = &v31;
  v6 = sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27);
  std::string::assign((std::string *)(*(_QWORD *)(v6[5] + 16) + 112), "0000");
  *(_QWORD *)&v27 = &v31;
  *(_BYTE *)(*(_QWORD *)(sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27)[5] + 16)
           + 164) = 0;
  v29 = 0;
  v30 = 0;
  result = (uint64_t *)v31;
  if (v31)
  {
    sub_100444BF0(v31, (_DWORD *)&v30 + 1, &v30, &v29, (_DWORD *)&v29 + 1);
    v8 = v29;
    *(_QWORD *)&v27 = &v31;
    *(_DWORD *)(*(_QWORD *)(sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27)[5]
                          + 16)
              + 36) = v8;
    v9 = v31;
    if (*(_BYTE *)(v31 + 1364))
    {
      *(_QWORD *)&v27 = &v31;
      v10 = sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27);
      std::string::assign((std::string *)(*(_QWORD *)(v10[5] + 16) + 40), "Yes");
      v9 = v31;
    }
    sub_100528CDC(a1, v9);
    *(_QWORD *)&v27 = &v31;
    v11 = (const std::string *)(*(_QWORD *)sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27)[5]+ 448);
    *(_QWORD *)&v27 = &v31;
    v12 = sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27);
    std::string::operator=((std::string *)(*(_QWORD *)(v12[5] + 16) + 64), v11);
    v13 = v31;
    if (*(_BYTE *)(v31 + 1365))
    {
      *(_QWORD *)&v27 = &v31;
      v14 = sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27);
      std::string::assign((std::string *)(*(_QWORD *)(v14[5] + 16) + 88), "5G");
      v13 = v31;
    }
    if (sub_100442118(v13, 12))
    {
      sub_1004491B4(v31, 0xAu, &v27);
      v32 = &v31;
      v15 = *(_QWORD *)(sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, &v32)[5] + 16);
      v16 = v15 + 112;
      if (*(char *)(v15 + 135) < 0)
        operator delete(*(void **)v16);
      *(_OWORD *)v16 = v27;
      *(_QWORD *)(v16 + 16) = v28;
    }
    *(_QWORD *)&v27 = &v31;
    v17 = *(unsigned __int16 *)(*(_QWORD *)(sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27)[5]+ 40)+ 16);
    *(_QWORD *)&v27 = &v31;
    *(_DWORD *)(*(_QWORD *)(sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27)[5]
                          + 16)
              + 136) = v17;
    *(_QWORD *)&v27 = &v31;
    v18 = *(_DWORD **)(sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27)[5] + 16);
    v19 = v18[6];
    if (v19)
      v20 = *v18 / v19;
    else
      v20 = 0;
    *(_QWORD *)&v27 = &v31;
    *(_DWORD *)(*(_QWORD *)(sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27)[5]
                          + 16)
              + 140) = v20;
    *(_QWORD *)&v27 = &v31;
    v21 = *(_QWORD *)(sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27)[5] + 16);
    v22 = *(_DWORD *)(v21 + 148);
    if (v22)
      v23 = *(_DWORD *)(v21 + 172) / v22;
    else
      v23 = 0;
    *(_QWORD *)&v27 = &v31;
    *(_DWORD *)(*(_QWORD *)(sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27)[5]
                          + 16)
              + 144) = v23;
    *(_QWORD *)&v27 = &v31;
    v24 = *(_QWORD *)(sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27)[5] + 16);
    v25 = *(_DWORD *)(v24 + 168);
    if (v25)
      v26 = *(_DWORD *)(v24 + 176) / v25;
    else
      v26 = 0;
    *(_QWORD *)&v27 = &v31;
    *(_DWORD *)(*(_QWORD *)(sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27)[5]
                          + 16)
              + 152) = v26;
    *(_QWORD *)&v27 = &v31;
    result = sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27);
    if (*(_BYTE *)(result[5] + 32))
    {
      *(_QWORD *)&v27 = &v31;
      result = sub_10002252C(v3, (unint64_t *)&v31, (uint64_t)&unk_100740F58, (uint64_t **)&v27);
      *(_BYTE *)(*(_QWORD *)(result[5] + 16) + 164) = 1;
    }
  }
  return result;
}

void sub_100528CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100528CDC(uint64_t a1, unint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  _BYTE *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  std::string __p;
  unint64_t v13;
  unint64_t *v14;

  v13 = a2;
  v3 = (uint64_t **)(a1 + 184);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  if (*(_QWORD *)sub_10002252C((uint64_t **)(a1 + 184), &v13, (uint64_t)&unk_100740F58, (uint64_t **)&__p)[5])
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    v4 = sub_10002252C(v3, &v13, (uint64_t)&unk_100740F58, (uint64_t **)&__p);
    std::string::assign((std::string *)(*(_QWORD *)v4[5] + 448), "Audio");
    v5 = *(_BYTE **)(a1 + 208);
    if (v5[8])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      v6 = sub_10002252C(v3, &v13, (uint64_t)&unk_100740F58, (uint64_t **)&__p);
      std::string::assign((std::string *)(*(_QWORD *)v6[5] + 448), "Video Spatial");
      v5 = *(_BYTE **)(a1 + 208);
    }
    if (v5[7])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      v7 = sub_10002252C(v3, &v13, (uint64_t)&unk_100740F58, (uint64_t **)&__p);
      std::string::assign((std::string *)(*(_QWORD *)v7[5] + 448), "Audio Spatial");
      v5 = *(_BYTE **)(a1 + 208);
    }
    if (v5[5])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      v8 = sub_10002252C(v3, &v13, (uint64_t)&unk_100740F58, (uint64_t **)&__p);
      std::string::assign((std::string *)(*(_QWORD *)v8[5] + 448), "Game");
      v5 = *(_BYTE **)(a1 + 208);
    }
    if (v5[3])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      v9 = sub_10002252C(v3, &v13, (uint64_t)&unk_100740F58, (uint64_t **)&__p);
      std::string::assign((std::string *)(*(_QWORD *)v9[5] + 448), "VoiceOver");
      v5 = *(_BYTE **)(a1 + 208);
    }
    if (v5[2])
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
      v10 = sub_10002252C(v3, &v13, (uint64_t)&unk_100740F58, (uint64_t **)&__p);
      std::string::assign((std::string *)(*(_QWORD *)v10[5] + 448), "GarageBand");
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    if (*(_BYTE *)(*(_QWORD *)sub_10002252C(v3, &v13, (uint64_t)&unk_100740F58, (uint64_t **)&__p)[5] + 160))
    {
      memset(&__p, 0, sizeof(__p));
      sub_100091AE8(&__p, "Game");
      v14 = &v13;
      if (*(_BYTE *)(*(_QWORD *)sub_10002252C(v3, &v13, (uint64_t)&unk_100740F58, (uint64_t **)&v14)[5] + 163))
        std::string::append(&__p, " + Audio");
      v14 = &v13;
      if (*(_BYTE *)(*(_QWORD *)sub_10002252C(v3, &v13, (uint64_t)&unk_100740F58, (uint64_t **)&v14)[5] + 161))
        std::string::append(&__p, " + AudioSpatial");
      v14 = &v13;
      if (*(_BYTE *)(*(_QWORD *)sub_10002252C(v3, &v13, (uint64_t)&unk_100740F58, (uint64_t **)&v14)[5] + 162))
        std::string::append(&__p, " + VideoSpatial");
      v14 = &v13;
      if (*(_BYTE *)(*(_QWORD *)sub_10002252C(v3, &v13, (uint64_t)&unk_100740F58, (uint64_t **)&v14)[5] + 165))
        std::string::append(&__p, " + GarageBand");
      v14 = &v13;
      if (*(_BYTE *)(*(_QWORD *)sub_10002252C(v3, &v13, (uint64_t)&unk_100740F58, (uint64_t **)&v14)[5] + 164))
        std::string::append(&__p, " + VoiceOver");
      v14 = &v13;
      v11 = sub_10002252C(v3, &v13, (uint64_t)&unk_100740F58, (uint64_t **)&v14);
      std::string::operator=((std::string *)(*(_QWORD *)v11[5] + 448), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1005290C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100529114(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_10052919C(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10052919C(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1005293A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005293D8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_10052948C(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10052948C(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100529690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005296C8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_10052977C(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10052977C(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100529980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005299B8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_100529A6C(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100529A6C(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100529C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100529CA8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_100529D30(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100529D30(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100529F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100529F6C(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_10052A020(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10052A020(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_10052A224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10052A25C(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_10052A310(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10052A310(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_10052A514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10052A54C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (v2)
  {
    sub_10052A7D8(v2);
    operator delete();
  }
  v3 = a1[1];
  if (v3)
  {
    if (*(char *)(v3 + 159) < 0)
      operator delete(*(void **)(v3 + 136));
    operator delete();
  }
  if (a1[5])
    operator delete();
  if (a1[6])
    operator delete();
  v4 = a1[2];
  if (v4)
  {
    sub_10039365C(v4);
    operator delete();
  }
  if (a1[3])
    operator delete();
  return a1;
}

uint64_t sub_10052A638(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v1 = qword_1009932E0;
  v6 = qword_1009932E0;
  if (!qword_1009932E0)
  {
    v7 = *(_OWORD *)off_100935B58;
    v8 = 0;
    v1 = _sl_dlopen(&v7, a1);
    v4[3] = v1;
    qword_1009932E0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v1;
}

void sub_10052A6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void *sub_10052A708()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v4;
  void *v5;

  v5 = 0;
  v0 = sub_10052A638((uint64_t)&v5);
  if (!v0)
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *BT::libtailspinLibrary()"));
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("AudioLinkManager.mm"), 88, CFSTR("%s"), v5);

    __break(1u);
    goto LABEL_5;
  }
  v1 = (void *)v0;
  v2 = v5;
  if (v5)
LABEL_5:
    free(v2);
  return v1;
}

void sub_10052A7BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10052A7D8(uint64_t a1)
{
  _QWORD *i;
  void *v3;
  void *v4;

  for (i = *(_QWORD **)(a1 + 328); i != *(_QWORD **)(a1 + 336); ++i)
  {
    if (*i)
      operator delete();
  }
  if (*(char *)(a1 + 495) < 0)
    operator delete(*(void **)(a1 + 472));
  if (*(char *)(a1 + 471) < 0)
    operator delete(*(void **)(a1 + 448));
  v3 = *(void **)(a1 + 352);
  if (v3)
  {
    *(_QWORD *)(a1 + 360) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 328);
  if (v4)
  {
    *(_QWORD *)(a1 + 336) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  return a1;
}

uint64_t sub_10052A880(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, int a6)
{
  *(_OWORD *)a1 = *(_OWORD *)"";
  *(_QWORD *)(a1 + 16) = 0xFFFFFF6A00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a2;
  *(_WORD *)(a1 + 72) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 164) = 0;
  sub_100091AE8((_QWORD *)(a1 + 168), "2.4G");
  *(_BYTE *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 312) = 150;
  *(_BYTE *)(a1 + 320) = a4;
  *(_BYTE *)(a1 + 321) = a5;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 412) = a6;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 4294967196;
  *(_DWORD *)(a1 + 440) = 0;
  sub_100091AE8((_QWORD *)(a1 + 448), "Unknown");
  sub_100091AE8((_QWORD *)(a1 + 472), "Unknown");
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  return a1;
}

void sub_10052A9A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  if (*(char *)(v1 + 471) < 0)
    operator delete(*v3);
  v5 = *(void **)(v1 + 352);
  if (v5)
  {
    *(_QWORD *)(v1 + 360) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(v1 + 328);
  if (v6)
  {
    *(_QWORD *)(v1 + 336) = v6;
    operator delete(v6);
  }
  if (*(char *)(v1 + 191) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10052A9F8(uint64_t a1)
{
  *(_OWORD *)a1 = *(_OWORD *)"";
  *(_QWORD *)(a1 + 16) = 0xFFFFFF6A00000000;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_100091AE8((_QWORD *)(a1 + 40), "");
  sub_100091AE8((_QWORD *)(a1 + 64), "");
  sub_100091AE8((_QWORD *)(a1 + 88), "");
  sub_100091AE8((_QWORD *)(a1 + 112), "");
  *(_OWORD *)(a1 + 136) = xmmword_1007420A0;
  *(_QWORD *)(a1 + 152) = 0x7E0000007ELL;
  *(_DWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 164) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  return a1;
}

void sub_10052AAB4(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[111] < 0)
    operator delete(*v4);
  if (v1[87] < 0)
    operator delete(*v3);
  if (v1[63] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10052AB00(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, char a6)
{
  *(_OWORD *)a1 = *(_OWORD *)"";
  *(_QWORD *)(a1 + 16) = 0xFFFFFF6A00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a2;
  *(_WORD *)(a1 + 72) = a3;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  sub_100091AE8((_QWORD *)(a1 + 136), "2.4G");
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 161) = a4;
  *(_BYTE *)(a1 + 162) = a5;
  *(_DWORD *)(a1 + 164) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 172) = 0;
  *(_BYTE *)(a1 + 188) = 0;
  *(_QWORD *)(a1 + 204) = 0xFFFFFF9C00000000;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 229) = 0;
  *(_BYTE *)(a1 + 237) = a6;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  return a1;
}

void sub_10052ABBC(uint64_t a1, __int128 *a2)
{
  int64x2_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  __int128 v30;
  int64x2_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int64x2_t v35;
  uint64_t v36;
  uint64_t v37;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  v4 = (int64x2_t *)(a1 + 8);
  if (v5 == v6)
  {
LABEL_16:
    v14 = *a2;
    v15 = *((_QWORD *)a2 + 1);
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 16);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v5 = *(uint64_t **)(a1 + 16);
    }
    v18 = *(_QWORD *)(a1 + 24);
    if ((unint64_t)v5 >= v18)
    {
      v33 = v14;
      v20 = ((uint64_t)v5 - v4->i64[0]) >> 4;
      if ((unint64_t)(v20 + 1) >> 60)
        abort();
      v21 = v18 - v4->i64[0];
      v22 = v21 >> 3;
      if (v21 >> 3 <= (unint64_t)(v20 + 1))
        v22 = v20 + 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
        v23 = 0xFFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      v37 = a1 + 24;
      v24 = (char *)sub_10034957C(a1 + 24, v23);
      v26 = &v24[16 * v20];
      *(_OWORD *)v26 = v33;
      v28 = *(_QWORD **)(a1 + 8);
      v27 = *(_QWORD **)(a1 + 16);
      if (v27 == v28)
      {
        v31 = vdupq_n_s64((unint64_t)v27);
        v29 = &v24[16 * v20];
      }
      else
      {
        v29 = &v24[16 * v20];
        do
        {
          v30 = *((_OWORD *)v27 - 1);
          v27 -= 2;
          *((_OWORD *)v29 - 1) = v30;
          v29 -= 16;
          *v27 = 0;
          v27[1] = 0;
        }
        while (v27 != v28);
        v31 = *v4;
      }
      v19 = v26 + 16;
      *(_QWORD *)(a1 + 8) = v29;
      *(_QWORD *)(a1 + 16) = v26 + 16;
      v35 = v31;
      v32 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = &v24[16 * v25];
      v36 = v32;
      v34 = v31.i64[0];
      sub_10052AE78((void **)&v34);
    }
    else
    {
      *v5 = v14;
      v5[1] = v15;
      v19 = v5 + 2;
    }
    *(_QWORD *)(a1 + 16) = v19;
    sub_10052ADB4((char **)(a1 + 8));
    goto LABEL_35;
  }
  do
  {
    v7 = (std::__shared_weak_count *)v5[1];
    if (!v7)
    {
      v9 = *(_QWORD *)a2;
LABEL_11:
      if (!v9)
        goto LABEL_14;
      goto LABEL_12;
    }
    v8 = std::__shared_weak_count::lock(v7);
    v9 = *(_QWORD *)a2;
    if (!v8)
      goto LABEL_11;
    v10 = v8;
    v11 = *v5;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v11 == v9)
      goto LABEL_14;
LABEL_12:
    v5 += 2;
  }
  while (v5 != v6);
  v5 = v6;
LABEL_14:
  if (v5 == *(uint64_t **)(a1 + 16))
  {
    v5 = *(uint64_t **)(a1 + 16);
    goto LABEL_16;
  }
LABEL_35:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_10052AD9C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

void **sub_10052ADB4(char **a1)
{
  void **result;
  char *v3;
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  void **v18;

  v3 = a1[2];
  result = (void **)(a1 + 2);
  v4 = *a1;
  v5 = a1[1];
  v6 = (v5 - *a1) >> 4;
  if (v6 < (v3 - *a1) >> 4)
  {
    v16 = 0u;
    v17 = 0u;
    v18 = result;
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 16 * v6;
    }
    else
    {
      v7 = (char *)sub_10034957C((uint64_t)result, v6);
      v4 = *a1;
      v8 = a1[1];
      v9 = (uint64_t)&v7[16 * v6];
      v11 = &v7[16 * v10];
      *(_QWORD *)&v17 = v9;
      *((_QWORD *)&v17 + 1) = v11;
      if (v8 != v4)
      {
        v12 = &v7[16 * v6];
        do
        {
          v13 = *((_OWORD *)v8 - 1);
          v8 -= 16;
          *((_OWORD *)v12 - 1) = v13;
          v12 -= 16;
          *(_QWORD *)v8 = 0;
          *((_QWORD *)v8 + 1) = 0;
        }
        while (v8 != v4);
        v14 = *a1;
        v4 = a1[1];
        v11 = (char *)*((_QWORD *)&v17 + 1);
        v9 = v17;
        goto LABEL_9;
      }
    }
    v14 = v4;
    v12 = (char *)v9;
LABEL_9:
    *a1 = v12;
    a1[1] = (char *)v9;
    v15 = a1[2];
    a1[2] = v11;
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v15;
    *(_QWORD *)&v16 = v14;
    *((_QWORD *)&v16 + 1) = v14;
    return sub_10052AE78((void **)&v16);
  }
  return result;
}

void **sub_10052AE78(void **a1)
{
  sub_10052AEA8((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_10052AEA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  while (v1 != v2)
  {
    *(_QWORD *)(a1 + 16) = v1 - 16;
    v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      v1 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void sub_10052AEF8(uint64_t a1, _QWORD *a2)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  char v9;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = (__int128 *)sub_10052AF8C(*(_QWORD **)(a1 + 8), *(_QWORD **)(a1 + 16), a2);
  sub_10052B110((uint64_t)&v9, v4 + 1, *(__int128 **)(a1 + 16), (uint64_t)v4);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7 != v5)
  {
    do
    {
      v8 = *(std::__shared_weak_count **)(v7 - 8);
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      v7 -= 16;
    }
    while (v7 != v6);
  }
  *(_QWORD *)(a1 + 16) = v6;
  sub_10052ADB4((char **)(a1 + 8));
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

_QWORD *sub_10052AF8C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  BOOL v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  _QWORD *v26;

  v26 = a3;
  v4 = sub_10052B178(a1, a2, &v26);
  v5 = v4;
  v6 = v4 + 2;
  if (v4 != a2 && v6 != a2)
  {
    v8 = v4;
    do
    {
      v9 = v8;
      v8 = v6;
      v10 = (std::__shared_weak_count *)v9[3];
      if (v10)
      {
        v11 = std::__shared_weak_count::lock(v10);
        if (v11)
        {
          v12 = v11;
          if (!*v8)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v12);
            }
            goto LABEL_29;
          }
          v13 = (std::__shared_weak_count *)v9[3];
          if (v13 && (v14 = std::__shared_weak_count::lock(v13)) != 0)
          {
            v15 = v14;
            v16 = *v8 == *v26;
            v17 = (unint64_t *)&v14->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          else
          {
            v16 = *v26 == 0;
          }
          v19 = (unint64_t *)&v12->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (v20)
          {
            if (!v16)
              goto LABEL_26;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
            if (!v16)
            {
LABEL_26:
              v23 = *(_OWORD *)v8;
              *v8 = 0;
              v8[1] = 0;
              v24 = (std::__shared_weak_count *)v5[1];
              *(_OWORD *)v5 = v23;
              if (v24)
                std::__shared_weak_count::__release_weak(v24);
              v5 += 2;
            }
          }
        }
      }
LABEL_29:
      v6 = v8 + 2;
    }
    while (v8 + 2 != a2);
  }
  return v5;
}

__int128 *sub_10052B110(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;
  std::__shared_weak_count *v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = *v5;
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8)
        std::__shared_weak_count::__release_weak(v8);
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *sub_10052B178(_QWORD *a1, _QWORD *a2, _QWORD **a3)
{
  _QWORD *v3;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  BOOL v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      v6 = (std::__shared_weak_count *)v3[1];
      if (!v6)
        break;
      v7 = std::__shared_weak_count::lock(v6);
      if (!v7)
        break;
      v8 = v7;
      if (!*v3)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v8);
        }
        return v3;
      }
      v9 = (std::__shared_weak_count *)v3[1];
      if (v9 && (v10 = std::__shared_weak_count::lock(v9)) != 0)
      {
        v11 = v10;
        v12 = *v3 == **a3;
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      else
      {
        v12 = **a3 == 0;
      }
      v15 = (unint64_t *)&v8->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v12)
        return v3;
      v3 += 2;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

void sub_10052B2B8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_10052B36C(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_10052B36C(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_10052B570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10052B5A8(uint64_t a1)
{
  _QWORD *v2;

  v2 = sub_100091AE8((_QWORD *)a1, "Unknown");
  sub_100091AE8(v2 + 3, "Unknown");
  sub_100091AE8((_QWORD *)(a1 + 48), "Unknown");
  *(_QWORD *)(a1 + 72) = -1;
  *(_DWORD *)(a1 + 80) = -1;
  sub_100091AE8((_QWORD *)(a1 + 88), "Unknown");
  *(_QWORD *)(a1 + 112) = -1;
  *(_DWORD *)(a1 + 120) = -1;
  sub_100091AE8((_QWORD *)(a1 + 128), "Unknown");
  *(_DWORD *)(a1 + 152) = 0;
  return a1;
}

void sub_10052B650(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_10052B6B4(id a1)
{
  operator new();
}

void sub_10052B6F4()
{
  operator delete();
}

void sub_10052B718(id a1)
{
  operator new();
}

void sub_10052B758()
{
  operator delete();
}

void sub_10052B77C(id a1)
{
  operator new();
}

void sub_10052B7BC()
{
  operator delete();
}

void sub_10052B7E0(id a1)
{
  operator new();
}

void sub_10052B820()
{
  operator delete();
}

void sub_10052B844(id a1)
{
  operator new();
}

void sub_10052B884()
{
  operator delete();
}

void sub_10052B8A8(id a1)
{
  operator new();
}

void sub_10052B8E8()
{
  operator delete();
}

void sub_10052B90C(id a1)
{
  operator new();
}

void sub_10052B94C()
{
  operator delete();
}

void sub_10052B970(id a1)
{
  operator new();
}

void sub_10052BA88()
{
  operator delete();
}

void sub_10052BAAC(id a1)
{
  operator new();
}

void sub_10052BAFC()
{
  operator delete();
}

void sub_10052BB20(id a1)
{
  operator new();
}

void sub_10052BB60()
{
  operator delete();
}

void sub_10052BB84(id a1)
{
  operator new();
}

void sub_10052BBC4()
{
  operator delete();
}

void sub_10052BBE8(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10052BC60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10052BCD8((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_10052BC7C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10052BCA0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_1002D76B4(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10052BCD8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1002D76B4(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10052BD14(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  char v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  char *v25;
  BOOL v26;
  int v27;
  char *v28;
  char *v29;
  int v30;
  char v31;
  char v32;
  int v33;
  int v34;
  char *v35;
  int v36;
  int v37;
  _BYTE *v38;
  _BYTE *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  char *v46;
  BOOL v48;
  uint64_t v49;
  char *v50;
  int v51;
  int v52;
  uint64_t v53;
  char *v54;
  int64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  int v61;
  BOOL v62;
  char *v63;
  int v64;
  char *v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int v73;
  int v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  int v78;
  int v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  int v83;
  int v84;

  v7 = (char *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v36 = *(a2 - 1);
        v37 = *v8;
        if (v36 < v37)
        {
          *v8 = v36;
          *(a2 - 1) = v37;
        }
        return result;
      case 3:
        return (uint64_t)sub_10052C384(v8, v8 + 1, a2 - 1);
      case 4:
        return (uint64_t)sub_10052C5B8(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v38 = v8 + 2;
        v39 = v8 + 3;
        result = (uint64_t)sub_10052C5B8(v8, v8 + 1, v8 + 2, v8 + 3);
        v40 = *(a2 - 1);
        v41 = v8[3];
        if (v40 < v41)
        {
          *v39 = v40;
          *(a2 - 1) = v41;
          v42 = (char)*v39;
          v43 = (char)*v38;
          if (v42 < v43)
          {
            *v38 = v42;
            *v39 = v43;
            v44 = v8[1];
            if (v42 < v44)
            {
              v8[1] = v42;
              v8[2] = v44;
              v45 = *v8;
              if (v42 < v45)
              {
                *v8 = v42;
                v8[1] = v45;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 23)
        {
          v46 = v8 + 1;
          v48 = v8 == a2 || v46 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              v49 = 0;
              v50 = v8;
              do
              {
                v51 = v50[1];
                v52 = *v50;
                v50 = v46;
                if (v51 < v52)
                {
                  v53 = v49;
                  while (1)
                  {
                    v8[v53 + 1] = v52;
                    if (!v53)
                      break;
                    v52 = v8[--v53];
                    if (v51 >= v52)
                    {
                      v54 = &v8[v53 + 1];
                      goto LABEL_79;
                    }
                  }
                  v54 = v8;
LABEL_79:
                  *v54 = v51;
                }
                v46 = v50 + 1;
                ++v49;
              }
              while (v50 + 1 != a2);
            }
          }
          else if (!v48)
          {
            do
            {
              v83 = v7[1];
              v84 = *v7;
              v7 = v46;
              if (v83 < v84)
              {
                do
                {
                  *v46 = v84;
                  v84 = *(v46 - 2);
                  --v46;
                }
                while (v83 < v84);
                *v46 = v83;
              }
              v46 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v55 = (unint64_t)(v9 - 2) >> 1;
            v56 = v55;
            do
            {
              v57 = v56;
              if (v55 >= v56)
              {
                v58 = (2 * v56) | 1;
                v59 = &v8[v58];
                if (2 * v57 + 2 >= v9)
                {
                  LOBYTE(v60) = *v59;
                }
                else
                {
                  v60 = *v59;
                  v61 = v59[1];
                  v62 = v60 < v61;
                  if (v60 <= v61)
                    LOBYTE(v60) = v59[1];
                  if (v62)
                  {
                    ++v59;
                    v58 = 2 * v57 + 2;
                  }
                }
                v63 = &v8[v57];
                v64 = v8[v57];
                if (v64 <= (char)v60)
                {
                  do
                  {
                    v65 = v59;
                    *v63 = v60;
                    if (v55 < v58)
                      break;
                    v66 = (2 * v58) | 1;
                    v59 = &v8[v66];
                    v58 = 2 * v58 + 2;
                    if (v58 >= v9)
                    {
                      LOBYTE(v60) = *v59;
                      v58 = v66;
                    }
                    else
                    {
                      v60 = *v59;
                      result = v59[1];
                      v67 = v60 < (int)result;
                      if (v60 <= (int)result)
                        LOBYTE(v60) = v59[1];
                      if (v67)
                        ++v59;
                      else
                        v58 = v66;
                    }
                    v63 = v65;
                  }
                  while (v64 <= (char)v60);
                  *v65 = v64;
                }
              }
              v56 = v57 - 1;
            }
            while (v57);
            do
            {
              v68 = 0;
              v69 = *v8;
              v70 = v8;
              do
              {
                v71 = &v70[v68 + 1];
                v72 = (2 * v68) | 1;
                v68 = 2 * v68 + 2;
                if (v68 >= v9)
                {
                  LOBYTE(v73) = *v71;
                  v68 = v72;
                }
                else
                {
                  v73 = *v71;
                  v74 = v71[1];
                  v75 = v73 < v74;
                  if (v73 <= v74)
                    LOBYTE(v73) = v71[1];
                  if (v75)
                    ++v71;
                  else
                    v68 = v72;
                }
                *v70 = v73;
                v70 = v71;
              }
              while (v68 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
              if (v71 == --a2)
              {
                *v71 = v69;
              }
              else
              {
                *v71 = *a2;
                *a2 = v69;
                v76 = v71 - v8 - 1;
                if (v71 - v8 + 1 >= 2)
                {
                  v77 = &v8[v76 >> 1];
                  v78 = *v77;
                  v79 = *v71;
                  if (v78 < v79)
                  {
                    v80 = v76 >> 1;
                    do
                    {
                      v81 = v77;
                      *v71 = v78;
                      if (!v80)
                        break;
                      v82 = v80 - 1;
                      v80 = (v80 - 1) >> 1;
                      v77 = &v8[v82 >> 1];
                      v78 = *v77;
                      v71 = v81;
                    }
                    while (v78 < v79);
                    *v81 = v79;
                  }
                }
              }
              v62 = v9-- <= 2;
            }
            while (!v62);
          }
          return result;
        }
        v10 = &v8[(unint64_t)v9 >> 1];
        if ((unint64_t)v9 < 0x81)
        {
          result = (uint64_t)sub_10052C384(&v7[(unint64_t)v9 >> 1], v7, a2 - 1);
        }
        else
        {
          v11 = (unint64_t)v9 >> 1;
          sub_10052C384(v7, &v7[(unint64_t)v9 >> 1], a2 - 1);
          sub_10052C384(v7 + 1, &v7[v11 - 1], a2 - 2);
          sub_10052C384(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (uint64_t)sub_10052C384(&v7[v11 - 1], v10, &v7[v11 + 1]);
          v12 = *v7;
          *v7 = v7[v11];
          v7[v11] = v12;
        }
        --a3;
        v13 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) >= v13)
        {
          if (v13 >= *(a2 - 1))
          {
            v28 = v7 + 1;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              ++v28;
            }
            while (v13 >= *v8);
          }
          else
          {
            v8 = v7;
            do
              v27 = *++v8;
            while (v13 >= v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
              v30 = *--v29;
            while (v13 < v30);
          }
          if (v8 < v29)
          {
            v31 = *v8;
            v32 = *v29;
            do
            {
              *v8 = v32;
              *v29 = v31;
              do
              {
                v33 = *++v8;
                v31 = v33;
              }
              while (v13 >= v33);
              do
              {
                v34 = *--v29;
                v32 = v34;
              }
              while (v13 < v34);
            }
            while (v8 < v29);
          }
          v35 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v35;
          a4 = 0;
          *v35 = v13;
          continue;
        }
        v14 = 0;
        do
          v15 = v7[++v14];
        while (v15 < v13);
        v16 = &v7[v14];
        v17 = a2;
        if (v14 == 1)
        {
          v17 = a2;
          do
          {
            if (v16 >= v17)
              break;
            v19 = *--v17;
          }
          while (v19 >= v13);
        }
        else
        {
          do
            v18 = *--v17;
          while (v18 >= v13);
        }
        if (v16 >= v17)
        {
          v25 = v16 - 1;
        }
        else
        {
          v20 = *v17;
          v21 = v17;
          v22 = &v7[v14];
          do
          {
            *v22 = v20;
            *v21 = v15;
            do
            {
              v23 = *++v22;
              LOBYTE(v15) = v23;
            }
            while (v23 < v13);
            do
            {
              v24 = *--v21;
              v20 = v24;
            }
            while (v24 >= v13);
          }
          while (v22 < v21);
          v25 = v22 - 1;
        }
        if (v25 != v7)
          *v7 = *v25;
        *v25 = v13;
        if (v16 < v17)
        {
LABEL_32:
          result = sub_10052BD14(v7, v25, a3, a4 & 1);
          a4 = 0;
          v8 = v25 + 1;
          continue;
        }
        v26 = sub_10052C3F4(v7, v25);
        v8 = v25 + 1;
        result = sub_10052C3F4(v25 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v26)
            continue;
          goto LABEL_32;
        }
        a2 = v25;
        if (!v26)
          goto LABEL_2;
        return result;
    }
  }
}

_BYTE *sub_10052C384(_BYTE *result, _BYTE *a2, _BYTE *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v3 = (char)*a2;
  v4 = (char)*result;
  v5 = (char)*a3;
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      v6 = (char)*a2;
      v7 = (char)*result;
      if (v6 < v7)
      {
        *result = v6;
        *a2 = v7;
      }
    }
  }
  else
  {
    if (v5 >= v3)
    {
      *result = v3;
      *a2 = v4;
      v8 = (char)*a3;
      if (v8 >= v4)
        return result;
      *a2 = v8;
    }
    else
    {
      *result = v5;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_10052C3F4(char *a1, char *a2)
{
  int64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < v7)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_10052C384(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_10052C5B8(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v16 = a1 + 2;
      v17 = a1 + 3;
      sub_10052C5B8(a1, a1 + 1, a1 + 2, a1 + 3);
      v18 = *(a2 - 1);
      v19 = a1[3];
      if (v18 < v19)
      {
        *v17 = v18;
        *(a2 - 1) = v19;
        v20 = (char)*v17;
        v21 = (char)*v16;
        if (v20 < v21)
        {
          *v16 = v20;
          *v17 = v21;
          v22 = a1[1];
          if (v20 < v22)
          {
            a1[1] = v20;
            a1[2] = v22;
            v23 = *a1;
            if (v20 < v23)
            {
              *a1 = v20;
              a1[1] = v23;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_10052C384(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (v12 < v13)
    {
      v14 = v10;
      while (1)
      {
        a1[v14 + 3] = v13;
        if (v14 == -2)
          break;
        v13 = a1[v14-- + 1];
        if (v12 >= v13)
        {
          v15 = &a1[v14 + 3];
          goto LABEL_13;
        }
      }
      v15 = a1;
LABEL_13:
      *v15 = v12;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    ++v10;
    if (++v9 == a2)
      return 1;
  }
}

_BYTE *sub_10052C5B8(_BYTE *a1, _BYTE *a2, _BYTE *a3, _BYTE *a4)
{
  _BYTE *result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  result = sub_10052C384(a1, a2, a3);
  v9 = (char)*a4;
  v10 = (char)*a3;
  if (v9 < v10)
  {
    *a3 = v9;
    *a4 = v10;
    v11 = (char)*a3;
    v12 = (char)*a2;
    if (v11 < v12)
    {
      *a2 = v11;
      *a3 = v12;
      v13 = (char)*a2;
      v14 = (char)*a1;
      if (v13 < v14)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

uint64_t sub_10052C634(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  char v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  char *v25;
  BOOL v26;
  int v27;
  char *v28;
  char *v29;
  int v30;
  char v31;
  char v32;
  int v33;
  int v34;
  char *v35;
  int v36;
  int v37;
  _BYTE *v38;
  _BYTE *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  char *v46;
  BOOL v48;
  uint64_t v49;
  char *v50;
  int v51;
  int v52;
  uint64_t v53;
  char *v54;
  int64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  int v61;
  BOOL v62;
  char *v63;
  int v64;
  char *v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int v73;
  int v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  int v78;
  int v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  int v83;
  int v84;

  v7 = (char *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v36 = *(a2 - 1);
        v37 = *v8;
        if (v36 < v37)
        {
          *v8 = v36;
          *(a2 - 1) = v37;
        }
        return result;
      case 3:
        return (uint64_t)sub_10052C384(v8, v8 + 1, a2 - 1);
      case 4:
        return (uint64_t)sub_10052C5B8(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v38 = v8 + 2;
        v39 = v8 + 3;
        result = (uint64_t)sub_10052C5B8(v8, v8 + 1, v8 + 2, v8 + 3);
        v40 = *(a2 - 1);
        v41 = v8[3];
        if (v40 < v41)
        {
          *v39 = v40;
          *(a2 - 1) = v41;
          v42 = (char)*v39;
          v43 = (char)*v38;
          if (v42 < v43)
          {
            *v38 = v42;
            *v39 = v43;
            v44 = v8[1];
            if (v42 < v44)
            {
              v8[1] = v42;
              v8[2] = v44;
              v45 = *v8;
              if (v42 < v45)
              {
                *v8 = v42;
                v8[1] = v45;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 23)
        {
          v46 = v8 + 1;
          v48 = v8 == a2 || v46 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              v49 = 0;
              v50 = v8;
              do
              {
                v51 = v50[1];
                v52 = *v50;
                v50 = v46;
                if (v51 < v52)
                {
                  v53 = v49;
                  while (1)
                  {
                    v8[v53 + 1] = v52;
                    if (!v53)
                      break;
                    v52 = v8[--v53];
                    if (v51 >= v52)
                    {
                      v54 = &v8[v53 + 1];
                      goto LABEL_79;
                    }
                  }
                  v54 = v8;
LABEL_79:
                  *v54 = v51;
                }
                v46 = v50 + 1;
                ++v49;
              }
              while (v50 + 1 != a2);
            }
          }
          else if (!v48)
          {
            do
            {
              v83 = v7[1];
              v84 = *v7;
              v7 = v46;
              if (v83 < v84)
              {
                do
                {
                  *v46 = v84;
                  v84 = *(v46 - 2);
                  --v46;
                }
                while (v83 < v84);
                *v46 = v83;
              }
              v46 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v55 = (unint64_t)(v9 - 2) >> 1;
            v56 = v55;
            do
            {
              v57 = v56;
              if (v55 >= v56)
              {
                v58 = (2 * v56) | 1;
                v59 = &v8[v58];
                if (2 * v57 + 2 >= v9)
                {
                  LOBYTE(v60) = *v59;
                }
                else
                {
                  v60 = *v59;
                  v61 = v59[1];
                  v62 = v60 < v61;
                  if (v60 <= v61)
                    LOBYTE(v60) = v59[1];
                  if (v62)
                  {
                    ++v59;
                    v58 = 2 * v57 + 2;
                  }
                }
                v63 = &v8[v57];
                v64 = v8[v57];
                if (v64 <= (char)v60)
                {
                  do
                  {
                    v65 = v59;
                    *v63 = v60;
                    if (v55 < v58)
                      break;
                    v66 = (2 * v58) | 1;
                    v59 = &v8[v66];
                    v58 = 2 * v58 + 2;
                    if (v58 >= v9)
                    {
                      LOBYTE(v60) = *v59;
                      v58 = v66;
                    }
                    else
                    {
                      v60 = *v59;
                      result = v59[1];
                      v67 = v60 < (int)result;
                      if (v60 <= (int)result)
                        LOBYTE(v60) = v59[1];
                      if (v67)
                        ++v59;
                      else
                        v58 = v66;
                    }
                    v63 = v65;
                  }
                  while (v64 <= (char)v60);
                  *v65 = v64;
                }
              }
              v56 = v57 - 1;
            }
            while (v57);
            do
            {
              v68 = 0;
              v69 = *v8;
              v70 = v8;
              do
              {
                v71 = &v70[v68 + 1];
                v72 = (2 * v68) | 1;
                v68 = 2 * v68 + 2;
                if (v68 >= v9)
                {
                  LOBYTE(v73) = *v71;
                  v68 = v72;
                }
                else
                {
                  v73 = *v71;
                  v74 = v71[1];
                  v75 = v73 < v74;
                  if (v73 <= v74)
                    LOBYTE(v73) = v71[1];
                  if (v75)
                    ++v71;
                  else
                    v68 = v72;
                }
                *v70 = v73;
                v70 = v71;
              }
              while (v68 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
              if (v71 == --a2)
              {
                *v71 = v69;
              }
              else
              {
                *v71 = *a2;
                *a2 = v69;
                v76 = v71 - v8 - 1;
                if (v71 - v8 + 1 >= 2)
                {
                  v77 = &v8[v76 >> 1];
                  v78 = *v77;
                  v79 = *v71;
                  if (v78 < v79)
                  {
                    v80 = v76 >> 1;
                    do
                    {
                      v81 = v77;
                      *v71 = v78;
                      if (!v80)
                        break;
                      v82 = v80 - 1;
                      v80 = (v80 - 1) >> 1;
                      v77 = &v8[v82 >> 1];
                      v78 = *v77;
                      v71 = v81;
                    }
                    while (v78 < v79);
                    *v81 = v79;
                  }
                }
              }
              v62 = v9-- <= 2;
            }
            while (!v62);
          }
          return result;
        }
        v10 = &v8[(unint64_t)v9 >> 1];
        if ((unint64_t)v9 < 0x81)
        {
          result = (uint64_t)sub_10052C384(&v7[(unint64_t)v9 >> 1], v7, a2 - 1);
        }
        else
        {
          v11 = (unint64_t)v9 >> 1;
          sub_10052C384(v7, &v7[(unint64_t)v9 >> 1], a2 - 1);
          sub_10052C384(v7 + 1, &v7[v11 - 1], a2 - 2);
          sub_10052C384(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (uint64_t)sub_10052C384(&v7[v11 - 1], v10, &v7[v11 + 1]);
          v12 = *v7;
          *v7 = v7[v11];
          v7[v11] = v12;
        }
        --a3;
        v13 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) >= v13)
        {
          if (v13 >= *(a2 - 1))
          {
            v28 = v7 + 1;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              ++v28;
            }
            while (v13 >= *v8);
          }
          else
          {
            v8 = v7;
            do
              v27 = *++v8;
            while (v13 >= v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
              v30 = *--v29;
            while (v13 < v30);
          }
          if (v8 < v29)
          {
            v31 = *v8;
            v32 = *v29;
            do
            {
              *v8 = v32;
              *v29 = v31;
              do
              {
                v33 = *++v8;
                v31 = v33;
              }
              while (v13 >= v33);
              do
              {
                v34 = *--v29;
                v32 = v34;
              }
              while (v13 < v34);
            }
            while (v8 < v29);
          }
          v35 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v35;
          a4 = 0;
          *v35 = v13;
          continue;
        }
        v14 = 0;
        do
          v15 = v7[++v14];
        while (v15 < v13);
        v16 = &v7[v14];
        v17 = a2;
        if (v14 == 1)
        {
          v17 = a2;
          do
          {
            if (v16 >= v17)
              break;
            v19 = *--v17;
          }
          while (v19 >= v13);
        }
        else
        {
          do
            v18 = *--v17;
          while (v18 >= v13);
        }
        if (v16 >= v17)
        {
          v25 = v16 - 1;
        }
        else
        {
          v20 = *v17;
          v21 = v17;
          v22 = &v7[v14];
          do
          {
            *v22 = v20;
            *v21 = v15;
            do
            {
              v23 = *++v22;
              LOBYTE(v15) = v23;
            }
            while (v23 < v13);
            do
            {
              v24 = *--v21;
              v20 = v24;
            }
            while (v24 >= v13);
          }
          while (v22 < v21);
          v25 = v22 - 1;
        }
        if (v25 != v7)
          *v7 = *v25;
        *v25 = v13;
        if (v16 < v17)
        {
LABEL_32:
          result = sub_10052C634(v7, v25, a3, a4 & 1);
          a4 = 0;
          v8 = v25 + 1;
          continue;
        }
        v26 = sub_10052CCA4(v7, v25);
        v8 = v25 + 1;
        result = sub_10052CCA4(v25 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v26)
            continue;
          goto LABEL_32;
        }
        a2 = v25;
        if (!v26)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_10052CCA4(char *a1, char *a2)
{
  int64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < v7)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_10052C384(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_10052C5B8(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v16 = a1 + 2;
      v17 = a1 + 3;
      sub_10052C5B8(a1, a1 + 1, a1 + 2, a1 + 3);
      v18 = *(a2 - 1);
      v19 = a1[3];
      if (v18 < v19)
      {
        *v17 = v18;
        *(a2 - 1) = v19;
        v20 = (char)*v17;
        v21 = (char)*v16;
        if (v20 < v21)
        {
          *v16 = v20;
          *v17 = v21;
          v22 = a1[1];
          if (v20 < v22)
          {
            a1[1] = v20;
            a1[2] = v22;
            v23 = *a1;
            if (v20 < v23)
            {
              *a1 = v20;
              a1[1] = v23;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_10052C384(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (v12 < v13)
    {
      v14 = v10;
      while (1)
      {
        a1[v14 + 3] = v13;
        if (v14 == -2)
          break;
        v13 = a1[v14-- + 1];
        if (v12 >= v13)
        {
          v15 = &a1[v14 + 3];
          goto LABEL_13;
        }
      }
      v15 = a1;
LABEL_13:
      *v15 = v12;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    ++v10;
    if (++v9 == a2)
      return 1;
  }
}

void sub_10052CE68(id a1)
{
  operator new();
}

void sub_10052CEA8()
{
  operator delete();
}

void sub_10052CECC(id a1)
{
  operator new();
}

void sub_10052CF0C()
{
  operator delete();
}

void sub_10052CF60(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

uint64_t sub_10052CF6C(uint64_t a1)
{
  _QWORD *v2;
  int i;
  int v5;
  unsigned int *v6;

  v2 = (_QWORD *)sub_100278350(a1, 22);
  *v2 = off_100935DA8;
  v2[32] = off_100935E88;
  v2[33] = off_100935ED8;
  v2[34] = off_100935F08;
  sub_1000160D0(v2 + 35);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_DWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  sub_1000160D0(a1 + 560);
  *(_QWORD *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 649) = 0;
  *(_WORD *)(a1 + 653) = 0;
  for (i = 1; i != 3; ++i)
  {
    v5 = i;
    v6 = (unsigned int *)&v5;
    *((_DWORD *)sub_1002DAB8C((uint64_t **)(a1 + 368), &v5, (uint64_t)&unk_100740F58, &v6) + 8) = 0;
  }
  return a1;
}

void sub_10052D070(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  void **v6;
  void *v7;
  void *v8;

  v6 = (void **)(v1 + 43);
  v7 = (void *)v1[50];
  if (v7)
  {
    v1[51] = v7;
    operator delete(v7);
  }
  sub_10001A82C(v3, *v4);
  v8 = *v6;
  if (*v6)
  {
    v1[44] = v8;
    operator delete(v8);
  }
  sub_100069BDC(v2);
  sub_100278464((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10052D0EC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 486) = 0;
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100936110);
  sub_100695F80((_QWORD *)qword_1009778B0, a1 + 272);
  v2 = sub_1000438A4();
  *(_BYTE *)(a1 + 655) = sub_100333B30(v2) > 1;
  return 0;
}

BOOL sub_10052D174()
{
  int v0;
  _BOOL8 v1;
  char v3;

  v3 = 0;
  sub_100043758(&v3);
  v0 = sub_10023A6DC((uint64_t)off_100935F20);
  if (!v0)
  {
    v0 = sub_10021F6A8((uint64_t)&unk_100935FD0);
    if (!v0)
      sub_10022D270((__n128 *)off_100936000);
  }
  v1 = v0 != 0;
  sub_100043728(&v3);
  return v1;
}

void sub_10052D1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

BOOL sub_10052D1F4()
{
  _BOOL8 v0;
  char v2;

  v2 = 0;
  sub_100043758(&v2);
  sub_10022D328(off_100936000);
  sub_10021F838((uint64_t)&unk_100935FD0);
  v0 = sub_10023AAA0() != 0;
  sub_100043728(&v2);
  return v0;
}

void sub_10052D250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10052D268(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  id **v6;
  id **v7;
  uint64_t *v8;

  v3 = *(uint64_t **)(a1 + 344);
  v2 = *(uint64_t **)(a1 + 352);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        v5 = *(void **)(v4 + 80);
        if (v5)
        {
          *(_QWORD *)(v4 + 88) = v5;
          operator delete(v5);
        }

        operator delete();
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 344);
  }
  *(_QWORD *)(a1 + 352) = v3;
  v6 = *(id ***)(a1 + 624);
  v7 = *(id ***)(a1 + 632);
  if (v6 != v7)
  {
    do
    {
      if (*v6)
      {
        sub_10041076C(*v6);
        operator delete();
      }
      ++v6;
    }
    while (v6 != v7);
    v6 = *(id ***)(a1 + 624);
  }
  *(_QWORD *)(a1 + 632) = v6;
  sub_10001A82C(a1 + 368, *(_QWORD **)(a1 + 376));
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  v8 = *(uint64_t **)(a1 + 536);
  if (v8)
  {
    v8[3] = 0;
    sub_1005374EC(v8);
    operator delete();
  }
  *(_QWORD *)(a1 + 536) = 0;
  sub_10052D37C(a1);
  return 0;
}

void sub_10052D37C(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 552);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 552));
    *(_QWORD *)(a1 + 552) = 0;
  }
}

uint64_t sub_10052D3B0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  void *v17;
  int v18;
  uint8_t buf[8];
  uint64_t v20;
  void (*v21)(uint64_t, void (***)(_QWORD, uint64_t *));
  void *v22;
  uint64_t v23;

  v3 = result;
  v5 = *(char **)(result + 344);
  v4 = *(char **)(result + 352);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(result + 352);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    v18 = *(_DWORD *)(a2 + 20);
    *(_QWORD *)buf = &v18;
    if ((sub_1002DAB8C((uint64_t **)(result + 368), &v18, (uint64_t)&unk_100740F58, (unsigned int **)buf)[4] & 0x80000000) != 0)
    {
      v18 = *(_DWORD *)(a2 + 20);
      *(_QWORD *)buf = &v18;
      if ((sub_1002DAB8C((uint64_t **)(v3 + 368), &v18, (uint64_t)&unk_100740F58, (unsigned int **)buf)[4] & 0x80000000) == 0)
      {
        v7 = qword_1009999A0;
        if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_FAULT))
          sub_1006FF010(v7, v8, v9, v10, v11, v12, v13, v14);
      }
    }
    else
    {
      v18 = *(_DWORD *)(a2 + 20);
      *(_QWORD *)buf = &v18;
      v6 = sub_1002DAB8C((uint64_t **)(v3 + 368), &v18, (uint64_t)&unk_100740F58, (unsigned int **)buf);
      --*((_DWORD *)v6 + 8);
      *(_QWORD *)buf = _NSConcreteStackBlock;
      v20 = 3221225472;
      v21 = sub_10053013C;
      v22 = &unk_100936018;
      v23 = v3;
      sub_100530080((os_unfair_lock_s *)(v3 + 392), buf);
    }
    v15 = *(char **)(v3 + 352);
    v16 = v15 - (v5 + 8);
    if (v15 != v5 + 8)
      memmove(v5, v5 + 8, v15 - (v5 + 8));
    *(_QWORD *)(v3 + 352) = &v5[v16];
    v17 = *(void **)(a2 + 80);
    if (v17)
    {
      *(_QWORD *)(a2 + 88) = v17;
      operator delete(v17);
    }

    operator delete();
  }
  return result;
}

uint64_t sub_10052D614(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;

  result = sub_100566178(a2, a3);
  if (result)
    operator new();
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10052D6CC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;

  result = sub_100566288(a2, a3);
  if (result)
    operator new();
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

uint64_t sub_10052D784(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  char v9;
  _QWORD v10[2];
  uint8_t buf[4];
  id v12;
  _BYTE v13[16];
  _BYTE v14[24];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 280);
  v4 = *(uint64_t **)(a1 + 344);
  if (v4 != *(uint64_t **)(a1 + 352))
  {
    while (1)
    {
      v5 = *v4;
      if (*(_QWORD *)(*v4 + 40) == a2)
        break;
      if (*(_QWORD *)(v5 + 56) == a2)
        goto LABEL_8;
LABEL_14:
      if (++v4 == *(uint64_t **)(a1 + 352))
        return sub_100034234((uint64_t)v10);
    }
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
      sub_1006FF0C8((uint64_t)v14, v5);
    sub_100566398(v5);
    if (*(_QWORD *)(v5 + 56) == a2)
    {
LABEL_8:
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
        sub_1006FF080((uint64_t)v13, v5);
      sub_100566398(v5);
    }
    v9 = 0;
    sub_100043758(&v9);
    v6 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(id *)(v5 + 8);
      *(_DWORD *)buf = 138412290;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disconnect stalled device \"%@\"", buf, 0xCu);

    }
    sub_10023B294(*(_QWORD *)v5);
    sub_10004339C(&v9);
    sub_100043728(&v9);
    goto LABEL_14;
  }
  return sub_100034234((uint64_t)v10);
}

void sub_10052D958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10052D988(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int **i;
  int *v8;
  id v9;
  void *v10;
  int v11;
  int v12;
  NSObject *v13;
  const char *v14;
  int **j;
  int *v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  void *__p[2];
  char v23;
  _QWORD v24[2];
  uint8_t buf[4];
  id v26;
  __int16 v27;
  const char *v28;

  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1 + 280);
  for (i = *(int ***)(a1 + 344); i != *(int ***)(a1 + 352); ++i)
  {
    v8 = *i;
    if (*(_QWORD *)*i == a2)
    {
      v9 = *((id *)v8 + 1);
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100936170);
      v10 = off_1009778C0;
      sub_100091AE8(__p, "IsPrimaryHearingAid");
      v11 = sub_10000628C((uint64_t)v10, v9, (uint64_t)__p);
      v12 = v11;
      if (v23 < 0)
      {
        operator delete(__p[0]);
        if (!v12)
          goto LABEL_14;
      }
      else if (!v11)
      {
        goto LABEL_14;
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100936170);
      sub_100653B18((uint64_t)off_1009778C0, v9, CFSTR("IsPrimaryHearingAid"));
LABEL_14:
      v13 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      {
        v14 = "No";
        if (a4)
          v14 = "Yes";
        *(_DWORD *)buf = 138412546;
        v26 = v9;
        v27 = 2080;
        v28 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Disconnected from device \"%@\" wakeUp %s", buf, 0x16u);
      }
      for (j = *(int ***)(a1 + 344); j != *(int ***)(a1 + 352); ++j)
      {
        v16 = *j;
        if (*j != v8)
          goto LABEL_23;
      }
      v16 = 0;
LABEL_23:
      v17 = v8[12];
      if (v8[6] == 2)
      {
        if (v16)
          sub_1002D6D60(**(_QWORD **)(a1 + 536), 0);
        sub_10052D37C(a1);
      }
      if (v17 == 3)
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_100936170);
        v18 = sub_1000589DC((uint64_t)off_1009778C0, v9, 0);
        if (qword_100977B40 != -1)
          dispatch_once(&qword_100977B40, &stru_100936190);
        sub_1004BA3D8((os_unfair_lock_s *)off_100977B38, 0, v18);
      }
      sub_10052D3B0(a1, (uint64_t)v8);
      if (v16 && v17 != 3 && v16[8] >= 7 && v16[12] == 3)
      {
        v19 = qword_1009999A0;
        if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
        {
          v20 = *((id *)v16 + 1);
          *(_DWORD *)buf = 138412290;
          v26 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Notify session is ready for device \"%@\"", buf, 0xCu);

        }
        sub_10052DD04(a1);
      }

      return sub_100034234((uint64_t)v24);
    }
  }
  return sub_100034234((uint64_t)v24);
}

void sub_10052DCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10052DD04(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  BOOL v5;
  unsigned __int16 ***i;
  unsigned __int16 **v7;
  timeval v8;

  v1 = result;
  v2 = *(_QWORD *)(result + 344);
  v3 = *(_QWORD *)(result + 352);
  if (v2 == v3)
    goto LABEL_8;
  v4 = 1;
  do
  {
    v5 = *(_DWORD *)(*(_QWORD *)v2 + 32) == 8 && *(_DWORD *)(*(_QWORD *)v2 + 48) == 3;
    v4 &= v5;
    v2 += 8;
  }
  while (v2 != v3);
  if ((v4 & 1) != 0)
  {
LABEL_8:
    sub_1002D4AE4(**(_QWORD **)(result + 536));
    v8.tv_sec = 0;
    *(_QWORD *)&v8.tv_usec = 0;
    result = gettimeofday(&v8, 0);
    *(double *)(v1 + 448) = (double)v8.tv_usec / 1000.0 + (double)(1000 * v8.tv_sec);
    for (i = *(unsigned __int16 ****)(v1 + 344); i != *(unsigned __int16 ****)(v1 + 352); ++i)
    {
      v7 = *i;
      result = sub_10052EE70(v1, v7, 1);
    }
  }
  return result;
}

uint64_t sub_10052DDDC(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  int **i;
  int *v7;
  NSObject *v8;
  _BOOL8 v9;
  id v10;
  _QWORD v12[2];
  uint8_t buf[4];
  double v14;
  __int16 v15;
  id v16;

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, (uint64_t)(a1 + 35));
  for (i = (int **)a1[43]; i != (int **)a1[44]; ++i)
  {
    v7 = *i;
    if (*(_QWORD *)*i == a2)
    {
      v8 = qword_1009999A0;
      v9 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        v10 = *((id *)v7 + 1);
        *(_DWORD *)buf = 134218242;
        v14 = (double)a3 * 1.25;
        v15 = 2112;
        v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Connection updated (%fms) with device \"%@\"", buf, 0x16u);

      }
      if (v7[8] < 7)
      {
        sub_10052D6CC(v9, (uint64_t)v7, 0);
      }
      else if (*(unsigned __int8 *)(*(_QWORD *)(a1[67] + 8) + 1) == a3)
      {
        sub_10052D6CC(v9, (uint64_t)v7, 3u);
        sub_10052DD04((uint64_t)a1);
      }
      else
      {
        sub_10052D6CC(v9, (uint64_t)v7, 1u);
        sub_10052DF7C((uint64_t)a1, (uint64_t)v7);
      }
      return sub_100034234((uint64_t)v12);
    }
  }
  return sub_100034234((uint64_t)v12);
}

void sub_10052DF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_10052DF7C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  if (*(_DWORD *)(a2 + 48) == 3)
  {
    v4 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_FAULT))
      sub_1006FF110(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v14 = 0;
  sub_100043758(&v14);
  v12 = sub_10023B24C(*(_QWORD *)a2, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 536) + 8) + 1), *(_DWORD *)(a2 + 24));
  sub_10052D6CC(v12, a2, 2u);
  return sub_100043728(&v14);
}

void sub_10052E018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10052E02C(uint64_t a1, uint64_t a2)
{
  _QWORD **i;
  _QWORD *v5;
  NSObject *v6;
  _BOOL8 v7;
  id v8;
  _QWORD v10[2];
  uint8_t buf[4];
  id v12;

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 280);
  for (i = *(_QWORD ***)(a1 + 344); i != *(_QWORD ***)(a1 + 352); ++i)
  {
    v5 = *i;
    if (**i == a2)
    {
      v6 = qword_1009999A0;
      v7 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT);
      if (v7)
      {
        v8 = (id)v5[1];
        *(_DWORD *)buf = 138412290;
        v12 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Encryption refreshed with device \"%@\"", buf, 0xCu);

      }
      if (*((_DWORD *)v5 + 8) == 4)
      {
        sub_10052D614(v7, (uint64_t)v5, 6u);
        if (sub_1002D6A54(**(_QWORD **)(a1 + 536)))
          sub_10052E174(a1, (uint64_t)v5);
      }
      return sub_100034234((uint64_t)v10);
    }
  }
  return sub_100034234((uint64_t)v10);
}

void sub_10052E158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_10052E174(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  int v17;
  __int16 v18;
  __int16 v19;
  int v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint8_t buf[4];
  id v28;

  sub_1000438A4();
  v4 = sub_100331670();
  v26 = 0;
  sub_100043758(&v26);
  sub_10023B3C0(*(_QWORD *)a2);
  sub_10004339C(&v26);
  sub_10052F7D4((_QWORD *)a1, a2);
  v6 = *(_DWORD *)(a2 + 32);
  if ((v6 - 4) >= 2)
  {
    if (v6 != 6)
    {
      if (v6 == 3)
      {
        sub_10052F954(v5, a2);
        return sub_100043728(&v26);
      }
      v7 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_FAULT))
        sub_1006FF1F0(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    if (*(_BYTE *)(a2 + 112))
    {
      sub_10052FA58(a1, a2);
    }
    else
    {
      v15 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(id *)(a2 + 8);
        *(_DWORD *)buf = 138412290;
        v28 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending 'start stream' command to device \"%@\"", buf, 0xCu);

      }
      v17 = *(_DWORD *)(a2 + 24);
      sub_10006D81C(&v26);
      if (v17 == 2)
        v18 = 2500;
      else
        v18 = 1250;
      if (*(_BYTE *)(a2 + 18))
        v19 = 0;
      else
        v19 = v18;
      v20 = sub_10023AD00(*(_QWORD *)a2, (*(_DWORD *)(a2 + 72) >> 1) & 1, v17, v19, v4 ^ 1u);
      if (v20)
      {
        v21 = qword_1009999A0;
        if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
          sub_1006FF180(v20, v21);
      }
      v22 = sub_10023B27C(*(unsigned __int16 **)a2, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 536) + 8) + 1), *(_DWORD *)(a2 + 24));
      v23 = sub_10004339C(&v26);
      *(_BYTE *)(a1 + 432) = 0;
      if (*(_DWORD *)(a2 + 48) != 2)
      {
        if (v22)
        {
          v23 = sub_10052D6CC(v23, a2, 3u);
        }
        else
        {
          sub_10052D6CC(v23, a2, 1u);
          v23 = (uint64_t)sub_10052DF7C(a1, a2);
        }
      }
      if ((*(_BYTE *)(a2 + 72) & 0x20) != 0)
      {
        sub_10052D614(v23, a2, 7u);
      }
      else
      {
        sub_10052D614(v23, a2, 8u);
        sub_10052DD04(a1);
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100936170);
      v24 = sub_1000589DC((uint64_t)off_1009778C0, *(void **)(a2 + 8), 0);
      if (qword_100977B40 != -1)
        dispatch_once(&qword_100977B40, &stru_100936190);
      sub_1004BA3D8((os_unfair_lock_s *)off_100977B38, 1, v24);
    }
  }
  return sub_100043728(&v26);
}

void sub_10052E44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10052E470(uint64_t a1, uint64_t a2)
{
  uint64_t *i;
  uint64_t v5;
  void *v6;
  id *v7;
  id v8;
  int v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  NSObject *v14;
  id v15;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  _QWORD v23[2];
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  id v27;

  v23[0] = 0;
  v23[1] = 0;
  sub_10003415C((uint64_t)v23, a1 + 280);
  for (i = *(uint64_t **)(a1 + 344); i != *(uint64_t **)(a1 + 352); ++i)
  {
    v5 = *i;
    if (*(_QWORD *)(*i + 104) == a2)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100936170);
      v6 = off_1009778C0;
      v7 = (id *)(v5 + 8);
      v8 = *(id *)(v5 + 8);
      sub_100091AE8(v21, "IsMFiAuthenticated");
      if ((sub_10000628C((uint64_t)v6, v8, (uint64_t)v21) & 1) != 0)
      {
        v9 = 1;
      }
      else
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_100936170);
        v10 = off_1009778C0;
        v11 = *v7;
        sub_100091AE8(v19, "IsMFiAuthenticated_CertClass0B");
        if ((sub_10000628C((uint64_t)v10, v11, (uint64_t)v19) & 1) != 0)
        {
          v9 = 1;
        }
        else
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_100936170);
          v12 = off_1009778C0;
          v13 = *v7;
          sub_100091AE8(__p, "Mac OS -- IsMFiAuthenticated_Ce");
          v9 = sub_10000628C((uint64_t)v12, v13, (uint64_t)__p);
          if (v18 < 0)
            operator delete(__p[0]);

        }
        if (v20 < 0)
          operator delete(v19[0]);

      }
      if (v22 < 0)
        operator delete(v21[0]);

      v14 = qword_1009999A0;
      if (v9)
      {
        if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
        {
          v15 = *v7;
          *(_DWORD *)buf = 141558275;
          v25 = 1752392040;
          v26 = 2113;
          v27 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "MFi authentication succeeded for device %{private, mask.hash}@", buf, 0x16u);

        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
          sub_1006FF260((id *)(v5 + 8), v14);
        sub_10052D3B0(a1, v5);
      }
      return sub_100034234((uint64_t)v23);
    }
  }
  return sub_100034234((uint64_t)v23);
}

void sub_10052E718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  if (a15 < 0)
    operator delete(__p);

  if (a21 < 0)
    operator delete(a16);

  if (a27 < 0)
    operator delete(a22);

  sub_100034234((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_10052E7A0(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v4;
  id v6;
  int v7;
  id v8;
  __int16 v9;
  int v10;

  if (*(int *)(a2 + 32) >= 3)
  {
    v4 = qword_1009999A0;
    if (!*(_QWORD *)(a2 + 120))
    {
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(id *)(a2 + 8);
        v7 = 138412546;
        v8 = v6;
        v9 = 1024;
        v10 = a3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'set volume' command to device %@ %u", (uint8_t *)&v7, 0x12u);

      }
      LOBYTE(v7) = 0;
      sub_100043758(&v7);
      sub_10023AE14(*(__int128 **)a2, a3);
      sub_10004339C(&v7);
      *(_BYTE *)(a2 + 128) = a3;
      operator new();
    }
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Volume hysteresis timer active", (uint8_t *)&v7, 2u);
    }
  }
}

void sub_10052E958(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10052E978(uint64_t **a1, uint64_t a2)
{
  uint64_t *i;
  uint64_t *v5;
  uint64_t v6;
  const __CFNumber *v7;
  int v8;
  float v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, (uint64_t)(a1 + 35));
  v5 = a1[43];
  for (i = a1[44]; v5 != i; ++v5)
  {
    v6 = *v5;
    if (*(_QWORD *)(*v5 + 120) == a2)
    {
      *(_QWORD *)(v6 + 120) = 0;
      v10 = 0.0;
      v7 = sub_1002D4CF4(*a1[67], &v10);
      if ((_DWORD)v7)
      {
        v8 = (int)(float)(v10 * 255.0);
        if (*(unsigned __int8 *)(v6 + 128) != v8)
          sub_10052E7A0((uint64_t)v7, v6, v8);
      }
      i = a1[44];
    }
  }
  return sub_100034234((uint64_t)v11);
}

void sub_10052EA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10052EA50(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  NSObject *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint8_t v9[16];
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 280);
  v4 = *(_QWORD **)(a1 + 536);
  if (v4 && *v4 == a2)
  {
    v5 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received 'stream will start' notification from HAL", v9, 2u);
    }
    v7 = *(uint64_t **)(a1 + 344);
    v6 = *(uint64_t **)(a1 + 352);
    while (v7 != v6)
    {
      if (*(int *)(*v7 + 32) >= 3)
      {
        sub_10052E174(a1, *v7);
        v6 = *(uint64_t **)(a1 + 352);
      }
      ++v7;
    }
    sub_1004FC11C(*(uint64_t **)(a1 + 536));
    sub_1002D4E6C(a2, 3);
  }
  return sub_100034234((uint64_t)v10);
}

void sub_10052EB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10052EB50(uint64_t a1, uint64_t a2)
{
  return sub_10052EA50(a1 - 256, a2);
}

uint64_t sub_10052EB60(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  NSObject *v5;
  uint64_t *i;
  uint64_t *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  _QWORD v18[2];
  timeval buf;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 280);
  v4 = *(_QWORD **)(a1 + 536);
  if (v4 && *v4 == a2)
  {
    v5 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.tv_sec) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received 'stream did stop' notification from HAL", (uint8_t *)&buf, 2u);
      v4 = *(_QWORD **)(a1 + 536);
    }
    v4[3] = 0;
    v17 = 0;
    sub_100043758(&v17);
    sub_10023B244();
    sub_10004339C(&v17);
    buf.tv_sec = 0;
    *(_QWORD *)&buf.tv_usec = 0;
    gettimeofday(&buf, 0);
    *(double *)(a1 + 456) = (double)buf.tv_usec / 1000.0 + (double)(1000 * buf.tv_sec);
    v7 = *(uint64_t **)(a1 + 344);
    for (i = *(uint64_t **)(a1 + 352); v7 != i; ++v7)
    {
      v8 = *v7;
      if (*(int *)(*v7 + 32) >= 7)
      {
        v9 = qword_1009999A0;
        if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *(id *)(v8 + 8);
          LODWORD(buf.tv_sec) = 138412290;
          *(__darwin_time_t *)((char *)&buf.tv_sec + 4) = (__darwin_time_t)v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending 'stop stream' command to device \"%@\"", (uint8_t *)&buf, 0xCu);

        }
        sub_10006D81C(&v17);
        sub_10023AD80(*(_QWORD *)v8);
        v11 = sub_10004339C(&v17);
        sub_10052D614(v11, v8, 6u);
        sub_10052EE70(a1, (unsigned __int16 **)v8, 0);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_100936170);
        v12 = off_1009778C0;
        v13 = *(id *)(v8 + 8);
        v14 = sub_1000589DC((uint64_t)v12, v13, 0);

        if (qword_100977B40 != -1)
          dispatch_once(&qword_100977B40, &stru_100936190);
        sub_1004BA3D8((os_unfair_lock_s *)off_100977B38, 0, v14);
        i = *(uint64_t **)(a1 + 352);
      }
    }
    v15 = sub_1000438A4();
    if (sub_100333B30(v15) == 1)
      sub_10052EFBC(a1);
    sub_10052D37C(a1);
    sub_1002D4E6C(a2, 0);
    sub_100043728(&v17);
  }
  return sub_100034234((uint64_t)v18);
}

void sub_10052EE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10052EE70(uint64_t a1, unsigned __int16 **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  __int16 *v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;

  v5 = (uint64_t)*a2;
  v6 = **a2;
  v7 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
  {
    v8 = "Disabling";
    if ((_DWORD)a3)
      v8 = "Enabling";
    v13 = 136315394;
    v14 = v8;
    v15 = 1024;
    v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s LEA Link Quality Mode for handle 0x%x", (uint8_t *)&v13, 0x12u);
  }
  v9 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 560))(v9, a3, 1, v5);
  v10 = sub_1000438A4();
  result = sub_100333B30(v10);
  if ((_DWORD)result == 1)
  {
    v12 = (__int16 *)(a1 + 464);
    if ((_DWORD)a3)
    {
      *(_DWORD *)(a1 + 528) = 0;
      *(_OWORD *)(a1 + 496) = 0u;
      *(_OWORD *)(a1 + 512) = 0u;
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(a1 + 480) = 0u;
      *(_WORD *)(a1 + 464) = -1;
      *(_WORD *)(a1 + 484) = -1;
    }
    else if (*v12 == -1)
    {
      *v12 = v6;
    }
    else
    {
      *(_WORD *)(a1 + 484) = v6;
    }
  }
  return result;
}

uint64_t sub_10052EFBC(uint64_t result)
{
  uint64_t v1;
  char *v2;
  unsigned __int16 ***v3;
  unsigned __int16 ***v4;
  char v5;
  char v6;
  unsigned __int16 **v7;
  int v8;
  char v9;
  __int16 v10;
  unsigned int v11;
  char v12;
  char v13;
  int v14;
  __int16 v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  char v20;
  _OWORD v21[3];

  v1 = *(_QWORD *)(result + 536);
  if (v1)
  {
    v2 = *(char **)(v1 + 8);
    if (v2)
    {
      v3 = *(unsigned __int16 ****)(result + 344);
      v4 = *(unsigned __int16 ****)(result + 352);
      if (v3 == v4)
      {
        v6 = 0;
        v5 = 0;
        v10 = 0;
      }
      else
      {
        v5 = 0;
        v6 = 0;
        do
        {
          v7 = *v3;
          v8 = ***v3;
          if (((_BYTE)(*v3)[9] & 8) != 0)
            v9 = 2;
          else
            v9 = 1;
          if (v8 == *(unsigned __int16 *)(result + 464))
          {
            v6 = v9;
          }
          else if (v8 == *(unsigned __int16 *)(result + 484))
          {
            v5 = v9;
          }
          ++v3;
        }
        while (v3 != v4);
        v10 = *((_WORD *)v7 + 8);
      }
      v11 = vcvtmd_u64_f64((*(double *)(result + 456) - *(double *)(result + 448)) / 1000.0);
      memset(v21, 0, 32);
      v12 = *(_BYTE *)(result + 440);
      v13 = *v2;
      v14 = *(_DWORD *)(v1 + 16);
      v15 = *(char *)(result + 466);
      v16 = *(char *)(result + 486);
      v18 = v10;
      v19 = v12;
      v20 = v13;
      LOBYTE(v21[0]) = v14;
      DWORD1(v21[0]) = v11;
      BYTE8(v21[0]) = v6;
      WORD5(v21[0]) = v15;
      *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)(result + 468);
      BYTE12(v21[1]) = v5;
      HIWORD(v21[1]) = v16;
      v21[2] = *(_OWORD *)(result + 488);
      v17 = sub_100065478();
      return (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v17 + 128))(v17, &v18);
    }
  }
  return result;
}

uint64_t sub_10052F0D4(uint64_t a1, uint64_t a2)
{
  return sub_10052EB60(a1 - 256, a2);
}

uint64_t sub_10052F0E4(_QWORD *a1, uint64_t a2, float a3)
{
  _QWORD *v6;
  NSObject *v8;
  _BOOL8 v9;
  uint64_t *i;
  _QWORD v11[2];
  uint8_t buf[4];
  double v13;
  __int16 v14;
  int v15;

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, (uint64_t)(a1 + 35));
  v6 = (_QWORD *)a1[67];
  if (v6 && *v6 == a2)
  {
    v8 = qword_1009999A0;
    v9 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      *(_DWORD *)buf = 134218240;
      v13 = a3;
      v14 = 1024;
      v15 = (int)(float)(a3 * 255.0);
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'volume update %f (%d)' event from HAL", buf, 0x12u);
    }
    for (i = (uint64_t *)a1[43]; i != (uint64_t *)a1[44]; ++i)
      sub_10052E7A0(v9, *i, (int)(float)(a3 * 255.0));
  }
  return sub_100034234((uint64_t)v11);
}

void sub_10052F20C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10052F228(uint64_t a1, uint64_t a2, float a3)
{
  return sub_10052F0E4((_QWORD *)(a1 - 256), a2, a3);
}

uint64_t sub_10052F230(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  NSObject *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t *v12;
  uint64_t *i;
  uint64_t v14;
  _QWORD v15[2];
  uint8_t buf[4];
  int v17;

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, (uint64_t)(a1 + 35));
  v6 = (_QWORD *)a1[67];
  if (v6 && *v6 == a2)
  {
    v8 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'select codec (%d)' command from HAL", buf, 8u);
      v6 = (_QWORD *)a1[67];
    }
    v9 = v6[1];
    v10 = sub_10052F3B4((uint64_t)a1, a3);
    if (v10)
    {
      v11 = v10;
      *(_QWORD *)(a1[67] + 8) = v10;
      *(_DWORD *)buf = 0;
      sub_1002D6D40(a2, buf);
      if ((buf[0] & 1) != 0)
      {
        if (v9 && *(unsigned __int8 *)(v9 + 3) != v11[3])
          sub_10052F528(a1[67]);
        sub_10052F584(a1[67]);
      }
      v12 = (uint64_t *)a1[43];
      for (i = (uint64_t *)a1[44]; v12 != i; *(_BYTE *)(v14 + 112) = 1)
        v14 = *v12++;
    }
  }
  return sub_100034234((uint64_t)v15);
}

void sub_10052F398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_10052F3B4(uint64_t a1, int a2)
{
  uint64_t v2;
  char *result;
  int v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 424);
  if (v2 <= 59)
  {
    if (v2 == 40)
    {
      result = &byte_1007420F0;
    }
    else
    {
      if (v2 != 56)
        goto LABEL_17;
      result = &byte_100742174;
    }
  }
  else
  {
    if (v2 != 60)
    {
      if (v2 == 90 || v2 == 120)
      {
        result = &byte_10074224C;
        goto LABEL_11;
      }
LABEL_17:
      v5 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
      {
        v13 = 134217984;
        v14 = v2;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid LEA packet size %lu", (uint8_t *)&v13, 0xCu);
        v5 = qword_1009999A0;
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
        sub_1006DE8F8(v5, v6, v7, v8, v9, v10, v11, v12);
      return 0;
    }
    result = &byte_1007421A4;
  }
LABEL_11:
  v4 = *result;
  if (!*result)
  {
LABEL_15:
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
      sub_1006FF2F4();
    return 0;
  }
  while (v4 != a2)
  {
    v4 = result[12];
    if (!result[12])
      goto LABEL_15;
    result += 12;
  }
  return result;
}

uint64_t sub_10052F528(uint64_t result)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(result + 32);
  if (v1)
  {
    if (*v1)
      operator delete[]();
    operator delete();
  }
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_10052F584(uint64_t result)
{
  if (!*(_QWORD *)(result + 32))
    operator new();
  return result;
}

void sub_10052F5FC()
{
  operator delete();
}

uint64_t sub_10052F620(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10052F230((_QWORD *)(a1 - 256), a2, a3);
}

uint64_t sub_10052F628(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  NSObject *v8;
  NSObject *v9;
  uint64_t *v10;
  uint64_t *i;
  uint64_t v12;
  _QWORD v13[2];
  uint8_t buf[4];
  int v15;

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, (uint64_t)(a1 + 35));
  v6 = a1[67];
  if (v6 && *(_QWORD *)v6 == a2)
  {
    v8 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'change audio content type (%d)' command from HAL", buf, 8u);
      v6 = a1[67];
    }
    if (*(_DWORD *)(v6 + 16) == a3)
    {
      v9 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio content type has no change", buf, 2u);
      }
    }
    else
    {
      *(_DWORD *)(v6 + 16) = a3;
      v10 = (uint64_t *)a1[43];
      for (i = (uint64_t *)a1[44]; v10 != i; *(_BYTE *)(v12 + 112) = 1)
        v12 = *v10++;
    }
  }
  return sub_100034234((uint64_t)v13);
}

uint64_t sub_10052F788(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10052F628((_QWORD *)(a1 - 256), a2, a3);
}

void sub_10052F790()
{
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
    sub_1006FF320();
}

void sub_10052F7D4(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  int v7;
  int v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  id v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;

  sub_100534568(a1);
  sub_1005347FC((uint64_t)a1, a2);
  if (*(_DWORD *)(a2 + 28) != *(_DWORD *)(a2 + 24) || (*(_BYTE *)(a2 + 19) != 0) != (*(_BYTE *)(a2 + 18) != 0))
  {
    v4 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(id *)(a2 + 8);
      v6 = v5;
      v7 = *(_DWORD *)(a2 + 24);
      v8 = *(unsigned __int8 *)(a2 + 18);
      v11 = 141558787;
      if (v8)
        v9 = "Tail";
      else
        v9 = "Head";
      v12 = 1752392040;
      v13 = 2113;
      v14 = v5;
      v15 = 1024;
      v16 = v7;
      v17 = 2080;
      v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "LEA: Retagging device %{private, mask.hash}@, streamMode=%d slot=%s", (uint8_t *)&v11, 0x26u);

    }
    v10 = sub_1000438A4();
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v10 + 448))(v10, *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 24), *(unsigned __int8 *)(a2 + 18), 1);
    *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a2 + 19) = *(_BYTE *)(a2 + 18);
  }
}

_BYTE *sub_10052F954(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  id v4;
  uint64_t v5;
  int v7;
  id v8;

  v3 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(id *)(a2 + 8);
    v7 = 138412290;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Restarting encryption to device \"%@\"", (uint8_t *)&v7, 0xCu);

  }
  LOBYTE(v7) = 0;
  sub_100043758(&v7);
  sub_10023B38C(*(_QWORD *)a2);
  v5 = sub_10004339C(&v7);
  sub_10052D614(v5, a2, 4u);
  return sub_100043728(&v7);
}

void sub_10052FA3C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10052FA58(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD v17[2];
  __int16 v18;
  id v19;

  v4 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = **(unsigned __int8 **)(*(_QWORD *)(a1 + 536) + 8);
    v6 = *(id *)(a2 + 8);
    v17[0] = 67109378;
    v17[1] = v5;
    v18 = 2112;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'select codec %d' command to device \"%@\"", (uint8_t *)v17, 0x12u);

  }
  if (*(_DWORD *)(a2 + 32) != 6)
  {
    v7 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_FAULT))
      sub_1006FF1F0(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  LOBYTE(v17[0]) = 0;
  sub_100043758(v17);
  sub_10023ACC8(*(__int128 **)a2, **(_BYTE **)(*(_QWORD *)(a1 + 536) + 8), *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 536) + 8) + 4), *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 536) + 8) + 1), *(_BYTE *)(*(_QWORD *)(a1 + 536) + 16));
  v15 = sub_10004339C(v17);
  *(_BYTE *)(a2 + 112) = 0;
  sub_10052D614(v15, a2, 5u);
  return sub_100043728(v17);
}

void sub_10052FBA8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10052FBC4(uint64_t a1, __int128 *a2, char a3, __int16 a4)
{
  NSObject *v7;
  char v9;

  v7 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
    sub_1006FF34C(a3, a4, v7);
  v9 = 0;
  sub_100043758(&v9);
  sub_10023ADDC(a2, a3, a4);
  return sub_100043728(&v9);
}

void sub_10052FC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_10052FC60(uint64_t a1, unsigned __int8 *__src, size_t __n, int a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  _BYTE *v11;
  uint64_t v12;
  BOOL v13;
  NSObject *v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  size_t v20;
  NSObject *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  size_t v26;
  int v27;
  int v28;
  NSObject *log;
  unsigned int v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  int v34;

  v4 = *(_QWORD *)(a1 + 536);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 32);
    if (v5 && (v6 = *(char **)v5) != 0)
    {
      v8 = __n;
      if (!__src && __n)
      {
        if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
          sub_1006FF504();
        return;
      }
      v11 = *(_BYTE **)(v4 + 8);
      if (*v11 == 15)
      {
        v12 = 0;
        v13 = 1;
        if (!__n)
          goto LABEL_17;
      }
      else
      {
        v13 = v11[5] == 0;
        v12 = 2 * v11[5];
        if (!__n)
        {
LABEL_17:
          v14 = qword_1009999A0;
          if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
            sub_1006FF49C(v8, v14, v15);
          v8 = 0;
          goto LABEL_20;
        }
      }
      if (v11[3] < __n)
        goto LABEL_17;
      if (!v11[6])
      {
        memcpy(&v6[v12], __src, __n);
LABEL_20:
        if (!v13)
        {
          v16 = *(_BYTE *)(a1 + 432);
          *(_BYTE *)(a1 + 432) = v16 + 1;
          **(_BYTE **)v5 = v16;
          *(_BYTE *)(*(_QWORD *)v5 + 1) = v8;
        }
        v17 = *(uint64_t **)(a1 + 536);
        v18 = *v17;
        v19 = *(char **)v5;
        v20 = v8 + v12;
        if (*(_BYTE *)(v17[1] + 5))
          sub_1002D49E4(v18, v19, v20, a4);
        else
          sub_1002D46D8(v18, v19, v20, a4);
        v21 = qword_1009999A0;
        if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEBUG))
          sub_1006FF42C(v8 + v12, v21);
        return;
      }
      v22 = *__src;
      v30 = v22 >> 2;
      v23 = v22 & 3;
      v24 = *(unsigned __int8 *)(v5 + 16);
      if (v24 == v22 >> 2 && *(unsigned __int8 *)(v5 + 17) <= v23)
      {
        v25 = *(_QWORD *)(v5 + 8);
      }
      else
      {
        if (!*(_BYTE *)(v5 + 18))
        {
          log = qword_1009999A0;
          if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
          {
            v28 = *(unsigned __int8 *)(v5 + 17);
            *(_DWORD *)buf = 67109376;
            v32 = v28;
            v33 = 1024;
            v34 = v24;
            _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Only received %u packets for frameId %u", buf, 0xEu);
            v6 = *(char **)v5;
          }
        }
        v25 = 0;
        *(_DWORD *)(v5 + 15) = 0;
        *(_QWORD *)(v5 + 8) = 0;
      }
      v26 = v8 - 1;
      memcpy(&v6[v25 + v12], __src + 1, v26);
      *(_BYTE *)(v5 + 16) = v30;
      v27 = *(unsigned __int8 *)(v5 + 17);
      *(_BYTE *)(v5 + 17) = v27 + 1;
      v8 = *(_QWORD *)(v5 + 8) + v26;
      *(_QWORD *)(v5 + 8) = v8;
      if (v27 == v23)
      {
        *(_BYTE *)(v5 + 18) = 1;
        goto LABEL_20;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
    {
      sub_1006FF400();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
  {
    sub_1006FF3D4();
  }
}

BOOL sub_10052FF70(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v8;
  const char *v9;

  v1 = *(_QWORD **)(a1 + 344);
  if (*(_QWORD *)(a1 + 352) - (_QWORD)v1 != 16)
  {
    v3 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_FAULT))
    {
      v8 = 136446210;
      v9 = "fSessionList.size() == 2";
      _os_log_fault_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v8, 0xCu);
      v1 = *(_QWORD **)(a1 + 344);
    }
  }
  v4 = v1[1];
  if (*(_QWORD *)(*v1 + 64) != *(_QWORD *)(v4 + 64))
    return 0;
  v5 = *(_DWORD *)(*v1 + 72);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_DWORD *)(v4 + 72);
  if ((v6 & 1) == 0)
    return 0;
  if ((v5 & 4) != 0)
    return (v6 & 4) != 0 && ((v6 | v5) & 8) != 0;
  return (v6 & 4) == 0;
}

void sub_100530080(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_100530114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_10053013C(uint64_t a1, void (***a2)(_QWORD, uint64_t *))
{
  uint64_t v3[3];

  sub_100537928(v3, *(_QWORD *)(a1 + 32) + 368);
  (**a2)(a2, v3);
  sub_10001A82C((uint64_t)v3, (_QWORD *)v3[1]);
}

void sub_100530190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_10001A82C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1005301A8(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  id *v7;
  id v8;
  int v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  id v19;
  const __CFNumber *v20;
  uint64_t *v21;
  void *v22;
  id v23;
  void *v24;
  int v25;
  NSObject *v26;
  id v27;
  char v28;
  uint64_t v29;
  unint64_t *v30;
  _BOOL8 v31;
  _BYTE *v32;
  NSObject *v33;
  id v34;
  uint64_t v35;
  id v36;
  void *v37;
  id *v38;
  unint64_t v39;
  unint64_t v40;
  NSObject *v41;
  NSObject *v42;
  void *v43;
  void *v44[2];
  char v45;
  void *__p[2];
  char v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  char v52;
  uint64_t v53;
  uint8_t v54[8];
  char v55;
  _BYTE buf[22];
  char v57;

  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_1009361B0);
  v4 = sub_100624724((uint64_t)off_1009778A0, *(_QWORD *)a2);
  v43 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v52 = 0;
  v5 = sub_100027F68();
  sub_100091AE8(buf, "LEA");
  sub_100091AE8(v54, "IgnoreMFi");
  (*(void (**)(uint64_t, _BYTE *, uint8_t *, char *))(*(_QWORD *)v5 + 72))(v5, buf, v54, &v52);
  if (v55 < 0)
    operator delete(*(void **)v54);
  if (v57 < 0)
    operator delete(*(void **)buf);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100936170);
  v6 = off_1009778C0;
  v7 = (id *)(a2 + 8);
  v8 = *(id *)(a2 + 8);
  sub_100091AE8(v50, "IsMFiAuthenticated");
  if ((sub_10000628C((uint64_t)v6, v8, (uint64_t)v50) & 1) != 0)
  {
    v9 = 1;
  }
  else
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100936170);
    v10 = off_1009778C0;
    v11 = *v7;
    sub_100091AE8(v48, "IsMFiAuthenticated_CertClass0B");
    if ((sub_10000628C((uint64_t)v10, v11, (uint64_t)v48) & 1) != 0)
    {
      v9 = 1;
    }
    else
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100936170);
      v12 = off_1009778C0;
      v13 = *v7;
      sub_100091AE8(__p, "Mac OS -- IsMFiAuthenticated_Ce");
      v9 = sub_10000628C((uint64_t)v12, v13, (uint64_t)__p);
      if (v47 < 0)
        operator delete(__p[0]);

    }
    if (v49 < 0)
      operator delete(v48[0]);

  }
  if (v51 < 0)
    operator delete(v50[0]);

  if (v9)
  {
    v14 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *v7;
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Device \"%@\" is MFi authenticated", buf, 0xCu);

    }
  }
  else
  {
    v16 = qword_1009999A0;
    if (!v52)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *v7;
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Device \"%@\" is not MFi authenticated yet, authenticating...", buf, 0xCu);

      }
      v18 = sub_10034FCFC();
      v19 = *v7;
      (*(void (**)(uint64_t, id))(*(_QWORD *)v18 + 24))(v18, v19);

      operator new();
    }
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
      sub_1006FF608();
  }
  if (*(_QWORD *)(a1 + 536))
  {
    if (sub_10052FF70(a1))
    {
      *(_DWORD *)v54 = 0;
      v20 = sub_1002D4CF4(**(_QWORD **)(a1 + 536), v54);
      if ((_DWORD)v20)
        sub_10052E7A0((uint64_t)v20, a2, (int)(float)(*(float *)v54 * 255.0));
      v21 = *(uint64_t **)(a1 + 536);
      if (v21[1])
        *(_BYTE *)(a2 + 112) = 1;
      LODWORD(v53) = 0;
      sub_1002D6D40(*v21, &v53);
      if ((v53 & 1) == 0)
        goto LABEL_57;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100936170);
      v22 = off_1009778C0;
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_1009361B0);
      v23 = sub_100624724((uint64_t)off_1009778A0, *(_QWORD *)a2);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      sub_100091AE8(v44, "Enable Input");
      v25 = sub_10000628C((uint64_t)v22, v24, (uint64_t)v44);
      if (v45 < 0)
        operator delete(v44[0]);

      if (v25)
      {
        v26 = qword_1009999A0;
        if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
        {
          v27 = *v7;
          *(_DWORD *)buf = 141558275;
          *(_QWORD *)&buf[4] = 1752392040;
          *(_WORD *)&buf[12] = 2113;
          *(_QWORD *)&buf[14] = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Enable device %{private, mask.hash}@ input", buf, 0x16u);

        }
        v28 = 1;
        sub_1002D6D60(**(_QWORD **)(a1 + 536), 1);
      }
      else
      {
LABEL_57:
        v33 = qword_1009999A0;
        v28 = 0;
        if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
        {
          v34 = *v7;
          *(_DWORD *)buf = 141558275;
          *(_QWORD *)&buf[4] = 1752392040;
          *(_WORD *)&buf[12] = 2113;
          *(_QWORD *)&buf[14] = v34;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Disable device %{private, mask.hash}@ input", buf, 0x16u);

          v28 = 0;
        }
      }
      *(_BYTE *)(a2 + 129) = v28;
      if (sub_1002D6A54(**(_QWORD **)(a1 + 536)))
        sub_10052E174(a1, a2);
      v35 = **(_QWORD **)(a1 + 536);
      sub_1002D70C0(buf, a2 + 80);
      sub_1002D6B38(v35, (uint64_t)buf);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_1009361B0);
      v36 = sub_100624724((uint64_t)off_1009778A0, *(_QWORD *)a2);
      v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
      if (*(_BYTE *)(a1 + 648))
      {
        sub_1005312C8(a1, v37);
      }
      else
      {
        if (qword_100977908 != -1)
          dispatch_once(&qword_100977908, &stru_100936130);
        sub_100531358(qword_100977900, v37);
      }
      v38 = sub_1005313CC(a1, v37);
      if (v38)
        sub_1004114CC((uint64_t)v38, *(_WORD *)(a2 + 16));

    }
    else
    {
      v31 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR);
      if (v31)
        sub_1006FF5DC();
      v32 = sub_10052FBC4(v31, *(__int128 **)a2, 12, 8);
      sub_10052D614((uint64_t)v32, a2, 0);
    }
  }
  else
  {
    v29 = sub_1000438A4();
    v30 = (unint64_t *)(a1 + 424);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 456))(v29, a1 + 424))
    {
      v39 = *(_QWORD *)(a2 + 64);
      v40 = *v30;
      if (v39 < *v30)
      {
        v41 = qword_1009999A0;
        if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v40;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "LEA FW max packet size is %zu bytes", buf, 0xCu);
          v39 = *(_QWORD *)(a2 + 64);
        }
        *v30 = v39;
        v40 = v39;
      }
      if (*(_BYTE *)(a1 + 440) == 1 && v40 >= 0x3D)
      {
        v40 = 60;
        *v30 = 60;
      }
      v42 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v40;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "LEA max packet size is %zu bytes", buf, 0xCu);
      }
      operator new();
    }
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
      sub_1006FF5B0();
  }

}

void sub_1005310B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;
  uint64_t v46;

  if (a21 < 0)
    operator delete(__p);

  if (*(char *)(v46 - 105) < 0)
    operator delete(*(void **)(v46 - 128));

  _Unwind_Resume(a1);
}

void sub_1005312C8(uint64_t a1, void *a2)
{
  id *v3;
  id *v4;
  id v5;

  v5 = a2;
  v3 = sub_1005313CC(a1, v5);
  v4 = v3;
  if (v3)
  {
    if ((sub_1004114B4((uint64_t)v3) & 1) != 0)
      sub_100411488((uint64_t)v4);
    else
      sub_10041079C(v4);
  }
  else
  {
    sub_100535118(a1, a1 + 649, a1 + 264, v5);
  }

}

void sub_100531344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100531358(uint64_t a1, void *a2)
{
  id *v3;
  id v4;

  v4 = a2;
  v3 = sub_1005313CC(a1, v4);
  if (v3)
    sub_10041146C((uint64_t)v3, 1);
  else
    sub_100535118(a1, a1 + 649, a1 + 264, v4);

}

void sub_1005313B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id *sub_1005313CC(uint64_t a1, void *a2)
{
  id v3;
  id **i;
  id *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  _QWORD v12[2];

  v3 = a2;
  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 560);
  for (i = *(id ***)(a1 + 624); i != *(id ***)(a1 + 632); ++i)
  {
    v5 = *i;
    v6 = sub_1004114BC(*i);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "UUIDString"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));
    v10 = objc_msgSend(v8, "isEqualToString:", v9);

    if ((v10 & 1) != 0)
      goto LABEL_6;
  }
  v5 = 0;
LABEL_6:
  sub_100034234((uint64_t)v12);

  return v5;
}

void sub_10053149C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005314E0(uint64_t a1, __int128 *a2, int a3, int a4, int a5, int a6)
{
  id v12;
  void *v13;
  __int128 ***i;
  uint64_t v15;
  int v16;
  NSObject *v17;
  void *v18;
  int v19;
  int v20;
  void *v21;
  uint64_t v22;
  int v23;
  NSObject *v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  int v29;
  NSObject *v30;
  _BOOL4 v31;
  _BOOL8 v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *__p[2];
  char v38;
  uint64_t v39;
  _QWORD v40[2];
  _DWORD buf[3];
  __int16 v42;
  _BYTE v43[10];
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;

  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_1009361B0);
  v12 = sub_100624724((uint64_t)off_1009778A0, (uint64_t)a2);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  if (v13)
  {
    v40[0] = 0;
    v40[1] = 0;
    sub_10003415C((uint64_t)v40, a1 + 280);
    for (i = *(__int128 ****)(a1 + 344); i != *(__int128 ****)(a1 + 352); ++i)
    {
      if (**i == a2)
        goto LABEL_35;
    }
    v39 = 0;
    v15 = sub_1000438A4();
    v16 = sub_100333B30(v15);
    v17 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 138413314;
      *(_QWORD *)&buf[1] = v13;
      v42 = 1024;
      *(_DWORD *)v43 = a3;
      *(_WORD *)&v43[4] = 1024;
      *(_DWORD *)&v43[6] = a4;
      v44 = 1024;
      v45 = a5;
      v46 = 1024;
      v47 = a6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Received 'version' command from device \"%@\" with version: %d, companyID: %d, hwVersion: %d, swVersion: %d", (uint8_t *)buf, 0x24u);
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100936170);
    v18 = off_1009778C0;
    sub_100091AE8(__p, "IsPrimaryHearingAid");
    v19 = sub_10000628C((uint64_t)v18, v13, (uint64_t)__p);
    v20 = v19;
    if (v38 < 0)
    {
      operator delete(__p[0]);
      if (!v20)
        goto LABEL_20;
    }
    else if (!v19)
    {
      goto LABEL_20;
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100936170);
    sub_100653B18((uint64_t)off_1009778C0, v13, CFSTR("IsPrimaryHearingAid"));
LABEL_20:
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100936170);
    v21 = off_1009778C0;
    sub_100091AE8(v35, "DisableLEA");
    v22 = sub_10000628C((uint64_t)v21, v13, (uint64_t)v35);
    if (v16)
      v23 = v22;
    else
      v23 = 1;
    if (v36 < 0)
    {
      operator delete(v35[0]);
      if (v23)
        goto LABEL_27;
    }
    else if (v23)
    {
LABEL_27:
      v24 = qword_1009999A0;
      v22 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v22)
      {
        buf[0] = 138412290;
        *(_QWORD *)&buf[1] = v13;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Rejecting LEA connection for device \"%@\" as it is disabled", (uint8_t *)buf, 0xCu);
      }
      v25 = 7;
      goto LABEL_34;
    }
    if (a3 != 2 || v16 != 1)
    {
      v26 = *(_QWORD *)(a1 + 344);
      v27 = *(_QWORD *)(a1 + 352);
      if (v26 == v27)
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_100936170);
        v28 = off_1009778C0;
        sub_100091AE8(v33, "Enable Input");
        v29 = sub_10000628C((uint64_t)v28, v13, (uint64_t)v33);
        if (v34 < 0)
          operator delete(v33[0]);
        v30 = qword_1009999A0;
        v31 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT);
        if (v29)
        {
          if (v31)
          {
            buf[0] = 141558275;
            *(_QWORD *)&buf[1] = 1752392040;
            v42 = 2113;
            *(_QWORD *)v43 = v13;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "LEA: Set device %{private, mask.hash}@ to Tail", (uint8_t *)buf, 0x16u);
          }
        }
        else if (v31)
        {
          buf[0] = 141558275;
          *(_QWORD *)&buf[1] = 1752392040;
          v42 = 2113;
          *(_QWORD *)v43 = v13;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "LEA: Set device %{private, mask.hash}@ to Head", (uint8_t *)buf, 0x16u);
        }
      }
      else if (v27 - v26 != 8)
      {
        v32 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR);
        if (v32)
          sub_1006FF634();
        sub_10052FBC4(v32, a2, 1, 7);
        goto LABEL_35;
      }
      operator new();
    }
    v25 = 2;
LABEL_34:
    sub_10052FBC4(v22, a2, 1, v25);
LABEL_35:
    sub_100034234((uint64_t)v40);
    goto LABEL_36;
  }
  sub_10052FBC4(0, a2, 1, 3);
LABEL_36:

}

void sub_100531BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_100034234((uint64_t)&a31);

  _Unwind_Resume(a1);
}

char *sub_100531C84(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100531E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100531EC0(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 ***i;
  __int128 **v8;
  NSObject *v9;
  void *p_p;
  __int128 *v11;
  unint64_t v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  void *v26;
  int64_t v27;
  char *v28;
  char *v29;
  char *v30;
  void *v31;
  void *__dst;
  uint64_t v33;
  void *__p;
  char *v35;
  char *v36;
  _QWORD v37[2];
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  __int128 *v41;

  v37[0] = 0;
  v37[1] = 0;
  v6 = sub_10003415C((uint64_t)v37, a1 + 280);
  for (i = *(__int128 ****)(a1 + 344); ; ++i)
  {
    if (i == *(__int128 ****)(a1 + 352))
      goto LABEL_32;
    v8 = *i;
    if (**i == a2)
      break;
  }
  v9 = qword_1009999A0;
  v6 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v6)
  {
    sub_1000453F0(a3, &__p);
    if (SHIBYTE(v36) >= 0)
      p_p = &__p;
    else
      p_p = __p;
    v11 = v8[1];
    *(_DWORD *)buf = 136446466;
    v39 = p_p;
    v40 = 2112;
    v41 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'supported codec list (%{public}s)' command from device \"%@\"", buf, 0x16u);
    if (SHIBYTE(v36) < 0)
      operator delete(__p);

  }
  if (*((_DWORD *)v8 + 8) != 2)
  {
LABEL_32:
    sub_10052FBC4(v6, a2, 2, 3);
    return sub_100034234((uint64_t)v37);
  }
  sub_10052D614(v6, (uint64_t)v8, 3u);
  v12 = 0;
  __p = 0;
  v35 = 0;
  v36 = 0;
  while (sub_10003F8C4(a3) > v12)
  {
    v13 = sub_1005F55FC(a3, v12);
    v14 = v13;
    v15 = v35;
    if (v35 >= v36)
    {
      v17 = (char *)__p;
      v18 = (v35 - (_BYTE *)__p) >> 2;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62)
        abort();
      v20 = v36 - (_BYTE *)__p;
      if ((v36 - (_BYTE *)__p) >> 1 > v19)
        v19 = v20 >> 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
        v21 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        v22 = (char *)sub_1002B46E0((uint64_t)&v36, v21);
        v17 = (char *)__p;
        v15 = v35;
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[4 * v18];
      *(_DWORD *)v23 = v14;
      v16 = v23 + 4;
      while (v15 != v17)
      {
        v24 = *((_DWORD *)v15 - 1);
        v15 -= 4;
        *((_DWORD *)v23 - 1) = v24;
        v23 -= 4;
      }
      __p = v23;
      v35 = v16;
      v36 = &v22[4 * v21];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_DWORD *)v35 = v13;
      v16 = v15 + 4;
    }
    v35 = v16;
    ++v12;
  }
  v31 = 0;
  __dst = 0;
  v33 = 0;
  v26 = __p;
  v27 = v35 - (_BYTE *)__p;
  if (v35 == __p)
  {
    v30 = 0;
    v29 = 0;
  }
  else
  {
    sub_1002D65D4(&v31, v27 >> 2);
    v28 = (char *)__dst;
    memmove(__dst, v26, v27);
    v29 = &v28[4 * (v27 >> 2)];
    __dst = v29;
    v30 = (char *)v31;
  }
  if (v8 + 10 != (__int128 **)&v31)
  {
    sub_1002D6FBC((char *)v8 + 80, v30, (uint64_t)v29, (v29 - v30) >> 2);
    v30 = (char *)v31;
  }
  if (v30)
  {
    __dst = v30;
    operator delete(v30);
  }
  sub_1005301A8(a1, (uint64_t)v8);
  if (__p)
  {
    v35 = (char *)__p;
    operator delete(__p);
  }
  return sub_100034234((uint64_t)v37);
}

void sub_1005321C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100532220(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  __int128 ***i;
  __int128 **v8;
  NSObject *v9;
  __int128 *v10;
  _QWORD v12[2];
  uint8_t buf[4];
  __int128 *v14;

  v12[0] = 0;
  v12[1] = 0;
  v6 = sub_10003415C((uint64_t)v12, a1 + 280);
  for (i = *(__int128 ****)(a1 + 344); ; ++i)
  {
    if (i == *(__int128 ****)(a1 + 352))
      goto LABEL_10;
    v8 = *i;
    if (**i == a2)
      break;
  }
  v9 = qword_1009999A0;
  v6 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v6)
  {
    v10 = v8[1];
    *(_DWORD *)buf = 138412290;
    v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'codec ready' command from device \"%@\"", buf, 0xCu);

  }
  if (*((_DWORD *)v8 + 8) != 5)
  {
LABEL_10:
    sub_10052FBC4(v6, a2, 4, 3);
    return sub_100034234((uint64_t)v12);
  }
  sub_10052D614(v6, (uint64_t)v8, 6u);
  sub_1002D4D3C(**(_QWORD **)(a1 + 536), a3 + 1250);
  if (sub_1002D6A54(**(_QWORD **)(a1 + 536)))
    sub_10052E174(a1, (uint64_t)v8);
  return sub_100034234((uint64_t)v12);
}

void sub_10053237C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10053239C(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 ***v7;
  __int128 ***v8;
  __int128 ***v9;
  __int128 **v10;
  NSObject *v11;
  uint64_t v12;
  void **v13;
  __int128 *v14;
  char v15;
  __int128 *v16;
  char *v17;
  unsigned __int8 v18;
  void *__p[2];
  char v21;
  _QWORD v22[2];
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  __int128 *v26;

  v22[0] = 0;
  v22[1] = 0;
  v6 = sub_10003415C((uint64_t)v22, a1 + 280);
  v8 = *(__int128 ****)(a1 + 344);
  v7 = *(__int128 ****)(a1 + 352);
  if (v8 == v7)
  {
LABEL_5:
    sub_10052FBC4(v6, a2, 7, 3);
  }
  else
  {
    v9 = *(__int128 ****)(a1 + 344);
    while (1)
    {
      v10 = *v9;
      if (**v9 == a2)
        break;
      if (++v9 == v7)
        goto LABEL_5;
    }
    v11 = qword_1009999A0;
    v12 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v12)
    {
      sub_1000453F0(a3, __p);
      if (v21 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      v14 = v10[1];
      *(_DWORD *)buf = 136446466;
      v24 = v13;
      v25 = 2112;
      v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received 'passthrough [ %{public}s ]' command from device \"%@\"", buf, 0x16u);
      if (v21 < 0)
        operator delete(__p[0]);

      v8 = *(__int128 ****)(a1 + 344);
      v7 = *(__int128 ****)(a1 + 352);
    }
    if (v8 == v7)
      goto LABEL_22;
    v15 = 0;
    do
    {
      while (*v8 != v10 && *((unsigned __int16 *)*v8 + 8) == *((unsigned __int16 *)v10 + 8))
      {
        LOBYTE(__p[0]) = 0;
        sub_100043758(__p);
        v16 = **v8;
        v17 = (char *)sub_10003EB18(a3);
        v18 = sub_10003F8C4(a3);
        sub_10023ADC8(v16, v17, v18);
        v12 = (uint64_t)sub_100043728(__p);
        v7 = *(__int128 ****)(a1 + 352);
        ++v8;
        v15 = 1;
        if (v8 == v7)
          return sub_100034234((uint64_t)v22);
      }
      ++v8;
    }
    while (v8 != v7);
    if ((v15 & 1) == 0)
LABEL_22:
      sub_10052FBC4(v12, a2, 7, 6);
  }
  return sub_100034234((uint64_t)v22);
}

void sub_1005325A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005325E0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  NSObject *v11;
  id v13;
  _QWORD v14[2];
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  id v20;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 280);
  v8 = *(_QWORD **)(a1 + 344);
  v9 = *(_QWORD **)(a1 + 352);
  while (v8 != v9)
  {
    v10 = (_QWORD *)*v8;
    if (*(_QWORD *)*v8 == a2)
    {
      v11 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
      {
        v13 = (id)v10[1];
        *(_DWORD *)buf = 67109634;
        v16 = a3;
        v17 = 1024;
        v18 = a4;
        v19 = 2112;
        v20 = v13;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Received 'error (%u/%u)' command from device \"%@\"", buf, 0x18u);

      }
      return sub_100034234((uint64_t)v14);
    }
    ++v8;
  }
  return sub_100034234((uint64_t)v14);
}

uint64_t sub_100532700(uint64_t a1, uint64_t a2)
{
  _QWORD **i;
  _QWORD *v5;
  NSObject *v6;
  id v7;
  _QWORD v9[2];
  uint8_t buf[4];
  id v11;

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 280);
  for (i = *(_QWORD ***)(a1 + 344); i != *(_QWORD ***)(a1 + 352); ++i)
  {
    v5 = *i;
    if (**i == a2)
    {
      v6 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      {
        v7 = (id)v5[1];
        *(_DWORD *)buf = 138412290;
        v11 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received 'restart' command from device \"%@\"", buf, 0xCu);

      }
      sub_10052D3B0(a1, (uint64_t)v5);
      return sub_100034234((uint64_t)v9);
    }
  }
  return sub_100034234((uint64_t)v9);
}

void sub_100532804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100532820(uint64_t **a1, __int128 *a2, unsigned int a3)
{
  uint64_t v6;
  int **i;
  int *v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD v15[2];
  uint8_t buf[4];
  unsigned int v17;
  __int16 v18;
  id v19;

  v15[0] = 0;
  v15[1] = 0;
  v6 = sub_10003415C((uint64_t)v15, (uint64_t)(a1 + 35));
  for (i = (int **)a1[43]; ; ++i)
  {
    if (i == (int **)a1[44])
      goto LABEL_13;
    v8 = *i;
    if (*(__int128 **)*i == a2)
      break;
  }
  v9 = qword_1009999A0;
  v6 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v6)
  {
    v10 = *((id *)v8 + 1);
    *(_DWORD *)buf = 67109378;
    v17 = a3;
    v18 = 2112;
    v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'set volume (%u)' command from device \"%@\"", buf, 0x12u);

  }
  if (v8[8] < 3)
  {
LABEL_13:
    sub_10052FBC4(v6, a2, 10, 3);
    return sub_100034234((uint64_t)v15);
  }
  sub_1002D4114(*a1[67], (float)a3 / 255.0);
  *((_BYTE *)v8 + 128) = a3;
  v13 = a1[43];
  v12 = a1[44];
  while (v13 != v12)
  {
    if ((int *)*v13 != v8)
    {
      sub_10052E7A0(v11, *v13, a3);
      v12 = a1[44];
    }
    ++v13;
  }
  return sub_100034234((uint64_t)v15);
}

void sub_100532998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005329BC(uint64_t a1, __int128 *a2, unsigned int a3, int a4)
{
  uint64_t v8;
  __int128 ***v9;
  __int128 ***v10;
  __int128 **v11;
  NSObject *v12;
  __int128 *v13;
  _QWORD v15[2];
  uint8_t buf[4];
  unsigned int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  __int128 *v23;

  v15[0] = 0;
  v15[1] = 0;
  v8 = sub_10003415C((uint64_t)v15, a1 + 280);
  v9 = *(__int128 ****)(a1 + 344);
  v10 = *(__int128 ****)(a1 + 352);
  while (v9 != v10)
  {
    v11 = *v9;
    if (**v9 == a2)
    {
      v12 = qword_1009999A0;
      v8 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v8)
      {
        v13 = v11[1];
        *(_DWORD *)buf = 67109891;
        v17 = a3;
        v18 = 1024;
        v19 = a4;
        v20 = 2160;
        v21 = 1752392040;
        v22 = 2113;
        v23 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received 'capabilities (%u/%u)' command from device %{private, mask.hash}@", buf, 0x22u);

      }
      if (*((_DWORD *)v11 + 8) == 1)
      {
        sub_10052D614(v8, (uint64_t)v11, 2u);
        v11[8] = (__int128 *)a3;
        *((_DWORD *)v11 + 18) = a4;
        return sub_100034234((uint64_t)v15);
      }
      break;
    }
    ++v9;
  }
  sub_10052FBC4(v8, a2, 12, 3);
  return sub_100034234((uint64_t)v15);
}

void sub_100532B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100532B48(uint64_t a1, uint64_t a2)
{
  _QWORD **i;
  _QWORD *v5;
  NSObject *v6;
  _BOOL8 v7;
  id v8;
  _QWORD v10[2];
  uint8_t buf[4];
  id v12;

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 280);
  for (i = *(_QWORD ***)(a1 + 344); i != *(_QWORD ***)(a1 + 352); ++i)
  {
    v5 = *i;
    if (**i == a2)
    {
      v6 = qword_1009999A0;
      v7 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT);
      if (v7)
      {
        v8 = (id)v5[1];
        *(_DWORD *)buf = 138412290;
        v12 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received 'stream ready' command from device \"%@\"", buf, 0xCu);

      }
      if (*((_DWORD *)v5 + 8) == 7)
      {
        sub_10052D614(v7, (uint64_t)v5, 8u);
        sub_10052DD04(a1);
      }
      return sub_100034234((uint64_t)v10);
    }
  }
  return sub_100034234((uint64_t)v10);
}

void sub_100532C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100532C7C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *i;
  _QWORD *v9;
  NSObject *v10;
  int v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;
  NSObject *v15;
  _BOOL4 v16;
  void **v18;
  id v19;
  void *v20;
  const char *v21;
  int v22;
  void *__p[2];
  char v24;
  _QWORD v25[2];
  uint8_t buf[4];
  _BYTE v27[10];
  id v28;
  __int16 v29;
  const char *v30;

  v25[0] = 0;
  v25[1] = 0;
  sub_10003415C((uint64_t)v25, (uint64_t)(a1 + 35));
  for (i = (_QWORD *)a1[43]; ; ++i)
  {
    if (i == (_QWORD *)a1[44])
      return sub_100034234((uint64_t)v25);
    v9 = (_QWORD *)*i;
    if (*(_QWORD *)*i == a2)
      break;
  }
  v10 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEBUG))
  {
    sub_1000453F0(a3, __p);
    if (v24 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    v19 = (id)v9[1];
    v20 = v19;
    v21 = "No";
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)v27 = v18;
    if (a4)
      v21 = "Yes";
    *(_WORD *)&v27[8] = 2112;
    v28 = v19;
    v29 = 2080;
    v30 = v21;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Received 'audio (%{public}s)' from device \"%@\" wakeUpEvent %s", buf, 0x20u);
    if (v24 < 0)
      operator delete(__p[0]);

  }
  if (*((_DWORD *)v9 + 8) != 8)
  {
    v15 = qword_1009999A0;
    if (!os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
      return sub_100034234((uint64_t)v25);
    v16 = 0;
LABEL_24:
    v22 = *((_DWORD *)v9 + 6);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v27 = v16;
    *(_WORD *)&v27[4] = 1024;
    *(_DWORD *)&v27[6] = v22;
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Skipping recvAudioEvent, canStreamAudio: %u, Streaming mode: %u", buf, 0xEu);
    return sub_100034234((uint64_t)v25);
  }
  v11 = *((_DWORD *)v9 + 12);
  if (v11 != 3 || *((_DWORD *)v9 + 6) != 2)
  {
    v15 = qword_1009999A0;
    if (!os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
      return sub_100034234((uint64_t)v25);
    v16 = v11 == 3;
    goto LABEL_24;
  }
  v12 = (unsigned __int8 *)sub_10003EB18(a3);
  v13 = sub_10003F8C4(a3);
  sub_10052FC60((uint64_t)a1, v12, v13, a4);
  v14 = *(_QWORD *)(a1[67] + 8);
  if (*(_BYTE *)(v14 + 5))
  {
    a1[68] = dispatch_time(0, 3750000 * *(unsigned __int8 *)(v14 + 1) + 2500000);
    sub_100532F28((uint64_t)a1, a2);
  }
  return sub_100034234((uint64_t)v25);
}

void sub_100532F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100532F28(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD handler[5];

  v3 = *(NSObject **)(a1 + 552);
  if (v3)
  {
    dispatch_suspend(v3);
  }
  else
  {
    v5 = sub_1000419F4();
    v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 1uLL, *(dispatch_queue_t *)(v5 + 8));
    *(_QWORD *)(a1 + 552) = v6;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100534518;
    handler[3] = &unk_100917378;
    handler[4] = a2;
    dispatch_source_set_event_handler(v6, handler);
  }
  v7 = *(NSObject **)(a1 + 552);
  if (v7)
  {
    dispatch_source_set_timer(v7, *(_QWORD *)(a1 + 544), 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    dispatch_resume(*(dispatch_object_t *)(a1 + 552));
  }
}

uint64_t sub_100532FDC(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  NSObject *v9;
  id v10;
  _QWORD v12[2];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  id v16;

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 280);
  v6 = *(_QWORD **)(a1 + 344);
  v7 = *(_QWORD **)(a1 + 352);
  while (v6 != v7)
  {
    v8 = (_QWORD *)*v6;
    if (*(_QWORD *)*v6 == a2)
    {
      v9 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (id)v8[1];
        *(_DWORD *)buf = 67109378;
        v14 = a3;
        v15 = 2112;
        v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'state noti (%u)' command from device \"%@\"", buf, 0x12u);

      }
      return sub_100034234((uint64_t)v12);
    }
    ++v6;
  }
  return sub_100034234((uint64_t)v12);
}

uint64_t sub_1005330E8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  NSObject *v11;
  id v12;
  _QWORD v14[2];
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  id v20;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 280);
  v8 = *(_QWORD **)(a1 + 344);
  v9 = *(_QWORD **)(a1 + 352);
  while (v8 != v9)
  {
    v10 = (_QWORD *)*v8;
    if (*(_QWORD *)*v8 == a2)
    {
      v11 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      {
        v12 = (id)v10[1];
        *(_DWORD *)buf = 67109634;
        v16 = a3;
        v17 = 1024;
        v18 = a4;
        v19 = 2112;
        v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received 'link quality noti (%d, %u)' command from device \"%@\"", buf, 0x18u);

      }
      return sub_100034234((uint64_t)v14);
    }
    ++v8;
  }
  return sub_100034234((uint64_t)v14);
}

uint64_t sub_100533204(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *i;
  _QWORD *v7;
  NSObject *v8;
  id v9;
  unsigned __int8 v10;
  id v11;
  id *v12;
  uint64_t v13;
  _QWORD v15[2];
  uint8_t buf[4];
  unsigned int v17;
  __int16 v18;
  id v19;

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 280);
  for (i = *(_QWORD **)(a1 + 344); i != *(_QWORD **)(a1 + 352); ++i)
  {
    v7 = (_QWORD *)*i;
    if (*(_QWORD *)*i == a2)
    {
      v8 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      {
        v9 = (id)v7[1];
        *(_DWORD *)buf = 67109378;
        v17 = a3;
        v18 = 2112;
        v19 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'bonding status response (%u)' command from device \"%@\"", buf, 0x12u);

      }
      if (a3 >= 3)
        v10 = 0;
      else
        v10 = 0x10102u >> (8 * a3);
      v11 = (id)v7[1];
      v12 = sub_1005313CC(a1, v11);
      if (v12)
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_100936170);
        v13 = sub_1000589DC((uint64_t)off_1009778C0, v11, 0);
        buf[0] = BYTE5(v13);
        buf[1] = BYTE4(v13);
        buf[2] = BYTE3(v13);
        buf[3] = BYTE2(v13);
        LOBYTE(v17) = BYTE1(v13);
        BYTE1(v17) = v13;
        sub_100410A40(v12, (uint64_t)buf, (unsigned __int8 *)(a1 + 649), v10);
      }

      return sub_100034234((uint64_t)v15);
    }
  }
  return sub_100034234((uint64_t)v15);
}

void sub_1005333CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1005333F4(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  NSObject *v9;
  id v10;
  _QWORD v12[2];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  id v16;

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 280);
  v6 = *(_QWORD **)(a1 + 344);
  v7 = *(_QWORD **)(a1 + 352);
  while (v6 != v7)
  {
    v8 = (_QWORD *)*v6;
    if (*(_QWORD *)*v6 == a2)
    {
      v9 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (id)v8[1];
        *(_DWORD *)buf = 67109378;
        v14 = a3;
        v15 = 2112;
        v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'siri (%u)' command from device \"%@\"", buf, 0x12u);

      }
      return sub_100034234((uint64_t)v12);
    }
    ++v6;
  }
  return sub_100034234((uint64_t)v12);
}

void sub_100533500(uint64_t a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5)
{
  char v10;
  uint64_t v11;
  _QWORD v12[5];
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  char v17;

  v10 = sub_10022D980(a1);
  v11 = sub_1000419F4();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10053359C;
  v12[3] = &unk_10091FF68;
  v12[4] = a1;
  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = v10;
  sub_100041A34(v11, v12);
}

void sub_10053359C(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  sub_1005314E0(qword_100977900, *(__int128 **)(a1 + 32), *(unsigned __int16 *)(a1 + 40), *(unsigned __int16 *)(a1 + 42), *(unsigned __int16 *)(a1 + 44), *(unsigned __int16 *)(a1 + 46));
}

void sub_100533600(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t v4;
  _QWORD v5[5];
  uint64_t (**v6)();
  unsigned int *v7;
  uint64_t (**v8)();
  unsigned int *v9;

  v8 = 0;
  v9 = 0;
  sub_10003994C(&v8, a2, a3);
  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_1005336F4;
  v5[3] = &unk_1009359B8;
  v5[4] = a1;
  v6 = &off_100918258;
  v7 = v9;
  if (v9)
    sub_10003C37C((uint64_t)v9);
  sub_100041A34(v4, v5);
  v6 = &off_100918258;
  if (v7)
    sub_100056AAC(v7);
  v8 = &off_100918258;
  if (v9)
    sub_100056AAC(v9);
}

void sub_1005336B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int *a16)
{
  uint64_t v16;
  unsigned int *v18;

  if (a16)
    sub_100056AAC(a16);
  *(_QWORD *)(v16 - 48) = &off_100918258;
  v18 = *(unsigned int **)(v16 - 40);
  if (v18)
    sub_100056AAC(v18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005336F4(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_100531EC0(qword_100977900, *(__int128 **)(a1 + 32), a1 + 40);
}

void sub_100533748(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  _QWORD v5[5];
  __int16 v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005337B0;
  v5[3] = &unk_100920960;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_1005337B0(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_100532220(qword_100977900, *(__int128 **)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

void sub_100533804(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t v4;
  _QWORD v5[5];
  uint64_t (**v6)();
  unsigned int *v7;
  uint64_t (**v8)();
  unsigned int *v9;

  v8 = 0;
  v9 = 0;
  sub_10003994C(&v8, a2, a3);
  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_1005338F8;
  v5[3] = &unk_1009359B8;
  v5[4] = a1;
  v6 = &off_100918258;
  v7 = v9;
  if (v9)
    sub_10003C37C((uint64_t)v9);
  sub_100041A34(v4, v5);
  v6 = &off_100918258;
  if (v7)
    sub_100056AAC(v7);
  v8 = &off_100918258;
  if (v9)
    sub_100056AAC(v9);
}

void sub_1005338BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int *a16)
{
  uint64_t v16;
  unsigned int *v18;

  if (a16)
    sub_100056AAC(a16);
  *(_QWORD *)(v16 - 48) = &off_100918258;
  v18 = *(unsigned int **)(v16 - 40);
  if (v18)
    sub_100056AAC(v18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005338F8(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_10053239C(qword_100977900, *(__int128 **)(a1 + 32), a1 + 40);
}

void sub_10053394C(uint64_t a1, char a2, __int16 a3)
{
  uint64_t v6;
  _QWORD v7[5];
  __int16 v8;
  char v9;

  v6 = sub_1000419F4();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1005339C4;
  v7[3] = &unk_10092CB18;
  v7[4] = a1;
  v9 = a2;
  v8 = a3;
  sub_100041A34(v6, v7);
}

uint64_t sub_1005339C4(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_1005325E0(qword_100977900, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 42), *(unsigned __int16 *)(a1 + 40));
}

void sub_100533A1C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100533A7C;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

uint64_t sub_100533A7C(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_100532700(qword_100977900, *(_QWORD *)(a1 + 32));
}

void sub_100533ACC(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100533B34;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_100533B34(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_100532820((uint64_t **)qword_100977900, *(__int128 **)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_100533B88(uint64_t a1, char a2, char a3)
{
  uint64_t v6;
  _QWORD v7[5];
  char v8;
  char v9;

  v6 = sub_1000419F4();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100533C00;
  v7[3] = &unk_100920960;
  v7[4] = a1;
  v8 = a2;
  v9 = a3;
  sub_100041A34(v6, v7);
}

uint64_t sub_100533C00(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_1005329BC(qword_100977900, *(__int128 **)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
}

void sub_100533C58(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100533CB8;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

uint64_t sub_100533CB8(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_100532B48(qword_100977900, *(_QWORD *)(a1 + 32));
}

void sub_100533D08(uint64_t a1, const void *a2, unsigned int a3, char a4)
{
  uint64_t v6;
  _QWORD v7[5];
  uint64_t (**v8)();
  unsigned int *v9;
  char v10;
  uint64_t (**v11)();
  unsigned int *v12;

  v11 = 0;
  v12 = 0;
  sub_10003994C(&v11, a2, a3);
  v6 = sub_1000419F4();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  v7[2] = sub_100533E04;
  v7[3] = &unk_100936038;
  v7[4] = a1;
  v8 = &off_100918258;
  v9 = v12;
  if (v12)
    sub_10003C37C((uint64_t)v12);
  v10 = a4;
  sub_100041A34(v6, v7);
  v8 = &off_100918258;
  if (v9)
    sub_100056AAC(v9);
  v11 = &off_100918258;
  if (v12)
    sub_100056AAC(v12);
}

void sub_100533DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int *a15)
{
  uint64_t v15;
  unsigned int *v17;

  if (a15)
    sub_100056AAC(a15);
  *(_QWORD *)(v15 - 48) = &off_100918258;
  v17 = *(unsigned int **)(v15 - 40);
  if (v17)
    sub_100056AAC(v17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100533E04(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_100532C7C((_QWORD *)qword_100977900, *(_QWORD *)(a1 + 32), a1 + 40, *(unsigned __int8 *)(a1 + 56));
}

void sub_100533E5C(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100533EC4;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_100533EC4(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_100532FDC(qword_100977900, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_100533F18(uint64_t a1, char a2, char a3)
{
  uint64_t v6;
  _QWORD v7[5];
  char v8;
  char v9;

  v6 = sub_1000419F4();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100533F90;
  v7[3] = &unk_100920960;
  v7[4] = a1;
  v8 = a2;
  v9 = a3;
  sub_100041A34(v6, v7);
}

uint64_t sub_100533F90(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_1005330E8(qword_100977900, *(_QWORD *)(a1 + 32), *(char *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
}

void sub_100533FE8(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100534050;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_100534050(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_100533204(qword_100977900, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1005340A4(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10053410C;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_10053410C(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_1005333F4(qword_100977900, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_100534160(uint64_t a1, int a2, char a3)
{
  uint64_t v6;
  _QWORD v7[5];
  int v8;
  char v9;

  v6 = sub_1000419F4();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1005341D8;
  v7[3] = &unk_100926B98;
  v7[4] = a1;
  v8 = a2;
  v9 = a3;
  sub_100041A34(v6, v7);
}

uint64_t sub_1005341D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_10052D988(qword_100977900, *(_QWORD *)(a1 + 32), a3, *(unsigned __int8 *)(a1 + 44));
}

void sub_10053422C(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  _QWORD v5[5];
  __int16 v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100534294;
  v5[3] = &unk_100920960;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_100534294(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_10052DDDC((_QWORD *)qword_100977900, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

void sub_1005342E8(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100534350;
  v5[3] = &unk_1009173C0;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_100534350(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_10052E02C(qword_100977900, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1005343A0(_QWORD *a1, uint64_t a2)
{
  _QWORD *i;
  _QWORD *v5;
  NSObject *v6;
  id v7;
  _QWORD v9[2];
  uint8_t buf[4];
  id v11;

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, (uint64_t)(a1 + 35));
  for (i = (_QWORD *)a1[43]; i != (_QWORD *)a1[44]; ++i)
  {
    v5 = (_QWORD *)*i;
    if (*(_QWORD *)*i == a2)
    {
      v6 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      {
        v7 = (id)v5[1];
        *(_DWORD *)buf = 138412290;
        v11 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "No Audio from device \"%@\", add empty packet for PLC", buf, 0xCu);

      }
      if (*((_DWORD *)v5 + 8) == 8 && *((_DWORD *)v5 + 12) == 3)
      {
        sub_10052FC60((uint64_t)a1, 0, 0, 0);
        a1[68] = dispatch_time(0, 2500000 * *(unsigned __int8 *)(*(_QWORD *)(a1[67] + 8) + 1));
        sub_100532F28(a1, a2);
      }
      return sub_100034234((uint64_t)v9);
    }
  }
  return sub_100034234((uint64_t)v9);
}

void sub_1005344FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100534518(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_1005343A0((_QWORD *)qword_100977900, *(_QWORD *)(a1 + 32));
}

void sub_100534568(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v14;
  id v15;
  uint8_t buf[4];
  id v17;

  v2 = (uint64_t *)a1[43];
  if (v2 != (uint64_t *)a1[44])
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    while (1)
    {
      v6 = *v2;
      if (!*(_BYTE *)(*v2 + 18))
        v3 = *v2;
      v7 = a1[67];
      if (*(_DWORD *)(v7 + 16) != 2)
        break;
      v8 = qword_1009999A0;
      if (!*(_BYTE *)(v6 + 129))
        goto LABEL_11;
      *(_DWORD *)(v6 + 24) = 2;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(id *)(v6 + 8);
        *(_DWORD *)buf = 138412290;
        v17 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Set device \"%@\" as Bidirectional", buf, 0xCu);

        v7 = a1[67];
      }
      v5 = 1;
      sub_1002D6D60(*(_QWORD *)v7, 1);
LABEL_14:
      if (++v2 == (uint64_t *)a1[44])
      {
        if ((v5 & 1) != 0)
          goto LABEL_22;
        goto LABEL_18;
      }
    }
    v8 = qword_1009999A0;
LABEL_11:
    *(_DWORD *)(v6 + 24) = 0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(id *)(v6 + 8);
      *(_DWORD *)buf = 138412290;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Set device \"%@\" as output", buf, 0xCu);

    }
    v4 = 1;
    goto LABEL_14;
  }
  v3 = 0;
  v4 = 0;
LABEL_18:
  v11 = a1[67];
  if (*(_DWORD *)(v11 + 16) == 2)
  {
    v12 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "No Input device found. Disable InputAudio", buf, 2u);
      v11 = a1[67];
    }
    sub_1002D6D60(*(_QWORD *)v11, 0);
  }
LABEL_22:
  if ((v4 & 1) == 0 && a1[44] - a1[43] == 16 && v3 != 0)
  {
    v14 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(id *)(v3 + 8);
      *(_DWORD *)buf = 138412290;
      v17 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Both devices set to Bidirectional, set head session(%@) to output", buf, 0xCu);

    }
    *(_DWORD *)(v3 + 24) = 0;
  }
}

void sub_1005347FC(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  id v4;
  char v5;
  NSObject *v6;
  _BOOL4 v7;
  id v8;
  int v9;
  id v10;

  if (*(_QWORD *)(a1 + 352) - *(_QWORD *)(a1 + 344) == 8)
  {
    if (*(_BYTE *)(a2 + 129))
    {
      if (*(_BYTE *)(a2 + 18))
        return;
      v3 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(id *)(a2 + 8);
        v9 = 138412290;
        v10 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Reset device %@ to tail", (uint8_t *)&v9, 0xCu);

      }
      v5 = 1;
    }
    else
    {
      if (!*(_BYTE *)(a2 + 18))
        return;
      v6 = qword_1009999A0;
      v7 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT);
      v5 = 0;
      if (v7)
      {
        v8 = *(id *)(a2 + 8);
        v9 = 138412290;
        v10 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Reset device %@ to head", (uint8_t *)&v9, 0xCu);

        v5 = 0;
      }
    }
    *(_BYTE *)(a2 + 18) = v5;
  }
}

void sub_10053494C(uint64_t a1, __int16 a2, char a3, __int16 a4, char a5, char a6, char a7, char a8, char a9, char a10)
{
  uint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  __int16 v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v17 = sub_1000419F4();
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100534A0C;
  v18[3] = &unk_10092CB18;
  v19 = a2;
  v21 = a3;
  v20 = a4;
  v22 = a5;
  v23 = a6;
  v24 = a7;
  v25 = a8;
  v26 = a9;
  v27 = a10;
  sub_100041A34(v17, v18);
}

void sub_100534A0C()
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
}

void sub_100534A34(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  NSObject *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  NSObject *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  _QWORD v58[5];
  uint8_t buf[8];
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;

  if (*(_WORD *)a2 == 1)
  {
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_DWORD *)(a1 + 528) = 0;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
    *(_WORD *)(a1 + 464) = -1;
    *(_WORD *)(a1 + 484) = -1;
  }
  v4 = *(unsigned __int16 *)(a2 + 2);
  if (v4 != 0xFFFF)
  {
    ++*(_WORD *)(a1 + 528);
    *(_WORD *)(a1 + 464) = v4;
    *(_DWORD *)(a1 + 504) += *(char *)(a2 + 4);
    *(_DWORD *)(a1 + 468) += *(unsigned __int8 *)(a2 + 5);
    *(_DWORD *)(a1 + 472) += *(unsigned __int8 *)(a2 + 6);
    *(_DWORD *)(a1 + 512) += *(unsigned __int8 *)(a2 + 7);
    v5 = *(unsigned __int8 *)(a2 + 13);
    if (*(_BYTE *)(a2 + 13))
    {
      if (v5 != 255)
      {
        *(_DWORD *)(a1 + 476) += *(unsigned __int16 *)(a2 + 9);
        *(_DWORD *)(a1 + 480) += *(unsigned __int8 *)(a2 + 11);
        *(_DWORD *)(a1 + 516) += v5;
      }
    }
  }
  v6 = *(unsigned __int16 *)(a2 + 16);
  if (v6 != 0xFFFF)
  {
    ++*(_WORD *)(a1 + 530);
    *(_WORD *)(a1 + 484) = v6;
    *(_DWORD *)(a1 + 508) += *(char *)(a2 + 18);
    *(_DWORD *)(a1 + 488) += *(unsigned __int8 *)(a2 + 19);
    *(_DWORD *)(a1 + 492) += *(unsigned __int8 *)(a2 + 20);
    *(_DWORD *)(a1 + 520) += *(unsigned __int8 *)(a2 + 21);
    v7 = *(unsigned __int8 *)(a2 + 27);
    if (*(_BYTE *)(a2 + 27))
    {
      if (v7 != 255)
      {
        *(_DWORD *)(a1 + 496) += *(unsigned __int16 *)(a2 + 23);
        *(_DWORD *)(a1 + 500) += *(unsigned __int8 *)(a2 + 25);
        *(_DWORD *)(a1 + 524) += v7;
      }
    }
  }
  if (v4 != 0xFFFF)
  {
    v8 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(unsigned __int8 *)(a2 + 7);
      v10 = *(unsigned __int8 *)(a2 + 5);
      v11 = *(unsigned __int8 *)(a2 + 6);
      v12 = *(unsigned __int8 *)(a2 + 13);
      v13 = *(unsigned __int16 *)(a2 + 9);
      v14 = *(unsigned __int8 *)(a2 + 11);
      v15 = *(char *)(a2 + 4);
      v16 = *(unsigned __int8 *)(a2 + 14);
      v17 = *(unsigned __int8 *)(a2 + 15);
      *(_DWORD *)buf = 67111424;
      *(_DWORD *)&buf[4] = v4;
      v60 = 1024;
      v61 = v9;
      v62 = 1024;
      v63 = v10;
      v64 = 1024;
      v65 = v11;
      v66 = 1024;
      v67 = v12;
      v68 = 1024;
      v69 = v13;
      v70 = 1024;
      v71 = v14;
      v72 = 1024;
      v73 = v15;
      v74 = 1024;
      v75 = v16;
      v76 = 1024;
      v77 = v17;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "LEA Stats Report - handle(0x%2X):TxTotal(%d), TxR(%d), TxF(%d), RxTotal(%d), RxE(%d), RxM(%d), rssi(%d), TxST(%d), TxSE(%d)", buf, 0x3Eu);
      v6 = *(unsigned __int16 *)(a2 + 16);
    }
  }
  if (v6 != 0xFFFF)
  {
    v18 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(unsigned __int8 *)(a2 + 21);
      v20 = *(unsigned __int8 *)(a2 + 19);
      v21 = *(unsigned __int8 *)(a2 + 20);
      v22 = *(unsigned __int8 *)(a2 + 27);
      v23 = *(unsigned __int16 *)(a2 + 23);
      v24 = *(unsigned __int8 *)(a2 + 25);
      v25 = *(char *)(a2 + 18);
      v26 = *(unsigned __int8 *)(a2 + 28);
      v27 = *(unsigned __int8 *)(a2 + 29);
      *(_DWORD *)buf = 67111424;
      *(_DWORD *)&buf[4] = v6;
      v60 = 1024;
      v61 = v19;
      v62 = 1024;
      v63 = v20;
      v64 = 1024;
      v65 = v21;
      v66 = 1024;
      v67 = v22;
      v68 = 1024;
      v69 = v23;
      v70 = 1024;
      v71 = v24;
      v72 = 1024;
      v73 = v25;
      v74 = 1024;
      v75 = v26;
      v76 = 1024;
      v77 = v27;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "LEA Stats Report - handle(0x%2X):TxTotal(%d), TxR(%d), TxF(%d), RxTotal(%d), RxE(%d), RxM(%d), rssi(%d), TxST(%d), TxSE(%d)", buf, 0x3Eu);
    }
  }
  if (!*(_WORD *)a2)
  {
    v28 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "===Stats Report Total===", buf, 2u);
      v28 = qword_1009999A0;
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      sub_1006FF730(a1, v28, buf, v29, v30, v31, v32, v33);
      v28 = *(NSObject **)buf;
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      sub_1006FF660(a1, v28, v34, v35, v36, v37, v38, v39);
    if (*(_WORD *)(a1 + 528))
    {
      v40 = *(_DWORD *)(a1 + 512);
      if (v40)
      {
        *(_BYTE *)(a1 + 466) = *(_DWORD *)(a1 + 504) / (int)*(unsigned __int16 *)(a1 + 528);
        *(_DWORD *)(a1 + 468) = (100 * *(_DWORD *)(a1 + 468) + (v40 >> 1)) / v40;
        *(_DWORD *)(a1 + 472) = (100 * *(_DWORD *)(a1 + 472) + (v40 >> 1)) / v40;
        v41 = *(_DWORD *)(a1 + 516);
        if (v41)
        {
          *(_DWORD *)(a1 + 476) = (v41 + 100 * *(_DWORD *)(a1 + 476)) / (2 * v41);
          *(_DWORD *)(a1 + 480) = (100 * *(_DWORD *)(a1 + 480) + (v41 >> 1)) / v41;
        }
      }
    }
    if (*(_WORD *)(a1 + 530))
    {
      v42 = *(_DWORD *)(a1 + 520);
      if (v42)
      {
        *(_BYTE *)(a1 + 486) = *(_DWORD *)(a1 + 508) / (int)*(unsigned __int16 *)(a1 + 530);
        *(_DWORD *)(a1 + 488) = (100 * *(_DWORD *)(a1 + 488) + (v42 >> 1)) / v42;
        *(_DWORD *)(a1 + 492) = (100 * *(_DWORD *)(a1 + 492) + (v42 >> 1)) / v42;
        v43 = *(_DWORD *)(a1 + 524);
        if (v43)
        {
          *(_DWORD *)(a1 + 496) = (v43 + 100 * *(_DWORD *)(a1 + 496)) / (2 * v43);
          *(_DWORD *)(a1 + 500) = (100 * *(_DWORD *)(a1 + 500) + (v43 >> 1)) / v43;
        }
      }
    }
    v44 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "===All sessions are ready to report session stats===", buf, 2u);
      v44 = qword_1009999A0;
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      v45 = *(unsigned __int16 *)(a1 + 464);
      v46 = *(char *)(a1 + 466);
      v47 = *(_DWORD *)(a1 + 468);
      v48 = *(_DWORD *)(a1 + 472);
      v49 = *(_DWORD *)(a1 + 476);
      v50 = *(_DWORD *)(a1 + 480);
      *(_DWORD *)buf = 67110400;
      *(_DWORD *)&buf[4] = v45;
      v60 = 1024;
      v61 = v46;
      v62 = 1024;
      v63 = v47;
      v64 = 1024;
      v65 = v48;
      v66 = 1024;
      v67 = v49;
      v68 = 1024;
      v69 = v50;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "handle(0x%2X):rssi(%d), TxRR(%u), TxFR(%u), RxER(%u), RxMR(%u)", buf, 0x26u);
      v44 = qword_1009999A0;
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      v51 = *(unsigned __int16 *)(a1 + 484);
      v52 = *(char *)(a1 + 486);
      v53 = *(_DWORD *)(a1 + 488);
      v54 = *(_DWORD *)(a1 + 492);
      v55 = *(_DWORD *)(a1 + 496);
      v56 = *(_DWORD *)(a1 + 500);
      *(_DWORD *)buf = 67110400;
      *(_DWORD *)&buf[4] = v51;
      v60 = 1024;
      v61 = v52;
      v62 = 1024;
      v63 = v53;
      v64 = 1024;
      v65 = v54;
      v66 = 1024;
      v67 = v55;
      v68 = 1024;
      v69 = v56;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "handle(0x%2X):rssi(%d), TxRR(%u), TxFR(%u), RxER(%u), RxMR(%u)", buf, 0x26u);
    }
    v57 = sub_1000419F4();
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3221225472;
    v58[2] = sub_10053509C;
    v58[3] = &unk_100917378;
    v58[4] = a1;
    sub_100041A34(v57, v58);
  }
}

double sub_10053509C(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  sub_10052EFBC(qword_100977900);
  result = 0.0;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_DWORD *)(v1 + 528) = 0;
  *(_OWORD *)(v1 + 496) = 0u;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_WORD *)(v1 + 464) = -1;
  *(_WORD *)(v1 + 484) = -1;
  return result;
}

uint64_t sub_100535108(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 536) + 8) + 1);
}

uint64_t sub_100535118(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint8_t buf[8];
  uint64_t v17;

  v5 = a4;
  v6 = _os_feature_enabled_impl("BluetoothFeatures", "LeaEasyPairingPhoneToWatch");
  v7 = qword_1009999A0;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Creating LEA easy pairing agent", buf, 2u);
    }
    *(_QWORD *)buf = 0;
    v17 = 0;
    sub_10003415C((uint64_t)buf, a1 + 560);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100936170);
    v8 = sub_1000589DC((uint64_t)off_1009778C0, v5, 0);
    v10 = BYTE5(v8);
    v11 = BYTE4(v8);
    v12 = BYTE3(v8);
    v13 = BYTE2(v8);
    v14 = BYTE1(v8);
    v15 = v8;
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
    sub_1006FF81C();

  return 0;
}

void sub_10053534C()
{
  operator delete();
}

void sub_100535394(uint64_t a1, void *a2)
{
  id v3;
  id **v4;
  uint64_t v5;
  id *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15[16];
  _QWORD v16[2];

  v3 = a2;
  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 560);
  v4 = *(id ***)(a1 + 624);
  if (v4 != *(id ***)(a1 + 632))
  {
    v5 = -(uint64_t)v4;
    while (1)
    {
      v6 = *v4;
      v7 = sub_1004114BC(*v4);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "UUIDString"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));
      v11 = objc_msgSend(v9, "isEqualToString:", v10);

      if (v11)
        break;
      ++v4;
      v5 -= 8;
      if (v4 == *(id ***)(a1 + 632))
        goto LABEL_12;
    }
    v12 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Deleting easy pairing agent", v15, 2u);
    }
    v13 = *(_QWORD *)(a1 + 632);
    v14 = v13 - (8 - v5);
    if (v13 != 8 - v5)
      memmove((void *)-v5, (const void *)(8 - v5), v13 - (8 - v5));
    *(_QWORD *)(a1 + 632) = v14 - v5;
    if (v6)
    {
      sub_10041076C(v6);
      operator delete();
    }
  }
LABEL_12:
  sub_100034234((uint64_t)v16);

}

void sub_100535508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10053554C(uint64_t a1)
{
  NSObject *v2;
  id **v3;
  unsigned int v4;
  int v5;
  void *v6;
  void *v7;
  id *v8;
  id v9;
  uint8_t v11[16];
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 560);
  v2 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting LEA easy pairing agents", v11, 2u);
  }
  v3 = *(id ***)(a1 + 624);
  v4 = *(_DWORD *)(a1 + 632) - (_DWORD)v3;
  v5 = (v4 >> 3);
  if ((v4 >> 3))
  {
    v6 = 0;
    do
    {
      v7 = v6;
      v8 = *v3;
      v9 = sub_1004114BC(*v3);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v9);

      if (sub_1004114A4((uint64_t)v8))
      {
        sub_1005312C8(a1, v6);
      }
      else if (sub_1004114AC((uint64_t)v8))
      {
        sub_10053567C(a1, v6);
      }
      ++v3;
      --v5;
    }
    while (v5);

  }
  return sub_100034234((uint64_t)v12);
}

void sub_100535664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10053567C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  _WORD v7[2];

  v3 = a2;
  if (*(_BYTE *)(a1 + 648))
  {
    v4 = (uint64_t)sub_1005313CC(a1, v3);
    if (v4 || (v4 = sub_100535118(a1, a1 + 649, a1 + 264, v3)) != 0)
    {
      if ((sub_10026BA7C(v4) & 1) != 0)
      {
        sub_10041149C(v4);
      }
      else
      {
        sub_100411474(v4, 0);
        sub_10041121C(v4, 1, 1);
        v7[0] = 256;
        v7[1] = sub_1004114C4(v4);
        v5 = sub_100065478();
        (*(void (**)(uint64_t, _WORD *))(*(_QWORD *)v5 + 136))(v5, v7);
      }
    }
  }
  sub_100535394(a1, v3);

  return 1;
}

void sub_100535758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10053576C(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = (uint64_t)sub_1005313CC(a1, v4);
  if (v3 || (v3 = sub_100535118(a1, a1 + 649, a1 + 264, v4)) != 0)
    sub_100411474(v3, 1);

}

void sub_1005357CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1005357E0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v10[2];

  v3 = a2;
  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 280);
  v4 = *(_QWORD *)(a1 + 344);
  if (v4 == *(_QWORD *)(a1 + 352))
  {
    v8 = 0;
  }
  else
  {
    do
    {
      v5 = *(id *)(*(_QWORD *)v4 + 8);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "UUIDString"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));
      v8 = objc_msgSend(v6, "isEqualToString:", v7);

      if ((v8 & 1) != 0)
        break;
      v4 += 8;
    }
    while (v4 != *(_QWORD *)(a1 + 352));
  }
  sub_100034234((uint64_t)v10);

  return v8;
}

void sub_1005358B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005358F0(_BYTE *a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v3 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100936170);
  v4 = sub_1000589DC((uint64_t)off_1009778C0, v3, 0);
  a1[649] = BYTE5(v4);
  a1[650] = BYTE4(v4);
  a1[651] = BYTE3(v4);
  a1[652] = BYTE2(v4);
  a1[653] = BYTE1(v4);
  a1[654] = v4;
  a1[648] = 1;
  v5 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC(a1 + 649, __p);
    if (v8 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Magnet link connected with device \"%s\"", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  sub_10053554C((uint64_t)a1);

}

void sub_100535A4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100535A6C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  void *v7;
  unsigned __int8 *v8;
  NSObject *v10;
  id v11;
  id v12;
  int v13;
  __int16 v14;
  uint8_t buf[4];
  void *v16;
  _BYTE v17[24];

  v3 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100936170);
  v4 = sub_1000589DC((uint64_t)off_1009778C0, v3, 0);
  LOBYTE(v13) = BYTE5(v4);
  BYTE1(v13) = BYTE4(v4);
  BYTE2(v13) = BYTE3(v4);
  HIBYTE(v13) = BYTE2(v4);
  LOBYTE(v14) = BYTE1(v4);
  HIBYTE(v14) = v4;
  v5 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_100021770(v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    *(_DWORD *)buf = 138412290;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "magnet link disconnected with device \"%@\"", buf, 0xCu);

  }
  v8 = (unsigned __int8 *)(a1 + 649);
  if (v13 == *(_DWORD *)(a1 + 649) && v14 == *(_WORD *)(a1 + 653))
  {
    *(_BYTE *)(a1 + 648) = 0;
  }
  else
  {
    v10 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
    {
      v11 = sub_100021770(v4);
      v12 = (id)objc_claimAutoreleasedReturnValue(v11);
      sub_10046E9BC(v8, buf);
      sub_1006FF848(v12, (char *)buf, (uint64_t)v17, v10);
    }
  }

}

void sub_100535C18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100535C48(uint64_t a1, unsigned __int8 *a2, int a3)
{
  id v6;
  void *v7;
  id *v8;
  _QWORD v9[2];

  if (*(_BYTE *)(a1 + 648))
  {
    v9[0] = 0;
    v9[1] = 0;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100936170);
    sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5], 0, 0, 0, 0, (unsigned __int8 *)v9);
    v6 = sub_100030DF4((const unsigned __int8 *)v9);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = sub_1005313CC(a1, v7);
    if (v8)
      sub_100410A40(v8, a1 + 649, a2, a3);

  }
}

void sub_100535D60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100535D78(uint64_t a1, unsigned __int8 *a2, int a3)
{
  id v6;
  void *v7;
  id *v8;
  _QWORD v9[2];

  if (*(_BYTE *)(a1 + 648))
  {
    v9[0] = 0;
    v9[1] = 0;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100936170);
    sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5], 0, 0, 0, 0, (unsigned __int8 *)v9);
    v6 = sub_100030DF4((const unsigned __int8 *)v9);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = sub_1005313CC(a1, v7);
    if (v8)
      sub_1004110E0((uint64_t)v8, (unsigned __int8 *)(a1 + 649), (uint64_t)a2, a3);

  }
}

void sub_100535E90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100535EA8(uint64_t a1, unsigned __int8 *a2)
{
  id v4;
  void *v5;
  id *v6;
  _QWORD v7[2];

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100936170);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5], 0, 0, 0, 0, (unsigned __int8 *)v7);
  v4 = sub_100030DF4((const unsigned __int8 *)v7);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = sub_1005313CC(a1, v5);
  if (v6)
    sub_10041147C((uint64_t)v6);

}

void sub_100535FA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100535FB8(uint64_t a1, unsigned __int8 *a2)
{
  id v4;
  void *v5;
  id *v6;
  _QWORD v7[2];

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100936170);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5], 0, 0, 0, 0, (unsigned __int8 *)v7);
  v4 = sub_100030DF4((const unsigned __int8 *)v7);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = sub_1005313CC(a1, v5);
  if (v6)
    sub_100411490((uint64_t)v6);

}

void sub_1005360B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005360C8(uint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4)
{
  id v7;
  BOOL v8;
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  void **p_p;
  __int128 ***i;
  __int128 **v14;
  __int128 *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  void **v19;
  id v20;
  char *v21;
  id v22;
  _QWORD *v23;
  id v24;
  char *v25;
  char **v26;
  uint64_t v27;
  void *v28[2];
  char v29;
  void *__p;
  char *v31;
  uint64_t v32;
  uint8_t buf[4];
  void **v34;

  v7 = a4;
  v8 = *(_DWORD *)a2 == *(_DWORD *)(a1 + 649) && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(a1 + 653);
  v9 = !v8;
  v10 = qword_1009999A0;
  v11 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (v11)
    {
      sub_10046E9BC((unsigned __int8 *)a2, &__p);
      if (v32 >= 0)
        p_p = &__p;
      else
        p_p = (void **)__p;
      *(_DWORD *)buf = 136315138;
      v34 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "sending pair status request to LEA device \"%s\"", buf, 0xCu);
      if (SHIBYTE(v32) < 0)
        operator delete(__p);
    }
    for (i = *(__int128 ****)(a1 + 344); i != *(__int128 ****)(a1 + 352); ++i)
    {
      v14 = *i;
      v15 = (*i)[1];
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "UUIDString"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "UUIDString"));
      v18 = objc_msgSend(v16, "isEqualToString:", v17);

      if (v18)
      {
        LOBYTE(__p) = 0;
        sub_100043758(&__p);
        sub_10023AE40(*v14, (uint64_t)a3, 0);
        sub_10004339C(&__p);
        sub_100043728(&__p);
        break;
      }
    }
  }
  else
  {
    if (v11)
    {
      sub_10046E9BC(a3, &__p);
      v19 = v32 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315138;
      v34 = v19;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "sending pair status request to magnet for device \"%s\"", buf, 0xCu);
      if (SHIBYTE(v32) < 0)
        operator delete(__p);
    }
    __p = 0;
    v31 = 0;
    v32 = 0;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100936170);
    sub_100658D7C((uint64_t)off_1009778C0, v7, (uint64_t *)&__p);
    v20 = objc_alloc_init((Class)NSMutableArray);
    v21 = (char *)__p;
    if (__p != &v31)
    {
      do
      {
        v22 = objc_alloc((Class)NSString);
        v23 = v21 + 32;
        if (v21[55] < 0)
          v23 = (_QWORD *)*v23;
        v24 = objc_msgSend(v22, "initWithUTF8String:", v23);
        objc_msgSend(v20, "addObject:", v24);

        v25 = (char *)*((_QWORD *)v21 + 1);
        if (v25)
        {
          do
          {
            v26 = (char **)v25;
            v25 = *(char **)v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (char **)*((_QWORD *)v21 + 2);
            v8 = *v26 == v21;
            v21 = (char *)v26;
          }
          while (!v8);
        }
        v21 = (char *)v26;
      }
      while (v26 != &v31);
    }
    v27 = sub_10034FCFC();
    sub_10046E9BC(a3, v28);
    (*(void (**)(uint64_t, void **, id, id))(*(_QWORD *)v27 + 152))(v27, v28, v7, v20);
    if (v29 < 0)
      operator delete(v28[0]);

    sub_100056BAC((uint64_t)&__p, v31);
  }

}

void sub_100536410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1005364B0(uint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4)
{
  sub_1005360C8(a1 - 264, a2, a3, a4);
}

void sub_1005364B8(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t *a5, _OWORD *a6, _OWORD *a7, void *a8)
{
  id v15;
  NSObject *v17;
  void **v18;
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  void *v22[2];
  char v23;
  void *__p[2];
  char v25;
  void *v26[2];
  uint64_t v27;
  uint8_t buf[4];
  void **v29;

  v15 = a8;
  if (*(_DWORD *)a2 == *(_DWORD *)(a1 + 649) && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(a1 + 653))
  {
    v26[0] = 0;
    v26[1] = 0;
    v27 = 0;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100936170);
    sub_10000602C((uint64_t)off_1009778C0, v15, (uint64_t)v26);
    v17 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10046E9BC(a3, __p);
      v18 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v29 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "sending store bonding info request to magnet link for device \"%s\"", buf, 0xCu);
      if (v25 < 0)
        operator delete(__p[0]);
    }
    v19 = sub_10034FCFC();
    sub_10046E9BC(a3, v22);
    if (SHIBYTE(v27) < 0)
    {
      sub_10003430C(v20, v26[0], (unint64_t)v26[1]);
    }
    else
    {
      *(_OWORD *)v20 = *(_OWORD *)v26;
      v21 = v27;
    }
    (*(void (**)(uint64_t, void **, void **, uint64_t, uint64_t *, _OWORD *, _OWORD *))(*(_QWORD *)v19 + 160))(v19, v22, v20, a4, a5, a6, a7);
    if (SHIBYTE(v21) < 0)
      operator delete(v20[0]);
    if (v23 < 0)
      operator delete(v22[0]);
    if (SHIBYTE(v27) < 0)
      operator delete(v26[0]);
  }
  else
  {
    sub_100536748(a1, (uint64_t)a3, a4, a5, a6, a7, v15);
  }

}

void sub_1005366E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  if (a20 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);

  _Unwind_Resume(a1);
}

void sub_100536748(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, _OWORD *a5, _OWORD *a6, void *a7)
{
  id v10;
  NSObject *v11;
  uint64_t *i;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  unsigned int v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  id v21;
  NSObject *v22;
  id v23;
  char v27;
  uint8_t buf[4];
  id v29;

  v10 = a7;
  v11 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending bonding info to LEA device", buf, 2u);
  }
  for (i = *(uint64_t **)(a1 + 344); i != *(uint64_t **)(a1 + 352); ++i)
  {
    v13 = *i;
    v14 = *(id *)(*i + 8);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "UUIDString"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "UUIDString"));
    v17 = objc_msgSend(v15, "isEqualToString:", v16);

    if (v17)
    {
      if (a3)
      {
        v18 = qword_1009999A0;
        if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
        {
          v19 = *(id *)(v13 + 8);
          *(_DWORD *)buf = 138412290;
          v29 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Sending 'central identification' command to device \"%@\"", buf, 0xCu);

        }
        v27 = 0;
        sub_100043758(&v27);
        sub_10023AE94(*(__int128 **)v13, a2, a3, a4);
        sub_10004339C(&v27);
        v20 = qword_1009999A0;
        if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
        {
          v21 = *(id *)(v13 + 8);
          *(_DWORD *)buf = 138412290;
          v29 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Sending 'identity information' command to device \"%@\"", buf, 0xCu);

        }
        sub_10006D81C(&v27);
        sub_10023AF24(*(__int128 **)v13, a2, a6);
        sub_10004339C(&v27);
        v22 = qword_1009999A0;
        if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
        {
          v23 = *(id *)(v13 + 8);
          *(_DWORD *)buf = 138412290;
          v29 = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Sending 'encryption information' command to device \"%@\"", buf, 0xCu);

        }
        sub_10006D81C(&v27);
        sub_10023AFA8(*(__int128 **)v13, a2, a5);
        sub_10004339C(&v27);
        sub_100043728(&v27);
      }
      break;
    }
  }

}

void sub_100536A0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100536A58(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t *a5, _OWORD *a6, _OWORD *a7, void *a8)
{
  sub_1005364B8(a1 - 264, a2, a3, a4, a5, a6, a7, a8);
}

void sub_100536A60(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4)
{
  id v8;
  void *v9;
  id *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  void **v15;
  void **v16;
  void **v17;
  int v18;
  void **v19;
  void **v20;
  void **v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  uint8_t buf[4];
  void **v27;
  __int16 v28;
  void **v29;
  _QWORD v30[2];

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100936170);
  v30[0] = 0;
  v30[1] = 0;
  sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)*a3 << 40) | ((unint64_t)a3[1] << 32) | ((unint64_t)a3[2] << 24) | ((unint64_t)a3[3] << 16) | ((unint64_t)a3[4] << 8) | a3[5], 0, 0, 0, 0, (unsigned __int8 *)v30);
  v8 = sub_100030DF4((const unsigned __int8 *)v30);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = sub_1005313CC(a1, v9);
  v11 = (uint64_t)v10;
  if (v10)
  {
    LOWORD(v24[0]) = a4;
    WORD1(v24[0]) = sub_1004114C4((uint64_t)v10);
    v12 = sub_100065478();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 136))(v12, v24);
    sub_10041146C(v11, 0);
  }
  v13 = qword_1009999A0;
  if (a4 == 2)
  {
    if (!os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    sub_10046E9BC(a2, v24);
    v14 = v25;
    v15 = (void **)v24[0];
    sub_10046E9BC(a3, __p);
    v16 = v24;
    if (v14 < 0)
      v16 = v15;
    if (v23 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v27 = v16;
    v28 = 2080;
    v29 = v17;
    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "LEA easy pair failed between devices \"%s\" and \"%s\"", buf, 0x16u);
  }
  else
  {
    if (!os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_24;
    sub_10046E9BC(a2, v24);
    v18 = v25;
    v19 = (void **)v24[0];
    sub_10046E9BC(a3, __p);
    v20 = v24;
    if (v18 < 0)
      v20 = v19;
    if (v23 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v27 = v20;
    v28 = 2080;
    v29 = v21;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "LEA easy pair succeeded between devices \"%s\" and \"%s\"", buf, 0x16u);
  }
  if (v23 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(v24[0]);
LABEL_24:

}

void sub_100536CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100536D34(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4)
{
  sub_100536A60(a1 - 264, a2, a3, a4);
}

uint64_t sub_100536D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[2];
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  v5[1] = 0;
  v6 = 0;
  v5[0] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2, a3, 0, &v6, v7, v5, a4);
}

uint64_t sub_100536DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[2];
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  v5[1] = 0;
  v6 = 0;
  v5[0] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(a1 - 264) + 184))(a1 - 264, a2, a3, 0, &v6, v7, v5, a4);
}

void sub_100536E28(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100536ED8;
  v6[3] = &unk_100918868;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_100536EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_100536ED8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received lePairingCompleted", buf, 2u);
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100936170);
  v4 = off_1009778C0;
  v5 = *(void **)(a1 + 32);
  sub_100091AE8(v11, "IsHearingAid");
  if (sub_10000628C((uint64_t)v4, v5, (uint64_t)v11))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100936170);
    v6 = off_1009778C0;
    v7 = *(void **)(a1 + 32);
    sub_100091AE8(__p, "HearingAidSupportsWatch");
    v8 = sub_10000628C((uint64_t)v6, v7, (uint64_t)__p);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v8 = 0;
  }
  if (v12 < 0)
  {
    operator delete(v11[0]);
    if (!v8)
      return;
  }
  else if (!v8)
  {
    return;
  }
  if (*(_BYTE *)(v2 + 655))
  {
    if (*(_BYTE *)(v2 + 648))
    {
      if (qword_100977908 != -1)
        dispatch_once(&qword_100977908, &stru_100936130);
      sub_1005312C8(qword_100977900, *(void **)(a1 + 32));
    }
    else
    {
      if (qword_100977908 != -1)
        dispatch_once(&qword_100977908, &stru_100936130);
      sub_100531358(qword_100977900, *(void **)(a1 + 32));
    }
  }
}

void sub_1005370A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1005370DC(uint64_t a1, void *a2)
{
  sub_100536E28(a1 - 272, a2);
}

void sub_1005370E4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100537194;
  v6[3] = &unk_100918868;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_100537174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_100537194(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received leDeviceUnpaired", buf, 2u);
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100936170);
  v4 = off_1009778C0;
  v5 = *(void **)(a1 + 32);
  sub_100091AE8(v11, "IsHearingAid");
  if (sub_10000628C((uint64_t)v4, v5, (uint64_t)v11))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100936170);
    v6 = off_1009778C0;
    v7 = *(void **)(a1 + 32);
    sub_100091AE8(__p, "HearingAidSupportsWatch");
    v8 = sub_10000628C((uint64_t)v6, v7, (uint64_t)__p);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v8 = 0;
  }
  if (v12 < 0)
  {
    operator delete(v11[0]);
    if (!v8)
      return;
  }
  else if (!v8)
  {
    return;
  }
  if (*(_BYTE *)(v2 + 655))
  {
    if (*(_BYTE *)(v2 + 648))
    {
      if (qword_100977908 != -1)
        dispatch_once(&qword_100977908, &stru_100936130);
      sub_10053567C(qword_100977900, *(void **)(a1 + 32));
    }
    else
    {
      if (qword_100977908 != -1)
        dispatch_once(&qword_100977908, &stru_100936130);
      sub_10053576C(qword_100977900, *(void **)(a1 + 32));
    }
  }
}

void sub_100537364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_100537398(uint64_t a1, void *a2)
{
  sub_1005370E4(a1 - 272, a2);
}

uint64_t sub_1005373A8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = off_100935DA8;
  *(_QWORD *)(a1 + 256) = off_100935E88;
  *(_QWORD *)(a1 + 264) = off_100935ED8;
  *(_QWORD *)(a1 + 272) = off_100935F08;
  v2 = *(void **)(a1 + 624);
  if (v2)
  {
    *(_QWORD *)(a1 + 632) = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 560);
  v3 = *(void **)(a1 + 400);
  if (v3)
  {
    *(_QWORD *)(a1 + 408) = v3;
    operator delete(v3);
  }
  sub_10001A82C(a1 + 368, *(_QWORD **)(a1 + 376));
  v4 = *(void **)(a1 + 344);
  if (v4)
  {
    *(_QWORD *)(a1 + 352) = v4;
    operator delete(v4);
  }
  sub_100069BDC(a1 + 280);
  return sub_100278464(a1);
}

void sub_100537434(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = off_100935DA8;
  *(_QWORD *)(a1 + 256) = off_100935E88;
  *(_QWORD *)(a1 + 264) = off_100935ED8;
  *(_QWORD *)(a1 + 272) = off_100935F08;
  v2 = *(void **)(a1 + 624);
  if (v2)
  {
    *(_QWORD *)(a1 + 632) = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 560);
  v3 = *(void **)(a1 + 400);
  if (v3)
  {
    *(_QWORD *)(a1 + 408) = v3;
    operator delete(v3);
  }
  sub_10001A82C(a1 + 368, *(_QWORD **)(a1 + 376));
  v4 = *(void **)(a1 + 344);
  if (v4)
  {
    *(_QWORD *)(a1 + 352) = v4;
    operator delete(v4);
  }
  sub_100069BDC(a1 + 280);
  sub_100278464(a1);
  operator delete();
}

uint64_t sub_1005374D4()
{
  return 0;
}

uint64_t sub_1005374DC()
{
  return 108;
}

uint64_t sub_1005374E4()
{
  return 108;
}

uint64_t *sub_1005374EC(uint64_t *a1)
{
  if (a1[4])
    sub_10052F528((uint64_t)a1);
  sub_1002D4120(*a1);
  return a1;
}

void sub_100537528()
{
  operator delete();
}

uint64_t sub_10053753C(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_10052D784(qword_100977900, a1);
}

void sub_100537590()
{
  operator delete();
}

uint64_t sub_1005375A4(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_10052E978((uint64_t **)qword_100977900, a1);
}

void sub_1005375F8()
{
  operator delete();
}

uint64_t sub_10053760C(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936130);
  return sub_10052E470(qword_100977900, a1);
}

void sub_10053765C(id a1)
{
  operator new();
}

void sub_10053769C()
{
  operator delete();
}

void sub_1005376C0(id a1)
{
  operator new();
}

void sub_100537700()
{
  operator delete();
}

void sub_100537724(id a1)
{
  operator new();
}

void sub_100537764()
{
  operator delete();
}

void sub_100537788(id a1)
{
  operator new();
}

void sub_1005377C8()
{
  operator delete();
}

void sub_1005377EC(id a1)
{
  operator new();
}

void sub_100537904()
{
  operator delete();
}

uint64_t *sub_100537928(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10053797C(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100537964(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10053797C(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_10048C5FC(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_100537A00(id a1)
{
  operator new();
}

void sub_100537A40()
{
  operator delete();
}

id sub_100537A64(uint64_t a1, uint64_t a2)
{
  return *(id *)(a2 + 8);
}

void sub_100537A78(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x38u);
}

id sub_100537A88(id *a1)
{
  return *a1;
}

_QWORD *sub_100537A94(_QWORD *a1, xpc_connection_t connection)
{
  void *v4;
  _QWORD handler[5];

  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *a1 = connection;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100537B6C;
  handler[3] = &unk_1009203A0;
  handler[4] = a1;
  xpc_connection_set_event_handler(connection, handler);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](AudioDeviceManager, "sharedManager"));
  xpc_connection_set_target_queue(connection, (dispatch_queue_t)objc_msgSend(v4, "getXpcQueue"));

  xpc_connection_resume(connection);
  return a1;
}

void sub_100537B44(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void **v3;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

void sub_100537B6C(uint64_t a1, void *a2)
{
  sub_100537B74(*(_QWORD *)(a1 + 32), a2);
}

void sub_100537B74(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type;
  const char *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _xpc_connection_s *remote_connection;
  const char *v21;
  char *v22;
  int v23;
  const std::string::value_type *v24;
  char *string;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  NSObject *v31;
  const char *v32;
  const char *v33;
  int v34;
  void *v35;
  NSObject *v36;
  void *v37;
  void *v38[2];
  uint64_t v39;
  void *__p[2];
  char v41;
  char v42;
  void *v43[2];
  __int128 v44;
  _BYTE buf[12];
  __int16 v46;
  const char *v47;
  char v48;

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    if (xpc_dictionary_get_uint64(object, "kBTAudioMsgMethod") == 13)
    {
      remote_connection = xpc_dictionary_get_remote_connection(object);
      *(_OWORD *)v43 = 0u;
      v44 = 0u;
      xpc_connection_get_audit_token(remote_connection, v43);
      v21 = (const char *)xpc_copy_code_signing_identity_for_token(v43);
      v22 = (char *)v21;
      if (v21
        && (!strcmp(v21, "com.apple.mediaserverd")
         || !strcmp(v22, "com.apple.audio.coreaudiod")
         || !strcmp(v22, "com.apple.audio.Core-Audio-Driver-Service")
         || !strcmp(v22, "com.apple.audiomxd")))
      {
        v23 = 1;
        v24 = v22;
      }
      else
      {
        v23 = 0;
        v24 = "";
      }
      std::string::assign((std::string *)(a1 + 8), v24);
      free(v22);
      v27 = sub_100027F68();
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      if ((_DWORD)v28)
      {
        v42 = 0;
        v29 = sub_100538054(v28, (uint64_t)remote_connection);
        v30 = sub_100027F68();
        sub_100091AE8(buf, "BTHALAudioPlugin");
        sub_100091AE8(__p, "BypassAllowlist");
        (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v30 + 72))(v30, buf, __p, &v42);
        if (v41 < 0)
          operator delete(__p[0]);
        if (v48 < 0)
          operator delete(*(void **)buf);
        v31 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          v32 = "No";
          if (v29)
            v33 = "Yes";
          else
            v33 = "No";
          if (v42)
            v32 = "Yes";
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v33;
          v46 = 2082;
          v47 = v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Bypassing proc check for audio plugin clients via entitlement = %{public}s , allowList = %{public}s", buf, 0x16u);
        }
        if (v42)
          v34 = 1;
        else
          v34 = v29;
      }
      else
      {
        v34 = 0;
      }
      if ((v23 | v34) == 1)
      {
        v35 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](AudioDeviceManager, "sharedManager"));
        objc_msgSend(v35, "republishAllAudioDevices");

      }
      else
      {
        v36 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
          sub_1006FF8CC(remote_connection, v36);
        xpc_connection_cancel(remote_connection);
      }
    }
    else
    {
      v43[0] = 0;
      v43[1] = 0;
      *(_QWORD *)&v44 = 0;
      string = (char *)xpc_dictionary_get_string(object, "kBTAudioMsgDeviceUid");
      sub_100091AE8(v43, string);
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](AudioDeviceManager, "sharedManager"));
      if (SBYTE7(v44) < 0)
      {
        sub_10003430C(v38, v43[0], (unint64_t)v43[1]);
      }
      else
      {
        *(_OWORD *)v38 = *(_OWORD *)v43;
        v39 = v44;
      }
      objc_msgSend(v26, "forwardEvent:forUid:", object, v38);
      if (SHIBYTE(v39) < 0)
        operator delete(v38[0]);

      if (SBYTE7(v44) < 0)
        operator delete(v43[0]);
    }
  }
  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    v5 = xpc_dictionary_get_string(object, _xpc_error_key_description);
    v6 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006FF9B8((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12);
    if (object == &_xpc_error_connection_invalid)
    {
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](AudioDeviceManager, "sharedManager"));
      objc_msgSend(v37, "removeXpcClient:", a1);

    }
    else
    {
      v13 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
        sub_1006FF954((uint64_t)v5, v13, v14, v15, v16, v17, v18, v19);
    }
  }
}

void sub_100537F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100537FFC(uint64_t a1)
{
  xpc_connection_cancel(*(xpc_connection_t *)a1);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100538034(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

BOOL sub_100538054(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  _BOOL8 v4;

  v2 = (void *)xpc_connection_copy_entitlement_value(a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = xpc_get_type(v2) == (xpc_type_t)&_xpc_type_BOOL && xpc_BOOL_get_value(v3);
  xpc_release(v3);
  return v4;
}

char *sub_1005380BC@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[31] < 0)
    return (char *)sub_10003430C((_BYTE *)a2, *((void **)result + 1), *((_QWORD *)result + 2));
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 3);
  return result;
}

void sub_1005380E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_1002BC5A0(a1, "LEASendThread");
  *(_QWORD *)v3 = off_1009361E0;
  *(_QWORD *)(v3 + 152) = a2;
  *(_OWORD *)(v3 + 168) = *(_OWORD *)*(_QWORD *)(a2 + 536);
  *(_WORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  operator new[]();
}

void sub_100538180(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002BC138(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100538194(_QWORD *a1)
{
  *a1 = off_1009361E0;
  if (a1[24])
    operator delete[]();
  return sub_1002BC138(a1);
}

uint64_t sub_1005381E4(uint64_t a1)
{
  return 2500 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 176) + 1);
}

uint64_t sub_1005381F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, *(_QWORD *)(a1 + 152) + 280);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 536);
  if (v2 && *(_QWORD *)(v2 + 24) == a1)
  {
    switch(*(_DWORD *)(a1 + 224))
    {
      case 0:
        v3 = 1;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
        {
          *(_DWORD *)(a1 + 224) = 1;
          goto LABEL_7;
        }
        break;
      case 1:
LABEL_7:
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
        *(_DWORD *)(a1 + 224) = 2;
        goto LABEL_8;
      case 2:
LABEL_8:
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
        *(_DWORD *)(a1 + 224) = 3;
        goto LABEL_9;
      case 3:
LABEL_9:
        ++*(_BYTE *)(a1 + 184);
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1))
          goto LABEL_12;
        *(_DWORD *)(a1 + 224) = 4;
LABEL_11:
        ++*(_BYTE *)(a1 + 185);
        *(_QWORD *)(a1 + 208) = 0;
        *(_QWORD *)(a1 + 216) = 0;
        *(_DWORD *)(a1 + 224) = 0;
LABEL_12:
        v3 = 1;
        break;
      case 4:
        goto LABEL_11;
      default:
        goto LABEL_12;
    }
  }
  else
  {
    v3 = 0;
  }
  sub_100034234((uint64_t)v5);
  return v3;
}

void sub_10053830C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_100538320(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v1 = *(_QWORD *)(a1 + 152);
  v2 = *(_QWORD *)(v1 + 344);
  v3 = *(_QWORD *)(v1 + 352);
  if (v2 == v3)
    return sub_10023B02C(0);
  v4 = 0;
  do
  {
    if (*(_DWORD *)(*(_QWORD *)v2 + 32) == 8 && *(_DWORD *)(*(_QWORD *)v2 + 48) == 3)
      ++v4;
    v2 += 8;
  }
  while (v2 != v3);
  return sub_10023B02C(v4);
}

void sub_100538368(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t v15[4];
  _QWORD v16[2];

  v4 = *(unsigned __int8 **)(a1 + 176);
  v5 = v4[2];
  if (v5 == 4)
  {
    if (v4[4])
    {
      v9 = 0;
      v10 = 0;
      do
      {
        if (v9 + 1 >= (unint64_t)v4[3])
        {
          v11 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
            sub_1006FFA90(v15, v16, v11);
        }
        *(_BYTE *)(a2 + v10++) = *(_BYTE *)(a2 + v9 + 1) | (16 * *(_BYTE *)(a2 + v9));
        v4 = *(unsigned __int8 **)(a1 + 176);
        v9 += 2;
      }
      while (v10 < v4[4]);
    }
  }
  else if (v5 == 6)
  {
    if (v4[4])
    {
      v6 = 0;
      v7 = 0;
      do
      {
        if (v6 / 6 + 1 >= v4[3])
        {
          v8 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
            sub_1006FFA90(v15, v16, v8);
        }
        *(_BYTE *)(a2 + v7++) = ((*(unsigned __int8 *)(a2 + v6 / 6 + 1) >> 2) >> ((4 - v6 % 6) & 0xFE)) | (*(unsigned __int8 *)(a2 + v6 / 6) >> 2 << (v6 % 6 + 2));
        v4 = *(unsigned __int8 **)(a1 + 176);
        v6 += 8;
      }
      while (v7 < v4[4]);
    }
  }
  else
  {
    v12 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
      sub_1006FFA1C(v12, v13, v14);
  }
}

void sub_100538564(_QWORD *a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1[22];
  if (*(_BYTE *)(v1 + 2) != 8)
  {
    if (a1[26] != *(unsigned __int8 *)(v1 + 3))
    {
      v3 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
        sub_1006FFAD4(v3, v4, v5);
    }
    sub_100538368((uint64_t)a1, a1[24]);
    a1[26] = *(unsigned __int8 *)(a1[22] + 4);
  }
}

void sub_1005385E0(uint64_t a1, uint64_t a2)
{
  sub_1005380E8(a1, a2);
}

void sub_100538644(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100538194(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10053865C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100936278;
  free(*(void **)(a1 + 232));
  return sub_100538194((_QWORD *)a1);
}

void sub_100538690(uint64_t a1)
{
  *(_QWORD *)a1 = off_100936278;
  free(*(void **)(a1 + 232));
  sub_100538194((_QWORD *)a1);
  operator delete();
}

BOOL sub_1005386D8(uint64_t *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  _BOOL8 result;
  size_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v1 = a1 + 26;
  v2 = a1[26];
  v3 = (unsigned __int8 *)a1[22];
  v4 = v3[3];
  v5 = v4 - v2;
  if (v4 == v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
      sub_1006FFB48();
    return 1;
  }
  if (!v3[5])
  {
    v9 = sub_1002D4564(a1[21], (char *)(a1[24] + v2), v4 - v2);
    a1[26] += v9;
    return v9 == v5;
  }
  v7 = a1[25];
  if (v3[4])
  {
    if (!(v4 % v5))
      goto LABEL_18;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
      sub_1006FFD14();
    result = 0;
    *v1 = 0;
    v1[1] = 0;
    return result;
  }
  if (v2)
    return 1;
  do
  {
LABEL_18:
    if (v7 < v2)
    {
      v12 = qword_1009997E0;
      result = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      sub_1006FFB74(v7, v12);
      return 0;
    }
    v10 = sub_1002D45D0(a1[21], (char *)(a1[24] + v2), v7 - v2);
    if (!v10)
    {
      v13 = qword_1009997E0;
      result = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEBUG);
      if (!result)
        return result;
      sub_1006FFBE4((uint64_t)v1, v13, v14, v15, v16, v17, v18, v19);
      return 0;
    }
    v11 = a1[22];
    if (!*(_BYTE *)(v11 + 4))
    {
      v20 = *v1 + v10;
      *v1 = v20;
      if (v20 > *(unsigned __int8 *)(v11 + 3) && os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
        goto LABEL_25;
      return 1;
    }
    if (*(unsigned __int8 *)(v11 + 3) % v10)
    {
      result = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT);
      if (!result)
        return result;
      sub_1006FFCB0();
      return 0;
    }
    v2 = *v1 + v10;
    *v1 = v2;
    v5 -= v10;
  }
  while (v5);
  if (v2 != *(unsigned __int8 *)(v11 + 3) && os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
LABEL_25:
    sub_1006FFC4C();
  return 1;
}

BOOL sub_100538934(uint64_t a1)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  size_t v12;
  unsigned __int16 v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  NSObject *v23;
  char v25;
  uint8_t buf[4];
  const char *v27;

  sub_1000438A4();
  v2 = sub_100331670();
  v3 = *(_QWORD *)(a1 + 216);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 176) + 6))
  {
    if (!v3)
    {
      v4 = (*(_QWORD *)(a1 + 208) - 1) / (unint64_t)(*(_QWORD *)(a1 + 160) - 1);
      if ((v4 & 0xFC) != 0)
      {
        v5 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
          sub_1006FFE5C(v5, v6, v7);
      }
      **(_BYTE **)(a1 + 232) = v4 | (4 * *(_BYTE *)(a1 + 185));
      v3 = *(_QWORD *)(a1 + 216);
    }
    v8 = (char **)(a1 + 232);
    v9 = *(_QWORD *)(a1 + 208) - v3;
    v10 = *(_QWORD *)(a1 + 160) - 1;
    v11 = v9 <= v10;
    if (v9 >= v10)
      v12 = *(_QWORD *)(a1 + 160) - 1;
    else
      v12 = *(_QWORD *)(a1 + 208) - v3;
    memcpy((void *)(*(_QWORD *)(a1 + 232) + 1), (const void *)(*(_QWORD *)(a1 + 192) + v3), v12);
    v13 = v12 + 1;
  }
  else
  {
    if (v3)
    {
      v14 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
        sub_1006FFDE8(v14, v15, v16);
    }
    v8 = (char **)(a1 + 192);
    v12 = *(_QWORD *)(a1 + 208);
    if (v12 > *(_QWORD *)(a1 + 160))
    {
      v17 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "fAudioBuffer.getFillLevel() <= fMaxPacketSize";
        _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
        v12 = *(_QWORD *)(a1 + 208);
      }
    }
    v11 = 1;
    v13 = v12;
  }
  v18 = *v8;
  *(_QWORD *)(a1 + 216) += v12;
  v25 = 0;
  sub_100043758(&v25);
  if ((v2 & 1) != 0 || sub_100538320(a1))
  {
    v19 = *(_QWORD *)(a1 + 152);
    v20 = *(uint64_t **)(v19 + 344);
    if (v20 != *(uint64_t **)(v19 + 352))
    {
      v21 = v2 ^ 1;
      do
      {
        v22 = *v20;
        if (*(_DWORD *)(*v20 + 32) == 8
          && *(_DWORD *)(v22 + 48) == 3
          && sub_10023B0CC(*(__int128 **)v22, v18, v13, *(_BYTE *)(a1 + 184), v21) == 410)
        {
          v23 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
            sub_1006FFD74(buf, &v27, v23);
        }
        ++v20;
      }
      while (v20 != *(uint64_t **)(*(_QWORD *)(a1 + 152) + 352));
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006FFDB8();
  }
  sub_100043728(&v25);
  return v11;
}

void sub_100538BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_100538C18(uint64_t a1, uint64_t a2)
{
  sub_1005380E8(a1, a2);
}

void sub_100538CBC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_100538194(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100538CD4(uint64_t a1)
{
  *(_QWORD *)a1 = off_100936310;
  free(*(void **)(a1 + 232));
  free(*(void **)(a1 + 240));
  free(*(void **)(a1 + 248));
  return sub_100538194((_QWORD *)a1);
}

void sub_100538D1C(uint64_t a1)
{
  sub_100538CD4(a1);
  operator delete();
}

BOOL sub_100538D40(uint64_t *a1)
{
  size_t *v1;
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unint64_t v5;
  _BOOL8 result;
  size_t v8;
  uint64_t v9;
  size_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  size_t v20;

  v1 = (size_t *)(a1 + 26);
  v2 = a1[26];
  v3 = (unsigned __int8 *)a1[22];
  v4 = v3[3];
  v5 = 2 * v4 - v2;
  if (2 * v4 == v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
      sub_1006FFB48();
    return 1;
  }
  if (!v3[5])
  {
    v8 = sub_1002D4564(a1[21], (char *)(a1[24] + v2), 2 * v4 - v2);
    a1[26] += v8;
    return v8 == v5;
  }
  v19 = 0;
  v20 = 0;
  if (v3[4])
  {
    if (!(2 * v4 % v5))
      goto LABEL_14;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
      sub_1006FFD14();
    result = 0;
    *v1 = 0;
    v1[1] = 0;
    return result;
  }
  if (v2)
    return 1;
  do
  {
LABEL_14:
    if (!sub_1002D463C(a1[21], (char *)(a1[30] + (v2 >> 1)), &v20, v4 - (v2 >> 1), (char *)(a1[31] + (v2 >> 1)), &v19, v4 - (v2 >> 1)))
    {
      v11 = qword_1009997E0;
      result = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEBUG);
      if (!result)
        return result;
      sub_1006FFFCC((uint64_t)v1, v11, v12, v13, v14, v15, v16, v17);
      return 0;
    }
    if (!(v20 + v19))
    {
      result = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT);
      if (!result)
        return result;
      sub_1006FFED0();
      return 0;
    }
    v9 = a1[22];
    if (!*(_BYTE *)(v9 + 4))
    {
      v18 = v19 + v20 + *v1;
      *v1 = v18;
      if (v18 > 2 * (unint64_t)*(unsigned __int8 *)(v9 + 3)
        && os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
      {
        goto LABEL_21;
      }
      return 1;
    }
    v4 = *(unsigned __int8 *)(v9 + 3);
    v10 = v19 + v20;
    if (2 * v4 % (v19 + v20))
    {
      result = os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT);
      if (!result)
        return result;
      sub_1006FFF64();
      return 0;
    }
    v2 = *v1 + v10;
    *v1 = v2;
    v19 = 0;
    v20 = 0;
    v5 -= v10;
  }
  while (v5);
  if (v2 != 2 * *(unsigned __int8 *)(v9 + 3) && os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
LABEL_21:
    sub_1006FFEFC();
  return 1;
}

_QWORD *sub_100538FCC(_QWORD *result)
{
  unint64_t v1;
  _BYTE *v2;

  if (!*(_BYTE *)(result[22] + 5) && result[26] >= 2uLL)
  {
    v1 = 0;
    v2 = (_BYTE *)result[24];
    do
    {
      *(_BYTE *)(result[30] + v1) = *v2;
      *(_BYTE *)(result[31] + v1++) = v2[1];
      v2 += 2;
    }
    while (v1 < result[26] >> 1);
  }
  return result;
}

void sub_10053901C(_QWORD *a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1[22];
  if (*(_BYTE *)(v1 + 2) != 8)
  {
    if (a1[26] != 2 * *(unsigned __int8 *)(v1 + 3))
    {
      v3 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
        sub_100700034(v3, v4, v5);
    }
    sub_100538368((uint64_t)a1, a1[30]);
    sub_100538368((uint64_t)a1, a1[31]);
    a1[26] = 2 * *(unsigned __int8 *)(a1[22] + 4);
  }
}

BOOL sub_1005390A8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  size_t v9;
  char *v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  uint8_t v26;
  _BYTE v27[14];
  char v28;
  uint8_t buf[4];
  const char *v30;

  sub_1000438A4();
  v2 = sub_100331670();
  if (*(_BYTE *)(*(_QWORD *)(a1 + 176) + 6))
  {
    v3 = *(_QWORD *)(a1 + 216);
    if (!v3)
    {
      v4 = (*(_QWORD *)(a1 + 208) - 1) / (unint64_t)(*(_QWORD *)(a1 + 160) - 1);
      if (v4 >= 4u)
      {
        v5 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
          sub_1007000DC(v4, v5);
      }
      **(_BYTE **)(a1 + 232) = v4 | (4 * *(_BYTE *)(a1 + 185));
      v3 = *(_QWORD *)(a1 + 216);
    }
    v6 = *(_QWORD *)(a1 + 208) - v3;
    v7 = *(_QWORD *)(a1 + 160) - 1;
    v8 = v6 <= v7;
    if (v6 >= v7)
      v9 = *(_QWORD *)(a1 + 160) - 1;
    else
      v9 = *(_QWORD *)(a1 + 208) - v3;
    memcpy((void *)(*(_QWORD *)(a1 + 232) + 1), (const void *)(*(_QWORD *)(a1 + 192) + v3), v9);
    v10 = *(char **)(a1 + 232);
    LOWORD(v11) = v9 + 1;
    *(_QWORD *)(a1 + 216) += v9;
  }
  else
  {
    if (*(_QWORD *)(a1 + 216))
    {
      v12 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
        sub_1006FFDE8(v12, v13, v14);
    }
    v15 = *(_QWORD *)(a1 + 208);
    if (v15 > 2 * *(_QWORD *)(a1 + 160))
    {
      v16 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "fAudioBuffer.getFillLevel() <= (fMaxPacketSize * 2)";
        _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
        v15 = *(_QWORD *)(a1 + 208);
      }
    }
    v10 = 0;
    *(_QWORD *)(a1 + 216) += v15;
    v11 = v15 >> 1;
    v8 = 1;
  }
  v28 = 0;
  sub_100043758(&v28);
  if ((v2 & 1) != 0 || sub_100538320(a1))
  {
    v17 = *(_QWORD *)(a1 + 152);
    v18 = *(uint64_t **)(v17 + 344);
    if (v18 != *(uint64_t **)(v17 + 352))
    {
      v19 = v2 ^ 1;
      do
      {
        v20 = *v18;
        if (*(_DWORD *)(*v18 + 32) == 8 && *(_DWORD *)(v20 + 48) == 3)
        {
          v21 = *(_QWORD *)(a1 + 176);
          if (!*(_BYTE *)(v21 + 6) && *(_DWORD *)(v21 + 8) == 1)
          {
            v22 = 248;
            if ((*(_BYTE *)(v20 + 72) & 8) == 0)
              v22 = 240;
            v10 = *(char **)(a1 + v22);
          }
          if (v10)
          {
            if (sub_10023B0CC(*(__int128 **)v20, v10, (unsigned __int16)v11, *(_BYTE *)(a1 + 184), v19) == 410)
            {
              v23 = qword_1009997E0;
              if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
                sub_1006FFD74(buf, &v30, v23);
            }
          }
          else
          {
            v24 = qword_1009997E0;
            if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
              sub_1007000A8(&v26, v27, v24);
            v10 = 0;
          }
        }
        ++v18;
      }
      while (v18 != *(uint64_t **)(*(_QWORD *)(a1 + 152) + 352));
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
  {
    sub_1006FFDB8();
  }
  sub_100043728(&v28);
  return v8;
}

void sub_1005393E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100539440(uint64_t a1)
{
  *(_QWORD *)sub_10048D2F0(a1, "LEAService", 0x10000) = &off_1009363A8;
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100936498);
  sub_10048D5B0(a1, qword_100977900);
  return a1;
}

void sub_1005394B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048D3E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005394CC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v5 = 0;
  sub_10004AD30((uint64_t)&v5);
  *(_QWORD *)&v4 = (int)v5;
  *((_QWORD *)&v4 + 1) = SWORD2(v5);
  return sub_1004415B0(a2, 2u, 1, &v4, 0);
}

void sub_100539524(uint64_t a1)
{
  sub_10048D3E0(a1);
  operator delete();
}

void sub_100539548(id a1)
{
  operator new();
}

void sub_100539588()
{
  operator delete();
}

void sub_1005395B0(uint64_t a1, xpc_object_t original)
{
  xpc_object_t reply;
  void *v4;
  xpc_object_t v5;
  xpc_object_t v6;
  const char *p_p;
  void *__p;
  char v9;

  reply = xpc_dictionary_create_reply(original);
  if (reply)
  {
    v4 = reply;
    v5 = xpc_array_create(0, 0);
    v6 = xpc_dictionary_create(0, 0, 0);
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_100937860);
    sub_10047AB98((uint64_t)off_100977890);
    if (v9 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    xpc_dictionary_set_string(v6, "Local Device", p_p);
    if (v9 < 0)
      operator delete(__p);
    xpc_array_append_value(v5, v6);
    xpc_release(v6);
    xpc_dictionary_set_value(v4, "kCBMsgArgs", v5);
    xpc_release(v5);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v4);
    xpc_release(v4);
  }
}

void sub_1005396C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005396E4(uint64_t a1, void *a2)
{
  uint64_t v4;
  xpc_object_t v5;
  void *v6;
  int64_t int64;
  NSObject *v8;
  xpc_object_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  NSObject *v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;
  __int16 v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  NSObject *v30;
  void *v31;
  void *v32;
  double Current;
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  int64_t v38;
  int64_t v39;
  int v40;
  uint64_t v41;
  id v42;
  void *v43;
  char v44;
  uint64_t v45;
  id v46;
  unsigned __int16 v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  id v57;
  int64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  id v66;
  id v67;
  void *v68;
  char v69;
  uint64_t v70;
  id v71;
  id v72;
  void *v73;
  char v74;
  uint64_t v75;
  id v76;
  id v77;
  void *v78;
  id v79;
  void *v80;
  uint64_t v81;
  id v82;
  id v83;
  id v84;
  void *v85;
  id v86;
  void *v87;
  char v88;
  uint64_t v89;
  id v90;
  id v91;
  id v92;
  void *v93;
  id v94;
  void *v95;
  NSObject *v96;
  __int128 *v97;
  int64_t v98;
  id v99;
  void *v100;
  double v101;
  double v102;
  double v103;
  __int16 v104;
  __int16 v105;
  __int16 v106;
  __int16 v107;
  __int16 v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  xpc_object_t reply;
  void *v113;
  id v114;
  id v115;
  id v116;
  id v117;
  void *v118;
  xpc_object_t v119;
  xpc_object_t v120;
  id v121;
  uint64_t v122;
  void *k;
  id v124;
  _OWORD *v125;
  __int128 v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  int64x2_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  NSObject *v141;
  NSMutableData *v142;
  uint64_t m;
  NSObject *v144;
  NSMutableData *v145;
  NSObject *v146;
  id v147;
  void *v148;
  xpc_object_t v149;
  void *v150;
  unsigned __int8 v151;
  NSObject *v152;
  NSObject *v153;
  int64_t v154;
  int64_t v155;
  id v156;
  void *v157;
  xpc_object_t v158;
  id v159;
  id v160;
  uint64_t v161;
  void *j;
  void *v163;
  xpc_object_t v164;
  void *v165;
  NSObject *v166;
  NSObject *v167;
  NSObject *v168;
  xpc_object_t v169;
  const void *v170;
  size_t v171;
  NSObject *v172;
  NSObject *v173;
  int64_t v174;
  NSObject *v175;
  NSObject *v176;
  int64_t v177;
  char v178;
  _OWORD *data;
  _DWORD *v180;
  xpc_object_t v181;
  void *v182;
  xpc_object_t v183;
  id v184;
  uint64_t v185;
  void *i;
  void *v187;
  xpc_object_t v188;
  id v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  xpc_object_t v195;
  void *v196;
  xpc_object_t v197;
  void **v198;
  void **v199;
  xpc_object_t v200;
  xpc_object_t v201;
  void *v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  int64_t v206;
  unsigned int v207;
  void *v208;
  id v209;
  unsigned int v210;
  id v211;
  id v212;
  _QWORD v213[4];
  id v214;
  uint64_t v215;
  void *v216;
  char v217;
  _QWORD v218[4];
  id v219;
  uint64_t v220;
  void *v221;
  char v222;
  _QWORD v223[4];
  id v224;
  uint64_t v225;
  void *v226;
  char v227;
  char v228;
  char v229;
  _QWORD v230[4];
  id v231;
  int v232;
  int v233;
  int v234;
  __int16 v235;
  __int16 v236;
  __int16 v237;
  __int16 v238;
  __int16 v239;
  _QWORD v240[4];
  id v241;
  id v242;
  uint64_t v243;
  void *v244;
  char v245;
  _QWORD v246[4];
  id v247;
  uint64_t v248;
  void *v249;
  _QWORD v250[4];
  id v251;
  id v252;
  uint64_t v253;
  void *v254;
  _QWORD v255[4];
  id v256;
  uint64_t v257;
  void *v258;
  char v259;
  _QWORD v260[4];
  id v261;
  uint64_t v262;
  void *v263;
  _QWORD v264[4];
  id v265;
  id v266;
  uint64_t v267;
  void *v268;
  __int16 v269;
  _QWORD v270[6];
  __int128 *v271[3];
  void *__p[3];
  void *v273;
  void *v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282[2];
  uint64_t v283;
  uint64_t length;
  uint64_t v285;
  uint64_t v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  int v295;
  _BYTE v296[128];
  uint64_t value[2];
  uint64_t v298;
  _BYTE v299[128];
  _BYTE v300[128];
  uint8_t buf[32];
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  uint64_t v315;

  if (*(int *)(a1 + 80) >= 2)
  {
    v4 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4))
    {
      v5 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
      if (v5)
      {
        v6 = v5;
        int64 = xpc_dictionary_get_int64(v5, "kCBMsgId");
        v8 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = int64;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Handling debug command %llu", buf, 0xCu);
        }
        v9 = xpc_dictionary_get_value(v6, "kCBMsgArgs");
        v10 = v9;
        switch(int64)
        {
          case 1:
            v11 = xpc_dictionary_get_int64(v9, "kCBMsgArgState");
            v12 = sub_1000438A4();
            (*(void (**)(uint64_t, BOOL, _QWORD))(*(_QWORD *)v12 + 568))(v12, v11 != 0, 0);
            return;
          case 2:
            v58 = xpc_dictionary_get_int64(v9, "kCBMsgArgState");
            v59 = sub_10034D3CC();
            (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v59 + 112))(v59, v58 != 0);
            return;
          case 3:
            v41 = sub_1000438A4();
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 1264))(v41);
            return;
          case 4:
            LOWORD(value[0]) = 0;
            LOWORD(length) = 0;
            LOWORD(v282[0]) = 0;
            LOWORD(v276) = 0;
            v47 = xpc_dictionary_get_int64(v9, "kCBMsgArgState");
            if ((*(_DWORD *)(sub_1000438A4() + 712) - 19) > 0x7BC)
            {
              v111 = sub_1000438A4();
              (*(void (**)(uint64_t, _QWORD, uint64_t *, uint64_t *, uint64_t *, __int128 *))(*(_QWORD *)v111 + 1168))(v111, v47, value, &length, v282, &v276);
            }
            else
            {
              v315 = 0;
              v314 = 0u;
              v313 = 0u;
              v312 = 0u;
              v311 = 0u;
              v310 = 0u;
              v309 = 0u;
              v308 = 0u;
              v307 = 0u;
              v306 = 0u;
              v305 = 0u;
              v304 = 0u;
              v303 = 0u;
              v302 = 0u;
              memset(buf, 0, sizeof(buf));
              v48 = sub_1000438A4();
              if (!(*(unsigned int (**)(uint64_t, _QWORD, uint8_t *))(*(_QWORD *)v48 + 1176))(v48, v47, buf))
              {
                LOWORD(value[0]) = *(_WORD *)&buf[4];
                LOWORD(length) = *(_WORD *)&buf[8];
                LOWORD(v282[0]) = *(_WORD *)&buf[12];
                LOWORD(v276) = *(_WORD *)&buf[16];
                v49 = DWORD2(v312);
                v50 = HIDWORD(v312);
                v51 = v313;
                v52 = DWORD1(v313);
                v53 = DWORD2(v313);
                v54 = HIDWORD(v313);
                v55 = (unsigned __int16)v314;
                v56 = WORD1(v314);
                v210 = WORD2(v314);
                v207 = WORD3(v314);
                v203 = v315;
                v205 = *((_QWORD *)&v314 + 1);
                goto LABEL_79;
              }
            }
            v56 = 0;
            v210 = 0;
            v207 = 0;
            v203 = 0;
            v205 = 0;
            v55 = 0;
            v54 = 0;
            v53 = 0;
            v52 = 0;
            v51 = 0;
            v50 = 0;
            v49 = 0;
LABEL_79:
            reply = xpc_dictionary_create_reply(a2);
            v113 = reply;
            if (reply)
            {
              xpc_dictionary_set_uint64(reply, "kCBTransmitStat", LOWORD(value[0]));
              xpc_dictionary_set_uint64(v113, "kCBReceiveStat", (unsigned __int16)length);
              xpc_dictionary_set_uint64(v113, "kCBSleepStat", LOWORD(v282[0]));
              xpc_dictionary_set_uint64(v113, "kCBOthersStat", (unsigned __int16)v276);
              xpc_dictionary_set_uint64(v113, "kCBm154Tx", v49);
              xpc_dictionary_set_uint64(v113, "kCBm154Rx", v50);
              xpc_dictionary_set_uint64(v113, "kCBiPAThreadCounter", v51);
              xpc_dictionary_set_uint64(v113, "kCBePAThreadCounter", v52);
              xpc_dictionary_set_uint64(v113, "kCBiPA5gCounter", v53);
              xpc_dictionary_set_uint64(v113, "kCBePA5gCounter", v54);
              xpc_dictionary_set_uint64(v113, "kCBtxbf5gTxPct", v55);
              xpc_dictionary_set_uint64(v113, "kCBmrc5gRxPct", v56);
              xpc_dictionary_set_uint64(v113, "kCBepa5gTxPct", v210);
              xpc_dictionary_set_uint64(v113, "kCBtxbf5gEpaTxPct", v207);
              xpc_dictionary_set_uint64(v113, "kCBduration5gTx", v205);
              xpc_dictionary_set_uint64(v113, "kCBduration5gRx", v203);
              xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v113);
              xpc_release(v113);
            }
            break;
          case 5:
            switch(xpc_dictionary_get_int64(v9, "kCBMsgArgOptions"))
            {
              case 1:
                v30 = qword_100999860;
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerStart", buf, 2u);
                }
                if (qword_10097B180 != -1)
                  dispatch_once(&qword_10097B180, &stru_1009377C0);
                sub_100507D78((uint64_t)off_10097B178 + 176, a1 + 160);
                if (qword_10097B180 != -1)
                  dispatch_once(&qword_10097B180, &stru_1009377C0);
                v31 = off_10097B178;
                v32 = *(void **)(a1 + 96);
                Current = CFAbsoluteTimeGetCurrent();
                sub_10041A04C((uint64_t)v31, v32, Current);
                break;
              case 2:
                v172 = qword_100999860;
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerStop", buf, 2u);
                }
                if (qword_10097B180 != -1)
                  dispatch_once(&qword_10097B180, &stru_1009377C0);
                sub_10041A444((uint64_t)off_10097B178);
                break;
              case 3:
                v166 = qword_100999860;
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v166, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerReset", buf, 2u);
                }
                if (qword_1009778B8 != -1)
                  dispatch_once(&qword_1009778B8, &stru_100937780);
                sub_1006A37CC(qword_1009778B0);
                break;
              case 4:
                v167 = qword_100999860;
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerDebugFillTEKHistory", buf, 2u);
                }
                if (qword_1009778B8 != -1)
                  dispatch_once(&qword_1009778B8, &stru_100937780);
                sub_1006A4448(qword_1009778B0, 30);
                break;
              case 5:
                v152 = qword_100999860;
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerForceTEKRotation", buf, 2u);
                }
                if (qword_1009778B8 != -1)
                  dispatch_once(&qword_1009778B8, &stru_100937780);
                sub_1006A3E1C(qword_1009778B0);
                break;
              case 6:
                v173 = qword_100999860;
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerRunRPIBenchmarks", buf, 2u);
                }
                v174 = xpc_dictionary_get_int64(v10, "kCBMsgArgKeys");
                if (qword_10097B180 != -1)
                  dispatch_once(&qword_10097B180, &stru_1009377C0);
                sub_100419538((uint64_t)off_10097B178, v174);
                break;
              case 7:
                v175 = qword_100999860;
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerCryptoVectorValidation", buf, 2u);
                }
                if (qword_1009778B8 != -1)
                  dispatch_once(&qword_1009778B8, &stru_100937780);
                sub_1006A3394();
                break;
              case 8:
                v168 = qword_100999860;
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerGetCurrentAdvertisingPayload", buf, 2u);
                }
                *(_QWORD *)&buf[8] = 0;
                *(_QWORD *)buf = 0;
                if (qword_10097B180 != -1)
                  dispatch_once(&qword_10097B180, &stru_1009377C0);
                sub_100419728((uint64_t)off_10097B178, buf);
                v169 = xpc_dictionary_create_reply(a2);
                if (v169)
                {
                  v170 = (const void *)sub_10003EB18((uint64_t)buf);
                  v171 = sub_10003F8C4((uint64_t)buf);
                  xpc_dictionary_set_data(v169, "kCBMsgArgAdvertisingPayload", v170, v171);
                  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v169);
                  xpc_release(v169);
                }
                *(_QWORD *)buf = &off_100918258;
                if (*(_QWORD *)&buf[8])
                  sub_100056AAC(*(unsigned int **)&buf[8]);
                break;
              case 9:
                if (qword_10097B180 != -1)
                  dispatch_once(&qword_10097B180, &stru_1009377C0);
                v209 = objc_msgSend(*((id *)off_10097B178 + 21), "copy");
                v183 = xpc_array_create(0, 0);
                v289 = 0u;
                v290 = 0u;
                v287 = 0u;
                v288 = 0u;
                v212 = v209;
                v184 = objc_msgSend(v212, "countByEnumeratingWithState:objects:count:", &v287, v299, 16);
                if (v184)
                {
                  v185 = *(_QWORD *)v288;
                  do
                  {
                    for (i = 0; i != v184; i = (char *)i + 1)
                    {
                      if (*(_QWORD *)v288 != v185)
                        objc_enumerationMutation(v212);
                      v187 = *(void **)(*((_QWORD *)&v287 + 1) + 8 * (_QWORD)i);
                      v188 = xpc_dictionary_create(0, 0, 0);
                      v189 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v187, "objectForKey:", CFSTR("RPIHistoryTime"))));
                      xpc_dictionary_set_string(v188, "RPIHistoryTime", (const char *)objc_msgSend(v189, "UTF8String"));

                      memset(buf, 0, 20);
                      v190 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v187, "objectForKey:", CFSTR("RPIHistoryOTAPayload")));
                      objc_msgSend(v190, "getBytes:length:", buf, 20);

                      xpc_dictionary_set_data(v188, "RPIHistoryOTAPayload", buf, 0x14uLL);
                      v191 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v187, "objectForKey:", CFSTR("RPIHistoryAEMVersion")));
                      xpc_dictionary_set_int64(v188, "RPIHistoryAEMVersion", (int)objc_msgSend(v191, "intValue"));

                      v192 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v187, "objectForKey:", CFSTR("RPIHistoryAEMTxPower")));
                      xpc_dictionary_set_int64(v188, "RPIHistoryAEMTxPower", (int)objc_msgSend(v192, "intValue"));

                      v193 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v187, "objectForKey:", CFSTR("RPIHistorySecondsSince1970")));
                      xpc_dictionary_set_int64(v188, "RPIHistorySecondsSince1970", (int)objc_msgSend(v193, "intValue"));

                      v194 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v187, "objectForKey:", CFSTR("RPIHistoryENIntervalNumber")));
                      xpc_dictionary_set_int64(v188, "RPIHistoryENIntervalNumber", (int)objc_msgSend(v194, "intValue"));

                      xpc_array_append_value(v183, v188);
                      xpc_release(v188);
                    }
                    v184 = objc_msgSend(v212, "countByEnumeratingWithState:objects:count:", &v287, v299, 16);
                  }
                  while (v184);
                }

                v195 = xpc_dictionary_create_reply(a2);
                v196 = v195;
                if (v195)
                {
                  xpc_dictionary_set_value(v195, "kCBMsgArgAdvertisingPayloadHistory", v183);
                  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v196);
                  xpc_release(v196);
                }

                break;
              case 10:
                v153 = qword_100999860;
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerGetTEKHistory", buf, 2u);
                }
                v154 = xpc_dictionary_get_int64(v10, "kCBMsgArgToday");
                v155 = xpc_dictionary_get_int64(v10, "KCBMsgArgForceRefresh");
                if (qword_1009778B8 != -1)
                  dispatch_once(&qword_1009778B8, &stru_100937780);
                v156 = sub_1006A3AF0(qword_1009778B0, v154 != 0, v155 != 0);
                v157 = (void *)objc_claimAutoreleasedReturnValue(v156);
                v158 = xpc_array_create(0, 0);
                v294 = 0u;
                v293 = 0u;
                v291 = 0u;
                v292 = 0u;
                v159 = v157;
                v160 = objc_msgSend(v159, "countByEnumeratingWithState:objects:count:", &v291, v300, 16);
                if (v160)
                {
                  v161 = *(_QWORD *)v292;
                  do
                  {
                    for (j = 0; j != v160; j = (char *)j + 1)
                    {
                      if (*(_QWORD *)v292 != v161)
                        objc_enumerationMutation(v159);
                      v163 = *(void **)(*((_QWORD *)&v291 + 1) + 8 * (_QWORD)j);
                      memset(buf, 0, 21);
                      objc_msgSend(v163, "getBytes:length:", buf, 21);
                      xpc_array_set_data(v158, 0xFFFFFFFFFFFFFFFFLL, buf, 0x15uLL);
                    }
                    v160 = objc_msgSend(v159, "countByEnumeratingWithState:objects:count:", &v291, v300, 16);
                  }
                  while (v160);
                }

                v164 = xpc_dictionary_create_reply(a2);
                v165 = v164;
                if (v164)
                {
                  xpc_dictionary_set_value(v164, "kCBMsgArgTEKHistory", v158);
                  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v165);
                  xpc_release(v165);
                }

                break;
              case 11:
                v176 = qword_100999860;
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_DEFAULT, "CBDebugCommandCTManagerCalculateATTN", buf, 2u);
                }
                v177 = xpc_dictionary_get_int64(v10, "KCBMsgArgSaturated");
                v178 = xpc_dictionary_get_int64(v10, "kCBMsgArgRSSI");
                length = 0;
                data = xpc_dictionary_get_data(v10, "kCBMsgArgTEK", &length);
                v282[0] = 0;
                v180 = xpc_dictionary_get_data(v10, "kCBMsgArgOTARpiAem", v282);
                BYTE4(v276) = 0;
                LODWORD(v276) = 0;
                if (length == 16 && v282[0] == 20)
                {
                  *(_OWORD *)buf = *data;
                  *(_OWORD *)value = *(_OWORD *)v180;
                  v295 = v180[4];
                  if (qword_10097B180 != -1)
                    dispatch_once(&qword_10097B180, &stru_1009377C0);
                  sub_10041B8B8((uint64_t)off_10097B178, (uint64_t)buf, (uint64_t)value, (uint64_t)&v295, v178, v177 != 0, (unsigned __int8 *)&v276);
                }
                v181 = xpc_dictionary_create_reply(a2);
                v182 = v181;
                if (v181)
                {
                  xpc_dictionary_set_uint64(v181, "kCBMsgArgATTN", BYTE4(v276));
                  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v182);
                  xpc_release(v182);
                }
                break;
              case 12:
                v151 = xpc_dictionary_get_int64(v10, "kCBMsgArgEKRollingPeriod");
                if (qword_1009778B8 != -1)
                  dispatch_once(&qword_1009778B8, &stru_100937780);
                sub_1006A4AA8(qword_1009778B0, v151);
                break;
              default:
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
                  goto LABEL_98;
                break;
            }
            return;
          case 6:
            if (qword_100977C30 != -1)
              dispatch_once(&qword_100977C30, &stru_1009378A0);
            sub_100605288();
            return;
          case 7:
            switch(xpc_dictionary_get_int64(v9, "kCBMsgArgOptions"))
            {
              case 1:
                memset(buf, 0, 24);
                if (qword_100978140 != -1)
                  dispatch_once(&qword_100978140, &stru_1009378C0);
                if (!sub_100260130((uint64_t)off_100978138, (uint64_t **)buf))
                {
                  v197 = xpc_array_create(0, 0);
                  if (v197)
                  {
                    v198 = *(void ***)buf;
                    v199 = *(void ***)&buf[8];
                    while (v198 != v199)
                    {
                      v200 = sub_100013ABC(*v198, *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));
                      xpc_array_append_value(v197, v200);
                      xpc_release(v200);
                      ++v198;
                    }
                    v201 = xpc_dictionary_create_reply(a2);
                    v202 = v201;
                    if (v201)
                    {
                      xpc_dictionary_set_value(v201, "kCBMsgArgDevices", v197);
                      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v202);
                      xpc_release(v202);
                    }
                  }
                }
                value[0] = (uint64_t)buf;
                sub_10040F448((void ***)value);
                break;
              case 2:
                v115 = sub_1002C39FC(v10, "kCBMsgArgDeviceUUID");
                v14 = (void *)objc_claimAutoreleasedReturnValue(v115);
                if (v14)
                {
                  if (qword_100978140 != -1)
                    dispatch_once(&qword_100978140, &stru_1009378C0);
                  sub_10025FA8C((uint64_t)off_100978138, v14);
                }
                goto LABEL_96;
              case 3:
                v114 = sub_1002C39FC(v10, "kCBMsgArgDeviceUUID");
                v14 = (void *)objc_claimAutoreleasedReturnValue(v114);
                if (v14)
                {
                  if (qword_100978140 != -1)
                    dispatch_once(&qword_100978140, &stru_1009378C0);
                  sub_10025FFF8((uint64_t)off_100978138, v14);
                }
                goto LABEL_96;
              case 4:
                if (qword_100978140 != -1)
                  dispatch_once(&qword_100978140, &stru_1009378C0);
                sub_100260380((uint64_t)off_100978138);
                break;
              default:
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
LABEL_98:
                  sub_1007003B0();
                break;
            }
            return;
          case 8:
            v206 = xpc_dictionary_get_int64(v9, "kCBMsgArgOptions");
            v57 = sub_1000239F0(v10, "kCBMsgArgApplicationID");
            v208 = (void *)objc_claimAutoreleasedReturnValue(v57);
            if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
            {
              if (v206 == 1)
              {
                v116 = sub_1000708B8(v10, "kCBMsgArgUUIDs");
                v204 = (void *)objc_claimAutoreleasedReturnValue(v116);
                v117 = sub_100023E20(v10, "kCBMsgArgNameSubstring");
                v118 = (void *)objc_claimAutoreleasedReturnValue(v117);
                value[1] = 0;
                value[0] = 0;
                v298 = 0;
                v119 = xpc_dictionary_get_value(v10, "kCBMsgArgServices");
                if (v119)
                  sub_10000598C(v119, (uint64_t)value);
                v285 = 0;
                length = 0;
                v286 = 0;
                v120 = xpc_dictionary_get_value(v10, "kCBMsgArgMfgrIdentifiers");
                if (v120)
                  sub_1002C3840(v120, (uint64_t)&length);
                v282[1] = 0;
                v282[0] = 0;
                v283 = 0;
                v278 = 0u;
                v279 = 0u;
                v280 = 0u;
                v281 = 0u;
                v211 = v118;
                v121 = objc_msgSend(v211, "countByEnumeratingWithState:objects:count:", &v278, v296, 16);
                if (v121)
                {
                  v122 = *(_QWORD *)v279;
                  do
                  {
                    for (k = 0; k != v121; k = (char *)k + 1)
                    {
                      if (*(_QWORD *)v279 != v122)
                        objc_enumerationMutation(v211);
                      v124 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v278 + 1) + 8 * (_QWORD)k));
                      sub_100091AE8(&v276, (char *)objc_msgSend(v124, "UTF8String"));
                      v125 = (_OWORD *)v282[1];
                      if (v282[1] >= v283)
                      {
                        v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v282[1] - v282[0]) >> 3);
                        v128 = v127 + 1;
                        if (v127 + 1 > 0xAAAAAAAAAAAAAAALL)
                          abort();
                        if (0x5555555555555556 * ((uint64_t)(v283 - v282[0]) >> 3) > v128)
                          v128 = 0x5555555555555556 * ((uint64_t)(v283 - v282[0]) >> 3);
                        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v283 - v282[0]) >> 3) >= 0x555555555555555)
                          v129 = 0xAAAAAAAAAAAAAAALL;
                        else
                          v129 = v128;
                        *(_QWORD *)&v302 = &v283;
                        if (v129)
                          v130 = (char *)sub_1002A479C((uint64_t)&v283, v129);
                        else
                          v130 = 0;
                        v131 = &v130[24 * v127];
                        v132 = v276;
                        *((_QWORD *)v131 + 2) = v277;
                        *(_OWORD *)v131 = v132;
                        v277 = 0;
                        v276 = 0uLL;
                        v133 = v282[1];
                        v134 = v282[0];
                        if (v282[1] == v282[0])
                        {
                          v137 = vdupq_n_s64(v282[1]);
                          v135 = (uint64_t)&v130[24 * v127];
                        }
                        else
                        {
                          v135 = (uint64_t)&v130[24 * v127];
                          do
                          {
                            v136 = *(_OWORD *)(v133 - 24);
                            *(_QWORD *)(v135 - 8) = *(_QWORD *)(v133 - 8);
                            *(_OWORD *)(v135 - 24) = v136;
                            v135 -= 24;
                            *(_QWORD *)(v133 - 16) = 0;
                            *(_QWORD *)(v133 - 8) = 0;
                            *(_QWORD *)(v133 - 24) = 0;
                            v133 -= 24;
                          }
                          while (v133 != v134);
                          v137 = *(int64x2_t *)v282;
                        }
                        v138 = (uint64_t)(v131 + 24);
                        v282[0] = v135;
                        v282[1] = (uint64_t)(v131 + 24);
                        *(int64x2_t *)&buf[8] = v137;
                        v139 = v283;
                        v283 = (uint64_t)&v130[24 * v129];
                        *(_QWORD *)&buf[24] = v139;
                        *(_QWORD *)buf = v137.i64[0];
                        sub_1002A56A4((uint64_t)buf);
                        v282[1] = v138;
                        if (SHIBYTE(v277) < 0)
                          operator delete((void *)v276);
                      }
                      else
                      {
                        v126 = v276;
                        *(_QWORD *)(v282[1] + 16) = v277;
                        *v125 = v126;
                        v282[1] = (uint64_t)v125 + 24;
                      }

                    }
                    v121 = objc_msgSend(v211, "countByEnumeratingWithState:objects:count:", &v278, v296, 16);
                  }
                  while (v121);
                }

                if (qword_100978170 != -1)
                  dispatch_once(&qword_100978170, &stru_100937800);
                v140 = off_100978168;
                v275 = 0;
                v273 = 0;
                v274 = 0;
                sub_1000B61B8((char *)&v273, (__int128 *)value[0], (__int128 *)value[1], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(value[1] - value[0]) >> 2));
                sub_1002F64C0(__p, (uint64_t)&length);
                memset(v271, 0, sizeof(v271));
                sub_1002A46F4((char *)v271, (__int128 *)v282[0], (__int128 *)v282[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v282[1] - v282[0]) >> 3));
                sub_1002F2C70((uint64_t)v140, v208, v204, (__int128 **)&v273, (uint64_t)__p, v271);
                *(_QWORD *)buf = v271;
                sub_100091BF8((void ***)buf);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                if (v273)
                {
                  v274 = v273;
                  operator delete(v273);
                }
                *(_QWORD *)buf = v282;
                sub_100091BF8((void ***)buf);
                if (length)
                {
                  v285 = length;
                  operator delete((void *)length);
                }
                if (value[0])
                {
                  value[1] = value[0];
                  operator delete((void *)value[0]);
                }

              }
              else if (v206 == 2)
              {
                if (qword_100978170 != -1)
                  dispatch_once(&qword_100978170, &stru_100937800);
                sub_1002F3208((uint64_t)off_100978168, v208);
              }
              else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
              {
                sub_1007003DC();
              }
              v141 = qword_100999860;
              if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134218242;
                *(_QWORD *)&buf[4] = v206;
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = v208;
                _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEFAULT, "CBDebugCommandDeviceAccessNotification opcode:%llu bundle:%@", buf, 0x16u);
              }
            }

            return;
          case 9:
            v92 = sub_1002C3A5C(v9, "kCBMsgArgIRK");
            v93 = (void *)objc_claimAutoreleasedReturnValue(v92);
            v94 = sub_1002C3A5C(v10, "kCBMsgArgAddressBytes");
            v95 = (void *)objc_claimAutoreleasedReturnValue(v94);
            v96 = qword_100999860;
            if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              *(_QWORD *)&buf[4] = v95;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v93;
              _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "CBDebugCommandResolveLERandomAddressWithIRK address:%@ irk:%@", buf, 0x16u);
            }
            if (v93 && objc_msgSend(v93, "length") == (id)16 && v95 && objc_msgSend(v95, "length") == (id)6)
            {
              v97 = (__int128 *)objc_msgSend(objc_retainAutorelease(v93), "bytes");
              *(_WORD *)((char *)value + 5) = 0;
              *(_DWORD *)((char *)value + 1) = 0;
              LOBYTE(value[0]) = 1;
              objc_msgSend(v95, "getBytes:length:", (char *)value + 1, 6);
              if (sub_10022DD00((uint64_t)value, v97))
              {
                v98 = 0;
              }
              else
              {
                v142 = objc_opt_new(NSMutableData);
                for (m = 15; m != -1; --m)
                  -[NSMutableData appendBytes:length:](v142, "appendBytes:length:", (char *)v97 + m, 1);
                v144 = qword_100999860;
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412546;
                  *(_QWORD *)&buf[4] = v95;
                  *(_WORD *)&buf[12] = 2112;
                  *(_QWORD *)&buf[14] = v142;
                  _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_DEFAULT, "CBDebugCommandResolveLERandomAddressWithIRK address:%@ irk:%@", buf, 0x16u);
                }
                v145 = objc_retainAutorelease(v142);
                if (sub_10022DD00((uint64_t)value, (__int128 *)-[NSMutableData bytes](v145, "bytes")))
                  v98 = 0;
                else
                  v98 = 2200;

              }
              v146 = qword_100999860;
              if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
              {
                v147 = sub_100021770(((unint64_t)BYTE1(value[0]) << 40) | ((unint64_t)BYTE2(value[0]) << 32) | ((unint64_t)BYTE3(value[0]) << 24) | ((unint64_t)BYTE4(value[0]) << 16) | ((unint64_t)BYTE5(value[0]) << 8) | BYTE6(value[0]) | ((unint64_t)LOBYTE(value[0]) << 48));
                v148 = (void *)objc_claimAutoreleasedReturnValue(v147);
                *(_DWORD *)buf = 138412546;
                *(_QWORD *)&buf[4] = v148;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v98 & 0x98;
                _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_DEFAULT, "CBDebugCommandResolveLERandomAddressWithIRK LE_ResolveUsingIRK for address %@ returned %d", buf, 0x12u);

              }
            }
            else
            {
              if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
                sub_10070043C();
              if (v95 && objc_msgSend(v95, "length") == (id)6)
              {
                if (v93 && objc_msgSend(v93, "length") == (id)16)
                  v98 = 0;
                else
                  v98 = 21;
              }
              else
              {
                v98 = 8;
              }
            }
            v149 = xpc_dictionary_create_reply(a2);
            v150 = v149;
            if (v149)
            {
              xpc_dictionary_set_int64(v149, "kCBMsgArgResult", v98);
              xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v150);
              xpc_release(v150);
            }

            return;
          case 10:
            v38 = xpc_dictionary_get_int64(v9, "addressType");
            v39 = xpc_dictionary_get_int64(v10, "refreshIdentity");
            if (qword_100977C30 != -1)
              dispatch_once(&qword_100977C30, &stru_1009378A0);
            if (v38)
              v40 = 2;
            else
              v40 = 3;
            sub_100604FF8((uint64_t)off_100977C28, 1, v40, v39 != 0);
            return;
          case 11:
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_OWORD *)&buf[16] = 0x2020000000uLL;
            *(_QWORD *)&buf[24] = xpc_dictionary_create_reply(a2);
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_100937820);
            v270[0] = _NSConcreteStackBlock;
            v270[1] = 3221225472;
            v270[2] = sub_1005533F0;
            v270[3] = &unk_100936F48;
            v270[5] = a1;
            v270[4] = buf;
            sub_1006435F4((uint64_t)off_1009778A0, v270);
            _Block_object_dispose(buf, 8);
            return;
          case 12:
            v22 = sub_1002C3A5C(v9, "kCBFastLeConnectionInfoData");
            v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
            v24 = xpc_dictionary_get_int64(v10, "kCBFastLeConnectionInfoVersion");
            v25 = sub_1002C39FC(v10, "kCBMsgArgDeviceUUID");
            v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
            v27 = sub_1000419F4();
            v264[0] = _NSConcreteStackBlock;
            v264[1] = 3221225472;
            v264[2] = sub_10055351C;
            v264[3] = &unk_100936F70;
            v267 = a1;
            v28 = v26;
            v265 = v28;
            v269 = v24;
            v29 = v23;
            v266 = v29;
            v268 = a2;
            sub_100023D84(v27, v264);

            return;
          case 13:
            v34 = sub_1002C39FC(v9, "kCBMsgArgDeviceUUID");
            v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
            v36 = sub_1000419F4();
            v260[0] = _NSConcreteStackBlock;
            v260[1] = 3221225472;
            v260[2] = sub_1005535D8;
            v260[3] = &unk_1009183A0;
            v262 = a1;
            v37 = v35;
            v261 = v37;
            v263 = a2;
            sub_100023D84(v36, v260);

            return;
          case 14:
            v77 = sub_1002C3A5C(v9, "kCBMsgArgLTK");
            v78 = (void *)objc_claimAutoreleasedReturnValue(v77);
            v79 = sub_1002C39FC(v10, "kCBMsgArgDeviceUUID");
            v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
            v81 = sub_1000419F4();
            v250[0] = _NSConcreteStackBlock;
            v250[1] = 3221225472;
            v250[2] = sub_100553744;
            v250[3] = &unk_100936F98;
            v253 = a1;
            v82 = v80;
            v251 = v82;
            v83 = v78;
            v252 = v83;
            v254 = a2;
            sub_100023D84(v81, v250);

            return;
          case 15:
            v18 = sub_1002C39FC(v9, "kCBMsgArgDeviceUUID");
            v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
            v20 = sub_1000419F4();
            v246[0] = _NSConcreteStackBlock;
            v246[1] = 3221225472;
            v246[2] = sub_100553880;
            v246[3] = &unk_1009183A0;
            v248 = a1;
            v21 = v19;
            v247 = v21;
            v249 = a2;
            sub_100023D84(v20, v246);

            return;
          case 16:
            v42 = sub_1002C39FC(v9, "kCBMsgArgDeviceUUID");
            v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
            v44 = xpc_dictionary_get_int64(v10, "kCBMsgArgOptions");
            v45 = sub_1000419F4();
            v255[0] = _NSConcreteStackBlock;
            v255[1] = 3221225472;
            v255[2] = sub_100553688;
            v255[3] = &unk_100922B18;
            v257 = a1;
            v46 = v43;
            v259 = v44;
            v256 = v46;
            v258 = a2;
            sub_100023D84(v45, v255);

            return;
          case 17:
            v13 = sub_1002C39FC(v9, "kCBMsgArgDeviceUUID");
            v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
            if (v14)
            {
              if (qword_1009778A8 != -1)
                dispatch_once(&qword_1009778A8, &stru_100937820);
              v15 = off_1009778A0;
              sub_100030BCC(buf, v14);
              v16 = sub_10062BC80((uint64_t)v15, buf, 0, 0, 0, 0, 0);
              v17 = qword_100999860;
              if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412546;
                *(_QWORD *)&buf[4] = v14;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v16;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CBDebugCommandDisableHostWakeupOnLinkDrop identifier:%@ returned %d", buf, 0x12u);
              }
            }
            else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            {
              sub_100700468();
            }
LABEL_96:

            return;
          case 18:
            v60 = sub_1002C39FC(v9, "kCBMsgArgDeviceUUID");
            v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
            v62 = xpc_dictionary_get_int64(v10, "kCBLePowerControlDisable");
            v63 = xpc_dictionary_get_int64(v10, "kCBLePowerControlRssiMin");
            v64 = xpc_dictionary_get_int64(v10, "kCBLePowerControlRssiMax");
            v65 = sub_1000419F4();
            v223[0] = _NSConcreteStackBlock;
            v223[1] = 3221225472;
            v223[2] = sub_100553B50;
            v223[3] = &unk_100937010;
            v225 = a1;
            v66 = v61;
            v227 = v62;
            v228 = v63;
            v229 = v64;
            v224 = v66;
            v226 = a2;
            sub_100023D84(v65, v223);

            return;
          case 19:
            v84 = sub_1002C39FC(v9, "kCBMsgArgDeviceUUID");
            v85 = (void *)objc_claimAutoreleasedReturnValue(v84);
            v86 = sub_1000239F0(v10, "operation");
            v87 = (void *)objc_claimAutoreleasedReturnValue(v86);
            v88 = xpc_dictionary_get_int64(v10, "command");
            v89 = sub_1000419F4();
            v240[0] = _NSConcreteStackBlock;
            v240[1] = 3221225472;
            v240[2] = sub_100553990;
            v240[3] = &unk_100936FC0;
            v243 = a1;
            v90 = v87;
            v241 = v90;
            v245 = v88;
            v91 = v85;
            v242 = v91;
            v244 = a2;
            sub_100023D84(v89, v240);

            return;
          case 20:
            v99 = sub_1002C39FC(v9, "kCBMsgArgDeviceUUID");
            v100 = (void *)objc_claimAutoreleasedReturnValue(v99);
            v101 = xpc_dictionary_get_double(v10, "kCBMsgArgMinConnectionInterval");
            v102 = xpc_dictionary_get_double(v10, "kCBMsgArgPreferredConnectionInterval");
            v103 = xpc_dictionary_get_double(v10, "kCBMsgArgMaxConnectionInterval");
            v104 = xpc_dictionary_get_int64(v10, "kCBMsgArgPreferredConnectionLatency");
            v105 = xpc_dictionary_get_int64(v10, "kCBMsgArgMaxConnectionLatency");
            v106 = xpc_dictionary_get_int64(v10, "kCBMsgArgMinCELength");
            v107 = xpc_dictionary_get_int64(v10, "kCBMsgArgMaxCELength");
            v108 = xpc_dictionary_get_int64(v10, "kCBMsgArgSupervisionTimeout");
            v109 = sub_1000419F4();
            v230[0] = _NSConcreteStackBlock;
            v230[1] = 3221225472;
            v230[2] = sub_100553A98;
            v230[3] = &unk_100936FE8;
            v110 = v100;
            v231 = v110;
            *(float *)&v101 = v101;
            v232 = LODWORD(v101);
            *(float *)&v102 = v102;
            v233 = LODWORD(v102);
            *(float *)&v103 = v103;
            v234 = LODWORD(v103);
            v235 = v106;
            v236 = v107;
            v237 = v104;
            v238 = v105;
            v239 = v108;
            sub_100041A34(v109, v230);

            return;
          case 21:
            v67 = sub_1002C39FC(v9, "kCBMsgArgDeviceUUID");
            v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
            v69 = xpc_dictionary_get_int64(v10, "command");
            v70 = sub_1000419F4();
            v218[0] = _NSConcreteStackBlock;
            v218[1] = 3221225472;
            v218[2] = sub_100553BE8;
            v218[3] = &unk_100922B18;
            v220 = a1;
            v222 = v69;
            v71 = v68;
            v219 = v71;
            v221 = a2;
            sub_100023D84(v70, v218);

            return;
          case 22:
            v72 = sub_1002C39FC(v9, "kCBMsgArgDeviceUUID");
            v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
            v74 = xpc_dictionary_get_int64(v10, "command");
            v75 = sub_1000419F4();
            v213[0] = _NSConcreteStackBlock;
            v213[1] = 3221225472;
            v213[2] = sub_100553D14;
            v213[3] = &unk_100922B18;
            v215 = a1;
            v217 = v74;
            v76 = v73;
            v214 = v76;
            v216 = a2;
            sub_100023D84(v75, v213);

            return;
          default:
            if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
              sub_100700350();
            return;
        }
      }
    }
  }
}

void sub_10053BA68(_Unwind_Exception *a1)
{
  STACK[0x4C0] = (unint64_t)&STACK[0x5E0];
  sub_10040F448((void ***)&STACK[0x4C0]);
  _Unwind_Resume(a1);
}

void sub_10053BEDC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  _QWORD v13[5];
  char v14;
  uint64_t v15;

  v15 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_100023B7C(value, 0, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgProgrammaticPairing"))
  {
    if (*(_BYTE *)(a1 + 185))
      v10 = v15 == 0;
    else
      v10 = 1;
    v11 = !v10;
    v12 = sub_1000419F4();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100553E6C;
    v13[3] = &unk_100918888;
    v13[4] = a1;
    v14 = v11;
    sub_100023D84(v12, v13);
    *(_BYTE *)(a1 + 168) = 1;
  }
}

void sub_10053BF9C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100553EC4;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100023D84(v2, v3);
}

void sub_10053BFFC(uint64_t a1, void *a2)
{
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t reply;
  void *v7;
  _QWORD v8[6];

  v4 = xpc_array_create(0, 0);
  v5 = sub_1000419F4();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100553F14;
  v8[3] = &unk_100918090;
  v8[4] = a1;
  v8[5] = v4;
  sub_100023D84(v5, v8);
  reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    v7 = reply;
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v7);
    xpc_release(v7);
  }
  xpc_release(v4);
}

void sub_10053C0B4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  xpc_object_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  void *v31;

  if (*(_BYTE *)(a1 + 185))
  {
    v24 = 1;
    v25 = 1;
    v23 = 0;
    value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if (v6)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
      {
        v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
        if (!sub_100023B7C(v7, 0, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgPairingOptionsUseMITMAuthentication"))
        {
          v14 = sub_1000419F4();
          v18[0] = _NSConcreteStackBlock;
          v18[1] = 3221225472;
          v18[2] = sub_100554080;
          v18[3] = &unk_100920878;
          v19 = v6;
          v20 = v25;
          v21 = v24;
          v22 = v23;
          sub_100023D84(v14, v18);

        }
      }
      else
      {
        v15 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          v16 = *(_QWORD *)(a1 + 96);
          v17 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          v27 = v16;
          v28 = 2112;
          v29 = v17;
          v30 = 2112;
          v31 = v6;
          _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
        }
      }
    }

  }
}

void sub_10053C2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_10053C2EC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  xpc_object_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  v20 = 0;
  v21 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_100023B7C(v7, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgPairingType") && v6)
  {
    *(_QWORD *)&v22 = 0;
    v14 = sub_1000419F4();
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100554154;
    v15[3] = &unk_100920878;
    v17 = a1;
    v16 = v6;
    v18 = v20;
    v19 = v22;
    sub_100023D84(v14, v15);

  }
}

void sub_10053C63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_10053C694(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  int v4;
  id v5;
  void *v6;
  char v7;
  NSObject *v8;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  char v16;
  uint8_t buf[4];
  _QWORD *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  const char *v22;

  if (*(_BYTE *)(a1 + 185))
  {
    value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v4 = sub_1002C3B60(value, "kCBUnpairOptionForceDisconnect");
    v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if (v6)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      v7 = sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48));
      v8 = qword_100999860;
      if ((v7 & 1) != 0)
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          v9 = (_QWORD *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0)
            v9 = (_QWORD *)*v9;
          *(_DWORD *)buf = 136446722;
          v18 = v9;
          if (v4)
            v10 = "YES";
          else
            v10 = "NO";
          v19 = 2112;
          v20 = v6;
          v21 = 2080;
          v22 = v10;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to unpair device \"%@\" forceDisconnect:%s", buf, 0x20u);
        }
        v11 = sub_1000419F4();
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_1005541BC;
        v14[3] = &unk_1009189E0;
        v15 = v6;
        v16 = v4;
        sub_100023D84(v11, v14);

      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v12 = *(_QWORD **)(a1 + 96);
        v13 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138412802;
        v18 = v12;
        v19 = 2112;
        v20 = v13;
        v21 = 2112;
        v22 = (const char *)v6;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }

  }
}

void sub_10053C8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_10053C8F4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100023B7C(value, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgUseOOBPairing");
  v12 = sub_1000419F4();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100554298;
  v14[3] = &unk_1009183A0;
  v16 = a1;
  v13 = v5;
  v15 = v13;
  v17 = v18;
  sub_100023D84(v12, v14);

}

void sub_10053C9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_10053C9FC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  xpc_object_t reply;
  uint64_t v10;
  __int16 length;
  _QWORD length_2[4];
  id v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_1000419F4();
  length_2[0] = _NSConcreteStackBlock;
  length_2[1] = 3221225472;
  length_2[2] = sub_1005542FC;
  length_2[3] = &unk_100929178;
  v14 = &v16;
  v15 = a1;
  v8 = v6;
  v13 = v8;
  sub_100023D84(v7, length_2);
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = v17[3];
    if (v10)
    {
      length = 0;
      sub_10068CC74(v10, &length);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
  }

  _Block_object_dispose(&v16, 8);
}

void sub_10053CB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10053CB90(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  int v6;
  NSObject *v7;

  if (*(int *)(a1 + 80) >= 1)
  {
    value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v4 = sub_1002C3AD4(value, "kCBMsgArgReasonEnum");
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = objc_msgSend(v5, "intValue");

    v7 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007004EC(a1, v6, v7);
  }
}

void sub_10053CC24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10053CC34(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  xpc_object_t reply;
  void *v15;
  id v16;
  void *v17;
  unsigned int v18;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1000239F0(value, "kCBMsgArgResourceKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_1000239F0(value, "kCBMsgArgResourceSubKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (*(int *)(a1 + 80) >= 1)
  {
    if (v6 && objc_msgSend(v6, "length"))
    {
      if (objc_msgSend(v6, "isEqualToString:", CBManagerResourceADVBufferCount))
      {
        v9 = sub_10003BE44();
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 704))(v9);
        if (qword_100977FB0 != -1)
          dispatch_once(&qword_100977FB0, &stru_1009378E0);
        v11 = 0;
        v12 = v10;
        v13 = v10 - (unint64_t)sub_100677D48((uint64_t)off_100977FA8);
        goto LABEL_14;
      }
      if (objc_msgSend(v6, "isEqualToString:", CBManagerResourceConnectionUsecaseCount))
      {
        v16 = objc_alloc_init((Class)NSNumberFormatter);
        objc_msgSend(v16, "setNumberStyle:", 1);
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "numberFromString:", v8));
        if (qword_10097AC58 != -1)
          dispatch_once(&qword_10097AC58, &stru_100937900);
        v18 = sub_1006C00E8(qword_10097AC50, objc_msgSend(v17, "unsignedIntegerValue"));
        if (qword_10097AC58 != -1)
          dispatch_once(&qword_10097AC58, &stru_100937900);
        v12 = v18;
        v13 = v18
            - (unint64_t)sub_1006C02B8(qword_10097AC50, (int)objc_msgSend(v17, "unsignedIntegerValue"));

        v11 = 0;
        goto LABEL_14;
      }
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007005E0((uint64_t)v6);
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_1007005B4();
    }
    v12 = 0;
    v13 = 0;
    v11 = 3;
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_100700650();
  v12 = 0;
  v13 = 0;
  v11 = 17;
LABEL_14:
  reply = xpc_dictionary_create_reply(xdict);
  v15 = reply;
  if (reply)
  {
    xpc_dictionary_set_int64(reply, "kCBMsgArgResourceTotalCount", v12);
    xpc_dictionary_set_int64(v15, "kCBMsgArgResourceRemainingCount", v13);
    xpc_dictionary_set_int64(v15, "kCBMsgArgResult", v11);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v15);
    xpc_release(v15);
  }

}

void sub_10053CF24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10053CF64(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  xpc_object_t reply;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1000239F0(value, "kCBMsgArgApplicationID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  reply = 0;
  reply = xpc_dictionary_create_reply(xdict);
  if (v13[3])
  {
    v7 = sub_1000419F4();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100554854;
    v8[3] = &unk_100937060;
    v11 = a1;
    v9 = v6;
    v10 = &v12;
    sub_100041A34(v7, v8);

  }
  _Block_object_dispose(&v12, 8);

}

void sub_10053D050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10053D084(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  xpc_object_t reply;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  NSMutableDictionary *v25;
  uint64_t v26;
  NSMutableDictionary *v27;
  id v28;
  uint64_t v29;
  void *i;
  void *v31;
  void *v32;
  int64_t v33;
  NSObject *v34;
  void *v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  _BYTE v42[128];

  v41 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v11 = sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  reply = xpc_dictionary_create_reply(xdict);
  if (*(int *)(a1 + 80) >= 1
    && (objc_msgSend(&off_100961230, "containsObject:", *(_QWORD *)(a1 + 96)) & 1) != 0)
  {
    if (reply && !v11)
    {
      v13 = sub_100023E20(v41, "kCBOptionStateDetailList");
      v36 = (void *)objc_claimAutoreleasedReturnValue(v13);
      if (v36 && objc_msgSend(v36, "count"))
      {
        v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(v36, "count")));
        if (objc_msgSend(v36, "containsObject:", CFSTR("kCBMsgArgIsA2DPSessionActive")))
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 0));
          objc_msgSend(v35, "addObject:", v14);

        }
        if (objc_msgSend(v36, "containsObject:", CFSTR("kCBMsgArgIsHFPSessionActive")))
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
          objc_msgSend(v35, "addObject:", v15);

        }
        if (objc_msgSend(v36, "containsObject:", CFSTR("kCBMsgArgIsISOPipeSessionActive")))
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 2));
          objc_msgSend(v35, "addObject:", v16);

        }
        if (objc_msgSend(v36, "containsObject:", CFSTR("kCBMsgArgIsLEASessionActive")))
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 3));
          objc_msgSend(v35, "addObject:", v17);

        }
        if (objc_msgSend(v36, "containsObject:", CFSTR("kCBMsgArgIsWatchConnected")))
        {
          v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 4));
          objc_msgSend(v35, "addObject:", v18);

        }
        if (objc_msgSend(v36, "containsObject:", CFSTR("kCBMsgArgClassicDevicesConnectedCount")))
        {
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 5));
          objc_msgSend(v35, "addObject:", v19);

        }
        if (objc_msgSend(v36, "containsObject:", CFSTR("kCBMsgArgLeDevicesConnectedCount")))
        {
          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 6));
          objc_msgSend(v35, "addObject:", v20);

        }
        if (objc_msgSend(v36, "containsObject:", CFSTR("kCBMsgArgClassicHIDDevicesConnectedCount")))
        {
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 7));
          objc_msgSend(v35, "addObject:", v21);

        }
        if (objc_msgSend(v36, "containsObject:", CFSTR("kCBMsgArgLeHIDDevicesConnectedCount")))
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 8));
          objc_msgSend(v35, "addObject:", v22);

        }
        if (objc_msgSend(v36, "containsObject:", CFSTR("kCBMsgArgIsConnectionPrioritizationSupported")))
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 9));
          objc_msgSend(v35, "addObject:", v23);

        }
        if (objc_msgSend(v36, "containsObject:", CFSTR("kCBMsgArgIsProtectLEA")))
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 10));
          objc_msgSend(v35, "addObject:", v24);

        }
        v25 = objc_opt_new(NSMutableDictionary);
        v26 = sub_100065478();
        (*(void (**)(uint64_t, void *, NSMutableDictionary *))(*(_QWORD *)v26 + 624))(v26, v35, v25);
        if (-[NSMutableDictionary count](v25, "count"))
        {
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v27 = v25;
          v28 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:](v27, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
          if (v28)
          {
            v29 = *(_QWORD *)v38;
            do
            {
              for (i = 0; i != v28; i = (char *)i + 1)
              {
                if (*(_QWORD *)v38 != v29)
                  objc_enumerationMutation(v27);
                v31 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)i);
                switch(objc_msgSend(v31, "intValue"))
                {
                  case 0u:
                    v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", v31));
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsA2DPSessionActive", (BOOL)objc_msgSend(v32, "BOOLValue"));
                    goto LABEL_47;
                  case 1u:
                    v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", v31));
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsHFPSessionActive", (BOOL)objc_msgSend(v32, "BOOLValue"));
                    goto LABEL_47;
                  case 2u:
                    v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", v31));
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsISOPipeSessionActive", (BOOL)objc_msgSend(v32, "BOOLValue"));
                    goto LABEL_47;
                  case 3u:
                    v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", v31));
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsLEASessionActive", (BOOL)objc_msgSend(v32, "BOOLValue"));
                    goto LABEL_47;
                  case 4u:
                    v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", v31));
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsWatchConnected", (BOOL)objc_msgSend(v32, "BOOLValue"));
                    goto LABEL_47;
                  case 5u:
                    v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", v31));
                    xpc_dictionary_set_int64(reply, "kCBMsgArgClassicDevicesConnectedCount", (int)objc_msgSend(v32, "intValue"));
                    goto LABEL_47;
                  case 6u:
                    v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", v31));
                    xpc_dictionary_set_int64(reply, "kCBMsgArgLeDevicesConnectedCount", (int)objc_msgSend(v32, "intValue"));
                    goto LABEL_47;
                  case 7u:
                    v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", v31));
                    xpc_dictionary_set_int64(reply, "kCBMsgArgClassicHIDDevicesConnectedCount", (int)objc_msgSend(v32, "intValue"));
                    goto LABEL_47;
                  case 8u:
                    v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", v31));
                    xpc_dictionary_set_int64(reply, "kCBMsgArgLeHIDDevicesConnectedCount", (int)objc_msgSend(v32, "intValue"));
                    goto LABEL_47;
                  case 9u:
                    v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", v31));
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsConnectionPrioritizationSupported", (BOOL)objc_msgSend(v32, "BOOLValue"));
                    goto LABEL_47;
                  case 0xAu:
                    v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", v31));
                    xpc_dictionary_set_BOOL(reply, "kCBMsgArgIsProtectLEA", (BOOL)objc_msgSend(v32, "BOOLValue"));
LABEL_47:

                    break;
                  default:
                    continue;
                }
              }
              v28 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:](v27, "countByEnumeratingWithState:objects:count:", &v37, v42, 16);
            }
            while (v28);
          }

          v33 = 0;
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            sub_100700758();
          v33 = 3;
        }

      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_10070072C();
        v33 = 3;
      }
      xpc_dictionary_set_int64(reply, "kCBMsgArgResult", v33);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
      xpc_release(reply);

    }
  }
  else
  {
    v34 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070067C(a1, v34);
    if (reply)
    {
      xpc_dictionary_set_int64(reply, "kCBMsgArgResult", 13);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
      xpc_release(reply);
    }
  }
}

void sub_10053D840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_10053D9A4()
{
  _QWORD v0[3];
  int v1;

  v0[0] = 0;
  v0[1] = v0;
  v0[2] = 0x2020000000;
  v1 = 0;
  operator new();
}

void sub_10053DBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  if (a11)
    sub_100056AAC(a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10053DC38(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100556564;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100023D84(v2, v3);
  sub_10005E138(a1, 48, 0, 0);
}

void sub_10053DCAC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  int v4;
  uint64_t v5;
  xpc_object_t v6;
  _QWORD v7[6];
  int v8;
  uint64_t (**v9)();
  unsigned int *v10;
  void *__p;
  void *v12;
  uint64_t v13;
  uint64_t (**v14)();
  unsigned int *v15;
  uint64_t v16;
  uint64_t (**v17)();
  void *v18[2];
  __int128 v19;
  uint64_t (**v20)();
  unsigned int *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;

  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  v16 = 0;
  v17 = &off_100918258;
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  v20 = &off_100918258;
  v21 = 0;
  if (*(int *)(a1 + 80) > 1)
  {
    value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v4 = sub_1005565B4(a1, value, (uint64_t)&v16);
    *((_DWORD *)v23 + 6) = v4;
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700810();
    }
    else
    {
      v5 = sub_1000419F4();
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3321888768;
      v7[2] = sub_100556914;
      v7[3] = &unk_1009370C0;
      v7[4] = &v22;
      v7[5] = a1;
      v8 = v16;
      v9 = &off_100918258;
      v10 = (unsigned int *)v18[0];
      if (v18[0])
        sub_10003C37C((uint64_t)v18[0]);
      __p = 0;
      v12 = 0;
      v13 = 0;
      sub_1000B61B8((char *)&__p, (__int128 *)v18[1], (__int128 *)v19, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - (unint64_t)v18[1]) >> 2));
      v14 = &off_100918258;
      v15 = v21;
      if (v21)
        sub_10003C37C((uint64_t)v21);
      sub_100023D84(v5, v7);
      v14 = &off_100918258;
      if (v15)
        sub_100056AAC(v15);
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
      v9 = &off_100918258;
      if (v10)
        sub_100056AAC(v10);
    }
    v6 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v6, "kCBMsgArgResult", *((int *)v23 + 6));
    sub_10005E138(a1, 49, v6, 1);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_1007007E4();
  }
  v20 = &off_100918258;
  if (v21)
    sub_100056AAC(v21);
  if (v18[1])
  {
    *(void **)&v19 = v18[1];
    operator delete(v18[1]);
  }
  v17 = &off_100918258;
  if (v18[0])
    sub_100056AAC((unsigned int *)v18[0]);
  _Block_object_dispose(&v22, 8);
}

void sub_10053DEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int *a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  if (__p)
    operator delete(__p);
  if (a17)
    sub_100056AAC(a17);
  sub_100556A90(&a23);
  _Block_object_dispose((const void *)(v23 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10053DF50(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  int v4;
  uint64_t v5;
  xpc_object_t v6;
  _QWORD v7[6];
  int v8;
  uint64_t (**v9)();
  unsigned int *v10;
  void *__p;
  void *v12;
  uint64_t v13;
  uint64_t (**v14)();
  unsigned int *v15;
  uint64_t v16;
  uint64_t (**v17)();
  void *v18[2];
  __int128 v19;
  uint64_t (**v20)();
  unsigned int *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;

  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  v16 = 0;
  v17 = &off_100918258;
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  v20 = &off_100918258;
  v21 = 0;
  if (*(int *)(a1 + 80) > 1)
  {
    value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v4 = sub_1005565B4(a1, value, (uint64_t)&v16);
    *((_DWORD *)v23 + 6) = v4;
    v5 = sub_1000419F4();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3321888768;
    v7[2] = sub_100556AE8;
    v7[3] = &unk_1009370C0;
    v7[4] = &v22;
    v7[5] = a1;
    v8 = v16;
    v9 = &off_100918258;
    v10 = (unsigned int *)v18[0];
    if (v18[0])
      sub_10003C37C((uint64_t)v18[0]);
    __p = 0;
    v12 = 0;
    v13 = 0;
    sub_1000B61B8((char *)&__p, (__int128 *)v18[1], (__int128 *)v19, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - (unint64_t)v18[1]) >> 2));
    v14 = &off_100918258;
    v15 = v21;
    if (v21)
      sub_10003C37C((uint64_t)v21);
    sub_100023D84(v5, v7);
    v6 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v6, "kCBMsgArgResult", *((int *)v23 + 6));
    sub_10005E138(a1, 50, v6, 1);
    v14 = &off_100918258;
    if (v15)
      sub_100056AAC(v15);
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
    }
    v9 = &off_100918258;
    if (v10)
      sub_100056AAC(v10);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100700870();
  }
  v20 = &off_100918258;
  if (v21)
    sub_100056AAC(v21);
  if (v18[1])
  {
    *(void **)&v19 = v18[1];
    operator delete(v18[1]);
  }
  v17 = &off_100918258;
  if (v18[0])
    sub_100056AAC((unsigned int *)v18[0]);
  _Block_object_dispose(&v22, 8);
}

void sub_10053E15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int *a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  if (__p)
    operator delete(__p);
  if (a17)
    sub_100056AAC(a17);
  sub_100556A90(&a23);
  _Block_object_dispose((const void *)(v23 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10053E1C0(uint64_t a1, void *a2)
{
  uint64_t v4;
  xpc_object_t value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  xpc_object_t v14;
  _QWORD v15[3];
  void *__p;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  _BYTE v28[28];
  __int128 v29;
  int v30;

  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 0;
  v23 = 0;
  v29 = 0uLL;
  v30 = 0;
  sub_100069AFC(&v29);
  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  __p = 0;
  v17 = 0;
  v18 = 0;
  v4 = sub_100065478();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 632))(v4, *(_QWORD *)(a1 + 96), 3);
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  v12 = sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgAttributeID");
  *((_DWORD *)v25 + 6) = v12;
  if (v12)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007008F0();
  }
  else
  {
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_100937920);
    if (sub_1003F3C68(qword_10097AC10, (unsigned __int8 *)&v29, *(unsigned __int8 *)(a1 + 183)))
      operator new();
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      v13 = (_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        v13 = (_QWORD *)*v13;
      sub_10006887C((uint64_t)&v29, v15);
      sub_10070089C((uint64_t)v13, (uint64_t)v15, (uint64_t)v28);
    }
    *((_DWORD *)v25 + 6) = 905;
  }
  v14 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v14, "kCBMsgArgAttributeID", v23);
  xpc_dictionary_set_int64(v14, "kCBMsgArgResult", *((int *)v25 + 6));
  sub_10005E138(a1, 51, v14, 1);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  _Block_object_dispose(&v24, 8);
}

void sub_10053E614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void *v38;

  if (__p)
    operator delete(__p);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  _Block_object_dispose((const void *)(v36 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10053E690(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[6];
  uint64_t v12;

  v12 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_100023B7C(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgAttributeID"))
  {
    v10 = sub_1000419F4();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100557120;
    v11[3] = &unk_100918090;
    v11[4] = a1;
    v11[5] = v12;
    sub_100023D84(v10, v11);
  }
}

void sub_10053E734(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100557178;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100023D84(v2, v3);
}

void sub_10053E794(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[7];
  uint64_t (**v12)();
  unsigned int *v13;
  uint64_t v14;
  uint64_t (**v15)();
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  v15 = &off_100918258;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_100023B7C(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgTransactionID"))
  {
    v10 = sub_1000419F4();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3321888768;
    v11[2] = sub_1005571C8;
    v11[3] = &unk_1009370F0;
    v11[4] = a1;
    v11[5] = v19;
    v11[6] = v17;
    v12 = &off_100918258;
    v13 = v16;
    v14 = v18;
    sub_100023D84(v10, v11);
    v12 = &off_100918258;
    if (v13)
      sub_100056AAC(v13);
  }
  v15 = &off_100918258;
  if (v16)
    sub_100056AAC(v16);
}

void sub_10053E8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned int *a30)
{
  uint64_t v30;
  uint64_t v31;
  unsigned int *v33;

  if (a30)
    sub_100056AAC(a30);
  *(_QWORD *)(v31 - 72) = v30;
  v33 = *(unsigned int **)(v31 - 64);
  if (v33)
    sub_100056AAC(v33);
  _Unwind_Resume(exception_object);
}

void sub_10053E908(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  unsigned int *v18;
  uint64_t (**v19)();
  unsigned int *v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  v19 = &off_100918258;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1000708B8(value, "kCBMsgArgUUIDs");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (!sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgAttributeID") && v5)
  {
    v12 = sub_1000419F4();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3321888768;
    v13[2] = sub_10055727C;
    v13[3] = &unk_100937128;
    v15 = a1;
    v14 = v5;
    v16 = v21;
    v17 = &off_100918258;
    v18 = v20;
    sub_100023D84(v12, v13);
    v17 = &off_100918258;
    if (v18)
      sub_100056AAC(v18);

  }
  v19 = &off_100918258;
  if (v20)
    sub_100056AAC(v20);
}

void sub_10053EA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v25;

  v25 = *(unsigned int **)(v23 - 48);
  *(_QWORD *)(v23 - 56) = v22;
  if (v25)
    sub_100056AAC(v25);
  _Unwind_Resume(a1);
}

void sub_10053EA94(uint64_t a1, void *a2)
{
  int v4;
  xpc_object_t reply;
  void *v6;

  v4 = *(unsigned __int8 *)(sub_1000438A4() + 160);
  reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    v6 = reply;
    xpc_dictionary_set_BOOL(reply, "kCBMsgArgData", v4 != 0);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v6);
    xpc_release(v6);
  }
}

void sub_10053EB08(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  id v16;

  v12 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v10 = 0;
  v11 = 0;
  sub_100023B7C(value, 1, v3, v4, v5, v6, v7, v8, (uint64_t)"kCBMsgArgDeviceUUID");
  v9 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218242;
    v14 = v12;
    v15 = 2112;
    v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Enable private mode for time %lld for client session : %@", buf, 0x16u);
  }

}

void sub_10053EDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  _Unwind_Resume(a1);
}

void sub_10053EE14(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  xpc_object_t value;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[12];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t buf[8];
  void *v26;
  uint64_t v27;
  uint64_t v28;

  v27 = 0;
  v28 = 0;
  v26 = 0;
  v4 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Publish L2CAP channel request", buf, 2u);
  }
  v5 = sub_100065478();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 632))(v5, *(_QWORD *)(a1 + 96), 5);
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  if (!sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgPSM"))
  {
    v24 = 0;
    *(_QWORD *)buf = 0;
    v22 = 0;
    v23 = 0;
    v21 = 0;
    if (!sub_100023B7C(v26, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBL2CAPChannelInMTU")
      && (v27 & 0x8000000000000000) == 0
      && v27 < 0x10000)
    {
      v19 = sub_1000419F4();
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_10055752C;
      v20[3] = &unk_100926A88;
      v20[4] = a1;
      v20[5] = v27;
      v20[6] = v28;
      v20[7] = *(_QWORD *)buf;
      v20[8] = v24;
      v20[9] = v23;
      v20[10] = v22;
      v20[11] = v21;
      sub_100023D84(v19, v20);
    }
  }
}

void sub_10053EFF0(uint64_t a1, void *a2)
{
  NSObject *v4;
  xpc_object_t value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[6];
  uint8_t buf[8];
  uint64_t v15;

  v15 = 0;
  v4 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Unpublish L2CAP channel request", buf, 2u);
  }
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  if (!sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgPSM")
    && (v15 & 0x8000000000000000) == 0
    && v15 < 0x10000)
  {
    v12 = sub_1000419F4();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1005575C8;
    v13[3] = &unk_100918090;
    v13[4] = a1;
    v13[5] = v15;
    sub_100023D84(v12, v13);
  }
}

void sub_10053F0F0(uint64_t a1, void *a2)
{
  NSObject *v4;
  xpc_object_t value;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint8_t buf[4];
  void *v13;

  v4 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Override local LE Address", buf, 2u);
  }
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  v6 = sub_1000239F0(value, "kCBMsgArgAddressString");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Address is %@", buf, 0xCu);
  }
  if (objc_msgSend(v7, "length") && *(_DWORD *)(a1 + 80) == 2)
  {
    v9 = sub_1000419F4();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100557620;
    v10[3] = &unk_1009172A0;
    v11 = v7;
    sub_100023D84(v9, v10);

  }
}

void sub_10053F268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_10053F290(uint64_t a1, void *a2)
{
  xpc_object_t value;
  xpc_object_t array;
  void *v5;
  _QWORD applier[5];
  _QWORD v7[3];
  char v8;

  if (*(int *)(a1 + 80) <= 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070091C();
  }
  else if ((_os_feature_enabled_impl("FindMy", "BA_Power_Off") & 1) != 0)
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    array = xpc_dictionary_get_array(value, "kCBMsgArgData");
    if (array)
    {
      v5 = array;
      if (xpc_get_type(array) == (xpc_type_t)&_xpc_type_array)
      {
        v7[0] = 0;
        v7[1] = v7;
        v7[2] = 0x2020000000;
        v8 = 0;
        applier[0] = _NSConcreteStackBlock;
        applier[1] = 3221225472;
        applier[2] = sub_100557678;
        applier[3] = &unk_1009292B8;
        applier[4] = v7;
        xpc_array_apply(v5, applier);
        if (qword_100978140 != -1)
          dispatch_once(&qword_100978140, &stru_1009378C0);
        sub_1002603F4((uint64_t)off_100978138, 0xFFu, 0, -1);
        _Block_object_dispose(v7, 8);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100700948();
  }
}

void sub_10053F404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10053F41C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  id v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD v18[5];
  _BYTE v19[21];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1002C3A5C(value, "kCBMsgArgAddressBytes");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = objc_msgSend(v5, "copy");

  v7 = (uint64_t *)(a1 + 96);
  if (objc_msgSend(&off_100961248, "containsObject:", *(_QWORD *)(a1 + 96)))
  {
    if (objc_msgSend(v6, "length") == (id)6 || objc_msgSend(v6, "length") == (id)7)
    {
      *(_DWORD *)&v19[3] = 0;
      *(_DWORD *)v19 = 0;
      if (objc_msgSend(v6, "length") == (id)6)
      {
        v8 = 0;
        v19[0] = 1;
      }
      else
      {
        v8 = 1;
        objc_msgSend(v6, "getBytes:length:", v19, 1);
      }
      objc_msgSend(v6, "getBytes:range:", &v19[1], v8, 6);
      if (*(_DWORD *)(a1 + 80) == 2)
      {
        v9 = v19[1];
        v10 = v19[2];
        v11 = v19[3];
        v12 = v19[4];
        v13 = v19[5];
        v14 = v19[6];
        v15 = v19[0];
        v16 = sub_1000419F4();
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        v18[2] = sub_100557990;
        v18[3] = &unk_100917378;
        v18[4] = (v9 << 40) | (v10 << 32) | (v11 << 24) | (v12 << 16) | (v13 << 8) | v14 | (v15 << 48);
        sub_100023D84(v16, v18);
      }
    }
    else
    {
      v17 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700974(v7, (uint64_t)v19, (uint64_t)objc_msgSend(v6, "length"), v17);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_1007009C4();
  }

}

void sub_10053F630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10053F660(uint64_t a1, xpc_object_t original)
{
  void *v3;
  _QWORD v4[6];
  _BYTE v5[24];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  xpc_object_t reply;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  reply = 0;
  reply = xpc_dictionary_create_reply(original);
  if (*(int *)(a1 + 80) >= 1
    && (objc_msgSend(&off_100961260, "containsObject:", *(_QWORD *)(a1 + 96)) & 1) != 0)
  {
    if (qword_100977C30 != -1)
      dispatch_once(&qword_100977C30, &stru_1009378A0);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1005579E0;
    v4[3] = &unk_100927498;
    v4[4] = &v6;
    v4[5] = a1;
    sub_1005FEB80((uint64_t)off_100977C28, v4);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_1000340DC(*(_QWORD *)(a1 + 128), (uint64_t)v5);
      sub_100700A24();
    }
    v3 = (void *)v7[3];
    if (v3)
    {
      xpc_dictionary_set_int64(v3, "kCBMsgArgResult", 13);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), (xpc_object_t)v7[3]);
      xpc_release((xpc_object_t)v7[3]);
    }
  }
  _Block_object_dispose(&v6, 8);
}

void sub_10053F7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10053F80C(uint64_t a1, xpc_object_t original)
{
  void *v3;
  _QWORD v4[6];
  _BYTE v5[24];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  xpc_object_t reply;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  reply = 0;
  reply = xpc_dictionary_create_reply(original);
  if (*(int *)(a1 + 80) >= 1
    && (objc_msgSend(&off_100961278, "containsObject:", *(_QWORD *)(a1 + 96)) & 1) != 0)
  {
    if (qword_100977C30 != -1)
      dispatch_once(&qword_100977C30, &stru_1009378A0);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100557A4C;
    v4[3] = &unk_100937188;
    v4[4] = &v6;
    v4[5] = a1;
    sub_1005FEC74((uint64_t)off_100977C28, v4);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_1000340DC(*(_QWORD *)(a1 + 128), (uint64_t)v5);
      sub_100700A70();
    }
    v3 = (void *)v7[3];
    if (v3)
    {
      xpc_dictionary_set_int64(v3, "kCBMsgArgResult", 13);
      xpc_dictionary_set_int64((xpc_object_t)v7[3], "kCBMsgArgTimeoutInMS", 0);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), (xpc_object_t)v7[3]);
      xpc_release((xpc_object_t)v7[3]);
    }
  }
  _Block_object_dispose(&v6, 8);
}

void sub_10053F9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10053F9D0(uint64_t a1, void *a2)
{
  xpc_object_t value;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  xpc_object_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  xpc_object_t reply;
  void *v19;
  void *v20;
  xpc_object_t xarray;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  void *v27;
  _BYTE v28[128];

  xarray = xpc_array_create(0, 0);
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  v5 = sub_1000708B8(value, "kCBMsgArgUUIDs");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    sub_10006B174((uint64_t)off_1009778C0);
    v20 = v6;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v7 = v6;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v23;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v23 != v9)
            objc_enumerationMutation(v7);
          v11 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v10);
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_1009377A0);
          if (!sub_100656AA4((uint64_t)off_1009778C0, v11))
          {
            v13 = qword_100999860;
            if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
              goto LABEL_26;
            *(_DWORD *)buf = 138412290;
            v27 = v11;
            v14 = v13;
            v15 = "Device %@ does not exist";
            goto LABEL_25;
          }
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_100937800);
          if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v11) & 1) == 0)
          {
            v16 = qword_100999860;
            if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
              goto LABEL_26;
            *(_DWORD *)buf = 138412290;
            v27 = v11;
            v14 = v16;
            v15 = "Cannot access device %@";
            goto LABEL_25;
          }
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_1009377A0);
          if ((sub_10000AEE4((uint64_t)off_1009778C0, v11, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
          {
            v12 = sub_100013ABC(v11, *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));
            xpc_array_append_value(xarray, v12);
            xpc_release(v12);
            goto LABEL_26;
          }
          v17 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v27 = v11;
            v14 = v17;
            v15 = "Session not allowed for device %@";
LABEL_25:
            _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v15, buf, 0xCu);
          }
LABEL_26:
          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
      }
      while (v8);
    }

    v6 = v20;
  }
  reply = xpc_dictionary_create_reply(a2);
  v19 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", xarray);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v19);
    xpc_release(v19);
  }
  xpc_release(xarray);

}

void sub_10053FD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10053FD70(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  _BOOL4 v7;
  void *v8;
  _BOOL4 v9;
  int64_t v10;
  xpc_object_t reply;
  void *v12;
  xpc_object_t v13;
  unsigned __int16 *v14;
  unsigned __int8 v15[16];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  v7 = sub_100656AA4((uint64_t)off_1009778C0, v6);
  if (!v7 && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_100700B48();
  if (*(int *)(a1 + 80) >= 1 && *(_BYTE *)(a1 + 182))
  {
    v14 = 0;
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100937820);
    v8 = off_1009778A0;
    sub_100030BCC(v15, v6);
    sub_100623C54((uint64_t)v8, v15, &v14);
    if (v14)
      v9 = v7;
    else
      v9 = 0;
    if (v9)
    {
      v10 = *v14;
      reply = xpc_dictionary_create_reply(xdict);
      v12 = reply;
      if (reply)
      {
        xpc_dictionary_set_int64(reply, "kCBMsgArgConnectionHandle", v10);
        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v12);
        xpc_release(v12);
        goto LABEL_22;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_100700AE8();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100700ABC();
  }
  v13 = xpc_dictionary_create_reply(xdict);
  if (v13)
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v13);
    xpc_release(v13);
  }
LABEL_22:

}

void sub_10053FF80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10053FFA4(uint64_t a1, void *a2)
{
  xpc_object_t v4;
  xpc_object_t value;
  id v6;
  void *v7;
  NSMutableArray *v8;
  uint64_t v9;
  id v10;
  NSMutableArray *v11;
  _QWORD v12[4];
  id v13;
  NSMutableArray *v14;
  uint64_t v15;
  xpc_object_t v16;
  void *v17;

  v4 = xpc_array_create(0, 0);
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  v6 = sub_100023E20(value, "kCBMsgArgTags");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = objc_opt_new(NSMutableArray);
  v9 = sub_1000419F4();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10055C1F0;
  v12[3] = &unk_100937508;
  v15 = a1;
  v10 = v7;
  v13 = v10;
  v11 = v8;
  v14 = v11;
  v16 = v4;
  v17 = a2;
  sub_100023D84(v9, v12);

}

void sub_1005400A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1005400D4(uint64_t a1, void *a2)
{
  xpc_object_t v4;
  xpc_object_t value;
  id v6;
  void *v7;
  NSMutableArray *v8;
  uint64_t v9;
  NSMutableArray *v10;
  id v11;
  _QWORD v12[4];
  NSMutableArray *v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  xpc_object_t v17;
  _QWORD v18[3];
  xpc_object_t reply;

  v4 = xpc_array_create(0, 0);
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2020000000;
  reply = 0;
  reply = xpc_dictionary_create_reply(a2);
  v6 = sub_100023E20(value, "kCBMsgArgCustomProperties");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = objc_opt_new(NSMutableArray);
  v9 = sub_1000419F4();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10055C61C;
  v12[3] = &unk_100937530;
  v16 = a1;
  v10 = v8;
  v13 = v10;
  v11 = v7;
  v17 = v4;
  v14 = v11;
  v15 = v18;
  sub_100023D84(v9, v12);

  _Block_object_dispose(v18, 8);
}

void sub_100540204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10054024C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  xpc_object_t reply;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  xpc_object_t v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  void *v23;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      v7 = *(_DWORD *)(a1 + 80);
      if (v7 > 1 || v7 == 1 && sub_10001CB50(a1))
      {
        v8 = sub_1000419F4();
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_10055C96C;
        v14[3] = &unk_1009183A0;
        v16 = a1;
        v15 = v6;
        v17 = xdict;
        sub_100023D84(v8, v14);

      }
      else
      {
        v11 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "No privileges for running retrievePairingInfoForPeripheral without proper entitlement", buf, 2u);
        }
      }
    }
    else
    {
      v9 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v12 = *(_QWORD *)(a1 + 96);
        v13 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412802;
        v19 = v12;
        v20 = 2112;
        v21 = v13;
        v22 = 2112;
        v23 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100700BA8();
  }
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
  }

}

void sub_10054049C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1005404C8(uint64_t a1, void *a2)
{
  xpc_object_t v4;
  xpc_object_t value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  void **v14;
  void *v15;
  __int128 *v16;
  __int128 v17;
  __int128 *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 *v25;
  __int128 *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  xpc_object_t reply;
  void *v31;
  _QWORD v32[6];
  void *v33;
  void *v34;
  uint64_t v35;
  xpc_object_t v36;
  void *__p[2];
  char v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  __int128 *v44;
  unint64_t v45;

  v4 = xpc_array_create(0, 0);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v42 = 0;
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  if (!sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgUUIDs"))
  {
    v39 = 0;
    v40 = 0;
    v41 = 0;
    sub_1000B61B8((char *)&v39, v43, v44, 0xCCCCCCCCCCCCCCCDLL * (((char *)v44 - (char *)v43) >> 2));
    v44 = v43;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
      sub_100700BD4();
    v12 = v39;
    v13 = v40;
    if (v39 != v40)
    {
      do
      {
        sub_10006887C((uint64_t)v12, __p);
        if (v38 >= 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
        if (v38 < 0)
          operator delete(__p[0]);
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_100937800);
        if (sub_1002F2520((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v15))
        {
          v16 = v44;
          if ((unint64_t)v44 >= v45)
          {
            v19 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v44 - (char *)v43) >> 2);
            v20 = v19 + 1;
            if (v19 + 1 > 0xCCCCCCCCCCCCCCCLL)
              abort();
            if (0x999999999999999ALL * ((uint64_t)(v45 - (_QWORD)v43) >> 2) > v20)
              v20 = 0x999999999999999ALL * ((uint64_t)(v45 - (_QWORD)v43) >> 2);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v45 - (_QWORD)v43) >> 2) >= 0x666666666666666)
              v21 = 0xCCCCCCCCCCCCCCCLL;
            else
              v21 = v20;
            if (v21)
              v22 = (char *)sub_1000B58EC((uint64_t)&v45, v21);
            else
              v22 = 0;
            v23 = &v22[20 * v19];
            v24 = *(_OWORD *)v12;
            *((_DWORD *)v23 + 4) = v12[4];
            *(_OWORD *)v23 = v24;
            v26 = v43;
            v25 = v44;
            v27 = v23;
            if (v44 != v43)
            {
              do
              {
                v28 = *(__int128 *)((char *)v25 - 20);
                *((_DWORD *)v27 - 1) = *((_DWORD *)v25 - 1);
                *(_OWORD *)(v27 - 20) = v28;
                v27 -= 20;
                v25 = (__int128 *)((char *)v25 - 20);
              }
              while (v25 != v26);
              v25 = v43;
            }
            v18 = (__int128 *)(v23 + 20);
            v43 = (__int128 *)v27;
            v44 = (__int128 *)(v23 + 20);
            v45 = (unint64_t)&v22[20 * v21];
            if (v25)
              operator delete(v25);
          }
          else
          {
            v17 = *(_OWORD *)v12;
            *((_DWORD *)v44 + 4) = v12[4];
            *v16 = v17;
            v18 = (__int128 *)((char *)v16 + 20);
          }
          v44 = v18;
        }

        v12 += 5;
      }
      while (v12 != v13);
      v12 = v39;
    }
    if (v12)
    {
      v40 = v12;
      operator delete(v12);
    }
    v29 = sub_1000419F4();
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3321888768;
    v32[2] = sub_10055CEAC;
    v32[3] = &unk_100937550;
    v32[4] = a1;
    v32[5] = v42;
    v34 = 0;
    v35 = 0;
    v33 = 0;
    sub_1000B61B8((char *)&v33, v43, v44, 0xCCCCCCCCCCCCCCCDLL * (((char *)v44 - (char *)v43) >> 2));
    v36 = v4;
    sub_100023D84(v29, v32);
    if (v33)
    {
      v34 = v33;
      operator delete(v33);
    }
  }
  reply = xpc_dictionary_create_reply(a2);
  v31 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v31);
    xpc_release(v31);
  }
  xpc_release(v4);
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
}

void sub_100540890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v35;

  v35 = *(void **)(v33 - 112);
  if (v35)
  {
    *(_QWORD *)(v33 - 104) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

void sub_100540908(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint32_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  uint32_t v29;
  uint64_t v30;
  id v31;
  xpc_object_t reply;
  xpc_object_t v33;
  id v34;
  id v35;
  uint64_t v36;
  void *i;
  xpc_object_t v38;
  void *v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  uint8_t v55[128];
  uint8_t buf[4];
  uint64_t v57;
  __int16 v58;
  void *v59;
  _BYTE v60[128];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_100023E20(value, "kCBMsgArgFindMySerialNumberString");
  v40 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  sub_10006B174((uint64_t)off_1009778C0);
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  if (*(int *)(a1 + 80) >= 1 && *(_BYTE *)(a1 + 104))
  {
    if (v40 && objc_msgSend(v40, "count"))
    {
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v5 = v40;
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v50, v60, 16);
      if (!v6)
        goto LABEL_57;
      v7 = *(_QWORD *)v51;
      while (1)
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v51 != v7)
            objc_enumerationMutation(v5);
          v9 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)v8);
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_1009377A0);
          v10 = sub_100660768((uint64_t)off_1009778C0, v9);
          v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
          if (!v11)
          {
            v12 = qword_100999860;
            if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
              goto LABEL_29;
            *(_DWORD *)buf = 141558275;
            v57 = 1752392040;
            v58 = 2113;
            v59 = v9;
            v13 = v12;
            v14 = "No device with SN %{private, mask.hash}@";
LABEL_26:
            v17 = 22;
LABEL_27:
            _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v14, buf, v17);
            goto LABEL_29;
          }
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_1009377A0);
          if ((sub_10000AEE4((uint64_t)off_1009778C0, v11, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
          {
            v15 = qword_100999860;
            if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
              goto LABEL_29;
            v16 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)buf = 138543618;
            v57 = v16;
            v58 = 2114;
            v59 = v11;
            v13 = v15;
            v14 = "Bundle %{public}@ is not allowed to access device %{public}@";
            goto LABEL_26;
          }
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_100937800);
          if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v11) & 1) != 0)
          {
            objc_msgSend(v41, "addObject:", v11);
            goto LABEL_29;
          }
          v18 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v57 = (uint64_t)v11;
            v13 = v18;
            v14 = "Session cannot access device %{public}@";
            v17 = 12;
            goto LABEL_27;
          }
LABEL_29:

          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v19 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v50, v60, 16);
        v6 = v19;
        if (!v19)
        {
LABEL_57:

          goto LABEL_58;
        }
      }
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v20 = sub_100651630((uint64_t)off_1009778C0);
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v5 = (id)objc_claimAutoreleasedReturnValue(v20);
    v21 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v46, v55, 16);
    if (!v21)
      goto LABEL_56;
    v22 = *(_QWORD *)v47;
LABEL_38:
    v23 = 0;
    while (1)
    {
      if (*(_QWORD *)v47 != v22)
        objc_enumerationMutation(v5);
      v24 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * v23);
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      if ((sub_10000AEE4((uint64_t)off_1009778C0, v24, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
      {
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_100937800);
        if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v24) & 1) != 0)
        {
          objc_msgSend(v41, "addObject:", v24);
        }
        else
        {
          v30 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v57 = (uint64_t)v24;
            v27 = v30;
            v28 = "Session cannot access device %{public}@";
            v29 = 12;
            goto LABEL_54;
          }
        }
      }
      else
      {
        v25 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          v26 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)buf = 138543618;
          v57 = v26;
          v58 = 2114;
          v59 = v24;
          v27 = v25;
          v28 = "Bundle %{public}@ is not allowed to access device %{public}@";
          v29 = 22;
LABEL_54:
          _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, v28, buf, v29);
        }
      }
      if (v21 == (id)++v23)
      {
        v31 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v46, v55, 16);
        v21 = v31;
        if (!v31)
        {
LABEL_56:

          goto LABEL_57;
        }
        goto LABEL_38;
      }
    }
  }
LABEL_58:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v33 = xpc_array_create(0, 0);
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v34 = v41;
    v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v42, v54, 16);
    if (v35)
    {
      v36 = *(_QWORD *)v43;
      do
      {
        for (i = 0; i != v35; i = (char *)i + 1)
        {
          if (*(_QWORD *)v43 != v36)
            objc_enumerationMutation(v34);
          v38 = sub_100013ABC(*(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)i), *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));
          xpc_array_append_value(v33, v38);
          xpc_release(v38);
        }
        v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v42, v54, 16);
      }
      while (v35);
    }

    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v33);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
    xpc_release(v33);
  }

}

void sub_100540FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_10054104C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint32_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  uint32_t v29;
  uint64_t v30;
  id v31;
  xpc_object_t reply;
  xpc_object_t v33;
  id v34;
  id v35;
  uint64_t v36;
  void *i;
  xpc_object_t v38;
  void *v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  uint8_t v55[128];
  uint8_t buf[4];
  uint64_t v57;
  __int16 v58;
  void *v59;
  _BYTE v60[128];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1000708B8(value, "kCBMsgArgUUIDs");
  v40 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  sub_10006B174((uint64_t)off_1009778C0);
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  if (*(int *)(a1 + 80) >= 1 && *(_BYTE *)(a1 + 104))
  {
    if (v40 && objc_msgSend(v40, "count"))
    {
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v5 = v40;
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v50, v60, 16);
      if (!v6)
        goto LABEL_57;
      v7 = *(_QWORD *)v51;
      while (1)
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v51 != v7)
            objc_enumerationMutation(v5);
          v9 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)v8);
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_1009377A0);
          v10 = sub_100652E74((uint64_t)off_1009778C0, v9);
          v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
          if (!v11)
          {
            v12 = qword_100999860;
            if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
              goto LABEL_29;
            *(_DWORD *)buf = 141558275;
            v57 = 1752392040;
            v58 = 2113;
            v59 = v9;
            v13 = v12;
            v14 = "No device with FindMyID %{private, mask.hash}@";
LABEL_26:
            v17 = 22;
LABEL_27:
            _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v14, buf, v17);
            goto LABEL_29;
          }
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_1009377A0);
          if ((sub_10000AEE4((uint64_t)off_1009778C0, v11, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
          {
            v15 = qword_100999860;
            if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
              goto LABEL_29;
            v16 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)buf = 138543618;
            v57 = v16;
            v58 = 2114;
            v59 = v11;
            v13 = v15;
            v14 = "Bundle %{public}@ is not allowed to access device %{public}@";
            goto LABEL_26;
          }
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_100937800);
          if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v11) & 1) != 0)
          {
            objc_msgSend(v41, "addObject:", v11);
            goto LABEL_29;
          }
          v18 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v57 = (uint64_t)v11;
            v13 = v18;
            v14 = "Session cannot access device %{public}@";
            v17 = 12;
            goto LABEL_27;
          }
LABEL_29:

          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v19 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v50, v60, 16);
        v6 = v19;
        if (!v19)
        {
LABEL_57:

          goto LABEL_58;
        }
      }
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v20 = sub_100651630((uint64_t)off_1009778C0);
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v5 = (id)objc_claimAutoreleasedReturnValue(v20);
    v21 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v46, v55, 16);
    if (!v21)
      goto LABEL_56;
    v22 = *(_QWORD *)v47;
LABEL_38:
    v23 = 0;
    while (1)
    {
      if (*(_QWORD *)v47 != v22)
        objc_enumerationMutation(v5);
      v24 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * v23);
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      if ((sub_10000AEE4((uint64_t)off_1009778C0, v24, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
      {
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_100937800);
        if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v24) & 1) != 0)
        {
          objc_msgSend(v41, "addObject:", v24);
        }
        else
        {
          v30 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v57 = (uint64_t)v24;
            v27 = v30;
            v28 = "Session cannot access device %@";
            v29 = 12;
            goto LABEL_54;
          }
        }
      }
      else
      {
        v25 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          v26 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)buf = 138543618;
          v57 = v26;
          v58 = 2114;
          v59 = v24;
          v27 = v25;
          v28 = "Bundle %{public}@ is not allowed to access device %{public}@";
          v29 = 22;
LABEL_54:
          _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, v28, buf, v29);
        }
      }
      if (v21 == (id)++v23)
      {
        v31 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v46, v55, 16);
        v21 = v31;
        if (!v31)
        {
LABEL_56:

          goto LABEL_57;
        }
        goto LABEL_38;
      }
    }
  }
LABEL_58:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v33 = xpc_array_create(0, 0);
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v34 = v41;
    v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v42, v54, 16);
    if (v35)
    {
      v36 = *(_QWORD *)v43;
      do
      {
        for (i = 0; i != v35; i = (char *)i + 1)
        {
          if (*(_QWORD *)v43 != v36)
            objc_enumerationMutation(v34);
          v38 = sub_100013ABC(*(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)i), *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));
          xpc_array_append_value(v33, v38);
          xpc_release(v38);
        }
        v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v42, v54, 16);
      }
      while (v35);
    }

    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v33);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), reply);
    xpc_release(reply);
    xpc_release(v33);
  }

}

void sub_100541700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_100541790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10055D260;
  v5[3] = &unk_100918090;
  v5[4] = a1;
  v5[5] = a2;
  sub_100023D84(v4, v5);
}

void sub_1005417F4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  xpc_object_t reply;
  void *v22;
  _QWORD v23[4];
  id v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;

  v32 = 0;
  v33 = &v32;
  v34 = 0x2020000000;
  v35 = 0;
  v31 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions"))
  {
    sub_1004B1368(a1, 220, xdict, *((_DWORD *)v33 + 6));
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100700C6C();
  }
  v30 = 2;
  v29 = 1;
  v19 = sub_100023B7C(v31, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBLEMRCAction");
  *((_DWORD *)v33 + 6) = v19;
  if (!v19
    || (sub_1004B1368(a1, 220, xdict, v19), !os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR)))
  {
    if (!v6)
      goto LABEL_8;
    goto LABEL_7;
  }
  sub_100700C0C();
  if (v6)
  {
LABEL_7:
    v20 = sub_1000419F4();
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_10055D3C8;
    v23[3] = &unk_100937588;
    v25 = &v32;
    v26 = a1;
    v24 = v6;
    v27 = v30;
    v28 = v29;
    sub_100023D84(v20, v23);

  }
LABEL_8:
  reply = xpc_dictionary_create_reply(xdict);
  v22 = reply;
  if (reply)
  {
    xpc_dictionary_set_int64(reply, "kCBMsgArgResult", *((int *)v33 + 6));
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v22);
    xpc_release(v22);
  }

  _Block_object_dispose(&v32, 8);
}

void sub_100541A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  uint64_t v22;

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100541A74(uint64_t a1, void *a2)
{
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t reply;
  void *v7;
  _QWORD v8[6];

  v4 = xpc_array_create(0, 0);
  v5 = sub_1000419F4();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10055D440;
  v8[3] = &unk_100918090;
  v8[4] = a1;
  v8[5] = v4;
  sub_100023D84(v5, v8);
  reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    v7 = reply;
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v7);
    xpc_release(v7);
  }
  xpc_release(v4);
}

void sub_100541B2C(uint64_t a1, xpc_object_t original)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[7];
  uint64_t v19;
  void *v20;
  _QWORD v21[3];
  xpc_object_t reply;

  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  reply = 0;
  reply = xpc_dictionary_create_reply(original);
  v20 = 0;
  value = xpc_dictionary_get_value(original, "kCBMsgArgs");
  if (!sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions"))
  {
    v19 = 0;
    sub_100023B7C(v20, 0, v11, v12, v13, v14, v15, v16, (uint64_t)"kCBMsgArgLastMinutes");
    v17 = sub_1000419F4();
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10055D604;
    v18[3] = &unk_100918690;
    v18[5] = a1;
    v18[6] = v19;
    v18[4] = v21;
    sub_100041A34(v17, v18);
  }
  _Block_object_dispose(v21, 8);
}

void sub_100541C34(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_100541C54(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  int *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  int v34;
  id v35;
  void *v36;
  void *v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  unsigned int v44;
  NSObject *v45;
  _BYTE *v46;
  id v47;
  void *v48;
  _BOOL4 v49;
  id v50;
  void *v51;
  uint64_t v52;
  NSObject *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  _BYTE *v58;
  uint64_t v59;
  id v60;
  __CFString *v61;
  id v62;
  __CFString *v63;
  NSObject *v64;
  const __CFString *v65;
  const __CFString *v66;
  uint64_t v67;
  NSObject *v68;
  const __CFString *v69;
  const __CFString *v70;
  id v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  id v78;
  void *v79;
  NSObject *v80;
  id v81;
  void *v82;
  void *v83;
  NSObject *v84;
  const char *v85;
  id v86;
  void *v87;
  uint64_t v88;
  id v89;
  void *v90;
  id v91;
  NSObject *v92;
  uint64_t v93;
  id v94;
  void *v95;
  NSObject *v96;
  void *v97;
  id v98;
  id v99;
  NSObject *v100;
  uint64_t v101;
  id v102;
  void *v103;
  NSObject *v104;
  unint64_t v105;
  void *v106;
  int v107;
  char v108;
  int v109;
  int *v110;
  _QWORD v111[4];
  id v112;
  id v113;
  uint64_t v114;
  void *__p[2];
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  __int128 v150;
  int v151;
  _BYTE buf[24];
  _BYTE v153[10];
  uint64_t v154;
  __int16 v155;
  uint64_t v156;
  _BYTE v157[12];
  __int16 v158;
  void *v159;
  char v160;

  v149 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_100065478();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 632))(v7, *(_QWORD *)(a1 + 96), 1);
  if (sub_100023B7C(value, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgOptions"))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100700E88();
    v14 = 3;
    goto LABEL_33;
  }
  if (!v6)
    goto LABEL_201;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  if (!sub_100656AA4((uint64_t)off_1009778C0, v6))
  {
LABEL_201:
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100700CF8();
    v14 = 8;
    goto LABEL_33;
  }
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100937800);
  if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v6) & 1) != 0)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
    {
      v147 = 0;
      v148 = 0;
      v146 = 0;
      v145 = 0;
      v144 = 0;
      v143 = 0;
      v142 = 0;
      v141 = 0;
      v140 = 0;
      v139 = 0;
      v138 = 0;
      v137 = 0;
      v136 = 0;
      v135 = 0;
      v134 = 0;
      v133 = 0;
      v132 = 0;
      v131 = 0;
      v130 = 0;
      v129 = 0;
      v128 = 0;
      v127 = 0;
      v126 = 0;
      v125 = 0;
      v124 = 0;
      v123 = 0;
      v122 = 0;
      v121 = 0;
      v120 = 0;
      v119 = 0;
      v118 = 0;
      v117 = 0;
      v109 = sub_100023B7C(v149, 0, v15, v16, v17, v18, v19, v20, (uint64_t)"kCBConnectOptionNotifyOnConnection");
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[ConnectOptions alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:](ConnectOptions, "alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:", 0, 0, 0));
      objc_msgSend(v21, "setWantsObjectDiscoveryData:", 0);
      objc_msgSend(v21, "setDisableLeGATT:", 0);
      objc_msgSend(v21, "setAncsRequired:", 0);
      objc_msgSend(v21, "setResetDisconnectionHistory:", 0);
      v22 = sub_100023E20(v149, "kCBManagerListOfClients");
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      objc_msgSend(v21, "setConnectingClients:", v23);

      objc_msgSend(v21, "setRequiresLowLatency:", 0);
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "connectingClients"));
      LODWORD(v23) = v24 == 0;

      if ((_DWORD)v23)
      {
        v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", *(_QWORD *)(a1 + 96), 0, sub_100023CBC, &v148, "kCBConnectOptionNotifyOnDisconnection", sub_100023CBC, &v147, "kCBConnectOptionNotifyOnNotification", sub_100023CBC, &v146, "kCBConnectOptionStartDelay", sub_100023CBC, &v145, "kCBConnectOptionReceiveObjectDiscoveryData", sub_100023CBC, &v144,
                          "kCBConnectOptionEnableTransportBridging",
                          sub_100023CBC,
                          &v143,
                          "kCBConnectOptionsDisableLeGATT",
                          sub_100023CBC,
                          &v142,
                          "kCBConnectOptionRequiresANCS",
                          sub_100023CBC,
                          &v141,
                          "kCBConnectOptionHideFromBTSettings",
                          sub_100023CBC,
                          &v140,
                          "kCBConnectOptionInitPHYs",
                          sub_100023CBC,
                          &v139,
                          "kCBConnectOptionPHYOptions",
                          sub_100023CBC,
                          &v138,
                          "kCBConnectOptionFirstApproachEnable",
                          sub_100023CBC,
                          &v137,
                          "kCBConnectOptionGetControllerBTClock",
                          sub_100023CBC,
                          &v136,
                          "kCBOptionUsecase",
                          sub_100023CBC,
                          &v135,
                          "kCBConnectOptionMaxAllowedConnectionDelay",
                          sub_100023CBC,
                          &v134,
                          "kCBConnectOptionMinRSSILevelForConnect",
                          sub_100023CBC,
                          &v133,
                          "kCBConnectOptionConnectionCompleteOnPoll",
                          sub_100023CBC,
                          &v132,
                          "kCBConnectOptionEnableScanCore",
                          sub_100023CBC,
                          &v131,
                          "kCBConnectOptionLatencyCritical",
                          sub_100023CBC,
                          &v130,
                          "kCBConnectOptionCtkdTransport",
                          sub_100023CBC,
                          &v129));
        objc_msgSend(v21, "setConnectingClients:", v25);

      }
      v26 = *(unsigned __int8 *)(a1 + 188);
      if (!*(_BYTE *)(a1 + 188))
      {
        v27 = (int *)(a1 + 80);
        if (*(int *)(a1 + 80) < 1)
          goto LABEL_35;
      }
      v28 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v133;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v26;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "configuration for minRSSILevelForConnection to:%lld  fAllowScreenOffScanning=%d", buf, 0x12u);
      }
      objc_msgSend(v21, "setMinRSSILevelForConnection:", v133);
      v27 = (int *)(a1 + 80);
      if (*(int *)(a1 + 80) >= 2)
      {
        objc_msgSend(v21, "setInitPHYs:", v139);
        objc_msgSend(v21, "setPHYOptions:", v138);
        objc_msgSend(v21, "setMinRSSILevelForConnection:", v133);
        objc_msgSend(v21, "setWaitForConnectionPoll:", v132 != 0);
        objc_msgSend(v21, "setEnableScanCore:", v131 != 0);
        objc_msgSend(v21, "setCtkdChosenTransport:", v129);
        objc_msgSend(v21, "setTxPowerConnectInd:", v119);
        objc_msgSend(v21, "setTxPowerAuxConnectReq:", v118);
        objc_msgSend(v21, "setMrcEnable:", v117);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_1009377A0);
        sub_10066289C((uint64_t)off_1009778C0, v6, v124, v123, v122, v121, v120, v119, v118, v117);
      }
      else
      {
LABEL_35:
        objc_msgSend(v21, "setInitPHYs:", 1);
        objc_msgSend(v21, "setPHYOptions:", 0);
        objc_msgSend(v21, "setEnableScanCore:", 0);
      }
      if (qword_100993348 != -1)
        dispatch_once(&qword_100993348, &stru_1009371A8);
      if (byte_100993346)
      {
        v30 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v6;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Warning: Override enableAutoReconnect for device %{public}@", buf, 0xCu);
        }
        objc_msgSend(v21, "setEnableAutoReconnect:", 1);
      }
      if (byte_100993345 == 1)
      {
        v31 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v6;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Warning: Setting override connection parameters to device %{public}@", buf, 0xCu);
        }
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_1009377A0);
        sub_10066289C((uint64_t)off_1009778C0, v6, byte_100993340, byte_100993341, 0, 0, 0, byte_100993342, word_100993343, SHIBYTE(word_100993343));
      }
      if (!objc_msgSend(v21, "initPHYs"))
        objc_msgSend(v21, "setInitPHYs:", (unint64_t)objc_msgSend(v21, "initPHYs") | 1);
      if (v137 == 1)
      {
        v32 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Enable coded PHY from first approach", buf, 2u);
        }
        objc_msgSend(v21, "setInitPHYs:", (unint64_t)objc_msgSend(v21, "initPHYs") | 4);
      }
      v110 = v27;
      if (v136 == 1)
      {
        v33 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          v34 = *v27;
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v34;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "configuration for enableControllerBTClockUpdates for AccessLevel:%d ", buf, 8u);
        }
        if (*v27 < 1)
          goto LABEL_62;
        objc_msgSend(v21, "setEnableControllerBTClockUpdates:", 1);
      }
      if (*v27 >= 1)
      {
        objc_msgSend(v21, "setOpportunistic:", v127 != 0);
        objc_msgSend(v21, "setResetDisconnectionHistory:", v128 != 0);
        v35 = sub_1002C3AD4(v149, "kCBConnectOptionConnectionScanDutyCycle");
        v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
        v37 = v36;
        if (v36)
          v38 = objc_msgSend(v36, "intValue");
        else
          v38 = 0;
        v40 = sub_1002C3AD4(v149, "kCBConnectOptionScreenOffConnectionScanDutyCycle");
        v41 = (void *)objc_claimAutoreleasedReturnValue(v40);

        if (v41)
          v39 = objc_msgSend(v41, "intValue");
        else
          v39 = 3;
        v42 = sub_1002C3AD4(v149, "kCBConnectOptionDoNoDisconnectOnEncryptionFailure");
        v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
        v44 = objc_msgSend(v43, "BOOLValue");

        if (v44)
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_1009377A0);
          sub_10065FFF4((uint64_t)off_1009778C0, v6, 1);
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_100937820);
          sub_100641128((uint64_t)off_1009778A0, v6);
        }

        goto LABEL_76;
      }
LABEL_62:
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      sub_10065FFF4((uint64_t)off_1009778C0, v6, 0);
      v38 = 0;
      v39 = 3;
LABEL_76:
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      sub_10065FD4C((uint64_t)off_1009778C0, v6, v38);
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      sub_10065FE5C((uint64_t)off_1009778C0, v6, v39);
      v45 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
      {
        sub_1000340DC(*(_QWORD *)(a1 + 128), (uint64_t)v157);
        v46 = v160 >= 0 ? v157 : *(_BYTE **)v157;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v46;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v38;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v39;
        *(_WORD *)v153 = 2112;
        *(_QWORD *)&v153[2] = v6;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "Session \"%s\" setting up connection scan level of %d (screenOff %d) for device %@", buf, 0x22u);
        if (v160 < 0)
          operator delete(*(void **)v157);
      }
      if (*v110 < 1)
      {
        v54 = 0;
        goto LABEL_166;
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      v47 = sub_1000067B8((uint64_t)off_1009778C0, v6);
      v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
      v49 = v48 == 0;

      if (v49)
      {
        v50 = sub_1002C3A5C(v149, "kCBConnectOptionsTemporaryLTK");
        v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_1009377A0);
        v52 = sub_1000589DC((uint64_t)off_1009778C0, v6, 0);
        if (objc_msgSend(v51, "length"))
        {
          v53 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v6;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "preparing a temporary LTK for device %@", buf, 0xCu);
          }
          if (v52)
          {
            objc_msgSend(v21, "setTemporaryLTK:", v51);
          }
          else
          {
            if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
              sub_100700DC8();
            v109 = 8;
          }
        }

      }
      if (v140)
      {
        v57 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(*(_QWORD *)(a1 + 128), (uint64_t)buf);
          if (buf[23] >= 0)
            v58 = buf;
          else
            v58 = *(_BYTE **)buf;
          *(_DWORD *)v157 = 136315394;
          *(_QWORD *)&v157[4] = v58;
          v158 = 2112;
          v159 = v6;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Session \"%s\" is asking to hide %@ from BT Settings menu", v157, 0x16u);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v59 = v140;
        }
        else
        {
          v59 = 1;
        }
        objc_msgSend(v21, "setHideFromBTSettings:", v59 != 0);
      }
      v60 = sub_1000239F0(v149, "kCBConnectOptionClientBundleID");
      v61 = (__CFString *)objc_claimAutoreleasedReturnValue(v60);
      v62 = sub_1000239F0(v149, "kCBConnectOptionClientProcessID");
      v63 = (__CFString *)objc_claimAutoreleasedReturnValue(v62);
      v64 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        v65 = CFSTR("NoClientBundleID");
        v66 = CFSTR("NoClientProcessID");
        if (v61)
          v65 = v61;
        if (v63)
          v66 = v63;
        *(_DWORD *)buf = 138413314;
        *(_QWORD *)&buf[4] = v65;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v66;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)v153 = v135;
        *(_WORD *)&v153[8] = 2048;
        v154 = v134;
        v155 = 2048;
        v156 = v130;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "clientBundleID %@ clientProcessID %@ connectionUseCase %lld maxAllowedConnectionDelay %lld isLatencyCritical %lld", buf, 0x34u);
      }
      objc_msgSend(v21, "setClientBundleID:", v61);
      objc_msgSend(v21, "setClientProcessID:", v63);
      objc_msgSend(v21, "setConnectionUseCase:", v135);
      objc_msgSend(v21, "setMaxAllowedConnectionDelay:", v134);
      if (v130 == 1)
      {
        if (*(_BYTE *)(a1 + 84))
        {
          v67 = sub_10003BE44();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v67 + 384))(v67))
          {
            v68 = qword_100999860;
            if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
            {
              v69 = CFSTR("NoClientBundleID");
              if (v61)
                v69 = v61;
              v70 = CFSTR("NoClientProcessID");
              if (v63)
                v70 = v63;
              *(_DWORD *)buf = 138412546;
              *(_QWORD *)&buf[4] = v69;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v70;
              _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "clientBundleID %@ clientProcessID %@ fLatencyCriticalRequest received", buf, 0x16u);
            }
            objc_msgSend(v21, "setIsLatencyCritical:", 1);
          }
        }
      }
      v71 = sub_10000FC60(v149, "kCBOptionUseCaseList");
      v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
      v73 = v72;
      if (v72)
      {
        if (objc_msgSend(v72, "count"))
        {
          v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v73));
          v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "allObjects"));

          v76 = objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "sortedArrayUsingSelector:", "compare:"));
          v77 = (void *)v76;
        }
        else
        {
          v77 = v73;
        }
      }
      else
      {
        v77 = 0;
      }
      objc_msgSend(v21, "setUseCaseList:", v77);
      if (v77 && objc_msgSend(v77, "count"))
      {
        v78 = sub_100558F38(v77);
        v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
        v80 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          v81 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "componentsJoinedByString:", CFSTR(",")));
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v81;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "connUseCaseList: %@", buf, 0xCu);

        }
        if (!objc_msgSend(v21, "connectionUseCase"))
        {
          v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v77, "firstObject"));
          v83 = v82;
          if (v82)
          {
            objc_msgSend(v21, "setConnectionUseCase:", objc_msgSend(v82, "longLongValue"));
            v84 = qword_100999860;
            if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
            {
              v85 = sub_100035930((int)objc_msgSend(v83, "longLongValue"));
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v85;
              _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "default useCase derived from useCaseList: %s", buf, 0xCu);
            }
          }

        }
      }

      if (*v110 < 1)
      {
LABEL_165:
        v54 = v77;
LABEL_166:
        if (v109)
        {
          sub_1004B1368(a1, 85, xdict, v109);
LABEL_184:

          goto LABEL_34;
        }
        if (!_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
          goto LABEL_179;
        if ((objc_msgSend(*(id *)(a1 + 96), "containsString:", CFSTR("com.apple.deviceaccessd")) & 1) != 0
          || *(_BYTE *)(a1 + 178)
          || *(_BYTE *)(a1 + 176)
          || *(_BYTE *)(a1 + 177)
          || *(_BYTE *)(a1 + 175))
        {
          goto LABEL_174;
        }
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_1009377A0);
        v106 = off_1009778C0;
        sub_100091AE8(__p, "DA_ASK_RETAIN_DEVICE");
        v107 = sub_10000628C((uint64_t)v106, v6, (uint64_t)__p);
        v108 = v107;
        if (v116 < 0)
        {
          operator delete(__p[0]);
          if ((v108 & 1) == 0)
            goto LABEL_179;
        }
        else if (!v107)
        {
LABEL_179:
          v101 = sub_1000419F4();
          v111[0] = _NSConcreteStackBlock;
          v111[1] = 3221225472;
          v111[2] = sub_100559954;
          v111[3] = &unk_100919500;
          v114 = a1;
          v112 = v6;
          v113 = v21;
          sub_100023D84(v101, v111);

          v87 = v112;
          v77 = v54;
LABEL_183:

          v54 = v77;
          goto LABEL_184;
        }
LABEL_174:
        v100 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v6;
          _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "Warning: Blocking HID service on device \"%@\"", buf, 0xCu);
        }
        memset(buf, 0, 20);
        v150 = xmmword_10073B4A4;
        v151 = 0;
        sub_100042F44((__n128 *)buf, (__n128 *)&v150);
        if (qword_1009778F8 != -1)
          dispatch_once(&qword_1009778F8, &stru_1009377E0);
        sub_1005E0618(qword_1009778F0, v6, buf);
        goto LABEL_179;
      }
      v86 = sub_1002C3A5C(v149, "kCBConnectOptionConnectionOptionTemporaryIRKValue");
      v87 = (void *)objc_claimAutoreleasedReturnValue(v86);
      if (!objc_msgSend(v87, "length"))
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
          sub_100700D24((uint64_t)v6);
        goto LABEL_164;
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      v88 = sub_1000589DC((uint64_t)off_1009778C0, v6, 0);
      v89 = sub_1002C3A5C(v149, "kCBConnectOptionConnectionOptionTemporaryIdentityAddress");
      v90 = (void *)objc_claimAutoreleasedReturnValue(v89);
      v91 = objc_msgSend(v90, "copy");

      *(_DWORD *)&v157[3] = 0;
      *(_DWORD *)v157 = 0;
      if (objc_msgSend(v91, "length") == (id)6 || objc_msgSend(v91, "length") == (id)7)
      {
        v92 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v6;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v91;
          _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "preparing a temporary IRK for device %@ for address %@", buf, 0x16u);
        }
        if (objc_msgSend(v91, "length") == (id)6)
        {
          v93 = 0;
          v157[0] = 1;
        }
        else
        {
          v93 = 1;
          objc_msgSend(v91, "getBytes:length:", v157, 1);
        }
        objc_msgSend(v91, "getBytes:range:", &v157[1], v93, 6);
        v94 = sub_100649588(v88);
        v95 = (void *)objc_claimAutoreleasedReturnValue(v94);
        objc_msgSend(v21, "setTemporaryIdentityAddress:", v95);

      }
      else
      {
        if (!v88)
        {
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            sub_100700DC8();
          v109 = 8;
LABEL_163:

LABEL_164:
          goto LABEL_165;
        }
        v102 = sub_100649588(v88);
        v103 = (void *)objc_claimAutoreleasedReturnValue(v102);
        objc_msgSend(v21, "setTemporaryIdentityAddress:", v103);

        v104 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)&buf[4] = v6;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v91;
          _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "preparing a temporary IRK from device UUID %@ for address %@", buf, 0x16u);
        }
        v157[0] = 0;
        v105 = sub_100225368(v88);
        *(_DWORD *)&v157[1] = v105;
        *(_WORD *)&v157[5] = WORD2(v105);
      }
      v96 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "setting up temporary IRK for device %@", buf, 0xCu);
      }
      objc_msgSend(v21, "setTemporaryIRK:", v87);
      v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "temporaryIRK"));
      v98 = objc_msgSend(v97, "length");

      if (v98 != (id)16)
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_100700D9C();

        goto LABEL_183;
      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v99 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "temporaryIRK")));
      *(_OWORD *)buf = *(_OWORD *)objc_msgSend(v99, "bytes");

      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_100937780);
      sub_1006A0F3C(qword_1009778B0, (uint64_t)v157, (uint64_t)buf, v6);
      goto LABEL_163;
    }
    v29 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      v55 = *(_QWORD *)(a1 + 96);
      v56 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v55;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v56;
      *(_WORD *)&buf[22] = 2112;
      *(_QWORD *)v153 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100700E28();
  }
  v14 = 17;
LABEL_33:
  sub_1004B1368(a1, 85, xdict, v14);
LABEL_34:

}

void sub_100543724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);

  _Unwind_Resume(a1);
}

void sub_1005438B8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  void *v39;

  v32 = 0;
  v33 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v31 = 0;
  if (!sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions"))
  {
    if (!v6)
      goto LABEL_31;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if (!sub_100656AA4((uint64_t)off_1009778C0, v6))
    {
LABEL_31:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700CF8();
      v13 = 8;
      goto LABEL_20;
    }
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v6) & 1) != 0)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
      {
        v20 = sub_100023B7C(v31, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBCancelConnectOptionForce");
        if (!v20)
        {
          v23 = sub_1000419F4();
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472;
          v26[2] = sub_10055AD64;
          v26[3] = &unk_100920878;
          v28 = a1;
          v27 = v6;
          v29 = v33;
          v30 = v32;
          sub_100023D84(v23, v26);

          goto LABEL_21;
        }
        v21 = 87;
        goto LABEL_27;
      }
      v22 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v24 = *(_QWORD *)(a1 + 96);
        v25 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412802;
        v35 = v24;
        v36 = 2112;
        v37 = v25;
        v38 = 2112;
        v39 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_100700E28();
    }
    v20 = 17;
    v21 = 85;
LABEL_27:
    sub_1004B1368(a1, v21, xdict, v20);
    goto LABEL_21;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_100700E88();
  v13 = 3;
LABEL_20:
  sub_1004B1368(a1, 85, xdict, v13);
LABEL_21:

}

void sub_100543C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_100543C28(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  xpc_object_t v18;
  NSObject *v19;
  NSObject *v20;
  xpc_object_t reply;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  void *v32;
  unsigned __int8 uu[8];
  uint64_t v34;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1000239F0(value, "kCBMsgArgAddressString");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if ((sub_100649C7C(v6) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    sub_10006B174((uint64_t)off_1009778C0);
    *(_QWORD *)uu = 0;
    v34 = 0;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    v7 = off_1009778C0;
    v8 = sub_100649C7C(v6);
    sub_10003F924((uint64_t)v7, v8, 0, 1u, 0, 0, uu);
    if (uuid_is_null(uu))
    {
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_100937780);
      v9 = qword_1009778B0;
      v10 = sub_100649C7C(v6);
      v11 = sub_1006A0840(v9, v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      sub_100030BCC(&v27, v12);
      uuid_copy(uu, (const unsigned __int8 *)&v27);

    }
    if (!uuid_is_null(uu))
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      v13 = (uint64_t)off_1009778C0;
      v14 = sub_100030DF4(uu);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      LOBYTE(v13) = sub_10000AEE4(v13, v15, *(void **)(a1 + 96), *(void **)(a1 + 48));

      if ((v13 & 1) != 0)
      {
        v16 = sub_100030DF4(uu);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        v18 = sub_100013ABC(v17, *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));

        goto LABEL_20;
      }
      v20 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v23 = *(void **)(a1 + 96);
        v24 = *(_QWORD *)(a1 + 48);
        v25 = sub_100030DF4(uu);
        v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        v27 = 138412802;
        v28 = v23;
        v29 = 2112;
        v30 = v24;
        v31 = 2112;
        v32 = v26;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", (uint8_t *)&v27, 0x20u);

      }
    }
  }
  else
  {
    v19 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v27 = 138412290;
      v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Warning: Invalid parameters, cannot retrieve a peripheral with address \"%@\"", (uint8_t *)&v27, 0xCu);
    }
  }
  v18 = 0;
LABEL_20:
  reply = xpc_dictionary_create_reply(xdict);
  v22 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v18);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v22);
    xpc_release(v22);
  }
  if (v18)
    xpc_release(v18);

}

void sub_100543F70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100543FBC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v2;
  xpc_object_t value;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  NSObject *v25;
  int v26;
  unsigned __int8 *v27;
  id v28;
  uint64_t v29;
  void *v30;
  unsigned __int8 *v31;
  id v32;
  id v33;
  xpc_object_t v34;
  xpc_object_t reply;
  void *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  unsigned __int8 v41[8];
  unsigned __int8 src[8];
  char v43;
  uint8_t buf[4];
  unsigned __int8 *v45;
  __int16 v46;
  uint64_t v47;
  unsigned __int8 uu[8];
  uint64_t v49;

  v2 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C3A5C(value, "kCBAdvOptionInstanceRandomAddressBytes");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = objc_msgSend(v6, "copy");

  v8 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if (*(int *)(a1 + 80) < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100700FE8();
    goto LABEL_38;
  }
  *(_DWORD *)&v41[3] = 0;
  *(_DWORD *)v41 = 0;
  if (objc_msgSend(v7, "length") != (id)6 && objc_msgSend(v7, "length") != (id)7)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100700FBC();
    goto LABEL_38;
  }
  if (objc_msgSend(v7, "length") == (id)6)
  {
    v10 = 0;
    v41[0] = 1;
  }
  else
  {
    v10 = 1;
    objc_msgSend(v7, "getBytes:length:", v41, 1);
  }
  objc_msgSend(v7, "getBytes:range:", &v41[1], v10, 6);
  if (v9)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if (sub_100656AA4((uint64_t)off_1009778C0, v9))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700F5C();
LABEL_38:
      v34 = 0;
      goto LABEL_39;
    }
  }
  v39 = v7;
  v40 = v9;
  v11 = v2;
  v12 = a1;
  v13 = v41[1];
  v14 = v41[2];
  v15 = v41[3];
  v16 = v41[4];
  v17 = v41[5];
  v18 = v41[6];
  v19 = v41[0];
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  sub_10006B174((uint64_t)off_1009778C0);
  v20 = (v13 << 40) | (v14 << 32) | (v15 << 24) | (v16 << 16) | (v17 << 8) | v18 | (v19 << 48);
  *(_QWORD *)uu = 0;
  v49 = 0;
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100937780);
  v7 = v39;
  v9 = v40;
  a1 = v12;
  v21 = sub_1006A0840(qword_1009778B0, v20);
  v2 = v11;
  v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  sub_100030BCC(uu, v22);

  if (!uuid_is_null(uu))
  {
    v25 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_1003D2DB4(uu, src);
      v26 = v43;
      v27 = *(unsigned __int8 **)src;
      v28 = sub_100021770(v20);
      v29 = objc_claimAutoreleasedReturnValue(v28);
      v30 = (void *)v29;
      v31 = src;
      if (v26 < 0)
        v31 = v27;
      *(_DWORD *)buf = 136446466;
      v45 = v31;
      v46 = 2112;
      v47 = v29;
      _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Device %{public}s for address %@ already exists, cannot create a new one", buf, 0x16u);
      if (v43 < 0)
        operator delete(*(void **)src);

    }
    goto LABEL_38;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  sub_10003F924((uint64_t)off_1009778C0, v20, 0, 1u, 0, 0, src);
  uuid_copy(uu, src);
  if (!uuid_is_null(uu))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      v32 = sub_100021770(v20);
      v33 = (id)objc_claimAutoreleasedReturnValue(v32);
      sub_1003D2DB4(uu, src);
      sub_100700EB4();
    }
    goto LABEL_38;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009377A0);
  sub_10003F924((uint64_t)off_1009778C0, v20, 1u, 1u, v40, 0, src);
  uuid_copy(uu, src);
  if (uuid_is_null(uu))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      v23 = sub_100021770(v20);
      v24 = (id)objc_claimAutoreleasedReturnValue(v23);
      sub_1003D2DB4(uu, src);
      sub_100700F08();
    }
    goto LABEL_38;
  }
  v37 = sub_100030DF4(uu);
  v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
  v34 = sub_100013ABC(v38, *(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 80));

LABEL_39:
  reply = xpc_dictionary_create_reply(v2);
  v36 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v34);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v36);
    xpc_release(v36);
  }
  if (v34)
    xpc_release(v34);

}

void sub_100544514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1005445C4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  xpc_object_t reply;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  reply = 0;
  reply = xpc_dictionary_create_reply(xdict);
  if (v13[3])
  {
    v7 = sub_1000419F4();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10055ADD4;
    v8[3] = &unk_100937060;
    v11 = a1;
    v9 = v6;
    v10 = &v12;
    sub_100041A34(v7, v8);

  }
  _Block_object_dispose(&v12, 8);

}

void sub_1005446B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005446E4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  xpc_object_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  int v24;
  void *v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  void *__p;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint8_t v37[23];
  __int128 buf;
  uint64_t v39;

  if (*(_BYTE *)(a1 + 176))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070106C();
  }
  else if (*(_BYTE *)(a1 + 178))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100701040();
  }
  else
  {
    value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v4 = xpc_dictionary_get_value(value, "kCBMsgArgOptions");
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v33 = 0;
    v5 = sub_1000708B8(v4, "kCBConnectionEventMatchingOptionPeripheralUUIDs");
    v25 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v23 = v4;
    v24 = sub_100023B7C(v4, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBConnectionEventMatchingOptionServiceUUIDs");
    v12 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v25;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "handleRegisterForConnectionEventsWithOptionsMsg peripherals:%@", (uint8_t *)&buf, 0xCu);
    }
    buf = 0uLL;
    v39 = 0;
    v19 = v24;
    if (*(int *)(a1 + 80) > 0
      || (v20 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 384))(v20)))
    {
      v19 = sub_100023B7C(v23, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBConnectionEventMatchingOptionAllPeripherals");
      v21 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v37 = 134217984;
        *(_QWORD *)&v37[4] = v33;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "handleRegisterForConnectionEventsWithOptionsMsg allPeripherals:%lld", v37, 0xCu);
      }
    }
    if (!v19 && (*((_QWORD *)&buf + 1) != (_QWORD)buf || v33 || v25 && objc_msgSend(v25, "count")))
    {
      v22 = sub_1000419F4();
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3321888768;
      v26[2] = sub_10055B030;
      v26[3] = &unk_100937420;
      v28 = a1;
      v27 = v25;
      __p = 0;
      v30 = 0;
      v31 = 0;
      sub_1000B61B8((char *)&__p, (__int128 *)buf, *((__int128 **)&buf + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 2));
      v32 = v33;
      sub_100023D84(v22, v26);
      if (__p)
      {
        v30 = __p;
        operator delete(__p);
      }

    }
    if ((_QWORD)buf)
    {
      *((_QWORD *)&buf + 1) = buf;
      operator delete((void *)buf);
    }

    if (v34)
    {
      v35 = v34;
      operator delete(v34);
    }
  }
}

void sub_100544C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;
  void *v35;

  if (__p)
    operator delete(__p);

  v35 = *(void **)(v33 - 128);
  if (v35)
  {
    *(_QWORD *)(v33 - 120) = v35;
    operator delete(v35);
  }

  if (a32)
    operator delete(a32);
  _Unwind_Resume(a1);
}

void sub_100544CC4(uint64_t a1)
{
  uint64_t v1;

  if (*(_DWORD *)(a1 + 80) == 2)
  {
    v1 = sub_1000419F4();
    sub_100023D84(v1, &stru_100937470);
  }
}

void sub_100544CF4(uint64_t a1)
{
  uint64_t v1;

  if (*(_DWORD *)(a1 + 80) == 2)
  {
    v1 = sub_1000419F4();
    sub_100023D84(v1, &stru_100937450);
  }
}

void sub_100544D24(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  if (*(_DWORD *)(a1 + 80) == 2)
  {
    v2 = sub_1000419F4();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10055B224;
    v3[3] = &unk_100917378;
    v3[4] = a1;
    sub_100023D84(v2, v3);
  }
}

void sub_100544D90(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  if (*(_DWORD *)(a1 + 80) == 2)
  {
    v2 = sub_1000419F4();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10055B284;
    v3[3] = &unk_100917378;
    v3[4] = a1;
    sub_100023D84(v2, v3);
  }
}

void sub_100544DFC(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v3 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = sub_1000419F4();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1005599AC;
  v7[3] = &unk_1009172A0;
  v6 = v4;
  v8 = v6;
  sub_100023D84(v5, v7);

}

void sub_100544EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100544EC0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  NSObject *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  char v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  void *v20;
  void *__p[2];
  char v22;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1002C3A5C(value, "kCBMsgArgLeAFHMap");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (objc_msgSend(v5, "length") == (id)5)
  {
    v6 = qword_100999860;
    if (*(int *)(a1 + 80) <= 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_1000340DC(*(_QWORD *)(a1 + 128), (uint64_t)__p);
        sub_100701098();
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(*(_QWORD *)(a1 + 128), (uint64_t)__p);
        v7 = v22 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v18 = v7;
        v19 = 2112;
        v20 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "session %s is trying to set LE AFH Map to %@", buf, 0x16u);
        if (v22 < 0)
          operator delete(__p[0]);
      }
      v16 = 0;
      v15 = 0;
      objc_msgSend(v5, "getBytes:length:", &v15, 5);
      v14 = 0;
      sub_100043758(&v14);
      if (sub_10004C9BC(180, (uint64_t (*)())sub_100559A78, v8, v9, v10, v11, v12, v13, (uint64_t)&v15)&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_1000340DC(*(_QWORD *)(a1 + 128), (uint64_t)__p);
        sub_1007010E4();
      }
      sub_100043728(&v14);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(v5, "length");
    sub_1000340DC(*(_QWORD *)(a1 + 128), (uint64_t)buf);
    sub_100701148();
  }

}

void sub_1005450E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10054512C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD v20[6];
  void *v21;
  uint64_t v22;

  v21 = 0;
  v22 = 1;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v11 = sub_100023B7C(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v11)
  {
    sub_1004B1368(a1, 101, xdict, v11);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100701208();
  }
  v18 = sub_100023B7C(v21, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBScanOptionAppleFilterTargetCore");
  if (v18)
  {
    sub_1004B1368(a1, 101, xdict, v18);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007011A8();
  }
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    v19 = sub_1000419F4();
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100559B48;
    v20[3] = &unk_100918090;
    v20[4] = a1;
    v20[5] = v22;
    sub_100023D84(v19, v20);
  }
}

void sub_10054529C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  id v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[7];
  void *v25;
  uint64_t v26;
  uint64_t v27;

  v27 = 1;
  v25 = 0;
  v26 = 2;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v11 = sub_100023B7C(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v11)
  {
    sub_1004B1368(a1, 102, xdict, v11);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007012C8();
  }
  v18 = sub_100023B7C(v25, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBScanOptionAppleFilterTargetCore");
  if (v18)
  {
    sub_1004B1368(a1, 102, xdict, v18);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100701268();
  }
  v19 = sub_1000239F0(v25, "kCBScanOptionPeers");
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  v21 = sub_100649C7C(v20);
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    v22 = v21;
    v23 = sub_1000419F4();
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100559BA0;
    v24[3] = &unk_1009210D8;
    v24[4] = v26;
    v24[5] = v22;
    v24[6] = v27;
    sub_100023D84(v23, v24);
  }

}

void sub_100545454(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100545464(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  v29 = 1;
  v27 = 0;
  v28 = 2;
  v26 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v11 = sub_100023B7C(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v11)
  {
    sub_1004B1368(a1, 103, xdict, v11);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100701388();
  }
  v12 = sub_1000708B8(v27, "kCBScanOptionRemoveMultipleDupFilterEntryUUIDs");
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v20 = sub_100023B7C(v27, 0, v14, v15, v16, v17, v18, v19, (uint64_t)"kCBScanOptionAppleFilterTargetCore");
  if (v20)
  {
    sub_1004B1368(a1, 103, xdict, v20);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100701328();
  }
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    v21 = sub_1000419F4();
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100559BF8;
    v22[3] = &unk_1009183A0;
    v23 = v13;
    v24 = v29;
    v25 = v26;
    sub_100023D84(v21, v22);

  }
}

void sub_10054563C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_10054565C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD v20[6];
  uint64_t v21;
  void *v22;

  v21 = 0;
  v22 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v11 = sub_100023B7C(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v11)
  {
    sub_1004B1368(a1, 104, xdict, v11);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100701448();
  }
  v18 = sub_100023B7C(v22, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBScanOptionRemoveMultipleDupFilterEntryPacketType");
  if (v18)
  {
    sub_1004B1368(a1, 104, xdict, v18);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007013E8();
  }
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    v19 = sub_1000419F4();
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100559D78;
    v20[3] = &unk_100918090;
    v20[4] = a1;
    v20[5] = v21;
    sub_100023D84(v19, v20);
  }
}

void sub_1005457C8(uint64_t a1, void *a2)
{
  uint64_t v4;
  xpc_object_t reply;
  void *v6;
  _QWORD v7[6];
  __int16 v8;

  if (*(_DWORD *)(a1 + 80) == 2)
  {
    v8 = 0;
    v4 = sub_1000419F4();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100559DD0;
    v7[3] = &unk_100918090;
    v7[4] = (char *)&v8 + 1;
    v7[5] = &v8;
    sub_100023D84(v4, v7);
    reply = xpc_dictionary_create_reply(a2);
    if (reply)
    {
      v6 = reply;
      xpc_dictionary_set_uint64(reply, "kCBScanOptionTotalAdvMatchingRules", HIBYTE(v8));
      xpc_dictionary_set_uint64(v6, "kCBScanOptionRemainingAdvMatchingRules", v8);
      xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v6);
      xpc_release(v6);
    }
  }
}

void sub_10054588C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  id v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_1002C3A5C(value, "kCBMsgArgObjectDiscoveryData");
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8)
    v9 = v6 == 0;
  else
    v9 = 1;
  if (v9)
  {
    sub_1004B1368(a1, 85, xdict, 1);
  }
  else
  {
    v10 = sub_1000419F4();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10055B14C;
    v11[3] = &unk_100919500;
    v14 = a1;
    v12 = v6;
    v13 = v8;
    sub_100023D84(v10, v11);

  }
}

void sub_10054598C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1005459C0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD v62[11];
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v69 = 2;
  v70 = 1;
  v67 = 1;
  v68 = 1;
  v65 = 0;
  v66 = 1;
  v64 = 0;
  v63 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v11 = sub_100023B7C(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v11)
  {
    sub_1004B1368(a1, 106, xdict, v11);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100701748();
  }
  v18 = sub_100023B7C(v63, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBScanEnableOptionAppleFilterEnable");
  if (v18)
  {
    sub_1004B1368(a1, 106, xdict, v18);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007016E8();
  }
  v25 = sub_100023B7C(v63, 0, v19, v20, v21, v22, v23, v24, (uint64_t)"kCBScanEnableOptionAppleFilterType");
  if (v25)
  {
    sub_1004B1368(a1, 106, xdict, v25);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100701688();
  }
  v32 = sub_100023B7C(v63, 0, v26, v27, v28, v29, v30, v31, (uint64_t)"kCBScanOptionAppleFilterForceDups");
  if (v32)
  {
    sub_1004B1368(a1, 106, xdict, v32);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100701628();
  }
  v39 = sub_100023B7C(v63, 0, v33, v34, v35, v36, v37, v38, (uint64_t)"kCBScanOptionAppleFilterBypassFilterDuplicate");
  if (v39)
  {
    sub_1004B1368(a1, 106, xdict, v39);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007015C8();
  }
  v46 = sub_100023B7C(v63, 0, v40, v41, v42, v43, v44, v45, (uint64_t)"kCBScanOptionAppleFilterTargetCore");
  if (v46)
  {
    sub_1004B1368(a1, 106, xdict, v46);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100701568();
  }
  v53 = sub_100023B7C(v63, 0, v47, v48, v49, v50, v51, v52, (uint64_t)"kCBScanEnableOptionAppleFilterScanDuration");
  if (v53)
  {
    sub_1004B1368(a1, 106, xdict, v53);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100701508();
  }
  v60 = sub_100023B7C(v63, 0, v54, v55, v56, v57, v58, v59, (uint64_t)"kCBScanEnableOptionAppleFilterScanPeriod");
  if (v60)
  {
    sub_1004B1368(a1, 106, xdict, v60);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1007014A8();
  }
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    v61 = sub_1000419F4();
    v62[0] = _NSConcreteStackBlock;
    v62[1] = 3221225472;
    v62[2] = sub_100559E20;
    v62[3] = &unk_1009371C8;
    v62[4] = v70;
    v62[5] = v69;
    v62[6] = v68;
    v62[7] = v67;
    v62[8] = v66;
    v62[9] = v65;
    v62[10] = v64;
    sub_100023D84(v61, v62);
  }
}

void sub_100545DA4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  _QWORD v139[22];
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;

  v157 = 0;
  v158 = 1;
  v155 = 0;
  v156 = 1;
  v153 = 0;
  v154 = 0;
  v151 = 300;
  v152 = 300;
  v150 = 300;
  v148 = 30;
  v149 = 30;
  v146 = 1;
  v147 = 30;
  v144 = 30;
  v145 = 1;
  v142 = 30;
  v143 = 30;
  v141 = 0;
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    v140 = 0;
    value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v11 = sub_100023B7C(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
    if (v11)
    {
      sub_1004B1368(a1, 107, xdict, v11);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701E68();
    }
    v18 = sub_100023B7C(v140, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBSetScanParameterOwnAddress");
    if (v18)
    {
      sub_1004B1368(a1, 107, xdict, v18);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701E08();
    }
    v25 = sub_100023B7C(v140, 0, v19, v20, v21, v22, v23, v24, (uint64_t)"kCBSetScanParameterScanningFilterPolicy");
    if (v25)
    {
      sub_1004B1368(a1, 107, xdict, v25);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701DA8();
    }
    v32 = sub_100023B7C(v140, 0, v26, v27, v28, v29, v30, v31, (uint64_t)"kCBSetScanParameterScanPHY");
    if (v32)
    {
      sub_1004B1368(a1, 107, xdict, v32);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701D48();
    }
    v39 = sub_100023B7C(v140, 0, v33, v34, v35, v36, v37, v38, (uint64_t)"kCBSetScanParameterScanTypeLE1M");
    if (v39)
    {
      sub_1004B1368(a1, 107, xdict, v39);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701CE8();
    }
    v46 = sub_100023B7C(v140, 0, v40, v41, v42, v43, v44, v45, (uint64_t)"kCBSetScanParameterScanTypeLE2M");
    if (v46)
    {
      sub_1004B1368(a1, 107, xdict, v46);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701C88();
    }
    v53 = sub_100023B7C(v140, 0, v47, v48, v49, v50, v51, v52, (uint64_t)"kCBSetScanParameterScanTypeLECoded");
    if (v53)
    {
      sub_1004B1368(a1, 107, xdict, v53);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701C28();
    }
    v60 = sub_100023B7C(v140, 0, v54, v55, v56, v57, v58, v59, (uint64_t)"kCBSetScanParameterScanIntervalLE1M");
    if (v60)
    {
      sub_1004B1368(a1, 107, xdict, v60);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701BC8();
    }
    v67 = sub_100023B7C(v140, 0, v61, v62, v63, v64, v65, v66, (uint64_t)"kCBSetScanParameterScanIntervalLE2M");
    if (v67)
    {
      sub_1004B1368(a1, 107, xdict, v67);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701B68();
    }
    v74 = sub_100023B7C(v140, 0, v68, v69, v70, v71, v72, v73, (uint64_t)"kCBSetScanParameterScanIntervalLECoded");
    if (v74)
    {
      sub_1004B1368(a1, 107, xdict, v74);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701B08();
    }
    v81 = sub_100023B7C(v140, 0, v75, v76, v77, v78, v79, v80, (uint64_t)"kCBSetScanParameterScanWindowLE1M");
    if (v81)
    {
      sub_1004B1368(a1, 107, xdict, v81);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701AA8();
    }
    v88 = sub_100023B7C(v140, 0, v82, v83, v84, v85, v86, v87, (uint64_t)"kCBSetScanParameterScanWindowLE2M");
    if (v88)
    {
      sub_1004B1368(a1, 107, xdict, v88);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701A48();
    }
    v95 = sub_100023B7C(v140, 0, v89, v90, v91, v92, v93, v94, (uint64_t)"kCBSetScanParameterScanWindowLECoded");
    if (v95)
    {
      sub_1004B1368(a1, 107, xdict, v95);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007019E8();
    }
    v102 = sub_100023B7C(v140, 0, v96, v97, v98, v99, v100, v101, (uint64_t)"kCBSetScanParameterScanIsLegacy");
    if (v102)
    {
      sub_1004B1368(a1, 107, xdict, v102);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701988();
    }
    v109 = sub_100023B7C(v140, 0, v103, v104, v105, v106, v107, v108, (uint64_t)"kCBSetScanParameterScanMaxWindowLE1M");
    if (v109)
    {
      sub_1004B1368(a1, 107, xdict, v109);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701928();
    }
    v116 = sub_100023B7C(v140, 0, v110, v111, v112, v113, v114, v115, (uint64_t)"kCBSetScanParameterScanMaxWindowLE2M");
    if (v116)
    {
      sub_1004B1368(a1, 107, xdict, v116);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007018C8();
    }
    v123 = sub_100023B7C(v140, 0, v117, v118, v119, v120, v121, v122, (uint64_t)"kCBSetScanParameterScanMaxWindowLECoded");
    if (v123)
    {
      sub_1004B1368(a1, 107, xdict, v123);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701868();
    }
    v130 = sub_100023B7C(v140, 0, v124, v125, v126, v127, v128, v129, (uint64_t)"kCBSetScanParameterScanTargetCore");
    if (v130)
    {
      sub_1004B1368(a1, 107, xdict, v130);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100701808();
    }
    v137 = sub_100023B7C(v140, 0, v131, v132, v133, v134, v135, v136, (uint64_t)"kCBSetScanParameterPriorityConfiguration");
    if (v137)
    {
      sub_1004B1368(a1, 107, xdict, v137);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007017A8();
    }
    v138 = sub_1000419F4();
    v139[0] = _NSConcreteStackBlock;
    v139[1] = 3221225472;
    v139[2] = sub_10055AA1C;
    v139[3] = &unk_100937398;
    v139[4] = v155;
    v139[5] = v154;
    v139[6] = v153;
    v139[7] = v152;
    v139[8] = v151;
    v139[9] = v150;
    v139[10] = v149;
    v139[11] = v148;
    v139[12] = v147;
    v139[13] = v144;
    v139[14] = v143;
    v139[15] = v142;
    v139[16] = v158;
    v139[17] = v157;
    v139[18] = v156;
    v139[19] = v146;
    v139[20] = v145;
    v139[21] = v141;
    sub_100023D84(v138, v139);
  }
}

void sub_1005465F8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  xpc_object_t v19;
  xpc_object_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD v80[5];
  uint64_t (**v81)();
  unsigned int *v82;
  uint64_t (**v83)();
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  xpc_object_t xdicta;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (**v103)();
  unsigned int *v104;
  uint64_t (**v105)();
  unsigned int *v106;
  uint64_t v107;
  _BYTE v108[24];

  v106 = 0;
  v107 = 0;
  v104 = 0;
  v105 = &off_100918258;
  v102 = 0;
  v103 = &off_100918258;
  v100 = 1;
  v101 = 0;
  v98 = 1;
  v99 = 1;
  v97 = 2;
  v95 = 0;
  v96 = 0;
  xdicta = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v17 = sub_100023B7C(value, 0, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  if (v17)
  {
    sub_1004B1368(a1, 108, xdict, v17);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070226C();
  }
  v18 = sub_100023B7C(xdicta, 0, v11, v12, v13, v14, v15, v16, (uint64_t)"kCBScanOptionAppleFilterPuckType");
  if (v18)
  {
    sub_1004B1368(a1, 108, xdict, v18);
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100701FE8();
  }
  v19 = xpc_dictionary_get_value(xdicta, "kCBScanOptionAppleFilterPayload");
  if ((v19 && sub_100023A7C(v19, (uint64_t)&v105) || !sub_10003F8C4((uint64_t)&v105))
    && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100702240();
  }
  v20 = xpc_dictionary_get_value(xdicta, "kCBScanOptionAppleFilterPayloadMask");
  if ((v20 && sub_100023A7C(v20, (uint64_t)&v103) || !sub_10003F8C4((uint64_t)&v103))
    && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100702214();
  }
  v21 = sub_10003F8C4((uint64_t)&v105);
  v22 = sub_1000438A4();
  if (v21 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 3536))(v22)
    || (v23 = sub_10003F8C4((uint64_t)&v103),
        v24 = sub_1000438A4(),
        v23 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 3536))(v24)))
  {
    v31 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      v32 = sub_10003F8C4((uint64_t)&v105);
      v33 = sub_10003F8C4((uint64_t)&v103);
      sub_1007021C8((uint64_t)v108, v32, v33, v31);
    }
  }
  if (sub_100023B7C(xdicta, 0, v25, v26, v27, v28, v29, v30, (uint64_t)"kCBScanOptionAppleFilterRssi")
    && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100702168();
  }
  if (sub_100023B7C(xdicta, 0, v34, v35, v36, v37, v38, v39, (uint64_t)"kCBScanOptionAppleFilterForceDups")&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100702108();
  }
  if (sub_100023B7C(xdicta, 0, v40, v41, v42, v43, v44, v45, (uint64_t)"kCBScanOptionAppleFilterAddressType")&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_1007020A8();
  }
  if (sub_100023B7C(xdicta, 0, v46, v47, v48, v49, v50, v51, (uint64_t)"kCBScanOptionAppleFilterBypassFilterDuplicate")&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100702048();
  }
  if (sub_100023B7C(xdicta, 0, v52, v53, v54, v55, v56, v57, (uint64_t)"kCBScanOptionAppleFilterTargetCore")&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100701FE8();
  }
  if (sub_100023B7C(xdicta, 0, v58, v59, v60, v61, v62, v63, (uint64_t)"kCBScanOptionAppleFilterRSSIThresholdOrder")&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100701F88();
  }
  if (sub_100023B7C(xdicta, 0, v64, v65, v66, v67, v68, v69, (uint64_t)"kCBScanOption127dBmReport")
    && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100701F28();
  }
  if (sub_100023B7C(xdicta, 0, v70, v71, v72, v73, v74, v75, (uint64_t)"kCBScanOption27dBmReport")
    && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100701EC8();
  }
  v76 = sub_1000239F0(xdicta, "kCBScanOptionAppleFilterAddress");
  v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
  v78 = sub_100649C7C(v77);

  if (*(_DWORD *)(a1 + 80) == 2)
  {
    v79 = sub_1000419F4();
    v80[0] = _NSConcreteStackBlock;
    v80[1] = 3321888768;
    v80[2] = sub_10055AAC8;
    v80[3] = &unk_1009373B8;
    v80[4] = a1;
    v81 = &off_100918258;
    v82 = v106;
    if (v106)
      sub_10003C37C((uint64_t)v106);
    v83 = &off_100918258;
    v84 = v104;
    if (v104)
      sub_10003C37C((uint64_t)v104);
    v85 = v102;
    v86 = v107;
    v87 = v97;
    v88 = v78;
    v89 = v100;
    v90 = v99;
    v91 = v98;
    v92 = v96;
    v93 = v95;
    sub_100023D84(v79, v80);
    v83 = &off_100918258;
    if (v84)
      sub_100056AAC(v84);
    v81 = &off_100918258;
    if (v82)
      sub_100056AAC(v82);
  }
  v103 = &off_100918258;
  if (v104)
    sub_100056AAC(v104);
  v105 = &off_100918258;
  if (v106)
    sub_100056AAC(v106);
}

void sub_100546BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int *a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  unsigned int *v24;
  unsigned int *v25;

  if (a19)
    sub_100056AAC(a19);
  *(_QWORD *)(v22 - 136) = v21;
  v24 = *(unsigned int **)(v22 - 128);
  if (v24)
    sub_100056AAC(v24);
  *(_QWORD *)(v22 - 120) = v21;
  v25 = *(unsigned int **)(v22 - 112);
  if (v25)
    sub_100056AAC(v25);
  _Unwind_Resume(exception_object);
}

void sub_100546C44(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD v58[5];
  uint64_t (**v59)();
  unsigned int *v60;
  uint64_t (**v61)();
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  xpc_object_t xdicta;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (**v77)();
  unsigned int *v78;
  uint64_t (**v79)();
  unsigned int *v80;
  uint64_t v81;

  v80 = 0;
  v81 = 0;
  v78 = 0;
  v79 = &off_100918258;
  v76 = 0;
  v77 = &off_100918258;
  v74 = 1;
  v75 = 0;
  v72 = 1;
  v73 = 1;
  v71 = 2;
  xdicta = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_100023B7C(value, 0, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgOptions")
    && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100702564();
  }
  if (sub_100023B7C(xdicta, 0, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBScanOptionAppleFilterPuckType")
    && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070232C();
  }
  v16 = xpc_dictionary_get_value(xdicta, "kCBScanOptionAppleFilterPayload");
  if ((v16 && sub_100023A7C(v16, (uint64_t)&v79) || !sub_10003F8C4((uint64_t)&v79))
    && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100702538();
  }
  v17 = xpc_dictionary_get_value(xdicta, "kCBScanOptionAppleFilterPayloadMask");
  if ((v17 && sub_100023A7C(v17, (uint64_t)&v77) || !sub_10003F8C4((uint64_t)&v77))
    && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070250C();
  }
  if (sub_100023B7C(xdicta, 0, v18, v19, v20, v21, v22, v23, (uint64_t)"kCBScanOptionAppleFilterRssi")
    && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_1007024AC();
  }
  if (sub_100023B7C(xdicta, 0, v24, v25, v26, v27, v28, v29, (uint64_t)"kCBScanOptionAppleFilterForceDups")&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070244C();
  }
  if (sub_100023B7C(xdicta, 0, v30, v31, v32, v33, v34, v35, (uint64_t)"kCBScanOptionAppleFilterAddressType")&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_1007023EC();
  }
  if (sub_100023B7C(xdicta, 0, v36, v37, v38, v39, v40, v41, (uint64_t)"kCBScanOptionAppleFilterBypassFilterDuplicate")&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070238C();
  }
  if (sub_100023B7C(xdicta, 0, v42, v43, v44, v45, v46, v47, (uint64_t)"kCBScanOptionAppleFilterTargetCore")&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070232C();
  }
  if (sub_100023B7C(xdicta, 0, v48, v49, v50, v51, v52, v53, (uint64_t)"kCBScanOptionAppleFilterRSSIThresholdOrder")&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_1007022CC();
  }
  v54 = sub_1000239F0(xdicta, "kCBScanOptionAppleFilterAddress");
  v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
  v56 = sub_100649C7C(v55);

  if (*(_DWORD *)(a1 + 80) == 2)
  {
    v57 = sub_1000419F4();
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3321888768;
    v58[2] = sub_10055AC78;
    v58[3] = &unk_1009373E8;
    v58[4] = a1;
    v59 = &off_100918258;
    v60 = v80;
    if (v80)
      sub_10003C37C((uint64_t)v80);
    v61 = &off_100918258;
    v62 = v78;
    if (v78)
      sub_10003C37C((uint64_t)v78);
    v63 = v76;
    v64 = v81;
    v65 = v71;
    v66 = v56;
    v67 = v74;
    v68 = v73;
    v69 = v72;
    sub_100023D84(v57, v58);
    v61 = &off_100918258;
    if (v62)
      sub_100056AAC(v62);
    v59 = &off_100918258;
    if (v60)
      sub_100056AAC(v60);
  }
  v77 = &off_100918258;
  if (v78)
    sub_100056AAC(v78);
  v79 = &off_100918258;
  if (v80)
    sub_100056AAC(v80);
}

void sub_1005470C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int *a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  unsigned int *v24;
  unsigned int *v25;

  if (a19)
    sub_100056AAC(a19);
  *(_QWORD *)(v22 - 104) = v21;
  v24 = *(unsigned int **)(v22 - 96);
  if (v24)
    sub_100056AAC(v24);
  *(_QWORD *)(v22 - 88) = v21;
  v25 = *(unsigned int **)(v22 - 80);
  if (v25)
    sub_100056AAC(v25);
  _Unwind_Resume(exception_object);
}

void sub_100547134(uint64_t a1, void *a2)
{
  void *v3;
  xpc_object_t value;
  xpc_object_t array;
  void *v6;
  _BOOL4 v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  _QWORD applier[4];
  id v12;

  if (*(int *)(a1 + 80) > 1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    array = xpc_dictionary_get_array(value, "kCBMsgArgRules");
    v6 = array;
    if (!array
      || xpc_get_type(array) != (xpc_type_t)&_xpc_type_array
      || (applier[0] = _NSConcreteStackBlock,
          applier[1] = 3221225472,
          applier[2] = sub_10055FF98,
          applier[3] = &unk_100937680,
          v12 = v3,
          v7 = xpc_array_apply(v6, applier),
          v12,
          v7))
    {
      v8 = sub_1000419F4();
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_100560154;
      v9[3] = &unk_1009172A0;
      v10 = v3;
      sub_100023D84(v8, v9);

    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_1007025C4();
  }
}

void sub_10054727C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1005472AC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD v29[4];
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  v34 = 0;
  v35 = 0;
  v33 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    v19 = sub_100023B7C(value, 0, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgOptions");
    if (v19)
    {
      sub_1004B1368(a1, 113, xdict, v19);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007026B0();
    }
    v26 = sub_100023B7C(v33, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBDataLengthMaxTxOctets");
    if (v26)
    {
      sub_1004B1368(a1, 113, xdict, v26);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702650();
    }
    v27 = sub_100023B7C(v33, 0, v20, v21, v22, v23, v24, v25, (uint64_t)"kCBDataLengthMaxTxTime");
    if (v27)
    {
      sub_1004B1368(a1, 113, xdict, v27);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007025F0();
    }
    v28 = sub_1000419F4();
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_100559E6C;
    v29[3] = &unk_1009183A0;
    v30 = v12;
    v31 = v35;
    v32 = v34;
    sub_100023D84(v28, v29);

  }
}

void sub_1005474C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1005474E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  if (*(int *)(a1 + 80) > 1)
  {
    v2 = sub_1000438A4();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2776))(v2) & 1) != 0)
    {
      v3 = sub_1000419F4();
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472;
      v4[2] = sub_10055A168;
      v4[3] = &unk_100919528;
      v4[4] = &v5;
      v4[5] = a1;
      sub_100023D84(v3, v4);
      if (*((_DWORD *)v6 + 6) && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070273C();
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_10070279C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_100702710();
  }
  _Block_object_dispose(&v5, 8);
}

void sub_100547610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100547628(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[3];
  int v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  void *v23;

  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2020000000;
  v17 = 3;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_1000438A4();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 2776))(v7) & 1) != 0)
  {
    if (v6)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      if (sub_100656AA4((uint64_t)off_1009778C0, v6))
      {
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_100937800);
        if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v6) & 1) != 0)
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_1009377A0);
          if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
          {
            if (*(int *)(a1 + 80) > 1)
            {
              v9 = sub_1000419F4();
              v12[0] = _NSConcreteStackBlock;
              v12[1] = 3221225472;
              v12[2] = sub_10055A1CC;
              v12[3] = &unk_100929178;
              v14 = v16;
              v15 = a1;
              v13 = v6;
              sub_100023D84(v9, v12);

            }
            else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            {
              sub_1007027C8();
            }
            goto LABEL_25;
          }
          v8 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            v10 = *(_QWORD *)(a1 + 96);
            v11 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)buf = 138412802;
            v19 = v10;
            v20 = 2112;
            v21 = v11;
            v22 = 2112;
            v23 = v6;
            _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          sub_100700E28();
        }
        sub_1004B1368(a1, 115, xdict, 17);
        goto LABEL_25;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100700CF8();
    sub_1004B1368(a1, 115, xdict, 8);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070279C();
  }
LABEL_25:

  _Block_object_dispose(v16, 8);
}

void sub_100547950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100547990(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[3];
  int v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  void *v23;

  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2020000000;
  v17 = 3;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_1000438A4();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 2776))(v7) & 1) != 0)
  {
    if (v6)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      if (sub_100656AA4((uint64_t)off_1009778C0, v6))
      {
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_100937800);
        if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v6) & 1) != 0)
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_1009377A0);
          if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
          {
            if (*(int *)(a1 + 80) > 1)
            {
              v9 = sub_1000419F4();
              v12[0] = _NSConcreteStackBlock;
              v12[1] = 3221225472;
              v12[2] = sub_10055A2BC;
              v12[3] = &unk_100929178;
              v14 = v16;
              v15 = a1;
              v13 = v6;
              sub_100023D84(v9, v12);

            }
            else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            {
              sub_1007027C8();
            }
            goto LABEL_25;
          }
          v8 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            v10 = *(_QWORD *)(a1 + 96);
            v11 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)buf = 138412802;
            v19 = v10;
            v20 = 2112;
            v21 = v11;
            v22 = 2112;
            v23 = v6;
            _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          sub_100700E28();
        }
        sub_1004B1368(a1, 117, xdict, 17);
        goto LABEL_25;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100700CF8();
    sub_1004B1368(a1, 117, xdict, 8);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070279C();
  }
LABEL_25:

  _Block_object_dispose(v16, 8);
}

void sub_100547CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100547CF8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  _OWORD v25[2];
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  _BYTE buf[42];

  v27 = 0;
  v28 = &v27;
  v29 = 0x2020000000;
  v30 = 3;
  v26 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v13 = sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v28 + 6) = v13;
  v14 = sub_1000438A4();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 2776))(v14) & 1) != 0)
  {
    if (v6)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      if (sub_100656AA4((uint64_t)off_1009778C0, v6))
      {
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_100937800);
        if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v6) & 1) != 0)
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_1009377A0);
          if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
          {
            if (*(int *)(a1 + 80) > 1)
            {
              *(_QWORD *)&buf[8] = 0x10000;
              *(_QWORD *)&buf[16] = 0x100010001;
              *(_WORD *)buf = 0;
              *(_OWORD *)&buf[24] = xmmword_1007425F0;
              *(_WORD *)&buf[40] = 0;
              *(_QWORD *)&buf[2] = 0x200000000;
              v16 = sub_100023B7C(v26, 0, (uint64_t)"kCBCSWriteRemoteOptionalNadmSoundingCapability", (uint64_t)"kCBCSWriteRemoteOptionalCsSyncPhysSupported", (uint64_t)"kCBCSWriteRemoteOptionalSubfeaturesSupported", (uint64_t)"kCBCSWriteRemoteOptionalTIP1TimesSupported", (uint64_t)"kCBCSWriteRemoteOptionalTIP2TimesSupported", (uint64_t)"kCBCSWriteRemoteOptionalTFCSTimesSupported", (uint64_t)"kCBCSWriteRemoteNumConfigSupported");
              *((_DWORD *)v28 + 6) = v16;
              v17 = sub_1000419F4();
              v20[0] = _NSConcreteStackBlock;
              v20[1] = 3221225472;
              v20[2] = sub_10055A234;
              v20[3] = &unk_1009371F0;
              v23 = a1;
              v22 = &v27;
              v21 = v6;
              v24 = *(_OWORD *)buf;
              v25[0] = *(_OWORD *)&buf[16];
              *(_OWORD *)((char *)v25 + 10) = *(_OWORD *)&buf[26];
              sub_100023D84(v17, v20);

            }
            else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            {
              sub_1007027C8();
            }
            goto LABEL_25;
          }
          v15 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            v18 = *(_QWORD *)(a1 + 96);
            v19 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)buf = 138412802;
            *(_QWORD *)&buf[4] = v18;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v19;
            *(_WORD *)&buf[22] = 2112;
            *(_QWORD *)&buf[24] = v6;
            _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          sub_100700E28();
        }
        sub_1004B1368(a1, 117, xdict, 17);
        goto LABEL_25;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100700CF8();
    sub_1004B1368(a1, 117, xdict, 8);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070279C();
  }
LABEL_25:

  _Block_object_dispose(&v27, 8);
}

void sub_10054824C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100548290(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[3];
  int v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  void *v23;

  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2020000000;
  v17 = 3;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_1000438A4();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 2776))(v7) & 1) != 0)
  {
    if (v6)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      if (sub_100656AA4((uint64_t)off_1009778C0, v6))
      {
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_100937800);
        if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v6) & 1) != 0)
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_1009377A0);
          if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) != 0)
          {
            if (*(int *)(a1 + 80) > 1)
            {
              v9 = sub_1000419F4();
              v12[0] = _NSConcreteStackBlock;
              v12[1] = 3221225472;
              v12[2] = sub_10055A324;
              v12[3] = &unk_100929178;
              v14 = v16;
              v15 = a1;
              v13 = v6;
              sub_100023D84(v9, v12);

            }
            else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            {
              sub_1007027C8();
            }
            goto LABEL_25;
          }
          v8 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          {
            v10 = *(_QWORD *)(a1 + 96);
            v11 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)buf = 138412802;
            v19 = v10;
            v20 = 2112;
            v21 = v11;
            v22 = 2112;
            v23 = v6;
            _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          sub_100700E28();
        }
        sub_1004B1368(a1, 118, xdict, 17);
        goto LABEL_25;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100700CF8();
    sub_1004B1368(a1, 118, xdict, 8);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070279C();
  }
LABEL_25:

  _Block_object_dispose(v16, 8);
}

void sub_1005485B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1005485F8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  xpc_object_t v19;
  NSObject *v20;
  int v21;
  const void *v22;
  unsigned __int16 v23;
  NSObject *v24;
  unsigned __int16 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];
  id v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t (**v38)();
  unsigned int *v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint8_t buf[16];
  uint8_t v46[56];

  v41 = 0;
  v42 = &v41;
  v43 = 0x2020000000;
  v44 = 3;
  v40 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v13 = sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v42 + 6) = v13;
  v14 = sub_1000438A4();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 2776))(v14) & 1) != 0)
  {
    if (*((_DWORD *)v42 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700E88();
      v15 = 3;
LABEL_24:
      sub_1004B1368(a1, 119, xdict, v15);
      goto LABEL_25;
    }
    if (!v6)
      goto LABEL_49;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if (!sub_100656AA4((uint64_t)off_1009778C0, v6))
    {
LABEL_49:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700CF8();
      v15 = 8;
      goto LABEL_24;
    }
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v6) & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700E28();
      goto LABEL_30;
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
    {
      v17 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v28 = *(_QWORD *)(a1 + 96);
        v29 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)v46 = 138412802;
        *(_QWORD *)&v46[4] = v28;
        *(_WORD *)&v46[12] = 2112;
        *(_QWORD *)&v46[14] = v29;
        *(_WORD *)&v46[22] = 2112;
        *(_QWORD *)&v46[24] = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", v46, 0x20u);
      }
      goto LABEL_30;
    }
    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007027F4();
LABEL_30:
      sub_1004B1368(a1, 119, xdict, 17);
      goto LABEL_25;
    }
    memset(v46, 0, 18);
    *(_OWORD *)&v46[26] = 0u;
    *(_QWORD *)&v46[2] = 0x1000100010001;
    *(_WORD *)&v46[10] = 1;
    *(_WORD *)&v46[14] = 1;
    *(_DWORD *)&v46[18] = 0x10000;
    *(_QWORD *)&v46[22] = 0;
    *(_WORD *)&v46[30] = 0;
    *(_QWORD *)&v46[42] = 0x2000000000001;
    *(_WORD *)&v46[50] = 0;
    v18 = sub_100023B7C(v40, 0, (uint64_t)"kCBCSCreateConfigChannelMapRepetition", (uint64_t)"kCBCSCreateConfigChannelSelectiontype", (uint64_t)"kCBCSCreateConfigCh3cShape", (uint64_t)"kCBCSCreateConfigCh3cJump", (uint64_t)"kCBCSCreateConfigCompanionSignalEnable", v16, (uint64_t)"kCBCSCreateConfigConfigID");
    *((_DWORD *)v42 + 6) = v18;
    v19 = xpc_dictionary_get_value(v40, "kCBCSCreateConfigChannelMap");
    if (v19)
    {
      v38 = &off_100918258;
      v39 = 0;
      v20 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Raw bytes Channel map data found", buf, 2u);
      }
      v21 = sub_100023A7C(v19, (uint64_t)&v38);
      *((_DWORD *)v42 + 6) = v21;
      if (v21 && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007028D0();
      if ((unsigned __int16)sub_10003F8C4((uint64_t)&v38) > 0xAuLL)
      {
        v24 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          v25 = sub_10003F8C4((uint64_t)&v38);
          sub_100702880(v25, (uint64_t)buf, v24);
        }
      }
      else
      {
        v22 = (const void *)sub_10003EB18((uint64_t)&v38);
        v23 = sub_10003F8C4((uint64_t)&v38);
        memcpy(&v46[22], v22, v23);
      }
      v38 = &off_100918258;
      if (v39)
        sub_100056AAC(v39);
    }
    v26 = *((_DWORD *)v42 + 6);
    if (v26)
      goto LABEL_50;
    v27 = sub_1000419F4();
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10055A38C;
    v30[3] = &unk_100937218;
    v32 = &v41;
    v33 = a1;
    v31 = v6;
    v34 = *(_OWORD *)v46;
    v35 = *(_OWORD *)&v46[16];
    v36 = *(_OWORD *)&v46[32];
    v37 = *(_DWORD *)&v46[48];
    sub_100023D84(v27, v30);

    v26 = *((_DWORD *)v42 + 6);
    if (v26)
    {
LABEL_50:
      sub_1004B1368(a1, 119, xdict, v26);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702820();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070279C();
  }
LABEL_25:

  _Block_object_dispose(&v41, 8);
}

void sub_100548CBC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;

  *(_QWORD *)(v3 - 232) = v2;
  v5 = *(unsigned int **)(v3 - 224);
  if (v5)
    sub_100056AAC(v5);

  _Block_object_dispose((const void *)(v3 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_100548D20(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  id v28;
  uint64_t *v29;
  uint64_t v30;
  uint8_t v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  uint8_t buf[4];
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  void *v42;

  v33 = 0;
  v34 = &v33;
  v35 = 0x2020000000;
  v36 = 3;
  v32 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v13 = sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v34 + 6) = v13;
  v14 = sub_1000438A4();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 2776))(v14) & 1) != 0)
  {
    if (*((_DWORD *)v34 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700E88();
      v15 = 3;
LABEL_24:
      sub_1004B1368(a1, 120, xdict, v15);
      goto LABEL_25;
    }
    if (!v6)
      goto LABEL_37;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if (!sub_100656AA4((uint64_t)off_1009778C0, v6))
    {
LABEL_37:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700CF8();
      v15 = 8;
      goto LABEL_24;
    }
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v6) & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700E28();
      goto LABEL_30;
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
    {
      v22 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v25 = *(_QWORD *)(a1 + 96);
        v26 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412802;
        v38 = v25;
        v39 = 2112;
        v40 = v26;
        v41 = 2112;
        v42 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
      goto LABEL_30;
    }
    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702930();
LABEL_30:
      sub_1004B1368(a1, 120, xdict, 17);
      goto LABEL_25;
    }
    buf[0] = 0;
    v23 = sub_100023B7C(v32, 0, v16, v17, v18, v19, v20, v21, (uint64_t)"kCBCSCreateConfigConfigID");
    *((_DWORD *)v34 + 6) = v23;
    if (v23)
      goto LABEL_38;
    v24 = sub_1000419F4();
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_10055A41C;
    v27[3] = &unk_100929150;
    v29 = &v33;
    v30 = a1;
    v28 = v6;
    v31 = buf[0];
    sub_100023D84(v24, v27);

    v23 = *((_DWORD *)v34 + 6);
    if (v23)
    {
LABEL_38:
      sub_1004B1368(a1, 120, xdict, v23);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070295C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070279C();
  }
LABEL_25:

  _Block_object_dispose(&v33, 8);
}

void sub_100549140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  va_list va;

  va_start(va, a15);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100549184(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  id v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  void *v45;

  v36 = 0;
  v37 = &v36;
  v38 = 0x2020000000;
  v39 = 3;
  v35 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v33[3] = 0;
  v34 = 0;
  v33[0] = 0;
  v33[1] = v33;
  v33[2] = 0x2020000000;
  v13 = sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v37 + 6) = v13;
  v14 = sub_1000438A4();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 2776))(v14) & 1) != 0)
  {
    if (*((_DWORD *)v37 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700E88();
      v15 = 3;
LABEL_24:
      sub_1004B1368(a1, 121, xdict, v15);
      goto LABEL_25;
    }
    if (!v6)
      goto LABEL_37;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if (!sub_100656AA4((uint64_t)off_1009778C0, v6))
    {
LABEL_37:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700CF8();
      v15 = 8;
      goto LABEL_24;
    }
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v6) & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700E28();
      goto LABEL_30;
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
    {
      v22 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v25 = *(_QWORD *)(a1 + 96);
        v26 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412802;
        v41 = v25;
        v42 = 2112;
        v43 = v26;
        v44 = 2112;
        v45 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
      goto LABEL_30;
    }
    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007029BC();
LABEL_30:
      sub_1004B1368(a1, 121, xdict, 17);
      goto LABEL_25;
    }
    v23 = sub_100023B7C(v35, 0, v16, v17, v18, v19, v20, v21, (uint64_t)"kCBCSSetConfigID");
    *((_DWORD *)v37 + 6) = v23;
    if (v23)
      goto LABEL_38;
    v24 = sub_1000419F4();
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_10055A488;
    v27[3] = &unk_100937240;
    v31 = a1;
    v29 = &v36;
    v28 = v6;
    v30 = v33;
    v32 = v34;
    sub_100023D84(v24, v27);

    v23 = *((_DWORD *)v37 + 6);
    if (v23)
    {
LABEL_38:
      sub_1004B1368(a1, 121, xdict, v23);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1007029E8();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070279C();
  }
LABEL_25:
  _Block_object_dispose(v33, 8);

  _Block_object_dispose(&v36, 8);
}

void sub_1005495F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  uint64_t v18;
  va_list va;

  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v18 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100549640(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  id v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  _BYTE buf[24];
  void *v36;

  v31 = 0;
  v32 = &v31;
  v33 = 0x2020000000;
  v34 = 3;
  v30 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v13 = sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v32 + 6) = v13;
  v14 = sub_1000438A4();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 2776))(v14) & 1) != 0)
  {
    if (*((_DWORD *)v32 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700E88();
      v15 = 3;
LABEL_24:
      sub_1004B1368(a1, 122, xdict, v15);
      goto LABEL_25;
    }
    if (!v6)
      goto LABEL_37;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if (!sub_100656AA4((uint64_t)off_1009778C0, v6))
    {
LABEL_37:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700CF8();
      v15 = 8;
      goto LABEL_24;
    }
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v6) & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700E28();
      goto LABEL_30;
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
    {
      v19 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v22 = *(_QWORD *)(a1 + 96);
        v23 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v22;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v23;
        *(_WORD *)&buf[22] = 2112;
        v36 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
      goto LABEL_30;
    }
    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702A48();
LABEL_30:
      sub_1004B1368(a1, 122, xdict, 17);
      goto LABEL_25;
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[14] = 0;
    *(_WORD *)&buf[22] = 257;
    v20 = sub_100023B7C(v30, 0, (uint64_t)"kCBCSSNRControlInitiator", (uint64_t)sub_100023CBC, (uint64_t)"kCBCSSNRControlReflector", v16, v17, v18, (uint64_t)"kCBCSCreateConfigConfigID");
    *((_DWORD *)v32 + 6) = v20;
    if (v20)
      goto LABEL_38;
    v21 = sub_1000419F4();
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10055A500;
    v24[3] = &unk_100937268;
    v26 = &v31;
    v27 = a1;
    v25 = v6;
    v28 = *(_OWORD *)buf;
    v29 = *(_QWORD *)&buf[16];
    sub_100023D84(v21, v24);

    v20 = *((_DWORD *)v32 + 6);
    if (v20)
    {
LABEL_38:
      sub_1004B1368(a1, 122, xdict, v20);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702A74();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070279C();
  }
LABEL_25:

  _Block_object_dispose(&v31, 8);
}

void sub_100549B58(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100549B9C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  xpc_object_t v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  int v17;
  _QWORD v18[6];
  uint64_t (**v19)();
  unsigned int *v20;
  uint8_t buf[8];
  xpc_object_t xdicta;
  uint64_t (**v23)();
  unsigned int *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;

  v25 = 0;
  v26 = &v25;
  v27 = 0x2020000000;
  v28 = 3;
  v23 = &off_100918258;
  v24 = 0;
  xdicta = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v11 = sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v26 + 6) = v11;
  v12 = sub_1000438A4();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 2776))(v12) & 1) != 0)
  {
    if (*((_DWORD *)v26 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700E88();
      sub_1004B1368(a1, 123, xdict, 3);
      goto LABEL_8;
    }
    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702AD4();
      sub_1004B1368(a1, 123, xdict, 17);
      goto LABEL_8;
    }
    v13 = xpc_dictionary_get_value(xdicta, "kCBCSChannelClassification");
    if (!v13)
    {
      if (*((_DWORD *)v26 + 6))
      {
LABEL_25:
        v17 = *((_DWORD *)v26 + 6);
        if (v17)
        {
          sub_1004B1368(a1, 123, xdict, v17);
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            sub_100702B00();
        }
        goto LABEL_8;
      }
LABEL_21:
      v16 = sub_1000419F4();
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3321888768;
      v18[2] = sub_10055A584;
      v18[3] = &unk_100937290;
      v18[4] = &v25;
      v18[5] = a1;
      v19 = &off_100918258;
      v20 = v24;
      if (v24)
        sub_10003C37C((uint64_t)v24);
      sub_100023D84(v16, v18);
      v19 = &off_100918258;
      if (v20)
        sub_100056AAC(v20);
      goto LABEL_25;
    }
    v14 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Channel Classification data found", buf, 2u);
    }
    v15 = sub_100023A7C(v13, (uint64_t)&v23);
    *((_DWORD *)v26 + 6) = v15;
    if (!v15)
      goto LABEL_21;
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070279C();
  }
LABEL_8:
  v23 = &off_100918258;
  if (v24)
    sub_100056AAC(v24);
  _Block_object_dispose(&v25, 8);
}

void sub_100549E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned int *a20)
{
  uint64_t v20;
  uint64_t v21;
  unsigned int *v23;

  if (a20)
    sub_100056AAC(a20);
  *(_QWORD *)(v21 - 96) = v20;
  v23 = *(unsigned int **)(v21 - 88);
  if (v23)
    sub_100056AAC(v23);
  _Block_object_dispose((const void *)(v21 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100549EA4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _QWORD v24[4];
  id v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;

  v34 = 0;
  v35 = &v34;
  v36 = 0x2020000000;
  v37 = 3;
  v33 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v31 = 0;
  v32 = 0;
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v13 = sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
  *((_DWORD *)v35 + 6) = v13;
  v14 = sub_1000438A4();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 2776))(v14) & 1) != 0)
  {
    if (*((_DWORD *)v35 + 6))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        goto LABEL_9;
      goto LABEL_10;
    }
    v21 = sub_100023B7C(v33, 1, v15, v16, v17, v18, v19, v20, (uint64_t)"kCBCSDefaultSettingsRoleEnable");
    *((_DWORD *)v35 + 6) = v21;
    if (v21)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
LABEL_9:
        sub_100700E88();
LABEL_10:
      sub_1004B1368(a1, 124, xdict, 3);
      goto LABEL_11;
    }
    if (*(int *)(a1 + 80) > 1)
    {
      v22 = sub_1000419F4();
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10055A628;
      v24[3] = &unk_100937268;
      v26 = &v34;
      v27 = a1;
      v25 = v6;
      v28 = v32;
      v29 = v31;
      v30 = 20;
      sub_100023D84(v22, v24);

      v23 = *((_DWORD *)v35 + 6);
      if (v23)
      {
        sub_1004B1368(a1, 124, xdict, v23);
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_100702B00();
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702B60();
      sub_1004B1368(a1, 124, xdict, 17);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070279C();
  }
LABEL_11:

  _Block_object_dispose(&v34, 8);
}

void sub_10054A15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10054A194(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 3;
  v4 = sub_1000438A4();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 2776))(v4) & 1) != 0)
  {
    v5 = sub_1000419F4();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10055A69C;
    v7[3] = &unk_100919528;
    v7[4] = &v8;
    v7[5] = a1;
    sub_100023D84(v5, v7);
    v6 = *((_DWORD *)v9 + 6);
    if (v6)
    {
      sub_1004B1368(a1, 125, a2, v6);
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702B8C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070279C();
  }
  _Block_object_dispose(&v8, 8);
}

void sub_10054A2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10054A2C8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  void *v26;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 3;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_1000438A4();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 2776))(v7) & 1) != 0)
  {
    if (!v6)
      goto LABEL_32;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if (sub_100656AA4((uint64_t)off_1009778C0, v6))
    {
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_100937800);
      if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v6) & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_100700E28();
        goto LABEL_24;
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_1009377A0);
      if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
      {
        v8 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          v11 = *(_QWORD *)(a1 + 96);
          v12 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          v22 = v11;
          v23 = 2112;
          v24 = v12;
          v25 = 2112;
          v26 = v6;
          _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
        }
        goto LABEL_24;
      }
      if (*(int *)(a1 + 80) <= 1)
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_100702A48();
LABEL_24:
        sub_1004B1368(a1, 126, xdict, 17);
        goto LABEL_25;
      }
      v9 = sub_1000419F4();
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_10055A700;
      v13[3] = &unk_100929178;
      v15 = &v17;
      v16 = a1;
      v14 = v6;
      sub_100023D84(v9, v13);
      v10 = *((_DWORD *)v18 + 6);
      if (v10)
      {
        sub_1004B1368(a1, 126, xdict, v10);
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_100702A74();
      }

    }
    else
    {
LABEL_32:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700CF8();
      sub_1004B1368(a1, 126, xdict, 8);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070279C();
  }
LABEL_25:

  _Block_object_dispose(&v17, 8);
}

void sub_10054A634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10054A684(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  NSObject *v16;
  xpc_object_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (**v27)();
  unsigned int *v28;
  xpc_object_t xdicta;
  uint64_t (**v30)();
  unsigned int *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  void *v41;

  v32 = 0;
  v33 = &v32;
  v34 = 0x2020000000;
  v35 = 3;
  v30 = &off_100918258;
  v31 = 0;
  xdicta = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_1000438A4();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 2776))(v7) & 1) != 0)
  {
    v14 = sub_100023B7C(value, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgOptions");
    *((_DWORD *)v33 + 6) = v14;
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700E88();
      v15 = 3;
LABEL_24:
      sub_1004B1368(a1, 127, xdict, v15);
      goto LABEL_25;
    }
    if (!v6)
      goto LABEL_49;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if (!sub_100656AA4((uint64_t)off_1009778C0, v6))
    {
LABEL_49:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700CF8();
      v15 = 8;
      goto LABEL_24;
    }
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100937800);
    if ((sub_1002E1F6C((uint64_t)off_100978168, *(_QWORD *)(a1 + 128), v6) & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100700E28();
      goto LABEL_39;
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_1009377A0);
    if ((sub_10000AEE4((uint64_t)off_1009778C0, v6, *(void **)(a1 + 96), *(void **)(a1 + 48)) & 1) == 0)
    {
      v16 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v21 = *(_QWORD *)(a1 + 96);
        v22 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412802;
        v37 = v21;
        v38 = 2112;
        v39 = v22;
        v40 = 2112;
        v41 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
      goto LABEL_39;
    }
    if (*(int *)(a1 + 80) <= 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702A48();
LABEL_39:
      sub_1004B1368(a1, 127, xdict, 17);
      goto LABEL_25;
    }
    v17 = xpc_dictionary_get_value(xdicta, "kCBCSReflectorFAETable");
    if (!v17)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702BEC();
      goto LABEL_39;
    }
    v18 = sub_100023A7C(v17, (uint64_t)&v30);
    *((_DWORD *)v33 + 6) = v18;
    if (v18)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_100702C18();
    }
    else
    {
      v19 = sub_1000419F4();
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3321888768;
      v23[2] = sub_10055A768;
      v23[3] = &unk_1009372C8;
      v25 = &v32;
      v26 = a1;
      v24 = v6;
      v27 = &off_100918258;
      v28 = v31;
      if (v31)
        sub_10003C37C((uint64_t)v31);
      sub_100023D84(v19, v23);
      v27 = &off_100918258;
      if (v28)
        sub_100056AAC(v28);

      v20 = *((_DWORD *)v33 + 6);
      if (v20)
      {
        sub_1004B1368(a1, 127, xdict, v20);
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_100702A74();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070279C();
  }
LABEL_25:

  v30 = &off_100918258;
  if (v31)
    sub_100056AAC(v31);
  _Block_object_dispose(&v32, 8);
}

void sub_10054AB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int *a17, ...)
{
  void *v17;
  va_list va;

  va_start(va, a17);

  if (a17)
    sub_100056AAC(a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

